void UpdateGState(CGContext *a1, uint64_t a2)
{
  CGFloat v4;
  uint64_t vars8;

  CGContextSetLineWidth(a1, *(CGFloat *)(a2 + 232));
  CGContextSetLineWidthThreshold();
  CGContextSetLineCap(a1, *(CGLineCap *)(a2 + 252));
  CGContextSetLineJoin(a1, *(CGLineJoin *)(a2 + 248));
  CGContextSetMiterLimit(a1, *(CGFloat *)(a2 + 280));
  CGContextSetStrokeColorWithColor(a1, *(CGColorRef *)(a2 + 224));
  CGContextSetFillColorWithColor(a1, *(CGColorRef *)(a2 + 88));
  CGContextSetPatternPhase(a1, *(CGSize *)(a2 + 296));
  CGContextSetStrokeAdjust();
  CGContextSetShouldAntialias(a1, *(unsigned char *)(a2 + 321));
  v4 = *(double *)(a2 + 312);
  CGContextSetFlatness(a1, v4);
}

uint64_t DrawSoftMaskCommands(uint64_t result, CGContext *a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v3 = result;
      *(_OWORD *)&v7[8] = 0u;
      long long v8 = 0u;
      long long v5 = 0u;
      uint64_t v6 = 0;
      *(_OWORD *)v7 = xmmword_234416540;
      *(void *)&long long v8 = 0x3FF0000000000000;
      CGContextGetBaseCTM();
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 72));
      DrawPerspectiveSubcommands(a2, v3, 0, Count, (uint64_t)&v5);
      return CGContextSetBaseCTM();
    }
  }
  return result;
}

void ReleaseSoftMaskInfo(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void DrawPath(CGContext *a1, uint64_t a2, const CGPath *a3)
{
  UpdateGState(a1, a2);
  uint64_t v6 = *(const CGFloat **)(a2 + 256);
  if (v6)
  {
    CGContextSetLineDash(a1, *(CGFloat *)(a2 + 272), v6, *(void *)(a2 + 264));
    unsigned int v7 = *(_DWORD *)(a2 + 96);
  }
  else
  {
    CGContextSetLineDash(a1, 0.0, 0, 0);
    unsigned int v7 = *(_DWORD *)(a2 + 96);
    if (v7 > 4) {
      return;
    }
  }
  switch(v7)
  {
    case 0u:
      CGContextAddPath(a1, a3);
      CGContextFillPath(a1);
      return;
    case 1u:
      CGContextAddPath(a1, a3);
      CGContextEOFillPath(a1);
      return;
    case 2u:
      goto LABEL_14;
    case 3u:
      CGContextAddPath(a1, a3);
      CGContextFillPath(a1);
      goto LABEL_14;
    case 4u:
      CGContextAddPath(a1, a3);
      CGContextEOFillPath(a1);
LABEL_14:
      CGContextAddPath(a1, a3);
      CGContextStrokePath(a1);
      break;
    default:
      return;
  }
}

void CGImageDescriptionRelease(uint64_t a1)
{
  v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  CGColorSpaceRelease(*(CGColorSpaceRef *)(a1 + 24));
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v3 = *(void **)(a1 + 64);
    free(v3);
  }
}

uint64_t DecodeCGImage(uint64_t a1, CGImageRef *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unsigned __int8 v20 = 0;
  BOOL v4 = CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v20, 1uLL);
  int v5 = v20;
  if (v4 && v20 < 3u)
  {
    *a2 = 0;
    if (!v5) {
      return 1;
    }
    if (v5 != 2)
    {
      if (v5 == 1 && !DecodeBaseCGImage(a1, a2)) {
        return 0;
      }
      return *a2 != 0;
    }
    CGImageRef image = 0;
    if (DecodeBaseCGImage(a1, &image))
    {
      *(void *)mask = 0;
      BOOL v8 = DecodeBaseCGImage(a1, (CGImageRef *)mask);
      v9 = image;
      if (v8)
      {
        v10 = *(CGImage **)mask;
        *a2 = CGImageCreateWithMask(image, *(CGImageRef *)mask);
        CGImageRelease(v9);
        CGImageRelease(v10);
        return *a2 != 0;
      }
      CGImageRelease(image);
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        uint64_t v11 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        uint64_t v11 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
      }
      __int16 v18 = 0;
      v14 = "Failed to decode image's mask";
      v15 = (uint8_t *)&v18;
      v16 = v11;
      uint32_t v17 = 2;
    }
    else
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        uint64_t v13 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        uint64_t v13 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
      }
      *(_DWORD *)mask = 136315650;
      *(void *)&mask[4] = "Failed to decode image's base image";
      __int16 v22 = 2080;
      v23 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext/CGPerspectiveContext/CGPerspectiveImageCoder.c";
      __int16 v24 = 1024;
      int v25 = 626;
      v14 = "%s in file %s (line %i)";
      v15 = mask;
      v16 = v13;
      uint32_t v17 = 28;
    }
    _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v14, v15, v17);
    return 0;
  }
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    v12 = __CGPerspectiveOSLog_log;
    uint64_t result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_21:
      *(_DWORD *)mask = 136315650;
      *(void *)&mask[4] = "Failed to decode image type";
      __int16 v22 = 2080;
      v23 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext/CGPerspectiveContext/CGPerspectiveImageCoder.c";
      __int16 v24 = 1024;
      int v25 = 608;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "%s in file %s (line %i)", mask, 0x1Cu);
      return 0;
    }
  }
  else
  {
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    v12 = __CGPerspectiveOSLog_log;
    uint64_t result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if (result) {
      goto LABEL_21;
    }
  }
  return result;
}

BOOL DecodeBaseCGImage(uint64_t a1, CGImageRef *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *a2 = 0;
  CGSize v4 = *(CGSize *)(MEMORY[0x263F001A8] + 16);
  v30.origin = (CGPoint)*MEMORY[0x263F001A8];
  v30.size = v4;
  uint64_t v5 = *(void *)(a1 + 16);
  buf[0] = 0;
  if (!CGPerspectiveDataDecode_bytes(v5, buf, 1uLL)) {
    return 0;
  }
  int v6 = buf[0];
  if (buf[0])
  {
    BOOL result = CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v30, 0x20uLL);
    if (!result) {
      return result;
    }
  }
  uint64_t v8 = *(void *)(a1 + 16);
  buf[0] = 0;
  if (!CGPerspectiveDataDecode_bytes(v8, buf, 1uLL))
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      uint64_t v11 = __CGPerspectiveOSLog_log;
      BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      uint64_t v11 = __CGPerspectiveOSLog_log;
      BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
    }
    *(_WORD *)buf = 0;
    v12 = "Failed to decode shared memory flag";
LABEL_15:
    _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v12, buf, 2u);
    return 0;
  }
  if (!buf[0])
  {
    *a2 = 0;
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)bytesPerRow = 0u;
    *(_OWORD *)decode = 0u;
    *(_OWORD *)data = 0u;
    long long v39 = 0u;
    *(_OWORD *)buf = 0u;
    uint64_t v13 = *(void *)(a1 + 16);
    size[0] = 0;
    if (!CGPerspectiveDataDecode_bytes(v13, size, 1uLL)) {
      return 0;
    }
    buf[8] = size[0] != 0;
    if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &v39, 4uLL)) {
      return 0;
    }
    if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), (char *)&v39 + 4, 4uLL)) {
      return 0;
    }
    if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), (char *)&v39 + 8, 4uLL)) {
      return 0;
    }
    if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), (char *)&v39 + 12, 4uLL)) {
      return 0;
    }
    if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), bytesPerRow, 4uLL)) {
      return 0;
    }
    if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), (char *)bytesPerRow + 4, 4uLL)) {
      return 0;
    }
    if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &bytesPerRow[1], 1uLL)) {
      return 0;
    }
    if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), &decode[1], 1uLL)) {
      return 0;
    }
    uint64_t v14 = *(void *)(a1 + 16);
    size[0] = 0;
    if (!CGPerspectiveDataDecode_bytes(v14, size, 1uLL)) {
      return 0;
    }
    int v29 = v6;
    if (size[0])
    {
      *(void *)size = 0;
      if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), size, 8uLL)) {
        return 0;
      }
      unint64_t v15 = *(void *)size;
      if (*(uint64_t *)size < 1
        || (uint64_t v16 = *(void *)(a1 + 16), v15 > CFDataGetLength(*(CFDataRef *)v16) - *(void *)(v16 + 8)))
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          uint64_t v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          uint64_t v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
        }
        __int16 v31 = 0;
        __int16 v18 = "Inconsistent or out of bounds read for image's decode array";
        goto LABEL_33;
      }
      v21 = (CGFloat *)malloc_type_malloc(*(size_t *)size, 0xD94F3E7CuLL);
      decode[0] = v21;
      LOBYTE(v44) = 1;
      if (!v21)
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          uint64_t v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          uint64_t v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
        }
        __int16 v31 = 0;
        __int16 v18 = "Failed to malloc image's decode array";
LABEL_33:
        v19 = (uint8_t *)&v31;
LABEL_68:
        uint64_t v26 = v17;
        uint32_t v27 = 2;
LABEL_69:
        _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, v18, v19, v27);
        return 0;
      }
      if (!CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), v21, *(size_t *)size)) {
        return 0;
      }
    }
    if (!buf[8] && !DecodeCGColorSpace(a1, &data[1])) {
      return 0;
    }
    if (!CGPerspectiveDataDecode_CFData(*(void *)(a1 + 16), data))
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        uint64_t v28 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        uint64_t v28 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
      }
      *(_DWORD *)size = 136315650;
      *(void *)&size[4] = "Failed to read pixel buffer";
      __int16 v33 = 2080;
      v34 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/CGPerspectiveContext/CGPerspectiveContext/CGPerspectiveImageCoder.c";
      __int16 v35 = 1024;
      int v36 = 234;
      __int16 v18 = "%s in file %s (line %i)";
      v19 = size;
      uint64_t v26 = v28;
      uint32_t v27 = 28;
      goto LABEL_69;
    }
    if (data[0])
    {
      __int16 v22 = CGDataProviderCreateWithCFData(data[0]);
      if (!v22)
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          uint64_t v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          uint64_t v17 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            return 0;
          }
        }
        *(_WORD *)size = 0;
        goto LABEL_67;
      }
      v23 = v22;
      if (buf[8]) {
        CGImageRef v24 = CGImageMaskCreate(v39, DWORD1(v39), HIDWORD(v39), DWORD2(v39), LODWORD(bytesPerRow[0]), v22, decode[0], LOBYTE(decode[1]) != 0);
      }
      else {
        CGImageRef v24 = CGImageCreate(v39, DWORD1(v39), HIDWORD(v39), DWORD2(v39), LODWORD(bytesPerRow[0]), data[1], HIDWORD(bytesPerRow[0]), v22, decode[0], LOBYTE(decode[1]) != 0, (CGColorRenderingIntent)LOBYTE(bytesPerRow[1]));
      }
      int v25 = v24;
      CGDataProviderRelease(v23);
      CGImageDescriptionRelease((uint64_t)buf);
      if (v25)
      {
        v9 = v25;
        *a2 = v25;
        if (!v29) {
          return 1;
        }
        goto LABEL_10;
      }
    }
    else
    {
      CGImageDescriptionRelease((uint64_t)buf);
    }
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      uint64_t v17 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      uint64_t v17 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    *(_WORD *)size = 0;
LABEL_67:
    v19 = size;
    goto LABEL_68;
  }
  if (*(void *)(a1 + 40))
  {
    *(void *)size = 0;
    if (CGPerspectiveDataDecode_bytes(*(void *)(a1 + 16), size, 8uLL))
    {
      v9 = CGPerspectiveDecodingCacheCopyImage(*(void *)(a1 + 40), *(uint64_t *)size);
      if (v9)
      {
        *a2 = v9;
        if (!v6) {
          return 1;
        }
LABEL_10:
        CGImageRef v10 = CGImageCreateWithImageInRect(v9, v30);
        CGImageRelease(*a2);
        *a2 = v10;
        return 1;
      }
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        unsigned __int8 v20 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        unsigned __int8 v20 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
      }
      *(_DWORD *)buf = 134217984;
      *(void *)&buf[4] = *(void *)size;
      _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "Failed to find cached image ID %llu", buf, 0xCu);
    }
    return 0;
  }
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    uint64_t v11 = __CGPerspectiveOSLog_log;
    BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    goto LABEL_36;
  }
  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
  uint64_t v11 = __CGPerspectiveOSLog_log;
  BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
  if (result)
  {
LABEL_36:
    *(_WORD *)buf = 0;
    v12 = "Asked to decode a cached image, but has no cache";
    goto LABEL_15;
  }
  return result;
}

BOOL DecodeCGImageHeader(uint64_t a1, CFDataRef *a2, void *a3)
{
  kern_return_t v7;
  mach_error_t v8;
  NSObject *v9;
  BOOL v10;
  CFAllocatorRef v12;
  CFDataRef v13;
  CFTypeRef *v14;
  char *v15;
  uint64_t v16;
  mach_vm_address_t address;
  CFAllocatorContext context;
  uint64_t v19;

  v19 = *MEMORY[0x263EF8340];
  address = 0;
  vm_map_t v5 = *MEMORY[0x263EF8960];
  mem_entry_name_port_t Port = CAMachPortGetPort();
  unsigned int v7 = mach_vm_map(v5, &address, 0xFA00uLL, 0, 1048577, Port, 0, 0, 1, 1, 2u);
  if (v7)
  {
    uint64_t v8 = v7;
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v9 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v9 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    unint64_t v15 = mach_error_string(v8);
    LODWORD(context.version) = 136315138;
    *(CFIndex *)((char *)&context.version + 4) = (CFIndex)v15;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Failed to extract header port: %s", (uint8_t *)&context, 0xCu);
    return 0;
  }
  context.version = 0;
  memset(&context.retain, 0, 40);
  context.info = (void *)64000;
  context.deallocate = (CFAllocatorDeallocateCallBack)deallocate_vm_region;
  context.preferredSize = 0;
  v12 = CFAllocatorCreate(0, &context);
  *a2 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)address, 64000, v12);
  CFRelease(v12);
  uint64_t v13 = *a2;
  uint64_t v14 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  const char *v14 = v13;
  CFRetain(v13);
  v14[1] = 0;
  uint64_t v16 = 0;
  CGImageRef v10 = CGPerspectiveDataDecode_bytes((uint64_t)v14, &v16, 8uLL) && CGPerspectiveDataDecode_bytes((uint64_t)v14, a3, 8uLL);
  CFRelease(*v14);
  free(v14);
  return v10;
}

uint64_t deallocate_vm_region(uint64_t a1, uint64_t a2)
{
  return mach_vm_deallocate(*MEMORY[0x263EF8960], -*MEMORY[0x263EF8AF8] & a1, (a2 + *MEMORY[0x263EF8AF8] - 1) & -*MEMORY[0x263EF8AF8]);
}

CGDataProvider *DecodeCGImageBody(const void *a1, uint64_t a2, CGImageRef *a3)
{
  kern_return_t v10;
  mach_error_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  size_t *p_context;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  CGDataProvider *result;
  CFAllocatorRef v20;
  CFAllocatorRef v21;
  CFDataRef v22;
  CFDataRef *v23;
  void *v24;
  const CFDictionaryKeyCallBacks *v25;
  const CFDictionaryValueCallBacks *v26;
  CFIndex v27;
  BOOL v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  void *v38;
  CGDataProvider *v39;
  CGImageRef v40;
  CGImageRef v41;
  __int16 v42;
  size_t size[2];
  void v44[2];
  CFIndex length[2];
  long long v46;
  long long v47;
  long long v48;
  mach_vm_address_t address;
  long long context;
  long long context_16;
  long long context_32;
  _OWORD context_48[4];
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x263EF8340];
  vm_map_t v5 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  *vm_map_t v5 = a1;
  CFRetain(a1);
  v5[1] = 0;
  length[0] = 0;
  BOOL v6 = CGPerspectiveDataDecode_bytes((uint64_t)v5, length, 8uLL);
  CFRelease(*v5);
  free(v5);
  if (!v6)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      __int16 v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      __int16 v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    LOWORD(context) = 0;
    uint64_t v14 = "Failed to extract buffer size hint";
    p_context = (size_t *)&context;
    goto LABEL_52;
  }
  address = 0;
  vm_map_t v7 = *MEMORY[0x263EF8960];
  mach_vm_size_t v8 = length[0];
  mem_entry_name_port_t Port = CAMachPortGetPort();
  CGImageRef v10 = mach_vm_map(v7, &address, v8, 0, 1048577, Port, 0, 0, 1, 1, 2u);
  if (v10)
  {
    uint64_t v11 = v10;
    if (__CGPerspectiveOSLog_onceToken != -1)
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v12 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      goto LABEL_5;
    }
    v12 = __CGPerspectiveOSLog_log;
    if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
    {
LABEL_5:
      uint64_t v13 = mach_error_string(v11);
      LODWORD(context) = 136315138;
      *(void *)((char *)&context + 4) = v13;
      uint64_t v14 = "Failed to extract buffer port: %s";
      p_context = (size_t *)&context;
      uint64_t v16 = v12;
      uint64_t v17 = 12;
LABEL_53:
      _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v14, (uint8_t *)p_context, v17);
    }
    return 0;
  }
  context_32 = 0u;
  *(void *)&context_48[0] = 0;
  *(void *)&context = 0;
  context_16 = 0u;
  *((void *)&context + 1) = length[0];
  *((void *)&context_48[0] + 1) = deallocate_vm_region;
  *(void *)&context_48[1] = 0;
  unsigned __int8 v20 = CFAllocatorCreate(0, (CFAllocatorContext *)&context);
  v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  __int16 v22 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], (const UInt8 *)address, length[0], v20);
  CFRelease(v20);
  v47 = 0u;
  v48 = 0u;
  *(_OWORD *)length = 0u;
  v46 = 0u;
  v23 = (CFDataRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  CGDataProvider *v23 = (CFDataRef)a1;
  CFRetain(a1);
  v23[1] = 0;
  *(void *)&v46 = v23;
  CGImageRef v24 = malloc_type_calloc(0x20uLL, 1uLL, 0xD44EDC0AuLL);
  int v25 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  uint64_t v26 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  *CGImageRef v24 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  v24[1] = CFDictionaryCreateMutable(v21, 0, v25, v26);
  v24[2] = CFDictionaryCreateMutable(v21, 0, v25, v26);
  v24[3] = 0;
  *(void *)&v48 = v24;
  v54 = 0;
  memset(context_48, 0, sizeof(context_48));
  context_32 = 0u;
  context = 0u;
  context_16 = (unint64_t)v22;
  address = 0;
  BOOL result = (CGDataProvider *)CGPerspectiveDataDecode_bytes((uint64_t)v23, &address, 8uLL);
  if (!result) {
    return result;
  }
  uint32_t v27 = CFDataGetLength(v22);
  if (v27 != address)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      __int16 v18 = __CGPerspectiveOSLog_log;
      BOOL result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      __int16 v18 = __CGPerspectiveOSLog_log;
      BOOL result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
    }
    LOWORD(v44[0]) = 0;
    uint64_t v14 = "Image buffer didn't match expected length";
    p_context = v44;
    goto LABEL_52;
  }
  v44[0] = 0;
  uint64_t v28 = CGPerspectiveDataDecode_bytes((uint64_t)v23, v44, 8uLL);
  LOBYTE(size[0]) = 0;
  int v29 = CGPerspectiveDataDecode_bytes((uint64_t)v23, size, 1uLL);
  if (v29) {
    BYTE8(context) = LOBYTE(size[0]) != 0;
  }
  CGRect v30 = v28 & CGPerspectiveDataDecode_bytes((uint64_t)v23, &context_32, 4uLL);
  __int16 v31 = CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)&context_32 + 4, 4uLL);
  v32 = v30 & v31 & CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)&context_32 + 8, 4uLL);
  __int16 v33 = CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)&context_32 + 12, 4uLL);
  v34 = v33 & CGPerspectiveDataDecode_bytes((uint64_t)v23, context_48, 4uLL);
  __int16 v35 = v32 & v34 & CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)context_48 + 4, 4uLL);
  int v36 = CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)context_48 + 8, 1uLL);
  if ((v29 & v36 & CGPerspectiveDataDecode_bytes((uint64_t)v23, (char *)&context_48[1] + 8, 1uLL) & v35 & 1) == 0)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      __int16 v18 = __CGPerspectiveOSLog_log;
      BOOL result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      __int16 v18 = __CGPerspectiveOSLog_log;
      BOOL result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
    }
    LOWORD(size[0]) = 0;
    uint64_t v14 = "Failed to parse image description header.";
    p_context = size;
LABEL_52:
    uint64_t v16 = v18;
    uint64_t v17 = 2;
    goto LABEL_53;
  }
  LOBYTE(size[0]) = 0;
  if (!CGPerspectiveDataDecode_bytes((uint64_t)v23, size, 1uLL)) {
    return 0;
  }
  if (!LOBYTE(size[0])) {
    goto LABEL_30;
  }
  size[0] = 0;
  if (!CGPerspectiveDataDecode_bytes((uint64_t)v23, size, 8uLL)) {
    return 0;
  }
  v37 = CFDataGetLength(*v23) - (void)v23[1];
  if (v37 < size[0])
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      __int16 v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      __int16 v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    long long v42 = 0;
    uint64_t v14 = "Out of bounds read for image's decode array";
    goto LABEL_49;
  }
  v38 = malloc_type_malloc(size[0], 0x1C6577D3uLL);
  *(void *)&context_48[1] = v38;
  LOBYTE(v54) = 1;
  if (!v38)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      __int16 v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      __int16 v18 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
    }
    long long v42 = 0;
    uint64_t v14 = "Failed to malloc image's decode array";
LABEL_49:
    p_context = (size_t *)&v42;
    goto LABEL_52;
  }
  BOOL result = (CGDataProvider *)CGPerspectiveDataDecode_bytes((uint64_t)v23, v38, size[0]);
  if (result)
  {
LABEL_30:
    if (!BYTE8(context))
    {
      if (!DecodeCGColorSpace((uint64_t)length, (CGColorSpaceRef *)&context_16 + 1)
        || !*((void *)&context_16 + 1))
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          __int16 v18 = __CGPerspectiveOSLog_log;
          BOOL result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          __int16 v18 = __CGPerspectiveOSLog_log;
          BOOL result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
        }
        LOWORD(size[0]) = 0;
        uint64_t v14 = "Failed to decode correct color space resource index for CGImageRef";
        p_context = size;
        goto LABEL_52;
      }
      v23 = (CFDataRef *)v46;
    }
    CFRelease(*v23);
    free(v23);
    CGPerspectiveColorCacheRelease((CFTypeRef *)v48);
    BOOL result = CGDataProviderCreateWithCFData((CFDataRef)context_16);
    if (result)
    {
      long long v39 = result;
      if (BYTE8(context)) {
        v40 = CGImageMaskCreate(context_32, DWORD1(context_32), HIDWORD(context_32), DWORD2(context_32), LODWORD(context_48[0]), result, *(const CGFloat **)&context_48[1], BYTE8(context_48[1]) != 0);
      }
      else {
        v40 = CGImageCreate(context_32, DWORD1(context_32), HIDWORD(context_32), DWORD2(context_32), LODWORD(context_48[0]), *((CGColorSpaceRef *)&context_16 + 1), DWORD1(context_48[0]), result, *(const CGFloat **)&context_48[1], BYTE8(context_48[1]) != 0, (CGColorRenderingIntent)BYTE8(context_48[0]));
      }
      v41 = v40;
      CGDataProviderRelease(v39);
      CGImageDescriptionRelease((uint64_t)&context);
      *a3 = v41;
      if (v41) {
        return (CGDataProvider *)1;
      }
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        __int16 v18 = __CGPerspectiveOSLog_log;
        BOOL result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (result)
        {
LABEL_42:
          LOWORD(size[0]) = 0;
          p_context = size;
          goto LABEL_52;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        __int16 v18 = __CGPerspectiveOSLog_log;
        BOOL result = (CGDataProvider *)os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (result) {
          goto LABEL_42;
        }
      }
    }
  }
  return result;
}

void CGPerspectiveCacheFinalize(uint64_t a1)
{
  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 32);
  if (v3)
  {
    context[0] = MEMORY[0x263EF8330];
    context[1] = 0x40000000;
    context[2] = __CGPerspectiveCacheFinalize_block_invoke;
    context[3] = &__block_descriptor_tmp_5_1;
    context[4] = a1;
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)DictionaryApplierFunction, context);
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 40);
  if (v4)
  {
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 0x40000000;
    v5[2] = __CGPerspectiveCacheFinalize_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_6_1;
    v5[4] = a1;
    CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)DictionaryApplierFunction, v5);
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
  os_unfair_lock_unlock(v2);
}

__CFString *CGPerspectiveCacheCreateDebugDesc(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
  CFStringAppend(Mutable, @"CGPerspectiveCache:\n");
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (*(void *)(a1 + 32))
  {
    CFStringAppend(Mutable, @" - Encoding cache:\n");
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 32);
    context[0] = MEMORY[0x263EF8330];
    context[1] = 0x40000000;
    context[2] = __CGPerspectiveCacheCreateDebugDesc_block_invoke;
    context[3] = &__block_descriptor_tmp_16_2;
    context[4] = Mutable;
    CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)DictionaryApplierFunction, context);
  }
  if (*(void *)(a1 + 40))
  {
    CFStringAppend(Mutable, @" - Decoding cache:\n");
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 40);
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 0x40000000;
    v6[2] = __CGPerspectiveCacheCreateDebugDesc_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_20_1;
    v6[4] = Mutable;
    CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)DictionaryApplierFunction, v6);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  return Mutable;
}

uint64_t __CGPerspectiveCacheTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CGPerspectiveCacheTypeID_id = result;
  return result;
}

uint64_t CGPerspectiveDecodingCacheLoadPorts(uint64_t a1, const __CFArray *a2)
{
  CFDictionaryRef v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (*(void *)(a1 + 40))
  {
    CFIndex Count = CFArrayGetCount(a2);
    if ((Count & 1) == 0) {
      goto LABEL_3;
    }
LABEL_15:
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      uint64_t v17 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      uint64_t v17 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
    }
    *(_WORD *)valuePtr = 0;
    __int16 v18 = "Failed to decode ports array: was not a multiple of two";
LABEL_25:
    _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, v18, valuePtr, 2u);
    goto LABEL_26;
  }
  *(void *)(a1 + 40) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count) {
    goto LABEL_15;
  }
LABEL_3:
  if (Count < 1)
  {
LABEL_18:
    os_unfair_lock_unlock(v4);
    return 1;
  }
  CFIndex v6 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
    CFIndex v9 = v6 + 1;
    CGImageRef v10 = CFArrayGetValueAtIndex(a2, v9);
    if (!ValueAtIndex
      || (uint64_t v11 = v10, v12 = CFGetTypeID(ValueAtIndex), v12 != CAMachPortGetTypeID())
      || !v11
      || (CFTypeID v13 = CFGetTypeID(v11), v13 != CAMachPortGetTypeID()))
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        uint64_t v17 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_26;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        uint64_t v17 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_26;
        }
      }
      *(_WORD *)valuePtr = 0;
      __int16 v18 = "Failed to match expected types or is null";
      goto LABEL_25;
    }
    uint64_t v20 = 0;
    CFDataRef v21 = 0;
    if (!DecodeCGImageHeader((uint64_t)ValueAtIndex, &v21, &v20)) {
      break;
    }
    *(void *)valuePtr = v20;
    CFNumberRef v14 = CFNumberCreate(v7, kCFNumberSInt64Type, valuePtr);
    if (CGImageDecoderTypeID_onceToken != -1) {
      dispatch_once(&CGImageDecoderTypeID_onceToken, &__block_literal_global_51);
    }
    Instance = (void *)_CFRuntimeCreateInstance();
    CFDataRef v16 = v21;
    Instance[2] = v20;
    Instance[3] = v16;
    Instance[4] = v11;
    Instance[5] = 0;
    CFRetain(v11);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v14, Instance);
    CFRelease(Instance);
    CFRelease(v14);
    CFIndex v6 = v9 + 1;
    if (Count <= v6) {
      goto LABEL_18;
    }
  }
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    uint64_t v17 = __CGPerspectiveOSLog_log;
    if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
  uint64_t v17 = __CGPerspectiveOSLog_log;
  if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
  {
LABEL_24:
    *(_WORD *)valuePtr = 0;
    __int16 v18 = "Failed to decode header";
    goto LABEL_25;
  }
LABEL_26:
  os_unfair_lock_unlock(v4);
  return 0;
}

CGImageRef CGPerspectiveDecodingCacheCopyImage(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (!*(void *)(a1 + 40))
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      CFIndex v9 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
      {
LABEL_7:
        os_unfair_lock_unlock(v4);
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      CFIndex v9 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_7;
      }
    }
    *(_WORD *)valuePtr = 0;
    _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, "Consistency failure: decoded image expected ports, but none were initially decoded", valuePtr, 2u);
    goto LABEL_7;
  }
  CGImageRef v12 = 0;
  *(void *)valuePtr = a2;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt64Type, valuePtr);
  Value = (CGImage **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v5);
  if (Value)
  {
    CFAllocatorRef v7 = Value;
    mach_vm_size_t v8 = Value[5];
    if (v8)
    {
      CGImageRef v12 = v8;
      CGImageRetain(v8);
    }
    else
    {
      if (!DecodeCGImageBody(v7[3], (uint64_t)v7[4], &v12))
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          uint64_t v11 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_12;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          uint64_t v11 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_12;
          }
        }
        *(_WORD *)valuePtr = 0;
        _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "Failed to decode cache image", valuePtr, 2u);
        goto LABEL_12;
      }
      CFRelease(v7[3]);
      v7[3] = 0;
      CFRelease(v7[4]);
      v7[4] = 0;
      CGImageSetProperty();
      CFRetain((CFTypeRef)a1);
      CGImageNotificationCenter();
      CGNotificationCenterAddCallback();
      v7[5] = v12;
    }
  }
LABEL_12:
  CFRelease(v5);
  os_unfair_lock_unlock(v4);
  return v12;
}

void __CGPerspectiveCacheFinalize_block_invoke(uint64_t a1)
{
  v1 = *(const void **)(a1 + 32);
  CGImageNotificationCenter();
  CGNotificationCenterRemoveCallback();
  CFRelease(v1);
}

void __CGPerspectiveCacheFinalize_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 40))
  {
    CFDictionaryRef v3 = *(const void **)(a1 + 32);
    CGImageNotificationCenter();
    CGNotificationCenterRemoveCallback();
    CFRelease(v3);
  }
}

void CGImageNotificationWillDeallocate(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFIndex v6 = (os_unfair_lock_s *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 16));
  CFAllocatorRef v7 = *(__CFDictionary **)(a2 + 32);
  if (v7) {
    CFDictionaryRemoveValue(v7, a4);
  }
  if (*(void *)(a2 + 40))
  {
    Property = (const void *)CGImageGetProperty();
    if (!Property)
    {
      if (__CGPerspectiveOSLog_onceToken != -1)
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        CFIndex v9 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      CFIndex v9 = __CGPerspectiveOSLog_log;
      if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
      {
LABEL_7:
        *(_WORD *)CGImageRef v10 = 0;
      }
    }
LABEL_8:
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 40), Property);
  }
  os_unfair_lock_unlock(v6);
  CFRelease((CFTypeRef)a2);
}

void __CGPerspectiveCacheCreateDebugDesc_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void __CGPerspectiveCacheCreateDebugDesc_block_invoke_2(uint64_t a1, CFNumberRef number, uint64_t a3)
{
  uint64_t valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr))
  {
    if (__CGPerspectiveOSLog_onceToken != -1)
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      CFNumberRef v5 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    CFNumberRef v5 = __CGPerspectiveOSLog_log;
    if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT))
    {
LABEL_4:
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Internal inconsistency: invalid number type", buf, 2u);
    }
  }
LABEL_5:
  CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 32), 0, @"   - Image: %p, id %llu\n", *(void *)(a3 + 40), valuePtr);
}

uint64_t DictionaryApplierFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t __CGPerspectiveSignalerTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  CGPerspectiveSignalerTypeID_id = result;
  return result;
}

BOOL GetPortsAndCache(CFDictionaryRef theDict, void *a2, const __CFDictionary **a3)
{
  CFDictionaryRef v5 = theDict;
  if (!theDict)
  {
    CFAllocatorRef v7 = 0;
    goto LABEL_11;
  }
  Value = CFDictionaryGetValue(theDict, @"ports");
  CFAllocatorRef v7 = Value;
  if (Value)
  {
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 != CFArrayGetTypeID())
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        uint64_t v11 = __CGPerspectiveOSLog_log;
        BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        uint64_t v11 = __CGPerspectiveOSLog_log;
        BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
      }
      __int16 v17 = 0;
      CFNumberRef v14 = (uint8_t *)&v17;
LABEL_21:
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, v13, v14, 2u);
      return 0;
    }
  }
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(v5, @"cache");
  CFDictionaryRef v5 = v9;
  if (!v9)
  {
LABEL_11:
    *a2 = v7;
    *a3 = v5;
    return 1;
  }
  CFTypeID v10 = CFGetTypeID(v9);
  if (CGPerspectiveCacheTypeID_onceToken != -1)
  {
    CFTypeID v15 = v10;
    dispatch_once(&CGPerspectiveCacheTypeID_onceToken, &__block_literal_global_55);
    if (v15 != CGPerspectiveCacheTypeID_id) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  if (v10 == CGPerspectiveCacheTypeID_id) {
    goto LABEL_11;
  }
LABEL_7:
  if (__CGPerspectiveOSLog_onceToken == -1)
  {
    uint64_t v11 = __CGPerspectiveOSLog_log;
    BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    goto LABEL_20;
  }
  dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
  uint64_t v11 = __CGPerspectiveOSLog_log;
  BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
  if (result)
  {
LABEL_20:
    __int16 v16 = 0;
    CFNumberRef v14 = (uint8_t *)&v16;
    goto LABEL_21;
  }
  return result;
}

uint64_t CGPerspectiveCommandsDecodeFromData(uint64_t a1, const __CFData *a2, CFDictionaryRef theDict)
{
  uint64_t v204 = *MEMORY[0x263EF8340];
  CFDictionaryRef v185 = 0;
  CFArrayRef v186 = 0;
  if (!GetPortsAndCache(theDict, &v186, &v185)) {
    return 0;
  }
  if (theDict)
  {
    BOOL v6 = CFDictionaryGetValue(theDict, @"SkipVersionGuard") == (const void *)*MEMORY[0x263EFFB40];
    CFDictionaryRef v7 = 0;
    CFDictionaryRef Instance = v185;
    CFArrayRef v8 = v186;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (!v186) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v6 = 0;
    CFDictionaryRef v7 = 0;
    CFDictionaryRef Instance = v185;
    CFArrayRef v8 = v186;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (!v186) {
      goto LABEL_11;
    }
  }
  if (!Instance)
  {
    if (CGPerspectiveCacheTypeID_onceToken != -1) {
      dispatch_once(&CGPerspectiveCacheTypeID_onceToken, &__block_literal_global_55);
    }
    CFDictionaryRef Instance = (const __CFDictionary *)_CFRuntimeCreateInstance();
    *((_DWORD *)Instance + 4) = 0;
    *((void *)Instance + 4) = 0;
    *((void *)Instance + 5) = 0;
    *((void *)Instance + 3) = 0;
    CFDictionaryRef v7 = Instance;
    CFDictionaryRef v185 = Instance;
  }
LABEL_11:
  int v183 = 0;
  uint64_t v178 = 0;
  uint64_t v177 = a1;
  int Ports = 1;
  CFTypeID v13 = (CFDataRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x1060040C2E02434uLL);
  *CFTypeID v13 = a2;
  CFRetain(a2);
  v13[1] = 0;
  v179 = v13;
  long long v180 = (unint64_t)v8;
  int v184 = 0;
  CFDictionaryRef v181 = Instance;
  CFNumberRef v14 = (CFTypeRef *)malloc_type_calloc(0x20uLL, 1uLL, 0xD44EDC0AuLL);
  CFTypeID v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
  __int16 v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
  CFTypeRef *v14 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  v14[1] = CFDictionaryCreateMutable(v10, 0, v15, v16);
  v14[2] = CFDictionaryCreateMutable(v10, 0, v15, v16);
  v14[3] = 0;
  v182 = v14;
  LOBYTE(v183) = v6;
  if (v8) {
    int Ports = CGPerspectiveDecodingCacheLoadPorts((uint64_t)Instance, v8);
  }
  if ((CFDataRef)CFDataGetLength(*v13) == v13[1])
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      uint64_t v17 = __CGPerspectiveOSLog_log;
      BOOL v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!v18) {
        goto LABEL_40;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      uint64_t v17 = __CGPerspectiveOSLog_log;
      BOOL v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!v18) {
        goto LABEL_40;
      }
    }
    *(_WORD *)buf = 0;
    v19 = "Given data length was zero";
    uint64_t v20 = v17;
    uint32_t v21 = 2;
    goto LABEL_17;
  }
  int v193 = 0;
  BOOL v22 = CGPerspectiveDataDecode_bytes((uint64_t)v13, &v193, 4uLL);
  BOOL v18 = 0;
  if (!v22) {
    goto LABEL_40;
  }
  if (v193 != 25 && !(_BYTE)v183)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      uint64_t v23 = __CGPerspectiveOSLog_log;
      BOOL v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!v18) {
        goto LABEL_40;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      uint64_t v23 = __CGPerspectiveOSLog_log;
      BOOL v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (!v18) {
        goto LABEL_40;
      }
    }
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 25;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v193;
    v19 = "Version mismatch. Expected %d, but got %d";
    uint64_t v20 = v23;
    uint32_t v21 = 14;
    goto LABEL_17;
  }
  BOOL v18 = CGPerspectiveDataDecode_bytes((uint64_t)v179, &v178, 8uLL);
  if (!v18) {
    goto LABEL_40;
  }
  uint64_t v24 = v177;
  BOOL v18 = CGPerspectiveDataDecode_bytes((uint64_t)v179, (void *)(v177 + 16), 0x20uLL);
  if (!v18) {
    goto LABEL_40;
  }
  buf[0] = 0;
  if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, buf, 1uLL)) {
    goto LABEL_39;
  }
  if (buf[0])
  {
    *(void *)buf = 0;
    if (!CGPerspectiveDataDecode_CFData((uint64_t)v179, (__CFData **)buf)) {
      goto LABEL_39;
    }
    CFStringRef v25 = CFStringCreateFromExternalRepresentation(v10, *(CFDataRef *)buf, 0x600u);
    CFRelease(*(CFTypeRef *)buf);
    if (!v25)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        uint32_t v27 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_39;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        uint32_t v27 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_39;
        }
      }
      *(_WORD *)v188 = 0;
      _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_DEFAULT, "Unable to create colorspace name from colorSpaceNameData", v188, 2u);
      goto LABEL_39;
    }
    *(void *)(v177 + 48) = CGColorSpaceCreateWithName(v25);
    CFRelease(v25);
    if (!*(void *)(v177 + 48))
    {
LABEL_39:
      BOOL v18 = 0;
      goto LABEL_40;
    }
  }
  BOOL v18 = CGPerspectiveDataDecode_bytes((uint64_t)v179, (void *)(v24 + 56), 4uLL);
  if (!v18) {
    goto LABEL_40;
  }
  uint64_t v192 = 0;
  BOOL v18 = CGPerspectiveDataDecode_bytes((uint64_t)v179, &v192, 8uLL);
  if (!v18) {
    goto LABEL_40;
  }
  *((void *)&v180 + 1) = v192;
  uint64_t v191 = 0;
  BOOL v18 = CGPerspectiveDataDecode_bytes((uint64_t)v179, &v191, 8uLL);
  if (!v18) {
    goto LABEL_40;
  }
  if (v192 >= 1)
  {
    uint64_t v26 = 0;
    v175 = (void *)*MEMORY[0x263F00318];
    v173 = (void *)*MEMORY[0x263EFFB40];
    v171 = (void *)*MEMORY[0x263EFFB38];
    while (1)
    {
      __int16 v31 = (int *)CGPerspectiveResourceCreate(v24);
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v31, 4uLL)) {
        goto LABEL_344;
      }
      if (!v33 & v32)
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v154 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_345;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v154 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_345;
          }
        }
        int v148 = *v31;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v148;
        _os_log_impl(&dword_233120000, v154, OS_LOG_TYPE_DEFAULT, "Missing decoding implementation for resource type %d", buf, 8u);
        goto LABEL_344;
      }
      switch(*v31)
      {
        case 0:
          if (!DecodeCGPath((uint64_t)v179, (uint64_t *)v31 + 1)) {
            goto LABEL_344;
          }
          goto LABEL_44;
        case 1:
          v34 = v31 + 2;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v31 + 2, 1uLL)) {
            goto LABEL_344;
          }
          if (*v34 > 2u) {
            goto LABEL_344;
          }
          __int16 v35 = (char *)v31 + 9;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, (char *)v31 + 9, 1uLL)
            || *v35 > 1u
            || !CGPerspectiveDataDecode_bytes((uint64_t)v179, v31 + 3, 4uLL)
            || (v31[3] + 1) > 3)
          {
            goto LABEL_344;
          }
          if (*v35) {
            goto LABEL_44;
          }
          int v36 = *v34;
          if (v36 == 2)
          {
            *(_OWORD *)v188 = 0u;
            long long v189 = 0u;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v188, 0x20uLL)) {
              goto LABEL_344;
            }
            long long v79 = v189;
            *(_OWORD *)(v31 + 18) = *(_OWORD *)v188;
            *(_OWORD *)(v31 + 22) = v79;
            long long v202 = 0u;
            long long v203 = 0u;
            *(_OWORD *)buf = 0u;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, buf, 0x30uLL)) {
              goto LABEL_344;
            }
            long long v81 = v202;
            long long v80 = v203;
            *(_OWORD *)(v31 + 6) = *(_OWORD *)buf;
            *(_OWORD *)(v31 + 10) = v81;
            *(_OWORD *)(v31 + 14) = v80;
            keys[0] = 0;
            LOBYTE(values[0]) = 0;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, values, 1uLL)) {
              goto LABEL_344;
            }
            if (LOBYTE(values[0]))
            {
              if (!CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v177, (CGColorRef *)keys)) {
                goto LABEL_344;
              }
              v82 = keys[0];
            }
            else
            {
              CGColorRelease((CGColorRef)keys[0]);
              v82 = 0;
              keys[0] = 0;
            }
            *((void *)v31 + 13) = v82;
            values[0] = 0;
            if (!CGPerspectiveDataDecode_CFData((uint64_t)v179, (__CFData **)values)) {
              goto LABEL_344;
            }
            uint64_t v85 = CGPerspectiveCommandsDecode(values[0]);
            CFRelease(values[0]);
            *((void *)v31 + 2) = v85;
            if (!v85) {
              goto LABEL_344;
            }
          }
          else if (v36 == 1)
          {
            *(void *)v188 = 0;
            if ((DecodeCGImage((uint64_t)&v177, (CGImageRef *)v188) & 1) == 0) {
              goto LABEL_344;
            }
            *((void *)v31 + 2) = *(void *)v188;
            long long v202 = 0u;
            long long v203 = 0u;
            *(_OWORD *)buf = 0u;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, buf, 0x30uLL)) {
              goto LABEL_344;
            }
            long long v84 = v202;
            long long v83 = v203;
            *(_OWORD *)(v31 + 6) = *(_OWORD *)buf;
            *(_OWORD *)(v31 + 10) = v84;
            *(_OWORD *)(v31 + 14) = v83;
          }
          else if (!*v34)
          {
            *((void *)v31 + 2) = 0;
            buf[0] = 0;
            if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, buf, 1uLL)) {
              goto LABEL_344;
            }
            if (buf[0])
            {
              *(void *)buf = 0;
              if (!DecodeCGPath((uint64_t)v179, (uint64_t *)buf)) {
                goto LABEL_344;
              }
              *((void *)v31 + 2) = *(void *)buf;
            }
          }
          goto LABEL_44;
        case 2:
          if ((DecodeCGImage((uint64_t)&v177, (CGImageRef *)v31 + 1) & 1) == 0) {
            goto LABEL_344;
          }
          goto LABEL_44;
        case 3:
          v37 = malloc_type_calloc(0x50uLL, 1uLL, 0x96D0D50AuLL);
          *((void *)v31 + 1) = v37;
          *(void *)buf = 0;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, buf, 8uLL)) {
            goto LABEL_344;
          }
          *(void *)v188 = 0;
          if (!DecodeCGColorSpace((uint64_t)&v177, (CGColorSpaceRef *)v188)) {
            goto LABEL_344;
          }
          v38 = *(CGColorSpace **)v188;
          if (!*(void *)v188)
          {
            if (__CGPerspectiveOSLog_onceToken == -1)
            {
              v144 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_344;
              }
            }
            else
            {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
              v144 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_344;
              }
            }
            LOWORD(keys[0]) = 0;
            v145 = "Gradient failed to decode required color space";
LABEL_342:
            v149 = (uint8_t *)keys;
            goto LABEL_343;
          }
          CGColorRef v165 = v26;
          if (*(uint64_t *)buf >= 0) {
            unint64_t v39 = *(void *)buf;
          }
          else {
            unint64_t v39 = -*(void *)buf;
          }
          if (*(uint64_t *)buf >= 0) {
            int64_t v40 = 8 * v39;
          }
          else {
            int64_t v40 = -8 * v39;
          }
          if (v39 >> 61 || 8 * v39 > (*(void *)buf >> 63) + 0x7FFFFFFFFFFFFFFFLL)
          {
            CGColorSpaceRelease(*(CGColorSpaceRef *)v188);
            if (__CGPerspectiveOSLog_onceToken != -1) {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            }
            v144 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_344;
            }
            LOWORD(keys[0]) = 0;
            v145 = "Location buffer allocation overflow detected when decoding gradient";
            goto LABEL_342;
          }
          size_t NumberOfComponents = CGColorSpaceGetNumberOfComponents(*(CGColorSpaceRef *)v188);
          uint64_t v42 = NumberOfComponents + 1;
          int64_t v43 = v40 * (NumberOfComponents + 1);
          if ((unsigned __int128)(v40 * (__int128)(uint64_t)(NumberOfComponents + 1)) >> 64 != v43 >> 63)
          {
            CGColorSpaceRelease(v38);
            if (__CGPerspectiveOSLog_onceToken != -1) {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            }
            v144 = __CGPerspectiveOSLog_log;
            uint64_t v26 = v165;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_344;
            }
            LOWORD(keys[0]) = 0;
            v145 = "Components buffer allocation overflow detected when decoding gradient";
            goto LABEL_342;
          }
          uint64_t v44 = *(void *)buf * v42;
          if ((unsigned __int128)(*(uint64_t *)buf * (__int128)v42) >> 64 != (*(void *)buf * v42) >> 63)
          {
            CGColorSpaceRelease(v38);
            if (__CGPerspectiveOSLog_onceToken != -1) {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            }
            v144 = __CGPerspectiveOSLog_log;
            uint64_t v26 = v165;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_344;
            }
            LOWORD(keys[0]) = 0;
            v145 = "Components max index value overflow detected when decoding gradient";
            goto LABEL_342;
          }
          v162 = v37;
          if (v44 >= 0) {
            unint64_t v45 = *(void *)buf * v42;
          }
          else {
            unint64_t v45 = -v44;
          }
          if (v45 >> 61
            || (unint64_t v46 = 8 * v45, v46 > ((unint64_t)v44 >> 63) + 0x7FFFFFFFFFFFFFFFLL)
            || (v44 >= 0 ? (int64_t v47 = v46) : (int64_t v47 = -(uint64_t)v46), v47 > v43))
          {
            CGColorSpaceRelease(v38);
            if (__CGPerspectiveOSLog_onceToken != -1) {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            }
            v144 = __CGPerspectiveOSLog_log;
            uint64_t v26 = v165;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_344;
            }
            LOWORD(keys[0]) = 0;
            v145 = "Components max byte count overflow detected when decoding gradient";
            goto LABEL_342;
          }
          if (v42 < 0) {
            size_t v48 = ~NumberOfComponents;
          }
          else {
            size_t v48 = NumberOfComponents + 1;
          }
          if (v42 >= 0) {
            size_t v49 = 8 * v48;
          }
          else {
            size_t v49 = -8 * v48;
          }
          if (v48 >> 61 || 8 * v48 > ((unint64_t)v42 >> 63) + 0x7FFFFFFFFFFFFFFFLL)
          {
            CGColorSpaceRelease(v38);
            if (__CGPerspectiveOSLog_onceToken != -1) {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            }
            v144 = __CGPerspectiveOSLog_log;
            uint64_t v26 = v165;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_344;
            }
            LOWORD(keys[0]) = 0;
            v145 = "Components max byte count overflow detected when decoding gradient";
            goto LABEL_342;
          }
          size_t v50 = NumberOfComponents;
          space = v38;
          v51 = (char *)malloc_type_malloc(v40, 0x9BF7D08uLL);
          v52 = (char *)malloc_type_malloc(v43, 0x9C391DBEuLL);
          v53 = v52;
          v169 = v51;
          if (!v51 || !v52)
          {
            free(v51);
            free(v53);
            CGColorSpaceRelease(space);
            if (__CGPerspectiveOSLog_onceToken != -1) {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            }
            v144 = __CGPerspectiveOSLog_log;
            uint64_t v26 = v165;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_344;
            }
            LOWORD(keys[0]) = 0;
            v145 = "Gradient buffer allocations failed";
            goto LABEL_342;
          }
          CGColorRef color = (CGColorRef)v52;
          if (*(uint64_t *)buf >= 1)
          {
            uint64_t v54 = 0;
            uint64_t v55 = 8 * v50 + 8;
            v56 = v52;
            v57 = v169;
            do
            {
              CGPerspectiveDataDecode_bytes((uint64_t)v179, v57, 8uLL);
              CGPerspectiveDataDecode_bytes((uint64_t)v179, v56, v49);
              ++v54;
              v56 += v55;
              v57 += 8;
            }
            while (v54 < *(uint64_t *)buf);
          }
          v58 = v162;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v162, 4uLL)
            || (int v59 = *(_DWORD *)v162, *(_DWORD *)v162 >= 3u))
          {
            free(v169);
            free(color);
            CGColorSpaceRelease(space);
            if (__CGPerspectiveOSLog_onceToken != -1) {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            }
            v144 = __CGPerspectiveOSLog_log;
            uint64_t v26 = v165;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_344;
            }
            LOWORD(keys[0]) = 0;
            v145 = "Gradient type was out of bounds";
            goto LABEL_342;
          }
          BOOL v159 = CGPerspectiveDataDecode_bytes((uint64_t)v179, v162 + 16, 0x10uLL);
          v60 = v162 + 32;
          if (v59 == 2)
          {
            LOBYTE(v61) = CGPerspectiveDataDecode_bytes((uint64_t)v179, v60, 8uLL);
          }
          else
          {
            BOOL v72 = CGPerspectiveDataDecode_bytes((uint64_t)v179, v60, 0x10uLL);
            int v73 = v72 & CGPerspectiveDataDecode_bytes((uint64_t)v179, v162 + 48, 8uLL);
            BOOL v74 = CGPerspectiveDataDecode_bytes((uint64_t)v179, v162 + 56, 8uLL);
            int v61 = v73 & v74 & CGPerspectiveDataDecode_bytes((uint64_t)v179, v162 + 64, 4uLL);
          }
          LOBYTE(keys[0]) = 0;
          BOOL v75 = CGPerspectiveDataDecode_bytes((uint64_t)v179, keys, 1uLL);
          if (v75)
          {
            int v76 = LOBYTE(keys[0]) != 0;
            v162[72] = v76;
          }
          else
          {
            int v76 = v162[72];
          }
          char v163 = v159 & v61 & v75;
          keys[0] = v175;
          BOOL v33 = v76 == 0;
          v77 = v173;
          if (v33) {
            v77 = v171;
          }
          values[0] = v77;
          CFDictionaryRef v78 = CFDictionaryCreate(v10, (const void **)keys, (const void **)values, 1, 0, 0);
          *((void *)v58 + 1) = CGGradientCreateWithColorComponentsAndOptions();
          CFRelease(v78);
          CGColorSpaceRelease(space);
          free(v169);
          free(color);
          uint64_t v26 = v165;
          if ((v163 & 1) == 0) {
            goto LABEL_344;
          }
LABEL_44:
          uint64_t v26 = (CGColor *)((char *)v26 + 1);
          if ((uint64_t)v26 >= v192) {
            goto LABEL_151;
          }
          break;
        case 4:
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v31 + 2, 8uLL)
            || !CGPerspectiveDataDecode_bytes((uint64_t)v179, v31 + 4, 8uLL))
          {
            goto LABEL_344;
          }
          goto LABEL_44;
        case 5:
          long long v202 = 0u;
          long long v203 = 0u;
          *(_OWORD *)buf = 0u;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, buf, 0x30uLL)) {
            goto LABEL_344;
          }
          keys[0] = 0;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, keys, 8uLL)) {
            goto LABEL_344;
          }
          if ((uint64_t)keys[0] >= 0) {
            unint64_t v62 = (unint64_t)keys[0];
          }
          else {
            unint64_t v62 = -(uint64_t)keys[0];
          }
          if (v62 >> 61 || (unint64_t v63 = 8 * v62, v63 > ((unint64_t)keys[0] >> 63) + 0x7FFFFFFFFFFFFFFFLL))
          {
            if (__CGPerspectiveOSLog_onceToken == -1)
            {
              v144 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_344;
              }
            }
            else
            {
              dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
              v144 = __CGPerspectiveOSLog_log;
              if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_344;
              }
            }
            *(_WORD *)v188 = 0;
            v145 = "Integer overflow with indices";
            v149 = v188;
            goto LABEL_343;
          }
          if ((uint64_t)keys[0] >= 0) {
            size_t v64 = v63;
          }
          else {
            size_t v64 = -(uint64_t)v63;
          }
          v65 = malloc_type_calloc(v64, 1uLL, 0xD7350543uLL);
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v65, v64)) {
            goto LABEL_344;
          }
          if ((uint64_t)keys[0] >= 0) {
            unint64_t v66 = (unint64_t)keys[0];
          }
          else {
            unint64_t v66 = -(uint64_t)keys[0];
          }
          if (v66 >> 60 || (unint64_t v67 = 16 * v66, v67 > ((unint64_t)keys[0] >> 63) + 0x7FFFFFFFFFFFFFFFLL))
          {
            if (__CGPerspectiveOSLog_onceToken == -1)
            {
              v144 = __CGPerspectiveOSLog_log;
              if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
                goto LABEL_329;
              }
LABEL_344:
              if (__CGPerspectiveOSLog_onceToken == -1)
              {
LABEL_345:
                uint64_t v150 = __CGPerspectiveOSLog_log;
                BOOL v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
                if (!v18) {
                  goto LABEL_40;
                }
              }
              else
              {
                dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
                uint64_t v150 = __CGPerspectiveOSLog_log;
                BOOL v18 = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
                if (!v18) {
                  goto LABEL_40;
                }
              }
              *(_DWORD *)buf = 134217984;
              *(void *)&buf[4] = v26;
              v19 = "Failed to decode resource %ld";
              uint64_t v20 = v150;
              uint32_t v21 = 12;
LABEL_17:
              _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
              goto LABEL_39;
            }
            dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
            v144 = __CGPerspectiveOSLog_log;
            if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
              goto LABEL_344;
            }
LABEL_329:
            *(_WORD *)v188 = 0;
            v145 = "Integer overflow with positions";
            v149 = v188;
LABEL_343:
            _os_log_error_impl(&dword_233120000, v144, OS_LOG_TYPE_ERROR, v145, v149, 2u);
            goto LABEL_344;
          }
          if ((uint64_t)keys[0] >= 0) {
            size_t v68 = v67;
          }
          else {
            size_t v68 = -(uint64_t)v67;
          }
          v69 = malloc_type_calloc(v68, 1uLL, 0x9054535AuLL);
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v69, v68)) {
            goto LABEL_344;
          }
          memset(v188, 0, sizeof(v188));
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v188, 0x10uLL)) {
            goto LABEL_344;
          }
          values[0] = 0;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, values, 8uLL)) {
            goto LABEL_344;
          }
          LODWORD(v187) = 0;
          if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, &v187, 4uLL)) {
            goto LABEL_344;
          }
          v70 = malloc_type_calloc(0x68uLL, 1uLL, 0x589D3914uLL);
          long long v71 = v202;
          _OWORD *v70 = *(_OWORD *)buf;
          v70[1] = v71;
          v70[2] = v203;
          *((void **)v70 + 6) = keys[0];
          *((void *)v70 + 7) = v65;
          *((void *)v70 + 8) = v69;
          *(_OWORD *)((char *)v70 + 72) = *(_OWORD *)v188;
          *((void **)v70 + 11) = values[0];
          *((_DWORD *)v70 + 24) = v187;
          *((void *)v31 + 1) = v70;
          goto LABEL_44;
        default:
          goto LABEL_344;
      }
    }
  }
LABEL_151:
  long long v86 = *(_OWORD *)(MEMORY[0x263F001A8] + 16);
  *(_OWORD *)keys = *MEMORY[0x263F001A8];
  long long v200 = v86;
  long long v87 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
  *(_OWORD *)buf = *MEMORY[0x263F000D0];
  long long v202 = v87;
  long long v203 = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  *(_OWORD *)values = *(_OWORD *)keys;
  long long v198 = v86;
  long long v189 = v87;
  long long v190 = v203;
  *(_OWORD *)v188 = *(_OWORD *)buf;
  long long v187 = *MEMORY[0x263F001B0];
  if (v191 < 1)
  {
LABEL_292:
    *(_DWORD *)v195 = 0;
    BOOL v18 = CGPerspectiveDataDecode_bytes((uint64_t)v179, v195, 4uLL);
    if (v18) {
      *(_DWORD *)(v24 + 80) = *(_DWORD *)v195;
    }
    goto LABEL_40;
  }
  v88 = 0;
  v166 = 0;
  colora = 0;
  uint64_t v174 = 0;
  v176 = 0;
  v89 = 0;
  __src = 0;
  uint64_t v158 = 0;
  uint64_t v172 = 0;
  BOOL v156 = 0;
  v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = -1;
  int v95 = -1;
  uint64_t v96 = 0;
  int v170 = -1;
  uint64_t v97 = 0;
  int v164 = -1;
  uint64_t v98 = 0;
  int spacea = -1;
  while (1)
  {
    v99 = CGPerspectiveCommandCreate(v24, 0, 0);
    *(_DWORD *)v195 = 0;
    if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v195, 4uLL)) {
      goto LABEL_373;
    }
    if (v195[0])
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99, 8uLL)) {
        goto LABEL_373;
      }
      uint64_t v94 = *(void *)v99;
    }
    else
    {
      *(void *)v99 = v94;
    }
    if (v94 >= *((uint64_t *)&v180 + 1))
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v146 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_374;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v146 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_374;
        }
      }
      *(_WORD *)v194 = 0;
      v147 = "Decoded command has out of bounds resource index";
      goto LABEL_372;
    }
    __int16 v100 = *(_WORD *)v195;
    if ((v195[0] & 4) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 40, 0x30uLL)) {
        goto LABEL_373;
      }
      __int16 v100 = *(_WORD *)v195;
    }
    else
    {
      long long v101 = v202;
      *(_OWORD *)(v99 + 40) = *(_OWORD *)buf;
      *(_OWORD *)(v99 + 56) = v101;
      *(_OWORD *)(v99 + 72) = v203;
    }
    if ((v100 & 0x40) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 136, 0x30uLL)) {
        goto LABEL_373;
      }
      __int16 v100 = *(_WORD *)v195;
    }
    else
    {
      long long v102 = v189;
      *(_OWORD *)(v99 + 136) = *(_OWORD *)v188;
      *(_OWORD *)(v99 + 152) = v102;
      *(_OWORD *)(v99 + 168) = v190;
    }
    if ((v100 & 2) != 0)
    {
      CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 8, 0x20uLL);
      __int16 v100 = *(_WORD *)v195;
    }
    else
    {
      *(_OWORD *)(v99 + 8) = *(_OWORD *)keys;
      *(_OWORD *)(v99 + 24) = v200;
    }
    v103 = (int *)(v99 + 96);
    if ((v100 & 0x10) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 96, 4uLL) || *v103 > 4) {
        goto LABEL_373;
      }
      __int16 v100 = *(_WORD *)v195;
    }
    else
    {
      int *v103 = v95;
    }
    v104 = v99 + 232;
    if ((v100 & 0x2000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v104, 8uLL)) {
        goto LABEL_373;
      }
      __int16 v100 = *(_WORD *)v195;
    }
    else
    {
      void *v104 = v91;
    }
    v105 = v99 + 240;
    if ((v100 & 0x4000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v105, 8uLL)) {
        goto LABEL_373;
      }
      LOBYTE(v100) = v195[0];
    }
    else
    {
      void *v105 = v92;
    }
    if ((v100 & 8) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      v106 = (CGColorRef *)(v99 + 88);
      if (v194[0])
      {
        if ((CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v177, (CGColorRef *)v99 + 11) & 1) == 0) {
          goto LABEL_373;
        }
      }
      else
      {
        CGColorRelease(*v106);
        CGColorRef *v106 = 0;
      }
    }
    else
    {
      *((void *)v99 + 11) = CGColorRetain(v90);
    }
    if ((v195[1] & 0x10) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      v107 = (CGColorRef *)(v99 + 224);
      if (v194[0])
      {
        if ((CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v177, (CGColorRef *)v99 + 28) & 1) == 0) {
          goto LABEL_373;
        }
      }
      else
      {
        CGColorRelease(*v107);
        CGColorRef *v107 = 0;
      }
    }
    else
    {
      *((void *)v99 + 28) = CGColorRetain(v89);
    }
    __int16 v108 = *(_WORD *)v195;
    if ((v195[0] & 0x20) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 104, 0x20uLL)) {
        goto LABEL_373;
      }
      __int16 v108 = *(_WORD *)v195;
    }
    else
    {
      long long v109 = v198;
      *(_OWORD *)(v99 + 104) = *(_OWORD *)values;
      *(_OWORD *)(v99 + 120) = v109;
    }
    v110 = (int *)(v99 + 184);
    if ((v108 & 0x80) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 184, 4uLL) || (*v110 + 1) > 0x1C) {
        goto LABEL_373;
      }
      __int16 v108 = *(_WORD *)v195;
    }
    else
    {
      int *v110 = v170;
    }
    if ((v108 & 0x100) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      if (v194[0])
      {
        v115 = malloc_type_calloc(0x38uLL, 1uLL, 0x15E8786uLL);
        if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v115, 0x38uLL)) {
          goto LABEL_373;
        }
        *((void *)v99 + 24) = v115;
      }
    }
    else if (v88)
    {
      v111 = malloc_type_malloc(0x38uLL, 0x1000040577F94FBuLL);
      *((void *)v99 + 24) = v111;
      if (!v111)
      {
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v146 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_374;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v146 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_374;
          }
        }
        *(_WORD *)v194 = 0;
        v147 = "Failed to allocate shadow style.";
        goto LABEL_372;
      }
      long long v112 = *v88;
      long long v113 = v88[1];
      long long v114 = v88[2];
      v111[6] = *((void *)v88 + 6);
      *((_OWORD *)v111 + 1) = v113;
      *((_OWORD *)v111 + 2) = v114;
      *(_OWORD *)v111 = v112;
    }
    else
    {
      *((void *)v99 + 24) = 0;
    }
    if ((v195[1] & 2) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      v116 = (CGColorRef *)(v99 + 200);
      if (v194[0])
      {
        if ((CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v177, (CGColorRef *)v99 + 25) & 1) == 0) {
          goto LABEL_373;
        }
      }
      else
      {
        CGColorRelease(*v116);
        CGColorRef *v116 = 0;
      }
    }
    else
    {
      *((void *)v99 + 25) = CGColorRetain(colora);
    }
    if ((v195[1] & 4) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      if (v194[0])
      {
        v121 = malloc_type_calloc(0x50uLL, 1uLL, 0x1E91B0EEuLL);
        if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v121, 0x50uLL)) {
          goto LABEL_373;
        }
        *((void *)v99 + 26) = v121;
      }
    }
    else
    {
      if (v176)
      {
        v117 = malloc_type_malloc(0x50uLL, 0x1000040CA4B9025uLL);
        *((void *)v99 + 26) = v117;
        if (v117)
        {
          _OWORD *v117 = *v176;
          long long v118 = v176[1];
          long long v119 = v176[2];
          long long v120 = v176[4];
          v117[3] = v176[3];
          v117[4] = v120;
          v117[1] = v118;
          v117[2] = v119;
          goto LABEL_231;
        }
        if (__CGPerspectiveOSLog_onceToken == -1)
        {
          v146 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_374;
          }
        }
        else
        {
          dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
          v146 = __CGPerspectiveOSLog_log;
          if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_374;
          }
        }
        *(_WORD *)v194 = 0;
        v147 = "Failed to allocate focus style.";
LABEL_372:
        _os_log_error_impl(&dword_233120000, v146, OS_LOG_TYPE_ERROR, v147, v194, 2u);
LABEL_373:
        if (__CGPerspectiveOSLog_onceToken == -1) {
          goto LABEL_374;
        }
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v153 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_375;
        }
        goto LABEL_381;
      }
      *((void *)v99 + 26) = 0;
    }
LABEL_231:
    if ((v195[1] & 8) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      v122 = (CGColorRef *)(v99 + 216);
      if (v194[0])
      {
        if ((CGPerspectiveColorCacheDecodeCGColor((uint64_t)&v177, (CGColorRef *)v99 + 27) & 1) == 0) {
          goto LABEL_373;
        }
      }
      else
      {
        CGColorRelease(*v122);
        CGColorRef *v122 = 0;
      }
    }
    else
    {
      *((void *)v99 + 27) = CGColorRetain(v166);
    }
    int v123 = *(_DWORD *)v195;
    v124 = (int *)(v99 + 248);
    if ((*(_WORD *)v195 & 0x8000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 248, 4uLL) || *v124 > 2) {
        goto LABEL_373;
      }
      int v123 = *(_DWORD *)v195;
    }
    else
    {
      int *v124 = v164;
    }
    v125 = (int *)(v99 + 252);
    if ((v123 & 0x10000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 252, 4uLL) || *v125 > 2) {
        goto LABEL_373;
      }
      int v123 = *(_DWORD *)v195;
    }
    else
    {
      int *v125 = spacea;
    }
    if ((v123 & 0x20000) != 0) {
      break;
    }
    *((void *)v99 + 32) = 0;
    *((void *)v99 + 33) = v172;
    if (v172 < 1) {
      goto LABEL_259;
    }
    if ((unint64_t)v172 >> 61)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v151 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_370;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v151 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_370;
        }
      }
      *(_WORD *)v194 = 0;
      v152 = "Integer overflow with line dash count";
      goto LABEL_368;
    }
    v126 = malloc_type_malloc(8 * v172, 0x534A0DADuLL);
    *((void *)v99 + 32) = v126;
    if (!v126)
    {
      if (__CGPerspectiveOSLog_onceToken == -1)
      {
        v151 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_370;
        }
      }
      else
      {
        dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
        v151 = __CGPerspectiveOSLog_log;
        if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_370;
        }
      }
      *(_WORD *)v194 = 0;
      v152 = "Failed to malloc command's lineDashValues";
      goto LABEL_368;
    }
    memcpy(v126, __src, 8 * v172);
LABEL_259:
    int v131 = *(_DWORD *)v195;
    v132 = v99 + 272;
    if ((*(_DWORD *)v195 & 0x40000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v132, 8uLL)) {
        goto LABEL_373;
      }
      int v131 = *(_DWORD *)v195;
    }
    else
    {
      void *v132 = v93;
    }
    v133 = v99 + 280;
    if ((v131 & 0x80000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v133, 8uLL)) {
        goto LABEL_373;
      }
      int v131 = *(_DWORD *)v195;
    }
    else
    {
      void *v133 = v96;
    }
    v134 = v99 + 288;
    if ((v131 & 0x100000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v134, 8uLL)) {
        goto LABEL_373;
      }
      int v131 = *(_DWORD *)v195;
    }
    else
    {
      void *v134 = v97;
    }
    if ((v131 & 0x200000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 296, 0x10uLL)) {
        goto LABEL_373;
      }
      int v131 = *(_DWORD *)v195;
    }
    else
    {
      *(_OWORD *)(v99 + 296) = v187;
    }
    v135 = v99 + 312;
    if ((v131 & 0x400000) != 0)
    {
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v135, 8uLL)) {
        goto LABEL_373;
      }
      int v131 = *(_DWORD *)v195;
    }
    else
    {
      void *v135 = v98;
    }
    if ((v131 & 0x800000) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      v99[320] = v194[0] != 0;
      int v131 = *(_DWORD *)v195;
    }
    else
    {
      v99[320] = BYTE4(v158);
    }
    if ((v131 & 0x1000000) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      LOBYTE(v158) = v194[0] != 0;
      v99[321] = v194[0] != 0;
      int v131 = *(_DWORD *)v195;
    }
    else
    {
      v99[321] = v158;
    }
    if ((v131 & 0x2000000) != 0)
    {
      v194[0] = 0;
      if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v194, 1uLL)) {
        goto LABEL_373;
      }
      BOOL v156 = v194[0] != 0;
      v99[322] = v194[0] != 0;
      LOBYTE(v158) = v99[321];
    }
    else
    {
      v99[322] = v156;
    }
    uint64_t v94 = *(void *)v99;
    *(_OWORD *)keys = *(_OWORD *)(v99 + 8);
    long long v136 = *(_OWORD *)(v99 + 40);
    long long v137 = *(_OWORD *)(v99 + 56);
    long long v200 = *(_OWORD *)(v99 + 24);
    *(_OWORD *)buf = v136;
    long long v138 = *(_OWORD *)(v99 + 72);
    long long v202 = v137;
    long long v203 = v138;
    v90 = (CGColor *)*((void *)v99 + 11);
    int v95 = *((_DWORD *)v99 + 24);
    long long v139 = *(_OWORD *)(v99 + 120);
    *(_OWORD *)values = *(_OWORD *)(v99 + 104);
    long long v198 = v139;
    long long v140 = *(_OWORD *)(v99 + 136);
    long long v141 = *(_OWORD *)(v99 + 168);
    long long v189 = *(_OWORD *)(v99 + 152);
    long long v190 = v141;
    int v170 = *((_DWORD *)v99 + 46);
    v88 = (long long *)*((void *)v99 + 24);
    v176 = (_OWORD *)*((void *)v99 + 26);
    v89 = (CGColor *)*((void *)v99 + 28);
    v166 = (CGColor *)*((void *)v99 + 27);
    colora = (CGColor *)*((void *)v99 + 25);
    uint64_t v91 = *((void *)v99 + 29);
    uint64_t v92 = *((void *)v99 + 30);
    int v142 = *((_DWORD *)v99 + 63);
    int v164 = *((_DWORD *)v99 + 62);
    uint64_t v143 = *((void *)v99 + 33);
    __src = (void *)*((void *)v99 + 32);
    uint64_t v93 = *((void *)v99 + 34);
    uint64_t v96 = *((void *)v99 + 35);
    uint64_t v97 = *((void *)v99 + 36);
    long long v187 = *(_OWORD *)(v99 + 296);
    *(_OWORD *)v188 = v140;
    uint64_t v98 = *((void *)v99 + 39);
    BYTE4(v158) = v99[320];
    int spacea = v142;
    uint64_t v172 = v143;
    if (++v174 >= v191) {
      goto LABEL_292;
    }
  }
  if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v99 + 264, 8uLL)) {
    goto LABEL_369;
  }
  *((void *)v99 + 32) = 0;
  uint64_t v127 = *((void *)v99 + 33);
  if (v127 < 1) {
    goto LABEL_259;
  }
  if ((unint64_t)v127 >> 61)
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v151 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_370;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v151 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_370;
      }
    }
    *(_WORD *)v194 = 0;
    v152 = "Integer overflow with line dash count";
    goto LABEL_368;
  }
  size_t v128 = 8 * v127;
  v129 = v179;
  if (8 * v127 > (unint64_t)(CFDataGetLength(*v179) - (void)v129[1]))
  {
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      v151 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_370;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      v151 = __CGPerspectiveOSLog_log;
      if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_370;
      }
    }
    *(_WORD *)v194 = 0;
    v152 = "Out of bounds read for command's lineDashCount";
    goto LABEL_368;
  }
  v130 = malloc_type_malloc(v128, 0xF2822BC6uLL);
  *((void *)v99 + 32) = v130;
  if (v130)
  {
    if (!CGPerspectiveDataDecode_bytes((uint64_t)v179, v130, v128)) {
      goto LABEL_369;
    }
    goto LABEL_259;
  }
  if (__CGPerspectiveOSLog_onceToken != -1)
  {
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    v151 = __CGPerspectiveOSLog_log;
    if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_370;
    }
LABEL_367:
    *(_WORD *)v194 = 0;
    v152 = "Failed to malloc command's lineDashCount";
LABEL_368:
    _os_log_error_impl(&dword_233120000, v151, OS_LOG_TYPE_ERROR, v152, v194, 2u);
LABEL_369:
    if (__CGPerspectiveOSLog_onceToken == -1) {
      goto LABEL_370;
    }
    dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
    v146 = __CGPerspectiveOSLog_log;
    if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
      goto LABEL_371;
    }
    goto LABEL_374;
  }
  v151 = __CGPerspectiveOSLog_log;
  if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR)) {
    goto LABEL_367;
  }
LABEL_370:
  v146 = __CGPerspectiveOSLog_log;
  if (os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
  {
LABEL_371:
    *(_WORD *)v194 = 0;
    v147 = "Failed to decode line dash";
    goto LABEL_372;
  }
LABEL_374:
  v153 = __CGPerspectiveOSLog_log;
  if (!os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR))
  {
LABEL_375:
    BOOL v18 = 1;
    goto LABEL_40;
  }
LABEL_381:
  *(_DWORD *)v195 = 134217984;
  uint64_t v196 = v174;
  _os_log_error_impl(&dword_233120000, v153, OS_LOG_TYPE_ERROR, "Failed to decode command %ld", v195, 0xCu);
  BOOL v18 = 1;
LABEL_40:
  uint64_t v11 = Ports & v18;
  uint64_t v28 = v179;
  CFRelease(*v179);
  free(v28);
  int v29 = v182;
  CFRelease(*v182);
  CFRelease(v29[1]);
  CFRelease(v29[2]);
  free(v29);
  if (v7) {
    CFRelease(v7);
  }
  return v11;
}

BOOL DecodeCGPath(uint64_t a1, uint64_t *a2)
{
  CFTypeRef cf = 0;
  BOOL result = CGPerspectiveDataDecode_CFData(a1, (__CFData **)&cf);
  if (result)
  {
    if (cf)
    {
      *a2 = CGPathCreateWithData();
      CFRelease(cf);
    }
    if (*a2) {
      return 1;
    }
    if (__CGPerspectiveOSLog_onceToken == -1)
    {
      CFDictionaryRef v4 = __CGPerspectiveOSLog_log;
      BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (result)
      {
LABEL_9:
        *(_WORD *)CFDictionaryRef v5 = 0;
        return 0;
      }
    }
    else
    {
      dispatch_once(&__CGPerspectiveOSLog_onceToken, &__block_literal_global_53);
      CFDictionaryRef v4 = __CGPerspectiveOSLog_log;
      BOOL result = os_log_type_enabled((os_log_t)__CGPerspectiveOSLog_log, OS_LOG_TYPE_ERROR);
      if (result) {
        goto LABEL_9;
      }
    }
  }
  return result;
}

void *__CGVersionLoad_block_invoke()
{
  BOOL result = dlopen("/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics", 1);
  if (result)
  {
    v1 = result;
    _MergedGlobals_507 = (uint64_t)dlsym(result, "CGGStateSetInfoDictionary");
    qword_26AF9F9C8 = (uint64_t)dlsym(v1, "CGGStateGetInfoDictionary");
    __CGContextClipToMaskWithTransformFunc = dlsym(v1, "CGContextClipToMaskWithTransform");
    __CGGStateClipToPathFunc = dlsym(v1, "CGGStateClipToPath");
    __CGFontGetGlyphPositionsFunc = dlsym(v1, "CGFontGetGlyphPositions");
    BOOL result = dlsym(v1, "CGGStateGetStrokeParameters");
    __CGGStateGetStrokeParametersFunc = result;
  }
  return result;
}

uint64_t __CGGStateGetStrokeParameters(uint64_t a1, void *a2, void *a3, void *a4, uint64_t *a5, _DWORD *a6, _DWORD *a7)
{
  if (CGVersionLoad_onceToken != -1)
  {
    dispatch_once(&CGVersionLoad_onceToken, &__block_literal_global_57);
    CFNumberRef v14 = __CGGStateGetStrokeParametersFunc;
    if (__CGGStateGetStrokeParametersFunc) {
      goto LABEL_3;
    }
LABEL_7:
    CGGStateGetLineWidth();
    *a2 = v16;
    CGGStateGetLineWidthThreshold();
    *a3 = v17;
    CGGStateGetMiterLimit();
    *a4 = v18;
    *a5 = CGGStateGetLineDash();
    *a6 = CGGStateGetLineCap();
    uint64_t result = CGGStateGetLineJoin();
    *a7 = result;
    return result;
  }
  CFNumberRef v14 = __CGGStateGetStrokeParametersFunc;
  if (!__CGGStateGetStrokeParametersFunc) {
    goto LABEL_7;
  }
LABEL_3:
  return ((uint64_t (*)(uint64_t, void *, void *, void *, uint64_t *, _DWORD *, _DWORD *))v14)(a1, a2, a3, a4, a5, a6, a7);
}

BOOL re::query::EntityInBoundingBoxPredicate::evaluate(float32x4_t *a1, re::ecs2::TransformComponent *this)
{
  if (!*((void *)this + 30)) {
    return 0;
  }
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)this, (const re::ecs2::Entity *)1, v6);
  uint32x4_t v3 = (uint32x4_t)vcgtq_f32(a1[3], v7);
  v3.i32[3] = v3.i32[2];
  if ((vmaxvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v4 = (uint32x4_t)vcgtq_f32(v7, a1[4]);
  v4.i32[3] = v4.i32[2];
  return (vmaxvq_u32(v4) & 0x80000000) == 0;
}

BOOL re::query::EntityHasComponentPredicate::evaluate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 8) + 16) + 16) == a1) {
    return 1;
  }
  uint64_t v3 = *(unsigned __int16 *)(a2 + 82);
  if (!*(_WORD *)(a2 + 82)) {
    return 0;
  }
  uint32x4_t v4 = (const __int16 *)(*(void *)(a1 + 48) + 16);
  CFDictionaryRef v5 = *(int16x8_t **)(a2 + 88);
  int16x8_t v6 = vld1q_dup_s16(v4);
  for (int i = 1; ; i -= 8)
  {
    uint16x8_t v8 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v6, *v5), (int8x16_t)xmmword_23436BBD0);
    v8.i16[0] = vmaxvq_u16(v8);
    if (v8.i32[0]) {
      break;
    }
    ++v5;
    if (!--v3) {
      return 0;
    }
  }
  return v8.u16[0] - i < *(unsigned __int16 *)(a2 + 80);
}

void re::query::EntityHasComponentPredicate::preEvaluateOptimize(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*a2 + 8);
  unint64_t v4 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 16);
  if (*(void *)(v3 + 224) <= v4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(v3 + 240) + 8 * v4);
    if (v5) {
      uint64_t v5 = *(void *)(v5 + 24);
    }
  }
  a2[4] = v5;
  uint64_t v15 = (uint64_t)&v15;
  uint64_t v16 = &v15;
  uint64_t v17 = 0;
  std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(&v14, (void *)(a1 + 8));
  int16x8_t v6 = operator new(0x20uLL);
  v6[1] = v14;
  float32x4_t v7 = v16;
  *(void *)int16x8_t v6 = &v15;
  *((void *)v6 + 1) = v7;
  *float32x4_t v7 = (uint64_t)v6;
  uint64_t v16 = (uint64_t *)v6;
  ++v17;
  uint64_t v8 = a2[1];
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear((uint64_t *)(v8 + 16));
  uint64_t v9 = v17;
  if (v17)
  {
    uint64_t v11 = v15;
    CFAllocatorRef v10 = v16;
    uint64_t v12 = *v16;
    *(void *)(v12 + 8) = *(void *)(v15 + 8);
    **(void **)(v11 + 8) = v12;
    uint64_t v13 = *(void *)(v8 + 16);
    *(void *)(v13 + 8) = v10;
    uint64_t *v10 = v13;
    *(void *)(v8 + 16) = v11;
    *(void *)(v11 + 8) = v8 + 16;
    *(void *)(v8 + 32) += v9;
    uint64_t v17 = 0;
  }
  *(unsigned char *)(a2[1] + 64) = 4;
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(&v15);
}

void re::query::EntityHasComponentPredicate::forEachInSubset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)a2 + 8);
  unint64_t v5 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 16);
  if (*(void *)(v4 + 224) > v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v4 + 240) + 8 * v5);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7)
      {
        uint64_t v11 = *(void *)(v6 + 40);
        uint64_t v12 = 8 * v7;
        do
        {
          uint64_t v13 = *(void *)(*(void *)v11 + 16);
          if ((*(unsigned char *)(v13 + 289) & 4) == 0)
          {
            if ((*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16))(a3, *(void *)(*(void *)v11 + 16), a2))
            {
              std::function<void ()(re::ecs2::Entity *)>::operator()(a4, v13);
            }
          }
          v11 += 8;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
}

void std::function<void ()(re::ecs2::Entity *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
  }
  else
  {
    uint64_t v3 = (re::query::EntityInBoundingBoxPredicate *)std::__throw_bad_function_call[abi:nn180100]();
    re::query::EntityInBoundingBoxPredicate::~EntityInBoundingBoxPredicate(v3);
  }
}

void re::query::EntityInBoundingBoxPredicate::~EntityInBoundingBoxPredicate(re::query::EntityInBoundingBoxPredicate *this)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>::postCreateOptimize(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>::preEvaluateOptimize(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = -1;
}

void re::query::EntityHasComponentPredicate::~EntityHasComponentPredicate(re::query::EntityHasComponentPredicate *this)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(this);
  JUMPOUT(0x237DBCBD0);
}

void std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void *csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(void *a1)
{
  *a1 = &unk_26E722520;
  uint64_t v2 = a1 + 3;
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(a1 + 3);
  std::__list_imp<std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>>::clear(v2);
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(void *a1)
{
  csq::graph::DirectedGraphNode<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::~DirectedGraphNode(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::shared_ptr<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>>::shared_ptr[abi:nn180100]<csq::v2::PredicateBase<re::ecs2::Entity,re::query::SceneEntityDataSource>,void>(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
    goto LABEL_5;
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
  {
LABEL_5:
    std::__throw_bad_weak_ptr[abi:nn180100]();
    std::__throw_bad_weak_ptr[abi:nn180100]();
  }
}

void std::__throw_bad_weak_ptr[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");
  re::VideoHistogram::create(v0, v1);
}

void re::VideoHistogram::create(re::VideoHistogram *this@<X0>, void *a2@<X8>)
{
  re::VideoHistogram::VideoHistogram(v3);
  *a2 = v4;
}

void anonymous namespace'::videoHistogramAllocator(_anonymous_namespace_ *this)
{
  {
    if (v1)
    {
    }
  }
}

double re::VideoHistogram::VideoHistogram(re::VideoHistogram *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E722540;
  *((void *)this + 3) = 0x200000002;
  *((_DWORD *)this + 8) = 2;
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 10) = 0;
  *((unsigned char *)this + 44) = 0;
  *((void *)this + 73) = 0;
  *((_DWORD *)this + 148) = 0;
  *((void *)this + 139) = 0;
  *((_DWORD *)this + 280) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 272) = 0;
  *((_DWORD *)this + 546) = 0;
  *((void *)this + 338) = 0;
  *((_DWORD *)this + 678) = 0;
  *((_DWORD *)this + 414) = 0;
  *(_OWORD *)((char *)this + 1640) = 0u;
  return result;
}

void re::VideoHistogram::~VideoHistogram(re::VideoHistogram *this)
{
  *((void *)this + 338) = 0;
  ++*((_DWORD *)this + 678);
  *((void *)this + 272) = 0;
  ++*((_DWORD *)this + 546);
  *((void *)this + 206) = 0;
  ++*((_DWORD *)this + 414);
  *((void *)this + 139) = 0;
  ++*((_DWORD *)this + 280);
  *((void *)this + 73) = 0;
  ++*((_DWORD *)this + 148);
  *((void *)this + 7) = 0;
  ++*((_DWORD *)this + 16);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 338) = 0;
  ++*((_DWORD *)this + 678);
  *((void *)this + 272) = 0;
  ++*((_DWORD *)this + 546);
  *((void *)this + 206) = 0;
  ++*((_DWORD *)this + 414);
  *((void *)this + 139) = 0;
  ++*((_DWORD *)this + 280);
  *((void *)this + 73) = 0;
  ++*((_DWORD *)this + 148);
  *((void *)this + 7) = 0;
  ++*((_DWORD *)this + 16);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

double re::_IOSurfaceGetBulkAttachments(uint64_t a1, uint64_t a2)
{
  if (IOSurfaceGetBulkAttachments())
  {
    IOSurfaceGetBulkAttachments();
  }
  else
  {
    *(_DWORD *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
  }
  return result;
}

uint64_t re::_IOSurfaceSetBulkAttachments2()
{
  uint64_t result = IOSurfaceSetBulkAttachments2();
  if (result)
  {
    return IOSurfaceSetBulkAttachments2();
  }
  return result;
}

uint64_t re::VideoSurfaceBase::colorTags(re::VideoSurfaceBase *this)
{
  uint64_t v1 = *(void *)this;
  if (!v1) {
    goto LABEL_4;
  }
  int v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  re::_IOSurfaceGetBulkAttachments(v1, (uint64_t)v10);
  if (v2)
  {
    uint64_t v3 = *re::videoLogObjects(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      int v4 = 2;
      _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Unable to read input surface properties.", v9, 2u);
      goto LABEL_5;
    }
LABEL_4:
    int v4 = 2;
LABEL_5:
    int v5 = 2;
    int v6 = 2;
    return (v5 << 8) | (v6 << 16) | v4;
  }
  int v5 = BYTE11(v11);
  int v6 = BYTE12(v11);
  int v4 = BYTE10(v11);
  if ((BYTE11(v11) & 0xFD) == 0)
  {
    uint64_t v8 = *re::videoLogObjects(v2);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Invalid input surface properties. Fallback to Rec 709", v9, 2u);
    }
    int v5 = 1;
  }
  return (v5 << 8) | (v6 << 16) | v4;
}

float re::VideoSurfaceBase::edrFactor(__IOSurface **this)
{
  uint64_t v1 = *this;
  if (!v1) {
    return 1.0;
  }
  int valuePtr = 1065353216;
  CFNumberRef v2 = (const __CFNumber *)IOSurfaceCopyValue(v1, (CFStringRef)*MEMORY[0x263F0EDB0]);
  float v3 = 1.0;
  if (v2)
  {
    CFNumberRef v4 = v2;
    CFTypeID v5 = CFGetTypeID(v2);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberFloatType, &valuePtr);
      CFRelease(v4);
      return *(float *)&valuePtr;
    }
  }
  return v3;
}

void re::VideoSurfaceBase::setEdrFactor(IOSurfaceRef *this, float a2)
{
  float valuePtr = a2;
  if (*this)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberFloatType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      IOSurfaceSetValue(*this, (CFStringRef)*MEMORY[0x263F0EDB0], v3);
      CFRelease(v4);
    }
  }
}

uint64_t *re::videoMallocAllocator(re *this)
{
  {
    byte_2687A1B18 = 0;
    re::videoMallocAllocator(void)::allocator = (uint64_t)&unk_26E6DEC70;
    unk_2687A1B10 = "VideoMallocAllocator";
  }
  return &re::videoMallocAllocator(void)::allocator;
}

uint64_t re::videoStatisticsComputeAverageColor(re *this, const re::VideoHistogram *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  CFNumberRef v3 = (re::VideoDefaults *)objc_alloc_init(MEMORY[0x263F089D8]);
  if (re::VideoDefaults::logEnabled(v3)) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v4 = re::VideoHistogram::data(this);
    uint64_t v7 = (void *)v4;
    unint64_t v8 = *(void *)v4;
    if (!*(void *)v4) {
      break;
    }
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0;
    *(float *)&double v6 = (float)(256.0 / (float)v8) / 255.0;
    unint64_t v13 = *(void *)(v4 + 8);
    unint64_t v14 = *(void *)(v4 + 536);
    unint64_t v15 = *(void *)(v4 + 1064);
    unint64_t v16 = v8 - 1;
    if (v15 < v8 - 1) {
      unint64_t v16 = *(void *)(v4 + 1064);
    }
    if (v16 >= v14) {
      unint64_t v16 = *(void *)(v4 + 536);
    }
    if (v16 >= v13) {
      unint64_t v17 = *(void *)(v4 + 8);
    }
    else {
      unint64_t v17 = v16;
    }
    double v18 = 0.0;
    double v19 = 0.0;
    double v20 = 0.0;
    while (v13 > v16)
    {
      if (v14 == v17) {
        goto LABEL_38;
      }
      if (v15 == v17) {
        goto LABEL_39;
      }
      float v21 = *(float *)&v6 * (float)v12;
      uint64_t v4 = *((unsigned int *)v7 + v12 + 5);
      *(float *)&double v18 = *(float *)&v18 + (float)(v21 * (float)v4);
      BOOL v22 = (char *)v7 + 4 * v12;
      uint64_t v23 = *((unsigned int *)v22 + 137);
      *(float *)&double v19 = *(float *)&v19 + (float)(v21 * (float)v23);
      uint64_t v5 = *((unsigned int *)v22 + 269);
      *(float *)&double v20 = *(float *)&v20 + (float)(v21 * (float)v5);
      v9 += v4;
      v10 += v23;
      v11 += v5;
      if (v8 == ++v12)
      {
        v24.i32[3] = 0;
        v24.i64[0] = __PAIR64__(*(float *)&v19 / (float)v10, *(float *)&v18 / (float)v9);
        v24.f32[2] = *(float *)&v20 / (float)v11;
        goto LABEL_17;
      }
    }
    re::internal::assertLog((re::internal *)6, v5, v6, v18, v20, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v7[1], v13);
    _os_crash();
    __break(1u);
LABEL_38:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v14, v14);
    _os_crash();
    __break(1u);
LABEL_39:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v15, v15);
    _os_crash();
    __break(1u);
LABEL_40:
    BOOL v38 = re::VideoDefaults::videoStatisticsEnableScaling((re::VideoDefaults *)[(re::VideoDefaults *)v3 appendString:@"This is the default Settings for Statistics:"]);
    unint64_t v39 = "No";
    if (v38) {
      unint64_t v39 = "YES";
    }
    [(re::VideoDefaults *)v3 appendFormat:@"\n    HDR Scaling Algo   : %s", v39];
  }
  float32x4_t v24 = 0uLL;
LABEL_17:
  if (*((_DWORD *)this + 8) != 2)
  {
    float32x4_t v44 = v24;
    CFStringRef v25 = (re::VideoDefaults *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v4);
    if (v25)
    {
      [(re::VideoDefaults *)v3 appendString:@"\nUpdating to RGB Color for YCBCR HDR Content:"];
      [(re::VideoDefaults *)v3 appendFormat:@"\n    Average Color Before Conversion: [%f, %f, %f]", v44.f32[0], v44.f32[1], v44.f32[2]];
      if (*((unsigned char *)this + 36)) {
        int64_t v43 = "Yes";
      }
      else {
        int64_t v43 = "No";
      }
      CFStringRef v25 = (re::VideoDefaults *)[(re::VideoDefaults *)v3 appendFormat:@"\n    Is Full Range                  : %s", v43];
    }
    int v26 = *((_DWORD *)this + 8);
    if (*((unsigned char *)this + 36))
    {
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v32 = v44;
      switch(v26)
      {
        case 9:
          float32x4_t v33 = (float32x4_t)xmmword_234416720;
          float32x4_t v34 = (float32x4_t)xmmword_234416730;
          float32x4_t v35 = (float32x4_t)xmmword_234416740;
          break;
        case 6:
          float32x4_t v33 = (float32x4_t)xmmword_2344166F0;
          float32x4_t v34 = (float32x4_t)xmmword_234416700;
          float32x4_t v35 = (float32x4_t)xmmword_234416710;
          break;
        case 1:
          float32x4_t v33 = (float32x4_t)xmmword_234416750;
          float32x4_t v34 = (float32x4_t)xmmword_234416760;
          float32x4_t v35 = (float32x4_t)xmmword_234416770;
          break;
        default:
LABEL_28:
          _Q0 = (float32x4_t)xmmword_23435FD50;
          float32x4_t v34 = (float32x4_t)xmmword_23435FD60;
          float32x4_t v35 = (float32x4_t)xmmword_23435FD80;
          float32x4_t v33 = 0uLL;
          break;
      }
    }
    else
    {
      _Q0 = (float32x4_t)vdupq_n_s32(0x3F95A000u);
      float32x4_t v32 = v44;
      switch(v26)
      {
        case 9:
          float32x4_t v33 = (float32x4_t)xmmword_2344167B0;
          float32x4_t v34 = (float32x4_t)xmmword_2344167C0;
          float32x4_t v35 = (float32x4_t)xmmword_2344167D0;
          break;
        case 6:
          float32x4_t v33 = (float32x4_t)xmmword_234416780;
          float32x4_t v34 = (float32x4_t)xmmword_234416790;
          float32x4_t v35 = (float32x4_t)xmmword_2344167A0;
          break;
        case 1:
          float32x4_t v33 = (float32x4_t)xmmword_2344167E0;
          _Q0 = (float32x4_t)vdupq_n_s32(0x3F95A000u);
          float32x4_t v34 = (float32x4_t)xmmword_2344167F0;
          float32x4_t v35 = (float32x4_t)xmmword_234416800;
          break;
        default:
          goto LABEL_28;
      }
    }
    float32x4_t v45 = vaddq_f32(v33, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(_Q0, v32.f32[0]), v34, *(float32x2_t *)v32.f32, 1), v35, v32, 2));
    uint64_t v4 = re::VideoDefaults::videoStatisticsEnableScaling(v25);
    float32x4_t v24 = v45;
    if (v4) {
      float32x4_t v24 = vmulq_n_f32(v45, re::VideoDefaults::hdrToSDRColorAverage((re::VideoDefaults *)v4));
    }
  }
  v24.i32[3] = 0;
  float32x4_t v36 = vmaxnmq_f32(v24, (float32x4_t)0);
  v36.i32[3] = 0;
  float32x4_t v46 = vminnmq_f32(v36, (float32x4_t)xmmword_2343679C0);
  if (re::VideoDefaults::logEnabled((re::VideoDefaults *)v4))
  {
    [(re::VideoDefaults *)v3 appendString:@"\nComputing average RGB color from RGB histogram:"];
    [(re::VideoDefaults *)v3 appendFormat:@"\n        Bin Count          : %zu", *v7];
    [(re::VideoDefaults *)v3 appendFormat:@"\n    Average Color          : [%f, %f, %f]", v46.f32[0], v46.f32[1], v46.f32[2]];
    int64_t v40 = *re::videoLogObjects((re *)[(re::VideoDefaults *)v3 appendFormat:@"\n    Average Color RGB Value: [%f, %f, %f]", (float)((float)((float)(100.0 * v46.f32[0]) * 254.0) / 100.0), (float)((float)(vmuls_lane_f32(100.0, *(float32x2_t *)v46.f32, 1)* 254.0)/ 100.0), (float)((float)(vmuls_lane_f32(100.0, v46, 2) * 254.0) / 100.0)]);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      v41 = v3;
      uint64_t v42 = v40;
      *(_DWORD *)buf = 136315138;
      uint64_t v48 = [(re::VideoDefaults *)v41 cStringUsingEncoding:1];
      _os_log_impl(&dword_233120000, v42, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
  }

  return v46.i64[0];
}

int *re::defaultVideoHDRDisplayInfo(re *this)
{
  {
    if (v2)
    {
      CFNumberRef v3 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::displayDiagonalSize(v2);
      re::defaultVideoHDRDisplayInfo(void)::value = (int)v3;
      uint64_t v4 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::displayMaximumBrightnessInNits(v3);
      dword_2687A1B2C = (int)v4;
      uint64_t v5 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::displayAverageBrightnessInNits(v4);
      dword_2687A1B30 = (int)v5;
      dword_2687A1B34 = re::VideoHDRDefaults::displayMinimumBrightnessInNits(v5);
      dword_2687A1B38 = re::VideoHDRDefaults::displayContrastRatio(v6);
      byte_2687A1B3C = re::VideoHDRDefaults::displayAdjustsBlackLevel(v7);
    }
  }
  return &re::defaultVideoHDRDisplayInfo(void)::value;
}

void re::VideoTextureAllocator::~VideoTextureAllocator(void **this)
{
  re::ObjCObject::operator=(this + 6, 0);
  re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::clear((uint64_t)this);

  re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::deinit((uint64_t *)this);
}

void re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_22, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 232;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::VideoTextureAllocator::createTextureInternal(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10)
{
  v104[22] = *(id *)MEMORY[0x263EF8340];
  if (*(void *)(a1 + 48))
  {
    *(void *)&long long v96 = a2;
    *((void *)&v96 + 1) = a3;
    int v97 = a4;
    int v98 = a5;
    unsigned int v99 = a6;
    char v100 = a7;
    char v101 = a8;
    uint64_t v102 = a10;
    id v94 = 0;
    id v95 = 0;
    unint64_t v18 = re::Hash<re::internal::VideoTextureConfiguration>::operator()((uint64_t)&v96);
    uint64_t v93 = (re::VideoTextureAllocator *)a1;
    if (*(void *)a1)
    {
      uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v18 % *(unsigned int *)(a1 + 24)));
      if (v19 != 0x7FFFFFFF)
      {
        uint64_t v20 = *(void *)(a1 + 16);
        while (1)
        {
          float v21 = (void **)re::EqualTo<re::internal::VideoTextureConfiguration>::operator()((void *)(v20 + 232 * v19 + 16), &v96);
          if (v21) {
            break;
          }
          uint64_t v19 = *(_DWORD *)(v20 + 232 * v19 + 8) & 0x7FFFFFFF;
          if (v19 == 0x7FFFFFFF) {
            goto LABEL_7;
          }
        }
        uint64_t v43 = v20 + 232 * v19;
        uint64_t v46 = *(void *)(v43 + 88);
        float32x4_t v45 = (void **)(v43 + 88);
        uint64_t v44 = v46;
        if (v46)
        {
          int64_t v47 = v45 + 2;
          uint64_t v48 = 16 * v44;
          while (1)
          {
            uint64_t v49 = (char *)objc_msgSend(*v47, sel_usedSize) + *(void *)(v20 + 232 * v19 + 64);
            float v21 = (void **)objc_msgSend(*v47, sel_size);
            if (v49 <= (char *)v21) {
              break;
            }
            v47 += 2;
            v48 -= 16;
            if (!v48) {
              goto LABEL_63;
            }
          }
          NS::SharedPtr<MTL::Texture>::operator=(&v95, v47);
          float v21 = NS::SharedPtr<MTL::Texture>::operator=(&v94, v45 - 4);
          v47[1] = 0;
        }
LABEL_63:
        BOOL v22 = (__CFString *)v93;
        if (!v95)
        {
          if ((unint64_t)*v45 > 7)
          {
            v88 = *re::videoLogObjects((re *)v21);
            float v21 = (void **)os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT);
            if (v21)
            {
              LOWORD(v104[0]) = 0;
              _os_log_impl(&dword_233120000, v88, OS_LOG_TYPE_DEFAULT, "Video texture allocator has reached the maximum number of allowed heaps for the given configuration.", (uint8_t *)v104, 2u);
            }
          }
          else
          {
            v104[0] = objc_msgSend(*((id *)v93 + 6), sel_newHeapWithDescriptor_, *(void *)(v20 + 232 * v19 + 80));
            NS::SharedPtr<MTL::Texture>::operator=(&v95, v104);
            if (v104[0]) {

            }
            NS::SharedPtr<MTL::Texture>::operator=(&v94, v45 - 4);
            v104[0] = 0;
            v104[1] = 0;
            NS::SharedPtr<MTL::Texture>::operator=(v104, &v95);
            v104[1] = 0;
            v56 = (re *)re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::add((uint64_t)v45, v104);
            v57 = *re::videoLogObjects(v56);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              v58 = *v45;
              LODWORD(v103) = 134217984;
              *(void *)((char *)&v103 + 4) = v58;
              _os_log_impl(&dword_233120000, v57, OS_LOG_TYPE_DEFAULT, "Created new heap (%zu heaps total for configuration)", (uint8_t *)&v103, 0xCu);
            }
            float v21 = (void **)v104[0];
            if (v104[0]) {
          }
            }
        }
LABEL_49:
        size_t v50 = (re::VideoDefaults *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v21);
        if (v50)
        {
          v60 = [MEMORY[0x263F089D8] stringWithString:@"Video Texture Allocator:"];
          int v59 = v60;
          uint64_t isa_low = LODWORD(v22[1].isa);
          uint64_t v61 = 0;
          if (isa_low)
          {
            unint64_t v62 = (int *)(v22->data + 8);
            while (1)
            {
              int v63 = *v62;
              v62 += 58;
              if (v63 < 0) {
                break;
              }
              if (isa_low == ++v61)
              {
                LODWORD(v61) = v22[1].isa;
                break;
              }
            }
          }
          if (isa_low != v61)
          {
            uint64_t v64 = 0;
            uint64_t v65 = v61;
            BOOL v22 = @"\n    Heap %zu / %zu: %zu bytes / %zu bytes";
            while (1)
            {
              uint64_t v66 = *((void *)v93 + 2);
              int v91 = v64;
              v60 = (re *)[v59 appendFormat:@"\nConfig %d / %d", v64, *((unsigned int *)v93 + 7)];
              uint64_t v67 = v66 + 232 * v65;
              uint64_t v69 = *(void *)(v67 + 88);
              v51 = (unint64_t *)(v67 + 88);
              uint64_t v68 = v69;
              if (v69) {
                break;
              }
LABEL_84:
              uint64_t v64 = (v91 + 1);
              unsigned int v75 = *((_DWORD *)v93 + 8);
              if (v75 <= (int)v61 + 1) {
                unsigned int v75 = v61 + 1;
              }
              while (1)
              {
                uint64_t v65 = (v61 + 1);
                if (v75 - 1 == v61) {
                  break;
                }
                LODWORD(v61) = v61 + 1;
                unsigned int v76 = v65;
                if ((*(_DWORD *)(*((void *)v93 + 2) + 232 * v65 + 8) & 0x80000000) != 0) {
                  goto LABEL_90;
                }
              }
              unsigned int v76 = v75;
LABEL_90:
              LODWORD(v61) = v76;
              if (isa_low == v76) {
                goto LABEL_91;
              }
            }
            unint64_t v70 = 0;
            long long v71 = (id *)(v66 + 232 * v65 + 104);
            while (1)
            {
              id v72 = objc_msgSend(*v71, sel_usedSize);
              if (*v51 <= v70) {
                break;
              }
              id v74 = *v71;
              v71 += 2;
              v60 = (re *)-[NSObject appendFormat:](v59, "appendFormat:", @"\n    Heap %zu / %zu: %zu bytes / %zu bytes", v70++, v68, v72, objc_msgSend(v74, sel_size));
              uint64_t v68 = *v51;
              if (v70 >= *v51) {
                goto LABEL_84;
              }
            }
            re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v70, *v51);
            _os_crash();
            __break(1u);
            goto LABEL_97;
          }
LABEL_91:
          v77 = *re::videoLogObjects(v60);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            CFDictionaryRef v78 = v59;
            long long v79 = v77;
            long long v80 = (void *)[v78 cStringUsingEncoding:1];
            LODWORD(v104[0]) = 136315138;
            *(id *)((char *)v104 + 4) = v80;
            _os_log_impl(&dword_233120000, v79, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)v104, 0xCu);
          }
          BOOL v22 = (__CFString *)v93;
        }
        v51 = a9;
        if (v95 && v94)
        {
          v52 = (re *)re::VideoDefaults::logEnabled(v50);
          if (v52)
          {
            long long v81 = *re::videoLogObjects(v52);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
            {
              id v82 = v95;
              long long v83 = v81;
              id v84 = objc_msgSend(v82, sel_usedSize);
              id v85 = objc_msgSend(v95, sel_size);
              double v86 = (double)(unint64_t)objc_msgSend(v95, sel_usedSize);
              id v87 = objc_msgSend(v95, sel_size);
              LODWORD(v104[0]) = 134218752;
              *(id *)((char *)v104 + 4) = v82;
              WORD2(v104[1]) = 2048;
              *(id *)((char *)&v104[1] + 6) = v84;
              v51 = a9;
              BOOL v22 = (__CFString *)v93;
              HIWORD(v104[2]) = 2048;
              v104[3] = v85;
              LOWORD(v104[4]) = 2048;
              *(double *)((char *)&v104[4] + 2) = v86 / (double)(unint64_t)v87 * 100.0;
              _os_log_impl(&dword_233120000, v83, OS_LOG_TYPE_DEFAULT, "Creating new texture from heap %p: %zu / %zu (%.1f%%).", (uint8_t *)v104, 0x2Au);
            }
          }
          id v53 = objc_msgSend(v95, sel_newTextureWithDescriptor_, v94);
          uint64_t v54 = (re *)re::VideoTextureAllocator::cleanup((re::VideoTextureAllocator *)v22, 0xAuLL);
          if (v53) {
            goto LABEL_57;
          }
          goto LABEL_54;
        }
        int v59 = *re::videoLogObjects(v50);
        if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
LABEL_72:
          uint64_t v54 = (re *)re::VideoTextureAllocator::cleanup((re::VideoTextureAllocator *)v22, 0xAuLL);
LABEL_54:
          uint64_t v55 = *re::videoLogObjects(v54);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v104[0]) = 0;
            _os_log_error_impl(&dword_233120000, v55, OS_LOG_TYPE_ERROR, "Video texture allocator is unable to create video texture.", (uint8_t *)v104, 2u);
          }
          id v53 = 0;
LABEL_57:
          unint64_t *v51 = (unint64_t)v53;
          if (v94) {

          }
          if (v95) {
          return;
          }
        }
LABEL_97:
        LOWORD(v104[0]) = 0;
        _os_log_error_impl(&dword_233120000, v59, OS_LOG_TYPE_ERROR, "Heap entry not found.", (uint8_t *)v104, 2u);
        goto LABEL_72;
      }
    }
LABEL_7:
    BOOL v22 = (__CFString *)v93;
    re::VideoTextureAllocator::cleanup(v93, 0);
    uint64_t v23 = [MEMORY[0x263F12A50] texture2DDescriptorWithPixelFormat:a4 width:a2 height:a3 mipmapped:a7];
    float32x4_t v24 = v23;
    if (v23)
    {
      [v23 setUsage:a6];
      uint64_t v25 = a5;
      [v24 setStorageMode:a5];
      if (a8)
      {
        objc_msgSend(v24, "setUsage:", objc_msgSend(v24, "usage") | 0x4000);
        [v24 setCompressionMode:1];
      }
      [v24 setProtectionOptions:a10];
      v104[0] = v24;
      id v26 = v24;
      NS::SharedPtr<MTL::Texture>::operator=(&v94, v104);
      if (v104[0]) {

      }
      id v27 = objc_msgSend(objc_msgSend(MEMORY[0x263F128F0], sel_alloc), sel_init);
      if (v27)
      {
        uint64_t v28 = v27;
        id v29 = objc_msgSend(*((id *)v93 + 6), sel_heapTextureSizeAndAlignWithDescriptor_, v94);
        __int16 v31 = v30;
        objc_msgSend(v28, sel_setSize_, 3 * (void)v29);
        objc_msgSend(v28, sel_setStorageMode_, v25);
        objc_msgSend(v28, sel_setHazardTrackingMode_, 2);
        objc_msgSend(v28, sel_setProtectionOptions_, a10);
        v104[0] = objc_msgSend(*((id *)v93 + 6), sel_newHeapWithDescriptor_, v28);
        NS::SharedPtr<MTL::Texture>::operator=(&v95, v104);
        float32x4_t v32 = (re *)v104[0];
        if (v104[0]) {

        }
        id v33 = v95;
        float32x4_t v34 = *re::videoLogObjects(v32);
        if (!v33)
        {
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v104[0]) = 0;
            _os_log_error_impl(&dword_233120000, v34, OS_LOG_TYPE_ERROR, "Video texture allocator is unable to create a texture heap.", (uint8_t *)v104, 2u);
          }
          goto LABEL_47;
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v104[0]) = 0;
          _os_log_impl(&dword_233120000, v34, OS_LOG_TYPE_DEFAULT, "Video texture allocator is adding a new configuration entry.", (uint8_t *)v104, 2u);
        }
        memset(v104, 0, 44);
        v104[3] = v28;
        NS::SharedPtr<MTL::Texture>::operator=(v104, &v94);
        v104[1] = v29;
        v104[2] = v31;
        long long v103 = 0uLL;
        NS::SharedPtr<MTL::Texture>::operator=((void **)&v103, &v95);
        *((void *)&v103 + 1) = 0;
        re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::add((uint64_t)&v104[4], &v103);
        unint64_t v35 = re::Hash<re::internal::VideoTextureConfiguration>::operator()((uint64_t)&v96);
        unint64_t v36 = v35;
        if (*(void *)v93)
        {
          unint64_t v37 = v35 % *((unsigned int *)v93 + 6);
          uint64_t v38 = *(unsigned int *)(*((void *)v93 + 1) + 4 * v37);
          if (v38 != 0x7FFFFFFF)
          {
            uint64_t v39 = *((void *)v93 + 2);
            while (!re::EqualTo<re::internal::VideoTextureConfiguration>::operator()((void *)(v39 + 232 * v38 + 16), &v96))
            {
              uint64_t v38 = *(_DWORD *)(v39 + 232 * v38 + 8) & 0x7FFFFFFF;
              if (v38 == 0x7FFFFFFF) {
                goto LABEL_40;
              }
            }
            goto LABEL_41;
          }
        }
        else
        {
          LODWORD(v37) = 0;
        }
LABEL_40:
        re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::addAsMove((uint64_t)v93, v37, v36, &v96, (uint64_t)v104);
        ++*((_DWORD *)v93 + 10);
LABEL_41:
        if ((void)v103) {

        }
        re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::clear((uint64_t)&v104[4]);
        if (v104[3])
        {

          v104[3] = 0;
        }
        if (v104[0]) {

        }
LABEL_47:
        BOOL v22 = (__CFString *)v93;
        goto LABEL_48;
      }
      v41 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v104[0]) = 0;
        uint64_t v42 = "Video texture allocator is unable to create a texture heap descriptor.";
        goto LABEL_31;
      }
    }
    else
    {
      v41 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v104[0]) = 0;
        uint64_t v42 = "Video texture allocator is unable to create a texture descriptor.";
LABEL_31:
        _os_log_error_impl(&dword_233120000, v41, OS_LOG_TYPE_ERROR, v42, (uint8_t *)v104, 2u);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  int64_t v40 = *re::videoLogObjects((re *)a1);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v104[0]) = 0;
    _os_log_error_impl(&dword_233120000, v40, OS_LOG_TYPE_ERROR, "Video texture allocator is not initialized.", (uint8_t *)v104, 2u);
  }
  *a9 = 0;
}

void re::VideoTextureAllocator::createTexture(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10)
{
}

uint64_t re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::add(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)result;
  if (*(void *)result >= 8uLL)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v3 = result + 16 * v2;
    uint64_t v4 = a2[1];
    *(void *)(v3 + 16) = *a2;
    *a2 = 0;
    *(void *)(v3 + 24) = v4;
    *(void *)uint64_t result = v2 + 1;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t re::VideoTextureAllocator::cleanup(re::VideoTextureAllocator *this, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = this;
  unint64_t v70 = 0;
  uint64_t v71 = 0;
  int v72 = 1;
  unint64_t v73 = 0;
  id v74 = 0;
  uint64_t v4 = *((unsigned int *)this + 8);
  if (v4)
  {
    uint64_t v5 = 0;
    double v6 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 58;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if (v4 != v5)
  {
    uint64_t v8 = v5;
    unint64_t v66 = 0;
    unint64_t v9 = &selRef_stepFunction_0;
    int v10 = 1;
    int v63 = *((_DWORD *)this + 8);
    while (1)
    {
      uint64_t v11 = *((void *)v3 + 2);
      uint64_t v12 = v11 + 232 * v8;
      long long v67 = 0uLL;
      LODWORD(v68) = 1;
      *((void *)&v68 + 1) = 0;
      uint64_t v69 = 0;
      uint64_t v15 = *(void *)(v12 + 88);
      unint64_t v14 = (unint64_t *)(v12 + 88);
      uint64_t v13 = v15;
      if (!v15) {
        goto LABEL_51;
      }
      int v65 = v10;
      unint64_t v16 = (char *)(v14 + 2);
      uint64_t v17 = v11;
      unint64_t v18 = (unint64_t *)(v11 + 232 * v8 + 112);
      uint64_t v19 = 16 * v13;
      do
      {
        this = (re::VideoTextureAllocator *)[(id)*(v18 - 1) v9[21]];
        if (this)
        {
          *unint64_t v18 = 0;
          goto LABEL_29;
        }
        unint64_t v21 = *v18 + 1;
        *unint64_t v18 = v21;
        if (v21 >= v2)
        {
          if ((void)v67)
          {
            char v22 = v68;
            if (v68)
            {
              unint64_t v23 = *((void *)&v67 + 1) + 1;
              if ((unint64_t)(*((void *)&v67 + 1) + 1) >= 5)
              {
                unint64_t v24 = 8;
LABEL_22:
                if (v24 <= v23) {
                  unint64_t v25 = v23;
                }
                else {
                  unint64_t v25 = v24;
                }
                re::DynamicOverflowArray<re::VideoTextureAllocator::HeapEntry,4ul>::setCapacity((uint64_t *)&v67, v25);
                char v22 = v68;
              }
            }
            else if (*((void *)&v67 + 1) >= *((void *)&v68 + 1))
            {
              unint64_t v23 = *((void *)&v67 + 1) + 1;
              if (*((void *)&v68 + 1) < (unint64_t)(*((void *)&v67 + 1) + 1))
              {
                unint64_t v24 = 2 * *((void *)&v68 + 1);
                goto LABEL_22;
              }
            }
          }
          else
          {
            re::DynamicOverflowArray<re::VideoTextureAllocator::HeapEntry,4ul>::setCapacity((uint64_t *)&v67, *((void *)&v67 + 1) + 1);
            char v22 = v68 + 2;
            LODWORD(v68) = v68 + 2;
          }
          BOOL v26 = (v22 & 1) == 0;
          id v27 = v69;
          if (!v26) {
            id v27 = (char *)&v68 + 8;
          }
          uint64_t v28 = &v27[16 * *((void *)&v67 + 1)];
          this = (re::VideoTextureAllocator *)(id)*(v18 - 1);
          *(void *)uint64_t v28 = this;
          *((void *)v28 + 1) = *v18;
          ++*((void *)&v67 + 1);
          LODWORD(v68) = v68 + 2;
          unint64_t v9 = &selRef_stepFunction_0;
        }
LABEL_29:
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
      if (v68) {
        id v29 = (char *)&v68 + 8;
      }
      else {
        id v29 = v69;
      }
      unint64_t v30 = *v14;
      if (*((void *)&v67 + 1))
      {
        __int16 v31 = &v29[16 * *((void *)&v67 + 1)];
        float32x4_t v32 = (_DWORD *)(v17 + 232 * v8 + 96);
        do
        {
          id v33 = (void **)&v16[16 * v30];
          if (v30)
          {
            uint64_t v34 = 16 * v30;
            unint64_t v35 = (char *)(v14 + 2);
            while (*(void *)v35 != *(void *)v29 || *((void *)v35 + 1) != *((void *)v29 + 1))
            {
              v35 += 16;
              v34 -= 16;
              if (!v34)
              {
                unint64_t v35 = &v16[16 * v30];
                break;
              }
            }
          }
          else
          {
            unint64_t v35 = (char *)(v14 + 2);
          }
          unint64_t v36 = (v35 - v16) >> 4;
          if (v36 != v30)
          {
            if (v30 <= v36)
            {
              re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 527, v36, v30);
              uint64_t result = _os_crash();
              __break(1u);
              return result;
            }
            if (v30 - 1 > v36)
            {
              unint64_t v37 = (void **)&v16[16 * v36];
              NS::SharedPtr<MTL::Texture>::operator=(v37, v33 - 2);
              v37[1] = *(v33 - 1);
              unint64_t v30 = *v14;
            }
            uint64_t v38 = (re::VideoTextureAllocator **)&v14[2 * v30];
            this = *v38;
            if (*v38)
            {

              CGColorSpace *v38 = 0;
              unint64_t v30 = *v14;
            }
            unint64_t *v14 = --v30;
            ++*v32;
          }
          v29 += 16;
        }
        while (v29 != v31);
      }
      LODWORD(v4) = v63;
      unint64_t v2 = a2;
      unint64_t v9 = &selRef_stepFunction_0;
      int v10 = v65;
      if (!v30)
      {
LABEL_51:
        if (v70)
        {
          if (v10)
          {
            unint64_t v39 = v66 + 1;
            if (v66 + 1 >= 5)
            {
              unint64_t v40 = 8;
LABEL_59:
              if (v40 <= v39) {
                unint64_t v41 = v39;
              }
              else {
                unint64_t v41 = v40;
              }
              this = (re::VideoTextureAllocator *)re::DynamicOverflowArray<re::internal::VideoTextureConfiguration,4ul>::setCapacity(&v70, v41);
              LOBYTE(v10) = v72;
            }
          }
          else if (v66 >= v73)
          {
            unint64_t v39 = v66 + 1;
            if (v73 < v66 + 1)
            {
              unint64_t v40 = 2 * v73;
              goto LABEL_59;
            }
          }
        }
        else
        {
          this = (re::VideoTextureAllocator *)re::DynamicOverflowArray<re::internal::VideoTextureConfiguration,4ul>::setCapacity(&v70, v66 + 1);
          LOBYTE(v10) = v72 + 2;
          v72 += 2;
        }
        uint64_t v42 = v74;
        if (v10) {
          uint64_t v42 = &v73;
        }
        uint64_t v43 = &v42[5 * v71];
        long long v44 = *(_OWORD *)(v14 - 9);
        long long v45 = *(_OWORD *)(v14 - 7);
        v43[4] = *(v14 - 5);
        *(_OWORD *)uint64_t v43 = v44;
        *((_OWORD *)v43 + 1) = v45;
        unint64_t v66 = ++v71;
        int v10 = v72 + 2;
        v72 += 2;
      }
      if ((void)v67)
      {
        char v46 = v68;
        if (*((void *)&v67 + 1))
        {
          int v47 = v10;
          if (v68) {
            uint64_t v48 = (re::VideoTextureAllocator **)&v68 + 1;
          }
          else {
            uint64_t v48 = (re::VideoTextureAllocator **)v69;
          }
          uint64_t v49 = 16 * *((void *)&v67 + 1);
          do
          {
            this = *v48;
            if (*v48)
            {

              *uint64_t v48 = 0;
            }
            v48 += 2;
            v49 -= 16;
          }
          while (v49);
          char v46 = v68;
          int v10 = v47;
        }
        if ((v46 & 1) == 0) {
          this = (re::VideoTextureAllocator *)(*(uint64_t (**)(void, char *))(*(void *)v67 + 40))(v67, v69);
        }
      }
      unsigned int v50 = *((_DWORD *)v3 + 8);
      if (v50 <= (int)v5 + 1) {
        unsigned int v50 = v5 + 1;
      }
      while (1)
      {
        uint64_t v8 = (v5 + 1);
        if (v50 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        unsigned int v51 = v8;
        if ((*(_DWORD *)(*((void *)v3 + 2) + 232 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_84;
        }
      }
      unsigned int v51 = v50;
LABEL_84:
      LODWORD(v5) = v51;
      if (v4 == v51)
      {
        if (v10) {
          v52 = &v73;
        }
        else {
          v52 = v74;
        }
        if (v66)
        {
          id v53 = &v52[5 * v66];
          do
          {
            long long v67 = *(_OWORD *)v52;
            long long v68 = *((_OWORD *)v52 + 1);
            uint64_t v69 = (char *)v52[4];
            unint64_t v54 = re::Hash<re::internal::VideoTextureConfiguration>::operator()((uint64_t)&v67);
            if (*(void *)v3)
            {
              unint64_t v55 = v54 % *((unsigned int *)v3 + 6);
              uint64_t v56 = *((void *)v3 + 1);
              uint64_t v57 = *(unsigned int *)(v56 + 4 * v55);
              if (v57 != 0x7FFFFFFF)
              {
                uint64_t v58 = *((void *)v3 + 2);
                if (re::EqualTo<re::internal::VideoTextureConfiguration>::operator()((void *)(v58 + 232 * v57 + 16), &v67))
                {
                  *(_DWORD *)(v56 + 4 * v55) = *(_DWORD *)(v58 + 232 * v57 + 8) & 0x7FFFFFFF;
LABEL_97:
                  re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::EntryWithHash::free(*((void *)v3 + 2) + 232 * v57);
                  uint64_t v60 = *((void *)v3 + 2) + 232 * v57;
                  *(_DWORD *)(v60 + 8) = *(_DWORD *)(v60 + 8) & 0x80000000 | *((_DWORD *)v3 + 9);
                  --*((_DWORD *)v3 + 7);
                  int v61 = *((_DWORD *)v3 + 10) + 1;
                  *((_DWORD *)v3 + 9) = v57;
                  *((_DWORD *)v3 + 10) = v61;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v59 = v57;
                    uint64_t v57 = *(_DWORD *)(v58 + 232 * v57 + 8) & 0x7FFFFFFF;
                    if (v57 == 0x7FFFFFFF) {
                      break;
                    }
                    if (re::EqualTo<re::internal::VideoTextureConfiguration>::operator()((void *)(v58 + 232 * v57 + 16), &v67))
                    {
                      *(_DWORD *)(v58 + 232 * v59 + 8) = *(_DWORD *)(v58 + 232 * v59 + 8) & 0x80000000 | *(_DWORD *)(v58 + 232 * v57 + 8) & 0x7FFFFFFF;
                      goto LABEL_97;
                    }
                  }
                }
              }
            }
            v52 += 5;
          }
          while (v52 != v53);
        }
        break;
      }
    }
  }
  uint64_t result = (uint64_t)v70;
  if (v70)
  {
    if ((v72 & 1) == 0) {
      return (*(uint64_t (**)(void))(*v70 + 40))();
    }
  }
  return result;
}

void re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::clear(uint64_t a1)
{
  unint64_t v2 = (id *)(a1 + 16);
  if (*(void *)a1)
  {
    uint64_t v3 = 16 * *(void *)a1;
    do
    {
      if (*v2)
      {

        id *v2 = 0;
      }
      v2 += 2;
      v3 -= 16;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  ++*(_DWORD *)(a1 + 8);
}

double re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 232;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::clear(a1 + 88);
    uint64_t v3 = *(void **)(a1 + 80);
    if (v3)
    {

      *(void *)(a1 + 80) = 0;
    }
    unint64_t v4 = *(void **)(a1 + 56);
    if (v4)
    {

      *(void *)(a1 + 56) = 0;
    }
  }
}

BOOL re::EqualTo<re::internal::VideoTextureConfiguration>::operator()(void *a1, void *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && *(void *)((char *)a1 + 22) == *(void *)((char *)a2 + 22)
      && a1[4] == a2[4];
}

unint64_t re::Hash<re::internal::VideoTextureConfiguration>::operator()(uint64_t a1)
{
  unint64_t v1 = 0xBF58476D1CE4E5B9 * (*(void *)a1 ^ (*(void *)a1 >> 30));
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)(a1 + 8) ^ (*(void *)(a1 + 8) >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  LODWORD(v2) = 73244475 * (*(_DWORD *)(a1 + 16) ^ HIWORD(*(_DWORD *)(a1 + 16)));
  unint64_t v4 = (73244475 * (v2 ^ WORD1(v2))) ^ ((73244475 * (v2 ^ WORD1(v2))) >> 16);
  LODWORD(v2) = 73244475 * (*(_DWORD *)(a1 + 20) ^ HIWORD(*(_DWORD *)(a1 + 20)));
  uint64_t v5 = (73244475 * (v2 ^ WORD1(v2))) ^ ((73244475 * (v2 ^ WORD1(v2))) >> 16);
  LODWORD(v2) = 73244475 * (*(_DWORD *)(a1 + 24) ^ HIWORD(*(_DWORD *)(a1 + 24)));
  unint64_t v6 = (73244475 * (v2 ^ WORD1(v2))) ^ ((73244475 * (v2 ^ WORD1(v2))) >> 16);
  LODWORD(v2) = 73244475
              * ((73244475 * *(unsigned __int8 *)(a1 + 28)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 28)) >> 16));
  unsigned int v7 = 73244475
     * ((73244475 * *(unsigned __int8 *)(a1 + 29)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 29)) >> 16));
  uint64_t v8 = *(void *)(a1 + 32) ^ (*(void *)(a1 + 32) >> 30);
  unint64_t v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27));
  return re::hashCombine((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31), v3, v4, v5, v6, (((unint64_t)(v2 ^ WORD1(v2)) << 6)+ ((unint64_t)(v2 ^ WORD1(v2)) >> 2)- 0x61C8864680B583E9+ (((v9 ^ (v9 >> 31))+ ((unint64_t)(v7 ^ HIWORD(v7)) << 6)+ ((unint64_t)(v7 ^ HIWORD(v7)) >> 2)- 0x61C8864680B583E9) ^ v7 ^ HIWORD(v7))) ^ v2 ^ WORD1(v2));
}

void re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, long long *a4, uint64_t a5)
{
  unsigned int v9 = *(_DWORD *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 32);
    unsigned int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v39, 0, 36);
          *(void *)&v39[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::init((uint64_t)v39, v13, v12);
          long long v15 = *(_OWORD *)v39;
          *(_OWORD *)unint64_t v39 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v39[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v39[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v39[24];
          *(_OWORD *)&v39[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v39[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 56;
            do
            {
              if ((*(_DWORD *)(v21 - 48) & 0x80000000) != 0) {
                re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::addAsMove(a1, *(void *)(v21 - 56) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 56), v21 - 40, v21);
              }
              v21 += 232;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::deinit((uint64_t *)v39);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      unsigned int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 232 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 232 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  uint64_t v25 = 232 * v9;
  *(_DWORD *)(v22 + v25 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v25 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v25 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v25) = a3;
  uint64_t v26 = a2;
  uint64_t v27 = *(void *)(a1 + 16) + v25;
  long long v28 = *a4;
  long long v29 = a4[1];
  *(void *)(v27 + 48) = *((void *)a4 + 4);
  *(_OWORD *)(v27 + 16) = v28;
  *(_OWORD *)(v27 + 32) = v29;
  uint64_t v30 = *(void *)(a1 + 16);
  uint64_t v31 = v30 + 232 * v9;
  *(void *)(v31 + 56) = *(void *)a5;
  *(void *)a5 = 0;
  long long v32 = *(_OWORD *)(a5 + 8);
  *(void *)(v31 + 88) = 0;
  uint64_t v33 = v31 + 88;
  *(_OWORD *)(v33 - 24) = v32;
  uint64_t v36 = *(void *)(a5 + 32);
  uint64_t v35 = a5 + 32;
  uint64_t v34 = v36;
  *(void *)(v33 - 8) = *(void *)(v35 - 8);
  *(void *)(v35 - 8) = 0;
  *(_DWORD *)(v33 + 8) = 0;
  if (v36)
  {
    unint64_t v37 = (void *)(v35 + 16);
    uint64_t v38 = (void *)(v30 + 232 * v9 + 104);
    do
    {
      void *v38 = *v37;
      void *v37 = 0;
      v38[1] = v37[1];
      v37 += 2;
      v38 += 2;
    }
    while (v37 != (void *)(v35 + 16 + 16 * v34));
  }
  *(void *)uint64_t v33 = v34;
  re::DynamicInlineArray<re::VideoTextureAllocator::HeapEntry,8ul>::clear(v35);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v26) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::HashTable<re::internal::VideoTextureConfiguration,re::VideoTextureAllocator::ConfigurationEntry,re::Hash<re::internal::VideoTextureConfiguration>,re::EqualTo<re::internal::VideoTextureConfiguration>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unsigned int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 232 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_22, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicOverflowArray<re::VideoTextureAllocator::HeapEntry,4ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t result = *a1;
  if (a2 && !result)
  {
    uint64_t result = re::DynamicOverflowArray<re::VideoTextureAllocator::HeapEntry,4ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        BOOL v14 = a1 + 3;
        if (v7) {
          long long v15 = a1 + 3;
        }
        else {
          long long v15 = (void *)a1[4];
        }
        if (v9)
        {
          uint64_t v16 = &v15[2 * v9];
          do
          {
            uint64_t v17 = v15[1];
            void *v14 = *v15;
            void *v15 = 0;
            v15 += 2;
            v14[1] = v17;
            v14 += 2;
          }
          while (v15 != v16);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 16 * a2;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)result + 32))(result, 16 * a2, 8);
        if (result)
        {
          uint64_t v11 = result;
          int v12 = *((_DWORD *)a1 + 4);
          if (v12) {
            uint64_t v13 = a1 + 3;
          }
          else {
            uint64_t v13 = (void *)a1[4];
          }
          uint64_t v18 = a1[1];
          if (v18)
          {
            long long v19 = &v13[2 * v18];
            uint64_t v20 = (void *)result;
            do
            {
              uint64_t v21 = v13[1];
              *uint64_t v20 = *v13;
              *uint64_t v13 = 0;
              v13 += 2;
              v20[1] = v21;
              v20 += 2;
            }
            while (v13 != v19);
            int v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void *re::DynamicOverflowArray<re::internal::VideoTextureConfiguration,4ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<re::internal::VideoTextureConfiguration,4ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        BOOL v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          uint64_t v16 = v4 + 3;
        }
        else {
          uint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 40 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x28uLL))
      {
        uint64_t v2 = 40 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 40 * a2, 8);
        if (v10)
        {
          int v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 40 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 40, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

const __CFArray *re::VideoColorTransformBase::conversionMatrix@<X0>(CFArrayRef *this@<X0>, uint64_t a2@<X8>)
{
  CFArrayRef result = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x263EFD900]);
  if (result)
  {
    CFArrayRef v4 = result;
    CFIndex v5 = 0;
    long long v12 = xmmword_23435FD50;
    long long v13 = xmmword_23435FD60;
    long long v14 = xmmword_23435FD80;
    int v6 = &v12;
    do
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v4, v5);
      CFIndex v8 = 0;
      unint64_t v9 = v6;
      do
      {
        CFNumberRef v10 = (const __CFNumber *)CFArrayGetValueAtIndex(ValueAtIndex, v8);
        CFArrayRef result = (const __CFArray *)CFNumberGetValue(v10, kCFNumberFloat32Type, v9);
        ++v8;
        ++v9;
      }
      while (v8 != 3);
      ++v5;
      int v6 = (long long *)((char *)v6 + 4);
    }
    while (v5 != 3);
    *(unsigned char *)a2 = 1;
    long long v11 = v13;
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v14;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  return result;
}

const __CFArray *re::VideoColorTransformBase::findFragment(CFArrayRef *this, const __CFString *a2)
{
  CFArrayRef result = *this;
  if (result)
  {
    CFIndex Count = CFArrayGetCount(result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v6 = Count;
      CFIndex v7 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*this, v7);
        value = 0;
        if (CFDictionaryGetValueIfPresent(ValueAtIndex, a2, (const void **)&value)) {
          break;
        }
        if (v6 == ++v7) {
          return 0;
        }
      }
      return (const __CFArray *)value;
    }
  }
  return result;
}

const __CFArray *re::VideoColorTransformBase::gammaToneCurve@<X0>(CFArrayRef *this@<X0>, uint64_t a2@<X8>)
{
  CFArrayRef Fragment = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x263EFD918]);
  if (Fragment)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_OWORD *)&v41[4] = _D0;
    *(void *)&v41[20] = 0;
    *(_DWORD *)&v41[28] = 0;
    *(_DWORD *)unint64_t v41 = 1;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(Fragment, 0);
    CFArrayRef result = (const __CFArray *)CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, &v41[4]);
    *(unsigned char *)a2 = 1;
LABEL_12:
    long long v40 = *(_OWORD *)&v41[16];
    *(_OWORD *)(a2 + 4) = *(_OWORD *)v41;
    *(_OWORD *)(a2 + 20) = v40;
    return result;
  }
  CFArrayRef v12 = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x263EFD920]);
  if (v12)
  {
    CFArrayRef v13 = v12;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&v41[4] = _D0;
    memset(&v41[12], 0, 20);
    *(_DWORD *)unint64_t v41 = 2;
    CFNumberRef v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
    CFNumberGetValue(v15, kCFNumberFloat32Type, &v41[4]);
    CFNumberRef v16 = (const __CFNumber *)CFArrayGetValueAtIndex(v13, 1);
    CFNumberGetValue(v16, kCFNumberFloat32Type, &v41[8]);
    CFNumberRef v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v13, 2);
    uint64_t v18 = &v41[12];
LABEL_11:
    CFArrayRef result = (const __CFArray *)CFNumberGetValue(v17, kCFNumberFloat32Type, v18);
    *(unsigned char *)a2 = 1;
    goto LABEL_12;
  }
  CFArrayRef v19 = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x263EFD928]);
  if (v19)
  {
    CFArrayRef v20 = v19;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&v41[4] = _D0;
    memset(&v41[12], 0, 20);
    *(_DWORD *)unint64_t v41 = 3;
    CFNumberRef v22 = (const __CFNumber *)CFArrayGetValueAtIndex(v19, 0);
    CFNumberGetValue(v22, kCFNumberFloat32Type, &v41[4]);
    CFNumberRef v23 = (const __CFNumber *)CFArrayGetValueAtIndex(v20, 1);
    CFNumberGetValue(v23, kCFNumberFloat32Type, &v41[8]);
    CFNumberRef v24 = (const __CFNumber *)CFArrayGetValueAtIndex(v20, 2);
    CFNumberGetValue(v24, kCFNumberFloat32Type, &v41[12]);
    CFNumberRef v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v20, 3);
    uint64_t v18 = &v41[16];
    goto LABEL_11;
  }
  CFArrayRef v25 = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x263EFD930]);
  if (v25)
  {
    CFArrayRef v26 = v25;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&v41[4] = _D0;
    memset(&v41[12], 0, 20);
    *(_DWORD *)unint64_t v41 = 4;
    CFNumberRef v28 = (const __CFNumber *)CFArrayGetValueAtIndex(v25, 0);
    CFNumberGetValue(v28, kCFNumberFloat32Type, &v41[4]);
    CFNumberRef v29 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 1);
    CFNumberGetValue(v29, kCFNumberFloat32Type, &v41[8]);
    CFNumberRef v30 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 2);
    CFNumberGetValue(v30, kCFNumberFloat32Type, &v41[12]);
    CFNumberRef v31 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 3);
    CFNumberGetValue(v31, kCFNumberFloat32Type, &v41[16]);
    CFNumberRef v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v26, 4);
    uint64_t v18 = &v41[20];
    goto LABEL_11;
  }
  CFArrayRef result = re::VideoColorTransformBase::findFragment(this, (const __CFString *)*MEMORY[0x263EFD938]);
  if (result)
  {
    CFArrayRef v32 = result;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&v41[4] = _D0;
    memset(&v41[12], 0, 20);
    *(_DWORD *)unint64_t v41 = 5;
    CFNumberRef v34 = (const __CFNumber *)CFArrayGetValueAtIndex(result, 0);
    CFNumberGetValue(v34, kCFNumberFloat32Type, &v41[4]);
    CFNumberRef v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 1);
    CFNumberGetValue(v35, kCFNumberFloat32Type, &v41[8]);
    CFNumberRef v36 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 2);
    CFNumberGetValue(v36, kCFNumberFloat32Type, &v41[12]);
    CFNumberRef v37 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 3);
    CFNumberGetValue(v37, kCFNumberFloat32Type, &v41[16]);
    CFNumberRef v38 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 4);
    CFNumberGetValue(v38, kCFNumberFloat32Type, &v41[20]);
    CFNumberRef v39 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 5);
    CFNumberGetValue(v39, kCFNumberFloat32Type, &v41[24]);
    CFNumberRef v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v32, 6);
    uint64_t v18 = &v41[28];
    goto LABEL_11;
  }
  *(unsigned char *)a2 = 0;
  return result;
}

void anonymous namespace'::getGlobalMetalDevice(_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F9D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F9D8))
  {
    _MergedGlobals_508 = (uint64_t)MTLCreateSystemDefaultDevice();

    __cxa_atexit((void (*)(void *))re::mtl::Device::~Device, &_MergedGlobals_508, &dword_233120000);
    __cxa_guard_release(&qword_26AF9F9D8);
  }
}

void anonymous namespace'::getGlobalPixelFormatInfoTable(_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9F9E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9F9E0))
  {
    xmmword_26AF9FA00 = 0u;
    xmmword_26AF9F9F0 = 0u;
    dword_26AF9FA10 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<re::mtl::PixelFormat,MTLPixelFormatInfo>::~unordered_map[abi:nn180100], &xmmword_26AF9F9F0, &dword_233120000);
    __cxa_guard_release(&qword_26AF9F9E0);
  }
  if (qword_26AF9F9E8 != -1)
  {
    dispatch_once(&qword_26AF9F9E8, &__block_literal_global_58);
  }
}

uint64_t re::VideoPlatform::isLegacyDevice(re::VideoPlatform *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::VideoPlatform::isLegacyDevice(void)::value = MGGetProductType() == 3652044089;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 2888);
}

void re::mtl::Device::~Device(id *this)
{
}

uint64_t std::unordered_map<re::mtl::PixelFormat,MTLPixelFormatInfo>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  CFArrayRef v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void ___ZN12_GLOBAL__N_129getGlobalPixelFormatInfoTableEv_block_invoke(uint64_t InfoForDevice)
{
  for (uint64_t i = 500; i != 630; ++i)
  {
    InfoForDevice = MTLPixelFormatGetInfoForDevice();
    unint64_t v3 = *((void *)&xmmword_26AF9F9F0 + 1);
    if (*((void *)&xmmword_26AF9F9F0 + 1))
    {
      uint8x8_t v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AF9F9F0 + 8));
      v4.i16[0] = vaddlv_u8(v4);
      if (v4.u32[0] > 1uLL)
      {
        unint64_t v1 = (int)i;
        if (*((void *)&xmmword_26AF9F9F0 + 1) <= (unint64_t)(int)i) {
          unint64_t v1 = (unint64_t)(int)i % *((void *)&xmmword_26AF9F9F0 + 1);
        }
      }
      else
      {
        unint64_t v1 = (*((void *)&xmmword_26AF9F9F0 + 1) - 1) & (int)i;
      }
      CFIndex v5 = *(uint64_t ***)(xmmword_26AF9F9F0 + 8 * v1);
      if (v5)
      {
        for (j = *v5; j; j = (uint64_t *)*j)
        {
          unint64_t v7 = j[1];
          if (v7 == (int)i)
          {
            if (*((_DWORD *)j + 4) == i) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v4.u32[0] > 1uLL)
            {
              if (v7 >= *((void *)&xmmword_26AF9F9F0 + 1)) {
                v7 %= *((void *)&xmmword_26AF9F9F0 + 1);
              }
            }
            else
            {
              v7 &= *((void *)&xmmword_26AF9F9F0 + 1) - 1;
            }
            if (v7 != v1) {
              break;
            }
          }
        }
      }
    }
    InfoForDevice = (uint64_t)operator new(0x50uLL);
    uint64_t v8 = InfoForDevice;
    *(void *)InfoForDevice = 0;
    *(void *)(InfoForDevice + 8) = (int)i;
    *(_DWORD *)(InfoForDevice + 16) = i;
    long long v9 = v32[1];
    *(_OWORD *)(InfoForDevice + 24) = v32[0];
    *(_OWORD *)(InfoForDevice + 40) = v9;
    *(_OWORD *)(InfoForDevice + 56) = v32[2];
    *(void *)(InfoForDevice + 72) = v33;
    float v10 = (float)(unint64_t)(*((void *)&xmmword_26AF9FA00 + 1) + 1);
    if (!v3 || (float)(*(float *)&dword_26AF9FA10 * (float)v3) < v10)
    {
      BOOL v11 = (v3 & (v3 - 1)) != 0;
      if (v3 < 3) {
        BOOL v11 = 1;
      }
      unint64_t v12 = v11 | (2 * v3);
      unint64_t v13 = vcvtps_u32_f32(v10 / *(float *)&dword_26AF9FA10);
      if (v12 <= v13) {
        size_t v14 = v13;
      }
      else {
        size_t v14 = v12;
      }
      std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__rehash<true>(v14);
      unint64_t v3 = *((void *)&xmmword_26AF9F9F0 + 1);
      if ((*((void *)&xmmword_26AF9F9F0 + 1) & (*((void *)&xmmword_26AF9F9F0 + 1) - 1)) != 0)
      {
        if (*((void *)&xmmword_26AF9F9F0 + 1) <= (unint64_t)(int)i) {
          unint64_t v1 = (unint64_t)(int)i % *((void *)&xmmword_26AF9F9F0 + 1);
        }
        else {
          unint64_t v1 = (int)i;
        }
      }
      else
      {
        unint64_t v1 = (*((void *)&xmmword_26AF9F9F0 + 1) - 1) & (int)i;
      }
    }
    uint64_t v15 = xmmword_26AF9F9F0;
    CFNumberRef v16 = *(uint64_t **)(xmmword_26AF9F9F0 + 8 * v1);
    if (v16)
    {
      *(void *)uint64_t v8 = *v16;
LABEL_38:
      uint64_t *v16 = v8;
      goto LABEL_39;
    }
    *(void *)uint64_t v8 = xmmword_26AF9FA00;
    *(void *)&xmmword_26AF9FA00 = v8;
    *(void *)(v15 + 8 * v1) = &xmmword_26AF9FA00;
    if (*(void *)v8)
    {
      unint64_t v17 = *(void *)(*(void *)v8 + 8);
      if ((v3 & (v3 - 1)) != 0)
      {
        if (v17 >= v3) {
          v17 %= v3;
        }
      }
      else
      {
        v17 &= v3 - 1;
      }
      CFNumberRef v16 = (uint64_t *)(xmmword_26AF9F9F0 + 8 * v17);
      goto LABEL_38;
    }
LABEL_39:
    ++*((void *)&xmmword_26AF9FA00 + 1);
LABEL_40:
    ;
  }
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(10, 10, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(20, 20, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(25, 25, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(40, 40, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(43, 43, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(60, 60, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(70, 70, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(71, 71, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(90, 90, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(94, 94, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(110, 110, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(115, 115, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(125, 125, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(240, 240, (uint64_t)v32);
  MTLPixelFormatGetInfoForDevice();
  std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(241, 241, (uint64_t)v32);
}

void std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__rehash<true>(size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  size_t v2 = *((void *)&xmmword_26AF9F9F0 + 1);
  if (prime <= *((void *)&xmmword_26AF9F9F0 + 1))
  {
    if (prime >= *((void *)&xmmword_26AF9F9F0 + 1)) {
      return;
    }
    unint64_t v9 = vcvtps_u32_f32((float)*((unint64_t *)&xmmword_26AF9FA00 + 1) / *(float *)&dword_26AF9FA10);
    if (*((void *)&xmmword_26AF9F9F0 + 1) < 3uLL
      || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AF9F9F0 + 8)),
          v10.i16[0] = vaddlv_u8(v10),
          v10.u32[0] > 1uLL))
    {
      unint64_t v9 = std::__next_prime(v9);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(v9 - 1);
      if (v9 >= 2) {
        unint64_t v9 = v11;
      }
    }
    if (prime <= v9) {
      size_t prime = v9;
    }
    if (prime >= v2) {
      return;
    }
    if (!prime)
    {
      size_t v14 = (void *)xmmword_26AF9F9F0;
      *(void *)&xmmword_26AF9F9F0 = 0;
      if (v14) {
        operator delete(v14);
      }
      *((void *)&xmmword_26AF9F9F0 + 1) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  unint64_t v3 = operator new(8 * prime);
  uint8x8_t v4 = (void *)xmmword_26AF9F9F0;
  *(void *)&xmmword_26AF9F9F0 = v3;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = 0;
  *((void *)&xmmword_26AF9F9F0 + 1) = prime;
  do
    *(void *)(xmmword_26AF9F9F0 + 8 * v5++) = 0;
  while (prime != v5);
  CFIndex v6 = (void **)xmmword_26AF9FA00;
  if ((void)xmmword_26AF9FA00)
  {
    size_t v7 = *(void *)(xmmword_26AF9FA00 + 8);
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      if (v7 >= prime) {
        v7 %= prime;
      }
    }
    else
    {
      v7 &= prime - 1;
    }
    *(void *)(xmmword_26AF9F9F0 + 8 * v7) = &xmmword_26AF9FA00;
    for (i = *v6; i; size_t v7 = v13)
    {
      size_t v13 = i[1];
      if (v8.u32[0] > 1uLL)
      {
        if (v13 >= prime) {
          v13 %= prime;
        }
      }
      else
      {
        v13 &= prime - 1;
      }
      if (v13 != v7)
      {
        if (!*(void *)(xmmword_26AF9F9F0 + 8 * v13))
        {
          *(void *)(xmmword_26AF9F9F0 + 8 * v13) = v6;
          goto LABEL_31;
        }
        *CFIndex v6 = (void *)*i;
        *uint64_t i = **(void **)(xmmword_26AF9F9F0 + 8 * v13);
        **(void **)(xmmword_26AF9F9F0 + 8 * v13) = i;
        uint64_t i = v6;
      }
      size_t v13 = v7;
LABEL_31:
      CFIndex v6 = (void **)i;
      uint64_t i = (void *)*i;
    }
  }
}

void std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__emplace_unique_key_args<re::mtl::PixelFormat,re::mtl::PixelFormat,MTLPixelFormatInfo>(int a1, int a2, uint64_t a3)
{
  unint64_t v6 = a1;
  unint64_t v7 = *((void *)&xmmword_26AF9F9F0 + 1);
  if (*((void *)&xmmword_26AF9F9F0 + 1))
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_26AF9F9F0 + 8));
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a1;
      if (*((void *)&xmmword_26AF9F9F0 + 1) <= (unint64_t)a1) {
        unint64_t v3 = (unint64_t)a1 % *((void *)&xmmword_26AF9F9F0 + 1);
      }
    }
    else
    {
      unint64_t v3 = (*((void *)&xmmword_26AF9F9F0 + 1) - 1) & a1;
    }
    unint64_t v9 = *(uint64_t ***)(xmmword_26AF9F9F0 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a1)
        {
          if (*((_DWORD *)i + 4) == a1) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= *((void *)&xmmword_26AF9F9F0 + 1)) {
              v11 %= *((void *)&xmmword_26AF9F9F0 + 1);
            }
          }
          else
          {
            v11 &= *((void *)&xmmword_26AF9F9F0 + 1) - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = (char *)operator new(0x50uLL);
  *(void *)unint64_t v12 = 0;
  *((void *)v12 + 1) = v6;
  *((_DWORD *)v12 + 4) = a2;
  long long v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a3 + 32);
  *((void *)v12 + 9) = *(void *)(a3 + 48);
  float v14 = (float)(unint64_t)(*((void *)&xmmword_26AF9FA00 + 1) + 1);
  if (!v7 || (float)(*(float *)&dword_26AF9FA10 * (float)v7) < v14)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v14 / *(float *)&dword_26AF9FA10);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::__unordered_map_hasher<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::hash<re::mtl::PixelFormat>,std::equal_to<re::mtl::PixelFormat>,true>,std::__unordered_map_equal<re::mtl::PixelFormat,std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>,std::equal_to<re::mtl::PixelFormat>,std::hash<re::mtl::PixelFormat>,true>,std::allocator<std::__hash_value_type<re::mtl::PixelFormat,MTLPixelFormatInfo>>>::__rehash<true>(v18);
    unint64_t v7 = *((void *)&xmmword_26AF9F9F0 + 1);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (*((void *)&xmmword_26AF9F9F0 + 1) <= v6) {
        unint64_t v3 = v6 % *((void *)&xmmword_26AF9F9F0 + 1);
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (*((void *)&xmmword_26AF9F9F0 + 1) - 1) & v6;
    }
  }
  uint64_t v19 = xmmword_26AF9F9F0;
  CFArrayRef v20 = *(void **)(xmmword_26AF9F9F0 + 8 * v3);
  if (v20)
  {
    *(void *)unint64_t v12 = *v20;
LABEL_38:
    *CFArrayRef v20 = v12;
    goto LABEL_39;
  }
  *(void *)unint64_t v12 = xmmword_26AF9FA00;
  *(void *)&xmmword_26AF9FA00 = v12;
  *(void *)(v19 + 8 * v3) = &xmmword_26AF9FA00;
  if (*(void *)v12)
  {
    unint64_t v21 = *(void *)(*(void *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    CFArrayRef v20 = (void *)(xmmword_26AF9F9F0 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*((void *)&xmmword_26AF9FA00 + 1);
}

void re::VideoPresentationQueue::~VideoPresentationQueue(re::VideoPresentationQueue *this)
{
  re::VideoPresentationQueue::clear(this);
  *(void *)this = 0;
  for (uint64_t i = 912; i != -880; i -= 896)
    re::VideoPresentationGroup::~VideoPresentationGroup((re::VideoPresentationQueue *)((char *)this + i));
}

void re::VideoPresentationQueue::clear(re::VideoPresentationQueue *this)
{
  unint64_t v1 = (void *)((char *)this + 1808);
  uint64_t v2 = *((void *)this + 226);
  uint64_t v3 = *((void *)this + 227);
  if (v2 != v3)
  {
    uint8x8_t v4 = (char *)this + 16;
    do
      re::deinitVideoPresentationGroup((uint64_t)&v4[896 * (v2++ & 1)]);
    while (v3 != v2);
  }
  void *v1 = 0;
  v1[1] = 0;
}

BOOL re::VideoPresentationQueue::push(re::VideoPresentationQueue *this, const re::VideoPresentationGroup *a2)
{
  uint64_t v2 = *((void *)this + 227);
  uint64_t v3 = v2 - *((void *)this + 226);
  if (v3 != 2)
  {
    uint8x8_t v4 = (char *)this + 896 * (*((void *)this + 227) & 1);
    *((void *)this + 227) = v2 + 1;
    re::VideoPresentationGroup::operator=((uint64_t)(v4 + 16), (long long *)a2);
  }
  return v3 != 2;
}

uint64_t re::VideoPresentationQueue::front(re::VideoPresentationQueue *this, uint64_t a2)
{
  if (*((void *)this + 226) != *((void *)this + 227)) {
    return (uint64_t)this + 896 * (*((void *)this + 226) & 1) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isEmpty()", "front", 99);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::VideoDefaults::inverseToneMappingAllowed(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.inverse_tone_mapping.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::inverseToneMappingAllowed(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 2904);
}

uint64_t re::VideoDefaults::overrideStereoMode(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.override.stereo", v4, (uint64_t)v6);
      int v5 = v7;
      if (!v6[0]) {
        int v5 = -1;
      }
      re::VideoDefaults::overrideStereoMode(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return v1[730];
}

uint64_t re::VideoDefaults::colorSpaceTransformationAllowed(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.color_space_transformation.allowed", v4, v9);
      char v6 = 1;
      if (v9[0] && !v9[1])
      {
        re::Defaults::BOOLValue((re::Defaults *)"video.color_space_conversion.allowed", v5, v8);
        if (v8[0]) {
          BOOL v7 = v8[1] == 0;
        }
        else {
          BOOL v7 = 0;
        }
        char v6 = !v7;
      }
      re::VideoDefaults::colorSpaceTransformationAllowed(void)::value = v6;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 2936);
}

uint64_t re::VideoDefaults::logEnabled(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.log.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::VideoDefaults::logEnabled(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 2952);
}

uint64_t re::VideoDefaults::frameTimeLogEnabled(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.log.frametime.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::VideoDefaults::frameTimeLogEnabled(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 2968);
}

float re::VideoDefaults::frameDropThreshold(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.log.framedrop.threshold", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 0.0;
      }
      re::VideoDefaults::frameDropThreshold(void)::value = LODWORD(v5);
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 746);
}

uint64_t re::VideoDefaults::opaqueTechniqueAllowed(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.opaque_technique.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::opaqueTechniqueAllowed(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3000);
}

uint64_t re::VideoDefaults::compressionAllowed(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.compression.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::compressionAllowed(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3016);
}

uint64_t re::VideoDefaults::targetDisplayTimeAllowed(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.target_display_time.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::targetDisplayTimeAllowed(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3032);
}

uint64_t re::VideoDefaults::histogramGenerationAllowed(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.histogram.generation.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::histogramGenerationAllowed(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3048);
}

uint64_t re::VideoDefaults::overrideHistogramGeneration(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.override.histogram.generation", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::VideoDefaults::overrideHistogramGeneration(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3064);
}

uint64_t re::VideoDefaults::useLegacyVideoTextures(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.override.legacy_hardware_transfer_function_variant_selection", v4, v9);
      if (v9[0] && v9[1])
      {
        char v6 = 1;
      }
      else
      {
        re::Defaults::BOOLValue((re::Defaults *)"video.use_legacy_video_textures", v5, v8);
        if (v8[0]) {
          BOOL v7 = v8[1] == 0;
        }
        else {
          BOOL v7 = 1;
        }
        char v6 = !v7;
      }
      re::VideoDefaults::useLegacyVideoTextures(void)::value = v6;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3080);
}

uint64_t re::VideoDefaults::passthroughTintColorTuningAllowed(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.passthrough_color_tuning.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::passthroughTintColorTuningAllowed(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3096);
}

float re::VideoDefaults::minSaturationVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.minSaturation", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.5;
    }
    re::VideoDefaults::minSaturationVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.minSaturation_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.42298;
    }
    re::VideoDefaults::minSaturationVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::minSaturationVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::maxSaturationVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.maxSaturation", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.72078;
    }
    re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.maxSaturation_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.63663;
    }
    re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::maxSaturationVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::saturationPowerVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.saturationPower", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.81;
    }
    re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.saturationPower_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.81;
    }
    re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::saturationPowerVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::saturationInflectionVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.saturationInflection", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.1;
    }
    re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.saturationInflection_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.093783;
    }
    re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::saturationInflectionVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::saturationSmoothingVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.saturationSmoothing", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 20.0;
    }
    re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.saturationSmoothing_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 20.0;
    }
    re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::saturationSmoothingVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::hueLerpVelocityVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.hueLerpVelocity", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.0055661;
    }
    re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.hueLerpVelocity_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.0;
    }
    re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::hueLerpVelocityVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::brightnessMinVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.brightnessMin", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.05;
    }
    re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.brightnessMin_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.098907;
    }
    re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::brightnessMinVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::brightnessMaxVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.bightnessMax", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.49766;
    }
    re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.bightnessMax_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.11634;
    }
    re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::brightnessMaxVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::brightnessInflectionVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.brightnessInflection", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.58125;
    }
    re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.brightnessInflection_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.32433;
    }
    re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::brightnessInflectionVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::brightnessSmoothingVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.brightnessSmoothing", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 1.5;
    }
    re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.brightnessSmoothing_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 3.9066;
    }
    re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::brightnessSmoothingVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::colorSmoothTimeVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
      return *(float *)v1;
    }
    unint64_t v1 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
    if (!v7) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.colorSmoothTime", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 0.032342;
    }
    re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return *(float *)v1;
  }
  {
    unint64_t v1 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
    if (!v3) {
      return *(float *)v1;
    }
    re::Defaults::floatValue((re::Defaults *)"video.colorSmoothTime_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 0.032342;
    }
    re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::colorSmoothTimeVideoTuning(BOOL)::value;
  return *(float *)v1;
}

float re::VideoDefaults::gazeDeadbandVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
      return (float)(*(float *)v1 * 3.1416) / 180.0;
    }
    unint64_t v1 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
    if (!v7) {
      return (float)(*(float *)v1 * 3.1416) / 180.0;
    }
    re::Defaults::floatValue((re::Defaults *)"video.gazeDeadband", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 40.0;
    }
    re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return (float)(*(float *)v1 * 3.1416) / 180.0;
  }
  {
    unint64_t v1 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
    if (!v3) {
      return (float)(*(float *)v1 * 3.1416) / 180.0;
    }
    re::Defaults::floatValue((re::Defaults *)"video.gazeDeadband_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 40.0;
    }
    re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::gazeDeadbandVideoTuning(BOOL)::value;
  return (float)(*(float *)v1 * 3.1416) / 180.0;
}

float re::VideoDefaults::gazeMaxAngleVideoTuning(re::VideoDefaults *this)
{
  if (!this)
  {
    {
      unint64_t v1 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
      return (float)(*(float *)v1 * 3.1416) / 180.0;
    }
    unint64_t v1 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
    if (!v7) {
      return (float)(*(float *)v1 * 3.1416) / 180.0;
    }
    re::Defaults::floatValue((re::Defaults *)"video.gazeMaxAngle", v8, (uint64_t)v11);
    float v9 = v12;
    if (!v11[0]) {
      float v9 = 75.0;
    }
    re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value = LODWORD(v9);
LABEL_15:
    __cxa_guard_release(v6);
    unint64_t v1 = v10;
    return (float)(*(float *)v1 * 3.1416) / 180.0;
  }
  {
    unint64_t v1 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
    uint8x8_t v10 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
    if (!v3) {
      return (float)(*(float *)v1 * 3.1416) / 180.0;
    }
    re::Defaults::floatValue((re::Defaults *)"video.gazeMaxAngle_HDR", v4, (uint64_t)v11);
    float v5 = v12;
    if (!v11[0]) {
      float v5 = 74.151;
    }
    re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value = LODWORD(v5);
    goto LABEL_15;
  }
  unint64_t v1 = &re::VideoDefaults::gazeMaxAngleVideoTuning(BOOL)::value;
  return (float)(*(float *)v1 * 3.1416) / 180.0;
}

float re::VideoDefaults::hdrToSDRColorAverage(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdrToSDRColorAverage", v4, (uint64_t)v6);
      float v5 = v7 / 100.0;
      if (!v6[0]) {
        float v5 = 2.3567;
      }
      re::VideoDefaults::hdrToSDRColorAverage(void)::value = LODWORD(v5);
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 882);
}

BOOL re::VideoDefaults::videoStatisticsEnableScaling(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video. videoStatisticsEnableScaling", v4, v7);
      if (v7[0]) {
        BOOL v5 = v7[1] == 0;
      }
      else {
        BOOL v5 = 0;
      }
      unsigned int v6 = !v5;
      *(float *)&re::VideoDefaults::videoStatisticsEnableScaling(void)::value = (float)v6;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 886) != 0.0;
}

float re::VideoDefaults::glowSizeXModifier(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.glowScaleX", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 1.5;
      }
      re::VideoDefaults::glowSizeXModifier(void)::value = LODWORD(v5);
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 890);
}

float re::VideoDefaults::glowSizeYModifier(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.glowScaleY", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 1.5;
      }
      re::VideoDefaults::glowSizeYModifier(void)::value = LODWORD(v5);
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 894);
}

uint64_t re::VideoDefaults::lightSpillTextureAllocatorEnabled(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.lightspill.texture_allocator.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::lightSpillTextureAllocatorEnabled(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3592);
}

uint64_t re::VideoDefaults::horizontalDisparityEnabled(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.disparity.horizontal.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::horizontalDisparityEnabled(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3608);
}

float re::VideoDefaults::overrideHorizontalDispartiy(re::VideoDefaults *this, float result)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FA38, memory_order_acquire) & 1) == 0)
  {
    float v4 = result;
    int v2 = __cxa_guard_acquire(&qword_26AF9FA38);
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.disparity.horizontal.override", v3, (uint64_t)&byte_26AF9FA30);
      __cxa_atexit((void (*)(void *))re::Optional<float>::~Optional, &byte_26AF9FA30, &dword_233120000);
      __cxa_guard_release(&qword_26AF9FA38);
      uint64_t result = v4;
    }
  }
  if (byte_26AF9FA30) {
    return *(float *)&dword_26AF9FA34;
  }
  return result;
}

uint64_t re::VideoDefaults::mipmapEnabled(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.mipmap.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::mipmapEnabled(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3624);
}

uint64_t re::VideoDefaults::stereoMipmapEnabled(re::VideoDefaults *this)
{
  unint64_t v1 = &dword_2687A1000;
  {
    unint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.mipmap.stereo.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::VideoDefaults::stereoMipmapEnabled(void)::value = v5;
      unint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3640);
}

uint64_t re::VideoDefaults::mipmapPixelsPerSecondMax(uint64_t this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FA40, memory_order_acquire) & 1) == 0)
  {
    uint64_t v1 = this;
    int v3 = __cxa_guard_acquire(&qword_26AF9FA40);
    this = v1;
    if (v3)
    {
      re::Defaults::uint64Value((re::Defaults *)"video.mipmap.pixels_per_second.max", v2, (uint64_t)&byte_26AF9FA58);
      __cxa_atexit((void (*)(void *))re::Optional<unsigned long long>::~Optional, &byte_26AF9FA58, &dword_233120000);
      __cxa_guard_release(&qword_26AF9FA40);
      this = v1;
    }
  }
  if (byte_26AF9FA58) {
    return qword_26AF9FA60;
  }
  return this;
}

uint64_t re::VideoDefaults::lightSpillDumpEnabled(re::VideoDefaults *this)
{
  uint64_t v1 = &dword_2687A1000;
  {
    uint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.lightspill.dump.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 0;
      }
      re::VideoDefaults::lightSpillDumpEnabled(void)::value = v5;
      uint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3656);
}

uint64_t re::VideoDefaults::pseAllowed(re::VideoDefaults *this)
{
  uint64_t v1 = &dword_2687A1000;
  {
    uint64_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.pse.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::pseAllowed(void)::value = v5;
      uint64_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3672);
}

uint64_t re::VideoDefaults::overridePseEnabled(uint64_t this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FA48, memory_order_acquire) & 1) == 0)
  {
    int v3 = this;
    int v2 = __cxa_guard_acquire(&qword_26AF9FA48);
    LODWORD(this) = v3;
    if (v2)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.pse.override.enabled", v1, &_MergedGlobals_509);
      __cxa_atexit((void (*)(void *))re::Optional<BOOL>::~Optional, &_MergedGlobals_509, &dword_233120000);
      __cxa_guard_release(&qword_26AF9FA48);
      LODWORD(this) = v3;
    }
  }
  if (_MergedGlobals_509) {
    return byte_26AF9FA19 != 0;
  }
  else {
    return this;
  }
}

BOOL re::VideoDefaults::screenFallbackTextureEnabled(re::VideoDefaults *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FA50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF9FA50))
  {
    re::Defaults::BOOLValue((re::Defaults *)"video.screen.fallback.texture.enabled", v3, &byte_26AF9FA1A);
    __cxa_atexit((void (*)(void *))re::Optional<BOOL>::~Optional, &byte_26AF9FA1A, &dword_233120000);
    __cxa_guard_release(&qword_26AF9FA50);
  }
  if (byte_26AF9FA1A) {
    BOOL v1 = byte_26AF9FA1B == 0;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

uint64_t re::VideoDefaults::aseAllowed(re::VideoDefaults *this)
{
  BOOL v1 = &dword_2687A1000;
  {
    BOOL v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.ase.enabled", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::aseAllowed(void)::value = v5;
      BOOL v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3688);
}

uint64_t re::VideoDefaults::autoSynchronousProcessingAllowed(re::VideoDefaults *this)
{
  BOOL v1 = &dword_2687A1000;
  {
    BOOL v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.processor.synchronous.automatic_dispatch.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoDefaults::autoSynchronousProcessingAllowed(void)::value = v5;
      BOOL v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3704);
}

uint64_t re::VideoDefaults::overrideProcessorSynchronousWorkThreshold(re::VideoDefaults *this)
{
  BOOL v1 = &dword_2687A1000;
  {
    BOOL v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::uint64Value((re::Defaults *)"video.processor.synchronous.work_threshold", v4, (uint64_t)v7);
      char v5 = v8;
      if (!v7[0]) {
        char v5 = this;
      }
      re::VideoDefaults::overrideProcessorSynchronousWorkThreshold(long long)::value = (uint64_t)v5;
      BOOL v1 = &dword_2687A1000;
    }
  }
  return *((void *)v1 + 465);
}

BOOL re::VideoSimplePixelBufferAllocator::configurePoolIfNeeded(re::VideoSimplePixelBufferAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4, re::CoreVideoUtils *a5, unsigned int a6, unsigned int a7, int a8, uint64_t a9, BOOL a10, unint64_t a11)
{
  int v11 = a8;
  unsigned int v12 = a7;
  unsigned int v13 = a6;
  float v14 = a5;
  uint64_t v15 = a4;
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  BOOL v19 = a10;
  uint64_t v43 = *MEMORY[0x263EF8340];
  *(void *)&long long v38 = __PAIR64__(a3, a2);
  DWORD2(v38) = a4;
  BYTE12(v38) = (_BYTE)a5;
  BYTE13(v38) = a6;
  BYTE14(v38) = a7;
  HIBYTE(v38) = a8;
  *(void *)&long long v39 = a9;
  unint64_t v40 = a11;
  *((void *)&v39 + 1) = a10;
  if (!*((void *)this + 6) || !re::VideoPixelBufferPoolConfiguration::operator==((uint64_t)&v38, (uint64_t)this))
  {
    CFNumberRef v37 = [MEMORY[0x263F089D8] stringWithString:@"Creating pixel buffer pool for new configuration"];
    CFArrayRef v20 = (re *)re::VideoDefaults::logEnabled(v37);
    if (v20)
    {
      [(re::VideoDefaults *)v37 appendFormat:@"\n                Width: %d", v17];
      [(re::VideoDefaults *)v37 appendFormat:@"\n               Height: %d", v16];
      [(re::VideoDefaults *)v37 appendFormat:@"\n         Pixel Format: %s (%d)", "(undefined)", v15];
      [(re::VideoDefaults *)v37 appendFormat:@"\n      Color Primaries: %s (%d)", "(undefined)", v14];
      [(re::VideoDefaults *)v37 appendFormat:@"\n    Transfer Function: %s (%d)", "(undefined)", v13];
      [(re::VideoDefaults *)v37 appendFormat:@"\n         YCbCr Matrix: %s (%d)", "(undefined)", v12];
      uint64_t v33 = "No";
      if (v11) {
        uint64_t v33 = "Yes";
      }
      [(re::VideoDefaults *)v37 appendFormat:@"\n             Extended: %s", v33];
      [(re::VideoDefaults *)v37 appendFormat:@"\n           Cache Mode: %d", a9];
      [(re::VideoDefaults *)v37 appendFormat:@"\n            Alignment: %d", HIDWORD(a9)];
      CFNumberRef v34 = "No";
      if (a10) {
        CFNumberRef v34 = "Yes";
      }
      BOOL v19 = a10;
      [(re::VideoDefaults *)v37 appendFormat:@"\n           Compressed: %s", v34];
      CFArrayRef v20 = (re *)[(re::VideoDefaults *)v37 appendFormat:@"\n   Protection Options: %llu", a11];
    }
    CFNumberRef v36 = (re::VideoSimplePixelBufferAllocator *)((char *)this + 40);
    unint64_t v21 = *re::videoLogObjects(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v35 = v19;
      int v22 = v17;
      int v23 = v16;
      uint64_t v16 = v15;
      CFNumberRef v24 = v14;
      unsigned int v25 = v13;
      char v26 = v12;
      unsigned int v12 = v11;
      uint64_t v27 = v37;
      CFNumberRef v28 = v21;
      CFNumberRef v29 = v27;
      int v11 = v12;
      LOBYTE(v12) = v26;
      unsigned int v13 = v25;
      float v14 = v24;
      uint64_t v15 = v16;
      LODWORD(v16) = v23;
      LODWORD(v17) = v22;
      BOOL v19 = v35;
      uint64_t v30 = [(re::VideoDefaults *)v29 cStringUsingEncoding:1];
      *(_DWORD *)buf = 136315138;
      uint64_t v42 = v30;
      _os_log_impl(&dword_233120000, v28, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    if (*((void *)this + 6)) {
      re::VideoPixelBufferPool::deinit(v36);
    }
    re::VideoPixelBufferPool::initInternal(v36, v17, v16, v15, v14, v13, v12, v11, a9, HIDWORD(a9), v19, a11);
    long long v31 = v39;
    *(_OWORD *)this = v38;
    *((_OWORD *)this + 1) = v31;
    *((void *)this + 4) = v40;
  }
  return *((void *)this + 6) != 0;
}

void re::VideoSimplePixelBufferAllocator::createPixelBuffer(re::VideoSimplePixelBufferAllocator *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, re::CoreVideoUtils *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, int a8@<W7>, void *a9@<X8>, uint64_t a10, BOOL a11, unint64_t a12)
{
  *a9 = 0;
  if (re::VideoSimplePixelBufferAllocator::configurePoolIfNeeded(this, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12))
  {
    re::VideoPixelBufferPool::createPixelBuffer((re::VideoSimplePixelBufferAllocator *)((char *)this + 40), a9);
  }
}

BOOL re::VideoPixelBufferPoolConfiguration::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12)
      && *(unsigned __int8 *)(a1 + 13) == *(unsigned __int8 *)(a2 + 13)
      && *(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14)
      && *(unsigned __int8 *)(a1 + 15) == *(unsigned __int8 *)(a2 + 15)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32);
}

void re::VideoHDRProcessor::~VideoHDRProcessor(void **this)
{
  int v2 = *this;
  if (*this)
  {
    *this = 0;

    int v2 = *this;
  }
}

BOOL re::VideoHDRProcessor::init(re *a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(void *)a1) {
    return 0;
  }
  v26[0] = a2;
  v26[1] = a3;
  v26[3] = a6;
  if (a7 != 2)
  {
    if (a7 == 1)
    {
      int v28 = 1;
    }
    else if (!a7)
    {
      int v11 = *re::videoLogObjects(a1);
      BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_WORD *)buf = 0;
        unsigned int v12 = "Unknown HDR processing type specified.";
LABEL_31:
        uint64_t v16 = v11;
        uint32_t v17 = 2;
        goto LABEL_32;
      }
      return result;
    }
    unsigned int v13 = (re *)re::VideoDefaults::logEnabled(a1);
    if (v13)
    {
      CFNumberRef v24 = *re::videoLogObjects(v13);
      unsigned int v13 = (re *)os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v13)
      {
        unsigned int v25 = v24;
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "(undefined)";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a5;
        _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "[VideoHDRProcessor]->init :: HDR pixel format: %s (%d)", buf, 0x12u);
      }
    }
    if (!a5)
    {
      uint64_t v15 = *re::videoLogObjects(v13);
      BOOL result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = 0;
        unsigned int v12 = "Unsupported output pixel format '%llu'.";
        uint64_t v16 = v15;
        uint32_t v17 = 12;
LABEL_32:
        _os_log_error_impl(&dword_233120000, v16, OS_LOG_TYPE_ERROR, v12, buf, v17);
        return 0;
      }
      return result;
    }
    v26[4] = a5;
    switch(a4)
    {
      case 1:
        float v14 = (uint64_t *)MEMORY[0x263F03F08];
        break;
      case 9:
        float v14 = (uint64_t *)MEMORY[0x263F03F00];
        break;
      case 12:
        float v14 = (uint64_t *)MEMORY[0x263F03F20];
        break;
      default:
LABEL_27:
        int v11 = *re::videoLogObjects(v13);
        BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_WORD *)buf = 0;
          unsigned int v12 = "Target color primaries not supported.";
          goto LABEL_31;
        }
        return result;
    }
    uint64_t v18 = *v14;
    if (v18)
    {
      uint64_t v27 = v18;
      uint64_t v29 = 0;
      uint64_t v30 = &v29;
      uint64_t v31 = 0x2050000000;
      BOOL v19 = (void *)getHDRProcessorClass(void)::softClass;
      uint64_t v32 = getHDRProcessorClass(void)::softClass;
      if (!getHDRProcessorClass(void)::softClass)
      {
        *(void *)buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = ___ZL20getHDRProcessorClassv_block_invoke;
        CFNumberRef v34 = &unk_264BE8D90;
        BOOL v35 = &v29;
        ___ZL20getHDRProcessorClassv_block_invoke((uint64_t)buf);
        BOOL v19 = (void *)v30[3];
      }
      CFArrayRef v20 = v19;
      _Block_object_dispose(&v29, 8);
      uint64_t v21 = [[v20 alloc] initWithConfig:v26];
      int v22 = *(void **)a1;
      *(void *)a1 = v21;

      if (*(void *)a1) {
        return 1;
      }
      int v11 = *re::videoLogObjects(v23);
      BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_WORD *)buf = 0;
        unsigned int v12 = "Could not create HDR processor.";
        goto LABEL_31;
      }
      return result;
    }
    goto LABEL_27;
  }
  int v11 = *re::videoLogObjects(a1);
  BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)buf = 0;
    unsigned int v12 = "GPU HDR processing not implemented.";
    goto LABEL_31;
  }
  return result;
}

void re::VideoHDRProcessor::transformSurfaceCompleteCallback(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t re::VideoHDRProcessor::createConfig(re::VideoDefaults *a1, re **a2, re **a3, unsigned int *a4, uint64_t a5, float a6, float a7, float a8, float a9, float a10, float a11)
{
  uint64_t v162 = *MEMORY[0x263EF8340];
  if (*(void *)a1)
  {
    int v22 = (re *)re::VideoDefaults::logEnabled(a1);
    if (v22) {
      goto LABEL_118;
    }
    while (1)
    {
      int v23 = *a2;
      if (!*a2)
      {
        id v94 = *re::videoLogObjects(0);
        if (!os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
          return 1;
        }
        *(_WORD *)buf = 0;
        id v95 = "[VideoHDRProcessor::createConfig]: invalid input pixel buffer.";
        goto LABEL_76;
      }
      if (!*a3)
      {
        id v94 = *re::videoLogObjects(v23);
        if (!os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
          return 1;
        }
        *(_WORD *)buf = 0;
        id v95 = "[VideoHDRProcessor::createConfig]: invalid output pixel buffer.";
LABEL_76:
        _os_log_error_impl(&dword_233120000, v94, OS_LOG_TYPE_ERROR, v95, buf, 2u);
        return 1;
      }
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v23);
      CFRetain(IOSurface);
      v135 = IOSurface;
      unsigned int v25 = *a3;
      if (!*a3)
      {
        v134 = 0;
        if (IOSurface)
        {
LABEL_80:
          int v98 = *re::videoLogObjects(v25);
          if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_233120000, v98, OS_LOG_TYPE_ERROR, "[VideoHDRProcessor::createConfig]: invalid output IO surface.", buf, 2u);
          }
          uint64_t v96 = 1;
LABEL_89:
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v135);
          return v96;
        }
        IOSurfaceRef v26 = 0;
LABEL_84:
        unsigned int v99 = *re::videoLogObjects(v25);
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_233120000, v99, OS_LOG_TYPE_ERROR, "[VideoHDRProcessor::createConfig]: invalid input IO surface.", buf, 2u);
        }
        IOSurfaceRef IOSurface = 0;
        uint64_t v96 = 1;
        if (!v26) {
          goto LABEL_88;
        }
LABEL_87:
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v134);
        goto LABEL_88;
      }
      IOSurfaceRef v26 = CVPixelBufferGetIOSurface(v25);
      unsigned int v25 = (re *)CFRetain(v26);
      v134 = v26;
      if (!IOSurface) {
        goto LABEL_84;
      }
      if (!v26) {
        goto LABEL_80;
      }
      a3 = [MEMORY[0x263EFF9A0] dictionary];
      CFStringRef v27 = (const __CFString *)getkHDRProcessingDolbyVisionRPUDataKey();
      int v28 = (void *)IOSurfaceCopyValue(IOSurface, v27);
      if (IOSurfaceGetPixelFormat(IOSurface) == 1380411457) {
        break;
      }
      int v161 = 0;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      *(_OWORD *)buf = 0u;
      re::_IOSurfaceGetBulkAttachments((uint64_t)IOSurface, (uint64_t)buf);
      if (v100)
      {
        char v101 = *re::videoLogObjects(v100);
        uint64_t v29 = os_log_type_enabled(v101, OS_LOG_TYPE_ERROR);
        if (v29)
        {
          *(_WORD *)v145 = 0;
          _os_log_error_impl(&dword_233120000, v101, OS_LOG_TYPE_ERROR, "Unable to read input surface properties.", v145, 2u);
        }
LABEL_93:
        uint64_t v102 = *re::videoLogObjects((re *)v29);
        if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_233120000, v102, OS_LOG_TYPE_ERROR, "Unable to determine HDR content type of input surface.", buf, 2u);
        }
        uint64_t v93 = 0;
LABEL_96:

        long long v103 = *(void **)a1;
        id v133 = 0;
        uint64_t v104 = [v103 generateMSRColorConfigWithOperation:3 inputSurface:IOSurface outputSurface:v26 metadata:v93 histogram:0 config:&v133];
        id v105 = v133;
        v106 = v105;
        if (v104 == -17000)
        {
          if (v105)
          {
            CFRetain(v105);
            v107 = [v93 allKeys];
            char v108 = [v107 containsObject:getkHDRProcessingDolbyVisionRPUDataKey()];

            re::VideoObject<re::VideoColorTransformBase>::setRef(a5, (const void **)a5, IOSurface);
            re::VideoObject<re::VideoColorTransformBase>::setRef(a5 + 8, (const void **)(a5 + 8), v26);
            uint64_t v96 = 0;
            *(void *)(a5 + 24) = v106;
            *(unsigned char *)(a5 + 64) = v108;
            *(void *)(a5 + 48) = re::VideoHDRProcessor::transformSurfaceCompleteCallback;
            *(void *)(a5 + 56) = v106;
            goto LABEL_106;
          }
          long long v113 = *re::videoLogObjects(0);
          if (!os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
          {
LABEL_105:
            uint64_t v96 = 1;
LABEL_106:

            if (!v26)
            {
LABEL_88:
              if (!IOSurface) {
                return v96;
              }
              goto LABEL_89;
            }
            goto LABEL_87;
          }
          *(_WORD *)buf = 0;
          v110 = "[VideoHDRProcessor::createConfig]: invalid hardware config.";
          v111 = v113;
          uint32_t v112 = 2;
        }
        else
        {
          long long v109 = *re::videoLogObjects((re *)v105);
          if (!os_log_type_enabled(v109, OS_LOG_TYPE_ERROR)) {
            goto LABEL_105;
          }
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v104;
          v110 = "[VideoHDRProcessor::createConfig]: Failed to generate MSR color config with error %ld.";
          v111 = v109;
          uint32_t v112 = 12;
        }
        _os_log_error_impl(&dword_233120000, v111, OS_LOG_TYPE_ERROR, v110, buf, v112);
        goto LABEL_105;
      }
      if (v28 && (BYTE12(v157) & 0xFD) == 0x10)
      {
        uint64_t v29 = getkHDRProcessingSourceContentTypeDolbyVision();
      }
      else
      {
        if (BYTE12(v157) != 18)
        {
          if (BYTE12(v157) == 16 && BYTE11(v157) <= 0xCu && ((1 << SBYTE11(v157)) & 0x1202) != 0) {
            break;
          }
          uint64_t v29 = (uint64_t)IOSurfaceCopyValue(IOSurface, @"isHLG");
          if (!v29) {
            goto LABEL_93;
          }
          long long v114 = (const void *)v29;
          int Value = CFBooleanGetValue((CFBooleanRef)v29);
          CFRelease(v114);
          if (!Value) {
            goto LABEL_93;
          }
        }
        uint64_t v29 = (uint64_t)getkHDRProcessingSourceContentTypeHLG();
      }
LABEL_10:
      CFStringRef v30 = (const __CFString *)v29;
      if (!v29) {
        goto LABEL_93;
      }
      if (re::VideoDefaults::logEnabled((re::VideoDefaults *)v29))
      {
        v117 = [MEMORY[0x263F089D8] stringWithString:@"HDR Processing Parameters"];
        objc_msgSend(v117, "appendFormat:", @"\n                 Source Content Type: %s", CFStringGetCStringPtr(v30, 0x8000100u));
        objc_msgSend(v117, "appendFormat:", @"\n                       Max EDR Value: %f", a6);
        objc_msgSend(v117, "appendFormat:", @"\n                      Max EDR Factor: %f", a7);
        objc_msgSend(v117, "appendFormat:", @"\n                    Current Max Nits: %f", a8);
        objc_msgSend(v117, "appendFormat:", @"\n                        Minimum Nits: %f", a9);
        objc_msgSend(v117, "appendFormat:", @"\n               Ambient Light in Nits: %f", a10);
        objc_msgSend(v117, "appendFormat:", @"\n          SDR Max Brightness in Nits: %f", a11);
        objc_msgSend(v117, "appendFormat:", @"\n     Display Diagonal Size in Inches: %d", *a4);
        objc_msgSend(v117, "appendFormat:", @"\n      Display Max Brightness in Nits: %d", a4[1]);
        objc_msgSend(v117, "appendFormat:", @"\n  Display Average Brightness in Nits: %d", a4[2]);
        objc_msgSend(v117, "appendFormat:", @"\n  Display Minimum Brightness in Nits: %f", *((float *)a4 + 3));
        long long v118 = *re::videoLogObjects((re *)objc_msgSend(v117, "appendFormat:", @"\n              Display Contrast Ratio: %f", *((float *)a4 + 4)));
        if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
        {
          id v119 = v117;
          long long v120 = v118;
          uint64_t v121 = [v119 cStringUsingEncoding:1];
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = v121;
          _os_log_impl(&dword_233120000, v120, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
      *(void *)v145 = 0;
      v146 = v145;
      uint64_t v147 = 0x2020000000;
      a2 = (re **)&qword_26AF9F000;
      uint64_t v31 = (re ***)_MergedGlobals_510;
      uint64_t v148 = _MergedGlobals_510;
      if (!_MergedGlobals_510)
      {
        *(void *)buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&long long v155 = ___ZL61getkHDRProcessingDisplayPipelineCompensationTypeNoneSymbolLocv_block_invoke;
        *((void *)&v155 + 1) = &unk_264BE8D90;
        *(void *)&long long v156 = v145;
        uint64_t v32 = (void *)HDRProcessingLibrary();
        uint64_t v33 = dlsym(v32, "kHDRProcessingDisplayPipelineCompensationTypeNone");
        *(void *)(*(void *)(v156 + 8) + 24) = v33;
        _MergedGlobals_510 = *(void *)(*(void *)(v156 + 8) + 24);
        uint64_t v31 = (re ***)*((void *)v146 + 3);
      }
      _Block_object_dispose(v145, 8);
      if (v31)
      {
        a2 = *v31;
        *(void *)v145 = 0;
        v146 = v145;
        uint64_t v147 = 0x2020000000;
        CFNumberRef v34 = (void *)qword_26AF9FA70;
        uint64_t v148 = qword_26AF9FA70;
        if (!qword_26AF9FA70)
        {
          *(void *)buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&long long v155 = ___ZL57getkHDRProcessingDisplayPipelineCompensationTypeSymbolLocv_block_invoke;
          *((void *)&v155 + 1) = &unk_264BE8D90;
          *(void *)&long long v156 = v145;
          BOOL v35 = (void *)HDRProcessingLibrary();
          uint64_t v36 = dlsym(v35, "kHDRProcessingDisplayPipelineCompensationType");
          *(void *)(*(void *)(v156 + 8) + 24) = v36;
          qword_26AF9FA70 = *(void *)(*(void *)(v156 + 8) + 24);
          CFNumberRef v34 = (void *)*((void *)v146 + 3);
        }
        _Block_object_dispose(v145, 8);
        if (v34)
        {
          [a3 setValue:a2 forKey:*v34];
          uint64_t v37 = getkHDRProcessingSourceContentTypeDolbyVision();
          if (v28 && v30 == (const __CFString *)v37) {
            [a3 setValue:v28 forKey:getkHDRProcessingDolbyVisionRPUDataKey()];
          }
          *(float *)&double v38 = a11;
          uint64_t v39 = objc_msgSend(NSNumber, "numberWithFloat:", v38, v122);
          *(void *)v145 = 0;
          v146 = v145;
          uint64_t v147 = 0x2020000000;
          unint64_t v40 = (void *)qword_26AF9FA78;
          uint64_t v148 = qword_26AF9FA78;
          if (!qword_26AF9FA78)
          {
            *(void *)buf = MEMORY[0x263EF8330];
            *(void *)&uint8_t buf[8] = 3221225472;
            *(void *)&long long v155 = ___ZL64getkHDRProcessingSourceContentSDRMaxBrightnessInNitsKeySymbolLocv_block_invoke;
            *((void *)&v155 + 1) = &unk_264BE8D90;
            *(void *)&long long v156 = v145;
            unint64_t v41 = (void *)HDRProcessingLibrary();
            uint64_t v42 = dlsym(v41, "kHDRProcessingSourceContentSDRMaxBrightnessInNitsKey");
            *(void *)(*(void *)(v156 + 8) + 24) = v42;
            qword_26AF9FA78 = *(void *)(*(void *)(v156 + 8) + 24);
            unint64_t v40 = (void *)*((void *)v146 + 3);
          }
          a2 = (re **)v145;
          _Block_object_dispose(v145, 8);
          if (v40)
          {
            [a3 setValue:v39 forKey:*v40];
            *(float *)&double v43 = a6;
            uint64_t v44 = [NSNumber numberWithFloat:v43];
            *(void *)v145 = 0;
            v146 = v145;
            uint64_t v147 = 0x2020000000;
            long long v45 = (void *)qword_26AF9FA80;
            uint64_t v148 = qword_26AF9FA80;
            if (!qword_26AF9FA80)
            {
              *(void *)buf = MEMORY[0x263EF8330];
              *(void *)&uint8_t buf[8] = 3221225472;
              *(void *)&long long v155 = ___ZL75getkHDRProcessingMaximumExtendedDynamicRangeColorComponentValueKeySymbolLocv_block_invoke;
              *((void *)&v155 + 1) = &unk_264BE8D90;
              *(void *)&long long v156 = v145;
              char v46 = (void *)HDRProcessingLibrary();
              int v47 = dlsym(v46, "kHDRProcessingMaximumExtendedDynamicRangeColorComponentValueKey");
              *(void *)(*(void *)(v156 + 8) + 24) = v47;
              qword_26AF9FA80 = *(void *)(*(void *)(v156 + 8) + 24);
              long long v45 = (void *)*((void *)v146 + 3);
            }
            a2 = (re **)v145;
            _Block_object_dispose(v145, 8);
            if (v45)
            {
              [a3 setValue:v44 forKey:*v45];
              *(float *)&double v48 = a7;
              v132 = [NSNumber numberWithFloat:v48];
              *(void *)v145 = 0;
              v146 = v145;
              uint64_t v147 = 0x2020000000;
              uint64_t v49 = (void *)qword_26AF9FA88;
              uint64_t v148 = qword_26AF9FA88;
              if (!qword_26AF9FA88)
              {
                *(void *)buf = MEMORY[0x263EF8330];
                *(void *)&uint8_t buf[8] = 3221225472;
                *(void *)&long long v155 = ___ZL38getkHDRProcessingEDRFactorKeySymbolLocv_block_invoke;
                *((void *)&v155 + 1) = &unk_264BE8D90;
                *(void *)&long long v156 = v145;
                unsigned int v50 = (void *)HDRProcessingLibrary();
                unsigned int v51 = dlsym(v50, "kHDRProcessingEDRFactorKey");
                *(void *)(*(void *)(v156 + 8) + 24) = v51;
                qword_26AF9FA88 = *(void *)(*(void *)(v156 + 8) + 24);
                uint64_t v49 = (void *)*((void *)v146 + 3);
              }
              a2 = (re **)v145;
              _Block_object_dispose(v145, 8);
              if (v49)
              {
                [a3 setValue:v132 forKey:*v49];
                *(float *)&double v52 = a6 * a8;
                int v131 = [NSNumber numberWithFloat:v52];
                *(void *)v145 = 0;
                v146 = v145;
                uint64_t v147 = 0x2020000000;
                id v53 = (void *)qword_26AF9FA90;
                uint64_t v148 = qword_26AF9FA90;
                if (!qword_26AF9FA90)
                {
                  *(void *)buf = MEMORY[0x263EF8330];
                  *(void *)&uint8_t buf[8] = 3221225472;
                  *(void *)&long long v155 = ___ZL48getkHDRProcessingCurrentMaxPanelNitsKeySymbolLocv_block_invoke;
                  *((void *)&v155 + 1) = &unk_264BE8D90;
                  *(void *)&long long v156 = v145;
                  unint64_t v54 = (void *)HDRProcessingLibrary();
                  unint64_t v55 = dlsym(v54, "kHDRProcessingCurrentMaxPanelNitsKey");
                  *(void *)(*(void *)(v156 + 8) + 24) = v55;
                  qword_26AF9FA90 = *(void *)(*(void *)(v156 + 8) + 24);
                  id v53 = (void *)*((void *)v146 + 3);
                }
                a2 = (re **)v145;
                _Block_object_dispose(v145, 8);
                if (v53)
                {
                  [a3 setValue:v131 forKey:*v53];
                  *(float *)&double v56 = a9;
                  v130 = [NSNumber numberWithFloat:v56];
                  *(void *)v145 = 0;
                  v146 = v145;
                  uint64_t v147 = 0x2020000000;
                  uint64_t v57 = (void *)qword_26AF9FA98;
                  uint64_t v148 = qword_26AF9FA98;
                  if (!qword_26AF9FA98)
                  {
                    *(void *)buf = MEMORY[0x263EF8330];
                    *(void *)&uint8_t buf[8] = 3221225472;
                    *(void *)&long long v155 = ___ZL48getkHDRProcessingCurrentMinPanelNitsKeySymbolLocv_block_invoke;
                    *((void *)&v155 + 1) = &unk_264BE8D90;
                    *(void *)&long long v156 = v145;
                    uint64_t v58 = (void *)HDRProcessingLibrary();
                    uint64_t v59 = dlsym(v58, "kHDRProcessingCurrentMinPanelNitsKey");
                    *(void *)(*(void *)(v156 + 8) + 24) = v59;
                    qword_26AF9FA98 = *(void *)(*(void *)(v156 + 8) + 24);
                    uint64_t v57 = (void *)*((void *)v146 + 3);
                  }
                  a2 = (re **)v145;
                  _Block_object_dispose(v145, 8);
                  if (v57)
                  {
                    [a3 setValue:v130 forKey:*v57];
                    *(float *)&double v60 = a10;
                    v129 = [NSNumber numberWithFloat:v60];
                    *(void *)v145 = 0;
                    v146 = v145;
                    uint64_t v147 = 0x2020000000;
                    int v61 = (void *)qword_26AF9FAA0;
                    uint64_t v148 = qword_26AF9FAA0;
                    if (!qword_26AF9FAA0)
                    {
                      *(void *)buf = MEMORY[0x263EF8330];
                      *(void *)&uint8_t buf[8] = 3221225472;
                      *(void *)&long long v155 = ___ZL47getkHDRProcessingAmbientLightInNitsKeySymbolLocv_block_invoke;
                      *((void *)&v155 + 1) = &unk_264BE8D90;
                      *(void *)&long long v156 = v145;
                      unint64_t v62 = (void *)HDRProcessingLibrary();
                      int v63 = dlsym(v62, "kHDRProcessingAmbientLightInNitsKey");
                      *(void *)(*(void *)(v156 + 8) + 24) = v63;
                      qword_26AF9FAA0 = *(void *)(*(void *)(v156 + 8) + 24);
                      int v61 = (void *)*((void *)v146 + 3);
                    }
                    a2 = (re **)v145;
                    _Block_object_dispose(v145, 8);
                    if (v61)
                    {
                      [a3 setValue:v129 forKey:*v61];
                      size_t v128 = [NSNumber numberWithInt:*((unsigned __int8 *)a4 + 20)];
                      *(void *)v145 = 0;
                      v146 = v145;
                      uint64_t v147 = 0x2020000000;
                      uint64_t v64 = (void *)qword_26AF9FAA8;
                      uint64_t v148 = qword_26AF9FAA8;
                      if (!qword_26AF9FAA8)
                      {
                        *(void *)buf = MEMORY[0x263EF8330];
                        *(void *)&uint8_t buf[8] = 3221225472;
                        *(void *)&long long v155 = ___ZL53getkHDRProcessingDisplayAdjustsBlackLevelKeySymbolLocv_block_invoke;
                        *((void *)&v155 + 1) = &unk_264BE8D90;
                        *(void *)&long long v156 = v145;
                        int v65 = (void *)HDRProcessingLibrary();
                        unint64_t v66 = dlsym(v65, "kHDRProcessingDisplayAdjustsBlackLevelKey");
                        *(void *)(*(void *)(v156 + 8) + 24) = v66;
                        qword_26AF9FAA8 = *(void *)(*(void *)(v156 + 8) + 24);
                        uint64_t v64 = (void *)*((void *)v146 + 3);
                      }
                      a2 = (re **)v145;
                      _Block_object_dispose(v145, 8);
                      if (v64)
                      {
                        [a3 setValue:v128 forKey:*v64];
                        uint64_t v127 = [NSNumber numberWithInt:0];
                        *(void *)v145 = 0;
                        v146 = v145;
                        uint64_t v147 = 0x2020000000;
                        long long v67 = (void *)qword_26AF9FAB0;
                        uint64_t v148 = qword_26AF9FAB0;
                        if (!qword_26AF9FAB0)
                        {
                          *(void *)buf = MEMORY[0x263EF8330];
                          *(void *)&uint8_t buf[8] = 3221225472;
                          *(void *)&long long v155 = ___ZL40getkHDRProcessingOrientationKeySymbolLocv_block_invoke;
                          *((void *)&v155 + 1) = &unk_264BE8D90;
                          *(void *)&long long v156 = v145;
                          long long v68 = (void *)HDRProcessingLibrary();
                          uint64_t v69 = dlsym(v68, "kHDRProcessingOrientationKey");
                          *(void *)(*(void *)(v156 + 8) + 24) = v69;
                          qword_26AF9FAB0 = *(void *)(*(void *)(v156 + 8) + 24);
                          long long v67 = (void *)*((void *)v146 + 3);
                        }
                        a2 = (re **)v145;
                        _Block_object_dispose(v145, 8);
                        if (v67)
                        {
                          [a3 setValue:v127 forKey:*v67];
                          *(void *)v145 = 0;
                          v146 = v145;
                          uint64_t v147 = 0x2020000000;
                          a2 = (re **)&qword_26AF9F000;
                          unint64_t v70 = (uint64_t *)qword_26AF9FAB8;
                          uint64_t v148 = qword_26AF9FAB8;
                          if (!qword_26AF9FAB8)
                          {
                            *(void *)buf = MEMORY[0x263EF8330];
                            *(void *)&uint8_t buf[8] = 3221225472;
                            *(void *)&long long v155 = ___ZL46getkHDRProcessingSourceContentTypeKeySymbolLocv_block_invoke;
                            *((void *)&v155 + 1) = &unk_264BE8D90;
                            *(void *)&long long v156 = v145;
                            uint64_t v71 = (void *)HDRProcessingLibrary();
                            int v72 = dlsym(v71, "kHDRProcessingSourceContentTypeKey");
                            *(void *)(*(void *)(v156 + 8) + 24) = v72;
                            qword_26AF9FAB8 = *(void *)(*(void *)(v156 + 8) + 24);
                            unint64_t v70 = (uint64_t *)*((void *)v146 + 3);
                          }
                          _Block_object_dispose(v145, 8);
                          if (v70)
                          {
                            uint64_t v152 = *v70;
                            CFStringRef v153 = v30;
                            uint64_t v73 = [NSDictionary dictionaryWithObjects:&v153 forKeys:&v152 count:1];
                            *(void *)v145 = getkHDRProcessingDestinationDisplayTypeKey();
                            *(void *)buf = getkHDRProcessingDestinationDisplayTypeInternalPanel();
                            uint64_t v141 = 0;
                            int v142 = &v141;
                            uint64_t v143 = 0x2020000000;
                            id v74 = (uint8_t **)qword_26AF9FAC0;
                            uint64_t v144 = qword_26AF9FAC0;
                            if (!qword_26AF9FAC0)
                            {
                              uint64_t v136 = MEMORY[0x263EF8330];
                              uint64_t v137 = 3221225472;
                              long long v138 = ___ZL56getkHDRProcessingDisplayDiagonalSizeInInchesKeySymbolLocv_block_invoke;
                              long long v139 = &unk_264BE8D90;
                              long long v140 = &v141;
                              unsigned int v75 = (void *)HDRProcessingLibrary();
                              v142[3] = (uint64_t)dlsym(v75, "kHDRProcessingDisplayDiagonalSizeInInchesKey");
                              qword_26AF9FAC0 = *(void *)(v140[1] + 24);
                              id v74 = (uint8_t **)v142[3];
                            }
                            v126 = v28;
                            a2 = (re **)&v141;
                            _Block_object_dispose(&v141, 8);
                            if (v74)
                            {
                              v146 = *v74;
                              unsigned int v76 = [NSNumber numberWithInt:*a4];
                              *(void *)&uint8_t buf[8] = v76;
                              uint64_t v141 = 0;
                              int v142 = &v141;
                              uint64_t v143 = 0x2020000000;
                              v77 = (uint64_t *)qword_26AF9FAC8;
                              uint64_t v144 = qword_26AF9FAC8;
                              if (!qword_26AF9FAC8)
                              {
                                uint64_t v136 = MEMORY[0x263EF8330];
                                uint64_t v137 = 3221225472;
                                long long v138 = ___ZL59getkHDRProcessingDisplayMaximumBrightnessInNitsKeySymbolLocv_block_invoke;
                                long long v139 = &unk_264BE8D90;
                                long long v140 = &v141;
                                CFDictionaryRef v78 = (void *)HDRProcessingLibrary();
                                v142[3] = (uint64_t)dlsym(v78, "kHDRProcessingDisplayMaximumBrightnessInNitsKey");
                                qword_26AF9FAC8 = *(void *)(v140[1] + 24);
                                v77 = (uint64_t *)v142[3];
                              }
                              v125 = (void *)v44;
                              a2 = (re **)&v141;
                              _Block_object_dispose(&v141, 8);
                              if (v77)
                              {
                                uint64_t v147 = *v77;
                                long long v79 = [NSNumber numberWithInt:a4[1]];
                                *(void *)&long long v155 = v79;
                                uint64_t v141 = 0;
                                int v142 = &v141;
                                uint64_t v143 = 0x2020000000;
                                long long v80 = (uint64_t *)qword_26AF9FAD0;
                                uint64_t v144 = qword_26AF9FAD0;
                                if (!qword_26AF9FAD0)
                                {
                                  uint64_t v136 = MEMORY[0x263EF8330];
                                  uint64_t v137 = 3221225472;
                                  long long v138 = ___ZL59getkHDRProcessingDisplayAverageBrightnessInNitsKeySymbolLocv_block_invoke;
                                  long long v139 = &unk_264BE8D90;
                                  long long v140 = &v141;
                                  long long v81 = (void *)HDRProcessingLibrary();
                                  v142[3] = (uint64_t)dlsym(v81, "kHDRProcessingDisplayAverageBrightnessInNitsKey");
                                  qword_26AF9FAD0 = *(void *)(v140[1] + 24);
                                  long long v80 = (uint64_t *)v142[3];
                                }
                                v124 = (void *)v73;
                                a2 = (re **)&v141;
                                _Block_object_dispose(&v141, 8);
                                if (v80)
                                {
                                  int v123 = (void *)v39;
                                  uint64_t v148 = *v80;
                                  id v82 = [NSNumber numberWithInt:a4[2]];
                                  *((void *)&v155 + 1) = v82;
                                  uint64_t v141 = 0;
                                  int v142 = &v141;
                                  uint64_t v143 = 0x2020000000;
                                  a2 = (re **)&qword_26AF9F000;
                                  long long v83 = (uint64_t *)qword_26AF9FAD8;
                                  uint64_t v144 = qword_26AF9FAD8;
                                  if (!qword_26AF9FAD8)
                                  {
                                    uint64_t v136 = MEMORY[0x263EF8330];
                                    uint64_t v137 = 3221225472;
                                    long long v138 = ___ZL59getkHDRProcessingDisplayMinimumBrightnessInNitsKeySymbolLocv_block_invoke;
                                    long long v139 = &unk_264BE8D90;
                                    long long v140 = &v141;
                                    id v84 = (void *)HDRProcessingLibrary();
                                    v142[3] = (uint64_t)dlsym(v84, "kHDRProcessingDisplayMinimumBrightnessInNitsKey");
                                    qword_26AF9FAD8 = *(void *)(v140[1] + 24);
                                    long long v83 = (uint64_t *)v142[3];
                                  }
                                  _Block_object_dispose(&v141, 8);
                                  if (v83)
                                  {
                                    uint64_t v149 = *v83;
                                    LODWORD(v85) = a4[3];
                                    a2 = [NSNumber numberWithFloat:v85];
                                    *(void *)&long long v156 = a2;
                                    uint64_t v141 = 0;
                                    int v142 = &v141;
                                    uint64_t v143 = 0x2020000000;
                                    double v86 = (uint64_t *)qword_26AF9FAE0;
                                    uint64_t v144 = qword_26AF9FAE0;
                                    if (!qword_26AF9FAE0)
                                    {
                                      uint64_t v136 = MEMORY[0x263EF8330];
                                      uint64_t v137 = 3221225472;
                                      long long v138 = ___ZL49getkHDRProcessingDisplayContrastRatioKeySymbolLocv_block_invoke;
                                      long long v139 = &unk_264BE8D90;
                                      long long v140 = &v141;
                                      id v87 = (void *)HDRProcessingLibrary();
                                      v142[3] = (uint64_t)dlsym(v87, "kHDRProcessingDisplayContrastRatioKey");
                                      qword_26AF9FAE0 = *(void *)(v140[1] + 24);
                                      double v86 = (uint64_t *)v142[3];
                                    }
                                    _Block_object_dispose(&v141, 8);
                                    if (v86)
                                    {
                                      uint64_t v150 = *v86;
                                      LODWORD(v88) = a4[4];
                                      v89 = [NSNumber numberWithFloat:v88];
                                      *((void *)&v156 + 1) = v89;
                                      uint64_t v151 = getkHDRProcessingDestinationDisplayTypeKey();
                                      *(void *)&long long v157 = getkHDRProcessingDestinationDisplayTypeInternalPanel();
                                      v90 = [NSDictionary dictionaryWithObjects:buf forKeys:v145 count:7];

                                      uint64_t v141 = 0;
                                      int v142 = &v141;
                                      uint64_t v143 = 0x2020000000;
                                      a4 = (unsigned int *)qword_26AF9FAE8;
                                      uint64_t v144 = qword_26AF9FAE8;
                                      if (!qword_26AF9FAE8)
                                      {
                                        uint64_t v136 = MEMORY[0x263EF8330];
                                        uint64_t v137 = 3221225472;
                                        long long v138 = ___ZL36getkHDRProcessingDisplayKeySymbolLocv_block_invoke;
                                        long long v139 = &unk_264BE8D90;
                                        long long v140 = &v141;
                                        int v91 = (void *)HDRProcessingLibrary();
                                        v142[3] = (uint64_t)dlsym(v91, "kHDRProcessingDisplayKey");
                                        qword_26AF9FAE8 = *(void *)(v140[1] + 24);
                                        a4 = (unsigned int *)v142[3];
                                      }
                                      a2 = (re **)&v141;
                                      _Block_object_dispose(&v141, 8);
                                      int v28 = v126;
                                      if (a4)
                                      {
                                        [a3 setValue:v90 forKey:*(void *)a4];
                                        uint64_t v141 = 0;
                                        int v142 = &v141;
                                        uint64_t v143 = 0x2020000000;
                                        a2 = (re **)&qword_26AF9F000;
                                        a4 = (unsigned int *)qword_26AF9FAF0;
                                        uint64_t v144 = qword_26AF9FAF0;
                                        if (!qword_26AF9FAF0)
                                        {
                                          uint64_t v136 = MEMORY[0x263EF8330];
                                          uint64_t v137 = 3221225472;
                                          long long v138 = ___ZL42getkHDRProcessingSourceContentKeySymbolLocv_block_invoke;
                                          long long v139 = &unk_264BE8D90;
                                          long long v140 = &v141;
                                          uint64_t v92 = (void *)HDRProcessingLibrary();
                                          v142[3] = (uint64_t)dlsym(v92, "kHDRProcessingSourceContentKey");
                                          qword_26AF9FAF0 = *(void *)(v140[1] + 24);
                                          a4 = (unsigned int *)v142[3];
                                        }
                                        _Block_object_dispose(&v141, 8);
                                        if (a4)
                                        {
                                          [a3 setValue:v124 forKey:*(void *)a4];
                                          uint64_t v93 = a3;

                                          IOSurfaceRef v26 = v134;
                                          IOSurfaceRef IOSurface = v135;
                                          goto LABEL_96;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v122 = dlerror();
      int v22 = (re *)abort_report_np();
LABEL_118:
      v116 = *re::videoLogObjects(v22);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v116, OS_LOG_TYPE_DEFAULT, "Using Legacy HDRProcessing SPI", buf, 2u);
      }
    }
    uint64_t v29 = getkHDRProcessingSourceContentTypeHDR10();
    goto LABEL_10;
  }
  id v94 = *re::videoLogObjects(a1);
  if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    id v95 = "VideoHDRProcessor is not initialized.";
    goto LABEL_76;
  }
  return 1;
}

Class getkHDRProcessingDolbyVisionRPUDataKey(void)
{
  uint64_t v4 = 0;
  char v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr;
  uint64_t v7 = getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr;
  if (!getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr)
  {
    BOOL v1 = (void *)HDRProcessingLibrary();
    v5[3] = (uint64_t)dlsym(v1, "kHDRProcessingDolbyVisionRPUDataKey");
    getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0) {
    return *(Class *)v0;
  }
  dlerror();
  uint64_t v3 = abort_report_np();
  return ___ZL20getHDRProcessorClassv_block_invoke(v3);
}

Class ___ZL20getHDRProcessorClassv_block_invoke(uint64_t a1)
{
  HDRProcessingLibrary();
  Class result = objc_getClass("HDRProcessor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getHDRProcessorClass(void)::softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)HDRProcessingLibrary();
  }
  return result;
}

uint64_t HDRProcessingLibrary(void)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  v3[0] = 0;
  if (!HDRProcessingLibraryCore(char **)::frameworkLibrary)
  {
    v3[1] = MEMORY[0x263EF8330];
    v3[2] = 3221225472;
    v3[3] = ___ZL24HDRProcessingLibraryCorePPc_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_264BE8DB0;
    uint64_t v5 = 0;
    HDRProcessingLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
    BOOL v1 = (void *)v3[0];
    uint64_t v0 = HDRProcessingLibraryCore(char **)::frameworkLibrary;
    if (HDRProcessingLibraryCore(char **)::frameworkLibrary)
    {
      if (!v3[0]) {
        return v0;
      }
    }
    else
    {
      BOOL v1 = (void *)abort_report_np();
    }
    free(v1);
    return v0;
  }
  return HDRProcessingLibraryCore(char **)::frameworkLibrary;
}

uint64_t ___ZL24HDRProcessingLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  HDRProcessingLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

uint64_t getkHDRProcessingSourceContentTypeDolbyVision(void)
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr;
  uint64_t v6 = getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr;
  if (!getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr)
  {
    BOOL v1 = (void *)HDRProcessingLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kHDRProcessingSourceContentTypeDolbyVision");
    getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (v0) {
    return *(void *)v0;
  }
  dlerror();
  abort_report_np();
  return getkHDRProcessingDestinationDisplayTypeKey();
}

uint64_t getkHDRProcessingDestinationDisplayTypeKey(void)
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr;
  uint64_t v6 = getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr;
  if (!getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr)
  {
    BOOL v1 = (void *)HDRProcessingLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kHDRProcessingDestinationDisplayTypeKey");
    getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (v0) {
    return *(void *)v0;
  }
  dlerror();
  abort_report_np();
  return getkHDRProcessingDestinationDisplayTypeInternalPanel();
}

uint64_t getkHDRProcessingDestinationDisplayTypeInternalPanel(void)
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr;
  uint64_t v6 = getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr;
  if (!getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr)
  {
    BOOL v1 = (void *)HDRProcessingLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kHDRProcessingDestinationDisplayTypeInternalPanel");
    getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (v0) {
    return *(void *)v0;
  }
  dlerror();
  abort_report_np();
  return getkHDRProcessingSourceContentTypeHDR10();
}

uint64_t getkHDRProcessingSourceContentTypeHDR10(void)
{
  uint64_t v3 = 0;
  long long v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr;
  uint64_t v6 = getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr;
  if (!getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr)
  {
    BOOL v1 = (void *)HDRProcessingLibrary();
    v4[3] = (uint64_t)dlsym(v1, "kHDRProcessingSourceContentTypeHDR10");
    getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  if (v0) {
    return *(void *)v0;
  }
  dlerror();
  abort_report_np();
  return getkHDRProcessingSourceContentTypeHLG();
}

void *getkHDRProcessingSourceContentTypeHLG(void)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr;
  uint64_t v7 = getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr;
  if (!getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr)
  {
    BOOL v1 = (void *)HDRProcessingLibrary();
    v5[3] = (uint64_t)dlsym(v1, "kHDRProcessingSourceContentTypeHLG");
    getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0) {
    return *(void **)v0;
  }
  dlerror();
  uint64_t v3 = abort_report_np();
  return ___ZL48getkHDRProcessingSourceContentTypeHDR10SymbolLocv_block_invoke(v3);
}

void *___ZL48getkHDRProcessingSourceContentTypeHDR10SymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingSourceContentTypeHDR10");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkHDRProcessingSourceContentTypeHDR10SymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *___ZL46getkHDRProcessingSourceContentTypeHLGSymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingSourceContentTypeHLG");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkHDRProcessingSourceContentTypeHLGSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL61getkHDRProcessingDisplayPipelineCompensationTypeNoneSymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayPipelineCompensationTypeNone");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_510 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL57getkHDRProcessingDisplayPipelineCompensationTypeSymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayPipelineCompensationType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FA70 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL54getkHDRProcessingSourceContentTypeDolbyVisionSymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingSourceContentTypeDolbyVision");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkHDRProcessingSourceContentTypeDolbyVisionSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  return result;
}

void *___ZL64getkHDRProcessingSourceContentSDRMaxBrightnessInNitsKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingSourceContentSDRMaxBrightnessInNitsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FA78 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL75getkHDRProcessingMaximumExtendedDynamicRangeColorComponentValueKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingMaximumExtendedDynamicRangeColorComponentValueKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FA80 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL38getkHDRProcessingEDRFactorKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingEDRFactorKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FA88 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL48getkHDRProcessingCurrentMaxPanelNitsKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingCurrentMaxPanelNitsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FA90 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL48getkHDRProcessingCurrentMinPanelNitsKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingCurrentMinPanelNitsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FA98 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL47getkHDRProcessingAmbientLightInNitsKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingAmbientLightInNitsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL53getkHDRProcessingDisplayAdjustsBlackLevelKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayAdjustsBlackLevelKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL40getkHDRProcessingOrientationKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingOrientationKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL46getkHDRProcessingSourceContentTypeKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingSourceContentTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL51getkHDRProcessingDestinationDisplayTypeKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDestinationDisplayTypeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkHDRProcessingDestinationDisplayTypeKeySymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                             + 24);
  return result;
}

void *___ZL61getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDestinationDisplayTypeInternalPanel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkHDRProcessingDestinationDisplayTypeInternalPanelSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                       + 24);
  return result;
}

void *___ZL56getkHDRProcessingDisplayDiagonalSizeInInchesKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayDiagonalSizeInInchesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL59getkHDRProcessingDisplayMaximumBrightnessInNitsKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayMaximumBrightnessInNitsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAC8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL59getkHDRProcessingDisplayAverageBrightnessInNitsKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayAverageBrightnessInNitsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAD0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL59getkHDRProcessingDisplayMinimumBrightnessInNitsKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayMinimumBrightnessInNitsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL49getkHDRProcessingDisplayContrastRatioKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayContrastRatioKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAE0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL36getkHDRProcessingDisplayKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDisplayKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAE8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL42getkHDRProcessingSourceContentKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingSourceContentKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_26AF9FAF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL47getkHDRProcessingDolbyVisionRPUDataKeySymbolLocv_block_invoke(uint64_t a1)
{
  int v2 = (void *)HDRProcessingLibrary();
  uint64_t result = dlsym(v2, "kHDRProcessingDolbyVisionRPUDataKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getkHDRProcessingDolbyVisionRPUDataKeySymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL re::VideoPixelFormatDescriptionBase::BOOLeanValue(const __CFDictionary **this, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef v4 = *this;
  if (v4)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v4, a2);
    if (Value) {
      return CFBooleanGetValue(Value) != 0;
    }
  }
  return a3;
}

void re::VideoColorManager::~VideoColorManager(re::VideoColorManager *this)
{
}

double re::VideoColorManager::clear(re::VideoColorManager *this)
{
  uint64_t v2 = *((unsigned int *)this + 32);
  if (v2)
  {
    uint64_t v3 = 0;
    CFDictionaryRef v4 = (int *)(*((void *)this + 14) + 8);
    while (1)
    {
      int v5 = *v4;
      v4 += 10;
      if (v5 < 0) {
        break;
      }
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v2 == v3)
  {
    unsigned int v6 = *((_DWORD *)this + 32);
  }
  else
  {
    uint64_t v7 = v3;
    unsigned int v6 = *((_DWORD *)this + 32);
    do
    {
      uint8x8_t v8 = *(const void **)(*((void *)this + 14) + 40 * v7 + 32);
      if (v8)
      {
        CFRelease(v8);
        unsigned int v6 = *((_DWORD *)this + 32);
      }
      if (v6 <= (int)v3 + 1) {
        unsigned int v9 = v3 + 1;
      }
      else {
        unsigned int v9 = v6;
      }
      while (1)
      {
        uint64_t v7 = (v3 + 1);
        if (v9 - 1 == v3) {
          break;
        }
        LODWORD(v3) = v3 + 1;
        unsigned int v10 = v7;
        if ((*(_DWORD *)(*((void *)this + 14) + 40 * v7 + 8) & 0x80000000) != 0) {
          goto LABEL_19;
        }
      }
      unsigned int v10 = v9;
LABEL_19:
      LODWORD(v3) = v10;
    }
    while (v2 != v10);
  }
  if (*((_DWORD *)this + 31))
  {
    uint64_t v11 = *((unsigned int *)this + 30);
    if (v11)
    {
      memset_pattern16(*((void **)this + 13), &unk_2343655D0, 4 * v11);
      unsigned int v6 = *((_DWORD *)this + 32);
    }
    if (v6)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 40 * v6;
      do
      {
        uint64_t v14 = *((void *)this + 14) + v12;
        int v15 = *(_DWORD *)(v14 + 8);
        if (v15 < 0) {
          *(_DWORD *)(v14 + 8) = v15 & 0x7FFFFFFF;
        }
        v12 += 40;
      }
      while (v13 != v12);
    }
    *((_DWORD *)this + 31) = 0;
    *((_DWORD *)this + 32) = 0;
    int v16 = *((_DWORD *)this + 34) + 1;
    *((_DWORD *)this + 33) = 0x7FFFFFFF;
    *((_DWORD *)this + 34) = v16;
  }
  uint64_t v17 = *((unsigned int *)this + 20);
  if (v17)
  {
    uint64_t v18 = 0;
    BOOL v19 = (int *)(*((void *)this + 8) + 8);
    while (1)
    {
      int v20 = *v19;
      v19 += 6;
      if (v20 < 0) {
        break;
      }
      if (v17 == ++v18)
      {
        LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = *((_DWORD *)this + 20);
        break;
      }
    }
  }
  else
  {
    LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = 0;
  }
  if (v17 == v18)
  {
    unsigned int v21 = *((_DWORD *)this + 20);
  }
  else
  {
    uint64_t v22 = v18;
    unsigned int v21 = *((_DWORD *)this + 20);
    do
    {
      int v23 = *(const void **)(*((void *)this + 8) + 24 * v22 + 16);
      if (v23)
      {
        CFRelease(v23);
        unsigned int v21 = *((_DWORD *)this + 20);
      }
      if (v21 <= (int)v18 + 1) {
        unsigned int v24 = v18 + 1;
      }
      else {
        unsigned int v24 = v21;
      }
      while (1)
      {
        uint64_t v22 = (v18 + 1);
        if (v24 - 1 == v18) {
          break;
        }
        LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v18 + 1;
        unsigned int v25 = v22;
        if ((*(_DWORD *)(*((void *)this + 8) + 24 * v22 + 8) & 0x80000000) != 0) {
          goto LABEL_47;
        }
      }
      unsigned int v25 = v24;
LABEL_47:
      LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v25;
    }
    while (v17 != v25);
  }
  if (*((_DWORD *)this + 19))
  {
    uint64_t v26 = *((unsigned int *)this + 18);
    if (v26)
    {
      memset_pattern16(*((void **)this + 7), &unk_2343655D0, 4 * v26);
      unsigned int v21 = *((_DWORD *)this + 20);
    }
    if (v21)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 24 * v21;
      do
      {
        uint64_t v29 = *((void *)this + 8) + v27;
        int v30 = *(_DWORD *)(v29 + 8);
        if (v30 < 0) {
          *(_DWORD *)(v29 + 8) = v30 & 0x7FFFFFFF;
        }
        v27 += 24;
      }
      while (v28 != v27);
    }
    *((_DWORD *)this + 19) = 0;
    *((_DWORD *)this + 20) = 0;
    int v31 = *((_DWORD *)this + 22) + 1;
    *((_DWORD *)this + 21) = 0x7FFFFFFF;
    *((_DWORD *)this + 22) = v31;
  }
  uint64_t v32 = *((unsigned int *)this + 8);
  if (v32)
  {
    uint64_t v33 = 0;
    CFNumberRef v34 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v35 = *v34;
      v34 += 6;
      if (v35 < 0) {
        break;
      }
      if (v32 == ++v33)
      {
        LODWORD(v33) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v33) = 0;
  }
  if (v32 == v33)
  {
    unsigned int v36 = *((_DWORD *)this + 8);
  }
  else
  {
    uint64_t v37 = v33;
    unsigned int v36 = *((_DWORD *)this + 8);
    do
    {
      double v38 = *(const void **)(*((void *)this + 2) + 24 * v37 + 16);
      if (v38)
      {
        CFRelease(v38);
        unsigned int v36 = *((_DWORD *)this + 8);
      }
      if (v36 <= (int)v33 + 1) {
        unsigned int v39 = v33 + 1;
      }
      else {
        unsigned int v39 = v36;
      }
      while (1)
      {
        uint64_t v37 = (v33 + 1);
        if (v39 - 1 == v33) {
          break;
        }
        LODWORD(v33) = v33 + 1;
        unsigned int v40 = v37;
        if ((*(_DWORD *)(*((void *)this + 2) + 24 * v37 + 8) & 0x80000000) != 0) {
          goto LABEL_75;
        }
      }
      unsigned int v40 = v39;
LABEL_75:
      LODWORD(v33) = v40;
    }
    while (v32 != v40);
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v41 = *((unsigned int *)this + 6);
    if (v41)
    {
      memset_pattern16(*((void **)this + 1), &unk_2343655D0, 4 * v41);
      unsigned int v36 = *((_DWORD *)this + 8);
    }
    if (v36)
    {
      uint64_t v42 = 0;
      uint64_t v43 = 24 * v36;
      do
      {
        uint64_t v44 = *((void *)this + 2) + v42;
        int v45 = *(_DWORD *)(v44 + 8);
        if (v45 < 0) {
          *(_DWORD *)(v44 + 8) = v45 & 0x7FFFFFFF;
        }
        v42 += 24;
      }
      while (v43 != v42);
    }
    *((_DWORD *)this + 7) = 0;
    *((_DWORD *)this + 8) = 0;
    int v46 = *((_DWORD *)this + 10) + 1;
    *((_DWORD *)this + 9) = 0x7FFFFFFF;
    *((_DWORD *)this + 10) = v46;
  }
  if (*((_DWORD *)this + 43))
  {
    uint64_t v47 = *((unsigned int *)this + 42);
    if (v47) {
      memset_pattern16(*((void **)this + 19), &unk_2343655D0, 4 * v47);
    }
    if (*((_DWORD *)this + 44))
    {
      uint64_t v48 = 0;
      unint64_t v49 = 0;
      do
      {
        re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::EntryWithHash::free(*((void *)this + 20) + v48);
        ++v49;
        v48 += 40;
      }
      while (v49 < *((unsigned int *)this + 44));
    }
    *((_DWORD *)this + 43) = 0;
    *((_DWORD *)this + 44) = 0;
    int v50 = *((_DWORD *)this + 46) + 1;
    *((_DWORD *)this + 45) = 0x7FFFFFFF;
    *((_DWORD *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v50;
  }
  *((void *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 57) = 0;
  if (*((_DWORD *)this + 123))
  {
    uint64_t v51 = *((unsigned int *)this + 122);
    if (v51) {
      memset_pattern16(*((void **)this + 59), &unk_2343655D0, 4 * v51);
    }
    if (*((_DWORD *)this + 124))
    {
      uint64_t v52 = 0;
      unint64_t v53 = 0;
      do
      {
        re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::EntryWithHash::free(*((void *)this + 60) + v52);
        ++v53;
        v52 += 72;
      }
      while (v53 < *((unsigned int *)this + 124));
    }
    *((_DWORD *)this + 125) = 0x7FFFFFFF;
    *(void *)((char *)this + 492) = 0;
    ++*((_DWORD *)this + 126);
  }
  double result = 0.0;
  *((_OWORD *)this + 160) = 0u;
  return result;
}

uint64_t re::VideoColorManager::computeTransform(uint64_t a1, __CVBuffer **a2, unsigned __int8 a3, const void **a4)
{
  uint64_t v7 = re::VideoColorManager::colorSyncProfileForPixelBuffer(a1, a2);
  CFDataRef v8 = re::VideoColorManager::colorSyncProfileForColorGamut(a1, a3);
  return re::VideoColorManager::computeTransform(a1, v7, v8, a4);
}

CGColorSpace *re::VideoColorManager::colorSyncProfileForPixelBuffer(uint64_t a1, __CVBuffer **this)
{
  uint64_t v4 = re::VideoPixelBufferBase::colorTags(this);
  __int16 v11 = v4;
  char v12 = BYTE2(v4);
  uint64_t v5 = re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::tryGet(a1, (unsigned __int8 *)&v11);
  if (v5) {
    return *(CGColorSpace **)v5;
  }
  double result = re::VideoPixelBufferBase::colorSpace(this);
  if (result)
  {
    uint64_t v7 = result;
    CFDataRef v8 = CGColorSpaceCopyICCData(result);
    if (v8)
    {
      CFDataRef v9 = v8;
      ColorSyncProfileRef v10 = ColorSyncProfileCreate(v8, 0);
      CFRelease(v9);
      CFRelease(v7);
      if (v10)
      {
        re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::addNew<ColorSyncProfile const*&>(a1, (unsigned __int8 *)&v11, &v10);
        return v10;
      }
    }
    else
    {
      CFRelease(v7);
    }
    return 0;
  }
  return result;
}

const __CFData *re::VideoColorManager::colorSyncProfileForColorGamut(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v8 = a2;
  uint64_t v2 = a1 + 48;
  uint64_t v3 = re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::tryGet(a1 + 48, &v8);
  if (v3) {
    return *(const __CFData **)v3;
  }
  CGColorSpaceFromWorkingColorGamut = (CGColorSpace *)re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(v8);
  CFDataRef result = CGColorSpaceCopyICCData(CGColorSpaceFromWorkingColorGamut);
  if (result)
  {
    CFDataRef v6 = result;
    ColorSyncProfileRef v7 = ColorSyncProfileCreate(result, 0);
    CFRelease(v6);
    if (v7)
    {
      re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::addNew<ColorSyncProfile const*&>(v2, &v8, &v7);
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re::VideoColorManager::computeTransform(uint64_t a1, const void *a2, const void *a3, const void **a4)
{
  uint64_t result = 1;
  if (!a2 || !a3) {
    return result;
  }
  *(void *)&long long v39 = a2;
  *((void *)&v39 + 1) = a3;
  unint64_t v9 = re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()((CFTypeRef *)&v39);
  if (!*(void *)(a1 + 96)
    || (uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 104) + 4 * (v9 % *(unsigned int *)(a1 + 120))),
        v10 == 0x7FFFFFFF))
  {
LABEL_8:
    uint64_t v37 = a4;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 4, 0, 0);
    int v15 = (const void **)MEMORY[0x263EFD958];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263EFD958], a2);
    int v16 = (const void **)MEMORY[0x263EFD960];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263EFD960], (const void *)*MEMORY[0x263EFD970]);
    uint64_t v17 = (const void **)MEMORY[0x263EFD9B8];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263EFD9B8], (const void *)*MEMORY[0x263EFD998]);
    uint64_t v18 = (const void **)MEMORY[0x263EFD8C8];
    BOOL v19 = (const void *)*MEMORY[0x263EFFB38];
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x263EFD8C8], (const void *)*MEMORY[0x263EFFB38]);
    int v20 = CFDictionaryCreateMutable(v13, 4, 0, 0);
    CFDictionaryAddValue(v20, *v15, a3);
    CFDictionaryAddValue(v20, *v16, (const void *)*MEMORY[0x263EFD978]);
    CFDictionaryAddValue(v20, *v17, (const void *)*MEMORY[0x263EFD9A8]);
    CFDictionaryAddValue(v20, *v18, v19);
    unsigned int v21 = CFArrayCreateMutable(0, 2, 0);
    CFArraySetValueAtIndex(v21, 0, Mutable);
    CFArraySetValueAtIndex(v21, 1, v20);
    ColorSyncTransformRef v22 = ColorSyncTransformCreate(v21, 0);
    if (!v22)
    {
      int v30 = (re *)re::VideoDefaults::logEnabled(0);
      if (v30)
      {
        int v35 = *re::videoLogObjects(v30);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "[VideoColorManager::computeTransform]: color transformation failed to create", buf, 2u);
        }
      }
      unsigned int v24 = 0;
LABEL_28:
      a4 = v37;
      CFRelease(v21);
      CFRelease(Mutable);
      CFRelease(v20);
      if (!v24) {
        return 1;
      }
      goto LABEL_29;
    }
    ColorSyncTransformRef v23 = v22;
    unsigned int v24 = (const void *)MEMORY[0x237DB9F90](v22, *MEMORY[0x263EFD9A0], 0);
    if (v24)
    {
      unint64_t v25 = re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()((CFTypeRef *)&v39);
      uint64_t v26 = a1 + 96;
      if (*(void *)(a1 + 96))
      {
        unint64_t v27 = v25 % *(unsigned int *)(a1 + 120);
        uint64_t v28 = *(unsigned int *)(*(void *)(a1 + 104) + 4 * v27);
        if (v28 != 0x7FFFFFFF)
        {
          unint64_t v36 = v25 % *(unsigned int *)(a1 + 120);
          uint64_t v29 = *(void *)(a1 + 112);
          while ((re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()((CFTypeRef *)(v29 + 40 * v28 + 16), (CFTypeRef *)&v39) & 1) == 0)
          {
            uint64_t v29 = *(void *)(a1 + 112);
            uint64_t v28 = *(_DWORD *)(v29 + 40 * v28 + 8) & 0x7FFFFFFF;
            if (v28 == 0x7FFFFFFF)
            {
              LODWORD(v27) = v36;
              uint64_t v26 = a1 + 96;
              goto LABEL_21;
            }
          }
          goto LABEL_27;
        }
      }
      else
      {
        LODWORD(v27) = 0;
      }
LABEL_21:
      uint64_t v31 = *(unsigned int *)(a1 + 132);
      if (v31 == 0x7FFFFFFF)
      {
        uint64_t v31 = *(unsigned int *)(a1 + 128);
        int v32 = v31;
        if (v31 == *(_DWORD *)(a1 + 120))
        {
          re::HashTable<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>,__CFArray const*,re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,true,false>::setCapacity(v26, 2 * *(_DWORD *)(a1 + 124));
          LODWORD(v27) = v25 % *(unsigned int *)(a1 + 120);
          int v32 = *(_DWORD *)(a1 + 128);
        }
        *(_DWORD *)(a1 + 128) = v32 + 1;
        uint64_t v33 = *(void *)(a1 + 112);
        int v34 = *(_DWORD *)(v33 + 40 * v31 + 8);
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 112);
        int v34 = *(_DWORD *)(v33 + 40 * v31 + 8);
        *(_DWORD *)(a1 + 132) = v34 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v33 + 40 * v31 + 8) = v34 | 0x80000000;
      *(_DWORD *)(*(void *)(a1 + 112) + 40 * v31 + 8) = *(_DWORD *)(*(void *)(a1 + 112) + 40 * v31 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 104) + 4 * v27);
      *(void *)(*(void *)(a1 + 112) + 40 * v31) = v25;
      *(_OWORD *)(*(void *)(a1 + 112) + 40 * v31 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v39;
      *(void *)(*(void *)(a1 + 112) + 40 * v31 + 32) = v24;
      *(_DWORD *)(*(void *)(a1 + 104) + 4 * v27) = v31;
      ++*(_DWORD *)(a1 + 124);
      ++*(_DWORD *)(a1 + 136);
    }
LABEL_27:
    CFRelease(v23);
    goto LABEL_28;
  }
  uint64_t v11 = *(void *)(a1 + 112);
  while (1)
  {
    char v12 = re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()((CFTypeRef *)(v11 + 40 * v10 + 16), (CFTypeRef *)&v39);
    uint64_t v11 = *(void *)(a1 + 112);
    if (v12) {
      break;
    }
    uint64_t v10 = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  unsigned int v24 = *(const void **)(v11 + 40 * v10 + 32);
  if (!v24) {
    return 1;
  }
LABEL_29:
  if (*a4) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(a4);
  }
  *a4 = v24;
  CFRetain(v24);
  return 0;
}

uint64_t re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::tryGet(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = re::Hash<re::VideoColorTags>::operator()((uint64_t)&v8, a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (*(unsigned __int8 *)(v6 + 24 * v5 + 12) != *a2
       || *(unsigned __int8 *)(v6 + 24 * v5 + 13) != a2[1]
       || *(unsigned __int8 *)(v6 + 24 * v5 + 14) != a2[2])
  {
    uint64_t v5 = *(_DWORD *)(v6 + 24 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 24 * v5 + 16;
}

uint64_t re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::addNew<ColorSyncProfile const*&>(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  unint64_t v6 = re::Hash<re::VideoColorTags>::operator()((uint64_t)&v19, a2);
  unint64_t v7 = v6;
  unint64_t v8 = *(void *)a1;
  if (!*(void *)a1
    || (unint64_t v8 = v6 % *(unsigned int *)(a1 + 24),
        uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8),
        v9 == 0x7FFFFFFF))
  {
LABEL_8:
    uint64_t v11 = *(unsigned int *)(a1 + 36);
    if (v11 == 0x7FFFFFFF)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 32);
      int v12 = v11;
      if (v11 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        int v12 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v12 + 1;
      uint64_t v13 = *(void *)(a1 + 16);
      int v14 = *(_DWORD *)(v13 + 24 * v11 + 8);
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 16);
      int v14 = *(_DWORD *)(v13 + 24 * v11 + 8);
      *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 24 * v11 + 8) = v14 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + 24 * v11 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
    *(void *)(*(void *)(a1 + 16) + 24 * v11) = v7;
    uint64_t v15 = *(void *)(a1 + 16) + 24 * v11;
    __int16 v16 = *(_WORD *)a2;
    *(unsigned char *)(v15 + 14) = a2[2];
    *(_WORD *)(v15 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v16;
    *(void *)(*(void *)(a1 + 16) + 24 * v11 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *a3;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8) = v11;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 16) + 24 * v11;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    while (*(unsigned __int8 *)(v10 + 24 * v9 + 12) != *a2
         || *(unsigned __int8 *)(v10 + 24 * v9 + 13) != a2[1]
         || *(unsigned __int8 *)(v10 + 24 * v9 + 14) != a2[2])
    {
      uint64_t v9 = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
      if (v9 == 0x7FFFFFFF) {
        goto LABEL_8;
      }
    }
    uint64_t v17 = v10 + 24 * v9;
  }
  return v17 + 16;
}

uint64_t re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::tryGet(uint64_t a1, unsigned __int8 *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  int v2 = *a2;
  unsigned int v3 = 73244475 * ((73244475 * v2) ^ ((73244475 * v2) >> 16));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v3 ^ HIWORD(v3)) % *(_DWORD *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(unsigned __int8 *)(v6 + 24 * v4 + 12) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 24 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(unsigned __int8 *)(v6 + 24 * v4 + 12) == v2) {
        return v6 + 24 * v4 + 16;
      }
    }
    return 0;
  }
  return v6 + 24 * v4 + 16;
}

uint64_t re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::addNew<ColorSyncProfile const*&>(uint64_t a1, unsigned char *a2, void *a3)
{
  int v6 = *a2;
  uint64_t v7 = (73244475 * ((73244475 * v6) ^ ((73244475 * v6) >> 16))) ^ ((73244475
                                                                                * ((73244475 * v6) ^ ((73244475 * v6) >> 16))) >> 16);
  uint64_t v8 = *(void *)a1;
  if (*(void *)a1)
  {
    LODWORD(v8) = v7 % *(_DWORD *)(a1 + 24);
    uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
    if (v9 != 0x7FFFFFFF)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      if (*(unsigned __int8 *)(v15 + 24 * v9 + 12) == v6)
      {
LABEL_12:
        uint64_t v14 = v15 + 24 * v9;
        return v14 + 16;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v15 + 24 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF) {
          break;
        }
        if (*(unsigned __int8 *)(v15 + 24 * v9 + 12) == v6) {
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v8) = v7 % *(_DWORD *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
      LOBYTE(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *a2;
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 24 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 24 * v10 + 8);
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 24 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 24 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8);
  *(void *)(*(void *)(a1 + 16) + 24 * v10) = v7;
  *(unsigned char *)(*(void *)(a1 + 16) + 24 * v10 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v6;
  *(void *)(*(void *)(a1 + 16) + 24 * v10 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *a3;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v8) = v10;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 16) + 24 * v10;
  return v14 + 16;
}

void re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(uint64_t a1@<X0>, id *a2@<X1>, os_unfair_lock_s *a3@<X2>, uint64_t a4@<X3>, re::TextureHandle *a5@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v10 = (void *)(a1 + 464);
    uint64_t v11 = re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::tryGet(a1 + 464, a4);
    if (v11)
    {
      re::TextureHandle::TextureHandle(a5, (const re::TextureHandle *)(v11 + 8));
      return;
    }
    int v13 = *(_DWORD *)(a4 + 4);
    int v14 = *(_DWORD *)(a4 + 8);
    int v15 = *(_DWORD *)(a4 + 12);
    long long v16 = *(_OWORD *)(a4 + 16);
    uint64_t v70 = 0;
    switch(*(_DWORD *)a4)
    {
      case 1:
        *(void *)buf = &unk_26E7225A8;
        int v64 = v13;
        goto LABEL_13;
      case 2:
        *(void *)buf = &unk_26E722638;
        int v64 = v13;
        int v65 = v14;
        int v66 = v15;
        goto LABEL_13;
      case 3:
        *(void *)buf = &unk_26E7226B8;
        int v64 = v13;
        int v65 = v14;
        int v66 = v15;
        int v67 = v16;
LABEL_13:
        long long v68 = buf;
        goto LABEL_17;
      case 4:
        uint64_t v54 = v16;
        uint64_t v17 = (char *)operator new(0x20uLL);
        *(void *)uint64_t v17 = &unk_26E722738;
        *((_DWORD *)v17 + 2) = v13;
        *((_DWORD *)v17 + 3) = v14;
        *((_DWORD *)v17 + 4) = v15;
        *(void *)(v17 + 20) = v54;
        goto LABEL_16;
      case 5:
        long long v55 = v16;
        uint64_t v17 = (char *)operator new(0x28uLL);
        *(void *)uint64_t v17 = &unk_26E7227B8;
        *((_DWORD *)v17 + 2) = v13;
        *((_DWORD *)v17 + 3) = v14;
        *((_DWORD *)v17 + 4) = v15;
        *(_OWORD *)(v17 + 20) = v55;
LABEL_16:
        long long v68 = (uint8_t *)v17;
LABEL_17:
        std::__function::__value_func<float ()(float)>::swap[abi:nn180100](buf, v69);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:nn180100](buf);
        break;
      default:
        break;
    }
    uint64_t v18 = (re::TextureHandle *)re::VideoSDRDefaults::powerFunctionTableResolution((re::VideoSDRDefaults *)0x200);
    if ((unint64_t)v18 >= 0x200) {
      unint64_t v19 = 512;
    }
    else {
      unint64_t v19 = (unint64_t)v18;
    }
    id v57 = 0;
    int v20 = re::TextureHandle::InvalidHandle(v18);
    re::TextureHandle::TextureHandle(a5, (const re::TextureHandle *)v20);
    uint64_t v21 = a1 + 512;
    uint64_t v22 = *(void *)(a1 + 2568);
    uint64_t v23 = *(void *)(a1 + 2560);
    unsigned int v24 = &selRef_stepFunction_0;
    if (v22 - v23 == 64)
    {
      uint64_t v52 = a1 + 512;
      unint64_t v53 = a2;
      uint64_t v25 = v21 + 32 * (*(void *)(a1 + 2560) & 0x3FLL);
      uint64_t v26 = (id *)re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::tryGet((uint64_t)v10, v25);
      if (v26)
      {
        unint64_t v27 = v26;
        if (objc_msgSend(*v26, sel_width) == (id)v19)
        {
          NS::SharedPtr<MTL::Texture>::operator=(&v57, v27);
          re::TextureHandle::operator=(a5, (re::TextureHandle *)(v27 + 1));
        }
      }
      double v56 = v10;
      if (*v10)
      {
        unint64_t v28 = re::Hash<re::VideoGammaToneCurve>::operator()(v25) % *(unsigned int *)(a1 + 488);
        uint64_t v29 = *(void *)(a1 + 472);
        uint64_t v30 = *(unsigned int *)(v29 + 4 * v28);
        if (v30 != 0x7FFFFFFF)
        {
          uint64_t v31 = *(void *)(a1 + 480);
          if (re::EqualTo<re::VideoGammaToneCurve>::operator()(v31 + 72 * v30 + 12, v25))
          {
            *(_DWORD *)(v29 + 4 * v28) = *(_DWORD *)(v31 + 72 * v30 + 8) & 0x7FFFFFFF;
LABEL_32:
            re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::EntryWithHash::free(*(void *)(a1 + 480) + 72 * v30);
            *(_DWORD *)(*(void *)(a1 + 480) + 72 * v30 + 8) = *(_DWORD *)(*(void *)(a1 + 480) + 72 * v30 + 8) & 0x80000000 | *(_DWORD *)(a1 + 500);
            *(_DWORD *)(a1 + 500) = v30;
            --*(_DWORD *)(a1 + 492);
            ++*(_DWORD *)(a1 + 504);
          }
          else
          {
            while (1)
            {
              unsigned int v32 = v30;
              uint64_t v30 = *(_DWORD *)(v31 + 72 * v30 + 8) & 0x7FFFFFFF;
              if (v30 == 0x7FFFFFFF) {
                break;
              }
              if (re::EqualTo<re::VideoGammaToneCurve>::operator()(v31 + 72 * v30 + 12, v25))
              {
                *(_DWORD *)(v31 + 72 * v32 + 8) = *(_DWORD *)(v31 + 72 * v32 + 8) & 0x80000000 | *(_DWORD *)(v31 + 72 * v30 + 8) & 0x7FFFFFFF;
                goto LABEL_32;
              }
            }
          }
        }
      }
      uint64_t v22 = *(void *)(a1 + 2568);
      uint64_t v23 = *(void *)(a1 + 2560);
      a2 = v53;
      uint64_t v10 = v56;
      unsigned int v24 = &selRef_stepFunction_0;
      uint64_t v21 = a1 + 512;
    }
    if (v22 - v23 == 64) {
      *(void *)(a1 + 2560) = v22 - 63;
    }
    *(void *)(a1 + 2568) = v22 + 1;
    uint64_t v33 = (_OWORD *)(v21 + 32 * (v22 & 0x3F));
    long long v34 = *(_OWORD *)(a4 + 16);
    *uint64_t v33 = *(_OWORD *)a4;
    v33[1] = v34;
    if (!v57)
    {
      id v35 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
      objc_msgSend(v35, sel_setWidth_, v19);
      objc_msgSend(v35, sel_setPixelFormat_, 55);
      objc_msgSend(v35, sel_setUsage_, 1);
      objc_msgSend(v35, sel_setStorageMode_, 0);
      objc_msgSend(v35, sel_setTextureType_, 0);
      objc_msgSend(v35, sel_setArrayLength_, 1);
      objc_msgSend(v35, sel_setProtectionOptions_, 0);
      re::mtl::Device::makeTexture(v35, a2, buf);
      NS::SharedPtr<MTL::Texture>::operator=(&v57, (void **)buf);
      if (*(void *)buf) {

      }
      if (v35) {
    }
      }
    if (v19)
    {
      for (unint64_t i = 0; i != v19; ++i)
      {
        *(float *)&id v58 = (float)i / (float)v19;
        if (!v70) {
          std::__throw_bad_function_call[abi:nn180100]();
        }
        *(float *)&buf[4 * i] = (*(float (**)(uint64_t, id *))(*(void *)v70 + 48))(v70, &v58);
      }
    }
    uint64_t v37 = 4 * v19;
    id v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    unint64_t v61 = v19;
    int64x2_t v62 = vdupq_n_s64(1uLL);
    objc_msgSend(v57, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &v58, 0, 0, buf, 4 * v19, 4 * v19, v52, v53);
    id v38 = [v57 v24[26]];
    id v39 = objc_msgSend(v57, sel_height);
    id v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    unint64_t v61 = (unint64_t)v38;
    v62.i64[0] = (uint64_t)v39;
    v62.i64[1] = 1;
    objc_msgSend(v57, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v58, 0, buf, v37);
    if (!*((void *)a5 + 1) || !*(void *)a5)
    {
      re::TextureManager::registerTexture(a3, &v57, (os_unfair_lock_s **)&v58);
      re::TextureHandle::operator=(a5, (re::TextureHandle *)&v58);
      re::TextureHandle::invalidate((re::TextureHandle *)&v58);
    }
    id v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    NS::SharedPtr<MTL::Texture>::operator=(&v58, &v57);
    re::TextureHandle::operator=((re::TextureHandle *)&v59, a5);
    unint64_t v40 = re::Hash<re::VideoGammaToneCurve>::operator()(a4);
    unint64_t v41 = v40;
    if (*v10)
    {
      unint64_t v42 = v40 % *(unsigned int *)(a1 + 488);
      uint64_t v43 = *(unsigned int *)(*(void *)(a1 + 472) + 4 * v42);
      if (v43 != 0x7FFFFFFF)
      {
        uint64_t v44 = *(void *)(a1 + 480);
        while (!re::EqualTo<re::VideoGammaToneCurve>::operator()(v44 + 72 * v43 + 12, a4))
        {
          uint64_t v43 = *(_DWORD *)(v44 + 72 * v43 + 8) & 0x7FFFFFFF;
          if (v43 == 0x7FFFFFFF) {
            goto LABEL_55;
          }
        }
        goto LABEL_61;
      }
    }
    else
    {
      LODWORD(v42) = 0;
    }
LABEL_55:
    uint64_t v45 = *(unsigned int *)(a1 + 500);
    if (v45 == 0x7FFFFFFF)
    {
      uint64_t v45 = *(unsigned int *)(a1 + 496);
      int v46 = v45;
      if (v45 == *(_DWORD *)(a1 + 488))
      {
        re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::setCapacity((uint64_t)v10, 2 * *(_DWORD *)(a1 + 492));
        LODWORD(v42) = v41 % *(unsigned int *)(a1 + 488);
        int v46 = *(_DWORD *)(a1 + 496);
      }
      *(_DWORD *)(a1 + 49re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v46 + 1;
      uint64_t v47 = *(void *)(a1 + 480);
      int v48 = *(_DWORD *)(v47 + 72 * v45 + 8);
    }
    else
    {
      uint64_t v47 = *(void *)(a1 + 480);
      int v48 = *(_DWORD *)(v47 + 72 * v45 + 8);
      *(_DWORD *)(a1 + 500) = v48 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v47 + 72 * v45 + 8) = v48 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 480) + 72 * v45 + 8) = *(_DWORD *)(*(void *)(a1 + 480) + 72 * v45 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 472) + 4 * v42);
    *(void *)(*(void *)(a1 + 480) + 72 * v45) = v41;
    uint64_t v49 = *(void *)(a1 + 480) + 72 * v45;
    long long v50 = *(_OWORD *)a4;
    *(_OWORD *)(v49 + 28) = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v49 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v50;
    uint64_t v51 = *(void *)(a1 + 480) + 72 * v45;
    *(void *)(v51 + 48) = v58;
    re::TextureHandle::TextureHandle((re::TextureHandle *)(v51 + 56), (const re::TextureHandle *)&v59);
    *(_DWORD *)(*(void *)(a1 + 472) + 4 * v42) = v45;
    ++*(_DWORD *)(a1 + 492);
    ++*(_DWORD *)(a1 + 504);
LABEL_61:
    re::TextureHandle::invalidate((re::TextureHandle *)&v59);
    if (v58) {

    }
    if (v57) {
    std::__function::__value_func<float ()(float)>::~__value_func[abi:nn180100](v69);
    }
    return;
  }
  uint64_t v12 = *re::videoLogObjects((re *)a1);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Unable to create texture handle for power function.", buf, 2u);
  }
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
}

uint64_t re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4 * (re::Hash<re::VideoGammaToneCurve>::operator()(a2) % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::EqualTo<re::VideoGammaToneCurve>::operator()(v5 + 72 * v4 + 12, a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 72 * v4 + 8) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 72 * v4 + 48;
}

void re::VideoColorManager::computeBoostPowerFunctionTable(uint64_t a1@<X0>, id *a2@<X1>, os_unfair_lock_s *a3@<X2>, re::TextureHandle *a4@<X8>, float a5@<S0>)
{
  if (a3)
  {
    float v9 = roundf(a5 * 200.0) / 200.0;
    uint64_t v10 = (void *)(a1 + 144);
    uint64_t v11 = re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::tryGet(a1 + 144, LODWORD(v9));
    if (v11)
    {
      re::TextureHandle::TextureHandle(a4, (const re::TextureHandle *)(v11 + 8));
      return;
    }
    unint64_t v13 = 512;
    int v14 = (re::TextureHandle *)re::VideoSDRDefaults::powerFunctionTableResolution((re::VideoSDRDefaults *)0x200);
    if ((unint64_t)v14 < 0x200) {
      unint64_t v13 = (unint64_t)v14;
    }
    uint64_t v47 = 0;
    int v15 = re::TextureHandle::InvalidHandle(v14);
    re::TextureHandle::TextureHandle(a4, (const re::TextureHandle *)v15);
    uint64_t v16 = a1 + 192;
    uint64_t v18 = *(void *)(a1 + 448);
    uint64_t v17 = *(void *)(a1 + 456);
    if (v17 - v18 == 64)
    {
      uint64_t v19 = *(void *)(a1 + 448) & 0x3FLL;
      int v20 = (id *)re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::tryGet((uint64_t)v10, *(_DWORD *)(v16 + 4 * v19));
      if (v20)
      {
        uint64_t v21 = v20;
        if (objc_msgSend(*v20, sel_width) == (id)v13)
        {
          NS::SharedPtr<MTL::Texture>::operator=(&v47, v21);
          re::TextureHandle::operator=(a4, (re::TextureHandle *)(v21 + 1));
        }
      }
      if (*v10)
      {
        unint64_t v22 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9
              * (*(unsigned int *)(v16 + 4 * v19) ^ ((unint64_t)*(unsigned int *)(v16 + 4 * v19) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(unsigned int *)(v16 + 4 * v19) ^ ((unint64_t)*(unsigned int *)(v16 + 4 * v19) >> 30))) >> 27));
        unint64_t v23 = (v22 ^ (v22 >> 31)) % *(unsigned int *)(a1 + 168);
        uint64_t v24 = *(void *)(a1 + 152);
        uint64_t v25 = *(unsigned int *)(v24 + 4 * v23);
        if (v25 != 0x7FFFFFFF)
        {
          float v26 = *(float *)(v16 + 4 * v19);
          uint64_t v27 = *(void *)(a1 + 160);
          if (*(float *)(v27 + 40 * v25 + 12) == v26)
          {
            *(_DWORD *)(v24 + 4 * v23) = *(_DWORD *)(v27 + 40 * v25 + 8) & 0x7FFFFFFF;
LABEL_22:
            re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::EntryWithHash::free(*(void *)(a1 + 160) + 40 * v25);
            *(_DWORD *)(*(void *)(a1 + 160) + 40 * v25 + 8) = *(_DWORD *)(*(void *)(a1 + 160) + 40 * v25 + 8) & 0x80000000 | *(_DWORD *)(a1 + 180);
            --*(_DWORD *)(a1 + 172);
            int v30 = *(_DWORD *)(a1 + 184) + 1;
            *(_DWORD *)(a1 + 180) = v25;
            *(_DWORD *)(a1 + 184) = v30;
          }
          else
          {
            while (1)
            {
              unsigned int v28 = v25;
              int v29 = *(_DWORD *)(v27 + 40 * v25 + 8);
              uint64_t v25 = v29 & 0x7FFFFFFF;
              if ((v29 & 0x7FFFFFFF) == 0x7FFFFFFF) {
                break;
              }
              if (*(float *)(v27 + 40 * v25 + 12) == v26)
              {
                *(_DWORD *)(v27 + 40 * v28 + 8) = *(_DWORD *)(v27 + 40 * v28 + 8) & 0x80000000 | *(_DWORD *)(v27 + 40 * v25 + 8) & 0x7FFFFFFF;
                goto LABEL_22;
              }
            }
          }
        }
      }
      uint64_t v18 = *(void *)(a1 + 448);
      uint64_t v17 = *(void *)(a1 + 456);
    }
    if (v17 - v18 == 64) {
      *(void *)(a1 + 448) = v17 - 63;
    }
    *(void *)(a1 + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v17 + 1;
    *(float *)(v16 + 4 * (v17 & 0x3F)) = v9;
    if (!v47)
    {
      id v31 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
      objc_msgSend(v31, sel_setWidth_, v13);
      objc_msgSend(v31, sel_setPixelFormat_, 55);
      objc_msgSend(v31, sel_setUsage_, 1);
      objc_msgSend(v31, sel_setStorageMode_, 0);
      objc_msgSend(v31, sel_setTextureType_, 0);
      objc_msgSend(v31, sel_setArrayLength_, 1);
      objc_msgSend(v31, sel_setProtectionOptions_, 0);
      re::mtl::Device::makeTexture(v31, a2, v46);
      NS::SharedPtr<MTL::Texture>::operator=(&v47, v46);
      if (v46[0]) {

      }
      if (v31) {
    }
      }
    if (v13)
    {
      for (unint64_t i = 0; i != v13; ++i)
      {
        if (i) {
          *((float *)v46 + i) = powf((float)i / (float)v13, v9) / (float)((float)i / (float)v13);
        }
      }
    }
    LODWORD(v46[0]) = 0;
    uint64_t v33 = 4 * v13;
    int v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    unint64_t v51 = v13;
    int64x2_t v52 = vdupq_n_s64(1uLL);
    objc_msgSend(v47, sel_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_, &v48, 0, 0, v46, 4 * v13, 4 * v13);
    id v34 = objc_msgSend(v47, sel_width);
    id v35 = objc_msgSend(v47, sel_height);
    int v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    unint64_t v51 = (unint64_t)v34;
    v52.i64[0] = (uint64_t)v35;
    v52.i64[1] = 1;
    objc_msgSend(v47, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v48, 0, v46, v33);
    if (!*((void *)a4 + 1) || !*(void *)a4)
    {
      re::TextureManager::registerTexture(a3, &v47, (os_unfair_lock_s **)&v48);
      re::TextureHandle::operator=(a4, (re::TextureHandle *)&v48);
      re::TextureHandle::invalidate((re::TextureHandle *)&v48);
    }
    int v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    NS::SharedPtr<MTL::Texture>::operator=(&v48, &v47);
    re::TextureHandle::operator=((re::TextureHandle *)&v49, a4);
    unint64_t v36 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (LODWORD(v9) ^ ((unint64_t)LODWORD(v9) >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * (LODWORD(v9) ^ ((unint64_t)LODWORD(v9) >> 30))) >> 27));
    unint64_t v37 = v36 ^ (v36 >> 31);
    if (*v10)
    {
      unint64_t v38 = v37 % *(unsigned int *)(a1 + 168);
      uint64_t v39 = *(unsigned int *)(*(void *)(a1 + 152) + 4 * v38);
      if (v39 != 0x7FFFFFFF)
      {
        uint64_t v40 = *(void *)(a1 + 160);
        if (*(float *)(v40 + 40 * v39 + 12) == v9)
        {
LABEL_52:
          re::TextureHandle::invalidate((re::TextureHandle *)&v49);
          if (v48) {

          }
          if (v47) {
          return;
          }
        }
        while (1)
        {
          LODWORD(v39) = *(_DWORD *)(v40 + 40 * v39 + 8) & 0x7FFFFFFF;
          if (v39 == 0x7FFFFFFF) {
            break;
          }
          if (*(float *)(v40 + 40 * v39 + 12) == v9) {
            goto LABEL_52;
          }
        }
      }
    }
    else
    {
      LODWORD(v38) = 0;
    }
    uint64_t v41 = *(unsigned int *)(a1 + 180);
    if (v41 == 0x7FFFFFFF)
    {
      uint64_t v41 = *(unsigned int *)(a1 + 176);
      int v42 = v41;
      if (v41 == *(_DWORD *)(a1 + 168))
      {
        re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity((uint64_t)v10, 2 * *(_DWORD *)(a1 + 172));
        LODWORD(v38) = v37 % *(unsigned int *)(a1 + 168);
        int v42 = *(_DWORD *)(a1 + 176);
      }
      *(_DWORD *)(a1 + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v42 + 1;
      uint64_t v43 = *(void *)(a1 + 160);
      int v44 = *(_DWORD *)(v43 + 40 * v41 + 8);
    }
    else
    {
      uint64_t v43 = *(void *)(a1 + 160);
      int v44 = *(_DWORD *)(v43 + 40 * v41 + 8);
      *(_DWORD *)(a1 + 180) = v44 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v43 + 40 * v41 + 8) = v44 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 160) + 40 * v41 + 8) = *(_DWORD *)(*(void *)(a1 + 160) + 40 * v41 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 152) + 4 * v38);
    *(void *)(*(void *)(a1 + 160) + 40 * v41) = v37;
    *(float *)(*(void *)(a1 + 160) + 40 * v41 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v9;
    uint64_t v45 = *(void *)(a1 + 160) + 40 * v41;
    *(void *)(v45 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v48;
    re::TextureHandle::TextureHandle((re::TextureHandle *)(v45 + 24), (const re::TextureHandle *)&v49);
    *(_DWORD *)(*(void *)(a1 + 152) + 4 * v38) = v41;
    ++*(_DWORD *)(a1 + 172);
    ++*(_DWORD *)(a1 + 184);
    goto LABEL_52;
  }
  uint64_t v12 = *re::videoLogObjects((re *)a1);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v46[0]) = 0;
    _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Unable to create texture handle for power function.", (uint8_t *)v46, 2u);
  }
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
}

uint64_t re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::tryGet(uint64_t a1, unsigned int a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(float *)(v5 + 40 * v3 + 12) != *(float *)&a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 40 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(float *)(v5 + 40 * v3 + 12) == *(float *)&a2) {
        return v5 + 40 * v3 + 16;
      }
    }
    return 0;
  }
  return v5 + 40 * v3 + 16;
}

double re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 40;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 24));
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {

      *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    }
  }
}

double re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 72;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 56));
    uint64_t v3 = *(void **)(a1 + 48);
    if (v3)
    {

      *(void *)(a1 + 48) = 0;
    }
  }
}

unint64_t re::Hash<re::VideoColorTags>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = 73244475 * ((73244475 * *a2) ^ ((73244475 * *a2) >> 16));
  unsigned int v3 = 73244475 * ((73244475 * a2[1]) ^ ((73244475 * a2[1]) >> 16));
  unsigned int v4 = 73244475 * ((73244475 * a2[2]) ^ ((73244475 * a2[2]) >> 16));
  return (((unint64_t)(v2 ^ HIWORD(v2)) << 6)
        + ((unint64_t)(v2 ^ HIWORD(v2)) >> 2)
        - 0x61C8864680B583E9
        + (((v4 ^ HIWORD(v4))
          + ((unint64_t)(v3 ^ HIWORD(v3)) << 6)
          + ((unint64_t)(v3 ^ HIWORD(v3)) >> 2)
          - 0x61C8864680B583E9) ^ v3 ^ HIWORD(v3))) ^ v2 ^ HIWORD(v2);
}

void re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(void *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v25, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v25;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)uint64_t v25 = v5;
      *(void *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        int v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::VideoColorTags,ColorSyncProfile const*,re::Hash<re::VideoColorTags>,re::EqualTo<re::VideoColorTags>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 24 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v15;
            uint64_t v22 = *(void *)(a1 + 16) + 24 * v18;
            __int16 v23 = *((_WORD *)v14 - 2);
            *(unsigned char *)(v22 + 14) = *((unsigned char *)v14 - 2);
            *(_WORD *)(v22 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v23;
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *v14;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2) {
      signed int v24 = a2;
    }
    else {
      signed int v24 = 3;
    }
  }
}

void re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)__int16 v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        int v14 = (void *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 2);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::ColorGamut,ColorSyncProfile const*,re::Hash<re::ColorGamut>,re::EqualTo<re::ColorGamut>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 24 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v15;
            *(unsigned char *)(*(void *)(a1 + 16) + 24 * v18 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *((unsigned char *)v14 - 4);
            *(void *)(*(void *)(a1 + 16) + 24 * v18 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *v14;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

uint64_t re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()(CFTypeRef *a1, CFTypeRef *a2)
{
  uint64_t result = CFEqual(*a1, *a2);
  if (result) {
    return CFEqual(a1[1], a2[1]) != 0;
  }
  return result;
}

uint64_t re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>::operator()(CFTypeRef *a1)
{
  CFHashCode v2 = CFHash(*a1);
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  unint64_t v4 = v3 ^ (v3 >> 31);
  CFHashCode v5 = CFHash(a1[1]);
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
  return ((v4 << 6) + (v4 >> 2) + (v6 ^ (v6 >> 31)) - 0x61C8864680B583E9) ^ v4;
}

void re::HashTable<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>,__CFArray const*,re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(void *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v23;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)__int16 v23 = v5;
      *(void *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v14 - 8) & 0x80000000) != 0)
          {
            unint64_t v15 = *(void *)(v14 - 16);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>,__CFArray const*,re::Hash<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,re::EqualTo<re::Pair<ColorSyncProfile const*,ColorSyncProfile const*,true>>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 40 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v15;
            *(_OWORD *)(*(void *)(a1 + 16) + 40 * v18 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_OWORD *)v14;
            *(void *)(*(void *)(a1 + 16) + 40 * v18 + 32) = *(void *)(v14 + 16);
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 40;
        }
        while (v11 < v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2) {
      signed int v22 = a2;
    }
    else {
      signed int v22 = 3;
    }
  }
}

BOOL re::EqualTo<re::VideoGammaToneCurve>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(float *)(a1 + 4) == *(float *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28);
}

unint64_t re::Hash<re::VideoGammaToneCurve>::operator()(uint64_t a1)
{
  v1.i32[0] = *(float *)(a1 + 12);
  v1.i32[1] = *(_DWORD *)a1;
  unsigned int v2 = 73244475 * (*(float *)(a1 + 16) ^ (*(float *)(a1 + 16) >> 16));
  int8x8_t v3 = (int8x8_t)vrev64_s32((int32x2_t)vcvt_u32_f32(*(float32x2_t *)(a1 + 4)));
  int32x2_t v4 = vdup_n_s32(0x45D9F3Bu);
  int8x8_t v5 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v3, 0x10uLL), v3), v4);
  int8x8_t v6 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v5, 0x10uLL), v5), v4);
  uint32x2_t v7 = (uint32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v6, 0x10uLL), v6);
  int8x8_t v8 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32(v1, 0x10uLL), (int8x8_t)v1), v4);
  int8x8_t v9 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v8, 0x10uLL), v8), v4);
  uint32x2_t v10 = (uint32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v9, 0x10uLL), v9);
  int64x2_t v11 = vdupq_n_s64(0x9E3779B97F4A7C17);
  v12.i64[0] = vaddw_u32((uint64x2_t)v11, v10).u64[0];
  v12.i64[1] = vshll_n_u32(v10, 6uLL).i64[1];
  v13.i64[0] = v7.u32[0];
  v13.i64[1] = v7.u32[1];
  v14.i64[1] = v10.u32[1];
  v11.i64[0] = (unint64_t)v7.u32[0] << 6;
  uint64x2_t v15 = (uint64x2_t)vaddq_s64(v12, v11);
  v12.i64[0] = v7.u32[0];
  v12.i64[1] = v10.u32[1];
  int8x16_t v16 = (int8x16_t)vsraq_n_u64(v15, (uint64x2_t)v12, 2uLL);
  v12.i64[0] = veorq_s8(v16, v13).u64[0];
  v12.i64[1] = vaddw_u32(*(uint64x2_t *)&v16, v7).i64[1];
  v14.i64[0] = ((73244475 * (v2 ^ HIWORD(v2))) ^ ((73244475 * (v2 ^ HIWORD(v2))) >> 16))
             + (v12.i64[0] << 6)
             + ((unint64_t)v12.i64[0] >> 2)
             - 0x61C8864680B583E9;
  int8x16_t v17 = veorq_s8((int8x16_t)v12, v14);
  unint64_t v18 = ((v17.i64[1] << 6) + ((unint64_t)v17.i64[1] >> 2) + v17.i64[0] - 0x61C8864680B583E9) ^ v17.i64[1];
  unsigned int v19 = 73244475 * (*(float *)(a1 + 20) ^ (*(float *)(a1 + 20) >> 16));
  unint64_t v20 = (((73244475 * (v19 ^ HIWORD(v19))) ^ ((73244475 * (v19 ^ HIWORD(v19))) >> 16))
       + (v18 << 6)
       + (v18 >> 2)
       - 0x61C8864680B583E9) ^ v18;
  *(uint32x2_t *)v17.i8 = vcvt_u32_f32(*(float32x2_t *)(a1 + 24));
  *(int32x2_t *)v17.i8 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v17.i8, 0x10uLL), *(int8x8_t *)v17.i8), v4);
  *(int32x2_t *)v17.i8 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v17.i8, 0x10uLL), *(int8x8_t *)v17.i8), v4);
  *(int8x8_t *)v17.i8 = veor_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v17.i8, 0x10uLL), *(int8x8_t *)v17.i8);
  return (((v17.u32[1] + ((unint64_t)v17.u32[0] << 6) + ((unint64_t)v17.u32[0] >> 2) - 0x61C8864680B583E9) ^ v17.u32[0])
        + (v20 << 6)
        + (v20 >> 2)
        - 0x61C8864680B583E9) ^ v20;
}

void *std::__function::__value_func<float ()(float)>::~__value_func[abi:nn180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::~__func()
{
}

_DWORD *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26E7225A8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26E7225A8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return powf(*a2, *(float *)(a1 + 8));
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_0>,float ()(float)>::target_type()
{
}

void *std::__function::__value_func<float ()(float)>::swap[abi:nn180100](void *result, void *a2)
{
  _OWORD v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    int8x8_t v3 = result;
    int32x2_t v4 = (void *)result[3];
    int8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::~__func()
{
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E722638;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26E722638;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::operator()(float *a1, float *a2)
{
  float v3 = a1[3];
  float v2 = a1[4];
  if ((float)((float)-v2 / v3) <= *a2) {
    return powf(v2 + (float)(v3 * *a2), a1[2]);
  }
  else {
    return 0.0;
  }
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_1>,float ()(float)>::target_type()
{
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::__clone(uint64_t a1)
{
  float v2 = (char *)operator new(0x18uLL);
  *(void *)float v2 = &unk_26E7226B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7226B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::operator()(float *a1, float *a2)
{
  float v3 = a1[3];
  float v2 = a1[4];
  if ((float)((float)-v2 / v3) <= *a2) {
    return powf(v2 + (float)(v3 * *a2), a1[2]) + a1[5];
  }
  else {
    return a1[5];
  }
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_2>,float ()(float)>::target_type()
{
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::__clone(uint64_t a1)
{
  float v2 = (char *)operator new(0x20uLL);
  *(void *)float v2 = &unk_26E722738;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E722738;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::operator()(float *a1, float *a2)
{
  float v2 = *a2;
  if (a1[6] <= *a2) {
    return powf(a1[4] + (float)(a1[3] * v2), a1[2]);
  }
  else {
    return v2 * a1[5];
  }
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_3>,float ()(float)>::target_type()
{
}

void std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::__clone(uint64_t a1)
{
  float v2 = (char *)operator new(0x28uLL);
  *(void *)float v2 = &unk_26E7227B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 20);
  *(__n128 *)(v2 + 20) = result;
  return result;
}

__n128 std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7227B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a1 + 20);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::operator()(float *a1, float *a2)
{
  float v2 = *a2;
  if (a1[6] <= *a2) {
    return powf(a1[4] + (float)(a1[3] * v2), a1[2]) + a1[7];
  }
  else {
    return a1[8] + (float)(a1[5] * v2);
  }
}

uint64_t std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4,std::allocator<re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(re::mtl::Device,re::TextureManager *,re::VideoGammaToneCurve const&)::$_4>,float ()(float)>::target_type()
{
}

void re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v28, 0, 36);
      *(void *)&v28[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v28, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v28;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v28[8];
      *(_OWORD *)unsigned int v28 = v5;
      *(void *)&v28[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v28[24];
      *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v28[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        int8x16_t v14 = (void *)(v6 + 64);
        do
        {
          if ((*(_DWORD *)(v14 - 7) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 8);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 72 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 72 * v18 + 8);
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 72 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 72 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 72 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v15;
            uint64_t v22 = *(void *)(a1 + 16) + 72 * v18;
            long long v23 = *(_OWORD *)((char *)v14 - 52);
            *(_OWORD *)(v22 + 28) = *(_OWORD *)((char *)v14 - 36);
            *(_OWORD *)(v22 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v23;
            signed int v24 = (void *)(*(void *)(a1 + 16) + 72 * v18);
            v24[6] = *(v14 - 2);
            *(v14 - 2) = 0;
            v24[7] = 0;
            v24[8] = 0;
            uint64_t v25 = v24 + 7;
            if (*v14)
            {
              uint64_t v26 = *(v14 - 1);
              if (v26)
              {
                *uint64_t v25 = v26;
                v25[1] = *v14;
                void *v14 = 0;
              }
            }
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 9;
        }
        while (v11 < v10);
      }
      re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)v28);
    }
  }
  else
  {
    if (a2) {
      signed int v27 = a2;
    }
    else {
      signed int v27 = 3;
    }
  }
}

void re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(void *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v26;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)uint64_t v26 = v5;
      *(void *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        int8x16_t v14 = (void *)(v6 + 32);
        do
        {
          if ((*(_DWORD *)(v14 - 3) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 4);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 40 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v15;
            *(_DWORD *)(*(void *)(a1 + 16) + 40 * v18 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *((_DWORD *)v14 - 5);
            uint64_t v22 = (void *)(*(void *)(a1 + 16) + 40 * v18);
            v22[2] = *(v14 - 2);
            *(v14 - 2) = 0;
            v22[3] = 0;
            v22[4] = 0;
            long long v23 = v22 + 3;
            if (*v14)
            {
              uint64_t v24 = *(v14 - 1);
              if (v24)
              {
                void *v23 = v24;
                v23[1] = *v14;
                void *v14 = 0;
              }
            }
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2) {
      signed int v25 = a2;
    }
    else {
      signed int v25 = 3;
    }
  }
}

uint64_t re::VideoSDRDefaults::gammaToneCurveAllowed(re::VideoSDRDefaults *this)
{
  uint32x2_t v1 = &dword_2687A1000;
  {
    uint32x2_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.sdr.gamma_tone_curve.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoSDRDefaults::gammaToneCurveAllowed(void)::value = v5;
      uint32x2_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3736);
}

uint64_t re::VideoSDRDefaults::colorSpaceTransformationAllowed(re::VideoSDRDefaults *this)
{
  uint32x2_t v1 = &dword_2687A1000;
  {
    uint32x2_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.sdr.color_space_transformation.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoSDRDefaults::colorSpaceTransformationAllowed(void)::value = v5;
      uint32x2_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3752);
}

uint64_t re::VideoSDRDefaults::brightnessScalingAllowed(re::VideoSDRDefaults *this)
{
  uint32x2_t v1 = &dword_2687A1000;
  {
    uint32x2_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.sdr.brightness_scaling.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoSDRDefaults::brightnessScalingAllowed(void)::value = v5;
      uint32x2_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3768);
}

uint64_t re::VideoSDRDefaults::gammaBoostAllowed(re::VideoSDRDefaults *this)
{
  uint32x2_t v1 = &dword_2687A1000;
  {
    uint32x2_t v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.sdr.gamma_boost.allowed", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoSDRDefaults::gammaBoostAllowed(void)::value = v5;
      uint32x2_t v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 3784);
}

uint64_t re::VideoSDRDefaults::powerFunctionTableResolution(re::VideoSDRDefaults *this)
{
  {
    int v5 = (int)this;
    LODWORD(this) = v5;
    if (v4)
    {
      re::Defaults::intValue((re::Defaults *)"video.sdr.power_function_table_resolution", v3, (uint64_t)&re::VideoSDRDefaults::powerFunctionTableResolution(unsigned long)::value);
      LODWORD(this) = v5;
    }
  }
  int v1 = dword_2687A1EDC;
  if (!re::VideoSDRDefaults::powerFunctionTableResolution(unsigned long)::value) {
    return (int)this;
  }
  return v1;
}

uint64_t re::videoPlaybackCreateHDRConfigs(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, re *a6, uint64_t a7, unint64_t *a8, unint64_t a9, unint64_t *a10, unint64_t *a11)
{
  v177[1] = *(__CVBuffer **)MEMORY[0x263EF8340];
  id v16 = objc_alloc_init(MEMORY[0x263F089D8]);
  if (re::VideoDefaults::logEnabled((re::VideoDefaults *)v16)) {
    [v16 appendString:@"Processing HDR pixel buffers."];
  }
  v154 = a8;
  unint64_t v18 = *a8;
  unint64_t v19 = *(void *)a1;
  if (!*(void *)a1)
  {
    unint64_t v21 = 0;
    unint64_t v20 = 0;
    if (!v18) {
      goto LABEL_25;
    }
LABEL_18:
    uint64_t v26 = (float *)v154 + 7;
    unint64_t v25 = *v154;
    unint64_t v27 = v18;
    while (v25 > v18 - 1)
    {
      if (v20 >= (unint64_t)*(v26 - 1)) {
        unint64_t v20 = (unint64_t)*(v26 - 1);
      }
      float v28 = *v26;
      v26 += 4;
      unint64_t v29 = (unint64_t)v28;
      if (v21 >= (unint64_t)v28) {
        unint64_t v21 = v29;
      }
      if (!--v27) {
        goto LABEL_25;
      }
    }
LABEL_156:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v25);
    _os_crash();
    __break(1u);
LABEL_157:
    re::internal::assertLog((re::internal *)6, v104, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, a8, v106);
    _os_crash();
    __break(1u);
LABEL_158:
    re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v18, v123);
    _os_crash();
    __break(1u);
LABEL_159:
    re::internal::assertLog((re::internal *)6, v122, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v18, v124);
    _os_crash();
    __break(1u);
LABEL_160:
    re::internal::assertLog((re::internal *)6, v125, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v18, v126);
    _os_crash();
    __break(1u);
    goto LABEL_161;
  }
  a8 = 0;
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  do
  {
    uint64_t v22 = a1 + 8 * (void)a8;
    Width = *(__CVBuffer **)(v22 + 16);
    if (Width)
    {
      Width = (__CVBuffer *)CVPixelBufferGetWidth(Width);
      unint64_t v19 = *(void *)a1;
    }
    if (v19 <= (unint64_t)a8) {
      goto LABEL_155;
    }
    if (v20 <= (unint64_t)Width) {
      unint64_t v20 = (unint64_t)Width;
    }
    Height = *(__CVBuffer **)(v22 + 16);
    if (Height)
    {
      Height = (__CVBuffer *)CVPixelBufferGetHeight(Height);
      unint64_t v19 = *(void *)a1;
    }
    if (v21 <= (unint64_t)Height) {
      unint64_t v21 = (unint64_t)Height;
    }
    a8 = (unint64_t *)((char *)a8 + 1);
  }
  while ((unint64_t)a8 < v19);
  if (v18) {
    goto LABEL_18;
  }
LABEL_25:
  uint64_t v30 = a4[58];
  if (v30) {
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v30);
  }
  else {
    uint64_t v31 = re::VideoHDRDefaults::targetNits(0);
  }
  unsigned int v32 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::overrideTargetNits(v31);
  int v33 = (int)v32;
  if (a4[64]) {
    float v35 = re::TargetDisplayInfoProvider::{unnamed type#11}::operator()((uint64_t)(a4 + 60));
  }
  else {
    float v35 = re::VideoHDRDefaults::maxEdrValue(v32);
  }
  float v37 = re::VideoHDRDefaults::overrideMaxEdrValue(v34, v35);
  if (a4[70]) {
    float v39 = re::TargetDisplayInfoProvider::{unnamed type#12}::operator()((uint64_t)(a4 + 66));
  }
  else {
    float v39 = re::VideoHDRDefaults::maxEdrFactor(v36);
  }
  float v41 = re::VideoHDRDefaults::overrideMaxEdrFactor(v38, v39);
  if (a4[52]) {
    float v43 = re::TargetDisplayInfoProvider::{unnamed type#9}::operator()((uint64_t)(a4 + 48));
  }
  else {
    float v43 = re::VideoHDRDefaults::currentMaxNits(v40);
  }
  float v45 = re::VideoHDRDefaults::overrideCurrentMaxNits(v42, v43);
  if (a4[46]) {
    float v47 = re::TargetDisplayInfoProvider::{unnamed type#8}::operator()((uint64_t)(a4 + 42));
  }
  else {
    float v47 = re::VideoHDRDefaults::currentMinNits(v44);
  }
  float v48 = re::VideoHDRDefaults::overrideCurrentMinNits(v46, v47);
  float v50 = re::VideoHDRDefaults::overrideAmbientLightInNits(v49, v45* (float)(*(float *)(*(void *)(a3 + 112) + 2180)+ (float)(*(float *)(a5 + 164)* (float)(*(float *)(a5 + 168) - *(float *)(*(void *)(a3 + 112) + 2180)))));
  uint64_t v51 = a4[34];
  float v147 = v45;
  float v148 = v37;
  float v146 = v50;
  int v153 = v33;
  if (v51) {
    int64x2_t v52 = (re::VideoHDRDefaults *)(*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
  }
  else {
    float v53 = re::VideoHDRDefaults::sdrMaxBrightnessInNits(0);
  }
  float v145 = re::VideoHDRDefaults::overrideSdrMaxBrightnessInNits(v52, v53);
  long long v55 = re::defaultVideoHDRDisplayInfo(v54);
  uint64_t v56 = v55[1];
  unsigned int v152 = *v55;
  uint64_t v57 = v55[2];
  float v58 = *((float *)v55 + 3);
  float v59 = *((float *)v55 + 4);
  char v60 = *((unsigned char *)v55 + 20);
  __int16 v169 = *(_WORD *)((char *)v55 + 21);
  char v170 = *((unsigned char *)v55 + 23);
  if (a4[16]) {
    uint64_t v56 = re::TargetDisplayInfoProvider::{unnamed type#3}::operator()((uint64_t)(a4 + 12));
  }
  unsigned int v151 = re::VideoHDRDefaults::overrideDisplayMaximumBrightnessInNits(v56);
  uint64_t v61 = a4[10];
  if (v61) {
    uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 16))(v61);
  }
  int64x2_t v62 = (re::VideoHDRDefaults *)re::VideoHDRDefaults::overrideDisplayAverageBrightnessInNits(v57);
  unsigned int v150 = v62;
  if (a4[4]) {
    float v58 = re::TargetDisplayInfoProvider::{unnamed type#1}::operator()((uint64_t)a4);
  }
  float v144 = re::VideoHDRDefaults::overrideDisplayMinimumBrightnessInNits(v62, v58);
  int v63 = (re::VideoHDRDefaults *)a4[22];
  if (v63) {
    float v59 = (*(float (**)(re::VideoHDRDefaults *))(*(void *)v63 + 16))(v63);
  }
  float v64 = re::VideoHDRDefaults::overrideDisplayContrastRatio(v63, v59);
  uint64_t v65 = a4[28];
  if (v65) {
    uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 16))(v65);
  }
  else {
    uint64_t v66 = v60 & 1;
  }
  char v149 = re::VideoHDRDefaults::overrideDisplayAdjustsBlackLevel(v66);
  id v142 = v16;
  if (*(unsigned char *)(a5 + 64))
  {
    int v67 = *(unsigned __int8 *)a5;
    os_log_t log = (os_log_t)re::VideoHDRDefaults::overridePixelFormat(1882468912);
    uint64_t v68 = 1;
    switch(v67)
    {
      case 0:
        break;
      case 1:
        uint64_t v68 = 12;
        break;
      case 2:
      case 3:
        uint64_t v68 = 9;
        break;
      default:
        uint64_t v68 = 2;
        break;
    }
  }
  else
  {
    os_log_t log = (os_log_t)re::VideoHDRDefaults::overridePixelFormat(1882468912);
    uint64_t v68 = 1;
  }
  unsigned int v161 = re::VideoHDRDefaults::overrideColorPrimaries((re::VideoHDRDefaults *)v68);
  unsigned int v158 = re::VideoHDRDefaults::overrideTransferFunction((re::VideoHDRDefaults *)0xD);
  uint64_t v69 = (re::VideoDefaults *)re::VideoHDRDefaults::overrideYCbCrMatrix((re::VideoHDRDefaults *)1);
  unsigned int v157 = v69;
  if (re::VideoDefaults::logEnabled(v69))
  {
    objc_msgSend(v16, "appendFormat:", @"\n     Working HDR pixel format: %s (%d)", "(undefined)", log);
    objc_msgSend(v16, "appendFormat:", @"\n  Working HDR Color Primaries: %s (%d)", "(undefined)", v161);
    objc_msgSend(v16, "appendFormat:", @"\nWorking HDR Transfer Function: %s (%d)", "(undefined)", v158);
    objc_msgSend(v16, "appendFormat:", @"\n     Working HDR YCbCr Matrix: %s (%d)", "(undefined)", v157);
    long long v139 = *re::videoLogObjects((re *)objc_msgSend(v16, "appendFormat:", @"\n         Working HDR Extended: %s", "Yes"));
    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
    {
      id v140 = v16;
      uint64_t v141 = v139;
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = [v140 cStringUsingEncoding:1];
      _os_log_impl(&dword_233120000, v141, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
  }
  uint64_t v159 = v21 * a9;
  uint64_t v160 = v20 * a9;
  if (*(void *)a1)
  {
    unint64_t v70 = 0;
    a5 = 0;
    uint64_t v71 = (__CVBuffer **)(a1 + 16);
    do
    {
      a5 |= (unint64_t)re::VideoPixelBufferBase::protectionOptions(v71);
      ++v70;
      ++v71;
    }
    while (v70 < *(void *)a1);
  }
  else
  {
    a5 = 0;
  }
  if (!*(void *)a6) {
    re::VideoHDRProcessor::init(a6, v160, v159, v161, (int)log, v153, 1);
  }
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::clear((uint64_t)a10);
  v176 = 0;
  v177[0] = 0;
  *(_OWORD *)buf = 0u;
  long long v175 = 0u;
  unint64_t v73 = *(void *)a1;
  float v143 = v64;
  if (!v18 && v73 == 1)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
LABEL_75:
    unint64_t v76 = 1;
LABEL_89:
    unint64_t v18 = re::VideoDefaults::compressionAllowed(v74);
    re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::resize((uint64_t)a10, v76);
    uint64_t v85 = 0;
    unint64_t v155 = v76;
    uint64_t v86 = -(uint64_t)v76;
    uint64_t v87 = 2;
    while (1)
    {
      *(void *)pixelBuffer = 0;
      if (re::VideoSimplePixelBufferAllocator::configurePoolIfNeeded((re::VideoSimplePixelBufferAllocator *)a7, v160, v159, (uint64_t)log, (re::CoreVideoUtils *)v161, v158, v157, 1, 0x1000000400, v18, a5))
      {
        re::VideoPixelBufferPool::createPixelBuffer((re::VideoPixelBufferPool *)(a7 + 40), pixelBuffer);
      }
      a8 = (unint64_t *)(v87 - 2);
      if (*a10 <= v87 - 2) {
        break;
      }
      v89 = *(__CVBuffer **)pixelBuffer;
      a10[v87] = *(void *)pixelBuffer;
      if (v89)
      {
        IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v89);
        CFRetain(IOSurface);
      }
      else
      {
        IOSurfaceRef IOSurface = 0;
      }
      *(void *)pixelBuffer = IOSurface;
      re::VideoSurfaceBase::setEdrFactor((IOSurfaceRef *)pixelBuffer, v41);
      int v91 = &v177[v85 - 1];
      double v93 = re::VideoPixelBufferBase::cleanRect(&v177[v85 - 1]);
      double v95 = v94;
      double v97 = v96;
      double v99 = v98;
      if (v177[v85 - 1])
      {
        CVImageBufferGetDisplaySize(v177[v85 - 1]);
        if (*v91) {
          CVImageBufferGetDisplaySize(*v91);
        }
      }
      unint64_t v100 = *a10;
      if (*a10 <= (unint64_t)a8) {
        goto LABEL_153;
      }
      re::VideoPixelBufferBase::setCleanRect((CVPixelBufferRef *)&a10[v85 + 2], v93 * (double)a9, v95 * (double)a9, v97 * (double)a9, v99 * (double)a9);
      unint64_t v102 = *a10;
      if (*a10 <= (unint64_t)a8) {
        goto LABEL_154;
      }
      if (a10[v87]) {
        CVImageBufferSetDisplayDimensions();
      }
      float v105 = re::VideoPixelBufferBase::horizontalDisparityAdjustment(&v177[v85 - 1]);
      if (v105 > 0.0)
      {
        unint64_t v106 = *a10;
        if (*a10 <= (unint64_t)a8) {
          goto LABEL_157;
        }
        re::VideoPixelBufferBase::setHorizontalDisparityAdjustment((CVBufferRef *)&a10[v85 + 2], v105);
      }
      if (*(void *)pixelBuffer) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)pixelBuffer);
      }
      ++v87;
      ++v85;
      if (v86 + v87 == 2)
      {
        unint64_t v107 = v155 - *a11;
        if (v155 > *a11)
        {
          uint64_t v108 = (uint64_t)&a11[10 * *a11 + 2];
          float v110 = v147;
          float v109 = v148;
          float v111 = v146;
          unsigned int v113 = LODWORD(v144);
          float v112 = v145;
          unsigned int v114 = LODWORD(v143);
          do
          {
            *(unsigned char *)(v108 + 64) = 0;
            *(_OWORD *)(v108 + 32) = 0uLL;
            *(_OWORD *)(v108 + 48) = 0uLL;
            *(_OWORD *)uint64_t v108 = 0uLL;
            *(_OWORD *)(v108 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0uLL;
            v108 += 80;
            --v107;
          }
          while (v107);
          goto LABEL_122;
        }
        float v110 = v147;
        float v109 = v148;
        float v111 = v146;
        unsigned int v113 = LODWORD(v144);
        float v112 = v145;
        unsigned int v114 = LODWORD(v143);
        if (v155 < *a11)
        {
          v115 = (const void **)&a11[10 * v155 + 4];
          unint64_t v116 = v155;
          do
          {
            if (*v115) {
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v115);
            }
            void *v115 = 0;
            if (*(v115 - 1)) {
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v115 - 1);
            }
            *(v115 - 1) = 0;
            if (*(v115 - 2)) {
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v115 - 2);
            }
            *(v115 - 2) = 0;
            ++v116;
            v115 += 10;
          }
          while (v116 < *a11);
LABEL_122:
          *a11 = v155;
          ++*((_DWORD *)a11 + 2);
        }
        unint64_t v18 = 0;
        v117 = a11 + 6;
        BOOL v118 = 1;
        id v119 = buf;
        uint64_t v120 = 2;
        a5 = (unint64_t)&v176;
        while (1)
        {
          uint64_t v121 = (re *)re::VideoDefaults::logEnabled(Config);
          if (v121)
          {
            loga = *re::videoLogObjects(v121);
            if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)pixelBuffer = 134218240;
              *(void *)&pixelBuffer[4] = v18 + 1;
              __int16 v172 = 2048;
              unint64_t v173 = v155;
              _os_log_impl(&dword_233120000, loga, OS_LOG_TYPE_DEFAULT, "Processing pixel buffer %zu of %zu:", pixelBuffer, 0x16u);
            }
          }
          unint64_t v123 = *a10;
          if (*a10 <= v18) {
            goto LABEL_158;
          }
          v165[0] = v152;
          v165[1] = v151;
          v165[2] = v150;
          v165[3] = v113;
          v165[4] = v114;
          char v166 = v149;
          __int16 v167 = v169;
          char v168 = v170;
          uint64_t v124 = *a11;
          if (*a11 <= v18) {
            goto LABEL_159;
          }
          Config = (re::VideoDefaults *)re::VideoHDRProcessor::createConfig(a6, (re **)((char *)&v175 + v120 * 8), (re **)&a10[v120], v165, (uint64_t)(v117 - 2), v109, v41, v110, v48, v111, v112);
          if (Config) {
            break;
          }
          uint64_t v126 = *a11;
          if (*a11 <= v18) {
            goto LABEL_160;
          }
          long long v127 = *(_OWORD *)v119;
          v119 += 16;
          BOOL v118 = ++v18 < v155;
          _OWORD *v117 = v127;
          v117 += 5;
          ++v120;
          if (v155 == v18)
          {
            BOOL v118 = 0;
LABEL_135:
            v129 = v142;
            uint64_t v130 = v118;
            goto LABEL_136;
          }
        }
        size_t v128 = *re::videoLogObjects(Config);
        if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)pixelBuffer = 0;
          _os_log_error_impl(&dword_233120000, v128, OS_LOG_TYPE_ERROR, "Unable to process HDR pixel buffer.", pixelBuffer, 2u);
        }
        goto LABEL_135;
      }
    }
    re::internal::assertLog((re::internal *)6, v88, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v87 - 2, *a10);
    _os_crash();
    __break(1u);
LABEL_153:
    re::internal::assertLog((re::internal *)6, v92, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v87 - 2, v100);
    _os_crash();
    __break(1u);
LABEL_154:
    re::internal::assertLog((re::internal *)6, v101, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v87 - 2, v102);
    _os_crash();
    __break(1u);
LABEL_155:
    re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, a8, v19);
    _os_crash();
    __break(1u);
    goto LABEL_156;
  }
  if (v73 == 1 && v18 == 1)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
    if (*v154)
    {
      *(_OWORD *)buf = *((_OWORD *)v154 + 1);
      goto LABEL_75;
    }
    re::internal::assertLog((re::internal *)6, v75, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_165;
  }
  if (v73 == 1 && v18 == 2)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
    if (!*(void *)a1)
    {
LABEL_165:
      re::internal::assertLog((re::internal *)6, v77, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_166;
    }
    re::VideoObject<re::VideoTextureBase>::setRef((int)v177, v177, *(CVPixelBufferRef *)(a1 + 16));
    long long v79 = v154;
    unint64_t v80 = *v154;
    if (!*v154)
    {
LABEL_166:
      re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_167;
    }
    *(_OWORD *)buf = *((_OWORD *)v154 + 1);
    if (v80 == 1)
    {
LABEL_167:
      re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v80, v80);
      _os_crash();
      __break(1u);
      goto LABEL_168;
    }
    goto LABEL_81;
  }
  if (v73 == 2 && v18 == 1)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
    unint64_t v83 = *(void *)a1;
    if (*(void *)a1 <= 1uLL)
    {
LABEL_168:
      re::internal::assertLog((re::internal *)6, v82, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v83);
      _os_crash();
      __break(1u);
      goto LABEL_169;
    }
    re::VideoObject<re::VideoTextureBase>::setRef((int)v177, v177, *(CVPixelBufferRef *)(a1 + 24));
    if (!*v154)
    {
LABEL_169:
      re::internal::assertLog((re::internal *)6, v84, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_170;
    }
    long long v81 = *((_OWORD *)v154 + 1);
    *(_OWORD *)buf = v81;
    goto LABEL_87;
  }
  if (v73 == 2 && v18 == 2)
  {
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *(CVPixelBufferRef *)(a1 + 16));
    unint64_t v134 = *(void *)a1;
    if (*(void *)a1 <= 1uLL)
    {
LABEL_170:
      re::internal::assertLog((re::internal *)6, v133, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, v134);
      _os_crash();
      __break(1u);
LABEL_171:
      re::internal::assertLog((re::internal *)6, v135, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
      _os_crash();
      __break(1u);
    }
    re::VideoObject<re::VideoTextureBase>::setRef((int)v177, v177, *(CVPixelBufferRef *)(a1 + 24));
    long long v79 = v154;
    unint64_t v136 = *v154;
    if (!*v154) {
      goto LABEL_171;
    }
    *(_OWORD *)buf = *((_OWORD *)v154 + 1);
    if (v136 != 1)
    {
LABEL_81:
      long long v81 = *((_OWORD *)v79 + 2);
LABEL_87:
      long long v175 = v81;
LABEL_88:
      unint64_t v76 = 2;
      goto LABEL_89;
    }
    re::internal::assertLog((re::internal *)6, v135, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 1, 1);
    int v72 = (re *)_os_crash();
    __break(1u);
  }
  if (!v18 && v73 == 2)
  {
    uint64_t v137 = (CVPixelBufferRef *)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[]((unint64_t *)a1, 0);
    re::VideoObject<re::VideoTextureBase>::setRef((int)&v176, &v176, *v137);
    long long v138 = (CVPixelBufferRef *)re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::operator[]((unint64_t *)a1, 1uLL);
    re::VideoObject<re::VideoTextureBase>::setRef((int)v177, v177, *v138);
    goto LABEL_88;
  }
  a5 = *re::videoLogObjects(v72);
  if (os_log_type_enabled((os_log_t)a5, OS_LOG_TYPE_ERROR))
  {
LABEL_161:
    *(_WORD *)pixelBuffer = 0;
    _os_log_error_impl(&dword_233120000, (os_log_t)a5, OS_LOG_TYPE_ERROR, "Unsupported channel configuration.", pixelBuffer, 2u);
  }
  uint64_t v130 = 1;
  v129 = v142;
LABEL_136:
  for (uint64_t i = 1; i != -1; --i)
  {
    if (v177[i - 1]) {
      re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v177[i - 1]);
    }
    v177[i - 1] = 0;
  }

  return v130;
}

uint64_t re::videoPlaybackCreatePSEConfigs(re *a1, uint64_t a2, uint64_t a3, re::VideoSimplePixelBufferAllocator *a4, uint64_t a5, uint64_t a6, double a7)
{
  unint64_t v7 = *(void *)a1;
  if (*(void *)a1 > 1uLL) {
    return 2;
  }
  if (!*(void *)a3)
  {
    uint64_t v22 = *re::videoLogObjects(a1);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    LOWORD(buffer[0]) = 0;
    long long v23 = "[videoPlaybackCreatePSEConfigs] The given PSE processor is invalid.";
LABEL_28:
    _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)buffer, 2u);
    return 1;
  }
  if (!**(void **)a3)
  {
    uint64_t v22 = *re::videoLogObjects(a1);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    LOWORD(buffer[0]) = 0;
    long long v23 = "[videoPlaybackCreatePSEConfigs] The given PSE processor is not initialized.";
    goto LABEL_28;
  }
  unint64_t v15 = a1;
  id v16 = (CVPixelBufferRef *)((char *)a1 + 16);
  if (!v7) {
    goto LABEL_22;
  }
  if (!*v16)
  {
    uint64_t v22 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      return 1;
    }
    LOWORD(buffer[0]) = 0;
    long long v23 = "[videoPlaybackCreatePSEConfigs] The given pixel buffers are invalid.";
    goto LABEL_28;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(*v16);
  CFRetain(IOSurface);
  buffer[0] = IOSurface;
  unint64_t v18 = **(id ***)a3;
  if (!v18) {
    goto LABEL_19;
  }
  if (!IOSurface) {
    return 2;
  }
  int v19 = [*v18 canProcessSurface:IOSurface];
  IOSurfaceRef IOSurface = buffer[0];
  if (!v19)
  {
LABEL_19:
    if (IOSurface) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)buffer);
    }
    return 2;
  }
  if (buffer[0])
  {
    PixelFormat = (re::CoreVideoUtils *)IOSurfaceGetPixelFormat(buffer[0]);
    char canConvertToGammaSpaceRGBColorModel = re::CoreVideoUtils::canConvertToGammaSpaceRGBColorModel(PixelFormat);
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)buffer);
    if (canConvertToGammaSpaceRGBColorModel) {
      goto LABEL_22;
    }
    return 2;
  }
  a1 = (re *)re::CoreVideoUtils::canConvertToGammaSpaceRGBColorModel(0);
  if ((a1 & 1) == 0) {
    return 2;
  }
LABEL_22:
  if (!*(void *)(a2 + 560) || !*(void *)(a2 + 416))
  {
    uint64_t v22 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buffer[0]) = 0;
      long long v23 = "[videoPlaybackCreatePSEConfigs] The given display info provider is not initialized.";
      goto LABEL_28;
    }
    return 1;
  }
  float v24 = re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(a2 + 528);
  float v25 = re::TargetDisplayInfoProvider::{unnamed type#9}::operator()(a2 + 384);
  re::DynamicInlineArray<re::VideoObject<re::VideoPixelBufferBase>,2ul>::resize(a5, v7);
  if (*(void *)a6 >= v7)
  {
    if (*(void *)a6 <= v7) {
      goto LABEL_40;
    }
    unint64_t v27 = (const void **)(a6 + 48 * v7 + 48);
    unint64_t v28 = v7;
    do
    {
      if (*v27) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v27);
      }
      *unint64_t v27 = 0;
      if (*(v27 - 1)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v27 - 1);
      }
      *(v27 - 1) = 0;
      unint64_t v29 = (std::__shared_weak_count *)*(v27 - 3);
      if (v29) {
        std::__shared_weak_count::__release_weak(v29);
      }
      ++v28;
      v27 += 6;
    }
    while (v28 < *(void *)a6);
  }
  else
  {
    bzero((void *)(a6 + 16), 48 * v7);
  }
  *(void *)a6 = v7;
  ++*(_DWORD *)(a6 + 8);
LABEL_40:
  if (!v7) {
    return 0;
  }
  if (!*v15)
  {
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_62:
    re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
LABEL_63:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_64;
  }
  re::VideoPixelBufferBase::surface(v16, buffer);
  uint64_t v31 = buffer[0];
  if (buffer[0]) {
    unsigned int v32 = (re::CoreVideoUtils *)IOSurfaceGetPixelFormat(buffer[0]);
  }
  else {
    unsigned int v32 = 0;
  }
  if (!*v15) {
    goto LABEL_62;
  }
  uint64_t v33 = re::CoreVideoUtils::convertToGammaSpaceRGBColorModel(v32);
  int v34 = re::VideoPixelBufferBase::colorTags(v16);
  if (v31)
  {
    size_t Width = IOSurfaceGetWidth(v31);
    size_t Height = IOSurfaceGetHeight(v31);
    unint64_t ProtectionOptions = IOSurfaceGetProtectionOptions();
  }
  else
  {
    size_t Height = 0;
    size_t Width = 0;
    unint64_t ProtectionOptions = 0;
  }
  re::VideoSimplePixelBufferAllocator::createPixelBuffer(a4, Width, Height, v33, (re::CoreVideoUtils *)BYTE1(v34), BYTE2(v34), 0, 1, &v44, 0x1000000400, 0, ProtectionOptions);
  if (!*(void *)a5) {
    goto LABEL_63;
  }
  *(void *)(a5 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v44;
  if (!*(void *)a6)
  {
LABEL_64:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
LABEL_65:
    re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v40 = *(id ***)a3;
  uint64_t v39 = *(void *)(a3 + 8);
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 16), 1uLL, memory_order_relaxed);
  }
  float v41 = *(std::__shared_weak_count **)(a6 + 24);
  *(void *)(a6 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v40;
  *(void *)(a6 + 24) = v39;
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  if (!*(void *)a6) {
    goto LABEL_65;
  }
  *(double *)(a6 + 32) = a7;
  re::VideoObject<re::VideoColorTransformBase>::setRef(a6 + 40, (const void **)(a6 + 40), v31);
  if (!*(void *)a5)
  {
LABEL_66:
    re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_67;
  }
  re::VideoPixelBufferBase::surface((__CVBuffer **)(a5 + 16), &v44);
  if (*(void *)a6)
  {
    *(void *)(a6 + 48) = v44;
    *(float *)(a6 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v25;
    *(float *)(a6 + 60) = v24;
    if (v31) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)buffer);
    }
    return 0;
  }
LABEL_67:
  re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

float re::VideoHDRDefaults::maxEdrValue(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.edr.max_value", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 2.0;
      }
      re::VideoHDRDefaults::maxEdrValue(void)::value = LODWORD(v5);
      int v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 954);
}

float re::VideoHDRDefaults::overrideMaxEdrValue(re::VideoHDRDefaults *this, float result)
{
  {
    float v4 = result;
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.edr.max_value", v3, (uint64_t)&re::VideoHDRDefaults::overrideMaxEdrValue(float)::value);
      uint64_t result = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideMaxEdrValue(float)::value) {
    return *(float *)&dword_2687A1EFC;
  }
  return result;
}

float re::VideoHDRDefaults::maxEdrFactor(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.edr.max_factor", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 0.5;
      }
      re::VideoHDRDefaults::maxEdrFactor(void)::value = LODWORD(v5);
      int v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 962);
}

float re::VideoHDRDefaults::overrideMaxEdrFactor(re::VideoHDRDefaults *this, float result)
{
  {
    float v4 = result;
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.edr.max_factor", v3, (uint64_t)&re::VideoHDRDefaults::overrideMaxEdrFactor(float)::value);
      uint64_t result = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideMaxEdrFactor(float)::value) {
    return *(float *)&dword_2687A1F1C;
  }
  return result;
}

uint64_t re::VideoHDRDefaults::targetNits(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.nits.target", v4, (uint64_t)v6);
      int v5 = v7;
      if (!v6[0]) {
        int v5 = 100;
      }
      re::VideoHDRDefaults::targetNits(void)::value = v5;
      int v1 = &dword_2687A1000;
    }
  }
  return v1[970];
}

uint64_t re::VideoHDRDefaults::overrideTargetNits(uint64_t this)
{
  {
    int v3 = this;
    LODWORD(this) = v3;
    if (v2)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.override.nits.target", v1, (uint64_t)&re::VideoHDRDefaults::overrideTargetNits::value);
      LODWORD(this) = v3;
    }
  }
  if (re::VideoHDRDefaults::overrideTargetNits::value) {
    return dword_2687A1F3C;
  }
  else {
    return this;
  }
}

float re::VideoHDRDefaults::currentMaxNits(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.nits.current_max", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 800.0;
      }
      re::VideoHDRDefaults::currentMaxNits(void)::value = LODWORD(v5);
      int v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 978);
}

float re::VideoHDRDefaults::overrideCurrentMaxNits(re::VideoHDRDefaults *this, float result)
{
  {
    float v4 = result;
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.nits.current_max", v3, (uint64_t)&re::VideoHDRDefaults::overrideCurrentMaxNits(float)::value);
      uint64_t result = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideCurrentMaxNits(float)::value) {
    return *(float *)&dword_2687A1F5C;
  }
  return result;
}

float re::VideoHDRDefaults::currentMinNits(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.nits.current_min", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 0.005;
      }
      re::VideoHDRDefaults::currentMinNits(void)::value = LODWORD(v5);
      int v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 986);
}

float re::VideoHDRDefaults::overrideCurrentMinNits(re::VideoHDRDefaults *this, float result)
{
  {
    float v4 = result;
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.nits.current_min", v3, (uint64_t)&re::VideoHDRDefaults::overrideCurrentMinNits(float)::value);
      uint64_t result = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideCurrentMinNits(float)::value) {
    return *(float *)&dword_2687A1F7C;
  }
  return result;
}

float re::VideoHDRDefaults::overrideAmbientLightInNits(re::VideoHDRDefaults *this, float result)
{
  {
    float v4 = result;
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.nits.ambient_light", v3, (uint64_t)&re::VideoHDRDefaults::overrideAmbientLightInNits(float)::value);
      uint64_t result = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideAmbientLightInNits(float)::value) {
    return *(float *)&dword_2687A1F8C;
  }
  return result;
}

float re::VideoHDRDefaults::sdrMaxBrightnessInNits(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.nits.sdr_max_brightness", v4, (uint64_t)v6);
      float v5 = (float)v7;
      if (!v6[0]) {
        float v5 = 150.0;
      }
      re::VideoHDRDefaults::sdrMaxBrightnessInNits(void)::value = LODWORD(v5);
      int v1 = &dword_2687A1000;
    }
  }
  return *((float *)v1 + 998);
}

float re::VideoHDRDefaults::overrideSdrMaxBrightnessInNits(re::VideoHDRDefaults *this, float result)
{
  {
    float v4 = result;
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.nits.sdr_max_brightness", v3, (uint64_t)&re::VideoHDRDefaults::overrideSdrMaxBrightnessInNits(float)::value);
      uint64_t result = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideSdrMaxBrightnessInNits(float)::value) {
    return *(float *)&dword_2687A1FAC;
  }
  return result;
}

uint64_t re::VideoHDRDefaults::displayAdjustsBlackLevel(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.hdr.display.adjusts_black_level", v4, v6);
      char v5 = v6[1];
      if (!v6[0]) {
        char v5 = 1;
      }
      re::VideoHDRDefaults::displayAdjustsBlackLevel(void)::value = v5;
      int v1 = &dword_2687A1000;
    }
  }
  return *((unsigned __int8 *)v1 + 4024);
}

uint64_t re::VideoHDRDefaults::overrideDisplayAdjustsBlackLevel(uint64_t this)
{
  {
    int v3 = this;
    LODWORD(this) = v3;
    if (v2)
    {
      re::Defaults::BOOLValue((re::Defaults *)"video.hdr.override.display.adjusts_black_level", v1, &re::VideoHDRDefaults::overrideDisplayAdjustsBlackLevel(BOOL)::value);
      LODWORD(this) = v3;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayAdjustsBlackLevel(BOOL)::value) {
    return byte_2687A1FC9 != 0;
  }
  else {
    return this;
  }
}

uint64_t re::VideoHDRDefaults::displayDiagonalSize(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.display.diagonal_size", v4, (uint64_t)v6);
      int v5 = v7;
      if (!v6[0]) {
        int v5 = 10;
      }
      re::VideoHDRDefaults::displayDiagonalSize(void)::value = v5;
      int v1 = &dword_2687A1000;
    }
  }
  return v1[1014];
}

uint64_t re::VideoHDRDefaults::displayMaximumBrightnessInNits(re::VideoHDRDefaults *this)
{
  int v1 = &dword_2687A1000;
  {
    int v1 = &dword_2687A1000;
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.display.nits.max_brightness", v4, (uint64_t)v6);
      int v5 = v7;
      if (!v6[0]) {
        int v5 = 800;
      }
      re::VideoHDRDefaults::displayMaximumBrightnessInNits(void)::value = v5;
      int v1 = &dword_2687A1000;
    }
  }
  return v1[1018];
}

uint64_t re::VideoHDRDefaults::overrideDisplayMaximumBrightnessInNits(uint64_t this)
{
  {
    int v3 = this;
    LODWORD(this) = v3;
    if (v2)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.override.display.nits.max_brightness", v1, (uint64_t)&re::VideoHDRDefaults::overrideDisplayMaximumBrightnessInNits::value);
      LODWORD(this) = v3;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayMaximumBrightnessInNits::value) {
    return dword_2687A1FFC;
  }
  else {
    return this;
  }
}

uint64_t re::VideoHDRDefaults::displayAverageBrightnessInNits(re::VideoHDRDefaults *this)
{
  {
    if (v3)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.display.nits.average_brightness", v4, (uint64_t)v6);
      int v5 = v7;
      if (!v6[0]) {
        int v5 = 400;
      }
      re::VideoHDRDefaults::displayAverageBrightnessInNits(void)::value = v5;
    }
  }
  return v1[2];
}

uint64_t re::VideoHDRDefaults::overrideDisplayAverageBrightnessInNits(uint64_t this)
{
  {
    int v3 = this;
    LODWORD(this) = v3;
    if (v2)
    {
      re::Defaults::intValue((re::Defaults *)"video.hdr.override.display.nits.average_brightness", v1, (uint64_t)&re::VideoHDRDefaults::overrideDisplayAverageBrightnessInNits::value);
      LODWORD(this) = v3;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayAverageBrightnessInNits::value) {
    return dword_2687A201C;
  }
  else {
    return this;
  }
}

float re::VideoHDRDefaults::displayMinimumBrightnessInNits(re::VideoHDRDefaults *this)
{
  {
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.display.nits.min_brightness", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 0.005;
      }
      re::VideoHDRDefaults::displayMinimumBrightnessInNits(void)::value = LODWORD(v5);
    }
  }
  return v1[10];
}

float re::VideoHDRDefaults::overrideDisplayMinimumBrightnessInNits(re::VideoHDRDefaults *this, float result)
{
  {
    float v4 = result;
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.display.nits.min_brightness", v3, (uint64_t)&re::VideoHDRDefaults::overrideDisplayMinimumBrightnessInNits(float)::value);
      uint64_t result = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayMinimumBrightnessInNits(float)::value) {
    return *(float *)&dword_2687A203C;
  }
  return result;
}

float re::VideoHDRDefaults::displayContrastRatio(re::VideoHDRDefaults *this)
{
  {
    if (v3)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.display.contrast_ratio", v4, (uint64_t)v6);
      float v5 = v7;
      if (!v6[0]) {
        float v5 = 0.000667;
      }
      re::VideoHDRDefaults::displayContrastRatio(void)::value = LODWORD(v5);
    }
  }
  return v1[18];
}

float re::VideoHDRDefaults::overrideDisplayContrastRatio(re::VideoHDRDefaults *this, float result)
{
  {
    float v4 = result;
    uint64_t result = v4;
    if (v2)
    {
      re::Defaults::floatValue((re::Defaults *)"video.hdr.override.display.contrast_ratio", v3, (uint64_t)&re::VideoHDRDefaults::overrideDisplayContrastRatio(float)::value);
      uint64_t result = v4;
    }
  }
  if (re::VideoHDRDefaults::overrideDisplayContrastRatio(float)::value) {
    return *(float *)&dword_2687A205C;
  }
  return result;
}

uint64_t re::VideoHDRDefaults::overridePixelFormat(uint64_t this)
{
  {
    int v3 = this;
    LODWORD(this) = v3;
    if (v2)
    {
      re::Defaults::uintValue((re::Defaults *)"video.hdr.override.pixel_format", v1, (uint64_t)&re::VideoHDRDefaults::overridePixelFormat::value);
      LODWORD(this) = v3;
    }
  }
  if (re::VideoHDRDefaults::overridePixelFormat::value) {
    return dword_2687A206C;
  }
  else {
    return this;
  }
}

uint64_t re::VideoHDRDefaults::overrideColorPrimaries(re::VideoHDRDefaults *this)
{
  {
    char v5 = (char)this;
    LOBYTE(this) = v5;
    if (v4)
    {
      re::Defaults::uintValue((re::Defaults *)"video.hdr.override.color_primaries", v3, (uint64_t)&re::VideoHDRDefaults::overrideColorPrimaries(unsigned char)::value);
      LOBYTE(this) = v5;
    }
  }
  unsigned __int8 v1 = dword_2687A207C;
  if (!re::VideoHDRDefaults::overrideColorPrimaries(unsigned char)::value) {
    return this;
  }
  return v1;
}

uint64_t re::VideoHDRDefaults::overrideTransferFunction(re::VideoHDRDefaults *this)
{
  {
    char v5 = (char)this;
    LOBYTE(this) = v5;
    if (v4)
    {
      re::Defaults::uintValue((re::Defaults *)"video.hdr.override.transfer_function", v3, (uint64_t)&re::VideoHDRDefaults::overrideTransferFunction(unsigned char)::value);
      LOBYTE(this) = v5;
    }
  }
  unsigned __int8 v1 = dword_2687A208C;
  if (!re::VideoHDRDefaults::overrideTransferFunction(unsigned char)::value) {
    return this;
  }
  return v1;
}

uint64_t re::VideoHDRDefaults::overrideYCbCrMatrix(re::VideoHDRDefaults *this)
{
  {
    char v5 = (char)this;
    LOBYTE(this) = v5;
    if (v4)
    {
      re::Defaults::uintValue((re::Defaults *)"video.hdr.override.ycbcr_matrix", v3, (uint64_t)&re::VideoHDRDefaults::overrideYCbCrMatrix(unsigned char)::value);
      LOBYTE(this) = v5;
    }
  }
  unsigned __int8 v1 = dword_2687A209C;
  if (!re::VideoHDRDefaults::overrideYCbCrMatrix(unsigned char)::value) {
    return this;
  }
  return v1;
}

double re::VideoColorTuner::calculateColor(uint64_t a1, float *a2, float32x4_t *a3, float32x4_t *a4)
{
  *(void *)(a1 + 32) = re::VideoColorTuner::calculateTargetColor((float *)a1, a2, a3->f32, (float *)(a1 + 32), a4);
  *(void *)(a1 + 40) = v7;
  float32x4_t v16 = *(float32x4_t *)(a1 + 32);
  float v8 = powf(a2[1], a3[7].f32[0]);
  float v9 = a3[7].f32[1];
  float v10 = v9 + (float)(v8 * (float)(1.0 - v9));
  if (v10 > 1.0) {
    float v10 = 1.0;
  }
  if (v10 < v9) {
    float v10 = a3[7].f32[1];
  }
  float32x4_t v16 = vmlaq_n_f32(vmulq_n_f32(v16, v10), a3[6], 1.0 - v10);
  v11.i64[0] = re::SmoothDampener::smooth((uint64_t)&v16, a1 + 48, a1 + 16, a3[5].f32[2], a3[5].f32[1], *a2);
  v11.i64[1] = v12;
  *(void *)(a1 + 48) = v11.i64[0];
  *(void *)(a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v12;
  float v13 = a3[5].f32[0];
  *(float *)v14.i32 = 1.0 - v13;
  *(void *)&double result = vaddq_f32((float32x4_t)vdupq_lane_s32(v14, 0), vmulq_n_f32(v11, v13)).u64[0];
  return result;
}

re::VideoDefaults *re::VideoColorTuner::calculateTargetColor(float *a1, float *a2, float *a3, float *a4, float32x4_t *a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  *(__n64 *)&long long v10 = re::VideoColorUtils::rgbToHsv(a5->f32);
  LODWORD(v10) = v11;
  long long v67 = v10;
  float v12 = *((float *)&v11 + 1);
  float v14 = v13;
  unint64_t v15 = (re *)re::VideoDefaults::logEnabled(v11);
  if (v15)
  {
    int v46 = *re::videoLogObjects(v15);
    BOOL v47 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);
    if (v47)
    {
      double v48 = a5->f32[0];
      double v49 = a5->f32[1];
      double v50 = a5->f32[2];
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = v48;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v49;
      __int16 v69 = 2048;
      double v70 = v50;
      _os_log_impl(&dword_233120000, v46, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Input Color: %f, %f, %f", buf, 0x20u);
    }
    uint64_t v51 = *re::videoLogObjects((re *)v47);
    BOOL v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
    if (v52)
    {
      double v53 = (float)((float)((float)(a5->f32[0] * 100.0) * 254.0) / 100.0);
      double v54 = (float)((float)((float)(a5->f32[1] * 100.0) * 254.0) / 100.0);
      float v55 = (float)(a5->f32[2] * 100.0) * 254.0;
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = v53;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v54;
      __int16 v69 = 2048;
      double v70 = (float)(v55 / 100.0);
      _os_log_impl(&dword_233120000, v51, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Input Color RGB Values: R:%f, G:%f, B:%f", buf, 0x20u);
    }
    uint64_t v56 = *re::videoLogObjects((re *)v52);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = *(float *)&v67;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v12;
      __int16 v69 = 2048;
      double v70 = v14;
      _os_log_impl(&dword_233120000, v56, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Input HSV: %f, %f, %f", buf, 0x20u);
    }
  }
  re::VideoColorUtils::rgbToHsv(a4);
  float v17 = (float)((float)(*a2 * *a3) * fabsf((float)(*(float *)&v67 - v16) / *a2))
      + (float)(*a1 * (float)(1.0 - (float)(*a2 * *a3)));
  *a1 = v17;
  float v18 = powf(v12, a3[5]);
  float v19 = a3[6];
  float v20 = a3[7];
  float v21 = (float)((float)(v17 - a3[2]) / (float)(a3[1] - a3[2])) + 0.0;
  if (v21 > 1.0) {
    float v21 = 1.0;
  }
  if (v21 >= 0.0) {
    float v22 = 1.0 - v21;
  }
  else {
    float v22 = 1.0;
  }
  float v24 = powf(v22, a3[3]);
  float v25 = v18 * (float)((float)(v20 * (float)(1.0 - v24)) + (float)(v19 * (float)(1.0 - (float)(1.0 - v24))));
  float32x4_t v26 = vmulq_f32(*a5, (float32x4_t)xmmword_234416EF0);
  float v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
  if (v27 <= v14) {
    float v27 = v14;
  }
  if (v27 > 1.0) {
    float v27 = 1.0;
  }
  float v66 = 0.0;
  if (v27 >= 0.0) {
    float v28 = v27;
  }
  else {
    float v28 = 0.0;
  }
  unint64_t v29 = (re *)re::VideoDefaults::logEnabled(v23);
  if (v29)
  {
    uint64_t v57 = *re::videoLogObjects(v29);
    BOOL v58 = os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
    if (v58)
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = *(float *)&v67;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v25;
      __int16 v69 = 2048;
      double v70 = v14;
      _os_log_impl(&dword_233120000, v57, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Hue Dependent Saturation: %f, %f, %f", buf, 0x20u);
    }
    float v59 = *re::videoLogObjects((re *)v58);
    unint64_t v29 = (re *)os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = v28;
      _os_log_impl(&dword_233120000, v59, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor luminance: %f", buf, 0xCu);
    }
  }
  if (v28 > 0.0001)
  {
    float v30 = a3[9];
    if (v25 <= v30) {
      float v30 = v25;
    }
    if (v30 >= 0.0) {
      float v31 = v30;
    }
    else {
      float v31 = 0.0;
    }
    float v32 = powf(a3[11], (float)(v28 - a3[10]) * -40.0);
    float v66 = (float)(v31 * (float)(1.0 / (float)(v32 + 1.0)))
        + (float)((float)(1.0 - (float)(1.0 / (float)(v32 + 1.0))) * 0.0);
  }
  uint64_t v33 = (re *)re::VideoDefaults::logEnabled(v29);
  if (v33)
  {
    char v60 = *re::videoLogObjects(v33);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = *(float *)&v67;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v66;
      __int16 v69 = 2048;
      double v70 = v14;
      _os_log_impl(&dword_233120000, v60, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Brightness Dependent Saturation: %f, %f, %f", buf, 0x20u);
    }
  }
  float v34 = a2[12];
  float v35 = a3[12];
  float v36 = a3[13];
  float v37 = powf(a3[17], (float)(v14 - a3[16]) * -40.0);
  float v65 = v34
      * (float)((float)(v36 * (float)(1.0 / (float)(v37 + 1.0)))
              + (float)(v35 * (float)(1.0 - (float)(1.0 / (float)(v37 + 1.0)))));
  uint64_t v39 = (re *)re::VideoDefaults::logEnabled(v38);
  if (v39)
  {
    uint64_t v61 = *re::videoLogObjects(v39);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = *(float *)&v67;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v66;
      __int16 v69 = 2048;
      double v70 = v65;
      _os_log_impl(&dword_233120000, v61, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Output HSV: %f, %f, %f", buf, 0x20u);
    }
  }
  long long v40 = v67;
  *((float *)&v40 + 1) = v66;
  *((float *)&v40 + 2) = v65;
  *(_OWORD *)buf = v40;
  float v41 = (re::VideoDefaults *)re::VideoColorUtils::hsvToRgb((uint64_t)buf);
  float v43 = v42;
  IOSurfaceRef v44 = (re *)re::VideoDefaults::logEnabled(v41);
  if (v44)
  {
    int64x2_t v62 = *re::videoLogObjects(v44);
    BOOL v63 = os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
    if (v63)
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = *(float *)&v41;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = *((float *)&v41 + 1);
      __int16 v69 = 2048;
      double v70 = v43;
      _os_log_impl(&dword_233120000, v62, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Output Color: %f, %f, %f", buf, 0x20u);
    }
    float v64 = *re::videoLogObjects((re *)v63);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = (float)((float)((float)(*(float *)&v41 * 100.0) * 254.0) / 100.0);
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = (float)((float)((float)(*((float *)&v41 + 1) * 100.0) * 254.0) / 100.0);
      __int16 v69 = 2048;
      double v70 = (float)((float)((float)(v43 * 100.0) * 254.0) / 100.0);
      _os_log_impl(&dword_233120000, v64, OS_LOG_TYPE_DEFAULT, "VideoColorTuner::calculateTargetColor Output Color RGB Values: %f, %f, %f", buf, 0x20u);
    }
  }
  return v41;
}

uint64_t re::VideoTextureCache::init(CVMetalTextureCacheRef *this)
{
  if (*this) {
    return 0;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  id v4 = MTLCreateSystemDefaultDevice();
  LODWORD(v3) = CVMetalTextureCacheCreate(v3, 0, v4, 0, this);

  if (!v3) {
    return 1;
  }
  uint64_t result = 0;
  *this = 0;
  return result;
}

uint64_t re::VideoTextureCache::createTexturesFromPixelBuffer(re::VideoTextureCache *this, CVPixelBufferRef pixelBuffer, re::VideoPixelBufferTextures *a3, int a4)
{
  if (!pixelBuffer)
  {
    unint64_t v15 = *re::videoLogObjects(this);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(texture[0]) = 0;
      float v16 = "Invalid input pixel buffer.";
      goto LABEL_23;
    }
    return 1;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  if (!IOSurface)
  {
    unint64_t v15 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(texture[0]) = 0;
      float v16 = "Invalid input pixel buffer.";
      goto LABEL_23;
    }
    return 1;
  }
  float v9 = IOSurface;
  PlaneCFIndex Count = IOSurfaceGetPlaneCount(IOSurface);
  unint64_t v11 = PlaneCount;
  if (PlaneCount <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = PlaneCount;
  }
  PixelFormatType = (re::CoreVideoUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  IsTriPlanar = (re *)re::CoreVideoUtils::pixelFormatIsTriPlanar(PixelFormatType);
  if (IsTriPlanar && v12 != 3)
  {
    unint64_t v15 = *re::videoLogObjects(IsTriPlanar);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(texture[0]) = 0;
      float v16 = "Invalid input pixel buffer.";
LABEL_23:
      long long v23 = (uint8_t *)texture;
LABEL_24:
      _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, v16, v23, 2u);
      return 1;
    }
    return 1;
  }
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = (re *)CVPixelBufferGetHeight(pixelBuffer);
  if (!Width || (size_t v19 = (size_t)Height) == 0)
  {
    unint64_t v15 = *re::videoLogObjects(Height);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(texture[0]) = 0;
      float v16 = "Invalid input pixel buffer.";
      goto LABEL_23;
    }
    return 1;
  }
  CVMetalTextureRef textureOut = 0;
  texture[0] = 0;
  CVMetalTextureRef v49 = 0;
  if (re::VideoPlatform::isLegacyDevice(Height))
  {
    float v20 = (re *)re::CoreVideoUtils::metalPixelFormatFromPixelFormat(PixelFormatType, 0);
    if (!v20)
    {
      unint64_t v15 = *re::videoLogObjects(v20);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        return 1;
      }
      *(_WORD *)buf = 0;
      float v16 = "Could not determine pixel buffer's pixel format for plane 1.";
      goto LABEL_33;
    }
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    TextureFromImage = (re *)CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)(int)v20, Width, v19, 0, texture);
    if (TextureFromImage)
    {
      unint64_t v15 = *re::videoLogObjects(TextureFromImage);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        return 1;
      }
      *(_WORD *)buf = 0;
      float v16 = "Unable to create texture from texture cache.";
LABEL_33:
      long long v23 = buf;
      goto LABEL_24;
    }
    if (v11 >= 2)
    {
      float v27 = (re *)re::CoreVideoUtils::metalPixelFormatFromPixelFormat(PixelFormatType, 1);
      if (!v27)
      {
        float v32 = *re::videoLogObjects(v27);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        *(_WORD *)buf = 0;
        uint64_t v33 = "Could not determine pixel buffer's pixel format for plane 2.";
        goto LABEL_59;
      }
      int v28 = (int)v27;
      size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(v9, 1uLL);
      size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(v9, 1uLL);
      float v31 = (re *)CVMetalTextureCacheCreateTextureFromImage(v21, *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)v28, WidthOfPlane, HeightOfPlane, 1uLL, &textureOut);
      if (v31)
      {
        float v32 = *re::videoLogObjects(v31);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        *(_WORD *)buf = 0;
        uint64_t v33 = "Unable to create texture from texture cache.";
        goto LABEL_59;
      }
    }
    if (v12 >= 3)
    {
      float v36 = (re *)re::CoreVideoUtils::metalPixelFormatFromPixelFormat(PixelFormatType, 2);
      if (!v36)
      {
        float v41 = *re::videoLogObjects(v36);
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        *(_WORD *)buf = 0;
        float v42 = "Could not determine pixel buffer's pixel format for plane 3.";
LABEL_70:
        _os_log_error_impl(&dword_233120000, v41, OS_LOG_TYPE_ERROR, v42, buf, 2u);
LABEL_65:
        if (texture[0]) {
          CFRelease(texture[0]);
        }
        CVMetalTextureRef v47 = textureOut;
        if (!textureOut) {
          return 1;
        }
        goto LABEL_61;
      }
      int v37 = (int)v36;
      size_t v38 = IOSurfaceGetWidthOfPlane(v9, 2uLL);
      size_t v39 = IOSurfaceGetHeightOfPlane(v9, 2uLL);
      long long v40 = (re *)CVMetalTextureCacheCreateTextureFromImage(v21, *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)v37, v38, v39, 2uLL, &v49);
      if (v40)
      {
        float v41 = *re::videoLogObjects(v40);
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        *(_WORD *)buf = 0;
        float v42 = "Unable to create texture from texture cache.";
        goto LABEL_70;
      }
    }
  }
  else
  {
    float v24 = re::CoreVideoUtils::metalPixelFormatForPixelBuffer(pixelBuffer, 0, a4);
    if (!v24)
    {
      unint64_t v15 = *re::videoLogObjects(v24);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        return 1;
      }
      *(_WORD *)buf = 0;
      float v16 = "Could not determine pixel buffer's pixel format for plane 1.";
      goto LABEL_33;
    }
    CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    float32x4_t v26 = (re *)CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x263EFFB08], *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)(int)v24, Width, v19, 0, texture);
    if (v26)
    {
      unint64_t v15 = *re::videoLogObjects(v26);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        return 1;
      }
      *(_WORD *)buf = 0;
      float v16 = "Unable to create texture from texture cache.";
      goto LABEL_33;
    }
    if (v12 == 3)
    {
      float v34 = re::CoreVideoUtils::metalPixelFormatForPixelBuffer(pixelBuffer, (__CVBuffer *)2, a4);
      if (!v34)
      {
        float v32 = *re::videoLogObjects(v34);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        *(_WORD *)buf = 0;
        uint64_t v33 = "Could not determine pixel buffer's pixel format for plane 3.";
LABEL_59:
        _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, v33, buf, 2u);
LABEL_60:
        CVMetalTextureRef v47 = texture[0];
        if (!texture[0]) {
          return 1;
        }
LABEL_61:
        CFRelease(v47);
        return 1;
      }
      float v35 = (re *)CVMetalTextureCacheCreateTextureFromImage(v25, *(CVMetalTextureCacheRef *)this, pixelBuffer, 0, (MTLPixelFormat)(int)v34, Width, v19, 2uLL, &textureOut);
      if (v35)
      {
        float v32 = *re::videoLogObjects(v35);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          goto LABEL_60;
        }
        *(_WORD *)buf = 0;
        uint64_t v33 = "Unable to create texture from texture cache.";
        goto LABEL_59;
      }
    }
  }
  CVMetalTextureRef v43 = texture[0];
  CVPixelBufferRetain(texture[0]);
  *(void *)a3 = v43;
  CVMetalTextureRef v44 = textureOut;
  CVPixelBufferRetain(textureOut);
  *((void *)a3 + 1) = v44;
  CVMetalTextureRef v45 = v49;
  CVPixelBufferRetain(v49);
  *((void *)a3 + 2) = v45;
  if (texture[0]) {
    CFRelease(texture[0]);
  }
  if (textureOut) {
    CFRelease(textureOut);
  }
  uint64_t result = (uint64_t)v49;
  if (v49)
  {
    CFRelease(v49);
    return 0;
  }
  return result;
}

uint64_t *re::videoLogObjects(re *this)
{
  {
    re::videoLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Video");
  }
  return &re::videoLogObjects(void)::logObjects;
}

re *re::VideoAutoDecrementer::VideoAutoDecrementer(re *a1, uint64_t *a2)
{
  id v4 = re::videoMallocAllocator(a1);
  ArcSharedObject::ArcSharedObject(a1, 0);
  *((void *)a1 + 2) = v4;
  *((void *)a1 + 3) = 0;
  *(void *)a1 = &unk_26E722838;
  *((void *)a1 + 4) = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 4);
    *((void *)a1 + 3) = v5;
    *((void *)a1 + 4) = v6;
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *((void *)a1 + 3) = v5;
    *((void *)a1 + 4) = 0;
  }
  return a1;
}

void re::VideoAutoDecrementer::~VideoAutoDecrementer(re::VideoAutoDecrementer *this)
{
  *(void *)this = &unk_26E722838;
  int v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2)
  {
    CFAllocatorRef v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      id v4 = (atomic_ullong *)*((void *)this + 3);
      if (v4)
      {
        if ((atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) & 0x8000000000000000) != 0)
        {
          float v8 = v3;
          uint64_t v6 = *re::videoLogObjects((re *)v3);
          BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
          CFAllocatorRef v3 = v8;
          if (v7)
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[VideoAutoDecrementer] Count dropped below zero.", buf, 2u);
            CFAllocatorRef v3 = v8;
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v3);
    }
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::VideoAutoDecrementer::~VideoAutoDecrementer(this);
  JUMPOUT(0x237DBCBD0);
}

re *re::VideoAutoCounter::increment@<X0>(atomic_ullong *volatile *this@<X0>, re **a2@<X8>)
{
  if (*this) {
    atomic_fetch_add(*this, 1uLL);
  }
  re::videoMallocAllocator((re *)this);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x10uLL, 0x28uLL, 0xC75C8B65uLL);
  id v4 = (re *)memptr;
  __dmb(0xBu);
  uint64_t result = re::VideoAutoDecrementer::VideoAutoDecrementer(v4, (uint64_t *)this);
  *a2 = result;
  return result;
}

unint64_t re::VideoAutoCounter::count(unint64_t **this)
{
  if (*this) {
    return atomic_load(*this);
  }
  int v2 = *re::videoLogObjects((re *)this);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CFAllocatorRef v3 = 0;
    _os_log_error_impl(&dword_233120000, v2, OS_LOG_TYPE_ERROR, "[VideoAutoCounter::count] Counter is not initialized.", v3, 2u);
  }
  return -1;
}

void std::__shared_ptr_emplace<std::atomic<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E722880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::atomic<long long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E722880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

CVPixelBufferRef re::VideoPixelBufferTextures::invalidate(re::VideoPixelBufferTextures *this)
{
  CVPixelBufferRetain(0);
  *(void *)this = 0;
  CVPixelBufferRetain(0);
  *((void *)this + 1) = 0;
  CVPixelBufferRef result = CVPixelBufferRetain(0);
  *((void *)this + 2) = 0;
  return result;
}

void re::VideoHistogramManager::~VideoHistogramManager(re::VideoHistogramManager *this)
{
  uint64_t v2 = *((unsigned int *)this + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    id v4 = (int *)(*((void *)this + 6) + 8);
    while (1)
    {
      int v5 = *v4;
      v4 += 14;
      if (v5 < 0) {
        break;
      }
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 16);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v2 != v3)
  {
    uint64_t v6 = v3;
    do
    {
      CVPixelBufferRelease(*(CVPixelBufferRef *)(*((void *)this + 6) + 56 * v6 + 48));
      if (*((_DWORD *)this + 16) <= (v3 + 1)) {
        int v7 = v3 + 1;
      }
      else {
        int v7 = *((_DWORD *)this + 16);
      }
      int v8 = v3;
      while (1)
      {
        uint64_t v6 = (v8 + 1);
        if (v7 - 1 == v8) {
          break;
        }
        ++v8;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((void *)this + 6) + 56 * v6 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v3) = v7;
LABEL_17:
      ;
    }
    while (v2 != v3);
  }
  if (*(void *)this)
  {
    CFRelease(*(CFTypeRef *)this);
    *(void *)this = 0;
  }
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)this + 4);
}

void re::VideoHistogram::setData(uint64_t a1, unsigned int *a2)
{
  id v4 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  if (*a2 >= 0x80) {
    unint64_t v5 = 128;
  }
  else {
    unint64_t v5 = *a2;
  }
  *(void *)(a1 + 1640) = v5;
  re::DynamicInlineArray<unsigned int,128ul>::resize(a1 + 1648, v5);
  uint64_t v6 = (uint64_t *)(a1 + 2176);
  re::DynamicInlineArray<unsigned int,128ul>::resize(a1 + 2176, v5);
  int v7 = (uint64_t *)(a1 + 2704);
  re::DynamicInlineArray<unsigned int,128ul>::resize(a1 + 2704, v5);
  if (v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 1648);
    uint64_t v11 = *((void *)a2 + 193);
    unint64_t v12 = (_DWORD *)(a1 + 1660);
    uint64_t v13 = *((void *)a2 + 194);
    uint64_t v14 = *((void *)a2 + 195);
    while (v10 != v9)
    {
      _DWORD *v12 = *(_DWORD *)(v11 + 4 * v9);
      uint64_t v15 = *v6;
      if (*v6 <= v9) {
        goto LABEL_14;
      }
      v12[132] = *(_DWORD *)(v13 + 4 * v9);
      uint64_t v16 = *v7;
      if (*v7 <= v9) {
        goto LABEL_15;
      }
      v12[264] = *(_DWORD *)(v14 + 4 * v9++);
      ++v12;
      if (v5 == v9) {
        goto LABEL_10;
      }
    }
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v10, v10);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v9, v15);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v9, v16);
    _os_crash();
    __break(1u);
  }
  else
  {
LABEL_10:
    atomic_store(1u, (unsigned __int8 *)(a1 + 44));
    os_unfair_lock_unlock(v4);
  }
}

IOSurfaceRef re::VideoHistogramManager::selectDummySurface(uint64_t a1, IOSurfaceRef buffer, unsigned int a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (!buffer) {
    return 0;
  }
  if (a3 >= 4)
  {
    float v30 = *re::videoLogObjects((re *)a1);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)buf = 0;
    float v31 = "Could not determine color primary index for output histogram surface.";
    float v32 = buf;
LABEL_25:
    _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, v31, v32, 2u);
    return 0;
  }
  int v5 = dword_234416F60[(char)a3];
  size_t Width = IOSurfaceGetWidth(buffer);
  size_t Height = (re::VideoDefaults *)IOSurfaceGetHeight(buffer);
  uint64_t v8 = Height;
  size_t v9 = vcvtps_u32_f32((float)Width * 0.25);
  float v10 = (float)(unint64_t)Height;
  size_t v11 = *(void *)(a1 + 16);
  if (v11 > v9 || (size_t v12 = vcvtps_u32_f32(v10 * 0.25), *(void *)(a1 + 24) > v12))
  {
    size_t v9 = vcvtps_u32_f32((float)Width * 0.5);
    if (v11 > v9 || (size_t v12 = vcvtps_u32_f32(v10 * 0.5), *(void *)(a1 + 24) > v12))
    {
      size_t v12 = (size_t)Height;
      size_t v9 = Width;
    }
  }
  uint64_t v13 = (re *)re::VideoDefaults::logEnabled(Height);
  if (v13)
  {
    float v34 = *re::videoLogObjects(v13);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = *(void *)(a1 + 16);
      uint64_t v36 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 134219264;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v12;
      *(_WORD *)&unsigned char buf[22] = 2048;
      size_t v51 = Width;
      __int16 v52 = 2048;
      double v53 = v8;
      __int16 v54 = 2048;
      uint64_t v55 = v35;
      __int16 v56 = 2048;
      uint64_t v57 = v36;
      _os_log_impl(&dword_233120000, v34, OS_LOG_TYPE_DEFAULT, "Using histogram output surface with dimensions %zu x %zu. Source: %zu x %zu, Min: %zu x %zu", buf, 0x3Eu);
    }
  }
  uint64_t ProtectionOptions = IOSurfaceGetProtectionOptions();
  uint64_t v49 = ProtectionOptions;
  *(void *)buf = v9;
  *(void *)&uint8_t buf[8] = v12;
  *(void *)&uint8_t buf[16] = ProtectionOptions;
  LODWORD(v51) = v5;
  uint64_t v15 = a1 + 32;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_14;
  }
  uint64_t v16 = ProtectionOptions;
  uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 40)
                        + 4
                        * (re::Hash<re::internal::VideoHistogramKey>::operator()((uint64_t)buf)
                         % (unint64_t)*(unsigned int *)(a1 + 56)));
  if (v17 == 0x7FFFFFFF) {
    goto LABEL_14;
  }
  uint64_t v18 = *(void *)(a1 + 48);
  while (*(void *)(v18 + 56 * v17 + 16) != v9
       || *(void *)(v18 + 56 * v17 + 24) != v12
       || *(void *)(v18 + 56 * v17 + 32) != v16
       || *(_DWORD *)(v18 + 56 * v17 + 40) != v5)
  {
    uint64_t v17 = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
    if (v17 == 0x7FFFFFFF) {
      goto LABEL_14;
    }
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(v18 + 56 * v17 + 48));
  if (!IOSurface)
  {
LABEL_14:
    CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    float v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x263EFFF88];
    CFAllocatorRef v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x263EFFF90];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    int v47 = 16;
    int valuePtr = 1024;
    CFNumberRef v23 = CFNumberCreate(v19, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0ED58], v23);
    CFRelease(v23);
    CFNumberRef v24 = CFNumberCreate(v19, kCFNumberSInt64Type, &v49);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0EF40], v24);
    CFRelease(v24);
    CFAllocatorRef v25 = CFDictionaryCreateMutable(v19, 0, v20, v21);
    CFDictionaryAddValue(v25, (const void *)*MEMORY[0x263F04130], Mutable);
    CFRelease(Mutable);
    CFNumberRef v26 = CFNumberCreate(v19, kCFNumberIntType, &v47);
    CFDictionarySetValue(v25, (const void *)*MEMORY[0x263F04198], v26);
    CFRelease(v26);
    pixelBufferOut[0] = 0;
    CVPixelBufferCreate(v19, v9, v12, 0x42475241u, v25, pixelBufferOut);
    CFRelease(v25);
    re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::addNew<__CVBuffer *&>(v15, (uint64_t)buf, pixelBufferOut);
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(pixelBufferOut[0]);
    long long v38 = 0u;
    long long v39 = 0u;
    memset(v40, 0, sizeof(v40));
    long long v43 = 0u;
    long long v44 = 0u;
    memset(v45, 0, sizeof(v45));
    __int16 v41 = 258;
    char v42 = 8;
    int v28 = (re *)re::_IOSurfaceSetBulkAttachments2();
    if (v28)
    {
      unint64_t v29 = *re::videoLogObjects(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v37[0] = 0;
        _os_log_error_impl(&dword_233120000, v29, OS_LOG_TYPE_ERROR, "Unable to set surface properties.", (uint8_t *)v37, 2u);
      }
      CVPixelBufferRelease(pixelBufferOut[0]);
      goto LABEL_21;
    }
    if (!IOSurface)
    {
LABEL_21:
      float v30 = *re::videoLogObjects(v28);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      LOWORD(pixelBufferOut[0]) = 0;
      float v31 = "Unable to select dummy surface.";
      float v32 = (uint8_t *)pixelBufferOut;
      goto LABEL_25;
    }
  }
  return IOSurface;
}

__n128 re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::addNew<__CVBuffer *&>(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = re::Hash<re::internal::VideoHistogramKey>::operator()(a2);
  unint64_t v8 = v6;
  unint64_t v9 = *(void *)a1;
  if (!*(void *)a1
    || (unint64_t v9 = v6 % *(unsigned int *)(a1 + 24),
        uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9),
        v10 == 0x7FFFFFFF))
  {
LABEL_9:
    uint64_t v12 = *(unsigned int *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 32);
      int v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
        int v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(_DWORD *)(v14 + 56 * v12 + 8);
      *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 56 * v12 + 8) = v15 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + 56 * v12 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9);
    *(void *)(*(void *)(a1 + 16) + 56 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v8;
    uint64_t v16 = *(void *)(a1 + 16) + 56 * v12;
    __n128 result = *(__n128 *)a2;
    long long v17 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v16 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_OWORD *)a2;
    *(_OWORD *)(v16 + 32) = v17;
    *(void *)(*(void *)(a1 + 16) + 56 * v12 + 48) = *a3;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v9) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    while (*(void *)(v11 + 56 * v10 + 16) != *(void *)a2
         || *(void *)(v11 + 56 * v10 + 24) != *(void *)(a2 + 8)
         || *(void *)(v11 + 56 * v10 + 32) != *(void *)(a2 + 16)
         || *(_DWORD *)(v11 + 56 * v10 + 40) != *(_DWORD *)(a2 + 24))
    {
      uint64_t v10 = *(_DWORD *)(v11 + 56 * v10 + 8) & 0x7FFFFFFF;
      if (v10 == 0x7FFFFFFF) {
        goto LABEL_9;
      }
    }
  }
  return result;
}

void re::DynamicInlineArray<unsigned int,128ul>::resize(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(void *)a1)
  {
    if (a2 >= *(void *)a1) {
      return;
    }
  }
  else
  {
    if (a2 >= 0x81)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "resize", 571);
      _os_crash();
      __break(1u);
      return;
    }
    bzero((void *)(a1 + 4 * *(void *)a1 + 12), 4 * (a2 - *(void *)a1));
  }
  *(void *)a1 = a2;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t re::Hash<re::internal::VideoHistogramKey>::operator()(uint64_t a1)
{
  unint64_t v1 = 0xBF58476D1CE4E5B9 * (*(void *)a1 ^ (*(void *)a1 >> 30));
  unint64_t v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*(void *)(a1 + 8) ^ (*(void *)(a1 + 8) >> 30));
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*(void *)(a1 + 16) ^ (*(void *)(a1 + 16) >> 30));
  unint64_t v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  unint64_t v6 = *(unsigned int *)(a1 + 24) ^ ((unint64_t)*(unsigned int *)(a1 + 24) >> 30);
  unint64_t v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  unint64_t v8 = (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
      + (v2 << 6)
      + (v2 >> 2)
      - 0x61C8864680B583E9) ^ v2;
  return ((v8 << 6)
        + (v8 >> 2)
        + (((v5 << 6) + (v5 >> 2) + (v7 ^ (v7 >> 31)) - 0x61C8864680B583E9) ^ v5)
        - 0x61C8864680B583E9) ^ v8;
}

void re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      unint64_t v6 = *(uint64_t **)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)CFNumberRef v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            unint64_t v14 = *v6;
            unint64_t v15 = *(unsigned int *)(a1 + 24);
            unint64_t v16 = *v6 % v15;
            uint64_t v17 = *(unsigned int *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              uint64_t v17 = *(unsigned int *)(a1 + 32);
              int v18 = v17;
              if (v17 == v15)
              {
                re::HashTable<re::internal::VideoHistogramKey,__CVBuffer *,re::Hash<re::internal::VideoHistogramKey>,re::EqualTo<re::internal::VideoHistogramKey>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v16 = v14 % *(unsigned int *)(a1 + 24);
                int v18 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
            }
            else
            {
              uint64_t v19 = *(void *)(a1 + 16);
              int v20 = *(_DWORD *)(v19 + 56 * v17 + 8);
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 56 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v17 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v16);
            *(void *)(*(void *)(a1 + 16) + 56 * v17) = v14;
            uint64_t v21 = *(void *)(a1 + 16) + 56 * v17;
            long long v22 = *((_OWORD *)v6 + 2);
            *(_OWORD *)(v21 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((_OWORD *)v6 + 1);
            *(_OWORD *)(v21 + 32) = v22;
            *(void *)(*(void *)(a1 + 16) + 56 * v17 + 48) = v6[6];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v17;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v6 += 7;
        }
        while (v11 < v10);
      }
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

re *re::VideoMipProcessor::deinit(re *this)
{
  unint64_t v1 = *(id **)this;
  if (*(void *)this)
  {
    unint64_t v2 = this;
    uint64_t v3 = re::globalAllocators(this)[2];

    this = (re *)(*(uint64_t (**)(uint64_t, id *))(*(void *)v3 + 40))(v3, v1);
    *(void *)unint64_t v2 = 0;
  }
  return this;
}

void re::VideoMipProcessor::init(re *a1, const re::mtl::Library *a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = re::globalAllocators(a1);
    long long v5 = (re::mtl::MipGenPolyphase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 8, 8);
    *(void *)a1 = re::mtl::MipGenPolyphase::MipGenPolyphase(v5, a2);
  }
  else
  {
    unint64_t v6 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v7 = 0;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "[VideoMipProcessor::init] Metal library is not valid.", v7, 2u);
    }
  }
}

uint64_t re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re *a1, id *a2, id *a3, id *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (!*(void *)a1)
  {
    uint64_t v13 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      unint64_t v14 = "[VideoMipProcessor::copyAndGenerateMipmapsFromTexture] Not initialized.";
      goto LABEL_16;
    }
    return 1;
  }
  if (!*a3 || (unsigned int v8 = (id **)a1, (a1 = (re *)*a4) == 0))
  {
    uint64_t v13 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      unint64_t v14 = "[VideoMipProcessor::copyAndGenerateMipmapsFromTexture] Texture not valid.";
      goto LABEL_16;
    }
    return 1;
  }
  int v12 = (re *)[(re *)a1 mipmapLevelCount];
  if ((unint64_t)v12 <= 1)
  {
    uint64_t v13 = *re::videoLogObjects(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      unint64_t v14 = "[VideoMipProcessor::copyAndGenerateMipmapsFromTexture] Destiation texture does not support mipmapping.";
LABEL_16:
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, v14, buf, 2u);
      return 1;
    }
    return 1;
  }
  unint64_t v16 = (unint64_t)objc_msgSend(*a3, sel_protectionOptions);
  unint64_t v17 = (unint64_t)objc_msgSend(*a4, sel_protectionOptions) | v16;
  int v18 = (void *)MEMORY[0x237DBDCF0]();
  re::mtl::CommandQueue::makeCommandBuffer(a2, &v22);
  if (a5)
  {
    uint64_t v20 = re::globalAllocators(v19)[2];
    uint64_t v28 = a6;
    uint64_t v29 = v20;
    *(void *)buf = &unk_26E7228D0;
    uint64_t v27 = a5;
    float v30 = buf;
    uint64_t v24 = v20;
    uint64_t v25 = 0;
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::operator=<24ul>((uint64_t)v23, (uint64_t)buf);
    re::mtl::CommandBuffer::addCompletionHandler(&v22, (uint64_t)v23);
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)v23);
    re::FunctionBase<24ul,void ()(re::mtl::CommandBuffer const&)>::destroyCallable((uint64_t)buf);
  }
  [v22 setProtectionOptions:v17];
  re::mtl::CommandBuffer::makeComputeCommandEncoder(&v22, buf);
  uint64_t v21 = @"Generate RE Video Mipmap";
  [*(id *)buf setLabel:@"Generate RE Video Mipmap"];

  [**v8 copyAndGenerateMipmapsFromTexture:*a3 toTexture:*a4 withComputeEncoder:*(void *)buf];
  [*(id *)buf endEncoding];
  [v22 commit];

  return 0;
}

void re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::~Callable()
{
}

void re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::operator()(uint64_t a1, id *a2)
{
  id v3 = *a2;
  (*(void (**)(BOOL, void))(a1 + 8))([v3 status] != 4, *(void *)(a1 + 16));
}

uint64_t re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7228D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E7228D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::VideoMipProcessor::copyAndGenerateMipmapsFromTexture(re::mtl::CommandQueue,NS::SharedPtr<MTL::Texture>,NS::SharedPtr<MTL::Texture>,void (*)(re::VideoReturn,void *),void *)::$_0,void ()(re::mtl::CommandBuffer const&)>::size()
{
  return 24;
}

__CVBuffer *re::VideoPixelBufferBase::protectionOptions(__CVBuffer **this)
{
  __n128 result = *this;
  if (result)
  {
    CVPixelBufferGetIOSurface(result);
    return (__CVBuffer *)IOSurfaceGetProtectionOptions();
  }
  return result;
}

double re::VideoPixelBufferBase::cleanRect(__CVBuffer **this)
{
  unint64_t v1 = *this;
  if (!v1) {
    return *MEMORY[0x263F001A8];
  }
  *(void *)&double result = (unint64_t)CVImageBufferGetCleanRect(v1);
  return result;
}

CGColorSpaceRef re::VideoPixelBufferBase::colorSpace(CVBufferRef *this)
{
  unint64_t v2 = *this;
  if (!v2) {
    return 0;
  }
  CFDictionaryRef v3 = (const __CFDictionary *)CVBufferCopyAttachment(v2, (CFStringRef)*MEMORY[0x263F03F88], 0);
  if (!v3)
  {
    CFDictionaryRef v6 = CVBufferCopyAttachments(*this, kCVAttachmentMode_ShouldPropagate);
    if (v6)
    {
      CFDictionaryRef v4 = v6;
      CGColorSpaceRef ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v6);
      goto LABEL_6;
    }
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CGColorSpaceRef ColorSpaceFromAttachments = (CGColorSpaceRef)MEMORY[0x237DB8D90]();
LABEL_6:
  CGColorSpaceRef v7 = ColorSpaceFromAttachments;
  CFRelease(v4);
  return v7;
}

uint64_t re::VideoPixelBufferBase::colorTags(__CVBuffer **this)
{
  unint64_t v1 = *this;
  if (v1)
  {
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v1);
    CFRetain(IOSurface);
  }
  else
  {
    IOSurfaceRef IOSurface = 0;
  }
  IOSurfaceRef v5 = IOSurface;
  uint64_t v3 = re::VideoSurfaceBase::colorTags((re::VideoSurfaceBase *)&v5);
  if (v5) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v5);
  }
  return v3;
}

__CVBuffer *re::VideoPixelBufferBase::surface@<X0>(__CVBuffer **this@<X0>, IOSurfaceRef *a2@<X8>)
{
  double result = *this;
  if (result)
  {
    IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(result);
    double result = (__CVBuffer *)CFRetain(IOSurface);
  }
  else
  {
    IOSurfaceRef IOSurface = 0;
  }
  *a2 = IOSurface;
  return result;
}

float re::VideoPixelBufferBase::horizontalDisparityAdjustment(__CVBuffer **this)
{
  unint64_t v1 = *this;
  float v2 = 0.0;
  if (v1) {
    BOOL v3 = MEMORY[0x263F03F80] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    CFNumberRef v4 = (const __CFNumber *)CVBufferCopyAttachment(v1, (CFStringRef)*MEMORY[0x263F03F80], 0);
    if (v4)
    {
      CFNumberRef v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
        float v2 = (float)valuePtr / 10000.0;
      }
      CFRelease(v5);
    }
  }
  return v2;
}

void re::VideoPixelBufferBase::setCleanRect(CVPixelBufferRef *this, double a2, double a3, double a4, double a5)
{
  CFTypeID v6 = *this;
  if (v6)
  {
    double Width = (double)CVPixelBufferGetWidth(v6);
    double v12 = a5 * 0.5 + a3 - (double)CVPixelBufferGetHeight(*this) * 0.5;
    re::VideoPixelBufferBase::setCleanAperture((re::VideoPixelBufferBase *)this, a4 * 0.5 + a2 - Width * 0.5, v12, a4, a5);
  }
}

void re::VideoPixelBufferBase::setCleanAperture(re::VideoPixelBufferBase *this, double a2, double a3, double a4, double a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*(void *)this)
  {
    long long v9 = (re *)CVImageBufferSetCleanAperture();
    if (v9)
    {
      unint64_t v10 = *re::videoLogObjects(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 134218752;
        double v12 = a4;
        __int16 v13 = 2048;
        double v14 = a5;
        __int16 v15 = 2048;
        double v16 = a2;
        __int16 v17 = 2048;
        double v18 = a3;
        _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Unable to set the pixel buffer's clean aperture to [%f, %f] at offset (%f, %f)", (uint8_t *)&v11, 0x2Au);
      }
    }
  }
}

void re::VideoPixelBufferBase::setHorizontalDisparityAdjustment(CVBufferRef *this, float a2)
{
  float valuePtr = a2;
  float v2 = (CFStringRef *)MEMORY[0x263F03F80];
  if (*this) {
    BOOL v3 = MEMORY[0x263F03F80] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberFloatType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CVBufferSetAttachment(*this, *v2, v5, kCVAttachmentMode_ShouldPropagate);
      CFRelease(v6);
    }
  }
}

void re::VideoPixelBufferPool::~VideoPixelBufferPool(const void **this)
{
  if (this[2]) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(this + 2);
  }
  this[2] = 0;
}

void re::VideoPixelBufferPool::deinit(re::VideoPixelBufferPool *this)
{
  float v2 = (const void *)*((void *)this + 1);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 1) = 0;
  }
  *(void *)this = 0;
  if (*((void *)this + 2)) {
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)this + 2);
  }
  *((void *)this + 2) = 0;
  *((_WORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 514;
  *((unsigned char *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 2;
}

BOOL re::VideoPixelBufferPool::initInternal(re::VideoPixelBufferPool *this, int a2, int a3, uint64_t a4, re::CoreVideoUtils *a5, int a6, unsigned __int8 a7, int a8, unsigned int a9, unsigned int a10, BOOL a11, unint64_t a12)
{
  int v43 = a3;
  int v44 = a2;
  __int16 v13 = (CVPixelBufferPoolRef *)((char *)this + 8);
  uint64_t v12 = *((void *)this + 1);
  if (!v12)
  {
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFNumberRef v20 = CFNumberCreate(v18, kCFNumberIntType, &a9);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0ED58], v20);
    CFRelease(v20);
    uint64_t v21 = (CGColorSpaceRef *)((char *)this + 16);
    if (*((void *)this + 2)) {
      re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)this + 2);
    }
    BOOL v22 = a11;
    CGColorSpaceRef *v21 = 0;
    CFStringRef v23 = (const __CFString *)re::CoreVideoUtils::colorSpaceNameFromColorTags(a5, a6, a7, a8);
    if (v23)
    {
      CGColorSpaceRef v24 = CGColorSpaceCreateWithName(v23);
      if (v24)
      {
        uint64_t v25 = v24;
        if (*v21) {
          re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)this + 2);
        }
        CGColorSpaceRef *v21 = v25;
        CFRetain(v25);
        CFRelease(v25);
      }
      if (*v21)
      {
        CFPropertyListRef v26 = CGColorSpaceCopyPropertyList(*v21);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0EDA0], v26);
        CFRelease(v26);
      }
    }
    if (v22)
    {
      int valuePtr = 2;
      CFNumberRef v27 = CFNumberCreate(v18, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0EEB0], v27);
      CFRelease(v27);
    }
    CFNumberRef v28 = CFNumberCreate(v18, kCFNumberSInt64Type, &a12);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F0EF40], v28);
    CFRelease(v28);
    uint64_t v29 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionaryAddValue(v29, (const void *)*MEMORY[0x263F04130], Mutable);
    CFRelease(Mutable);
    if (v22) {
      LODWORD(a4) = re::CoreVideoUtils::compressedPixelFormat(a4);
    }
    int v41 = a4;
    CFNumberRef v30 = CFNumberCreate(v18, kCFNumberIntType, &v41);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04180], v30);
    CFRelease(v30);
    CFNumberRef v31 = CFNumberCreate(v18, kCFNumberIntType, &v44);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04240], v31);
    CFRelease(v31);
    CFNumberRef v32 = CFNumberCreate(v18, kCFNumberIntType, &v43);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04118], v32);
    CFRelease(v32);
    CFNumberRef v33 = CFNumberCreate(v18, kCFNumberIntType, &a10);
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x263F04198], v33);
    CFRelease(v33);
    CVPixelBufferPoolCreate(v18, 0, v29, v13);
    CFRelease(v29);
    if ((a5 & 0xFFFFFFFD) == 0)
    {
      *((unsigned char *)this + 24) = 1;
      uint64_t v35 = *re::videoLogObjects(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v35, OS_LOG_TYPE_DEFAULT, "Unknown colorPrimaries. Init VideoPixelBufferPool with Fallback Rec 709", buf, 2u);
      }
    }
    *((unsigned char *)this + 24) = (_BYTE)a5;
    *((unsigned char *)this + 25) = a6;
    *((unsigned char *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a7;
    int v36 = v43;
    *(_DWORD *)this = v44;
    *((_DWORD *)this + 1) = v36;
  }
  return v12 == 0;
}

void re::VideoPixelBufferPool::createPixelBuffer(re::VideoPixelBufferPool *this@<X0>, void *a2@<X8>)
{
  BOOL v3 = (__CVPixelBufferPool *)*((void *)this + 1);
  if (!v3)
  {
    CFNumberRef v5 = *re::videoLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(pixelBufferOut[0]) = 0;
      CFNumberRef v6 = "VideoPixelBufferPool is not initialized.";
      CGColorSpaceRef v7 = (uint8_t *)pixelBufferOut;
      goto LABEL_11;
    }
LABEL_18:
    *a2 = 0;
    return;
  }
  pixelBufferOut[0] = 0;
  if (CVPixelBufferPoolCreatePixelBuffer(0, v3, pixelBufferOut)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = pixelBufferOut[0] == 0;
  }
  if (v4)
  {
    CFNumberRef v5 = *re::videoLogObjects(pixelBufferOut[0]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      CFNumberRef v6 = "Unable to create pixel buffer.";
      CGColorSpaceRef v7 = buf;
LABEL_11:
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  if (!CVPixelBufferGetIOSurface(pixelBufferOut[0]))
  {
    long long v9 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      unint64_t v10 = "Unable to get surface from pixel buffer.";
      goto LABEL_21;
    }
LABEL_17:
    CVPixelBufferRelease(pixelBufferOut[0]);
    goto LABEL_18;
  }
  unsigned int v8 = (re *)re::_IOSurfaceSetBulkAttachments2();
  if (v8)
  {
    long long v9 = *re::videoLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      unint64_t v10 = "Unable to set surface properties.";
LABEL_21:
      _os_log_error_impl(&dword_233120000, v9, OS_LOG_TYPE_ERROR, v10, buf, 2u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  int v11 = pixelBufferOut[0];
  *a2 = pixelBufferOut[0];
  CVPixelBufferRetain(v11);
  CVPixelBufferRelease(pixelBufferOut[0]);
}

void re::VideoProcessor::~VideoProcessor(pthread_t **this)
{
  re::VideoProcessor::deinit(this);
  float v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v2);
  }
}

pthread_t **re::VideoProcessor::deinit(pthread_t **this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*this)
  {
    unint64_t v1 = this;
    atomic_store(0, (unsigned __int8 *)*this + 8);
    FigSemaphoreSignal();
    pthread_join(**v1, 0);
    *__CVBuffer *v1 = 0;
    FigSemaphoreDestroy();
    v15[0] = 0;
    v18[0] = 0;
    v21[0] = 0;
    v22[0] = 0;
    v23[0] = 0;
    char v24 = 0;
    CFNumberRef v27 = 0;
    CFNumberRef v28 = 0;
    uint64_t v26 = 0;
    if (v2)
    {
      do
      {
        if (v28)
        {
          BOOL v3 = std::__shared_weak_count::lock(v28);
          if (v3)
          {
            if (v27) {
              atomic_store(7u, v27);
            }
            std::__shared_weak_count::__release_shared[abi:nn180100](v3);
          }
        }
        if (v18[0] && v19) {
          v19(7, v20);
        }
        if (v15[0] && v16) {
          v16(7, v17);
        }
      }
      while ((v2 & 1) != 0);
    }
    BOOL v4 = *v1;
    if (*v1)
    {
      if (!*((unsigned char *)v4 + 128)
        || (uint64_t v2 = (uint64_t)v4[8]) == 0
        || (v2 = [(id)v2 dispatchAvailableCompletionNotifications], (BOOL v4 = *v1) != 0))
      {
        uint64_t v5 = re::globalAllocators((re *)v2)[2];
        CFNumberRef v6 = (std::__shared_weak_count *)v4[15];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v6);
        }
        CGColorSpaceRef v7 = (std::__shared_weak_count *)v4[13];
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v7);
        }
        unsigned int v8 = (std::__shared_weak_count *)v4[11];
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v8);
        }

        if (v4[6] && v4[7])
        {
          while (1)
          {
            long long v9 = CMSimpleQueueDequeue((CMSimpleQueueRef)v4[7]);
            if (!v9) {
              break;
            }
            {
              re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "success", "clear", 182);
              _os_crash();
              __break(1u);
              break;
            }
          }
          pthread_t v11 = v4[7];
          if (v11)
          {
            CFRelease(v11);
            v4[7] = 0;
          }
        }
        pthread_t v12 = v4[7];
        if (v12)
        {
          CFRelease(v12);
          v4[7] = 0;
        }
        uint64_t v2 = (*(uint64_t (**)(uint64_t, pthread_t *))(*(void *)v5 + 40))(v5, v4);
      }
    }
    __CVBuffer *v1 = 0;
    __int16 v13 = *re::videoLogObjects((re *)v2);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v13, OS_LOG_TYPE_DEFAULT, "De-initialized RE Video Processor thread.", buf, 2u);
    }
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    if (v26)
    {

      uint64_t v26 = 0;
    }
    if (v24)
    {
      objc_destroyWeak(&v25);
      id v25 = 0;
    }
    re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v23);
    re::Optional<re::VideoMipGenConfig>::~Optional(v22);
    re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v21);
    return (pthread_t **)re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)v18);
  }
  return this;
}

void re::VideoProcessor::init(re *a1, id *a2, id *a3)
{
  if (*(void *)a1) {
    return;
  }
  CFNumberRef v6 = re::globalAllocators(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 136, 8);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v7 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *(void *)(v7 + 128) = 0;
  *(unsigned char *)(v7 + 8) = 1;
  *(void *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 113) = 0u;
  *(void *)a1 = v7;
  atomic_store(1u, (unsigned __int8 *)(v7 + 8));
  unsigned int v8 = (_anonymous_namespace_ *)FigSemaphoreCreate();
  uint64_t v9 = *(void *)a1;
  *(void *)(*(void *)a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v8;
  *(void *)(v9 + 32) = v10;
  if (!v10)
  {
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 112);
    _os_crash();
    __break(1u);
    goto LABEL_32;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CMSimpleQueueCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 8, (CMSimpleQueueRef *)(v9 + 48));
  if (!*(void *)(v9 + 48))
  {
LABEL_32:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "m_simpleQueueRef", "init", 115);
    _os_crash();
    __break(1u);
LABEL_33:
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "m_simpleQueueRef", "init", 59);
    _os_crash();
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v14 = 0;
  BOOL v15 = 1;
  do
  {
    while (!v15)
    {
      BOOL v15 = 0;
      if (++v14 == 8) {
        goto LABEL_9;
      }
    }
    int v16 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v9 + 48), (const void *)(*(void *)(v9 + 32) + 336 * v14));
    BOOL v15 = v16 == 0;
    ++v14;
  }
  while (v14 != 8);
  while (v16)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Unable to construct pool queue.", "enqueueSuccess", "init", 121);
    int v16 = _os_crash();
    __break(1u);
  }
  *(void *)(v9 + 40) = 8;
  OSStatus v17 = CMSimpleQueueCreate(v12, 8, (CMSimpleQueueRef *)(v9 + 56));
  if (!*(void *)(v9 + 56)) {
    goto LABEL_33;
  }
  if (v17)
  {
LABEL_34:
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "result == noErr", "init", 60);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v19 = operator new(0x28uLL);
  v19[1] = 0;
  v19[2] = 0;
  void *v19 = &unk_26E722928;
  v19[4] = 0;
  v19[3] = 0;
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(std::__shared_weak_count **)(*(void *)a1 + 88);
  *(void *)(v20 + 80) = v19 + 3;
  *(void *)(v20 + 88) = v19;
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v21);
  }
  re::VideoSurfaceAccelerator::init(*(re::VideoSurfaceAccelerator **)(*(void *)a1 + 80));
  BOOL v22 = operator new(0x20uLL);
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = 0;
  *BOOL v22 = &unk_26E722978;
  uint64_t v23 = *(void *)a1;
  char v24 = *(std::__shared_weak_count **)(*(void *)a1 + 104);
  *(void *)(v23 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v22 + 3;
  *(void *)(v23 + 104) = v22;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v24);
  }
  id v25 = *(re **)(*(void *)a1 + 96);
  id v39 = *a3;
  re::VideoMipProcessor::init(v25, (const re::mtl::Library *)&v39);

  id v26 = objc_msgSend(objc_msgSend(MEMORY[0x263F12818], sel_alloc), sel_init);
  if (re::mtl::commandQueueSupportsDisableAsyncCompletionDispatch((re::mtl *)objc_msgSend(v26, sel_setCommitSynchronously_, 1)))
  {
    char v27 = 1;
    objc_msgSend(v26, sel_setDisableAsyncCompletionDispatch_, 1);
  }
  else
  {
    char v27 = 0;
  }
  *(unsigned char *)(*(void *)a1 + 128) = v27;
  re::mtl::Device::makeCommandQueue(a2, (uint64_t)v26, &v38);
  CFNumberRef v28 = (sched_param *)(*(void *)a1 + 64);
  if (v28 != &v38)
  {
    sched_param v29 = v38;
    sched_param v38 = 0;
    CFNumberRef v30 = (void *)*v28;
    *CFNumberRef v28 = v29;
  }
  [*(id *)(*(void *)a1 + 64) setGPUPriority:4];
  id v31 = objc_msgSend(objc_msgSend(MEMORY[0x263F12818], sel_alloc), sel_init);
  objc_msgSend(v31, sel_setCommitSynchronously_, 1);
  re::mtl::Device::makeCommandQueue(a2, (uint64_t)v31, &v38);
  CFNumberRef v32 = (sched_param *)(*(void *)a1 + 72);
  if (v32 != &v38)
  {
    sched_param v33 = v38;
    sched_param v38 = 0;
    float v34 = (void *)*v32;
    *CFNumberRef v32 = v33;
  }
  [*(id *)(*(void *)a1 + 72) setGPUPriority:4];
  sched_param v38 = (sched_param)48;
  pthread_create(*(pthread_t **)a1, 0, (void *(__cdecl *)(void *))re::VideoProcessor::threadFunction, *(void **)a1);
  uint64_t v35 = (re *)pthread_setschedparam(**(pthread_t **)a1, 4, &v38);
  int v36 = *re::videoLogObjects(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233120000, v36, OS_LOG_TYPE_DEFAULT, "Initialized RE Video Processor thread.", buf, 2u);
  }
  if (v31) {

  }
  if (v26) {
}
  }

uint64_t re::VideoProcessor::threadFunction(re::VideoProcessor *this, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  BOOL v3 = (re *)pthread_setname_np("RE Video Processor");
  BOOL v4 = *re::videoLogObjects(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "RE Video Processor thread started.", buf, 2u);
  }
  if (this && *((void *)this + 2))
  {
    CFNumberRef v28 = (void *)MEMORY[0x237DBDCF0]();
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 8);
    if (v6)
    {
      uint64_t v7 = &v34;
      unsigned int v8 = &v35;
      uint64_t v9 = &v36;
      uint64_t v10 = &v37;
      uint64_t v11 = (unsigned __int8 *)&v38;
      CFAllocatorRef v12 = (char *)this + 24;
      do
      {
        context = (void *)MEMORY[0x237DBDCF0]();
        buf[0] = 0;
        char v34 = 0;
        char v35 = 0;
        char v36 = 0;
        char v37 = 0;
        char v38 = 0;
        uint64_t v41 = 0;
        char v42 = 0;
        uint64_t v40 = 0;
        {
          uint64_t v30 = v40;
          if (v40)
          {
            uint64_t v13 = v10;
            uint64_t v14 = v9;
            BOOL v15 = v8;
            int v16 = v7;
            OSStatus v17 = v12;
            uint64_t v18 = v11;
            uint64_t v19 = (void *)(v40 + 8);
            id v20 = (id)(v40 + 8);
            re::VideoProcessor::process((std::__shared_weak_count *)this, (uint64_t)buf, (uint64_t)&v41, &v30, 0);
            uint64_t v21 = v19;
            uint64_t v11 = v18;
            CFAllocatorRef v12 = v17;
            uint64_t v7 = v16;
            unsigned int v8 = v15;
            uint64_t v9 = v14;
            uint64_t v10 = v13;

            uint64_t v30 = 0;
          }
          else
          {
            re::VideoProcessor::process((std::__shared_weak_count *)this, (uint64_t)buf, (uint64_t)&v41, &v30, 0);
          }
        }
        BOOL v22 = v42;
        uint64_t v41 = 0;
        char v42 = 0;
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
        if (v40)
        {

          uint64_t v40 = 0;
        }
        LOBYTE(v31) = 0;
        re::Optional<re::VideoTransformSurfaceConfig>::operator=((uint64_t)v8, (unsigned __int8 *)&v31);
        re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)&v31);
        if (buf[0]) {
          buf[0] = 0;
        }
        LOBYTE(v31) = 0;
        re::Optional<re::VideoHDRConfig>::operator=((uint64_t)v7, (unsigned __int8 *)&v31);
        re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)&v31);
        LOBYTE(v31) = 0;
        re::Optional<re::VideoMipGenConfig>::operator=(v9, (unsigned __int8 *)&v31);
        re::Optional<re::VideoMipGenConfig>::~Optional(&v31);
        LOBYTE(v31) = 0;
        re::Optional<re::VideoPSEConfig>::operator=((uint64_t)v10, (unsigned __int8 *)&v31);
        re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)&v31);
        LOBYTE(v31) = 0;
        re::Optional<re::VideoHistogramConfig>::operator=(v11, &v31);
        if ((_BYTE)v31) {
          objc_destroyWeak(&v32);
        }
        if (v42) {
          std::__shared_weak_count::__release_weak(v42);
        }
        if (v40)
        {

          uint64_t v40 = 0;
        }
        if (v38)
        {
          objc_destroyWeak(&v39);
          id v39 = 0;
        }
        re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v10);
        re::Optional<re::VideoMipGenConfig>::~Optional(v9);
        re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v8);
        re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)v7);
        FigSemaphoreWaitRelative();
        unsigned __int8 v23 = atomic_load((unsigned __int8 *)this + 8);
      }
      while ((v23 & 1) != 0);
    }
    id v25 = *re::videoLogObjects(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "RE Video Processor thread ended.", buf, 2u);
    }
  }
  else
  {
    id v26 = *re::videoLogObjects((re *)v5);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "Video Processor thread does not have a valid context.", buf, 2u);
    }
  }
  return 0;
}

uint64_t re::FixedSpscQueue<anonymous namespace'::VideoProcessorAsyncPayload>::pop(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (char *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 32));
  unint64_t v5 = (unint64_t)v4;
  if (!v4) {
    return v5 != 0;
  }
  if (*(unsigned char *)a2) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = *v4 == 0;
  }
  if (!v6)
  {
    if (!*(unsigned char *)a2 || *v4)
    {
      if (!*(unsigned char *)a2 && *v4) {
        *(unsigned char *)a2 = 1;
      }
      long long v7 = *(_OWORD *)(v4 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(v4 + 8);
      *(_OWORD *)(a2 + 24) = v7;
    }
    else
    {
      *(unsigned char *)a2 = 0;
    }
  }
  re::Optional<re::VideoHDRConfig>::operator=((unsigned __int8 *)(a2 + 48), (unsigned __int8 *)v4 + 48);
  re::Optional<re::VideoTransformSurfaceConfig>::operator=((unsigned __int8 *)(a2 + 144), (CFTypeRef *)(v5 + 144));
  re::Optional<re::VideoMipGenConfig>::operator=((unsigned char *)(a2 + 176), (unsigned __int8 *)(v5 + 176));
  re::Optional<re::VideoPSEConfig>::operator=(a2 + 232, (unsigned __int8 *)(v5 + 232));
  re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=((unsigned __int8 *)(a2 + 288), (id *)(v5 + 288));
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a2 + 304), *(void *)(v5 + 304));
  uint64_t v9 = *(void *)(v5 + 312);
  uint64_t v8 = *(void *)(v5 + 320);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 320);
  *(void *)(a2 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v9;
  *(void *)(a2 + 320) = v8;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
    return v5 != 0;
  re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) ", "success", "pop", 161);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::VideoProcessor::process(std::__shared_weak_count *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  v110[1] = *MEMORY[0x263EF8340];
  shared_owners = (void *)a1[3].__shared_owners_;
  if (!shared_owners || !*shared_owners) {
    return 2;
  }
  uint64_t v8 = a3;
  uint64_t v10 = &a1->__vftable;
  if (*(unsigned char *)(a2 + 144)) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = *(unsigned char *)(a2 + 48) == 0;
  }
  if (!v11 || *(unsigned char *)a2 != 0)
  {
    uint64_t v13 = (*(uint64_t (**)(void))(qword_26AF9FB08[0] + 32))();
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    location = (id *)(v13 + 48);
    objc_initWeak((id *)(v13 + 48), 0);
    *(void *)(v13 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v15 = v10[10];
    uint64_t v14 = v10[11];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
    }
    int v16 = a5;
    OSStatus v17 = *(std::__shared_weak_count **)(v13 + 8);
    *(void *)uint64_t v13 = v15;
    *(void *)(v13 + 8) = v14;
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
    uint64_t v85 = a4;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v13 + 56), *a4);
    long long buffer = 0uLL;
    long long v93 = 0uLL;
    uint64_t v18 = [MEMORY[0x263EFF9A0] dictionary];
    uint64_t v19 = [MEMORY[0x263EFF980] array];
    uint64_t v20 = MEMORY[0x263EFFA88];
    uint64_t v86 = v19;
    uint64_t v87 = v18;
    if (*(unsigned char *)(a2 + 48))
    {
      uint64_t v21 = v19;
      BOOL v22 = malloc_type_malloc(0x28uLL, 0x10000407607B2BCuLL);
      *(_DWORD *)BOOL v22 = 3;
      v22[1] = CFDataGetBytePtr(*(CFDataRef *)(a2 + 88));
      *((_DWORD *)v22 + 4) = CFDataGetLength(*(CFDataRef *)(a2 + 88));
      *(void *)((char *)v22 + 28) = 0;
      *(void *)((char *)v22 + 20) = 0;
      unsigned __int8 v23 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytesNoCopy:length:freeWhenDone:", v22, 40, 1, location);
      [(re *)v21 addObject:v23];
      uint64_t v109 = *MEMORY[0x263F4B228];
      v110[0] = v20;
      uint64_t v24 = v20;
      id v25 = [NSDictionary dictionaryWithObjects:v110 forKeys:&v109 count:1];
      [v18 addEntriesFromDictionary:v25];

      re::VideoObject<re::VideoColorTransformBase>::setRef((int)&buffer + 8, (const void **)&buffer + 1, *(CFTypeRef *)(a2 + 64));
      re::VideoObject<re::VideoColorTransformBase>::setRef((int)&buffer, (const void **)&buffer, *(CFTypeRef *)(a2 + 72));
      long long v26 = *(_OWORD *)(a2 + 112);
      long long v93 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(v13 + 32) = v26;
      BOOL v27 = *(unsigned char *)(a2 + 128) != 0;
    }
    else
    {
      uint64_t v24 = MEMORY[0x263EFFA88];
      BOOL v27 = 0;
    }
    a5 = v16;
    if (*(unsigned char *)(a2 + 144))
    {
      if (buffer != 0)
      {
        uint64_t v30 = *re::videoLogObjects(v19);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "[VideoProcessor::process] More than one configuration is specified.", buf, 2u);
        }
      }
      re::VideoObject<re::VideoColorTransformBase>::setRef((int)&buffer + 8, (const void **)&buffer + 1, *(CFTypeRef *)(a2 + 152));
      re::VideoObject<re::VideoColorTransformBase>::setRef((int)&buffer, (const void **)&buffer, *(CFTypeRef *)(a2 + 160));
      if (*(unsigned char *)(a2 + 168))
      {
        uint64_t v107 = *MEMORY[0x263F4B260];
        uint64_t v108 = v24;
        id v31 = [NSDictionary dictionaryWithObjects:&v108 forKeys:&v107 count:1];
        [v87 addEntriesFromDictionary:v31];
      }
    }
    if (*(unsigned char *)a2)
    {
      if (*(void *)(a2 + 8) && *(void *)(a2 + 16))
      {
        id v32 = malloc_type_malloc(0x28uLL, 0x10000407607B2BCuLL);
        *(_DWORD *)id v32 = 4;
        v32[1] = CFDataGetBytePtr(*(CFDataRef *)(a2 + 8));
        *((_DWORD *)v32 + 4) = CFDataGetLength(*(CFDataRef *)(a2 + 8));
        *((_DWORD *)v32 + 5) = 1;
        _OWORD v32[3] = *(void *)(a2 + 16);
        *((_DWORD *)v32 + 8) = 380;
        sched_param v33 = [MEMORY[0x263EFF8F8] dataWithBytesNoCopy:v32 length:40 freeWhenDone:1];
        uint64_t v34 = *MEMORY[0x263F4B258];
        v105[0] = *MEMORY[0x263F4B218];
        v105[1] = v34;
        v106[0] = v24;
        v106[1] = v24;
        v105[2] = *MEMORY[0x263F4B208];
        v106[2] = v24;
        char v35 = [NSDictionary dictionaryWithObjects:v106 forKeys:v105 count:3];
        [v87 addEntriesFromDictionary:v35];

        [(re *)v86 addObject:v33];
        *(_OWORD *)(v13 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_OWORD *)(a2 + 24);
      }
      else
      {
        char v36 = *re::videoLogObjects(v19);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_233120000, v36, OS_LOG_TYPE_ERROR, "ASE configuration specifies invalid surfaces.", buf, 2u);
        }
      }
    }
    char v37 = (re *)buffer;
    if (*(unsigned char *)(a2 + 288))
    {
      char v29 = 0;
      if (*((void *)&buffer + 1))
      {
        char v38 = v86;
        if ((void)buffer)
        {
          WeakRetained = objc_loadWeakRetained((id *)(a2 + 296));
          char v37 = (re *)buffer;
          if (WeakRetained)
          {
            int v104 = 0;
            long long v102 = 0u;
            long long v103 = 0u;
            memset(buf, 0, sizeof(buf));
            if ((void)buffer && (re::_IOSurfaceGetBulkAttachments(buffer, (uint64_t)buf), !v37))
            {
              WeakRetained[4] = buf[59];
              WeakRetained[5] = buf[60];
              WeakRetained[6] = buf[58];
              *((unsigned char *)WeakRetained + 29) = v27;
            }
            else
            {
              uint64_t v40 = *re::videoLogObjects(v37);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)uint64_t v92 = 0;
                _os_log_error_impl(&dword_233120000, v40, OS_LOG_TYPE_ERROR, "Unable to determine color properties for HDR histogram data.", v92, 2u);
              }
              *((void *)WeakRetained + 2) = 0x200000002;
              WeakRetained[6] = 2;
              *((unsigned char *)WeakRetained + 29) = 0;
            }
            PixelFormat = (re::CoreVideoUtils *)buffer;
            if ((void)buffer)
            {
              PixelFormat = (re::CoreVideoUtils *)IOSurfaceGetPixelFormat((IOSurfaceRef)buffer);
              char v42 = (__IOSurface *)buffer;
            }
            else
            {
              char v42 = 0;
            }
            *((unsigned char *)WeakRetained + 28) = re::CoreVideoUtils::isFullRange(PixelFormat);
            v99[0] = *MEMORY[0x263F4B250];
            uint64_t v43 = NSNumber;
            if (v42) {
              size_t Width = IOSurfaceGetWidth(v42);
            }
            else {
              size_t Width = 0;
            }
            CVMetalTextureRef v45 = objc_msgSend(v43, "numberWithUnsignedLong:", Width, location);
            v100[0] = v45;
            v99[1] = *MEMORY[0x263F4B238];
            int v46 = NSNumber;
            if ((void)buffer) {
              size_t Height = IOSurfaceGetHeight((IOSurfaceRef)buffer);
            }
            else {
              size_t Height = 0;
            }
            a5 = v16;
            double v48 = [v46 numberWithUnsignedLong:Height];
            v99[2] = *MEMORY[0x263F4B230];
            v100[1] = v48;
            v100[2] = &unk_26E749DA0;
            uint64_t v49 = [NSDictionary dictionaryWithObjects:v100 forKeys:v99 count:3];
            [v87 addEntriesFromDictionary:v49];

            re::ArcWeakPtr<re::ecs2::Entity>::operator=(location, (id *)(a2 + 296));
            char v37 = (re *)buffer;
          }
          goto LABEL_53;
        }
      }
      else
      {
        char v38 = v86;
      }
LABEL_63:

      if ((void)buffer) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&buffer);
      }
      uint64_t v8 = a3;
      a4 = v85;
      if (*((void *)&buffer + 1)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&buffer + 1);
      }
      goto LABEL_67;
    }
    char v38 = v86;
LABEL_53:
    char v29 = 0;
    if (*((void *)&buffer + 1) && v37)
    {
      if ([(re *)v38 count])
      {
        uint64_t v97 = *MEMORY[0x263F4B200];
        double v98 = v38;
        double v50 = [NSDictionary dictionaryWithObjects:&v98 forKeys:&v97 count:1];
        [v87 addEntriesFromDictionary:v50];
      }
      uint64_t v95 = *MEMORY[0x263F4B268];
      uint64_t v96 = MEMORY[0x263EFFA80];
      char v29 = 1;
      size_t v51 = objc_msgSend(NSDictionary, "dictionaryWithObjects:forKeys:count:", &v96, &v95, 1, location);
      [v87 addEntriesFromDictionary:v51];

      *(void *)buf = v87;
      CFRetain(v87);
      __int16 v52 = (void *)v10[10];
      if (v52)
      {
        if (*v52) {
          char v29 = re::VideoSurfaceAccelerator::transformSurface();
        }
        else {
          char v29 = 1;
        }
      }
      if (*(void *)buf) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)buf);
      }
    }
    goto LABEL_63;
  }
  char v29 = 0;
LABEL_67:
  if (*(unsigned char *)(a2 + 232) && (v29 & 1) == 0)
  {
    a1 = *(std::__shared_weak_count **)(a2 + 248);
    if (a1 && (a1 = std::__shared_weak_count::lock(a1)) != 0)
    {
      double v53 = a1;
      __int16 v54 = *(re ***)(a2 + 240);
      if (v54)
      {
        if (*v54) {
          char v29 = re::VideoPSEProcessor::Processor::process(*v54, (__IOSurface **)(a2 + 264), (uint64_t *)(a2 + 272), *(double *)(a2 + 256), *(float *)(a2 + 280), *(float *)(a2 + 284)) != 0;
        }
        else {
          char v29 = 1;
        }
      }
      else
      {
        char v29 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v53);
    }
    else
    {
      char v29 = 0;
    }
  }
  int v55 = 8;
  if (*(unsigned char *)(a2 + 176) && (v29 & 1) == 0)
  {
    *(void *)buf = 0;
    __int16 v56 = (unsigned int **)(*(uint64_t (**)(void))(qword_26AF9FBF8[0] + 32))();
    NSObject *v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v56 + 2, *a4);
    if (a5)
    {
      uint64_t v57 = (id *)(v10 + 9);
    }
    else
    {
      float v59 = *(unsigned int **)v8;
      uint64_t v58 = *(void *)(v8 + 8);
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 16), 1uLL, memory_order_relaxed);
      }
      char v60 = (std::__shared_weak_count *)v56[1];
      NSObject *v56 = v59;
      v56[1] = (unsigned int *)v58;
      if (v60) {
        std::__shared_weak_count::__release_weak(v60);
      }
      uint64_t v57 = (id *)(v10 + 8);
    }
    re::ObjCObject::operator=((id *)buf, v57);
    if (*(void *)(a2 + 192) || *(void *)(a2 + 184) || *(void *)(a2 + 200))
    {
      unint64_t v61 = 0;
      char v29 = 0;
      do
      {
        uint64_t v62 = a2 + 8 * v61;
        id v63 = *(id *)(v62 + 184);
        id v64 = *(id *)(v62 + 208);
        float v65 = (re *)v10[12];
        id v91 = *(id *)buf;
        id v90 = v63;
        id v89 = v64;
        if (v89)
        {

          id v89 = 0;
        }
        if (v90)
        {

          id v90 = 0;
        }

        if (v64) {
        if (v63)
        }

        v29 |= v66 != 0;
        ++v61;
        uint64_t v67 = *(void *)(a2 + 184);
        BOOL v11 = v67 == 0;
        unint64_t v68 = v67 != 0;
        if (v11) {
          uint64_t v69 = 1;
        }
        else {
          uint64_t v69 = 2;
        }
        if (*(void *)(a2 + 192)) {
          unint64_t v68 = v69;
        }
        if (*(void *)(a2 + 200)) {
          ++v68;
        }
      }
      while (v61 < v68);
    }
    else
    {
      char v29 = 0;
    }

    int v55 = 5;
    uint64_t v8 = a3;
  }
  if (v29) {
    unsigned int v70 = 1;
  }
  else {
    unsigned int v70 = v55;
  }
  uint64_t v71 = *(std::__shared_weak_count **)(v8 + 8);
  if (v71)
  {
    uint64_t v71 = std::__shared_weak_count::lock(v71);
    if (v71)
    {
      if (*(void *)v8) {
        atomic_store(v70, *(unsigned int **)v8);
      }
      std::__shared_weak_count::__release_shared[abi:nn180100](v71);
    }
  }
  uint64_t result = re::VideoDefaults::logEnabled((re::VideoDefaults *)v71);
  if (result)
  {
    int v72 = a5;
    unint64_t v73 = *re::videoLogObjects((re *)result);
    BOOL v74 = os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v74)
    {
      uint64_t v75 = "✘";
      if (v72) {
        unint64_t v76 = "✔";
      }
      else {
        unint64_t v76 = "✘";
      }
      if (*(unsigned char *)(a2 + 48)) {
        uint64_t v77 = "✔";
      }
      else {
        uint64_t v77 = "✘";
      }
      if (*(unsigned char *)(a2 + 144)) {
        uint64_t v78 = "✔";
      }
      else {
        uint64_t v78 = "✘";
      }
      int v79 = *(unsigned __int8 *)(a2 + 232);
      if (*(unsigned char *)a2) {
        unint64_t v80 = "✔";
      }
      else {
        unint64_t v80 = "✘";
      }
      int v81 = *(unsigned __int8 *)(a2 + 176);
      if (*(unsigned char *)(a2 + 288)) {
        uint64_t v82 = "✔";
      }
      else {
        uint64_t v82 = "✘";
      }
      *(_DWORD *)buf = 67110914;
      if (v79) {
        unint64_t v83 = "✔";
      }
      else {
        unint64_t v83 = "✘";
      }
      *(_DWORD *)&uint8_t buf[4] = v70;
      *(_WORD *)&uint8_t buf[8] = 2080;
      if (v81) {
        uint64_t v75 = "✔";
      }
      *(void *)&buf[10] = v76;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v77;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&buf[30] = v78;
      *(_WORD *)&buf[38] = 2080;
      *(void *)&buf[40] = v80;
      *(_WORD *)&uint8_t buf[48] = 2080;
      *(void *)&buf[50] = v82;
      *(_WORD *)&buf[58] = 2080;
      *(void *)&buf[60] = v83;
      *(_WORD *)&buf[68] = 2080;
      *(void *)&buf[70] = v75;
      _os_log_impl(&dword_233120000, v73, OS_LOG_TYPE_DEFAULT, "[VideoProcessor] status: %d, synchronous: %s, hdr: %s, transform: %s, ase: %s, histogram: %s, pse: %s, mipgen: %s", buf, 0x4Eu);
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::videoSurfaceAcceleratorCompletionContextAllocator(_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_511, memory_order_acquire) & 1) == 0)
  {
    unint64_t v1 = (_anonymous_namespace_ *)__cxa_guard_acquire(&_MergedGlobals_511);
    if (v1)
    {
      __cxa_guard_release(&_MergedGlobals_511);
    }
  }
}

uint64_t anonymous namespace'::videoSurfaceAcceleratorCompletionCallback(uint64_t result, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = result;
    BOOL v4 = *(void (**)(uint64_t, void))(a2 + 16);
    if (v4) {
      v4(result, *(void *)(a2 + 24));
    }
    unint64_t v5 = *(void (**)(uint64_t, void))(a2 + 32);
    if (v5) {
      v5(v3, *(void *)(a2 + 40));
    }
    if (!v3)
    {
      uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
      if (v8)
      {
        uint64_t v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          uint64_t v10 = v9;
          BOOL v11 = *(re::VideoSurfaceAccelerator **)a2;
          if (*(void *)a2)
          {
            WeakRetained = (char *)objc_loadWeakRetained((id *)(a2 + 48));
            if (WeakRetained)
            {
              uint64_t v13 = WeakRetained;
              uint64_t v14 = (re *)re::VideoSurfaceAccelerator::histogram(v11, (re::VideoHistogram *)(WeakRetained - 8));
              if (v14)
              {
                uint64_t v15 = *re::videoLogObjects(v14);
                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                {
                  v16[0] = 67109120;
                  v16[1] = 0;
                  _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "Cannot get histogram: %x", (uint8_t *)v16, 8u);
                }
              }
            }
          }
          std::__shared_weak_count::__release_shared[abi:nn180100](v10);
        }
      }
    }
    uint64_t v6 = *(void *)(a2 + 56);
    if (v6)
    {

      *(void *)(a2 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    }
    objc_destroyWeak((id *)(a2 + 48));
    *(void *)(a2 + 48) = 0;
    long long v7 = *(std::__shared_weak_count **)(a2 + 8);
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
    return (*(uint64_t (**)(void))(qword_26AF9FB08[0] + 40))();
  }
  return result;
}

uint64_t anonymous namespace'::videoMetalCompletionCallback(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    int v3 = result;
    BOOL v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4)
    {
      unint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        if (*(void *)a2)
        {
          if (v3) {
            unsigned int v6 = 1;
          }
          else {
            unsigned int v6 = 8;
          }
          atomic_store(v6, *(unsigned int **)a2);
        }
        std::__shared_weak_count::__release_shared[abi:nn180100](v5);
      }
    }
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {

      *(void *)(a2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    }
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    uint64_t v9 = *(uint64_t (**)(void))(qword_26AF9FBF8[0] + 40);
    return v9();
  }
  return result;
}

void anonymous namespace'::videoMetalCompletionContextAllocator(_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FB00, memory_order_acquire) & 1) == 0)
  {
    unint64_t v1 = (_anonymous_namespace_ *)__cxa_guard_acquire(&qword_26AF9FB00);
    if (v1)
    {
      __cxa_guard_release(&qword_26AF9FB00);
    }
  }
}

void re::VideoProcessor::async(atomic_ullong *volatile *this@<X0>, const re::VideoProcessorConfig *a2@<X1>, void *a3@<X8>)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  unsigned int v6 = (char *)operator new(0x20uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unsigned int v6 = &unk_26E7229C8;
  *((_DWORD *)v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -1;
  uint64_t v7 = (unsigned int *)(v6 + 24);
  *a3 = v6 + 24;
  a3[1] = v6;
  if (*this)
  {
    uint64_t v8 = (std::__shared_weak_count *)v6;
    re::VideoAutoCounter::increment(this + 1, &v35);
    buf[0] = 0;
    v39[0] = 0;
    v45[0] = 0;
    v49[0] = 0;
    v50[0] = 0;
    v57[0] = 0;
    char v60 = 0;
    unint64_t v61 = 0;
    float v59 = 0;
    if (*(unsigned char *)a2)
    {
      buf[0] = 1;
      long long v37 = *(_OWORD *)((char *)a2 + 8);
      long long v38 = *(_OWORD *)((char *)a2 + 24);
    }
    re::Optional<re::VideoHDRConfig>::operator=(v39, (unsigned __int8 *)a2 + 48);
    re::Optional<re::VideoTransformSurfaceConfig>::operator=((unsigned __int8 *)v45, (CFTypeRef *)a2 + 18);
    re::Optional<re::VideoMipGenConfig>::operator=(v49, (unsigned __int8 *)a2 + 176);
    re::Optional<re::VideoPSEConfig>::operator=((uint64_t)v50, (unsigned __int8 *)a2 + 232);
    re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=((unsigned __int8 *)v57, (id *)a2 + 36);
    uint64_t v9 = v59;
    float v59 = v35;
    char v60 = v7;
    char v35 = v9;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v61;
    unint64_t v61 = v8;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    atomic_store(5u, v7);
    atomic_ullong *volatile v11 = *this;
    CFAllocatorRef v12 = (char *)CMSimpleQueueDequeue(*((CMSimpleQueueRef *)*this + 6));
    if (v12)
    {
      uint64_t v13 = v12;
      int v14 = buf[0];
      char *v12 = buf[0];
      if (v14)
      {
        long long v15 = v37;
        *(_OWORD *)(v12 + 24) = v38;
        *(_OWORD *)(v12 + 8) = v15;
      }
      int v16 = v39[0];
      v12[48] = v39[0];
      if (v16)
      {
        *((void *)v12 + 8) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v12 + 64, (const void **)v12 + 8, cf);
        *((void *)v13 + 9) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v13 + 72, (const void **)v13 + 9, v41);
        *((void *)v13 + 10) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v13 + 80, (const void **)v13 + 10, v42);
        long long v17 = v43;
        long long v18 = v44[0];
        *(_OWORD *)(v13 + 113) = *(_OWORD *)((char *)v44 + 9);
        *(_OWORD *)(v13 + 104) = v18;
        *(_OWORD *)(v13 + 88) = v17;
      }
      int v19 = v45[0];
      v13[144] = v45[0];
      if (v19)
      {
        *((void *)v13 + 19) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v13 + 152, (const void **)v13 + 19, v46);
        *((void *)v13 + 20) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v13 + 160, (const void **)v13 + 20, v47);
        v13[168] = v48;
      }
      int v20 = v49[0];
      v13[176] = v49[0];
      if (v20)
      {
        for (uint64_t i = 0; i != 24; i += 8)
          *(void *)&v13[i + 184] = *(id *)&v49[i + 8];
        for (uint64_t j = 0; j != 24; j += 8)
          *(void *)&v13[j + 208] = *(id *)&v49[j + 32];
      }
      int v23 = v50[0];
      v13[232] = v50[0];
      if (v23)
      {
        *((void *)v13 + 30) = v51;
        uint64_t v24 = v52;
        *((void *)v13 + 31) = v52;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 16), 1uLL, memory_order_relaxed);
        }
        *((void *)v13 + 32) = v53;
        *((void *)v13 + 33) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v13 + 264, (const void **)v13 + 33, v54);
        *((void *)v13 + 34) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v13 + 272, (const void **)v13 + 34, v55);
        *((void *)v13 + 35) = v56;
      }
      int v25 = v57[0];
      v13[288] = v57[0];
      if (v25)
      {
        *((void *)v13 + 37) = 0;
        objc_copyWeak((id *)v13 + 37, &v58);
      }
      long long v26 = v59;
      *((void *)v13 + 38) = v59;
      if (v26) {
        BOOL v27 = (char *)v26 + 8;
      }
      *((void *)v13 + 39) = v60;
      CFNumberRef v28 = v61;
      *((void *)v13 + 40) = v61;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (CMSimpleQueueEnqueue((CMSimpleQueueRef)v11[7], v13))
      {
        re::internal::assertLog((re::internal *)4, v29, "assertion failure: '%s' (%s:line %i) ", "success", "emplace", 121);
        _os_crash();
        __break(1u);
      }
      FigSemaphoreSignal();
    }
    else
    {
      id v31 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v34 = 0;
        _os_log_error_impl(&dword_233120000, v31, OS_LOG_TYPE_ERROR, "Unable to enqueue VideoProcessor config.", v34, 2u);
      }
      if (*((unsigned char *)a2 + 48))
      {
        id v32 = (void (*)(uint64_t, void))*((void *)a2 + 14);
        if (v32) {
          v32(7, *((void *)a2 + 15));
        }
      }
      if (*(unsigned char *)a2)
      {
        sched_param v33 = (void (*)(uint64_t, void))*((void *)a2 + 3);
        if (v33) {
          v33(7, *((void *)a2 + 4));
        }
      }
      atomic_store(7u, v7);
    }
    if (v61) {
      std::__shared_weak_count::__release_weak(v61);
    }
    if (v59)
    {

      float v59 = 0;
    }
    if (v57[0])
    {
      objc_destroyWeak(&v58);
      id v58 = 0;
    }
    re::Optional<re::VideoPSEConfig>::~Optional((uint64_t)v50);
    re::Optional<re::VideoMipGenConfig>::~Optional(v49);
    re::Optional<re::VideoTransformSurfaceConfig>::~Optional((uint64_t)v45);
    re::Optional<re::VideoHDRConfig>::~Optional((uint64_t)v39);
    if (v9) {
  }
    }
  else
  {
    uint64_t v30 = *re::videoLogObjects((re *)v6);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v30, OS_LOG_TYPE_ERROR, "VideoProcessor is not initialized.", buf, 2u);
    }
    atomic_store(1u, v7);
  }
}

void re::VideoProcessor::sync(atomic_ullong *volatile *this@<X0>, const re::VideoProcessorConfig *a2@<X1>, void *a3@<X8>)
{
  unsigned int v6 = (char *)operator new(0x20uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unsigned int v6 = &unk_26E7229C8;
  *((_DWORD *)v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -1;
  uint64_t v7 = (unsigned int *)(v6 + 24);
  *a3 = v6 + 24;
  a3[1] = v6;
  if (*this)
  {
    uint64_t v8 = (std::__shared_weak_count *)v6;
    re::VideoAutoCounter::increment(this + 1, &v17);
    atomic_ullong *volatile v9 = *this;
    *(void *)buf = v7;
    int v16 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v17;
    int v14 = v17;
    if (v17)
    {
      atomic_ullong *volatile v11 = (char *)v17 + 8;
      int v12 = re::VideoProcessor::process((std::__shared_weak_count *)v9, (uint64_t)a2, (uint64_t)buf, (uint64_t *)&v14, 1);

      int v14 = 0;
    }
    else
    {
      int v12 = re::VideoProcessor::process((std::__shared_weak_count *)v9, (uint64_t)a2, (uint64_t)buf, (uint64_t *)&v14, 1);
    }
    std::__shared_weak_count::__release_weak(v8);
    if (!v12) {
      atomic_store(8u, v7);
    }
    if (v10) {
  }
    }
  else
  {
    uint64_t v13 = *re::videoLogObjects((re *)v6);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "VideoProcessor is not initialized.", buf, 2u);
    }
    atomic_store(1u, v7);
  }
}

void re::VideoProcessor::dispatch(re::VideoProcessor *this@<X0>, const re::VideoProcessorConfig *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if (re::VideoDefaults::autoSynchronousProcessingAllowed(this))
  {
    uint64_t v8 = re::VideoDefaults::overrideProcessorSynchronousWorkThreshold((re::VideoDefaults *)5);
    if (!a3 || (uint64_t)re::VideoAutoCounter::count((unint64_t **)this + 1) >= v8)
    {
LABEL_4:
      re::VideoProcessor::async((atomic_ullong *volatile *)this, a2, a4);
      return;
    }
  }
  else if (!a3)
  {
    goto LABEL_4;
  }
  re::VideoProcessor::sync((atomic_ullong *volatile *)this, a2, a4);
}

unsigned __int8 *re::Optional<re::VideoHDRConfig>::operator=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    if (*a1) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      uint64_t v10 = (const void **)(a1 + 32);
      if (*((void *)a1 + 4)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(v10);
      }
      uint64_t v11 = *((void *)a1 + 3);
      *((void *)a1 + 4) = 0;
      if (v11) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)a1 + 3);
      }
      *((void *)a1 + 3) = 0;
      if (*((void *)a1 + 2)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)a1 + 2);
      }
      *((void *)a1 + 2) = 0;
      *a1 = 0;
    }
    else
    {
      int v8 = a1 + 16;
      if (v3) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v4 == 0;
      }
      if (v9)
      {
        re::VideoObject<re::VideoColorTransformBase>::setRef(v8, (const void **)a1 + 2, *((CFTypeRef *)a2 + 2));
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 24, (const void **)a1 + 3, *((CFTypeRef *)a2 + 3));
      }
      else
      {
        *a1 = 1;
        *((void *)a1 + 2) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v8, (const void **)a1 + 2, *((CFTypeRef *)a2 + 2));
        *((void *)a1 + 3) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 24, (const void **)a1 + 3, *((CFTypeRef *)a2 + 3));
        *((void *)a1 + 4) = 0;
      }
      re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 32, (const void **)a1 + 4, *((CFTypeRef *)a2 + 4));
      long long v12 = *(_OWORD *)(a2 + 40);
      long long v13 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *(_OWORD *)(a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v13;
      *(_OWORD *)(a1 + 40) = v12;
    }
  }
  return a1;
}

unsigned __int8 *re::Optional<re::VideoTransformSurfaceConfig>::operator=(unsigned __int8 *a1, CFTypeRef *a2)
{
  int v3 = *a1;
  int v4 = *(unsigned __int8 *)a2;
  if (*a1) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5)
  {
    if (*a1) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      uint64_t v10 = a1 + 16;
      uint64_t v11 = a1 + 8;
      if (*((void *)a1 + 2)) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)a1 + 2);
      }
      void *v10 = 0;
      if (*v11) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)a1 + 1);
      }
      *((void *)a1 + 1) = 0;
      *a1 = 0;
    }
    else
    {
      int v8 = a1 + 8;
      if (v3) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v4 == 0;
      }
      if (v9)
      {
        re::VideoObject<re::VideoColorTransformBase>::setRef(v8, (const void **)a1 + 1, a2[1]);
      }
      else
      {
        *a1 = 1;
        *((void *)a1 + 1) = 0;
        re::VideoObject<re::VideoColorTransformBase>::setRef(v8, (const void **)a1 + 1, a2[1]);
        *((void *)a1 + 2) = 0;
      }
      re::VideoObject<re::VideoColorTransformBase>::setRef(a1 + 16, (const void **)a1 + 2, a2[2]);
      a1[24] = *((unsigned char *)a2 + 24);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<re::VideoSurfaceAccelerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E722928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::VideoSurfaceAccelerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E722928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

void std::__shared_ptr_emplace<re::VideoSurfaceAccelerator>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<re::VideoMipProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E722978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::VideoMipProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E722978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

re *std::__shared_ptr_emplace<re::VideoMipProcessor>::__on_zero_shared(uint64_t a1)
{
  return re::VideoMipProcessor::deinit((re *)(a1 + 24));
}

BOOL re::FixedSpscPool<anonymous namespace'::VideoProcessorAsyncPayload>::release(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 > a2
    || v2 + 336 * *(void *)(a1 + 16) - 336 < a2
    || __ROR8__(0xCF3CF3CF3CF3CF3DLL * (a2 - v2), 4) > 0xC30C30C30C30C3uLL)
  {
    return 0;
  }
  BOOL v5 = *(std::__shared_weak_count **)(a2 + 320);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void *)(a2 + 304);
  if (v6)
  {

    *(void *)(a2 + 304) = 0;
  }
  if (*(unsigned char *)(a2 + 288))
  {
    objc_destroyWeak((id *)(a2 + 296));
    *(void *)(a2 + 29re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  re::Optional<re::VideoPSEConfig>::~Optional(a2 + 232);
  re::Optional<re::VideoMipGenConfig>::~Optional((unsigned char *)(a2 + 176));
  re::Optional<re::VideoTransformSurfaceConfig>::~Optional(a2 + 144);
  re::Optional<re::VideoHDRConfig>::~Optional(a2 + 48);
  return CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 24), (const void *)a2) == 0;
}

void re::FixedSpscPool<anonymous namespace'::VideoProcessorAsyncPayload>::deinit(void *a1)
{
  unint64_t v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  if (a1[1])
  {
    (*(void (**)(void))(*(void *)*a1 + 40))();
    a1[1] = 0;
  }
  *a1 = 0;
  a1[2] = 0;
}

void std::__shared_ptr_emplace<std::atomic<re::VideoReturn>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E7229C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::atomic<re::VideoReturn>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E7229C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237DBCBD0);
}

re::VideoPixelBufferPool *re::VideoPixelBufferAllocator::selectPool(re::VideoPixelBufferAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10, BOOL a11, unint64_t a12)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  *(void *)&long long v43 = __PAIR64__(a3, a2);
  DWORD2(v43) = a4;
  BYTE12(v43) = a5;
  BYTE13(v43) = a6;
  BYTE14(v43) = a7;
  HIBYTE(v43) = a8;
  unsigned int v44 = a9;
  unsigned int v45 = a10;
  unint64_t v47 = a12;
  BOOL v46 = a11;
  unint64_t v15 = re::Hash<re::VideoPixelBufferPoolConfiguration>::operator()((uint64_t)&v43);
  if (!*(void *)this) {
    goto LABEL_6;
  }
  uint64_t v16 = *(unsigned int *)(*((void *)this + 1) + 4 * (v15 % *((unsigned int *)this + 6)));
  if (v16 == 0x7FFFFFFF) {
    goto LABEL_6;
  }
  uint64_t v17 = *((void *)this + 2);
  while (1)
  {
    long long v18 = (uint64_t *)re::VideoPixelBufferPoolConfiguration::operator==(v17 + 96 * v16 + 16, (uint64_t)&v43);
    uint64_t v17 = *((void *)this + 2);
    if (v18) {
      break;
    }
    uint64_t v16 = *(_DWORD *)(v17 + 96 * v16 + 8) & 0x7FFFFFFF;
    if (v16 == 0x7FFFFFFF) {
      goto LABEL_6;
    }
  }
  int v19 = *(re::VideoPixelBufferPool **)(v17 + 96 * v16 + 56);
  if (!v19)
  {
LABEL_6:
    int v37 = a8;
    re::makeDefaultUniquePtr<re::VideoPixelBufferPool>((uint64_t *)v50);
    int v19 = *(re::VideoPixelBufferPool **)v50;
    re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addNew((uint64_t)this, &v43, (uint64_t *)v50);
    int v20 = [MEMORY[0x263F089D8] stringWithString:@"Creating pixel buffer pool for new configuration"];
    uint64_t v21 = (re *)re::VideoDefaults::logEnabled(v20);
    if (v21)
    {
      [(re::VideoDefaults *)v20 appendFormat:@"\n                Width: %d", a2];
      [(re::VideoDefaults *)v20 appendFormat:@"\n               Height: %d", a3];
      [(re::VideoDefaults *)v20 appendFormat:@"\n         Pixel Format: %s (%d)", "(undefined)", a4];
      [(re::VideoDefaults *)v20 appendFormat:@"\n      Color Primaries: %s (%d)", "(undefined)", a5];
      [(re::VideoDefaults *)v20 appendFormat:@"\n    Transfer Function: %s (%d)", "(undefined)", a6];
      [(re::VideoDefaults *)v20 appendFormat:@"\n         YCbCr Matrix: %s (%d)", "(undefined)", a7];
      if (v37) {
        sched_param v33 = "Yes";
      }
      else {
        sched_param v33 = "No";
      }
      [(re::VideoDefaults *)v20 appendFormat:@"\n             Extended: %s", v33];
      [(re::VideoDefaults *)v20 appendFormat:@"\n           Cache Mode: %d", a9];
      [(re::VideoDefaults *)v20 appendFormat:@"\n            Alignment: %d", a10];
      if (a11) {
        uint64_t v34 = "Yes";
      }
      else {
        uint64_t v34 = "No";
      }
      [(re::VideoDefaults *)v20 appendFormat:@"\n           Compressed: %s", v34];
      uint64_t v21 = (re *)[(re::VideoDefaults *)v20 appendFormat:@"\n   Protection Options: %llu", a12];
    }
    BOOL v22 = *re::videoLogObjects(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = v20;
      uint64_t v24 = v22;
      uint64_t v25 = [(re::VideoDefaults *)v23 cStringUsingEncoding:1];
      *(_DWORD *)buf = 136315138;
      uint64_t v49 = v25;
      _os_log_impl(&dword_233120000, v24, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    re::VideoPixelBufferPool::initInternal(v19, a2, a3, a4, (re::CoreVideoUtils *)a5, a6, a7, v37, a9, a10, a11, a12);

    long long v18 = std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v50);
    if (!v19)
    {
      long long v26 = *re::videoLogObjects((re *)v18);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)double v50 = 0;
        _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "Unable to select video pixel buffer pool", v50, 2u);
      }
      return 0;
    }
  }
  CFNumberRef v28 = (re::VideoPixelBufferPool *)*((void *)this + 6);
  if (v28 != v19)
  {
    if (v28)
    {
      char v35 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v18);
      if (v35)
      {
        char v36 = *re::videoLogObjects(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)double v50 = 0;
          _os_log_impl(&dword_233120000, v36, OS_LOG_TYPE_DEFAULT, "Flushing last used pixel buffer pool", v50, 2u);
        }
      }
      long long v18 = *(uint64_t **)(*((void *)this + 6) + 8);
      if (v18) {
        CVPixelBufferPoolFlush((CVPixelBufferPoolRef)v18, 1uLL);
      }
    }
    *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v19;
  }
  uint64_t v29 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v18);
  if (v29)
  {
    uint64_t v30 = *re::videoLogObjects(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      id v31 = "s";
      int v32 = *((_DWORD *)this + 7);
      if (v32 == 1) {
        id v31 = "";
      }
      *(_DWORD *)double v50 = 67109378;
      *(_DWORD *)&v50[4] = v32;
      __int16 v51 = 2080;
      uint64_t v52 = v31;
      _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "Pixel buffer allocator has %u configuration%s", v50, 0x12u);
    }
  }
  return v19;
}

void re::VideoPixelBufferAllocator::createPixelBuffer(re::VideoPixelBufferAllocator *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, unsigned int a7@<W6>, int a8@<W7>, void *a9@<X8>, unsigned int a10, unsigned int a11, BOOL a12, unint64_t a13)
{
  *a9 = 0;
  int v14 = re::VideoPixelBufferAllocator::selectPool(this, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13);
  if (v14)
  {
    re::VideoPixelBufferPool::createPixelBuffer(v14, a9);
  }
}

void *re::makeDefaultUniquePtr<re::VideoPixelBufferPool>(uint64_t *a1)
{
  v5[4] = *MEMORY[0x263EF8340];
  unint64_t v2 = re::globalAllocators((re *)a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 32, 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)uint64_t v3 = 0;
  *(_WORD *)(v3 + 24) = 514;
  *(unsigned char *)(v3 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 2;
  v5[0] = &unk_26E722A18;
  v5[3] = v5;
  a1[4] = (uint64_t)(a1 + 1);
  *a1 = v3;
  a1[1] = (uint64_t)&unk_26E722A18;
  return std::__function::__value_func<void ()(re::VideoPixelBufferPool *)>::~__value_func[abi:nn180100](v5);
}

uint64_t re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addNew(uint64_t a1, long long *a2, uint64_t *a3)
{
  unint64_t v6 = re::Hash<re::VideoPixelBufferPoolConfiguration>::operator()((uint64_t)a2);
  unint64_t v7 = v6;
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    uint64_t result = re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t result = re::VideoPixelBufferPoolConfiguration::operator==(v10 + 96 * v9 + 16, (uint64_t)a2);
    if (result) {
      return result;
    }
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = *(_DWORD *)(v10 + 96 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
}

unint64_t re::Hash<re::VideoPixelBufferPoolConfiguration>::operator()(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 4);
  unsigned int v3 = 73244475 * (*(_DWORD *)a1 ^ HIWORD(*(_DWORD *)a1));
  unint64_t v4 = (73244475 * (v3 ^ HIWORD(v3))) ^ ((73244475 * (v3 ^ HIWORD(v3))) >> 16);
  unsigned int v5 = 73244475 * ((73244475 * (v2 ^ HIWORD(v2))) ^ ((73244475 * (v2 ^ HIWORD(v2))) >> 16));
  uint64_t v6 = v5 ^ HIWORD(v5);
  unsigned int v7 = 73244475 * (*(_DWORD *)(a1 + 8) ^ HIWORD(*(_DWORD *)(a1 + 8)));
  unint64_t v8 = (73244475 * (v7 ^ HIWORD(v7))) ^ ((73244475 * (v7 ^ HIWORD(v7))) >> 16);
  unsigned int v9 = 73244475
     * ((73244475 * *(unsigned __int8 *)(a1 + 12)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 12)) >> 16));
  unsigned int v10 = 73244475
      * ((73244475 * *(unsigned __int8 *)(a1 + 13)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 13)) >> 16));
  unsigned int v11 = 73244475
      * ((73244475 * *(unsigned __int8 *)(a1 + 14)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 14)) >> 16));
  unint64_t v12 = (((unint64_t)(v9 ^ HIWORD(v9)) << 6)
       + ((unint64_t)(v9 ^ HIWORD(v9)) >> 2)
       - 0x61C8864680B583E9
       + (((v11 ^ HIWORD(v11))
         + ((unint64_t)(v10 ^ HIWORD(v10)) << 6)
         + ((unint64_t)(v10 ^ HIWORD(v10)) >> 2)
         - 0x61C8864680B583E9) ^ v10 ^ HIWORD(v10))) ^ v9 ^ HIWORD(v9);
  unsigned int v13 = 73244475
      * ((73244475 * *(unsigned __int8 *)(a1 + 15)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 15)) >> 16));
  unint64_t v14 = v13 ^ HIWORD(v13);
  unsigned int v15 = 73244475 * (*(_DWORD *)(a1 + 16) ^ HIWORD(*(_DWORD *)(a1 + 16)));
  unint64_t v16 = re::hashCombine(v4, v6, v8, v12, v14, (73244475 * (v15 ^ HIWORD(v15))) ^ ((73244475 * (v15 ^ HIWORD(v15))) >> 16));
  unsigned int v17 = 73244475 * (*(_DWORD *)(a1 + 20) ^ HIWORD(*(_DWORD *)(a1 + 20)));
  unint64_t v18 = (73244475 * (v17 ^ HIWORD(v17))) ^ ((73244475 * (v17 ^ HIWORD(v17))) >> 16);
  unsigned int v19 = 73244475
      * ((73244475 * *(unsigned __int8 *)(a1 + 24)) ^ ((73244475 * *(unsigned __int8 *)(a1 + 24)) >> 16));
  unint64_t v20 = 0xBF58476D1CE4E5B9 * (*(void *)(a1 + 32) ^ (*(void *)(a1 + 32) >> 30));
  return ((v16 << 6)
        + (v16 >> 2)
        + ((((unint64_t)v18 << 6)
          + (v18 >> 2)
          - 0x61C8864680B583E9
          + ((((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31))
            + ((unint64_t)(v19 ^ HIWORD(v19)) << 6)
            + ((unint64_t)(v19 ^ HIWORD(v19)) >> 2)
            - 0x61C8864680B583E9) ^ v19 ^ HIWORD(v19))) ^ v18)
        - 0x61C8864680B583E9) ^ v16;
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26E722A18;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE7__cloneEPNS0_6__baseISJ_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26E722A18;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EEclEOSF_(re *result, const void ***a2)
{
  unsigned int v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = re::globalAllocators(result)[2];
    re::VideoPixelBufferPool::~VideoPixelBufferPool(v2);
    unint64_t v4 = *(uint64_t (**)(uint64_t, const void **))(*(void *)v3 + 40);
    return (re *)v4(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_20VideoPixelBufferPoolEJEEENS_10unique_ptrIT_NS_8functionIFvPS6_EEEEEDpOT0_EUlPS4_E_NS_9allocatorISG_EEFvSF_EE11target_typeEv()
{
}

uint64_t re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, long long *a4, uint64_t *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(void *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v35, v13, v12);
          long long v15 = *(_OWORD *)v35;
          *(_OWORD *)char v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v35[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v35[16] = v17;
          *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v16;
          long long v19 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 24) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 56;
            do
            {
              if ((*(_DWORD *)(v22 - 48) & 0x80000000) != 0) {
                re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::addAsMove(a1, *(void *)(v22 - 56) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 56), v22 - 40, v22);
              }
              ++v21;
              v22 += 96;
            }
            while (v21 < v20);
          }
          re::HashTable<re::VideoPixelBufferPoolConfiguration,std::unique_ptr<re::VideoPixelBufferPool,std::function<void ()(re::VideoPixelBufferPool*)>>,re::Hash<re::VideoPixelBufferPoolConfiguration>,re::EqualTo<re::VideoPixelBufferPoolConfiguration>,true,false>::deinit((uint64_t *)v35);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 96 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 96 * v9 + 8) = v24 | 0x80000000;
  uint64_t v26 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 96 * v9) = a3;
  uint64_t v27 = *(void *)(a1 + 16) + 96 * v9;
  long long v28 = *a4;
  long long v29 = a4[1];
  *(void *)(v27 + 48) = *((void *)a4 + 4);
  *(_OWORD *)(v27 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v28;
  *(_OWORD *)(v27 + 32) = v29;
  uint64_t v30 = *(void *)(a1 + 16) + 96 * v9;
  uint64_t v31 = *a5;
  *a5 = 0;
  *(void *)(v30 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v31;
  uint64_t v32 = v30 + 56;
  sched_param v33 = (uint64_t *)a5[4];
  if (v33)
  {
    if (v33 == a5 + 1)
    {
      *(void *)(v32 + 32) = v32 + 8;
      (*(void (**)(uint64_t))(*(void *)a5[4] + 24))(a5[4]);
    }
    else
    {
      *(void *)(v32 + 32) = v33;
      a5[4] = 0;
    }
  }
  else
  {
    *(void *)(v32 + 32) = 0;
  }
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void *re::ecs2::introspect_VideoViewingMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      int v10 = re::introspectionAllocator(v9);
      int v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)int v11 = 1;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = "Unknown";
      re::ecs2::introspect_VideoViewingMode(BOOL)::enumAttributes = (uint64_t)v11;
      signed int v12 = re::introspectionAllocator(v11);
      uint64_t v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *((void *)v13 + 1) = 1;
      *((void *)v13 + 2) = "Mono";
      qword_2687A20C0 = (uint64_t)v13;
      BOOL v14 = re::introspectionAllocator(v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = 2;
      *(void *)(v15 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = "Stereo";
      qword_2687A20C8 = v15;
    }
  }
  {
    uint64_t v16 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_VideoViewingMode(BOOL)::info, "VideoViewingMode", 1, 1, 1, 1);
    *(void *)uint64_t v16 = &unk_26E715E00;
    *((void *)v16 + 8) = &re::ecs2::introspect_VideoViewingMode(BOOL)::enumTable;
    *((_DWORD *)v16 + 4) = 9;
  }
  if (v2)
  {
    if (re::ecs2::introspect_VideoViewingMode(BOOL)::isInitialized) {
      return &re::ecs2::introspect_VideoViewingMode(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    char v3 = re::ecs2::introspect_VideoViewingMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if (v3) {
      return &re::ecs2::introspect_VideoViewingMode(BOOL)::info;
    }
    unsigned int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::ecs2::introspect_VideoViewingMode(BOOL)::isInitialized)
    {
LABEL_9:
      unsigned int v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::ecs2::introspect_VideoViewingMode(BOOL)::info;
    }
  }
  re::ecs2::introspect_VideoViewingMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_VideoViewingMode(BOOL)::info, a2);
  v17[0] = 0x2CA0FB237FD9860ALL;
  v17[1] = (uint64_t)"VideoViewingMode";
  xmmword_2687A20F8 = v18;
  re::StringID::destroyString((re::StringID *)v17);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::ecs2::introspect_VideoViewingMode(BOOL)::info;
}

void *re::ecs2::allocInfo_HDRDumpInfo(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_512, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_512))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF9FD20, "HDRDumpInfo");
    __cxa_guard_release(&_MergedGlobals_512);
  }
  return &unk_26AF9FD20;
}

void re::ecs2::initInfo_HDRDumpInfo(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v26[0] = 0x1B0999D8E2C7B70;
  v26[1] = "HDRDumpInfo";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF9FCF0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF9FCF0);
    if (v4)
    {
      unsigned int v5 = re::introspectionAllocator(v4);
      unsigned int v7 = re::introspect_BOOL((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "enableDumping";
      *(void *)(v8 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF9FCF8 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      int v11 = re::introspect_double((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "startTime";
      *(void *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF9FD00 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_double((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "frequency";
      *(void *)(v16 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF9FD08 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      long long v19 = re::IntrospectionInfo<re::DynamicString>::get(1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "outputDir";
      *(void *)(v20 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x2000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF9FD10 = v20;
      unint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_double((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "curTime";
      *(void *)(v24 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x1800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF9FD18 = v24;
      __cxa_guard_release(&qword_26AF9FCF0);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((void *)this + 8) = &qword_26AF9FCF8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::HDRDumpInfo>;
  *((void *)this + 11) = 0;
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::HDRDumpInfo>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HDRDumpInfo>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HDRDumpInfo>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

void *re::internal::defaultConstruct<re::ecs2::HDRDumpInfo>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  char v3 = (void *)(a3 + 32);
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::ecs2::HDRDumpInfo>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicString::deinit((re::DynamicString *)(a3 + 32));
}

void *re::internal::defaultConstructV2<re::ecs2::HDRDumpInfo>(_OWORD *a1)
{
  a1[2] = 0u;
  a1[3] = 0u;
  unint64_t v1 = a1 + 2;
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::ecs2::HDRDumpInfo>(uint64_t a1)
{
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 32));
}

uint64_t re::ecs2::introspect_HDRDumpInfo(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HDRDumpInfo", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HDRDumpInfo, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HDRDumpInfo, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HDRDumpInfo>, this);
}

void re::VideoPixelFormatDescriptionManager::~VideoPixelFormatDescriptionManager(re::VideoPixelFormatDescriptionManager *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (int *)(*((void *)this + 2) + 8);
    while (1)
    {
      int v5 = *v4;
      v4 += 6;
      if (v5 < 0) {
        break;
      }
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v2 != v3)
  {
    uint64_t v6 = v3;
    do
    {
      CFRelease(*(CFTypeRef *)(*((void *)this + 2) + 24 * v6 + 16));
      if (*((_DWORD *)this + 8) <= (v3 + 1)) {
        int v7 = v3 + 1;
      }
      else {
        int v7 = *((_DWORD *)this + 8);
      }
      int v8 = v3;
      while (1)
      {
        uint64_t v6 = (v8 + 1);
        if (v7 - 1 == v8) {
          break;
        }
        ++v8;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((void *)this + 2) + 24 * v6 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v3) = v7;
LABEL_17:
      ;
    }
    while (v2 != v3);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this);
}

uint64_t re::VideoPixelFormatDescriptionManager::descriptionForPixelFormat(uint64_t a1, OSType pixelFormat, const void **this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (!*(void *)a1) {
    goto LABEL_3;
  }
  unint64_t v6 = 0xBF58476D1CE4E5B9 * (pixelFormat ^ ((unint64_t)pixelFormat >> 30));
  uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v7 == 0x7FFFFFFF) {
    goto LABEL_3;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v18 + 24 * v7 + 12) != pixelFormat)
  {
    while (1)
    {
      LODWORD(v7) = *(_DWORD *)(v18 + 24 * v7 + 8) & 0x7FFFFFFF;
      if (v7 == 0x7FFFFFFF) {
        break;
      }
      if (*(_DWORD *)(v18 + 24 * v7 + 12) == pixelFormat) {
        goto LABEL_14;
      }
    }
LABEL_3:
    if (pixelFormat)
    {
      CFDictionaryRef v8 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x263EFFB08], pixelFormat);
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        unint64_t v10 = 0xBF58476D1CE4E5B9 * (pixelFormat ^ ((unint64_t)pixelFormat >> 30));
        unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
        unint64_t v12 = *(void *)a1;
        if (*(void *)a1)
        {
          unint64_t v12 = v11 % *(unsigned int *)(a1 + 24);
          uint64_t v13 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v12);
          if (v13 != 0x7FFFFFFF)
          {
            uint64_t v25 = *(void *)(a1 + 16);
            if (*(_DWORD *)(v25 + 24 * v13 + 12) == pixelFormat)
            {
LABEL_25:
              int v20 = (int)this;
              unint64_t v21 = this;
              CFDictionaryRef v19 = v9;
              goto LABEL_26;
            }
            while (1)
            {
              LODWORD(v13) = *(_DWORD *)(v25 + 24 * v13 + 8) & 0x7FFFFFFF;
              if (v13 == 0x7FFFFFFF) {
                break;
              }
              if (*(_DWORD *)(v25 + 24 * v13 + 12) == pixelFormat) {
                goto LABEL_25;
              }
            }
          }
        }
        uint64_t v14 = *(unsigned int *)(a1 + 36);
        if (v14 == 0x7FFFFFFF)
        {
          uint64_t v14 = *(unsigned int *)(a1 + 32);
          int v15 = v14;
          if (v14 == *(_DWORD *)(a1 + 24))
          {
            re::HashTable<re::FrameProfilerStatisticsOptions,re::FrameStats *,re::Hash<re::FrameProfilerStatisticsOptions>,re::EqualTo<re::FrameProfilerStatisticsOptions>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            LODWORD(vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v11 % *(unsigned int *)(a1 + 24);
            int v15 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v15 + 1;
          uint64_t v16 = *(void *)(a1 + 16);
          int v17 = *(_DWORD *)(v16 + 24 * v14 + 8);
        }
        else
        {
          uint64_t v16 = *(void *)(a1 + 16);
          int v17 = *(_DWORD *)(v16 + 24 * v14 + 8);
          *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v17 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v16 + 24 * v14 + 8) = v17 | 0x80000000;
        *(_DWORD *)(*(void *)(a1 + 16) + 24 * v14 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v12);
        *(void *)(*(void *)(a1 + 16) + 24 * v14) = v11;
        *(_DWORD *)(*(void *)(a1 + 16) + 24 * v14 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = pixelFormat;
        *(void *)(*(void *)(a1 + 16) + 24 * v14 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9;
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v14;
        ++*(_DWORD *)(a1 + 28);
        ++*(_DWORD *)(a1 + 40);
        goto LABEL_25;
      }
      uint64_t v23 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        v26[0] = 67109888;
        v26[1] = HIBYTE(pixelFormat);
        __int16 v27 = 1024;
        int v28 = BYTE2(pixelFormat);
        __int16 v29 = 1024;
        int v30 = BYTE1(pixelFormat);
        __int16 v31 = 1024;
        int v32 = pixelFormat;
        _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, "Unable to create pixel format description for (%c%c%c%c)", (uint8_t *)v26, 0x1Au);
      }
    }
    else
    {
      uint64_t v22 = *re::videoLogObjects((re *)a1);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v26[0]) = 0;
        _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "Pixel format is invalid.", (uint8_t *)v26, 2u);
      }
      if (*this) {
        re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(this);
      }
      *this = 0;
    }
    return 1;
  }
LABEL_14:
  CFDictionaryRef v19 = *(CFDictionaryRef *)(v18 + 24 * v7 + 16);
  int v20 = (int)this;
  unint64_t v21 = this;
LABEL_26:
  re::VideoObject<re::VideoColorTransformBase>::setRef(v20, v21, v19);
  return 0;
}

uint64_t (*re::VideoSurfaceAccelerator::internalCompletionCallback(uint64_t (*this)(BOOL, uint64_t), void *a2, uint64_t a3, void *a4))(BOOL, uint64_t)
{
  if (this) {
    return (uint64_t (*)(BOOL, uint64_t))this(a2 != 0, a3);
  }
  return this;
}

void re::VideoSurfaceAccelerator::deinit(CFRunLoopRef *this)
{
  CFRunLoopRef v2 = *this;
  if (v2)
  {
    if (this[1])
    {
      RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
      if (RunLoopSource)
      {
        CFRunLoopRemoveSource(this[1], RunLoopSource, (CFRunLoopMode)*MEMORY[0x263EFFE78]);
      }
      else
      {
        unint64_t v4 = *re::videoLogObjects(0);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v5 = 0;
          _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Unable to properly deinitialize Surface Accelerator.", v5, 2u);
        }
      }
      this[1] = 0;
      CFRunLoopRef v2 = *this;
    }
    CFRelease(v2);
    *this = 0;
  }
}

void re::VideoSurfaceAccelerator::init(re::VideoSurfaceAccelerator *this)
{
  if (*(void *)this) {
    return;
  }
  CFRunLoopRef Main = CFRunLoopGetMain();
  *((void *)this + 1) = Main;
  if (!Main)
  {
    unint64_t v4 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)buf = 0;
    int v5 = buf;
LABEL_9:
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Unable to create Surface Accelerator.", v5, 2u);
    return;
  }
  uint64_t v3 = (re *)IOSurfaceAcceleratorCreate();
  if (v3)
  {
    unint64_t v4 = *re::videoLogObjects(v3);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    __int16 v12 = 0;
    int v5 = (uint8_t *)&v12;
    goto LABEL_9;
  }
  uint64_t RunLoopSource = IOSurfaceAcceleratorGetRunLoopSource();
  if (RunLoopSource)
  {
    uint64_t v7 = (__CFRunLoopSource *)RunLoopSource;
    CFDictionaryRef v8 = (__CFRunLoop *)*((void *)this + 1);
    CFStringRef v9 = (const __CFString *)*MEMORY[0x263EFFE78];
    CFRunLoopAddSource(v8, v7, v9);
  }
  else
  {
    unint64_t v10 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v11 = 0;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Unable to create Surface Accelerator.", v11, 2u);
    }
    CFRelease(*(CFTypeRef *)this);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
}

BOOL re::VideoSurfaceAccelerator::transformSurface()
{
  return IOSurfaceAcceleratorTransformSurface() != 0;
}

uint64_t re::VideoSurfaceAccelerator::histogram(re::VideoSurfaceAccelerator *this, re::VideoHistogram *a2)
{
  if (!*(void *)this || IOSurfaceAcceleratorGetHistogram()) {
    return 1;
  }
  re::VideoHistogram::setData((uint64_t)a2, v4);
  return 0;
}

IOSurfaceRef re::CoreVideoUtils::pixelBufferColorGamut(__CVBuffer *a1, char *a2)
{
  IOSurfaceRef result = CVPixelBufferGetIOSurface(a1);
  if (result)
  {
    int v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    memset(v8, 0, sizeof(v8));
    re::_IOSurfaceGetBulkAttachments((uint64_t)result, (uint64_t)v8);
    if (!v4)
    {
      if (BYTE11(v9) > 8u)
      {
        if (BYTE11(v9) == 12)
        {
          char v6 = 1;
        }
        else
        {
          IOSurfaceRef result = 0;
          if (BYTE11(v9) != 9) {
            return result;
          }
          char v6 = 3;
        }
      }
      else if (BYTE11(v9) == 1)
      {
        char v6 = 0;
      }
      else
      {
        char v6 = 0;
        IOSurfaceRef result = 0;
        if (BYTE11(v9) != 6) {
          return result;
        }
      }
      *a2 = v6;
      return (IOSurfaceRef)1;
    }
    int v5 = *re::videoLogObjects(v4);
    IOSurfaceRef result = (IOSurfaceRef)os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Unable to determine pixel buffer's color gamut.", v7, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t re::CoreVideoUtils::compressedPixelFormat(uint64_t this)
{
  if ((int)this > 1886676527)
  {
    if ((int)this > 1936077361)
    {
      if ((int)this > 1983013175)
      {
        if ((int)this <= 1999908960)
        {
          switch(this)
          {
            case 0x76326138:
              return 645280312;
            case 0x76346138:
              return 645280824;
            case 0x77333072:
              return 645346162;
          }
        }
        else if ((int)this > 2019964015)
        {
          if (this == 2019964016)
          {
            return 644232304;
          }
          else if (this == 2037741158)
          {
            return 645494118;
          }
        }
        else if (this == 1999908961)
        {
          return 645346401;
        }
        else if (this == 2016687216)
        {
          return 640955504;
        }
        return this;
      }
      if ((int)this <= 1937125937)
      {
        if (this != 1936077362)
        {
          if (this != 1936077876)
          {
            if (this != 1937125936) {
              return this;
            }
            int v4 = 645097008;
            return v4 | 0x1000u;
          }
          int v2 = 645097008;
          return v2 | 4u;
        }
        int v7 = 645097008;
        return v7 | 2u;
      }
      if (this != 1937125938)
      {
        if (this != 1937126452)
        {
          if (this == 1982882104) {
            return 645279800;
          }
          return this;
        }
        int v5 = 645101106;
        return (v5 + 2);
      }
      unsigned __int16 v8 = 30258;
      return v8 | 0x26730000u;
    }
    if ((int)this <= 1886859823)
    {
      if ((int)this > 1886680623)
      {
        if (this == 1886680624)
        {
          int v4 = 645162544;
          return v4 | 0x1000u;
        }
        if (this != 1886680626)
        {
          if (this != 1886680628) {
            return this;
          }
          int v5 = 645166642;
          return (v5 + 2);
        }
        unsigned __int16 v9 = 30258;
      }
      else
      {
        if (this != 1886676528)
        {
          if (this != 1886676530)
          {
            if (this != 1886676532) {
              return this;
            }
            int v2 = 645162544;
            return v2 | 4u;
          }
          int v7 = 645162544;
          return v7 | 2u;
        }
        unsigned __int16 v9 = 26160;
      }
      return v9 | 0x26740000u;
    }
    if ((int)this <= 1932681586)
    {
      if (this != 1886859824)
      {
        if (this == 1886859826) {
          return 645429042;
        }
        if (this == 1886860340) {
          return 645429044;
        }
        return this;
      }
      int v3 = 645428786;
      return (v3 + 254);
    }
    switch(this)
    {
      case 0x73326173:
        return 645083763;
      case 0x73346173:
        return 645084275;
      case 0x73663230:
        unsigned __int16 v8 = 26160;
        return v8 | 0x26730000u;
    }
    return this;
  }
  if ((int)this <= 1278226735)
  {
    if ((int)this > 875704949)
    {
      if ((int)this > 1111970368)
      {
        if (this == 1111970369) {
          return 641877825;
        }
        if (this == 1278226488) {
          return 642527288;
        }
        if (this != 1278226536) {
          return this;
        }
        int v1 = 642527288;
        return (v1 + 48);
      }
      if (this != 875704950)
      {
        if (this == 875836518)
        {
          int v2 = 641230384;
          return v2 | 4u;
        }
        if (this != 875836534) {
          return this;
        }
        int v5 = 641234482;
        return (v5 + 2);
      }
      unsigned __int16 v10 = 30258;
    }
    else
    {
      if ((int)this <= 875704421)
      {
        if (this == 645428788) {
          return 1882469428;
        }
        if (this == 843264056) {
          return 640823352;
        }
        if (this != 843264104) {
          return this;
        }
        int v1 = 640823352;
        return (v1 + 48);
      }
      if (this != 875704422)
      {
        if (this == 875704438)
        {
          int v4 = 641230384;
          return v4 | 0x1000u;
        }
        if (this != 875704934) {
          return this;
        }
        int v7 = 641230384;
        return v7 | 2u;
      }
      unsigned __int16 v10 = 26160;
    }
    return v10 | 0x26380000u;
  }
  if ((int)this > 1815162993)
  {
    if ((int)this > 1885745711)
    {
      if (this != 1885745712)
      {
        if (this != 1885745714)
        {
          if (this != 1885746228) {
            return this;
          }
          int v2 = 645424688;
          return v2 | 4u;
        }
        int v7 = 645424688;
        return v7 | 2u;
      }
      unsigned __int16 v6 = 26160;
    }
    else
    {
      if (this == 1815162994) {
        return 644624754;
      }
      if (this == 1882468912)
      {
        int v4 = 645424688;
        return v4 | 0x1000u;
      }
      if (this != 1882468914) {
        return this;
      }
      unsigned __int16 v6 = 30258;
    }
    return v6 | 0x26780000u;
  }
  if ((int)this > 1278555700)
  {
    switch(this)
    {
      case 0x4C353635:
        return 642528566;
      case 0x52476841:
        return 642934849;
      case 0x62336138:
        return 643969848;
    }
  }
  else
  {
    switch(this)
    {
      case 0x4C303130:
        return 642527536;
      case 0x4C303132:
        return 642527538;
      case 0x4C303136:
        int v3 = 642527288;
        return (v3 + 254);
    }
  }
  return this;
}

uint64_t re::CoreVideoUtils::pixelFormatIsTriPlanar(re::CoreVideoUtils *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > 1949458802)
  {
    if (v1 > 1983013175)
    {
      if (v1 > 2016567666)
      {
        if (v1 == 2016567667) {
          return result;
        }
        int v4 = 2016698739;
      }
      else
      {
        if (v1 == 1983013176) {
          return result;
        }
        int v4 = 1983144248;
      }
      goto LABEL_21;
    }
    if (v1 != 1949458803 && v1 != 1949589875)
    {
      int v4 = 1982882104;
LABEL_21:
      if (v1 != v4) {
        return 0;
      }
    }
  }
  else
  {
    if (v1 > 645280311)
    {
      if (v1 > 1932681586)
      {
        if (v1 == 1932681587) {
          return result;
        }
        int v4 = 1932812659;
        goto LABEL_21;
      }
      if (v1 == 645280312) {
        return result;
      }
      unsigned __int16 v3 = 13368;
      goto LABEL_13;
    }
    if (v1 != 645083763 && v1 != 645084275)
    {
      unsigned __int16 v3 = 12344;
LABEL_13:
      int v4 = v3 | 0x26760000;
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t re::metalPixelFormatFromPixelFormatCurrent(re *this, int a2)
{
  unsigned int v3 = this;
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v4 = (re *)re::CoreVideoUtils::uncompressedPixelFormat(this);
  if ((int)v4 <= 1882468913)
  {
    if ((int)v4 <= 1278555444)
    {
      if ((int)v4 <= 875704933)
      {
        if ((int)v4 > 875704421)
        {
          if (v4 == 875704422 || v4 == 875704438)
          {
            BOOL v6 = a2 == 0;
            unsigned int v7 = 500;
            goto LABEL_90;
          }
          goto LABEL_94;
        }
        if (v4 != 32)
        {
          if (v4 == 846624121)
          {
            BOOL v6 = a2 == 0;
            unsigned int v7 = 241;
            goto LABEL_90;
          }
          goto LABEL_94;
        }
      }
      else
      {
        if ((int)v4 <= 875836517)
        {
          if (v4 == 875704934 || v4 == 875704950)
          {
            BOOL v6 = a2 == 0;
            unsigned int v7 = 502;
            goto LABEL_90;
          }
          goto LABEL_94;
        }
        if (v4 == 875836518 || v4 == 875836534)
        {
          BOOL v6 = a2 == 0;
          unsigned int v7 = 503;
          goto LABEL_90;
        }
        if (v4 != 1111970369)
        {
LABEL_94:
          unsigned __int16 v10 = *re::videoLogObjects(v4);
          uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
          if (result)
          {
            v11[0] = 67109888;
            v11[1] = HIBYTE(v3);
            __int16 v12 = 1024;
            int v13 = BYTE2(v3);
            __int16 v14 = 1024;
            int v15 = BYTE1(v3);
            __int16 v16 = 1024;
            int v17 = v3;
            _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "Unsupported pixel format %c%c%c%c", (uint8_t *)v11, 0x1Au);
            return 0;
          }
          return result;
        }
      }
      BOOL v6 = a2 == 0;
      unsigned int v7 = 80;
      goto LABEL_90;
    }
    if ((int)v4 <= 1380411456)
    {
      if ((int)v4 <= 1378955370)
      {
        if (v4 != 1278555445)
        {
          if (v4 == 1278555701)
          {
            BOOL v6 = a2 == 0;
            unsigned int v7 = 40;
            goto LABEL_90;
          }
          goto LABEL_94;
        }
        BOOL v6 = a2 == 0;
        unsigned int v7 = 43;
      }
      else
      {
        switch(v4)
        {
          case 0x5231306B:
            BOOL v6 = a2 == 0;
            unsigned int v7 = 90;
            break;
          case 0x52474241:
            BOOL v6 = a2 == 0;
            unsigned int v7 = 70;
            break;
          case 0x52476641:
            BOOL v6 = a2 == 0;
            unsigned int v7 = 125;
            goto LABEL_90;
          default:
            goto LABEL_94;
        }
      }
      goto LABEL_90;
    }
    if ((int)v4 <= 1815162993)
    {
      if (v4 != 1380411457)
      {
        if (v4 == 1647534392)
        {
          BOOL v6 = a2 == 0;
          unsigned int v7 = 550;
          goto LABEL_90;
        }
        goto LABEL_94;
      }
      BOOL v6 = a2 == 0;
      unsigned int v7 = 115;
      goto LABEL_90;
    }
    if (v4 == 1815162994)
    {
      BOOL v6 = a2 == 0;
      unsigned int v7 = 94;
      goto LABEL_90;
    }
    if (v4 != 1815491698)
    {
      if (v4 == 1882468912) {
        goto LABEL_36;
      }
      goto LABEL_94;
    }
    goto LABEL_77;
  }
  if ((int)v4 > 2016686641)
  {
    if ((int)v4 <= 2019963955)
    {
      if ((int)v4 > 2016687215)
      {
        if (v4 != 2016687216)
        {
          if (v4 == 2019963440)
          {
LABEL_31:
            BOOL v6 = a2 == 0;
            unsigned int v7 = 505;
            goto LABEL_90;
          }
          if (v4 != 2019963442) {
            goto LABEL_94;
          }
LABEL_80:
          BOOL v6 = a2 == 0;
          unsigned int v7 = 506;
          goto LABEL_90;
        }
LABEL_72:
        BOOL v6 = a2 == 0;
        unsigned int v7 = 504;
        goto LABEL_90;
      }
      if (v4 == 2016686642) {
        goto LABEL_80;
      }
      if (v4 != 2016687156) {
        goto LABEL_94;
      }
      goto LABEL_81;
    }
    if ((int)v4 <= 2033463605)
    {
      if (v4 != 2019963956)
      {
        if (v4 != 2019964016) {
          goto LABEL_94;
        }
        goto LABEL_72;
      }
LABEL_81:
      BOOL v6 = a2 == 0;
      unsigned int v7 = 507;
      goto LABEL_90;
    }
    if (v4 != 2033463606)
    {
      if (v4 == 2037741158 || v4 == 2037741171)
      {
        BOOL v6 = a2 == 0;
        unsigned int v7 = 240;
        goto LABEL_90;
      }
      goto LABEL_94;
    }
LABEL_77:
    BOOL v6 = a2 == 0;
    unsigned int v7 = 110;
    goto LABEL_90;
  }
  if ((int)v4 <= 1919365991)
  {
    if ((int)v4 <= 1885745711)
    {
      if (v4 != 1882468914)
      {
        int v5 = 1882469428;
LABEL_48:
        if (v4 == v5)
        {
          BOOL v6 = a2 == 0;
          unsigned int v7 = 510;
          goto LABEL_90;
        }
        goto LABEL_94;
      }
      goto LABEL_79;
    }
    if (v4 != 1885745712)
    {
      if (v4 != 1885745714)
      {
        int v5 = 1885746228;
        goto LABEL_48;
      }
LABEL_79:
      BOOL v6 = a2 == 0;
      unsigned int v7 = 509;
      goto LABEL_90;
    }
LABEL_36:
    BOOL v6 = a2 == 0;
    unsigned int v7 = 508;
    goto LABEL_90;
  }
  if ((int)v4 > 1999843441)
  {
    switch(v4)
    {
      case 0x77333072:
        BOOL v6 = a2 == 0;
        unsigned int v7 = 554;
        break;
      case 0x77343061:
        BOOL v6 = a2 == 0;
        unsigned int v7 = 552;
        break;
      case 0x78343230:
        goto LABEL_31;
      default:
        goto LABEL_94;
    }
LABEL_90:
    if (v6) {
      return v7;
    }
    else {
      return 0;
    }
  }
  if (v4 == 1919365992) {
    return 25;
  }
  if (v4 != 1982882104) {
    goto LABEL_94;
  }
  if (a2 == 2) {
    unsigned int v8 = 10;
  }
  else {
    unsigned int v8 = 0;
  }
  if (a2) {
    return v8;
  }
  else {
    return 500;
  }
}

uint64_t re::CoreVideoUtils::uncompressedPixelFormat(re::CoreVideoUtils *this)
{
  uint64_t v1 = 875704422;
  if ((int)this <= 645428785)
  {
    if ((int)this <= 642934848)
    {
      if ((int)this > 641234479)
      {
        if ((int)this <= 641234483)
        {
          uint64_t v1 = 875704438;
          if (this != 641234480)
          {
            int v2 = 641234482;
            goto LABEL_44;
          }
          return v1;
        }
        if (this != 641234484)
        {
          if (this != 641877825) {
            return (uint64_t)this;
          }
          return 1111970369;
        }
        return 875836534;
      }
      if (this == 641230384) {
        return v1;
      }
      if (this != 641230386)
      {
        int v3 = 641230388;
        goto LABEL_25;
      }
      return 875704934;
    }
    if ((int)this <= 645424687)
    {
      if (this == 642934849) {
        return 1380411457;
      }
      if (this == 643969848) {
        return 1647534392;
      }
      if (this != 645346162) {
        return (uint64_t)this;
      }
      return 1999843442;
    }
    if ((int)this <= 645424691)
    {
      if (this != 645424688)
      {
        if (this != 645424690) {
          return (uint64_t)this;
        }
        return 1885745714;
      }
      int v5 = 1882468912;
      return (v5 + 3276800);
    }
    if (this != 645424692)
    {
      if (this == 645428784) {
        return 1882468912;
      }
      return (uint64_t)this;
    }
    int v6 = 1885745714;
    return (v6 + 514);
  }
  if ((int)this > 1530426931)
  {
    if ((int)this <= 1534617139)
    {
      if (this == 1530426932) {
        return 875836534;
      }
      if (this != 1534617136)
      {
        if (this != 1534617138) {
          return (uint64_t)this;
        }
        return 2019963442;
      }
      int v5 = 2016686640;
      return (v5 + 3276800);
    }
    if ((int)this <= 1534621233)
    {
      if (this != 1534617140)
      {
        if (this != 1534621232) {
          return (uint64_t)this;
        }
        return 2016686640;
      }
      int v6 = 2019963442;
      return (v6 + 514);
    }
    if (this != 1534621234)
    {
      if (this != 1534621236) {
        return (uint64_t)this;
      }
      int v4 = 2016686640;
      return (v4 + 516);
    }
    int v7 = 2016686640;
    return v7 | 2u;
  }
  if ((int)this <= 1530422833)
  {
    if (this != 645428786)
    {
      if (this != 645428788)
      {
        if (this != 1530422832) {
          return (uint64_t)this;
        }
        return v1;
      }
      int v4 = 1882468912;
      return (v4 + 516);
    }
    int v7 = 1882468912;
    return v7 | 2u;
  }
  if ((int)this <= 1530426927)
  {
    if (this != 1530422834)
    {
      int v3 = 1530422836;
LABEL_25:
      if (this != v3) {
        return (uint64_t)this;
      }
      return 875836518;
    }
    return 875704934;
  }
  uint64_t v1 = 875704438;
  if (this != 1530426928)
  {
    int v2 = 1530426930;
LABEL_44:
    if (this == v2) {
      return 875704950;
    }
    return (uint64_t)this;
  }
  return v1;
}

uint64_t re::metalPixelFormatFromPixelFormatLegacy(re *this, int a2)
{
  unsigned int v3 = this;
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v4 = (re *)re::CoreVideoUtils::uncompressedPixelFormat(this);
  if ((int)v4 <= 1380411456)
  {
    if ((int)v4 <= 875836517)
    {
      if ((int)v4 > 875704437)
      {
        if (v4 == 875704438 || v4 == 875704934) {
          goto LABEL_38;
        }
        unsigned __int16 v9 = 12918;
      }
      else
      {
        if (v4 == 32)
        {
LABEL_30:
          BOOL v6 = a2 == 0;
          unsigned int v7 = 80;
          goto LABEL_59;
        }
        if (v4 == 846624121)
        {
          BOOL v6 = a2 == 0;
          unsigned int v7 = 241;
          goto LABEL_59;
        }
        unsigned __int16 v9 = 12390;
      }
      if (v4 != (v9 | 0x34320000)) {
        goto LABEL_63;
      }
    }
    else
    {
      if ((int)v4 > 1278555444)
      {
        if ((int)v4 > 1380401728)
        {
          if (v4 == 1380401729)
          {
            BOOL v6 = a2 == 0;
            unsigned int v7 = 70;
          }
          else
          {
            if (v4 != 1380410945) {
              goto LABEL_63;
            }
            BOOL v6 = a2 == 0;
            unsigned int v7 = 125;
          }
        }
        else if (v4 == 1278555445)
        {
          BOOL v6 = a2 == 0;
          unsigned int v7 = 43;
        }
        else
        {
          if (v4 != 1378955371) {
            goto LABEL_63;
          }
          BOOL v6 = a2 == 0;
          unsigned int v7 = 90;
        }
        goto LABEL_59;
      }
      if (v4 != 875836518 && v4 != 875836534)
      {
        if (v4 != 1111970369) {
          goto LABEL_63;
        }
        goto LABEL_30;
      }
    }
LABEL_38:
    BOOL v5 = a2 == 0;
    goto LABEL_39;
  }
  if ((int)v4 <= 2016687155)
  {
    if ((int)v4 > 1919365991)
    {
      if ((int)v4 <= 2016686639)
      {
        if (v4 == 1919365992) {
          return 25;
        }
        if (v4 == 1982882104)
        {
          BOOL v5 = (a2 & 0xFFFFFFFD) == 0;
LABEL_39:
          unsigned int v11 = 30;
          unsigned int v12 = 10;
          goto LABEL_44;
        }
        goto LABEL_63;
      }
      if (v4 != 2016686640)
      {
        int v10 = 2016686642;
        goto LABEL_42;
      }
LABEL_43:
      BOOL v5 = a2 == 0;
      unsigned int v11 = 60;
      unsigned int v12 = 20;
LABEL_44:
      if (v5) {
        return v12;
      }
      else {
        return v11;
      }
    }
    if (v4 == 1380411457)
    {
      BOOL v6 = a2 == 0;
      unsigned int v7 = 115;
      goto LABEL_59;
    }
    if (v4 == 1815162994)
    {
      BOOL v6 = a2 == 0;
      unsigned int v7 = 94;
      goto LABEL_59;
    }
    int v8 = 1815491698;
    goto LABEL_25;
  }
  if ((int)v4 > 2019963955)
  {
    if ((int)v4 <= 2037741157)
    {
      if (v4 == 2019963956) {
        goto LABEL_43;
      }
      int v8 = 2033463606;
LABEL_25:
      if (v4 != v8) {
        goto LABEL_63;
      }
      BOOL v6 = a2 == 0;
      unsigned int v7 = 110;
      goto LABEL_59;
    }
    if (v4 != 2037741158 && v4 != 2037741171) {
      goto LABEL_63;
    }
    BOOL v6 = a2 == 0;
    unsigned int v7 = 240;
LABEL_59:
    if (v6) {
      return v7;
    }
    else {
      return 0;
    }
  }
  if (v4 == 2016687156 || v4 == 2019963440) {
    goto LABEL_43;
  }
  int v10 = 2019963442;
LABEL_42:
  if (v4 == v10) {
    goto LABEL_43;
  }
LABEL_63:
  __int16 v14 = *re::videoLogObjects(v4);
  uint64_t result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v15[0] = 67109888;
    v15[1] = HIBYTE(v3);
    __int16 v16 = 1024;
    int v17 = BYTE2(v3);
    __int16 v18 = 1024;
    int v19 = BYTE1(v3);
    __int16 v20 = 1024;
    int v21 = v3;
    _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "Unsupported pixel format %c%c%c%c", (uint8_t *)v15, 0x1Au);
    return 0;
  }
  return result;
}

uint64_t re::CoreVideoUtils::metalPixelFormatFromPixelFormat(re::CoreVideoUtils *this, int a2)
{
  if (re::VideoPlatform::isLegacyDevice(this))
  {
    return re::metalPixelFormatFromPixelFormatLegacy(this, a2);
  }
  else
  {
    return re::metalPixelFormatFromPixelFormatCurrent(this, a2);
  }
}

uint64_t re::CoreVideoUtils::metalPixelFormatSRGBVariant(re::VideoDefaults *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v6 = *MEMORY[0x263EF8340];
  if ((int)a1 > 549)
  {
    switch((int)a1)
    {
      case 550:
        return 551;
      case 551:
      case 553:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
        goto LABEL_20;
      case 552:
        return 553;
      case 554:
        return 555;
      case 563:
        goto LABEL_8;
      case 564:
        goto LABEL_13;
      case 565:
        goto LABEL_14;
      case 566:
        goto LABEL_15;
      case 567:
        goto LABEL_16;
      case 568:
        goto LABEL_17;
      case 569:
        goto LABEL_18;
      default:
        switch((int)a1)
        {
          case 607:
            goto LABEL_8;
          case 608:
            goto LABEL_13;
          case 609:
            goto LABEL_14;
          case 610:
            goto LABEL_15;
          case 611:
            goto LABEL_16;
          case 612:
            goto LABEL_17;
          case 613:
            goto LABEL_18;
          default:
            if (a1 != 629) {
              goto LABEL_20;
            }
            return 628;
        }
    }
  }
  if ((int)a1 <= 499)
  {
    switch(a1)
    {
      case 'F':
        return 71;
      case 'P':
        return 81;
      case '^':
        return 628;
      default:
LABEL_20:
        int v2 = (re *)re::VideoDefaults::logEnabled(a1);
        if (v2)
        {
          unsigned int v3 = *re::videoLogObjects(v2);
          if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
          {
            v5[0] = 67109120;
            v5[1] = v1;
            _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "Hardware sRGB engamma and degamma not supported for (%d)", (uint8_t *)v5, 8u);
          }
        }
        break;
    }
  }
  else
  {
    switch((int)a1)
    {
      case 500:
        uint64_t v1 = 520;
        break;
      case 502:
        uint64_t v1 = 522;
        break;
      case 503:
        uint64_t v1 = 523;
        break;
      case 504:
LABEL_8:
        uint64_t v1 = 524;
        break;
      case 505:
LABEL_13:
        uint64_t v1 = 525;
        break;
      case 506:
LABEL_14:
        uint64_t v1 = 526;
        break;
      case 507:
LABEL_15:
        uint64_t v1 = 527;
        break;
      case 508:
LABEL_16:
        uint64_t v1 = 528;
        break;
      case 509:
LABEL_17:
        uint64_t v1 = 529;
        break;
      case 510:
LABEL_18:
        uint64_t v1 = 530;
        break;
      default:
        goto LABEL_20;
    }
  }
  return v1;
}

uint64_t re::CoreVideoUtils::metalPixelFormatHasHardwareTransferFunction(int a1)
{
  uint64_t result = 1;
  if (a1 <= 519)
  {
    if (a1 != 71 && a1 != 81) {
      return 0;
    }
  }
  else if (((a1 - 520) > 0x23 || ((1 << (a1 - 8)) & 0xA800007FDLL) == 0) && a1 != 628)
  {
    return 0;
  }
  return result;
}

re::VideoDefaults *re::CoreVideoUtils::metalPixelFormatForPixelBuffer(re::CoreVideoUtils *this, __CVBuffer *a2, int a3)
{
  int v4 = (int)a2;
  uint64_t v51 = *MEMORY[0x263EF8340];
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(this);
  int v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  memset(v31, 0, sizeof(v31));
  re::_IOSurfaceGetBulkAttachments((uint64_t)IOSurface, (uint64_t)v31);
  if (v7)
  {
    int v8 = *re::videoLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v8, OS_LOG_TYPE_ERROR, "Unable to get surface properties.", buf, 2u);
    }
    return 0;
  }
  PixelFormatType = (re::VideoDefaults *)CVPixelBufferGetPixelFormatType(this);
  int v11 = BYTE12(v32);
  unsigned int v12 = (re *)re::VideoDefaults::logEnabled(PixelFormatType);
  if (v12)
  {
    uint64_t v26 = *re::videoLogObjects(v12);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316674;
      long long v38 = "(undefined)";
      __int16 v39 = 1024;
      int v40 = v11;
      __int16 v41 = 2080;
      CFTypeRef v42 = "(undefined)";
      __int16 v43 = 1024;
      unsigned int v44 = PixelFormatType >> 24;
      __int16 v45 = 1024;
      int v46 = BYTE2(PixelFormatType);
      __int16 v47 = 1024;
      int v48 = BYTE1(PixelFormatType);
      __int16 v49 = 1024;
      int v50 = PixelFormatType;
      _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "Selecting variant for transfer function %s (%d) and pixel format %s (%c%c%c%c)", buf, 0x34u);
    }
  }
  int v13 = (re *)re::CoreVideoUtils::metalPixelFormatFromPixelFormat(PixelFormatType, v4);
  unsigned __int16 v9 = v13;
  if (a3)
  {
    switch(v11)
    {
      case 8:
        goto LABEL_23;
      case 18:
        __int16 v14 = *re::videoLogObjects(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          int v15 = "Hardware HLG degamma not supported. Selecting sRGB degamma variant for HLG signal.";
          goto LABEL_20;
        }
        break;
      case 16:
        __int16 v14 = *re::videoLogObjects(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          int v15 = "Hardware PQ degamma not supported. Selecting sRGB degamma variant for PQ signal.";
LABEL_20:
          _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
        }
        break;
      default:
        uint64_t v23 = (re *)re::VideoDefaults::logEnabled(v13);
        if (!v23) {
          break;
        }
        __int16 v14 = *re::videoLogObjects(v23);
        BOOL v30 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (v11 == 13)
        {
          if (!v30) {
            break;
          }
          *(_WORD *)buf = 0;
          int v15 = "Selecting sRGB degamma variant for sRGB signal.";
        }
        else
        {
          if (!v30) {
            break;
          }
          *(_WORD *)buf = 0;
          int v15 = "Selecting sRGB degamma variant for unknown non-linear signal.";
        }
        goto LABEL_20;
    }
    int v13 = (re *)re::CoreVideoUtils::metalPixelFormatSRGBVariant(v9);
    unsigned __int16 v9 = v13;
LABEL_23:
    uint64_t v24 = (re *)re::VideoDefaults::logEnabled(v13);
    if (!v24) {
      return v9;
    }
    __int16 v27 = *re::videoLogObjects(v24);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      return v9;
    }
    __int16 v20 = v27;
    uint64_t Name = MTLPixelFormatGetName();
    *(_DWORD *)buf = 136315138;
    long long v38 = (const char *)Name;
    uint64_t v22 = "Selected %s variant.";
LABEL_31:
    _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, v22, buf, 0xCu);

    return v9;
  }
  if (v11 == 13)
  {
    int v13 = (re *)re::CoreVideoUtils::metalPixelFormatSRGBVariant(v13);
    unsigned __int16 v9 = v13;
  }
  if (re::VideoDefaults::logEnabled(v13))
  {
    HasHardwareTransferFunction = (re *)re::CoreVideoUtils::metalPixelFormatHasHardwareTransferFunction((int)v9);
    int v17 = (int)HasHardwareTransferFunction;
    __int16 v18 = *re::videoLogObjects(HasHardwareTransferFunction);
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      if (!v19) {
        return v9;
      }
      __int16 v20 = v18;
      uint64_t v21 = MTLPixelFormatGetName();
      *(_DWORD *)buf = 136315138;
      long long v38 = (const char *)v21;
      uint64_t v22 = "Selected variant %s.";
    }
    else
    {
      if (!v19) {
        return v9;
      }
      __int16 v20 = v18;
      uint64_t v29 = MTLPixelFormatGetName();
      *(_DWORD *)buf = 136315138;
      long long v38 = (const char *)v29;
      uint64_t v22 = "Variant not found for %s.";
    }
    goto LABEL_31;
  }
  return v9;
}

BOOL re::CoreVideoUtils::pixelBufferIsHDR(re::CoreVideoUtils *this, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(this) == 1380411457) {
    return 1;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(this);
  if (!IOSurface)
  {
    unsigned int v7 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      int v8 = "Unable to read input surface.";
      unsigned __int16 v9 = buf;
      goto LABEL_14;
    }
    return 0;
  }
  BOOL v5 = IOSurface;
  int v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)buf = 0u;
  re::_IOSurfaceGetBulkAttachments((uint64_t)IOSurface, (uint64_t)buf);
  if (v6)
  {
    unsigned int v7 = *re::videoLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      __int16 v13 = 0;
      int v8 = "Unable to read input surface properties.";
      unsigned __int16 v9 = (uint8_t *)&v13;
LABEL_14:
      _os_log_error_impl(&dword_233120000, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
      return 0;
    }
    return 0;
  }
  if ((BYTE12(v17) & 0xFD) != 0x10)
  {
    CFBooleanRef v11 = (const __CFBoolean *)IOSurfaceCopyValue(v5, @"isHLG");
    if (v11)
    {
      CFBooleanRef v12 = v11;
      BOOL v3 = CFBooleanGetValue(v11) != 0;
      CFRelease(v12);
      return v3;
    }
    return 0;
  }
  return 1;
}

void re::CoreVideoUtils::printPixelBufferInfo(re::CoreVideoUtils *this, __CVBuffer *a2, NSMutableString *a3)
{
  int v4 = a2;
  if (!this)
  {
    CFBooleanRef v12 = @"\nInvalid input pixel buffer.";
LABEL_17:
    [(__CVBuffer *)v4 appendString:v12];
    goto LABEL_99;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(this);
  if (!IOSurface)
  {
    CFBooleanRef v12 = @"\nInvalid input pixel buffer surface.";
    goto LABEL_17;
  }
  uint64_t v6 = IOSurface;
  PlaneCFIndex Count = IOSurfaceGetPlaneCount(IOSurface);
  if (!PlaneCount) {
    [(__CVBuffer *)v4 appendString:@"\nInvalid input pixel buffer plane count."];
  }
  unsigned int v39 = 2;
  if (IOSurfaceGetYCbCrMatrix()) {
    [(__CVBuffer *)v4 appendString:@"\nUnable to read input surface YCbCrMatrix. Bulk attachments may exist."];
  }
  PixelFormatType = (re::CoreVideoUtils *)CVPixelBufferGetPixelFormatType(this);
  unsigned int v9 = PixelFormatType;
  int v10 = "Yes";
  if ((int)PixelFormatType > 645166639)
  {
    if ((int)PixelFormatType <= 645429039)
    {
      if ((int)PixelFormatType <= 645411442)
      {
        if ((int)PixelFormatType > 645280311)
        {
          if ((int)PixelFormatType > 645346161)
          {
            if (PixelFormatType == 645346162) {
              goto LABEL_86;
            }
            int v11 = 645346401;
LABEL_85:
            if (PixelFormatType == v11) {
              goto LABEL_86;
            }
            goto LABEL_100;
          }
          if (PixelFormatType == 645280312) {
            goto LABEL_86;
          }
          unsigned __int16 v14 = 13368;
        }
        else
        {
          if ((PixelFormatType - 645166640) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          unsigned __int16 v14 = 12344;
        }
        int v11 = v14 | 0x26760000;
        goto LABEL_85;
      }
      if ((int)PixelFormatType <= 645428783)
      {
        if ((PixelFormatType - 645424688) <= 4
          && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0
          || PixelFormatType == 645411443)
        {
          goto LABEL_86;
        }
        int v11 = 645411955;
        goto LABEL_85;
      }
      int v13 = -645428784;
    }
    else
    {
      if ((int)PixelFormatType <= 1530426927)
      {
        if ((int)PixelFormatType > 645494130)
        {
          if ((PixelFormatType - 1530422832) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          unsigned __int16 v16 = 30067;
        }
        else
        {
          if ((PixelFormatType - 645429040) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          unsigned __int16 v16 = 30054;
        }
        int v11 = v16 | 0x26790000;
        goto LABEL_85;
      }
      if ((PixelFormatType - 1530426928) <= 4
        && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0
        || (PixelFormatType - 1534617136) <= 4
        && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
      {
        goto LABEL_86;
      }
      int v13 = -1534621232;
    }
  }
  else
  {
    if ((int)PixelFormatType > 642934848)
    {
      if ((int)PixelFormatType > 645101103)
      {
        if ((int)PixelFormatType > 645149810)
        {
          if ((PixelFormatType - 645162544) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          unsigned __int16 v15 = 13427;
        }
        else
        {
          if ((PixelFormatType - 645101104) <= 4
            && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0)
          {
            goto LABEL_86;
          }
          unsigned __int16 v15 = 12915;
        }
        int v11 = v15 | 0x26740000;
      }
      else if ((int)PixelFormatType <= 645083762)
      {
        if ((int)PixelFormatType > 644232303)
        {
          if (PixelFormatType == 644232304) {
            goto LABEL_86;
          }
          int v11 = 644624754;
        }
        else
        {
          if (PixelFormatType == 642934849) {
            goto LABEL_86;
          }
          int v11 = 643969848;
        }
      }
      else
      {
        if ((PixelFormatType - 645097008) <= 4
          && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0
          || PixelFormatType == 645083763)
        {
          goto LABEL_86;
        }
        int v11 = 645084275;
      }
      goto LABEL_85;
    }
    if ((int)PixelFormatType > 641877824)
    {
      if ((int)PixelFormatType <= 642527535)
      {
        if (PixelFormatType == 641877825 || PixelFormatType == 642527288) {
          goto LABEL_86;
        }
        unsigned __int16 v17 = 12392;
      }
      else
      {
        if ((PixelFormatType - 642527536) <= 6
          && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x45) != 0)
        {
          goto LABEL_86;
        }
        unsigned __int16 v17 = 13622;
      }
      int v11 = v17 | 0x264C0000;
      goto LABEL_85;
    }
    if ((int)PixelFormatType <= 641230383)
    {
      if (PixelFormatType == 640823352 || PixelFormatType == 640823400) {
        goto LABEL_86;
      }
      int v11 = 640955504;
      goto LABEL_85;
    }
    if ((PixelFormatType - 641230384) <= 4 && ((1 << ((_BYTE)PixelFormatType - 48)) & 0x15) != 0) {
      goto LABEL_86;
    }
    int v13 = -641234480;
  }
  unsigned int v18 = PixelFormatType + v13;
  if (v18 <= 4 && ((1 << v18) & 0x15) != 0) {
    goto LABEL_86;
  }
LABEL_100:
  int v10 = "No";
LABEL_86:
  long long v32 = v10;
  int IsTriPlanar = re::CoreVideoUtils::pixelFormatIsTriPlanar(PixelFormatType);
  if (PlaneCount != 3 && IsTriPlanar) {
    [(__CVBuffer *)v4 appendString:@"\nInvalid input pixel buffer pixel format."];
  }
  int v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  memset(v33, 0, sizeof(v33));
  double BulkAttachments = re::_IOSurfaceGetBulkAttachments((uint64_t)v6, (uint64_t)v33);
  if (v21) {
    [(__CVBuffer *)v4 appendString:@"\nUnable to read input surface properties.", BulkAttachments];
  }
  uint64_t v22 = BYTE11(v34);
  uint64_t v23 = BYTE12(v34);
  uint64_t v24 = BYTE10(v34);
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  __int16 v27 = "Non-Planar";
  if (PlaneCount == 2) {
    __int16 v27 = "Bi-Planar";
  }
  if (PlaneCount == 3) {
    int v28 = "Tri-Planar";
  }
  else {
    int v28 = v27;
  }
  [(__CVBuffer *)v4 appendFormat:@"\n         Surface ID: %d", IOSurfaceGetID(v6)];
  BOOL IsHDR = re::CoreVideoUtils::pixelBufferIsHDR(this, v29);
  __int16 v31 = "SDR";
  if (IsHDR) {
    __int16 v31 = "HDR";
  }
  [(__CVBuffer *)v4 appendFormat:@"\n       Content Type: %s", v31];
  [(__CVBuffer *)v4 appendFormat:@"\n         Dimensions: %zu x %zu", Width, Height];
  [(__CVBuffer *)v4 appendFormat:@"\n          Planarity: %s", v28];
  [(__CVBuffer *)v4 appendFormat:@"\n       Pixel Format: %s (%c%c%c%c)", "(undefined)", HIBYTE(v9), BYTE2(v9), BYTE1(v9), v9];
  [(__CVBuffer *)v4 appendFormat:@"\n    Color Primaries: %s (%d)", "(undefined)", v22];
  [(__CVBuffer *)v4 appendFormat:@"\n  Transfer Function: %s (%d)", "(undefined)", v23];
  [(__CVBuffer *)v4 appendFormat:@"\n       YCbCr Matrix: %s (%d)", "(undefined)", v24];
  [(__CVBuffer *)v4 appendFormat:@"\n     Surface Matrix: %s (%d)", "(undefined)", v39];
  [(__CVBuffer *)v4 appendFormat:@"\n         Compressed: %s", v32];
  [(__CVBuffer *)v4 appendFormat:@"\n Protection Options: %llu", IOSurfaceGetProtectionOptions()];
  [(__CVBuffer *)v4 appendFormat:@"\n       Retain Count: %ld", CFGetRetainCount(this)];
LABEL_99:
}

void re::CoreVideoUtils::printMetalTextureInfo(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    objc_msgSend(v3, "appendFormat:", @"\n              Width: %zu", objc_msgSend(a1, sel_width));
    objc_msgSend(v3, "appendFormat:", @"\n             Height: %zu", objc_msgSend(a1, sel_height));
    objc_msgSend(v3, "appendFormat:", @"\n Protection Options: %llu", objc_msgSend(a1, sel_protectionOptions));
    objc_msgSend(a1, sel_pixelFormat);
    objc_msgSend(v3, "appendFormat:", @"\n       Pixel Format: %s", MTLPixelFormatGetName());
    objc_msgSend(v3, "appendFormat:", @"\n       Retain Count: %lu", objc_msgSend(a1, sel_retainCount));
  }
  else
  {
    [a2 appendString:@"\nInvalid metal texture."];
  }
}

void re::CoreVideoUtils::printColorTransformInfo(CFArrayRef *a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (*a1)
  {
    re::VideoColorTransformBase::conversionMatrix(a1, (uint64_t)v22);
    re::VideoColorTransformBase::gammaToneCurve(a1, (uint64_t)v13);
    if (v22[0])
    {
      [v4 appendString:@"\n    Transformation Conversion Matrix:"];
      [v4 appendFormat:@"\n        %f, %f, %f", v23, v26, v29];
      [v4 appendFormat:@"\n        %f, %f, %f", v24, v27, v30];
      [v4 appendFormat:@"\n        %f, %f, %f", v25, v28, v31];
    }
    if (v13[0])
    {
      id v5 = v4;
      uint64_t v6 = v5;
      switch(v14)
      {
        case 1:
          objc_msgSend(v5, "appendFormat:", @"\n    Gamma Tone Curve Type 0: gamma=%f", v15, v7, v8, v9, v10, v11, v12);
          break;
        case 2:
          [v5 appendFormat:@"\n    Gamma Tone Curve Type 1: gamma=%f, a=%f, b=%f", v15, v16, v17, v9, v10, v11, v12];
          break;
        case 3:
          [v5 appendFormat:@"\n    Gamma Tone Curve Type 2: gamma=%f, a=%f, b=%f, c=%f", v15, v16, v17, v18, v10, v11, v12];
          break;
        case 4:
          [v5 appendFormat:@"\n    Gamma Tone Curve Type 3: gamma=%f, a=%f, b=%f, c=%f, d=%f", v15, v16, v17, v18, v19, v11, v12];
          break;
        case 5:
          [v5 appendFormat:@"\n    Gamma Tone Curve Type 4: gamma=%f, a=%f, b=%f, c=%f, d=%f, e=%f, f=%f", v15, v16, v17, v18, v19, v20, v21];
          break;
        default:
          break;
      }
      [v6 appendString:@"\n    Gamma Tone Curve Type: Unknown"];
    }
  }
  else
  {
    [v3 appendString:@"\nInvalid color transform."];
  }
}

void re::CoreVideoUtils::printPresentationGroupInfo(CMTime *this, const re::VideoPresentationGroup *a2)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  id v5 = objc_alloc_init(MEMORY[0x263F089D8]);
  uint64_t v6 = (re *)[v5 appendString:@"Print Presentation Group:"];
  if (this->flags)
  {
    CMTime time = *this;
    uint64_t v6 = (re *)objc_msgSend(v5, "appendFormat:", @"\nPresentation Time: %f", CMTimeGetSeconds(&time));
  }
  uint64_t v7 = *re::videoLogObjects(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = v5;
    uint64_t v9 = v7;
    uint64_t v10 = [v8 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  uint64_t v11 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Pixel Buffer:"];

  unint64_t value = this[2].value;
  if (value)
  {
    int v2 = 0;
    do
    {
      int v14 = (char *)&v2->isa + 1;
      objc_msgSend(v11, "appendFormat:", @"\nPixel Buffer %zu of %zu", (char *)&v2->isa + 1, value);
      unint64_t v17 = this[2].value;
      if (v17 <= (unint64_t)v2) {
        goto LABEL_153;
      }
      re::CoreVideoUtils::printPixelBufferInfo(*((re::CoreVideoUtils **)&this[2].epoch + (void)v2), (__CVBuffer *)v11, v16);
      unint64_t value = this[2].value;
      int v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v14 < value);
  }
  float v18 = *re::videoLogObjects(v12);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = v11;
    float v20 = v18;
    uint64_t v21 = [v19 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  uint64_t v22 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Texture:"];

  unint64_t v24 = *(void *)&this[3].timescale;
  if (v24)
  {
    unint64_t v25 = 0;
    float v26 = this + 4;
    while (1)
    {
      unint64_t v3 = v25 + 1;
      float v23 = (re *)objc_msgSend(v22, "appendFormat:", @"\nTexture %zu of %zu:", v25 + 1, v24);
      unint64_t v24 = *(void *)&this[3].timescale;
      if (v24 <= v25) {
        break;
      }
      unint64_t v28 = 0;
      float v29 = &this[v25 + 4];
      while (1)
      {
        unint64_t v30 = v29->value != 0;
        if (v29->value) {
          uint64_t v31 = 2;
        }
        else {
          uint64_t v31 = 1;
        }
        if (*(void *)&v29->timescale) {
          unint64_t v30 = v31;
        }
        if (v29->epoch) {
          ++v30;
        }
        if (v28 >= v30) {
          break;
        }
        if (v24 <= v25) {
          goto LABEL_145;
        }
        objc_msgSend(v22, "appendFormat:", @"\n  Plane %zu of %zu:", v28 + 1, v30);
        unint64_t v33 = *(void *)&this[3].timescale;
        if (v33 <= v25) {
          goto LABEL_146;
        }
        uint64_t v162 = 0;
        re::VideoObject<re::VideoTextureBase>::setRef((int)&v162, &v162, *((CVPixelBufferRef *)&v26->value + v28));
        re::VideoTextureBase::metalTexture(&v162, buf);
        int v2 = *(__CFString **)buf;
        re::CoreVideoUtils::printMetalTextureInfo(*(void **)buf, v22);
        if (v2) {

        }
        if (v162) {
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v162);
        }
        unint64_t v24 = *(void *)&this[3].timescale;
        ++v28;
        if (v24 <= v25) {
          goto LABEL_144;
        }
      }
      ++v26;
      ++v25;
      if (v3 >= v24) {
        goto LABEL_32;
      }
    }
LABEL_144:
    re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v24);
    _os_crash();
    __break(1u);
LABEL_145:
    re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v24);
    _os_crash();
    __break(1u);
LABEL_146:
    re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v33);
    _os_crash();
    __break(1u);
    goto LABEL_147;
  }
LABEL_32:
  long long v34 = *re::videoLogObjects(v23);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    id v35 = v22;
    long long v36 = v34;
    uint64_t v37 = [v35 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v37;
    _os_log_impl(&dword_233120000, v36, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  int v38 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Legacy Texture:"];

  unint64_t v40 = this[6].value;
  if (v40)
  {
    unint64_t v25 = 0;
    p_unint64_t epoch = &this[6].epoch;
    while (1)
    {
      unint64_t v3 = v25 + 1;
      unsigned int v39 = (re *)objc_msgSend(v38, "appendFormat:", @"\nLegacy Texture %zu of %zu:", v25 + 1, v40);
      unint64_t v40 = this[6].value;
      if (v40 <= v25) {
        break;
      }
      unint64_t v43 = 0;
      unsigned int v44 = &this[v25 + 6].epoch;
      while (1)
      {
        unint64_t v45 = *v44 != 0;
        if (*v44) {
          uint64_t v46 = 2;
        }
        else {
          uint64_t v46 = 1;
        }
        if (v44[1]) {
          unint64_t v45 = v46;
        }
        if (v44[2]) {
          ++v45;
        }
        if (v43 >= v45) {
          break;
        }
        if (v40 <= v25) {
          goto LABEL_148;
        }
        objc_msgSend(v38, "appendFormat:", @"\n  Plane %zu of %zu:", v43 + 1, v45);
        unint64_t v48 = this[6].value;
        if (v48 <= v25) {
          goto LABEL_149;
        }
        uint64_t v162 = 0;
        re::VideoObject<re::VideoTextureBase>::setRef((int)&v162, &v162, (CVPixelBufferRef)p_epoch[v43]);
        re::VideoTextureBase::metalTexture(&v162, buf);
        int v2 = *(__CFString **)buf;
        re::CoreVideoUtils::printMetalTextureInfo(*(void **)buf, v38);
        if (v2) {

        }
        if (v162) {
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v162);
        }
        unint64_t v40 = this[6].value;
        ++v43;
        if (v40 <= v25) {
          goto LABEL_147;
        }
      }
      p_epoch += 3;
      ++v25;
      if (v3 >= v40) {
        goto LABEL_55;
      }
    }
LABEL_147:
    re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v40);
    _os_crash();
    __break(1u);
LABEL_148:
    re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v40);
    _os_crash();
    __break(1u);
LABEL_149:
    re::internal::assertLog((re::internal *)6, v47, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v48);
    _os_crash();
    __break(1u);
    goto LABEL_150;
  }
LABEL_55:
  __int16 v49 = *re::videoLogObjects(v39);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    id v50 = v38;
    uint64_t v51 = v49;
    uint64_t v52 = [v50 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v52;
    _os_log_impl(&dword_233120000, v51, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  uint64_t v53 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Pixel Format Description:"];

  unint64_t epoch = this[22].epoch;
  if (epoch)
  {
    unint64_t v3 = 0;
    p_timescale = (const __CFDictionary **)&this[23].timescale;
    CFStringRef v57 = (const __CFString *)*MEMORY[0x263F04288];
    int v2 = @"\nPixel Format Description %zu of %zu:";
    do
    {
      unint64_t v58 = v3 + 1;
      objc_msgSend(v53, "appendFormat:", @"\nPixel Format Description %zu of %zu:", v3 + 1, epoch);
      unint64_t v60 = this[22].epoch;
      if (v60 <= v3) {
        goto LABEL_154;
      }
      CFDictionaryRef v61 = *p_timescale;
      id v62 = v53;
      id v63 = v62;
      if (v61)
      {
        BOOL v64 = re::VideoPixelFormatDescriptionBase::BOOLeanValue(p_timescale, v57, 0);
        float v65 = "false";
        if (v64) {
          float v65 = "true";
        }
        objc_msgSend(v63, "appendFormat:", @"\n Contains Alpha: %s", v65);
      }
      else
      {
        [v62 appendString:@"\nInvalid pixel format description."];
      }

      unint64_t epoch = this[22].epoch;
      ++p_timescale;
      unint64_t v3 = v58;
    }
    while (v58 < epoch);
  }
  int v66 = *re::videoLogObjects(v54);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    id v67 = v53;
    unint64_t v68 = v66;
    uint64_t v69 = [v67 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v69;
    _os_log_impl(&dword_233120000, v68, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  int v2 = (__CFString *)0x263F08000;
  unsigned int v70 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Metadata:"];

  int v72 = *re::videoLogObjects(v71);
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    id v73 = v70;
    BOOL v74 = v72;
    uint64_t v75 = [v73 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v75;
    _os_log_impl(&dword_233120000, v74, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  unint64_t v76 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Light Spill:"];

  unint64_t v78 = *(void *)&this[11].timescale;
  if (v78)
  {
    int v2 = 0;
    do
    {
      int v79 = (char *)&v2->isa + 1;
      objc_msgSend(v76, "appendFormat:", @"\nLight Spill Diffuse Pixel Buffer %zu of %zu", (char *)&v2->isa + 1, v78);
      unint64_t v82 = *(void *)&this[11].timescale;
      if (v82 <= (unint64_t)v2) {
        goto LABEL_155;
      }
      re::CoreVideoUtils::printPixelBufferInfo(*((re::CoreVideoUtils **)&this[12].value + (void)v2), (__CVBuffer *)v76, v81);
      unint64_t v78 = *(void *)&this[11].timescale;
      int v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v79 < v78);
  }
  unint64_t v83 = this[12].epoch;
  if (v83)
  {
    int v2 = 0;
    do
    {
      uint64_t v84 = (char *)&v2->isa + 1;
      objc_msgSend(v76, "appendFormat:", @"\nLight Spill Specular Pixel Buffer %zu of %zu", (char *)&v2->isa + 1, v83);
      unint64_t v87 = this[12].epoch;
      if (v87 <= (unint64_t)v2) {
        goto LABEL_156;
      }
      re::CoreVideoUtils::printPixelBufferInfo(*((re::CoreVideoUtils **)&this[13].timescale + (void)v2), (__CVBuffer *)v76, v86);
      unint64_t v83 = this[12].epoch;
      int v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v84 < v83);
  }
  unint64_t v88 = this[14].value;
  if (v88)
  {
    unint64_t v25 = 0;
    id v89 = &this[14].epoch;
    while (1)
    {
      unint64_t v3 = v25 + 1;
      uint64_t v77 = (re *)objc_msgSend(v76, "appendFormat:", @"\nLight Spill Texture %zu of %zu:", v25 + 1, v88);
      unint64_t v88 = this[14].value;
      if (v88 <= v25) {
        break;
      }
      unint64_t v91 = 0;
      uint64_t v92 = &this[v25 + 14].epoch;
      while (1)
      {
        unint64_t v93 = *v92 != 0;
        if (*v92) {
          uint64_t v94 = 2;
        }
        else {
          uint64_t v94 = 1;
        }
        if (v92[1]) {
          unint64_t v93 = v94;
        }
        if (v92[2]) {
          ++v93;
        }
        if (v91 >= v93) {
          break;
        }
        if (v88 <= v25) {
          goto LABEL_151;
        }
        objc_msgSend(v76, "appendFormat:", @"\n  Plane %zu of %zu:", v91 + 1, v93);
        unint64_t v96 = this[14].value;
        if (v96 <= v25) {
          goto LABEL_152;
        }
        uint64_t v162 = 0;
        re::VideoObject<re::VideoTextureBase>::setRef((int)&v162, &v162, (CVPixelBufferRef)v89[v91]);
        re::VideoTextureBase::metalTexture(&v162, buf);
        int v2 = *(__CFString **)buf;
        re::CoreVideoUtils::printMetalTextureInfo(*(void **)buf, v76);
        if (v2) {

        }
        if (v162) {
          re::VideoObjectBase<re::VideoTextureBase,__CVBuffer *>::release(&v162);
        }
        unint64_t v88 = this[14].value;
        ++v91;
        if (v88 <= v25) {
          goto LABEL_150;
        }
      }
      v89 += 3;
      ++v25;
      if (v3 >= v88) {
        goto LABEL_99;
      }
    }
LABEL_150:
    re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v88);
    _os_crash();
    __break(1u);
LABEL_151:
    re::internal::assertLog((re::internal *)6, v90, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v88);
    _os_crash();
    __break(1u);
LABEL_152:
    re::internal::assertLog((re::internal *)6, v95, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v25, v96);
    _os_crash();
    __break(1u);
LABEL_153:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v17);
    _os_crash();
    __break(1u);
LABEL_154:
    re::internal::assertLog((re::internal *)6, v59, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v60);
    _os_crash();
    __break(1u);
LABEL_155:
    re::internal::assertLog((re::internal *)6, v80, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v82);
    _os_crash();
    __break(1u);
LABEL_156:
    re::internal::assertLog((re::internal *)6, v85, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v87);
    _os_crash();
    __break(1u);
LABEL_157:
    re::internal::assertLog((re::internal *)6, v99, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v100);
    _os_crash();
    __break(1u);
LABEL_158:
    re::internal::assertLog((re::internal *)6, v103, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v104);
    _os_crash();
    __break(1u);
LABEL_159:
    re::internal::assertLog((re::internal *)6, v136, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v2, v137);
    _os_crash();
    __break(1u);
    goto LABEL_160;
  }
LABEL_99:
  unint64_t v97 = this[16].epoch;
  if (v97)
  {
    int v2 = 0;
    do
    {
      double v98 = (char *)&v2->isa + 1;
      objc_msgSend(v76, "appendFormat:", @"\nLight Spill Diffuse Texture %zu of %zu:", (char *)&v2->isa + 1, v97);
      unint64_t v100 = this[16].epoch;
      if (v100 <= (unint64_t)v2) {
        goto LABEL_157;
      }
      re::CoreVideoUtils::printMetalTextureInfo(*((void **)&this[17].timescale + (void)v2), v76);
      unint64_t v97 = this[16].epoch;
      int v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v98 < v97);
  }
  unint64_t v101 = this[18].value;
  if (v101)
  {
    int v2 = 0;
    do
    {
      long long v102 = (char *)&v2->isa + 1;
      objc_msgSend(v76, "appendFormat:", @"\nLight Spill Specular Texture %zu of %zu:", (char *)&v2->isa + 1, v101);
      unint64_t v104 = this[18].value;
      if (v104 <= (unint64_t)v2) {
        goto LABEL_158;
      }
      re::CoreVideoUtils::printMetalTextureInfo(*((void **)&this[18].epoch + (void)v2), v76);
      unint64_t v101 = this[18].value;
      int v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v102 < v101);
  }
  float v105 = *re::videoLogObjects(v77);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    id v106 = v76;
    uint64_t v107 = v105;
    uint64_t v108 = [v106 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v108;
    _os_log_impl(&dword_233120000, v107, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  uint64_t v109 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Cropping Rectangles:"];

  unint64_t v111 = this[20].epoch;
  if (v111)
  {
    unint64_t v3 = 0;
    float v112 = (float *)&this[21].epoch + 1;
    while (1)
    {
      unint64_t v113 = v3 + 1;
      objc_msgSend(v109, "appendFormat:", @"\nCropping Rectangle %zu of %zu:", v3 + 1, v111);
      unint64_t v115 = this[20].epoch;
      if (v115 <= v3) {
        break;
      }
      objc_msgSend(v109, "appendFormat:", @"\n       X: %f", *(v112 - 3));
      unint64_t v117 = this[20].epoch;
      if (v117 <= v3) {
        goto LABEL_161;
      }
      objc_msgSend(v109, "appendFormat:", @"\n       Y: %f", *(v112 - 2));
      unint64_t v119 = this[20].epoch;
      if (v119 <= v3) {
        goto LABEL_162;
      }
      objc_msgSend(v109, "appendFormat:", @"\n   Width: %f", *(v112 - 1));
      unint64_t v121 = this[20].epoch;
      if (v121 <= v3) {
        goto LABEL_163;
      }
      float v122 = *v112;
      v112 += 4;
      float v110 = (re *)objc_msgSend(v109, "appendFormat:", @"\n  Height: %f", v122);
      unint64_t v111 = this[20].epoch;
      ++v3;
      if (v113 >= v111) {
        goto LABEL_116;
      }
    }
LABEL_160:
    re::internal::assertLog((re::internal *)6, v114, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v115);
    _os_crash();
    __break(1u);
LABEL_161:
    re::internal::assertLog((re::internal *)6, v116, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v117);
    _os_crash();
    __break(1u);
LABEL_162:
    re::internal::assertLog((re::internal *)6, v118, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v119);
    _os_crash();
    __break(1u);
LABEL_163:
    re::internal::assertLog((re::internal *)6, v120, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v3, v121);
    _os_crash();
    __break(1u);
  }
LABEL_116:
  unint64_t v123 = *re::videoLogObjects(v110);
  BOOL v124 = os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT);
  if (v124)
  {
    id v125 = v109;
    uint64_t v126 = v123;
    uint64_t v127 = [v125 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v127;
    _os_log_impl(&dword_233120000, v126, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  size_t v128 = *re::videoLogObjects((re *)v124);
  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
  {
    CMTimeValue v129 = this[24].value;
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v129;
    _os_log_impl(&dword_233120000, v128, OS_LOG_TYPE_DEFAULT, "Presentation Group Protection Options: %llu", buf, 0xCu);
  }
  uint64_t v130 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Color Gamut:"];

  objc_msgSend(v130, "appendFormat:", @"\n        Color Gamut: %s (%d)", "(undefined)", LOBYTE(this[24].timescale));
  objc_msgSend(v130, "appendFormat:", @"\n              Width: %zu", this[24].epoch);
  objc_msgSend(v130, "appendFormat:", @"\n             Height: %zu", this[25].value);
  if (LOBYTE(this[28].value)) {
    int v131 = "Yes";
  }
  else {
    int v131 = "No";
  }
  objc_msgSend(v130, "appendFormat:", @"\n                HDR: %s", v131);
  objc_msgSend(v130, "appendFormat:", @"\n        Stereo Mode: (%d)", HIDWORD(this[28].value));
  objc_msgSend(v130, "appendFormat:", @"\n       YCbCr Matrix: (%d)", this[28].timescale);
  v132 = (re *)objc_msgSend(v130, "appendFormat:", @"\n     Image Function: (%d)", this[28].flags);
  unint64_t v133 = this[28].epoch;
  if (v133)
  {
    int v2 = 0;
    unint64_t v134 = (CFArrayRef *)&this[29].timescale;
    do
    {
      uint64_t v135 = (char *)&v2->isa + 1;
      objc_msgSend(v130, "appendFormat:", @"\nColor Transform %zu of %zu:", (char *)&v2->isa + 1, v133);
      unint64_t v137 = this[28].epoch;
      if (v137 <= (unint64_t)v2) {
        goto LABEL_159;
      }
      re::CoreVideoUtils::printColorTransformInfo(v134, v130);
      unint64_t v133 = this[28].epoch;
      ++v134;
      int v2 = (__CFString *)((char *)v2 + 1);
    }
    while ((unint64_t)v135 < v133);
  }
  long long v138 = *re::videoLogObjects(v132);
  if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
  {
    id v139 = v130;
    id v140 = v138;
    uint64_t v141 = [v139 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v141;
    _os_log_impl(&dword_233120000, v140, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  id v142 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Histogram:"];

  unint64_t v144 = this[32].value;
  if (v144)
  {
    uint64_t v145 = 0;
    float v146 = &this[32].epoch;
    do
    {
      unint64_t v147 = v145 + 1;
      if (v146[v145])
      {
        objc_msgSend(v142, "appendFormat:", @"\nHistogram %zu of %zu:", v145 + 1, v144);
        objc_msgSend(v142, "appendFormat:", @"\n            Bin Count: %zu", *(void *)re::VideoHistogram::data((re::VideoHistogram *)v146[v145]));
        objc_msgSend(v142, "appendFormat:", @"\n      Color Primaries: %s", "(undefined)");
        objc_msgSend(v142, "appendFormat:", @"\n    Transfer Function: %s", "(undefined)");
        objc_msgSend(v142, "appendFormat:", @"\n         YCbCr Matrix: %s", "(undefined)");
        float v148 = "Yes";
        if (!*(unsigned char *)(v146[v145] + 37)) {
          float v148 = "NO";
        }
        float v143 = (re *)objc_msgSend(v142, "appendFormat:", @"\n        DOLBY Content: %s", v148);
        unint64_t v144 = this[32].value;
      }
      ++v145;
    }
    while (v147 < v144);
  }
  char v149 = *re::videoLogObjects(v143);
  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
  {
    id v150 = v142;
    unsigned int v151 = v149;
    uint64_t v152 = [v150 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v152;
    _os_log_impl(&dword_233120000, v151, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  int v153 = [MEMORY[0x263F089D8] stringWithString:@"Presentation Group Horizontal Disparity:"];

  unint64_t v155 = *(void *)&this[35].timescale;
  if (v155)
  {
    unint64_t v156 = 0;
    do
    {
      unint64_t v157 = v156 + 1;
      v154 = (re *)objc_msgSend(v153, "appendFormat:", @"\nHorizontal Disparity Adjustment %zu of %zu: %f", v156 + 1, v155, *((float *)&this[35].epoch + v156 + 1));
      unint64_t v155 = *(void *)&this[35].timescale;
      unint64_t v156 = v157;
    }
    while (v157 < v155);
  }
  unsigned int v158 = *re::videoLogObjects(v154);
  if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
  {
    id v159 = v153;
    uint64_t v160 = v158;
    uint64_t v161 = [v159 cStringUsingEncoding:1];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v161;
    _os_log_impl(&dword_233120000, v160, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
}

uint64_t re::CoreVideoUtils::isFullRange(re::CoreVideoUtils *this)
{
  int v1 = re::CoreVideoUtils::uncompressedPixelFormat(this);
  uint64_t result = 1;
  if (v1 > 1886676527)
  {
    if (v1 > 1952854575)
    {
      if (v1 <= 2019963503)
      {
        if (v1 == 1952854576 || v1 == 2019963440) {
          return result;
        }
        unsigned __int16 v4 = 12850;
      }
      else
      {
        if (v1 > 2019964015)
        {
          if (v1 == 2019964016) {
            return result;
          }
          int v5 = 2037741158;
LABEL_38:
          if (v1 == v5) {
            return result;
          }
          return 0;
        }
        if (v1 == 2019963504) {
          return result;
        }
        unsigned __int16 v4 = 13364;
      }
      int v5 = v4 | 0x78660000;
      goto LABEL_38;
    }
    if (v1 > 1936077359)
    {
      if (v1 != 1936077360 && v1 != 1936077362)
      {
        int v5 = 1936077876;
        goto LABEL_38;
      }
    }
    else
    {
      unsigned int v6 = v1 - 1886676528;
      if (v6 > 4 || ((1 << v6) & 0x15) == 0) {
        return 0;
      }
    }
  }
  else if (v1 <= 1714696751)
  {
    if (v1 > 875704933)
    {
      if (v1 != 875704934 && v1 != 875836518)
      {
        int v5 = 1714630712;
        goto LABEL_38;
      }
    }
    else if (v1 != 846624102 && v1 != 875639142)
    {
      int v5 = 875704422;
      goto LABEL_38;
    }
  }
  else
  {
    if (v1 > 1751528499)
    {
      if (v1 > 1885745713)
      {
        if (v1 == 1885745714) {
          return result;
        }
        unsigned __int16 v3 = 13364;
      }
      else
      {
        if (v1 == 1751528500) {
          return result;
        }
        unsigned __int16 v3 = 12848;
      }
      int v5 = v3 | 0x70660000;
      goto LABEL_38;
    }
    if (v1 != 1714696752 && v1 != 1751527984)
    {
      int v5 = 1751527986;
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t re::CoreVideoUtils::isConvertibleToLinearRGBColorModel(int a1)
{
  uint64_t result = 1;
  if ((a1 - 500) > 0x1E || ((1 << (a1 + 12)) & 0x7ED007ED) == 0)
  {
    unsigned int v3 = a1 - 564;
    BOOL v4 = a1 == 10;
    return v3 < 6 || v4;
  }
  return result;
}

uint64_t re::CoreVideoUtils::convertToLinearRGBColorModel(re *a1)
{
  int v1 = a1;
  uint64_t v7 = *MEMORY[0x263EF8340];
  switch((int)a1)
  {
    case 500:
    case 502:
    case 503:
      return 80;
    case 501:
    case 504:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 521:
    case 524:
      goto LABEL_8;
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
      return 94;
    case 520:
    case 522:
    case 523:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
      return 115;
    default:
      if ((a1 - 564) < 6) {
        return 115;
      }
      if (a1 != 10)
      {
LABEL_8:
        unsigned int v3 = *re::videoLogObjects(a1);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          BOOL v4 = v3;
          int v5 = 136315138;
          uint64_t Name = MTLPixelFormatGetName();
          _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Unable to convert pixel format '%s' to linear RGB color model.", (uint8_t *)&v5, 0xCu);
        }
      }
      return (uint64_t)v1;
  }
}

uint64_t re::CoreVideoUtils::colorSpaceNameFromColorTags(re::CoreVideoUtils *this, int a2, unsigned __int8 a3, int a4)
{
  int v4 = (int)this;
  uint64_t result = 0;
  if (v4 > 11)
  {
    if (v4 == 13)
    {
      uint64_t v6 = MEMORY[0x263F00230];
      if (a2 != 8) {
        uint64_t v6 = MEMORY[0x263F00238];
      }
      uint64_t v7 = MEMORY[0x263F002C8];
      if (a2 != 8) {
        uint64_t v7 = MEMORY[0x263F002D8];
      }
      goto LABEL_30;
    }
    if (v4 != 12) {
      return result;
    }
    if (a2 == 18)
    {
      uint64_t v6 = MEMORY[0x263F001F0];
    }
    else
    {
      if (a2 != 16)
      {
        if (a2 == 8)
        {
          uint64_t v6 = MEMORY[0x263F00218];
          uint64_t v7 = MEMORY[0x263F002B0];
        }
        else
        {
          uint64_t v6 = MEMORY[0x263F00200];
          uint64_t v7 = MEMORY[0x263F001E8];
        }
        goto LABEL_30;
      }
      uint64_t v6 = MEMORY[0x263F001F8];
    }
  }
  else
  {
    if (v4 == 1)
    {
      uint64_t v6 = MEMORY[0x263F002A8];
      uint64_t v8 = MEMORY[0x263F002A0];
      if (a2 != 18) {
        uint64_t v8 = MEMORY[0x263F00298];
      }
      if (a2 != 16) {
        uint64_t v6 = v8;
      }
      return *(void *)v6;
    }
    if (v4 != 9) {
      return result;
    }
    if (a2 == 18)
    {
      uint64_t v6 = MEMORY[0x263F00288];
    }
    else
    {
      if (a2 != 16)
      {
        if (a2 == 8)
        {
          uint64_t v6 = MEMORY[0x263F00228];
          uint64_t v7 = MEMORY[0x263F002C0];
        }
        else
        {
          uint64_t v6 = MEMORY[0x263F00210];
          uint64_t v7 = MEMORY[0x263F00278];
        }
LABEL_30:
        if (!a4) {
          uint64_t v6 = v7;
        }
        return *(void *)v6;
      }
      uint64_t v6 = MEMORY[0x263F00290];
    }
  }
  return *(void *)v6;
}

uint64_t re::CoreVideoUtils::convertToGammaSpaceRGBColorModel(re::CoreVideoUtils *this)
{
  uint64_t v1 = 1111970369;
  int v2 = re::CoreVideoUtils::uncompressedPixelFormat(this);
  if (v2 > 1380401728)
  {
    if (v2 > 1999843441)
    {
      if (v2 == 1999843442 || v2 == 2019963440) {
        return 1815162994;
      }
      int v3 = 2016686640;
LABEL_17:
      if (v2 == v3) {
        return 1815162994;
      }
      return 1380411457;
    }
    if (v2 != 1380401729)
    {
      if (v2 == 1882468912) {
        return 1815162994;
      }
      int v3 = 1885745712;
      goto LABEL_17;
    }
  }
  else if (v2 > 875704421)
  {
    if (v2 != 875704422 && v2 != 875704438 && v2 != 1111970369) {
      return 1380411457;
    }
  }
  else if (v2 != 641230384 && v2 != 641234480)
  {
    int v3 = 645428784;
    goto LABEL_17;
  }
  return v1;
}

uint64_t re::CoreVideoUtils::canConvertToGammaSpaceRGBColorModel(re::CoreVideoUtils *this)
{
  int v1 = re::CoreVideoUtils::uncompressedPixelFormat(this);
  uint64_t result = 1;
  if (v1 <= 1380401728)
  {
    if (v1 > 875704421)
    {
      if (v1 != 875704422 && v1 != 875704438)
      {
        int v3 = 1111970369;
LABEL_18:
        if (v1 != v3) {
          return 0;
        }
      }
    }
    else if (v1 != 641230384 && v1 != 641234480)
    {
      int v3 = 645428784;
      goto LABEL_18;
    }
  }
  else
  {
    if (v1 > 1885745711)
    {
      if (v1 > 2016686639)
      {
        if (v1 == 2016686640) {
          return result;
        }
        int v3 = 2019963440;
      }
      else
      {
        if (v1 == 1885745712) {
          return result;
        }
        int v3 = 1999843442;
      }
      goto LABEL_18;
    }
    if (v1 != 1380401729 && v1 != 1380411457)
    {
      int v3 = 1882468912;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::VideoPSEProcessor::NeedsProcessing(re::VideoPSEProcessor *this)
{
  return [MEMORY[0x263F5E4E8] needsProcessing];
}

void re::VideoPSEProcessor::init(re::VideoPSEProcessor *this)
{
  if (!*(void *)this)
  {
    int v2 = re::globalAllocators(this);
    int v3 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 8, 8);
    *int v3 = 0;
    uint64_t v4 = objc_opt_new();
    int v5 = (void *)*v3;
    *int v3 = v4;

    *(void *)this = v3;
  }
}

uint64_t re::VideoPSEProcessor::Processor::process(re *a1, __IOSurface **this, uint64_t *a3, double a4, float a5, float a6)
{
  v27[3] = *MEMORY[0x263EF8340];
  if (*this) {
    BOOL v6 = *a3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    uint64_t v7 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "Unable to process PSE. Input is invalid.", v25, 2u);
    }
    return 1;
  }
  else
  {
    *(float *)&double v14 = re::VideoSurfaceBase::edrFactor(this);
    uint64_t v15 = *(void **)a1;
    float v16 = *this;
    uint64_t v17 = *a3;
    v26[0] = @"sourceSurfaceEDR";
    float v18 = [NSNumber numberWithFloat:v14];
    v27[0] = v18;
    v26[1] = @"displayMaxNits";
    *(float *)&double v19 = a5;
    float v20 = [NSNumber numberWithFloat:v19];
    v27[1] = v20;
    _DWORD v26[2] = @"displayEDRFactor";
    *(float *)&double v21 = a6;
    uint64_t v22 = [NSNumber numberWithFloat:v21];
    v27[2] = v22;
    float v23 = [NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:3];
    [v15 processSourceSurface:v16 withTimestamp:v17 toDestinationSurface:v23 options:a4];

    return 0;
  }
}

void re::VideoTextureBase::metalTexture(__CVBuffer **this@<X0>, void *a2@<X8>)
{
  int v3 = *this;
  if (v3)
  {
    uint64_t v4 = CVMetalTextureGetTexture(v3);
    id v5 = v4;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *a2 = v4;
}

void CFDictionarySetInt32(__CFDictionary *a1, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

CFNumberRef CFDictionaryGetInt32(const __CFDictionary *a1, const __CFString *a2)
{
  unsigned int valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

uint64_t re::VideoLightSpillSessionRegister(re *this)
{
  qword_26AF9FDA0 = 0;
  qword_26AF9FDA8 = (uint64_t)"VideoLightSpillSession";
  unk_26AF9FDB0 = re::VideoLightSpillSessionConstructor;
  qword_26AF9FDB8 = 0;
  unk_26AF9FDC0 = re::VideoLightSpillSessionDestructor;
  xmmword_26AF9FDC8 = 0u;
  unk_26AF9FDD8 = 0u;
  uint64_t result = _CFRuntimeRegisterClass();
  _MergedGlobals_513 = result;
  return result;
}

uint64_t re::VideoLightSpillSessionCreate(re *this, const __CFAllocator *a2, const __CFDictionary *a3)
{
  if (_CFRuntimeCreateInstance())
  {
    if (this)
    {
      if (CFDictionaryContainsKey(this, @"SpillmapWidth")) {
        CFDictionaryGetInt32(this, @"SpillmapWidth");
      }
      if (CFDictionaryContainsKey(this, @"SpillmapHeight")) {
        CFDictionaryGetInt32(this, @"SpillmapHeight");
      }
      if (CFDictionaryContainsKey(this, @"SpillmapLayout")) {
        CFDictionaryGetInt32(this, @"SpillmapLayout");
      }
      if (CFDictionaryContainsKey(this, @"SpillmapIntermediateWidth")) {
        CFDictionaryGetInt32(this, @"SpillmapIntermediateWidth");
      }
      if (CFDictionaryContainsKey(this, @"SpillmapIntermediateHeight")) {
        CFDictionaryGetInt32(this, @"SpillmapIntermediateHeight");
      }
      if (CFDictionaryContainsKey(this, @"SpillmapIntermediateBlurSigma")) {
        CFDictionaryGetInt32(this, @"SpillmapIntermediateBlurSigma");
      }
    }
    operator new();
  }
  return 0;
}

void re::VideoLightSpillGenerator::WarmUp(re::VideoLightSpillGenerator *this)
{
  if (re::VideoLightSpillGenerator::WarmUp(void)::onceToken != -1) {
    dispatch_once(&re::VideoLightSpillGenerator::WarmUp(void)::onceToken, &__block_literal_global_59);
  }
}

void ___ZN2re24VideoLightSpillGenerator6WarmUpEv_block_invoke(uint64_t a1, const __CFAllocator *a2, const __CFDictionary *a3)
{
  int v3 = (const void *)re::VideoLightSpillSessionCreate(0, a2, a3);
  if (v3)
  {
    CFRelease(v3);
  }
  else
  {
    uint64_t v4 = *re::videoLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoLightSpillSessionPrewarm] Video light spill session creation failed during session pre-warm", buf, 2u);
    }
  }
  id v5 = MTLCreateSystemDefaultDevice();
  BOOL v6 = v5;
  if (v5)
  {
    uint64_t v7 = (void *)[v5 newCommandQueue];
    uint64_t v8 = v7;
    if (!v7)
    {
      double v21 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoLightSpillMPSCallsPrewarm] Failed to get a metal command queue", buf, 2u);
      }
      goto LABEL_28;
    }
    uint64_t v9 = [v7 commandBuffer];
    if (!v9)
    {
      uint64_t v22 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoLightSpillMPSCallsPrewarm] Failed to get a metal command buffer", buf, 2u);
      }
      goto LABEL_27;
    }
    int v29 = 0;
    *(_OWORD *)buf = 0u;
    long long v28 = 0u;
    uint64_t v30 = 0x7FFFFFFFLL;
    uint64_t v31 = 0;
    re::VideoTextureAllocator::createTextureInternal((uint64_t)buf, 8, 8, 81, 2, 3u, 0, 0, (unint64_t *)v26, 0);
    id v10 = *(id *)v26;
    uint64_t v11 = v10;
    if (v10)
    {

      re::VideoTextureAllocator::createTextureInternal((uint64_t)buf, 8, 8, 81, 2, 3u, 0, 0, (unint64_t *)v26, 0);
      id v12 = *(id *)v26;
      if (v12)
      {
        int v13 = v12;

        re::VideoTextureAllocator::createTextureInternal((uint64_t)buf, 8, 8, 81, 2, 3u, 0, 0, (unint64_t *)v26, 0);
        id v14 = *(id *)v26;
        if (v14)
        {
          uint64_t v15 = v14;

          float v16 = (void *)[objc_alloc(MEMORY[0x263F13240]) initWithDevice:v6];
          [v16 encodeToCommandBuffer:v9 sourceTexture:v11 destinationTexture:v13];
          id v17 = objc_alloc(MEMORY[0x263F13288]);
          LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = 3.0;
          double v19 = (void *)[v17 initWithDevice:v6 sigma:v18];
          [v19 encodeToCommandBuffer:v9 sourceTexture:v13 destinationTexture:v15];
          [v9 commit];
          [v9 waitUntilScheduled];
        }
        else
        {
          unint64_t v25 = *re::videoLogObjects(0);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)float v26 = 0;
            _os_log_error_impl(&dword_233120000, v25, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoLightSpillMPSCallsPrewarm] Failed to create gaussian blur output texture", v26, 2u);
          }
        }

        goto LABEL_26;
      }
      float v23 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)float v26 = 0;
        unint64_t v24 = "[VideoLightSpillGenerator] [VideoLightSpillMPSCallsPrewarm] Failed to create bilinear scale output texture";
        goto LABEL_22;
      }
    }
    else
    {
      float v23 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)float v26 = 0;
        unint64_t v24 = "[VideoLightSpillGenerator] [VideoLightSpillMPSCallsPrewarm] Failed to create input texture";
LABEL_22:
        _os_log_error_impl(&dword_233120000, v23, OS_LOG_TYPE_ERROR, v24, v26, 2u);
      }
    }
LABEL_26:

    re::VideoTextureAllocator::~VideoTextureAllocator((void **)buf);
LABEL_27:

LABEL_28:
    goto LABEL_29;
  }
  float v20 = *re::videoLogObjects(0);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_233120000, v20, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoLightSpillMPSCallsPrewarm] Failed to get a metal device", buf, 2u);
  }
LABEL_29:
}

__CVBuffer *re::VideoLightSpillGenerator::CanGenerateForPixelBuffer(__CVBuffer **a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(result);
    return (__CVBuffer *)(+[VideoSpillMapMetalSession metalPixelFormatForPixelFormat:PixelFormatType withTransferFunction:(re::VideoPixelBufferBase::colorTags(a1) >> 16)] != 0);
  }
  return result;
}

uint64_t re::VideoLightSpillGenerator::setupSession(re::VideoLightSpillGenerator *this, int a2, int a3, int a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v23 = a3;
  int valuePtr = a2;
  int v22 = a4;
  uint64_t v8 = (re *)re::VideoDefaults::logEnabled(this);
  if (v8)
  {
    float v20 = *re::videoLogObjects(v8);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      int v26 = a2;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 1024;
      int v30 = a4;
      _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "[VideoSpillGenerator]->setupSession :: width %i : height %i : blurSigma %i", buf, 0x14u);
    }
  }
  uint64_t v9 = (void *)*((void *)this + 2);
  if (v9)
  {
    if (*(_DWORD *)this == a2 && *((_DWORD *)this + 1) == a3 && *((_DWORD *)this + 2) == a4) {
      return 0;
    }
    CFRelease(v9);
    *((void *)this + 2) = 0;
    *(void *)this = 0;
    *((_DWORD *)this + 2) = -1;
  }
  uint64_t v11 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v9);
  if (v11)
  {
    double v21 = *re::videoLogObjects(v11);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      int v26 = a2;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 1024;
      int v30 = a4;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "[VideoSpillGenerator]->setupSession :: Updating the spillGenerator session with width %i : height %i : blurSigma %i", buf, 0x14u);
    }
  }
  uint64_t result = 0;
  if (a2 >= 1 && a3 >= 1 && (a4 & 0x80000000) == 0)
  {
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFNumberRef v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v14 = CFNumberCreate(v12, kCFNumberSInt32Type, &v23);
    CFNumberRef v15 = CFNumberCreate(v12, kCFNumberSInt32Type, &v22);
    Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    CFDictionarySetValue(Mutable, @"SpillmapWidth", v13);
    CFDictionarySetValue(Mutable, @"SpillmapHeight", v14);
    CFDictionarySetValue(Mutable, @"SpillmapIntermediateBlurSigma", v15);
    *((void *)this + 2) = re::VideoLightSpillSessionCreate(Mutable, v17, v18);
    CFRelease(Mutable);
    CFRelease(v13);
    CFRelease(v14);
    CFRelease(v15);
    if (*((void *)this + 2))
    {
      uint64_t result = 0;
      int v19 = v23;
      *(_DWORD *)this = valuePtr;
      *((_DWORD *)this + 1) = v19;
      *((_DWORD *)this + 2) = v22;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t re::VideoLightSpillGenerator::generate(uint64_t this, __CVBuffer *a2, __CVBuffer **a3)
{
  int v3 = (int *)this;
  *(void *)&v60[5] = *MEMORY[0x263EF8340];
  if (!*(void *)(this + 16)) {
    goto LABEL_18;
  }
  *a3 = 0;
  uint64_t v5 = *(void *)(this + 16);
  if (!v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v5 + 16);
  if (!*(unsigned char *)(v7 + 64))
  {
    CFAllocatorRef v12 = (void *)MEMORY[0x237DBDCF0]();
    id v13 = *(id *)(v7 + 56);
    CFNumberRef v14 = (re *)[v13 configureSession:CVPixelBufferGetIOSurface(a2) setWidth:*(unsigned int *)(v7 + 80) setHeight:*(unsigned int *)(v7 + 84)];
    if (v14)
    {
      CFNumberRef v15 = *re::videoLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoSpillMapMetal::initializeTexture] Unable to configure light spill session", buf, 2u);
      }

      CFAllocatorRef v17 = *re::videoLogObjects(v16);
      this = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
      if (this)
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoSpillMapMetal::computeSpillMap] Unable to initialize textures", buf, 2u);
      }
      goto LABEL_18;
    }

    *(unsigned char *)(v7 + 64) = 1;
  }
  uint64_t v8 = (void *)MEMORY[0x237DBDCF0]();
  id v9 = *(id *)(v7 + 56);
  id v10 = (re *)[v9 calculateDrmSpillmapMetal:a2 emitSpillmap:a3 setLayout:*(unsigned int *)(v7 + 68) withAllocator:v7];
  if (v10)
  {
    uint64_t v11 = *re::videoLogObjects(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v11, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [VideoSpillMapMetal::computeSpillMap] Unable to compute light spill", buf, 2u);
    }

    goto LABEL_18;
  }

  this = re::VideoDefaults::lightSpillDumpEnabled(v18);
  if (!this) {
    goto LABEL_14;
  }
  CVPixelBufferGetIOSurface(a2);
  uint64_t ProtectionOptions = (re *)IOSurfaceGetProtectionOptions();
  unint64_t v25 = *re::videoLogObjects(ProtectionOptions);
  this = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
  if (!ProtectionOptions)
  {
    if (this)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] Light spill dumping is enabled and activated for this unprotected content", buf, 2u);
    }
    id v26 = objc_alloc_init(MEMORY[0x263F08790]);
    [v26 setDateFormat:@"yyyy-MM-dd-HH-mm-ss"];
    __int16 v27 = [MEMORY[0x263EFF910] date];
    uint64_t v28 = [v26 stringFromDate:v27];

    __int16 v29 = NSTemporaryDirectory();
    uint64_t v56 = (void *)v28;
    id v57 = [NSString stringWithFormat:@"%@video_lightspill_dump_%dx%d_%@.bgra", v29, *(unsigned int *)(v7 + 80), *(unsigned int *)(v7 + 84), v28];
    int v30 = [MEMORY[0x263F08850] defaultManager];
    id v58 = 0;
    [v30 createDirectoryAtPath:v29 withIntermediateDirectories:1 attributes:0 error:&v58];
    id v31 = v58;

    if (v31)
    {
      unint64_t v33 = *re::videoLogObjects(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] failed to create temporary directory", buf, 2u);
      }
    }
    else
    {
      id v55 = v57;
      id v35 = fopen((const char *)[v55 UTF8String], "wb+");
      *(void *)(v7 + 72) = v35;
      if (v35)
      {
        CVPixelBufferLockBaseAddress(*a3, 1uLL);
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(*a3);
        size_t Width = CVPixelBufferGetWidth(*a3);
        size_t Height = CVPixelBufferGetHeight(*a3);
        BytesPerRowOfPlane = (re *)CVPixelBufferGetBytesPerRowOfPlane(*a3, 0);
        if (Height)
        {
          unint64_t v40 = BytesPerRowOfPlane;
          while (1)
          {
            BytesPerRowOfPlane = (re *)fwrite(BaseAddress, 4uLL, Width, *(FILE **)(v7 + 72));
            if (BytesPerRowOfPlane != (re *)Width) {
              break;
            }
            BaseAddress = (char *)v40 + (void)BaseAddress;
            if (!--Height) {
              goto LABEL_38;
            }
          }
          uint64_t v51 = *re::videoLogObjects(BytesPerRowOfPlane);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_233120000, v51, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] Failed to write lightspill texture", buf, 2u);
          }
          int v34 = 0;
          int v19 = 0;
        }
        else
        {
LABEL_38:
          __int16 v41 = *re::videoLogObjects(BytesPerRowOfPlane);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            id v42 = v55;
            unint64_t v43 = v41;
            uint64_t v44 = [v42 UTF8String];
            *(_DWORD *)buf = 136315138;
            *(void *)unint64_t v60 = v44;
            _os_log_impl(&dword_233120000, v43, OS_LOG_TYPE_DEFAULT, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] dumping lightspill to %s", buf, 0xCu);
          }
          unint64_t v45 = (re *)fclose(*(FILE **)(v7 + 72));
          if (v45)
          {
            uint64_t v46 = *re::videoLogObjects(v45);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              id v52 = v55;
              uint64_t v53 = v46;
              uint64_t v54 = [v52 UTF8String];
              *(_DWORD *)buf = 136315138;
              *(void *)unint64_t v60 = v54;
              _os_log_error_impl(&dword_233120000, v53, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] failed to close file %s", buf, 0xCu);
            }
          }
          int v34 = 1;
          CVPixelBufferUnlockBaseAddress(*a3, 1uLL);
          int v19 = 11;
        }
LABEL_31:

        if (!v34) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      uint64_t v47 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        id v48 = v55;
        __int16 v49 = v47;
        uint64_t v50 = [v48 UTF8String];
        *(_DWORD *)buf = 136315138;
        *(void *)unint64_t v60 = v50;
        _os_log_error_impl(&dword_233120000, v49, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] failed to open file %s", buf, 0xCu);
      }
    }
    int v19 = 11;
    int v34 = 1;
    goto LABEL_31;
  }
  if (this)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "[VideoLightSpillGenerator] [lightSpillDumpEnabled] Light spill dumping is enabled from defaults write but deactivated due to content protection", buf, 2u);
  }
LABEL_14:
  int v19 = 0;
LABEL_15:
  if (!v19 && *a3) {
    return 0;
  }
LABEL_18:
  double v21 = *re::videoLogObjects((re *)this);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    int v22 = *v3;
    int v23 = v3[1];
    *(_DWORD *)buf = 67109376;
    v60[0] = v22;
    LOWORD(v60[1]) = 1024;
    *(_DWORD *)((char *)&v60[1] + 2) = v23;
    _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "[VideoLightSpillGenerator]->generate :: Could not generate light spill of size %d x %d", buf, 0xEu);
  }
  return 1;
}

uint64_t re::VideoLightSpillSessionDestructor(uint64_t this, const void *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(this + 16);
    if (v3)
    {
      if (*(void *)(v3 + 72)) {
        *(void *)(v3 + 72) = 0;
      }
      uint64_t v4 = *(const void **)(v3 + 56);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v3 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      }
      re::VideoTextureAllocator::~VideoTextureAllocator((void **)v3);
      this = MEMORY[0x237DBCBD0]();
    }
    *(void *)(v2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  return this;
}

unint64_t re::VideoColorUtils::hsvToRgb(uint64_t a1)
{
  float v3 = fmodf(*(float *)a1, 1.0) * 6.0;
  int v4 = (int)v3;
  LODWORD(v9) = *(_DWORD *)(a1 + 4);
  v5.i32[0] = *(_DWORD *)(a1 + 8);
  float v6 = v3 - (float)(int)v3;
  double v7 = *(float *)&v9;
  double v8 = 1.0 - *(float *)&v9;
  *(float *)&float64_t v9 = (1.0 - (float)(*(float *)&v9 * v6)) * *(float *)v5.i32;
  v10.f64[0] = 1.0 - v7 * (1.0 - v6);
  v10.f64[1] = v8;
  float64x2_t v11 = vmulq_n_f64(v10, *(float *)v5.i32);
  *(float32x2_t *)&v11.f64[0] = vcvt_f32_f64(v11);
  switch(v4)
  {
    case 0:
      *(void *)&float64_t v9 = vextq_s8(vextq_s8(v5, v5, 4uLL), (int8x16_t)v11, 0xCuLL).u64[0];
      return *(void *)&v9;
    case 1:
      HIDWORD(v9) = *(_DWORD *)(a1 + 8);
      return *(void *)&v9;
    case 2:
      LODWORD(v9) = vuzp2q_s32((int32x4_t)v11, vzip1q_s32((int32x4_t)v11, (int32x4_t)v11)).u32[0];
      HIDWORD(v9) = *(_DWORD *)(a1 + 8);
      return *(void *)&v9;
    case 3:
      LODWORD(v11.f64[0]) = vdup_lane_s32(*(int32x2_t *)&v11.f64[0], 1).u32[0];
      HIDWORD(v11.f64[0]) = LODWORD(v9);
      goto LABEL_9;
    case 4:
      goto LABEL_9;
    case 5:
      LODWORD(v11.f64[0]) = *(_DWORD *)(a1 + 8);
LABEL_9:
      float64_t v9 = v11.f64[0];
      break;
    default:
      CFAllocatorRef v12 = *re::videoLogObjects(v2);
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      float64_t v9 = 0.0;
      if (v13)
      {
        *(_WORD *)CFNumberRef v15 = 0;
        _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "Unable to convert HSV to RGB", v15, 2u);
        float64_t v9 = 0.0;
      }
      break;
  }
  return *(void *)&v9;
}

__n64 re::VideoColorUtils::rgbToHsv(float *a1)
{
  float v1 = *a1;
  float v2 = a1[1];
  float v3 = a1[2];
  if (*a1 < v2 || v1 < v3)
  {
    if (v2 >= v1) {
      float v5 = *a1;
    }
    else {
      float v5 = a1[1];
    }
    if (v1 >= v3) {
      float v6 = a1[2];
    }
    else {
      float v6 = *a1;
    }
    if (v2 < v1 || v2 < v3)
    {
      float v6 = v5;
      float v8 = a1[2];
    }
    else
    {
      float v8 = a1[1];
    }
  }
  else
  {
    if (v2 >= v3) {
      float v6 = a1[2];
    }
    else {
      float v6 = a1[1];
    }
    float v8 = *a1;
  }
  float v9 = 0.0;
  if (v8 <= 0.0)
  {
    float v16 = 0.0;
  }
  else
  {
    float v10 = v8 - v6;
    float v16 = (float)(v8 - v6) / v8;
    if (v16 != 0.0)
    {
      float v11 = (float)(v8 - v2) / v10;
      float v12 = (float)(v8 - v3) / v10;
      if (v8 == v1)
      {
        if (v6 == v2) {
          float v9 = v12 + 5.0;
        }
        else {
          float v9 = 1.0 - v11;
        }
      }
      else
      {
        BOOL v14 = v8 == v2;
        float v15 = (float)(v8 - v1) / v10;
        if (v14)
        {
          if (v6 == v3) {
            float v9 = v15 + 1.0;
          }
          else {
            float v9 = 3.0 - v12;
          }
        }
        else if (v6 == v1)
        {
          float v9 = v11 + 3.0;
        }
        else
        {
          float v9 = 5.0 - v15;
        }
      }
    }
  }
  result.n64_f32[0] = fmodf(v9 / 6.0, 1.0);
  result.n64_f32[1] = v16;
  return result;
}

void re::VideoASEFrameMeasurement::create(re::VideoASEFrameMeasurement *this@<X0>, void *a2@<X8>)
{
                                                            + 32))();
  re::VideoASEFrameMeasurement::VideoASEFrameMeasurement(v3);
  *a2 = v4;
}

void anonymous namespace'::videoASEFrameMeasurementAllocator(_anonymous_namespace_ *this)
{
  {
    if (v1)
    {
    }
  }
}

double re::VideoASEFrameMeasurement::VideoASEFrameMeasurement(re::VideoASEFrameMeasurement *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)this = &unk_26E722AC8;
  *((_DWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((unsigned char *)this + 28) = 0;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 39re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 780) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

void re::VideoASEProcessor::completionCallback(int a1, id *location)
{
  if (location)
  {
    WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      uint64_t v4 = (unsigned __int8 *)WeakRetained;
      float v5 = WeakRetained + 4;
      os_unfair_lock_lock(WeakRetained + 4);
      memcpy(v4 + 408, location + 1, 0x17CuLL);
      atomic_store(1u, v4 + 20);
      os_unfair_lock_unlock(v5);
    }
    id v6 = location[49];
    if (v6) {
      CFRelease(v6);
    }
    objc_destroyWeak(location);
    id *location = 0;
    float v8 = *(void (**)(void))(qword_26AF9FE08[0] + 40);
    v8();
  }
}

void anonymous namespace'::videoASECompletionContextAllocator(_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_514, memory_order_acquire) & 1) == 0)
  {
    float v1 = (_anonymous_namespace_ *)__cxa_guard_acquire(&_MergedGlobals_514);
    if (v1)
    {
      __cxa_guard_release(&_MergedGlobals_514);
    }
  }
}

uint64_t re::VideoASEProcessor::createConfig(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6, void *a7)
{
  *(void *)&v54[5] = *MEMORY[0x263EF8340];
  *(void *)&long long v51 = 0x400000001;
  *((void *)&v51 + 1) = __PAIR64__(a3, a2);
  unint64_t v52 = __PAIR64__(a5, a4);
  unint64_t v14 = re::Hash<re::VideoASEConfigurationKey>::operator()(&v51);
  if (*(void *)a1)
  {
    uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v14 % *(unsigned int *)(a1 + 24)));
    if (v15 != 0x7FFFFFFF)
    {
      uint64_t v16 = *(void *)(a1 + 16);
      while (1)
      {
        uint64_t v17 = v16 + 48 * v15;
        if (*(_DWORD *)(v17 + 20) == a2)
        {
          CFDictionaryRef v18 = (_DWORD *)(v17 + 12);
          if (v18[3] == a3
            && v18[1] == 4
            && *v18 == 1
            && *(_DWORD *)(v16 + 48 * v15 + 28) == a4
            && *(_DWORD *)(v16 + 48 * v15 + 32) == a5)
          {
            break;
          }
        }
        uint64_t v15 = *(_DWORD *)(v16 + 48 * v15 + 8) & 0x7FFFFFFF;
        if (v15 == 0x7FFFFFFF) {
          goto LABEL_11;
        }
      }
      id v35 = (_anonymous_namespace_ *)*(id *)(v16 + 48 * v15 + 40);
      int v34 = v35;
      if (!v35) {
        goto LABEL_42;
      }
LABEL_28:
      uint64_t v36 = (*(uint64_t (**)(uint64_t *, uint64_t, void))(qword_26AF9FE08[0] + 32))(qword_26AF9FE08, 400, 0);
      *(_OWORD *)uint64_t v36 = 0u;
      *(_OWORD *)(v36 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 32) = 0u;
      *(_OWORD *)(v36 + 48) = 0u;
      *(_OWORD *)(v36 + 64) = 0u;
      *(_OWORD *)(v36 + 80) = 0u;
      *(_OWORD *)(v36 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
      *(_OWORD *)(v36 + 128) = 0u;
      *(_OWORD *)(v36 + 144) = 0u;
      *(_OWORD *)(v36 + 160) = 0u;
      *(_OWORD *)(v36 + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 192) = 0u;
      *(_OWORD *)(v36 + 208) = 0u;
      *(_OWORD *)(v36 + 224) = 0u;
      *(_OWORD *)(v36 + 240) = 0u;
      *(_OWORD *)(v36 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 272) = 0u;
      *(_OWORD *)(v36 + 288) = 0u;
      *(_OWORD *)(v36 + 304) = 0u;
      *(_OWORD *)(v36 + 320) = 0u;
      *(_OWORD *)(v36 + 33re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 352) = 0u;
      *(_OWORD *)(v36 + 368) = 0u;
      *(_OWORD *)(v36 + 384) = 0u;
      objc_initWeak((id *)v36, 0);
      *(_OWORD *)(v36 + 8) = 0u;
      *(_OWORD *)(v36 + 24) = 0u;
      *(_OWORD *)(v36 + 40) = 0u;
      *(_OWORD *)(v36 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 72) = 0u;
      *(_OWORD *)(v36 + 88) = 0u;
      *(_OWORD *)(v36 + 104) = 0u;
      *(_OWORD *)(v36 + 120) = 0u;
      *(_OWORD *)(v36 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 152) = 0u;
      *(_OWORD *)(v36 + 168) = 0u;
      *(_OWORD *)(v36 + 184) = 0u;
      *(_OWORD *)(v36 + 200) = 0u;
      *(_OWORD *)(v36 + 21re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 232) = 0u;
      *(_OWORD *)(v36 + 248) = 0u;
      *(_OWORD *)(v36 + 372) = 0u;
      *(_OWORD *)(v36 + 264) = 0u;
      *(_OWORD *)(v36 + 280) = 0u;
      *(_OWORD *)(v36 + 29re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v36 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
      *(_OWORD *)(v36 + 328) = 0u;
      *(_OWORD *)(v36 + 344) = 0u;
      *(_OWORD *)(v36 + 360) = 0u;
      *(void *)(v36 + 392) = 0;
      if (*a6) {
        uint64_t v37 = (void *)(*a6 + 8);
      }
      else {
        uint64_t v37 = 0;
      }
      objc_storeWeak((id *)v36, v37);
      uint64_t v38 = *a6;
      unsigned int v39 = (unsigned __int8 *)(*a6 + 28);
      unsigned __int8 v40 = atomic_load(v39);
      if (v40)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v38 + 24));
        unsigned __int8 v41 = atomic_load(v39);
        if (v41)
        {
          memcpy((void *)(v38 + 32), (const void *)(v38 + 416), 0x17CuLL);
          atomic_store(0, (unsigned __int8 *)(v38 + 28));
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 24));
      }
      memcpy((void *)(v36 + 8), (const void *)(v38 + 32), 0x17CuLL);
      id v50 = 0;
      uint64_t v42 = [(_anonymous_namespace_ *)v34 processFrameWithInput:v36 + 8 outputData:&v50];
      id v43 = v50;
      uint64_t v44 = v43;
      if (v42 == -18000)
      {
        CFRetain(v43);
        uint64_t v45 = 0;
        *(void *)(v36 + 392) = v44;
        *a7 = v44;
        a7[1] = v36 + 8;
        a7[2] = re::VideoASEProcessor::completionCallback;
        a7[3] = v36;
      }
      else
      {
        uint64_t v46 = *re::videoLogObjects((re *)v43);
        BOOL v47 = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
        if (v47)
        {
          *(_DWORD *)buf = 134217984;
          *(void *)uint64_t v54 = v42;
          _os_log_error_impl(&dword_233120000, v46, OS_LOG_TYPE_ERROR, "Unable to process ASE (%ld).", buf, 0xCu);
        }
        (*(void (**)(uint64_t *, uint64_t))(qword_26AF9FE08[0] + 40))(qword_26AF9FE08, v36);
        uint64_t v45 = 1;
      }

      goto LABEL_45;
    }
  }
LABEL_11:
  int v19 = (void *)[objc_alloc(MEMORY[0x263F20F60]) initWithConfig:&v51];
  [v19 setDestinationWidth:v52];
  [v19 setDestinationHeight:HIDWORD(v52)];
  unint64_t v20 = re::Hash<re::VideoASEConfigurationKey>::operator()(&v51);
  unint64_t v21 = v20;
  if (!*(void *)a1)
  {
    LODWORD(v22) = 0;
    goto LABEL_21;
  }
  unint64_t v22 = v20 % *(unsigned int *)(a1 + 24);
  uint64_t v23 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v22);
  if (v23 == 0x7FFFFFFF)
  {
LABEL_21:
    uint64_t v27 = *(unsigned int *)(a1 + 36);
    if (v27 == 0x7FFFFFFF)
    {
      uint64_t v27 = *(unsigned int *)(a1 + 32);
      int v28 = v27;
      if (v27 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v22) = v21 % *(unsigned int *)(a1 + 24);
        int v28 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v28 + 1;
      uint64_t v29 = *(void *)(a1 + 16);
      int v30 = *(_DWORD *)(v29 + 48 * v27 + 8);
    }
    else
    {
      uint64_t v29 = *(void *)(a1 + 16);
      int v30 = *(_DWORD *)(v29 + 48 * v27 + 8);
      *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v30 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v29 + 48 * v27 + 8) = v30 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 16) + 48 * v27 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v27 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v22);
    *(void *)(*(void *)(a1 + 16) + 48 * v27) = v21;
    uint64_t v31 = *(void *)(a1 + 16) + 48 * v27;
    long long v32 = v51;
    *(void *)(v31 + 28) = v52;
    *(_OWORD *)(v31 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v32;
    uint64_t v33 = *(void *)(a1 + 16) + 48 * v27;
    *(void *)(v33 + 40) = v19;
    *(_DWORD *)(*(void *)(a1 + 8) + 4 * v22) = v27;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    goto LABEL_27;
  }
  uint64_t v24 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v25 = v24 + 48 * v23;
    if (*(_DWORD *)(v25 + 20) == DWORD2(v51))
    {
      uint64_t v26 = v25 + 12;
      if (*(_DWORD *)(v26 + 12) == HIDWORD(v51)
        && *(void *)v26 == (void)v51
        && *(void *)(v24 + 48 * v23 + 28) == v52)
      {
        break;
      }
    }
    uint64_t v23 = *(_DWORD *)(v24 + 48 * v23 + 8) & 0x7FFFFFFF;
    if (v23 == 0x7FFFFFFF) {
      goto LABEL_21;
    }
  }
LABEL_27:
  int v34 = v19;

  if (v34) {
    goto LABEL_28;
  }
LABEL_42:
  id v48 = *re::videoLogObjects(v35);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    v54[0] = a2;
    LOWORD(v54[1]) = 1024;
    *(_DWORD *)((char *)&v54[1] + 2) = a3;
    _os_log_error_impl(&dword_233120000, v48, OS_LOG_TYPE_ERROR, "Unable to create ASE Processor for config %d x %d.", buf, 0xEu);
  }
  uint64_t v45 = 1;
LABEL_45:

  return v45;
}

void re::VideoASEFrameMeasurement::~VideoASEFrameMeasurement(re::VideoASEFrameMeasurement *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

unint64_t re::Hash<re::VideoASEConfigurationKey>::operator()(_DWORD *a1)
{
  unsigned int v1 = 73244475 * (a1[2] ^ HIWORD(a1[2]));
  unsigned int v2 = 73244475 * (a1[3] ^ HIWORD(a1[3]));
  uint64_t v3 = (73244475 * (v2 ^ HIWORD(v2))) ^ ((73244475 * (v2 ^ HIWORD(v2))) >> 16);
  unsigned int v4 = 73244475 * (a1[1] ^ HIWORD(a1[1]));
  unint64_t v5 = (73244475 * (v4 ^ HIWORD(v4))) ^ ((73244475 * (v4 ^ HIWORD(v4))) >> 16);
  unsigned int v6 = 73244475 * (*a1 ^ HIWORD(*a1));
  uint64_t v7 = (73244475 * (v6 ^ HIWORD(v6))) ^ ((73244475 * (v6 ^ HIWORD(v6))) >> 16);
  unsigned int v8 = 73244475 * (a1[4] ^ HIWORD(a1[4]));
  unint64_t v9 = (73244475 * (v8 ^ HIWORD(v8))) ^ ((73244475 * (v8 ^ HIWORD(v8))) >> 16);
  unsigned int v10 = 73244475 * ((73244475 * (a1[5] ^ HIWORD(a1[5]))) ^ ((73244475 * (a1[5] ^ HIWORD(a1[5]))) >> 16));
  return re::hashCombine((73244475 * (v1 ^ HIWORD(v1))) ^ ((73244475 * (v1 ^ HIWORD(v1))) >> 16), v3, v5, v7, v9, v10 ^ HIWORD(v10));
}

void re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v27, 0, 36);
      *(void *)&v27[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v27;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v27[8];
      *(_OWORD *)uint64_t v27 = v5;
      *(void *)&v27[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v27[24];
      *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v27[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        unint64_t v14 = (uint64_t *)(v6 + 40);
        do
        {
          if ((*(_DWORD *)(v14 - 4) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 5);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 48 * v18 + 8);
              *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 48 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 48 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 48 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v15;
            uint64_t v22 = *(void *)(a1 + 16) + 48 * v18;
            long long v23 = *(_OWORD *)((char *)v14 - 28);
            *(void *)(v22 + 28) = *(uint64_t *)((char *)v14 - 12);
            *(_OWORD *)(v22 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v23;
            uint64_t v24 = *(void *)(a1 + 16) + 48 * v18;
            uint64_t v25 = *v14;
            uint64_t *v14 = 0;
            *(void *)(v24 + 40) = v25;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 6;
        }
        while (v11 < v10);
      }
      re::HashTable<re::VideoASEConfigurationKey,re::VideoASEProcessor::Entry,re::Hash<re::VideoASEConfigurationKey>,re::EqualTo<re::VideoASEConfigurationKey>,true,false>::deinit((uint64_t *)v27);
    }
  }
  else
  {
    if (a2) {
      signed int v26 = a2;
    }
    else {
      signed int v26 = 3;
    }
  }
}

void init_block_size_descriptor(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 2) {
    operator new();
  }
  operator new();
}

void assign_kmeans_texels(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  size_t v2 = *(unsigned __int8 *)(a1 + 3);
  if (v2 > 0x40)
  {
    bzero(v10, v2);
    unint64_t v4 = 0;
    unint64_t v5 = 0xFAF9E171CEA1EC6BLL;
    unint64_t v6 = 0xF1B318CC06AF5D71;
    do
    {
      uint64_t v7 = (v5 + v6) % v2;
      if (!v10[v7])
      {
        uint64_t v8 = a1 + v4++;
        *(unsigned char *)(v8 + 14666800) = v7;
        v10[v7] = 1;
      }
      unint64_t v9 = v5 ^ v6;
      unint64_t v5 = __ROR8__(v5, 40) ^ (v9 << 16) ^ v9;
      unint64_t v6 = __ROR8__(v9, 27);
    }
    while (v4 < 0x40);
  }
  else if (*(unsigned char *)(a1 + 3))
  {
    uint64_t v3 = 0;
    do
    {
      *(unsigned char *)(a1 + 14666800 + v3) = v3;
      ++v3;
    }
    while (v2 != v3);
  }
}

unsigned __int8 *compress_block(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, double a5, double a6, int32x4_t a7, double a8, float32x4_t a9)
{
  uint64_t v11 = (uint64_t)a2;
  uint64_t v12 = a1;
  uint64_t v258 = *MEMORY[0x263EF8340];
  float v13 = 30720.0;
  if (!a2[235].i8[10]) {
    float v13 = 65535.0;
  }
  if (a2[218].f32[3] == v13)
  {
    float v14 = a2[220].f32[3];
    unint64_t v15 = a2 + 222;
    BOOL v16 = v14 != v13 && a2[222].i8[0] != 0;
    if (a2[222].i8[0] != 0 && v14 == v13) {
      float v17 = 0.66667;
    }
    else {
      float v17 = 1.0;
    }
  }
  else
  {
    unint64_t v15 = a2 + 222;
    BOOL v16 = a2[222].i8[0] != 0;
    float v17 = 1.0;
  }
  v199 = *(float32x4_t **)(a1 + 128);
  int v18 = *(_DWORD *)a1;
  uint64_t v19 = *(unsigned int *)(a1 + 44);
  uint64_t v228 = *(void *)(a1 + 48);
  int v229 = *(_DWORD *)(a1 + 56);
  uint64_t v226 = *(void *)(a1 + 72);
  int v227 = *(_DWORD *)(a1 + 80);
  float32x4_t v20 = a2[218];
  float32x4_t v21 = a2[220];
  uint64_t v22 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    float32x4_t v207 = v21;
    float32x4_t v208 = v20;
    float32x4_t v21 = v207;
    float32x4_t v20 = v208;
    uint64_t v12 = a1;
    if (v180)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      float32x4_t v21 = v207;
      float32x4_t v20 = v208;
      uint64_t v12 = a1;
    }
  }
  int8x16_t v23 = (int8x16_t)vceqq_f32(v20, v21);
  uint64_t v24 = 0x100000001;
  v26.i64[1] = 0x100000001;
  uint32x4_t v25 = (uint32x4_t)vandq_s8(v23, (int8x16_t)v26);
  v26.i64[0] = mask(vmask4)::shift;
  int32x4_t v27 = (int32x4_t)vshlq_u32(v25, (uint32x4_t)mask(vmask4)::shift);
  if (vaddvq_s32(v27) == 15)
  {
    BYTE1(v230) = 0;
    float32x4_t v28 = *(float32x4_t *)(v11 + 3472);
    if ((v18 & 0xFFFFFFFE) == 2)
    {
      int32x4_t v27 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32(v28));
      char v29 = 1;
    }
    else
    {
      __asm { FMOV            V1.4S, #1.0 }
      a7 = vdupq_n_s32(0x477FFF00u);
      float32x4_t v37 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(v28, (float32x4_t)0), _Q1), (float32x4_t)a7);
      v26.i64[0] = 0x3F0000003F000000;
      v26.i64[1] = 0x3F0000003F000000;
      int32x4_t v27 = vcvtq_s32_f32(vaddq_f32(v37, v26));
      char v29 = 2;
    }
    uint64_t v38 = (unsigned __int8 *)v199;
    LOBYTE(v230) = v29;
    *(int32x4_t *)&v231[4] = v27;
    uint64_t v39 = a3;
    return symbolic_to_physical(v38, (unsigned __int8 *)&v230, v39, *(double *)v27.i64, *(double *)v26.i64, *(float *)a7.i32);
  }
  float32x4_t v26 = *(float32x4_t *)(v11 + 3536);
  a7.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  *(float32x2_t *)v26.f32 = vadd_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v26.f32);
  a7.i8[0] = v199->i8[3];
  LODWORD(a8) = *(_DWORD *)(v12 + 88);
  float v30 = *(float *)(v12 + 84)
      * (float)((float)a7.u32[0] * vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32).f32[0]);
  long long v225 = xmmword_23441B5D0;
  v26.i64[0] = *(void *)(v12 + 92);
  uint64_t v223 = v26.i64[0];
  if (v16) {
    float v31 = 0.95238;
  }
  else {
    float v31 = 1.0;
  }
  *(_DWORD *)v231 = 1900671690;
  LOBYTE(v230) = 0;
  int v222 = 0;
  int v224 = 0;
  v221[0] = 1.0 / *(float *)&a8;
  v221[1] = 1.0;
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_26AF9FF00, memory_order_acquire) & 1) == 0)
  {
    int v181 = __cxa_guard_acquire(qword_26AF9FF00);
    uint64_t v12 = a1;
    if (v181)
    {
      *(float *)&_MergedGlobals_515 = 1.0 / *(float *)(a1 + 88);
      __cxa_guard_release(qword_26AF9FF00);
      uint64_t v12 = a1;
    }
  }
  v26.i32[0] = *(_DWORD *)(v12 + 104);
  a7.i32[0] = 1062836634;
  uint64_t v187 = a3;
  BOOL v32 = v26.f32[0] < 0.85 || v199->u8[2] != 1;
  float v40 = v31 * (float)(v17 * v30);
  float v41 = *(float *)&v225;
  uint64_t v42 = &qword_26AF9F000;
  uint64_t v198 = a4;
  do
  {
    BOOL v43 = v32;
    float v44 = v40 * v221[v32];
    *(float *)v27.i32 = v44 * *(float *)&_MergedGlobals_515;
    *(float *)v27.i32 = compress_symbolic_block_for_partition_1plane(v12, v199, (float32x4_t *)v11, !v32, 1u, 0, (uint64_t)&v230, a4, *(double *)v27.i64, *(double *)v26.i64, *(double *)a7.i64, a8, a9, 11);
    if (*(float *)v27.i32 < v44) {
      goto LABEL_134;
    }
    if (v41 >= *(float *)v27.i32) {
      float v41 = *(float *)v27.i32;
    }
    BOOL v32 = 1;
    a4 = v198;
    uint64_t v12 = a1;
  }
  while (!v43);
  uint64_t v45 = 0;
  float32x2_t v46 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v11 + 3536), *(int8x16_t *)(v11 + 3536), 8uLL), *(float32x2_t *)(v11 + 3536));
  float v47 = 0.25 * vpadd_f32(v46, v46).f32[0];
  int v188 = v199[706559].u8[6 * v199[706303].u16[WORD2(v230)] + 3];
  *(float *)&long long v225 = v41;
  a9.i64[0] = 0;
  float v48 = 0.0;
  v26.i64[0] = 0;
  v27.i64[0] = 0;
  float v49 = 0.0;
  float v50 = 0.0;
  float v51 = 0.0;
  a7.i64[0] = 0;
  float v52 = 0.0;
  float v53 = 0.0;
  float v54 = 0.0;
  float v55 = 0.0;
  float v56 = 0.0;
  float v57 = 0.0;
  float v58 = 0.0;
  do
  {
    float v56 = v47 + v56;
    float v59 = *(float *)(v11 + v45);
    float v60 = *(float *)(v11 + v45 + 864);
    float v61 = *(float *)(v11 + v45 + 1728);
    float v62 = *(float *)(v11 + v45 + 2592);
    a9.f32[0] = a9.f32[0] + (float)(v47 * v59);
    float v49 = v49 + (float)(v59 * (float)(v47 * v59));
    float v52 = v52 + (float)(v60 * (float)(v47 * v59));
    float v53 = v53 + (float)(v61 * (float)(v47 * v59));
    float v54 = v54 + (float)(v62 * (float)(v47 * v59));
    float v48 = v48 + (float)(v47 * v60);
    float v50 = v50 + (float)(v60 * (float)(v47 * v60));
    float v55 = v55 + (float)(v61 * (float)(v47 * v60));
    float v58 = v58 + (float)(v62 * (float)(v47 * v60));
    v26.f32[0] = v26.f32[0] + (float)(v47 * v61);
    float v51 = v51 + (float)(v61 * (float)(v47 * v61));
    float v57 = v57 + (float)(v62 * (float)(v47 * v61));
    *(float *)v27.i32 = *(float *)v27.i32 + (float)(v47 * v62);
    *(float *)a7.i32 = *(float *)a7.i32 + (float)(v62 * (float)(v47 * v62));
    v45 += 4;
  }
  while (4 * v199->u8[3] != v45);
  float v63 = 1.0 / v56;
  if (v56 <= 0.0000001) {
    float v63 = 10000000.0;
  }
  float v64 = v63 * a9.f32[0];
  float v65 = v49 - (float)(a9.f32[0] * (float)(v63 * a9.f32[0]));
  float v66 = v52 - (float)(v48 * v64);
  float v67 = v53 - (float)(v26.f32[0] * v64);
  float v68 = v54 - (float)(*(float *)v27.i32 * v64);
  float v69 = v63 * v48;
  float v70 = v50 - (float)(v48 * (float)(v63 * v48));
  float v71 = v55 - (float)(v26.f32[0] * v69);
  float v72 = v58 - (float)(*(float *)v27.i32 * v69);
  float v73 = v63 * v26.f32[0];
  float v74 = v51 - (float)(v26.f32[0] * (float)(v63 * v26.f32[0]));
  float v75 = v57 - (float)(*(float *)v27.i32 * v73);
  float v76 = *(float *)a7.i32 - (float)(*(float *)v27.i32 * (float)(v63 * *(float *)v27.i32));
  float v77 = v66 * (float)(1.0 / sqrtf(v65 * v70));
  float v78 = v67 * (float)(1.0 / sqrtf(v65 * v74));
  a9.f32[0] = v68 * (float)(1.0 / sqrtf(v65 * v76));
  float v79 = v71 * (float)(1.0 / sqrtf(v70 * v74));
  float v80 = v72 * (float)(1.0 / sqrtf(v70 * v76));
  float v81 = v75 * (float)(1.0 / sqrtf(v74 * v76));
  v26.f32[0] = fabsf(v77);
  float v82 = fabsf(v78);
  if (v26.f32[0] >= v82) {
    v26.f32[0] = v82;
  }
  float v83 = fabsf(a9.f32[0]);
  if (v26.f32[0] >= v83) {
    v26.f32[0] = v83;
  }
  float v84 = fabsf(v79);
  if (v26.f32[0] >= v84) {
    v26.f32[0] = v84;
  }
  *(float *)a7.i32 = fabsf(v80);
  if (v26.f32[0] >= *(float *)a7.i32) {
    v26.f32[0] = *(float *)a7.i32;
  }
  *(float *)v27.i32 = fabsf(v81);
  if (v26.f32[0] >= *(float *)v27.i32) {
    float v85 = *(float *)v27.i32;
  }
  else {
    float v85 = v26.f32[0];
  }
  int v86 = v188;
  if (v188 >= 11) {
    int v86 = 11;
  }
  long long v190 = (int32x2_t *)(v198 + 1888);
  uint64_t v189 = v198 + 3776;
  uint64_t v197 = v198 + 26048;
  unsigned int v191 = v86;
  int v182 = ~(-2 << v86);
  int v87 = 3;
  unint64_t v88 = (int32x4_t *)"cIZN2re13RigGraphAsset43createAutoRetargetBipedToBipedRigGraphAssetERKNS2_4ecs26EntityES7_E3$_0NS_9allocatorIS8_EEFvPS3_EEE";
  float v89 = *(float *)(a1 + 100);
  v90.i64[0] = 0x100000001;
  v90.i64[1] = 0x100000001;
  long long v202 = (float32x4_t *)v11;
  uint64_t v183 = v19;
  int v184 = v15;
  while (1)
  {
    unsigned int v91 = v87;
    if (v85 <= v89 && (v87 == 3 || !v15->i8[0]))
    {
      float32x4_t v92 = *(float32x4_t *)(v11 + 3488);
      float32x4_t v93 = *(float32x4_t *)(v11 + 3520);
      {
        float32x4_t v206 = v92;
        float32x4_t v201 = v93;
        float32x4_t v93 = v201;
        float32x4_t v92 = v206;
        v90.i64[0] = 0x100000001;
        v90.i64[1] = 0x100000001;
        if (v164)
        {
          *((int32x4_t *)v22 + 85) = v88[221];
          float32x4_t v93 = v201;
          float32x4_t v92 = v206;
          v90.i64[0] = 0x100000001;
          v90.i64[1] = 0x100000001;
        }
      }
      a7 = vceqq_s32(vdupq_n_s32(v91), v88[221]);
      uint32x4_t v94 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v92, v93), v90), (int8x16_t)a7);
      float32x4_t v26 = *((float32x4_t *)v22 + 85);
      int32x4_t v27 = (int32x4_t)vshlq_u32(v94, (uint32x4_t)v26);
      v27.i32[0] = vaddvq_s32(v27);
      if (!v27.i32[0]) {
        break;
      }
    }
LABEL_109:
    int v87 = v91 - 1;
    if (!v91) {
      goto LABEL_113;
    }
  }
  int8x16_t v192 = (int8x16_t)a7;
  float v95 = *((float *)v42 + 958);
  unint64_t v96 = (int8x16_t *)v198;
  unsigned int v200 = v91;
  compute_ideal_colors_and_weights_2planes((uint64_t)v199, v11, v91, v198, (uint64_t)v190, *(double *)v27.i64, *(double *)v26.i64, *(double *)a7.i64, (int32x4_t)v90, a9);
  unint64_t v97 = v199->u32[2];
  if (v97)
  {
    int v98 = 0;
    unint64_t v99 = 0;
    unint64_t v100 = &v199[4].u16[2];
    unint64_t v101 = v199 + 37;
    do
    {
      int v102 = *v100;
      v100 += 3;
      if ((v102 & v182) != 0)
      {
        compute_ideal_weights_for_decimation((int32x2_t *)v198, v101, (_OWORD *)(v189 + 4 * (v98 & 0xFFFFFFC0)));
        compute_ideal_weights_for_decimation(v190, v101, (_OWORD *)(v189 + 4 * (v98 & 0xFFFFFFC0) + 128));
        unint64_t v97 = v199->u32[2];
      }
      ++v99;
      v98 += 64;
      v101 += 8118;
    }
    while (v99 < v97);
  }
  float32x4_t v203 = *(float32x4_t *)(v198 + 32);
  float32x4_t v194 = *(float32x4_t *)(v198 + 96);
  float32x4_t v185 = *(float32x4_t *)(v198 + 1984);
  float32x4_t v186 = *(float32x4_t *)(v198 + 1920);
  uint64_t v103 = (uint64_t)v199;
  compute_angular_endpoints_2planes((unsigned int *)v199, v189, v191, v198);
  uint64_t v104 = v199[1].u32[1];
  uint64_t v105 = v199[1].u32[2];
  int v106 = v105 - v104;
  if (v105 <= v104)
  {
    uint64_t v11 = (uint64_t)v202;
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v108 = vdivq_f32(vsubq_f32(_Q0, v186), vsubq_f32(v185, v186));
    v109.i64[0] = 0x3F0000003F000000;
    v109.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V3.4S, #10.0 }
    int8x16_t v116 = (int8x16_t)vdupq_n_s32(0x7149F2CAu);
    float32x4_t v111 = (float32x4_t)vorrq_s8(vandq_s8(vbslq_s8(vandq_s8((int8x16_t)vcgtq_f32(v108, v109), (int8x16_t)vcgtq_f32(_Q3, v108)), (int8x16_t)v108, (int8x16_t)_Q3), v192), vbicq_s8(v116, v192));
    float32x4_t v112 = vdivq_f32(vsubq_f32(_Q0, v203), vsubq_f32(v194, v203));
    int8x16_t v113 = (int8x16_t)vcgtq_f32(v112, v109);
    int8x16_t v114 = (int8x16_t)vcgtq_f32(_Q3, v112);
    int8x16_t v115 = vandq_s8(v113, v114);
    v112.f32[0] = vminvq_f32((float32x4_t)vbslq_s8(v192, v116, vbslq_s8(v115, (int8x16_t)v112, (int8x16_t)_Q3)));
    v116.i32[0] = 1065520988;
    float v117 = v112.f32[0] * 1.02;
    float v118 = vminvq_f32(v111) * 1.02;
    uint64_t v119 = 4 * v104 + 179648;
    uint64_t v120 = 4 * v104 + 209792;
    int v121 = v104 << 6;
    float v122 = &v199[706559].i8[6 * v104 + 4];
    uint64_t v123 = 4 * v104 + 217984;
    uint64_t v124 = 4 * v104 + 196032;
    uint64_t v125 = v104 + 177600;
    uint64_t v11 = (uint64_t)v202;
    do
    {
      if (v191 >= *(v122 - 1))
      {
        v96->i8[v125] = 109 - *v122;
        v111.i32[0] = *(__int32 *)((char *)v96->i32 + v124);
        if (v111.f32[0] > v117)
        {
          *(__int32 *)((char *)v96->i32 + v124) = 1065353216;
          v111.i32[0] = 1.0;
        }
        int v204 = v106;
        if (*(float *)((char *)v96->i32 + v123) > v118) {
          *(__int32 *)((char *)v96->i32 + v123) = 1065353216;
        }
        uint64_t v126 = (unsigned __int8 *)&v199[8118 * *(v122 - 2) + 37];
        v195 = (__int32 *)((char *)v96->i32 + v119);
        uint64_t v127 = (float32x4_t *)(v189 + ((unint64_t)*(v122 - 2) << 8));
        compute_quantized_weights_for_decimation((uint64_t)v126, v127, (float32x4_t *)&v249, v197 + (v121 & 0xFFFFFFC0), *(v122 - 1), *(float *)((char *)v96[512].i32 + v119), *(double *)v111.i64, *(double *)v116.i64, *(double *)_Q3.i64, *(double *)v115.i64, *(double *)v114.i64);
        LODWORD(v128) = *(_DWORD *)(v198 + v123);
        unint64_t v96 = (int8x16_t *)v198;
        compute_quantized_weights_for_decimation((uint64_t)v126, v127 + 8, v257, v197 + (v121 & 0xFFFFFFC0) + 32, *(v122 - 1), *(float *)(v198 + v120), v128, v129, v130, v131, v132);
        _DWORD *v195 = compute_error_of_weight_set_2planes((float32x4_t *)v198, (float32x4_t *)v190, v126, (float32x4_t *)&v249, v257, v133, v134, v135).u32[0];
        uint64_t v11 = (uint64_t)v202;
        int v106 = v204;
      }
      else
      {
        *(__int32 *)((char *)v96->i32 + v119) = 2123789977;
      }
      v119 += 4;
      v120 += 4;
      v121 += 64;
      v122 += 6;
      v123 += 4;
      v124 += 4;
      ++v125;
      --v106;
    }
    while (v106);
    uint64_t v103 = (uint64_t)v199;
    uint64_t v104 = v199[1].u32[1];
    uint64_t v105 = v199[1].u32[2];
  }
  int8x16_t v136 = vorrq_s8(vandq_s8(v96[120], v192), vbicq_s8(v96[2], v192));
  int8x16_t v137 = vandq_s8(v96[124], v192);
  int8x16_t v138 = vbicq_s8(v96[6], v192);
  v249.i32[0] = v96[1].i32[0];
  float32x4_t v250 = (float32x4_t)v136;
  int8x16_t v254 = vorrq_s8(v137, v138);
  unsigned int v196 = compute_ideal_endpoint_formats((uint64_t)&v199[916223], v11, (uint64_t)&v249, v198 + 177600, v198 + 179648, *(unsigned int *)(a1 + 68), v104, v105, v248, (uint64_t)v247, (uint64_t)v246, (uint64_t)v245, (uint64_t)v96);
  if (v196)
  {
    unsigned int v140 = 0;
    float v141 = v40 * v95;
    float v142 = *(float *)v231;
    float v143 = 1.0e30;
    unint64_t v144 = (int *)a1;
    do
    {
      int v145 = v247[v140];
      unsigned int v146 = *(unsigned __int8 *)(v103 + 6 * v145 + 11304946);
      uint64_t v147 = v103 + 129888 * *(unsigned __int8 *)(v103 + 6 * v145 + 11304946);
      uint64_t v148 = *(unsigned __int8 *)(v147 + 594);
      uint64_t v149 = v140;
      v205 = (unsigned __int8 *)(v147 + 594);
      long long v216 = v255;
      long long v217 = v256;
      float32x4_t v218 = v257[0];
      long long v212 = v251;
      long long v213 = v252;
      long long v214 = v253;
      float32x4_t v215 = (float32x4_t)v254;
      v26.i64[0] = v249.i64[0];
      v27.i64[0] = v250.i64[0];
      int8x16_t v210 = v249;
      float32x4_t v211 = v250;
      id v150 = (char *)(v197 + (v145 << 6) + 32);
      unsigned int v151 = (char *)&v242 + 4;
      do
      {
        *(v151 - 32) = *(v150 - 32);
        char v152 = *v150++;
        *v151++ = v152;
        --v148;
      }
      while (v148);
      if (v144[16])
      {
        unsigned int v193 = v140;
        int v153 = (_WORD *)(v103 + 6 * v145 + 11304944);
        uint64_t v154 = v103 + 129888 * v146 + 592;
        unsigned int v155 = 1;
        int v156 = -1;
        while (1)
        {
          recompute_ideal_colors_2planes((float32x4_t *)v11, v103, v154, (uint64_t)&v240 + 4, (uint64_t)&v242 + 4, &v210, (float32x4_t *)&v220, (int8x16_t *)&v219, *(double *)v27.i64, *(double *)v26.i64, *(uint8x8_t *)a7.i8, *(uint8x8_t *)v139.i8, v200);
          BYTE8(v237) = pack_color_endpoints(v248[4 * v149], (unsigned __int8 *)&v238 + 4, v246[v149], v211, v215, v220, v219);
          WORD3(v237) = 0;
          HIDWORD(v237) = v246[v149];
          BYTE2(v237) = 0;
          WORD2(v237) = *v153;
          BYTE3(v237) = v200;
          LOWORD(v237) = 259;
          if (v155 == 1)
          {
            float v157 = compute_symbolic_block_difference_2plane(a1, v103, (uint64_t)&v237, (float32x4_t *)v11);
            if (v157 == -1.0e30)
            {
              LOBYTE(v237) = 0;
              float v157 = 1.0e30;
            }
            if (v157 < v143) {
              float v143 = v157;
            }
            unint64_t v144 = (int *)a1;
            v26.i32[0] = 1066024305;
            a7.i32[0] = 1027101164;
            *(float *)v27.i32 = v142 * (float)((float)((float)*(unsigned int *)(a1 + 64) * 0.045) + 1.08);
            if (v157 > *(float *)v27.i32) {
              goto LABEL_102;
            }
            if (v157 >= v142)
            {
              float v157 = v142;
            }
            else
            {
              *(float *)&long long v238 = v157;
              a7 = v243;
              long long v233 = v241;
              long long v234 = v242;
              int32x4_t v235 = v243;
              int v236 = v244;
              *(_OWORD *)&v231[16] = v239;
              long long v232 = v240;
              v27.i64[0] = v237;
              v26.i64[0] = v238;
              long long v230 = v237;
              *(_OWORD *)v231 = v238;
              if (v157 < v141)
              {
                float v142 = v157;
                unsigned int v140 = v196;
                goto LABEL_104;
              }
            }
          }
          else
          {
            float v157 = v142;
            unint64_t v144 = (int *)a1;
          }
          int v158 = *v144;
          if (*v205 == *(unsigned __int8 *)(v103 + 3)) {
            char v159 = realign_weights_undecimated(v158, v103, (float32x4_t *)v11, (uint64_t)&v237, *(double *)v27.i64, *(double *)v26.i64, a7, v139);
          }
          else {
            char v159 = realign_weights_decimated(v158, v103, (float32x4_t *)v11, (uint64_t)&v237, *(double *)v27.i64, *(double *)v26.i64, a7, v139);
          }
          uint64_t v160 = (float32x4_t *)v11;
          char v161 = v159;
          *(float *)v27.i32 = compute_symbolic_block_difference_2plane(a1, v103, (uint64_t)&v237, v160);
          if (*(float *)v27.i32 == -1.0e30)
          {
            LOBYTE(v237) = 0;
            v27.i32[0] = 1900671690;
          }
          if (*(float *)v27.i32 < v143) {
            float v143 = *(float *)v27.i32;
          }
          unint64_t v144 = (int *)a1;
          unsigned int v162 = *(_DWORD *)(a1 + 64);
          a7.i32[0] = 1027101164;
          v26.f32[0] = v157 * (float)((float)((float)(v156 + v162) * 0.045) + 1.0);
          if (*(float *)v27.i32 > v26.f32[0])
          {
            float v142 = v157;
            uint64_t v11 = (uint64_t)v202;
LABEL_102:
            unsigned int v140 = v193;
            goto LABEL_104;
          }
          float v142 = v157;
          if (*(float *)v27.i32 < v157)
          {
            LODWORD(v238) = v27.i32[0];
            long long v233 = v241;
            long long v234 = v242;
            int32x4_t v235 = v243;
            *(_OWORD *)&v231[16] = v239;
            long long v232 = v240;
            v26.i64[0] = v237;
            a7.i64[0] = v238;
            long long v230 = v237;
            *(_OWORD *)v231 = v238;
            float v142 = *(float *)v27.i32;
            int v236 = v244;
            if (*(float *)v27.i32 < v141) {
              break;
            }
          }
          if (v155 < v162) {
            char v163 = v161;
          }
          else {
            char v163 = 0;
          }
          ++v155;
          --v156;
          uint64_t v11 = (uint64_t)v202;
          if ((v163 & 1) == 0) {
            goto LABEL_102;
          }
        }
        float v142 = *(float *)v27.i32;
        unsigned int v140 = v196;
        uint64_t v11 = (uint64_t)v202;
      }
LABEL_104:
      ++v140;
    }
    while (v140 < v196);
  }
  else
  {
    float v143 = 1.0e30;
  }
  v26.i32[0] = 1072483533;
  *(float *)v27.i32 = *(float *)&v225 * 1.85;
  uint64_t v19 = v183;
  unint64_t v15 = v184;
  uint64_t v22 = &re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  uint64_t v42 = &qword_26AF9F000;
  unint64_t v88 = (int32x4_t *)("NSt3__110__function6__funcIZN2re13RigGraphAsset43createAutoRetargetBipedToBipedRigGraphAssetERKNS2"
                      "_4ecs26EntityES7_E3$_0NS_9allocatorIS8_EEFvPS3_EEE"
                    + 25);
  v90.i64[0] = 0x100000001;
  v90.i64[1] = 0x100000001;
  if (v143 <= (float)(*(float *)&v225 * 1.85))
  {
    unsigned int v91 = v200;
    if (v143 < v40) {
      goto LABEL_134;
    }
    goto LABEL_109;
  }
LABEL_113:
  if ((int)v19 >= 2)
  {
    uint64_t v165 = 2;
    while (1)
    {
      uint64_t v166 = v11;
      uint64_t v167 = 4 * v165 - 8;
      unsigned int v168 = *(_DWORD *)((char *)&v228 + v167);
      unsigned int v169 = *(_DWORD *)((char *)&v226 + v167) >= v168
           ? *(_DWORD *)((char *)&v228 + v167)
           : *(_DWORD *)((char *)&v226 + v167);
      unsigned int best_partition_candidates = find_best_partition_candidates((uint64_t)v199, v166, v165, v168, (uint64_t)&v249, v169, *(double *)v27.i64, *(double *)v26.i64, *(double *)a7.i64, *(double *)v90.i64);
      float v172 = *(float *)((char *)&v225 + v167);
      uint64_t v173 = v165 - 1;
      if (best_partition_candidates) {
        break;
      }
      a7.i32[0] = *(&v222 + v173);
      v26.i32[0] = *((_DWORD *)&v225 + v173);
LABEL_127:
      *(float *)v27.i32 = v172 * *(float *)a7.i32;
      _ZF = v26.f32[0] > (float)(v172 * *(float *)a7.i32) || ++v165 == v19 + 1;
      uint64_t v11 = (uint64_t)v202;
      if (_ZF) {
        goto LABEL_134;
      }
    }
    unint64_t v174 = 0;
    uint64_t v175 = 4 * best_partition_candidates;
    while (1)
    {
      *(float *)v27.i32 = v40 * *(float *)&_MergedGlobals_515;
      *(float *)v27.i32 = compress_symbolic_block_for_partition_1plane(a1, v199, v202, 0, v165, v249.i32[v174 / 4], (uint64_t)&v230, v198, *(double *)v27.i64, *(double *)v26.i64, *(double *)a7.i64, *(double *)v90.i64, v171, v188);
      v26.i32[0] = *((_DWORD *)&v225 + v173);
      if (v26.f32[0] >= *(float *)v27.i32) {
        v26.f32[0] = *(float *)v27.i32;
      }
      *((_DWORD *)&v225 + v173) = v26.i32[0];
      a7.i32[0] = *(&v222 + v173);
      *(float *)v90.i32 = v172 * (float)(*(float *)a7.i32 * 1.85);
      if (v26.f32[0] > *(float *)v90.i32 || *(float *)v27.i32 < v40) {
        break;
      }
      v174 += 4;
      if (v175 == v174) {
        goto LABEL_127;
      }
    }
    uint64_t v11 = (uint64_t)v202;
  }
LABEL_134:
  if (!(_BYTE)v230)
  {
    LOBYTE(v230) = 2;
    __asm { FMOV            V1.4S, #1.0 }
    a7 = vdupq_n_s32(0x477FFF00u);
    float32x4_t v178 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)(v11 + 3472), (float32x4_t)0), _Q1), (float32x4_t)a7);
    v26.i64[0] = 0x3F0000003F000000;
    v26.i64[1] = 0x3F0000003F000000;
    int32x4_t v27 = vcvtq_s32_f32(vaddq_f32(v178, v26));
    *(int32x4_t *)&v231[4] = v27;
  }
  uint64_t v38 = (unsigned __int8 *)v199;
  uint64_t v39 = v187;
  return symbolic_to_physical(v38, (unsigned __int8 *)&v230, v39, *(double *)v27.i64, *(double *)v26.i64, *(float *)a7.i32);
}

float compress_symbolic_block_for_partition_1plane(uint64_t a1, float32x4_t *a2, float32x4_t *a3, int a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, float32x4_t a13, int a14)
{
  float v16 = *(float *)&a9;
  uint64_t v142 = *MEMORY[0x263EF8340];
  if (a14 >= 11) {
    signed int v18 = 11;
  }
  else {
    signed int v18 = a14;
  }
  _ZF = (*(unsigned char *)(a1 + 4) & 0x40) == 0 && a5 == 1;
  float32x4_t v20 = (float (*)(uint64_t, uint64_t, long long *, float32x4_t *))compute_symbolic_block_difference_1plane;
  if (_ZF) {
    float32x4_t v20 = (float (*)(uint64_t, uint64_t, long long *, float32x4_t *))compute_symbolic_block_difference_1plane_1partition;
  }
  uint64_t v119 = v20;
  __int16 v110 = a6;
  if (a5 < 2) {
    int v21 = 0;
  }
  else {
    int v21 = a2[128 * (unint64_t)(a5 - 2) + 916291].u16[a6];
  }
  unsigned int v22 = (a5 << 10) - 2048;
  uint64_t v123 = a5 - 1;
  if (a5 == 1) {
    unsigned int v22 = 3072;
  }
  float32x4_t v111 = (unsigned __int16 *)&a2[68 * v22 + 707327 + 68 * v21];
  compute_ideal_colors_and_weights_1plane((uint64_t)a3, v111, (unsigned char *)a8, a9, a10, a11, a12, a13);
  uint64_t v23 = 0;
  uint64_t v24 = a8 + 3776;
  int v121 = a4;
  uint64_t v25 = 2;
  if (a4) {
    uint64_t v25 = 1;
  }
  unint64_t v26 = (unint64_t)a2->u32[v25] << 6;
  uint64_t v120 = (uint64_t)a2;
  int32x4_t v27 = a2 + 37;
  uint64_t v28 = 66;
  do
  {
    if ((*(unsigned __int16 *)(v120 + v28) & ~(-2 << v18)) != 0) {
      compute_ideal_weights_for_decimation((int32x2_t *)a8, v27, (_OWORD *)(v24 + 4 * (v23 & 0xFFFFFFC0)));
    }
    v23 += 64;
    v27 += 8118;
    v28 += 6;
  }
  while (v26 != v23);
  uint64_t v29 = 0;
  __asm
  {
    FMOV            V0.4S, #10.0
    FMOV            V1.4S, #1.0
  }
  v35.i64[0] = 0x3F0000003F000000;
  v35.i64[1] = 0x3F0000003F000000;
  do
  {
    float32x4_t v36 = vdivq_f32(vsubq_f32(_Q1, *(float32x4_t *)(a8 + v29 + 32)), vsubq_f32(*(float32x4_t *)(a8 + v29 + 96), *(float32x4_t *)(a8 + v29 + 32)));
    _Q0 = (float32x4_t)vbslq_s8(vandq_s8((int8x16_t)vcgtq_f32(v36, v35), (int8x16_t)vcgtq_f32(_Q0, v36)), (int8x16_t)v36, (int8x16_t)_Q0);
    v29 += 16;
  }
  while (16 * a5 != v29);
  uint64_t v108 = a8 + 26048;
  float v37 = vminvq_f32(_Q0);
  compute_angular_endpoints_1plane(v121, v120, a8 + 3776, v18, a8);
  uint64_t v43 = 0;
  uint64_t v44 = 177600;
  uint64_t v45 = (unsigned int *)(v120 + 16);
  if (!v121) {
    uint64_t v45 = (unsigned int *)(v120 + 20);
  }
  float v46 = v37 * 1.02;
  uint64_t __dst = *v45;
  float v47 = (unsigned __int8 *)(v120 + 11304948);
  uint64_t v48 = a8 + 179648;
  do
  {
    if (v18 < *(v47 - 1)
      || (int v49 = compress_symbolic_block_for_partition_1plane(astcenc_config const&,block_size_descriptor const&,image_block const&,BOOL,float,unsigned int,unsigned int,symbolic_compressed_block &,compression_working_buffers &,int)::free_bits_for_partition_count[v123],
          int v50 = *v47,
          _VF = __OFSUB__(v49, v50),
          int v51 = v49 - v50,
          (v51 < 0) ^ _VF | (v51 == 0)))
    {
      *(_DWORD *)uint64_t v48 = 2123789977;
    }
    else
    {
      float v52 = (_DWORD *)(v48 + 0x4000);
      if (*(float *)(v48 + 0x4000) > v46) {
        _DWORD *v52 = 1065353216;
      }
      uint64_t v53 = *(v47 - 2);
      float v54 = (unsigned __int8 *)(v120 + 129888 * v53 + 592);
      *(unsigned char *)(a8 + v44) = v51;
      LODWORD(v38) = *v52;
      compute_quantized_weights_for_decimation((uint64_t)v54, (float32x4_t *)(v24 + (v53 << 8)), v140, v108 + (v43 & 0xFFFFFFC0), *(v47 - 1), *(float *)(v48 + 0x2000), v38, v39, v40, v41, v42);
      *(_DWORD *)uint64_t v48 = compute_error_of_weight_set_1plane((float32x4_t *)a8, v54, v140, v55, v56, v57, v58).u32[0];
    }
    v43 += 64;
    v48 += 4;
    ++v44;
    v47 += 6;
  }
  while (__dst << 6 != v43);
  uint64_t v59 = a1;
  float v60 = a3;
  unsigned int v107 = compute_ideal_endpoint_formats((uint64_t)v111, (uint64_t)a3, a8 + 16, a8 + 177600, a8 + 179648, *(unsigned int *)(a1 + 68), 0, __dst, v139, (uint64_t)v138, (uint64_t)v137, (uint64_t)v136, a8);
  if (!v107) {
    return 1.0e30;
  }
  unsigned int v61 = 0;
  float v62 = *(float *)(a7 + 16);
  float v63 = 1.0e30;
  uint64_t v64 = v120;
  do
  {
    int v65 = v138[v61];
    float v117 = (_WORD *)(v64 + 6 * v65 + 11304944);
    uint64_t v66 = v64 + 129888 * *(unsigned __int8 *)(v64 + 6 * v65 + 11304946);
    size_t v67 = *(unsigned __int8 *)(v66 + 594);
    long long v68 = *(_OWORD *)(a8 + 128);
    v141[1] = *(_OWORD *)(a8 + 112);
    v141[2] = v68;
    v141[3] = *(_OWORD *)(a8 + 144);
    float32x4_t v69 = *(float32x4_t *)(a8 + 64);
    v140[2] = *(float32x4_t *)(a8 + 48);
    v140[3] = v69;
    long long v70 = *(_OWORD *)(a8 + 96);
    v140[4] = *(float32x4_t *)(a8 + 80);
    v141[0] = v70;
    float32x4_t v71 = *(float32x4_t *)(a8 + 32);
    v140[0] = *(float32x4_t *)(a8 + 16);
    v140[1] = v71;
    memcpy((char *)&v129[2] + 4, (const void *)(v108 + (v65 << 6)), v67);
    if (!*(_DWORD *)(v59 + 64)) {
      goto LABEL_78;
    }
    int v122 = 0;
    unsigned int v106 = v61;
    int8x16_t v115 = (unsigned __int8 *)(v66 + 594);
    uint64_t v116 = v66 + 592;
    float v76 = &v137[v61];
    uint64_t v124 = &v136[v61];
    float v77 = &v139[4 * v61];
    while (1)
    {
      recompute_ideal_colors_1plane(v60, v111, v116, (uint64_t)&v129[2] + 4, (uint64_t)v140, (uint64_t)v135, (uint64_t)v134, v72, v73, *(uint8x8_t *)&v74, v75);
      uint64_t v78 = 0;
      char v79 = *v76 != *v124;
      float v80 = (float32x4_t *)v141;
      uint64_t v81 = 20;
      do
      {
        float32x4_t v82 = v80[-4];
        float32x4_t v83 = *v80++;
        int v84 = pack_color_endpoints(*((unsigned __int8 *)v77 + v78), (unsigned __int8 *)&v129[-1] + v81, *v76, v82, v83, v135[v78], v134[v78]);
        *((unsigned char *)&v129[-1] + v78 + 8) = v84;
        v79 &= v84 == BYTE8(v128);
        ++v78;
        v81 += 8;
      }
      while (a5 != v78);
      BYTE2(v128) = 0;
      char v89 = a5 > 1 ? v79 : 0;
      if (v89)
      {
        uint64_t v90 = 0;
        int v125 = 0;
        unsigned int v91 = (unsigned __int8 *)&v126;
        float32x4_t v92 = (float32x4_t *)v141;
        while (1)
        {
          int v93 = pack_color_endpoints(*((unsigned __int8 *)v77 + v90), v91, *v124, v92[-4], *v92, v135[v90], v134[v90]);
          *((unsigned char *)&v125 + v90) = v93;
          if (v93 != v125) {
            break;
          }
          ++v90;
          v91 += 8;
          ++v92;
          if (a5 == v90)
          {
            WORD1(v128) = -255;
            DWORD2(v128) = v125;
            double v85 = *(double *)&v126;
            *(void *)&long long v86 = v127;
            *(_OWORD *)((char *)v129 + 4) = v126;
            *(_OWORD *)((char *)&v129[1] + 4) = v127;
            BYTE1(v128) = a5;
            WORD3(v128) = v110;
            uint32x4_t v94 = v124;
            goto LABEL_49;
          }
        }
        BYTE1(v128) = a5;
        WORD3(v128) = v110;
        uint32x4_t v94 = v124;
        BYTE3(v128) = -1;
        if (BYTE2(v128)) {
          goto LABEL_49;
        }
      }
      else
      {
        BYTE1(v128) = a5;
        WORD3(v128) = v110;
        BYTE3(v128) = -1;
      }
      uint32x4_t v94 = v76;
LABEL_49:
      HIDWORD(v128) = *v94;
      WORD2(v128) = *v117;
      LOBYTE(v128) = 3;
      uint64_t v59 = a1;
      float v60 = a3;
      uint64_t v64 = v120;
      if (v122) {
        goto LABEL_59;
      }
      *(float *)&double v85 = v119(a1, v120, &v128, a3);
      if (*(float *)&v85 == -1.0e30)
      {
        LOBYTE(v128) = 0;
        float v95 = 1.0e30;
      }
      else
      {
        float v95 = *(float *)&v85;
      }
      if (v95 < v63) {
        float v63 = v95;
      }
      LODWORD(v8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1066024305;
      *(float *)&double v85 = v62 * (float)((float)((float)*(unsigned int *)(a1 + 64) * 0.045) + 1.08);
      if (v95 > *(float *)&v85) {
        goto LABEL_77;
      }
      if (v95 >= v62)
      {
LABEL_59:
        float v95 = v62;
      }
      else
      {
        *(float *)double v129 = v95;
        long long v96 = v131;
        *(_OWORD *)(a7 + 64) = v130;
        *(_OWORD *)(a7 + 80) = v96;
        *(_OWORD *)(a7 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v132;
        *(_DWORD *)(a7 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v133;
        long long v97 = v129[2];
        *(_OWORD *)(a7 + 32) = v129[1];
        *(_OWORD *)(a7 + 48) = v97;
        double v85 = *(double *)&v128;
        long long v86 = v129[0];
        *(_OWORD *)a7 = v128;
        *(_OWORD *)(a7 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v86;
        if (v95 < v16)
        {
          float v62 = v95;
          unsigned int v61 = v107;
          goto LABEL_78;
        }
      }
      int v98 = *(_DWORD *)a1;
      if (*v115 == *(unsigned __int8 *)(v120 + 3)) {
        char v99 = realign_weights_undecimated(v98, v120, a3, (uint64_t)&v128, v85, *(double *)&v86, v87, v88);
      }
      else {
        char v99 = realign_weights_decimated(v98, v120, a3, (uint64_t)&v128, v85, *(double *)&v86, v87, v88);
      }
      char v100 = v99;
      *(float *)&double v72 = v119(a1, v120, &v128, a3);
      if (*(float *)&v72 == -1.0e30)
      {
        LOBYTE(v128) = 0;
        LODWORD(v72) = 1900671690;
      }
      if (*(float *)&v72 < v63) {
        float v63 = *(float *)&v72;
      }
      unsigned int v101 = *(_DWORD *)(a1 + 64);
      *(float *)&double v73 = v95 * (float)((float)((float)(v101 + ~v122) * 0.045) + 1.0);
      if (*(float *)&v72 > *(float *)&v73)
      {
        float v62 = v95;
        goto LABEL_77;
      }
      float v62 = v95;
      if (*(float *)&v72 < v95) {
        break;
      }
LABEL_71:
      if (++v122 < v101) {
        char v104 = v100;
      }
      else {
        char v104 = 0;
      }
      if ((v104 & 1) == 0)
      {
        uint64_t v64 = v120;
LABEL_77:
        unsigned int v61 = v106;
        goto LABEL_78;
      }
    }
    LODWORD(v129[0]) = LODWORD(v72);
    long long v102 = v131;
    *(_OWORD *)(a7 + 64) = v130;
    *(_OWORD *)(a7 + 80) = v102;
    *(_OWORD *)(a7 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v132;
    *(_DWORD *)(a7 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v133;
    long long v103 = v129[2];
    *(_OWORD *)(a7 + 32) = v129[1];
    *(_OWORD *)(a7 + 48) = v103;
    double v73 = *(double *)&v128;
    long long v74 = v129[0];
    *(_OWORD *)a7 = v128;
    *(_OWORD *)(a7 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v74;
    if (*(float *)&v72 >= v16)
    {
      unsigned int v101 = *(_DWORD *)(a1 + 64);
      float v62 = *(float *)&v72;
      goto LABEL_71;
    }
    float v62 = *(float *)&v72;
    unsigned int v61 = v107;
    uint64_t v64 = v120;
LABEL_78:
    ++v61;
  }
  while (v61 < v107);
  return v63;
}

uint64_t realign_weights_decimated(int a1, uint64_t a2, float32x4_t *a3, uint64_t a4, double a5, double a6, int32x4_t a7, int32x4_t a8)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v11 = *(unsigned __int8 *)(a4 + 1);
  if (v11 < 2) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = *(unsigned __int16 *)(a2
  }
                              + ((unint64_t)(v11 - 2) << 11)
                              + 2 * *(unsigned __int16 *)(a4 + 6)
                              + 14660656);
  unint64_t v13 = 0;
  int v76 = (v11 << 10) - 2048;
  unsigned int v81 = *(unsigned __int8 *)(a2
                           + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848)
                           + 11304947);
  unsigned int v14 = *(unsigned __int8 *)(a2
                           + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848)
                           + 11304946);
  unint64_t v15 = *(unsigned __int8 *)(a2
                           + 129888
                           * *(unsigned __int8 *)(a2
                                                + 6
                                                * *(unsigned __int16 *)(a2
                                                                      + 2 * *(unsigned __int16 *)(a4 + 4)
                                                                      + 11300848)
                                                + 11304946)
                           + 594);
  char v74 = *(unsigned char *)(a2 + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848) + 11304949);
  __n128 v16 = (__n128)vdupq_n_s32(*(char *)(a4 + 3));
  int32x4_t v75 = (int32x4_t)v16;
  float v17 = (unsigned __int8 *)(a4 + 20);
  __int16 v85 = 0;
  int v78 = v11;
  signed int v18 = (unsigned __int8 *)(a4 + 8);
  uint64_t v83 = 16 * v11;
  do
  {
    int v19 = *v18++;
    unpack_color_endpoints(a1, v19, v17, (unsigned __int8 *)&v85 + 1, &v85, (uint64_t)&v86[v13 / 4 + 112], (__n128 *)&v86[v13 / 4 + 96], v16, a6, a7, a8);
    uint64_t v20 = v83;
    v13 += 16;
    v17 += 8;
  }
  while (v83 != v13);
  char v84 = 0;
  int v21 = 0;
  unsigned int v22 = 3072;
  if (v78 != 1) {
    unsigned int v22 = v76;
  }
  uint64_t v23 = a2 + 1088 * v22 + 11317232;
  int8x16_t v24 = (int8x16_t)vceqq_s32(v75, (int32x4_t)xmmword_234378DD0);
  uint64_t v25 = a4 + 52;
  uint64_t v26 = a2 + 129888 * v14;
  uint64_t v27 = v26 + 814;
  uint64_t v28 = v26 + 2544;
  char v79 = (float *)(v26 + 75184);
  float v77 = (unsigned __int8 *)(v26 + 6064);
  float32x4_t v29 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  float v30 = (char *)&quant_and_xfer_tables + 226 * v81;
  do
  {
    unint64_t v31 = 0;
    int8x16_t v24 = vmvnq_s8(v24);
    do
    {
      int32x4_t v32 = *(int32x4_t *)&v86[v31 / 4 + 112];
      int32x4_t v33 = (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)&v86[v31 / 4 + 96], v32), v24);
      *(float32x4_t *)&v86[v31 / 4 + 80] = vcvtq_f32_s32(v32);
      *(float32x4_t *)&v86[v31 / 4 + 64] = vmulq_f32(vcvtq_f32_s32(v33), v29);
      v31 += 16;
    }
    while (v20 != v31);
    int v82 = v21;
    unint64_t v34 = 0;
    float32x4_t v35 = (float32x4_t *)v86;
    do
    {
      float32x4_t v36 = (const float *)(v25 + v34);
      uint8x8_t v37 = (uint8x8_t)vld1_dup_f32(v36);
      *v35++ = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v37)));
      v34 += 4;
    }
    while (v34 < v15);
    uint64_t v38 = 0;
    double v39 = v77;
    double v40 = v79;
    do
    {
      unsigned int v41 = *(unsigned __int16 *)&v30[2 * *(unsigned __int8 *)(v25 + v38) + 96];
      float v42 = *(float *)&v86[v38];
      float v43 = (float)*(_WORD *)&v30[2 * *(unsigned __int8 *)(v25 + v38) + 96];
      unsigned int v44 = v41 >> 8;
      float v45 = v43 - v42;
      uint64_t v46 = *(unsigned __int8 *)(a2 + 129888 * v14 + v38 + 6000);
      float v47 = (float)(v41 >> 8) - v42;
      float32x4_t v48 = 0uLL;
      int v49 = v39;
      int v50 = v40;
      float32x4_t v51 = 0uLL;
      float32x4_t v52 = 0uLL;
      do
      {
        unsigned int v53 = *v49;
        v49 += 64;
        uint64_t v54 = a2 + 129888 * v14;
        float32x4_t v55 = (unsigned __int8 *)(v54 + v53);
        float32x4_t v56 = (float *)(v54 + 4 * v53);
        float v57 = (float)((float)(*(float *)&v86[v55[1030]] * v56[852])
                    + (float)(*(float *)&v86[*(unsigned __int8 *)(v27 + v53)] * *(float *)(v28 + 4 * v53)))
            + (float)((float)(*(float *)&v86[v55[1462]] * v56[1284]) + (float)(*(float *)&v86[v55[1246]] * v56[1068]));
        uint64_t v58 = *(unsigned __int8 *)(v23 + 1088 * v12 + v53 + 8);
        float32x4_t v59 = *(float32x4_t *)&v86[4 * v58 + 64];
        float32x4_t v60 = vaddq_f32(*(float32x4_t *)&v86[4 * v58 + 80], vmulq_n_f32(v59, v57));
        unsigned int v61 = &a3->i32[v53];
        v62.i32[0] = *v61;
        v62.i32[1] = v61[216];
        v62.i32[2] = v61[432];
        v62.i32[3] = v61[648];
        float32x4_t v63 = vsubq_f32(v60, v62);
        float32x4_t v64 = vaddq_f32(vmulq_n_f32(v59, (float)(v57 + (float)(v45 * *v50)) - v57), v63);
        float32x4_t v65 = vaddq_f32(vmulq_n_f32(v59, (float)(v57 + (float)(v47 * *v50)) - v57), v63);
        float32x4_t v48 = vaddq_f32(v48, vmulq_f32(v63, v63));
        float32x4_t v51 = vaddq_f32(v51, vmulq_f32(v64, v64));
        float32x4_t v52 = vaddq_f32(v52, vmulq_f32(v65, v65));
        v50 += 64;
        --v46;
      }
      while (v46);
      float32x4_t v66 = a3[221];
      int8x16_t v67 = (int8x16_t)vmulq_f32(v48, v66);
      *(float32x2_t *)v67.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), *(float32x2_t *)v67.i8);
      float32x2_t v68 = vpadd_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8);
      int8x16_t v69 = (int8x16_t)vmulq_f32(v51, v66);
      *(float32x2_t *)v69.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), *(float32x2_t *)v69.i8);
      float32x2_t v70 = vpadd_f32(*(float32x2_t *)v69.i8, *(float32x2_t *)v69.i8);
      int8x16_t v71 = (int8x16_t)vmulq_f32(v52, v66);
      *(float32x2_t *)v71.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), *(float32x2_t *)v71.i8);
      float32x2_t v72 = vpadd_f32(*(float32x2_t *)v71.i8, *(float32x2_t *)v71.i8);
      if ((vcgt_f32(v68, v72).u8[0] & 1) != 0
        && *(unsigned __int8 *)(v25 + v38) <= 0x3Fu
        && (vcgt_f32(v70, v72).u8[0] & 1) != 0)
      {
        *(float *)&v86[v38] = (float)v44;
LABEL_23:
        *(unsigned char *)(v25 + v38) = v44;
        char v84 = 1;
        goto LABEL_24;
      }
      if (*(unsigned char *)(v25 + v38) && (vcgt_f32(v68, v70).u8[0] & 1) != 0)
      {
        *(float *)&v86[v38] = v43;
        LOBYTE(v44) = v41;
        goto LABEL_23;
      }
LABEL_24:
      ++v38;
      ++v40;
      ++v39;
    }
    while (v38 != v15);
    v25 += 32;
    int v21 = v82 + 1;
    uint64_t v20 = v83;
  }
  while (v82 + 1 != (v74 & 1) + 1);
  return v84 & 1;
}

uint64_t realign_weights_undecimated(int a1, uint64_t a2, float32x4_t *a3, uint64_t a4, double a5, double a6, int32x4_t a7, int32x4_t a8)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(unsigned __int8 *)(a4 + 1);
  if (v12 < 2) {
    unsigned int v55 = 0;
  }
  else {
    unsigned int v55 = *(unsigned __int16 *)(a2
  }
                              + ((unint64_t)(v12 - 2) << 11)
                              + 2 * *(unsigned __int16 *)(a4 + 6)
                              + 14660656);
  unint64_t v13 = 0;
  int v53 = (v12 << 10) - 2048;
  unsigned int v54 = *(unsigned __int8 *)(a2
                           + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848)
                           + 11304947);
  char v51 = *(unsigned char *)(a2 + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a4 + 4) + 11300848) + 11304949);
  __n128 v14 = (__n128)vdupq_n_s32(*(char *)(a4 + 3));
  int32x4_t v52 = (int32x4_t)v14;
  unint64_t v15 = (unsigned __int8 *)(a4 + 20);
  v57[0] = 0;
  int v56 = v12;
  uint64_t v16 = 16 * v12;
  float v17 = (unsigned __int8 *)(a4 + 8);
  do
  {
    int v18 = *v17++;
    unpack_color_endpoints(a1, v18, v15, (unsigned __int8 *)v57 + 1, v57, (uint64_t)&v57[v13 / 2 + 97], (__n128 *)&v57[v13 / 2 + 65], v14, a6, a7, a8);
    v13 += 16;
    v15 += 8;
  }
  while (v16 != v13);
  char v19 = 0;
  int v20 = 0;
  if (v56 == 1) {
    unsigned int v21 = 3072;
  }
  else {
    unsigned int v21 = v53;
  }
  int8x16_t v22 = (int8x16_t)vceqq_s32(v52, (int32x4_t)xmmword_234378DD0);
  uint64_t v23 = a4 + 52;
  uint64_t v24 = 1088 * v55 + 1088 * v21 + a2 + 11317240;
  uint64_t v25 = (char *)&quant_and_xfer_tables + 226 * v54;
  float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  do
  {
    unint64_t v27 = 0;
    int8x16_t v22 = vmvnq_s8(v22);
    do
    {
      int32x4_t v28 = *(int32x4_t *)&v57[v27 / 2 + 97];
      int32x4_t v29 = (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)&v57[v27 / 2 + 65], v28), v22);
      *(float32x4_t *)&v57[v27 / 2 + 33] = vcvtq_f32_s32(v28);
      *(float32x4_t *)&v57[v27 / 2 + 1] = vmulq_f32(vcvtq_f32_s32(v29), v26);
      v27 += 16;
    }
    while (v16 != v27);
    unint64_t v30 = 0;
    unsigned __int8 v31 = *(unsigned char *)(a2 + 3);
    do
    {
      uint64_t v32 = *(unsigned __int8 *)(v23 + v30);
      int v33 = HIBYTE(*(unsigned __int16 *)&v25[2 * v32 + 96]);
      uint64_t v34 = *(unsigned __int8 *)(v24 + v30);
      float32x4_t v35 = *(float32x4_t *)&v57[8 * v34 + 1];
      float32x4_t v36 = *(float32x4_t *)&v57[8 * v34 + 33];
      uint8x8_t v37 = &a3->i32[v30];
      v38.i32[0] = *v37;
      v38.i32[1] = v37[216];
      v38.i32[2] = v37[432];
      v38.i32[3] = v37[648];
      float32x4_t v39 = vaddq_f32(v36, vmulq_n_f32(v35, (float)v32));
      float32x4_t v40 = a3[221];
      float32x4_t v41 = vsubq_f32(v39, v38);
      float32x4_t v42 = vaddq_f32(vmulq_n_f32(v35, (float)(*(_WORD *)&v25[2 * v32 + 96] - (int)v32)), v41);
      float32x4_t v43 = vaddq_f32(vmulq_n_f32(v35, (float)(v33 - v32)), v41);
      int8x16_t v44 = (int8x16_t)vmulq_f32(v40, vmulq_f32(v41, v41));
      *(float32x2_t *)v44.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), *(float32x2_t *)v44.i8);
      float32x2_t v45 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8);
      int8x16_t v46 = (int8x16_t)vmulq_f32(v40, vmulq_f32(v42, v42));
      *(float32x2_t *)v46.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), *(float32x2_t *)v46.i8);
      float32x2_t v47 = vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8);
      int8x16_t v48 = (int8x16_t)vmulq_f32(v40, vmulq_f32(v43, v43));
      *(float32x2_t *)v48.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(float32x2_t *)v48.i8);
      float32x2_t v49 = vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8);
      if (vcgt_f32(v45, v49).u8[0] & 1) != 0 && v32 <= 0x3F && (vcgt_f32(v47, v49).u8[0]) {
        goto LABEL_19;
      }
      if (*(unsigned char *)(v23 + v30) && (vcgt_f32(v45, v47).u8[0] & 1) != 0)
      {
        LOBYTE(v33) = *(_WORD *)&v25[2 * v32 + 96];
LABEL_19:
        *(unsigned char *)(v23 + v30) = v33;
        unsigned __int8 v31 = *(unsigned char *)(a2 + 3);
        char v19 = 1;
      }
      ++v30;
    }
    while (v30 < v31);
    v23 += 32;
    ++v20;
  }
  while (v20 != (v51 & 1) + 1);
  return v19 & 1;
}

void compute_ideal_colors_and_weights_1plane(uint64_t a1, unsigned char *a2, unsigned char *a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  float32x4_t v11 = *(float32x4_t *)(a1 + 3488);
  float32x4_t v12 = *(float32x4_t *)(a1 + 3520);
  {
    float32x4_t v60 = v12;
    float32x4_t v61 = v11;
    float32x4_t v12 = v60;
    float32x4_t v11 = v61;
    if (v59)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      float32x4_t v12 = v60;
      float32x4_t v11 = v61;
    }
  }
  int16x4_t v13 = vmovn_s32(vceqq_f32(v11, v12));
  uint16x4_t v14 = 0;
  v14.i16[3] = v13.i16[3];
  int8x16_t v15 = (int8x16_t)vmovl_u16(v14);
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  uint32x4_t v17 = (uint32x4_t)vandq_s8(v15, v16);
  double v18 = *(double *)&mask(vmask4)::shift;
  int32x4_t v19 = (int32x4_t)vshlq_u32(v17, (uint32x4_t)mask(vmask4)::shift);
  v19.i32[0] = vaddvq_s32(v19);
  if (v19.i32[0])
  {
    compute_ideal_colors_and_weights_3_comp(a1, a2, (uint64_t)a3, 3, *(double *)v19.i64, v18, a6, a7, a8);
  }
  else
  {
    float32x2_t v20 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 3536), *(int8x16_t *)(a1 + 3536), 8uLL), *(float32x2_t *)(a1 + 3536));
    float v21 = 0.25 * vpadd_f32(v20, v20).f32[0];
    int8x16_t v22 = a2 + 224;
    uint64_t v23 = *(unsigned __int16 *)a2;
    uint64_t v24 = *(unsigned __int8 *)(a1 + 3456);
    int8x16_t v26 = compute_avgs_and_dirs_4_comp(a2, (float32x4_t *)a1, (uint64_t)v62);
    uint64_t v25 = 0;
    v26.i64[0] = 0;
    char v27 = 1;
    float v28 = 0.0;
    do
    {
      int32x4_t v29 = (int32x4_t *)&v62[2 * v25];
      float32x4_t v30 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v26, vaddq_f32((float32x4_t)vdupq_laneq_s32(v29[1], 2), vaddq_f32((float32x4_t)v29[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29[1].i8, 1)))), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v29[1]), (int8x16_t)v29[1]);
      int8x16_t v31 = (int8x16_t)vmulq_f32(v30, v30);
      *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v31.i8);
      int32x2_t v32 = (int32x2_t)vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8);
      if (*(float *)v32.i32 == 0.0)
      {
        v33.i64[0] = 0x3F0000003F000000;
        v33.i64[1] = 0x3F0000003F000000;
      }
      else
      {
        float32x4_t v33 = vdivq_f32(v30, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v32, 0)));
      }
      float32x4_t v34 = *(float32x4_t *)v29;
      uint64_t v35 = a2[v25 + 4];
      float v36 = -1.0e10;
      float v37 = 1.0e10;
      if (a2[v25 + 4])
      {
        float32x4_t v38 = v22;
        uint64_t v39 = a2[v25 + 4];
        float v37 = 1.0e10;
        float v36 = -1.0e10;
        do
        {
          unsigned int v40 = *v38++;
          float32x4_t v41 = (__int32 *)(a1 + 4 * v40);
          v42.i32[0] = *v41;
          v42.i32[1] = v41[216];
          v42.i32[2] = v41[432];
          v42.i32[3] = v41[648];
          int8x16_t v43 = (int8x16_t)vmulq_f32(v33, vsubq_f32(v42, v34));
          *(float32x2_t *)v43.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), *(float32x2_t *)v43.i8);
          float v44 = vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8).f32[0];
          *(float *)&a3[4 * v40 + 160] = v44;
          if (v44 < v37) {
            float v37 = v44;
          }
          if (v44 > v36) {
            float v36 = v44;
          }
          --v39;
        }
        while (v39);
      }
      if (v36 <= v37) {
        float v45 = 0.0000001;
      }
      else {
        float v45 = v36;
      }
      if (v36 <= v37) {
        float v37 = 0.0;
      }
      float v46 = v45 - v37;
      if (v25) {
        v27 &= (float)(v46 * v46) == v28;
      }
      else {
        float v28 = v46 * v46;
      }
      float32x2_t v47 = (float32x4_t *)&a3[16 * v25];
      v47[2] = vaddq_f32(v34, vmulq_n_f32(v33, v37));
      v47[6] = vaddq_f32(v34, vmulq_n_f32(v33, v45));
      if (v35)
      {
        uint64_t v48 = 0;
        float v49 = v21 * (float)(v46 * v46);
        float v50 = 1.0 / v46;
        do
        {
          char v51 = (float *)&a3[4 * v22[v48]];
          float v52 = v50 * (float)(v51[40] - v37);
          float v53 = fmaxf(v52, 0.0);
          if (v52 <= 1.0) {
            float v54 = v53;
          }
          else {
            float v54 = 1.0;
          }
          v51[40] = v54;
          v51[256] = v49;
          ++v48;
        }
        while (v35 != v48);
      }
      ++v25;
      v22 += 216;
    }
    while (v25 != v23);
    uint64_t v55 = ((_WORD)v24 + 3) & 0x1FC;
    if (v55 > v24)
    {
      uint64_t v56 = v24 - v55;
      float v57 = &a3[4 * v24];
      do
      {
        *((_DWORD *)v57 + 40) = 0;
        *((_DWORD *)v57 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        v57 += 4;
      }
      while (!__CFADD__(v56++, 1));
    }
    *a3 = v27 & 1;
  }
}

void compute_ideal_colors_and_weights_3_comp(uint64_t a1, unsigned char *a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v13 = *(unsigned __int16 *)a2;
  *(_DWORD *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v13;
  uint64_t v14 = *(unsigned __int8 *)(a1 + 3456);
  switch(a4)
  {
    case 2:
      v20.i64[0] = 0;
      v20.i32[3] = 0;
      v20.i32[2] = HIDWORD(*(_OWORD *)(a1 + 3536));
      float32x2_t v21 = vadd_f32(*(float32x2_t *)(a1 + 3536), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      unsigned __int32 v17 = vpadd_f32(v21, v21).u32[0];
      uint64_t v19 = a1 + 864;
LABEL_7:
      uint64_t v18 = a1;
      goto LABEL_8;
    case 1:
      v22.i32[0] = *(_OWORD *)(a1 + 3536);
      v22.i32[1] = *(void *)(a1 + 3544);
      v22.i32[2] = HIDWORD(*(_OWORD *)(a1 + 3536));
      v22.i32[3] = 0;
      float32x2_t v23 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(float32x2_t *)v22.i8);
      unsigned __int32 v17 = vpadd_f32(v23, v23).u32[0];
      uint64_t v19 = a1 + 1728;
      goto LABEL_7;
    case 0:
      int8x16_t v15 = *(int8x16_t *)(a1 + 3536);
      v15.i32[3] = 0;
      float32x2_t v16 = vadd_f32(*(float32x2_t *)(a1 + 3536), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      unsigned __int32 v17 = vpadd_f32(v16, v16).u32[0];
      uint64_t v18 = a1 + 864;
      uint64_t v19 = a1 + 1728;
LABEL_8:
      uint64_t v24 = a1 + 2592;
      float v25 = *(float *)&v17 * 0.33333;
      goto LABEL_9;
  }
  int8x16_t v65 = *(int8x16_t *)(a1 + 3536);
  v65.i32[3] = 0;
  float32x2_t v68 = (float32x2_t)vextq_s8(v65, v65, 8uLL).u64[0];
  float32x2_t v66 = vadd_f32(*(float32x2_t *)(a1 + 3536), v68);
  double v67 = COERCE_DOUBLE(vpadd_f32(v66, v66));
  uint64_t v19 = a1 + 864;
  uint64_t v24 = a1 + 1728;
  v68.i32[0] = 1051372203;
  float v25 = 0.33333 * *(float *)&v67;
  if (a4 == 3)
  {
    float32x4_t v26 = (float32x4_t)compute_avgs_and_dirs_3_comp_rgb(a2, a1, (uint64_t)v69, v67, *(double *)&v68, a7, a8, a9);
    uint64_t v18 = a1;
    goto LABEL_10;
  }
  uint64_t v18 = a1;
LABEL_9:
  float32x4_t v26 = (float32x4_t)compute_avgs_and_dirs_3_comp(a2, (float32x4_t *)a1, a4, (uint64_t)v69);
LABEL_10:
  uint64_t v28 = 0;
  int32x4_t v29 = a2 + 224;
  v26.i64[0] = 0;
  char v30 = 1;
  float v31 = 0.0;
  do
  {
    int32x2_t v32 = (int32x4_t *)&v69[2 * v28];
    float32x4_t v33 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v26, vaddq_f32((float32x4_t)vdupq_laneq_s32(v32[1], 2), vaddq_f32((float32x4_t)v32[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32[1].i8, 1)))), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v32[1]), (int8x16_t)v32[1]);
    int8x16_t v34 = (int8x16_t)vmulq_f32(v33, v33);
    *(float32x2_t *)v34.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v34.i8);
    int32x2_t v35 = (int32x2_t)vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8);
    float32x4_t v36 = (float32x4_t)xmmword_23441B5F0;
    if (*(float *)v35.i32 != 0.0) {
      float32x4_t v36 = vdivq_f32(v33, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v35, 0)));
    }
    float32x4_t v37 = *(float32x4_t *)v32;
    uint64_t v38 = a2[v28 + 4];
    float v39 = -1.0e10;
    float v40 = 1.0e10;
    if (a2[v28 + 4])
    {
      float32x4_t v41 = v29;
      uint64_t v42 = a2[v28 + 4];
      float v40 = 1.0e10;
      float v39 = -1.0e10;
      do
      {
        unsigned int v43 = *v41++;
        v27.i32[0] = *(_DWORD *)(v18 + 4 * v43);
        v27.i32[1] = *(_DWORD *)(v19 + 4 * v43);
        v27.i32[2] = *(_DWORD *)(v24 + 4 * v43);
        float32x4_t v44 = vmulq_f32(v36, vsubq_f32(v27, v37));
        float32x4_t v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1)));
        *(_DWORD *)(a3 + 4 * v43 + 160) = v27.i32[0];
        if (v27.f32[0] < v40) {
          float v40 = v27.f32[0];
        }
        if (v27.f32[0] > v39) {
          float v39 = v27.f32[0];
        }
        --v42;
      }
      while (v42);
    }
    if (v39 <= v40)
    {
      float v39 = 0.0000001;
      float v40 = 0.0;
    }
    float v45 = v39 - v40;
    if (v28) {
      v30 &= (float)(v45 * v45) == v31;
    }
    else {
      float v31 = v45 * v45;
    }
    if (v38)
    {
      uint64_t v46 = 0;
      float v47 = v25 * (float)(v45 * v45);
      float v48 = 1.0 / v45;
      do
      {
        uint64_t v49 = a3 + 4 * v29[v46];
        float v50 = v48 * (float)(*(float *)(v49 + 160) - v40);
        float v51 = fmaxf(v50, 0.0);
        if (v50 <= 1.0) {
          float v52 = v51;
        }
        else {
          float v52 = 1.0;
        }
        *(float *)(v49 + 160) = v52;
        *(float *)(v49 + 1024) = v47;
        ++v46;
      }
      while (v38 != v46);
    }
    int8x16_t v53 = (int8x16_t)vaddq_f32(v37, vmulq_n_f32(v36, v40));
    int8x16_t v54 = (int8x16_t)vaddq_f32(v37, vmulq_n_f32(v36, v39));
    int8x16_t v55 = *(int8x16_t *)(a1 + 3488);
    int8x16_t v56 = *(int8x16_t *)(a1 + 3520);
    if (a4)
    {
      if (a4 == 1)
      {
        int32x4_t v59 = vzip1q_s32((int32x4_t)v55, (int32x4_t)v53);
        *(int32x4_t *)(a3 + 16 * v28 + 32) = vtrn2q_s32(v59, vuzp1q_s32(v59, (int32x4_t)v53));
        int32x4_t v60 = vzip1q_s32((int32x4_t)v56, (int32x4_t)v54);
        int8x16_t v58 = (int8x16_t)vtrn2q_s32(v60, vuzp1q_s32(v60, (int32x4_t)v54));
      }
      else if (a4 == 2)
      {
        int32x4_t v57 = vtrn1q_s32((int32x4_t)v55, (int32x4_t)v53);
        v57.i64[0] = v53.i64[0];
        *(int32x4_t *)(a3 + 16 * v28 + 32) = v57;
        int8x16_t v58 = (int8x16_t)vtrn1q_s32((int32x4_t)v56, (int32x4_t)v54);
        v58.i64[0] = v54.i64[0];
      }
      else
      {
        v53.i32[3] = HIDWORD(*(_OWORD *)(a1 + 3488));
        *(int8x16_t *)(a3 + 16 * v28 + 32) = v53;
        v54.i32[3] = v56.i32[3];
        int8x16_t v58 = v54;
      }
    }
    else
    {
      *(int8x16_t *)(a3 + 16 * v28 + 32) = vextq_s8(vextq_s8(v55, v55, 4uLL), v53, 0xCuLL);
      int8x16_t v58 = vextq_s8(vextq_s8(v56, v56, 4uLL), v54, 0xCuLL);
    }
    *(int8x16_t *)(a3 + 16 * v28++ + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v58;
    v29 += 216;
  }
  while (v28 != v13);
  uint64_t v61 = ((_WORD)v14 + 3) & 0x1FC;
  if (v61 > v14)
  {
    uint64_t v62 = v14 - v61;
    uint64_t v63 = a3 + 4 * v14;
    do
    {
      *(_DWORD *)(v63 + 160) = 0;
      *(_DWORD *)(v63 + 1024) = 0;
      v63 += 4;
    }
    while (!__CFADD__(v62++, 1));
  }
  *(unsigned char *)a3 = v30 & 1;
}

uint64_t compute_ideal_colors_and_weights_2planes(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, int32x4_t a9, float32x4_t a10)
{
  float32x4_t v12 = (unsigned __int16 *)(a1 + 14659568);
  float32x4_t v13 = *(float32x4_t *)(a2 + 3488);
  float32x4_t v14 = *(float32x4_t *)(a2 + 3520);
  {
    uint64_t v30 = a4;
    int v29 = a3;
    float32x4_t v27 = v14;
    float32x4_t v28 = v13;
    float32x4_t v14 = v27;
    float32x4_t v13 = v28;
    a3 = v29;
    a4 = v30;
    if (v26)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      float32x4_t v14 = v27;
      float32x4_t v13 = v28;
      a3 = v29;
      a4 = v30;
    }
  }
  int16x4_t v15 = vmovn_s32(vceqq_f32(v13, v14));
  uint16x4_t v16 = 0;
  v16.i16[3] = v15.i16[3];
  int8x16_t v17 = (int8x16_t)vmovl_u16(v16);
  v18.i64[0] = 0x100000001;
  v18.i64[1] = 0x100000001;
  int32x4_t v19 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v17, v18), (uint32x4_t)mask(vmask4)::shift);
  v19.i32[0] = vaddvq_s32(v19);
  switch(a3)
  {
    case 2:
      if (v19.i32[0])
      {
        compute_ideal_colors_and_weights_2_comp(a2, v12, a4, 0, 1u, *(double *)v19.i64, *(double *)&mask(vmask4)::shift, a8, a9);
        unsigned int v20 = 2;
        goto LABEL_17;
      }
      unsigned int v20 = 2;
      uint64_t v21 = a2;
      int8x16_t v22 = v12;
      uint64_t v23 = a4;
      int v24 = 2;
      break;
    case 1:
      if (v19.i32[0])
      {
        compute_ideal_colors_and_weights_2_comp(a2, v12, a4, 0, 2u, *(double *)v19.i64, *(double *)&mask(vmask4)::shift, a8, a9);
        unsigned int v20 = 1;
        goto LABEL_17;
      }
      unsigned int v20 = 1;
      uint64_t v21 = a2;
      int8x16_t v22 = v12;
      uint64_t v23 = a4;
      int v24 = 1;
      break;
    case 0:
      if (v19.i32[0]) {
        compute_ideal_colors_and_weights_2_comp(a2, v12, a4, 1u, 2u, *(double *)v19.i64, *(double *)&mask(vmask4)::shift, a8, a9);
      }
      else {
        compute_ideal_colors_and_weights_3_comp(a2, v12, a4, 0, *(double *)v19.i64, *(double *)&mask(vmask4)::shift, a8, *(double *)a9.i64, a10);
      }
      unsigned int v20 = 0;
      goto LABEL_17;
    default:
      unsigned int v20 = 3;
      uint64_t v21 = a2;
      int8x16_t v22 = v12;
      uint64_t v23 = a4;
      int v24 = 3;
      break;
  }
  compute_ideal_colors_and_weights_3_comp(v21, v22, v23, v24, *(double *)v19.i64, *(double *)&mask(vmask4)::shift, a8, *(double *)a9.i64, a10);
LABEL_17:
  return compute_ideal_colors_and_weights_1_comp(a2, v12, a5, v20);
}

unsigned __int16 *compute_ideal_colors_and_weights_2_comp(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8, int32x4_t a9)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v14 = *a2;
  *(_DWORD *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14;
  uint64_t v15 = *(unsigned __int8 *)(a1 + 3456);
  if (a4 || a5 != 1)
  {
    int8x16_t v19 = *(int8x16_t *)(a1 + 3536);
    if (a4 || a5 != 2)
    {
      float32x2_t v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 4uLL), 0);
      float32x2_t v17 = vpadd_f32(v22, v22);
      uint64_t v21 = a1 + 864;
      uint64_t v18 = a1 + 1728;
      goto LABEL_9;
    }
    float32x2_t v20 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v19.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), 0);
    float32x2_t v17 = vpadd_f32(v20, v20);
    uint64_t v18 = a1 + 1728;
  }
  else
  {
    float32x2_t v16 = vadd_f32(*(float32x2_t *)(a1 + 3536), 0);
    float32x2_t v17 = vpadd_f32(v16, v16);
    uint64_t v18 = a1 + 864;
  }
  uint64_t v21 = a1;
LABEL_9:
  float v23 = v17.f32[0] * 0.5;
  double result = compute_avgs_and_dirs_2_comp(a2, (int32x4_t *)a1, a4, a5, (uint64_t)v63, *(double *)&v17, COERCE_DOUBLE((unint64_t)COERCE_UNSIGNED_INT(0.5)), a8, a9);
  uint64_t v26 = 0;
  int8x16_t v27 = (int8x16_t)vceqq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_234378DD0);
  float32x4_t v30 = (float32x4_t)vdupq_n_s32(a5);
  int8x16_t v28 = (int8x16_t)vceqq_s32((int32x4_t)v30, (int32x4_t)xmmword_234378DD0);
  int v29 = a2 + 112;
  v30.i64[0] = 0;
  char v31 = 1;
  float v32 = 0.0;
  do
  {
    float32x4_t v33 = (float32x4_t *)&v63[2 * v26];
    float32x4_t v34 = v33[1];
    float32x4_t v35 = (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL);
    *(float32x2_t *)v35.f32 = vadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v34.f32);
    *(float32x2_t *)v35.f32 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
    float32x4_t v36 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v30, v35), 0), (int8x16_t)vsubq_f32((float32x4_t)0, v34), (int8x16_t)v34);
    int8x16_t v37 = (int8x16_t)vmulq_f32(v36, v36);
    *(float32x2_t *)v37.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), *(float32x2_t *)v37.i8);
    int32x2_t v38 = (int32x2_t)vpadd_f32(*(float32x2_t *)v37.i8, *(float32x2_t *)v37.i8);
    float32x4_t v39 = (float32x4_t)xmmword_23441B600;
    if (*(float *)v38.i32 != 0.0) {
      float32x4_t v39 = vdivq_f32(v36, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v38, 0)));
    }
    float32x4_t v40 = *v33;
    uint64_t v41 = *((unsigned __int8 *)a2 + v26 + 4);
    float v42 = -1.0e10;
    float v43 = 1.0e10;
    if (*((unsigned char *)a2 + v26 + 4))
    {
      float32x4_t v44 = v29;
      uint64_t v45 = *((unsigned __int8 *)a2 + v26 + 4);
      float v43 = 1.0e10;
      float v42 = -1.0e10;
      do
      {
        unsigned int v46 = *(unsigned __int8 *)v44;
        float32x4_t v44 = (unsigned __int16 *)((char *)v44 + 1);
        v25.i32[0] = *(_DWORD *)(v21 + 4 * v46);
        v25.i32[1] = *(_DWORD *)(v18 + 4 * v46);
        float32x4_t v25 = vmulq_f32(v39, vsubq_f32(v25, v40));
        *(float32x2_t *)v25.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), *(float32x2_t *)v25.f32);
        v25.f32[0] = vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0];
        *(_DWORD *)(a3 + 4 * v46 + 160) = v25.i32[0];
        if (v25.f32[0] < v43) {
          float v43 = v25.f32[0];
        }
        if (v25.f32[0] > v42) {
          float v42 = v25.f32[0];
        }
        --v45;
      }
      while (v45);
    }
    if (v42 <= v43)
    {
      float v42 = 0.0000001;
      float v43 = 0.0;
    }
    float v47 = v42 - v43;
    if (v26) {
      v31 &= (float)(v47 * v47) == v32;
    }
    else {
      float v32 = v47 * v47;
    }
    if (v41)
    {
      uint64_t v48 = 0;
      float v49 = v23 * (float)(v47 * v47);
      float v50 = 1.0 / v47;
      do
      {
        uint64_t v51 = a3 + 4 * *((unsigned __int8 *)v29 + v48);
        float v52 = v50 * (float)(*(float *)(v51 + 160) - v43);
        float v53 = fmaxf(v52, 0.0);
        if (v52 <= 1.0) {
          float v54 = v53;
        }
        else {
          float v54 = 1.0;
        }
        *(float *)(v51 + 160) = v54;
        *(float *)(v51 + 1024) = v49;
        ++v48;
      }
      while (v41 != v48);
    }
    int32x2_t v55 = (int32x2_t)vaddq_f32(v40, vmulq_n_f32(v39, v43)).u64[0];
    int32x2_t v56 = (int32x2_t)vaddq_f32(v40, vmulq_n_f32(v39, v42)).u64[0];
    float32x4_t v25 = (float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(v56, 0), v27);
    int8x16_t v57 = vorrq_s8(vbicq_s8(*(int8x16_t *)(a1 + 3520), v27), (int8x16_t)v25);
    int8x16_t v58 = (int8x16_t *)(a3 + 16 * v26);
    v58[2] = vorrq_s8(vbicq_s8(vorrq_s8(vbicq_s8(*(int8x16_t *)(a1 + 3488), v27), vandq_s8((int8x16_t)vdupq_lane_s32(v55, 0), v27)), v28), vandq_s8((int8x16_t)vdupq_lane_s32(v55, 1), v28));
    v58[6] = vorrq_s8(vbicq_s8(v57, v28), vandq_s8((int8x16_t)vdupq_lane_s32(v56, 1), v28));
    ++v26;
    v29 += 108;
  }
  while (v26 != v14);
  uint64_t v59 = ((_WORD)v15 + 3) & 0x1FC;
  if (v59 > v15)
  {
    uint64_t v60 = v15 - v59;
    uint64_t v61 = a3 + 4 * v15;
    do
    {
      *(_DWORD *)(v61 + 160) = 0;
      *(_DWORD *)(v61 + 1024) = 0;
      v61 += 4;
    }
    while (!__CFADD__(v60++, 1));
  }
  *(unsigned char *)a3 = v31 & 1;
  return result;
}

uint64_t compute_ideal_colors_and_weights_1_comp(uint64_t result, unsigned __int16 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = *a2;
  *(_DWORD *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v6;
  uint64_t v7 = *(unsigned __int8 *)(result + 3456);
  if (a4 == 2)
  {
    float v8 = *(float *)(result + 3544);
    uint64_t v9 = result + 1728;
  }
  else if (a4 == 1)
  {
    float v8 = *(float *)(result + 3540);
    uint64_t v9 = result + 864;
  }
  else if (a4)
  {
    float v8 = *(float *)(result + 3548);
    uint64_t v9 = result + 2592;
  }
  else
  {
    float v8 = *(float *)(result + 3536);
    uint64_t v9 = result;
  }
  uint64_t v10 = 0;
  int8x16_t v11 = (int8x16_t)vceqq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_234378DD0);
  float32x4_t v12 = a2 + 112;
  char v13 = 1;
  float v14 = 0.0;
  do
  {
    uint64_t v15 = *((unsigned __int8 *)a2 + v10 + 4);
    v4.i32[0] = -803929351;
    v5.i32[0] = 1343554297;
    if (*((unsigned char *)a2 + v10 + 4))
    {
      float32x2_t v16 = v12;
      uint64_t v17 = *((unsigned __int8 *)a2 + v10 + 4);
      v5.i32[0] = 1343554297;
      v4.i32[0] = -803929351;
      do
      {
        unsigned int v18 = *(unsigned __int8 *)v16;
        float32x2_t v16 = (unsigned __int16 *)((char *)v16 + 1);
        float v19 = *(float *)(v9 + 4 * v18);
        if (v19 < *(float *)v5.i32) {
          *(float *)v5.i32 = v19;
        }
        if (v19 > *(float *)v4.i32) {
          *(float *)v4.i32 = v19;
        }
        --v17;
      }
      while (v17);
    }
    if (*(float *)v4.i32 <= *(float *)v5.i32)
    {
      *(float *)v4.i32 = 0.0000001;
      *(float *)v5.i32 = 0.0;
    }
    float v20 = *(float *)v4.i32 - *(float *)v5.i32;
    if (v10) {
      v13 &= (float)(v20 * v20) == v14;
    }
    else {
      float v14 = v20 * v20;
    }
    if (*((unsigned char *)a2 + v10 + 4))
    {
      uint64_t v21 = 0;
      float v22 = v8 * (float)(v20 * v20);
      float v23 = 1.0 / v20;
      do
      {
        uint64_t v24 = *((unsigned __int8 *)v12 + v21);
        float v25 = v23 * (float)(*(float *)(v9 + 4 * v24) - *(float *)v5.i32);
        float v26 = fmaxf(v25, 0.0);
        if (v25 <= 1.0) {
          float v27 = v26;
        }
        else {
          float v27 = 1.0;
        }
        uint64_t v28 = a3 + 4 * v24;
        *(float *)(v28 + 160) = v27;
        *(float *)(v28 + 1024) = v22;
        ++v21;
      }
      while (v15 != v21);
    }
    int v29 = (int8x16_t *)(a3 + 16 * v10);
    v29[2] = vorrq_s8(vbicq_s8(*(int8x16_t *)(result + 3488), v11), vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0), v11));
    int8x16_t v5 = vbicq_s8(*(int8x16_t *)(result + 3520), v11);
    int8x16_t v4 = vorrq_s8(v5, vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v4.i8, 0), v11));
    v29[6] = v4;
    ++v10;
    v12 += 108;
  }
  while (v10 != v6);
  uint64_t v30 = ((_WORD)v7 + 3) & 0x1FC;
  if (v30 > v7)
  {
    uint64_t v31 = v7 - v30;
    uint64_t v32 = a3 + 4 * v7;
    do
    {
      *(_DWORD *)(v32 + 160) = 0;
      *(_DWORD *)(v32 + 1024) = 0;
      v32 += 4;
    }
    while (!__CFADD__(v31++, 1));
  }
  *(unsigned char *)a3 = v13 & 1;
  return result;
}

float32x2_t compute_error_of_weight_set_1plane(float32x4_t *a1, unsigned __int8 *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5, double a6, uint8x8_t a7)
{
  unint64_t v10 = *a2;
  unsigned int v11 = a2[1];
  if (v11 < 3)
  {
    if (v11 == 2)
    {
      unint64_t v16 = 0;
      float32x4_t v13 = 0uLL;
      do
      {
        float32x4_t v25 = v13;
        *(double *)v17.i64 = bilinear_infill_vla_2((uint64_t)a2, (uint64_t)a3, v16, *(uint8x8_t *)a4.f32, *(uint8x8_t *)a5.f32);
        float32x4_t v18 = vsubq_f32(v17, a1[10]);
        a5 = a1[64];
        a4 = vmulq_f32(a5, vmulq_f32(v18, v18));
        float32x4_t v13 = vaddq_f32(v25, a4);
        v16 += 4;
        ++a1;
      }
      while (v16 < v10);
    }
    else
    {
      unint64_t v19 = 0;
      float32x4_t v13 = 0uLL;
      do
      {
        float32x4_t v20 = *a3++;
        float32x4_t v21 = vsubq_f32(v20, a1[10]);
        float32x4_t v13 = vaddq_f32(v13, vmulq_f32(a1[64], vmulq_f32(v21, v21)));
        v19 += 4;
        ++a1;
      }
      while (v19 < v10);
    }
  }
  else
  {
    unint64_t v12 = 0;
    float32x4_t v13 = 0uLL;
    do
    {
      float32x4_t v24 = v13;
      *(double *)v14.i64 = bilinear_infill_vla((uint64_t)a2, (uint64_t)a3, v12, *(uint8x8_t *)a4.f32, *(uint8x8_t *)a5.f32, *(uint8x8_t *)v13.f32, a7);
      float32x4_t v15 = vsubq_f32(v14, a1[10]);
      a5 = a1[64];
      a4 = vmulq_f32(a5, vmulq_f32(v15, v15));
      float32x4_t v13 = vaddq_f32(v24, a4);
      v12 += 4;
      ++a1;
    }
    while (v12 < v10);
  }
  float32x2_t v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), *(float32x2_t *)v13.f32);
  return vpadd_f32(v22, v22);
}

double bilinear_infill_vla(uint64_t a1, uint64_t a2, unsigned int a3, uint8x8_t a4, uint8x8_t a5, uint8x8_t a6, uint8x8_t a7)
{
  uint64_t v7 = (_DWORD *)(a1 + a3);
  __int32 v8 = *(_DWORD *)((char *)v7 + 222);
  uint64_t v7 = (_DWORD *)((char *)v7 + 222);
  a4.i32[0] = v8;
  a5.i32[0] = v7[54];
  a6.i32[0] = v7[108];
  a7.i32[0] = v7[162];
  float32x4_t v9 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  v9.i32[0] = *(_DWORD *)(a2 + 4 * v9.u32[0]);
  v9.i32[1] = *(_DWORD *)(a2 + 4 * v9.u32[1]);
  v9.i32[2] = *(_DWORD *)(a2 + 4 * v9.u32[2]);
  v9.i32[3] = *(_DWORD *)(a2 + 4 * v9.u32[3]);
  float32x4_t v10 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  v10.i32[0] = *(_DWORD *)(a2 + 4 * v10.u32[0]);
  v10.i32[1] = *(_DWORD *)(a2 + 4 * v10.u32[1]);
  v10.i32[2] = *(_DWORD *)(a2 + 4 * v10.u32[2]);
  v10.i32[3] = *(_DWORD *)(a2 + 4 * v10.u32[3]);
  float32x4_t v11 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a6));
  v11.i32[0] = *(_DWORD *)(a2 + 4 * v11.u32[0]);
  v11.i32[1] = *(_DWORD *)(a2 + 4 * v11.u32[1]);
  v11.i32[2] = *(_DWORD *)(a2 + 4 * v11.u32[2]);
  v11.i32[3] = *(_DWORD *)(a2 + 4 * v11.u32[3]);
  float32x4_t v12 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a7));
  v12.i32[0] = *(_DWORD *)(a2 + 4 * v12.u32[0]);
  v12.i32[1] = *(_DWORD *)(a2 + 4 * v12.u32[1]);
  v12.i32[2] = *(_DWORD *)(a2 + 4 * v12.u32[2]);
  v12.i32[3] = *(_DWORD *)(a2 + 4 * v12.u32[3]);
  *(void *)&double result = vaddq_f32(vaddq_f32(vmulq_f32(v9, *(float32x4_t *)(a1 + 4 * a3 + 1952)), vmulq_f32(v10, *(float32x4_t *)(a1 + 4 * a3 + 2816))), vaddq_f32(vmulq_f32(v11, *(float32x4_t *)(a1 + 4 * a3 + 3680)), vmulq_f32(v12, *(float32x4_t *)(a1 + 4 * a3 + 4544)))).u64[0];
  return result;
}

double bilinear_infill_vla_2(uint64_t a1, uint64_t a2, unsigned int a3, uint8x8_t a4, uint8x8_t a5)
{
  uint64_t v5 = a1 + a3;
  a4.i32[0] = *(_DWORD *)(v5 + 222);
  a5.i32[0] = *(_DWORD *)(v5 + 438);
  float32x4_t v6 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  v6.i32[0] = *(_DWORD *)(a2 + 4 * v6.u32[0]);
  v6.i32[1] = *(_DWORD *)(a2 + 4 * v6.u32[1]);
  v6.i32[2] = *(_DWORD *)(a2 + 4 * v6.u32[2]);
  v6.i32[3] = *(_DWORD *)(a2 + 4 * v6.u32[3]);
  float32x4_t v7 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  v7.i32[0] = *(_DWORD *)(a2 + 4 * v7.u32[0]);
  v7.i32[1] = *(_DWORD *)(a2 + 4 * v7.u32[1]);
  v7.i32[2] = *(_DWORD *)(a2 + 4 * v7.u32[2]);
  v7.i32[3] = *(_DWORD *)(a2 + 4 * v7.u32[3]);
  *(void *)&double result = vaddq_f32(vmulq_f32(v6, *(float32x4_t *)(a1 + 4 * a3 + 1952)), vmulq_f32(v7, *(float32x4_t *)(a1 + 4 * a3 + 2816))).u64[0];
  return result;
}

float32x2_t compute_error_of_weight_set_2planes(float32x4_t *a1, float32x4_t *a2, unsigned __int8 *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t a6, uint8x8_t a7, uint8x8_t a8)
{
  unint64_t v13 = *a3;
  unsigned int v14 = a3[1];
  if (v14 < 3)
  {
    if (v14 == 2)
    {
      unint64_t v24 = 0;
      float32x4_t v16 = 0uLL;
      do
      {
        float32x4_t v40 = v16;
        *(double *)v25.i64 = bilinear_infill_vla_2((uint64_t)a3, (uint64_t)a4, v24, *(uint8x8_t *)a6.f32, a7);
        float32x4_t v26 = vsubq_f32(v25, a1[10]);
        float32x4_t v27 = a1[64];
        float32x4_t v38 = vmulq_f32(v27, vmulq_f32(v26, v26));
        *(double *)v28.i64 = bilinear_infill_vla_2((uint64_t)a3, (uint64_t)a5, v24, *(uint8x8_t *)v38.f32, *(uint8x8_t *)v27.f32);
        float32x4_t v29 = vsubq_f32(v28, a2[10]);
        a7 = *(uint8x8_t *)v38.f32;
        a6 = vaddq_f32(v38, vmulq_f32(a2[64], vmulq_f32(v29, v29)));
        float32x4_t v16 = vaddq_f32(v40, a6);
        v24 += 4;
        ++a2;
        ++a1;
      }
      while (v24 < v13);
    }
    else
    {
      unint64_t v30 = 0;
      float32x4_t v16 = 0uLL;
      do
      {
        float32x4_t v31 = *a4++;
        float32x4_t v32 = vsubq_f32(v31, a1[10]);
        float32x4_t v33 = *a5++;
        float32x4_t v34 = vsubq_f32(v33, a2[10]);
        float32x4_t v16 = vaddq_f32(v16, vaddq_f32(vmulq_f32(a1[64], vmulq_f32(v32, v32)), vmulq_f32(a2[64], vmulq_f32(v34, v34))));
        v30 += 4;
        ++a2;
        ++a1;
      }
      while (v30 < v13);
    }
  }
  else
  {
    unint64_t v15 = 0;
    float32x4_t v16 = 0uLL;
    do
    {
      float32x4_t v39 = v16;
      *(double *)v17.i64 = bilinear_infill_vla((uint64_t)a3, (uint64_t)a4, v15, *(uint8x8_t *)a6.f32, a7, a8, *(uint8x8_t *)v16.f32);
      float32x4_t v18 = vsubq_f32(v17, a1[10]);
      float32x4_t v19 = a1[64];
      float32x4_t v37 = vmulq_f32(v19, vmulq_f32(v18, v18));
      *(double *)v22.i64 = bilinear_infill_vla((uint64_t)a3, (uint64_t)a5, v15, *(uint8x8_t *)v37.f32, *(uint8x8_t *)v19.f32, v20, v21);
      float32x4_t v23 = vsubq_f32(v22, a2[10]);
      a7 = *(uint8x8_t *)v37.f32;
      a6 = vaddq_f32(v37, vmulq_f32(a2[64], vmulq_f32(v23, v23)));
      float32x4_t v16 = vaddq_f32(v39, a6);
      v15 += 4;
      ++a2;
      ++a1;
    }
    while (v15 < v13);
  }
  float32x2_t v35 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
  return vpadd_f32(v35, v35);
}

int32x2_t *compute_ideal_weights_for_decimation(int32x2_t *result, float32x4_t *a2, _OWORD *a3)
{
  uint64_t v3 = a3;
  uint64_t v73 = *MEMORY[0x263EF8340];
  unint64_t v4 = a2->u8[0];
  unint64_t v5 = a2->u8[2];
  float32x4_t v6 = (void *)((char *)a3 + 4 * ((v5 - 1) & 0xFFFFFFFC));
  *float32x4_t v6 = 0;
  v6[1] = 0;
  if (v4 == v5)
  {
    unint64_t v7 = 0;
    __int32 v8 = result + 20;
    do
    {
      long long v9 = *(_OWORD *)v8->i8;
      v8 += 2;
      *v3++ = v9;
      v7 += 4;
    }
    while (v7 < v4);
  }
  else
  {
    unint64_t v11 = 0;
    int v12 = result->u8[0];
    unint64_t v13 = result + 128;
    float32x4_t v14 = (float32x4_t)vdupq_lane_s32(result[128], 0);
    unint64_t v15 = (unsigned __int8 *)&a2[338];
    float32x4_t v16 = result + 20;
    uint64_t v17 = 19296;
    int32x4_t v18 = vdupq_n_s32(0x2EDBE6FFu);
    do
    {
      unint64_t v19 = 0;
      uint8x8_t v20 = (const float *)&v15[v11];
      uint8x8_t v21 = (uint8x8_t)vld1_dup_f32(v20);
      unint64_t v22 = (unint64_t)vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v21))) << 6;
      float32x4_t v23 = 0uLL;
      uint64_t v24 = v17;
      float32x4_t v25 = (float32x4_t)v18;
      do
      {
        float32x4_t v26 = &a2[342].f32[v11 / 4 + v19 / 4];
        uint8x8_t v27 = (uint8x8_t)vld1_dup_f32(v26);
        int8x16_t v28 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v27));
        uint64_t v29 = v28.u32[0];
        uint64_t v30 = v28.u32[1];
        *(int32x2_t *)v28.i8 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
        v31.i64[0] = v28.u32[0];
        v31.i64[1] = v28.u32[1];
        float32x4_t v32 = v31;
        if (!v12)
        {
          v14.i32[0] = v13->i32[v29];
          v14.i32[1] = v13->i32[v30];
          v14.i32[2] = v13->i32[v32.i64[1]];
          v14.i32[3] = v13->i32[v32.i64[0]];
        }
        float32x4_t v33 = vmulq_f32(*(float32x4_t *)((char *)a2 + v24), v14);
        float32x4_t v34 = (__int32 *)v16 + v32.i64[0];
        v32.i32[0] = v16->i32[v29];
        v32.i32[1] = v16->i32[v30];
        v32.i32[2] = v16->i32[v32.i64[1]];
        v32.i32[3] = *v34;
        float32x4_t v25 = vaddq_f32(v25, v33);
        float32x4_t v35 = vmulq_f32(v33, v32);
        float32x4_t v23 = vaddq_f32(v23, v35);
        v19 += 64;
        v24 += 256;
      }
      while (v22 != v19);
      float32x4_t v36 = vdivq_f32(v23, v25);
      a3[v11 / 4] = v36;
      v11 += 4;
      v17 += 16;
    }
    while (v11 < v5);
    float32x4_t v71 = v14;
    if (a2->u8[1] >= 3u)
    {
      unint64_t v39 = 0;
      float32x4_t v40 = (int32x4_t *)v72;
      do
      {
        *(double *)v18.i64 = bilinear_infill_vla((uint64_t)a2, (uint64_t)v3, v39, *(uint8x8_t *)v18.i8, *(uint8x8_t *)v36.f32, *(uint8x8_t *)v25.f32, *(uint8x8_t *)v35.f32);
        *v40++ = v18;
        v39 += 4;
      }
      while (v39 < v4);
    }
    else
    {
      unint64_t v37 = 0;
      float32x4_t v38 = (int32x4_t *)v72;
      do
      {
        *(double *)v18.i64 = bilinear_infill_vla_2((uint64_t)a2, (uint64_t)v3, v37, *(uint8x8_t *)v18.i8, *(uint8x8_t *)v36.f32);
        *v38++ = v18;
        v37 += 4;
      }
      while (v37 < v4);
    }
    unint64_t v41 = 0;
    float v42 = a2 + 1206;
    float v43 = (unsigned int *)&a2[342];
    int32x4_t v44 = vdupq_n_s32(0x2EDBE6FFu);
    __asm
    {
      FMOV            V1.4S, #-16.0
      FMOV            V2.4S, #-0.25
      FMOV            V3.4S, #0.25
    }
    float32x4_t v52 = v71;
    do
    {
      float v53 = (const float *)&v15[v41];
      uint8x8_t v54 = (uint8x8_t)vld1_dup_f32(v53);
      uint64_t v55 = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v54)));
      float32x4_t v56 = 0uLL;
      int8x16_t v57 = v43;
      int8x16_t v58 = v42;
      float32x4_t v59 = (float32x4_t)v44;
      do
      {
        unsigned int v60 = *v57;
        v57 += 16;
        int8x16_t v61 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vdup_n_s32(v60)));
        uint64_t v62 = v61.u32[0];
        uint64_t v63 = v61.u32[1];
        *(int32x2_t *)v61.i8 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
        v64.i64[0] = v61.u32[0];
        v64.i64[1] = v61.u32[1];
        float32x4_t v65 = v64;
        if (!v12)
        {
          v52.i32[0] = v13->i32[v62];
          v52.i32[1] = v13->i32[v63];
          v52.i32[2] = v13->i32[v65.i64[1]];
          v52.i32[3] = v13->i32[v65.i64[0]];
        }
        float32x4_t v66 = vmulq_f32(*v58, v52);
        uint64_t v67 = v65.i64[1];
        uint64_t v68 = v65.i64[0];
        int8x16_t v69 = &v72[v65.i64[0]];
        v65.i32[0] = v72[v62];
        v65.i32[1] = v72[v63];
        v65.i32[2] = v72[v65.i64[1]];
        v65.i32[3] = *v69;
        double result = (int32x2_t *)((char *)v16 + 4 * v67);
        v70.i32[0] = v16->i32[v62];
        v70.i32[1] = v16->i32[v63];
        v70.i32[2] = result->i32[0];
        v70.i32[3] = v16->i32[v68];
        float32x4_t v59 = vaddq_f32(v59, vmulq_f32(*v58, v66));
        float32x4_t v56 = vaddq_f32(v56, vmulq_f32(v66, vsubq_f32(v65, v70)));
        v58 += 16;
        --v55;
      }
      while (v55);
      v3[v41 / 4] = vaddq_f32((float32x4_t)v3[v41 / 4], vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(v56, _Q1), v59), _Q2), _Q3));
      v41 += 4;
      ++v42;
      ++v43;
    }
    while (v41 < v5);
  }
  return result;
}

uint64_t compute_quantized_weights_for_decimation(uint64_t result, float32x4_t *a2, float32x4_t *a3, uint64_t a4, unsigned int a5, float a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v11 = *(unsigned __int8 *)(result + 2);
  int v12 = (int8x16_t *)((char *)&quant_and_xfer_tables + 226 * a5);
  if (a5 > 0x14) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = dword_23441B658[a5];
  }
  int32x4_t v14 = vdupq_n_s32(v13);
  if (*(float *)&a7 > a6)
  {
    *(float *)&a11 = a6;
  }
  else
  {
    *(float *)&a7 = 1.0;
    *(float *)&a11 = 0.0;
  }
  float v16 = *(float *)&a7 - *(float *)&a11;
  float v17 = 1.0 / (float)(*(float *)&a7 - *(float *)&a11);
  *(float *)&a7 = *(float *)&a11 * v17;
  float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  unint64_t v15 = (const float *)((char *)&compute_quantized_weights_for_decimation(decimation_info const&,float,float,float const*,float *,unsigned char *,quant_method)::quant_levels_m1
                      + 4 * a5);
  float32x4_t v19 = vld1q_dup_f32(v15);
  float v20 = v16 * 0.015625;
  float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
  int8x16_t v22 = *v12;
  if (a5 - 9 >= 0xC)
  {
    unint64_t v42 = 0;
    __asm { FMOV            V17.4S, #1.0 }
    v44.i64[0] = 0x100000001;
    v44.i64[1] = 0x100000001;
    v45.i64[0] = 0xFFFFFF00FFFFFF00;
    v45.i64[1] = 0xFFFFFF00FFFFFF00;
    v46.i64[0] = 0x4300000043000000;
    v46.i64[1] = 0x4300000043000000;
    do
    {
      float32x4_t v47 = *a2++;
      float32x4_t v48 = vminnmq_f32(vmaxnmq_f32(vsubq_f32(vmulq_n_f32(v47, v17), v18), (float32x4_t)0), _Q17);
      int32x4_t v49 = vcvtq_s32_f32(vmulq_f32(v19, v48));
      int8x16_t v50 = (int8x16_t)vminq_s32(vaddq_s32(v49, v44), v14);
      int32x4_t v51 = (int32x4_t)vqtbl1q_s8(v22, vorrq_s8((int8x16_t)v49, v45));
      int32x4_t v52 = (int32x4_t)vqtbl1q_s8(v22, vorrq_s8(v50, v45));
      float32x4_t v53 = vcvtq_f32_s32(v51);
      float32x4_t v54 = vcvtq_f32_s32(v52);
      int8x16_t v55 = (int8x16_t)vcgtq_f32(vmulq_f32(v48, v46), vaddq_f32(v53, v54));
      *a3++ = vaddq_f32(v21, vmulq_n_f32((float32x4_t)vbslq_s8(v55, (int8x16_t)v54, (int8x16_t)v53), v20));
      *(_DWORD *)(a4 + v42) = vqtbl1q_s8(vbslq_s8(v55, (int8x16_t)v52, (int8x16_t)v51), (int8x16_t)xmmword_23441B610).u32[0];
      v42 += 4;
    }
    while (v42 < v11);
  }
  else
  {
    unint64_t v23 = 0;
    int8x16_t v24 = v12[1];
    __asm { FMOV            V17.4S, #1.0 }
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    v31.i64[0] = 0xFFFFFF00FFFFFF00;
    v31.i64[1] = 0xFFFFFF00FFFFFF00;
    v32.i64[0] = 0x4300000043000000;
    v32.i64[1] = 0x4300000043000000;
    do
    {
      float32x4_t v33 = *a2++;
      float32x4_t v34 = vminnmq_f32(vmaxnmq_f32(vsubq_f32(vmulq_n_f32(v33, v17), v18), (float32x4_t)0), _Q17);
      int32x4_t v35 = vcvtq_s32_f32(vmulq_f32(v19, v34));
      int8x16_t v36 = (int8x16_t)vminq_s32(vaddq_s32(v35, v30), v14);
      int32x4_t v37 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)v22.i8, vorrq_s8((int8x16_t)v35, v31));
      int32x4_t v38 = (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)v22.i8, vorrq_s8(v36, v31));
      float32x4_t v39 = vcvtq_f32_s32(v37);
      float32x4_t v40 = vcvtq_f32_s32(v38);
      int8x16_t v41 = (int8x16_t)vcgtq_f32(vmulq_f32(v34, v32), vaddq_f32(v39, v40));
      *a3++ = vaddq_f32(v21, vmulq_n_f32((float32x4_t)vbslq_s8(v41, (int8x16_t)v40, (int8x16_t)v39), v20));
      *(_DWORD *)(a4 + v23) = vqtbl1q_s8(vbslq_s8(v41, (int8x16_t)v38, (int8x16_t)v37), (int8x16_t)xmmword_23441B610).u32[0];
      v23 += 4;
    }
    while (v23 < v11);
  }
  return result;
}

void recompute_ideal_colors_1plane(float32x4_t *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, uint8x8_t a10, uint8x8_t a11)
{
  unint64_t v18 = 0;
  uint64_t v124 = *MEMORY[0x263EF8340];
  unint64_t v19 = *(unsigned __int8 *)(a3 + 2);
  unint64_t v20 = a1[216].u8[0];
  uint64_t v21 = *a2;
  float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  unint64_t v23 = (float32x4_t *)v123;
  do
  {
    int8x16_t v24 = (const float *)(a4 + v18);
    uint8x8_t v25 = (uint8x8_t)vld1_dup_f32(v24);
    float32x4_t v26 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v25))), v22);
    *v23++ = v26;
    v18 += 4;
  }
  while (v18 < v19);
  unsigned int v27 = *(unsigned __int8 *)(a3 + 1);
  if (v27 == 1)
  {
    int8x16_t v28 = v123;
  }
  else
  {
    if (v27 >= 3)
    {
      unint64_t v31 = 0;
      float32x4_t v32 = (float32x4_t *)v122;
      do
      {
        *(double *)v22.i64 = bilinear_infill_vla(a3, (uint64_t)v123, v31, *(uint8x8_t *)v22.f32, *(uint8x8_t *)v26.f32, a10, a11);
        *v32++ = v22;
        v31 += 4;
      }
      while (v31 < v20);
    }
    else
    {
      unint64_t v29 = 0;
      int32x4_t v30 = (float32x4_t *)v122;
      do
      {
        *(double *)v22.i64 = bilinear_infill_vla_2(a3, (uint64_t)v123, v29, *(uint8x8_t *)v22.f32, *(uint8x8_t *)v26.f32);
        *v30++ = v22;
        v29 += 4;
      }
      while (v29 < v20);
    }
    int8x16_t v28 = v122;
  }
  uint64_t v33 = 0;
  float32x4_t v34 = vmulq_n_f32(a1[219], (float)v20);
  int32x4_t v35 = a2 + 112;
  float32x4_t v36 = (float32x4_t)vdupq_n_s32(0x233877AAu);
  __asm { FMOV            V16.4S, #1.0 }
  float32x4_t v41 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  do
  {
    uint64_t v42 = *((unsigned __int8 *)a2 + v33 + 4);
    if (v21 >= 2)
    {
      float32x4_t v34 = 0uLL;
      float v43 = v35;
      uint64_t v44 = *((unsigned __int8 *)a2 + v33 + 4);
      do
      {
        int v45 = *(unsigned __int8 *)v43;
        float v43 = (unsigned __int16 *)((char *)v43 + 1);
        float32x4_t v46 = &a1->i32[v45];
        v47.i32[0] = *v46;
        v47.i32[1] = v46[216];
        v47.i32[2] = v46[432];
        v47.i32[3] = v46[648];
        float32x4_t v34 = vaddq_f32(v34, v47);
        --v44;
      }
      while (v44);
    }
    float32x4_t v48 = a1[221];
    float32x4_t v34 = vmulq_f32(v34, v48);
    _Q22 = vmaxnmq_f32(vmulq_n_f32(v48, (float)v42), v36);
    float32x4_t v50 = vdivq_f32(v34, _Q22);
    v50.i32[3] = 0;
    int8x16_t v51 = (int8x16_t)vmulq_f32(v50, v50);
    *(float32x2_t *)v51.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), *(float32x2_t *)v51.i8);
    float32x4_t v52 = vdivq_f32(v50, vsqrtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), 0)));
    float32x4_t v53 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)));
    if (*((unsigned char *)a2 + v33 + 4))
    {
      uint64_t v54 = 0;
      float32x4_t v55 = 0uLL;
      float v56 = 1.0;
      float v57 = 0.0;
      float v58 = 1.0e-17;
      float v59 = 1.0e10;
      float v60 = 0.0;
      v11.i64[0] = 0;
      float v61 = 0.0;
      float v62 = 0.0;
      float32x4_t v63 = 0uLL;
      _Q28 = 0uLL;
      do
      {
        uint64_t v65 = *((unsigned __int8 *)v35 + v54);
        float32x4_t v66 = &a1->i32[v65];
        v67.i32[0] = *v66;
        v67.i32[1] = v66[216];
        v67.i32[2] = v66[432];
        v67.i32[3] = v66[648];
        float v68 = *(float *)&v28[4 * v65];
        float v69 = 1.0 - v68;
        if (v68 < v56) {
          float v56 = *(float *)&v28[4 * v65];
        }
        float32x4_t v70 = vmulq_f32(v52, v67);
        float32x4_t v71 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2);
        float32x4_t v72 = vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1));
        if (v68 > v60) {
          float v60 = *(float *)&v28[4 * v65];
        }
        float32x4_t v73 = vaddq_f32(v71, v72);
        v11.f32[0] = v11.f32[0] + (float)(v69 * v69);
        float v61 = v61 + (float)(v69 * v68);
        if (v73.f32[0] < v59) {
          float v59 = v73.f32[0];
        }
        float v62 = v62 + (float)(v68 * v68);
        float v58 = v58 + v68;
        float32x4_t v74 = vmulq_n_f32(v67, v68);
        float32x4_t v63 = vaddq_f32(v63, v74);
        float32x4_t v75 = vsubq_f32(v67, v74);
        v76.i32[3] = 0;
        if (v73.f32[0] > v57) {
          float v57 = v73.f32[0];
        }
        float32x4_t v55 = vaddq_f32(v55, v75);
        *(uint64_t *)((char *)v76.i64 + 4) = *(unsigned int *)&v28[4 * v65];
        v76.f32[0] = 1.0 - v68;
        _Q28 = vaddq_f32(_Q28, vmulq_n_f32(v76, vmulq_f32(v53, v73).f32[0]));
        ++v54;
      }
      while (v42 != v54);
    }
    else
    {
      float v56 = 1.0;
      float v62 = 0.0;
      _Q28.i64[0] = 0;
      float32x4_t v63 = 0uLL;
      float32x4_t v55 = 0uLL;
      float v58 = 1.0e-17;
      float v61 = 0.0;
      v11.i64[0] = 0;
      float v60 = 0.0;
      float v59 = 1.0e10;
      float v57 = 0.0;
    }
    float32x4_t v77 = vmulq_f32(v48, v55);
    float32x4_t v78 = vmulq_f32(v48, v63);
    float v79 = v59 / fmaxf(v57, 1.0e-10);
    float v80 = fmaxf(v79, 0.0);
    if (v79 <= 1.0) {
      float v81 = v80;
    }
    else {
      float v81 = 1.0;
    }
    float32x4_t v82 = vmulq_n_f32(v52, v57);
    float32x4_t v83 = v82;
    v83.f32[3] = v81;
    *(float32x4_t *)(a6 + 16 * v33) = v83;
    if (v56 >= (float)(v60 * 0.999))
    {
      float32x4_t v103 = vdivq_f32(vaddq_f32(v78, v77), _Q22);
      int8x16_t v104 = vorrq_s8((int8x16_t)vcltzq_f32(v103), (int8x16_t)vcgezq_f32(v103));
      uint64_t v105 = (int8x16_t *)(a5 + 16 * v33);
      v105[1] = vbslq_s8(v104, (int8x16_t)v103, v105[1]);
      v105[5] = vbslq_s8(v104, (int8x16_t)v103, v105[5]);
      v82.i32[3] = 1.0;
      goto LABEL_40;
    }
    float32x4_t v84 = v11;
    v84.f32[1] = v61;
    v84.f32[2] = v62;
    _Q18 = vmulq_n_f32(v84, v53.f32[0]);
    float32x4_t v86 = vmulq_n_f32(v48, v62);
    float32x4_t v87 = vmulq_n_f32(v48, v61);
    float32x4_t v88 = vmulq_n_f32(v48, v11.f32[0]);
    float32x4_t v89 = vsubq_f32(vmulq_f32(v86, v88), vmulq_f32(v87, v87));
    float32x4_t v90 = vdivq_f32(_Q16, v89);
    _S10 = _Q18.i32[2];
    float v92 = vmlas_n_f32(vmuls_lane_f32(-_Q18.f32[1], *(float32x2_t *)_Q18.f32, 1), _Q18.f32[2], _Q18.f32[0]);
    float32x4_t v93 = vaddq_f32(vmulq_f32(v86, v86), vaddq_f32(vmulq_f32(v88, v88), vmulq_f32(v87, vaddq_f32(v87, v87))));
    __asm { FMLA            S11, S10, V18.S[2] }
    _Q20 = vmulq_f32(vsubq_f32(vmulq_f32(v77, v86), vmulq_f32(v78, v87)), v90);
    float32x4_t v96 = vmulq_f32(vsubq_f32(vmulq_f32(v78, v88), vmulq_f32(v77, v87)), v90);
    int8x16_t v97 = (int8x16_t)vcgtq_f32(vmaxq_f32(v89, vsubq_f32((float32x4_t)0, v89)), vmulq_f32(v93, v41));
    float32x4_t v11 = (float32x4_t)vcgtq_f32(v96, _Q20);
    int8x16_t v98 = vandq_s8(v97, vorrq_s8((int8x16_t)v11, (int8x16_t)vcgeq_f32(_Q20, v96)));
    char v99 = (int8x16_t *)(a5 + 16 * v33);
    v99[1] = vbslq_s8(v98, (int8x16_t)_Q20, v99[1]);
    v99[5] = vbslq_s8(v98, (int8x16_t)v96, v99[5]);
    __asm { FMLA            S20, S28, V18.S[2] }
    float v100 = _Q20.f32[0] * (float)(1.0 / v92);
    float v101 = vmlas_n_f32((float)-_Q18.f32[1] * _Q28.f32[0], _Q28.f32[1], _Q18.f32[0]) * (float)(1.0 / v92);
    if (fabsf(v92) > (float)(_S11 * 0.0001) && v100 < v101)
    {
      float32x4_t v82 = vmulq_n_f32(v52, v101);
      v82.f32[3] = v100 / v101;
LABEL_40:
      *(float32x4_t *)(a6 + 16 * v33) = v82;
    }
    if (a1[222].u8[2] | a1[235].u8[10])
    {
      float32x4_t v106 = vmulq_n_f32(v48, v58);
      _S24 = v53.f32[0] * v62;
      float32x4_t v108 = vaddq_f32(v78, v77);
      v108.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).u32[0];
      float v109 = vmulq_f32(v106, v106).f32[0];
      __asm
      {
        FMLA            S31, S24, V22.S[2]
        FMLA            S20, S31, V22.S[1]
      }
      v11.f32[0] = vmuls_lane_f32(_Q22.f32[2], *(float32x2_t *)v106.f32, 1) * v106.f32[0];
      *(float32x2_t *)v112.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q22.f32), *(float32x2_t *)v106.f32);
      *(float32x2_t *)v113.f32 = vmul_laneq_f32(*(float32x2_t *)v112.f32, v106, 2);
      float32x4_t v114 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q22, 2);
      v114.f32[0] = -_Q22.f32[2];
      v114.f32[1] = -_Q22.f32[2];
      v114.f32[2] = -v106.f32[2];
      v112.i32[2] = vmuls_lane_f32(_Q22.f32[0], *(float32x2_t *)_Q22.f32, 1);
      v112.i32[3] = v112.i32[2];
      float32x4_t v115 = vmulq_f32(v114, v112);
      _Q20.i32[1] = v11.i32[0];
      _Q20.i64[1] = __PAIR64__(v115.u32[0], v113.u32[0]);
      v11.i32[1] = vmlas_n_f32((float)-_Q22.f32[2] * v109, _S31, _Q22.f32[0]);
      v11.i64[1] = __PAIR64__(v115.u32[1], v113.u32[1]);
      __asm { FMLA            S21, S24, V22.S[1] }
      v113.i64[1] = __PAIR64__(v115.u32[2], COERCE_UNSIGNED_INT(vmlas_n_f32((float)-_Q22.f32[1] * v109, _S21, _Q22.f32[0])));
      float32x4_t v117 = vmulq_n_f32(v108, 1.0 / vmlas_n_f32(vmulq_f32(v106, v115).f32[0], _Q20.f32[0], _Q22.f32[0]));
      int8x16_t v118 = (int8x16_t)vmulq_f32(_Q20, v117);
      *(float32x2_t *)v118.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), *(float32x2_t *)v118.i8);
      int8x16_t v119 = (int8x16_t)vmulq_f32(v11, v117);
      *(float32x2_t *)v119.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), *(float32x2_t *)v119.i8);
      int8x16_t v120 = (int8x16_t)vmulq_f32(v113, v117);
      *(float32x2_t *)v120.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), *(float32x2_t *)v120.i8);
      int8x16_t v121 = (int8x16_t)vmulq_f32(v115, v117);
      *(float32x2_t *)v121.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), *(float32x2_t *)v121.i8);
      *(int32x2_t *)v117.f32 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (int32x2_t)vpadd_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8));
      v117.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8).u32[0], vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8).u32[0]);
      *(float32x4_t *)(a7 + 16 * v33) = v117;
    }
    ++v33;
    v35 += 108;
  }
  while (v33 != v21);
}

void recompute_ideal_colors_2planes(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, float32x4_t *a7, int8x16_t *a8, double a9, double a10, uint8x8_t a11, uint8x8_t a12, unsigned int a13)
{
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v145 = *MEMORY[0x263EF8340];
  unint64_t v23 = *(unsigned __int8 *)(a3 + 2);
  unint64_t v24 = a1[216].u8[0];
  float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  do
  {
    float32x4_t v26 = (const float *)(a4 + v22);
    uint8x8_t v27 = (uint8x8_t)vld1_dup_f32(v26);
    *(float32x4_t *)&v144[v21] = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v27))), v25);
    int8x16_t v28 = (const float *)(a5 + v22);
    uint8x8_t v29 = (uint8x8_t)vld1_dup_f32(v28);
    float32x4_t v30 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v29))), v25);
    *(float32x4_t *)&v143[v21] = v30;
    v22 += 4;
    v21 += 16;
  }
  while (v22 < v23);
  unsigned int v31 = *(unsigned __int8 *)(a3 + 1);
  if (v31 == 1)
  {
    float32x4_t v32 = (float *)v144;
    uint64_t v33 = (float *)v143;
  }
  else
  {
    unsigned int v140 = a7;
    if (v31 >= 3)
    {
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      do
      {
        *(double *)&long long v40 = bilinear_infill_vla(a3, (uint64_t)v144, v39, *(uint8x8_t *)v25.f32, *(uint8x8_t *)v30.f32, a11, a12);
        float32x4_t v32 = (float *)v142;
        *(_OWORD *)&v142[v38] = v40;
        *(double *)v25.i64 = bilinear_infill_vla(a3, (uint64_t)v143, v39, *(uint8x8_t *)&v40, v41, v42, v43);
        uint64_t v33 = (float *)v141;
        *(float32x4_t *)&v141[v38] = v25;
        v39 += 4;
        v38 += 16;
      }
      while (v39 < v24);
    }
    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      do
      {
        *(double *)&long long v36 = bilinear_infill_vla_2(a3, (uint64_t)v144, v35, *(uint8x8_t *)v25.f32, *(uint8x8_t *)v30.f32);
        float32x4_t v32 = (float *)v142;
        *(_OWORD *)&v142[v34] = v36;
        *(double *)v25.i64 = bilinear_infill_vla_2(a3, (uint64_t)v143, v35, *(uint8x8_t *)&v36, v37);
        uint64_t v33 = (float *)v141;
        *(float32x4_t *)&v141[v34] = v25;
        v35 += 4;
        v34 += 16;
      }
      while (v35 < v24);
    }
    a7 = v140;
  }
  uint64_t v44 = *(unsigned __int8 *)(a2 + 3);
  float32x4_t v45 = a1[221];
  float32x4_t v46 = vmulq_n_f32(v45, (float)v44);
  float32x4_t v47 = (float32x4_t)vdupq_n_s32(0x233877AAu);
  float32x4_t v48 = a1[219];
  v48.i32[3] = 0;
  int8x16_t v49 = (int8x16_t)vmulq_f32(v48, v48);
  *(float32x2_t *)v49.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), *(float32x2_t *)v49.i8);
  float32x4_t v50 = vdivq_f32(v48, vsqrtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v49.i8, *(float32x2_t *)v49.i8), 0)));
  int8x16_t v51 = (int8x16_t)vceqq_s32(vdupq_n_s32(a13), (int32x4_t)xmmword_234378DD0);
  float32x4_t v52 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1)));
  float v53 = 1.0;
  if (*(unsigned char *)(a2 + 3))
  {
    float32x4_t v54 = (float32x4_t)vdupq_n_s32(0x233877AAu);
    float32x4_t v55 = 0uLL;
    float v56 = 0.0;
    float v57 = 1.0e10;
    float v58 = (__int32 *)a1;
    float v59 = 1.0;
    float v60 = 0.0;
    float v61 = 1.0;
    float v62 = 0.0;
    v15.i64[0] = 0;
    float v63 = 0.0;
    float v64 = 0.0;
    float v65 = 0.0;
    float v66 = 0.0;
    float v67 = 0.0;
    float32x4_t v68 = 0uLL;
    _Q17 = 0uLL;
    do
    {
      v70.i32[0] = *v58;
      v70.i32[1] = v58[216];
      v70.i32[2] = v58[432];
      v70.i32[3] = v58[648];
      float v71 = *v32++;
      *(float *)v13.i32 = v71;
      float v72 = 1.0 - v71;
      if (v71 < v59) {
        float v59 = *(float *)v13.i32;
      }
      float32x4_t v73 = vmulq_f32(v50, v70);
      float v74 = *v33++;
      *(float *)v14.i32 = v74;
      float v65 = v65 + (float)((float)(1.0 - v74) * (float)(1.0 - v74));
      float v66 = v66 + (float)((float)(1.0 - v74) * v74);
      int8x16_t v75 = (int8x16_t)vdupq_lane_s32(v14, 0);
      int8x16_t v76 = (int8x16_t)vdupq_lane_s32(v13, 0);
      if (*(float *)v13.i32 > v60) {
        float v60 = *(float *)v13.i32;
      }
      float32x4_t v77 = (float32x4_t)vorrq_s8(vandq_s8(v75, v51), vbicq_s8(v76, v51));
      float32x4_t v78 = vmulq_f32(v70, v77);
      float32x4_t v68 = vaddq_f32(v68, v78);
      float32x4_t v79 = vsubq_f32(v70, v78);
      float32x4_t v80 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1)));
      if (v80.f32[0] < v57) {
        float v57 = v80.f32[0];
      }
      v15.f32[0] = v15.f32[0] + (float)(v72 * v72);
      float v63 = v63 + (float)(v72 * *(float *)v13.i32);
      if (v80.f32[0] > v56) {
        float v56 = v80.f32[0];
      }
      float v64 = v64 + (float)(*(float *)v13.i32 * *(float *)v13.i32);
      if (*(float *)v14.i32 < v61) {
        float v61 = *(float *)v14.i32;
      }
      float v67 = v67 + (float)(*(float *)v14.i32 * *(float *)v14.i32);
      float32x4_t v55 = vaddq_f32(v55, v79);
      float32x4_t v81 = (float32x4_t)__PAIR64__(v13.u32[0], LODWORD(v72));
      if (*(float *)v14.i32 > v62) {
        float v62 = *(float *)v14.i32;
      }
      int32x2_t v13 = (int32x2_t)vmulq_f32(v52, v80).u64[0];
      _Q17 = vaddq_f32(_Q17, vmulq_n_f32(v81, *(float *)v13.i32));
      float32x4_t v54 = vaddq_f32(v54, v77);
      ++v58;
      --v44;
    }
    while (v44);
    float v82 = v62 * 0.999;
  }
  else
  {
    _Q17.i64[0] = 0;
    float v57 = 1.0e10;
    float32x4_t v68 = 0uLL;
    float32x4_t v54 = v47;
    float32x4_t v55 = 0uLL;
    float v67 = 0.0;
    float v66 = 0.0;
    float v65 = 0.0;
    float v64 = 0.0;
    float v63 = 0.0;
    v15.i64[0] = 0;
    float v82 = 0.0;
    float v61 = 1.0;
    float v56 = 0.0;
  }
  _Q16 = vmaxnmq_f32(v46, v47);
  float32x4_t v84 = vmulq_n_f32(v45, v64);
  float32x4_t v85 = vmulq_f32(v45, v55);
  float32x4_t v86 = vmulq_f32(v45, v68);
  float v87 = v57 / fmaxf(v56, 1.0e-10);
  float v88 = fmaxf(v87, 0.0);
  if (v87 <= 1.0) {
    float v53 = v88;
  }
  float32x4_t v89 = vmulq_n_f32(v50, v56);
  float32x4_t v90 = v89;
  v90.f32[3] = v53;
  *a7 = v90;
  __asm { FMOV            V20.4S, #1.0 }
  if (_NF == _VF)
  {
    float32x4_t v111 = vdivq_f32(vaddq_f32(v86, v85), _Q16);
    int8x16_t v112 = vornq_s8(v51, vorrq_s8((int8x16_t)vcltzq_f32(v111), (int8x16_t)vcgezq_f32(v111)));
    a6[1] = vbslq_s8(v112, a6[1], (int8x16_t)v111);
    a6[5] = vbslq_s8(v112, a6[5], (int8x16_t)v111);
    v89.i32[3] = 1.0;
LABEL_39:
    *a7 = v89;
    goto LABEL_40;
  }
  float32x4_t v95 = v15;
  v95.f32[1] = v63;
  v95.f32[2] = v64;
  _Q22 = vmulq_n_f32(v95, v52.f32[0]);
  _Q18 = vmulq_n_f32(v45, v63);
  float32x4_t v98 = vmulq_n_f32(v45, v15.f32[0]);
  float32x4_t v99 = vsubq_f32(vmulq_f32(v84, v98), vmulq_f32(_Q18, _Q18));
  float32x4_t v100 = vdivq_f32(_Q20, v99);
  _S27 = _Q22.i32[2];
  float v102 = vmlas_n_f32(vmuls_lane_f32(-_Q22.f32[1], *(float32x2_t *)_Q22.f32, 1), _Q22.f32[2], _Q22.f32[0]);
  float32x4_t v103 = vaddq_f32(vmulq_f32(v84, v84), vaddq_f32(vmulq_f32(v98, v98), vmulq_f32(_Q18, vaddq_f32(_Q18, _Q18))));
  __asm { FMLA            S28, S27, V22.S[2] }
  float32x4_t v105 = vmulq_f32(vsubq_f32(vmulq_f32(v85, v84), vmulq_f32(v86, _Q18)), v100);
  float32x4_t v106 = vmulq_f32(vsubq_f32(vmulq_f32(v86, v98), vmulq_f32(v85, _Q18)), v100);
  __asm { FMLA            S18, S17, V22.S[2] }
  float v107 = _Q18.f32[0] * (float)(1.0 / v102);
  float v108 = vmlas_n_f32((float)-_Q22.f32[1] * _Q17.f32[0], _Q17.f32[1], _Q22.f32[0]) * (float)(1.0 / v102);
  int8x16_t v109 = vbicq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v106, v105), (int8x16_t)vcgeq_f32(v105, v106)), (int8x16_t)vcgtq_f32(vmaxq_f32(v99, vsubq_f32((float32x4_t)0, v99)), vmulq_f32(v103, (float32x4_t)vdupq_n_s32(0x38D1B717u)))), v51);
  a6[1] = vbslq_s8(v109, (int8x16_t)v105, a6[1]);
  a6[5] = vbslq_s8(v109, (int8x16_t)v106, a6[5]);
  _NF = fabsf(v102) > (float)(_S28 * 0.0001) && v107 < v108;
  if (_NF)
  {
    float32x4_t v89 = vmulq_n_f32(v50, v108);
    v89.f32[3] = v107 / v108;
    goto LABEL_39;
  }
LABEL_40:
  float32x4_t v113 = vmulq_n_f32(v45, v67);
  if (v61 >= v82)
  {
    float32x4_t v120 = vdivq_f32(vaddq_f32(v86, v85), _Q16);
    int8x16_t v121 = vandq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v120), (int8x16_t)vcgezq_f32(v120)), v51);
    int8x16_t v122 = vbslq_s8(v121, (int8x16_t)v120, a6[1]);
  }
  else
  {
    float32x4_t v114 = vmulq_n_f32(v45, v65);
    float32x4_t v115 = vmulq_n_f32(v45, v66);
    float32x4_t v116 = vsubq_f32(vmulq_f32(v113, v114), vmulq_f32(v115, v115));
    float32x4_t v117 = vdivq_f32(_Q20, v116);
    float32x4_t v118 = vaddq_f32(vmulq_f32(v113, v113), vaddq_f32(vmulq_f32(v114, v114), vmulq_f32(v115, vaddq_f32(v115, v115))));
    float32x4_t v119 = vmulq_f32(vsubq_f32(vmulq_f32(v85, v113), vmulq_f32(v86, v115)), v117);
    float32x4_t v120 = vmulq_f32(vsubq_f32(vmulq_f32(v86, v114), vmulq_f32(v85, v115)), v117);
    int8x16_t v121 = vandq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v120, v119), (int8x16_t)vcgeq_f32(v119, v120)), v51), (int8x16_t)vcgtq_f32(vmaxq_f32(v116, vsubq_f32((float32x4_t)0, v116)), vmulq_f32(v118, (float32x4_t)vdupq_n_s32(0x38D1B717u))));
    int8x16_t v122 = vbslq_s8(v121, (int8x16_t)v119, a6[1]);
  }
  a6[1] = v122;
  a6[5] = vbslq_s8(v121, (int8x16_t)v120, a6[5]);
  if (a1[222].u8[2] | a1[235].u8[10])
  {
    float32x4_t v123 = vmulq_f32(v45, v54);
    float32x4_t v124 = vmulq_f32(v45, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v84, v51), vandq_s8((int8x16_t)v113, v51)));
    LODWORD(v125) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 2), vaddq_f32(v124, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v124.f32, 1))).u32[0];
    float32x4_t v126 = vaddq_f32(v86, v85);
    v126.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).u32[0];
    float v127 = vmulq_f32(v123, v123).f32[0];
    _S7 = vmlas_n_f32(vmuls_lane_f32(-v123.f32[2], v123, 2), _Q16.f32[2], v125);
    __asm { FMLA            S18, S7, V16.S[1] }
    *(float32x2_t *)v130.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q16.f32), *(float32x2_t *)v123.f32);
    *(float32x2_t *)v131.f32 = vmul_laneq_f32(*(float32x2_t *)v130.f32, v123, 2);
    float32x4_t v132 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q16, 2);
    v132.f32[0] = -_Q16.f32[2];
    v132.f32[1] = -_Q16.f32[2];
    v132.f32[2] = -v123.f32[2];
    v130.i32[2] = vmuls_lane_f32(_Q16.f32[0], *(float32x2_t *)_Q16.f32, 1);
    v133.f32[0] = vmuls_lane_f32(_Q16.f32[2], *(float32x2_t *)v123.f32, 1) * v123.f32[0];
    v130.i32[3] = v130.i32[2];
    float32x4_t v134 = vmulq_f32(v132, v130);
    _Q18.i32[1] = v133.i32[0];
    _Q18.i64[1] = __PAIR64__(v134.u32[0], v131.u32[0]);
    v133.i32[1] = vmlas_n_f32((float)-_Q16.f32[2] * v127, _S7, _Q16.f32[0]);
    v133.i64[1] = __PAIR64__(v134.u32[1], v131.u32[1]);
    v131.i64[1] = __PAIR64__(v134.u32[2], COERCE_UNSIGNED_INT(vmlas_n_f32((float)-_Q16.f32[1] * v127, vmlas_n_f32(-(float)(v123.f32[1] * v123.f32[1]), _Q16.f32[1], v125), _Q16.f32[0])));
    float32x4_t v135 = vmulq_n_f32(v126, 1.0 / vmlas_n_f32(vmulq_f32(v123, v134).f32[0], _Q18.f32[0], _Q16.f32[0]));
    int8x16_t v136 = (int8x16_t)vmulq_f32(_Q18, v135);
    *(float32x2_t *)v136.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL), *(float32x2_t *)v136.i8);
    int8x16_t v137 = (int8x16_t)vmulq_f32(v133, v135);
    *(float32x2_t *)v137.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL), *(float32x2_t *)v137.i8);
    int8x16_t v138 = (int8x16_t)vmulq_f32(v131, v135);
    *(float32x2_t *)v138.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v138, v138, 8uLL), *(float32x2_t *)v138.i8);
    int8x16_t v139 = (int8x16_t)vmulq_f32(v134, v135);
    *(float32x2_t *)v139.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL), *(float32x2_t *)v139.i8);
    *(int32x2_t *)v136.i8 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v136.i8, *(float32x2_t *)v136.i8), (int32x2_t)vpadd_f32(*(float32x2_t *)v137.i8, *(float32x2_t *)v137.i8));
    v136.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8).u32[0], vpadd_f32(*(float32x2_t *)v138.i8, *(float32x2_t *)v138.i8).u32[0]);
    *a8 = v136;
  }
}

void load_image_block(unsigned __int32 a1, int *a2, int8x16_t *a3, unsigned __int8 *a4, int a5, int a6, int a7, _DWORD *a8, int32x4_t a9)
{
  float32x4_t v11 = a3;
  int v12 = a2[1];
  int v82 = *a2;
  int v13 = a2[2];
  a3[249].i32[1] = a5;
  a3[249].i32[2] = a6;
  a3[249].i32[3] = a7;
  if (a8[3] == 3 && a8[2] == 2 && a8[1] == 1 && *a8 == 0) {
    float v17 = (__n64 (*)(unsigned int *, __n128))swz_texel_skip;
  }
  else {
    float v17 = swz_texel;
  }
  a9.i8[0] = a4[3];
  float v18 = 1.0 / (float)a9.u32[0];
  a9.i32[0] = a1 & 0xFFFFFFFE;
  a9.i32[1] = a1;
  int8x8_t v19 = (int8x8_t)vceq_s32(*(int32x2_t *)a9.i8, (int32x2_t)0x300000002);
  uint64_t v20 = v19.i8[0] & 1;
  *(int8x8_t *)a9.i8 = vand_s8(v19, (int8x8_t)0x100000001);
  int32x4_t v21 = vzip1q_s32(a9, a9);
  v21.i32[2] = a9.i32[0];
  int32x4_t v74 = v21;
  uint32x4_t v22 = (uint32x4_t)vtstq_s32(v21, v21);
  int v23 = a2[3];
  unint64_t v24 = load_texel_u8;
  if (v23 == 2) {
    unint64_t v24 = (double (*)(char *, int))load_texel_f32;
  }
  if (v23 == 1) {
    float32x4_t v25 = load_texel_f16;
  }
  else {
    float32x4_t v25 = v24;
  }
  __n128 v90 = (__n128)v22;
  {
    float v69 = a4;
    uint64_t v70 = v19.i8[0] & 1;
    float v88 = v18;
    float v71 = v25;
    __int8 v98 = v19.i8[4];
    v19.i8[4] = v98;
    float32x4_t v25 = v71;
    uint32x4_t v22 = (uint32x4_t)v90;
    float v18 = v88;
    uint64_t v20 = v70;
    a4 = v69;
    if (v72)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      v19.i8[4] = v98;
      float32x4_t v25 = v71;
      uint32x4_t v22 = (uint32x4_t)v90;
      float v18 = v88;
      uint64_t v20 = v70;
      a4 = v69;
    }
  }
  float32x4_t v26 = (double (*)(double, __n128))encode_texel_lns;
  if (!vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v22, 0x1FuLL), (uint32x4_t)mask(vmask4)::shift))) {
    float32x4_t v26 = (double (*)(double, __n128))encode_texel_unorm;
  }
  unsigned int v27 = a4[2];
  if (a4[2])
  {
    float32x4_t v79 = v26;
    float32x4_t v89 = a8;
    int v28 = 0;
    unsigned int v29 = 0;
    char v30 = v19.i8[4] & 1;
    unsigned int v78 = v12 - 1;
    unsigned int v31 = a4[1];
    int v32 = a5;
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0xFE967699);
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    float32x4_t v77 = &v11[222].i8[2];
    v35.i64[0] = -1;
    v35.i64[1] = -1;
    float32x4_t v36 = 0uLL;
    unsigned int v37 = v31;
    float32x4_t v80 = v11;
    float v87 = v18;
    float32x4_t v86 = v17;
    do
    {
      unsigned int v38 = v29 + a7;
      if (v29 + a7 >= v13 - 1) {
        unsigned int v38 = v13 - 1;
      }
      if (v37)
      {
        unsigned int v39 = 0;
        long long v40 = *(char **)(*((void *)a2 + 2) + 8 * v38);
        unsigned int v41 = *a4;
        unsigned int v83 = v29;
        do
        {
          if (v41)
          {
            uint64_t v42 = 0;
            unsigned int v84 = v39;
            int v85 = v28;
            unsigned int v43 = v39 + a6;
            if (v39 + a6 >= v78) {
              unsigned int v43 = v78;
            }
            int v92 = v43 * v82;
            unsigned int v91 = &v77[v28];
            uint64_t v44 = &v11->i32[v28];
            do
            {
              float32x4_t v93 = v36;
              float32x4_t v94 = v34;
              float32x4_t v95 = v33;
              int8x16_t v96 = (int8x16_t)v35;
              int v45 = v32 + v42;
              if (v32 + (int)v42 >= (v82 - 1)) {
                int v45 = v82 - 1;
              }
              float32x4_t v46 = a4;
              uint64_t v47 = v20;
              float32x4_t v48 = v25;
              int8x16_t v49 = v40;
              v25(v40, 4 * (v45 + v92));
              double v50 = ((double (*)(_DWORD *))v86)(v89);
              *(double *)v51.i64 = v79(v50, v90);
              long long v40 = v49;
              float32x4_t v25 = v48;
              uint64_t v20 = v47;
              a4 = v46;
              float32x4_t v34 = vminnmq_f32(v94, v51);
              float32x4_t v36 = vaddq_f32(v93, vmulq_n_f32(v51, v87));
              float32x4_t v33 = vmaxnmq_f32(v95, v51);
              int32x4_t v52 = (int32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL);
              uint32x4_t v35 = (uint32x4_t)vandq_s8(v96, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 0), (float32x4_t)vzip1q_s32(v52, v52)));
              *uint64_t v44 = v51.i32[0];
              v44[216] = v51.i32[1];
              v44[432] = v51.i32[2];
              v44[648] = v51.i32[3];
              float v53 = &v91[v42];
              char *v53 = v47;
              v53[216] = v30;
              unsigned int v41 = *v46;
              ++v42;
              ++v44;
            }
            while (v42 < v41);
            unsigned int v39 = v84;
            int v28 = v85 + v42;
            unsigned int v31 = v46[1];
            float32x4_t v11 = v80;
            unsigned int v29 = v83;
          }
          ++v39;
        }
        while (v39 < v31);
        unsigned int v27 = a4[2];
        unsigned int v37 = v31;
      }
      ++v29;
    }
    while (v29 < v27);
  }
  else
  {
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    float32x4_t v33 = (float32x4_t)vdupq_n_s32(0xFE967699);
    v35.i64[0] = -1;
    v35.i64[1] = -1;
    float32x4_t v36 = 0uLL;
  }
  int8x16_t v54 = (int8x16_t)vceqzq_s32(v74);
  float32x4_t v55 = *(float32x4_t *)v11;
  v55.i32[1] = v11[54].i32[0];
  v55.i32[2] = v11[108].i32[0];
  v55.i32[3] = v11[162].i32[0];
  int8x16_t v56 = (int8x16_t)vdivq_f32(v55, (float32x4_t)vdupq_n_s32(0x477FFF00u));
  int8x16_t v57 = 0uLL;
  if (v20)
  {
    int8x16_t v58 = (int8x16_t)vcvtq_s32_f32(v55);
    v59.i64[0] = 0x700000007;
    v59.i64[1] = 0x700000007;
    int32x4_t v60 = (int32x4_t)vandq_s8(v58, v59);
    v61.i64[0] = 0xA0000000ALL;
    v61.i64[1] = 0xA0000000ALL;
    int32x4_t v62 = (int32x4_t)vshlq_u32((uint32x4_t)v58, v61);
    uint16x4_t v63 = (uint16x4_t)vmovn_s32(v60);
    v64.i64[0] = 0x20000000200;
    v64.i64[1] = 0x20000000200;
    v65.i64[0] = 0x100000001;
    v65.i64[1] = 0x100000001;
    int8x16_t v66 = (int8x16_t)vaddq_s32(vshlq_n_s32(v60, 2uLL), v65);
    v65.i64[0] = 0x60000000600;
    v65.i64[1] = 0x60000000600;
    v67.i64[0] = 0x700000007;
    v67.i64[1] = 0x700000007;
    v61.i64[0] = 0x200000002;
    v61.i64[1] = 0x200000002;
    int32x4_t v68 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v64, (uint32x4_t)v60), (int8x16_t)vmull_u16(v63, (uint16x4_t)0x3000300030003), vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v65, (uint32x4_t)v60), v66, (int8x16_t)vmlal_u16(v67, v63, (uint16x4_t)0x5000500050005))), v61), (int8x16_t)vshlq_n_s32(v62, 0xAuLL));
    v60.i64[0] = 0x7B0000007BLL;
    v60.i64[1] = 0x7B0000007BLL;
    int8x16_t v57 = (int8x16_t)vcvtq_f32_f16((float16x4_t)vmovn_s32(vminq_s32(v68, v60)));
  }
  v11[217] = vorrq_s8(vbicq_s8(v57, v54), vandq_s8(v56, v54));
  v11[218] = (int8x16_t)v34;
  v11[219] = (int8x16_t)v36;
  v11[220] = (int8x16_t)v33;
  {
    uint32x4_t v97 = v35;
    uint32x4_t v35 = v97;
    if (v73)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      uint32x4_t v35 = v97;
    }
  }
  v11[222].i8[0] = vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32(v35, 0x1FuLL), (uint32x4_t)mask(vmask4)::shift)) == 15;
}

double load_texel_u8(char *a1, int a2)
{
  size_t v2 = (const float *)&a1[a2];
  uint8x8_t v3 = (uint8x8_t)vld1_dup_f32(v2);
  *(void *)&double result = vdivq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v3))), (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double load_texel_f16(char *a1, int a2)
{
  *(void *)&double result = vcvtq_f32_f16(*(float16x4_t *)&a1[2 * a2]).u64[0];
  return result;
}

__n128 load_texel_f32(char *a1, int a2)
{
  return *(__n128 *)&a1[4 * a2];
}

__n64 swz_texel(unsigned int *a1, __n128 a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  __n128 v3 = a2;
  uint64_t v4 = 0x3F80000000000000;
  result.n64_u32[0] = v3.n128_u32[*a1];
  result.n64_u32[1] = v3.n128_u32[a1[1]];
  return result;
}

double encode_texel_unorm(float32x4_t a1)
{
  *(void *)&double result = vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)).u64[0];
  return result;
}

double encode_texel_lns(float32x4_t a1, int8x16_t a2)
{
  float32x4_t v2 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  int8x16_t v3 = (int8x16_t)vmulq_f32(a1, v2);
  v4.i64[0] = 0x1600000016;
  v4.i64[1] = 0x1600000016;
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  int32x4_t v6 = (int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)a1, v4), v5);
  unsigned long long v7 = *(_OWORD *)&vandq_s8((int8x16_t)a1, (int8x16_t)vdupq_n_s32(0x807FFFFF)) | __PAIR128__(0x3F0000003F000000, 0x3F0000003F000000);
  int8x16_t v8 = (int8x16_t)vcgtq_f32(a1, (float32x4_t)vdupq_n_s32(0x32800000u));
  int8x16_t v9 = (int8x16_t)vcgeq_f32(a1, (float32x4_t)vdupq_n_s32(0x47800000u));
  v10.i64[0] = 0x7100000071;
  v10.i64[1] = 0x7100000071;
  int8x16_t v11 = (int8x16_t)vcgtq_u32(v10, (uint32x4_t)v6);
  v12.i64[0] = 0x4C0000004C000000;
  v12.i64[1] = 0x4C0000004C000000;
  int8x16_t v13 = (int8x16_t)vmulq_f32(a1, v12);
  v12.i64[0] = 0xBF000000BF000000;
  v12.i64[1] = 0xBF000000BF000000;
  float32x4_t v14 = vmulq_f32(vaddq_f32((float32x4_t)v7, v12), (float32x4_t)vdupq_n_s32(0x45800000u));
  v12.i64[0] = 0x6F0000006FLL;
  v12.i64[1] = 0x6F0000006FLL;
  float32x4_t v15 = (float32x4_t)vbslq_s8(v11, v13, (int8x16_t)v14);
  v16.i64[0] = 0x4300000043000000;
  v16.i64[1] = 0x4300000043000000;
  v17.i64[0] = 0x4400000044000000;
  v17.i64[1] = 0x4400000044000000;
  v14.i64[0] = 0x4500000045000000;
  v14.i64[1] = 0x4500000045000000;
  float32x4_t v18 = vaddq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v6, (int32x4_t)v12), v11)), v14), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x43C00000u), v15), (int8x16_t)vmulq_f32(v15, (float32x4_t)vdupq_n_s32(0x3FAAAAABu)), vbslq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x44B00000u), v15), (int8x16_t)vaddq_f32(v15, v16), (int8x16_t)vmulq_f32(vaddq_f32(v15, v17), (float32x4_t)vdupq_n_s32(0x3F4CCCCDu)))));
  __asm { FMOV            V4.4S, #1.0 }
  *(void *)&double result = vbslq_s8(a2, vandq_s8(vbslq_s8(v9, (int8x16_t)v2, (int8x16_t)vaddq_f32(v18, _Q4)), v8), v3).u64[0];
  return result;
}

void load_image_block_fast_ldr(uint64_t a1, int *a2, float32x4_t *a3, unsigned __int8 *a4, unsigned int a5, unsigned __int32 a6, __int32 a7)
{
  int v8 = *a2;
  int v7 = a2[1];
  a3[249].i32[1] = a5;
  a3[249].i32[2] = a6;
  a3[249].i32[3] = a7;
  unsigned __int32 v9 = a4[1] + a6;
  if (v9 <= a6)
  {
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xFE967699);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    float32x4_t v18 = 0uLL;
  }
  else
  {
    int v10 = 0;
    uint64_t v11 = **((void **)a2 + 2);
    unsigned __int32 v12 = v7 - 1;
    int v13 = *a4;
    unsigned int v14 = v8 - 1;
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x7E967699u);
    float32x4_t v16 = (float32x4_t)vdupq_n_s32(0xFE967699);
    int v17 = 4 * v8;
    float32x4_t v18 = 0uLL;
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x43808000u);
    do
    {
      if (v13 + a5 > a5)
      {
        if (a6 >= v12) {
          unsigned __int32 v21 = v12;
        }
        else {
          unsigned __int32 v21 = a6;
        }
        uint64_t v22 = v11 + v17 * v21;
        int v23 = &a3->i32[v10];
        int v24 = v13;
        unsigned int v25 = a5;
        do
        {
          if (v25 >= v14) {
            unsigned int v26 = v14;
          }
          else {
            unsigned int v26 = v25;
          }
          unsigned int v27 = (const float *)(v22 + 4 * v26);
          uint8x8_t v28 = (uint8x8_t)vld1_dup_f32(v27);
          float32x4_t v29 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v28))), v20);
          float32x4_t v15 = vminnmq_f32(v15, v29);
          float32x4_t v18 = vaddq_f32(v18, v29);
          float32x4_t v16 = vmaxnmq_f32(v16, v29);
          int32x4_t v30 = (int32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL);
          int8x16_t v19 = vandq_s8(v19, (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0), (float32x4_t)vzip1q_s32(v30, v30)));
          __int32 *v23 = v29.i32[0];
          v23[216] = v29.i32[1];
          v23[432] = v29.i32[2];
          v23[648] = v29.i32[3];
          ++v25;
          ++v10;
          ++v23;
          --v24;
        }
        while (v24);
      }
      ++a6;
    }
    while (a6 != v9);
  }
  float32x4_t v31 = *a3;
  v31.i32[1] = a3[54].i32[0];
  v31.i32[2] = a3[108].i32[0];
  v31.i32[3] = a3[162].i32[0];
  a3[217] = vdivq_f32(v31, (float32x4_t)vdupq_n_s32(0x477FFF00u));
  a3[222].i8[2] = 0;
  a3[235].i8[10] = 0;
  a3[218] = v15;
  v15.i8[0] = a4[3];
  v15.f32[0] = (float)v15.u32[0];
  a3[219] = vdivq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0));
  a3[220] = v16;
  int v32 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    uint32x4_t v35 = a3;
    int8x16_t v34 = v19;
    int8x16_t v19 = v34;
    int v32 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    a3 = v35;
    if (v33)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      int8x16_t v19 = v34;
      int v32 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      a3 = v35;
    }
  }
  a3[222].i8[0] = vaddvq_s32((int32x4_t)vshlq_u32(vshrq_n_u32((uint32x4_t)v19, 0x1FuLL), v32[85])) == 15;
}

uint64_t astcenc_config_init(unsigned int a1, int a2, int a3, unsigned int a4, int a5, uint64_t a6, float a7)
{
  if ((float)((float)(2.51 + 12583000.0) + -12583000.0) != 3.0) {
    return 2;
  }
  *(void *)(a6 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  if (a4 <= 1) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = a4;
  }
  *(_OWORD *)a6 = 0uLL;
  uint64_t result = validate_block_size(a2, a3, v13);
  if (!result)
  {
    *(_DWORD *)(a6 + 8) = a2;
    *(_DWORD *)(a6 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a3;
    *(_DWORD *)(a6 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v13;
    int v15 = a3 * a2 * v13;
    float v16 = logf((float)v15);
    uint64_t result = 6;
    if (a7 >= 0.0 && a7 <= 100.0)
    {
      uint64_t v19 = 0;
      float32x4_t v20 = (float *)&preset_configs_low;
      if (v15 < 0x40) {
        float32x4_t v20 = (float *)&preset_configs_mid;
      }
      unsigned __int32 v21 = (float *)&preset_configs_high;
      if (v15 >= 25) {
        unsigned __int32 v21 = v20;
      }
      astcenc_config_init(astcenc_profile,unsigned int,unsigned int,unsigned int,float,unsigned int,astcenc_config *)::preset_configs = (uint64_t)v21;
      uint64_t v22 = v21;
      float v23 = v16 / 2.3026;
      do
      {
        if (*v22 >= a7) {
          break;
        }
        ++v19;
        v22 += 18;
      }
      while (v19 != 6);
      uint64_t v24 = v19 - 1;
      if (!v19) {
        uint64_t v24 = 0;
      }
      if (v24 == v19)
      {
        unsigned int v25 = &v21[18 * v19];
        *(_OWORD *)(a6 + 44) = *(_OWORD *)(v25 + 1);
        *(_OWORD *)(a6 + 60) = *(_OWORD *)(v25 + 5);
        *(void *)(a6 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v25 + 9);
        float v26 = v25[11] + (float)(v23 * -35.0);
        float v27 = v25[12] + (float)(v23 * -19.0);
        if (v26 > v27) {
          float v27 = v26;
        }
        int v28 = *((_DWORD *)v25 + 13);
        *(float *)(a6 + 84) = v27;
        *(_DWORD *)(a6 + 88) = v28;
        float32x2_t v29 = *(float32x2_t *)(v25 + 14);
        *(float32x2_t *)(a6 + 92) = v29;
        float32x2_t v30 = *(float32x2_t *)(v25 + 16);
      }
      else
      {
        float32x4_t v31 = &v21[18 * v24];
        int v32 = &v21[18 * v19];
        float v33 = *v32 - *v31;
        *(float *)v17.i32 = (float)(*v32 - a7) / v33;
        *(float *)v18.i32 = (float)(a7 - *v31) / v33;
        float32x2_t v34 = (float32x2_t)vdupq_lane_s32(v18, 0).u64[0];
        float32x2_t v35 = (float32x2_t)vdupq_lane_s32(v17, 0).u64[0];
        v36.i64[0] = 0x3F0000003F000000;
        v36.i64[1] = 0x3F0000003F000000;
        *(int32x4_t *)(a6 + 44) = vcvtq_s32_f32(vaddq_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(*(uint32x4_t *)(v32 + 1)), *(float *)v18.i32), vcvtq_f32_u32(*(uint32x4_t *)(v31 + 1)), *(float *)v17.i32), v36));
        *(int32x4_t *)(a6 + 60) = vcvtq_s32_f32(vaddq_f32(vmlaq_n_f32(vmulq_n_f32(vcvtq_f32_u32(*(uint32x4_t *)(v32 + 5)), *(float *)v18.i32), vcvtq_f32_u32(*(uint32x4_t *)(v31 + 5)), *(float *)v17.i32), v36));
        *(int32x2_t *)(a6 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = vcvt_s32_f32(vadd_f32(vmla_f32(vmul_f32(v34, vcvt_f32_u32(*(uint32x2_t *)(v32 + 9))), v35, vcvt_f32_u32(*(uint32x2_t *)(v31 + 9))), (float32x2_t)0x3F0000003F000000));
        float32x2_t v37 = vmla_n_f32(vmla_f32(vmul_f32(v34, *(float32x2_t *)(v32 + 11)), v35, *(float32x2_t *)(v31 + 11)), (float32x2_t)0xC1980000C20C0000, v23);
        float v27 = v37.f32[1];
        if (v37.f32[0] > v37.f32[1]) {
          float v27 = v37.f32[0];
        }
        float v38 = (float)(*(float *)v18.i32 * v32[13]) + (float)(v31[13] * *(float *)v17.i32);
        *(float *)(a6 + 84) = v27;
        *(float *)(a6 + 88) = v38;
        float32x2_t v29 = vmla_f32(vmul_f32(v34, *(float32x2_t *)(v32 + 14)), v35, *(float32x2_t *)(v31 + 14));
        *(float32x2_t *)(a6 + 92) = v29;
        float32x2_t v30 = vmla_f32(vmul_f32(v34, *(float32x2_t *)(v32 + 16)), v35, *(float32x2_t *)(v31 + 16));
      }
      *(float32x2_t *)(a6 + 100) = v30;
      __asm { FMOV            V2.4S, #1.0 }
      *(_OWORD *)(a6 + 20) = _Q2;
      *(void *)(a6 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)a6 = a1;
      if (a1 >= 2)
      {
        if (a1 - 2 > 1) {
          return 5;
        }
        *(_DWORD *)(a6 + 84) = 1148829696;
        *(_DWORD *)(a6 + 104) = 0;
        float v27 = 999.0;
      }
      LODWORD(_Q2) = a5 & 0xFFFFFF80;
      *(int8x8_t *)&_Q2 = vcnt_s8(*(int8x8_t *)&_Q2);
      if (vaddlv_u8(*(uint8x8_t *)&_Q2)) {
        return 8;
      }
      LODWORD(_Q2) = a5 & 0x41;
      if ((vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)&_Q2)) & 0xFFFE) != 0)
      {
        return 8;
      }
      else if ((a1 & 0xFFFFFFFE) == 2 && (a5 & 2) != 0)
      {
        return 11;
      }
      else
      {
        if (a5)
        {
          int v44 = *(_DWORD *)(a6 + 44);
          if ((v44 + 1) < 4) {
            int v45 = v44 + 1;
          }
          else {
            int v45 = 4;
          }
          *(_DWORD *)(a6 + 44) = v45;
          *(void *)(a6 + 24) = 0;
          __asm { FMOV            V2.2S, #1.5 }
          *(float32x2_t *)(a6 + 92) = vmul_f32(v29, _D2);
          *(_DWORD *)(a6 + 100) = 1065185444;
          *(float *)(a6 + 84) = v27 * 1.03;
        }
        else if ((a5 & 0x40) != 0)
        {
          *(_DWORD *)(a6 + 40) = 1084227584;
          *(_DWORD *)(a6 + 32) = 1092616192;
        }
        else if ((a5 & 8) != 0)
        {
          *(void *)(a6 + 20) = 0x3FA9EB853F2CCCCDLL;
          *(_DWORD *)(a6 + 28) = 1048408228;
        }
        uint64_t result = 0;
        *(_DWORD *)(a6 + 4) = a5;
      }
    }
  }
  return result;
}

uint64_t validate_block_size(int a1, int a2, unsigned int a3)
{
  if (a3 > 1)
  {
    if (!is_legal_3d_block_size(a1, a2, a3)) {
      return 4;
    }
  }
  else if ((is_legal_2d_block_size(a1, a2) & 1) == 0)
  {
    return 4;
  }
  if (a2 * a1 * a3 >= 0xD9) {
    return 10;
  }
  else {
    return 0;
  }
}

uint64_t astcenc_context_alloc(uint64_t a1, int a2)
{
  LODWORD(memptr) = 1075880919;
  if ((float)((float)(2.51 + 12583000.0) + -12583000.0) != 3.0) {
    return 2;
  }
  if (a2) {
    operator new();
  }
  return 3;
}

void astcenc_context::~astcenc_context(astcenc_context *this)
{
  float32x4_t v2 = (std::mutex *)((char *)this + 672);
  std::mutex::~mutex((std::mutex *)((char *)this + 816));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 744));
  std::mutex::~mutex(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 600));
  std::condition_variable::~condition_variable((std::condition_variable *)this + 11);
  std::mutex::~mutex((std::mutex *)((char *)this + 456));
  std::mutex::~mutex((std::mutex *)this + 6);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 312));
  std::mutex::~mutex((std::mutex *)((char *)this + 240));
}

uint64_t astcenc_context_free(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    free(*(void **)(result + 144));
    free(*(void **)(v1 + 128));
    std::mutex::~mutex((std::mutex *)(v1 + 816));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 744));
    std::mutex::~mutex((std::mutex *)(v1 + 672));
    std::mutex::~mutex((std::mutex *)(v1 + 600));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 528));
    std::mutex::~mutex((std::mutex *)(v1 + 456));
    std::mutex::~mutex((std::mutex *)(v1 + 384));
    std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 312));
    std::mutex::~mutex((std::mutex *)(v1 + 240));
    JUMPOUT(0x237DBCBD0);
  }
  return result;
}

uint64_t astcenc_compress_image(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v58 = v6;
  float32x4_t v55 = v2;
  uint64_t v74 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(v1 + 4) & 0x10) != 0) {
    return 9;
  }
  int v7 = (int32x4_t *)v3;
  v8.i64[0] = 0x500000005;
  v8.i64[1] = 0x500000005;
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(*v3, v8)))) {
    return 7;
  }
  unsigned int v10 = v5;
  uint64_t v11 = v1;
  unsigned int v12 = *(_DWORD *)(v1 + 120);
  if (v12 <= v5) {
    return 3;
  }
  if (16
     * (*(_DWORD *)(v1 + 8) + *v2 - 1)
     / *(_DWORD *)(v1 + 8)
     * ((*(_DWORD *)(v1 + 12) + v2[1] - 1)
      / *(_DWORD *)(v1 + 12))
     * ((*(_DWORD *)(v1 + 16) + v2[2] - 1)
      / *(_DWORD *)(v1 + 16)) > v4)
    return 1;
  if (v12 == 1) {
    astcenc_compress_reset((astcenc_context *)v1);
  }
  if (*(_DWORD *)(v11 + 36))
  {
    unsigned int v13 = operator new(0x20uLL);
    *unsigned int v13 = &unk_26E722B10;
    v13[1] = v11;
    v13[2] = v55;
    v13[3] = v7;
    std::mutex::lock((std::mutex *)(v11 + 240));
    if (!*(unsigned char *)(v11 + 304))
    {
      *(_DWORD *)(v11 + 368) = (*(uint64_t (**)(void *))(*v13 + 48))(v13);
      *(unsigned char *)(v11 + 304) = 1;
    }
    std::mutex::unlock((std::mutex *)(v11 + 240));
    (*(void (**)(void *))(*v13 + 40))(v13);
    float32x4_t v14 = *(float32x4_t *)(v11 + 168);
    v64[0] = *(float32x4_t *)(v11 + 152);
    v64[1] = v14;
    v64[2] = *(float32x4_t *)(v11 + 184);
    uint64_t v65 = *(void *)(v11 + 200);
    operator new[]();
  }
  ParallelManager::wait((std::mutex *)(v11 + 240));
  int v15 = *(unsigned __int8 **)(v11 + 128);
  unsigned int v53 = *(_DWORD *)v11;
  int v16 = *v15;
  int v17 = v15[1];
  int32x4_t v52 = v15;
  int v60 = v15[2];
  char v66 = v17 * v16 * v60;
  int v18 = *v55;
  int v19 = v55[2];
  int v61 = v16;
  unsigned int v20 = (v16 + *v55 - 1) / v16;
  int v51 = v55[1];
  int v59 = v17;
  int v57 = (v17 + v51 - 1) / v17;
  unsigned int v21 = v57 * v20;
  BOOL v73 = (*(unsigned char *)(v11 + 4) & 2) != 0;
  long long v71 = *(_OWORD *)(v11 + 20);
  uint64_t v22 = *(void *)(v11 + 144);
  uint64_t v23 = *(void *)(v11 + 112);
  std::mutex::lock((std::mutex *)(v11 + 456));
  if (!*(unsigned char *)(v11 + 520))
  {
    unsigned int v24 = (v60 + v19 - 1) / v60 * v21;
    *(void *)(v11 + 592) = v23;
    *(_DWORD *)(v11 + 584) = v24;
    *(unsigned char *)(v11 + 520) = 1;
    *(float *)(v11 + 664) = fmaxf((float)(4096.0 / (float)v24) * 100.0, 1.0);
  }
  std::mutex::unlock((std::mutex *)(v11 + 456));
  *(void *)&long long v28 = 0x100000000;
  __n128 v29 = (__n128)vmvnq_s8((int8x16_t)vceqq_s32(*v7, (int32x4_t)xmmword_234378DD0));
  v29.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v29);
  v29.n128_u16[0] = vmaxv_u16((uint16x4_t)v29.n128_u64[0]);
  int8x16_t v54 = load_image_block;
  int8x16_t v49 = (ParallelManager *)(v11 + 456);
  if ((v29.n128_u8[0] & 1) == 0)
  {
    int8x16_t v54 = load_image_block;
    if ((v53 & 0xFFFFFFFE) != 2 && v60 == 1)
    {
      float32x2_t v30 = load_image_block;
      if (!v55[3]) {
        float32x2_t v30 = (void (*)(unsigned __int32, int *, int8x16_t *, unsigned __int8 *, int, int, int, _DWORD *, int32x4_t))load_image_block_fast_ldr;
      }
      int8x16_t v54 = v30;
    }
  }
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 576), 0x10u, memory_order_relaxed);
  unsigned int v32 = *(_DWORD *)(v11 + 584);
  int v33 = v32 - add_explicit;
  if (v32 - add_explicit >= 0x10) {
    int v33 = 16;
  }
  if (v32 > add_explicit && v33)
  {
    uint64_t v56 = v22 + 231744 * v10;
    do
    {
      unsigned int v50 = v33;
      unsigned int v34 = v33 + add_explicit;
      if (add_explicit < v33 + add_explicit)
      {
        do
        {
          unsigned int v35 = add_explicit % v21 / v20;
          unsigned int v36 = add_explicit % v21 % v20;
          int v37 = v36 * v61;
          if (v60 != 1) {
            goto LABEL_44;
          }
          int v38 = *(_DWORD *)(v11 + 36);
          if (!v38) {
            goto LABEL_44;
          }
          int v39 = v37 + v61;
          if (v18 < v37 + v61) {
            int v39 = v18;
          }
          int v40 = v35 * v59 + v59;
          if (v51 < v40) {
            int v40 = v51;
          }
          if ((int)(v35 * v59) >= v40) {
            goto LABEL_43;
          }
          char v41 = 0;
          LODWORD(v28) = 1132396544;
          v29.n128_f32[0] = 0.9 / (float)((float)((2 * v38 - 2 + v61) * (2 * v38 - 2 + v59)) * 255.0);
          int v42 = v35 * v59;
          do
          {
            int v43 = v36 * v61;
            if (v37 < v39)
            {
              do
              {
                LODWORD(v28) = *(_DWORD *)(*(void *)(v11 + 136) + 4 * (v43 + v42 * v18));
                if (*(float *)&v28 > v29.n128_f32[0])
                {
                  char v41 = 1;
                  int v42 = v40;
                  int v43 = v39;
                }
                ++v43;
              }
              while (v43 < v39);
            }
            ++v42;
          }
          while (v42 < v40);
          if ((v41 & 1) == 0)
          {
LABEL_43:
            double v44 = 0.0;
            long long v69 = 0u;
            long long v70 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            char v72 = 1;
          }
          else
          {
LABEL_44:
            ((void (*)(void, int *, float32x4_t *, unsigned __int8 *, __n128))v54)(v53, v55, v64, v52, v29);
            if ((*(unsigned char *)(v11 + 4) & 4) != 0)
            {
              *(float32x2_t *)&long long v28 = vmul_n_f32(*(float32x2_t *)(v11 + 20), *((float *)&v70 + 3) * 0.000015259);
              v25.i32[0] = *(_DWORD *)(v11 + 28);
              *(float *)&double v44 = (float)(*((float *)&v70 + 3) * 0.000015259) * *(float *)v25.i32;
              *((float *)&v28 + 2) = *(float *)&v44;
              HIDWORD(v28) = *(_DWORD *)(v11 + 32);
              long long v71 = v28;
            }
          }
          compress_block(v11, v64, v58 + (int)(16 * (v36 + (v35 + add_explicit / v21 * v57) * v20)), v56, v44, *(double *)&v28, v25, v26, v27);
          ++add_explicit;
        }
        while (add_explicit != v34);
      }
      ParallelManager::complete_task_assignment(v49, v50);
      unsigned int v45 = atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 576), 0x10u, memory_order_relaxed);
      unsigned int v46 = *(_DWORD *)(v11 + 584);
      int v33 = v46 - v45;
      if (v46 - v45 >= 0x10) {
        int v33 = 16;
      }
      if (v46 > v45) {
        unsigned int add_explicit = v45;
      }
      else {
        unsigned int add_explicit = 0;
      }
    }
    while (v46 > v45 && v33 != 0);
  }
  ParallelManager::wait((std::mutex *)v49);
  v62[0] = &unk_26E722BA0;
  v62[1] = v11;
  uint16x4_t v63 = v62;
  std::mutex::lock((std::mutex *)v49);
  if (*(unsigned char *)(v11 + 521)) {
    goto LABEL_60;
  }
  if (v63)
  {
    (*(void (**)(void *))(*v63 + 48))(v63);
    *(unsigned char *)(v11 + 521) = 1;
LABEL_60:
    std::mutex::unlock((std::mutex *)v49);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:nn180100](v62);
    return 0;
  }
  float32x4_t v48 = (astcenc_context *)std::__throw_bad_function_call[abi:nn180100]();
  return astcenc_compress_reset(v48);
}

uint64_t astcenc_compress_reset(astcenc_context *a1)
{
  if ((*((unsigned char *)a1 + 4) & 0x10) != 0) {
    return 9;
  }
  uint64_t result = 0;
  *((_WORD *)a1 + 152) = 0;
  atomic_store(0, (unsigned int *)a1 + 90);
  *(void *)((char *)a1 + 364) = 0;
  *((void *)a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1065353216;
  *((_WORD *)a1 + 260) = 0;
  atomic_store(0, (unsigned int *)a1 + 144);
  *(void *)((char *)a1 + 580) = 0;
  *((void *)a1 + 83) = 1065353216;
  return result;
}

void ParallelManager::wait(std::mutex *this)
{
  m = this;
  v2.__m_ = this;
  v2.__owns_ = 1;
  std::mutex::lock(this);
  if (*(_DWORD *)&m[1].__m_.__opaque[52] == LODWORD(m[2].__m_.__sig)) {
    goto LABEL_5;
  }
  do
    std::condition_variable::wait((std::condition_variable *)m[1].__m_.__opaque, &v2);
  while (*(_DWORD *)&m[1].__m_.__opaque[52] != LODWORD(m[2].__m_.__sig));
  if (v2.__owns_)
  {
    m = v2.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
}

void ParallelManager::complete_task_assignment(ParallelManager *this, int a2)
{
  std::mutex::lock((std::mutex *)this);
  int v4 = *((_DWORD *)this + 32);
  unsigned int v5 = *((_DWORD *)this + 31) + a2;
  *((_DWORD *)this + 31) = v5;
  float v6 = *((float *)this + 53);
  if (v5 == v4)
  {
    if (*((void *)this + 17))
    {
      std::mutex::lock((std::mutex *)((char *)this + 144));
      (*((void (**)(float))this + 17))(100.0);
      *((_DWORD *)this + 53) = 1120403456;
      std::mutex::unlock((std::mutex *)((char *)this + 144));
    }
    std::mutex::unlock((std::mutex *)this);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 72));
  }
  else
  {
    std::mutex::unlock((std::mutex *)this);
  }
  if (*((void *)this + 17))
  {
    float v7 = (float)((float)v5 / (float)*((unsigned int *)this + 32)) * 100.0;
    if ((float)(v7 - v6) > *((float *)this + 52))
    {
      std::mutex::lock((std::mutex *)((char *)this + 144));
      if ((float)(v7 - *((float *)this + 53)) > *((float *)this + 52))
      {
        (*((void (**)(float))this + 17))(v7);
        *((float *)this + 53) = v7;
      }
      std::mutex::unlock((std::mutex *)((char *)this + 144));
    }
  }
}

char *astcenc_get_error_string(unsigned int a1)
{
  if (a1 > 0xB) {
    return 0;
  }
  else {
    return off_264BE8DC8[a1];
  }
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::~__func()
{
}

__n128 std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  std::unique_lock<std::mutex> v2 = (char *)operator new(0x20uLL);
  *(void *)std::unique_lock<std::mutex> v2 = &unk_26E722B10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E722B10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::operator()()
{
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_0>,unsigned int ()(void)>::target_type()
{
}

void std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26E722BA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E722BA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v2 + 136);
  if (result)
  {
    uint64_t result = MEMORY[0x237DBCBA0](result, 0x1000C8052888210);
    uint64_t v2 = *(void *)(a1 + 8);
  }
  *(void *)(v2 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

uint64_t std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1,std::allocator<astcenc_compress_image(astcenc_context *,astcenc_image *,astcenc_swizzle const*,unsigned char *,unsigned long,unsigned int)::$_1>,void ()(void)>::target_type()
{
}

void get_2d_percentile_table()
{
}

uint64_t is_legal_2d_block_size(int a1, int a2)
{
  int v2 = a2 | (a1 << 8);
  uint64_t result = 1;
  if (v2 > 2564)
  {
    BOOL v4 = (v2 - 2565) > 5 || ((1 << (v2 - 5)) & 0x2B) == 0;
    if (v4 && v2 != 3082 && v2 != 3084) {
      return 0;
    }
  }
  else if (v2 > 2052)
  {
    unsigned int v5 = v2 - 2053;
    if (v5 > 3 || v5 == 2) {
      return 0;
    }
  }
  else if ((v2 - 1284) >= 2 && (v2 - 1541) >= 2 && v2 != 1028)
  {
    return 0;
  }
  return result;
}

uint64_t is_legal_3d_block_size(int a1, int a2, int a3)
{
  int v3 = (a2 << 8) | (a1 << 16) | a3;
  uint64_t result = 1;
  if (v3 > 328963)
  {
    BOOL v5 = (v3 - 328964) >= 2 && (v3 - 394757) >= 2;
    int v6 = 394501;
LABEL_8:
    if (v5 && v3 != v6) {
      return 0;
    }
    return result;
  }
  if (v3 > 263170)
  {
    BOOL v5 = (v3 - 263171) >= 2;
    int v6 = 328708;
    goto LABEL_8;
  }
  if (v3 != 197379 && v3 != 262915) {
    return 0;
  }
  return result;
}

unsigned __int8 *symbolic_to_physical(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3, double a4, double a5, float a6)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  int v8 = *a2;
  if (v8 == 2)
  {
    uint64_t v11 = 0;
    *(void *)a3 = -516;
    uint64_t v12 = a3 + 9;
    do
    {
      *(_WORD *)(v12 - 1) = *(_DWORD *)&a2[v11 + 20];
      v12 += 2;
      v11 += 4;
    }
    while (v11 != 16);
    return result;
  }
  if (v8 == 1)
  {
    uint64_t v9 = 0;
    *(void *)a3 = -4;
    uint64_t v10 = a3 + 9;
    do
    {
      *(_WORD *)(v10 - 1) = *(_DWORD *)&a2[v9 + 20];
      v10 += 2;
      v9 += 4;
    }
    while (v9 != 16);
    return result;
  }
  unsigned int v13 = result;
  uint64_t v14 = a2[1];
  int v15 = *(unsigned __int16 *)&result[2 * *((unsigned __int16 *)a2 + 2) + 11300848];
  int8x16_t v68 = 0uLL;
  uint64_t v16 = result[129888 * result[6 * v15 + 11304946] + 594];
  int v17 = (unsigned __int8 *)result[6 * v15 + 11304947];
  float v18 = -1.0;
  if (v17 <= 0x14) {
    float v18 = flt_23441F0A0[(char)v17];
  }
  unsigned __int8 v19 = v13[6 * v15 + 11304949];
  int v20 = v19 & 1;
  unsigned int v21 = v16 << (v19 & 1);
  if (v17 > 0x14)
  {
    signed int v22 = -896;
    if (v19)
    {
LABEL_13:
      if (v16)
      {
        uint64_t v23 = a2 + 84;
        unsigned int v24 = v67;
        do
        {
          LOBYTE(are::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(v23 - 32);
          *(float *)&unsigned int v25 = (float)(v18 * (float)((float)LODWORD(a6) * 0.015625)) + 0.5;
          double v26 = &quant_and_xfer_tables[226 * v17 + 32];
          *(v24 - 1) = v26[*(float *)&v25];
          LOBYTE(v25) = *v23;
          a6 = (float)(v18 * (float)((float)v25 * 0.015625)) + 0.5;
          *unsigned int v24 = v26[a6];
          v24 += 2;
          ++v23;
          --v16;
        }
        while (v16);
      }
      goto LABEL_21;
    }
  }
  else
  {
    signed int v22 = 128
        - (unsigned __int16)(((ise_sizes[(void)v17] >> 5) | 1)
                           + v21 * (ise_sizes[(void)v17] & 0x3F)
                           - 1)
        / ((ise_sizes[(void)v17] >> 5) | 1u);
    if (v19) {
      goto LABEL_13;
    }
  }
  if (v16)
  {
    float32x4_t v27 = a2 + 52;
    long long v28 = &v66;
    do
    {
      unsigned int v29 = *v27++;
      *v28++ = quant_and_xfer_tables[226 * v17
                                   + 32
                                   + (int)(float)((float)(v18 * (float)((float)v29 * 0.015625)) + 0.5)];
      --v16;
    }
    while (v16);
  }
LABEL_21:
  encode_ise(v17, v21, &v66, (uint64_t)&v68, 0);
  int8x16_t v30 = vrev64q_s8(v68);
  *(int8x16_t *)a3 = vrbitq_s8(vextq_s8(v30, v30, 8uLL));
  unsigned int v31 = *((unsigned __int16 *)a2 + 2);
  *(unsigned char *)a3 = v31;
  int v32 = (v31 >> 8) & 7;
  char v33 = (8 * v14 + 24) & 0x18;
  *(unsigned char *)(a3 + 1) = *(unsigned char *)(a3 + 1) & 0xE0 | v33 | BYTE1(v31) & 7;
  char v34 = *(unsigned char *)(a3 + 2);
  if (v14 >= 2)
  {
    unsigned int v35 = *((unsigned __int16 *)a2 + 3);
    *(unsigned char *)(a3 + 1) = v33 | (32 * v35) | v32;
    int v36 = (v35 >> 3) & 7;
    char v37 = v34 & 0xF8 | (v35 >> 3) & 7;
    *(unsigned char *)(a3 + 2) = v37;
    int v38 = (*((unsigned __int16 *)a2 + 3) >> 3) & 0x78;
    *(unsigned char *)(a3 + 2) = v37 & 0x87 | (*((unsigned __int16 *)a2 + 3) >> 3) & 0x78;
    char v39 = *(unsigned char *)(a3 + 3);
    if (a2[2])
    {
      unsigned __int8 v40 = a2[8];
      *(unsigned char *)(a3 + 2) = v38 | v36;
      *(unsigned char *)(a3 + 3) = v39 & 0xE0 | (2 * (v40 & 0xF));
      if (!v20) {
        goto LABEL_27;
      }
    }
    else
    {
      unsigned int v53 = a2 + 8;
      int v54 = 4;
      uint64_t v55 = v14;
      do
      {
        unsigned int v56 = *v53++;
        int v57 = v56 >> 2;
        if ((int)(v56 >> 2) < v54) {
          int v54 = v57;
        }
        --v55;
      }
      while (v55);
      uint64_t v58 = 0;
      if (v54 == 3) {
        int v59 = 2;
      }
      else {
        int v59 = v54;
      }
      int v60 = v59 + 1;
      do
      {
        v60 |= ((a2[v58 + 8] >> 2) - v59) << (v58 + 2);
        ++v58;
      }
      while (v14 != v58);
      int v61 = (char *)(a2 + 8);
      int v62 = v14 + 2;
      uint64_t v63 = v14;
      do
      {
        char v64 = *v61++;
        v60 |= (v64 & 3) << v62;
        v62 += 2;
        --v63;
      }
      while (v63);
      v22 -= 3 * v14 - 4;
      *(unsigned char *)(a3 + 2) = v36 | ((_BYTE)v60 << 7) | v38;
      *(unsigned char *)(a3 + 3) = v39 & 0xE0 | (v60 >> 1) & 0x1F;
      *(_WORD *)(a3 + (v22 >> 3)) = *(_WORD *)(a3 + (v22 >> 3)) & ~(unsigned __int16)(~(-1 << (3 * v14 - 4)) << (v22 & 7)) | (((v60 >> 6) & ~(-1 << (3 * v14 - 4))) << (v22 & 7));
      if (!v20) {
        goto LABEL_27;
      }
    }
    goto LABEL_26;
  }
  unsigned __int8 v41 = a2[8];
  *(unsigned char *)(a3 + 1) = v33 | (32 * v41) | v32;
  *(unsigned char *)(a3 + 2) = v34 & 0xFE | ((v41 & 8) != 0);
  if (v20) {
LABEL_26:
  }
    *(_WORD *)(a3 + ((v22 - 2) >> 3)) = *(_WORD *)(a3 + ((v22 - 2) >> 3)) & ~(unsigned __int16)(3 << ((v22 - 2) & 7)) | ((a2[3] & 3) << ((v22 - 2) & 7));
LABEL_27:
  int v42 = (unsigned __int8 *)*((int *)a2 + 3);
  uint64_t v43 = a2[1];
  if (a2[1])
  {
    uint64_t v44 = 0;
    unsigned int v45 = 0;
    unsigned int v46 = a2 + 20;
    do
    {
      unint64_t v47 = (((unint64_t)a2[v44 + 8] >> 1) & 0x7E) + 2;
      float32x4_t v48 = &v65[v45];
      int8x16_t v49 = v46;
      unint64_t v50 = v47;
      do
      {
        unsigned int v51 = *v49++;
        *v48++ = color_uquant_to_scrambled_pquant_tables[256 * (void)v42 - 1024 + v51];
        --v50;
      }
      while (v50);
      v45 += v47;
      ++v44;
      v46 += 8;
    }
    while (v44 != v43);
  }
  else
  {
    unsigned int v45 = 0;
  }
  if (v43 == 1) {
    unsigned int v52 = 17;
  }
  else {
    unsigned int v52 = 29;
  }
  return encode_ise(v42, v45, v65, a3, v52);
}

int32x4_t rgba_delta_unpack(int32x4_t *a1, int32x4_t *a2, uint32x4_t a3, int8x16_t a4)
{
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v5.i64[0] = 0x8000000080;
  v5.i64[1] = 0x8000000080;
  int32x4_t v6 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(a3, (uint32x4_t)v4), vandq_s8(a4, v5));
  int32x4_t v7 = (int32x4_t)vshlq_u32((uint32x4_t)a4, (uint32x4_t)v4);
  v5.i64[0] = 0x3F0000003FLL;
  v5.i64[1] = 0x3F0000003FLL;
  v8.i64[0] = 0x2000000020;
  v8.i64[1] = 0x2000000020;
  int32x4_t v9 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32(v7, v8) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8((int8x16_t)v7, v5));
  v5.i32[0] = vaddq_s32(vaddq_s32(v9, vdupq_lane_s32(*(int32x2_t *)v9.i8, 1)), vdupq_laneq_s32(v9, 2)).u32[0];
  int32x4_t v10 = vaddq_s32(v9, v6);
  if (v5.i32[0] < 0)
  {
    v11.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v6, 2), v6), v4).u64[0];
    v11.i64[1] = v6.i64[1];
    v6.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v10, 2), v10), v4).u64[0];
    v6.i64[1] = v10.i64[1];
    int32x4_t v10 = v11;
  }
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  *a1 = vminq_s32(vmaxq_s32(v6, (int32x4_t)0), v12);
  int32x4_t result = vminq_s32(vmaxq_s32(v10, (int32x4_t)0), v12);
  *a2 = result;
  return result;
}

void unpack_color_endpoints(int a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned char *a5, uint64_t a6, __n128 *a7, __n128 a8, double a9, int32x4_t a10, int32x4_t a11)
{
  *a4 = 0;
  *a5 = 0;
  switch(a2)
  {
    case 0:
      unsigned int v17 = *a3;
      int v18 = a3[1];
      goto LABEL_5;
    case 1:
      unsigned __int8 v19 = a3[1];
      unsigned int v17 = v19 & 0xC0 | (*a3 >> 2);
      int v18 = v17 + (v19 & 0x3F);
      if (v18 >= 255) {
        int v18 = 255;
      }
LABEL_5:
      LODWORD(v20) = v17;
      DWORD1(v20) = v17;
      *((void *)&v20 + 1) = v17 | 0xFF00000000;
      a8.n128_u32[0] = v18;
      *(_OWORD *)a6 = v20;
      a8.n128_u32[1] = v18;
      a8.n128_u64[1] = v18 | 0xFF00000000;
      *a7 = a8;
      if (!a1) {
        goto LABEL_107;
      }
      goto LABEL_114;
    case 2:
      *a4 = 1;
      unsigned int v21 = *a3;
      unsigned int v22 = a3[1];
      int v23 = 16 * v21 - 8;
      BOOL v24 = v22 >= v21;
      if (v22 >= v21) {
        int v25 = v21 << 8;
      }
      else {
        int v25 = (v22 << 8) | 0x80;
      }
      if (v24) {
        int v26 = 16 * v22;
      }
      else {
        int v26 = v23;
      }
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = v25;
      a8.n128_u32[1] = v25;
      v27.n128_u32[3] = 30720;
      a8.n128_u32[2] = v25;
      int v28 = 16 * v26;
      goto LABEL_29;
    case 3:
      *a4 = 1;
      int v29 = *a3;
      int v30 = a3[1];
      if ((v29 & 0x80u) != 0) {
        int v31 = 3584;
      }
      else {
        int v31 = 3840;
      }
      if ((v29 & 0x80u) == 0) {
        char v32 = 1;
      }
      else {
        char v32 = 2;
      }
      if ((v29 & 0x80u) != 0) {
        int v33 = 508;
      }
      else {
        int v33 = 254;
      }
      if ((v29 & 0x80u) != 0) {
        int v34 = 124;
      }
      else {
        int v34 = 30;
      }
      int v35 = v31 & (16 * v30) | (v29 << v32) & v33;
      int v36 = v35 + ((v30 << v32) & v34);
      if (v36 >= 4095) {
        int v36 = 4095;
      }
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = 16 * v35;
      a8.n128_u32[1] = 16 * v35;
      v27.n128_u32[3] = 30720;
      a8.n128_u32[2] = 16 * v35;
      int v28 = 16 * v36;
LABEL_29:
      v27.n128_u32[0] = v28;
      *(__n128 *)a6 = a8;
      v27.n128_u32[1] = v28;
      goto LABEL_87;
    case 4:
      a8.n128_u8[0] = *a3;
      a8.n128_u8[4] = a3[2];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      int32x4_t v37 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v37.i32[2] = a8.n128_u32[0];
      a8.n128_u8[0] = a3[1];
      a8.n128_u8[4] = a3[3];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      int32x4_t v38 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v38.i32[2] = a8.n128_u32[0];
      goto LABEL_32;
    case 5:
      a8.n128_u8[0] = a3[1];
      a8.n128_u8[4] = a3[3];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      int32x2_t v39 = vadd_s32((int32x2_t)a8.n128_u64[0], (int32x2_t)a8.n128_u64[0]);
      unint64_t v40 = *(void *)&vtst_s32((int32x2_t)(a8.n128_u64[0] & 0xFFFFFF40FFFFFF40), (int32x2_t)(a8.n128_u64[0] & 0xFFFFFF40FFFFFF40)) & 0xFFFFFF80FFFFFF80;
      a8.n128_u64[0] = (unint64_t)vorr_s8((int8x8_t)v40, (int8x8_t)(a8.n128_u64[0] & 0xFFFFFF7EFFFFFF7ELL));
      LOBYTE(v40) = *a3;
      BYTE4(v40) = a3[2];
      uint32x2_t v41 = (uint32x2_t)vorr_s8((int8x8_t)(*(void *)&v39 & 0xFFFFFF01FFFFFF01), vand_s8((int8x8_t)v40, (int8x8_t)0xFF000000FFLL));
      a8.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)vsra_n_u32((uint32x2_t)vshr_n_s32((int32x2_t)a8.n128_u64[0], 1uLL), v41, 1uLL), 0), (int32x2_t)0xFF000000FFLL);
      int32x4_t v38 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v38.i32[2] = a8.n128_u32[0];
      a8.n128_u64[0] = (unint64_t)vshr_n_u32(v41, 1uLL);
      int32x4_t v37 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v37.i32[2] = a8.n128_u32[0];
LABEL_32:
      *(int32x4_t *)a6 = v37;
      goto LABEL_106;
    case 6:
      v42.i32[0] = *a3;
      v42.i32[1] = a3[1];
      v42.i64[1] = a3[2];
      int32x4_t v43 = vmulq_s32(vdupq_n_s32(a3[3]), v42);
      v42.i32[3] = 255;
      *a7 = (__n128)v42;
      v42.i64[0] = 0x700000007;
      v42.i64[1] = 0x700000007;
      a8 = (__n128)vshlq_s32(v43, v42);
      a8.n128_u32[3] = 255;
      *(__n128 *)a6 = a8;
      if (!a1) {
        goto LABEL_107;
      }
      goto LABEL_114;
    case 7:
      *a4 = 1;
      unsigned int v44 = *a3;
      unsigned int v45 = a3[1];
      unsigned int v46 = a3[2];
      unsigned int v47 = a3[3];
      unsigned int v48 = (v46 >> 4) & 8 | (v45 >> 5) & 4;
      BOOL v49 = v44 >> 6 == 3;
      if (v44 >> 6 == 3) {
        unsigned int v50 = 0;
      }
      else {
        unsigned int v50 = v44 >> 6;
      }
      if (v44 >> 6 == 3) {
        unsigned int v51 = 5;
      }
      else {
        unsigned int v51 = 4;
      }
      BOOL v80 = v48 == 12;
      BOOL v52 = v48 == 12;
      unsigned int v53 = v48 >> 2;
      if (v80) {
        unsigned int v53 = v50;
      }
      else {
        unsigned int v51 = v44 >> 6;
      }
      int v54 = (v45 >> 6) & 1;
      int v55 = (v45 >> 5) & 1;
      int v56 = (v46 >> 6) & 1;
      int v57 = (v46 >> 5) & 1;
      int v58 = (v47 >> 6) & 1;
      int v59 = (v47 >> 5) & 1;
      int v60 = 1 << v51;
      int v61 = v54 << 6;
      if (((1 << v51) & 0x30) == 0) {
        int v61 = 0;
      }
      unsigned int v62 = v61 & 0xFFFFFFE0 | v45 & 0x1F;
      int v63 = 32 * v55;
      int v64 = v56 << 6;
      if ((v60 & 0x30) == 0) {
        int v64 = 0;
      }
      if ((v60 & 0x3A) == 0) {
        int v63 = 0;
      }
      int v65 = v62 | v63;
      unsigned int v66 = v64 & 0xFFFFFFE0 | v46 & 0x1F;
      int v67 = 32 * v57;
      if ((v60 & 0x3A) == 0) {
        int v67 = 0;
      }
      int v68 = v66 | v67;
      int v69 = (16 * v60) & (v57 << 6);
      int v70 = (v47 >> 1) & 0x40;
      if ((v60 & 0x3B) == 0) {
        int v70 = 0;
      }
      int v71 = v56 << 7;
      if (v51 > 3) {
        int v71 = 0;
      }
      int v72 = v55 << 8;
      int v73 = v54 << 8;
      if ((v60 & 0xA) == 0) {
        int v73 = 0;
      }
      if ((v60 & 5) == 0) {
        int v72 = 0;
      }
      int v74 = v54 << 9;
      if ((v60 & 5) == 0) {
        int v74 = 0;
      }
      int v75 = v57 << 10;
      if (v51) {
        int v75 = 0;
      }
      int v76 = hdr_rgbo_unpack(unsigned char const*,vint4 &,vint4 &)::shamts[v51];
      unsigned int v77 = (v71 & 0xFFFFFFC0 | v44 & 0x3F | v75 | v70 | v69 | (8 * v60) & (v58 << 7) | v72 | v73 | v74 | (v60 << 8) & (v59 << 9) | (v60 << 9) & (v58 << 10)) << v76;
      int v78 = v65 << v76;
      int v79 = v68 << v76;
      BOOL v80 = !v52 || !v49;
      if (v52 && v49) {
        int v81 = v78;
      }
      else {
        int v81 = v77 - v78;
      }
      if (v80) {
        int v82 = v77 - v79;
      }
      else {
        int v82 = v79;
      }
      if (v53 == 1) {
        int v83 = v81;
      }
      else {
        int v83 = v77;
      }
      if (v53 == 1) {
        int v84 = v77;
      }
      else {
        int v84 = v81;
      }
      BOOL v85 = v53 == 2;
      if (v53 == 2) {
        int v86 = v82;
      }
      else {
        int v86 = v83;
      }
      if (v85) {
        int v82 = v77;
      }
      else {
        int v81 = v84;
      }
      int v87 = 32 * v59;
      if ((v60 & 0x3D) == 0) {
        int v87 = 0;
      }
      unsigned int v88 = v87 & 0xFFFFFFE0 | v47 & 0x1F;
      int v89 = v58 << 6;
      if ((v60 & 0x2D) == 0) {
        int v89 = 0;
      }
      int v90 = (v88 | v89 | v47 & (32 * v60) & 0x80) << v76;
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = 16 * ((v86 - v90) & ~((v86 - v90) >> 31));
      a8.n128_u32[1] = 16 * ((v81 - v90) & ~((v81 - v90) >> 31));
      a8.n128_u32[2] = 16 * ((v82 - v90) & ~((v82 - v90) >> 31));
      v27.n128_u32[3] = 30720;
      *(__n128 *)a6 = a8;
      v27.n128_u32[0] = 16 * (v86 & ~(v86 >> 31));
      int v28 = 16 * (v82 & ~(v82 >> 31));
      v27.n128_u32[1] = 16 * (v81 & ~(v81 >> 31));
LABEL_87:
      v27.n128_u32[2] = v28;
      *a7 = v27;
      goto LABEL_99;
    case 8:
      a8.n128_u32[3] = 0;
      a8.n128_u32[0] = *a3;
      a8.n128_u32[1] = a3[2];
      a8.n128_u32[2] = a3[4];
      v91.i32[0] = a3[1];
      v91.i32[1] = a3[3];
      v91.i64[1] = a3[5];
      if (a8.n128_u32[1] + a8.n128_u32[0] + a8.n128_u32[2] > v91.i32[1] + v91.i32[0] + v91.i32[2])
      {
        v92.i64[0] = -1;
        v92.i64[1] = -1;
        v93.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32((int32x4_t)a8, 2), (int32x4_t)a8), v92).u64[0];
        v93.i64[1] = a8.n128_i64[1];
        a8.n128_u64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v91, 2), v91), v92).u64[0];
        a8.n128_u64[1] = a3[5];
        int32x4_t v91 = v93;
      }
      *(__n128 *)a6 = a8;
      *a7 = (__n128)v91;
      goto LABEL_94;
    case 9:
      v94.i32[0] = *a3;
      v94.i32[1] = a3[2];
      v94.i64[1] = a3[4];
      v95.i32[0] = a3[1];
      v95.i32[1] = a3[3];
      v95.i64[1] = a3[5];
      v96.i64[0] = -1;
      v96.i64[1] = -1;
      int8x16_t v97 = (int8x16_t)vshlq_u32(v95, (uint32x4_t)v96);
      int32x4_t v98 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v95 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), (int8x16_t)vshlq_u32(v94, (uint32x4_t)v96));
      v95.i64[0] = 0x3F0000003FLL;
      v95.i64[1] = 0x3F0000003FLL;
      v99.i64[0] = 0x2000000020;
      v99.i64[1] = 0x2000000020;
      int32x4_t v100 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v97, v99) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v97, (int8x16_t)v95));
      v97.i32[0] = vaddq_s32(vaddq_s32(v100, vdupq_lane_s32(*(int32x2_t *)v100.i8, 1)), vdupq_laneq_s32(v100, 2)).u32[0];
      int32x4_t v101 = vaddq_s32(v100, v98);
      if (v97.i32[0] < 0)
      {
        v102.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v98, 2), v98), v96).u64[0];
        v102.i64[1] = v98.i64[1];
        v98.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v101, 2), v101), v96).u64[0];
        v98.i64[1] = v101.i64[1];
        int32x4_t v101 = v102;
      }
      v103.i64[0] = 0xFF000000FFLL;
      v103.i64[1] = 0xFF000000FFLL;
      *(int32x4_t *)a6 = vminq_s32(vmaxq_s32(v98, (int32x4_t)0), v103);
      a8 = (__n128)vminq_s32(vmaxq_s32(v101, (int32x4_t)0), v103);
      *a7 = a8;
LABEL_94:
      *(_DWORD *)(a6 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 255;
      a7->n128_u32[3] = 255;
      if (!a1) {
        goto LABEL_107;
      }
      goto LABEL_114;
    case 10:
      a8.n128_u8[0] = *a3;
      a8.n128_u8[4] = a3[1];
      a8.n128_u16[1] = a8.n128_u16[2];
      a8.n128_u8[4] = a3[2];
      a8.n128_u8[6] = a3[4];
      v104.i64[0] = 0xFF000000FFLL;
      v104.i64[1] = 0xFF000000FFLL;
      a8 = (__n128)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)a8.n128_u64[0]), v104);
      v105.i64[0] = 0x700000007;
      v105.i64[1] = 0x700000007;
      int32x4_t v106 = vshlq_s32(vmulq_s32(vdupq_n_s32(a3[3]), (int32x4_t)a8), v105);
      v106.i32[3] = a8.n128_i32[3];
      a8.n128_u32[3] = a3[5];
      *a7 = a8;
      *(int32x4_t *)a6 = v106;
      if (!a1) {
        goto LABEL_107;
      }
      goto LABEL_114;
    case 11:
      *a4 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
LABEL_99:
      if (a1 == 3)
      {
        *(_DWORD *)(a6 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 30720;
        a7->n128_u32[3] = 30720;
        unsigned __int32 v107 = 1;
        *a5 = 1;
        goto LABEL_119;
      }
      *(_DWORD *)(a6 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 255;
      a7->n128_u32[3] = 255;
      *a5 = 0;
      if (a1)
      {
LABEL_114:
        if (a1 == 1)
        {
          if (*a4 | *a5)
          {
            *(_OWORD *)a6 = xmmword_23441F100;
            *a7 = (__n128)xmmword_23441F100;
            *a4 = 0;
            *a5 = 0;
          }
          int32x4_t v126 = vdupq_n_s32(0x101u);
          *(int32x4_t *)a6 = vmulq_s32(*(int32x4_t *)a6, v126);
          int32x4_t v127 = *(int32x4_t *)a7;
          goto LABEL_120;
        }
        unsigned __int32 v107 = *a5;
LABEL_119:
        a8.n128_u8[0] = *a4;
        a8.n128_u32[1] = v107;
        a8.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32(vneg_s32((int32x2_t)a8.n128_u64[0]), 0x18uLL), 0x18uLL);
        int8x16_t v128 = (int8x16_t)vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
        v128.i32[2] = a8.n128_u32[0];
        v129.i64[0] = 0x100000001;
        v129.i64[1] = 0x100000001;
        int32x4_t v127 = (int32x4_t)vbslq_s8(v128, v129, (int8x16_t)vdupq_n_s32(0x101u));
        *(int32x4_t *)a6 = vmulq_s32(v127, *(int32x4_t *)a6);
        int32x4_t v126 = *(int32x4_t *)a7;
LABEL_120:
        int32x4_t v113 = vmulq_s32(v127, v126);
        goto LABEL_121;
      }
LABEL_107:
      if (*a4 | *a5)
      {
        *(_OWORD *)a6 = xmmword_23441F100;
        *a7 = (__n128)xmmword_23441F100;
        *a4 = 0;
        *a5 = 0;
      }
      int32x4_t v110 = vshlq_n_s32(*(int32x4_t *)a6, 8uLL);
      v110.i64[0] |= 0x8000000080uLL;
      v110.i32[2] |= 0x80u;
      int32x4_t v111 = vdupq_n_s32(0x101u);
      v110.i32[3] = vmulq_s32(*(int32x4_t *)a6, v111).i32[3];
      *(int32x4_t *)a6 = v110;
      int32x4_t v112 = vshlq_n_s32(*(int32x4_t *)a7, 8uLL);
      v113.i64[0] = v112.i64[0] | 0x8000000080;
      v113.i32[2] = v112.i32[2] | 0x80;
      v113.i32[3] = vmulq_s32(*(int32x4_t *)a7, v111).i32[3];
LABEL_121:
      *a7 = (__n128)v113;
      return;
    case 12:
      a10.i32[0] = *a3;
      a10.i32[1] = a3[2];
      a10.i32[2] = a3[4];
      a8 = (__n128)a10;
      a8.n128_u32[3] = a3[6];
      a11.i32[0] = a3[1];
      a11.i32[1] = a3[3];
      a11.i32[2] = a3[5];
      int32x4_t v38 = a11;
      v38.i32[3] = a3[7];
      if (a10.i32[1] + a10.i32[0] + a10.i32[2] > (a11.i32[1] + a11.i32[0] + a11.i32[2]))
      {
        v108.i64[0] = -1;
        v108.i64[1] = -1;
        v109.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(a10, 2), (int32x4_t)a8), v108).u64[0];
        v109.i64[1] = a8.n128_i64[1];
        a8.n128_u64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(a11, 2), v38), v108).u64[0];
        a8.n128_u64[1] = v38.u64[1];
        int32x4_t v38 = v109;
      }
      *(__n128 *)a6 = a8;
LABEL_106:
      *a7 = (__n128)v38;
      if (!a1) {
        goto LABEL_107;
      }
      goto LABEL_114;
    case 13:
      a8.n128_u8[0] = a3[4];
      a8.n128_u8[4] = a3[6];
      v114.i32[0] = *a3;
      v114.i32[1] = a3[2];
      int8x8_t v115 = vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v114.u64[1] = (unint64_t)v115;
      v115.i8[0] = a3[5];
      v115.i8[4] = a3[7];
      v116.i32[0] = a3[1];
      v116.i32[1] = a3[3];
      v116.u64[1] = (unint64_t)vand_s8(v115, (int8x8_t)0xFF000000FFLL);
      v117.i64[0] = -1;
      v117.i64[1] = -1;
      int8x16_t v118 = (int8x16_t)vshlq_u32(v114, (uint32x4_t)v117);
      int8x16_t v119 = (int8x16_t)vshlq_u32(v116, (uint32x4_t)v117);
      int32x4_t v120 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v116 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v118);
      v116.i64[0] = 0x3F0000003FLL;
      v116.i64[1] = 0x3F0000003FLL;
      v121.i64[0] = 0x2000000020;
      v121.i64[1] = 0x2000000020;
      int32x4_t v122 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v119, v121) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v119, (int8x16_t)v116));
      v116.i32[0] = vaddq_s32(vaddq_s32(v122, vdupq_lane_s32(*(int32x2_t *)v122.i8, 1)), vdupq_laneq_s32(v122, 2)).u32[0];
      int32x4_t v123 = vaddq_s32(v122, v120);
      if (v116.i32[0] < 0)
      {
        v124.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v120, 2), v120), v117).u64[0];
        v124.i64[1] = v120.i64[1];
        v120.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v123, 2), v123), v117).u64[0];
        v120.i64[1] = v123.i64[1];
        int32x4_t v123 = v124;
      }
      v125.i64[0] = 0xFF000000FFLL;
      v125.i64[1] = 0xFF000000FFLL;
      *(int32x4_t *)a6 = vminq_s32(vmaxq_s32(v120, (int32x4_t)0), v125);
      a8 = (__n128)vminq_s32(vmaxq_s32(v123, (int32x4_t)0), v125);
      *a7 = a8;
      goto LABEL_113;
    case 14:
      *a4 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
      int v130 = a3[6];
      int v131 = a3[7];
      goto LABEL_132;
    case 15:
      *a4 = 1;
      *a5 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
      unsigned int v132 = a3[6];
      unsigned int v133 = a3[7];
      int v134 = (v133 >> 6) & 2 | (v132 >> 7);
      int v135 = v132 & 0x7F;
      int v136 = v133 & 0x7F;
      int v137 = (v136 << (v134 + 1)) & 0x780 | v135;
      int v138 = v137 << (4 - v134);
      int v139 = ((0x3Fu >> v134) & v133 ^ (0x20u >> v134)) - (0x20u >> v134) + v137;
      int v140 = v139 << (4 - v134);
      if (v140 >= 4095) {
        int v140 = 4095;
      }
      if (v139 >= 0) {
        int v141 = v140;
      }
      else {
        int v141 = 0;
      }
      int v142 = 32 * v135;
      int v143 = 32 * v136;
      if (v134 == 3) {
        int v141 = v143;
      }
      else {
        int v142 = v138;
      }
      int v130 = 16 * v142;
      int v131 = 16 * v141;
LABEL_132:
      *(_DWORD *)(a6 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v130;
      a7->n128_u32[3] = v131;
      if (!a1) {
        goto LABEL_107;
      }
      goto LABEL_114;
    default:
LABEL_113:
      if (a1) {
        goto LABEL_114;
      }
      goto LABEL_107;
  }
}

__n128 hdr_rgb_unpack(unsigned __int8 *a1, _OWORD *a2, __n128 *a3)
{
  int v3 = *a1;
  unsigned int v4 = a1[1];
  unsigned int v5 = a1[2];
  unsigned int v6 = a1[3];
  unsigned int v7 = a1[4];
  unsigned int v8 = a1[5];
  int v9 = (v8 >> 6) & 2 | (v7 >> 7);
  if (v9 == 3)
  {
    HIDWORD(v10) = 30720;
    LODWORD(v10) = v3 << 8;
    DWORD1(v10) = v5 << 8;
    DWORD2(v10) = (v7 & 0x7F) << 9;
    int v11 = v4 << 8;
    *a2 = v10;
    int v12 = v6 << 8;
    unsigned int v13 = (v8 & 0x7F) << 9;
  }
  else
  {
    unsigned int v14 = (v5 >> 6) & 2 | (v4 >> 7) | (v6 >> 5) & 4;
    int v15 = v7 & 0x7F;
    int v16 = v8 & 0x7F;
    int v17 = (v5 >> 6) & 1;
    int v18 = (v6 >> 6) & 1;
    int v19 = (v7 >> 6) & 1;
    int v20 = (v8 >> 6) & 1;
    int v21 = (v7 >> 5) & 1;
    int v22 = (v8 >> 5) & 1;
    int v23 = 1 << ((v5 >> 6) & 2 | (v4 >> 7) | (v6 >> 5) & 4);
    int v24 = v17 << 9;
    if ((v23 & 0xA4) == 0) {
      int v24 = 0;
    }
    int v25 = v21 << 9;
    if ((v23 & 0x50) == 0) {
      int v25 = 0;
    }
    int v26 = v22 << 10;
    if ((v23 & 0x50) == 0) {
      int v26 = 0;
    }
    int v27 = v18 << 10;
    if ((v23 & 0xA0) == 0) {
      int v27 = 0;
    }
    int v28 = v19 << 11;
    if (v14 < 6) {
      int v28 = 0;
    }
    unsigned int v29 = v28 & 0xFFFFFEFF | (((v4 >> 6) & 1) << 8) | v24 | (v23 << 6) & (v19 << 9) | v25 | v26 | v27 | v3;
    int v30 = (16 * v23) & (v18 << 6);
    int v31 = v18 << 6;
    unsigned int v32 = v30 & 0xFFFFFFC0 | v4 & 0x3F;
    int v33 = v20 << 6;
    if ((v23 & 0xE8) != 0) {
      int v34 = v20 << 6;
    }
    else {
      int v34 = 0;
    }
    int v35 = v32 | v34 | (4 * v23) & (v19 << 7);
    int v36 = v17 << 6;
    if ((v23 & 0x5B) == 0) {
      int v36 = 0;
    }
    unsigned int v37 = v36 & 0xFFFFFFC0 | v5 & 0x3F;
    if ((v23 & 0x5B) != 0) {
      int v38 = v31;
    }
    else {
      int v38 = 0;
    }
    unsigned int v39 = v38 & 0xFFFFFFC0 | v6 & 0x3F;
    int v40 = v20 << 7;
    if ((v23 & 0x12) != 0) {
      int v41 = v19 << 7;
    }
    else {
      int v41 = 0;
    }
    int v42 = v37 | v41;
    if ((v23 & 0x12) == 0) {
      int v40 = 0;
    }
    int v43 = v39 | v40;
    int v44 = 32 * v21;
    if ((v23 & 0xAF) == 0) {
      int v44 = 0;
    }
    int v45 = v44 | v15;
    if ((v23 & 0xAF) != 0) {
      int v46 = 32 * v22;
    }
    else {
      int v46 = 0;
    }
    int v47 = v46 | v16;
    int v48 = v19 << 6;
    if ((v23 & 5) == 0) {
      int v48 = 0;
    }
    int v49 = v45 | v48;
    if ((v23 & 5) == 0) {
      int v33 = 0;
    }
    int v50 = -hdr_rgb_unpack(unsigned char const*,vint4 &,vint4 &)::dbits_tab[v14];
    int v51 = v49 << v50 >> v50;
    int v52 = (v47 | v33) << v50 >> v50;
    char v53 = (v14 >> 1) ^ 3;
    unsigned int v54 = v29 << v53;
    int v55 = (v29 - v42) << v53;
    unsigned int v56 = v29 - v43;
    int v57 = v56 << v53;
    int v58 = (v29 - v42 - (v35 + v51)) << v53;
    int v59 = (v56 - (v35 + v52)) << v53;
    int v60 = ((v29 - v35) << v53) & ~((int)((v29 - v35) << v53) >> 31);
    if (v60 >= 4095) {
      int v60 = 4095;
    }
    int v61 = v58 & ~(v58 >> 31);
    if (v61 >= 4095) {
      int v61 = 4095;
    }
    int v62 = v59 & ~(v59 >> 31);
    if (v62 >= 4095) {
      int v62 = 4095;
    }
    if (v54 >= 0xFFF) {
      unsigned int v54 = 4095;
    }
    int v63 = v55 & ~(v55 >> 31);
    if (v63 >= 4095) {
      int v63 = 4095;
    }
    if ((v57 & ~(v57 >> 31)) >= 4095) {
      int v64 = 4095;
    }
    else {
      int v64 = v57 & ~(v57 >> 31);
    }
    if (v9 == 1) {
      unsigned int v65 = v63;
    }
    else {
      unsigned int v65 = v54;
    }
    if (v9 == 1) {
      int v66 = v54;
    }
    else {
      int v66 = v63;
    }
    if (v9 == 1) {
      int v67 = v61;
    }
    else {
      int v67 = v60;
    }
    if (v9 == 1) {
      int v68 = v60;
    }
    else {
      int v68 = v61;
    }
    BOOL v69 = v9 == 2;
    if (v9 == 2) {
      int v70 = v64;
    }
    else {
      int v70 = v65;
    }
    if (v69) {
      int v64 = v54;
    }
    else {
      int v63 = v66;
    }
    if (v69) {
      int v71 = v62;
    }
    else {
      int v71 = v67;
    }
    if (v69) {
      int v62 = v60;
    }
    else {
      int v61 = v68;
    }
    HIDWORD(v72) = 30720;
    LODWORD(v72) = 16 * v71;
    DWORD1(v72) = 16 * v61;
    int v11 = 16 * v70;
    DWORD2(v72) = 16 * v62;
    *a2 = v72;
    int v12 = 16 * v63;
    unsigned int v13 = 16 * v64;
  }
  result.n128_u64[0] = __PAIR64__(v12, v11);
  result.n128_u64[1] = v13 | 0x780000000000;
  *a3 = result;
  return result;
}

uint64_t compute_ideal_endpoint_formats(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unsigned int v13 = (unsigned char *)MEMORY[0x270FA5388](a1);
  unsigned int v379 = v14;
  unsigned int v377 = v16;
  uint64_t v378 = v15;
  unsigned int v376 = v17;
  uint64_t v375 = v18;
  uint64_t v391 = v19;
  int v21 = (float32x4_t *)v20;
  v421[44] = *MEMORY[0x263EF8340];
  int v22 = v13 + 224;
  uint64_t v23 = *(unsigned __int16 *)v13;
  double v24 = *(double *)(v20 + 3554);
  LODWORD(v25) = LOBYTE(v24);
  HIDWORD(v25) = BYTE1(v24);
  unsigned int v386 = LOBYTE(v24);
  unsigned int v384 = *(unsigned __int8 *)(v20 + 3770);
  v390 = v13;
  compute_avgs_and_dirs_3_comp_rgb(v13, v20, (uint64_t)v416, v24, v25, v26, v27, v28);
  uint64_t v29 = v23;
  uint64_t v30 = 0;
  int v31 = v21 + 162;
  unsigned int v32 = v21 + 54;
  int v33 = v21 + 108;
  long long v34 = xmmword_23441B5F0;
  float32x4_t v35 = (float32x4_t)vdupq_n_s32(0x3F13CD3Au);
  v36.i64[0] = 0x400000004;
  v36.i64[1] = 0x400000004;
  float32x4_t v37 = 0uLL;
  int v38 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  v39.i64[0] = 0x100000001;
  v39.i64[1] = 0x100000001;
  uint64_t v389 = v29;
  do
  {
    int v40 = (float32x4_t *)&v416[2 * v30];
    float32x4_t v41 = v40[1];
    int8x16_t v42 = (int8x16_t)vmulq_f32(v41, v41);
    *(float32x2_t *)v42.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), *(float32x2_t *)v42.i8);
    int32x2_t v43 = (int32x2_t)vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8);
    float32x4_t v44 = (float32x4_t)v34;
    if (*(float *)v43.i32 != 0.0) {
      float32x4_t v44 = vdivq_f32(v41, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v43, 0)));
    }
    float32x4_t v45 = *v40;
    int8x16_t v46 = (int8x16_t)vmulq_f32(v45, v45);
    *(float32x2_t *)v46.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), *(float32x2_t *)v46.i8);
    int32x2_t v47 = (int32x2_t)vpadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v46.i8);
    float32x4_t v48 = (float32x4_t)v34;
    if (*(float *)v47.i32 != 0.0) {
      float32x4_t v48 = vdivq_f32(v45, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v47, 0)));
    }
    unint64_t v49 = 0;
    float32x4_t v50 = vmulq_f32(v45, v44);
    float32x4_t v51 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))), 0);
    v51.i32[3] = 0;
    int32x4_t v52 = (int32x4_t)vsubq_f32(v45, vmulq_f32(v44, v51));
    float32x4_t v53 = vmulq_f32(v45, v35);
    float32x4_t v54 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))), 0);
    v54.i32[3] = 0;
    int32x4_t v55 = (int32x4_t)vaddq_f32(v45, vmulq_f32(v54, (float32x4_t)xmmword_23441F150));
    float32x4_t v56 = v21[221];
    unint64_t v57 = v390[v30 + 4];
    v45.i32[0] = 1190133760;
    if (!v21[235].i8[10]) {
      v45.f32[0] = 65535.0;
    }
    float32x4_t v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0);
    float32x4_t v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 0);
    float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 1);
    float32x4_t v61 = (float32x4_t)vdupq_laneq_s32(v52, 2);
    float32x4_t v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 0);
    float32x4_t v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1);
    float32x4_t v64 = (float32x4_t)vdupq_laneq_s32(v55, 2);
    int32x4_t v65 = vdupq_n_s32(v57);
    float32x4_t v66 = 0uLL;
    int32x4_t v67 = (int32x4_t)xmmword_234378DD0;
    int8x16_t v68 = 0uLL;
    int8x16_t v69 = 0uLL;
    float32x4_t v70 = 0uLL;
    float32x4_t v71 = 0uLL;
    do
    {
      float32x4_t v395 = (float32x4_t)v68;
      float32x4_t v399 = (float32x4_t)v69;
      v69.i32[0] = *(_DWORD *)&v22[v49];
      uint16x4_t v72 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)v69.i8).u64[0];
      int8x16_t v73 = (int8x16_t)vcgtq_s32(v65, v67);
      float32x4_t v74 = (float32x4_t)vmovl_u16(v72);
      v75.i64[0] = v74.u32[2];
      v75.i64[1] = v74.u32[3];
      float32x4_t v76 = v75;
      v75.i64[1] = v74.u32[1];
      uint64_t v77 = v76.i64[1];
      uint64_t v78 = v74.u32[0];
      uint64_t v79 = v76.i64[0];
      v80.i32[0] = v31->i32[v74.u32[0]];
      v80.i32[1] = v31->i32[v74.u32[1]];
      v80.i32[2] = v31->i32[v76.i64[0]];
      v74.i32[0] = v21->i32[v74.u32[0]];
      v74.i32[1] = v21->i32[v74.u32[1]];
      v74.i32[2] = v21->i32[v76.i64[0]];
      v76.i32[0] = v32->i32[v78];
      v80.i32[3] = v31->i32[v76.i64[1]];
      v76.i32[1] = v32->i32[v75.i64[1]];
      int v81 = &v32->i32[v76.i64[1]];
      v74.i32[3] = v21->i32[v76.i64[1]];
      v76.i32[2] = v32->i32[v79];
      v76.i32[3] = *v81;
      float32x4_t v82 = vsubq_f32(v80, v58);
      v80.i32[0] = v33->i32[v78];
      v80.i32[1] = v33->i32[v75.i64[1]];
      v80.i32[2] = v33->i32[v79];
      v80.i32[3] = v33->i32[v77];
      float32x4_t v83 = vaddq_f32(vaddq_f32(vmulq_n_f32(v74, v44.f32[0]), vmulq_lane_f32(v76, *(float32x2_t *)v44.f32, 1)), vmulq_laneq_f32(v80, v44, 2));
      int8x16_t v393 = (int8x16_t)vaddq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v82, v82), v73));
      float32x4_t v84 = vsubq_f32(vaddq_f32(v59, vmulq_n_f32(v83, v44.f32[0])), v74);
      float32x4_t v85 = vsubq_f32(vaddq_f32(v60, vmulq_lane_f32(v83, *(float32x2_t *)v44.f32, 1)), v76);
      float32x4_t v86 = vsubq_f32(vaddq_f32(v61, vmulq_laneq_f32(v83, v44, 2)), v80);
      float32x4_t v87 = vaddq_f32(vaddq_f32(vmulq_n_f32(v74, v48.f32[0]), vmulq_lane_f32(v76, *(float32x2_t *)v48.f32, 1)), vmulq_laneq_f32(v80, v48, 2));
      float32x4_t v88 = vsubq_f32(vmulq_n_f32(v87, v48.f32[0]), v74);
      float32x4_t v89 = vsubq_f32(vmulq_lane_f32(v87, *(float32x2_t *)v48.f32, 1), v76);
      float32x4_t v90 = vsubq_f32(vmulq_laneq_f32(v87, v48, 2), v80);
      float32x4_t v91 = vaddq_f32(vmulq_n_f32(vmulq_f32(v84, v84), v56.f32[0]), vmulq_lane_f32(vmulq_f32(v85, v85), *(float32x2_t *)v56.f32, 1));
      float32x4_t v92 = vmulq_f32(vaddq_f32(vaddq_f32(vmulq_f32(v74, v35), vmulq_f32(v76, v35)), vmulq_f32(v80, v35)), v35);
      int8x16_t v93 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v90, v90), v56, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v88, v88), v56.f32[0]), vmulq_lane_f32(vmulq_f32(v89, v89), *(float32x2_t *)v56.f32, 1)));
      float32x4_t v94 = vsubq_f32(vaddq_f32(v62, v92), v74);
      float32x4_t v95 = vsubq_f32(vaddq_f32(v63, v92), v76);
      int8x16_t v96 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v86, v86), v56, 2), v91);
      int32x4_t v67 = vaddq_s32(v67, v36);
      float32x4_t v70 = vaddq_f32(v70, (float32x4_t)vandq_s8(v93, v73));
      float32x4_t v97 = vsubq_f32(vaddq_f32(v64, v92), v80);
      float32x4_t v98 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v97, v97), v56, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v94, v94), v56.f32[0]), vmulq_lane_f32(vmulq_f32(v95, v95), *(float32x2_t *)v56.f32, 1))), v73);
      float32x4_t v99 = vsubq_f32(v92, v74);
      float32x4_t v100 = vsubq_f32(v92, v76);
      float32x4_t v101 = vsubq_f32(v92, v80);
      float32x4_t v66 = (float32x4_t)v393;
      float32x4_t v396 = vaddq_f32(v395, (float32x4_t)vandq_s8(v96, v73));
      float32x4_t v71 = vaddq_f32(v71, v98);
      int8x16_t v68 = (int8x16_t)v396;
      float32x4_t v400 = vaddq_f32(v399, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v101, v101), v56, 2), vaddq_f32(vmulq_n_f32(vmulq_f32(v99, v99), v56.f32[0]), vmulq_lane_f32(vmulq_f32(v100, v100), *(float32x2_t *)v56.f32, 1))), v73));
      int8x16_t v69 = (int8x16_t)v400;
      v49 += 4;
    }
    while (v49 < v57);
    int32x4_t v102 = (float32x4_t *)(v391 + 16 * v30);
    float32x4_t v103 = v102[1];
    float32x4_t v104 = v102[5];
    {
      float32x4_t v380 = v35;
      long long v382 = v34;
      float32x4_t v374 = v103;
      float32x4_t v373 = v104;
      float32x4_t v104 = v373;
      float32x4_t v103 = v374;
      int8x16_t v68 = (int8x16_t)v396;
      int8x16_t v69 = (int8x16_t)v400;
      float32x4_t v35 = v380;
      v39.i64[0] = 0x100000001;
      v39.i64[1] = 0x100000001;
      int v38 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      float32x4_t v37 = 0uLL;
      v36.i64[0] = 0x400000004;
      v36.i64[1] = 0x400000004;
      long long v34 = v382;
      uint64_t v29 = v389;
      if (v118)
      {
        mask(vmask4)::shift = xmmword_234378DD0;
        float32x4_t v104 = v373;
        float32x4_t v103 = v374;
        int8x16_t v68 = (int8x16_t)v396;
        int8x16_t v69 = (int8x16_t)v400;
        float32x4_t v35 = v380;
        v39.i64[0] = 0x100000001;
        v39.i64[1] = 0x100000001;
        int v38 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
        float32x4_t v37 = 0uLL;
        v36.i64[0] = 0x400000004;
        v36.i64[1] = 0x400000004;
        long long v34 = v382;
        uint64_t v29 = v389;
      }
    }
    float32x2_t v105 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v393, v393, 8uLL), *(float32x2_t *)v393.i8);
    float32x2_t v106 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), *(float32x2_t *)v68.i8);
    float32x2_t v107 = vpadd_f32(v106, v106);
    float32x2_t v108 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), *(float32x2_t *)v70.f32);
    int32x4_t v109 = (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL);
    *(float32x2_t *)v109.i8 = vadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v71.f32);
    float32x2_t v110 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), *(float32x2_t *)v69.i8);
    float32x4_t v111 = vsubq_f32(v104, v103);
    BOOL v112 = (~vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x45F5C199u), vmaxq_f32(v111, vsubq_f32(v37, v111))), v39), v38[85])) & 7) == 0;
    *(float32x2_t *)v113.f32 = vsub_f32((float32x2_t)vzip1_s32((int32x2_t)vpadd_f32(v108, v108), (int32x2_t)vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8)), (float32x2_t)vdup_lane_s32((int32x2_t)v107, 0));
    uint32x4_t v114 = (float32x4_t *)((char *)&v421[34] + 20 * v30);
    v113.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(vpadd_f32(v105, v105).f32[0], v56, 3)), vsub_f32(vpadd_f32(v110, v110), v107).u32[0]);
    *uint32x4_t v114 = vmulq_f32(v113, (float32x4_t)xmmword_23441F160);
    v114[1].i8[0] = v112;
    float v115 = 30720.0;
    if (!v21[235].i8[10]) {
      float v115 = 65535.0;
    }
    BOOL v116 = v21[218].f32[3] != v115 || v21[222].i8[0] == 0;
    char v117 = v116;
    if (v21[220].f32[3] != v115) {
      char v117 = 1;
    }
    v114[1].i8[1] = v117;
    ++v30;
    v22 += 216;
  }
  while (v30 != v29);
  uint64_t v119 = 0;
  int8x8_t v120 = (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v384, v386), (int8x8_t)0xFF000000FFLL));
  float32x4_t v121 = v21[221];
  float32x4_t v122 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 2);
  *(int8x8_t *)v109.i8 = vbsl_s8(v120, (int8x8_t)vdup_n_s32(0x477FFF00u), (int8x8_t)vdup_n_s32(0x47700000u));
  int32x4_t v123 = vzip1q_s32(v109, v109);
  v123.i32[2] = v109.i32[0];
  float32x4_t v387 = (float32x4_t)v123;
  float32x4_t v124 = vaddq_f32(v121, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 1));
  if (v120.i8[4]) {
    char v125 = 14;
  }
  else {
    char v125 = 15;
  }
  __int8 v385 = v120.i8[0];
  v126.i64[0] = 0xB0B0B0B0B0B0B0BLL;
  v126.i8[8] = v125;
  v126.i8[9] = v125;
  v126.i8[10] = v125;
  v126.i8[11] = v125;
  v126.i8[12] = v125;
  v126.i8[13] = v125;
  int32x4_t v127 = (float *)&v418;
  int8x16_t v128 = v412;
  int8x16_t v129 = (float *)&v417;
  int v130 = v411;
  v126.i8[14] = v125;
  v126.i8[15] = v125;
  float32x4_t v388 = v121;
  float v131 = v121.f32[3];
  float32x4_t v132 = 0uLL;
  float v133 = 0.5;
  int8x16_t v383 = v126;
  LODWORD(v381) = vaddq_f32(v122, v124).u32[0];
  do
  {
    v394 = v130;
    v397 = v129;
    v401 = v127;
    int v134 = &v416[21 * v119];
    int v135 = (float32x4_t *)(v391 + 16 * v119);
    float32x4_t v136 = v135[1];
    float32x4_t v137 = v135[5];
    float32x4_t v138 = vmaxnmq_f32(vsubq_f32(v136, v387), v132);
    float32x4_t v139 = vmaxnmq_f32(vsubq_f32(v137, v387), v132);
    float32x4_t v140 = vminnmq_f32(v136, v132);
    float32x4_t v141 = vminnmq_f32(v137, v132);
    float32x4_t v142 = vmulq_f32(v141, v141);
    float32x4_t v143 = vmulq_f32(v388, vaddq_f32(vmulq_f32(v139, v139), vaddq_f32(vmulq_f32(v138, v138), vaddq_f32(vmulq_f32(v140, v140), v142))));
    float32x4_t v144 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2);
    v139.f32[0] = v133 * vaddq_f32(v144, vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1))).f32[0];
    v144.i8[0] = v390[v119 + 4];
    float v145 = (float)v144.u32[0];
    float v146 = v139.f32[0] * (float)v144.u32[0];
    float v147 = vmuls_lane_f32(v133, v143, 3) * (float)v144.u32[0];
    if (v385)
    {
      memset_pattern16(v134, &xmmword_23441B5D0, 0x40uLL);
      uint64_t v149 = 0;
      *(int32x4_t *)&v410[84 * v119 + 884] = vdupq_n_s32(0xC080600u);
      id v150 = (float *)&v421[34] + 5 * v119;
      float v151 = 0.625;
      if (*((unsigned char *)v150 + 17))
      {
        float v152 = v133;
      }
      else
      {
        float v151 = 1.0;
        float v152 = 1.0;
      }
      if (*((unsigned char *)v150 + 16)) {
        float v153 = v133;
      }
      else {
        float v153 = 1.0;
      }
      float v154 = 0.25;
      if (!*((unsigned char *)v150 + 16)) {
        float v154 = 1.0;
      }
      float v155 = *((float *)&v421[34] + 5 * v119);
      float v157 = v150[2];
      float v156 = v150[3];
      int v158 = v394;
      char v159 = v397;
      uint64_t v160 = v397;
      char v161 = v401;
      do
      {
        if ((unint64_t)(v149 + 4) > 0x12) {
          float v153 = 1.0;
        }
        float v162 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::baseline_quant_error[v149];
        if ((unint64_t)(v149 + 4) > 0x12) {
          float v154 = 1.0;
        }
        float v163 = (float)(v381 * v145) * v162;
        float v164 = (float)((float)(v131 * v145) + (float)(v381 * v145)) * v162;
        *int v158 = 12;
        float v165 = v147 + (float)(v146 + (float)((float)(v151 * v164) * v153));
        float v166 = v147 + (float)(v146 + (float)(v155 + v164));
        if (v166 < (float)(v156 + (float)(v146 + (float)((float)(v152 * v163) * v154))))
        {
          char v167 = 10;
        }
        else
        {
          float v166 = v156 + (float)(v146 + (float)((float)(v152 * v163) * v154));
          char v167 = 8;
        }
        *(v158 - 1) = v167;
        float v168 = v156 + (float)(v146 + v163);
        float v169 = v157 + (float)(v147 + (float)(v146 + v164));
        *(v160 - 1) = v166;
        *uint64_t v160 = v165;
        if ((float)(v155 + v168) >= v169)
        {
          char v170 = 4;
        }
        else
        {
          float v169 = v155 + v168;
          char v170 = 6;
        }
        *(v158 - 2) = v170;
        *(v160 - 3) = v157 + v168;
        *(v160 - 2) = v169;
        *(v158 - 3) = 0;
        ++v149;
        v160 += 4;
        v158 += 4;
      }
      while (v149 != 17);
    }
    else
    {
      float32x4_t v171 = v135[5];
      v171.i32[3] = v171.i32[0];
      float v172 = fmaxf(vminvq_f32(v171), 0.0);
      LODWORD(v173) = HIDWORD(v135[5].i64[0]);
      BOOL v174 = v137.f32[0] > v137.f32[1];
      BOOL v175 = v137.f32[0] > v137.f32[2];
      if (v137.f32[1] > v137.f32[2]) {
        uint64_t v176 = 1;
      }
      else {
        uint64_t v176 = 2;
      }
      if (v173 <= v137.f32[2]) {
        float v173 = v137.f32[2];
      }
      BOOL v177 = !v174 || !v175;
      if (v174 && v175) {
        uint64_t v178 = 0;
      }
      else {
        uint64_t v178 = v176;
      }
      v179 = (float *)((unint64_t)v403 | (4 * v178));
      if (!v177) {
        float v173 = v137.f32[0];
      }
      v403[0] = v136;
      v142.f32[0] = v173 - *v179;
      int v180 = (int)(float)(v173 - v172);
      int v181 = (int)v142.f32[0];
      BOOL v182 = v180 < 0x2000;
      BOOL v183 = v180 < 2048;
      BOOL v184 = v180 < 1024;
      BOOL v185 = (int)v142.f32[0] < 2048 && v180 < 0x2000;
      BOOL v186 = v181 < 2048 && v180 < 2048;
      BOOL v187 = v181 < 2048 && v180 < 1024;
      BOOL v188 = v181 < 0x2000 && v180 < 0x2000;
      BOOL v189 = v181 < 0x2000 && v180 < 2048;
      BOOL v190 = v180 < 4096;
      if (v181 >= 0x2000) {
        BOOL v190 = 0;
      }
      BOOL v191 = v180 < 0x8000;
      BOOL v192 = v181 < 0x2000 && v180 < 0x8000;
      BOOL v193 = v180 < 0x4000;
      float32x4_t v194 = vsubq_f32(v137, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 0));
      v194.i32[3] = 0;
      float32x4_t v195 = v136;
      v195.i32[3] = 0;
      float32x4_t v196 = vsubq_f32(v194, v195);
      int v197 = (int)vmaxvq_f32(vmaxq_f32(v196, vsubq_f32(v132, v196)));
      if (v181 >= 0x2000) {
        BOOL v193 = 0;
      }
      BOOL v198 = v181 < 0x4000;
      if (v191 && v198) {
        uint64_t v199 = 4;
      }
      else {
        uint64_t v199 = 5;
      }
      if (v182 && v198) {
        uint64_t v200 = 3;
      }
      else {
        uint64_t v200 = v199;
      }
      BOOL v201 = v181 < 1024;
      if (v183 && v198) {
        uint64_t v200 = 2;
      }
      BOOL v202 = v181 < 4096;
      if (v183 && v201) {
        uint64_t v200 = 1;
      }
      if (v193 && v197 < 0x2000) {
        uint64_t v203 = 0;
      }
      else {
        uint64_t v203 = 8;
      }
      BOOL v204 = v197 < 4096;
      if (v192 && v204) {
        uint64_t v203 = 1;
      }
      if (v190 && v204) {
        uint64_t v203 = 2;
      }
      if (v188 && v197 < 2048) {
        uint64_t v203 = 3;
      }
      BOOL v205 = v197 < 512;
      if (v185 && v205) {
        uint64_t v206 = 4;
      }
      else {
        uint64_t v206 = v203;
      }
      if (v189 && v197 < 1024) {
        uint64_t v206 = 5;
      }
      if (v186 && v197 < 256) {
        uint64_t v207 = 6;
      }
      else {
        uint64_t v207 = v206;
      }
      BOOL v116 = !v187 || !v205;
      uint64_t v208 = 7;
      if (v116) {
        uint64_t v208 = v207;
      }
      if (v184 && v202) {
        uint64_t v209 = 0;
      }
      else {
        uint64_t v209 = v200;
      }
      float v210 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::rgbo_error_scales[v209];
      float v211 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::rgb_error_scales[v208];
      float v212 = (float)((float)(v137.f32[2] + vaddv_f32(*(float32x2_t *)v137.f32)) * 0.33333)
           - (float)(0.33333
                   * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).f32[0]);
      memset_pattern16(v134, &xmmword_23441B5D0, 0x80uLL);
      uint64_t v213 = 0;
      uint64_t v214 = 0x202020202020202;
      uint64_t v215 = 0x707070707070707;
      int8x16_t v216 = v383;
      unint64_t v217 = vextq_s8(v216, v216, 8uLL).u64[0];
      float32x4_t v218 = &v410[84 * v119 + 884];
      vst4_s8(v218, *(int8x8x4_t *)&v214);
      float v219 = flt_23441F178[v212 < 3968.0];
      BOOL v220 = v212 < 960.0;
      float v133 = 0.5;
      if (v220) {
        float v219 = 0.002;
      }
      v221 = (float *)&v421[34] + 5 * v119;
      float v223 = v221[2];
      float v222 = v221[3];
      float v224 = v221[1];
      char v161 = v401;
      long long v225 = v401;
      char v159 = v397;
      do
      {
        float v226 = compute_color_error_for_every_integer_count_and_quant_level(BOOL,BOOL,int,partition_info const&,encoding_choice_errors const&,endpoints const&,vfloat4,float (*)[4],unsigned char (*)[4])::baseline_quant_error[v213 + 4]
             * v145;
        float v227 = (float)(v381 * v226) + (float)(v381 * v226);
        uint64_t v228 = &v128[v213 * 4];
        *uint64_t v228 = v125;
        *(v228 - 1) = 11;
        *(v225 - 1) = v222 + (float)(v146 + (float)(v227 * (float)(v211 * 0.01)));
        *long long v225 = v147 + (float)(v146 + (float)(v227 + (float)((float)(v131 * v226) + (float)(v131 * v226))));
        *(v225 - 3) = v223 + (float)(v222 + (float)(v146 + (float)(v227 * v219)));
        *(v225 - 2) = v224 + (float)(v222 + (float)(v146 + (float)(v227 * (float)(v210 * 0.0015))));
        *(_WORD *)(v228 - 3) = 1794;
        ++v213;
        v225 += 4;
      }
      while (v213 != 13);
    }
    ++v119;
    int32x4_t v127 = v161 + 84;
    v128 += 84;
    int8x16_t v129 = v159 + 84;
    int v130 = v394 + 84;
    uint64_t v229 = v389;
    float32x4_t v132 = 0uLL;
  }
  while (v119 != v389);
  uint64_t v230 = a13;
  uint64_t v231 = a13 + 157120;
  uint64_t v232 = a13 + 165312;
  uint64_t v233 = a13 + 167360;
  uint64_t v234 = v377 & 0xFFFFFFFC;
  int32x4_t v235 = vdupq_n_s32(0x7149F2CAu);
  *(int32x4_t *)(v231 + 4 * v234) = v235;
  *(_DWORD *)(v232 + v234) = 0;
  *(_DWORD *)(v233 + v234) = 0;
  unsigned int v236 = v379;
  uint64_t v237 = (v379 - 1) & 0xFFFFFFFC;
  *(int32x4_t *)(v231 + 4 * v237) = v235;
  *(_DWORD *)(v232 + v237) = 0;
  *(_DWORD *)(v233 + v237) = 0;
  uint64_t v398 = a13 + 157120;
  if (v389 == 3)
  {
    unsigned int v392 = v377 & 0xFFFFFFFC;
    for (uint64_t i = 0; i != 210; i += 10)
      memset_pattern16(&v407[i], &xmmword_23441B5D0, 0x28uLL);
    uint64_t v258 = &v414;
    v259 = (float *)&v420;
    v260 = &v409;
    v261 = v405;
    uint64_t v262 = 4;
    do
    {
      uint64_t v263 = 0;
      v264 = v261;
      v265 = v260;
      do
      {
        uint64_t v266 = 0;
        v267 = v264;
        v268 = v265;
        do
        {
          if ((int)v263 >= (int)v266) {
            int v269 = v266;
          }
          else {
            int v269 = v263;
          }
          if ((int)v263 <= (int)v266) {
            int v270 = v266;
          }
          else {
            int v270 = v263;
          }
          if (v270 - v269 <= 1)
          {
            uint64_t v271 = 0;
            v272 = v267;
            do
            {
              if ((int)v271 >= v269) {
                int v273 = v269;
              }
              else {
                int v273 = v271;
              }
              if ((int)v271 <= v270) {
                int v274 = v270;
              }
              else {
                int v274 = v271;
              }
              if (v274 - v273 <= 1)
              {
                float v275 = fminf((float)(*((float *)&v416[v262] + v263) + *((float *)&v416[v262 + 21] + v266)) + v259[v271], 1.0e10);
                if (v275 <= *(float *)&v268[v271])
                {
                  *(float *)&v268[v271] = v275;
                  *(v272 - 2) = v410[4 * v262 + 884 + v263];
                  *(v272 - 1) = v410[4 * v262 + 968 + v266];
                  unsigned char *v272 = *((unsigned char *)v258 + v271);
                }
              }
              ++v271;
              v272 += 3;
            }
            while (v271 != 4);
          }
          ++v266;
          ++v268;
          v267 += 3;
        }
        while (v266 != 4);
        ++v263;
        ++v265;
        v264 += 3;
      }
      while (v263 != 4);
      ++v262;
      uint64_t v258 = (uint64_t *)((char *)v258 + 4);
      v259 += 4;
      v260 += 10;
      v261 += 30;
    }
    while (v262 != 21);
    if (v379)
    {
      uint64_t v276 = 0;
      unsigned int v244 = -1;
      float v277 = 1.0e30;
      unsigned int v238 = v376;
      uint64_t v240 = a11;
      uint64_t v239 = a12;
      long long v242 = a9;
      uint64_t v241 = a10;
      uint64_t v229 = v389;
      uint64_t v231 = a13 + 157120;
      do
      {
        if (*(float *)(v375 + 4 * v276) >= 1.0e30)
        {
          *(_DWORD *)(v231 + 4 * v27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1900671690;
        }
        else
        {
          uint64_t v278 = 0;
          int v279 = 0;
          uint64_t v280 = *(char *)(v378 + v276);
          uint64_t v281 = a13 + 4 * v276 + 169408;
          v282 = &quant_mode_table[v280 + 384];
          float v283 = 1.0e30;
          do
          {
            int v285 = *v282;
            v282 += 128;
            unsigned __int8 v284 = v285;
            if (v285 < 4) {
              break;
            }
            v286 = &v407[10 * v284];
            if (*(float *)&v286[v278] < v283)
            {
              float v283 = *(float *)&v286[v278];
              int v279 = v278 + 3;
            }
            ++v278;
          }
          while (v278 != 7);
          v287 = &quant_mode_table[128 * (uint64_t)v279 + v280];
          int v288 = *v287;
          LOBYTE(v287) = v287[5];
          *(unsigned char *)(v232 + v27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v288;
          *(unsigned char *)(v233 + v27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = (_BYTE)v287;
          if (v288 <= 3)
          {
            *(unsigned char *)(a13 + 4 * v276 + 169410) = 0;
            *(_WORD *)(a13 + 4 * v276 + 169408) = 0;
          }
          else
          {
            v289 = (char *)v403 + 30 * v288 + 3 * v279 + 15;
            *(_WORD *)uint64_t v281 = *(_WORD *)v289;
            *(unsigned char *)(v281 + 2) = v289[2];
          }
          uint64_t v231 = a13 + 157120;
          float v290 = v283 + *(float *)(v375 + 4 * v276);
          *(float *)(v398 + 4 * v27re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v290;
          if (v290 < v277)
          {
            unsigned int v244 = v276;
            float v277 = v290;
          }
        }
        ++v276;
      }
      while (v276 != v379);
      goto LABEL_268;
    }
    unsigned int v244 = -1;
    unsigned int v238 = v376;
    uint64_t v240 = a11;
    uint64_t v239 = a12;
    long long v242 = a9;
    uint64_t v241 = a10;
    uint64_t v229 = v389;
    goto LABEL_267;
  }
  if (v389 == 2)
  {
    for (uint64_t j = 0; j != 147; j += 7)
      memset_pattern16(&v407[j], &xmmword_23441B5D0, 0x1CuLL);
    v292 = &v413;
    v293 = (float *)&v419;
    v294 = v404;
    v295 = &v408;
    uint64_t v296 = 4;
    unsigned int v238 = v376;
    uint64_t v240 = a11;
    uint64_t v239 = a12;
    long long v242 = a9;
    uint64_t v241 = a10;
    do
    {
      uint64_t v297 = 0;
      v298 = v295;
      v299 = v294;
      do
      {
        uint64_t v300 = 0;
        int v301 = v297;
        v302 = v299;
        do
        {
          if (v301 >= 0) {
            unsigned int v303 = v301;
          }
          else {
            unsigned int v303 = -v301;
          }
          if (v303 <= 1)
          {
            float v304 = fminf(*((float *)&v416[v296] + v297) + v293[v300], 1.0e10);
            if (v304 <= *(float *)&v298[v300])
            {
              *(float *)&v298[v300] = v304;
              *(v302 - 1) = v410[4 * v296 + 884 + v297];
              unsigned char *v302 = *((unsigned char *)v292 + v300);
            }
          }
          ++v300;
          v302 += 2;
          --v301;
        }
        while (v300 != 4);
        ++v297;
        v299 += 2;
        ++v298;
      }
      while (v297 != 4);
      ++v296;
      ++v292;
      v293 += 4;
      v294 += 14;
      v295 += 7;
    }
    while (v296 != 21);
    uint64_t v231 = a13 + 157120;
    if (v379)
    {
      uint64_t v305 = 0;
      unsigned int v244 = -1;
      float v306 = 1.0e30;
      uint64_t v229 = v389;
      do
      {
        if (*(float *)(v375 + 4 * v305) >= 1.0e30)
        {
          *(_DWORD *)(v231 + 4 * v305) = 1900671690;
        }
        else
        {
          uint64_t v307 = 0;
          int v308 = 0;
          uint64_t v309 = *(char *)(v378 + v305);
          v310 = (_WORD *)(a13 + 4 * v305 + 169408);
          v311 = &quant_mode_table[v309 + 256];
          float v312 = 1.0e30;
          do
          {
            int v314 = *v311;
            v311 += 128;
            unsigned __int8 v313 = v314;
            if (v314 < 4) {
              break;
            }
            v315 = &v407[7 * v313];
            if (*(float *)&v315[v307] < v312)
            {
              float v312 = *(float *)&v315[v307];
              int v308 = v307 + 2;
            }
            ++v307;
          }
          while (v307 != 7);
          v316 = &quant_mode_table[128 * (uint64_t)v308 + v309];
          int v317 = *v316;
          LOBYTE(v31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v316[2];
          *(unsigned char *)(v232 + v305) = v317;
          *(unsigned char *)(v233 + v305) = (_BYTE)v316;
          if (v317 <= 3) {
            _WORD *v310 = 0;
          }
          else {
            _WORD *v310 = *((_WORD *)&v403[1] + 7 * v317 + v308 + 2);
          }
          uint64_t v231 = a13 + 157120;
          float v318 = v312 + *(float *)(v375 + 4 * v305);
          *(float *)(v398 + 4 * v305) = v318;
          if (v318 < v306)
          {
            unsigned int v244 = v305;
            float v306 = v318;
          }
        }
        ++v305;
      }
      while (v305 != v379);
    }
    else
    {
      unsigned int v244 = -1;
      uint64_t v229 = v389;
    }
    goto LABEL_269;
  }
  if (v389 != 1)
  {
    unsigned int v392 = v377 & 0xFFFFFFFC;
    for (uint64_t k = 0; k != 273; k += 13)
      memset_pattern16(&v407[k], &xmmword_23441B5D0, 0x34uLL);
    v320 = &v415;
    v321 = (float *)v421;
    v322 = v410;
    v323 = v406;
    uint64_t v324 = 4;
    do
    {
      uint64_t v325 = 0;
      v326 = v323;
      v402 = v322;
      do
      {
        uint64_t v327 = 0;
        v328 = v326;
        v329 = v322;
        do
        {
          if ((int)v325 >= (int)v327) {
            int v330 = v327;
          }
          else {
            int v330 = v325;
          }
          if ((int)v325 <= (int)v327) {
            int v331 = v327;
          }
          else {
            int v331 = v325;
          }
          if (v331 - v330 <= 1)
          {
            uint64_t v332 = 0;
            v333 = v328;
            v334 = v329;
            do
            {
              if ((int)v332 >= v330) {
                int v335 = v330;
              }
              else {
                int v335 = v332;
              }
              if ((int)v332 <= v331) {
                int v336 = v331;
              }
              else {
                int v336 = v332;
              }
              if (v336 - v335 <= 1)
              {
                uint64_t v337 = 0;
                v338 = v333;
                do
                {
                  if ((int)v337 >= v335) {
                    int v339 = v335;
                  }
                  else {
                    int v339 = v337;
                  }
                  if ((int)v337 <= v336) {
                    int v340 = v336;
                  }
                  else {
                    int v340 = v337;
                  }
                  if (v340 - v339 <= 1)
                  {
                    float v341 = fminf((float)((float)(*((float *)&v416[v324] + v325) + *((float *)&v416[v324 + 21] + v327))+ *((float *)&v416[v324 + 42] + v332))+ v321[v337], 1.0e10);
                    if (v341 <= *(float *)&v334[4 * v337])
                    {
                      *(float *)&v334[4 * v337] = v341;
                      *(v338 - 3) = v410[4 * v324 + 884 + v325];
                      *(v338 - 2) = v410[4 * v324 + 968 + v327];
                      *(v338 - 1) = v410[4 * v324 + 1052 + v332];
                      unsigned char *v338 = *((unsigned char *)v320 + v337);
                    }
                  }
                  ++v337;
                  v338 += 4;
                }
                while (v337 != 4);
              }
              ++v332;
              v334 += 4;
              v333 += 4;
            }
            while (v332 != 4);
          }
          ++v327;
          v329 += 4;
          v328 += 4;
        }
        while (v327 != 4);
        ++v325;
        v322 += 4;
        v326 += 4;
      }
      while (v325 != 4);
      ++v324;
      ++v320;
      v321 += 4;
      v322 = v402 + 52;
      v323 += 52;
    }
    while (v324 != 21);
    unsigned int v236 = v379;
    uint64_t v233 = a13 + 167360;
    if (v379)
    {
      uint64_t v342 = 0;
      unsigned int v244 = -1;
      float v343 = 1.0e30;
      unsigned int v238 = v376;
      uint64_t v240 = a11;
      uint64_t v239 = a12;
      long long v242 = a9;
      uint64_t v241 = a10;
      uint64_t v229 = v389;
      uint64_t v230 = a13;
      uint64_t v232 = a13 + 165312;
      uint64_t v231 = a13 + 157120;
      do
      {
        if (*(float *)(v375 + 4 * v342) >= 1.0e30)
        {
          *(_DWORD *)(v231 + 4 * v342) = 1900671690;
        }
        else
        {
          uint64_t v344 = 0;
          int v345 = 0;
          uint64_t v346 = *(char *)(v378 + v342);
          v347 = &quant_mode_table[v346 + 512];
          float v348 = 1.0e30;
          do
          {
            int v350 = *v347;
            v347 += 128;
            unsigned __int8 v349 = v350;
            if (v350 < 4) {
              break;
            }
            v351 = &v407[13 * v349];
            if (*(float *)&v351[v344] < v348)
            {
              float v348 = *(float *)&v351[v344];
              int v345 = v344 + 4;
            }
            ++v344;
          }
          while (v344 != 6);
          v352 = &quant_mode_table[128 * (uint64_t)v345 + v346];
          int v353 = *v352;
          LOBYTE(v352) = v352[8];
          *(unsigned char *)(a13 + 165312 + v342) = v353;
          *(unsigned char *)(a13 + 167360 + v342) = (_BYTE)v352;
          if (v353 <= 3) {
            *(_DWORD *)(a13 + 4 * v342 + 169408) = 0;
          }
          else {
            *(_DWORD *)(a13 + 4 * v342 + 169408) = *((_DWORD *)v403 + 13 * v353 + v345 + 2);
          }
          uint64_t v231 = a13 + 157120;
          float v354 = v348 + *(float *)(v375 + 4 * v342);
          *(float *)(v398 + 4 * v342) = v354;
          if (v354 < v343)
          {
            unsigned int v244 = v342;
            float v343 = v354;
          }
        }
        ++v342;
      }
      while (v342 != v379);
      goto LABEL_268;
    }
    unsigned int v244 = -1;
    unsigned int v238 = v376;
    uint64_t v240 = a11;
    uint64_t v239 = a12;
    long long v242 = a9;
    uint64_t v241 = a10;
    uint64_t v229 = v389;
    uint64_t v230 = a13;
    uint64_t v232 = a13 + 165312;
LABEL_267:
    uint64_t v231 = a13 + 157120;
LABEL_268:
    LODWORD(v234) = v392;
    goto LABEL_269;
  }
  unsigned int v238 = v376;
  uint64_t v240 = a11;
  uint64_t v239 = a12;
  long long v242 = a9;
  uint64_t v241 = a10;
  if (v377 >= v379)
  {
    v407[0] = -1;
    goto LABEL_271;
  }
  uint64_t v243 = v377;
  unsigned int v244 = -1;
  float v245 = 1.0e30;
  do
  {
    if (*(float *)(v375 + 4 * v243) >= 1.0e30)
    {
      *(_DWORD *)(v231 + 4 * v243) = 1900671690;
    }
    else
    {
      uint64_t v246 = 0;
      int v247 = 0;
      uint64_t v248 = *(char *)(v378 + v243);
      int8x16_t v249 = &quant_mode_table[v248 + 128];
      float v250 = 1.0e30;
      do
      {
        int v252 = *v249;
        v249 += 128;
        unsigned __int8 v251 = v252;
        if (v252 >= 4)
        {
          long long v253 = (float *)&v416[v251];
          if (v253[v246] < v250)
          {
            int v247 = v246;
            float v250 = v253[v246];
          }
        }
        ++v246;
      }
      while (v246 != 4);
      int v254 = quant_mode_table[128 * (uint64_t)v247 + 128 + v248];
      long long v255 = (unsigned char *)(a13 + 4 * v243 + 169408);
      *(unsigned char *)(v232 + v243) = v254;
      *long long v255 = 0;
      if (v254 > 3) {
        *long long v255 = v410[4 * v254 + 884 + v247];
      }
      float v256 = v250 + *(float *)(v375 + 4 * v243);
      *(float *)(v231 + 4 * v243) = v256;
      *(unsigned char *)(v233 + v243) = *(unsigned char *)(v232 + v243);
      if (v256 < v245)
      {
        unsigned int v244 = v243;
        float v245 = v256;
      }
    }
    ++v243;
  }
  while (v243 != v379);
LABEL_269:
  v407[0] = v244;
  if ((v244 & 0x80000000) == 0) {
    *(_DWORD *)(v231 + 4 * v244) = 1900671690;
  }
LABEL_271:
  if (v238 >= 2)
  {
    int8x16_t v355 = vorrq_s8((int8x16_t)vdupq_n_s32(v234), (int8x16_t)xmmword_234378DD0);
    uint64_t v356 = 1;
    int32x4_t v357 = vdupq_n_s32(0x7149F2CAu);
    v358.i64[0] = 0x400000004;
    v358.i64[1] = 0x400000004;
    do
    {
      v359.i64[0] = -1;
      v359.i64[1] = -1;
      float32x4_t v360 = (float32x4_t)v357;
      if (v234 < v236)
      {
        unsigned int v361 = v234;
        float32x4_t v360 = (float32x4_t)v357;
        float32x4_t v148 = (float32x4_t)v355;
        do
        {
          float32x4_t v362 = *(float32x4_t *)(v231 + 4 * v361);
          int8x16_t v363 = (int8x16_t)vcgtq_f32(v360, v362);
          float32x4_t v360 = (float32x4_t)vbslq_s8(v363, (int8x16_t)v362, (int8x16_t)v360);
          int8x16_t v359 = vbslq_s8(v363, (int8x16_t)v148, v359);
          float32x4_t v148 = (float32x4_t)vaddq_s32((int32x4_t)v148, v358);
          v361 += 4;
        }
        while (v361 < v236);
      }
      v148.f32[0] = vminvq_f32(v360);
      float32x4_t v148 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 0);
      int8x16_t v364 = (int8x16_t)vceqq_f32(v360, v148);
      unsigned int v365 = vminvq_s32((int32x4_t)vorrq_s8(vandq_s8(v359, v364), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v364) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL))));
      v407[v356] = v365;
      if ((v365 & 0x80000000) != 0) {
        break;
      }
      *(_DWORD *)(v231 + 4 * v365) = 1900671690;
      ++v356;
    }
    while (v356 != v238);
  }
  if (v238)
  {
    uint64_t v366 = 0;
    while (1)
    {
      uint64_t v367 = v407[v366];
      if ((v367 & 0x80000000) != 0) {
        break;
      }
      *(_DWORD *)(v241 + 4 * v36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v367;
      *(_DWORD *)(v240 + 4 * v36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(unsigned __int8 *)(v232 + v367);
      *(_DWORD *)(v239 + 4 * v36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(unsigned __int8 *)(v233 + v367);
      v368 = (char *)(v230 + 169408 + 4 * v367);
      v369 = v242;
      uint64_t v370 = v229;
      do
      {
        char v371 = *v368++;
        *v369++ = v371;
        --v370;
      }
      while (v370);
      ++v366;
      v242 += 4;
      if (v366 == v238)
      {
        LODWORD(v36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v238;
        break;
      }
    }
  }
  else
  {
    LODWORD(v36re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  if (v366 >= v238) {
    return v238;
  }
  else {
    return v366;
  }
}

uint64_t pack_color_endpoints(int a1, unsigned __int8 *a2, int a3, float32x4_t a4, float32x4_t a5, int8x16_t a6, int32x4_t a7)
{
  uint64_t v8 = 0;
  uint64_t v244 = *MEMORY[0x263EF8340];
  float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  float32x4_t v12 = vminnmq_f32(vmaxnmq_f32(a4, (float32x4_t)0), v11);
  float32x4_t v13 = vminnmq_f32(vmaxnmq_f32(a5, (float32x4_t)0), v11);
  float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  float32x4_t v15 = vmulq_f32(v12, v14);
  float32x4_t v16 = vmulq_f32(v13, v14);
  switch(a1)
  {
    case 0:
      uint64_t v8 = 0;
      float v24 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
      float v25 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
      float v26 = (float)(v24 + v25) * 0.5;
      if (v24 > v25)
      {
        float v24 = (float)(v24 + v25) * 0.5;
        float v25 = v26;
      }
      double v27 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
      *a2 = v27[((float)(v24 - (float)(int)(float)(v24 + 0.5)) >= -0.1) | (2 * (int)(float)(v24 + 0.5))];
      a2[1] = v27[((float)(v25 - (float)(int)(float)(v25 + 0.5)) >= -0.1) | (2 * (int)(float)(v25 + 0.5))];
      return v8;
    case 2:
    case 3:
      float v17 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
      float v18 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
      float v19 = (float)(v17 + v18) * 0.5;
      BOOL v20 = v18 < v17;
      if (v18 < v17) {
        float v18 = (float)(v17 + v18) * 0.5;
      }
      int v21 = (int)(float)(v18 + 0.5);
      if (v20) {
        float v17 = v19;
      }
      int v22 = (int)(float)(v17 + 0.5);
      if (v21 - v22 < 2049)
      {
        if ((((v22 + 16) >> 5) & ~((v22 + 16) >> 31)) >= 2047) {
          __int16 v91 = 2047;
        }
        else {
          __int16 v91 = ((v22 + 16) >> 5) & ~(unsigned __int16)((v22 + 16) >> 31);
        }
        uint64_t v23 = a3 - 4;
        float32x4_t v92 = &color_unquant_to_uquant_tables[512 * v23];
        int v93 = (char)v92[(2 * (v91 & 0x7F)) | 1];
        if ((v93 & 0x80000000) == 0)
        {
          int v94 = (((v21 + 16) >> 5) & ~((v21 + 16) >> 31)) >= 2047 ? 2047 : ((v21 + 16) >> 5) & ~((v21 + 16) >> 31);
          unsigned int v95 = v91 & 0x780 | v92[(2 * (v91 & 0x7F)) | 1];
          unsigned int v96 = v94 - v95;
          if (v96 <= 0xF)
          {
            int v97 = (v95 >> 3) & 0xF0 | v96;
            unsigned __int8 v98 = color_unquant_to_uquant_tables[512 * v23 + ((2 * v97) | 1u)];
            if ((v97 & 0xF0) == (v98 & 0xF0)) {
              goto LABEL_74;
            }
          }
        }
        __int16 v99 = (((v22 + 32) >> 6) & ~((v22 + 32) >> 31)) >= 1023
            ? 1023
            : ((v22 + 32) >> 6) & ~(unsigned __int16)((v22 + 32) >> 31);
        int v93 = (char)v92[(2 * (v99 & 0x7F)) | 0x101];
        if (v93 < 0)
        {
          int v100 = (((v21 + 32) >> 6) & ~((v21 + 32) >> 31)) >= 1023 ? 1023 : ((v21 + 32) >> 6) & ~((v21 + 32) >> 31);
          unsigned int v101 = v100 - (v99 & 0x380 | v93 & 0x7F);
          if (v101 <= 0x1F)
          {
            int v102 = v101 | ((unsigned __int16)(v99 & 0x380) >> 2);
            unsigned __int8 v98 = color_unquant_to_uquant_tables[512 * v23 + ((2 * v102) | 1u)];
            if ((v102 & 0xE0) == (v98 & 0xE0))
            {
LABEL_74:
              *a2 = v93;
              a2[1] = v98;
              return 3;
            }
          }
        }
      }
      else
      {
        uint64_t v23 = a3 - 4;
      }
      int v103 = ((v22 + 128) >> 8) & ~((v22 + 128) >> 31);
      if (v103 >= 255) {
        int v103 = 255;
      }
      int v104 = ((v21 + 128) >> 8) & ~((v21 + 128) >> 31);
      if (v104 >= 255) {
        int v104 = 255;
      }
      int v105 = ((v21 + 256) >> 8) & ~((v21 + 256) >> 31);
      if (v105 >= 255) {
        int v105 = 255;
      }
      if (((v22 >> 8) & ~(v22 >> 31)) >= 255) {
        int v106 = 255;
      }
      else {
        int v106 = (v22 >> 8) & ~(v22 >> 31);
      }
      unsigned int v107 = ((v104 << 8) - v21) * ((v104 << 8) - v21) + ((v103 << 8) - v22) * ((v103 << 8) - v22);
      unsigned int v108 = ((v106 << 8) - v22 + 128) * ((v106 << 8) - v22 + 128)
           + ((v105 << 8) - v21 - 128) * ((v105 << 8) - v21 - 128);
      BOOL v109 = v107 >= v108;
      if (v107 >= v108) {
        int v110 = v105;
      }
      else {
        int v110 = v103;
      }
      if (v109) {
        int v111 = v106;
      }
      else {
        int v111 = v104;
      }
      BOOL v112 = &color_unquant_to_uquant_tables[512 * v23];
      *a2 = v112[(2 * v110) | 1];
      a2[1] = v112[(2 * v111) | 1];
      return 2;
    case 4:
      float v28 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
      float v29 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
      int v30 = (int)(float)(v28 + 0.5);
      if (a3 >= 19)
      {
        int v32 = 2 * v30;
        uint64_t v34 = (a3 - 4);
        int v37 = (int)(float)(v29 + 0.5);
        int v31 = (int)(float)(v15.f32[3] + 0.5);
        int v40 = 2 * v37;
        int v33 = 2 * v31;
        int v38 = (int)(float)(v16.f32[3] + 0.5);
        int v41 = 2 * v38;
      }
      else
      {
        int v31 = (int)(float)(v15.f32[3] + 0.5);
        int v32 = 2 * v30;
        int v33 = 2 * v31;
        uint64_t v34 = a3 - 4;
        float32x4_t v35 = &color_unquant_to_uquant_tables[512 * v34];
        unsigned __int8 v36 = v35[(4 * ((int)(float)(v28 + 0.5) & 0x7F)) | 1];
        int v37 = (int)(float)(v29 + 0.5);
        int v38 = (int)(float)(v16.f32[3] + 0.5);
        int v39 = v36 | (((v30 >> 7) & 1) << 8);
        int v40 = 2 * v37;
        int v41 = 2 * v38;
        int v42 = 2 * v37 - v39;
        if ((v42 - 64) >= 0xFFFFFF80)
        {
          int v43 = v35[(4 * ((int)(float)(v15.f32[3] + 0.5) & 0x7F)) | 1];
          unsigned int v44 = v43 & 0xFFFFFEFF | (((v31 >> 7) & 1) << 8);
          if (v41 - v44 - 64 >= 0xFFFFFF80)
          {
            int v45 = v42 & 0x7F | ((unsigned __int16)(v32 & 0x100) >> 1);
            int8x16_t v46 = &color_unquant_to_uquant_tables[512 * v34];
            unsigned int v47 = v46[(2 * v45) | 1];
            if ((v45 ^ v47) <= 0x3F)
            {
              int v48 = ((_BYTE)v41 - (_BYTE)v43) & 0x7F | ((unsigned __int16)(v33 & 0x100) >> 1);
              unsigned int v49 = v46[(2 * v48) | 1];
              if ((v48 ^ v49) <= 0x3F
                && (v47 & 0x7F) + v39 + (((int)(v47 << 25) >> 31) & 0xFFFFFF80) <= 0x1FF
                && (v49 & 0x7F) + v44 + (((int)(v49 << 25) >> 31) & 0xFFFFFF80) <= 0x1FF)
              {
                *a2 = v36;
                a2[1] = v47;
                a2[2] = v43;
                uint64_t v8 = 5;
                a2[3] = v49;
                return v8;
              }
            }
          }
        }
      }
      int v113 = v32 | ((float)(v28 - (float)v30) >= -0.1);
      uint32x4_t v114 = &color_unquant_to_uquant_tables[512 * v34];
      *a2 = v114[v113];
      a2[1] = v114[v40 | ((float)(v29 - (float)v37) >= -0.1)];
      a2[2] = v114[v33 | ((float)(v15.f32[3] - (float)v31) >= -0.1)];
      a2[3] = v114[v41 | ((float)(v16.f32[3] - (float)v38) >= -0.1)];
      return 4;
    case 6:
      quantize_rgbs(a2, a3, a6);
      return 6;
    case 7:
      float32x4_t v50 = (float32x4_t)vdupq_laneq_s32(a7, 3);
      *(float32x2_t *)v51.f32 = vadd_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v50.f32);
      v51.i32[3] = vextq_s8(*(int8x16_t *)&a7, *(int8x16_t *)&a7, 8uLL).i32[1];
      v51.i32[2] = vaddq_f32(*(float32x4_t *)&a7, v50).i32[2];
      int32x4_t v52 = (int32x4_t)vminnmq_f32(vmaxnmq_f32(v51, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x477FFF00u));
      if (*(float *)v52.i32 <= *(float *)&v52.i32[1] || *(float *)v52.i32 <= *(float *)&v52.i32[2])
      {
        float32x4_t v116 = (float32x4_t)vrev64q_s32(v52);
        if (*(float *)&v52.i32[1] <= *(float *)&v52.i32[2])
        {
          float32x4_t v116 = (float32x4_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 0xCuLL);
          int v115 = 2;
        }
        else
        {
          v116.i64[1] = v52.i64[1];
          int v115 = 1;
        }
      }
      else
      {
        int v115 = 0;
        float32x4_t v116 = (float32x4_t)v52;
      }
      unint64_t v142 = 0;
      LODWORD(v143) = vsubq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1)).u32[0];
      LODWORD(v144) = vsubq_f32(v116, (float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2)).u32[0];
      int v145 = 4 * v115;
      int v146 = v115 | 0xC;
      uint64_t v147 = a3 - 4;
      float32x2_t v148 = (float32x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 4uLL).u64[0];
      float32x2_t v149 = (float32x2_t)vdup_n_s32(0x477FFF00u);
      while (1)
      {
        float v150 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_cutoffs[2 * v142];
        BOOL v151 = v143 <= v150 && v144 <= v150;
        if (v151 && v116.f32[3] <= quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_cutoffs[2 * v142 + 1])
        {
          float v152 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_scales[v142];
          unsigned int v153 = v142 >= 4 ? v146 : v145 | v142;
          float v154 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_rscales[v142];
          float v155 = (char *)&quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_bits + 12 * v142;
          int v156 = *((_DWORD *)v155 + 1);
          int v157 = *((_DWORD *)v155 + 2);
          unsigned int v158 = (int)(float)((float)(v116.f32[0] * v152) + 0.5);
          int v159 = v158 & 0x3F | (v153 << 6);
          do
          {
            unsigned __int8 v160 = color_unquant_to_uquant_tables[512 * v147 + ((2 * v159) | 1u)];
            int v161 = v159 & 0xC0;
            v159 -= v161 != (v160 & 0xC0);
          }
          while (v161 != (v160 & 0xC0));
          int v162 = 1 << v156;
          *(float *)v7.i32 = v154 * (float)(int)(v158 & 0xFFFFFFC0 | v160 & 0x3F);
          float32x2_t v163 = (float32x2_t)vdup_lane_s32(v7, 0);
          float32x2_t v164 = vsub_f32(v163, v148);
          int32x2_t v165 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v164, v149), (int8x8_t)v149, (int8x8_t)vmaxnm_f32(v164, 0)), v152), (float32x2_t)0x3F0000003F000000));
          if (v162 > v165.i32[0] && v162 > v165.i32[1])
          {
            if (v142 > 5)
            {
              int v167 = 0;
            }
            else if (((1 << v142) & 5) != 0)
            {
              int v167 = (v158 >> 9) & 1;
            }
            else
            {
              int v167 = ((1 << v142) & 0xA) != 0 ? (v158 >> 8) & 1 : ((unsigned __int32)v165.i32[0] >> 6) & 1;
            }
            if (v142 >= 4) {
              int v168 = (v142 - 4) < 2 && ((unsigned __int32)v165.i32[1] >> 6) & 1;
            }
            else {
              int v168 = (v158 >> 7) & 1;
            }
            if (v142 > 5) {
              unsigned int v169 = 0;
            }
            else {
              unsigned int v169 = ((1 << v142) & 0x3A) != 0 ? ((unsigned __int32)v165.i32[0] >> 5) & 1 : (v158 >> 8) & 1;
            }
            switch((int)v142)
            {
              case 0:
                int v170 = (v158 >> 10) & 1;
                break;
              case 1:
              case 3:
              case 4:
              case 5:
                int v170 = ((unsigned __int32)v165.i32[1] >> 5) & 1;
                break;
              case 2:
                int v170 = (v158 >> 6) & 1;
                break;
              default:
                int v170 = 0;
                break;
            }
            int v171 = 1 << v157;
            unsigned int v172 = v165.i8[0] & 0x1F | (((v153 >> 2) & 1) << 7) | (v167 << 6) | (32 * v169);
            do
            {
              unsigned __int8 v173 = color_unquant_to_uquant_tables[512 * v147 + ((2 * v172) | 1u)];
              int v174 = v172 & 0xF0;
              v172 -= v174 != (v173 & 0xF0);
            }
            while (v174 != (v173 & 0xF0));
            int v175 = v165.i8[4] & 0x1F | (((v153 >> 3) & 1) << 7) | (v168 << 6) | (32 * v170);
            do
            {
              int v176 = color_unquant_to_uquant_tables[512 * v147 + ((2 * v175) | 1u)];
              int v177 = v175 & 0xF0;
              v175 -= v177 != (v176 & 0xF0);
            }
            while (v177 != (v176 & 0xF0));
            v178.i32[0] = v173 & 0x1F;
            v178.i32[1] = v176 & 0xFFFFFF1F;
            float32x2_t v179 = vsub_f32(vsub_f32(v163, vmul_n_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(void *)&v165 & 0xFFFFFFE0FFFFFFE0), v178)), v154)), v148);
            v179.f32[0] = v116.f32[3]
                        + (float)((float)((float)((float)(*(float *)v7.i32 - v116.f32[0]) + v179.f32[0]) + v179.f32[1])
                                * 0.33333);
            float v180 = fmaxf(v179.f32[0], 0.0);
            float v181 = v179.f32[0] <= 1000000000.0 ? v180 : 1000000000.0;
            int v182 = (int)(float)((float)(v152 * v181) + 0.5);
            if (v171 > v182) {
              break;
            }
          }
        }
        if (++v142 == 5)
        {
          uint64_t v183 = 0;
          uint32x4_t v243 = (uint32x4_t)v52;
          do
          {
            float v184 = *(float *)&v243.i32[v183];
            float v185 = fmaxf(v184, 0.0);
            if (v184 <= 65020.0) {
              float v186 = v185;
            }
            else {
              float v186 = 65020.0;
            }
            *(float *)&v243.i32[v183] = v186;
            float v187 = (float)(v186 * 0.0019531) + 0.5;
            v242.i32[v183] = (int)v187;
            *(float *)&v240.i32[v183++] = (float)(int)v187 * 512.0;
          }
          while (v183 != 3);
          uint64_t v188 = 0;
          float v189 = *(float *)&v243.i32[3]
               + (float)((float)((float)((float)(*(float *)v240.i32 - *(float *)v243.i32)
                                       + (float)(*(float *)&v240.i32[1] - *(float *)&v243.i32[1]))
                               + (float)(*(float *)&v240.i32[2] - *(float *)&v243.i32[2]))
                       * 0.33333);
          float v190 = (float)(v189 * 0.0019531) + 0.5;
          if (v189 <= 0.0) {
            float v190 = 0.5;
          }
          float v191 = 127.49;
          if (v189 <= 65020.0) {
            float v191 = v190;
          }
          *(int8x8_t *)v241.i8 = vorr_s8(vand_s8(*(int8x8_t *)v242.i8, (int8x8_t)0x7F0000003FLL), (int8x8_t)0x80000000C0);
          v241.i32[2] = v242.i8[8] & 0x7F | 0x80;
          v241.i32[3] = (2 * v242.i32[0]) & 0x80 | (int)v191 & 0x7F;
          BOOL v192 = &color_unquant_to_uquant_tables[512 * v147];
          do
          {
            __int32 v193 = v241.i32[v188];
            do
            {
              unsigned __int8 v194 = v192[(2 * v193) | 1];
              int v195 = v193 & 0xF0;
              v193 -= v195 != (v194 & 0xF0);
            }
            while (v195 != (v194 & 0xF0));
            a2[v188++] = v194;
          }
          while (v188 != 4);
          return 7;
        }
      }
      unsigned int v222 = v158 >> 9;
      int v223 = v182 >> 6;
      if (v142 == 4) {
        LOBYTE(v223) = (int)v158 >> 7;
      }
      if (v142 == 1)
      {
        char v224 = v158 >> 10;
      }
      else
      {
        LOBYTE(v222) = v182 >> 5;
        char v224 = v223;
      }
      if (v142 == 2) {
        unsigned int v225 = v182 >> 7;
      }
      else {
        unsigned int v225 = v158 >> 6;
      }
      int v226 = (int)(float)((float)(v152 * v181) + 0.5) & 0x1F | (v225 << 7) | (32 * (v222 & 1)) & 0xBF | ((v224 & 1) << 6);
      float v227 = &color_unquant_to_uquant_tables[512 * v147];
      do
      {
        unsigned __int8 v228 = v227[(2 * v226) | 1];
        int v229 = v226 & 0xF0;
        v226 -= v229 != (v228 & 0xF0);
      }
      while (v229 != (v228 & 0xF0));
      *a2 = v160;
      a2[1] = v173;
      a2[2] = v176;
      uint64_t v8 = 7;
      a2[3] = v228;
      return v8;
    case 8:
      float32x4_t v232 = v15;
      float32x4_t v235 = v16;
      if (a3 > 18)
      {
        uint64_t v8 = 0;
        float v230 = 1.0e30;
        if (a3 != 19) {
          goto LABEL_187;
        }
      }
      else
      {
        if (try_quantize_rgb_delta_blue_contract((int8x16_t *)&v243, &v242, a3, v15, v16))
        {
          rgba_delta_unpack(&v241, &v240, v243, v242);
          float32x4_t v54 = vsubq_f32(v232, vcvtq_f32_s32(v241));
          float32x4_t v55 = vsubq_f32(v235, vcvtq_f32_s32(v240));
          int8x16_t v56 = (int8x16_t)vaddq_f32(vmulq_f32(v54, v54), vmulq_f32(v55, v55));
          *(float32x2_t *)v56.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), *(float32x2_t *)v56.i8);
          LODWORD(v230) = vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8).u32[0];
          uint64_t v8 = 9;
          float32x4_t v57 = v235;
          float32x4_t v58 = v232;
        }
        else
        {
          uint64_t v8 = 0;
          float v230 = 1.0e30;
          float32x4_t v58 = v232;
          float32x4_t v57 = v235;
        }
        if (try_quantize_rgb_delta((int8x16_t *)&v241, (int8x16_t *)&v240, a3, v58, v57))
        {
          rgba_delta_unpack(&v239, &v238, (uint32x4_t)v241, (int8x16_t)v240);
          float32x4_t v15 = v232;
          float32x4_t v16 = v235;
          float32x4_t v196 = vsubq_f32(v232, vcvtq_f32_s32(v239));
          float32x4_t v197 = vsubq_f32(v235, vcvtq_f32_s32(v238));
          int8x16_t v198 = (int8x16_t)vaddq_f32(vmulq_f32(v196, v196), vmulq_f32(v197, v197));
          *(float32x2_t *)v198.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL), *(float32x2_t *)v198.i8);
          float v199 = vpadd_f32(*(float32x2_t *)v198.i8, *(float32x2_t *)v198.i8).f32[0];
          if (v199 < v230)
          {
            int8x16_t v242 = (int8x16_t)v240;
            uint32x4_t v243 = (uint32x4_t)v241;
            uint64_t v8 = 9;
            float v230 = v199;
          }
        }
        else
        {
          float32x4_t v15 = v232;
          float32x4_t v16 = v235;
        }
      }
      if (try_quantize_rgb_blue_contract(&v241, &v240, a3, v15, v16))
      {
        int32x4_t v200 = v240;
        int32x4_t v201 = v241;
        int32x4_t v202 = vdupq_laneq_s32(v241, 2);
        int32x4_t v203 = vdupq_laneq_s32(v240, 2);
        if (vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(v241, vdupq_lane_s32(*(int32x2_t *)v241.i8, 1)), v202), vaddq_s32(vaddq_s32(v240, vdupq_lane_s32(*(int32x2_t *)v240.i8, 1)), v203))).u8[0])
        {
          v204.i64[0] = -1;
          v204.i64[1] = -1;
          v205.i64[0] = vshlq_s32(vaddq_s32(v202, v241), v204).u64[0];
          v205.i64[1] = v241.i64[1];
          v201.i64[0] = vshlq_s32(vaddq_s32(v203, v240), v204).u64[0];
          v201.i64[1] = v240.i64[1];
          int32x4_t v200 = v205;
        }
        float32x4_t v15 = v232;
        float32x4_t v16 = v235;
        float32x4_t v206 = vsubq_f32(v232, vcvtq_f32_s32(v201));
        float32x4_t v207 = vsubq_f32(v235, vcvtq_f32_s32(v200));
        int8x16_t v208 = (int8x16_t)vaddq_f32(vmulq_f32(v206, v206), vmulq_f32(v207, v207));
        *(float32x2_t *)v208.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL), *(float32x2_t *)v208.i8);
        float v209 = vpadd_f32(*(float32x2_t *)v208.i8, *(float32x2_t *)v208.i8).f32[0];
        if (v209 < v230)
        {
          int8x16_t v242 = (int8x16_t)v240;
          uint32x4_t v243 = (uint32x4_t)v241;
          uint64_t v8 = 8;
          float v230 = v209;
        }
      }
      else
      {
        float32x4_t v15 = v232;
        float32x4_t v16 = v235;
      }
LABEL_187:
      quantize_rgb(&v241, &v240, a3, v15, v16);
      int32x4_t v210 = v240;
      int32x4_t v211 = v241;
      int32x4_t v212 = vdupq_laneq_s32(v241, 2);
      int32x4_t v213 = vdupq_laneq_s32(v240, 2);
      if (vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(v241, vdupq_lane_s32(*(int32x2_t *)v241.i8, 1)), v212), vaddq_s32(vaddq_s32(v240, vdupq_lane_s32(*(int32x2_t *)v240.i8, 1)), v213))).u8[0])
      {
        v214.i64[0] = -1;
        v214.i64[1] = -1;
        v215.i64[0] = vshlq_s32(vaddq_s32(v212, v241), v214).u64[0];
        v215.i64[1] = v241.i64[1];
        v211.i64[0] = vshlq_s32(vaddq_s32(v213, v240), v214).u64[0];
        v211.i64[1] = v240.i64[1];
        int32x4_t v210 = v215;
      }
      float32x4_t v216 = vsubq_f32(v232, vcvtq_f32_s32(v211));
      float32x4_t v217 = vsubq_f32(v235, vcvtq_f32_s32(v210));
      int8x16_t v218 = (int8x16_t)vaddq_f32(vmulq_f32(v216, v216), vmulq_f32(v217, v217));
      *(float32x2_t *)v218.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL), *(float32x2_t *)v218.i8);
      if (vpadd_f32(*(float32x2_t *)v218.i8, *(float32x2_t *)v218.i8).f32[0] < v230)
      {
        int8x16_t v242 = (int8x16_t)v240;
        uint32x4_t v243 = (uint32x4_t)v241;
        uint64_t v8 = 8;
      }
      int8x16_t v220 = v242;
      uint32x4_t v219 = v243;
      *a2 = v243.i8[0];
      a2[1] = v220.i8[0];
      a2[2] = v219.u8[4];
      a2[3] = v220.u8[4];
      a2[4] = v219.u8[8];
      a2[5] = v220.u8[8];
      return v8;
    case 10:
      float32x4_t v59 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
      a2[4] = v59[((float)(v15.f32[3] - (float)(int)(float)(v15.f32[3] + 0.5)) >= -0.1) | (2
                                                                                         * (int)(float)(v15.f32[3] + 0.5))];
      a2[5] = v59[((float)(v16.f32[3] - (float)(int)(float)(v16.f32[3] + 0.5)) >= -0.1) | (2
                                                                                         * (int)(float)(v16.f32[3] + 0.5))];
      quantize_rgbs(a2, a3, a6);
      return 10;
    case 11:
      quantize_hdr_rgb(a2, a3, v12, v13);
      return 11;
    case 12:
      float v60 = v15.f32[3];
      float v61 = v16.f32[3];
      __n128 v233 = (__n128)v15;
      __n128 v236 = (__n128)v16;
      if (a3 > 18)
      {
        uint64_t v8 = 0;
        float v231 = 1.0e30;
        if (a3 != 19) {
          goto LABEL_109;
        }
      }
      else
      {
        float v231 = 1.0e30;
        if (try_quantize_rgb_delta_blue_contract((int8x16_t *)&v243, &v242, a3, v15, v16)
          && try_quantize_alpha_delta((uint64_t)&v243, (uint64_t)&v242, a3, v236, v233))
        {
          rgba_delta_unpack(&v241, &v240, v243, v242);
          float32x4_t v62 = vsubq_f32((float32x4_t)v233, vcvtq_f32_s32(v241));
          float32x4_t v63 = vsubq_f32((float32x4_t)v236, vcvtq_f32_s32(v240));
          int8x16_t v64 = (int8x16_t)vaddq_f32(vmulq_f32(v62, v62), vmulq_f32(v63, v63));
          *(float32x2_t *)v64.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(float32x2_t *)v64.i8);
          LODWORD(v231) = vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).u32[0];
          uint64_t v8 = 13;
          float32x4_t v65 = (float32x4_t)v236;
          float32x4_t v66 = (float32x4_t)v233;
        }
        else
        {
          uint64_t v8 = 0;
          float32x4_t v66 = (float32x4_t)v233;
          float32x4_t v65 = (float32x4_t)v236;
        }
        if (try_quantize_rgb_delta((int8x16_t *)&v241, (int8x16_t *)&v240, a3, v66, v65)
          && try_quantize_alpha_delta((uint64_t)&v241, (uint64_t)&v240, a3, v233, v236))
        {
          rgba_delta_unpack(&v239, &v238, (uint32x4_t)v241, (int8x16_t)v240);
          float32x4_t v15 = (float32x4_t)v233;
          float32x4_t v16 = (float32x4_t)v236;
          float32x4_t v117 = vsubq_f32((float32x4_t)v233, vcvtq_f32_s32(v239));
          float32x4_t v118 = vsubq_f32((float32x4_t)v236, vcvtq_f32_s32(v238));
          int8x16_t v119 = (int8x16_t)vaddq_f32(vmulq_f32(v117, v117), vmulq_f32(v118, v118));
          *(float32x2_t *)v119.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), *(float32x2_t *)v119.i8);
          float v120 = vpadd_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8).f32[0];
          if (v120 < v231)
          {
            int8x16_t v242 = (int8x16_t)v240;
            uint32x4_t v243 = (uint32x4_t)v241;
            uint64_t v8 = 13;
            float v231 = v120;
          }
        }
        else
        {
          float32x4_t v15 = (float32x4_t)v233;
          float32x4_t v16 = (float32x4_t)v236;
        }
      }
      if (try_quantize_rgb_blue_contract(&v241, &v240, a3, v15, v16))
      {
        float32x4_t v121 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
        v241.i32[3] = v121[((float)(v61 - (float)(int)(float)(v61 + 0.5)) >= -0.1) | (2 * (int)(float)(v61 + 0.5))];
        v240.i32[3] = v121[((float)(v60 - (float)(int)(float)(v60 + 0.5)) >= -0.1) | (2 * (int)(float)(v60 + 0.5))];
        int32x4_t v122 = v240;
        int32x4_t v123 = v241;
        int32x4_t v124 = vdupq_laneq_s32(v241, 2);
        int32x4_t v125 = vdupq_laneq_s32(v240, 2);
        if (vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(v241, vdupq_lane_s32(*(int32x2_t *)v241.i8, 1)), v124), vaddq_s32(vaddq_s32(v240, vdupq_lane_s32(*(int32x2_t *)v240.i8, 1)), v125))).u8[0])
        {
          v126.i64[0] = -1;
          v126.i64[1] = -1;
          v127.i64[0] = vshlq_s32(vaddq_s32(v124, v241), v126).u64[0];
          v127.i64[1] = v241.i64[1];
          v123.i64[0] = vshlq_s32(vaddq_s32(v125, v240), v126).u64[0];
          v123.i64[1] = v240.i64[1];
          int32x4_t v122 = v127;
        }
        float32x4_t v15 = (float32x4_t)v233;
        float32x4_t v16 = (float32x4_t)v236;
        float32x4_t v128 = vsubq_f32((float32x4_t)v233, vcvtq_f32_s32(v123));
        float32x4_t v129 = vsubq_f32((float32x4_t)v236, vcvtq_f32_s32(v122));
        int8x16_t v130 = (int8x16_t)vaddq_f32(vmulq_f32(v128, v128), vmulq_f32(v129, v129));
        *(float32x2_t *)v130.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL), *(float32x2_t *)v130.i8);
        float v131 = vpadd_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v130.i8).f32[0];
        if (v131 < v231)
        {
          int8x16_t v242 = (int8x16_t)v240;
          uint32x4_t v243 = (uint32x4_t)v241;
          uint64_t v8 = 12;
          float v231 = v131;
        }
      }
      else
      {
        float32x4_t v15 = (float32x4_t)v233;
        float32x4_t v16 = (float32x4_t)v236;
      }
LABEL_109:
      quantize_rgb(&v241, &v240, a3, v15, v16);
      float32x4_t v132 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
      v241.i32[3] = v132[((float)(v60 - (float)(int)(float)(v60 + 0.5)) >= -0.1) | (2 * (int)(float)(v60 + 0.5))];
      v240.i32[3] = v132[((float)(v61 - (float)(int)(float)(v61 + 0.5)) >= -0.1) | (2 * (int)(float)(v61 + 0.5))];
      int32x4_t v133 = v240;
      int32x4_t v134 = v241;
      int32x4_t v135 = vdupq_laneq_s32(v241, 2);
      int32x4_t v136 = vdupq_laneq_s32(v240, 2);
      if (vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(v241, vdupq_lane_s32(*(int32x2_t *)v241.i8, 1)), v135), vaddq_s32(vaddq_s32(v240, vdupq_lane_s32(*(int32x2_t *)v240.i8, 1)), v136))).u8[0])
      {
        v137.i64[0] = -1;
        v137.i64[1] = -1;
        v138.i64[0] = vshlq_s32(vaddq_s32(v135, v241), v137).u64[0];
        v138.i64[1] = v241.i64[1];
        v134.i64[0] = vshlq_s32(vaddq_s32(v136, v240), v137).u64[0];
        v134.i64[1] = v240.i64[1];
        int32x4_t v133 = v138;
      }
      float32x4_t v139 = vsubq_f32((float32x4_t)v233, vcvtq_f32_s32(v134));
      float32x4_t v140 = vsubq_f32((float32x4_t)v236, vcvtq_f32_s32(v133));
      int8x16_t v141 = (int8x16_t)vaddq_f32(vmulq_f32(v139, v139), vmulq_f32(v140, v140));
      *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL), *(float32x2_t *)v141.i8);
      if (vpadd_f32(*(float32x2_t *)v141.i8, *(float32x2_t *)v141.i8).f32[0] < v231)
      {
        int8x16_t v242 = (int8x16_t)v240;
        uint32x4_t v243 = (uint32x4_t)v241;
        uint64_t v8 = 12;
      }
      v245.val[1] = v242;
      v245.val[0] = (int8x16_t)v243;
      *(void *)a2 = vqtbl2q_s8(v245, (int8x16_t)xmmword_23441F240).u64[0];
      return v8;
    case 14:
      float32x2_t v67 = vmul_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), (float32x2_t)vdup_n_s32(0x3B7F00FFu));
      float32x2_t v68 = (float32x2_t)vdup_n_s32(0x437F0000u);
      float32x2_t v69 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v67, v68), (int8x8_t)v68, (int8x8_t)vmaxnm_f32(v67, 0));
      int32x2_t v70 = vcvt_s32_f32(vadd_f32(v69, (float32x2_t)0x3F0000003F000000));
      int32x2_t v71 = vcge_f32(vsub_f32(v69, vcvt_f32_s32(v70)), (float32x2_t)vdup_n_s32(0xBDCCCCCD));
      uint16x4_t v72 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
      a2[6] = v72[2 * v70.i32[1] - v71.i32[1]];
      a2[7] = v72[2 * v70.i32[0] - v71.i32[0]];
      quantize_hdr_rgb(a2, a3, v12, v13);
      return 14;
    case 15:
      float v234 = v12.f32[3];
      float v237 = v13.f32[3];
      quantize_hdr_rgb(a2, a3, v12, v13);
      float v73 = 0.5;
      float v74 = v234 + 0.5;
      if (v234 <= 0.0) {
        float v74 = 0.5;
      }
      if (v237 > 0.0) {
        float v73 = v237 + 0.5;
      }
      float v75 = 65280.0;
      if (v234 > 65280.0) {
        float v74 = 65280.0;
      }
      int v76 = (int)v74;
      if (v237 <= 65280.0) {
        float v75 = v73;
      }
      int v77 = (int)v75;
      uint64_t v78 = a3 - 4;
      uint64_t v79 = -3;
      int v80 = 256;
      uint64_t v81 = 2;
      char v82 = 0x80;
      while (1)
      {
        int v83 = (int)((0x80u >> v81) + v76) >> (v79 + 9);
        int v84 = color_unquant_to_uquant_tables[512 * v78 + ((2 * (v80 & 0x80 | v83 & 0x7F)) | 1u)];
        if (((v80 ^ v84) & 0x80) == 0)
        {
          signed int v85 = ((int)((0x80u >> v81) + v77) >> (v79 + 9)) - (v83 & 0xFFFFFF80 | v84 & 0x7F);
          signed int v86 = 0x20u >> v81;
          if (v85 >= (signed int)-(0x20u >> v81) && v85 < v86)
          {
            int v88 = (v83 >> 7 << (v79 + 7)) | v82 & 0x80 | v85 & (2 * v86 - 1);
            int v89 = color_unquant_to_uquant_tables[512 * v78 + 1 + 2 * v88];
            if (((v88 ^ v89) & quantize_hdr_alpha(float,float,unsigned char *,quant_method)::testbits[v81]) == 0) {
              break;
            }
          }
        }
        --v81;
        v82 -= 64;
        v80 -= 128;
        BOOL v109 = __CFADD__(v79++, 1);
        if (v109)
        {
          float32x4_t v90 = &color_unquant_to_uquant_tables[512 * v78];
          a2[6] = v90[((uint64_t)(v76 + 256) >> 8) | 0x101];
          LOBYTE(v89) = v90[((uint64_t)(v77 + 256) >> 8) | 0x101];
          goto LABEL_193;
        }
      }
      a2[6] = v84;
LABEL_193:
      a2[7] = v89;
      return 15;
    default:
      return v8;
  }
}

uint64_t try_quantize_rgb_delta_blue_contract(int8x16_t *a1, int8x16_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5 = vaddq_f32(a5, vsubq_f32(a5, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a5, (int32x4_t)a5), (int32x4_t)a5)));
  float32x4_t v6 = vaddq_f32(a4, vsubq_f32(a4, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a4, (int32x4_t)a4), (int32x4_t)a4)));
  float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  int8x8_t v8 = (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgtq_f32(v6, v7)), vorrq_s8((int8x16_t)vcgtq_f32(v5, v7), (int8x16_t)vcltzq_f32(v5))));
  int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    float32x4_t v66 = a2;
    int32x2_t v70 = a1;
    int v58 = a3;
    int8x8_t v62 = v8;
    float32x4_t v51 = v5;
    float32x4_t v54 = v6;
    float32x4_t v5 = v51;
    float32x4_t v6 = v54;
    int8x8_t v8 = v62;
    int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    a3 = v58;
    int v43 = v42;
    a2 = v66;
    a1 = v70;
    if (v43)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      float32x4_t v5 = v51;
      float32x4_t v6 = v54;
      int8x8_t v8 = v62;
      int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      a3 = v58;
      a2 = v66;
      a1 = v70;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vand_s8(v8, (int8x8_t)0x1000100010001)), v9[85]))) {
    return 0;
  }
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  int32x4_t v11 = vcvtq_s32_f32(vaddq_f32(v5, v10));
  int8x16_t v12 = (int8x16_t)vaddq_s32(v11, v11);
  int8x16_t v13 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)vdupq_n_s32(0x1FEu));
  uint64_t v14 = a3 - 4;
  float32x4_t v15 = &color_unquant_to_uquant_tables[512 * v14];
  v16.i32[0] = v15[v13.i32[0] | 1];
  v16.i32[1] = v15[v13.i32[1] | 1];
  v16.i64[1] = v15[v13.i32[2] | 1];
  v13.i64[0] = 0x10000000100;
  v13.i64[1] = 0x10000000100;
  int8x16_t v17 = vandq_s8(v12, v13);
  int32x4_t v18 = vcvtq_s32_f32(vaddq_f32(v6, v10));
  int8x16_t v19 = (int8x16_t)vsubq_s32(vaddq_s32(v18, v18), (int32x4_t)vorrq_s8(v16, v17));
  v19.i32[3] = 0;
  v18.i64[0] = 0x3F0000003FLL;
  v18.i64[1] = 0x3F0000003FLL;
  uint32x4_t v20 = (uint32x4_t)vaddq_s32((int32x4_t)v19, v18);
  {
    float32x2_t v67 = a2;
    int32x2_t v71 = a1;
    uint64_t v59 = a3 - 4;
    int8x16_t v63 = v16;
    int8x16_t v52 = v19;
    int8x16_t v55 = v17;
    uint32x4_t v50 = v20;
    uint32x4_t v20 = v50;
    int8x16_t v19 = v52;
    int8x16_t v17 = v55;
    int8x16_t v16 = v63;
    uint64_t v14 = v59;
    int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v45 = v44;
    a2 = v67;
    a1 = v71;
    if (v45)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      uint32x4_t v20 = v50;
      int8x16_t v19 = v52;
      int8x16_t v17 = v55;
      int8x16_t v16 = v63;
      uint64_t v14 = v59;
      int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      a2 = v67;
      a1 = v71;
    }
  }
  v21.i64[0] = 0x7F0000007FLL;
  v21.i64[1] = 0x7F0000007FLL;
  int8x16_t v22 = (int8x16_t)vcgtq_u32(v21, v20);
  v23.i64[0] = 0x100000001;
  v23.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v22, v23), v9[85]))) {
    return 0;
  }
  v24.i64[0] = 0x7F0000007FLL;
  v24.i64[1] = 0x7F0000007FLL;
  v25.i64[0] = -1;
  v25.i64[1] = -1;
  int8x16_t v26 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v17, v25), vandq_s8(v19, v24));
  int8x16_t v27 = (int8x16_t)vaddq_s32((int32x4_t)v26, (int32x4_t)v26);
  float v28 = &color_unquant_to_uquant_tables[512 * v14];
  v29.i32[0] = v28[v27.i32[0] | 1];
  v29.i32[1] = v28[v27.i32[1] | 1];
  v29.i64[1] = v28[v27.i32[2] | 1];
  v27.i64[0] = 0xC0000000C0;
  v27.i64[1] = 0xC0000000C0;
  int32x4_t v30 = (int32x4_t)vandq_s8(veorq_s8(v29, v26), v27);
  v30.i32[3] = 0;
  {
    float32x2_t v68 = a2;
    uint16x4_t v72 = a1;
    int8x16_t v64 = v16;
    int32x4_t v56 = v30;
    int8x16_t v60 = v29;
    int32x4_t v30 = v56;
    int8x16_t v29 = v60;
    int8x16_t v16 = v64;
    int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v47 = v46;
    a2 = v68;
    a1 = v72;
    if (v47)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      int32x4_t v30 = v56;
      int8x16_t v29 = v60;
      int8x16_t v16 = v64;
      int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      a2 = v68;
      a1 = v72;
    }
  }
  v31.i64[0] = 0x100000001;
  v31.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vbicq_s8(v31, (int8x16_t)vceqzq_s32(v30)), v9[85]))) {
    return 0;
  }
  v32.i64[0] = -1;
  v32.i64[1] = -1;
  int8x16_t v33 = (int8x16_t)vshlq_u32((uint32x4_t)v29, v32);
  v34.i64[0] = 0x3F0000003FLL;
  v34.i64[1] = 0x3F0000003FLL;
  v35.i64[0] = 0x2000000020;
  v35.i64[1] = 0x2000000020;
  int32x4_t v36 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v33, v35) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v33, v34));
  if ((vaddq_s32(vaddq_s32(v36, vdupq_lane_s32(*(int32x2_t *)v36.i8, 1)), vdupq_laneq_s32(v36, 2)).u32[0] & 0x80000000) == 0) {
    return 0;
  }
  int32x4_t v37 = vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v16, v32), (int8x16_t)(*(_OWORD *)&v29 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80))), v36);
  int8x16_t v38 = (int8x16_t)vshrq_n_u32((uint32x4_t)v37, 0x1FuLL);
  {
    float32x2_t v69 = a2;
    float v73 = a1;
    int8x16_t v65 = v16;
    int32x4_t v57 = v37;
    int8x16_t v61 = v29;
    int8x16_t v53 = v38;
    int8x16_t v38 = v53;
    int32x4_t v37 = v57;
    int8x16_t v29 = v61;
    int8x16_t v16 = v65;
    int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v49 = v48;
    a2 = v69;
    a1 = v73;
    if (v49)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      int8x16_t v38 = v53;
      int32x4_t v37 = v57;
      int8x16_t v29 = v61;
      int8x16_t v16 = v65;
      int v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      a2 = v69;
      a1 = v73;
    }
  }
  v39.i64[0] = 0xFF000000FFLL;
  v39.i64[1] = 0xFF000000FFLL;
  int8x16_t v40 = (int8x16_t)vcgtq_s32(v37, v39);
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vsubq_s32((int32x4_t)vbicq_s8(v38, v40), (int32x4_t)v40), v9[85]))) {
    return 0;
  }
  *a1 = v16;
  *a2 = v29;
  return 1;
}

uint64_t try_quantize_rgb_delta(int8x16_t *a1, int8x16_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  int32x4_t v6 = vcvtq_s32_f32(vaddq_f32(a4, v5));
  int8x16_t v7 = (int8x16_t)vaddq_s32(v6, v6);
  int8x16_t v8 = vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)vdupq_n_s32(0x1FEu));
  uint64_t v9 = a3 - 4;
  float32x4_t v10 = &color_unquant_to_uquant_tables[512 * v9];
  v11.i32[0] = v10[v8.i32[0] | 1];
  v11.i32[1] = v10[v8.i32[1] | 1];
  v11.i64[1] = v10[v8.i32[2] | 1];
  v8.i64[0] = 0x10000000100;
  v8.i64[1] = 0x10000000100;
  int8x16_t v12 = vandq_s8(v7, v8);
  int32x4_t v13 = vcvtq_s32_f32(vaddq_f32(a5, v5));
  int8x16_t v14 = (int8x16_t)vsubq_s32(vaddq_s32(v13, v13), (int32x4_t)vorrq_s8(v11, v12));
  v14.i32[3] = 0;
  v13.i64[0] = 0x3F0000003FLL;
  v13.i64[1] = 0x3F0000003FLL;
  uint32x4_t v15 = (uint32x4_t)vaddq_s32((int32x4_t)v14, v13);
  int8x16_t v16 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    int32x4_t v56 = a2;
    uint64_t v59 = a1;
    uint64_t v50 = a3 - 4;
    int8x16_t v53 = v11;
    int8x16_t v45 = v14;
    int8x16_t v47 = v12;
    uint32x4_t v44 = v15;
    uint32x4_t v15 = v44;
    int8x16_t v14 = v45;
    int8x16_t v12 = v47;
    int8x16_t v11 = v53;
    uint64_t v9 = v50;
    int8x16_t v16 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v39 = v38;
    a2 = v56;
    a1 = v59;
    if (v39)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      uint32x4_t v15 = v44;
      int8x16_t v14 = v45;
      int8x16_t v12 = v47;
      int8x16_t v11 = v53;
      uint64_t v9 = v50;
      int8x16_t v16 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      a2 = v56;
      a1 = v59;
    }
  }
  v17.i64[0] = 0x7F0000007FLL;
  v17.i64[1] = 0x7F0000007FLL;
  int8x16_t v18 = (int8x16_t)vcgtq_u32(v17, v15);
  v19.i64[0] = 0x100000001;
  v19.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v18, v19), v16[85]))) {
    return 0;
  }
  v20.i64[0] = 0x7F0000007FLL;
  v20.i64[1] = 0x7F0000007FLL;
  v21.i64[0] = -1;
  v21.i64[1] = -1;
  int8x16_t v22 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v12, v21), vandq_s8(v14, v20));
  int8x16_t v23 = (int8x16_t)vaddq_s32((int32x4_t)v22, (int32x4_t)v22);
  int8x16_t v24 = &color_unquant_to_uquant_tables[512 * v9];
  v25.i32[0] = v24[v23.i32[0] | 1];
  v25.i32[1] = v24[v23.i32[1] | 1];
  v25.i64[1] = v24[v23.i32[2] | 1];
  v23.i64[0] = 0xC0000000C0;
  v23.i64[1] = 0xC0000000C0;
  int32x4_t v26 = (int32x4_t)vandq_s8(veorq_s8(v25, v22), v23);
  v26.i32[3] = 0;
  {
    int32x4_t v57 = a2;
    int8x16_t v60 = a1;
    int8x16_t v54 = v11;
    int32x4_t v48 = v26;
    int8x16_t v51 = v25;
    int32x4_t v26 = v48;
    int8x16_t v25 = v51;
    int8x16_t v11 = v54;
    int8x16_t v16 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v41 = v40;
    a2 = v57;
    a1 = v60;
    if (v41)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      int32x4_t v26 = v48;
      int8x16_t v25 = v51;
      int8x16_t v11 = v54;
      int8x16_t v16 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      a2 = v57;
      a1 = v60;
    }
  }
  v27.i64[0] = 0x100000001;
  v27.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vbicq_s8(v27, (int8x16_t)vceqzq_s32(v26)), v16[85]))) {
    return 0;
  }
  v29.i64[0] = -1;
  v29.i64[1] = -1;
  int8x16_t v30 = (int8x16_t)vshlq_u32((uint32x4_t)v25, v29);
  v31.i64[0] = 0x3F0000003FLL;
  v31.i64[1] = 0x3F0000003FLL;
  v32.i64[0] = 0x2000000020;
  v32.i64[1] = 0x2000000020;
  int32x4_t v33 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v30, v32) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v30, v31));
  if ((vaddq_s32(vaddq_s32(v33, vdupq_lane_s32(*(int32x2_t *)v33.i8, 1)), vdupq_laneq_s32(v33, 2)).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  int32x4_t v34 = vaddq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)v11, v29), (int8x16_t)(*(_OWORD *)&v25 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80))), v33);
  int8x16_t v35 = (int8x16_t)vshrq_n_u32((uint32x4_t)v34, 0x1FuLL);
  {
    int v58 = a2;
    int8x16_t v61 = a1;
    int8x16_t v55 = v11;
    int32x4_t v49 = v34;
    int8x16_t v52 = v25;
    int8x16_t v46 = v35;
    int8x16_t v35 = v46;
    int32x4_t v34 = v49;
    int8x16_t v25 = v52;
    int8x16_t v11 = v55;
    int8x16_t v16 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int v43 = v42;
    a2 = v58;
    a1 = v61;
    if (v43)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      int8x16_t v35 = v46;
      int32x4_t v34 = v49;
      int8x16_t v25 = v52;
      int8x16_t v11 = v55;
      int8x16_t v16 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      a2 = v58;
      a1 = v61;
    }
  }
  v36.i64[0] = 0xFF000000FFLL;
  v36.i64[1] = 0xFF000000FFLL;
  int8x16_t v37 = (int8x16_t)vcgtq_s32(v34, v36);
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vsubq_s32((int32x4_t)vbicq_s8(v35, v37), (int32x4_t)v37), v16[85]))) {
    return 0;
  }
  *a1 = v11;
  *a2 = v25;
  return 1;
}

uint64_t try_quantize_rgb_blue_contract(_OWORD *a1, _OWORD *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5 = vaddq_f32(a4, vsubq_f32(a4, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a4, (int32x4_t)a4), (int32x4_t)a4)));
  float32x4_t v6 = vaddq_f32(a5, vsubq_f32(a5, (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a5, (int32x4_t)a5), (int32x4_t)a5)));
  float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  int8x8_t v8 = (int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v5), (int8x16_t)vcgtq_f32(v5, v7)), vorrq_s8((int8x16_t)vcgtq_f32(v6, v7), (int8x16_t)vcltzq_f32(v6))));
  uint64_t v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
  {
    int8x16_t v30 = a1;
    float v28 = a2;
    int v27 = a3;
    int8x8_t v29 = v8;
    float32x4_t v25 = v5;
    float32x4_t v26 = v6;
    float32x4_t v5 = v25;
    float32x4_t v6 = v26;
    uint64_t v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
    int8x8_t v8 = v29;
    a3 = v27;
    a2 = v28;
    int v24 = v23;
    a1 = v30;
    if (v24)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      float32x4_t v5 = v25;
      float32x4_t v6 = v26;
      uint64_t v9 = (uint32x4_t *)&re::mtl::introspect_BlendOperation(BOOL)::enumTable;
      int8x8_t v8 = v29;
      a3 = v27;
      a1 = v30;
      a2 = v28;
    }
  }
  if (vaddvq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vand_s8(v8, (int8x8_t)0x1000100010001)), v9[85]))) {
    return 0;
  }
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  int32x4_t v11 = vcvtq_s32_f32(vaddq_f32(v5, v10));
  float32x4_t v12 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
  int32x4_t v13 = vsubq_s32(vaddq_s32(v11, v11), vcgeq_f32(vsubq_f32(v5, vcvtq_f32_s32(v11)), v12));
  int8x16_t v14 = &color_unquant_to_uquant_tables[512 * (uint64_t)a3 - 2048];
  unsigned int v15 = v14[v13.i32[0]];
  unsigned int v16 = v14[v13.i32[1]];
  unsigned int v17 = v14[v13.i32[2]];
  int32x4_t v18 = vcvtq_s32_f32(vaddq_f32(v6, v10));
  int32x4_t v19 = vsubq_s32(vaddq_s32(v18, v18), vcgeq_f32(vsubq_f32(v6, vcvtq_f32_s32(v18)), v12));
  if (v14[v19.i32[1]] + v14[v19.i32[0]] + v14[v19.i32[2]] <= v16 + v15 + v17) {
    return 0;
  }
  LODWORD(v20) = v14[v19.i32[0]];
  DWORD1(v20) = v14[v19.i32[1]];
  *((void *)&v20 + 1) = v14[v19.i32[2]];
  *(void *)&long long v21 = __PAIR64__(v16, v15);
  *((void *)&v21 + 1) = v17;
  *a1 = v20;
  *a2 = v21;
  return 1;
}

float quantize_rgb(_OWORD *a1, _OWORD *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  float32x4_t v6 = (float32x4_t)vdupq_n_s32(0xBDCCCCCD);
  float32x4_t v7 = (char *)&color_unquant_to_uquant_tables + 512 * a3 - 2048;
  float32x4_t v8 = (float32x4_t)vdupq_n_s32(0xBE4CCCCD);
  v9.i64[0] = 0xFF000000FFLL;
  v9.i64[1] = 0xFF000000FFLL;
  float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
  do
  {
    int32x4_t v11 = vmaxq_s32(vcvtq_s32_f32(vaddq_f32(a4, v5)), (int32x4_t)0);
    int32x4_t v12 = vsubq_s32(vaddq_s32(v11, v11), vcgeq_f32(vsubq_f32(a4, vcvtq_f32_s32(v11)), v6));
    unsigned int v13 = v7[v12.i32[0]];
    unsigned int v14 = v7[v12.i32[1]];
    unsigned int v15 = v7[v12.i32[2]];
    a4 = vaddq_f32(a4, v8);
    int32x4_t v16 = vminq_s32(vcvtq_s32_f32(vaddq_f32(a5, v5)), v9);
    int32x4_t v17 = vsubq_s32(vaddq_s32(v16, v16), vcgeq_f32(vsubq_f32(a5, vcvtq_f32_s32(v16)), v6));
    a5 = vaddq_f32(a5, v10);
  }
  while (v14 + v13 + v15 > v7[v17.i32[1]]
                          + v7[v17.i32[0]]
                          + v7[v17.i32[2]]);
  LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v7[v17.i32[0]];
  DWORD1(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v7[v17.i32[1]];
  *((void *)&v18 + 1) = v7[v17.i32[2]];
  *(void *)&long long v19 = __PAIR64__(v14, v13);
  *((void *)&v19 + 1) = v15;
  *a1 = v19;
  *a2 = v18;
  return *(float *)&v19;
}

unsigned char *quantize_rgbs(unsigned char *result, int a2, int8x16_t a3)
{
  float v3 = fmaxf(0.0038911 * *(float *)a3.i32, 0.0);
  float32x2_t v4 = (float32x2_t)vdup_n_s32(0x437F0000u);
  if ((float)(0.0038911 * *(float *)a3.i32) <= 255.0) {
    float v5 = v3;
  }
  else {
    float v5 = 255.0;
  }
  v6.i32[1] = a3.i32[1];
  v6.i32[0] = vextq_s8(a3, a3, 8uLL).u32[0];
  float32x4_t v7 = (char *)&color_unquant_to_uquant_tables + 512 * (uint64_t)a2 - 2048;
  int v8 = v7[((float)(v5 - (float)(int)(float)(v5 + 0.5)) >= -0.1) | (2 * (int)(float)(v5 + 0.5))];
  float32x2_t v9 = vmul_f32(v6, (float32x2_t)vdup_n_s32(0x3B7F00FFu));
  float32x2_t v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v9, v4), (int8x8_t)v4, (int8x8_t)vmaxnm_f32(v9, 0));
  int32x2_t v11 = vcvt_s32_f32(vadd_f32(v10, (float32x2_t)0x3F0000003F000000));
  int32x2_t v12 = vcge_f32(vsub_f32(v10, vcvt_f32_s32(v11)), (float32x2_t)vdup_n_s32(0xBDCCCCCD));
  int v13 = v7[2 * v11.i32[1] - v12.i32[1]];
  int v14 = v7[2 * v11.i32[0] - v12.i32[0]];
  float v15 = vmuls_lane_f32((float)(0.0038911* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)a3, 2), vaddq_f32((float32x4_t)a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 1))).f32[0])+ 1.0e-10, (float32x4_t)a3, 3)/ (float)((float)(v13 + v8 + v14) + 1.0e-10);
  float v16 = (float)(v15 * 256.0) + 0.5;
  if (v15 <= 0.0) {
    float v16 = 0.5;
  }
  BOOL v17 = v15 == 1.0;
  BOOL v18 = v15 < 1.0;
  float v19 = 256.5;
  if (v18 || v17) {
    float v19 = v16;
  }
  int v20 = (int)v19 & ~((int)v19 >> 31);
  if (v20 >= 255) {
    int v20 = 255;
  }
  *__n128 result = v8;
  result[1] = v13;
  result[2] = v14;
  result[3] = v7[(2 * v20) | 1];
  return result;
}

unsigned char *quantize_hdr_rgb(unsigned char *result, int a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  float32x4_t v5 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  float32x2x2_t v6 = (float32x2x2_t)vminnmq_f32(vmaxnmq_f32(a3, (float32x4_t)0), v5);
  int32x4_t v7 = (int32x4_t)vminnmq_f32(vmaxnmq_f32(a4, (float32x4_t)0), v5);
  if (*(float *)v7.i32 <= *(float *)&v7.i32[1] || *(float *)v7.i32 <= *(float *)&v7.i32[2])
  {
    int8x16_t v11 = (int8x16_t)vrev64q_s32((int32x4_t)v6);
    int8x16_t v10 = (int8x16_t)vrev64q_s32(v7);
    if (*(float *)&v7.i32[1] <= *(float *)&v7.i32[2])
    {
      int8x16_t v11 = vextq_s8(v11, v11, 0xCuLL);
      int8x16_t v10 = vextq_s8(v10, v10, 0xCuLL);
      int v9 = 2;
    }
    else
    {
      v11.i64[1] = (uint64_t)v6.val[1];
      v10.i64[1] = v7.i64[1];
      int v9 = 1;
    }
  }
  else
  {
    int v9 = 0;
    int8x16_t v10 = (int8x16_t)v7;
    int8x16_t v11 = (int8x16_t)v6;
  }
  float v12 = fmaxf(*(float *)v10.i32, 0.0);
  if (*(float *)v10.i32 > 65535.0) {
    float v12 = 65535.0;
  }
  float v13 = v12 - *(float *)&v10.i32[1];
  float v14 = vabds_f32((float)(v12 - (float)(v12 - *(float *)&v10.i32[1])) - (float)(v12 - *(float *)v11.i32), *(float *)&v11.i32[1]);
  float v15 = vabds_f32((float)(v12 - (float)(v12 - *(float *)&v10.i32[2])) - (float)(v12 - *(float *)v11.i32), *(float *)&v11.i32[2]);
  uint64_t v16 = a2 - 4;
  float32x2_t v17 = (float32x2_t)vextq_s8(v11, v11, 4uLL).u64[0];
  float32x2_t v18 = (float32x2_t)vextq_s8(v10, v10, 4uLL).u64[0];
  uint64_t v19 = 7;
  float32x2_t v20 = (float32x2_t)vdup_n_s32(0x477FFF00u);
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0xC77FFF00);
  while (1)
  {
    uint64_t v22 = v19;
    int v23 = (float *)((char *)&quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_cutoffs + 16 * v19);
    float v24 = v23[2];
    BOOL v25 = v13 <= *v23 && (float)(v12 - *(float *)&v10.i32[2]) <= *v23;
    BOOL v26 = v25 && (float)(v12 - *(float *)v11.i32) <= v23[1];
    BOOL v27 = v26 && v14 <= v24;
    if (v27 && v15 <= v24)
    {
      float v29 = quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_scales[v19];
      float v30 = quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_rscales[v19];
      int8x16_t v31 = (_DWORD *)((char *)&quantize_hdr_rgb(vfloat4,vfloat4,unsigned char *,quant_method)::mode_bits + 16 * v19);
      unsigned int v32 = (int)(float)((float)(v12 * v29) + 0.5);
      int v33 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v32) | 1u)];
      v4.f32[0] = v30 * (float)(int)(v32 & 0xFFFFFF00 | v33);
      float v34 = fmaxf(v4.f32[0] - *(float *)v11.i32, 0.0);
      float v35 = (float)(v4.f32[0] - *(float *)v11.i32) <= 65535.0 ? v34 : 65535.0;
      unsigned int v36 = (int)(float)((float)(v29 * v35) + 0.5);
      if (1 << v31[2] > (int)v36)
      {
        int v37 = 1 << v31[1];
        unsigned int v38 = 1 << (v31[3] - 1);
        int v39 = (int)(float)((float)(v29 * v35) + 0.5) & 0x3F | (v22 << 7) | (v32 >> 2) & 0x40;
        do
        {
          unsigned __int8 v40 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v39) | 1u)];
          int v41 = v39 & 0xC0;
          v39 -= v41 != (v40 & 0xC0);
        }
        while (v41 != (v40 & 0xC0));
        float32x2_t v4 = (float32x2_t)vdup_lane_s32((int32x2_t)v4, 0);
        float32x2_t v42 = vsub_f32(v4, v18);
        int32x2_t v43 = vcgt_f32(v42, v20);
        int32x2_t v44 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)v43, (int8x8_t)v20, (int8x8_t)vmaxnm_f32(v42, 0)), v29), (float32x2_t)0x3F0000003F000000));
        if (v37 > v44.i32[0] && v37 > v44.i32[1])
        {
          if (v22 > 7) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = ((1 << v22) & 0x5B) != 0 ? ((unsigned __int32)v44.i32[0] >> 6) & 1 : (v32 >> 9) & 1;
          }
          if (v22 > 7)
          {
            int v47 = 0;
          }
          else if (((1 << v22) & 0x5B) != 0)
          {
            int v47 = ((unsigned __int32)v44.i32[1] >> 6) & 1;
          }
          else
          {
            int v47 = ((1 << v22) & 0xA0) != 0 ? (v32 >> 10) & 1 : (v36 >> 6) & 1;
          }
          unsigned int v48 = v44.i8[0] & 0x3F | (v46 << 6) & 0xFFFFFF7F | (((v22 >> 1) & 1) << 7);
          do
          {
            unsigned __int8 v49 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v48) | 1u)];
            int v50 = v48 & 0xC0;
            v48 -= v50 != (v49 & 0xC0);
          }
          while (v50 != (v49 & 0xC0));
          int v51 = v44.i8[4] & 0x3F | (v47 << 6) | (32 * (_BYTE)v22) & 0x80;
          do
          {
            int v52 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v51) | 1u)];
            int v53 = v51 & 0xC0;
            v51 -= v53 != (v52 & 0xC0);
          }
          while (v53 != (v52 & 0xC0));
          v54.i32[0] = v49 & 0x3F;
          v54.i32[1] = v52 & 0xFFFFFF3F;
          *(float *)v43.i32 = v30 * (float)(int)(v36 & 0xFFFFFFC0 | v40 & 0x3F);
          float32x2_t v55 = vsub_f32(vsub_f32(vsub_f32(v4, vmul_n_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(void *)&v44 & 0xFFFFFFC0FFFFFFC0), v54)), v30)), (float32x2_t)vdup_lane_s32(v43, 0)), v17);
          int32x2_t v56 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v55, v20), (int8x8_t)v20, (int8x8_t)vmaxnm_f32(v55, v21)), v29), (float32x2_t)0x3F0000003F000000));
          float32x2_t v4 = (float32x2_t)vabs_s32(v56);
          int32x2_t v57 = vcgt_s32(vdup_n_s32(v38), (int32x2_t)v4);
          if (v57.i32[0] & v57.i32[1]) {
            break;
          }
        }
      }
    }
    uint64_t v19 = v22 - 1;
    if (!v22)
    {
      uint64_t v58 = 0;
      uint64_t v59 = (float *)v82;
      vst2_f32(v59, v6);
      v59 += 4;
      *uint64_t v59 = v6.val[1].f32[0];
      v82[5] = v7.i32[2];
      do
      {
        float v60 = *(float *)&v82[v58];
        float v61 = fmaxf(v60, 0.0);
        if (v60 <= 65020.0) {
          float v62 = v61;
        }
        else {
          float v62 = 65020.0;
        }
        *(float *)&v82[v58++] = v62;
      }
      while (v58 != 6);
      for (uint64_t i = 0; i != 4; ++i)
        result[i] = color_unquant_to_uquant_tables[512 * v16
                                                 + 1
                                                 + 2 * (int)(float)((float)(*(float *)&v82[i] * 0.0039062) + 0.5)];
      char v64 = 0;
      uint64_t v65 = 4;
      float32x4_t v66 = (char *)&color_unquant_to_uquant_tables[512 * v16];
      do
      {
        char v67 = v64;
        unsigned int v68 = (int)(float)((float)(*(float *)&v82[v65] * 0.0019531) + 0.5) ^ 0xFFFFFF80;
        do
        {
          char v69 = v66[(2 * v68) | 1];
          int v70 = v68 & 0xC0;
          v68 -= v70 != (v69 & 0xC0);
        }
        while (v70 != (v69 & 0xC0));
        result[v65] = v69;
        char v64 = 1;
        uint64_t v65 = 5;
      }
      while ((v67 & 1) == 0);
      return result;
    }
  }
  switch((int)v22)
  {
    case 0:
    case 2:
      unsigned int v71 = ((unsigned __int32)v56.i32[0] >> 6) & 1;
      goto LABEL_71;
    case 1:
    case 4:
      unsigned int v71 = ((unsigned __int32)v44.i32[0] >> 7) & 1;
      goto LABEL_71;
    case 3:
      unsigned int v71 = (v32 >> 9) & 1;
      goto LABEL_77;
    case 5:
      unsigned int v71 = (v36 >> 7) & 1;
      goto LABEL_77;
    case 6:
    case 7:
      unsigned int v71 = (v32 >> 11) & 1;
      goto LABEL_71;
    default:
      unsigned int v71 = 0;
LABEL_71:
      if (v22 > 7)
      {
        int v72 = 0;
      }
      else if (((1 << v22) & 0xE8) != 0)
      {
LABEL_77:
        int v72 = (v36 >> 6) & 1;
      }
      else
      {
        int v72 = ((unsigned __int32)v56.i32[1] >> 6) & 1;
        if (((1 << v22) & 5) == 0) {
          int v72 = ((unsigned __int32)v44.i32[1] >> 7) & 1;
        }
      }
      if ((v22 | 2) == 6) {
        int32x2_t v73 = (int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(v32), (uint32x2_t)0xFFFFFFF6FFFFFFF7);
      }
      else {
        int32x2_t v73 = vshr_n_s32(v56, 5uLL);
      }
      unsigned int v74 = v56.i8[0] & 0x1F | (v71 << 6) | (32 * (v73.i8[0] & 1)) | (v9 << 7);
      char v75 = (_BYTE)v9 << 6;
      do
      {
        unsigned __int8 v76 = color_unquant_to_uquant_tables[512 * v16 + ((2 * v74) | 1u)];
        int v77 = v74 & 0xF0;
        v74 -= v77 != (v76 & 0xF0);
      }
      while (v77 != (v76 & 0xF0));
      int v78 = (32 * v73.i8[4]) & 0x20 | v75 & 0x80 | v56.i8[4] & 0x1F | (v72 << 6);
      uint64_t v79 = (char *)&color_unquant_to_uquant_tables[512 * v16];
      do
      {
        char v80 = v79[(2 * v78) | 1];
        int v81 = v78 & 0xF0;
        v78 -= v81 != (v80 & 0xF0);
      }
      while (v81 != (v80 & 0xF0));
      *__n128 result = v33;
      result[1] = v40;
      result[2] = v49;
      result[3] = v52;
      result[4] = v76;
      result[5] = v80;
      break;
  }
  return result;
}

uint64_t try_quantize_alpha_delta(uint64_t a1, uint64_t a2, int a3, __n128 a4, __n128 a5)
{
  unsigned int v5 = (int)(float)(a4.n128_f32[3] + 0.5);
  float32x2x2_t v6 = &color_unquant_to_uquant_tables[512 * a3 - 2048];
  int v7 = v6[(4 * (v5 & 0x7F)) | 1];
  int v8 = v7 | (((v5 >> 7) & 1) << 8);
  int v9 = 2 * (int)(float)(a5.n128_f32[3] + 0.5) - v8;
  if ((v9 - 64) < 0xFFFFFF80) {
    return 0;
  }
  unsigned int v10 = v9 & 0x7F | (((2 * v5) & 0x100) >> 1);
  int v11 = v6[(2 * v10) | 1];
  if ((v10 ^ v11) > 0x3F || (v11 & 0x7F) + v8 + ((v11 << 25 >> 31) & 0xFFFFFF80) > 0x1FF) {
    return 0;
  }
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v7;
  *(_DWORD *)(a2 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v11;
  return 1;
}

uint64_t unpack_weights(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  long long v8 = *(_OWORD *)(a2 + 52);
  long long v9 = *(_OWORD *)(a2 + 68);
  long long v10 = *(_OWORD *)(a2 + 84);
  long long v11 = *(_OWORD *)(a2 + 100);
  if (a4)
  {
    if (*(unsigned char *)(result + 3))
    {
      unint64_t v12 = 0;
      uint64_t v13 = a3 + 6;
      v14.i64[0] = 0xFFFFFF00FFFFFF00;
      v14.i64[1] = 0xFFFFFF00FFFFFF00;
      v15.i64[0] = 0x300000003;
      v15.i64[1] = 0x300000003;
      do
      {
        uint64_t v16 = (const float *)(v13 + v12);
        uint8x8_t v17 = (uint8x8_t)vld1_dup_f32(v16);
        uint64_t v18 = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v17)));
        v19.i64[0] = 0x800000008;
        v19.i64[1] = 0x800000008;
        uint64_t v20 = a3;
        v21.i64[0] = 0x800000008;
        v21.i64[1] = 0x800000008;
        do
        {
          uint64_t v22 = (const float *)(v20 + 222);
          uint8x8_t v23 = (uint8x8_t)vld1_dup_f32(v22);
          v7.i32[0] = *(_DWORD *)(v20 + 1086);
          int32x4_t v7 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.i8));
          int8x16_t v24 = vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v23)), v14);
          int32x4_t v19 = vmlaq_s32(v19, v7, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)&v8, v24));
          int32x4_t v21 = vmlaq_s32(v21, v7, (int32x4_t)vqtbl2q_s8(*(int8x16x2_t *)&v10, v24));
          v20 += 216;
          --v18;
        }
        while (v18);
        uint64_t v25 = 4 * v12;
        *(uint32x4_t *)(a5 + v25) = vshlq_u32((uint32x4_t)v19, v15);
        *(uint32x4_t *)(a6 + v25) = vshlq_u32((uint32x4_t)v21, v15);
        v12 += 4;
        a3 += 4;
      }
      while (v12 < *(unsigned __int8 *)(result + 3));
    }
  }
  else if (*(unsigned char *)(result + 3))
  {
    unint64_t v26 = 0;
    uint64_t v27 = a3 + 6;
    v28.i64[0] = 0xFFFFFF00FFFFFF00;
    v28.i64[1] = 0xFFFFFF00FFFFFF00;
    v29.i64[0] = 0x300000003;
    v29.i64[1] = 0x300000003;
    do
    {
      float v30 = (const float *)(v27 + v26);
      uint8x8_t v31 = (uint8x8_t)vld1_dup_f32(v30);
      uint64_t v32 = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v31)));
      v33.i64[0] = 0x800000008;
      v33.i64[1] = 0x800000008;
      uint64_t v34 = a3;
      do
      {
        float v35 = (const float *)(v34 + 222);
        uint8x8_t v36 = (uint8x8_t)vld1_dup_f32(v35);
        v6.i32[0] = *(_DWORD *)(v34 + 1086);
        int32x4_t v6 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v6.i8));
        int32x4_t v33 = vmlaq_s32(v33, v6, (int32x4_t)vqtbl4q_s8(*(int8x16x4_t *)&v8, vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v36)), v28)));
        v34 += 216;
        --v32;
      }
      while (v32);
      *(uint32x4_t *)(a5 + 4 * v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = vshlq_u32((uint32x4_t)v33, v29);
      v26 += 4;
      a3 += 4;
    }
    while (v26 < *(unsigned __int8 *)(result + 3));
  }
  return result;
}

float32_t compute_symbolic_block_difference_2plane(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)a3) {
    return 1.0e30;
  }
  unpack_weights(a2, a3, a2+ 129888* *(unsigned __int8 *)(a2 + 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a3 + 4) + 11300848) + 11304946)+ 592, 1, (uint64_t)v48, (uint64_t)v47);
  unsigned int v8 = *(char *)(a3 + 3);
  __int16 v44 = 0;
  unpack_color_endpoints(*(_DWORD *)a1, *(unsigned __int8 *)(a3 + 8), (unsigned __int8 *)(a3 + 20), (unsigned __int8 *)&v44 + 1, &v44, (uint64_t)&v46, (__n128 *)&v45, v9, v10, v11, v12);
  uint64_t v16 = *(unsigned __int8 *)(a2 + 3);
  if (*(unsigned char *)(a2 + 3))
  {
    v13.i32[0] = 0;
    v14.i32[0] = *(_DWORD *)a1;
    int8x8_t v17 = (int8x8_t)vdup_lane_s32(vceq_s32(v14, v13), 0);
    v15.i32[0] = a4[222].u8[1];
    int8x8_t v18 = (int8x8_t)vdup_lane_s32(vceq_s32(v15, v13), 0);
    float v19 = *(float *)(a1 + 40);
    float32x4_t v20 = a4[221];
    int32x4_t v21 = (const float *)v48;
    uint64_t v22 = (const float *)v47;
    int8x16_t v23 = (int8x16_t)vceqq_s32(vdupq_n_s32(v8), (int32x4_t)xmmword_234378DD0);
    v24.i64[0] = 0x4000000040;
    v24.i64[1] = 0x4000000040;
    v25.i64[0] = 0x2000000020;
    v25.i64[1] = 0x2000000020;
    v26.i64[0] = 0x500000005;
    v26.i64[1] = 0x500000005;
    v27.i64[0] = 0x700000007;
    v27.i64[1] = 0x700000007;
    int32x4_t v28 = vdupq_n_s32(0x101u);
    int8x16_t v29 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8(vand_s8(vand_s8(v17, v18), (int8x8_t)0xFFFFFFFFFFFFLL), v18)), 0x1FuLL));
    float32x4_t v30 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
    float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x7149F2CAu);
    float32_t result = -1.0e30;
    float32x4_t v33 = 0uLL;
    do
    {
      int8x16_t v34 = (int8x16_t)vld1q_dup_f32(v21++);
      int8x16_t v35 = (int8x16_t)vld1q_dup_f32(v22++);
      int32x4_t v36 = (int32x4_t)vbslq_s8(v23, v35, v34);
      float32x4_t v38 = (float32x4_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v24, v36), v46), v36, v45), v25), v26);
      float32x4_t v37 = vcvtq_f32_s32((int32x4_t)vbslq_s8(v29, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v38, v27), v28), (int8x16_t)v38));
      v38.i32[0] = a4->i32[0];
      float v39 = a4[162].f32[0];
      if ((*(_DWORD *)(a1 + 4) & 0x40) != 0)
      {
        if (v37.f32[3] == 0.0) {
          return result;
        }
        *(float32x2_t *)v40.f32 = vmul_n_f32(vmul_laneq_f32(*(float32x2_t *)v37.f32, v37, 3), v19);
        v40.f32[2] = v19 * vmuls_lane_f32(v37.f32[3], v37, 2);
        v40.i32[3] = 1.0;
        v38.i32[1] = a4[54].i32[0];
        *(float32x2_t *)v38.f32 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v38.f32, v39), v19);
        v38.f32[2] = v19 * (float)(a4[108].f32[0] * v39);
        v38.i32[3] = 1.0;
        float32x4_t v37 = v40;
      }
      else
      {
        v38.i32[1] = a4[54].i32[0];
        v38.i32[2] = a4[108].i32[0];
        v38.i32[3] = a4[162].i32[0];
      }
      float32x4_t v41 = vsubq_f32(v38, v37);
      float32x4_t v42 = vminnmq_f32(vmaxq_f32(v41, vsubq_f32((float32x4_t)0, v41)), v30);
      int8x16_t v43 = (int8x16_t)vmulq_f32(v20, vmulq_f32(v42, v42));
      *(float32x2_t *)v43.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), *(float32x2_t *)v43.i8);
      float32x4_t v33 = vaddq_f32(v33, vminnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8), 0), v31));
      a4 = (float32x4_t *)((char *)a4 + 4);
      --v16;
    }
    while (v16);
  }
  else
  {
    v33.i32[0] = 0;
  }
  return v33.f32[0];
}

double compute_symbolic_block_difference_1plane(int *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a3)
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 1);
    if (v9 < 2) {
      unsigned int v10 = 0;
    }
    else {
      unsigned int v10 = *(unsigned __int16 *)(a2
    }
                                + ((unint64_t)(v9 - 2) << 11)
                                + 2 * *(unsigned __int16 *)(a3 + 6)
                                + 14660656);
    if (v9 == 1) {
      unsigned int v11 = 3072;
    }
    else {
      unsigned int v11 = (v9 << 10) - 2048;
    }
    unpack_weights(a2, a3, a2+ 129888* *(unsigned __int8 *)(a2+ 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a3 + 4) + 11300848)+ 11304946)+ 592, 0, (uint64_t)v49, 0);
    if (!v9)
    {
      a5.i64[0] = 0;
      return *(double *)a5.i64;
    }
    v12.i32[0] = 0;
    uint64_t v16 = 0;
    v13.i32[0] = *a1;
    int8x8_t v17 = (int8x8_t)vdup_lane_s32(vceq_s32(v13, v12), 0);
    uint64_t v18 = a2 + 1088 * v11 + 11317232;
    v14.i32[0] = a4[222].u8[1];
    int8x8_t v19 = (int8x8_t)vdup_lane_s32(vceq_s32(*(int32x2_t *)v14.i8, v12), 0);
    v14.i64[0] = 0xFFFFFFFFFFFFLL;
    int8x8_t v20 = vand_s8(vand_s8(v17, v19), (int8x8_t)0xFFFFFFFFFFFFLL);
    uint64_t v21 = 1088 * v10 + 1088 * v11 + a2 + 11317456;
    int32x4_t v22 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorn_s8(v20, v19)), 0x1FuLL));
    a5 = 0uLL;
    float32x4_t v43 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
    int32x4_t v44 = vdupq_n_s32(0x101u);
    float32x4_t v41 = (float32x4_t)vdupq_n_s32(0x7149F2CAu);
    int8x16_t v42 = (int8x16_t)v22;
    do
    {
      float32x4_t v45 = a5;
      __int16 v46 = 0;
      unpack_color_endpoints(*a1, *(unsigned __int8 *)(a3 + v16 + 8), (unsigned __int8 *)(a3 + 20 + 8 * v16), (unsigned __int8 *)&v46 + 1, &v46, (uint64_t)&v48, (__n128 *)&v47, (__n128)a5, *(double *)&v20, v14, (int32x4_t)v15);
      uint64_t v23 = *(unsigned __int8 *)(v18 + 1088 * v10 + v16 + 4);
      if (*(unsigned char *)(v18 + 1088 * v10 + v16 + 4))
      {
        int8x8_t v20 = *(int8x8_t *)v47.i8;
        v14.i32[0] = a1[10];
        int32x4_t v24 = (unsigned __int8 *)v21;
        float32x4_t v15 = a4[221];
        a5 = v45;
        v25.i64[0] = 0x4000000040;
        v25.i64[1] = 0x4000000040;
        v26.i64[0] = 0x2000000020;
        v26.i64[1] = 0x2000000020;
        v27.i64[0] = 0x500000005;
        v27.i64[1] = 0x500000005;
        v28.i64[0] = 0x700000007;
        v28.i64[1] = 0x700000007;
        while (1)
        {
          int v29 = *v24++;
          float32x4_t v30 = (const float *)&v49[v29];
          int32x4_t v31 = (int32x4_t)vld1q_dup_f32(v30);
          float32x4_t v34 = (float32x4_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(vsubq_s32(v25, v31), v48), v31, v47), v26), v27);
          float32x4_t v32 = vcvtq_f32_s32((int32x4_t)vbslq_s8(v42, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v34, v28), v44), (int8x16_t)v34));
          float32x4_t v33 = &a4->f32[v29];
          v34.f32[0] = *v33;
          float v35 = v33[648];
          if ((a1[1] & 0x40) != 0)
          {
            if (v32.f32[3] == 0.0)
            {
              a5.i32[0] = -246811958;
              return *(double *)a5.i64;
            }
            *(float32x2_t *)v36.f32 = vmul_n_f32(vmul_laneq_f32(*(float32x2_t *)v32.f32, v32, 3), *(float *)v14.i32);
            v36.f32[2] = *(float *)v14.i32 * vmuls_lane_f32(v32.f32[3], v32, 2);
            v36.i32[3] = 1.0;
            v34.f32[1] = v33[216];
            *(float32x2_t *)v34.f32 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)v34.f32, v35), *(float *)v14.i32);
            v34.f32[2] = *(float *)v14.i32 * (float)(v33[432] * v35);
            v34.i32[3] = 1.0;
            float32x4_t v32 = v36;
          }
          else
          {
            v34.f32[1] = v33[216];
            v34.f32[2] = v33[432];
            v34.f32[3] = v33[648];
          }
          float32x4_t v37 = vsubq_f32(v34, v32);
          float32x4_t v38 = vminnmq_f32(vmaxq_f32(v37, vsubq_f32((float32x4_t)0, v37)), v43);
          int8x16_t v39 = (int8x16_t)vmulq_f32(v15, vmulq_f32(v38, v38));
          *(float32x2_t *)v39.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), *(float32x2_t *)v39.i8);
          a5 = vaddq_f32(a5, vminnmq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8), 0), v41));
          if (!--v23) {
            goto LABEL_20;
          }
        }
      }
      a5 = v45;
LABEL_20:
      ++v16;
      v21 += 216;
    }
    while (v16 != v9);
  }
  else
  {
    a5.i32[0] = 1900671690;
  }
  return *(double *)a5.i64;
}

void compute_symbolic_block_difference_1plane_1partition(int *a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)a3)
  {
    unpack_weights(a2, a3, a2+ 129888* *(unsigned __int8 *)(a2+ 6 * *(unsigned __int16 *)(a2 + 2 * *(unsigned __int16 *)(a3 + 4) + 11300848)+ 11304946)+ 592, 0, (uint64_t)v69, 0);
    __int16 v66 = 0;
    unpack_color_endpoints(*a1, *(unsigned __int8 *)(a3 + 8), (unsigned __int8 *)(a3 + 20), (unsigned __int8 *)&v66 + 1, &v66, (uint64_t)&v68, (__n128 *)&v67, v8, v9, v10, v11);
    unint64_t v15 = *(unsigned __int8 *)(a2 + 3);
    if (*(unsigned char *)(a2 + 3))
    {
      v12.i32[0] = 0;
      v13.i32[0] = 0;
      unint64_t v16 = 0;
      v14.i8[0] = a4[222].i8[1];
      int8x16_t v17 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v14, v12), 0);
      v14.i32[0] = *a1;
      int8x16_t v18 = vornq_s8(vandq_s8(vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v14, v13), 0), v17), (int8x16_t)xmmword_23441F430), v17);
      __int32 v19 = v18.i32[1];
      __int32 v20 = v18.i32[2];
      __int32 v21 = v18.i32[3];
      if (v18.i32[0]) {
        unsigned int v22 = -1;
      }
      else {
        unsigned int v22 = 0;
      }
      int8x16_t v23 = (int8x16_t)vdupq_n_s32(v22);
      if (v19) {
        unsigned int v24 = -1;
      }
      else {
        unsigned int v24 = 0;
      }
      int8x16_t v25 = (int8x16_t)vdupq_n_s32(v24);
      if (v20) {
        unsigned int v26 = -1;
      }
      else {
        unsigned int v26 = 0;
      }
      int8x16_t v27 = (int8x16_t)vdupq_n_s32(v26);
      int32x4_t v28 = vdupq_lane_s32(*(int32x2_t *)v67.i8, 0);
      int32x4_t v29 = vdupq_lane_s32(*(int32x2_t *)v67.i8, 1);
      int32x4_t v30 = vdupq_laneq_s32(v67, 2);
      int32x4_t v31 = vdupq_laneq_s32(v67, 3);
      int32x4_t v32 = vdupq_lane_s32(*(int32x2_t *)v68.i8, 0);
      int32x4_t v33 = vdupq_lane_s32(*(int32x2_t *)v68.i8, 1);
      int32x4_t v34 = vdupq_laneq_s32(v68, 2);
      int32x4_t v35 = vdupq_laneq_s32(v68, 3);
      if (v21) {
        unsigned int v36 = -1;
      }
      else {
        unsigned int v36 = 0;
      }
      int8x16_t v37 = (int8x16_t)vdupq_n_s32(v36);
      float32x4_t v38 = a4[221];
      int32x4_t v39 = vdupq_n_s32(v15);
      int32x4_t v40 = vdupq_n_s32(0x101u);
      float32x4_t v41 = (float32x4_t)vdupq_n_s32(0x58635FA9u);
      int32x4_t v42 = (int32x4_t)xmmword_234378DD0;
      float32x4_t v43 = (int32x4_t *)v69;
      v44.i64[0] = 0x4000000040;
      v44.i64[1] = 0x4000000040;
      v45.i64[0] = 0x2000000020;
      v45.i64[1] = 0x2000000020;
      v46.i64[0] = 0x500000005;
      v46.i64[1] = 0x500000005;
      v47.i64[0] = 0x700000007;
      v47.i64[1] = 0x700000007;
      v48.i64[0] = 0x400000004;
      v48.i64[1] = 0x400000004;
      float32x4_t v49 = 0uLL;
      do
      {
        int32x4_t v50 = *v43++;
        int32x4_t v51 = vsubq_s32(v44, v50);
        int8x16_t v52 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v51, v32), v50, v28), v45), v46);
        int8x16_t v53 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v51, v33), v50, v29), v45), v46);
        int8x16_t v54 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v51, v34), v50, v30), v45), v46);
        int8x16_t v55 = (int8x16_t)vshlq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v51, v35), v50, v31), v45), v46);
        float32x4_t v56 = vsubq_f32(*a4, vcvtq_f32_s32((int32x4_t)vbslq_s8(v23, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v52, v47), v40), v52)));
        float32x4_t v57 = vminnmq_f32(vmaxq_f32(v56, vsubq_f32((float32x4_t)0, v56)), v41);
        float32x4_t v58 = vsubq_f32(a4[54], vcvtq_f32_s32((int32x4_t)vbslq_s8(v25, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v53, v47), v40), v53)));
        float32x4_t v59 = vsubq_f32(a4[108], vcvtq_f32_s32((int32x4_t)vbslq_s8(v27, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v54, v47), v40), v54)));
        float32x4_t v60 = vminnmq_f32(vmaxq_f32(v58, vsubq_f32((float32x4_t)0, v58)), v41);
        float32x4_t v61 = vminnmq_f32(vmaxq_f32(v59, vsubq_f32((float32x4_t)0, v59)), v41);
        float32x4_t v62 = vsubq_f32(a4[162], vcvtq_f32_s32((int32x4_t)vbslq_s8(v37, (int8x16_t)vmulq_s32(vshlq_s32((int32x4_t)v55, v47), v40), v55)));
        float32x4_t v63 = vminnmq_f32(vmaxq_f32(v62, vsubq_f32((float32x4_t)0, v62)), v41);
        int8x16_t v64 = (int8x16_t)vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vmulq_f32(v57, v57), v38.f32[0]), vmulq_lane_f32(vmulq_f32(v60, v60), *(float32x2_t *)v38.f32, 1)), vmulq_laneq_f32(vmulq_f32(v61, v61), v38, 2)), vmulq_laneq_f32(vmulq_f32(v63, v63), v38, 3));
        int8x16_t v65 = (int8x16_t)vcgtq_s32(v39, v42);
        int32x4_t v42 = vaddq_s32(v42, v48);
        float32x4_t v49 = vaddq_f32(v49, (float32x4_t)vandq_s8(v64, v65));
        v16 += 4;
        ++a4;
      }
      while (v16 < v15);
    }
  }
}

void prepare_angular_tables(void)
{
  uint64_t v0 = 0;
  uint64_t v1 = &cos_table;
  int v2 = &sin_table;
  do
  {
    uint64_t v3 = 0;
    ++v0;
    float32x2_t v4 = (float *)v2;
    unsigned int v5 = (float *)v1;
    do
    {
      __float2 v6 = __sincosf_stret((float)((float)v0 * 0.099733) * (float)v3);
      *float32x2_t v4 = v6.__sinval;
      v4 += 32;
      *unsigned int v5 = v6.__cosval;
      v5 += 32;
      ++v3;
    }
    while (v3 != 64);
    ++v1;
    ++v2;
  }
  while (v0 != 32);
}

void compute_angular_endpoints_1plane(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7 = 0;
  int v8 = ~(-1 << (a4 + 1));
  uint64_t v9 = 8;
  if (a1) {
    uint64_t v9 = 4;
  }
  unint64_t v10 = (unint64_t)*(unsigned int *)(a2 + v9) << 6;
  int32x4_t v11 = (float *)(a5 + 207008);
  int8x16_t v12 = (unsigned __int8 *)(a2 + 594);
  int32x4_t v13 = (_WORD *)(a2 + 66);
  do
  {
    if ((*v13 & (unsigned __int16)v8) != 0)
    {
      unsigned int v14 = *((unsigned __int8 *)v13 - 2);
      if (v14 >= 7) {
        unsigned int v14 = 7;
      }
      if (v14 >= a4) {
        int v15 = a4;
      }
      else {
        int v15 = v14;
      }
      compute_angular_endpoints_for_quant_levels(*v12, (const float *)(a3 + 4 * (v7 & 0xFFFFFFC0)), v15, v11 - 696, v11);
    }
    v7 += 64;
    v11 += 8;
    v12 += 129888;
    v13 += 3;
  }
  while (v10 != v7);
  uint64_t v16 = 20;
  if (a1) {
    uint64_t v16 = 16;
  }
  uint64_t v17 = *(unsigned int *)(a2 + v16);
  int8x16_t v18 = (float *)(a5 + 187840);
  __int32 v19 = (unsigned __int8 *)(a2 + 11304947);
  do
  {
    unint64_t v20 = *v19;
    if (v20 > 7)
    {
      *int8x16_t v18 = 0.0;
      float v22 = 1.0;
    }
    else
    {
      uint64_t v21 = a5 + 32 * *(v19 - 1) + 4 * v20;
      *int8x16_t v18 = *(float *)(v21 + 204224);
      float v22 = *(float *)(v21 + 207008);
    }
    v18[2048] = v22;
    ++v18;
    v19 += 6;
    --v17;
  }
  while (v17);
}

void compute_angular_endpoints_for_quant_levels(unsigned int a1, const float *a2, int a3, float *a4, float *a5)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v99 = *MEMORY[0x263EF8340];
  unint64_t v10 = steps_for_quant_level[a3];
  float32x4_t v11 = (float32x4_t)vdupq_n_s32(0x427C0000u);
  uint64_t v12 = a1;
  float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x4B400000u);
  v14.i64[0] = 0x3F0000003FLL;
  v14.i64[1] = 0x3F0000003FLL;
  do
  {
    *(int8x16_t *)&__b[v8 * 4] = vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(*(float32x4_t *)&a2[v8], v11), v13), v14);
    v9 += 4;
    v8 += 4;
  }
  while (v9 < a1);
  unint64_t v15 = 0;
  uint64_t v16 = 4 * a1;
  int8x16_t v17 = (int8x16_t)vdupq_n_s32(0x3FC90FDBu);
  float32x4_t v18 = 0uLL;
  float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3E8F5C29u);
  __asm { FMOV            V22.4S, #1.0 }
  float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
  v26.i64[0] = 0x8000000080000000;
  v26.i64[1] = 0x8000000080000000;
  int8x16_t v27 = (uint32x4_t *)&qword_26AF9F000;
  float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
  do
  {
    uint64_t v29 = 0;
    float32x4_t v30 = 0uLL;
    float32x4_t v31 = 0uLL;
    do
    {
      uint64_t v32 = (uint64_t)*(int *)&__b[v29] << 7;
      float32x4_t v30 = vaddq_f32(v30, *(float32x4_t *)((char *)&cos_table[v15] + v32));
      float32x4_t v31 = vaddq_f32(v31, *(float32x4_t *)((char *)&sin_table[v15] + v32));
      v29 += 4;
    }
    while (v16 != v29);
    if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_516, memory_order_acquire) & 1) == 0)
    {
      unsigned int v96 = a2;
      unint64_t v97 = v15;
      uint64_t v94 = v12;
      uint64_t v95 = v16;
      int8x16_t v92 = v17;
      float32x4_t v93 = _Q22;
      float32x4_t v90 = v25;
      float32x4_t v91 = v19;
      float32x4_t v88 = v30;
      float32x4_t v89 = v28;
      float32x4_t v87 = v31;
      int v40 = __cxa_guard_acquire(_MergedGlobals_516);
      float32x4_t v31 = v87;
      float32x4_t v30 = v88;
      float32x4_t v28 = v89;
      float32x4_t v25 = v90;
      v26.i64[0] = 0x8000000080000000;
      v26.i64[1] = 0x8000000080000000;
      float32x4_t v19 = v91;
      int8x16_t v17 = v92;
      float32x4_t v18 = 0uLL;
      _Q22 = v93;
      int8x16_t v27 = (uint32x4_t *)&qword_26AF9F000;
      uint64_t v12 = v94;
      uint64_t v16 = v95;
      a2 = v96;
      unint64_t v15 = v97;
      if (v40)
      {
        xmmword_26AF9FF20 = (__int128)v26;
        __cxa_guard_release(_MergedGlobals_516);
        float32x4_t v31 = v87;
        float32x4_t v30 = v88;
        float32x4_t v28 = v89;
        float32x4_t v25 = v90;
        v26.i64[0] = 0x8000000080000000;
        v26.i64[1] = 0x8000000080000000;
        float32x4_t v19 = v91;
        int8x16_t v17 = v92;
        float32x4_t v18 = 0uLL;
        _Q22 = v93;
        int8x16_t v27 = (uint32x4_t *)&qword_26AF9F000;
        uint64_t v12 = v94;
        uint64_t v16 = v95;
        a2 = v96;
        unint64_t v15 = v97;
      }
    }
    float32x4_t v33 = vdivq_f32(v31, v30);
    float32x4_t v34 = vmaxq_f32(v33, vsubq_f32(v18, v33));
    int8x16_t v35 = (int8x16_t)vcgtq_f32(vmaxq_f32(v34, vsubq_f32(v18, v34)), _Q22);
    float32x4_t v36 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v34, v26), v17);
    float32x4_t v37 = (float32x4_t)vbslq_s8(v35, (int8x16_t)vdivq_f32(_Q22, v34), (int8x16_t)v34);
    float32x4_t v38 = vdivq_f32(v37, vaddq_f32(vmulq_f32(vmulq_f32(v37, v37), v19), _Q22));
    float32x4_t v39 = (float32x4_t)vbslq_s8(v35, (int8x16_t)vsubq_f32(v36, v38), (int8x16_t)v38);
    *(float32x4_t *)&__b[4 * v15 + 1216] = vmulq_f32((float32x4_t)veorq_s8(vbslq_s8((int8x16_t)vcgtq_u32(v27[242], (uint32x4_t)v30), (int8x16_t)v39, (int8x16_t)vsubq_f32(v25, v39)), vandq_s8((int8x16_t)v31, v26)), v28);
    v15 += 4;
  }
  while (v15 < v10);
  unint64_t v41 = 0;
  float32x4_t v42 = (float32x4_t)xmmword_23441F450;
  int32x4_t v43 = vdupq_n_s32((int)v10 + 3);
  v44.i64[0] = 0x200000002;
  v44.i64[1] = 0x200000002;
  __asm { FMOV            V3.4S, #4.0 }
  do
  {
    v46.i64[0] = 0xC3000000C3000000;
    v46.i64[1] = 0xC3000000C3000000;
    v47.i64[0] = 0x4300000043000000;
    v47.i64[1] = 0x4300000043000000;
    float32x4_t v48 = 0uLL;
    float32x4_t v49 = a2;
    uint64_t v50 = v12;
    float32x4_t v51 = 0uLL;
    float32x4_t v52 = 0uLL;
    do
    {
      float v53 = *v49++;
      float32x4_t v54 = vsubq_f32(vmulq_n_f32(v42, v53), *(float32x4_t *)&__b[4 * v41 + 1216]);
      float32x4_t v55 = vrndnq_f32(v54);
      float32x4_t v56 = vsubq_f32(v54, v55);
      float32x4_t v52 = vaddq_f32(v52, vmulq_f32(v56, v56));
      int8x16_t v57 = (int8x16_t)vcgtq_f32(v47, v55);
      float32x4_t v47 = (float32x4_t)vbslq_s8(v57, (int8x16_t)v55, (int8x16_t)v47);
      float32x4_t v58 = (float32x4_t)vbicq_s8((int8x16_t)v48, v57);
      float32x4_t v59 = vaddq_f32(v56, v56);
      float32x4_t v48 = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v55, v47), (int8x16_t)vsubq_f32(vaddq_f32(v58, _Q22), v59), (int8x16_t)v58);
      int8x16_t v60 = (int8x16_t)vcgtq_f32(v55, v46);
      float32x4_t v46 = (float32x4_t)vbslq_s8(v60, (int8x16_t)v55, (int8x16_t)v46);
      float32x4_t v61 = (float32x4_t)vbicq_s8((int8x16_t)v51, v60);
      float32x4_t v51 = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v55, v46), (int8x16_t)vaddq_f32(v59, vaddq_f32(v61, _Q22)), (int8x16_t)v61);
      --v50;
    }
    while (v50);
    *(float32x4_t *)&__b[4 * v41 + 1088] = v47;
    *(int32x4_t *)&__b[4 * v41 + 960] = vmaxq_s32(vminq_s32(vcvtq_s32_f32(vaddq_f32(vsubq_f32(v46, v47), _Q22)), v43), v44);
    float32x4_t v62 = vdivq_f32(_Q22, v42);
    float32x4_t v63 = vmulq_f32(v62, v62);
    *(float32x4_t *)&__b[4 * v41 + 832] = vmulq_f32(v63, v52);
    *(float32x4_t *)&__b[4 * v41 + 704] = vmulq_f32(v63, v48);
    *(float32x4_t *)&__b[4 * v41 + 576] = vmulq_f32(v63, v51);
    float32x4_t v42 = vaddq_f32(v42, _Q3);
    v41 += 4;
  }
  while (v41 < v10);
  memset_pattern16(__b, &unk_23441F460, 16 * v10 + 64);
  uint64_t v66 = 0;
  if (v10 <= 1) {
    uint64_t v67 = 1;
  }
  else {
    uint64_t v67 = v10;
  }
  do
  {
    uint64_t v68 = *(int *)&__b[4 * v66 + 960];
    v64.i32[0] = *(_DWORD *)&__b[4 * v66 + 832];
    v65.f32[0] = v64.f32[0] + *(float *)&__b[4 * v66 + 704];
    float v69 = *(float *)&__b[4 * v66 + 576];
    float32x4_t v70 = *(float32x4_t *)&__b[16 * v68];
    LODWORD(v71) = v64.i32[0];
    *((float *)&v71 + 1) = (float)v66;
    int v72 = v68 - 1;
    float32x4_t v73 = *(float32x4_t *)&__b[16 * (int)v68 - 16];
    *(int16x4_t *)v74.i8 = vdup_lane_s16(vmovn_s32(vcgtq_f32(v70, v64)), 0);
    v64.f32[0] = v64.f32[0] + v69;
    v75.i64[1] = 1065353216;
    v75.i32[0] = v65.i32[0];
    *(float *)&v75.i32[1] = (float)v66;
    int16x4_t v76 = vdup_lane_s16(vmovn_s32(vcgtq_f32(v73, v65)), 0);
    v65.f32[0] = v65.f32[0] + v69;
    float32x4_t v77 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(v76), v75, (int8x16_t)v73);
    *(int8x16_t *)&__b[16 * v68] = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v74.i8), (int8x16_t)v71, (int8x16_t)v70);
    LODWORD(v71) = v64.i32[0];
    *((float *)&v71 + 1) = (float)v66;
    LODWORD(v68) = v68 - 2;
    float32x4_t v78 = *(float32x4_t *)&__b[16 * (int)v68];
    v74.i64[1] = 1065353216;
    v74.i32[0] = v65.i32[0];
    *(float *)&v74.i32[1] = (float)v66;
    float32x4_t v65 = (float32x4_t)vcgtq_f32(v78, v65);
    *(int16x4_t *)v65.f32 = vdup_lane_s16(vmovn_s32((int32x4_t)v65), 0);
    *(int8x16_t *)&__b[16 * v72] = vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(vmovn_s32(vcgtq_f32(v77, v64)), 0)), (int8x16_t)v71, (int8x16_t)v77);
    float32x4_t v64 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v65.f32), v74, (int8x16_t)v78);
    *(float32x4_t *)&__b[16 * (int)v68] = v64;
    ++v66;
  }
  while (v67 != v66);
  uint64_t v79 = steps_for_quant_level;
  if ((a3 + 1) > 1) {
    uint64_t v80 = (a3 + 1);
  }
  else {
    uint64_t v80 = 1;
  }
  do
  {
    unsigned int v81 = *v79++;
    char v82 = (float *)&__b[16 * v81];
    float v83 = v82[2];
    LODWORD(v82) = (int)v82[1] & ~((int)v82[1] >> 31);
    float v84 = *(float *)&__b[4 * v82 + 1088] + v83;
    float v85 = 1.0 / (float)((float)(int)v82 + 1.0);
    float v86 = *(float *)&__b[4 * v82 + 1216];
    *a4++ = (float)(v86 + v84) * v85;
    *a5++ = v85 * (float)(v86 + (float)((float)(v84 + (float)v81) + -1.0));
    --v80;
  }
  while (v80);
}

void compute_angular_endpoints_2planes(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = a1[2];
  int v28 = ~(-1 << (a3 + 1));
  uint64_t v8 = (float *)(a4 + 228960);
  unint64_t v9 = (float *)(a4 + 204224);
  unint64_t v10 = (unsigned __int8 *)a1 + 65;
  float32x4_t v11 = (unsigned __int8 *)a1 + 594;
  do
  {
    if ((*(_WORD *)(v10 + 3) & (unsigned __int16)v28) != 0)
    {
      unsigned int v12 = *v11;
      unsigned int v13 = *v10;
      if (v13 >= 7) {
        unsigned int v13 = 7;
      }
      if (v13 >= a3) {
        int v14 = a3;
      }
      else {
        int v14 = v13;
      }
      compute_angular_endpoints_for_quant_levels(*v11, (const float *)(a2 + 4 * (v5 & 0xFFFFFFC0)), v14, v9, v9 + 696);
      compute_angular_endpoints_for_quant_levels(v12, (const float *)(a2 + 4 * (v5 & 0xFFFFFFC0) + 128), v14, v8 - 696, v8);
      unint64_t v7 = a1[2];
    }
    ++v6;
    v8 += 8;
    v9 += 8;
    v5 += 64;
    v10 += 6;
    v11 += 129888;
  }
  while (v6 < v7);
  uint64_t v16 = a1[5];
  uint64_t v15 = a1[6];
  if (v16 < v15)
  {
    uint64_t v17 = v15 - v16;
    uint64_t v18 = a4 + 4 * v16;
    float32x4_t v19 = (float *)(v18 + 217984);
    unint64_t v20 = (unsigned __int8 *)a1 + 6 * v16 + 11304947;
    uint64_t v21 = (_DWORD *)(v18 + 187840);
    do
    {
      unint64_t v22 = *v20;
      if (v22 > 7)
      {
        _DWORD *v21 = 0;
        v21[2048] = 1065353216;
        float v24 = 1.0;
        *(v19 - 2048) = 0.0;
      }
      else
      {
        int8x16_t v23 = (float *)(a4 + 32 * *(v20 - 1) + 4 * v22);
        _DWORD *v21 = *((_DWORD *)v23 + 51056);
        v21[2048] = *((_DWORD *)v23 + 51752);
        *(v19 - 2048) = v23[56544];
        float v24 = v23[57240];
      }
      *v19++ = v24;
      v20 += 6;
      ++v21;
      --v17;
    }
    while (v17);
  }
}

void init_partition_tables(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 48) = 1;
  operator new[]();
}

BOOL generate_one_partition_info_entry(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5)
{
  __int16 v76 = a3;
  uint64_t v91 = *MEMORY[0x263EF8340];
  unsigned int v8 = a1[3];
  int32x4_t v90 = 0uLL;
  unsigned int v9 = a1[2];
  if (a1[2])
  {
    char v10 = 0;
    unsigned int v11 = 65537
        * ((-287438703 * (a3 + (a2 << 10) - 1024)) ^ ((-287438703 * (a3 + (a2 << 10) - 1024)) >> 5));
    unsigned int v12 = v11 ^ (v11 >> 7) ^ ((v11 ^ (v11 >> 7)) >> 3);
    unsigned int v13 = v12 ^ (v12 << 6);
    unsigned int v14 = v13 ^ (v13 >> 17);
    uint64_t v15 = a5 + 8;
    char v16 = v8 < 0x20;
    unsigned int v17 = (v14 & 0xF) * (v14 & 0xF);
    HIDWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v14;
    LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v14;
    unsigned int v19 = (v14 >> 4) * (v14 >> 4);
    unsigned int v20 = ((v14 >> 8) & 0xF) * ((v14 >> 8) & 0xF);
    unsigned int v21 = ((unsigned __int16)v14 >> 12) * ((unsigned __int16)v14 >> 12);
    unsigned int v22 = (HIWORD(v13) & 0xF) * (HIWORD(v13) & 0xF);
    unsigned int v23 = ((v13 >> 20) & 0xF) * ((v13 >> 20) & 0xF);
    unsigned int v24 = (HIBYTE(v13) & 0xF) * (HIBYTE(v13) & 0xF);
    unsigned int v25 = (v13 >> 28) * (v13 >> 28);
    unsigned int v26 = ((v13 >> 18) & 0xF) * ((v13 >> 18) & 0xF);
    unsigned int v27 = ((v13 >> 22) & 0xF) * ((v13 >> 22) & 0xF);
    unsigned int v28 = ((v13 >> 26) & 0xF) * ((v13 >> 26) & 0xF);
    unsigned int v29 = ((v18 >> 30) & 0xF) * ((v18 >> 30) & 0xF);
    if ((v76 & 2) != 0) {
      char v30 = 4;
    }
    else {
      char v30 = 5;
    }
    unsigned int v84 = v14 >> 14;
    unsigned int v83 = v14 >> 10;
    if (a2 == 3) {
      char v31 = 6;
    }
    else {
      char v31 = 5;
    }
    unsigned int v81 = v14 >> 2;
    unsigned int v82 = v14 >> 6;
    if (v76) {
      char v32 = v30;
    }
    else {
      char v32 = v31;
    }
    unsigned int v33 = v17 >> v32;
    if (v76) {
      char v34 = v31;
    }
    else {
      char v34 = v30;
    }
    if ((v76 & 0x10) != 0) {
      char v35 = v32;
    }
    else {
      char v35 = v34;
    }
    unsigned int v36 = v20 >> v32;
    unsigned int v88 = v21 >> v34;
    char v89 = v19 >> v34;
    unsigned int v37 = v22 >> v32;
    unsigned int v38 = v24 >> v32;
    unsigned int v86 = v25 >> v34;
    unsigned int v87 = v23 >> v34;
    unsigned int v79 = v27 >> v35;
    unsigned int v80 = v26 >> v35;
    unsigned int v78 = v28 >> v35;
    unsigned int v39 = 0;
    unsigned int v77 = v29 >> v35;
    unsigned int v40 = a1[1];
    unsigned int v41 = v40;
    do
    {
      if (v41)
      {
        unsigned int v42 = 0;
        unsigned int v85 = v39;
        int v43 = v39 << v16;
        unsigned int v44 = *a1;
        char v45 = v84 + v43 * v78;
        char v46 = v83 + v43 * v77;
        unsigned int v47 = v82 + v43 * v80;
        char v48 = v81 + v43 * v79;
        do
        {
          if (v44)
          {
            uint64_t v49 = 0;
            do
            {
              unsigned __int8 v50 = 0;
              unsigned int v51 = (v45 + (v42 << v16) * v89 + (v49 << v16) * (_BYTE)v33) & 0x3F;
              unsigned int v52 = (v46
                   + (v42 << v16) * (_BYTE)v88
                   + (v49 << v16) * (_BYTE)v36) & 0x3F;
              unsigned int v53 = (v47 + (v42 << v16) * v87 + (v49 << v16) * v37) & 0x3F;
              unsigned int v54 = (v48
                   + (v42 << v16) * (_BYTE)v86
                   + (v49 << v16) * (_BYTE)v38) & 0x3F;
              if (a2 < 4) {
                unsigned int v54 = 0;
              }
              if (a2 < 3) {
                unsigned int v53 = 0;
              }
              if (a2 < 2) {
                unsigned int v52 = 0;
              }
              if (v51 < v52 || v51 < v53 || v51 < v54)
              {
                if (v52 >= v53 && v52 >= v54)
                {
                  unsigned __int8 v50 = 1;
                }
                else if (v53 >= v54)
                {
                  unsigned __int8 v50 = 2;
                }
                else
                {
                  unsigned __int8 v50 = 3;
                }
              }
              uint64_t v58 = v90.i32[v50];
              v90.i32[v50] = v58 + 1;
              *(unsigned char *)(a5 + 216 * v50 + v58 + 224) = v10 + v49;
              *(unsigned char *)(v15 + v49) = v50;
              unsigned int v44 = *a1;
              ++v49;
            }
            while (v49 < v44);
            unsigned int v40 = a1[1];
            v15 += v49;
            v10 += v49;
          }
          ++v42;
        }
        while (v42 < v40);
        unsigned int v9 = a1[2];
        unsigned int v41 = v40;
        unsigned int v39 = v85;
      }
      ++v39;
    }
    while (v39 < v9);
  }
  if (a2)
  {
    uint64_t v59 = 0;
    uint64_t v60 = a5 + 224;
    do
    {
      uint64_t v61 = v90.i32[v59];
      int v62 = (v61 + 3) & 0xFFFFFFFC;
      if ((int)v61 < v62)
      {
        float32x4_t v63 = (unsigned char *)(a5 + 216 * v59 + v61 + 223);
        uint64_t v64 = v62 - v61;
        float32x4_t v65 = (unsigned char *)(v60 + v61);
        do
        {
          *v65++ = *v63;
          --v64;
        }
        while (v64);
      }
      ++v59;
      v60 += 216;
    }
    while (v59 != a2);
  }
  if (v90.i32[0])
  {
    if (v90.i32[1])
    {
      if (v90.i32[2])
      {
        if (v90.i32[3]) {
          int v66 = 4;
        }
        else {
          int v66 = 3;
        }
      }
      else
      {
        int v66 = 2;
      }
    }
    else
    {
      int v66 = 1;
    }
  }
  else
  {
    int v66 = 0;
  }
  *(_WORD *)a5 = v66;
  *(_WORD *)(a5 + 2) = v76;
  uint64_t v67 = (uint64_t)&a1[24 * a4 + 14683248];
  uint64_t v68 = (uint64_t)&a1[16 * a4 + 14666864];
  if (a2 != 2) {
    uint64_t v68 = 0;
  }
  if (a2 != 3) {
    uint64_t v67 = v68;
  }
  if (a2 == 4) {
    float v69 = &a1[32 * a4 + 14707824];
  }
  else {
    float v69 = (unsigned __int8 *)v67;
  }
  v70.i64[1] = v90.i64[1];
  *(int16x4_t *)v70.i8 = vmovn_s32(v90);
  *(_DWORD *)(a5 + 4) = vmovn_s16(v70).u32[0];
  if (v69)
  {
    if (a2) {
      bzero(v69, 8 * a2);
    }
    if (a1[3] >= 0x40u) {
      uint64_t v71 = 64;
    }
    else {
      uint64_t v71 = a1[3];
    }
    if (v71)
    {
      for (uint64_t i = 0; i != v71; ++i)
      {
        uint64_t v73 = *(unsigned __int8 *)(a5 + a1[i + 14666800] + 8);
        *(void *)&v69[8 * v73] |= 1 << i;
      }
    }
  }
  return v66 == a2;
}

void build_partition_table_for_one_partition_count(unsigned __int8 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  v31[2] = *MEMORY[0x263EF8340];
  char v10 = &a1[4 * a4 - 4];
  *((_DWORD *)v10 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  unsigned int v29 = v10 + 48;
  *((_DWORD *)v10 + 8) = 0;
  unsigned int v27 = v10 + 32;
  if (a2)
  {
    if (a4 > a3) {
      return;
    }
    int v11 = 1;
  }
  else
  {
    int v11 = 2;
  }
  int v26 = v11;
  bzero(v30, 0x400uLL);
  unsigned int v12 = 0;
  int v13 = 0;
  uint64_t v28 = a4 - 2;
  do
  {
    for (uint64_t i = 0; i != 1024; ++i)
    {
      if (v13 == 1)
      {
        if (v30[i]) {
          continue;
        }
        uint64_t v15 = v12;
        BOOL one_partition_info_entry = generate_one_partition_info_entry(a1, a4, i, v12, a5 + 1088 * v12);
LABEL_12:
        uint64_t v17 = a1[3];
        uint64_t v18 = a6 + 56 * v12;
        *(void *)(v18 + 48) = 0;
        *(_OWORD *)(v18 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
        *(_OWORD *)(v18 + 32) = 0u;
        *(_OWORD *)uint64_t v18 = 0u;
        v31[0] = -1;
        v31[1] = -1;
        if (v17)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          int v21 = 0;
          do
          {
            uint64_t v22 = *(unsigned __int8 *)(a5 + 1088 * v15 + 8 + v20);
            int v23 = *((_DWORD *)v31 + v22);
            if (v23 < 0)
            {
              *((_DWORD *)v31 + v22) = v21;
              int v23 = v21++;
            }
            *(void *)(v18 + 8 * (v20++ >> 5)) |= (uint64_t)v23 << (v19 & 0x3E);
            v19 += 2;
          }
          while (v17 != v20);
        }
        if (v12)
        {
          unsigned int v24 = 0;
          while (1)
          {
            unsigned int v25 = (void *)(a6 + 8 * v24);
            if (*(void *)v18 == *v25
              && *(void *)(v18 + 8) == v25[1]
              && *(void *)(v18 + 16) == v25[2]
              && *(void *)(v18 + 24) == v25[3]
              && *(void *)(v18 + 32) == v25[4]
              && *(void *)(v18 + 40) == v25[5]
              && *(void *)(v18 + 48) == v25[6])
            {
              break;
            }
            v24 += 7;
            if (!--v15) {
              goto LABEL_27;
            }
          }
        }
        else
        {
LABEL_27:
          if (one_partition_info_entry)
          {
            if (v13) {
              continue;
            }
            *(_WORD *)&a1[2048 * v28 + 14660656 + 2 * i] = v12;
            ++*v27;
            ++*v29;
            v30[i] = 1;
LABEL_32:
            ++v12;
            continue;
          }
        }
        if (v13 != 1) {
          continue;
        }
        *(_WORD *)&a1[2048 * v28 + 14660656 + 2 * i] = v12;
        ++*v29;
        goto LABEL_32;
      }
      uint64_t v15 = v12;
      BOOL one_partition_info_entry = generate_one_partition_info_entry(a1, a4, i, v12, a5 + 1088 * v12);
      if (v13 || one_partition_info_entry) {
        goto LABEL_12;
      }
    }
    ++v13;
  }
  while (v13 != v26);
}

uint64_t find_best_partition_candidates(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, double a7, double a8, double a9, double a10)
{
  uint64_t v12 = a1;
  uint64_t v274 = *MEMORY[0x263EF8340];
  int v13 = (void *)(a1 + 14707848);
  unsigned int v14 = (uint64_t *)(a1 + 14683264);
  uint64_t v15 = (void *)(a1 + 14666872);
  unint64_t v16 = *(unsigned __int8 *)(a1 + 3);
  uint64_t v17 = a3;
  if (v16 >= 0x15)
  {
    if (v16 >= 0x20) {
      float v18 = flt_23441F480[v16 < 0x2A];
    }
    else {
      float v18 = 0.04;
    }
  }
  else
  {
    float v18 = 0.03;
  }
  int v19 = 0;
  float32x4_t v20 = *(float32x4_t *)(a2 + 3536);
  if (a3 <= 2) {
    int v21 = 2;
  }
  else {
    int v21 = a3;
  }
  uint64_t v22 = (v21 - 1);
  int v23 = (__int32 *)(a2 + 4 * (0x239E9 % v16));
  long long v24 = 0uLL;
  LODWORD(a10) = 1.0;
  do
  {
    if (v19)
    {
      memset(v269, 0, 64);
      unsigned int v25 = v272;
      int v26 = (__int32 *)a2;
      unint64_t v27 = v16;
      v270[0] = 0;
      do
      {
        unsigned int v28 = *v25++;
        v29.i32[0] = *v26;
        v29.i32[1] = v26[216];
        v29.i32[2] = v26[432];
        v29.i32[3] = v26[648];
        float32x4_t v30 = vaddq_f32(v269[v28], v29);
        v269[v28] = v30;
        ++*((unsigned char *)v270 + v28);
        ++v26;
        --v27;
      }
      while (v27);
      uint64_t v31 = 0;
      do
      {
        v30.i8[0] = *((unsigned char *)v270 + v31);
        float32x4_t v30 = vmulq_n_f32(v269[v31], 1.0 / (float)v30.u32[0]);
        v264[v31++] = v30;
      }
      while (a3 != v31);
    }
    else
    {
      unint64_t v45 = 0;
      v46.i32[0] = *v23;
      v46.i32[1] = v23[216];
      v46.i32[2] = v23[432];
      v46.i32[3] = v23[648];
      v264[0] = v46;
      float v47 = 0.0;
      do
      {
        v48.i32[0] = *(_DWORD *)(a2 + v45);
        v48.i32[1] = *(_DWORD *)(a2 + v45 + 864);
        v48.i32[2] = *(_DWORD *)(a2 + v45 + 1728);
        v48.i32[3] = *(_DWORD *)(a2 + v45 + 2592);
        float32x4_t v49 = vsubq_f32(v48, v46);
        int8x16_t v50 = (int8x16_t)vmulq_f32(v20, vmulq_f32(v49, v49));
        *(float32x2_t *)v50.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), *(float32x2_t *)v50.i8);
        *(float *)v50.i32 = vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8).f32[0];
        float v47 = v47 + *(float *)v50.i32;
        v269[0].i32[v45 / 4] = v50.i32[0];
        v45 += 4;
      }
      while (4 * v16 != v45);
      uint64_t v51 = 1;
      unsigned int v52 = 3 * a3 - 6;
      while (1)
      {
        uint64_t v53 = 0;
        float v54 = flt_23441F488[v52++];
        float v55 = v47 * v54;
        float v56 = 0.0;
        while (1)
        {
          float v56 = v56 + v269[0].f32[v53];
          if (v56 >= v55) {
            break;
          }
          if (v16 == ++v53)
          {
            LODWORD(v53) = v16;
            break;
          }
        }
        if (v53 >= (int)v16 - 1) {
          LODWORD(v53) = v16 - 1;
        }
        int8x16_t v57 = (__int32 *)(a2 + 4 * v53);
        v58.i32[0] = *v57;
        v58.i32[1] = v57[216];
        v58.i32[2] = v57[432];
        v58.i32[3] = v57[648];
        v264[v51] = v58;
        if (v51 == v22) {
          break;
        }
        ++v51;
        float v47 = 0.0;
        uint64_t v59 = (float *)v269;
        uint64_t v60 = (__int32 *)a2;
        unint64_t v61 = v16;
        do
        {
          v62.i32[0] = *v60;
          v62.i32[1] = v60[216];
          v62.i32[2] = v60[432];
          v62.i32[3] = v60[648];
          float32x4_t v63 = vsubq_f32(v62, v58);
          int8x16_t v64 = (int8x16_t)vmulq_f32(v20, vmulq_f32(v63, v63));
          *(float32x2_t *)v64.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(float32x2_t *)v64.i8);
          float v65 = vpadd_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0];
          if (v65 >= *v59) {
            float v65 = *v59;
          }
          float v47 = v47 + v65;
          *v59++ = v65;
          ++v60;
          --v61;
        }
        while (v61);
      }
    }
    uint64_t v32 = 0;
    v269[0].i32[0] = 0;
    do
    {
      uint64_t v33 = 0;
      unsigned int v34 = 0;
      char v35 = (__int32 *)(a2 + 4 * v32);
      v36.i32[0] = *v35;
      v36.i32[1] = v35[216];
      v36.i32[2] = v35[432];
      v36.i32[3] = v35[648];
      float v37 = 3.4028e38;
      do
      {
        float32x4_t v38 = vsubq_f32(v36, v264[v33]);
        int8x16_t v39 = (int8x16_t)vmulq_f32(v20, vmulq_f32(v38, v38));
        *(float32x2_t *)v39.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), *(float32x2_t *)v39.i8);
        float v40 = vpadd_f32(*(float32x2_t *)v39.i8, *(float32x2_t *)v39.i8).f32[0];
        if (v40 < v37)
        {
          unsigned int v34 = v33;
          float v37 = v40;
        }
        ++v33;
      }
      while (a3 != v33);
      v272[v32] = v34;
      ++v269[0].i8[v34];
      ++v32;
    }
    while (v32 != v16);
    unsigned int v41 = 0;
    char v42 = 0;
    do
    {
      while (!v269[0].i8[v41])
      {
        --v269[0].i8[v272[v41]];
        ++v269[0].i8[v41];
        v272[v41] = v41;
        char v42 = v41 + 1 < a3;
        if (v41 + 1 < a3) {
          ++v41;
        }
        else {
          unsigned int v41 = 0;
        }
      }
      BOOL v43 = v41 + 1 < a3;
      char v44 = v43 | v42;
      if (v41 + 1 < a3) {
        ++v41;
      }
      else {
        unsigned int v41 = 0;
      }
      v42 &= v43;
    }
    while ((v44 & 1) != 0);
    ++v19;
  }
  while (v19 != 3);
  uint64_t v66 = 0;
  if (v16 >= 0x40) {
    uint64_t v67 = 64;
  }
  else {
    uint64_t v67 = v16;
  }
  long long v262 = 0uLL;
  long long v263 = 0uLL;
  do
  {
    uint64_t v68 = v272[*(unsigned __int8 *)(a1 + 14666800 + v66)];
    *((void *)&v262 + v68) |= 1 << v66++;
  }
  while (v67 != v66);
  uint64_t v69 = *(unsigned int *)(a1 + 4 * (a3 - 1) + 32);
  if (a3 == 2)
  {
    uint64_t v95 = v270;
    long long v96 = v262;
    uint64_t v97 = *(unsigned int *)(a1 + 36);
    do
    {
      uint64_t v98 = *(v15 - 1);
      int v99 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v15 ^ *((void *)&v96 + 1))))
          + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v98 ^ v96)));
      int v100 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v98 ^ *((void *)&v96 + 1))))
           + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v15 ^ v96)));
      if (v99 < v100) {
        int v100 = v99;
      }
      *v95++ = v100 >> 1;
      v15 += 2;
      --v97;
    }
    while (v97);
  }
  else if (a3 == 3)
  {
    long long v70 = v262;
    uint64_t v71 = v270;
    uint64_t v72 = *(unsigned int *)(a1 + 40);
    uint64_t v73 = v263;
    do
    {
      uint64_t v74 = *(v14 - 2);
      uint64_t v75 = *(v14 - 1);
      unsigned __int16 v76 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v74 ^ v70)));
      unsigned __int16 v77 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v75 ^ v70)));
      uint64_t v78 = *v14;
      v14 += 3;
      unsigned __int16 v79 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v78 ^ v70)));
      unsigned __int16 v80 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v74 ^ *((void *)&v70 + 1))));
      unsigned __int16 v81 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v75 ^ *((void *)&v70 + 1))));
      unsigned __int16 v82 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v78 ^ *((void *)&v70 + 1))));
      int v83 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v74 ^ v73)));
      int v84 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v75 ^ v73)));
      int v85 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v78 ^ v73)));
      int v86 = v85 + v81;
      if (v86 >= v84 + v82) {
        int v86 = v84 + v82;
      }
      int v87 = v86 + v76;
      int v88 = v85 + v80;
      int v89 = v83 + v82;
      if (v88 >= v89) {
        int v88 = v89;
      }
      int v90 = v88 + v77;
      int v91 = v84 + v80;
      int v92 = v83 + v81;
      if (v91 < v92) {
        int v92 = v91;
      }
      unsigned int v93 = v92 + v79;
      if (v87 >= v90) {
        int v94 = v90;
      }
      else {
        int v94 = v87;
      }
      if (v94 < (int)v93) {
        unsigned int v93 = v94;
      }
      *v71++ = v93 >> 1;
      --v72;
    }
    while (v72);
  }
  else
  {
    uint64_t v244 = v67;
    uint64_t v246 = *(unsigned int *)(a1 + 4 * (a3 - 1) + 32);
    long long v101 = v262;
    int v102 = v270;
    uint64_t v103 = v246;
    long long v104 = v263;
    do
    {
      uint64_t v105 = *(v13 - 3);
      uint64_t v106 = *(v13 - 2);
      unsigned __int16 v107 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v105 ^ v101)));
      uint64_t v108 = *(v13 - 1);
      uint64_t v109 = *v13;
      unsigned __int16 v110 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v106 ^ v101)));
      unsigned __int16 v257 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ v101)));
      unsigned __int16 v254 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v13 ^ v101)));
      unsigned __int16 v111 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v105 ^ *((void *)&v101 + 1))));
      unsigned __int16 v112 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v106 ^ *((void *)&v101 + 1))));
      unsigned __int16 v113 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ *((void *)&v101 + 1))));
      unsigned __int16 v114 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v13 ^ *((void *)&v101 + 1))));
      *(int8x8_t *)&long long v24 = vcnt_s8((int8x8_t)(v106 ^ v104));
      LOWORD(v24) = vaddlv_u8(*(uint8x8_t *)&v24);
      unsigned __int16 v115 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v105 ^ v104)));
      unsigned __int16 v116 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ v104)));
      float32x4_t v117 = v13;
      unsigned __int16 v118 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*v13 ^ v104)));
      int v119 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v105 ^ *((void *)&v104 + 1))));
      int v120 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v106 ^ *((void *)&v104 + 1))));
      int v121 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ *((void *)&v104 + 1))));
      int v122 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v109 ^ *((void *)&v104 + 1))));
      int v123 = v122 + v116;
      if (v123 >= v121 + v118) {
        int v123 = v121 + v118;
      }
      int v124 = v120 + v118;
      if (v122 + (unsigned __int16)v24 < v124) {
        int v124 = v122 + (unsigned __int16)v24;
      }
      int v125 = v120 + v116;
      int v126 = v122 + v115;
      if (v121 + (unsigned __int16)v24 < v125) {
        int v125 = v121 + (unsigned __int16)v24;
      }
      int v127 = v119 + v118;
      if (v126 < v127) {
        int v127 = v126;
      }
      int v128 = v119 + v116;
      if (v121 + v115 < v128) {
        int v128 = v121 + v115;
      }
      int v129 = v119 + (unsigned __int16)v24;
      if (v129 >= v120 + v115) {
        int v129 = v120 + v115;
      }
      int v130 = v124 + v113;
      if (v123 + v112 < v130) {
        int v130 = v123 + v112;
      }
      if (v130 >= v125 + v114) {
        int v130 = v125 + v114;
      }
      int v131 = v130 + v107;
      int v132 = v123 + v111;
      if (v132 >= v127 + v113) {
        int v132 = v127 + v113;
      }
      if (v132 >= v128 + v114) {
        int v132 = v128 + v114;
      }
      int v133 = v127 + v112;
      int v134 = v124 + v111;
      int v135 = v129 + v114;
      int v136 = v132 + v110;
      if (v133 < v134) {
        int v134 = v133;
      }
      int v137 = v128 + v112;
      if (v134 >= v135) {
        int v134 = v135;
      }
      int v138 = v125 + v111;
      if (v137 >= v129 + v113) {
        int v137 = v129 + v113;
      }
      if (v137 < v138) {
        int v138 = v137;
      }
      unsigned int v139 = v134 + v257;
      int v140 = v138 + v254;
      if (v131 >= v136) {
        int v141 = v136;
      }
      else {
        int v141 = v131;
      }
      if ((int)v139 >= v140) {
        unsigned int v139 = v140;
      }
      if (v141 < (int)v139) {
        unsigned int v139 = v141;
      }
      *v102++ = v139 >> 1;
      int v13 = v117 + 4;
      --v103;
    }
    while (v103);
    uint64_t v69 = v246;
    uint64_t v12 = a1;
    uint64_t v67 = v244;
  }
  uint64_t v142 = 0;
  float v143 = v18 * v18;
  memset(v273, 0, 128);
  do
    ++*((_WORD *)v273 + *((unsigned __int8 *)v270 + v142++));
  while (v69 != v142);
  uint64_t v144 = 0;
  int v145 = 0;
  do
  {
    int v146 = *(unsigned __int16 *)((char *)v273 + v144);
    *(_WORD *)((char *)v273 + v144) = v145;
    v145 += v146;
    v144 += 2;
  }
  while (2 * v67 != v144);
  uint64_t v147 = 0;
  do
  {
    uint64_t v148 = *((unsigned __int8 *)v270 + v147);
    uint64_t v149 = *((unsigned __int16 *)v273 + v148);
    *((_WORD *)v273 + v148) = v149 + 1;
    v269[0].i16[v149] = v147++;
  }
  while (v69 != v147);
  if (a4 >= v69) {
    unsigned int v150 = v69;
  }
  else {
    unsigned int v150 = a4;
  }
  if (v150 >= a6) {
    uint64_t v151 = a6;
  }
  else {
    uint64_t v151 = v150;
  }
  float32x4_t v152 = *(float32x4_t *)(a2 + 3488);
  float32x4_t v153 = *(float32x4_t *)(a2 + 3520);
  {
    uint64_t v242 = v12;
    *(float32x4_t *)float v256 = v153;
    *(float32x4_t *)v259 = v152;
    float32x4_t v153 = *(float32x4_t *)v256;
    float32x4_t v152 = *(float32x4_t *)v259;
    uint64_t v12 = v242;
    if (v243)
    {
      mask(vmask4)::shift = xmmword_234378DD0;
      float32x4_t v153 = *(float32x4_t *)v256;
      float32x4_t v152 = *(float32x4_t *)v259;
      uint64_t v12 = v242;
    }
  }
  int16x4_t v154 = vmovn_s32(vceqq_f32(v152, v153));
  uint16x4_t v155 = 0;
  v155.i16[3] = v154.i16[3];
  int8x16_t v156 = (int8x16_t)vmovl_u16(v155);
  v157.i64[0] = 0x100000001;
  v157.i64[1] = 0x100000001;
  uint32x4_t v158 = (uint32x4_t)vandq_s8(v156, v157);
  double v159 = *(double *)&mask(vmask4)::shift;
  int v160 = vaddvq_s32((int32x4_t)vshlq_u32(v158, (uint32x4_t)mask(vmask4)::shift));
  uint64_t v255 = v151;
  if (v151)
  {
    unsigned int v161 = a6;
    if (v69 < a6) {
      unsigned int v161 = v69;
    }
    if (v161 >= a4) {
      unsigned int v161 = a4;
    }
    size_t v162 = 4 * v161;
    uint64_t v163 = v12;
    memset_pattern16(__b, &xmmword_23441B5D0, v162);
    memset_pattern16(v266, &xmmword_23441B5D0, v162);
    uint64_t v12 = v163;
  }
  unsigned int v164 = (a3 << 10) - 2048;
  if (a3 == 1) {
    unsigned int v164 = 3072;
  }
  uint64_t v165 = v12 + 1088 * v164 + 11317232;
  if (v150 <= 1) {
    uint64_t v166 = 1;
  }
  else {
    uint64_t v166 = v150;
  }
  uint64_t v251 = v166;
  uint64_t v253 = v12 + 1088 * v164 + 11317232;
  if (v160)
  {
    uint64_t v167 = 0;
    uint64_t v168 = 32 * v17;
    uint64_t v169 = 144 * v17;
    uint64_t v170 = v12 + 1088 * v164 + 11317236;
    double v171 = 0.0000755373765;
    do
    {
      unsigned int v172 = v269[0].u16[v167];
      unsigned __int8 v173 = (unsigned __int16 *)(v165 + 1088 * v269[0].u16[v167]);
      compute_avgs_and_dirs_3_comp_rgb(v173, a2, (uint64_t)v272, v171, v159, *(double *)&v24, a10, v36);
      uint64_t v174 = 0;
      int v175 = v271;
      do
      {
        float32x4_t v176 = *(float32x4_t *)&v272[v174 + 16];
        *((_OWORD *)v175 - 4) = *(_OWORD *)&v272[v174];
        int8x16_t v177 = (int8x16_t)vmulq_f32(v176, v176);
        *(float32x2_t *)v177.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v177, v177, 8uLL), *(float32x2_t *)v177.i8);
        int32x2_t v178 = (int32x2_t)vpadd_f32(*(float32x2_t *)v177.i8, *(float32x2_t *)v177.i8);
        float32x4_t v179 = (float32x4_t)xmmword_23441B5F0;
        if (*(float *)v178.i32 != 0.0) {
          float32x4_t v179 = vdivq_f32(v176, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v178, 0)));
        }
        *((float32x4_t *)v175 - 3) = v179;
        float v180 = v175 - 48;
        *((void *)v180 + 2) = 0;
        *((void *)v180 + 3) = 0;
        float32x4_t v181 = *(float32x4_t *)&v272[v174];
        int8x16_t v182 = (int8x16_t)vmulq_f32(v181, v181);
        *(float32x2_t *)v182.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v182, v182, 8uLL), *(float32x2_t *)v182.i8);
        int32x2_t v183 = (int32x2_t)vpadd_f32(*(float32x2_t *)v182.i8, *(float32x2_t *)v182.i8);
        float32x4_t v184 = (float32x4_t)xmmword_23441B5F0;
        if (*(float *)v183.i32 != 0.0) {
          float32x4_t v184 = vdivq_f32(v181, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v183, 0)));
        }
        *((float32x4_t *)v175 - 1) = v184;
        float32x4_t v185 = *((float32x4_t *)v175 - 4);
        float32x4_t v186 = vmulq_f32(v179, v185);
        float32x4_t v187 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v186, 2), vaddq_f32(v186, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 1))), 0);
        v187.i32[3] = 0;
        float32x4_t v188 = vsubq_f32(v185, vmulq_f32(v179, v187));
        long long v189 = *(_OWORD *)v180;
        *(float32x4_t *)int v175 = v188;
        *((_OWORD *)v175 + 1) = v189;
        *((void *)v175 + 4) = 0;
        *((void *)v175 + 5) = 0;
        *((_OWORD *)v175 + 3) = *((_OWORD *)v175 - 1);
        v174 += 32;
        v175 += 144;
      }
      while (v168 != v174);
      v273[0] = 0;
      v264[0].i32[0] = 0;
      compute_error_squared_rgb(v173, (float32x4_t *)a2, (uint64_t)v270, v273, v264);
      unint64_t v190 = 0;
      float v191 = *(float *)v273;
      float v192 = v264[0].f32[0];
      __int32 v193 = (unsigned __int8 *)(v170 + 1088 * v172);
      do
      {
        unsigned int v194 = *v193++;
        float v195 = v143 * (float)v194;
        float v196 = *(float *)&v271[v190 + 64];
        float32x4_t v197 = vmulq_n_f32(*(float32x4_t *)&v270[v190 / 4 + 4], v196);
        float32x4_t v198 = vmulq_n_f32(*(float32x4_t *)&v270[v190 / 4 + 12], v196);
        float32x4_t v199 = vmulq_n_f32(vmulq_f32(v197, v197), v195);
        float32x4_t v200 = vmulq_n_f32(vmulq_f32(v198, v198), v195);
        float v191 = v191
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v199, 2), vaddq_f32(v199, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v199.f32, 1))).f32[0];
        float v192 = v192
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v200, 2), vaddq_f32(v200, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v200.f32, 1))).f32[0];
        v190 += 144;
      }
      while (v169 != v190);
      insert_result(v255, v191, v172, __b, v267);
      insert_result(v255, v192, v172, v266, v265);
      ++v167;
      uint64_t v165 = v253;
    }
    while (v167 != v251);
  }
  else
  {
    uint64_t v201 = 0;
    uint64_t v247 = v12 + 1088 * v164 + 11317236;
    do
    {
      uint64_t v249 = v201;
      unsigned int v258 = v269[0].u16[v201];
      int32x4_t v202 = (unsigned __int16 *)(v165 + 1088 * v269[0].u16[v201]);
      compute_avgs_and_dirs_4_comp(v202, (float32x4_t *)a2, (uint64_t)v270);
      unint64_t v203 = 0;
      do
      {
        float32x4_t v204 = *(float32x4_t *)&v270[v203 / 4 + 4];
        *(_OWORD *)&v272[v203] = *(_OWORD *)&v270[v203 / 4];
        int8x16_t v205 = (int8x16_t)vmulq_f32(v204, v204);
        *(float32x2_t *)v205.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v205, v205, 8uLL), *(float32x2_t *)v205.i8);
        int32x2_t v206 = (int32x2_t)vpadd_f32(*(float32x2_t *)v205.i8, *(float32x2_t *)v205.i8);
        v207.i64[0] = 0x3F0000003F000000;
        v207.i64[1] = 0x3F0000003F000000;
        v208.i64[0] = 0x3F0000003F000000;
        v208.i64[1] = 0x3F0000003F000000;
        if (*(float *)v206.i32 != 0.0) {
          float32x4_t v208 = vdivq_f32(v204, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v206, 0)));
        }
        *(float32x4_t *)&v272[v203 + 16] = v208;
        float32x4_t v209 = *(float32x4_t *)&v272[v203];
        long long v210 = *(_OWORD *)&v272[v203 + 16];
        int8x16_t v211 = (int8x16_t)vmulq_f32(v208, v209);
        *(float32x2_t *)v211.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v211, v211, 8uLL), *(float32x2_t *)v211.i8);
        f32 = (_OWORD *)v264[v203 / 0x10].f32;
        _OWORD *f32 = vsubq_f32(v209, vmulq_n_f32(v208, vpadd_f32(*(float32x2_t *)v211.i8, *(float32x2_t *)v211.i8).f32[0]));
        f32[1] = v210;
        int32x4_t v213 = (float32x4_t *)&v273[v203 / 4];
        v213->i64[0] = 0;
        v213->i64[1] = 0;
        float32x4_t v214 = *(float32x4_t *)&v270[v203 / 4];
        int8x16_t v215 = (int8x16_t)vmulq_f32(v214, v214);
        *(float32x2_t *)v215.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v215, v215, 8uLL), *(float32x2_t *)v215.i8);
        int32x2_t v216 = (int32x2_t)vpadd_f32(*(float32x2_t *)v215.i8, *(float32x2_t *)v215.i8);
        if (*(float *)v216.i32 != 0.0) {
          float32x4_t v207 = vdivq_f32(v214, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v216, 0)));
        }
        v213[1] = v207;
        float32x4_t v217 = (float32x4_t *)((char *)&v262 + v203);
        v217->i64[0] = 0;
        v217->i64[1] = 0;
        v217[1] = v213[1];
        v203 += 32;
      }
      while (32 * v17 != v203);
      uint64_t v260 = 0;
      compute_error_squared_rgba(v202, (float32x4_t *)a2, (uint64_t)v264, (uint64_t)&v262, (uint64_t)v261, (_DWORD *)&v260 + 1, &v260);
      uint64_t v219 = 0;
      float v220 = *((float *)&v260 + 1);
      float v221 = *(float *)&v260;
      uint64_t v222 = 4;
      do
      {
        LOBYTE(v2re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = *(unsigned char *)(v247 + 1088 * v258 + v219);
        float v223 = v143 * (float)LODWORD(v218);
        float v224 = v261[v219];
        float32x4_t v225 = vmulq_n_f32(*(float32x4_t *)&v272[v222 * 4], v224);
        float32x4_t v226 = vmulq_n_f32(*(float32x4_t *)&v273[v222], v224);
        int8x16_t v227 = (int8x16_t)vmulq_n_f32(vmulq_f32(v225, v225), v223);
        *(float32x2_t *)v227.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL), *(float32x2_t *)v227.i8);
        float v220 = v220 + vpadd_f32(*(float32x2_t *)v227.i8, *(float32x2_t *)v227.i8).f32[0];
        int8x16_t v228 = (int8x16_t)vmulq_n_f32(vmulq_f32(v226, v226), v223);
        *(float32x2_t *)v228.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v228, v228, 8uLL), *(float32x2_t *)v228.i8);
        float v218 = vpadd_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8).f32[0];
        float v221 = v221 + v218;
        ++v219;
        v222 += 8;
      }
      while (v17 != v219);
      insert_result(v255, v220, v258, __b, v267);
      insert_result(v255, v221, v258, v266, v265);
      uint64_t v201 = v249 + 1;
      uint64_t v165 = v253;
    }
    while (v249 + 1 != v251);
  }
  if (!v255) {
    return 0;
  }
  uint64_t v229 = 0;
  float v230 = v265;
  float v231 = v267;
  do
  {
    unsigned int v232 = *v231++;
    *(_DWORD *)&v272[4 * v229] = *(unsigned __int16 *)(v165 + 1088 * v232 + 2);
    unsigned int v233 = *v230++;
    *(_DWORD *)&v272[4 * (v229 + 1)] = *(unsigned __int16 *)(v165 + 1088 * v233 + 2);
    v229 += 2;
  }
  while (2 * v255 != v229);
  memset(v271, 0, 64);
  uint64_t v234 = (2 * v255);
  memset(v270, 0, sizeof(v270));
  if (!v234) {
    return 0;
  }
  uint64_t result = 0;
  __n128 v236 = (unsigned int *)v272;
  while (1)
  {
    unsigned int v238 = *v236++;
    unsigned int v237 = v238;
    unint64_t v239 = (unint64_t)v238 >> 6;
    uint64_t v240 = *(void *)&v270[2 * v239];
    uint64_t v241 = 1 << v238;
    if (((1 << v238) & v240) == 0)
    {
      *(_DWORD *)(a5 + 4 * result) = v237;
      *(void *)&v270[2 * v239] = v241 | v240;
      uint64_t result = (result + 1);
      if (result == v255) {
        break;
      }
    }
    if (!--v234) {
      return result;
    }
  }
  return v255;
}

uint64_t insert_result(uint64_t result, float a2, unsigned int a3, float *a4, unsigned int *a5)
{
  uint64_t v5 = (result - 1);
  if (a4[v5] > a2)
  {
    uint64_t v6 = 0;
    while (a4[v6] < a2)
    {
      if (result == ++v6) {
        return result;
      }
    }
    if (v5 > v6)
    {
      uint64_t v7 = (result - 2);
      unsigned int v8 = result - 1;
      unsigned int v9 = a4;
      char v10 = a5;
      do
      {
        v9[v5] = v9[v7];
        v10[v5] = v10[v7];
        --v10;
        --v9;
        --v8;
      }
      while (v8 > v6);
    }
    a4[v6] = a2;
    a5[v6] = a3;
  }
  return result;
}

unsigned __int8 *encode_ise(unsigned __int8 *result, unsigned int a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5)
{
  char v5 = btq_counts[result];
  int v6 = v5 & 0x3F;
  int v7 = ~(-1 << v5);
  if ((v5 & 0x40) != 0)
  {
    if (a2 >= 5)
    {
      uint64_t v10 = 0;
      unsigned int v11 = a2 / 5;
      int v12 = v6 + 2;
      int v13 = ~(-4 << v6);
      int v14 = ~(-2 << v6);
      int v15 = 2 * v6 + 4;
      int v16 = 3 * v6 + 5;
      uint64_t result = a3 + 4;
      do
      {
        uint64_t v17 = &result[v10];
        uint64_t v18 = result[v10 - 2] >> v6;
        uint64_t v19 = result[v10 - 3] >> v6;
        unsigned int v20 = a3[v10];
        unsigned int v21 = integer_of_trits[81 * (result[v10] >> v6)
                             + 27 * (result[v10 - 1] >> v6)
                             + 8 * v18
                             + 2 * v19
                             + v18
                             + v19
                             + (v20 >> v6)];
        *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) = *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) & ~(unsigned __int16)(v13 << (a5 & 7)) | (((((v21 & 3) << v6) | v20 & v7) & v13) << (a5 & 7));
        unint64_t v22 = a5 + v12;
        int v23 = (unsigned char *)(a4 + (v22 >> 3));
        LOBYTE(v20) = (a5 + v12) & 7;
        LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = ((result[v10 - 3] & v7 | (((v21 >> 2) & 3) << v6)) & v13) << v20;
        char v24 = v23[1];
        unsigned char *v23 = *v23 & ~(v13 << v20) | v18;
        v23[1] = v24 & ((unsigned __int16)~((_WORD)v13 << v20) >> 8) | BYTE1(v18);
        unsigned int v25 = (unsigned char *)(a4 + ((unint64_t)(v15 + a5) >> 3));
        LOBYTE(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = (v15 + a5) & 7;
        int v26 = v14 << v18;
        int v27 = ~(v14 << v18);
        LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = ((result[v10 - 2] & v7 | (((v21 >> 4) & 1) << v6)) & v14) << v18;
        LOBYTE(v23) = *v25 & ~(_BYTE)v26 | v18;
        LOBYTE(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v25[1] & BYTE1(v27) | BYTE1(v18);
        *unsigned int v25 = (_BYTE)v23;
        v25[1] = v18;
        unsigned int v28 = (unsigned char *)(a4 + ((unint64_t)(v16 + a5) >> 3));
        LOBYTE(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = (v16 + a5) & 7;
        LODWORD(v23) = ((result[v10 - 1] & v7 | (((v21 >> 5) & 3) << v6)) & v13) << v18;
        LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v13 << v18;
        *unsigned int v28 = *v28 & ~(_BYTE)v18 | v23;
        v10 += 5;
        v28[1] = v28[1] & ((unsigned __int16)~(_WORD)v18 >> 8) | BYTE1(v23);
        unint64_t v29 = 4 * v6 + 7 + a5;
        LODWORD(v17) = (*v17 & v7 | (v21 >> 7 << v6)) & v14;
        float32x4_t v30 = (unsigned char *)(a4 + (v29 >> 3));
        LOBYTE(v29) = v29 & 7;
        LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v14 << v29;
        LODWORD(v29) = v17 << v29;
        LOBYTE(v28) = v30[1];
        *float32x4_t v30 = *v30 & ~(_BYTE)v18 | v29;
        v30[1] = v28 & ((unsigned __int16)~(_WORD)v18 >> 8) | BYTE1(v29);
        a5 = v22 + v12 + v6 + 1 + v12 + v6 + 1;
        --v11;
      }
      while (v11);
    }
    else
    {
      LODWORD(v10) = 0;
    }
    if (a2 != v10)
    {
      unsigned int v31 = (int)v10 + 3 >= a2 ? 0 : a3[(v10 + 3)] >> v6;
      uint64_t v33 = (int)v10 + 2 >= a2 ? 0 : a3[(v10 + 2)] >> v6;
      uint64_t v34 = (int)v10 + 1 >= a2 ? 0 : a3[(v10 + 1)] >> v6;
      uint64_t v35 = a2 - v10;
      if (a2 > v10)
      {
        float32x4_t v36 = &a3[v10];
        unsigned int v37 = integer_of_trits[27 * v31 + 9 * v33 + 3 * v34 + (*v36 >> v6)];
        float32x4_t v38 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tbits;
        int8x16_t v39 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tshift;
        do
        {
          int v40 = *v36++;
          int v41 = v40 & v7;
          LOBYTE(v40) = *v39++;
          unsigned int v42 = v37 >> v40;
          int v43 = *v38++;
          uint64_t result = (unsigned __int8 *)(a4 + ((unint64_t)a5 >> 3));
          *(_WORD *)uint64_t result = *(_WORD *)result & ~(unsigned __int16)(~(-1 << (v43 + v6)) << (a5 & 7)) | (((((v42 & ~(-1 << v43)) << v6) | v41) & ~(-1 << (v43 + v6))) << (a5 & 7));
          a5 += v43 + v6;
          --v35;
        }
        while (v35);
      }
    }
  }
  else if ((btq_counts[result] & 0x80) != 0)
  {
    if (a2 >= 3)
    {
      uint64_t v32 = 0;
      unsigned int v44 = a2 / 3;
      int v45 = v6 + 3;
      int v46 = ~(-8 << v6);
      int v47 = ~(-4 << v6);
      float32x4_t v48 = a3 + 2;
      uint64_t result = integer_of_quints;
      do
      {
        int8x16_t v50 = &v48[v32];
        unsigned int v51 = a3[v32];
        uint64_t v52 = v48[v32 - 1] >> v6;
        unsigned int v53 = integer_of_quints[25 * (v48[v32] >> v6) + 4 * v52 + v52 + (v51 >> v6)];
        LODWORD(v52) = (((v53 & 7) << v6) | v51 & v7) & v46;
        float v54 = (unsigned char *)(a4 + ((unint64_t)a5 >> 3));
        int v55 = v46 << (a5 & 7);
        LODWORD(v52) = v52 << (a5 & 7);
        char v56 = v54[1];
        *float v54 = *v54 & ~(_BYTE)v55 | v52;
        v54[1] = v56 & ((unsigned __int16)~(_WORD)v55 >> 8) | BYTE1(v52);
        int8x16_t v57 = (unsigned __int8 *)(a4 + ((unint64_t)(v45 + a5) >> 3));
        LOBYTE(v52) = (v45 + a5) & 7;
        int v58 = *v57 & ~(v47 << v52);
        int v59 = ~(v47 << v52);
        LODWORD(v52) = ((v48[v32 - 1] & v7 | (((v53 >> 3) & 3) << v6)) & v47) << v52;
        unsigned __int8 *v57 = v58 | v52;
        v57[1] = v57[1] & BYTE1(v59) | BYTE1(v52);
        v32 += 3;
        int v49 = 2 * v6 + 5;
        *(_WORD *)(a4 + ((unint64_t)(v49 + a5) >> 3)) = *(_WORD *)(a4 + ((unint64_t)(v49 + a5) >> 3)) & ~(unsigned __int16)(v47 << ((v49 + a5) & 7)) | (((*v50 & v7 | (((v53 >> 5) & 3) << v6)) & v47) << ((v49 + a5) & 7));
        a5 += 3 * v6 + 7;
        --v44;
      }
      while (v44);
    }
    else
    {
      LODWORD(v32) = 0;
    }
    if (a2 != v32)
    {
      if ((int)v32 + 1 >= a2) {
        uint64_t v60 = 0;
      }
      else {
        uint64_t v60 = a3[(v32 + 1)] >> v6;
      }
      uint64_t v61 = a2 - v32;
      if (a2 > v32)
      {
        float32x4_t v62 = &a3[v32];
        unsigned int v63 = integer_of_quints[5 * v60 + (*v62 >> v6)];
        int8x16_t v64 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tbits;
        float v65 = &encode_ise(quant_method,unsigned int,unsigned char const*,unsigned char *,unsigned int)::tshift;
        do
        {
          int v66 = *v62++;
          int v67 = v66 & v7;
          LOBYTE(v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *v65++;
          unsigned int v68 = v63 >> v66;
          int v69 = *v64++;
          uint64_t result = (unsigned __int8 *)(a4 + ((unint64_t)a5 >> 3));
          *(_WORD *)uint64_t result = *(_WORD *)result & ~(unsigned __int16)(~(-1 << (v69 + v6)) << (a5 & 7)) | (((((v68 & ~(-1 << v69)) << v6) | v67) & ~(-1 << (v69 + v6))) << (a5 & 7));
          a5 += v69 + v6;
          --v61;
        }
        while (v61);
      }
    }
  }
  else
  {
    uint64_t v8 = a2;
    do
    {
      int v9 = *a3++;
      *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) = *(_WORD *)(a4 + ((unint64_t)a5 >> 3)) & ~(unsigned __int16)(v7 << (a5 & 7)) | ((v9 & v7) << (a5 & 7));
      a5 += v6;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t compute_pixel_region_variance(uint64_t a1, uint64_t *a2)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  int v2 = (int *)*a2;
  uint64_t v3 = *((unsigned int *)a2 + 2);
  uint64_t v4 = *((unsigned int *)a2 + 3);
  uint64_t v5 = *((unsigned int *)a2 + 4);
  uint64_t v6 = *((unsigned int *)a2 + 5);
  int v139 = *((_DWORD *)a2 + 11);
  int v138 = *((_DWORD *)a2 + 12);
  int v137 = *((_DWORD *)a2 + 13);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  uint64_t v8 = *(void *)(a1 + 136);
  float32x4_t v153 = (_OWORD *)a2[7];
  uint64_t v154 = *((unsigned int *)a2 + 8);
  int v9 = (2 * v7) | 1;
  uint64_t v142 = *((unsigned __int8 *)a2 + 24);
  uint64_t v143 = *((unsigned int *)a2 + 10);
  int v144 = v9;
  unsigned int v145 = v7;
  if (*((unsigned char *)a2 + 24)) {
    uint64_t result = v7;
  }
  else {
    uint64_t result = 0;
  }
  uint64_t v11 = (v9 + *((_DWORD *)a2 + 8));
  uint64_t v155 = *((unsigned int *)a2 + 9);
  if (*((unsigned char *)a2 + 24)) {
    int v12 = (2 * v7) | 1;
  }
  else {
    int v12 = 0;
  }
  uint64_t v156 = (v9 + *((_DWORD *)a2 + 9));
  int v150 = v11 * (v9 + *((_DWORD *)a2 + 9));
  uint64_t v151 = (v12 + *((_DWORD *)a2 + 10));
  uint64_t v13 = v150 * (int)v151;
  int v152 = *v2;
  int v14 = v2[3];
  int v135 = v2[1];
  int v140 = v150 * v151;
  if (v14 == 1)
  {
    DWORD2(v157) = 1006632960;
    if ((int)v151 > (int)v142)
    {
      int v35 = v138 + ~v7;
      uint64_t v36 = v142;
      int v148 = v137 - v142 - result;
      uint64_t v37 = (int)v11 + (int)v142 * (uint64_t)v150;
      uint64_t result = (uint64_t)&v153[v37 + 1 + v13];
      uint64_t v38 = 16 * v150;
      uint64_t v39 = 16 * (int)v11;
      uint64_t v40 = (uint64_t)&v153[v37 + 1];
      do
      {
        if (v148 + (int)v36 <= v2[2] - 1) {
          int v41 = (v148 + v36) & ~((v148 + (int)v36) >> 31);
        }
        else {
          int v41 = v2[2] - 1;
        }
        if ((int)v156 >= 2)
        {
          uint64_t v42 = *(void *)(*((void *)v2 + 2) + 8 * v41);
          int v43 = (float32x4_t *)v40;
          unsigned int v44 = (float32x4_t *)result;
          for (uint64_t i = 1; i != v156; ++i)
          {
            if (v35 + (int)i <= v2[1] - 1) {
              int v46 = (v35 + i) & ~((v35 + (int)i) >> 31);
            }
            else {
              int v46 = v2[1] - 1;
            }
            int v47 = v139 - v145;
            float32x4_t v48 = v43;
            int v49 = v44;
            uint64_t v50 = v11 - 1;
            if ((int)v11 >= 2)
            {
              do
              {
                int v51 = v47 & ~(v47 >> 31);
                if (v47 > *v2 - 1) {
                  int v51 = *v2 - 1;
                }
                *(void *)&long long v157 = *(void *)(v42 + 2 * (4 * v51 + 4 * *v2 * v46));
                v52.i16[0] = *((_WORD *)&v157 + v3);
                v52.i16[1] = *((_WORD *)&v157 + v4);
                v52.i16[2] = *((_WORD *)&v157 + v5);
                v52.i16[3] = *((_WORD *)&v157 + v6);
                float32x4_t v53 = vcvtq_f32_f16(v52);
                *v48++ = v53;
                *v49++ = vmulq_f32(v53, v53);
                ++v47;
                --v50;
              }
              while (v50);
            }
            unsigned int v44 = (float32x4_t *)((char *)v44 + v39);
            int v43 = (float32x4_t *)((char *)v43 + v39);
          }
        }
        ++v36;
        result += v38;
        v40 += v38;
      }
      while (v36 != v151);
    }
  }
  else if (v14)
  {
    uint64_t v158 = 0x3F80000000000000;
    if ((int)v151 > (int)v142)
    {
      uint64_t v54 = v142;
      uint64_t v55 = (int)v11 + (int)v142 * (uint64_t)v150;
      uint64_t v56 = 16 * v150;
      int v57 = v138 + ~v7;
      uint64_t v58 = 16 * (int)v11;
      uint64_t result = (v137 - v142 - result);
      int v149 = result;
      int v59 = (__int32 *)&v157 + v4;
      uint64_t v60 = (uint64_t)&v153[v55 + 1 + v13];
      uint64_t v61 = (uint64_t)&v153[v55 + 1];
      float32x4_t v62 = (__int32 *)&v157 + v5;
      unsigned int v63 = (__int32 *)&v157 + v6;
      do
      {
        if (v149 + (int)v54 <= v2[2] - 1) {
          int v64 = (v149 + v54) & ~((v149 + (int)v54) >> 31);
        }
        else {
          int v64 = v2[2] - 1;
        }
        if ((int)v156 >= 2)
        {
          uint64_t v65 = *(void *)(*((void *)v2 + 2) + 8 * v64);
          int v66 = (float32x4_t *)v61;
          int v67 = (float32x4_t *)v60;
          for (uint64_t j = 1; j != v156; ++j)
          {
            if (v57 + (int)j <= v2[1] - 1) {
              int v69 = (v57 + j) & ~((v57 + (int)j) >> 31);
            }
            else {
              int v69 = v2[1] - 1;
            }
            int v70 = v139 - v7;
            uint64_t v71 = v66;
            uint64_t v72 = v67;
            uint64_t v73 = v11 - 1;
            if ((int)v11 >= 2)
            {
              do
              {
                int v74 = v70 & ~(v70 >> 31);
                if (v70 > *v2 - 1) {
                  int v74 = *v2 - 1;
                }
                uint64_t result = 4 * (4 * v74 + 4 * *v2 * v69);
                long long v157 = *(_OWORD *)(v65 + result);
                v75.i32[0] = *((_DWORD *)&v157 + v3);
                v75.i32[1] = *v59;
                v75.i32[2] = *v62;
                v75.i32[3] = *v63;
                *v71++ = v75;
                *v72++ = vmulq_f32(v75, v75);
                ++v70;
                --v73;
              }
              while (v73);
            }
            int v67 = (float32x4_t *)((char *)v67 + v58);
            int v66 = (float32x4_t *)((char *)v66 + v58);
          }
        }
        ++v54;
        v60 += v56;
        v61 += v56;
      }
      while (v54 != v151);
    }
  }
  else
  {
    WORD2(v157) = -256;
    if ((int)v151 > (int)v142)
    {
      int v15 = v138 + ~v7;
      uint64_t v16 = v142;
      int v147 = v137 - v142 - result;
      uint64_t v17 = (int)v11 + (int)v142 * (uint64_t)v150;
      uint64_t v18 = (uint64_t)&v153[v17 + 1 + v13];
      uint64_t v19 = 16 * v150;
      uint64_t v20 = 16 * (int)v11;
      uint64_t v21 = (uint64_t)&v153[v17 + 1];
      float32x4_t v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
      do
      {
        int v23 = v2[2] - 1;
        if (v147 + (int)v16 <= v23) {
          uint64_t result = (v147 + v16) & ~((v147 + (int)v16) >> 31);
        }
        else {
          uint64_t result = v23;
        }
        if ((int)v156 >= 2)
        {
          uint64_t v24 = *(void *)(*((void *)v2 + 2) + 8 * (int)result);
          unsigned int v25 = (float32x4_t *)v21;
          uint64_t result = v18;
          for (uint64_t k = 1; k != v156; ++k)
          {
            if (v15 + (int)k <= v2[1] - 1) {
              int v27 = (v15 + k) & ~((v15 + (int)k) >> 31);
            }
            else {
              int v27 = v2[1] - 1;
            }
            int v28 = v139 - v145;
            unint64_t v29 = v25;
            float32x4_t v30 = (float32x4_t *)result;
            uint64_t v31 = v11 - 1;
            if ((int)v11 >= 2)
            {
              do
              {
                int v32 = v28 & ~(v28 >> 31);
                if (v28 > *v2 - 1) {
                  int v32 = *v2 - 1;
                }
                LODWORD(v157) = *(_DWORD *)(v24 + (4 * v32 + 4 * *v2 * v27));
                v33.i16[0] = *((unsigned __int8 *)&v157 + v3);
                v33.i16[1] = *((unsigned __int8 *)&v157 + v4);
                v33.i16[2] = *((unsigned __int8 *)&v157 + v5);
                v33.i16[3] = *((unsigned __int8 *)&v157 + v6);
                float32x4_t v34 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(v33)), v22);
                *v29++ = v34;
                *v30++ = vmulq_f32(v34, v34);
                ++v28;
                --v31;
              }
              while (v31);
            }
            result += v20;
            unsigned int v25 = (float32x4_t *)((char *)v25 + v20);
          }
        }
        ++v16;
        v18 += v19;
        v21 += v19;
      }
      while (v16 != v151);
    }
  }
  unsigned __int16 v76 = &v153[v140];
  int v136 = v151 - 1;
  if ((int)v151 >= 1)
  {
    uint64_t v77 = 0;
    uint64_t v78 = 16 * v150;
    unsigned __int16 v79 = &v153[v140];
    unsigned __int16 v80 = v153;
    do
    {
      unsigned __int16 v81 = v80;
      uint64_t v82 = v156;
      if ((int)v156 >= 1)
      {
        do
        {
          *unsigned __int16 v81 = 0uLL;
          v81[v13] = 0uLL;
          v81 += (int)v11;
          --v82;
        }
        while (v82);
      }
      if ((int)v11 >= 1)
      {
        uint64_t v83 = 0;
        do
        {
          v80[v83] = 0uLL;
          v79[v83++] = 0uLL;
        }
        while (v11 != v83);
      }
      ++v77;
      unsigned __int16 v80 = (_OWORD *)((char *)v80 + v78);
      unsigned __int16 v79 = (_OWORD *)((char *)v79 + v78);
    }
    while (v77 != v151);
  }
  if (v142 && (int)v156 >= 1)
  {
    uint64_t v84 = 0;
    int v85 = v153;
    do
    {
      int v86 = v85;
      uint64_t v87 = v11;
      if ((int)v11 >= 1)
      {
        do
        {
          *int v86 = 0uLL;
          v86[v13] = 0uLL;
          ++v86;
          --v87;
        }
        while (v87);
      }
      ++v84;
      v85 += (int)v11;
    }
    while (v84 != v156);
  }
  int v141 = 2 * v145;
  if ((int)v151 > (int)v142)
  {
    int v88 = v153;
    int v89 = v154 + v150 * v142 + v141 + 2;
    int v90 = v142;
    do
    {
      int v91 = v89;
      uint64_t v92 = v156 - 1;
      if ((int)v156 >= 2)
      {
        do
        {
          brent_kung_prefix_sum((uint64_t)&v88[v91], (int)v11 - 1, 1);
          uint64_t result = brent_kung_prefix_sum((uint64_t)&v76[v91], (int)v11 - 1, 1);
          int v88 = v153;
          v91 += v11;
          --v92;
        }
        while (v92);
      }
      ++v90;
      v89 += v150;
    }
    while (v90 != v151);
    unint64_t v93 = (int)v156 - 1;
    uint64_t v94 = v142;
    uint64_t v95 = (int)v11 + (int)v142 * (uint64_t)v150;
    uint64_t v96 = (uint64_t)&v88[v95 + 1 + v13];
    uint64_t v146 = 16 * v150;
    uint64_t v97 = (uint64_t)&v88[v95 + 1];
    do
    {
      uint64_t v98 = v97;
      uint64_t v99 = v96;
      uint64_t v100 = v11 - 1;
      if ((int)v11 >= 2)
      {
        do
        {
          brent_kung_prefix_sum(v98, v93, v11);
          uint64_t result = brent_kung_prefix_sum(v99, v93, v11);
          v99 += 16;
          v98 += 16;
          --v100;
        }
        while (v100);
      }
      ++v94;
      v96 += v146;
      v97 += v146;
    }
    while (v94 != v151);
  }
  if (v142 && (int)v156 >= 2)
  {
    int v101 = (v155 + v141 + 2) * v11;
    for (uint64_t m = 1; m != v156; ++m)
    {
      if ((int)v11 >= 2)
      {
        uint64_t v103 = (uint64_t)&v153[v101 + 1];
        uint64_t v104 = v11 - 1;
        do
        {
          brent_kung_prefix_sum(v103, v136, v150);
          uint64_t result = brent_kung_prefix_sum(v103 + 16 * v13, v136, v150);
          v103 += 16;
          --v104;
        }
        while (v104);
      }
      v101 += v11;
    }
  }
  if (v142) {
    float v105 = (float)v144;
  }
  else {
    float v105 = 1.0;
  }
  float v106 = 1.0 / (float)((float)(v105 * (float)v144) * (float)v144);
  if (v142)
  {
    if ((int)v143 >= 1)
    {
      uint64_t v107 = 0;
      uint64_t v108 = (uint64_t)v153 + 12;
      int v109 = v11 * (v141 + 1);
      uint64_t v110 = 16 * (int)v11;
      int v111 = (v141 + 1 + v154 + v150) * (v141 + 1);
      LODWORD(result) = v109 * v156;
      int v112 = v139 + v152 * (v138 + v137 * v135);
      uint64_t v113 = (uint64_t)v153 + 12;
      do
      {
        if ((int)v155 >= 1)
        {
          uint64_t v114 = 0;
          uint64_t v115 = v108 + 16 * (int)result;
          int v116 = v112;
          int v117 = v111;
          uint64_t v118 = v113;
          int v119 = v109;
          do
          {
            if ((int)v154 >= 1)
            {
              uint64_t v120 = 0;
              int v121 = v141 + 1;
              int v122 = v116;
              do
              {
                *(float *)(v8 + 4 * v122) = v106
                                            * (float)((float)((float)((float)(*(float *)(v115 + v120)
                                                                            - *(float *)(v108
                                                                                       + 16
                                                                                       * (v114 * (int)v11
                                                                                        + v150 * (v144 + (int)v107)
                                                                                        + v121)))
                                                                    - *(float *)(v108 + 16 * v117 + v120))
                                                            + *(float *)(v108 + 16 * (v117 + v121)))
                                                    - (float)((float)((float)(*(float *)(v118 + v120)
                                                                            - *(float *)(v108
                                                                                       + 16
                                                                                       * (v114 * (int)v11
                                                                                        + v107 * v150
                                                                                        + v121)))
                                                                    - *(float *)(v108 + 16 * v119 + v120))
                                                            + *(float *)(v108 + 16 * (v119 + v121))));
                v120 += 16;
                ++v122;
                ++v121;
              }
              while (16 * v154 != v120);
            }
            ++v114;
            v119 += v11;
            v118 += v110;
            v117 += v11;
            v115 += v110;
            v116 += v152;
          }
          while (v114 != v155);
        }
        ++v107;
        v109 += v150;
        v113 += 16 * v150;
        v111 += v150;
        uint64_t result = (result + v150);
        v112 += v135 * v152;
      }
      while (v107 != v143);
    }
  }
  else if ((int)v155 >= 1)
  {
    uint64_t v123 = 0;
    uint64_t v124 = (uint64_t)v153 + 12;
    int v125 = v11 * v144;
    int v126 = v139 + v138 * v152;
    uint64_t v127 = (uint64_t)v153 + 12;
    do
    {
      if ((int)v154 >= 1)
      {
        int v128 = v144;
        int v129 = v126;
        uint64_t result = v127;
        uint64_t v130 = v154;
        int v131 = (float *)(v124 + 16 * v125);
        do
        {
          float v132 = *(float *)result;
          result += 16;
          float v133 = v132 - *(float *)(v124 + 16 * (v123 * (int)v11 + v128));
          float v134 = *v131;
          v131 += 4;
          *(float *)(v8 + 4 * v129++) = v106
                                        * (float)((float)(v133 - v134) + *(float *)(v124 + 16 * (v125 + v128++)));
          --v130;
        }
        while (v130);
      }
      ++v123;
      v125 += v11;
      v127 += 16 * (int)v11;
      v126 += v152;
    }
    while (v123 != v155);
  }
  return result;
}

uint64_t brent_kung_prefix_sum(uint64_t result, unint64_t a2, int a3)
{
  if (a2 >= 2)
  {
    unint64_t v3 = 2;
    char v4 = 1;
    do
    {
      unint64_t v5 = a2 >> v4;
      if (a2 >> v4)
      {
        uint64_t v6 = result;
        do
        {
          *(float32x4_t *)(v6 + 16 * a3 * (v3 - 1)) = vaddq_f32(*(float32x4_t *)(v6 + 16 * a3 * (v3 - 1)), *(float32x4_t *)(v6 + a3 * (16 * v3 - 16 * (v3 >> 1) - 16)));
          v6 += 16 * (a3 << v4);
          --v5;
        }
        while (v5);
      }
      ++v4;
      v3 *= 2;
    }
    while (v3 <= a2);
    do
    {
      --v4;
      unint64_t v7 = v3 >> 1;
      unint64_t v8 = (a2 - (v3 >> 2)) >> v4;
      if (v8)
      {
        uint64_t v10 = result;
        do
        {
          uint64_t v9 = 16 * a3 * (v7 + (v3 >> 2) - 1);
          *(float32x4_t *)(v10 + v9) = vaddq_f32(*(float32x4_t *)(v10 + v9), *(float32x4_t *)(v10 + a3 * (16 * v7 - 16)));
          v10 += 16 * (a3 << v4);
          --v8;
        }
        while (v8);
      }
      BOOL v11 = v3 > 5;
      v3 >>= 1;
    }
    while (v11);
  }
  return result;
}

uint64_t init_compute_averages(int *a1, int a2, _OWORD *a3, uint64_t a4)
{
  int v4 = *a1;
  int v5 = a1[1];
  unsigned int v6 = a1[2];
  if (v6 <= 1) {
    int v7 = 32;
  }
  else {
    int v7 = 16;
  }
  if (v6 <= 1) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = 16;
  }
  if (v6 <= 1) {
    int v9 = 0;
  }
  else {
    int v9 = (2 * a2) | 1;
  }
  if (v6 > 1) {
    char v10 = 4;
  }
  else {
    char v10 = 5;
  }
  if (v6 < v8) {
    unsigned int v8 = a1[2];
  }
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(void *)a4 = a1;
  *(_OWORD *)(a4 + 8) = *a3;
  *(unsigned char *)(a4 + 24) = v6 > 1;
  *(_DWORD *)(a4 + 28) = a2;
  *(_DWORD *)(a4 + 64) = v4;
  *(_DWORD *)(a4 + 68) = v5;
  *(_DWORD *)(a4 + 72) = v6;
  *(_DWORD *)(a4 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v7;
  *(_DWORD *)(a4 + 80) = v8;
  *(_DWORD *)(a4 + 84) = 2 * (v7 + ((2 * a2) | 1)) * (v7 + ((2 * a2) | 1)) * (v8 + v9);
  return (v6 + v8 - 1) / v8 * ((v5 + v7 - 1) >> v10);
}

int8x16_t compute_avgs_and_dirs_4_comp(unsigned char *a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unsigned int v6 = a1 + 224;
  uint64_t v7 = *(unsigned __int16 *)a1;
  compute_partition_averages_rgba(a1, a2, v33);
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = a1[v8 + 4];
    float32x4_t v10 = v33[v8];
    *(float32x4_t *)(a3 + 32 * v8) = v10;
    float32x4_t v11 = 0uLL;
    int v12 = v6;
    float32x4_t v13 = 0uLL;
    float32x4_t v14 = 0uLL;
    float32x4_t v15 = 0uLL;
    do
    {
      int v16 = *v12++;
      uint64_t v17 = &a2->i32[v16];
      v18.i32[0] = *v17;
      v18.i32[1] = v17[216];
      v18.i32[2] = v17[432];
      v18.i32[3] = v17[648];
      float32x4_t v19 = vsubq_f32(v18, v10);
      int16x4_t v20 = vmovn_s32(vcgtzq_f32(v19));
      float32x4_t v11 = vaddq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 0))));
      float32x4_t v13 = vaddq_f32(v13, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 1))));
      float32x4_t v14 = vaddq_f32(v14, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 2))));
      float32x4_t v15 = vaddq_f32(v15, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 3))));
      --v9;
    }
    while (v9);
    int8x16_t v21 = (int8x16_t)vmulq_f32(v11, v11);
    *(float32x2_t *)v21.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(float32x2_t *)v21.i8);
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), 0);
    int8x16_t v23 = (int8x16_t)vmulq_f32(v13, v13);
    *(float32x2_t *)v23.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), *(float32x2_t *)v23.i8);
    float32x4_t v24 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), 0);
    int8x16_t v25 = (int8x16_t)vmulq_f32(v14, v14);
    *(float32x2_t *)v25.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), *(float32x2_t *)v25.i8);
    float32x4_t v26 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), 0);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v15, v15);
    *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
    int8x16_t v28 = (int8x16_t)vcgtq_f32(v24, v22);
    int8x16_t v29 = vbslq_s8(v28, (int8x16_t)v13, (int8x16_t)v11);
    float32x4_t v30 = (float32x4_t)vbslq_s8(v28, (int8x16_t)v24, (int8x16_t)v22);
    int8x16_t v31 = (int8x16_t)vcgtq_f32(v26, v30);
    int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), 0), (float32x4_t)vbslq_s8(v31, (int8x16_t)v26, (int8x16_t)v30)), (int8x16_t)v15, vbslq_s8(v31, (int8x16_t)v14, v29));
    *(int8x16_t *)(a3 + 32 * v8++ + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = result;
    v6 += 216;
  }
  while (v8 != v7);
  return result;
}

float32x4_t compute_partition_averages_rgba(unsigned char *a1, float32x4_t *a2, float32x4_t *a3)
{
  int v3 = *(unsigned __int16 *)a1;
  if (v3 == 1)
  {
    float32x4_t result = a2[219];
    *a3 = result;
  }
  else
  {
    unint64_t v4 = a2[216].u8[0];
    if (v3 == 2)
    {
      unint64_t v42 = 0;
      int32x4_t v43 = (int32x4_t)xmmword_234378DD0;
      int32x4_t v44 = vdupq_n_s32(v4);
      float32x4_t v45 = 0uLL;
      v46.i64[0] = 0x400000004;
      v46.i64[1] = 0x400000004;
      int v47 = (int8x16_t *)a2;
      float32x4_t v48 = 0uLL;
      float32x4_t v49 = 0uLL;
      float32x4_t v50 = 0uLL;
      do
      {
        int v51 = (const float *)&a1[v42 + 8];
        uint8x8_t v52 = (uint8x8_t)vld1_dup_f32(v51);
        int8x8_t v53 = (int8x8_t)vmovn_s32(vcgtq_s32(v44, v43));
        int32x4_t v43 = vaddq_s32(v43, v46);
        int8x16_t v54 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v52)), v53));
        float32x4_t v50 = vaddq_f32(v50, (float32x4_t)vandq_s8(*v47, v54));
        float32x4_t v49 = vaddq_f32(v49, (float32x4_t)vandq_s8(v47[54], v54));
        float32x4_t v48 = vaddq_f32(v48, (float32x4_t)vandq_s8(v47[108], v54));
        float32x4_t v45 = vaddq_f32(v45, (float32x4_t)vandq_s8(v47[162], v54));
        v42 += 4;
        ++v47;
      }
      while (v42 < v4);
      float32x2_t v55 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), *(float32x2_t *)v50.f32);
      float32x2_t v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL), *(float32x2_t *)v49.f32);
      float32x2_t v57 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), *(float32x2_t *)v48.f32);
      int32x2_t v58 = (int32x2_t)vpadd_f32(v57, v57);
      float32x2_t v59 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), *(float32x2_t *)v45.f32);
      *(int32x2_t *)v60.f32 = vzip1_s32((int32x2_t)vpadd_f32(v55, v55), (int32x2_t)vpadd_f32(v56, v56));
      v60.i64[1] = __PAIR64__(vpadd_f32(v59, v59).u32[0], v58.u32[0]);
      float32x4_t v61 = vsubq_f32(vmulq_n_f32(a2[219], (float)v4), v60);
      v58.i8[0] = a1[4];
      *(float *)v58.i32 = (float)v58.u32[0];
      float32x4_t v62 = vdivq_f32(v60, (float32x4_t)vdupq_lane_s32(v58, 0));
      *a3 = v62;
      v62.i8[0] = a1[5];
      v62.f32[0] = (float)v62.u32[0];
      float32x4_t result = vdivq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 0));
      a3[1] = result;
    }
    else if (v3 == 3)
    {
      unint64_t v5 = 0;
      int32x4_t v6 = vdupq_n_s32(v4);
      float32x4_t v7 = 0uLL;
      v8.i64[0] = 0x400000004;
      v8.i64[1] = 0x400000004;
      float32x4_t v9 = 0uLL;
      int32x4_t v10 = (int32x4_t)xmmword_234378DD0;
      float32x4_t v11 = (int8x16_t *)a2;
      float32x4_t v12 = 0uLL;
      float32x4_t v13 = 0uLL;
      float32x4_t v14 = 0uLL;
      float32x4_t v15 = 0uLL;
      float32x4_t v16 = 0uLL;
      float32x4_t v17 = 0uLL;
      do
      {
        float32x4_t v18 = (const float *)&a1[v5 + 8];
        uint8x8_t v19 = (uint8x8_t)vld1_dup_f32(v18);
        int16x4_t v20 = (int16x4_t)vmovl_u8(v19).u64[0];
        int8x8_t v21 = (int8x8_t)vmovn_s32(vcgtq_s32(v6, v10));
        int32x4_t v10 = vaddq_s32(v10, v8);
        int8x16_t v22 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v20), v21));
        int8x16_t v23 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v20, (int16x4_t)0x1000100010001), v21));
        float32x4_t v17 = vaddq_f32(v17, (float32x4_t)vandq_s8(*v11, v22));
        float32x4_t v13 = vaddq_f32(v13, (float32x4_t)vandq_s8(*v11, v23));
        int8x16_t v24 = v11[54];
        float32x4_t v16 = vaddq_f32(v16, (float32x4_t)vandq_s8(v24, v22));
        float32x4_t v12 = vaddq_f32(v12, (float32x4_t)vandq_s8(v24, v23));
        int8x16_t v25 = v11[108];
        float32x4_t v15 = vaddq_f32(v15, (float32x4_t)vandq_s8(v25, v22));
        float32x4_t v9 = vaddq_f32(v9, (float32x4_t)vandq_s8(v25, v23));
        int8x16_t v26 = v11[162];
        float32x4_t v14 = vaddq_f32(v14, (float32x4_t)vandq_s8(v26, v22));
        float32x4_t v7 = vaddq_f32(v7, (float32x4_t)vandq_s8(v26, v23));
        v5 += 4;
        ++v11;
      }
      while (v5 < v4);
      float32x2_t v27 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(float32x2_t *)v17.f32);
      float32x2_t v28 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
      float32x2_t v29 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), *(float32x2_t *)v15.f32);
      float32x2_t v30 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), *(float32x2_t *)v14.f32);
      *(int32x2_t *)v31.f32 = vzip1_s32((int32x2_t)vpadd_f32(v27, v27), (int32x2_t)vpadd_f32(v28, v28));
      v31.i32[2] = vpadd_f32(v29, v29).u32[0];
      v31.i32[3] = vpadd_f32(v30, v30).u32[0];
      float32x2_t v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), *(float32x2_t *)v13.f32);
      float32x2_t v33 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), *(float32x2_t *)v12.f32);
      float32x2_t v34 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), *(float32x2_t *)v9.f32);
      int32x2_t v35 = (int32x2_t)vpadd_f32(v34, v34);
      float32x2_t v36 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), *(float32x2_t *)v7.f32);
      *(int32x2_t *)v37.f32 = vzip1_s32((int32x2_t)vpadd_f32(v32, v32), (int32x2_t)vpadd_f32(v33, v33));
      v37.i32[2] = v35.i32[0];
      v37.i32[3] = vpadd_f32(v36, v36).u32[0];
      float32x4_t v38 = vsubq_f32(vsubq_f32(vmulq_n_f32(a2[219], (float)v4), v31), v37);
      v35.i8[0] = a1[4];
      *(float *)v35.i32 = (float)v35.u32[0];
      float32x4_t v39 = vdivq_f32(v31, (float32x4_t)vdupq_lane_s32(v35, 0));
      *a3 = v39;
      v39.i8[0] = a1[5];
      v39.f32[0] = (float)v39.u32[0];
      float32x4_t v40 = vdivq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
      a3[1] = v40;
      v40.i8[0] = a1[6];
      v40.f32[0] = (float)v40.u32[0];
      float32x4_t result = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0));
      a3[2] = result;
    }
    else
    {
      unint64_t v63 = 0;
      int32x4_t v64 = vdupq_n_s32(v4);
      float32x4_t v65 = 0uLL;
      v66.i64[0] = 0x400000004;
      v66.i64[1] = 0x400000004;
      int32x4_t v67 = (int32x4_t)xmmword_234378DD0;
      float32x4_t v68 = 0uLL;
      int v69 = (int8x16_t *)a2;
      float32x4_t v70 = 0uLL;
      float32x4_t v71 = 0uLL;
      float32x4_t v72 = 0uLL;
      float32x4_t v73 = 0uLL;
      float32x4_t v74 = 0uLL;
      float32x4_t v75 = 0uLL;
      float32x4_t v76 = 0uLL;
      float32x4_t v77 = 0uLL;
      float32x4_t v78 = 0uLL;
      float32x4_t v79 = 0uLL;
      do
      {
        unsigned __int16 v80 = (const float *)&a1[v63 + 8];
        uint8x8_t v81 = (uint8x8_t)vld1_dup_f32(v80);
        int16x4_t v82 = (int16x4_t)vmovl_u8(v81).u64[0];
        int8x8_t v83 = (int8x8_t)vmovn_s32(vcgtq_s32(v64, v67));
        int32x4_t v67 = vaddq_s32(v67, v66);
        int8x16_t v84 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v82), v83));
        int8x16_t v85 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v82, (int16x4_t)0x1000100010001), v83));
        int8x16_t v86 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v82, (int16x4_t)0x2000200020002), v83));
        float32x4_t v65 = vaddq_f32(v65, (float32x4_t)vandq_s8(*v69, v84));
        float32x4_t v72 = vaddq_f32(v72, (float32x4_t)vandq_s8(*v69, v85));
        float32x4_t v76 = vaddq_f32(v76, (float32x4_t)vandq_s8(*v69, v86));
        int8x16_t v87 = v69[54];
        float32x4_t v68 = vaddq_f32(v68, (float32x4_t)vandq_s8(v87, v84));
        float32x4_t v73 = vaddq_f32(v73, (float32x4_t)vandq_s8(v87, v85));
        float32x4_t v77 = vaddq_f32(v77, (float32x4_t)vandq_s8(v87, v86));
        int8x16_t v88 = v69[108];
        float32x4_t v70 = vaddq_f32(v70, (float32x4_t)vandq_s8(v88, v84));
        float32x4_t v74 = vaddq_f32(v74, (float32x4_t)vandq_s8(v88, v85));
        float32x4_t v78 = vaddq_f32(v78, (float32x4_t)vandq_s8(v88, v86));
        int8x16_t v89 = v69[162];
        float32x4_t v71 = vaddq_f32(v71, (float32x4_t)vandq_s8(v89, v84));
        float32x4_t v75 = vaddq_f32(v75, (float32x4_t)vandq_s8(v89, v85));
        float32x4_t v79 = vaddq_f32(v79, (float32x4_t)vandq_s8(v89, v86));
        v63 += 4;
        ++v69;
      }
      while (v63 < v4);
      float32x2_t v90 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), *(float32x2_t *)v65.f32);
      float32x2_t v91 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), *(float32x2_t *)v68.f32);
      float32x2_t v92 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), *(float32x2_t *)v70.f32);
      float32x2_t v93 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), *(float32x2_t *)v71.f32);
      unsigned __int32 v94 = vpadd_f32(v93, v93).u32[0];
      *(int32x2_t *)v95.f32 = vzip1_s32((int32x2_t)vpadd_f32(v90, v90), (int32x2_t)vpadd_f32(v91, v91));
      v95.i64[1] = __PAIR64__(v94, vpadd_f32(v92, v92).u32[0]);
      float32x2_t v96 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), *(float32x2_t *)v72.f32);
      float32x2_t v97 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), *(float32x2_t *)v73.f32);
      float32x2_t v98 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), *(float32x2_t *)v74.f32);
      float32x2_t v99 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL), *(float32x2_t *)v75.f32);
      *(int32x2_t *)v100.f32 = vzip1_s32((int32x2_t)vpadd_f32(v96, v96), (int32x2_t)vpadd_f32(v97, v97));
      v100.i32[2] = vpadd_f32(v98, v98).u32[0];
      v100.i32[3] = vpadd_f32(v99, v99).u32[0];
      float32x2_t v101 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), *(float32x2_t *)v76.f32);
      float32x2_t v102 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), *(float32x2_t *)v77.f32);
      float32x2_t v103 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), *(float32x2_t *)v78.f32);
      int32x2_t v104 = (int32x2_t)vpadd_f32(v103, v103);
      float32x2_t v105 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL), *(float32x2_t *)v79.f32);
      *(int32x2_t *)v106.f32 = vzip1_s32((int32x2_t)vpadd_f32(v101, v101), (int32x2_t)vpadd_f32(v102, v102));
      v106.i32[2] = v104.i32[0];
      v106.i32[3] = vpadd_f32(v105, v105).u32[0];
      float32x4_t v107 = vsubq_f32(vsubq_f32(vsubq_f32(vmulq_n_f32(a2[219], (float)v4), v95), v100), v106);
      v104.i8[0] = a1[4];
      *(float *)v104.i32 = (float)v104.u32[0];
      float32x4_t v108 = vdivq_f32(v95, (float32x4_t)vdupq_lane_s32(v104, 0));
      *a3 = v108;
      v108.i8[0] = a1[5];
      v108.f32[0] = (float)v108.u32[0];
      float32x4_t v109 = vdivq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 0));
      a3[1] = v109;
      v109.i8[0] = a1[6];
      v109.f32[0] = (float)v109.u32[0];
      float32x4_t v110 = vdivq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 0));
      a3[2] = v110;
      v110.i8[0] = a1[7];
      v110.f32[0] = (float)v110.u32[0];
      float32x4_t result = vdivq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 0));
      a3[3] = result;
    }
  }
  return result;
}

int8x16_t compute_avgs_and_dirs_3_comp(unsigned char *a1, float32x4_t *a2, int a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  compute_partition_averages_rgba(a1, a2, (float32x4_t *)&v37);
  float32x4_t v9 = a2 + 54;
  if (a3 == 2)
  {
    v13.i64[0] = v37.i64[0];
    v14.i64[0] = v38.i64[0];
    v13.i64[1] = v37.u32[3];
    v14.i64[1] = v38.u32[3];
    v15.i64[0] = v39.i64[0];
    v16.i64[0] = v40.i64[0];
    v15.i64[1] = v39.u32[3];
    v16.i64[1] = v40.u32[3];
    int8x16_t v37 = v13;
    int8x16_t v38 = v14;
    int8x16_t v39 = v15;
    int8x16_t v40 = v16;
    float32x4_t v12 = a2 + 162;
    int32x4_t v10 = a2 + 54;
  }
  else
  {
    int32x4_t v10 = a2 + 108;
    if (a3 != 1)
    {
      if (a3)
      {
        v37.i32[3] = 0;
        v38.i32[3] = 0;
        float32x4_t v12 = a2 + 108;
        int32x4_t v10 = a2 + 54;
        float32x4_t v9 = a2;
        v39.i32[3] = 0;
        v40.i32[3] = 0;
      }
      else
      {
        int8x16_t v11 = vextq_s8((int8x16_t)0, (int8x16_t)0, 0xCuLL);
        int8x16_t v37 = vextq_s8(v37, v11, 4uLL);
        int8x16_t v38 = vextq_s8(v38, v11, 4uLL);
        int8x16_t v39 = vextq_s8(v39, v11, 4uLL);
        int8x16_t v40 = vextq_s8(v40, v11, 4uLL);
        float32x4_t v12 = a2 + 162;
      }
      goto LABEL_9;
    }
    v17.i64[0] = __PAIR64__(v37.u32[2], v37.u32[0]);
    v17.i64[1] = v37.u32[3];
    v18.i64[0] = __PAIR64__(v38.u32[2], v38.u32[0]);
    v18.i64[1] = v38.u32[3];
    int8x16_t v37 = v17;
    int8x16_t v38 = v18;
    v17.i64[0] = __PAIR64__(v39.u32[2], v39.u32[0]);
    v17.i64[1] = v39.u32[3];
    v18.i64[0] = __PAIR64__(v40.u32[2], v40.u32[0]);
    v18.i64[1] = v40.u32[3];
    int8x16_t v39 = v17;
    int8x16_t v40 = v18;
    float32x4_t v12 = a2 + 162;
  }
  float32x4_t v9 = a2;
LABEL_9:
  uint64_t v19 = 0;
  int16x4_t v20 = a1 + 224;
  uint64_t v21 = *(unsigned __int16 *)a1;
  do
  {
    uint64_t v22 = a1[v19 + 4];
    float32x4_t v23 = *((float32x4_t *)&v37 + v19);
    *(float32x4_t *)(a4 + 32 * v19) = v23;
    float32x4_t v24 = 0uLL;
    int8x16_t v25 = v20;
    float32x4_t v26 = 0uLL;
    float32x4_t v27 = 0uLL;
    do
    {
      int v28 = *v25++;
      v8.i32[0] = v9->i32[v28];
      v8.i32[1] = v10->i32[v28];
      v8.i32[2] = v12->i32[v28];
      float32x4_t v29 = vsubq_f32(v8, v23);
      int16x4_t v30 = vmovn_s32(vcgtzq_f32(v29));
      float32x4_t v24 = vaddq_f32(v24, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 0))));
      float32x4_t v26 = vaddq_f32(v26, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 1))));
      float32x4_t v8 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 2)));
      float32x4_t v27 = vaddq_f32(v27, v8);
      --v22;
    }
    while (v22);
    int8x16_t v31 = (int8x16_t)vmulq_f32(v24, v24);
    *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v31.i8);
    float32x4_t v32 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), 0);
    int8x16_t v33 = (int8x16_t)vmulq_f32(v26, v26);
    *(float32x2_t *)v33.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v33.i8);
    float32x4_t v8 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), 0);
    int8x16_t v34 = (int8x16_t)vmulq_f32(v27, v27);
    *(float32x2_t *)v34.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v34.i8);
    int8x16_t v35 = (int8x16_t)vcgtq_f32(v8, v32);
    int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), 0), (float32x4_t)vbslq_s8(v35, (int8x16_t)v8, (int8x16_t)v32)), (int8x16_t)v27, vbslq_s8(v35, (int8x16_t)v26, (int8x16_t)v24));
    *(int8x16_t *)(a4 + 32 * v19++ + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = result;
    v20 += 216;
  }
  while (v19 != v21);
  return result;
}

int8x16_t compute_avgs_and_dirs_3_comp_rgb(unsigned char *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v119 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(unsigned __int16 *)a1;
  if (v8 == 1)
  {
    float32x4_t v40 = *(float32x4_t *)(a2 + 3504);
    v40.i32[3] = 0;
    float32x4_t v115 = v40;
  }
  else
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 3456);
    if (v8 == 2)
    {
      unint64_t v41 = 0;
      int32x4_t v42 = vdupq_n_s32(v9);
      int32x4_t v43 = (int32x4_t)xmmword_234378DD0;
      float32x4_t v44 = 0uLL;
      v45.i64[0] = 0x400000004;
      v45.i64[1] = 0x400000004;
      int32x4_t v46 = (int8x16_t *)a2;
      float32x4_t v47 = 0uLL;
      float32x4_t v48 = 0uLL;
      do
      {
        float32x4_t v49 = (const float *)&a1[v41 + 8];
        uint8x8_t v50 = (uint8x8_t)vld1_dup_f32(v49);
        int8x8_t v51 = (int8x8_t)vmovn_s32(vcgtq_s32(v42, v43));
        int32x4_t v43 = vaddq_s32(v43, v45);
        int8x16_t v52 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v50)), v51));
        float32x4_t v48 = vaddq_f32(v48, (float32x4_t)vandq_s8(*v46, v52));
        float32x4_t v47 = vaddq_f32(v47, (float32x4_t)vandq_s8(v46[54], v52));
        float32x4_t v44 = vaddq_f32(v44, (float32x4_t)vandq_s8(v46[108], v52));
        v41 += 4;
        ++v46;
      }
      while (v41 < v9);
      float32x4_t v53 = *(float32x4_t *)(a2 + 3504);
      v53.i32[3] = 0;
      *(float32x2_t *)v54.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), *(float32x2_t *)v48.f32);
      v54.i32[0] = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32).u32[0];
      float32x2_t v55 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL), *(float32x2_t *)v47.f32);
      int32x2_t v56 = (int32x2_t)vpadd_f32(v55, v55);
      a8 = (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL);
      float32x2_t v57 = vadd_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)v44.f32);
      v54.i32[1] = v56.i32[0];
      v54.i64[1] = vpadd_f32(v57, v57).u32[0];
      float32x4_t v58 = vsubq_f32(vmulq_n_f32(v53, (float)v9), v54);
      v56.i8[0] = a1[4];
      *(float *)v56.i32 = (float)v56.u32[0];
      float32x4_t v59 = vdivq_f32(v54, (float32x4_t)vdupq_lane_s32(v56, 0));
      v54.i8[0] = a1[5];
      v54.f32[0] = (float)v54.u32[0];
      float32x4_t v115 = v59;
      float32x4_t v116 = vdivq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0));
    }
    else if (v8 == 3)
    {
      unint64_t v10 = 0;
      int32x4_t v11 = vdupq_n_s32(v9);
      float32x4_t v12 = 0uLL;
      v13.i64[0] = 0x400000004;
      v13.i64[1] = 0x400000004;
      int32x4_t v14 = (int32x4_t)xmmword_234378DD0;
      int8x16_t v15 = (int8x16_t *)a2;
      float32x4_t v16 = 0uLL;
      float32x4_t v17 = 0uLL;
      float32x4_t v18 = 0uLL;
      float32x4_t v19 = 0uLL;
      float32x4_t v20 = 0uLL;
      do
      {
        uint64_t v21 = (const float *)&a1[v10 + 8];
        uint8x8_t v22 = (uint8x8_t)vld1_dup_f32(v21);
        int16x4_t v23 = (int16x4_t)vmovl_u8(v22).u64[0];
        int8x8_t v24 = (int8x8_t)vmovn_s32(vcgtq_s32(v11, v14));
        int32x4_t v14 = vaddq_s32(v14, v13);
        int8x16_t v25 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v23), v24));
        int8x16_t v26 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v23, (int16x4_t)0x1000100010001), v24));
        float32x4_t v20 = vaddq_f32(v20, (float32x4_t)vandq_s8(*v15, v25));
        float32x4_t v17 = vaddq_f32(v17, (float32x4_t)vandq_s8(*v15, v26));
        int8x16_t v27 = v15[54];
        float32x4_t v19 = vaddq_f32(v19, (float32x4_t)vandq_s8(v27, v25));
        float32x4_t v16 = vaddq_f32(v16, (float32x4_t)vandq_s8(v27, v26));
        int8x16_t v28 = v15[108];
        float32x4_t v18 = vaddq_f32(v18, (float32x4_t)vandq_s8(v28, v25));
        float32x4_t v12 = vaddq_f32(v12, (float32x4_t)vandq_s8(v28, v26));
        v10 += 4;
        ++v15;
      }
      while (v10 < v9);
      float32x4_t v29 = *(float32x4_t *)(a2 + 3504);
      v29.i32[3] = 0;
      *(float32x2_t *)v30.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), *(float32x2_t *)v20.f32);
      float32x2_t v31 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), *(float32x2_t *)v19.f32);
      float32x2_t v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), *(float32x2_t *)v18.f32);
      v30.i32[0] = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).u32[0];
      v30.i32[1] = vpadd_f32(v31, v31).u32[0];
      v30.i64[1] = vpadd_f32(v32, v32).u32[0];
      float32x4_t v33 = vmulq_n_f32(v29, (float)v9);
      *(float32x2_t *)v34.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(float32x2_t *)v17.f32);
      v34.i32[0] = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).u32[0];
      float32x2_t v35 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), *(float32x2_t *)v16.f32);
      int32x2_t v36 = (int32x2_t)vpadd_f32(v35, v35);
      a8 = (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL);
      float32x2_t v37 = vadd_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)v12.f32);
      v34.i32[1] = v36.i32[0];
      v34.i64[1] = vpadd_f32(v37, v37).u32[0];
      float32x4_t v38 = vsubq_f32(vsubq_f32(v33, v30), v34);
      v36.i8[0] = a1[4];
      *(float *)v36.i32 = (float)v36.u32[0];
      float32x4_t v39 = vdivq_f32(v30, (float32x4_t)vdupq_lane_s32(v36, 0));
      v33.i8[0] = a1[5];
      v33.f32[0] = (float)v33.u32[0];
      float32x4_t v115 = v39;
      float32x4_t v116 = vdivq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0));
      v39.i8[0] = a1[6];
      v39.f32[0] = (float)v39.u32[0];
      float32x4_t v117 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
    }
    else
    {
      unint64_t v60 = 0;
      int32x4_t v61 = vdupq_n_s32(v9);
      float32x4_t v62 = 0uLL;
      v63.i64[0] = 0x400000004;
      v63.i64[1] = 0x400000004;
      int32x4_t v64 = (int32x4_t)xmmword_234378DD0;
      float32x4_t v65 = 0uLL;
      int32x4_t v66 = (int8x16_t *)a2;
      float32x4_t v67 = 0uLL;
      float32x4_t v68 = 0uLL;
      a8 = 0uLL;
      float32x4_t v69 = 0uLL;
      float32x4_t v70 = 0uLL;
      float32x4_t v71 = 0uLL;
      float32x4_t v72 = 0uLL;
      do
      {
        float32x4_t v73 = (const float *)&a1[v60 + 8];
        uint8x8_t v74 = (uint8x8_t)vld1_dup_f32(v73);
        int16x4_t v75 = (int16x4_t)vmovl_u8(v74).u64[0];
        int8x8_t v76 = (int8x8_t)vmovn_s32(vcgtq_s32(v61, v64));
        int32x4_t v64 = vaddq_s32(v64, v63);
        int8x16_t v77 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v75), v76));
        int8x16_t v78 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v75, (int16x4_t)0x1000100010001), v76));
        int8x16_t v79 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v75, (int16x4_t)0x2000200020002), v76));
        float32x4_t v62 = vaddq_f32(v62, (float32x4_t)vandq_s8(*v66, v77));
        float32x4_t v68 = vaddq_f32(v68, (float32x4_t)vandq_s8(*v66, v78));
        float32x4_t v70 = vaddq_f32(v70, (float32x4_t)vandq_s8(*v66, v79));
        int8x16_t v80 = v66[54];
        float32x4_t v65 = vaddq_f32(v65, (float32x4_t)vandq_s8(v80, v77));
        a8 = vaddq_f32(a8, (float32x4_t)vandq_s8(v80, v78));
        float32x4_t v71 = vaddq_f32(v71, (float32x4_t)vandq_s8(v80, v79));
        int8x16_t v81 = v66[108];
        float32x4_t v67 = vaddq_f32(v67, (float32x4_t)vandq_s8(v81, v77));
        float32x4_t v69 = vaddq_f32(v69, (float32x4_t)vandq_s8(v81, v78));
        float32x4_t v72 = vaddq_f32(v72, (float32x4_t)vandq_s8(v81, v79));
        v60 += 4;
        ++v66;
      }
      while (v60 < v9);
      float32x4_t v82 = *(float32x4_t *)(a2 + 3504);
      v82.i32[3] = 0;
      *(float32x2_t *)v83.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL), *(float32x2_t *)v62.f32);
      float32x2_t v84 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL), *(float32x2_t *)v65.f32);
      float32x2_t v85 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), *(float32x2_t *)v67.f32);
      v83.i32[0] = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32).u32[0];
      v83.i32[1] = vpadd_f32(v84, v84).u32[0];
      v83.i64[1] = vpadd_f32(v85, v85).u32[0];
      *(float32x2_t *)v86.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), *(float32x2_t *)v68.f32);
      v86.i32[0] = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32).u32[0];
      float32x2_t v87 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL), *(float32x2_t *)a8.f32);
      float32x2_t v88 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL), *(float32x2_t *)v69.f32);
      v86.i32[1] = vpadd_f32(v87, v87).u32[0];
      v86.i64[1] = vpadd_f32(v88, v88).u32[0];
      *(float32x2_t *)v89.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), *(float32x2_t *)v70.f32);
      v89.i32[0] = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).u32[0];
      float32x2_t v90 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), *(float32x2_t *)v71.f32);
      int32x2_t v91 = (int32x2_t)vpadd_f32(v90, v90);
      float32x2_t v92 = (float32x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
      float32x2_t v93 = vadd_f32(v92, *(float32x2_t *)v72.f32);
      v89.i32[1] = v91.i32[0];
      v89.i64[1] = vpadd_f32(v93, v93).u32[0];
      float32x4_t v94 = vsubq_f32(vsubq_f32(vsubq_f32(vmulq_n_f32(v82, (float)v9), v83), v86), v89);
      v91.i8[0] = a1[4];
      *(float *)v91.i32 = (float)v91.u32[0];
      float32x4_t v95 = vdivq_f32(v83, (float32x4_t)vdupq_lane_s32(v91, 0));
      v92.i8[0] = a1[5];
      v92.f32[0] = (float)v92.u32[0];
      float32x4_t v115 = v95;
      float32x4_t v116 = vdivq_f32(v86, (float32x4_t)vdupq_lane_s32((int32x2_t)v92, 0));
      v95.i8[0] = a1[6];
      v95.f32[0] = (float)v95.u32[0];
      float32x4_t v96 = vdivq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.f32, 0));
      v89.i8[0] = a1[7];
      v89.f32[0] = (float)v89.u32[0];
      float32x4_t v117 = v96;
      float32x4_t v118 = vdivq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 0));
    }
  }
  uint64_t v97 = 0;
  float32x2_t v98 = a1 + 224;
  do
  {
    uint64_t v99 = a1[v97 + 4];
    float32x4_t v100 = *(&v115 + v97);
    *(float32x4_t *)(a3 + 32 * v97) = v100;
    float32x4_t v101 = 0uLL;
    float32x2_t v102 = v98;
    float32x4_t v103 = 0uLL;
    float32x4_t v104 = 0uLL;
    do
    {
      unsigned int v105 = *v102++;
      float32x4_t v106 = (unsigned __int32 *)(a2 + 4 * v105);
      a8.i32[0] = *v106;
      a8.i32[1] = v106[216];
      a8.i32[2] = v106[432];
      float32x4_t v107 = vsubq_f32(a8, v100);
      int16x4_t v108 = vmovn_s32(vcgtzq_f32(v107));
      float32x4_t v101 = vaddq_f32(v101, (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vmovl_s16(vdup_lane_s16(v108, 0))));
      float32x4_t v103 = vaddq_f32(v103, (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vmovl_s16(vdup_lane_s16(v108, 1))));
      a8 = (float32x4_t)vandq_s8((int8x16_t)v107, (int8x16_t)vmovl_s16(vdup_lane_s16(v108, 2)));
      float32x4_t v104 = vaddq_f32(v104, a8);
      --v99;
    }
    while (v99);
    int8x16_t v109 = (int8x16_t)vmulq_f32(v101, v101);
    *(float32x2_t *)v109.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL), *(float32x2_t *)v109.i8);
    float32x4_t v110 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8), 0);
    int8x16_t v111 = (int8x16_t)vmulq_f32(v103, v103);
    *(float32x2_t *)v111.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL), *(float32x2_t *)v111.i8);
    a8 = (float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v111.i8), 0);
    int8x16_t v112 = (int8x16_t)vmulq_f32(v104, v104);
    *(float32x2_t *)v112.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), *(float32x2_t *)v112.i8);
    int8x16_t v113 = (int8x16_t)vcgtq_f32(a8, v110);
    int8x16_t result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v112.i8, *(float32x2_t *)v112.i8), 0), (float32x4_t)vbslq_s8(v113, (int8x16_t)a8, (int8x16_t)v110)), (int8x16_t)v104, vbslq_s8(v113, (int8x16_t)v103, (int8x16_t)v101));
    *(int8x16_t *)(a3 + 32 * v97++ + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = result;
    v98 += 216;
  }
  while (v97 != v8);
  return result;
}

unsigned __int16 *compute_avgs_and_dirs_2_comp(unsigned __int16 *result, int32x4_t *a2, int a3, int a4, uint64_t a5, double a6, double a7, double a8, int32x4_t a9)
{
  if (a3 || a4 != 1)
  {
    int32x4_t v12 = a2[219];
    if (a3 || a4 != 2)
    {
      v9.i64[1] = 0;
      float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)0, 4uLL).u64[0];
      int32x4_t v11 = a2 + 108;
      a2 += 54;
    }
    else
    {
      float32x4_t v9 = (float32x4_t)vzip2q_s32((int32x4_t)0, (int32x4_t)0);
      float32x4_t v10 = (float32x4_t)vuzp1q_s32(v12, (int32x4_t)v9);
      int32x4_t v11 = a2 + 108;
    }
  }
  else
  {
    float32x4_t v10 = (float32x4_t)a2[219];
    v9.i64[1] = 0;
    v10.i64[1] = 0;
    int32x4_t v11 = a2 + 54;
  }
  uint64_t v13 = 0;
  int32x4_t v14 = result + 112;
  uint64_t v15 = *result;
  do
  {
    uint64_t v16 = *((unsigned __int8 *)result + v13 + 4);
    if (v15 >= 2)
    {
      float32x4_t v17 = 0uLL;
      float32x4_t v18 = v14;
      uint64_t v19 = *((unsigned __int8 *)result + v13 + 4);
      do
      {
        int v20 = *(unsigned __int8 *)v18;
        float32x4_t v18 = (unsigned __int16 *)((char *)v18 + 1);
        v9.i32[0] = a2->i32[v20];
        v9.i32[1] = v11->i32[v20];
        float32x4_t v17 = vaddq_f32(v17, v9);
        --v19;
      }
      while (v19);
      v9.f32[0] = (float)v16;
      float32x4_t v10 = vdivq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
    }
    uint64_t v21 = 0;
    *(float32x4_t *)(a5 + 32 * v13) = v10;
    float32x4_t v22 = 0uLL;
    float32x4_t v23 = 0uLL;
    do
    {
      uint64_t v24 = *((unsigned __int8 *)v14 + v21);
      a9.i32[0] = a2->i32[v24];
      a9.i32[1] = v11->i32[v24];
      float32x4_t v25 = vsubq_f32((float32x4_t)a9, v10);
      int16x4_t v26 = vmovn_s32(vcgtzq_f32(v25));
      float32x4_t v22 = vaddq_f32(v22, (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vmovl_s16(vdup_lane_s16(v26, 0))));
      a9 = (int32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vmovl_s16(vdup_lane_s16(v26, 1)));
      float32x4_t v23 = vaddq_f32(v23, (float32x4_t)a9);
      ++v21;
    }
    while (v16 != v21);
    int8x16_t v27 = (int8x16_t)vmulq_f32(v22, v22);
    *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
    int8x16_t v28 = (int8x16_t)vmulq_f32(v23, v23);
    *(float32x2_t *)v28.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), *(float32x2_t *)v28.i8);
    a9 = vmovl_s16(vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8), vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)), 0));
    float32x4_t v9 = (float32x4_t)vbslq_s8((int8x16_t)a9, (int8x16_t)v23, (int8x16_t)v22);
    *(float32x4_t *)(a5 + 32 * v13++ + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9;
    v14 += 108;
  }
  while (v13 != v15);
  return result;
}

float32x2_t compute_error_squared_rgba(unsigned __int16 *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v8 = 0;
  float32x4_t v9 = a1 + 112;
  uint64_t v10 = *a1;
  float32x4_t v11 = 0uLL;
  int32x4_t v12 = vdupq_n_s32(0xD01502F9);
  int32x4_t v13 = vdupq_n_s32(0x501502F9u);
  int32x4_t v14 = a2 + 54;
  uint64_t v15 = a2 + 108;
  uint64_t v16 = a2 + 162;
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  float32x4_t v18 = 0uLL;
  do
  {
    unint64_t v19 = 0;
    int v20 = (_OWORD *)(a3 + 32 * v8);
    int32x4_t v22 = *(int32x4_t *)v20;
    float32x4_t v21 = *((float32x4_t *)v20 + 1);
    float32x4_t v23 = *(float32x4_t *)(a4 + 32 * v8 + 16);
    unint64_t v24 = *((unsigned __int8 *)a1 + v8 + 4);
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
    float32x4_t v27 = (float32x4_t)vdupq_laneq_s32(v22, 2);
    float32x4_t v28 = (float32x4_t)vdupq_laneq_s32(v22, 3);
    float32x4_t v29 = a2[221];
    int32x4_t v30 = vdupq_n_s32(v24);
    int32x4_t v31 = (int32x4_t)xmmword_234378DD0;
    float32x4_t v32 = (float32x4_t)v13;
    float32x4_t v33 = (float32x4_t)v12;
    do
    {
      v7.i32[0] = *(_DWORD *)&v9[v19 / 2];
      float32x4_t v34 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.f32));
      uint64_t v35 = v34.u32[1];
      uint64_t v36 = v34.u32[3];
      uint64_t v37 = v34.u32[0];
      uint64_t v38 = v34.u32[2];
      v34.i32[0] = a2->i32[v34.u32[0]];
      float32x4_t v39 = &v14->i32[v34.u32[1]];
      v34.i32[1] = a2->i32[v34.u32[1]];
      v40.i32[0] = v14->i32[v37];
      v40.i32[1] = *v39;
      v34.i32[2] = a2->i32[v34.u32[2]];
      unint64_t v41 = &v14->i32[v34.u32[3]];
      v40.i32[2] = v14->i32[v38];
      v34.i32[3] = a2->i32[v34.u32[3]];
      v42.i32[0] = v15->i32[v37];
      v40.i32[3] = *v41;
      v42.i32[1] = v15->i32[v35];
      v42.i32[2] = v15->i32[v38];
      v43.i32[0] = v16->i32[v37];
      v42.i32[3] = v15->i32[v36];
      v43.i32[1] = v16->i32[v35];
      v43.i32[2] = v16->i32[v38];
      v43.i32[3] = v16->i32[v36];
      float32x4_t v44 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v34, v21.f32[0]), vmulq_lane_f32(v40, *(float32x2_t *)v21.f32, 1)), vmulq_laneq_f32(v42, v21, 2)), vmulq_laneq_f32(v43, v21, 3));
      float32x4_t v32 = vminnmq_f32(v44, v32);
      float32x4_t v33 = vmaxnmq_f32(v44, v33);
      float32x4_t v45 = vaddq_f32(vsubq_f32(v25, v34), vmulq_n_f32(v44, v21.f32[0]));
      float32x4_t v46 = vaddq_f32(vsubq_f32(v26, v40), vmulq_lane_f32(v44, *(float32x2_t *)v21.f32, 1));
      float32x4_t v47 = vaddq_f32(vsubq_f32(v27, v42), vmulq_laneq_f32(v44, v21, 2));
      float32x4_t v48 = vaddq_f32(vsubq_f32(v28, v43), vmulq_laneq_f32(v44, v21, 3));
      int8x16_t v49 = (int8x16_t)vcgtq_s32(v30, v31);
      float32x4_t v50 = vaddq_f32(vmulq_f32(v45, vmulq_n_f32(v45, v29.f32[0])), vmulq_f32(v46, vmulq_lane_f32(v46, *(float32x2_t *)v29.f32, 1)));
      float32x4_t v51 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v34, v23.f32[0]), vmulq_lane_f32(v40, *(float32x2_t *)v23.f32, 1)), vmulq_laneq_f32(v42, v23, 2)), vmulq_laneq_f32(v43, v23, 3));
      float32x4_t v52 = vsubq_f32(vmulq_n_f32(v51, v23.f32[0]), v34);
      float32x4_t v53 = vsubq_f32(vmulq_lane_f32(v51, *(float32x2_t *)v23.f32, 1), v40);
      float32x4_t v54 = vsubq_f32(vmulq_laneq_f32(v51, v23, 2), v42);
      float32x4_t v55 = vsubq_f32(vmulq_laneq_f32(v51, v23, 3), v43);
      float32x4_t v11 = vaddq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v48, vmulq_laneq_f32(v48, v29, 3)), vaddq_f32(vmulq_f32(v47, vmulq_laneq_f32(v47, v29, 2)), v50)), v49));
      float32x4_t v7 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v55, vmulq_laneq_f32(v55, v29, 3)), vaddq_f32(vmulq_f32(v54, vmulq_laneq_f32(v54, v29, 2)), vaddq_f32(vmulq_f32(v52, vmulq_n_f32(v52, v29.f32[0])), vmulq_f32(v53, vmulq_lane_f32(v53, *(float32x2_t *)v29.f32, 1))))), v49);
      float32x4_t v18 = vaddq_f32(v18, v7);
      int32x4_t v31 = vaddq_s32(v31, v17);
      v19 += 4;
    }
    while (v19 < v24);
    *(float *)(a5 + 4 * v8++) = fmaxf(vmaxvq_f32(v33) - vminvq_f32(v32), 0.0000001);
    v9 += 108;
  }
  while (v8 != v10);
  float32x2_t v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), *(float32x2_t *)v11.f32);
  *a6 = vpadd_f32(v56, v56).u32[0];
  float32x2_t v57 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), *(float32x2_t *)v18.f32);
  float32x2_t result = vpadd_f32(v57, v57);
  *a7 = result.i32[0];
  return result;
}

float32x2_t compute_error_squared_rgb(unsigned __int16 *a1, float32x4_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v6 = 0;
  float32x4_t v7 = a1 + 112;
  uint64_t v8 = *a1;
  float32x4_t v9 = a2 + 54;
  uint64_t v10 = a2 + 108;
  float32x4_t v11 = 0uLL;
  int32x4_t v12 = vdupq_n_s32(0xD01502F9);
  int32x4_t v13 = vdupq_n_s32(0x501502F9u);
  v14.i64[0] = 0x400000004;
  v14.i64[1] = 0x400000004;
  float32x4_t v15 = 0uLL;
  do
  {
    unint64_t v16 = 0;
    int32x4_t v17 = (_OWORD *)(a3 + 144 * v6);
    int32x4_t v19 = *((int32x4_t *)v17 + 4);
    float32x4_t v18 = *((float32x4_t *)v17 + 5);
    float32x4_t v20 = *((float32x4_t *)v17 + 7);
    unint64_t v21 = *((unsigned __int8 *)a1 + v6 + 4);
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
    float32x4_t v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1);
    float32x4_t v24 = (float32x4_t)vdupq_laneq_s32(v19, 2);
    float32x4_t v25 = a2[221];
    int32x4_t v26 = vdupq_n_s32(v21);
    int32x4_t v27 = (int32x4_t)xmmword_234378DD0;
    float32x4_t v28 = (float32x4_t)v13;
    float32x4_t v29 = (float32x4_t)v12;
    do
    {
      v5.i32[0] = *(_DWORD *)&v7[v16 / 2];
      float32x4_t v30 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v5.f32));
      uint64_t v31 = v30.u32[1];
      uint64_t v32 = v30.u32[1];
      uint64_t v33 = v30.u32[0];
      uint64_t v34 = v30.u32[3];
      uint64_t v35 = v30.u32[2];
      v30.i32[0] = a2->i32[v30.u32[0]];
      v30.i32[1] = a2->i32[v30.u32[1]];
      v36.i32[0] = v9->i32[v33];
      v30.i32[2] = a2->i32[v30.u32[2]];
      v36.i32[1] = v9->i32[v31];
      uint64_t v37 = &v9->i32[v30.u32[3]];
      v30.i32[3] = a2->i32[v30.u32[3]];
      v36.i32[2] = v9->i32[v35];
      v36.i32[3] = *v37;
      v38.i32[0] = v10->i32[v33];
      v38.i32[1] = v10->i32[v32];
      v38.i32[2] = v10->i32[v35];
      v38.i32[3] = v10->i32[v34];
      float32x4_t v39 = vaddq_f32(vaddq_f32(vmulq_n_f32(v30, v18.f32[0]), vmulq_lane_f32(v36, *(float32x2_t *)v18.f32, 1)), vmulq_laneq_f32(v38, v18, 2));
      float32x4_t v28 = vminnmq_f32(v39, v28);
      float32x4_t v29 = vmaxnmq_f32(v39, v29);
      float32x4_t v40 = vaddq_f32(vsubq_f32(v22, v30), vmulq_n_f32(v39, v18.f32[0]));
      float32x4_t v41 = vaddq_f32(vsubq_f32(v23, v36), vmulq_lane_f32(v39, *(float32x2_t *)v18.f32, 1));
      float32x4_t v42 = vaddq_f32(vsubq_f32(v24, v38), vmulq_laneq_f32(v39, v18, 2));
      int8x16_t v43 = (int8x16_t)vcgtq_s32(v26, v27);
      float32x4_t v44 = vaddq_f32(vmulq_f32(v40, vmulq_n_f32(v40, v25.f32[0])), vmulq_f32(v41, vmulq_lane_f32(v41, *(float32x2_t *)v25.f32, 1)));
      float32x4_t v45 = vaddq_f32(vaddq_f32(vmulq_n_f32(v30, v20.f32[0]), vmulq_lane_f32(v36, *(float32x2_t *)v20.f32, 1)), vmulq_laneq_f32(v38, v20, 2));
      float32x4_t v46 = vsubq_f32(vmulq_n_f32(v45, v20.f32[0]), v30);
      float32x4_t v47 = vsubq_f32(vmulq_lane_f32(v45, *(float32x2_t *)v20.f32, 1), v36);
      float32x4_t v48 = vsubq_f32(vmulq_laneq_f32(v45, v20, 2), v38);
      float32x4_t v11 = vaddq_f32(v11, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v42, vmulq_laneq_f32(v42, v25, 2)), v44), v43));
      float32x4_t v5 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v48, vmulq_laneq_f32(v48, v25, 2)), vaddq_f32(vmulq_f32(v46, vmulq_n_f32(v46, v25.f32[0])), vmulq_f32(v47, vmulq_lane_f32(v47, *(float32x2_t *)v25.f32, 1)))), v43);
      float32x4_t v15 = vaddq_f32(v15, v5);
      int32x4_t v27 = vaddq_s32(v27, v14);
      v16 += 4;
    }
    while (v16 < v21);
    *(float *)(a3 + 144 * v6++ + 128) = fmaxf(vmaxvq_f32(v29) - vminvq_f32(v28), 0.0000001);
    v7 += 108;
  }
  while (v6 != v8);
  float32x2_t v49 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), *(float32x2_t *)v11.f32);
  *a4 = vpadd_f32(v49, v49).u32[0];
  float32x2_t v50 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), *(float32x2_t *)v15.f32);
  float32x2_t result = vpadd_f32(v50, v50);
  *a5 = result.i32[0];
  return result;
}

double physx::PxcNpCacheWrite<physx::PxcLocalContactsCache>(physx::PxcNpCacheStreamPair *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a2 + 8) = 64;
  uint64_t v5 = physx::PxcNpCacheStreamPair::reserve(a1, 64);
  *(void *)a2 = v5;
  if (v5)
  {
    if (v5 == -1)
    {
      *(void *)a2 = 0;
    }
    else
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a3;
      *(_OWORD *)(v5 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v5 + 32) = *(_OWORD *)(a3 + 32);
      double result = *(double *)(a3 + 48);
      *(double *)(v5 + 48) = result;
      *(void *)(v5 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(unsigned int *)(a3 + 56);
    }
  }
  return result;
}

uint64_t physx::PxcInvalidContactPair()
{
  return 0;
}

void physx::PxvRegisterHeightFields(physx *this)
{
  off_26B7B4578 = physx::PxcContactSphereHeightField;
  off_26B7B45E8 = physx::PxcContactCapsuleHeightField;
  off_26B7B4620 = physx::PxcContactBoxHeightField;
  off_26B7B4658 = physx::PxcContactConvexHeightField;
  off_26B7B4700 = physx::PxcPCMContactSphereHeightField;
  off_26B7B4770 = physx::PxcPCMContactCapsuleHeightField;
  off_26B7B47A8 = physx::PxcPCMContactBoxHeightField;
  off_26B7B47E0 = physx::PxcPCMContactConvexHeightField;
}

uint64_t physx::PxcGetMaterialHeightField(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int16 *)(a1 + 88) > 1u)
  {
    uint64_t v7 = *(unsigned int *)(a3 + 4656);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 48);
      uint64_t v10 = (_WORD *)(a4 + 2 * a2);
      float32x4_t v11 = (unsigned int *)(a3 + 612);
      do
      {
        unsigned int v12 = *v11;
        v11 += 16;
        uint64_t v13 = v9 + ((2 * v12) & 0x1FFFFFFFCLL);
        int32x4_t v14 = (unsigned char *)(v13 + 2);
        float32x4_t v15 = (unsigned char *)(v13 + 3);
        if (v12) {
          unint64_t v16 = v15;
        }
        else {
          unint64_t v16 = v14;
        }
        _WORD *v10 = *(_WORD *)(v8 + 2 * (*v16 & 0x7F));
        v10 += 2;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a3 + 4656);
    if (v4)
    {
      __int16 v5 = *(_WORD *)(a1 + 34);
      uint64_t v6 = (_WORD *)(a4 + 2 * a2);
      do
      {
        *uint64_t v6 = v5;
        v6 += 2;
        --v4;
      }
      while (v4);
    }
  }
  return 1;
}

uint64_t physx::PxcGetMaterialShapeHeightField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned __int16 *)(a2 + 88) > 1u)
  {
    uint64_t v8 = *(unsigned int *)(a3 + 4656);
    if (v8)
    {
      uint64_t v9 = *(void *)(a2 + 80);
      __int16 v10 = *(_WORD *)(a1 + 34);
      uint64_t v11 = *(void *)(*(void *)(a2 + 72) + 48);
      unsigned int v12 = (_WORD *)(a4 + 2);
      uint64_t v13 = (unsigned int *)(a3 + 612);
      do
      {
        *(v12 - 1) = v10;
        unsigned int v14 = *v13;
        v13 += 16;
        uint64_t v15 = v11 + ((2 * v14) & 0x1FFFFFFFCLL);
        unint64_t v16 = (unsigned char *)(v15 + 2);
        int32x4_t v17 = (unsigned char *)(v15 + 3);
        if (v14) {
          float32x4_t v18 = v17;
        }
        else {
          float32x4_t v18 = v16;
        }
        _WORD *v12 = *(_WORD *)(v9 + 2 * (*v18 & 0x7F));
        v12 += 2;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a3 + 4656);
    if (v4)
    {
      __int16 v5 = *(_WORD *)(a1 + 34);
      __int16 v6 = *(_WORD *)(a2 + 34);
      uint64_t v7 = (_WORD *)(a4 + 2);
      do
      {
        *(v7 - 1) = v5;
        *uint64_t v7 = v6;
        v7 += 2;
        --v4;
      }
      while (v4);
    }
  }
  return 1;
}

uint64_t physx::PxcGetMaterialMesh(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 4656);
  if (*(unsigned __int16 *)(a1 + 112) >= 2u)
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a1 + 96);
      uint64_t v8 = *(void *)(a1 + 104);
      uint64_t v9 = (_WORD *)(a4 + 2 * a2);
      __int16 v10 = (unsigned int *)(a3 + 612);
      do
      {
        unsigned int v11 = *v10;
        v10 += 16;
        _WORD *v9 = *(_WORD *)(v8 + 2 * *(unsigned __int16 *)(v7 + 2 * v11));
        v9 += 2;
        --v4;
      }
      while (v4);
    }
  }
  else if (v4)
  {
    __int16 v5 = *(_WORD *)(a1 + 34);
    __int16 v6 = (_WORD *)(a4 + 2 * a2);
    do
    {
      *__int16 v6 = v5;
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  return 1;
}

uint64_t physx::PxcGetMaterialShapeMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 4656);
  if (*(unsigned __int16 *)(a2 + 112) >= 2u)
  {
    if (v4)
    {
      __int16 v8 = *(_WORD *)(a1 + 34);
      uint64_t v9 = (_WORD *)(a4 + 2);
      __int16 v10 = (unsigned int *)(a3 + 612);
      uint64_t v11 = *(void *)(a2 + 96);
      uint64_t v12 = *(void *)(a2 + 104);
      do
      {
        *(v9 - 1) = v8;
        unsigned int v13 = *v10;
        v10 += 16;
        _WORD *v9 = *(_WORD *)(v12 + 2 * *(unsigned __int16 *)(v11 + 2 * v13));
        v9 += 2;
        --v4;
      }
      while (v4);
    }
  }
  else if (v4)
  {
    __int16 v5 = *(_WORD *)(a1 + 34);
    __int16 v6 = *(_WORD *)(a2 + 34);
    uint64_t v7 = (_WORD *)(a4 + 2);
    do
    {
      *(v7 - 1) = v5;
      *uint64_t v7 = v6;
      v7 += 2;
      --v4;
    }
    while (v4);
  }
  return 1;
}

uint64_t physx::PxcGetMaterialShape(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 4656);
  if (v4)
  {
    __int16 v5 = *(_WORD *)(a1 + 34);
    __int16 v6 = (_WORD *)(a4 + 2 * a2);
    do
    {
      *__int16 v6 = v5;
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  return 1;
}

uint64_t physx::PxcGetMaterialShapeShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(a3 + 4656);
  if (v4)
  {
    __int16 v5 = *(_WORD *)(a1 + 34);
    __int16 v6 = *(_WORD *)(a2 + 34);
    uint64_t v7 = (_WORD *)(a4 + 2);
    do
    {
      *(v7 - 1) = v5;
      *uint64_t v7 = v6;
      v7 += 2;
      --v4;
    }
    while (v4);
  }
  return 1;
}

void physx::PxcDiscreteNarrowPhase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v259 = *MEMORY[0x263EF8340];
  __int16 v4 = *(_WORD *)(a2 + 48);
  if ((v4 & 0x200) == 0) {
    return;
  }
  unsigned int v9 = *(unsigned __int8 *)(a2 + 54);
  unsigned int v10 = *(unsigned __int8 *)(a2 + 55);
  uint64_t v11 = *(void *)(*(void *)(a1 + 7168) + 8);
  uint64_t v13 = *(unsigned int *)(a2 + 64);
  uint64_t v12 = *(unsigned int *)(a2 + 68);
  char v14 = *(unsigned char *)(a4 + 26);
  if (v4 & 0x80 | v14 & 0x20)
  {
LABEL_9:
    int32x4_t v17 = (float *)(v11 + 32 * v13);
    float32x4_t v18 = (float *)(v11 + 32 * v12);
    *(unsigned char *)(a4 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14 & 0xDF;
    uint64_t v19 = a1 + 7136;
    *(float *)(a1 + 713re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(float *)(*(void *)(a1 + 7176) + 4 * v13) + *(float *)(*(void *)(a1 + 7176) + 4 * v12);
    if (v9 > v10) {
      uint64_t v20 = v10;
    }
    else {
      uint64_t v20 = v9;
    }
    if (v9 > v10) {
      uint64_t v21 = v9;
    }
    else {
      uint64_t v21 = v10;
    }
    if (v9 > v10) {
      float32x4_t v22 = v18;
    }
    else {
      float32x4_t v22 = v17;
    }
    if (v9 > v10) {
      float32x4_t v23 = v17;
    }
    else {
      float32x4_t v23 = v18;
    }
    if (v9 > v10) {
      uint64_t v24 = *(void *)(a2 + 24);
    }
    else {
      uint64_t v24 = *(void *)(a2 + 16);
    }
    if (v9 > v10) {
      _X12 = *(void *)(a2 + 16);
    }
    else {
      _X12 = *(void *)(a2 + 24);
    }
    uint64_t v26 = a1 + 28 * v20 + 4 * v21;
    ++*(_DWORD *)(v26 + 120);
    *(_DWORD *)(a1 + 465re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 23) = 0;
    *(void *)(a4 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    __asm { PRFM            #0, [X12] }
    uint64_t v31 = (void (*)(uint64_t, uint64_t, float *, float *, uint64_t, uint64_t, uint64_t, uint64_t))*(&physx::g_ContactMethodTable[7 * v20] + v21);
    uint64_t v247 = _X12;
    if (!*(unsigned char *)(a1 + 7185) || !physx::g_CanUseContactCache[8 * v20 - v20 + v21])
    {
      unsigned int v173 = v20;
      v31(v24 + 40, _X12 + 40, v22, v23, v19, a3, a1 + 560, a1 + 8);
      unsigned int v172 = v173;
LABEL_123:
      int32x4_t v212 = (void (*)(uint64_t, uint64_t, uint64_t, float *))*(&physx::g_GetMaterialMethodTable[7 * v172] + v21);
      if (v212) {
        v212(v24, v247, a1, &v248);
      }
      if (v9 > v10) {
        flipContacts(a1, (uint64_t)&v248);
      }
      finishContacts(*(unsigned __int16 *)(a2 + 48), a4, a1, (unsigned __int16 *)&v248, v21 > 4);
      return;
    }
    _X9 = *(void *)a3;
    uint64_t v218 = v21;
    uint64_t v219 = v24;
    unsigned int v217 = v20;
    if (*(void *)a3)
    {
      __asm { PRFM            #0, [X9] }
      if ((unint64_t)((_X9 & 0x7F) + *(unsigned __int16 *)(a3 + 8)) >= 0x81) {
        __asm { PRFM            #0, [X9,#0x80] }
      }
      uint64_t v35 = a1 + 560;
      *(_DWORD *)(a1 + 465re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      float v37 = *(float *)_X9;
      float v36 = *(float *)(_X9 + 4);
      float v248 = *(float *)_X9;
      float v249 = v36;
      float v38 = *(float *)(_X9 + 8);
      float v39 = *(float *)(_X9 + 12);
      float v250 = v38;
      float v251 = v39;
      float v41 = *(float *)(_X9 + 20);
      float v252 = *(float *)(_X9 + 16);
      float v40 = v252;
      *(float *)uint64_t v253 = v41;
      float v42 = *(float *)(_X9 + 28);
      *(_DWORD *)&v253[4] = *(_DWORD *)(_X9 + 24);
      float v43 = *(float *)&v253[4];
      *(float *)&v253[8] = v42;
      float v45 = *(float *)(_X9 + 36);
      *(_DWORD *)&v253[12] = *(_DWORD *)(_X9 + 32);
      float v44 = *(float *)&v253[12];
      *(float *)&v253[16] = v45;
      float v47 = *(float *)(_X9 + 44);
      *(_DWORD *)&v253[20] = *(_DWORD *)(_X9 + 40);
      float v46 = *(float *)&v253[20];
      *(float *)&uint64_t v254 = v47;
      float v49 = *(float *)(_X9 + 52);
      HIDWORD(v254) = *(_DWORD *)(_X9 + 48);
      float v48 = *((float *)&v254 + 1);
      float v255 = v49;
      int v50 = *(unsigned __int16 *)(_X9 + 56);
      __int16 v256 = *(_WORD *)(_X9 + 56);
      int v51 = *(unsigned __int8 *)(_X9 + 58);
      char v257 = *(unsigned char *)(_X9 + 58);
      int v52 = *(unsigned __int8 *)(_X9 + 59);
      char v258 = *(unsigned char *)(_X9 + 59);
      size_t v53 = *(unsigned int *)(_X9 + 60);
      *(void *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
      float v54 = *v23;
      float v55 = v23[1];
      float v56 = v23[2];
      float v57 = v23[3];
      float v58 = v22[4] - v23[4];
      float v59 = v22[5] - v23[5];
      float v60 = v22[6] - v23[6];
      float v61 = v58 + v58;
      float v62 = v59 + v59;
      float v63 = v60 + v60;
      float v64 = (float)(v57 * v57) + -0.5;
      float v65 = (float)((float)-(float)(v55 * v62) - (float)(*v23 * v61)) - (float)(v56 * v63);
      float v66 = (float)((float)(v57 * (float)((float)(v56 * v62) - (float)(v55 * v63))) + (float)(v61 * v64))
          - (float)(*v23 * v65);
      float v67 = (float)((float)(v57 * (float)((float)(*v23 * v63) - (float)(v56 * v61))) + (float)(v62 * v64))
          - (float)(v55 * v65);
      float v68 = (float)((float)(v57 * (float)((float)(v55 * v61) - (float)(*v23 * v62))) + (float)(v63 * v64))
          - (float)(v56 * v65);
      float v243 = v41;
      float v245 = v40;
      float v238 = v48;
      float v239 = v47;
      float v241 = v43;
      float v236 = v49;
      float v69 = (float)(v40 - v47) + (float)(v40 - v47);
      float v70 = (float)(v41 - v48) + (float)(v41 - v48);
      float v71 = (float)(v43 - v49) + (float)(v43 - v49);
      float v72 = (float)(v46 * v46) + -0.5;
      float v73 = (float)((float)-(float)(v44 * v70) - (float)(v42 * v69)) - (float)(v45 * v71);
      float v74 = (float)((float)(v46 * (float)((float)(v45 * v70) - (float)(v44 * v71))) + (float)(v69 * v72))
          - (float)(v42 * v73);
      float v75 = (float)((float)(v46 * (float)((float)(v42 * v71) - (float)(v45 * v69))) + (float)(v70 * v72))
          - (float)(v44 * v73);
      float v76 = (float)((float)(v46 * (float)((float)(v44 * v69) - (float)(v42 * v70))) + (float)(v71 * v72))
          - (float)(v45 * v73);
      float v77 = vabds_f32(v66, v74);
      float v78 = vabds_f32(v67, v75);
      if (v77 <= v78) {
        float v77 = v78;
      }
      float v79 = vabds_f32(v68, v76);
      if (v77 <= v79) {
        float v80 = v79;
      }
      else {
        float v80 = v77;
      }
      if (v80 < (float)(*(float *)(a1 + 7144) * 0.01))
      {
        float v81 = -v55;
        float v82 = v22[2];
        float v83 = v22[3];
        float v84 = v22[1];
        float v85 = (float)((float)((float)(v54 * *v22) + (float)(v57 * v83)) + (float)(v55 * v84)) + (float)(v56 * v82);
        float v86 = (float)((float)((float)(v83 * (float)-v56) + (float)(v57 * v82)) + (float)((float)-v54 * v84))
            + (float)(*v22 * v55);
        float v87 = (float)((float)(v83 * v81) + (float)(v57 * v84)) + (float)((float)-v56 * *v22);
        float v88 = vabds_f32((float)((float)((float)(v83 * (float)-v54) + (float)(v57 * *v22)) + (float)(v81 * v82))+ (float)(v84 * v56), (float)((float)((float)(v39 * (float)-v42) + (float)(v46 * v37)) + (float)((float)-v44 * v38))+ (float)(v36 * v45));
        float v89 = vabds_f32(v87 + (float)(v82 * v54), (float)((float)((float)(v39 * (float)-v44) + (float)(v46 * v36)) + (float)((float)-v45 * v37))+ (float)(v38 * v42));
        if (v88 <= v89) {
          float v88 = v89;
        }
        float v90 = vabds_f32(v86, (float)((float)((float)(v39 * (float)-v45) + (float)(v46 * v38)) + (float)((float)-v42 * v36))+ (float)(v37 * v44));
        if (v88 <= v90) {
          float v88 = v90;
        }
        float v91 = vabds_f32(v85, (float)((float)((float)(v37 * v42) + (float)(v46 * v39)) + (float)(v44 * v36)) + (float)(v45 * v38));
        if (v88 <= v91) {
          float v88 = v91;
        }
        if (v88 < 0.01)
        {
          int v215 = v51;
          int v216 = v50;
          float v234 = v37;
          size_t __n = v53;
          __src = (char *)(_X9 + 64);
          int v92 = (v53 + 79) & 0xFFFFFFF0;
          *(_WORD *)(a3 + 8) = (v53 + 79) & 0xFFF0;
          uint64_t v93 = physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a1 + 536), (v53 + 79) & 0xFFF0);
          if (v93 == -1) {
            _X8 = 0;
          }
          else {
            _X8 = v93;
          }
          *(void *)a3 = _X8;
          __asm { PRFM            #0, [X8] }
          if ((_X8 & 0x7F) + v92 >= 0x81) {
            __asm { PRFM            #0, [X8,#0x80] }
          }
          *(_DWORD *)(a1 + 465re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v216;
          uint64_t v24 = v219;
          if (v216)
          {
            uint64_t v97 = 0;
            float v98 = *v23;
            float v99 = v23[1];
            float v100 = v23[2];
            float v101 = v23[3];
            float v102 = v99 + v99;
            float v103 = v100 + v100;
            float v104 = v99 * (float)(v99 + v99);
            float v105 = v100 * (float)(v100 + v100);
            float v106 = (float)(v98 + v98) * v99;
            float v107 = (float)(v98 + v98) * v100;
            float v108 = (float)(v98 + v98) * v101;
            float v109 = v102 * v100;
            float v110 = v102 * v101;
            float v111 = v103 * v101;
            float v232 = v106 + v111;
            float v233 = (float)(1.0 - v104) - v105;
            float v230 = v106 - v111;
            float v231 = v107 - v110;
            float v112 = 1.0 - (float)(v98 * (float)(v98 + v98));
            float v228 = v109 + v108;
            float v229 = v112 - v105;
            float v226 = v109 - v108;
            float v227 = v107 + v110;
            float v224 = v23[4];
            float v225 = v112 - v104;
            float v222 = v23[6];
            float v223 = v23[5];
            float v113 = *v22;
            float v114 = v22[1];
            float v115 = v22[2];
            float v116 = v22[3];
            float v117 = v114 + v114;
            float v118 = v115 + v115;
            float v119 = v114 * (float)(v114 + v114);
            float v120 = v115 * (float)(v115 + v115);
            float v121 = (float)(v113 + v113) * v114;
            float v122 = (float)(v113 + v113) * v115;
            float v123 = (float)(v113 + v113) * v116;
            float v124 = v117 * v115;
            float v125 = v117 * v116;
            float v126 = v118 * v116;
            float v221 = (float)(1.0 - v119) - v120;
            float v220 = v122 - v125;
            float v127 = 1.0 - (float)(v113 * (float)(v113 + v113));
            float v128 = v127 - v120;
            float v129 = v122 + v125;
            float v130 = v127 - v119;
            float v131 = v22[4];
            float v132 = v22[5];
            float v133 = v22[6];
            float v134 = (float)(v39 * v39) + -0.5;
            int v135 = v216;
            uint64_t v136 = 560;
            _X14 = __src;
            do
            {
              if (v135 != 1) {
                __asm { PRFM            #0, [X14,#0x80] }
              }
              if (v52) {
                _ZF = v136 == 560;
              }
              else {
                _ZF = 1;
              }
              if (_ZF) {
                uint64_t v140 = 12;
              }
              else {
                uint64_t v140 = 0;
              }
              int v141 = &_X14[v140];
              float v142 = *((float *)v141 + 1);
              float v143 = *((float *)v141 + 2);
              float v144 = (float)(*(float *)v141 - v245) + (float)(*(float *)v141 - v245);
              float v145 = (float)(v142 - v243) + (float)(v142 - v243);
              float v146 = (float)(v143 - v241) + (float)(v143 - v241);
              float v147 = (float)((float)(v36 * v145) + (float)(v234 * v144)) + (float)(v38 * v146);
              float v148 = (float)((float)(v144 * v134)
                           - (float)((float)((float)(v145 * (float)-v38) + (float)(v36 * v146)) * v39))
                   + (float)(v234 * v147);
              float v149 = (float)((float)(v145 * v134)
                           - (float)((float)((float)(v146 * (float)-v234) + (float)(v38 * v144)) * v39))
                   + (float)(v36 * v147);
              float v150 = (float)((float)(v146 * v134)
                           - (float)((float)((float)(v144 * (float)-v36) + (float)(v234 * v145)) * v39))
                   + (float)(v38 * v147);
              float v151 = (float)(v129 * v150) + (float)((float)(v221 * v148) + (float)((float)(v121 - v126) * v149));
              float v152 = (float)((float)(v124 - v123) * v150)
                   + (float)((float)((float)(v121 + v126) * v148) + (float)(v128 * v149));
              float v153 = (float)(v130 * v150) + (float)((float)(v220 * v148) + (float)((float)(v124 + v123) * v149));
              float v154 = (float)(*(float *)v141 - v239) + (float)(*(float *)v141 - v239);
              float v155 = (float)(v142 - v238) + (float)(v142 - v238);
              float v156 = (float)(v143 - v236) + (float)(v143 - v236);
              float v157 = (float)((float)(v44 * v155) + (float)(v42 * v154)) + (float)(v45 * v156);
              float v158 = (float)((float)(v154 * v72)
                           - (float)((float)((float)(v155 * (float)-v45) + (float)(v44 * v156)) * v46))
                   + (float)(v42 * v157);
              float v159 = (float)((float)(v155 * v72)
                           - (float)((float)((float)(v156 * (float)-v42) + (float)(v45 * v154)) * v46))
                   + (float)(v44 * v157);
              float v160 = (float)((float)(v156 * v72)
                           - (float)((float)((float)(v154 * (float)-v44) + (float)(v42 * v155)) * v46))
                   + (float)(v45 * v157);
              float v161 = (float)(v231 * v158) + (float)(v228 * v159);
              float v162 = (float)(v227 * v160) + (float)((float)(v233 * v158) + (float)(v230 * v159));
              float v163 = (float)(v226 * v160) + (float)((float)(v232 * v158) + (float)(v229 * v159));
              float v164 = *((float *)v141 + 3);
              uint64_t v165 = a1 + v136;
              if (_ZF) {
                uint64_t v97 = _X14;
              }
              float v166 = v131 + v151;
              float v167 = v132 + v152;
              float v168 = v224 + v162;
              float v169 = v223 + v163;
              *(void *)uint64_t v165 = *(void *)v97;
              *(_DWORD *)(v165 + 8) = *((_DWORD *)v97 + 2);
              *(float *)(v165 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = (float)(v166 + v168) * 0.5;
              *(float *)(v165 + 20) = (float)(v167 + v169) * 0.5;
              float v170 = v222 + (float)((float)(v225 * v160) + v161);
              *(float *)(v165 + 24) = (float)((float)(v133 + v153) + v170) * 0.5;
              *(float *)(v165 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v164
                                    + (float)((float)((float)(*((float *)v97 + 1) * (float)(v167 - v169))
                                                    + (float)((float)(v166 - v168) * *(float *)v97))
                                            + (float)((float)((float)(v133 + v153) - v170) * *((float *)v97 + 2)));
              if (v215)
              {
                _X14 = v141 + 20;
                int v171 = *((_DWORD *)v141 + 4);
              }
              else
              {
                _X14 = v141 + 16;
                int v171 = -1;
              }
              *(_DWORD *)(v165 + 52) = v171;
              v136 += 64;
              --v135;
            }
            while (v135);
          }
          if (_X8)
          {
            *(float *)_X8 = v234;
            *(float *)(_X8 + 4) = v36;
            *(float *)(_X8 + 8) = v38;
            *(float *)(_X8 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v39;
            *(float *)(_X8 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v245;
            *(float *)(_X8 + 20) = v243;
            *(float *)(_X8 + 24) = v241;
            *(_OWORD *)(_X8 + 28) = *(_OWORD *)&v253[8];
            *(void *)(_X8 + 44) = v254;
            *(float *)(_X8 + 52) = v255;
            *(_WORD *)(_X8 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v216;
            *(unsigned char *)(_X8 + re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58) = v215;
            *(unsigned char *)(_X8 + 59) = v52;
            *(_DWORD *)(_X8 + 60) = __n;
            memcpy((void *)(_X8 + 64), __src, __n);
          }
          ++*(_DWORD *)(a1 + 7192);
          unsigned int v172 = v217;
          uint64_t v21 = v218;
          goto LABEL_123;
        }
      }
    }
    else
    {
      uint64_t v35 = a1 + 560;
      *(_DWORD *)(a1 + 465re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(void *)a3 = 0;
      *(_WORD *)(a3 + 8) = 0;
    }
    v31(v24 + 40, _X12 + 40, v22, v23, v19, a3, v35, a1 + 8);
    float v177 = *v22;
    float v178 = v22[1];
    float v248 = *v22;
    float v249 = v178;
    float v179 = v22[2];
    float v180 = v22[3];
    float v250 = v179;
    float v251 = v180;
    float v181 = v22[4];
    float v252 = v181;
    uint64_t v182 = *(void *)(v22 + 5);
    uint64_t v183 = *(void *)v23;
    *(void *)&long long v184 = v182;
    *((void *)&v184 + 1) = *(void *)v23;
    *(_OWORD *)uint64_t v253 = v184;
    int v185 = *((_DWORD *)v23 + 2);
    *(_DWORD *)&v253[16] = v185;
    int v186 = *((_DWORD *)v23 + 3);
    *(_DWORD *)&v253[20] = v186;
    int v187 = *((_DWORD *)v23 + 4);
    LODWORD(v254) = v187;
    int v188 = *((_DWORD *)v23 + 5);
    HIDWORD(v254) = v188;
    float v189 = v23[6];
    float v255 = v189;
    unint64_t v190 = *(unsigned int *)(a1 + 4656);
    if (!v190)
    {
      __int16 v256 = 0;
      char v257 = 0;
      float v195 = (physx::PxcNpCacheStreamPair *)(a1 + 536);
      goto LABEL_121;
    }
    uint64_t v240 = v183;
    uint64_t v242 = v182;
    float v244 = v178;
    float v246 = v177;
    int v191 = *(_DWORD *)(a1 + 612);
    char v257 = v191 != -1;
    if (v190 != 1)
    {
      float v196 = *(float *)(a1 + 560);
      int v192 = 1;
      if (*(float *)(a1 + 624) != v196
        || (float v197 = *(float *)(a1 + 564), *(float *)(a1 + 628) != v197)
        || (float v198 = *(float *)(a1 + 568), *(float *)(a1 + 632) != v198))
      {
LABEL_101:
        char v237 = 0;
        char v258 = 0;
        if (v191 == -1) {
          int v203 = 28;
        }
        else {
          int v203 = 32;
        }
        int v194 = v203 * v190;
        goto LABEL_105;
      }
      float32x4_t v199 = (float *)(a1 + 696);
      uint64_t v200 = 2;
      while (v190 != v200)
      {
        unint64_t v201 = v200;
        if (*(v199 - 2) == v196 && *(v199 - 1) == v197)
        {
          float v202 = *v199;
          v199 += 16;
          ++v200;
          if (v202 == v198) {
            continue;
          }
        }
        int v192 = v201 < v190;
        goto LABEL_101;
      }
    }
    int v192 = 0;
    char v237 = 1;
    char v258 = 1;
    if (v191 == -1) {
      int v193 = 16;
    }
    else {
      int v193 = 20;
    }
    int v194 = v193 * v190 + 12;
LABEL_105:
    float v195 = (physx::PxcNpCacheStreamPair *)(a1 + 536);
    int v235 = v194;
    unsigned __int16 v204 = v194 + 79;
    *(_WORD *)(a3 + 8) = v204 & 0xFFF0;
    uint64_t v205 = physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a1 + 536), v204 & 0xFFF0);
    if (v205 == -1) {
      uint64_t v206 = 0;
    }
    else {
      uint64_t v206 = v205;
    }
    *(void *)a3 = v206;
    if (v206)
    {
      uint64_t v207 = 0;
      *(unsigned char *)(v206 + re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58) = v191 != -1;
      *(float *)uint64_t v206 = v246;
      *(float *)(v206 + 4) = v244;
      *(float *)(v206 + 8) = v179;
      *(float *)(v206 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v180;
      *(float *)(v206 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v181;
      *(void *)&long long v208 = v242;
      *((void *)&v208 + 1) = v240;
      *(_OWORD *)(v206 + 20) = v208;
      *(_DWORD *)(v206 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v185;
      *(_DWORD *)(v206 + 40) = v186;
      *(_DWORD *)(v206 + 44) = v187;
      *(_DWORD *)(v206 + 48) = v188;
      *(float *)(v206 + 52) = v189;
      *(_WORD *)(v206 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v190;
      *(unsigned char *)(v206 + 59) = v237;
      *(_DWORD *)(v206 + 60) = v235;
      uint64_t v209 = v206 + 64;
      if (v190 <= 1) {
        unsigned int v210 = 1;
      }
      else {
        unsigned int v210 = v190;
      }
      unint64_t v211 = (unint64_t)v210 << 6;
      unsigned int v172 = v217;
      uint64_t v21 = v218;
      do
      {
        if (((v207 != 0) & ~v192) == 0)
        {
          *(void *)uint64_t v209 = *(void *)(a1 + v207 + 560);
          *(_DWORD *)(v209 + 8) = *(_DWORD *)(a1 + v207 + 568);
          v209 += 12;
        }
        *(int8x16_t *)uint64_t v209 = vextq_s8(*(int8x16_t *)(a1 + v207 + 572), *(int8x16_t *)(a1 + v207 + 572), 4uLL);
        if (v191 == -1)
        {
          v209 += 16;
        }
        else
        {
          *(_DWORD *)(v209 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(a1 + v207 + 612);
          v209 += 20;
        }
        v207 += 64;
      }
      while (v211 != v207);
      goto LABEL_122;
    }
    __int16 v256 = 0;
LABEL_121:
    physx::PxcNpCacheWrite<physx::PxcLocalContactsCache>(v195, a3, (uint64_t)&v248);
    unsigned int v172 = v217;
    uint64_t v21 = v218;
LABEL_122:
    uint64_t v24 = v219;
    goto LABEL_123;
  }
  if ((v4 & 0x20) != 0)
  {
    BOOL v15 = (*(unsigned char *)(v11 + 32 * v13 + 28) & 1) == 0;
    if ((v4 & 0x40) != 0) {
      goto LABEL_5;
    }
  }
  else
  {
    BOOL v15 = 0;
    if ((v4 & 0x40) != 0)
    {
LABEL_5:
      BOOL v16 = (*(unsigned char *)(v11 + 32 * v12 + 28) & 1) == 0;
      goto LABEL_8;
    }
  }
  BOOL v16 = 0;
LABEL_8:
  if (v15 || v16) {
    goto LABEL_9;
  }
  if (v9 <= v10) {
    unsigned int v174 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    unsigned int v174 = *(unsigned __int8 *)(a2 + 54);
  }
  if (*(unsigned char *)(a1 + 7185))
  {
    if (v9 >= v10) {
      uint64_t v175 = *(unsigned __int8 *)(a2 + 55);
    }
    else {
      uint64_t v175 = *(unsigned __int8 *)(a2 + 54);
    }
    BOOL v176 = physx::g_CanUseContactCache[8 * v175 - v175 + v174] != 0;
  }
  else
  {
    BOOL v176 = 0;
  }
  if (*(unsigned char *)(a4 + 24)) {
    ++*(_DWORD *)(a1 + 7196);
  }
  copyBuffers(a4, a3, a1, v176, v174 > 4);
}

void physx::PxcDiscreteNarrowPhasePCM(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  __int16 v4 = *(_WORD *)(a2 + 48);
  if ((v4 & 0x200) == 0) {
    return;
  }
  unsigned int v9 = *(unsigned __int8 *)(a2 + 54);
  unsigned int v10 = *(unsigned __int8 *)(a2 + 55);
  uint64_t v11 = *(void *)(*(void *)(a1 + 7168) + 8);
  uint64_t v13 = *(unsigned int *)(a2 + 64);
  uint64_t v12 = *(unsigned int *)(a2 + 68);
  char v14 = *(unsigned char *)(a4 + 26);
  if (v4 & 0x80 | v14 & 0x20) {
    goto LABEL_9;
  }
  if ((v4 & 0x20) != 0)
  {
    BOOL v15 = (*(unsigned char *)(v11 + 32 * v13 + 28) & 1) == 0;
    if ((v4 & 0x40) != 0) {
      goto LABEL_5;
    }
  }
  else
  {
    BOOL v15 = 0;
    if ((v4 & 0x40) != 0)
    {
LABEL_5:
      BOOL v16 = (*(unsigned char *)(v11 + 32 * v12 + 28) & 1) == 0;
      goto LABEL_8;
    }
  }
  BOOL v16 = 0;
LABEL_8:
  if (v15 || v16)
  {
LABEL_9:
    uint64_t v17 = v11 + 32 * v13;
    uint64_t v18 = v11 + 32 * v12;
    *(unsigned char *)(a4 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14 & 0xDF;
    uint64_t v19 = a1 + 7136;
    *(float *)(a1 + 713re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(float *)(*(void *)(a1 + 7176) + 4 * v13) + *(float *)(*(void *)(a1 + 7176) + 4 * v12);
    if (v9 > v10) {
      unsigned int v20 = v10;
    }
    else {
      unsigned int v20 = v9;
    }
    if (v9 > v10) {
      unsigned int v21 = v9;
    }
    else {
      unsigned int v21 = v10;
    }
    if (v9 > v10) {
      uint64_t v22 = v18;
    }
    else {
      uint64_t v22 = v17;
    }
    if (v9 > v10) {
      uint64_t v23 = v17;
    }
    else {
      uint64_t v23 = v18;
    }
    if (v9 > v10) {
      uint64_t v24 = *(void *)(a2 + 24);
    }
    else {
      uint64_t v24 = *(void *)(a2 + 16);
    }
    if (v9 > v10) {
      uint64_t v25 = *(void *)(a2 + 16);
    }
    else {
      uint64_t v25 = *(void *)(a2 + 24);
    }
    uint64_t v26 = (_OWORD *)(a1 + 4672);
    char v67 = *(unsigned char *)(a3 + 11);
    unsigned int v68 = v21;
    if ((v67 & 2) != 0)
    {
      unsigned int v65 = v10;
      uint64_t v39 = v22;
      uint64_t v40 = v23;
      unsigned int v41 = v20;
      physx::Gu::MultiplePersistentContactManifold::fromBuffer(a1 + 4672, *(unsigned __int8 **)a3);
      uint64_t v26 = (_OWORD *)(a1 + 4672);
      unsigned int v20 = v41;
      uint64_t v23 = v40;
      uint64_t v22 = v39;
      uint64_t v19 = a1 + 7136;
      unsigned int v10 = v65;
      *(void *)a3 = a1 + 4672;
      *(unsigned char *)(a3 + 11) |= 3u;
    }
    else if (*(unsigned char *)(a3 + 11))
    {
      _X8 = *(unsigned __int8 **)a3;
      uint64_t v28 = *(void *)a3 >> 5;
      __asm { PRFM            #0, [X8] }
      int v34 = ~((unint64_t)(*(void *)a3 + 127) >> 5) + v28;
      _X11 = *(unsigned __int8 **)a3;
      do
      {
        __asm { PRFM            #0, [X11] }
        _X11 += 32;
        _CF = __CFADD__(v34++, 1);
      }
      while (!_CF);
      int v37 = ~((unint64_t)(_X8 + 255) >> 5) + v28;
      do
      {
        __asm { PRFM            #0, [X8] }
        _X8 += 32;
        _CF = __CFADD__(v37++, 1);
      }
      while (!_CF);
    }
    float v66 = v26;
    uint64_t v42 = a1 + 28 * v20 + 4 * v68;
    ++*(_DWORD *)(v42 + 120);
    *(_DWORD *)(a1 + 465re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 23) = 0;
    *(void *)(a4 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    uint64_t v43 = 7 * v20;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*(&physx::g_PCMContactMethodTable[v43]
                                                                                                  + v68))(v24 + 40, v25 + 40, v22, v23, v19, a3, a1 + 560, a1 + 8);
    float v44 = (void (*)(uint64_t, uint64_t, uint64_t, unsigned __int16 *))*(&physx::g_GetMaterialMethodTable[v43]
                                                                              + v68);
    if (v44) {
      v44(v24, v25, a1, v69);
    }
    if (v9 > v10) {
      flipContacts(a1, (uint64_t)v69);
    }
    if ((v67 & 2) != 0)
    {
      float v45 = (unsigned char *)(a1 + 4734);
      int v46 = 48 * *(unsigned __int8 *)(a1 + 4735) + 16 * *(unsigned __int8 *)(a1 + 4734);
      __int16 v47 = v46 + 48;
      uint64_t v48 = physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a1 + 536), v46 + 48);
      if (v48)
      {
        *(_DWORD *)(v48 + 32) = *v45;
        long long v49 = v66[1];
        *(_OWORD *)uint64_t v48 = *v66;
        *(_OWORD *)(v48 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v49;
        unsigned int v50 = *v45;
        if (*v45)
        {
          unint64_t v51 = 0;
          int v52 = (_DWORD *)(v48 + 48);
          uint64_t v53 = a1 + 4672;
          do
          {
            unsigned int v54 = *(unsigned __int8 *)(v53 + v51 + 56);
            uint64_t v55 = v53 + 400 * *(unsigned __int8 *)(v53 + v51 + 56);
            int v56 = *(_DWORD *)(v55 + 448);
            _DWORD *v52 = v56;
            float v57 = v52 + 4;
            if (v56)
            {
              unint64_t v58 = 0;
              float v59 = (unsigned int *)(v55 + 448);
              float v60 = v52 + 7;
              float v61 = (_DWORD *)(a1 + 4784 + 400 * v54);
              do
              {
                *(_OWORD *)(v60 - 3) = *((_OWORD *)v61 - 3);
                *(_OWORD *)(v60 + 1) = *((_OWORD *)v61 - 2);
                *(_OWORD *)(v60 + 5) = *((_OWORD *)v61 - 1);
                int v62 = *v61;
                v61 += 16;
                _DWORD *v60 = v62;
                v60 += 12;
                ++v58;
                unint64_t v63 = *v59;
              }
              while (v58 < v63);
              unsigned int v50 = *v45;
            }
            else
            {
              LODWORD(v63) = 0;
            }
            int v52 = &v57[12 * v63];
            ++v51;
          }
          while (v51 < v50);
        }
        *(_WORD *)(a3 + 8) = v47;
      }
      *(void *)a3 = v48;
      *(unsigned char *)(a3 + 11) |= 3u;
    }
    finishContacts(*(unsigned __int16 *)(a2 + 48), a4, a1, v69, v68 > 4);
    return;
  }
  if (v9 <= v10) {
    unsigned int v64 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    unsigned int v64 = *(unsigned __int8 *)(a2 + 54);
  }
  if (*(unsigned char *)(a4 + 24)) {
    ++*(_DWORD *)(a1 + 7196);
  }
  copyBuffers(a4, a3, a1, 0, v64 > 4);
}

float flipContacts(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4656);
  if (v2)
  {
    uint64_t v3 = a2 + 2;
    __int16 v4 = (float *)(a1 + 568);
    do
    {
      float result = -*v4;
      *((float32x2_t *)v4 - 1) = vneg_f32(*(float32x2_t *)(v4 - 2));
      *__int16 v4 = result;
      v4 += 16;
      HIDWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v3 - 2);
      LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = HIDWORD(v6);
      *(_DWORD *)(v3 - 2) = v6 >> 16;
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t finishContacts(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int a5)
{
  unsigned int v6 = *(_DWORD *)(a3 + 4656);
  *(unsigned char *)(a2 + 24) = v6;
  char v7 = *(unsigned char *)(a2 + 26) & 0xFC;
  if (v6)
  {
    ++*(_DWORD *)(a3 + 7196);
    *(unsigned char *)(a2 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v7 | 2;
    __int16 v11 = 0;
    if ((result & 1) != 0 || *(unsigned char *)(a3 + 7186)) {
      int v9 = 1;
    }
    else {
      int v9 = BYTE1(result) & 1;
    }
    if (v9 | a5) {
      int v10 = 4 * v6;
    }
    else {
      int v10 = 0;
    }
    float result = physx::writeCompressedContact((float *)(a3 + 560), v6, a3, (unsigned char *)(a2 + 24), (void *)a2, (float *)(a2 + 8), &v11, (uint64_t *)(a2 + 16), v10, *(void *)(a3 + 7256), (result & 0x80) != 0, 0, a4, (unsigned char *)(a2 + 25), 0, 0, 0, *(unsigned char *)(a3 + 7187), *(void *)(a3 + 7224),
               *(void *)(a3 + 7232),
               *(void *)(a3 + 7240),
               a5);
    if (*(_DWORD *)(a3 + 4656))
    {
      if (!*(unsigned char *)(a2 + 24))
      {
        *(unsigned char *)(a2 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(unsigned char *)(a2 + 26) & 0xFC | 1;
        *(_WORD *)(a2 + 24) = 0;
        --*(_DWORD *)(a3 + 7196);
      }
    }
  }
  else
  {
    *(unsigned char *)(a2 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v7 | 1;
    *(_WORD *)(a2 + 24) = 0;
  }
  return result;
}

void copyBuffers(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v8 = 16 * v7 + 48 * *(unsigned __int8 *)(a1 + 25);
  if (v8)
  {
    __int16 v11 = *(const void **)a1;
    uint64_t v12 = *(void *)(a1 + 16);
    char v13 = 2;
    if (a5) {
      char v13 = 3;
    }
    size_t v14 = v7 << v13;
    uint64_t v15 = *(void *)(a3 + 7224);
    if (v15)
    {
      BOOL v16 = *(const void **)(a1 + 8);
      uint64_t v17 = 48 * *(unsigned __int8 *)(a1 + 25);
      size_t v18 = (16 * v7);
      unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v15 + 8), v18);
      unsigned int v20 = *(uint64_t **)(a3 + 7224);
      uint64_t v21 = *((unsigned int *)v20 + 3);
      unsigned int v22 = *((_DWORD *)v20 + 4) + *((_DWORD *)v20 + 2);
      uint64_t v23 = *v20;
      unsigned int v24 = atomic_fetch_add((atomic_uint *volatile)(*(void *)(a3 + 7232) + 8), v17);
      uint64_t v25 = *(uint64_t **)(a3 + 7232);
      uint64_t v26 = *((unsigned int *)v25 + 3);
      BOOL v28 = *((_DWORD *)v25 + 4) + *((_DWORD *)v25 + 2) >= v26 || v22 >= v21;
      uint64_t v29 = *v25;
      if (v14)
      {
        unsigned int v30 = atomic_fetch_add((atomic_uint *volatile)(*(void *)(a3 + 7240) + 8), v14);
        uint64_t v31 = *(void *)(a3 + 7240);
        uint64_t v32 = *(unsigned int *)(v31 + 12);
        if (*(_DWORD *)(v31 + 16) + *(_DWORD *)(v31 + 8) >= v32) {
          LOBYTE(v28) = 1;
        }
        if (!v28)
        {
          uint64_t v55 = v12;
          int v56 = a4;
          uint64_t v33 = (char *)(*(void *)v31 + v32 - (v30 + v14));
LABEL_24:
          uint64_t v39 = (char *)(v23 + v21 - (add + 16 * v7));
          float v38 = (char *)(v29 + v26 - (v24 + v17));
          memcpy(v38, v11, v17);
          float v44 = v39;
          float v45 = v16;
          size_t v46 = v18;
LABEL_31:
          memcpy(v44, v45, v46);
          if (a5) {
            memcpy(&v33[4 * *(unsigned __int8 *)(a1 + 24)], (const void *)(v55 + 4 * *(unsigned __int8 *)(a1 + 24)), 4 * *(unsigned __int8 *)(a1 + 24));
          }
          a4 = v56;
          if (v14 && v33)
          {
            bzero(v33, v14);
            a4 = v56;
          }
          goto LABEL_37;
        }
      }
      else if (!v28)
      {
        uint64_t v55 = v12;
        int v56 = a4;
        uint64_t v33 = 0;
        goto LABEL_24;
      }
      uint64_t v33 = 0;
      uint64_t v39 = 0;
      float v38 = 0;
      *(_WORD *)(a1 + 24) = 0;
    }
    else
    {
      unsigned __int16 v34 = v14 + v8 + 15;
      unsigned int v35 = v34 & 0xFFF0;
      int v56 = a4;
      if (v35 <= 0x4000)
      {
        uint64_t v40 = *(void *)(a3 + 520);
        if (v40 && (uint64_t v41 = *(unsigned int *)(a3 + 528), v41 + v35 <= 0x4000))
        {
          float v38 = (char *)(v40 + v41);
          *(_DWORD *)(a3 + 528) = v41 + v35;
        }
        else
        {
          uint64_t v42 = *(const void **)a1;
          uint64_t v43 = physx::PxcNpMemBlockPool::acquire(*(void *)(a3 + 512), *(void *)(a3 + 512) + 16 * *(unsigned int *)(*(void *)(a3 + 512) + 188) + 24, 0, 0, 1);
          __int16 v11 = v42;
          float v38 = (char *)v43;
          *(void *)(a3 + 520) = v43;
          *(_DWORD *)(a3 + 528) = v35;
        }
      }
      else
      {
        float v36 = *(const void **)a1;
        uint64_t v37 = physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(*(pthread_mutex_t ***)(a3 + 512), v34 & 0xFFF0);
        __int16 v11 = v36;
        float v38 = (char *)v37;
      }
      if (v14) {
        uint64_t v33 = &v38[v8];
      }
      else {
        uint64_t v33 = 0;
      }
      if (v38)
      {
        uint64_t v55 = v12;
        uint64_t v39 = &v38[48 * *(unsigned __int8 *)(a1 + 25)];
        float v44 = v38;
        float v45 = v11;
        size_t v46 = v8;
        goto LABEL_31;
      }
      uint64_t v33 = 0;
      uint64_t v39 = 0;
      *(_WORD *)(a1 + 24) = 0;
      a4 = v56;
    }
LABEL_37:
    *(void *)a1 = v38;
    *(void *)(a1 + 8) = v39;
    *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v33;
  }
  int v47 = *(unsigned __int16 *)(a2 + 8);
  if (!*(_WORD *)(a2 + 8)) {
    return;
  }
  if ((*(unsigned char *)(a2 + 11) & 2) != 0)
  {
    int v52 = (void *)physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a3 + 536), v47);
    uint64_t v53 = v52;
    unsigned int v54 = *(const void **)a2;
    if (v52 && v54)
    {
      memcpy(v52, v54, *(unsigned __int16 *)(a2 + 8));
      unsigned int v54 = *(const void **)a2;
    }
    if (v54)
    {
      *(void *)a2 = v53;
      *(unsigned char *)(a2 + 11) |= 3u;
    }
  }
  else
  {
    if (!a4) {
      return;
    }
    uint64_t v48 = *(const void **)a2;
    long long v49 = (void *)physx::PxcNpCacheStreamPair::reserve((physx::PxcNpCacheStreamPair *)(a3 + 536), (unsigned __int16)(v47 + 15) & 0xFFF0);
    unsigned int v50 = v49;
    if (v49) {
      BOOL v51 = v48 == 0;
    }
    else {
      BOOL v51 = 1;
    }
    if (!v51)
    {
      memcpy(v49, v48, *(unsigned __int16 *)(a2 + 8));
LABEL_53:
      *(void *)a2 = v50;
      return;
    }
    if (v48) {
      goto LABEL_53;
    }
  }
}

uint64_t physx::PxcNpCacheStreamPair::reserve(physx::PxcNpCacheStreamPair *this, int a2)
{
  unsigned int v2 = (a2 + 15) & 0xFFFFFFF0;
  if (v2 > 0x4000) {
    return -1;
  }
  uint64_t result = *((void *)this + 1);
  if (!result || (unsigned int v5 = *((_DWORD *)this + 4), v5 + v2 > 0x4000))
  {
    uint64_t result = physx::PxcNpMemBlockPool::acquire(*(void *)this, *(void *)this + 16 * *(unsigned int *)(*(void *)this + 176) + 88, 0, 0, 0);
    *((void *)this + 1) = result;
    *((_DWORD *)this + 4) = 0;
    if (!result) {
      return result;
    }
    unsigned int v5 = 0;
  }
  result += v5;
  *((_DWORD *)this + 4) = v5 + v2;
  return result;
}

uint64_t physx::writeCompressedContact(float *a1, unsigned int a2, uint64_t a3, unsigned char *a4, void *a5, float *a6, _WORD *a7, uint64_t *a8, int a9, uint64_t a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int16 *a13, unsigned char *a14, unsigned int a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22)
{
  uint64_t v221 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v28 = 0;
    *a4 = 0;
    *a5 = 0;
    *(void *)a6 = 0;
    *a8 = 0;
    *a7 = 0;
    *a14 = 0;
    return v28;
  }
  unsigned int v217 = a8;
  uint64_t v214 = a3;
  *(void *)&long long v208 = a7;
  *(void *)&long long v209 = a5;
  unint64_t v211 = a4;
  int32x4_t v212 = a6;
  unsigned int v24 = a13;
  uint64_t v25 = a2;
  size_t v26 = 5 * a2;
  BOOL v220 = v26 > 0x400;
  if (v26 < 0x401)
  {
    MEMORY[0x270FA5388](a1);
    int32x4_t v27 = (unsigned __int8 *)&v201 - ((v26 + 15) & 0x1FFFFFFF0);
    bzero(v27, v26);
  }
  else
  {
    int32x4_t v27 = (unsigned __int8 *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v218, 5 * a2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/src/pipeline/PxcNpContactPrepShared.cpp", 87);
  }
  uint64_t v219 = v27;
  if (a2 < 2)
  {
    unsigned int v30 = 0;
    int v29 = 0;
    BOOL v39 = 1;
    int v38 = 1;
    int v37 = 1;
    unsigned int v36 = 1;
  }
  else
  {
    int v29 = 0;
    unsigned int v30 = 0;
    int v31 = a13[1];
    int v32 = *a13;
    float v34 = a1[1];
    float v33 = a1[2];
    uint64_t v35 = 1;
    unsigned int v36 = 1;
    int v37 = 1;
    int v38 = a2;
    BOOL v39 = 1;
    float v40 = *a1;
    do
    {
      uint64_t v41 = &a1[16 * v35];
      float v42 = *v41;
      float v43 = v41[1];
      float v44 = v41[2];
      if ((float)((float)((float)(v34 * v43) + (float)(v40 * *v41)) + (float)(v33 * v44)) < 0.999
        || a13[2 * v35] != v32
        || a13[2 * v35 + 1] != v31)
      {
        float v45 = &v27[5 * v36 - 5];
        *float v45 = v29;
        v45[1] = v35;
        v45[2] = -1;
        unsigned int v46 = v35 - v29;
        v45[3] = v46;
        v45[4] = v39;
        if (v30) {
          v30[3] += v46;
        }
        if (v36 < 2)
        {
LABEL_20:
          unsigned int v30 = 0;
          BOOL v39 = 1;
        }
        else
        {
          uint64_t v47 = 0;
          BOOL v39 = 0;
          uint64_t v48 = &a13[2 * v35];
          unsigned int v30 = v27;
          while (1)
          {
            if (v30[4])
            {
              uint64_t v49 = *v30;
              if ((float)((float)((float)(v43 * a1[16 * v49 + 1]) + (float)(v42 * a1[16 * v49]))
                         + (float)(v44 * a1[16 * v49 + 2])) >= 0.999
                && *v48 == a13[2 * v49]
                && v48[1] == a13[2 * v49 + 1])
              {
                break;
              }
            }
            v30 += 5;
            BOOL v39 = v47 + 2 >= (unint64_t)v36;
            if (v36 - 1 == ++v47) {
              goto LABEL_20;
            }
          }
          do
          {
            int v52 = &v27[5 * v47];
            unsigned int v54 = v52[2];
            uint64_t v53 = v52 + 2;
            uint64_t v47 = v54;
          }
          while (v54 != 255);
          unsigned char *v53 = v36;
        }
        unsigned int v50 = &a13[2 * v35];
        int v32 = *v50;
        int v31 = v50[1];
        if (v46 > 1) {
          int v51 = a18;
        }
        else {
          int v51 = 0;
        }
        v38 += v51;
        ++v36;
        v37 += v39;
        int v29 = v35;
        float v33 = v44;
        float v34 = v43;
        float v40 = v42;
      }
      ++v35;
    }
    while (v35 != v25);
  }
  int v55 = a11 & ~a12;
  unsigned __int8 v56 = a2 - v29;
  if (a2 - v29 > 1) {
    int v57 = a18;
  }
  else {
    int v57 = 0;
  }
  int v58 = v38 + v57;
  float v59 = &v27[5 * v36 - 5];
  *float v59 = v29;
  if (((a9 != 0) & a18) != 0) {
    int v60 = 4 * (v58 - a2);
  }
  else {
    int v60 = 0;
  }
  v59[1] = a2;
  v59[2] = -1;
  v59[3] = v56;
  v59[4] = v39;
  if (v30) {
    v30[3] += v56;
  }
  int v61 = a22;
  int v62 = v60 + a9;
  *(void *)&long long v206 = a14;
  *a14 = v37;
  if (v55) {
    int v63 = v58;
  }
  else {
    int v63 = v37;
  }
  unsigned int v64 = a15 + 48 * v63;
  if (v55) {
    char v65 = 6;
  }
  else {
    char v65 = 4;
  }
  unsigned int v66 = v58 << v65;
  if (a15) {
    _ZF = 1;
  }
  else {
    _ZF = a19 == 0;
  }
  if (_ZF) {
    char v68 = 1;
  }
  else {
    char v68 = a11 & ~a12;
  }
  int v216 = a13;
  int v215 = a18;
  int v213 = a22;
  size_t v210 = v26;
  int v204 = v58;
  int v202 = a12;
  uint64_t v205 = a15;
  if (v68)
  {
    size_t v69 = (v62 << a22);
    unsigned int v207 = (v64 + v66 + 15) & 0xFFFFFFF0;
    int v70 = v207 + v69;
    if (a16)
    {
      unsigned int v71 = (v70 + 15) & 0xFFFFFFF0;
      if (v71 <= 0x4000)
      {
        uint64_t v91 = *(void *)(a17 + 8);
        if (v91 && (uint64_t v92 = *(unsigned int *)(a17 + 16), v92 + v71 <= 0x4000))
        {
          _X19 = v91 + v92;
          *(_DWORD *)(a17 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v92 + v71;
        }
        else
        {
          uint64_t v93 = physx::PxcNpMemBlockPool::acquire(*(void *)a17, a16, (_DWORD *)(*(void *)a17 + 244), (int *)(*(void *)a17 + 240), 1);
          int v61 = v213;
          _X19 = v93;
          *(void *)(a17 + 8) = v93;
          *(_DWORD *)(a17 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v71;
        }
        goto LABEL_80;
      }
      float v72 = *(pthread_mutex_t ***)a17;
    }
    else
    {
      unsigned int v71 = (v70 + 15) & 0xFFFFFFF0;
      if (v71 <= 0x4000)
      {
        uint64_t v94 = v214;
        uint64_t v95 = *(void *)(v214 + 520);
        if (v95 && (uint64_t v96 = *(unsigned int *)(v214 + 528), v96 + v71 <= 0x4000))
        {
          _X19 = v95 + v96;
          *(_DWORD *)(v214 + 528) = v96 + v71;
        }
        else
        {
          uint64_t v97 = physx::PxcNpMemBlockPool::acquire(*(void *)(v214 + 512), *(void *)(v214 + 512) + 16 * *(unsigned int *)(*(void *)(v214 + 512) + 188) + 24, 0, 0, 1);
          int v61 = v213;
          _X19 = v97;
          *(void *)(v94 + 520) = v97;
          *(_DWORD *)(v94 + 528) = v71;
        }
        goto LABEL_80;
      }
      float v72 = *(pthread_mutex_t ***)(v214 + 512);
    }
    uint64_t v89 = physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(v72, v71);
    int v61 = v213;
    _X19 = v89;
LABEL_80:
    _X23 = _X19 + v64;
    if (v69)
    {
      unsigned int v88 = v207;
      if (_X19)
      {
        float v98 = (char *)(_X19 + v207);
        if (v61) {
          _X24 = &v98[4 * v25];
        }
        else {
          _X24 = 0;
        }
        uint64_t v203 = _X19 + v207;
        bzero(v98, v69);
        __asm
        {
          PRFM            #0, [X19]
          PRFM            #0, [X23]
        }
        unsigned int v24 = v216;
        uint64_t v90 = v214;
        goto LABEL_89;
      }
      _X24 = (char *)_X23;
      goto LABEL_156;
    }
    _X24 = 0;
    uint64_t v203 = 0;
    unsigned int v24 = v216;
    unsigned int v88 = v207;
    goto LABEL_87;
  }
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a19 + 8), v66);
  uint64_t v75 = *(unsigned int *)(a19 + 12);
  unsigned int v76 = *(_DWORD *)(a19 + 16) + *(_DWORD *)(a19 + 8);
  _X23 = *(void *)a19 + v75 - (add + v66);
  unsigned int v78 = atomic_fetch_add((atomic_uint *volatile)(a20 + 8), v64);
  uint64_t v79 = *(unsigned int *)(a20 + 12);
  uint64_t v80 = v78 + v64;
  BOOL v82 = *(_DWORD *)(a20 + 16) + *(_DWORD *)(a20 + 8) >= v79 || v76 >= v75;
  _X19 = *(void *)a20 + v79 - v80;
  _X24 = 0;
  if (!v62)
  {
    uint64_t v90 = v214;
    if (!v82)
    {
      unsigned int v88 = v64 + v66;
      uint64_t v203 = 0;
      goto LABEL_88;
    }
LABEL_156:
    _X8 = 0;
    __asm
    {
      PRFM            #0, [X8]
      PRFM            #0, [X24]
    }
    goto LABEL_157;
  }
  uint64_t v85 = atomic_fetch_add((atomic_uint *volatile)(a21 + 8), v62 << a22) + (v62 << a22);
  uint64_t v86 = *(unsigned int *)(a21 + 12);
  if (*(_DWORD *)(a21 + 16) + *(_DWORD *)(a21 + 8) >= v86) {
    BOOL v82 = 1;
  }
  uint64_t v203 = *(void *)a21 + v86 - v85;
  float v87 = (char *)(v203 + 4 * v25);
  if (!a22) {
    float v87 = 0;
  }
  if (v82) {
    goto LABEL_156;
  }
  unsigned int v88 = v64 + v66;
  _X24 = v87;
LABEL_87:
  uint64_t v90 = v214;
LABEL_88:
  __asm
  {
    PRFM            #0, [X19]
    PRFM            #0, [X23]
  }
  if (_X19)
  {
LABEL_89:
    int v201 = a11 & ~a12;
    uint64_t v214 = a10;
    if (v90)
    {
      *(_DWORD *)(v90 + 7188) += v88;
      *(_DWORD *)(v90 + 7216) += v88;
    }
    unsigned int v207 = v88;
    *(_WORD *)long long v208 = v88;
    uint64_t v105 = v24[1];
    uint64_t v106 = *v24;
    float v107 = (float32x2_t *)(*(void *)v214 + 32 * v106);
    int v108 = v105;
    float v109 = (float32x2_t *)(*(void *)v214 + 32 * v105);
    float v110 = physx::PxsMaterialCombiner::combineRestitution((uint64_t)v107, (uint64_t)v109);
    __asm { FMOV            V9.2S, #1.0 }
    uint64_t v218 = _D9;
    unint64_t v112 = physx::PxsMaterialCombiner::combineIsotropicFriction((float *)&v218, v107, v109);
    unint64_t v114 = HIDWORD(v112);
    *(void *)long long v209 = _X19;
    float v115 = (uint64_t *)(_X19 + v205);
    *(void *)int32x4_t v212 = _X23;
    *unsigned int v217 = v203;
    if (v201)
    {
      if (v202) {
        int v116 = 6;
      }
      else {
        int v116 = 2;
      }
      float v117 = v216;
      int v118 = v215;
      if (v36)
      {
        int v119 = v106;
        int v120 = v108;
        uint64_t v121 = 0;
        int v122 = 0;
        char v123 = v116 | v213;
        float v124 = a1 + 3;
        __asm { FMOV            V2.4S, #1.0 }
        long long v126 = xmmword_23441F6B0;
        uint64_t v127 = v36;
        v213 |= v116;
        int32x4_t v212 = a1 + 3;
        long long v208 = xmmword_23441F6B0;
        long long v209 = _Q2;
        *(void *)&long long v206 = v36;
        do
        {
          if (v27[5 * v121 + 4])
          {
            float v128 = &v117[2 * v27[5 * v121]];
            uint64_t v129 = *v128;
            uint64_t v130 = v128[1];
            if (v129 != v119 || v130 != v120)
            {
              uint64_t v132 = *(void *)v214 + 32 * v129;
              float v133 = (float32x2_t *)(*(void *)v214 + 32 * v130);
              unsigned int v217 = v115;
              float v110 = physx::PxsMaterialCombiner::combineRestitution(v132, (uint64_t)v133);
              uint64_t v218 = _D9;
              float v134 = (float32x2_t *)v132;
              float v117 = v216;
              unint64_t v112 = physx::PxsMaterialCombiner::combineIsotropicFriction((float *)&v218, v134, v133);
              uint64_t v127 = v206;
              long long v126 = v208;
              _Q2 = v209;
              float v124 = v212;
              char v123 = v213;
              float v115 = v217;
              int v118 = v215;
              unint64_t v114 = HIDWORD(v112);
              int v119 = v129;
              int v120 = v130;
            }
            unsigned int v135 = v27[5 * v121 + 3];
            *((unsigned char *)v115 + 41) = v135;
            *((unsigned char *)v115 + 40) = v122;
            *((unsigned char *)v115 + 42) = v113;
            *((_DWORD *)v115 + 8) = v114;
            *((_DWORD *)v115 + 9) = v112;
            *((float *)v115 + 7) = v110;
            *((_WORD *)v115 + 22) = v129;
            *((_WORD *)v115 + 23) = v130;
            v115[2] = *(void *)a1;
            *((float *)v115 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a1[2];
            *(_OWORD *)float v115 = _Q2;
            *((unsigned char *)v115 + 43) = v123;
            if (v118 && v135 >= 2)
            {
              float32x4_t v136 = 0uLL;
              if (v121 != 255)
              {
                for (uint64_t i = v121; i != 255; uint64_t i = v138[2])
                {
                  int v138 = &v27[5 * i];
                  uint64_t v139 = *v138;
                  uint64_t v140 = v138[1];
                  if (v139 < v140)
                  {
                    uint64_t v141 = v140 - v139;
                    float v142 = (int8x16_t *)&v124[16 * v139];
                    do
                    {
                      int8x16_t v143 = *v142;
                      v142 += 4;
                      float32x4_t v136 = vaddq_f32(v136, (float32x4_t)vextq_s8(v143, v143, 4uLL));
                      --v141;
                    }
                    while (v141);
                  }
                }
              }
              if (_X24)
              {
                *(float *)_X24 = a1[16 * (unint64_t)v27[1275] + 13];
                _X24 += 4;
              }
              *((unsigned char *)v115 + 41) = v135 + 1;
              *(float32x4_t *)_X23 = vmulq_n_f32(v136, 1.0 / (float)v135);
              *(void *)(_X23 + 32) = *(void *)a1;
              int v144 = *((_DWORD *)a1 + 2);
              *(_OWORD *)(_X23 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v126;
              *(_DWORD *)(_X23 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v112;
              *(_DWORD *)(_X23 + 60) = v114;
              *(_DWORD *)(_X23 + 40) = v144;
              *(float *)(_X23 + 44) = v110;
              *(_DWORD *)(_X23 + 48) = v113;
              *(_WORD *)(_X23 + 52) = v129;
              *(_WORD *)(_X23 + 54) = v130;
              __asm { PRFM            #0, [X23,#0xC0] }
              _X23 += 64;
              ++v122;
            }
            v115 += 6;
            if (v121 != 255)
            {
              for (uint64_t j = v121; j != 255; uint64_t j = v147[2])
              {
                float v147 = &v27[5 * j];
                uint64_t v148 = *v147;
                uint64_t v149 = v147[1];
                if (v148 < v149)
                {
                  uint64_t v150 = 0;
                  uint64_t v151 = v149 - *v147;
                  float v152 = &a1[16 * v148];
                  do
                  {
                    _X15 = _X23 + v150 * 4;
                    *(_OWORD *)_X15 = *(_OWORD *)&v152[v150 + 4];
                    *(float *)(_X15 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v152[v150 + 3];
                    *(void *)(_X15 + 32) = *(void *)&v152[v150];
                    float v154 = v152[v150 + 2];
                    *(_OWORD *)(_X15 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v126;
                    *(_DWORD *)(_X15 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v112;
                    *(_DWORD *)(_X15 + 60) = v114;
                    *(float *)(_X15 + 40) = v154;
                    *(float *)(_X15 + 44) = v110;
                    *(_DWORD *)(_X15 + 48) = v113;
                    *(_WORD *)(_X15 + 52) = v129;
                    *(_WORD *)(_X15 + 54) = v130;
                    if (_X24)
                    {
                      *(float *)_X24 = v152[v150 + 13];
                      _X24 += 4;
                    }
                    __asm { PRFM            #0, [X15,#0xC0] }
                    v150 += 16;
                    --v151;
                  }
                  while (v151);
                  int v122 = v122 - v148 + v149;
                  _X23 += v150 * 4;
                }
              }
            }
          }
          ++v121;
        }
        while (v121 != v127);
      }
    }
    else
    {
      float v156 = v216;
      int v157 = v215;
      char v158 = v213;
      if (v36)
      {
        int v159 = v106;
        int v160 = v108;
        uint64_t v161 = 0;
        int v162 = 0;
        float v163 = a1 + 3;
        float v164 = a1 + 13;
        __asm { FMOV            V2.4S, #1.0 }
        uint64_t v166 = v36;
        *(void *)&long long v209 = a1 + 3;
        *(void *)&long long v208 = a1 + 13;
        long long v206 = _Q2;
        uint64_t v205 = v36;
        do
        {
          if (v27[5 * v161 + 4])
          {
            unint64_t v167 = v27[5 * v161];
            float v168 = &v156[2 * v167];
            uint64_t v169 = *v168;
            uint64_t v170 = v168[1];
            if (v169 != v159 || v170 != v160)
            {
              uint64_t v172 = *(void *)v214 + 32 * v169;
              unsigned int v173 = (float32x2_t *)(*(void *)v214 + 32 * v170);
              unsigned int v217 = v115;
              int32x4_t v212 = (float *)v167;
              float v110 = physx::PxsMaterialCombiner::combineRestitution(v172, (uint64_t)v173);
              uint64_t v218 = _D9;
              unsigned int v174 = (float32x2_t *)v172;
              float v156 = v216;
              unint64_t v112 = physx::PxsMaterialCombiner::combineIsotropicFriction((float *)&v218, v174, v173);
              unint64_t v167 = (unint64_t)v212;
              uint64_t v166 = v205;
              _Q2 = v206;
              float v164 = (float *)v208;
              float v163 = (float *)v209;
              char v158 = v213;
              float v115 = v217;
              int v157 = v215;
              unint64_t v114 = HIDWORD(v112);
              int v159 = v169;
              int v160 = v170;
            }
            uint64_t v175 = &a1[16 * v167];
            v115[2] = *(void *)v175;
            *((float *)v115 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v175[2];
            unsigned int v176 = v27[5 * v161 + 3];
            *((unsigned char *)v115 + 41) = v176;
            *((unsigned char *)v115 + 40) = v162;
            *((_DWORD *)v115 + 8) = v114;
            *((_DWORD *)v115 + 9) = v112;
            *((float *)v115 + 7) = v110;
            *((_WORD *)v115 + 22) = v169;
            *((_WORD *)v115 + 23) = v170;
            *((unsigned char *)v115 + 42) = v113;
            *((unsigned char *)v115 + 43) = v158;
            *(_OWORD *)float v115 = _Q2;
            if (v157 && v176 >= 2)
            {
              *((unsigned char *)v115 + 41) = v176 + 1;
              float32x4_t v177 = 0uLL;
              if (v161 != 255)
              {
                for (uint64_t k = v161; k != 255; uint64_t k = v179[2])
                {
                  float v179 = &v27[5 * k];
                  uint64_t v180 = *v179;
                  uint64_t v181 = v179[1];
                  if (v180 < v181)
                  {
                    uint64_t v182 = v181 - v180;
                    uint64_t v183 = (int8x16_t *)&v163[16 * v180];
                    do
                    {
                      int8x16_t v184 = *v183;
                      v183 += 4;
                      float32x4_t v177 = vaddq_f32(v177, (float32x4_t)vextq_s8(v184, v184, 4uLL));
                      --v182;
                    }
                    while (v182);
                  }
                }
              }
              if (_X24)
              {
                *(float *)_X24 = a1[16 * (unint64_t)v27[1275] + 13];
                _X24 += 4;
              }
              float32x4_t v185 = vmulq_n_f32(v177, 1.0 / (float)v176);
              uint64_t v186 = _X23 + 16;
              *(float32x4_t *)_X23 = v185;
              _X23 = _X23 + 144;
              ++v162;
              __asm { PRFM            #0, [X23] }
              _X23 = v186;
            }
            v115 += 6;
            if (v161 != 255)
            {
              for (uint64_t m = v161; m != 255; uint64_t m = v190[2])
              {
                unint64_t v190 = &v27[5 * m];
                uint64_t v191 = *v190;
                uint64_t v192 = v190[1];
                if (v191 < v192)
                {
                  uint64_t v193 = v192 - *v190;
                  int v194 = &v164[16 * v191];
                  do
                  {
                    *(_OWORD *)_X23 = *(_OWORD *)(v194 - 9);
                    *(float *)(_X23 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(v194 - 10);
                    if (_X24)
                    {
                      *(float *)_X24 = *v194;
                      _X24 += 4;
                    }
                    uint64_t v195 = _X23 + 16;
                    __asm { PRFM            #0, [X23,#0x90] }
                    v194 += 16;
                    _X23 += 16;
                    --v193;
                  }
                  while (v193);
                  int v162 = v162 - v191 + v192;
                  _X23 = v195;
                }
              }
            }
          }
          ++v161;
        }
        while (v161 != v166);
      }
    }
    *unint64_t v211 = v204;
    uint64_t v28 = v207;
    goto LABEL_158;
  }
LABEL_157:
  uint64_t v28 = 0;
  *unint64_t v211 = 0;
  *(void *)long long v209 = 0;
  *(void *)int32x4_t v212 = 0;
  *unsigned int v217 = 0;
  *(_WORD *)long long v208 = 0;
  *(unsigned char *)long long v206 = 0;
LABEL_158:
  if (v210 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v219, v27);
  }
  return v28;
}

uint64_t physx::PxcNpMemBlockPool::setBlockCount(uint64_t this, unsigned int a2)
{
  uint64_t v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)this);
  }
  unsigned int v4 = *(_DWORD *)(v3 + 204);
  unsigned int v5 = a2 - v4;
  if (a2 > v4)
  {
    do
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 0x4000, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/src/pipeline/PxcNpMemBlockPool.cpp", 105);
      uint64_t v7 = this;
      uint64_t v6 = *(unsigned int *)(v3 + 160);
      if ((*(_DWORD *)(v3 + 164) & 0x7FFFFFFFu) <= v6)
      {
        this = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v3 + 152, &v7);
      }
      else
      {
        *(void *)(*(void *)(v3 + 152) + 8 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = this;
        *(_DWORD *)(v3 + 160) = v6 + 1;
      }
      ++*(_DWORD *)(v3 + 192);
      --v5;
    }
    while (v5);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)v3);
  }
  return this;
}

uint64_t physx::PxcNpMemBlockPool::releaseUnusedBlocks(uint64_t this)
{
  uint64_t v1 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)this);
  }
  for (int i = *(_DWORD *)(v1 + 160); i; --*(_DWORD *)(v1 + 192))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 152) + 8 * --i);
    *(_DWORD *)(v1 + 160) = i;
    if (v3)
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      int i = *(_DWORD *)(v1 + 160);
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unsigned int v4 = *(pthread_mutex_t **)v1;
    return pthread_mutex_unlock(v4);
  }
  return this;
}

uint64_t physx::PxcNpMemBlockPool::releaseConstraintMemory(uint64_t this)
{
  uint64_t v1 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)this);
  }
  *(void *)(v1 + 240) = 0;
  for (int i = *(_DWORD *)(v1 + 16); i; int i = *(_DWORD *)(v1 + 16))
  {
    unint64_t v12 = 0;
    int v3 = i - 1;
    unint64_t v4 = *(void *)(*(void *)(v1 + 8) + 8 * (i - 1));
    *(_DWORD *)(v1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
    unint64_t v12 = v4;
    uint64_t v5 = *(void *)(v1 + 232);
    unint64_t v6 = *(void *)(v5 + 24);
    if (v6 > v4 || v6 + *(unsigned int *)(v5 + 32) <= v4)
    {
      uint64_t v8 = *(unsigned int *)(v1 + 160);
      if ((*(_DWORD *)(v1 + 164) & 0x7FFFFFFFu) <= v8)
      {
        this = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v1 + 152, &v12);
      }
      else
      {
        *(void *)(*(void *)(v1 + 152) + 8 * v8) = v4;
        *(_DWORD *)(v1 + 160) = v8 + 1;
      }
      --*(_DWORD *)(v1 + 204);
    }
    else
    {
      uint64_t v7 = *(unsigned int *)(v1 + 128);
      if ((*(_DWORD *)(v1 + 132) & 0x7FFFFFFFu) <= v7)
      {
        this = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v1 + 120, &v12);
      }
      else
      {
        *(void *)(*(void *)(v1 + 120) + 8 * v7) = v4;
        *(_DWORD *)(v1 + 128) = v7 + 1;
      }
    }
  }
  unint64_t v9 = *(unsigned int *)(v1 + 144);
  if (v9)
  {
    for (unint64_t j = 0; j < v9; ++j)
    {
      if (*(void *)(*(void *)(v1 + 136) + 8 * j))
      {
        this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v9 = *(unsigned int *)(v1 + 144);
      }
    }
  }
  *(_DWORD *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  unint64_t v11 = *(void *)(v1 + 216);
  if (v11)
  {
    this = physx::PxcScratchAllocator::free(*(void *)(v1 + 232), v11);
    *(void *)(v1 + 21re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(_DWORD *)(v1 + 224) = 0;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)v1);
  }
  return this;
}

uint64_t physx::PxcNpMemBlockPool::releaseContacts(physx::PxcNpMemBlockPool *this)
{
  uint64_t result = physx::PxcNpMemBlockPool::release((uint64_t)this, (uint64_t)this + 16 * (1 - *((_DWORD *)this + 47)) + 24, 0);
  *((_DWORD *)this + 47) = 1 - *((_DWORD *)this + 47);
  unsigned int v3 = *((_DWORD *)this + 40);
  if (*((_DWORD *)this + 42) <= v3)
  {
    unsigned int v4 = *((_DWORD *)this + 43) + 1;
    *((_DWORD *)this + 43) = v4;
    if (v3 >= 0x281 && v4 >= 0xB)
    {
      int v6 = 10;
      while (1)
      {
        unsigned int v3 = *((_DWORD *)this + 40);
        if (v3 < 0x281) {
          break;
        }
        unsigned int v7 = v3 - 1;
        uint64_t v8 = *(void *)(*((void *)this + 19) + 8 * v7);
        *((_DWORD *)this + 40) = v7;
        if (v8) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        if (!--v6)
        {
          unsigned int v3 = *((_DWORD *)this + 40);
          break;
        }
      }
    }
  }
  else
  {
    *((_DWORD *)this + 43) = 0;
  }
  *((_DWORD *)this + 42) = v3;
  return result;
}

uint64_t physx::PxcNpMemBlockPool::acquireConstraintMemory(pthread_mutex_t ***this)
{
  unsigned int v10 = 0;
  unsigned int v2 = physx::PxcScratchAllocator::allocAll(this[29], &v10);
  unsigned int v3 = v10;
  v10 &= 0xFFFFC000;
  this[27] = (pthread_mutex_t **)v2;
  *((_DWORD *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3 >> 14;
  uint64_t v9 = 0;
  uint64_t result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::resize((uint64_t)(this + 15), v3 >> 14, &v9);
  uint64_t v5 = *((unsigned int *)this + 56);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = v5 << 14;
    do
    {
      this[15][v6] = (pthread_mutex_t *)&this[27][v7 / 8];
      v7 += 0x4000;
      ++v6;
    }
    while (v8 != v7);
  }
  return result;
}

pthread_mutex_t *physx::PxcScratchAllocator::allocAll(pthread_mutex_t **this, unsigned int *a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*this);
  }
  unsigned int v4 = this[1];
  uint64_t v5 = this[3];
  unsigned int v6 = *(&v4->__sig + (*((_DWORD *)this + 4) - 1)) - v5;
  *a2 = v6;
  if (v6)
  {
    uint64_t v7 = *((unsigned int *)this + 4);
    if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v7)
    {
      physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)(this + 1), this + 3);
    }
    else
    {
      *(&v4->__sig + v7) = (uint64_t)v5;
      *((_DWORD *)this + 4) = v7 + 1;
    }
    uint64_t v8 = this[3];
  }
  else
  {
    uint64_t v8 = 0;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*this);
  }
  return v8;
}

uint64_t physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    uint64_t v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::PxcScratchAllocator::free(uint64_t this, unint64_t a2)
{
  unint64_t v3 = *(void *)(this + 24);
  if (v3 > a2 || (uint64_t v4 = this, v3 + *(unsigned int *)(this + 32) <= a2))
  {
    if (a2)
    {
      uint64_t v15 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
      return v15();
    }
  }
  else
  {
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      this = pthread_mutex_lock(*(pthread_mutex_t **)this);
    }
    int v5 = 0;
    unsigned int v6 = *(_DWORD *)(v4 + 16);
    uint64_t v7 = *(void *)(v4 + 8);
    unsigned int v8 = v6 - 1;
    do
      uint64_t v9 = v8 + v5--;
    while (*(void *)(v7 + 8 * v9) < a2);
    unsigned int v10 = v6 + v5 + 1;
    if (v10 < v6)
    {
      int v11 = ~v5;
      uint64_t v12 = 8 * v10;
      char v13 = (void *)(v7 + 8 * v9);
      do
      {
        *v13++ = *(void *)(*(void *)(v4 + 8) + v12);
        v12 += 8;
        --v11;
      }
      while (v11);
    }
    *(_DWORD *)(v4 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v8;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      size_t v14 = *(pthread_mutex_t **)v4;
      return pthread_mutex_unlock(v14);
    }
  }
  return this;
}

uint64_t physx::PxcNpMemBlockPool::acquire(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4, int a5)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)a1);
  }
  if (a3 && a4)
  {
    if (*a3 + 1 > *a4) {
      int v10 = *a3 + 1;
    }
    else {
      int v10 = *a4;
    }
    *a4 = v10;
    ++*a3;
  }
  if (!a5 || (int v11 = *(_DWORD *)(a1 + 128)) == 0)
  {
    int v15 = *(_DWORD *)(a1 + 160);
    if (v15)
    {
      unsigned int v16 = v15 - 1;
      uint64_t v13 = *(void *)(*(void *)(a1 + 152) + 8 * v16);
      *(_DWORD *)(a1 + 160) = v16;
      uint64_t v22 = v13;
    }
    else
    {
      ++*(_DWORD *)(a1 + 192);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 0x4000, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/src/pipeline/PxcNpMemBlockPool.cpp", 244);
      uint64_t v22 = v13;
      if (!v13)
      {
        --*(_DWORD *)(a1 + 192);
        goto LABEL_26;
      }
    }
    uint64_t v17 = *(unsigned int *)(a2 + 8);
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v17)
    {
      physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(a2, &v22);
      uint64_t v13 = v22;
    }
    else
    {
      *(void *)(*(void *)a2 + 8 * v17) = v13;
      *(_DWORD *)(a2 + 8) = v17 + 1;
    }
    int v18 = *(_DWORD *)(a1 + 204);
    int v19 = v18 + 1;
    if ((v18 + 1) > *(_DWORD *)(a1 + 208)) {
      int v20 = v18 + 1;
    }
    else {
      int v20 = *(_DWORD *)(a1 + 208);
    }
    *(_DWORD *)(a1 + 204) = v19;
    *(_DWORD *)(a1 + 208) = v20;
    goto LABEL_26;
  }
  unsigned int v12 = v11 - 1;
  uint64_t v13 = *(void *)(*(void *)(a1 + 120) + 8 * v12);
  *(_DWORD *)(a1 + 128) = v12;
  uint64_t v22 = v13;
  uint64_t v14 = *(unsigned int *)(a2 + 8);
  if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v14)
  {
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(a2, &v22);
    uint64_t v13 = v22;
  }
  else
  {
    *(void *)(*(void *)a2 + 8 * v14) = v13;
    *(_DWORD *)(a2 + 8) = v14 + 1;
  }
LABEL_26:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  }
  return v13;
}

uint64_t physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(pthread_mutex_t **this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                       + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/src/pipeline/PxcNpMemBlockPool.cpp", 260);
  uint64_t v7 = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_lock(*this);
    }
    uint64_t v5 = *((unsigned int *)this + 36);
    if ((*((_DWORD *)this + 37) & 0x7FFFFFFFu) <= v5)
    {
      physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)(this + 17), &v7);
    }
    else
    {
      *(&this[17]->__sig + v5) = v4;
      *((_DWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v5 + 1;
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(*this);
    }
  }
  return v7;
}

uint64_t physx::PxcNpMemBlockPool::release(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)result);
  }
  int v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v5 + 204) -= v6;
  if (a3)
  {
    *a3 -= v6;
    int v6 = *(_DWORD *)(a2 + 8);
  }
  for (; v6; int v6 = *(_DWORD *)(a2 + 8))
  {
    uint64_t v10 = 0;
    int v7 = v6 - 1;
    uint64_t v8 = *(void *)(*(void *)a2 + 8 * (v6 - 1));
    *(_DWORD *)(a2 + 8) = v7;
    uint64_t v10 = v8;
    uint64_t v9 = *(unsigned int *)(v5 + 160);
    if ((*(_DWORD *)(v5 + 164) & 0x7FFFFFFFu) <= v9)
    {
      uint64_t result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v5 + 152, &v10);
    }
    else
    {
      *(void *)(*(void *)(v5 + 152) + 8 * v9) = v8;
      *(_DWORD *)(v5 + 160) = v9 + 1;
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)v5);
  }
  return result;
}

uint64_t physx::PxcNpMemBlockPool::releaseConstraintBlocks(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)result);
  }
  for (int i = *(_DWORD *)(a2 + 8); i; int i = *(_DWORD *)(a2 + 8))
  {
    unint64_t v11 = 0;
    int v5 = i - 1;
    unint64_t v6 = *(void *)(*(void *)a2 + 8 * (i - 1));
    *(_DWORD *)(a2 + 8) = v5;
    unint64_t v11 = v6;
    uint64_t v7 = *(void *)(v3 + 232);
    unint64_t v8 = *(void *)(v7 + 24);
    if (v8 > v6 || v8 + *(unsigned int *)(v7 + 32) <= v6)
    {
      uint64_t v10 = *(unsigned int *)(v3 + 160);
      if ((*(_DWORD *)(v3 + 164) & 0x7FFFFFFFu) <= v10)
      {
        uint64_t result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v3 + 152, &v11);
      }
      else
      {
        *(void *)(*(void *)(v3 + 152) + 8 * v10) = v6;
        *(_DWORD *)(v3 + 160) = v10 + 1;
      }
      --*(_DWORD *)(v3 + 204);
    }
    else
    {
      uint64_t v9 = *(unsigned int *)(v3 + 128);
      if ((*(_DWORD *)(v3 + 132) & 0x7FFFFFFFu) <= v9)
      {
        uint64_t result = physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(v3 + 120, &v11);
      }
      else
      {
        *(void *)(*(void *)(v3 + 120) + 8 * v9) = v6;
        *(_DWORD *)(v3 + 128) = v9 + 1;
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)v3);
  }
  return result;
}

double physx::PxcNpThreadContext::PxcNpThreadContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a1 + 44) = 1065353216;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(void *)(a1 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 84) = 1065353216;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(void *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2 + 296;
  *(void *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2 + 40;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(void *)(a1 + 53re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2 + 40;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  uint64_t v2 = -2400;
  *(_WORD *)(a1 + 4734) = 0;
  do
  {
    *(_DWORD *)(a1 + v2 + 7520) = 0;
    v2 += 400;
  }
  while (v2);
  *(_OWORD *)(a1 + 4688) = xmmword_23441F6C0;
  *(_OWORD *)(a1 + 4672) = xmmword_23435FBB0;
  *(_DWORD *)(a1 + 713re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 7140) = *(void *)(a2 + 288);
  double result = 0.0;
  *(_OWORD *)(a1 + 7152) = 0u;
  *(_WORD *)(a1 + 7184) = 0;
  *(unsigned char *)(a1 + 718re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 72re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(void *)(a1 + 7187) = 0;
  *(void *)(a1 + 7192) = 0;
  *(void *)(a1 + 7224) = *(void *)(a2 + 392);
  *(_OWORD *)(a1 + 7232) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 725re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 424);
  *(void *)(a1 + 7264) = 0;
  *(_DWORD *)(a1 + 7272) = 0;
  *(void *)(a1 + 7280) = 0;
  *(_DWORD *)(a1 + 7288) = 0;
  *(_OWORD *)(a1 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 21re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 29re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 729re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

double physx::PxcNpThreadContext::reset(physx::PxcNpThreadContext *this, int a2)
{
  *((void *)this + 65) = 0;
  *((_DWORD *)this + 132) = 0;
  *((void *)this + 68) = 0;
  *((_DWORD *)this + 138) = 0;
  uint64_t v4 = (char *)this + 7264;
  bzero(*((void **)this + 908), (4 * *((_DWORD *)this + 1818)));
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v4, a2);
  bzero(*((void **)this + 910), (4 * *((_DWORD *)this + 1822)));
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 7280, a2);
  double result = 0.0;
  *((_OWORD *)this + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  return result;
}

uint64_t physx::PxsCCDContext::PxsCCDContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v10 = *(void *)(a2 + 2616);
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_26E722FF8;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 40) = a1;
  *(void *)(a1 + 48) = "PxsContext.postCCDSweep";
  uint64_t v11 = *(void *)(a2 + 2616);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = &unk_26E723088;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a1;
  *(void *)(a1 + 104) = "PxsContext.postCCDAdvance";
  uint64_t v12 = *(void *)(a2 + 2616);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = &unk_26E723118;
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 152) = a1;
  *(void *)(a1 + 160) = "PxsContext.postCCDDepenetrate";
  *(unsigned char *)(a1 + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v13 = a1 + 192;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  uint64_t v14 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::Block>:"
  }
          ":getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::Block]";
  else {
    int v15 = "<allocation names disabled>";
  }
  *(void *)&long long v32 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v14 + 24) + 16))(v14 + 24, 0x2000, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 210);
  DWORD2(v32) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 200);
  if ((*(_DWORD *)(a1 + 204) & 0x7FFFFFFFu) <= v16)
  {
    physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo>>::growAndPushBack(v13, &v32);
  }
  else
  {
    *(_OWORD *)(*(void *)(a1 + 192) + 16 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v32;
    ++*(_DWORD *)(a1 + 200);
  }
  *(void *)(a1 + 21re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  uint64_t v17 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::Bloc"
  }
          "k>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::Block]";
  else {
    int v18 = "<allocation names disabled>";
  }
  *(void *)&long long v32 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v17 + 24) + 16))(v17 + 24, 2048, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 210);
  DWORD2(v32) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 224);
  if ((*(_DWORD *)(a1 + 228) & 0x7FFFFFFFu) <= v19)
  {
    physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo>>::growAndPushBack(a1 + 216, &v32);
  }
  else
  {
    *(_OWORD *)(*(void *)(a1 + 216) + 16 * v19) = v32;
    ++*(_DWORD *)(a1 + 224);
  }
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v20 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Block>"
  }
          "::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Block]";
  else {
    uint64_t v21 = "<allocation names disabled>";
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v20 + 24) + 16))(v20 + 24, 15360, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 210);
  uint64_t v23 = -15360;
  do
  {
    *(_DWORD *)(v22 + v23 + 15472) = -128;
    v23 += 120;
  }
  while (v23);
  *(void *)&long long v32 = v22;
  DWORD2(v32) = 0;
  uint64_t v24 = *(unsigned int *)(a1 + 248);
  if ((*(_DWORD *)(a1 + 252) & 0x7FFFFFFFu) <= v24)
  {
    physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo>>::growAndPushBack(a1 + 240, &v32);
  }
  else
  {
    *(_OWORD *)(*(void *)(a1 + 240) + 16 * v24) = v32;
    ++*(_DWORD *)(a1 + 248);
  }
  *(_OWORD *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 29re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = -3233808384;
  *(void *)(a1 + 360) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*> const,physx::PxsCCDShape *>,physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 312, 0x40u, 0);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  uint64_t v25 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    size_t v26 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::Block>:"
  }
          ":getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::Block]";
  else {
    size_t v26 = "<allocation names disabled>";
  }
  *(void *)&long long v32 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v25 + 24) + 16))(v25 + 24, 17408, v26, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 210);
  DWORD2(v32) = 0;
  uint64_t v27 = *(unsigned int *)(a1 + 376);
  if ((*(_DWORD *)(a1 + 380) & 0x7FFFFFFFu) <= v27)
  {
    physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo>>::growAndPushBack(a1 + 368, &v32);
  }
  else
  {
    *(_OWORD *)(*(void *)(a1 + 368) + 16 * v27) = v32;
    ++*(_DWORD *)(a1 + 376);
  }
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 43re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  *(void *)(a1 + 440) = a2;
  *(void *)(a1 + 448) = a3;
  *(void *)(a1 + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a4;
  uint64_t v28 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v29 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    int v29 = "<allocation names disabled>";
  }
  unsigned int v30 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v28 + 24) + 16))(v28 + 24, 72, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 464) = v30;
  physx::shdfnd::MutexImpl::MutexImpl(v30);
  *(float *)(a1 + 472) = a5;
  return a1;
}

void physx::PxsCCDContext::~PxsCCDContext(pthread_mutex_t **this)
{
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(this + 58);
  int v2 = *((_DWORD *)this + 105);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && this[51] != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 101);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && this[49] != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v6 = *((unsigned int *)this + 94);
  if (v6)
  {
    uint64_t v7 = 0;
    for (unint64_t i = 0; i < v6; ++i)
    {
      if (*(uint64_t *)((char *)&this[46]->__sig + v7))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v6 = *((unsigned int *)this + 94);
      }
      v7 += 16;
    }
  }
  *((_DWORD *)this + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  int v9 = *((_DWORD *)this + 95);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && this[46] != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (this[39]) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v11 = *((_DWORD *)this + 77);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && this[37]) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v12 = *((_DWORD *)this + 73);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && this[35]) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v13 = *((_DWORD *)this + 69);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && this[33]) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v14 = *((unsigned int *)this + 62);
  if (v14)
  {
    uint64_t v15 = 0;
    for (unint64_t j = 0; j < v14; ++j)
    {
      if (*(uint64_t *)((char *)&this[30]->__sig + v15))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v14 = *((unsigned int *)this + 62);
      }
      v15 += 16;
    }
  }
  *((_DWORD *)this + 64) = 0;
  int v17 = *((_DWORD *)this + 63);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && this[30] != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v19 = *((unsigned int *)this + 56);
  if (v19)
  {
    uint64_t v20 = 0;
    for (unint64_t k = 0; k < v19; ++k)
    {
      if (*(uint64_t *)((char *)&this[27]->__sig + v20))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v19 = *((unsigned int *)this + 56);
      }
      v20 += 16;
    }
  }
  *((_DWORD *)this + re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58) = 0;
  int v22 = *((_DWORD *)this + 57);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && this[27] != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v24 = *((unsigned int *)this + 50);
  if (v24)
  {
    uint64_t v25 = 0;
    for (unint64_t m = 0; m < v24; ++m)
    {
      if (*(uint64_t *)((char *)&this[24]->__sig + v25))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v24 = *((unsigned int *)this + 50);
      }
      v25 += 16;
    }
  }
  *((_DWORD *)this + 52) = 0;
  int v27 = *((_DWORD *)this + 51);
  if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && this[24] != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  this[14] = (pthread_mutex_t *)&unk_26E7231E8;
  this[16] = 0;
  this[7] = (pthread_mutex_t *)&unk_26E7231E8;
  this[9] = 0;
  *this = (pthread_mutex_t *)&unk_26E7231E8;
  this[2] = 0;
}

void *physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDDepenetrate>::~DelegateTask(void *result)
{
  *double result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDAdvance>::~DelegateTask(void *result)
{
  *double result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDSweep>::~DelegateTask(void *result)
{
  *double result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::PxsCCDContext::create(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 480, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsCCD.cpp", 266);
  if (result) {
    return physx::PxsCCDContext::PxsCCDContext(result, a1, a2, a3, a4);
  }
  return result;
}

void physx::PxsCCDContext::destroy(pthread_mutex_t **this)
{
  physx::PxsCCDContext::~PxsCCDContext(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

float *physx::PxsCCDShape::getAbsPose(float *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(float **)(a3 + 40);
    float v4 = v3[12] * -2.0;
    float v5 = v3[13] * -2.0;
    float v6 = v3[14] * -2.0;
    float v8 = v3[10];
    float v7 = v3[11];
    float v9 = (float)(v7 * v7) + -0.5;
    float v10 = v3[8];
    float v11 = v3[9];
    float v12 = (float)((float)(v5 * v11) + (float)(v10 * v4)) + (float)(v8 * v6);
    float v13 = (float)((float)(v4 * v9) - (float)((float)((float)(v11 * v6) - (float)(v8 * v5)) * v7)) + (float)(v10 * v12);
    float v14 = (float)((float)(v5 * v9) - (float)((float)((float)(v8 * v4) - (float)(v10 * v6)) * v7)) + (float)(v11 * v12);
    float v15 = (float)((float)(v6 * v9) - (float)((float)((float)(v10 * v5) - (float)(v11 * v4)) * v7)) + (float)(v8 * v12);
    float v16 = v13 + v13;
    float v17 = v15 + v15;
    float v19 = v3[2];
    float v18 = v3[3];
    float v20 = (float)(v18 * v18) + -0.5;
    float v21 = v3[1];
    float v22 = (float)((float)(v21 * (float)(v14 + v14)) + (float)(*v3 * v16)) + (float)(v19 * v17);
    float v23 = (float)((float)(v18 * (float)((float)(v21 * v17) - (float)(v19 * (float)(v14 + v14)))) + (float)(v16 * v20))
        + (float)(*v3 * v22);
    float v24 = (float)((float)(v18 * (float)((float)(v19 * v16) - (float)(*v3 * v17))) + (float)((float)(v14 + v14) * v20))
        + (float)(v21 * v22);
    float v25 = (float)((float)(v18 * (float)((float)(*v3 * (float)(v14 + v14)) - (float)(v21 * v16))) + (float)(v17 * v20))
        + (float)(v19 * v22);
    float v26 = v3[4] + v23;
    float v27 = v3[5] + v24;
    float v28 = v3[6] + v25;
    float v29 = (float)((float)((float)(v7 * *v3) - (float)(v18 * v10)) - (float)(v21 * v8)) + (float)(v11 * v19);
    float v30 = (float)((float)((float)(v7 * v21) - (float)(v18 * v11)) - (float)(v19 * v10)) + (float)(v8 * *v3);
    float v31 = (float)((float)((float)(v7 * v19) - (float)(v18 * v8)) - (float)(*v3 * v11)) + (float)(v10 * v21);
    float v32 = (float)((float)((float)(v10 * *v3) + (float)(v18 * v7)) + (float)(v21 * v11)) + (float)(v19 * v8);
    float v33 = *(float **)(a2 + 96);
    float v34 = v33[4] + v33[4];
    float v35 = v33[5] + v33[5];
    float v36 = v33[6] + v33[6];
    float v37 = (float)(v32 * v32) + -0.5;
    float v38 = (float)((float)(v30 * v35) + (float)(v29 * v34)) + (float)(v31 * v36);
    float v39 = (float)((float)(v32 * (float)((float)(v30 * v36) - (float)(v31 * v35))) + (float)(v34 * v37))
        + (float)(v29 * v38);
    float v40 = (float)((float)(v32 * (float)((float)(v31 * v34) - (float)(v29 * v36))) + (float)(v35 * v37))
        + (float)(v30 * v38);
    float v41 = (float)((float)(v32 * (float)((float)(v29 * v35) - (float)(v30 * v34))) + (float)(v36 * v37))
        + (float)(v31 * v38);
    float v42 = v26 + v39;
    float v43 = v27 + v40;
    float v44 = v28 + v41;
    float v46 = v33[2];
    float v45 = v33[3];
    float v47 = v33[1];
    float v48 = (float)((float)((float)(v29 * v45) + (float)(v32 * *v33)) + (float)(v30 * v46)) - (float)(v47 * v31);
    float v49 = (float)((float)((float)(v30 * v45) + (float)(v32 * v47)) + (float)(v31 * *v33)) - (float)(v46 * v29);
    float v50 = (float)((float)((float)(v31 * v45) + (float)(v32 * v46)) + (float)(v29 * v47)) - (float)(*v33 * v30);
    float v51 = (float)((float)((float)(v32 * v45) - (float)(v29 * *v33)) - (float)(v30 * v47)) - (float)(v31 * v46);
  }
  else
  {
    uint64_t v53 = *(float **)(a2 + 96);
    int v52 = *(float **)(a2 + 104);
    float v54 = v53[4] + v53[4];
    float v55 = v53[5] + v53[5];
    float v56 = v53[6] + v53[6];
    float v58 = v52[2];
    float v57 = v52[3];
    float v59 = (float)(v57 * v57) + -0.5;
    float v60 = v52[1];
    float v61 = (float)((float)(v55 * v60) + (float)(*v52 * v54)) + (float)(v58 * v56);
    float v62 = (float)((float)(v57 * (float)((float)(v60 * v56) - (float)(v58 * v55))) + (float)(v54 * v59))
        + (float)(*v52 * v61);
    float v63 = (float)((float)(v57 * (float)((float)(v58 * v54) - (float)(*v52 * v56))) + (float)(v55 * v59))
        + (float)(v60 * v61);
    float v64 = (float)((float)(v57 * (float)((float)(*v52 * v55) - (float)(v60 * v54))) + (float)(v56 * v59))
        + (float)(v58 * v61);
    float v42 = v52[4] + v62;
    float v43 = v52[5] + v63;
    float v44 = v52[6] + v64;
    float v66 = v53[2];
    float v65 = v53[3];
    float v67 = v53[1];
    float v48 = (float)((float)((float)(*v52 * v65) + (float)(v57 * *v53)) + (float)(v60 * v66)) - (float)(v67 * v58);
    float v49 = (float)((float)((float)(v60 * v65) + (float)(v57 * v67)) + (float)(v58 * *v53)) - (float)(v66 * *v52);
    float v50 = (float)((float)((float)(v58 * v65) + (float)(v57 * v66)) + (float)(*v52 * v67)) - (float)(*v53 * v60);
    float v51 = (float)((float)((float)(v57 * v65) - (float)(*v52 * *v53)) - (float)(v60 * v67)) - (float)(v58 * v66);
  }
  *uint64_t result = v48;
  result[1] = v49;
  result[2] = v50;
  result[3] = v51;
  result[4] = v42;
  result[5] = v43;
  result[6] = v44;
  return result;
}

float physx::PxsCCDShape::getLastCCDAbsPose(float *a1, float *a2, uint64_t a3)
{
  uint64_t v3 = *(float **)(a3 + 40);
  float v4 = v3[12] * -2.0;
  float v5 = v3[13] * -2.0;
  float v6 = v3[14] * -2.0;
  float v8 = v3[10];
  float v7 = v3[11];
  float v9 = (float)(v7 * v7) + -0.5;
  float v10 = v3[8];
  float v11 = v3[9];
  float v12 = (float)((float)(v5 * v11) + (float)(v10 * v4)) + (float)(v8 * v6);
  float v13 = (float)((float)(v4 * v9) - (float)((float)((float)(v11 * v6) - (float)(v8 * v5)) * v7)) + (float)(v10 * v12);
  float v14 = (float)((float)(v5 * v9) - (float)((float)((float)(v8 * v4) - (float)(v10 * v6)) * v7)) + (float)(v11 * v12);
  float v15 = (float)((float)(v6 * v9) - (float)((float)((float)(v10 * v5) - (float)(v11 * v4)) * v7)) + (float)(v8 * v12);
  float v16 = v13 + v13;
  float v17 = v15 + v15;
  float v19 = *(float *)(a3 + 8);
  float v18 = *(float *)(a3 + 12);
  float v20 = (float)(v18 * v18) + -0.5;
  float v21 = *(float *)(a3 + 4);
  float v22 = (float)((float)(v21 * (float)(v14 + v14)) + (float)(*(float *)a3 * v16)) + (float)(v19 * v17);
  float v23 = (float)((float)(v18 * (float)((float)(v21 * v17) - (float)(v19 * (float)(v14 + v14)))) + (float)(v16 * v20))
      + (float)(*(float *)a3 * v22);
  float v24 = (float)((float)(v18 * (float)((float)(v19 * v16) - (float)(*(float *)a3 * v17)))
              + (float)((float)(v14 + v14) * v20))
      + (float)(v21 * v22);
  float v25 = (float)((float)(v18 * (float)((float)(*(float *)a3 * (float)(v14 + v14)) - (float)(v21 * v16)))
              + (float)(v17 * v20))
      + (float)(v19 * v22);
  float v26 = *(float *)(a3 + 16) + v23;
  float v27 = *(float *)(a3 + 24) + v25;
  float v28 = (float)((float)((float)(v7 * *(float *)a3) - (float)(v18 * v10)) - (float)(v21 * v8)) + (float)(v11 * v19);
  float v29 = (float)((float)((float)(v7 * v21) - (float)(v18 * v11)) - (float)(v19 * v10)) + (float)(v8 * *(float *)a3);
  float v30 = (float)((float)((float)(v7 * v19) - (float)(v18 * v8)) - (float)(*(float *)a3 * v11)) + (float)(v10 * v21);
  float v31 = (float)((float)((float)(v10 * *(float *)a3) + (float)(v18 * v7)) + (float)(v21 * v11)) + (float)(v19 * v8);
  float v32 = a2[4] + a2[4];
  float v33 = a2[5] + a2[5];
  float v34 = a2[6] + a2[6];
  float v35 = (float)(v31 * v31) + -0.5;
  float v36 = (float)((float)(v29 * v33) + (float)(v28 * v32)) + (float)(v30 * v34);
  float v37 = (float)((float)(v31 * (float)((float)(v29 * v34) - (float)(v30 * v33))) + (float)(v32 * v35))
      + (float)(v28 * v36);
  float v38 = (float)((float)(v31 * (float)((float)(v30 * v32) - (float)(v28 * v34))) + (float)(v33 * v35))
      + (float)(v29 * v36);
  float v39 = (float)((float)(v31 * (float)((float)(v28 * v33) - (float)(v29 * v32))) + (float)(v34 * v35))
      + (float)(v30 * v36);
  float v40 = v26 + v37;
  float v41 = (float)(*(float *)(a3 + 20) + v24) + v38;
  float v43 = a2[2];
  float v42 = a2[3];
  float v44 = a2[1];
  float v45 = (float)((float)((float)(v28 * v42) + (float)(v31 * *a2)) + (float)(v29 * v43)) - (float)(v44 * v30);
  float v46 = (float)((float)((float)(v29 * v42) + (float)(v31 * v44)) + (float)(v30 * *a2)) - (float)(v43 * v28);
  float v47 = (float)((float)((float)(v30 * v42) + (float)(v31 * v43)) + (float)(v28 * v44)) - (float)(*a2 * v29);
  float v48 = (float)((float)((float)(v31 * v42) - (float)(v28 * *a2)) - (float)(v29 * v44)) - (float)(v30 * v43);
  *a1 = v45;
  a1[1] = v46;
  a1[2] = v47;
  a1[3] = v48;
  float result = v27 + v39;
  a1[4] = v40;
  a1[5] = v41;
  a1[6] = result;
  return result;
}

void physx::PxsCCDPair::updateShapes(physx::PxsCCDPair *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v3 = *((void *)this + 2);
    if (*(_DWORD *)(*(void *)(v2 + 32) + 56) != *(_DWORD *)(v3 + 92))
    {
      physx::PxsCCDShape::getAbsPose((float *)&v55, *((void *)this + 2), v2);
      float v4 = *(float **)(v3 + 96);
      physx::PxsCCDShape::getLastCCDAbsPose((float *)&v52, v4, v2);
      float v5 = v58;
      float v6 = v58 - *(float *)&v54;
      v7.i32[0] = vdup_lane_s32(v53, 1).u32[0];
      v7.i32[1] = v54;
      __int32 v42 = v53.i32[0];
      uint64_t v44 = v7.i64[0];
      *(float32x2_t *)v8.f32 = v57;
      float32x2_t v46 = v57;
      float32x2_t v9 = vsub_f32(v57, (float32x2_t)v53);
      physx::Gu::computeBoundsWithCCDThreshold((float *)&v50, (float *)&v48, (uint64_t)(v4 + 10), (uint64_t)&v55, 0, v10, v11, v12, v8, v7, *(double *)&v53, v13, v14, v15, v16, v17);
      float v18 = v51 - v6;
      uint64_t v19 = *((void *)this + 2);
      *(float32x2_t *)(v19 + 80) = vsub_f32(v50, v9);
      *(float *)(v19 + 88) = v18;
      *(void *)(v19 + 68) = v48;
      *(_DWORD *)(v19 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v49;
      *(_OWORD *)(v19 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v52;
      *(void *)&long long v20 = v44;
      *(_DWORD *)(v19 + 28) = v42;
      *(void *)&long long v21 = v56;
      *((void *)&v20 + 1) = v55;
      *((float32x2_t *)&v21 + 1) = v46;
      *(_OWORD *)(v19 + 32) = v20;
      *(_OWORD *)(v19 + 48) = v21;
      *(float *)(v19 + 64) = v5;
      *(_DWORD *)(v19 + 92) = *(_DWORD *)(*(void *)(*(void *)this + 32) + 56);
    }
  }
  uint64_t v22 = *((void *)this + 1);
  if (v22)
  {
    uint64_t v23 = *((void *)this + 3);
    if (*(_DWORD *)(*(void *)(v22 + 32) + 56) != *(_DWORD *)(v23 + 92))
    {
      physx::PxsCCDShape::getAbsPose((float *)&v55, *((void *)this + 3), *((void *)this + 1));
      float v24 = *(float **)(v23 + 96);
      physx::PxsCCDShape::getLastCCDAbsPose((float *)&v52, v24, v22);
      float v25 = v58;
      float v26 = v58 - *(float *)&v54;
      v27.i32[0] = vdup_lane_s32(v53, 1).u32[0];
      v27.i32[1] = v54;
      __int32 v43 = v53.i32[0];
      uint64_t v45 = v27.i64[0];
      *(float32x2_t *)v28.f32 = v57;
      float32x2_t v47 = v57;
      float32x2_t v29 = vsub_f32(v57, (float32x2_t)v53);
      physx::Gu::computeBoundsWithCCDThreshold((float *)&v50, (float *)&v48, (uint64_t)(v24 + 10), (uint64_t)&v55, 0, v30, v31, v32, v28, v27, *(double *)&v53, v33, v34, v35, v36, v37);
      float v38 = v51 - v26;
      uint64_t v39 = *((void *)this + 3);
      *(float32x2_t *)(v39 + 80) = vsub_f32(v50, v29);
      *(float *)(v39 + 88) = v38;
      *(void *)(v39 + 68) = v48;
      *(_DWORD *)(v39 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v49;
      *(_OWORD *)(v39 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v52;
      *(void *)&long long v40 = v45;
      *(_DWORD *)(v39 + 28) = v43;
      *(void *)&long long v41 = v56;
      *((void *)&v40 + 1) = v55;
      *((float32x2_t *)&v41 + 1) = v47;
      *(_OWORD *)(v39 + 32) = v40;
      *(_OWORD *)(v39 + 48) = v41;
      *(float *)(v39 + 64) = v25;
      *(_DWORD *)(v39 + 92) = *(_DWORD *)(*(void *)(*((void *)this + 1) + 32) + 56);
    }
  }
}

void physx::PxsCCDPair::sweepEstimateToi(physx::PxsCCDPair *this, float a2)
{
  physx::PxsCCDPair::updateShapes(this);
  int v5 = *((_DWORD *)this + 21);
  int v4 = *((_DWORD *)this + 22);
  if (v4 >= v5) {
    uint64_t v6 = *((void *)this + 3);
  }
  else {
    uint64_t v6 = *((void *)this + 2);
  }
  if (v4 >= v5) {
    uint64_t v7 = *((void *)this + 2);
  }
  else {
    uint64_t v7 = *((void *)this + 3);
  }
  long long v64 = *(_OWORD *)(v7 + 40);
  float v8 = *(float *)(v7 + 60);
  float v65 = *(float *)(v7 + 56);
  float v66 = v8;
  float v67 = *(float *)(v7 + 64);
  long long v60 = *(_OWORD *)(v7 + 12);
  float v9 = *(float *)(v7 + 32);
  float v61 = *(float *)(v7 + 28);
  float v62 = v9;
  float v63 = *(float *)(v7 + 36);
  float v10 = v65 - v61;
  float v11 = v8 - v9;
  float v12 = v67 - v63;
  long long v18 = *(_OWORD *)(v6 + 40);
  long long v56 = v18;
  float v13 = *(float *)(v6 + 60);
  float v57 = *(float *)(v6 + 56);
  float v58 = v13;
  float v59 = *(float *)(v6 + 64);
  long long v52 = *(_OWORD *)(v6 + 12);
  float v14 = *(float *)(v6 + 32);
  float v53 = *(float *)(v6 + 28);
  float v54 = v14;
  float v55 = *(float *)(v6 + 36);
  float v15 = v57 - v53;
  float v16 = v13 - v14;
  float v17 = v59 - v55;
  LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = *(_DWORD *)(*((void *)this + 9) + 92);
  float v19 = (float)(v65 - v61) - (float)(v57 - v53);
  float v20 = (float)(v67 - v63) - (float)(v59 - v55);
  float v21 = *(float *)(v7 + 8) + *(float *)(v6 + 8);
  if (v21 >= a2) {
    float v21 = a2;
  }
  *((_DWORD *)this + 32) = 0;
  if ((float)((float)((float)((float)(v11 - v16) * (float)(v11 - v16)) + (float)(v19 * v19)) + (float)(v20 * v20)) <= (float)(v21 * v21))
  {
LABEL_46:
    float v22 = 3.4028e38;
    goto LABEL_47;
  }
  *(float *)&long long v18 = fmaxf(*(float *)&v18, 0.0);
  if (v4 <= v5) {
    int v4 = v5;
  }
  if (v4 == 6)
  {
    float v22 = physx::Gu::SweepEstimateAnyShapeHeightfield(v7, v6, (float32x2_t *)&v64, (float32x2_t *)&v56, (float32x2_t *)&v60, (float32x2_t *)&v52, *(double *)&v18, v21);
    goto LABEL_47;
  }
  if (v4 == 5)
  {
    float v22 = physx::Gu::SweepEstimateAnyShapeMesh((float32x2_t *)v7, (uint64_t *)v6, (float32x2_t *)&v64, (float32x2_t *)&v56, (float32x2_t *)&v60, (float32x2_t *)&v52, *(double *)&v18);
    goto LABEL_47;
  }
  float v23 = *(float *)(v7 + 84);
  float v24 = *(float *)(v7 + 88);
  float v25 = *(float *)(v7 + 80);
  float v26 = *(float *)(v6 + 84);
  float v27 = *(float *)(v6 + 88);
  float v28 = *(float *)(v6 + 80);
  float v29 = (float)(*(float *)&v18 + *(float *)(v7 + 68)) * 1.1;
  float v30 = (float)(*(float *)&v18 + *(float *)(v7 + 72)) * 1.1;
  float v31 = (float)(*(float *)&v18 + *(float *)(v7 + 76)) * 1.1;
  float v32 = *(float *)(v6 + 68) * 1.1;
  float v33 = *(float *)(v6 + 72) * 1.1;
  float v34 = *(float *)(v6 + 76) * 1.1;
  float v35 = vabds_f32(v23, v26);
  float v36 = vabds_f32(v24, v27);
  float v22 = 0.0;
  if (vabds_f32(v25, v28) > (float)(v29 + v32) || v35 > (float)(v30 + v33) || v36 > (float)(v31 + v34))
  {
    uint64_t v39 = 0;
    v72[0] = v15 - v10;
    v72[1] = v16 - v11;
    v72[2] = v17 - v12;
    v71[0] = v25 + v29;
    v71[1] = v23 + v30;
    v71[2] = v24 + v31;
    v70[0] = v25 - v29;
    v70[1] = v23 - v30;
    v70[2] = v24 - v31;
    v69[0] = v28 + v32;
    v69[1] = v26 + v33;
    v69[2] = v27 + v34;
    float v40 = v26 - v33;
    float v22 = 0.0;
    float v41 = 1.0;
    v68[0] = v28 - v32;
    v68[1] = v40;
    v68[2] = v27 - v34;
    while (1)
    {
      float v42 = v72[v39];
      if (v42 < -0.000001) {
        break;
      }
      if (v42 <= 0.000001)
      {
        if (v69[v39] < v70[v39] || v68[v39] > v71[v39]) {
          goto LABEL_46;
        }
        goto LABEL_43;
      }
      float v43 = v68[v39];
      float v44 = v71[v39];
      if (v43 > v44) {
        goto LABEL_46;
      }
      float v48 = v69[v39];
      float v49 = v70[v39];
      if (v48 < v49)
      {
        float v50 = (float)(v49 - v48) / v42;
        if (v50 > v22) {
          float v22 = v50;
        }
      }
      if (v44 > v43) {
        goto LABEL_38;
      }
LABEL_43:
      if (v22 > v41) {
        goto LABEL_46;
      }
      if (++v39 == 3) {
        goto LABEL_47;
      }
    }
    float v43 = v69[v39];
    float v44 = v70[v39];
    if (v43 < v44) {
      goto LABEL_46;
    }
    float v45 = v71[v39];
    float v46 = v68[v39];
    if (v45 < v46)
    {
      float v47 = (float)(v45 - v46) / v42;
      if (v47 > v22) {
        float v22 = v47;
      }
    }
    if (v43 <= v44) {
      goto LABEL_43;
    }
LABEL_38:
    float v51 = (float)(v44 - v43) / v42;
    if (v51 < v41) {
      float v41 = v51;
    }
    goto LABEL_43;
  }
LABEL_47:
  *((float *)this + 11) = v22;
}

double physx::PxsRigidBody::advancePrevPoseToToi(float32x2_t *this, double result)
{
  uint64_t v2 = (float32x2_t *)this[5];
  if (v2[15].f32[1] != 0.0)
  {
    float32_t v4 = (float)((float)(1.0 - *(float *)&result) * this[3].f32[0]) + (float)(v2[3].f32[0] * *(float *)&result);
    this[2] = vadd_f32(vmul_n_f32(this[2], 1.0 - *(float *)&result), vmul_n_f32(v2[2], *(float *)&result));
    this[3].f32[0] = v4;
    physx::shdfnd::slerp((float *)this, (float *)v2, (float *)&v5, *(float *)&result);
    float result = *(double *)&v5;
    *(_OWORD *)this->f32 = v5;
  }
  return result;
}

void physx::PxsRigidBody::advanceToToi(float32x2_t *this, float a2, float a3, int a4)
{
  float32x2_t v4 = this[5];
  if (*(float *)(*(void *)&v4 + 124) != 0.0)
  {
    if (a4)
    {
      *(float32x2_t *)(*(void *)&v4 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = this[2];
      *(_DWORD *)(*(void *)&v4 + 24) = this[3].i32[0];
      *(_OWORD *)*(void *)&float32x2_t v4 = *(_OWORD *)this->f32;
      float v6 = 1.0 - a2;
    }
    else
    {
      float v7 = 1.0;
      float v8 = 1.0 - a2;
      float v9 = (float)((float)(1.0 - a2) * (float)(*(float *)(*(void *)&v4 + 72) * a3)) + this[3].f32[0];
      *(float32x2_t *)(*(void *)&v4 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = vadd_f32(vmul_n_f32(vmul_n_f32(*(float32x2_t *)(*(void *)&v4 + 64), a3), v8), this[2]);
      *(float *)(*(void *)&v4 + 24) = v9;
      float v10 = *(float *)(*(void *)&v4 + 84) * a3;
      float v11 = *(float *)(*(void *)&v4 + 88) * a3;
      float v12 = v8 * (float)(*(float *)(*(void *)&v4 + 80) * a3);
      float v13 = v8 * v10;
      float v25 = v8;
      float v14 = v8 * v11;
      float v15 = sqrtf((float)((float)(v13 * v13) + (float)(v12 * v12)) + (float)(v14 * v14));
      float v16 = 0.0;
      float v17 = 0.0;
      if (v15 > 1.0e-20)
      {
        float v7 = v12 * (float)(1.0 / v15);
        float v16 = v13 * (float)(1.0 / v15);
        float v17 = v14 * (float)(1.0 / v15);
      }
      __float2 v18 = __sincosf_stret(v15 * 0.5);
      float v19 = this->f32[1];
      float v21 = this[1].f32[0];
      float v20 = this[1].f32[1];
      float v22 = (float)((float)((float)(v18.__cosval * v19) + (float)(v20 * (float)(v18.__sinval * v16)))
                  + (float)(v21 * (float)(v18.__sinval * v7)))
          - (float)((float)(v18.__sinval * v17) * this->f32[0]);
      float v23 = (float)((float)((float)(v18.__cosval * v21) + (float)(v20 * (float)(v18.__sinval * v17)))
                  + (float)(this->f32[0] * (float)(v18.__sinval * v16)))
          - (float)((float)(v18.__sinval * v7) * v19);
      float v24 = -(float)(this->f32[0] * (float)(v18.__sinval * v7));
      **(float **)v4.f32 = (float)((float)((float)(v18.__cosval * this->f32[0])
                                         + (float)(v20 * (float)(v18.__sinval * v7)))
                                 + (float)(v19 * (float)(v18.__sinval * v17)))
                         - (float)((float)(v18.__sinval * v16) * v21);
      *(float *)(*(void *)&v4 + 4) = v22;
      *(float *)(*(void *)&v4 + 8) = v23;
      *(float *)(*(void *)&v4 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = (float)((float)(v24 + (float)(v20 * v18.__cosval))
                                                - (float)(v19 * (float)(v18.__sinval * v16)))
                                        - (float)(v21 * (float)(v18.__sinval * v17));
      float v6 = v25;
    }
    *(float *)(*(void *)&this[4] + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = fmaxf(v6 * *(float *)(*(void *)&this[4] + 36), 0.01);
  }
}

uint64_t physx::PxsCCDContext::updateCCDEnd(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 180) == *(_DWORD *)(this + 436) - 1 || !*(_DWORD *)(this + 184))
  {
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 464));
    }
    uint64_t v2 = *(void *)(v1 + 192);
    int v3 = *(_DWORD *)(v2 + 16 * *(unsigned int *)(v1 + 208) + 8) + (*(_DWORD *)(v1 + 208) << 7);
    if (v3)
    {
      for (unsigned int i = 0; i != v3; ++i)
      {
        uint64_t v5 = i & 0x7F;
        uint64_t v6 = *(void *)(v2 + 16 * (i >> 7)) + (v5 << 6);
        uint64_t v9 = *(void *)(v6 + 40);
        float v7 = (void *)(v6 + 40);
        uint64_t v8 = v9;
        uint64_t v10 = *(void *)(v9 + 32);
        if (v10 && *(unsigned char *)(v10 + 35))
        {
          uint64_t v11 = *(unsigned int *)(v1 + 304);
          if ((*(_DWORD *)(v1 + 308) & 0x7FFFFFFFu) <= v11)
          {
            this = physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::growAndPushBack(v1 + 296, v7);
          }
          else
          {
            *(void *)(*(void *)(v1 + 296) + 8 * v11) = v8;
            *(_DWORD *)(v1 + 304) = v11 + 1;
          }
        }
        uint64_t v2 = *(void *)(v1 + 192);
        uint64_t v12 = *(void *)(*(void *)(v2 + 16 * (i >> 7)) + (v5 << 6) + 40);
        *(void *)(v12 + 32) = 0;
        *(unsigned char *)(*(void *)(v12 + 40) + 15re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      }
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      this = pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 464));
      uint64_t v2 = *(void *)(v1 + 192);
    }
    *(_DWORD *)(v1 + 208) = 0;
    *(_DWORD *)(v2 + 8) = 0;
  }
  *(_DWORD *)(v1 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(*(void *)(v1 + 240) + 8) = 0;
  int v13 = *(_DWORD *)(v1 + 348);
  if (v13 && *(_DWORD *)(v1 + 364))
  {
    this = (uint64_t)memset(*(void **)(v1 + 336), 255, (4 * v13));
    uint64_t v14 = *(void *)(v1 + 328);
    uint64_t v15 = (*(_DWORD *)(v1 + 344) - 1);
    if (*(_DWORD *)(v1 + 344) == 1)
    {
      uint64_t v23 = 0;
    }
    else
    {
      _X10 = v14 + 128;
      int v17 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v17++;
        _X10 += 4;
        --v15;
      }
      while (v15);
      uint64_t v23 = (*(_DWORD *)(v1 + 344) - 1);
    }
    *(_DWORD *)(v14 + 4 * v23) = -1;
    *(_DWORD *)(v1 + 35re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(_DWORD *)(v1 + 364) = 0;
  }
  ++*(_DWORD *)(v1 + 180);
  return this;
}

void physx::PxsCCDContext::resetContactManagers(physx::PxsCCDContext *this)
{
  uint64_t v1 = *((void *)this + 55);
  int v2 = *(_DWORD *)(v1 + 1696);
  int v3 = *(unsigned int **)(v1 + 1688);
  unint64_t v4 = v2 & 0x7FFFFFFF;
  if ((v2 & 0x7FFFFFFF) != 0)
  {
    unsigned int v5 = *v3;
    if (*v3)
    {
      uint64_t v6 = 0;
LABEL_7:
      unsigned int v7 = __clz(__rbit32(v5)) | (32 * v6);
      unsigned int v8 = (v5 - 1) & v5;
      if (!v8)
      {
        uint64_t v9 = v6;
        if ((int)v6 + 1 > v4) {
          uint64_t v6 = (v6 + 1);
        }
        else {
          uint64_t v6 = v4;
        }
        unint64_t v10 = v9 + 1;
        while (v10 < v4)
        {
          unsigned int v8 = v3[v10++];
          if (v8)
          {
            uint64_t v6 = (v10 - 1);
            goto LABEL_16;
          }
        }
        unsigned int v8 = 0;
      }
LABEL_16:
      if (v7 != -1)
      {
        uint64_t v11 = *(void *)(v1 + 488);
        int v12 = *(_DWORD *)(v1 + 464);
        int v13 = *(_DWORD *)(v1 + 456) - 1;
        do
        {
          uint64_t v14 = *(void *)(v11 + 8 * (v7 >> v12)) + 120 * (v7 & v13);
          *(_DWORD *)(v14 + 16) &= ~4u;
          *(void *)(v14 + 64) = 0;
          if (!v8) {
            break;
          }
          int v15 = (v8 - 1) & v8;
          if (v15)
          {
            uint64_t v16 = v6;
          }
          else
          {
            uint64_t v16 = (int)v6 + 1 > v4 ? (v6 + 1) : v4;
            LODWORD(v17) = v6;
            while (v16 - 1 != v17)
            {
              uint64_t v17 = (v17 + 1);
              int v15 = v3[v17];
              if (v15)
              {
                uint64_t v16 = v17;
                goto LABEL_29;
              }
            }
            int v15 = 0;
          }
LABEL_29:
          unsigned int v7 = __clz(__rbit32(v8)) | (32 * v6);
          unsigned int v8 = v15;
          uint64_t v6 = v16;
        }
        while (v7 != -1);
      }
    }
    else
    {
      uint64_t v6 = 0;
      while (v4 - 1 != v6)
      {
        unsigned int v5 = v3[++v6];
        if (v5) {
          goto LABEL_7;
        }
      }
    }
  }
  bzero(v3, (4 * v2));
}

uint64_t physx::PxsCCDContext::updateCCD(physx::PxsCCDContext *this, float a2, physx::PxBaseTask *a3, physx::IG::IslandSim *a4, char a5, int a6)
{
  uint64_t v301 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a5;
  *(_DWORD *)(*((void *)this + 56) + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v11 = *((void *)this + 55);
  bzero(*(void **)(v11 + 1704), (4 * *(_DWORD *)(v11 + 1712)));
  bzero(*(void **)(v11 + 1720), (4 * *(_DWORD *)(v11 + 1728)));
  *(_DWORD *)(v11 + 1752) = 0;
  *(_OWORD *)(v11 + 173re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  if (!*((_DWORD *)this + 45))
  {
    physx::PxsCCDContext::resetContactManagers(this);
    if (!*((_DWORD *)this + 45))
    {
      if (a6) {
        goto LABEL_5;
      }
LABEL_16:
      *((_DWORD *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      return physx::PxsCCDContext::updateCCDEnd((uint64_t)this);
    }
  }
  if (!a6 || !*((_DWORD *)this + 46)) {
    goto LABEL_16;
  }
LABEL_5:
  *((_DWORD *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v12 = *((void *)this + 55);
  int v13 = (float *)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v12 + 440));
  if (!v13)
  {
    uint64_t v14 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpThreadContext>::getName() [T = physx::PxcNpThreadContext]";
    }
    else {
      int v15 = "<allocation names disabled>";
    }
    unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v14 + 24) + 16))(v14 + 24, 7335, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v16)
    {
      unint64_t v17 = v16;
      unint64_t v16 = (v16 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v16 - 8) = v16 - v17;
    }
    physx::PxcNpThreadContext::PxcNpThreadContext(v16, *(void *)(v12 + 448));
  }
  uint64_t v18 = *((void *)this + 27);
  *((void *)this + 53) = v13;
  v13[1800] = a2;
  *((_DWORD *)this + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v19 = *((void *)this + 46);
  *(_DWORD *)(v19 + 8) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((_DWORD *)this + re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58) = 0;
  *(_DWORD *)(v18 + 8) = 0;
  uint64_t v20 = *((void *)this + 55);
  unint64_t v21 = *(_DWORD *)(v20 + 1680) & 0x7FFFFFFF;
  if (!v21) {
    goto LABEL_156;
  }
  float v22 = *(unsigned int **)(v20 + 1672);
  unsigned int v23 = *v22;
  if (!*v22)
  {
    uint64_t v24 = 0;
    while (v21 - 1 != v24)
    {
      unsigned int v23 = v22[++v24];
      if (v23) {
        goto LABEL_22;
      }
    }
    goto LABEL_156;
  }
  uint64_t v24 = 0;
LABEL_22:
  unsigned int v26 = __clz(__rbit32(v23)) | (32 * v24);
  unsigned int v27 = (v23 - 1) & v23;
  if (!v27)
  {
    uint64_t v28 = v24;
    if ((int)v24 + 1 > v21) {
      uint64_t v24 = (v24 + 1);
    }
    else {
      uint64_t v24 = v21;
    }
    unint64_t v29 = v28 + 1;
    while (v29 < v21)
    {
      unsigned int v27 = v22[v29++];
      if (v27)
      {
        uint64_t v24 = (v29 - 1);
        goto LABEL_31;
      }
    }
    unsigned int v27 = 0;
  }
LABEL_31:
  if (v26 == -1)
  {
LABEL_156:
    physx::PxsCCDContext::updateCCDEnd((uint64_t)this);
    float v154 = (void *)*((void *)this + 53);
    uint64_t v155 = *(void *)(*((void *)this + 55) + 440);
    pthread_mutex_lock((pthread_mutex_t *)(v155 + 8));
    void *v154 = *(void *)v155;
    *(void *)uint64_t v155 = v154;
    return pthread_mutex_unlock((pthread_mutex_t *)(v155 + 8));
  }
  int v270 = 0;
  BOOL v30 = 0;
  float v251 = (char *)this + 216;
  float v252 = a3;
  v267 = (int32x2_t *)((char *)this + 312);
  v268 = a4;
  uint64_t v266 = (char *)this + 240;
  uint64_t v31 = *((void *)this + 55);
  do
  {
    uint64_t v32 = *(void *)(*(void *)(v31 + 488) + 8 * (v26 >> *(_DWORD *)(v31 + 464)));
    unsigned int v33 = (*(_DWORD *)(v31 + 456) - 1) & v26;
    uint64_t v34 = v32 + 120 * v33;
    char v36 = *(unsigned char *)(v34 + 16);
    float v35 = (unsigned char *)(v34 + 16);
    if ((v36 & 2) == 0) {
      goto LABEL_34;
    }
    __int16 v39 = *(_WORD *)(v32 + 120 * v33 + 80);
    if ((v39 & 0x1000) == 0 || (v39 & 0x18) == 0x18) {
      goto LABEL_34;
    }
    BOOL v40 = (v39 & 0x50) != 0 && *(unsigned char *)(*(void *)(v32 + 120 * v33 + 40) + 156) != 0;
    uint64_t v282 = *(void *)(v32 + 120 * v33 + 32);
    if (!*(unsigned char *)(v282 + 156) && !v40) {
      goto LABEL_34;
    }
    BOOL v271 = v30;
    uint64_t v44 = v32 + 120 * v33;
    uint64_t v45 = *(void *)(v44 + 56);
    v44 += 56;
    uint64_t v276 = v45;
    uint64_t v278 = *(void *)(v44 - 16);
    float v46 = *(float **)(v44 - 8);
    long long v283 = *(_OWORD *)(v32 + 120 * v33);
    uint64_t v274 = v32 + 120 * v33;
    float v275 = v35;
    uint64_t v272 = v44 - 8;
    uint64_t v273 = v44;
    if (*((_DWORD *)this + 91))
    {
      int v47 = *((_DWORD *)this + 87);
      int v48 = physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(v282, (uint64_t)v46);
      int v49 = v47 - 1;
      uint64_t v50 = *((void *)this + 42);
      uint64_t v51 = *(unsigned int *)(v50 + 4 * (v48 & (v47 - 1)));
      if (v51 == -1)
      {
LABEL_63:
        long long v52 = 0;
      }
      else
      {
        while (1)
        {
          long long v52 = (void *)(*((void *)this + 40) + 24 * v51);
          if (*v52 == v282 && v52[1] == (void)v46) {
            break;
          }
          uint64_t v51 = *(unsigned int *)(*((void *)this + 41) + 4 * v51);
          if (v51 == -1) {
            goto LABEL_63;
          }
        }
      }
      uint64_t v54 = *(unsigned int *)(v50
                            + 4
                            * (physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(v278, v276) & v49));
      if (v54 == -1)
      {
        float v55 = 0;
      }
      else
      {
        while (1)
        {
          float v55 = (void *)(*((void *)this + 40) + 24 * v54);
          if (*v55 == v278 && v55[1] == v276) {
            break;
          }
          uint64_t v54 = *(unsigned int *)(*((void *)this + 41) + 4 * v54);
          if (v54 == -1)
          {
            float v55 = 0;
            break;
          }
        }
      }
      if (v52)
      {
        uint64_t v57 = v52[2];
        if (v55) {
          goto LABEL_75;
        }
      }
      else
      {
        uint64_t v57 = 0;
        if (v55)
        {
LABEL_75:
          float v58 = (float *)v55[2];
          if (v57) {
            goto LABEL_76;
          }
LABEL_79:
          int v279 = v58;
          goto LABEL_80;
        }
      }
      float v58 = 0;
      if (v57)
      {
LABEL_76:
        float v59 = *(float *)(v57 + 8);
        float v269 = *(float *)(v57 + 56) - *(float *)(v57 + 28);
        float v60 = *(float *)(v57 + 60) - *(float *)(v57 + 32);
        float v61 = *(float *)(v57 + 64) - *(float *)(v57 + 36);
        goto LABEL_84;
      }
      goto LABEL_79;
    }
    int v279 = 0;
LABEL_80:
    uint64_t v57 = physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::pushBack((uint64_t)v266);
    v289[0] = v282;
    v289[1] = (uint64_t)v46;
    physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::insert(v267, v289, v57, v62);
    *(void *)(v57 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v46;
    *(void *)(v57 + 104) = v282;
    *(void *)uint64_t v57 = v46 + 10;
    physx::PxsCCDShape::getAbsPose((float *)&v290, v57, v283);
    if ((void)v283)
    {
      physx::PxsCCDShape::getLastCCDAbsPose((float *)&v298, v46, v283);
      float v74 = *((float *)&v291 + 1);
      float v75 = *(float *)&v291;
      float v76 = *((float *)&v299 + 1);
      float v77 = *(float *)&v299;
      v67.i32[0] = DWORD2(v291);
      float v78 = v300;
      long long v256 = v298;
      int v262 = DWORD1(v290);
      int v264 = v290;
      v66.i32[0] = HIDWORD(v290);
      int v258 = HIDWORD(v290);
      LODWORD(v68) = DWORD2(v290);
      int v260 = DWORD2(v290);
    }
    else
    {
      v66.i32[0] = v290;
      long long v298 = v290;
      LODWORD(v69) = HIDWORD(v290);
      LODWORD(v68) = DWORD2(v290);
      float v76 = *((float *)&v291 + 1);
      float v77 = *(float *)&v291;
      int v258 = HIDWORD(v290);
      int v260 = DWORD2(v290);
      int v262 = DWORD1(v290);
      int v264 = v290;
      long long v256 = v290;
      float v78 = *((float *)&v291 + 2);
      v67.i32[0] = DWORD2(v291);
      float v74 = *((float *)&v291 + 1);
      float v75 = *(float *)&v291;
      LODWORD(v299) = v291;
    }
    __int32 v254 = v67.i32[0];
    float v61 = *(float *)v67.i32 - v78;
    float v79 = physx::Gu::computeBoundsWithCCDThreshold((float *)&__b, (float *)&v285, (uint64_t)(v46 + 10), (uint64_t)&v290, 0, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73);
    float v269 = v75 - v77;
    float v80 = *(float *)&__b - (float)(v75 - v77);
    float v60 = v74 - v76;
    float v59 = v79;
    float v81 = *(float *)&v288 - v61;
    *(float *)(v57 + 84) = *((float *)&__b + 1) - (float)(v74 - v76);
    *(float *)(v57 + 88) = v81;
    *(void *)(v57 + 68) = v285;
    *(_DWORD *)(v57 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v286;
    *(float *)(v57 + 80) = v80;
    *(float *)(v57 + 8) = v79;
    *(_OWORD *)(v57 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v256;
    *(float *)(v57 + 28) = v77;
    *(float *)(v57 + 32) = v76;
    *(float *)(v57 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v78;
    *(_DWORD *)(v57 + 40) = v264;
    *(_DWORD *)(v57 + 44) = v262;
    *(_DWORD *)(v57 + 48) = v260;
    *(_DWORD *)(v57 + 52) = v258;
    *(float *)(v57 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v75;
    *(float *)(v57 + 60) = v74;
    *(_DWORD *)(v57 + 64) = v254;
    *(_DWORD *)(v57 + 92) = 0;
    unsigned int v82 = 2 * *(_DWORD *)(v32 + 120 * v33 + 104);
    *(_DWORD *)(v57 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(*(void *)(**((void **)v268 + 76)
                                                   + 8 * (v82 / *(_DWORD *)(*((void *)v268 + 76) + 24)))
                                       + 4 * (v82 % *(_DWORD *)(*((void *)v268 + 76) + 24)));
    float v58 = v279;
LABEL_84:
    if (v58)
    {
      float v83 = v58[2];
      float v84 = v58[14] - v58[7];
      float v85 = v58[15] - v58[8];
      uint64_t v280 = (uint64_t)v58;
      float v86 = v58[16] - v58[9];
    }
    else
    {
      float v261 = v59;
      float v263 = v61;
      float v265 = v60;
      uint64_t v87 = physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::pushBack((uint64_t)v266);
      *(void *)(v87 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v276;
      *(void *)(v87 + 104) = v278;
      uint64_t v88 = v276 + 40;
      *(void *)uint64_t v87 = v276 + 40;
      v284[0] = v278;
      v284[1] = v276;
      physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::insert(v267, v284, v87, v89);
      physx::PxsCCDShape::getAbsPose((float *)&v290, v87, *((uint64_t *)&v283 + 1));
      if (*((void *)&v283 + 1))
      {
        physx::PxsCCDShape::getLastCCDAbsPose((float *)&v298, *(float **)(v87 + 96), *((uint64_t *)&v283 + 1));
        float v102 = *((float *)&v291 + 1);
        float v101 = *(float *)&v291;
        float v103 = *((float *)&v299 + 1);
        float v104 = *(float *)&v299;
        v94.i32[0] = DWORD2(v291);
        float v105 = v300;
        long long v255 = v298;
        int v277 = DWORD1(v290);
        int v281 = v290;
        v93.i32[0] = HIDWORD(v290);
        int v257 = HIDWORD(v290);
        LODWORD(v95) = DWORD2(v290);
        int v259 = DWORD2(v290);
      }
      else
      {
        v93.i32[0] = v290;
        long long v298 = v290;
        LODWORD(v9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = HIDWORD(v290);
        LODWORD(v95) = DWORD2(v290);
        float v103 = *((float *)&v291 + 1);
        float v104 = *(float *)&v291;
        int v257 = HIDWORD(v290);
        int v259 = DWORD2(v290);
        int v277 = DWORD1(v290);
        int v281 = v290;
        long long v255 = v290;
        float v105 = *((float *)&v291 + 2);
        v94.i32[0] = DWORD2(v291);
        float v102 = *((float *)&v291 + 1);
        float v101 = *(float *)&v291;
        LODWORD(v299) = v291;
      }
      __int32 v253 = v94.i32[0];
      float v84 = v101 - v104;
      float v85 = v102 - v103;
      float v86 = *(float *)v94.i32 - v105;
      float v106 = physx::Gu::computeBoundsWithCCDThreshold((float *)&__b, (float *)&v285, v88, (uint64_t)&v290, 0, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100);
      float v107 = *(float *)&__b - (float)(v101 - v104);
      float v108 = *(float *)&v288 - v86;
      *(float *)(v87 + 84) = *((float *)&__b + 1) - (float)(v102 - v103);
      *(float *)(v87 + 88) = v108;
      *(void *)(v87 + 68) = v285;
      *(_DWORD *)(v87 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v286;
      *(float *)(v87 + 80) = v107;
      *(float *)(v87 + 8) = v106;
      *(_OWORD *)(v87 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v255;
      *(float *)(v87 + 28) = v104;
      *(float *)(v87 + 32) = v103;
      *(float *)(v87 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v105;
      *(_DWORD *)(v87 + 40) = v281;
      *(_DWORD *)(v87 + 44) = v277;
      *(_DWORD *)(v87 + 48) = v259;
      *(_DWORD *)(v87 + 52) = v257;
      *(float *)(v87 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v101;
      *(float *)(v87 + 60) = v102;
      float v83 = v106;
      *(_DWORD *)(v87 + 64) = v253;
      *(_DWORD *)(v87 + 92) = 0;
      unsigned int v109 = (2 * *(_DWORD *)(v32 + 120 * v33 + 104)) | 1;
      uint64_t v280 = v87;
      *(_DWORD *)(v87 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(*(void *)(**((void **)v268 + 76)
                                                     + 8 * (v109 / *(_DWORD *)(*((void *)v268 + 76) + 24)))
                                         + 4 * (v109 % *(_DWORD *)(*((void *)v268 + 76) + 24)));
      float v61 = v263;
      float v60 = v265;
      float v59 = v261;
    }
    uint64_t v110 = 0;
    long long v298 = v283;
    char v111 = 1;
    do
    {
      char v112 = v111;
      uint64_t v113 = *((void *)&v298 + v110);
      if (v113)
      {
        unint64_t v114 = *(void *)(v113 + 32);
        if (v114)
        {
          int v115 = *(_DWORD *)(v114 + 60);
        }
        else
        {
          uint64_t v116 = *((unsigned int *)this + 52);
          uint64_t v117 = *((void *)this + 24);
          unsigned int v118 = *(_DWORD *)(v117 + 16 * v116 + 8);
          if (v118 == 128)
          {
            unsigned int v119 = v116 + 1;
            if (v116 + 1 == *((_DWORD *)this + 50))
            {
              uint64_t v120 = physx::shdfnd::Foundation::mInstance;
              if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
                uint64_t v121 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody, "
              }
                       "128>::Block>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::Block]";
              else {
                uint64_t v121 = "<allocation names disabled>";
              }
              *(void *)&long long v290 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v120 + 24) + 16))(v120 + 24, 0x2000, v121, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 260);
              DWORD2(v290) = 0;
              uint64_t v122 = *((unsigned int *)this + 50);
              if ((*((_DWORD *)this + 51) & 0x7FFFFFFFu) <= v122)
              {
                physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo>>::growAndPushBack((uint64_t)this + 192, &v290);
              }
              else
              {
                *(_OWORD *)(*((void *)this + 24) + 16 * v122) = v290;
                ++*((_DWORD *)this + 50);
              }
              uint64_t v117 = *((void *)this + 24);
              unsigned int v119 = *((_DWORD *)this + 52) + 1;
            }
            unsigned int v118 = 0;
            *((_DWORD *)this + 52) = v119;
            uint64_t v116 = v119;
            *(_DWORD *)(v117 + 16 * v119 + 8) = 0;
          }
          else
          {
            unsigned int v119 = *((_DWORD *)this + 52);
          }
          int v115 = 0;
          uint64_t v123 = v117 + 16 * v116;
          *(_DWORD *)(v123 + 8) = v118 + 1;
          unint64_t v114 = *(void *)v123 + ((unint64_t)v118 << 6);
          *(void *)(v113 + 32) = v114;
          *(_WORD *)(v114 + 32) = v118 + ((_WORD)v119 << 7);
          *(_DWORD *)(v114 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1065353216;
          *(unsigned char *)(v114 + 35) = 0;
          *(void *)(v114 + 48) = 0;
          *(void *)(v114 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
          *(void *)(v114 + 40) = v113;
        }
        *(unsigned char *)(v114 + 34) = 0;
        *(_DWORD *)(v114 + 60) = v115 + 1;
      }
      char v111 = 0;
      uint64_t v110 = 1;
    }
    while ((v112 & 1) != 0);
    uint64_t v124 = v282;
    if ((void)v283
      && *((void *)&v283 + 1)
      && *(float *)(*(void *)(v283 + 40) + 124) != 0.0
      && *(float *)(*(void *)(*((void *)&v283 + 1) + 40) + 124) != 0.0)
    {
      float v125 = *(void **)(*(void *)(v283 + 32) + 48);
      if (v125)
      {
        while (*v125 != *(void *)(*((void *)&v283 + 1) + 32))
        {
          float v125 = (void *)v125[1];
          if (!v125) {
            goto LABEL_115;
          }
        }
      }
      else
      {
LABEL_115:
        long long v126 = (void *)physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::pushBack((uint64_t)v251);
        uint64_t v127 = (void *)physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::pushBack((uint64_t)v251);
        uint64_t v124 = v282;
        uint64_t v128 = *(void *)(*((void *)&v283 + 1) + 32);
        void *v126 = v128;
        uint64_t v129 = *(void *)(v283 + 32);
        *uint64_t v127 = v129;
        v126[1] = *(void *)(v129 + 48);
        *(void *)(v129 + 48) = v126;
        v127[1] = *(void *)(v128 + 48);
        *(void *)(v128 + 48) = v127;
      }
    }
    if (*(float *)(*(void *)(v283 + 40) + 124) == 0.0
      && (!*((void *)&v283 + 1) || *(float *)(*(void *)(*((void *)&v283 + 1) + 40) + 124) == 0.0))
    {
      ++v270;
    }
    uint64_t v130 = *((unsigned int *)this + 96);
    uint64_t v19 = *((void *)this + 46);
    unsigned int v131 = *(_DWORD *)(v19 + 16 * v130 + 8);
    if (v131 == 128)
    {
      unsigned int v132 = v130 + 1;
      if (v130 + 1 == *((_DWORD *)this + 94))
      {
        uint64_t v133 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
          float v134 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::"
        }
                 "Block>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::Block]";
        else {
          float v134 = "<allocation names disabled>";
        }
        *(void *)&long long v290 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v133 + 24) + 16))(v133 + 24, 17408, v134, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 260);
        DWORD2(v290) = 0;
        uint64_t v135 = *((unsigned int *)this + 94);
        if ((*((_DWORD *)this + 95) & 0x7FFFFFFFu) <= v135)
        {
          physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo>>::growAndPushBack((uint64_t)this + 368, &v290);
        }
        else
        {
          *(_OWORD *)(*((void *)this + 46) + 16 * v135) = v290;
          ++*((_DWORD *)this + 94);
        }
        uint64_t v19 = *((void *)this + 46);
        unsigned int v132 = *((_DWORD *)this + 96) + 1;
        uint64_t v124 = v282;
      }
      unsigned int v131 = 0;
      *((_DWORD *)this + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v132;
      uint64_t v130 = v132;
      *(_DWORD *)(v19 + 16 * v132 + 8) = 0;
    }
    float32x4_t v136 = (uint64_t *)(v19 + 16 * v130);
    *((_DWORD *)v136 + 2) = v131 + 1;
    uint64_t v137 = *v136;
    uint64_t v138 = v137 + 136 * v131;
    *(_OWORD *)uint64_t v138 = v283;
    *(void *)(v138 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v57;
    *(void *)(v138 + 24) = v280;
    if ((*(unsigned char *)(v124 + 28) & 8) != 0) {
      LOBYTE(v139) = 1;
    }
    else {
      int v139 = (*(unsigned __int8 *)(v278 + 28) >> 3) & 1;
    }
    uint64_t v140 = v137 + 136 * v131;
    *(unsigned char *)(v140 + 132) = v139;
    *(_DWORD *)(v140 + 44) = 2139095039;
    int v141 = *(_DWORD *)(*(void *)v272 + 40);
    *(_DWORD *)(v140 + 84) = v141;
    int v142 = *(_DWORD *)(*(void *)v273 + 40);
    *(_DWORD *)(v140 + 88) = v142;
    *(void *)(v140 + 72) = v274;
    *(_DWORD *)(v140 + 80) = -1;
    *(unsigned char *)(v140 + 92) = 0;
    *(_DWORD *)(v140 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -1;
    *(unsigned char *)(v140 + 93) = *v275 & 1;
    *(_DWORD *)(v140 + 120) = 0;
    uint64_t v143 = *(void *)(v283 + 40);
    if ((*(unsigned char *)(v143 + 28) & 0x40) != 0)
    {
      float v144 = *(float *)(v143 + 128);
      if (!*((void *)&v283 + 1)) {
        goto LABEL_138;
      }
    }
    else
    {
      float v144 = 3.4028e38;
      if (!*((void *)&v283 + 1)) {
        goto LABEL_138;
      }
    }
    uint64_t v145 = *(void *)(*((void *)&v283 + 1) + 40);
    if ((*(unsigned char *)(v145 + 28) & 0x40) == 0)
    {
LABEL_138:
      float v146 = 3.4028e38;
      goto LABEL_140;
    }
    float v146 = *(float *)(v145 + 128);
LABEL_140:
    if (v144 >= v146) {
      float v144 = v146;
    }
    *(float *)(v137 + 136 * v131 + 124) = v144;
    uint64_t v31 = *((void *)this + 55);
    if (v141 >= v142) {
      int v147 = v142;
    }
    else {
      int v147 = v141;
    }
    if (v141 <= v142) {
      int v141 = v142;
    }
    uint64_t v148 = v31 + 28 * v147 + 4 * v141;
    ++*(_DWORD *)(v148 + 2132);
    if (!v271)
    {
      float v149 = v59 + v83;
      if ((float)(v59 + v83) >= *((float *)this + 118)) {
        float v149 = *((float *)this + 118);
      }
      BOOL v30 = (float)((float)((float)((float)(v60 - v85) * (float)(v60 - v85))
                          + (float)((float)(v269 - v84) * (float)(v269 - v84)))
                  + (float)((float)(v61 - v86) * (float)(v61 - v86))) >= (float)(v149 * v149);
LABEL_34:
      if (!v27) {
        break;
      }
      goto LABEL_35;
    }
    if (!v27) {
      goto LABEL_154;
    }
    BOOL v30 = 1;
LABEL_35:
    int v37 = (v27 - 1) & v27;
    if (v37)
    {
      uint64_t v38 = v24;
    }
    else
    {
      unsigned int v41 = *(_DWORD *)(v20 + 1680) & 0x7FFFFFFF;
      if ((int)v24 + 1 > v41) {
        uint64_t v38 = (v24 + 1);
      }
      else {
        uint64_t v38 = v41;
      }
      LODWORD(v42) = v24;
      while (v38 - 1 != v42)
      {
        uint64_t v42 = (v42 + 1);
        int v37 = *(_DWORD *)(*(void *)(v20 + 1672) + 4 * v42);
        if (v37)
        {
          uint64_t v38 = v42;
          goto LABEL_49;
        }
      }
      int v37 = 0;
    }
LABEL_49:
    unsigned int v26 = __clz(__rbit32(v27)) | (32 * v24);
    uint64_t v24 = v38;
    unsigned int v27 = v37;
  }
  while (v26 != -1);
  if (!v30) {
    goto LABEL_156;
  }
LABEL_154:
  unsigned int v150 = *(_DWORD *)(v19 + 16 * *((unsigned int *)this + 96) + 8) + (*((_DWORD *)this + 96) << 7);
  if ((*((_DWORD *)this + 101) & 0x7FFFFFFFu) >= v150)
  {
    float v152 = (uint64_t *)((char *)this + 192);
    uint64_t v151 = (uint64_t ***)((char *)this + 392);
    int v153 = v270;
    if (v150) {
      goto LABEL_160;
    }
  }
  else
  {
    uint64_t v151 = (uint64_t ***)((char *)this + 392);
    physx::shdfnd::Array<physx::PxsCCDPair *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::recreate((uint64_t)this + 392, v150);
    float v152 = (uint64_t *)((char *)this + 192);
    int v153 = v270;
LABEL_160:
    unsigned int v156 = 0;
    do
    {
      uint64_t v157 = *(void *)(*((void *)this + 46) + 16 * (v156 >> 7)) + 136 * (v156 & 0x7F);
      *(void *)&long long v290 = v157;
      uint64_t v158 = *((unsigned int *)this + 100);
      if ((*((_DWORD *)this + 101) & 0x7FFFFFFFu) <= v158)
      {
        physx::shdfnd::Array<physx::PxsCCDPair *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::growAndPushBack((uint64_t)v151, &v290);
      }
      else
      {
        *(void *)(*((void *)this + 49) + 8 * v1re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58) = v157;
        *((_DWORD *)this + 100) = v158 + 1;
      }
      ++v156;
    }
    while (v150 != v156);
  }
  uint64_t v159 = *((void *)this + 56);
  unsigned int v160 = v150 | (v150 >> 1) | ((v150 | (v150 >> 1)) >> 2);
  unsigned int v161 = v160 | (v160 >> 4) | ((v160 | (v160 >> 4)) >> 8);
  unsigned int v162 = (v161 | HIWORD(v161)) + 1;
  if ((*(_DWORD *)(v159 + 20) & 0x7FFFFFFFu) < v162) {
    physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(v159, v162);
  }
  uint64_t v163 = *((unsigned int *)this + 52);
  uint64_t v164 = *((void *)this + 24);
  int v165 = *(_DWORD *)(v164 + 16 * v163 + 8);
  uint64_t v166 = (v165 + (v163 << 7));
  if (v165 + (v163 << 7))
  {
    unsigned int v167 = 0;
    do
    {
      unint64_t v168 = *(void *)(v164 + 16 * (v167 >> 7)) + ((unint64_t)(v167 & 0x7F) << 6);
      uint64_t v169 = *(void *)(*(void *)(v168 + 40) + 40);
      *(void *)unint64_t v168 = *(void *)(v169 + 64);
      *(_DWORD *)(v168 + 8) = *(_DWORD *)(v169 + 72);
      *(void *)(v168 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v169 + 80);
      *(_DWORD *)(v168 + 24) = *(_DWORD *)(v169 + 88);
      ++v167;
    }
    while (v166 != v167);
  }
  __b = 0;
  uint64_t v288 = 0;
  LODWORD(v290) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&__b, v166, &v290);
  int v285 = 0;
  uint64_t v286 = 0;
  if (v166) {
    physx::shdfnd::Array<physx::PxsCCDBody const*,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody const*>>::recreate((uint64_t)&v285, v166);
  }
  LODWORD(v28re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v166;
  uint64_t v170 = (uint64_t *)((char *)this + 280);
  *((_DWORD *)this + 72) = 0;
  if ((*((_DWORD *)this + 73) & 0x7FFFFFFFu) < (int)v166 + 1) {
    physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::recreate((uint64_t)this + 280, v166 + 1);
  }
  *((_DWORD *)this + 72) = v166 + 1;
  if (v166)
  {
    memset_pattern16(__b, &unk_23441F6F0, 4 * (v166 - 1) + 4);
    uint64_t v171 = 0;
    unsigned int v172 = 0;
    unsigned int v173 = v285;
    do
    {
      if (*((_DWORD *)__b + v171) == 0xFFFF)
      {
        unint64_t i = *(void *)(*v152 + 16 * (v171 >> 7)) + ((unint64_t)(v171 & 0x7F) << 6);
        if (*(float *)(*(void *)(*(void *)(i + 40) + 40) + 124) != 0.0)
        {
          if (*(_DWORD *)(i + 60))
          {
            __int16 v175 = 0;
            *((_DWORD *)__b + v171) = v172;
            unint64_t *v173 = i;
            unsigned int v176 = 1;
            do
            {
              if (--v176 <= 1) {
                int v177 = 1;
              }
              else {
                int v177 = v176;
              }
              int v178 = v177 - 1;
              float v179 = *(unint64_t **)(i + 48);
              for (unint64_t i = v173[v178]; v179; v179 = (unint64_t *)v179[1])
              {
                unint64_t v180 = *v179;
                uint64_t v181 = *(unsigned __int16 *)(*v179 + 32);
                if (*((_DWORD *)__b + v181) == 0xFFFF)
                {
                  *((_DWORD *)__b + v181) = v172;
                  v173[v176++] = v180;
                  unint64_t i = *v179;
                  ++v175;
                }
              }
            }
            while (v176);
            *(_WORD *)(*v170 + 2 * v172++) = v175 + 1;
          }
        }
      }
      ++v171;
    }
    while (v171 != v166);
  }
  else
  {
    unsigned int v172 = 0;
  }
  int v182 = v172 + v153;
  if (v172 < v172 + v153) {
    memset_pattern16((void *)(*v170 + 2 * v172), &unk_23441F700, 2 * (v153 - 1) + 2);
  }
  *((_DWORD *)this + 104) = 0;
  LODWORD(v290) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 408, v172 + v153, &v290);
  uint64_t v183 = *((unsigned int *)this + 100);
  if (v183)
  {
    int8x16_t v184 = *v151;
    float32x4_t v185 = __b;
    uint64_t v186 = *((void *)this + 51);
    do
    {
      int v187 = *v184;
      uint64_t v188 = **v184;
      if (v188 && *(float *)(*(void *)(v188 + 40) + 124) != 0.0) {
        unsigned int v189 = v185[*(unsigned __int16 *)(*(void *)(v188 + 32) + 32)];
      }
      else {
        unsigned int v189 = -1;
      }
      uint64_t v190 = v187[1];
      if (v190 && *(float *)(*(void *)(v190 + 40) + 124) != 0.0) {
        unsigned int v191 = v185[*(unsigned __int16 *)(*(void *)(v190 + 32) + 32)];
      }
      else {
        unsigned int v191 = -1;
      }
      if (v189 >= v191) {
        unsigned int v189 = v191;
      }
      BOOL v192 = v189 == -1;
      if (v189 == -1) {
        unsigned int v189 = v172;
      }
      if (v192) {
        ++v172;
      }
      *((_DWORD *)v187 + 20) = v189;
      ++*(_DWORD *)(v186 + 4 * v189);
      ++v184;
      --v183;
    }
    while (v183);
  }
  if (v182 != -1)
  {
    int v193 = 0;
    int v194 = 0;
    uint64_t v195 = *v170;
    do
    {
      int v196 = *(unsigned __int16 *)(v195 + 2 * (unsigned __int16)v193);
      *(_WORD *)(v195 + 2 * (unsigned __int16)v193) = v194;
      v194 += v196;
      ++v193;
    }
    while (v182 + 1 > (unsigned __int16)v193);
  }
  *((_DWORD *)this + 68) = 0;
  if ((*((_DWORD *)this + 69) & 0x7FFFFFFFu) < v166) {
    physx::shdfnd::Array<physx::PxsCCDBody *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody *>>::recreate((uint64_t)this + 264, v166);
  }
  *((_DWORD *)this + 68) = v166;
  uint64_t v197 = *((unsigned int *)this + 52);
  uint64_t v198 = *((void *)this + 24);
  if (*(_DWORD *)(v198 + 16 * v197 + 8) + (v197 << 7))
  {
    unsigned int v199 = 0;
    do
    {
      unint64_t v200 = *(void *)(v198 + 16 * (v199 >> 7)) + ((unint64_t)(v199 & 0x7F) << 6);
      uint64_t v201 = *((unsigned int *)__b + *(unsigned __int16 *)(v200 + 32));
      if (v201 != 0xFFFF)
      {
        uint64_t v202 = *(unsigned __int16 *)(*v170 + 2 * v201);
        *(_WORD *)(*v170 + 2 * v201) = v202 + 1;
        *(void *)(*((void *)this + 33) + 8 * v202) = v200;
        uint64_t v198 = *v152;
      }
      ++v199;
    }
    while (v199 < *(_DWORD *)(v198 + 16 * v197 + 8) + (v197 << 7));
  }
  *((_DWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  *((void *)this + 17) = v252;
  if (v252)
  {
    (*(void (**)(physx::PxBaseTask *))(*(void *)v252 + 32))(v252);
    *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(*((void *)this + 17) + 16);
  }
  *((_DWORD *)this + 22) = 1;
  *((void *)this + 10) = (char *)this + 112;
  (*(void (**)(char *))(*((void *)this + 14) + 32))((char *)this + 112);
  uint64_t v203 = *((void *)this + 7);
  *((void *)this + 9) = *(void *)(*((void *)this + 10) + 16);
  *((_DWORD *)this + 8) = 1;
  *((void *)this + 3) = (char *)this + 56;
  (*(void (**)(char *))(v203 + 32))((char *)this + 56);
  *((void *)this + 2) = *(void *)(*((void *)this + 3) + 16);
  uint64_t v204 = *((void *)this + 49);
  int v205 = *((_DWORD *)this + 100);
  *(void *)((char *)&v298 + 4) = 0x2000000000;
  v299 = &v290;
  LOBYTE(v300) = 0;
  int v206 = v205 - 1;
  if (v205 - 1 >= 1)
  {
    int v207 = 0;
    long long v296 = 0u;
    long long v297 = 0u;
    long long v294 = 0u;
    long long v295 = 0u;
    long long v292 = 0u;
    long long v293 = 0u;
    long long v208 = &v290;
    long long v290 = 0u;
    long long v291 = 0u;
    while (1)
    {
      if (v206 <= v207) {
        goto LABEL_258;
      }
      if ((v206 - v207) <= 4)
      {
        uint64_t v229 = v207;
        int v230 = v207 + 1;
        uint64_t v231 = v204 + 8 + 8 * v207;
        do
        {
          uint64_t v232 = 0;
          uint64_t v233 = v229++;
          int v234 = v233;
          do
          {
            if (*(_DWORD *)(*(void *)(v231 + 8 * v232) + 80) < *(_DWORD *)(*(void *)(v204 + 8 * v234) + 80)) {
              int v234 = v230 + v232;
            }
            ++v232;
          }
          while (v233 + v232 < v206);
          if (v234 != v233)
          {
            uint64_t v235 = *(void *)(v204 + 8 * v234);
            *(void *)(v204 + 8 * v234) = *(void *)(v204 + 8 * v233);
            *(void *)(v204 + 8 * v233) = v235;
          }
          ++v230;
          v231 += 8;
        }
        while (v229 != v206);
LABEL_258:
        int v236 = DWORD1(v298);
        if (!DWORD1(v298))
        {
          if (LOBYTE(v300)) {
            BOOL v237 = v208 == 0;
          }
          else {
            BOOL v237 = 1;
          }
          if (!v237) {
            (*(void (**)(uint64_t, long long *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v208);
          }
          break;
        }
        --DWORD1(v298);
        int v206 = *((_DWORD *)v208 + (v236 - 1));
        DWORD1(v298) = v236 - 2;
        int v207 = *((_DWORD *)v208 + (v236 - 2));
      }
      else
      {
        int v209 = v207 + v206;
        if (v207 + v206 < 0 != __OFADD__(v207, v206)) {
          ++v209;
        }
        uint64_t v210 = (uint64_t)v209 >> 1;
        uint64_t v211 = *(void *)(v204 + 8 * (v209 >> 1));
        uint64_t v212 = *(void *)(v204 + 8 * v207);
        unsigned int v213 = *(_DWORD *)(v212 + 80);
        if (*(_DWORD *)(v211 + 80) < v213)
        {
          *(void *)(v204 + 8 * v207) = v211;
          *(void *)(v204 + 8 * v210) = v212;
          uint64_t v211 = v212;
          uint64_t v212 = *(void *)(v204 + 8 * v207);
          unsigned int v213 = *(_DWORD *)(v212 + 80);
        }
        uint64_t v214 = *(void *)(v204 + 8 * v206);
        if (*(_DWORD *)(v214 + 80) >= v213)
        {
          unsigned int v213 = *(_DWORD *)(v214 + 80);
          uint64_t v212 = *(void *)(v204 + 8 * v206);
        }
        else
        {
          *(void *)(v204 + 8 * v207) = v214;
          *(void *)(v204 + 8 * v20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v212;
          uint64_t v211 = *(void *)(v204 + 8 * v210);
        }
        if (v213 < *(_DWORD *)(v211 + 80))
        {
          *(void *)(v204 + 8 * v210) = v212;
          *(void *)(v204 + 8 * v20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v211;
          uint64_t v211 = *(void *)(v204 + 8 * v210);
        }
        uint64_t v215 = v206 - 1;
        *(void *)(v204 + 8 * v210) = *(void *)(v204 + 8 * v215);
        *(void *)(v204 + 8 * v215) = v211;
        int v216 = v207;
        int v217 = v206 - 1;
        while (1)
        {
          unsigned int v218 = *(_DWORD *)(v211 + 80);
          uint64_t v219 = (void *)(v204 + 8 * v216);
          do
          {
            uint64_t v221 = v219[1];
            ++v219;
            uint64_t v220 = v221;
            ++v216;
          }
          while (*(_DWORD *)(v221 + 80) < v218);
          float v222 = (void *)(v204 + 8 * v217);
          do
          {
            uint64_t v224 = *--v222;
            uint64_t v223 = v224;
            --v217;
          }
          while (v218 < *(_DWORD *)(v224 + 80));
          if (v216 >= v217) {
            break;
          }
          *uint64_t v219 = v223;
          *float v222 = v220;
          uint64_t v211 = *(void *)(v204 + 8 * v215);
        }
        *uint64_t v219 = v211;
        *(void *)(v204 + 8 * v215) = v220;
        unsigned int v225 = DWORD1(v298);
        unsigned int v226 = DWORD2(v298) - 1;
        if (v216 - v207 >= v206 - v216)
        {
          if (DWORD1(v298) >= v226)
          {
            physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow((uint64_t)&v298);
            unsigned int v225 = DWORD1(v298);
            long long v208 = v299;
          }
          DWORD1(v298) = v225 + 1;
          *((_DWORD *)v208 + v225) = v216 + 1;
          uint64_t v228 = DWORD1(v298);
          ++DWORD1(v298);
          *((_DWORD *)v208 + v228) = v206;
          int v206 = v216 - 1;
        }
        else
        {
          if (DWORD1(v298) >= v226)
          {
            physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow((uint64_t)&v298);
            unsigned int v225 = DWORD1(v298);
            long long v208 = v299;
          }
          DWORD1(v298) = v225 + 1;
          *((_DWORD *)v208 + v225) = v207;
          uint64_t v227 = DWORD1(v298);
          ++DWORD1(v298);
          *((_DWORD *)v208 + v227) = v216 - 1;
          int v207 = v216 + 1;
        }
      }
    }
  }
  unsigned int v238 = *((_DWORD *)this + 100);
  uint64_t v239 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 55) + 1912) + 8))(*(void *)(*((void *)this + 55) + 1912));
  unsigned int v240 = (*(uint64_t (**)(uint64_t))(*(void *)v239 + 8))(v239);
  if (v240 <= 1) {
    unsigned int v241 = 1;
  }
  else {
    unsigned int v241 = v240;
  }
  unsigned int v242 = v238 / v241;
  if (v242 <= 1) {
    unsigned int v242 = 1;
  }
  *((_DWORD *)this + 108) = v242;
  if (v238)
  {
    for (unsigned int j = 0; j < v238; j += *((_DWORD *)this + 108))
    {
      uint64_t v244 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((void *)this + 55) + 1920), 56, 0x10u);
      uint64_t v245 = v244;
      unsigned int v246 = *((_DWORD *)this + 108) + j;
      if (v238 < v246) {
        unsigned int v246 = v238;
      }
      uint64_t v247 = *(void *)(*((void *)this + 55) + 2616);
      uint64_t v248 = *((void *)this + 49) + 8 * j;
      int v249 = *((_DWORD *)this + 118);
      *(void *)(v244 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(v244 + 24) = 0;
      *(_DWORD *)(v244 + 32) = 0;
      *(void *)uint64_t v244 = &unk_26E722E08;
      *(void *)(v244 + 8) = v247;
      *(void *)(v244 + 40) = v248;
      *(_DWORD *)(v244 + 48) = v246 - j;
      *(_DWORD *)(v244 + 52) = v249;
      uint64_t v250 = *(void *)(*((void *)this + 55) + 1912);
      *(_DWORD *)(v244 + 32) = 1;
      *(void *)(v244 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v250;
      *(void *)(v244 + 24) = this;
      (*(void (**)(physx::PxsCCDContext *))(*(void *)this + 32))(this);
      (*(void (**)(uint64_t))(*(void *)v245 + 40))(v245);
    }
  }
  (*(void (**)(void, physx::PxsCCDContext *))(**((void **)this + 2) + 144))(*((void *)this + 2), this);
  (*(void (**)(void, char *))(**((void **)this + 9) + 144))(*((void *)this + 9), (char *)this + 56);
  uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this + 16) + 144))(*((void *)this + 16), (char *)this + 112);
  if ((v286 & 0x8000000000000000) == 0 && (v286 & 0x7FFFFFFF00000000) != 0 && v285) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if ((v288 & 0x8000000000000000) == 0 && (v288 & 0x7FFFFFFF00000000) != 0 && __b) {
    return (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  return result;
}

uint64_t physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::pushBack(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = *(_DWORD *)(*(void *)a1 + 16 * v1 + 8);
  if (v3 == 128)
  {
    unsigned int v5 = v1 + 1;
    if (v1 + 1 == *(_DWORD *)(a1 + 8))
    {
      uint64_t v6 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Blo"
      }
             "ck>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Block]";
      else {
        unsigned int v7 = "<allocation names disabled>";
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 15360, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 260);
      uint64_t v9 = -15360;
      do
      {
        *(_DWORD *)(v8 + v9 + 15472) = -128;
        v9 += 120;
      }
      while (v9);
      *(void *)&long long v13 = v8;
      DWORD2(v13) = 0;
      uint64_t v10 = *(unsigned int *)(a1 + 8);
      if ((*(_DWORD *)(a1 + 12) & 0x7FFFFFFFu) <= v10)
      {
        physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo>>::growAndPushBack(a1, &v13);
      }
      else
      {
        *(_OWORD *)(*(void *)a1 + 16 * v10) = v13;
        ++*(_DWORD *)(a1 + 8);
      }
      uint64_t v2 = *(void *)a1;
      unsigned int v5 = *(_DWORD *)(a1 + 16) + 1;
    }
    unsigned int v3 = 0;
    *(_DWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v5;
    uint64_t v1 = v5;
    *(_DWORD *)(v2 + 16 * v5 + 8) = 0;
  }
  uint64_t v11 = v2 + 16 * v1;
  *(_DWORD *)(v11 + 8) = v3 + 1;
  return *(void *)v11 + 120 * v3;
}

int8x8_t physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::insert(int32x2_t *a1, uint64_t *a2, uint64_t a3, int8x8_t result)
{
  unsigned int v7 = a1[4].u32[1];
  if (!v7)
  {
    unsigned int v10 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unsigned int v10 = physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(*a2, v9) & (v7 - 1);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_10:
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v7) {
        unsigned int v16 = 2 * v7;
      }
      else {
        unsigned int v16 = 16;
      }
      if (v7 < v16)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*> const,physx::PxsCCDShape *>,physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v16, result);
        unsigned int v7 = a1[4].u32[1];
      }
      uint64_t v18 = *a2;
      uint64_t v17 = a2[1];
      unsigned int v10 = physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(v18, v17) & (v7 - 1);
    }
    else
    {
      uint64_t v18 = *a2;
      uint64_t v17 = a2[1];
    }
    uint64_t v19 = a1[5].u32[1];
    a1[5].i32[1] = v19 + 1;
    int32x2_t v20 = a1[3];
    int32x2_t v21 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v19) = *(_DWORD *)(*(void *)&v20 + 4 * v10);
    *(_DWORD *)(*(void *)&v20 + 4 * v10) = v19;
    uint64_t result = (int8x8_t)vadd_s32(a1[6], (int32x2_t)0x100000001);
    a1[6] = (int32x2_t)result;
    float v22 = (uint64_t *)(*(void *)&v21 + 24 * v19);
    *float v22 = v18;
    v22[1] = v17;
    v22[2] = a3;
    return result;
  }
  while (1)
  {
    uint64_t v12 = (uint64_t *)(*(void *)&a1[1] + 24 * v11);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    if (v14 == v8 && v13 == v9) {
      return result;
    }
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_10;
    }
  }
}

uint64_t physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::pushBack(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = *(_DWORD *)(*(void *)a1 + 16 * v1 + 8);
  if (v3 == 128)
  {
    unsigned int v5 = v1 + 1;
    if (v1 + 1 == *(_DWORD *)(a1 + 8))
    {
      uint64_t v6 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::B"
      }
             "lock>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::Block]";
      else {
        unsigned int v7 = "<allocation names disabled>";
      }
      *(void *)&long long v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 2048, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 260);
      DWORD2(v11) = 0;
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if ((*(_DWORD *)(a1 + 12) & 0x7FFFFFFFu) <= v8)
      {
        physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo>>::growAndPushBack(a1, &v11);
      }
      else
      {
        *(_OWORD *)(*(void *)a1 + 16 * v8) = v11;
        ++*(_DWORD *)(a1 + 8);
      }
      uint64_t v2 = *(void *)a1;
      unsigned int v5 = *(_DWORD *)(a1 + 16) + 1;
    }
    unsigned int v3 = 0;
    *(_DWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v5;
    uint64_t v1 = v5;
    *(_DWORD *)(v2 + 16 * v5 + 8) = 0;
  }
  uint64_t v9 = v2 + 16 * v1;
  *(_DWORD *)(v9 + 8) = v3 + 1;
  return *(void *)v9 + 16 * v3;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 4 * a2;
    uint64_t v8 = (_DWORD *)(*(void *)v5 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::Cm::FlushPool::allocate(pthread_mutex_t **this, int a2, unsigned int a3)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*this);
  }
  uint64_t NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)this, a2, a3);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*this);
  }
  return NotThreadSafe;
}

uint64_t physx::PxLightCpuTask::removeReference(physx::PxLightCpuTask *this)
{
  return (*(uint64_t (**)(void, physx::PxLightCpuTask *))(**((void **)this + 2) + 144))(*((void *)this + 2), this);
}

float *anonymous namespace'::getShapeAbsPose(float *result, float *a2, float *a3, int a4)
{
  if (a4)
  {
    float v4 = a3[12] * -2.0;
    float v5 = a3[13] * -2.0;
    float v6 = a3[14] * -2.0;
    float v8 = a3[10];
    float v7 = a3[11];
    float v9 = (float)(v7 * v7) + -0.5;
    float v10 = a3[8];
    float v11 = a3[9];
    float v12 = (float)((float)(v5 * v11) + (float)(v10 * v4)) + (float)(v8 * v6);
    float v13 = (float)((float)(v4 * v9) - (float)((float)((float)(v11 * v6) - (float)(v8 * v5)) * v7)) + (float)(v10 * v12);
    float v14 = (float)((float)(v5 * v9) - (float)((float)((float)(v8 * v4) - (float)(v10 * v6)) * v7)) + (float)(v11 * v12);
    float v15 = (float)((float)(v6 * v9) - (float)((float)((float)(v10 * v5) - (float)(v11 * v4)) * v7)) + (float)(v8 * v12);
    float v16 = v13 + v13;
    float v17 = v15 + v15;
    float v19 = a3[2];
    float v18 = a3[3];
    float v20 = (float)(v18 * v18) + -0.5;
    float v21 = a3[1];
    float v22 = (float)((float)(v21 * (float)(v14 + v14)) + (float)(*a3 * v16)) + (float)(v19 * v17);
    float v23 = (float)((float)(v18 * (float)((float)(v21 * v17) - (float)(v19 * (float)(v14 + v14)))) + (float)(v16 * v20))
        + (float)(*a3 * v22);
    float v24 = (float)((float)(v18 * (float)((float)(v19 * v16) - (float)(*a3 * v17))) + (float)((float)(v14 + v14) * v20))
        + (float)(v21 * v22);
    float v25 = (float)((float)(v18 * (float)((float)(*a3 * (float)(v14 + v14)) - (float)(v21 * v16))) + (float)(v17 * v20))
        + (float)(v19 * v22);
    float v26 = a3[4] + v23;
    float v27 = (float)((float)((float)(v7 * *a3) - (float)(v18 * v10)) - (float)(v21 * v8)) + (float)(v11 * v19);
    float v28 = (float)((float)((float)(v7 * v21) - (float)(v18 * v11)) - (float)(v19 * v10)) + (float)(v8 * *a3);
    float v29 = (float)((float)((float)(v7 * v19) - (float)(v18 * v8)) - (float)(*a3 * v11)) + (float)(v10 * v21);
    float v30 = (float)((float)((float)(v10 * *a3) + (float)(v18 * v7)) + (float)(v21 * v11)) + (float)(v19 * v8);
    float v31 = a2[4] + a2[4];
    float v32 = a2[5] + a2[5];
    float v33 = a2[6] + a2[6];
    float v34 = (float)(v30 * v30) + -0.5;
    float v35 = (float)((float)(v28 * v32) + (float)(v27 * v31)) + (float)(v29 * v33);
    float v36 = (float)((float)(v30 * (float)((float)(v28 * v33) - (float)(v29 * v32))) + (float)(v31 * v34))
        + (float)(v27 * v35);
    float v37 = (float)((float)(v30 * (float)((float)(v29 * v31) - (float)(v27 * v33))) + (float)(v32 * v34))
        + (float)(v28 * v35);
    float v38 = (float)((float)(v30 * (float)((float)(v27 * v32) - (float)(v28 * v31))) + (float)(v33 * v34))
        + (float)(v29 * v35);
    float v39 = v26 + v36;
    float v40 = (float)(a3[5] + v24) + v37;
    float v41 = (float)(a3[6] + v25) + v38;
    float v43 = a2[2];
    float v42 = a2[3];
    float v44 = a2[1];
    float v45 = (float)((float)((float)(v27 * v42) + (float)(v30 * *a2)) + (float)(v28 * v43)) - (float)(v44 * v29);
    float v46 = (float)((float)((float)(v28 * v42) + (float)(v30 * v44)) + (float)(v29 * *a2)) - (float)(v43 * v27);
    float v47 = (float)((float)((float)(v29 * v42) + (float)(v30 * v43)) + (float)(v27 * v44)) - (float)(*a2 * v28);
    float v48 = (float)((float)((float)(v30 * v42) - (float)(v27 * *a2)) - (float)(v28 * v44)) - (float)(v29 * v43);
  }
  else
  {
    float v49 = a2[4] + a2[4];
    float v50 = a2[5] + a2[5];
    float v51 = a2[6] + a2[6];
    float v53 = a3[2];
    float v52 = a3[3];
    float v54 = (float)(v52 * v52) + -0.5;
    float v55 = a3[1];
    float v56 = (float)((float)(v50 * v55) + (float)(*a3 * v49)) + (float)(v53 * v51);
    float v57 = (float)((float)(v52 * (float)((float)(v55 * v51) - (float)(v53 * v50))) + (float)(v49 * v54))
        + (float)(*a3 * v56);
    float v58 = (float)((float)(v52 * (float)((float)(v53 * v49) - (float)(*a3 * v51))) + (float)(v50 * v54))
        + (float)(v55 * v56);
    float v59 = (float)((float)(v52 * (float)((float)(*a3 * v50) - (float)(v55 * v49))) + (float)(v51 * v54))
        + (float)(v53 * v56);
    float v39 = a3[4] + v57;
    float v40 = a3[5] + v58;
    float v41 = a3[6] + v59;
    float v61 = a2[2];
    float v60 = a2[3];
    float v62 = a2[1];
    float v45 = (float)((float)((float)(*a3 * v60) + (float)(v52 * *a2)) + (float)(v55 * v61)) - (float)(v62 * v53);
    float v46 = (float)((float)((float)(v55 * v60) + (float)(v52 * v62)) + (float)(v53 * *a2)) - (float)(v61 * *a3);
    float v47 = (float)((float)((float)(v53 * v60) + (float)(v52 * v61)) + (float)(*a3 * v62)) - (float)(*a2 * v55);
    float v48 = (float)((float)((float)(v52 * v60) - (float)(*a3 * *a2)) - (float)(v55 * v62)) - (float)(v53 * v61);
  }
  *uint64_t result = v45;
  result[1] = v46;
  result[2] = v47;
  result[3] = v48;
  result[4] = v39;
  result[5] = v40;
  result[6] = v41;
  return result;
}

uint64_t physx::PxsContext::PxsContext(uint64_t a1, int32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  physx::PxcScratchAllocator::PxcScratchAllocator((physx::PxcScratchAllocator *)a1);
  uint64_t v11 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v12 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    float v12 = "<allocation names disabled>";
  }
  float v13 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v11 + 24) + 16))(v11 + 24, 72, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 40) = v13;
  physx::shdfnd::MutexImpl::MutexImpl(v13);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 244) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 272) = a1;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 29re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = &unk_26E722EE8;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 33re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  uint64_t v14 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>::getName() [T = physx::shdfnd::SListImpl]";
  }
  else {
    float v15 = "<allocation names disabled>";
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v14 + 24) + 16))(v14 + 24, 72, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSList.h", 103);
  *(void *)(a1 + 440) = v16;
  *(void *)uint64_t v16 = 0;
  pthread_mutex_init((pthread_mutex_t *)(v16 + 8), 0);
  *(void *)(a1 + 448) = a1;
  *(void *)(a1 + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 256;
  *(void *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 49re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a1;
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(a1 + 464) = 8;
  *(void *)(a1 + 105re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0x4000000000;
  *(unsigned char *)(a1 + 1040) = 1;
  *(void *)(a1 + 1048) = a1 + 528;
  *(void *)(a1 + 1064) = 256;
  *(_DWORD *)(a1 + 1072) = 73728;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1624) = 0x4000000000;
  *(unsigned char *)(a1 + 1608) = 1;
  *(void *)(a1 + 161re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a1 + 1096;
  *(void *)(a1 + 1632) = 256;
  *(_DWORD *)(a1 + 1640) = 36864;
  *(void *)(a1 + 1672) = 0;
  *(_DWORD *)(a1 + 1680) = 0;
  *(void *)(a1 + 1688) = 0;
  *(_DWORD *)(a1 + 169re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 1704) = 0;
  *(_DWORD *)(a1 + 17re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(void *)(a1 + 1720) = 0;
  *(_DWORD *)(a1 + 1728) = 0;
  *(_DWORD *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  uint64_t v17 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    float v18 = "<allocation names disabled>";
  }
  float v19 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v17 + 24) + 16))(v17 + 24, 72, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 1760) = v19;
  physx::shdfnd::MutexImpl::MutexImpl(v19);
  *(void *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(void *)(a1 + 19re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a3;
  *(void *)(a1 + 1920) = a4;
  *(void *)(a1 + 1928) = a5;
  bzero((void *)(a1 + 1936), 0x288uLL);
  __int32 v20 = a2[19].i32[0];
  *(unsigned char *)(a1 + 2584) = (v20 & 0x40) != 0;
  *(unsigned char *)(a1 + 2585) = 0;
  *(unsigned char *)(a1 + 258re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = (v20 & 0x800) != 0;
  *(void *)(a1 + 261re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a6;
  bzero(*(void **)(a1 + 1704), (4 * *(_DWORD *)(a1 + 1712)));
  bzero(*(void **)(a1 + 1720), (4 * *(_DWORD *)(a1 + 1728)));
  *(_DWORD *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1888) = xmmword_23441F6D0;
  *(_OWORD *)(a1 + 173re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(int32x2_t *)(a1 + 1904) = vdup_n_s32(0x7E7FFFFFu);
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 185re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  int32x2_t v21 = a2[26];
  *(int32x2_t *)(a1 + 23re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = vrev64_s32(v21);
  unsigned int v22 = v21.i32[0];
  if (v21.i32[0] <= 0x40u) {
    unsigned int v23 = 64;
  }
  else {
    unsigned int v23 = v21.i32[0];
  }
  if ((*(_DWORD *)(a1 + 60) & 0x7FFFFFFFu) < v23) {
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 48, v23);
  }
  if ((*(_DWORD *)(a1 + 188) & 0x7FFFFFF0) == 0) {
    physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::recreate(a1 + 176, 0x10u);
  }
  if ((*(_DWORD *)(a1 + 108) & 0x7FFFFFFFu) < v23) {
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 96, v23);
  }
  if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFFu) < v23) {
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 112, v23);
  }
  if ((*(_DWORD *)(a1 + 140) & 0x7FFFFFFFu) < v23) {
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 128, v23);
  }
  if ((*(_DWORD *)(a1 + 156) & 0x7FFFFFFFu) < v23) {
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 144, v23);
  }
  if ((*(_DWORD *)(a1 + 204) & 0x7FFFFFFFu) < v23) {
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 192, v23);
  }
  physx::PxcNpMemBlockPool::setBlockCount(a1 + 40, v22);
  *(void *)(a1 + 208) = 0;
  return a1;
}

void physx::PxsContext::~PxsContext(physx::PxsContext *this)
{
  uint64_t v2 = (void *)*((void *)this + 324);
  if (v2)
  {
    int v3 = *((_DWORD *)v2 + 5);
    if (v3 < 0
      || ((v3 & 0x7FFFFFFF) != 0 ? (BOOL v4 = v2[1] == 0) : (BOOL v4 = 1),
          v4 || ((*(void (**)(void, void))(*(void *)*v2 + 24))(*v2, v2[1]), *((void *)this + 324))))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 324) = 0;
  unint64_t v5 = *((unsigned int *)this + 115);
  if (v5)
  {
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v7 = *((void *)this + 61);
      if (*(void *)(v7 + 8 * i))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        uint64_t v7 = *((void *)this + 61);
        unint64_t v5 = *((unsigned int *)this + 115);
      }
      *(void *)(v7 + 8 * i) = 0;
    }
  }
  *((_DWORD *)this + 115) = 0;
  if (*((void *)this + 59)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 59) = 0;
  if (*((void *)this + 61))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 61) = 0;
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 220);
  if (*((void *)this + 215) && (*((_DWORD *)this + 432) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 215) = 0;
  if (*((void *)this + 213) && (*((_DWORD *)this + 428) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 213) = 0;
  if (*((void *)this + 211) && (*((_DWORD *)this + 424) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 211) = 0;
  if (*((void *)this + 209) && (*((_DWORD *)this + 420) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 209) = 0;
  if (*((void *)this + 207) && (*((_DWORD *)this + 416) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 207) = 0;
  if (*((_DWORD *)this + 409))
  {
    float v55 = 0;
    uint64_t v56 = 0;
    uint64_t v8 = *((void *)this + 206);
    if (v8)
    {
      do
      {
        uint64_t v54 = v8;
        int v9 = v56;
        if ((HIDWORD(v56) & 0x7FFFFFFFu) <= v56)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::growAndPushBack((uint64_t)&v55, &v54);
        }
        else
        {
          *(void *)&v55[8 * v56] = v8;
          LODWORD(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9 + 1;
        }
        uint64_t v8 = **((void **)this + 206);
        *((void *)this + 20re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v8;
      }
      while (v8);
      float v10 = v55;
      int v11 = v56;
    }
    else
    {
      int v11 = 0;
      float v10 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>(v10, v11);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>(*((char **)this + 202), *((_DWORD *)this + 406));
    if ((v56 & 0x8000000000000000) == 0 && (v56 & 0x7FFFFFFF00000000) != 0 && v55) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v12 = *((unsigned int *)this + 406);
  if (v12)
  {
    float v13 = (void *)*((void *)this + 202);
    uint64_t v14 = 8 * v12;
    do
    {
      if (*v13) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  int v15 = *((_DWORD *)this + 407);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0)
  {
    uint64_t v16 = (physx::PxsContext *)*((void *)this + 202);
    if (v16 == (physx::PxsContext *)((char *)this + 1096))
    {
      *((unsigned char *)this + 1608) = 0;
    }
    else if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 267))
  {
    float v55 = 0;
    uint64_t v56 = 0;
    uint64_t v17 = *((void *)this + 135);
    if (v17)
    {
      do
      {
        uint64_t v54 = v17;
        int v18 = v56;
        if ((HIDWORD(v56) & 0x7FFFFFFFu) <= v56)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::growAndPushBack((uint64_t)&v55, &v54);
        }
        else
        {
          *(void *)&v55[8 * v56] = v17;
          LODWORD(v5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v18 + 1;
        }
        uint64_t v17 = **((void **)this + 135);
        *((void *)this + 135) = v17;
      }
      while (v17);
      float v19 = v55;
      int v20 = v56;
    }
    else
    {
      int v20 = 0;
      float v19 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>(v19, v20);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>(*((char **)this + 131), *((_DWORD *)this + 264));
    if ((v56 & 0x8000000000000000) == 0 && (v56 & 0x7FFFFFFF00000000) != 0 && v55) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v21 = *((unsigned int *)this + 264);
  if (v21)
  {
    unsigned int v22 = (void *)*((void *)this + 131);
    uint64_t v23 = 8 * v21;
    do
    {
      if (*v22) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  int v24 = *((_DWORD *)this + 265);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0)
  {
    float v25 = (physx::PxsContext *)*((void *)this + 131);
    if (v25 == (physx::PxsContext *)((char *)this + 528))
    {
      *((unsigned char *)this + 1040) = 0;
    }
    else if (v25)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  unint64_t v26 = *((unsigned int *)this + 115);
  if (v26)
  {
    for (unint64_t j = 0; j < v26; ++j)
    {
      uint64_t v28 = *((void *)this + 61);
      if (*(void *)(v28 + 8 * j))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        uint64_t v28 = *((void *)this + 61);
        unint64_t v26 = *((unsigned int *)this + 115);
      }
      *(void *)(v28 + 8 * j) = 0;
    }
  }
  *((_DWORD *)this + 115) = 0;
  if (*((void *)this + 59)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 59) = 0;
  if (*((void *)this + 61))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 61) = 0;
  }
  if (*((void *)this + 63) && (*((_DWORD *)this + 128) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 63) = 0;
  float v29 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)this + 55));
  if (v29)
  {
    float v30 = v29;
    do
    {
      if (v30[910] && (v30[911] & 0x80000000) == 0) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      v30[910] = 0;
      if (v30[908] && (v30[909] & 0x80000000) == 0) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      v30[908] = 0;
      int v31 = *((_DWORD *)v30 + 1791);
      if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0 && v30[894] != 0) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)v30 - *(v30 - 1));
      float v30 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)this + 55));
    }
    while (v30);
  }
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT((uint64_t)this + 440);
  physx::Cm::RenderBuffer::~RenderBuffer((physx::PxsContext *)((char *)this + 296));
  physx::PxcNpMemBlockPool::release((uint64_t)this + 40, (uint64_t)this + 16 * (1 - *((_DWORD *)this + 55)) + 96, 0);
  uint64_t v33 = *((unsigned int *)this + 55);
  *((_DWORD *)this + 55) = 1 - v33;
  physx::PxcNpMemBlockPool::release((uint64_t)this + 40, (uint64_t)this + 16 * v33 + 96, 0);
  int v34 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 55) = 1 - *((_DWORD *)this + 55);
  physx::PxcNpMemBlockPool::release((uint64_t)this + 40, (uint64_t)this + 16 * (1 - v34) + 128, 0);
  uint64_t v35 = *((unsigned int *)this + 54);
  *((_DWORD *)this + 54) = 1 - v35;
  physx::PxcNpMemBlockPool::release((uint64_t)this + 40, (uint64_t)this + 16 * v35 + 128, 0);
  *((_DWORD *)this + 54) = 1 - *((_DWORD *)this + 54);
  physx::PxcNpMemBlockPool::releaseConstraintMemory((uint64_t)this + 40);
  physx::PxcNpMemBlockPool::releaseContacts((physx::PxsContext *)((char *)this + 40));
  physx::PxcNpMemBlockPool::releaseContacts((physx::PxsContext *)((char *)this + 40));
  int v36 = *((_DWORD *)this + 50);
  while (v36)
  {
    uint64_t v37 = *(void *)(*((void *)this + 24) + 8 * --v36);
    *((_DWORD *)this + 50) = v36;
    if (v37)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      int v36 = *((_DWORD *)this + 50);
    }
  }
  int v38 = *((_DWORD *)this + 51);
  if ((v38 & 0x80000000) == 0 && (v38 & 0x7FFFFFFF) != 0 && *((void *)this + 24) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v40 = *((_DWORD *)this + 47);
  if ((v40 & 0x80000000) == 0 && (v40 & 0x7FFFFFFF) != 0 && *((void *)this + 22)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v41 = *((_DWORD *)this + 43);
  if ((v41 & 0x80000000) == 0 && (v41 & 0x7FFFFFFF) != 0 && *((void *)this + 20)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  for (uint64_t k = 0; k != -32; k -= 16)
  {
    int v43 = *(_DWORD *)((char *)this + k + 156);
    if ((v43 & 0x80000000) == 0 && (v43 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + k + 144) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  for (uint64_t m = 0; m != -32; m -= 16)
  {
    int v46 = *(_DWORD *)((char *)this + m + 124);
    if ((v46 & 0x80000000) == 0 && (v46 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + m + 112) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  for (uint64_t n = 0; n != -32; n -= 16)
  {
    int v49 = *(_DWORD *)((char *)this + n + 92);
    if ((v49 & 0x80000000) == 0 && (v49 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + n + 80) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v51 = *((_DWORD *)this + 15);
  if ((v51 & 0x80000000) == 0 && (v51 & 0x7FFFFFFF) != 0 && *((void *)this + 6) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 5);
  int v53 = *((_DWORD *)this + 5);
  if ((v53 & 0x80000000) == 0 && (v53 & 0x7FFFFFFF) != 0 && *((void *)this + 1)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this);
}

uint64_t physx::PxsContext::createContactManager(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    uint64_t v3 = a2;
    *(unsigned char *)(a2 + 82) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 480);
    if (!v7)
    {
      if (!physx::Cm::PoolList<physx::PxsContactManager,physx::PxsContext>::extend((unsigned int *)(a1 + 456))) {
        return 0;
      }
      int v7 = *(_DWORD *)(a1 + 480);
    }
    uint64_t v8 = *(void *)(a1 + 472);
    unsigned int v9 = v7 - 1;
    *(_DWORD *)(a1 + 480) = v9;
    uint64_t v3 = *(void *)(v8 + 8 * v9);
    *(_DWORD *)(*(void *)(a1 + 504) + (((unint64_t)*(unsigned int *)(v3 + 88) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v3 + 88);
    *(unsigned char *)(v3 + 82) = 0;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    unsigned int v10 = *(_DWORD *)(v3 + 88);
    if (v10 >= 32 * *(_DWORD *)(a1 + 1664))
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1656, ((2 * v10) & 0xFFFFFF00) + 256);
      unsigned int v10 = *(_DWORD *)(v3 + 88);
    }
    *(_DWORD *)(*(void *)(a1 + 1656) + 4 * (v10 >> 5)) |= 1 << v10;
    if (a3)
    {
      unsigned int v11 = *(_DWORD *)(v3 + 88);
      if (v11 >= 32 * *(_DWORD *)(a1 + 1680))
      {
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1672, ((2 * v11) & 0xFFFFFF00) + 256);
        unsigned int v11 = *(_DWORD *)(v3 + 88);
      }
      *(_DWORD *)(*(void *)(a1 + 1672) + 4 * (v11 >> 5)) |= 1 << v11;
    }
  }
  return v3;
}

double physx::PxsContext::createCache(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  if (a3 && *(unsigned char *)(a1 + 2584))
  {
    if (physx::gEnablePCMCaching[8 * a4 - a4 + a5])
    {
      if (a4 > 4 || a5 > 4)
      {
        *(void *)a2 = 0;
        *(unsigned char *)(a2 + 11) |= 3u;
      }
      else
      {
        if (a4 && a5)
        {
          uint64_t v7 = *(void *)(a1 + 1080);
          if (!v7)
          {
            physx::shdfnd::PoolBase<physx::Gu::LargePersistentContactManifold,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::allocateSlab(a1 + 520);
            uint64_t v7 = *(void *)(a1 + 1080);
          }
          uint64_t v8 = v7 + 96;
          *(void *)(a1 + 1080) = *(void *)v7;
          ++*(_DWORD *)(a1 + 1068);
          char v9 = 4;
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 1648);
          if (!v7)
          {
            physx::shdfnd::PoolBase<physx::Gu::SpherePersistentContactManifold,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::allocateSlab(a1 + 1088);
            uint64_t v7 = *(void *)(a1 + 1648);
          }
          uint64_t v8 = v7 + 96;
          *(void *)(a1 + 1648) = *(void *)v7;
          ++*(_DWORD *)(a1 + 1636);
          char v9 = 1;
        }
        *(unsigned char *)(v7 + 65) = v9;
        *(void *)(v7 + 80) = v8;
        double result = 1.40444743e306;
        *(_OWORD *)uint64_t v7 = xmmword_23435FBB0;
        *(_OWORD *)(v7 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = xmmword_23441F6C0;
        *(_OWORD *)(v7 + 32) = xmmword_23435FBB0;
        *(_OWORD *)(v7 + 48) = xmmword_23435FBB0;
        *(void *)a2 = v7;
        *(unsigned char *)(a2 + 11) |= 1u;
        *(unsigned char *)(v7 + 6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        *(unsigned char *)(v7 + 64) = 0;
        *(_OWORD *)uint64_t v7 = xmmword_23435FBB0;
        *(_OWORD *)(v7 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = xmmword_23441F6C0;
      }
    }
    else
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 11) = 0;
    }
  }
  return result;
}

void physx::PxsContext::destroyContactManager(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 88);
  if ((*(unsigned char *)(a2 + 16) & 2) != 0 && (*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1672, v4 + 1);
    *(_DWORD *)(*(void *)(a1 + 1672) + ((v4 >> 3) & 0x1FFFFFFC)) &= ~(1 << v4);
  }
  int v5 = v4 + 1;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1656, v4 + 1);
  int v6 = 1 << v4;
  unsigned int v7 = v4 >> 5;
  *(_DWORD *)(*(void *)(a1 + 1656) + 4 * v7) &= ~v6;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1704, v5);
  *(_DWORD *)(*(void *)(a1 + 1704) + 4 * v7) &= ~v6;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1720, v5);
  *(_DWORD *)(*(void *)(a1 + 1720) + 4 * v7) &= ~v6;
  *(_DWORD *)(*(void *)(a1 + 504) + (((unint64_t)*(unsigned int *)(a2 + 88) >> 3) & 0x1FFFFFFC)) &= ~(1 << *(_DWORD *)(a2 + 88));
  uint64_t v8 = *(void *)(a1 + 472);
  uint64_t v9 = *(unsigned int *)(a1 + 480);
  *(_DWORD *)(a1 + 480) = v9 + 1;
  *(void *)(v8 + 8 * v9) = a2;
}

uint64_t physx::PxsContext::destroyCache(uint64_t result, unsigned char *a2)
{
  if (a2[11])
  {
    if ((a2[11] & 2) == 0)
    {
      uint64_t v2 = *(void **)a2;
      if (*(unsigned char *)(*(void *)a2 + 65) == 1)
      {
        --*(_DWORD *)(result + 1636);
        uint64_t v3 = (void *)(result + 1648);
      }
      else
      {
        --*(_DWORD *)(result + 1068);
        uint64_t v3 = (void *)(result + 1080);
      }
      void *v2 = *v3;
      *uint64_t v3 = v2;
    }
    *(void *)a2 = 0;
    a2[11] = 0;
  }
  return result;
}

uint64_t physx::PxcScratchAllocator::setBlock(uint64_t this, char *a2, int a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 24) = a2;
  *(_DWORD *)(this + 32) = a3;
  int v4 = *(_DWORD *)(this + 16);
  int v5 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v4 - 1;
  int v6 = &a2[a3];
  if ((v5 & 0x7FFFFFFFu) <= v4 - 1) {
    return physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack(this + 8, &v6);
  }
  *(void *)(v3 + 8 * (v4 - 1)) = &a2[a3];
  *(_DWORD *)(this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v4;
  return this;
}

float physx::PxsContext::shiftOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (float32x2_t *)(a1 + 1892);
  uint64_t v3 = *(void *)(a1 + 2592);
  uint64_t v4 = *(_DWORD *)(v3 + 20) & 0x7FFFFFFF;
  if (v4)
  {
    float32x2_t v5 = *(float32x2_t *)a2;
    float v6 = *(float *)(a2 + 8);
    unsigned int v7 = (float *)(*(void *)(v3 + 8) + 24);
    do
    {
      *((float32x2_t *)v7 - 1) = vsub_f32(*(float32x2_t *)(v7 - 2), v5);
      *unsigned int v7 = *v7 - v6;
      v7 += 8;
      --v4;
    }
    while (v4);
  }
  *(unsigned char *)(v3 + 28) = 1;
  float result = *(float *)(a1 + 1888);
  float32x2_t v9 = *v2;
  if (result != -8.5071e37 || v9.f32[0] != -8.5071e37) {
    goto LABEL_15;
  }
  if (v9.f32[1] != -8.5071e37)
  {
    v9.i32[0] = -25165825;
LABEL_15:
    *(float *)(a1 + 1888) = result - *(float *)a2;
    float32x2_t *v2 = vsub_f32(v9, *(float32x2_t *)(a2 + 4));
    *(float32x2_t *)(a1 + 1900) = vsub_f32(*(float32x2_t *)(a1 + 1900), *(float32x2_t *)a2);
    float result = *(float *)(a1 + 1908) - *(float *)(a2 + 8);
    *(float *)(a1 + 1908) = result;
    return result;
  }
  if (*(float *)(a1 + 1900) != 8.5071e37)
  {
    float32x2_t v9 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
    goto LABEL_15;
  }
  float32x2_t v9 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
  if (*(float *)(a1 + 1904) != 8.5071e37 || *(float *)(a1 + 1908) != 8.5071e37) {
    goto LABEL_15;
  }
  return result;
}

uint64_t physx::PxsContext::mergeCMDiscreteUpdateResults(physx::PxsContext *this, physx::PxBaseTask *a2)
{
  (*(void (**)(void, physx::PxBaseTask *))(**((void **)this + 222) + 152))(*((void *)this + 222), a2);
  uint64_t v3 = *((void *)this + 55);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 8));
  uint64_t v4 = *(void **)v3;
  *(void *)uint64_t v3 = 0;
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
  if (v4)
  {
    float v6 = v4;
    do
    {
      uint64_t v7 = 0;
      uint64_t v8 = (void *)((char *)v6 + 7188);
      float32x2_t v9 = (void *)*v6;
      *((_DWORD *)this + 434) += *((_DWORD *)v6 + 1825);
      *((_DWORD *)this + 435) += *((_DWORD *)v6 + 1824);
      *((_DWORD *)this + 437) += *((_DWORD *)v6 + 1826);
      *((_DWORD *)this + 438) += *((_DWORD *)v6 + 1827);
      unsigned int v10 = (int *)v6 + 79;
      unsigned int v11 = (char *)this + 1936;
      uint64_t v12 = 7;
      do
      {
        float v13 = v11;
        uint64_t v14 = v10;
        uint64_t v15 = v12;
        do
        {
          int v16 = *(v14 - 49);
          int v17 = *v14++;
          *v13 += v16;
          v13[98] += v17;
          *((_DWORD *)this + 631) += v16;
          ++v13;
          --v15;
        }
        while (v15);
        ++v7;
        --v12;
        v10 += 8;
        v11 += 32;
      }
      while (v7 != 7);
      *((int32x2_t *)this + 31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = vadd_s32(*(int32x2_t *)((char *)this + 2528), (int32x2_t)v6[899]);
      *((_DWORD *)this + 638) += *((_DWORD *)v6 + 1797);
      *uint64_t v8 = 0;
      *(_OWORD *)(v6 + 15) = 0u;
      int v18 = v6 + 15;
      *((_DWORD *)v18 + 1769) = 0;
      *((_OWORD *)v18 + 1) = 0u;
      *((_OWORD *)v18 + 2) = 0u;
      *((_OWORD *)v18 + 3) = 0u;
      *((_OWORD *)v18 + 4) = 0u;
      *((_OWORD *)v18 + 5) = 0u;
      *((_OWORD *)v18 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *((_OWORD *)v18 + 7) = 0u;
      *((_OWORD *)v18 + 8) = 0u;
      *((_OWORD *)v18 + 9) = 0u;
      *((_OWORD *)v18 + 10) = 0u;
      *((_OWORD *)v18 + 11) = 0u;
      *((_OWORD *)v18 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
      *((_OWORD *)v18 + 13) = 0u;
      *((_OWORD *)v18 + 14) = 0u;
      *((_OWORD *)v18 + 15) = 0u;
      *((_OWORD *)v18 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *((_OWORD *)v18 + 17) = 0u;
      *((_OWORD *)v18 + re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = 0u;
      *((_OWORD *)v18 + 19) = 0u;
      *((_OWORD *)v18 + 20) = 0u;
      *((_OWORD *)v18 + 21) = 0u;
      *((_OWORD *)v18 + 22) = 0u;
      *((_OWORD *)v18 + 23) = 0u;
      v18[48] = 0;
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::combine1<physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::OR>((uint64_t)this + 1704, (int *)v18[893], v18[894] & 0x7FFFFFFF);
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::combine1<physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::OR>((uint64_t)this + 1720, (int *)v18[895], v18[896] & 0x7FFFFFFF);
      *((_DWORD *)this + 653) += *((_DWORD *)v18 + 1774);
      unsigned int v19 = *((_DWORD *)this + 652);
      if (v19 <= *((_DWORD *)v18 + 1773)) {
        unsigned int v19 = *((_DWORD *)v18 + 1773);
      }
      *((_DWORD *)this + 652) = v19;
      _OWORD v8[3] = 0;
      float v6 = v9;
    }
    while (v9);
    do
    {
      int v20 = (void *)*v4;
      uint64_t v21 = *((void *)this + 55);
      pthread_mutex_lock((pthread_mutex_t *)(v21 + 8));
      *uint64_t v4 = *(void *)v21;
      *(void *)uint64_t v21 = v4;
      uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v21 + 8));
      uint64_t v4 = v20;
    }
    while (v20);
  }
  return result;
}

uint64_t physx::PxsContext::resetThreadContexts(physx::PxsContext *this)
{
  uint64_t v2 = *((void *)this + 55);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  uint64_t v3 = *(physx::PxcNpThreadContext **)v2;
  *(void *)uint64_t v2 = 0;
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v3)
  {
    float32x2_t v5 = v3;
    do
    {
      float v6 = *(physx::PxcNpThreadContext **)v5;
      physx::PxcNpThreadContext::reset(v5, 32 * *((_DWORD *)this + 428));
      float32x2_t v5 = v6;
    }
    while (v6);
    do
    {
      uint64_t v7 = *(physx::PxcNpThreadContext **)v3;
      uint64_t v8 = *((void *)this + 55);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
      *(void *)uint64_t v3 = *(void *)v8;
      *(void *)uint64_t v8 = v3;
      uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
      uint64_t v3 = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t physx::PxsContext::fillManagerTouchEvents(uint64_t a1, char *a2, _DWORD *a3, char *a4, _DWORD *a5, char *a6, _DWORD *a7)
{
  uint64_t v7 = a4;
  uint64_t v8 = a6;
  float32x2_t v9 = a2;
  uint64_t v10 = *(_DWORD *)(a1 + 1712) & 0x7FFFFFFF;
  if (v10)
  {
    unsigned int v11 = *(unsigned int **)(a1 + 1704);
    unsigned int v12 = *v11;
    if (*v11)
    {
      LODWORD(v13) = 0;
LABEL_7:
      float32x2_t v9 = a2;
      uint64_t v8 = a6;
      uint64_t v7 = a4;
      while (1)
      {
        int v14 = v13;
        unsigned int v15 = v12;
        v12 &= v12 - 1;
        if (!v12)
        {
          if ((int)v13 + 1 > v10) {
            LODWORD(v13) = v13 + 1;
          }
          else {
            LODWORD(v13) = v10;
          }
          int v16 = v14;
          while (v13 - 1 != v16)
          {
            unsigned int v12 = v11[++v16];
            if (v12)
            {
              LODWORD(v13) = v16;
              goto LABEL_17;
            }
          }
          unsigned int v12 = 0;
        }
LABEL_17:
        unsigned int v17 = __clz(__rbit32(v15)) | (32 * v14);
        if (v17 == -1) {
          break;
        }
        uint64_t v18 = *(void *)(*(void *)(a1 + 488) + 8 * (v17 >> *(_DWORD *)(a1 + 464)));
        unsigned int v19 = (*(_DWORD *)(a1 + 456) - 1) & v17;
        uint64_t v20 = v18 + 120 * v19;
        char v21 = *(unsigned char *)(v20 + 83);
        if ((v21 & 2) != 0)
        {
          uint64_t v23 = (uint64_t *)(v18 + 120 * v19 + 24);
          if ((*(unsigned char *)(v20 + 83) & 0x10) != 0)
          {
            uint64_t v25 = *v23;
            *(void *)uint64_t v8 = v20;
            *((void *)v8 + 1) = v25;
            v8 += 16;
            *(unsigned char *)(v20 + 83) = v21 & 0xEF;
            if (!v12) {
              break;
            }
          }
          else
          {
            uint64_t v24 = *v23;
            *(void *)float32x2_t v9 = v20;
            *((void *)v9 + 1) = v24;
            v9 += 16;
            if (!v12) {
              break;
            }
          }
        }
        else
        {
          uint64_t v22 = *(void *)(v18 + 120 * v19 + 24);
          *(void *)uint64_t v7 = v20;
          *((void *)v7 + 1) = v22;
          v7 += 16;
          if (!v12) {
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
      while (v10 - 1 != v13)
      {
        unsigned int v12 = v11[++v13];
        if (v12) {
          goto LABEL_7;
        }
      }
      uint64_t v7 = a4;
      uint64_t v8 = a6;
      float32x2_t v9 = a2;
    }
  }
  *a3 = (unint64_t)(v9 - a2) >> 4;
  *a5 = (unint64_t)(v7 - a4) >> 4;
  *a7 = (unint64_t)(v8 - a6) >> 4;
  return 1;
}

uint64_t physx::PxsContext::fillManagerPatchChangedEvents(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4, _DWORD *a5)
{
  int v10 = *(_DWORD *)(a1 + 1728);
  uint64_t v11 = v10 & 0x7FFFFFFF;
  if ((v10 & 0x7FFFFFFF) != 0)
  {
    unsigned int v12 = *(unsigned int **)(a1 + 1720);
    unsigned int v13 = *v12;
    if (*v12)
    {
      LODWORD(v11) = 0;
      goto LABEL_9;
    }
    uint64_t v14 = 0;
    unsigned int v15 = v12 + 1;
    while (v11 - 1 != v14)
    {
      unsigned int v13 = v15[v14++];
      if (v13)
      {
        LODWORD(v11) = v14;
        goto LABEL_9;
      }
    }
  }
  unsigned int v13 = 0;
LABEL_9:
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 1776) + 168))(v28);
  int v16 = a4;
  unsigned int v17 = a2;
  if (v13)
  {
    unsigned int v18 = *(_DWORD *)(a1 + 1728) & 0x7FFFFFFF;
    unsigned int v17 = a2;
    int v16 = a4;
    do
    {
      int v19 = v11;
      unsigned int v20 = v13;
      v13 &= v13 - 1;
      if (!v13)
      {
        if ((int)v11 + 1 > v18) {
          LODWORD(v11) = v11 + 1;
        }
        else {
          LODWORD(v11) = v18;
        }
        int v21 = v19;
        while (v11 - 1 != v21)
        {
          unsigned int v13 = *(_DWORD *)(*(void *)(a1 + 1720) + 4 * ++v21);
          if (v13)
          {
            LODWORD(v11) = v21;
            goto LABEL_20;
          }
        }
        unsigned int v13 = 0;
      }
LABEL_20:
      unsigned int v22 = __clz(__rbit32(v20)) | (32 * v19);
      if (v22 == -1) {
        break;
      }
      uint64_t v23 = *(void *)(*(void *)(a1 + 488) + 8 * (v22 >> *(_DWORD *)(a1 + 464)))
          + 120 * ((*(_DWORD *)(a1 + 456) - 1) & v22);
      uint64_t v24 = v28[4]
          + 32 * (*((_DWORD *)v28 + (*(_DWORD *)(v23 + 108) & 7)) + (*(_DWORD *)(v23 + 108) >> 3));
      unsigned int v25 = *(unsigned __int8 *)(v24 + 25);
      unsigned int v26 = *(unsigned __int8 *)(v24 + 27);
      if (v25 <= v26)
      {
        if (v25 < v26) {
          *v16++ = v23;
        }
      }
      else
      {
        *v17++ = v23;
      }
    }
    while (v13);
  }
  *a3 = (unint64_t)((char *)v17 - (char *)a2) >> 3;
  *a5 = (unint64_t)((char *)v16 - (char *)a4) >> 3;
  return 1;
}

void physx::PxsDefaultMemoryManager::~PxsDefaultMemoryManager(physx::PxsDefaultMemoryManager *this)
{
  *(void *)this = &unk_26E722DA8;
  if (*((_DWORD *)this + 4))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void (****)(void))(*((void *)this + 1) + 8 * v2);
      (**v3)(v3);
      if (*(void *)(*((void *)this + 1) + 8 * v2)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 4));
  }
  int v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 1) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t vars8;

  physx::PxsDefaultMemoryManager::~PxsDefaultMemoryManager(this);
  JUMPOUT(0x237DBCBD0);
}

void *physx::PxsDefaultMemoryManager::createHostMemoryAllocator(physx::PxsDefaultMemoryManager *this)
{
  unint64_t v2 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsDefaultMemoryManager.cpp", 47);
  uint64_t v3 = v2;
  void *v2 = &unk_26E722FA0;
  float v6 = v2;
  uint64_t v4 = *((unsigned int *)this + 4);
  if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<physx::shdfnd::VirtualAllocatorCallback *,physx::shdfnd::ReflectionAllocator<physx::shdfnd::VirtualAllocatorCallback *>>::growAndPushBack((uint64_t)this + 8, &v6);
  }
  else
  {
    *(void *)(*((void *)this + 1) + 8 * v4) = v2;
    *((_DWORD *)this + 4) = v4 + 1;
  }
  return v3;
}

uint64_t physx::PxsDefaultMemoryManager::createDeviceMemoryAllocator(physx::PxsDefaultMemoryManager *this)
{
  return 0;
}

uint64_t physx::PxsDefaultMemoryManager::destroyMemoryAllocator(uint64_t this)
{
  if (*(_DWORD *)(this + 16))
  {
    uint64_t v1 = this;
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(uint64_t (****)(void))(*(void *)(v1 + 8) + 8 * v2);
      this = (**v3)(v3);
      if (*(void *)(*(void *)(v1 + 8) + 8 * v2)) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 16));
  }
  return this;
}

uint64_t physx::PxLightCpuTask::addReference(physx::PxLightCpuTask *this)
{
  return (*(uint64_t (**)(void, physx::PxLightCpuTask *))(**((void **)this + 2) + 152))(*((void *)this + 2), this);
}

uint64_t physx::PxLightCpuTask::getReference(physx::PxLightCpuTask *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::PxLightCpuTask::release(physx::PxLightCpuTask *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t physx::Cm::FlushPool::allocateNotThreadSafe(physx::Cm::FlushPool *this, int a2, unsigned int a3)
{
  float v6 = (char *)this + 8;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v8 = *((unsigned int *)this + 6);
  uint64_t v7 = *((unsigned int *)this + 7);
  uint64_t v9 = *(void *)(v5 + 8 * v8);
  unsigned int v10 = a3 - 1;
  int v11 = a3 - 1 + v9 + v7;
  uint64_t v12 = -(uint64_t)a3;
  unsigned int v13 = (v11 & v12) - (v9 + v7);
  unsigned int v14 = a2 + (v11 & v12) - v9;
  uint64_t v15 = *((unsigned int *)this + 8);
  if (v14 > v15)
  {
    unsigned int v16 = v8 + 1;
    *((void *)this + 3) = (v8 + 1);
    unsigned int v17 = *((_DWORD *)this + 4);
    if ((int)v8 + 1 >= v17)
    {
      if (v15)
      {
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, v15, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmFlushPool.h", 88);
        unsigned int v17 = *((_DWORD *)this + 4);
      }
      else
      {
        uint64_t v19 = 0;
      }
      uint64_t v21 = v19;
      if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v17)
      {
        physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)v6, &v21);
      }
      else
      {
        *(void *)(*((void *)this + 1) + 8 * v17) = v19;
        *((_DWORD *)this + 4) = v17 + 1;
      }
      uint64_t v5 = *((void *)this + 1);
      unsigned int v16 = *((_DWORD *)this + 6);
      unsigned int v18 = *((_DWORD *)this + 7);
    }
    else
    {
      unsigned int v18 = 0;
    }
    uint64_t v9 = *(void *)(v5 + 8 * v16);
    unsigned int v13 = ((v10 + v9) & v12) - v9;
    uint64_t v7 = v18;
    unsigned int v14 = v18 + a2 + v13;
  }
  uint64_t result = v9 + v7 + v13;
  *((_DWORD *)this + 7) = v14;
  return result;
}

void physx::PxsCCDSweepTask::~PxsCCDSweepTask(physx::PxsCCDSweepTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::Cm::Task::run(physx::Cm::Task *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

const char *physx::PxsCCDSweepTask::getName(physx::PxsCCDSweepTask *this)
{
  return "PxsContext.CCDSweep";
}

void physx::PxsCCDSweepTask::runInternal(physx::PxsCCDSweepTask *this)
{
  if (*((_DWORD *)this + 12))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(physx::PxsCCDPair **)(*((void *)this + 5) + 8 * v2);
      physx::PxsCCDPair::sweepEstimateToi(v3, *((float *)this + 13));
      *((_DWORD *)v3 + 29) = 0;
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 12));
  }
}

void physx::PxsCCDAdvanceTask::~PxsCCDAdvanceTask(physx::PxsCCDAdvanceTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::PxsCCDAdvanceTask::getName(physx::PxsCCDAdvanceTask *this)
{
  return "PxsContext.CCDAdvance";
}

uint64_t physx::PxsCCDAdvanceTask::runInternal(physx::PxsCCDAdvanceTask *this)
{
  uint64_t v289 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 7);
  uint64_t v3 = (uint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 440));
  if (!v3)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpThreadContext>::getName() [T = physx::PxcNpThreadContext]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 7335, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      uint64_t v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v3 - 8) = v3 - v6;
    }
    else
    {
      uint64_t v3 = 0;
    }
    physx::PxcNpThreadContext::PxcNpThreadContext(v3, *(void *)(v2 + 448));
  }
  uint64_t v7 = *((unsigned int *)this + 22);
  LODWORD(v8) = *((_DWORD *)this + 23) + v7;
  unsigned int v9 = *((_DWORD *)this + 24);
  if (v8 >= v9) {
    uint64_t v8 = v9;
  }
  else {
    uint64_t v8 = v8;
  }
  uint64_t v238 = v8;
  uint64_t v245 = v3;
  if (v7 < v8)
  {
    unsigned int v252 = 0;
    float v244 = *(float *)(*((void *)this + 8) + 472);
    LODWORD(v10) = *((_DWORD *)this + 25);
    int v11 = (int *)(v3 + 7208);
    HIDWORD(PoseToToi) = 32;
    float v13 = 1.0;
    __int32 v254 = v11;
    while (1)
    {
      unint64_t v14 = *((unsigned int *)this + 12);
      if (v10 >= v14) {
        goto LABEL_327;
      }
      unsigned int v15 = v10;
      unsigned int v16 = v10 + 1;
      LODWORD(v10) = v16;
      uint64_t v255 = v7;
      if (v16 < v14)
      {
        uint64_t v17 = *((void *)this + 5);
        uint64_t v10 = v15 + 1;
        while (v7 == *(_DWORD *)(*(void *)(v17 + 8 * v10) + 80))
        {
          if (++v10 >= v14)
          {
            LODWORD(v10) = *((_DWORD *)this + 12);
            break;
          }
        }
        if (v10 > v16)
        {
          HIDWORD(PoseToToi) = 32;
          *(void *)((char *)&v270 + 4) = 0x2000000000;
          BOOL v271 = &v281;
          LOBYTE(v272) = 0;
          int v18 = v10 + ~v15;
          if (v18 >= 1)
          {
            unsigned int v19 = 0;
            int v20 = 0;
            HIDWORD(PoseToToi) = 0;
            long long v287 = 0u;
            long long v288 = 0u;
            uint64_t v21 = v17 + 8 * v15;
            long long v285 = 0u;
            long long v286 = 0u;
            long long v283 = 0u;
            long long v284 = 0u;
            uint64_t v22 = v21 + 8;
            uint64_t v23 = &v281;
            long long v281 = 0u;
            long long v282 = 0u;
            while (1)
            {
              if (v18 > v20)
              {
                if ((v18 - v20) < 5)
                {
LABEL_65:
                  uint64_t v47 = v20;
                  int v48 = v20 + 1;
                  uint64_t v49 = v22 + 8 * v20;
                  do
                  {
                    uint64_t v50 = 0;
                    uint64_t v51 = v47++;
                    int v52 = v51;
                    do
                    {
                      uint64_t v53 = *(void *)(v49 + 8 * v50);
                      float v54 = *(float *)(v53 + 44);
                      uint64_t v55 = *(void *)(v21 + 8 * v52);
                      float v56 = *(float *)(v55 + 44);
                      if (v54 < v56 || v54 == v56 && *(void *)(v53 + 8) && !*(void *)(v55 + 8)) {
                        int v52 = v48 + v50;
                      }
                      ++v50;
                    }
                    while (v51 + v50 < v18);
                    if (v52 != v51)
                    {
                      uint64_t v57 = *(void *)(v21 + 8 * v52);
                      *(void *)(v21 + 8 * v52) = *(void *)(v21 + 8 * v51);
                      *(void *)(v21 + 8 * v51) = v57;
                    }
                    ++v48;
                    v49 += 8;
                  }
                  while (v47 != v18);
                }
                else
                {
                  while (1)
                  {
                    uint64_t v24 = (uint64_t)(v18 + v20 + (v18 + v20 < 0)) >> 1;
                    uint64_t v25 = *(void *)(v21 + 8 * ((v18 + v20) / 2));
                    float v26 = *(float *)(v25 + 44);
                    uint64_t v27 = *(void *)(v21 + 8 * v20);
                    float v28 = *(float *)(v27 + 44);
                    if (v26 < v28 || v26 == v28 && *(void *)(v25 + 8) && !*(void *)(v27 + 8))
                    {
                      *(void *)(v21 + 8 * v20) = v25;
                      *(void *)(v21 + 8 * v24) = v27;
                      uint64_t v25 = v27;
                      uint64_t v27 = *(void *)(v21 + 8 * v20);
                      float v28 = *(float *)(v27 + 44);
                    }
                    uint64_t v29 = *(void *)(v21 + 8 * v18);
                    float v30 = *(float *)(v29 + 44);
                    if (v30 < v28 || v30 == v28 && *(void *)(v29 + 8) && !*(void *)(v27 + 8))
                    {
                      *(void *)(v21 + 8 * v20) = v29;
                      *(void *)(v21 + 8 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v27;
                      uint64_t v25 = *(void *)(v21 + 8 * v24);
                    }
                    else
                    {
                      float v28 = *(float *)(v29 + 44);
                      uint64_t v27 = *(void *)(v21 + 8 * v18);
                    }
                    float v31 = *(float *)(v25 + 44);
                    if (v28 < v31 || v28 == v31 && *(void *)(v27 + 8) && !*(void *)(v25 + 8))
                    {
                      *(void *)(v21 + 8 * v24) = v27;
                      *(void *)(v21 + 8 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v25;
                      uint64_t v25 = *(void *)(v21 + 8 * v24);
                    }
                    uint64_t v32 = v18 - 1;
                    *(void *)(v21 + 8 * v24) = *(void *)(v21 + 8 * v32);
                    *(void *)(v21 + 8 * v32) = v25;
                    int v33 = v20;
                    int v34 = v18 - 1;
                    while (1)
                    {
                      uint64_t v35 = 0;
                      float v36 = *(float *)(v25 + 44);
                      uint64_t v37 = v33;
                      uint64_t v38 = v22 + 8 * v33;
                      while (1)
                      {
                        uint64_t v39 = *(void *)(v38 + 8 * v35);
                        float v40 = *(float *)(v39 + 44);
                        if (v40 >= v36 && (v40 != v36 || !*(void *)(v39 + 8) || *(void *)(v25 + 8))) {
                          break;
                        }
                        ++v35;
                      }
                      int v33 = v35 + v37 + 1;
                      for (uint64_t i = v21 - 8 + 8 * v34--; ; i -= 8)
                      {
                        uint64_t v42 = *(void *)i;
                        float v43 = *(float *)(*(void *)i + 44);
                        if (v36 >= v43 && (v36 != v43 || !*(void *)(v25 + 8) || *(void *)(v42 + 8))) {
                          break;
                        }
                        --v34;
                      }
                      if (v33 >= v34) {
                        break;
                      }
                      *(void *)(v22 + 8 * v37 + 8 * v35) = v42;
                      *(void *)uint64_t i = v39;
                      uint64_t v25 = *(void *)(v21 + 8 * v32);
                    }
                    *(void *)(v22 + 8 * v37 + 8 * v35) = v25;
                    *(void *)(v21 + 8 * v32) = v39;
                    unsigned int v44 = DWORD2(v270) - 1;
                    if ((int)v37 - v20 + (int)v35 + 1 >= ~v37 + v18 - (int)v35)
                    {
                      if (v19 >= v44)
                      {
                        physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow((uint64_t)&v270);
                        unsigned int v19 = DWORD1(v270);
                        uint64_t v23 = v271;
                      }
                      *((_DWORD *)v23 + v19) = v35 + v37 + 2;
                      unsigned int v46 = v19 + 1;
                      v19 += 2;
                      DWORD1(v270) = v19;
                      *((_DWORD *)v23 + v4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v18;
                      int v18 = v37 + v35;
                    }
                    else
                    {
                      if (v19 >= v44)
                      {
                        physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow((uint64_t)&v270);
                        unsigned int v19 = DWORD1(v270);
                        uint64_t v23 = v271;
                      }
                      unsigned int v45 = v19 + 1;
                      *((_DWORD *)v23 + v19) = v20;
                      v19 += 2;
                      DWORD1(v270) = v19;
                      *((_DWORD *)v23 + v45) = v35 + v37;
                      int v20 = v37 + v35 + 2;
                    }
                    if (v18 <= v20) {
                      break;
                    }
                    if ((v18 - v20) <= 4) {
                      goto LABEL_65;
                    }
                  }
                }
              }
              if (!v19) {
                break;
              }
              DWORD1(v270) = v19 - 1;
              int v18 = *((_DWORD *)v23 + v19 - 1);
              v19 -= 2;
              DWORD1(v270) = v19;
              int v20 = *((_DWORD *)v23 + v19);
            }
            if ((_BYTE)v272) {
              _ZF = v23 == 0;
            }
            else {
              _ZF = 1;
            }
            int v11 = v254;
            LODWORD(v7) = v255;
            if (!_ZF) {
              (*(void (**)(uint64_t, long long *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v23);
            }
          }
        }
      }
      if (v15 < v10) {
        break;
      }
LABEL_324:
      uint64_t v7 = v255 + 1;
      if (v255 + 1 == v238) {
        goto LABEL_327;
      }
    }
    float v253 = *((float *)this + 18);
    uint64_t v241 = (v7 - 1);
    int v59 = v10 - 1;
    uint64_t v60 = 1;
    while (1)
    {
      uint64_t v61 = *(void *)(*((void *)this + 5) + 8 * v15);
      LODWORD(PoseToToi) = *(_DWORD *)(v61 + 44);
      if (*(float *)&PoseToToi > v13) {
        goto LABEL_324;
      }
      float v62 = *(float32x2_t **)v61;
      if (*(void *)v61) {
        LODWORD(v62) = *(unsigned __int8 *)(*(void *)&v62[4] + 34) == 0;
      }
      uint64_t v63 = *(void *)(v61 + 8);
      if (v63) {
        LODWORD(v63) = *(unsigned __int8 *)(*(void *)(v63 + 32) + 34) == 0;
      }
      if ((v62 | v63) == 1) {
        break;
      }
LABEL_242:
      if (++v15 >= v10) {
        goto LABEL_324;
      }
    }
    if (*(_DWORD *)(v61 + 128))
    {
LABEL_149:
      if (*(float *)&PoseToToi > v13) {
        goto LABEL_324;
      }
      if (*(float *)&PoseToToi <= 3.4028e38)
      {
        if (*(unsigned char *)(v61 + 93))
        {
          uint64_t v116 = *(void (****)(void, long long *, uint64_t))(*((void *)this + 8) + 168);
          if (v116)
          {
            uint64_t v117 = v60;
            __asm { FMOV            V0.4S, #1.0 }
            long long v281 = _Q0;
            *(void *)&long long v282 = *(void *)(v61 + 32);
            unsigned int v119 = *(_DWORD *)(v61 + 104);
            unsigned int v120 = *(_DWORD *)(v61 + 108);
            DWORD2(v282) = *(_DWORD *)(v61 + 40);
            *(void *)&long long v283 = __PAIR64__(v120, v119);
            HIDWORD(v283) = *(_DWORD *)(v61 + 100);
            DWORD2(v283) = 256;
            *(void *)&long long v284 = *(void *)(v61 + 52);
            *((void *)&v284 + 1) = *(unsigned int *)(v61 + 60);
            *(void *)&long long v286 = *(void *)(v61 + 32);
            LODWORD(_Q0) = *(_DWORD *)(v61 + 40);
            DWORD1(v287) = HIDWORD(v283);
            *((void *)&v287 + 1) = __PAIR64__(v119, v120);
            *((void *)&v286 + 1) = __PAIR64__(*(_DWORD *)(v61 + 112), _Q0);
            LODWORD(v287) = 0;
            *(void *)&long long v285 = 0;
            *((void *)&v285 + 1) = 0x7F7FFFFF00000000;
            uint64_t v122 = *(float32x2_t **)v61;
            uint64_t v121 = *(void *)(v61 + 8);
            uint64_t v124 = *(void *)(v61 + 16);
            uint64_t v123 = *(void *)(v61 + 24);
            long long v126 = *(float **)(v123 + 96);
            float v125 = *(float **)(v123 + 104);
            uint64_t v127 = *(float **)(v124 + 96);
            uint64_t v128 = *(float **)(v124 + 104);
            BOOL v271 = (long long *)((char *)v127 + physx::gPxvOffsetTable);
            uint64_t v272 = (char *)v126 + physx::gPxvOffsetTable;
            if (v122) {
              uint64_t v129 = *((void *)&physx::gPxvOffsetTable + 1);
            }
            else {
              uint64_t v129 = qword_2687A6240;
            }
            uint64_t v130 = (char *)v128 + v129;
            BOOL v131 = v121 != 0;
            if (v121) {
              uint64_t v132 = *((void *)&physx::gPxvOffsetTable + 1);
            }
            else {
              uint64_t v132 = qword_2687A6240;
            }
            *(void *)&long long v270 = v130;
            *((void *)&v270 + 1) = (char *)v125 + v132;
            long long v273 = v267;
            unint64_t v274 = v268;
            float v275 = v269;
            long long v276 = v267;
            unint64_t v277 = v268;
            float v278 = v269;
            int v279 = 1;
            uint64_t v280 = &v284;
            (**v116)(v116, &v270, 1);
            if ((BYTE11(v283) & 0x20) != 0) {
              *(_DWORD *)(v61 + 124) = HIDWORD(v285);
            }
            *(int32x2_t *)(v61 + 104) = vrev64_s32(*(int32x2_t *)((char *)&v287 + 8));
            *(_DWORD *)(v61 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = HIDWORD(v286);
            *(void *)(v61 + 52) = v284;
            *(_DWORD *)(v61 + 60) = DWORD2(v284);
            HIDWORD(PoseToToi) = DWORD1(v286);
            *(void *)(v61 + 32) = v286;
            *(_DWORD *)(v61 + 40) = DWORD2(v286);
            uint64_t v60 = v117;
          }
        }
      }
      uint64_t v133 = *(float32x2_t **)v61;
      BOOL v134 = *(void *)v61 == 0;
      if (*(void *)v61 && !*(unsigned char *)(*(void *)&v133[4] + 34)) {
        BOOL v134 = 1;
      }
      uint64_t v135 = *(float32x2_t **)(v61 + 8);
      BOOL v136 = v135 == 0;
      if (v135 && !*(unsigned char *)(*(void *)&v135[4] + 34)) {
        BOOL v136 = 1;
      }
      float v137 = *(float *)(v61 + 44);
      if (v134 && v136 && v137 <= v13) {
        *(unsigned char *)(v61 + 92) = 1;
      }
      int v138 = *((unsigned __int8 *)this + 128);
      uint64_t v140 = *(float **)(v61 + 16);
      int v139 = *(float **)(v61 + 24);
      if (v133 && !*(unsigned char *)(*(void *)&v133[4] + 34))
      {
        if (*(float *)(*(void *)&v133[5] + 124) == 0.0)
        {
          if (v135) {
            goto LABEL_246;
          }
LABEL_175:
          int v141 = 0;
          goto LABEL_176;
        }
      }
      else
      {
        if (!v135 || *(unsigned char *)(*(void *)&v135[4] + 34)) {
          goto LABEL_175;
        }
        if (!v133 || *(float *)(*(void *)&v133[5] + 124) == 0.0)
        {
LABEL_246:
          int v141 = 0;
          if (v137 >= v13 || *(float *)(*(void *)&v135[5] + 124) == 0.0)
          {
LABEL_176:
            LODWORD(PoseToToi) = *(_DWORD *)(v61 + 44);
            if (*(float *)&PoseToToi >= 0.0)
            {
              if (*(float *)&PoseToToi <= v13) {
                char v142 = v141;
              }
              else {
                char v142 = 0;
              }
              if ((v142 & 1) == 0) {
                goto LABEL_241;
              }
            }
            else
            {
              *(_DWORD *)(v61 + 44) = 0;
              PoseToTouint64_t i = 0.0;
              if (!v141)
              {
LABEL_241:
                int v11 = v254;
                goto LABEL_242;
              }
            }
            uint64_t v143 = *((void *)this + 14);
            if (v255) {
              unint64_t v144 = *(unsigned __int16 *)(v143 + 2 * v241);
            }
            else {
              unint64_t v144 = 0;
            }
            if (*(float *)&PoseToToi > 0.0)
            {
              unint64_t v145 = *(unsigned __int16 *)(v143 + 2 * v255);
              if (v144 < v145)
              {
                do
                {
                  uint64_t v146 = *(void *)(*((void *)this + 13) + 8 * v144);
                  if (!*(unsigned char *)(v146 + 34))
                  {
                    int v147 = *(float32x2_t **)(v146 + 40);
                    PoseToTouint64_t i = physx::PxsRigidBody::advancePrevPoseToToi(v147, PoseToToi);
                    float32x2_t v148 = v147[4];
                    LODWORD(PoseToToi) = *(_DWORD *)(v61 + 44);
                    *(float *)(*(void *)&v148 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = fmaxf(*(float *)(*(void *)&v148 + 36)* (float)(v13 - *(float *)&PoseToToi), 0.01);
                    ++*(_DWORD *)(*(void *)&v148 + 56);
                  }
                  ++v144;
                }
                while (v145 != v144);
              }
              float v253 = v253 - (float)(v253 * *(float *)&PoseToToi);
              if (v15 + 1 < v10)
              {
                int v149 = v59 - v15;
                unsigned int v150 = (uint64_t *)(*((void *)this + 5) + 8 * (v15 + 1));
                float v151 = v13 / (float)(v13 - *(float *)&PoseToToi);
                do
                {
                  uint64_t v152 = *v150++;
                  *(float *)(v152 + 44) = v151 * (float)(*(float *)(v152 + 44) - *(float *)(v61 + 44));
                  --v149;
                }
                while (v149);
              }
            }
            if (!*((unsigned char *)this + 129)
              && (*(_WORD *)(*(void *)(v61 + 72) + 80) & 0x800) == 0
              && *(float *)(v61 + 124) != 0.0)
            {
              unsigned int v153 = v15 + 1;
              if (v15 + 1 < v10)
              {
                uint64_t v155 = *(float32x2_t **)v61;
                float v154 = *(float32x2_t **)(v61 + 8);
                unsigned int v156 = v15;
                do
                {
                  uint64_t v157 = *(void *)(*((void *)this + 5) + 8 * v153);
                  uint64_t v158 = *(float32x2_t **)v157;
                  if (*(void *)v157)
                  {
                    uint64_t v159 = *(float32x2_t **)(v157 + 8);
                    if (v159)
                    {
                      BOOL v160 = v158 != v155 || v159 == v154;
                      if (!v160
                        || (v159 == v155 ? (BOOL v161 = v158 == v154) : (BOOL v161 = 1),
                            !v161
                         || (v158 == v154 ? (BOOL v162 = v159 == v155) : (BOOL v162 = 1),
                             !v162 || (v159 == v154 ? (BOOL v163 = v158 == v155) : (BOOL v163 = 1), !v163))))
                      {
                        if (v60 != *(_DWORD *)(v157 + 116))
                        {
                          *(_DWORD *)(v157 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v60;
                          float v164 = *(float *)(v157 + 44);
                          physx::PxsCCDPair::sweepEstimateToi((physx::PxsCCDPair *)v157, v244);
                          if (*(float *)&PoseToToi >= v164)
                          {
                            if (*(float *)&PoseToToi > v164)
                            {
                              uint64_t v170 = v153 + 1;
                              if (v170 >= v10
                                || (uint64_t v171 = *((void *)this + 5),
                                    unsigned int v172 = (uint64_t *)(v171 + 8 * v170),
                                    uint64_t v173 = *v172,
                                    *(float *)(*v172 + 44) >= *(float *)&PoseToToi))
                              {
                                int v176 = 0;
                              }
                              else
                              {
                                uint64_t v174 = 8 * v170 + 8;
                                unsigned int v175 = v153;
                                do
                                {
                                  *unsigned int v172 = *(void *)(v171 + 8 * v175);
                                  *(void *)(*((void *)this + 5) + 8 * v175) = v173;
                                  if (v10 - 2 == v175) {
                                    break;
                                  }
                                  ++v170;
                                  uint64_t v171 = *((void *)this + 5);
                                  unsigned int v172 = (uint64_t *)(v171 + 8 * v170);
                                  uint64_t v173 = *(void *)(v171 + v174);
                                  ++v175;
                                  v174 += 8;
                                }
                                while (*(float *)(v173 + 44) < *(float *)&PoseToToi);
                                int v176 = -1;
                              }
                              v153 += v176;
                            }
                          }
                          else if (v156 > v15)
                          {
                            uint64_t v165 = 8 * v156;
                            unsigned int v166 = v153;
                            do
                            {
                              uint64_t v167 = *((void *)this + 5);
                              uint64_t v168 = *(void *)(v167 + v165);
                              if (*(float *)(v168 + 44) <= *(float *)&PoseToToi) {
                                break;
                              }
                              unsigned int v169 = v156;
                              *(void *)(v167 + v165) = *(void *)(v167 + 8 * v166);
                              *(void *)(*((void *)this + 5) + 8 * v16re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v168;
                              --v156;
                              v165 -= 8;
                              unsigned int v166 = v169;
                            }
                            while (v15 < v156);
                          }
                        }
                      }
                    }
                  }
                  unsigned int v156 = v153++;
                }
                while (v153 < v10);
              }
            }
            ++v252;
            uint64_t v60 = (v60 + 1);
            goto LABEL_241;
          }
LABEL_250:
          uint64_t v177 = *(void *)(v61 + 72);
          if ((*(_WORD *)(v177 + 80) & 0x800) != 0) {
            goto LABEL_252;
          }
          float v178 = *(float *)(v61 + 124);
          if (v178 == 0.0) {
            goto LABEL_252;
          }
          float v179 = *(float *)(v61 + 32);
          if ((~LODWORD(v179) & 0x7F800000) == 0
            || (float v180 = *(float *)(v61 + 36), (~LODWORD(v180) & 0x7F800000) == 0)
            || (float v181 = *(float *)(v61 + 40), (~LODWORD(v181) & 0x7F800000) == 0)
            || fabsf(sqrtf((float)((float)(v180 * v180) + (float)(v179 * v179)) + (float)(v181 * v181)) + -1.0) >= 0.0001)
          {
            if (v133 && !*(unsigned char *)(*(void *)&v133[4] + 34))
            {
              *(float *)&PoseToTouint64_t i = v137;
              physx::PxsRigidBody::advancePrevPoseToToi(v133, PoseToToi);
              int v141 = 1;
              physx::PxsRigidBody::advanceToToi(v133, v137, v253, 1);
              ++*(_DWORD *)(*(void *)&v133[4] + 56);
              goto LABEL_176;
            }
LABEL_252:
            int v141 = 1;
            goto LABEL_176;
          }
          float v182 = 0.0;
          float v183 = 0.0;
          float v184 = 0.0;
          float v185 = 0.0;
          PoseToTouint64_t i = 0.0;
          if (v133)
          {
            LOBYTE(PoseToToi) = *(unsigned char *)(v177 + 84);
            uint64_t v186 = (float *)v133[5];
            float v187 = v140[14] - v186[4];
            float v188 = v140[15] - v186[5];
            float v189 = v140[16] - v186[6];
            float v191 = v186[21];
            float v190 = v186[22];
            float v192 = v186[20];
            float v193 = (float)(v191 * v189) - (float)(v190 * v188);
            float v194 = (float)(v190 * v187) - (float)(v192 * v189);
            float v195 = (float)(v192 * v188) - (float)(v191 * v187);
            float v183 = v186[16] + v193;
            float v184 = v186[17] + v194;
            float v185 = v195 + v186[18];
            *(float *)&PoseToTouint64_t i = v186[31] * (float)LODWORD(PoseToToi);
          }
          float v196 = 0.0;
          float v197 = 0.0;
          float v198 = 0.0;
          if (v135)
          {
            LOBYTE(v198) = *(unsigned char *)(v177 + 85);
            unsigned int v199 = (float *)v135[5];
            float v200 = v139[14] - v199[4];
            float v201 = v139[15] - v199[5];
            float v202 = v139[16] - v199[6];
            float v204 = v199[21];
            float v203 = v199[22];
            float v205 = v199[20];
            float v206 = (float)(v204 * v202) - (float)(v203 * v201);
            float v207 = (float)(v203 * v200) - (float)(v205 * v202);
            float v208 = (float)(v205 * v201) - (float)(v204 * v200);
            float v182 = v199[16] + v206;
            float v196 = v199[17] + v207;
            float v197 = v208 + v199[18];
            float v198 = v199[31] * (float)LODWORD(v198);
          }
          float v209 = v182 - v183;
          float v210 = v196 - v184;
          float v211 = v197 - v185;
          float v212 = (float)((float)(v180 * v210) + (float)((float)(v182 - v183) * v179)) + (float)(v211 * v181);
          float v213 = v212 - (float)(*(float *)(v61 + 64) * 10.0);
          if (v213 >= -0.000001) {
            goto LABEL_278;
          }
          float v214 = -v178;
          float v215 = (float)((float)(*(float *)(v61 + 112) + v13) * v213) / (float)(*(float *)&PoseToToi + v198);
          if (v215 >= v214) {
            float v216 = v215;
          }
          else {
            float v216 = v214;
          }
          float v217 = v179 * v216;
          float v218 = v180 * v216;
          float v219 = v181 * v216;
          if (*(unsigned char *)(v61 + 132))
          {
            float v220 = v209 - (float)(v179 * v212);
            float v221 = v210 - (float)(v180 * v212);
            float v222 = v211 - (float)(v181 * v212);
            float v223 = sqrtf((float)((float)(v221 * v221) + (float)(v220 * v220)) + (float)(v222 * v222));
            if (v223 > 0.0)
            {
              float v220 = v220 * (float)(v13 / v223);
              float v221 = v221 * (float)(v13 / v223);
              float v222 = v222 * (float)(v13 / v223);
            }
            float v224 = v223 / (float)(*(float *)&PoseToToi + v198);
            if (fabsf(*(float *)(v61 + 108) * v216) < v224) {
              float v224 = -(float)(v216 * *(float *)(v61 + 104));
            }
            float v217 = v217 + (float)(v224 * v220);
            float v218 = v218 + (float)(v224 * v221);
            float v219 = v219 + (float)(v224 * v222);
          }
          if (v216 >= 0.0) {
            goto LABEL_278;
          }
          *(float *)(v61 + 120) = -v216;
          if (v133 && *(unsigned char *)(*(void *)&v133[4] + 34) || v135 && *(unsigned char *)(*(void *)&v135[4] + 34))
          {
            unsigned int v225 = (_DWORD *)(v61 + 48);
LABEL_277:
            *unsigned int v225 = 0;
            goto LABEL_278;
          }
          if (!v133) {
            goto LABEL_291;
          }
          float32x2_t v227 = v133[5];
          float v228 = (float)(*(float *)&PoseToToi * v218) + *(float *)(*(void *)&v227 + 68);
          float v229 = *(float *)(*(void *)&v227 + 72);
          *(float *)(*(void *)&v227 + 64) = (float)(*(float *)&PoseToToi * v217)
                                              + *(float *)(*(void *)&v227 + 64);
          *(float *)(*(void *)&v227 + 68) = v228;
          *(float *)(*(void *)&v227 + 72) = (float)(*(float *)&PoseToToi * v219) + v229;
          char v230 = *(unsigned char *)(*(void *)&v227 + 158);
          if (!v230) {
            goto LABEL_291;
          }
          if (*(unsigned char *)(*(void *)&v227 + 158))
          {
            *(_DWORD *)(*(void *)&v227 + 64) = 0;
            if ((v230 & 2) == 0)
            {
LABEL_289:
              if ((v230 & 4) != 0) {
LABEL_290:
              }
                *(_DWORD *)(*(void *)&v227 + 72) = 0;
LABEL_291:
              if (!v135) {
                goto LABEL_278;
              }
              float32x2_t v231 = v135[5];
              float v232 = *(float *)(*(void *)&v231 + 72);
              unsigned int v225 = (_DWORD *)(*(void *)&v231 + 72);
              float v233 = *(float *)(*(void *)&v231 + 68) - (float)(v198 * v218);
              *(float *)(*(void *)&v231 + 64) = *(float *)(*(void *)&v231 + 64) - (float)(v198 * v217);
              *(float *)(*(void *)&v231 + 68) = v233;
              *(float *)(*(void *)&v231 + 72) = v232 - (float)(v198 * v219);
              char v234 = *(unsigned char *)(*(void *)&v231 + 158);
              if (!v234) {
                goto LABEL_278;
              }
              if (*(unsigned char *)(*(void *)&v231 + 158))
              {
                *(_DWORD *)(*(void *)&v231 + 64) = 0;
                if ((v234 & 2) == 0)
                {
LABEL_295:
                  if ((v234 & 4) != 0) {
                    goto LABEL_277;
                  }
LABEL_278:
                  if (v133 && !*(unsigned char *)(*(void *)&v133[4] + 34))
                  {
                    *(float *)&PoseToTouint64_t i = v137;
                    physx::PxsRigidBody::advancePrevPoseToToi(v133, PoseToToi);
                    if (v138) {
                      BOOL v226 = *(float *)(v61 + 48) == 0.0;
                    }
                    else {
                      BOOL v226 = 0;
                    }
                    physx::PxsRigidBody::advanceToToi(v133, v137, v253, v226);
                    ++*(_DWORD *)(*(void *)&v133[4] + 56);
                  }
                  if (v135 && !*(unsigned char *)(*(void *)&v135[4] + 34))
                  {
                    *(float *)&PoseToTouint64_t i = v137;
                    physx::PxsRigidBody::advancePrevPoseToToi(v135, PoseToToi);
                    if (v138) {
                      BOOL v235 = *(float *)(v61 + 48) == 0.0;
                    }
                    else {
                      BOOL v235 = 0;
                    }
                    physx::PxsRigidBody::advanceToToi(v135, v137, v253, v235);
                    ++*(_DWORD *)(*(void *)&v135[4] + 56);
                  }
                  LODWORD(PoseToToi) = *(_DWORD *)(v61 + 48);
                  if (*(float *)&PoseToToi > 0.0)
                  {
                    if (v133)
                    {
                      if (!*(unsigned char *)(*(void *)&v133[4] + 34))
                      {
                        PoseToTouint64_t i = physx::PxsRigidBody::advancePrevPoseToToi(v133, PoseToToi);
                        if (v138) {
                          physx::PxsRigidBody::advanceToToi(v133, *(float *)(v61 + 48), v253, 1);
                        }
                      }
                    }
                    if (v135)
                    {
                      if (!*(unsigned char *)(*(void *)&v135[4] + 34))
                      {
                        LODWORD(PoseToToi) = *(_DWORD *)(v61 + 48);
                        PoseToTouint64_t i = physx::PxsRigidBody::advancePrevPoseToToi(v135, PoseToToi);
                        if (v138) {
                          physx::PxsRigidBody::advanceToToi(v135, *(float *)(v61 + 48), v253, 1);
                        }
                      }
                    }
                  }
                  if (v133) {
                    *(_WORD *)(*(void *)&v133[4] + 34) = 257;
                  }
                  if (v135) {
                    *(_WORD *)(*(void *)&v135[4] + 34) = 257;
                  }
                  goto LABEL_252;
                }
              }
              else if ((*(unsigned char *)(*(void *)&v231 + 158) & 2) == 0)
              {
                goto LABEL_295;
              }
              *(_DWORD *)(*(void *)&v231 + 68) = 0;
              if ((v234 & 4) != 0) {
                goto LABEL_277;
              }
              goto LABEL_278;
            }
          }
          else if ((*(unsigned char *)(*(void *)&v227 + 158) & 2) == 0)
          {
            goto LABEL_289;
          }
          *(_DWORD *)(*(void *)&v227 + 68) = 0;
          if ((v230 & 4) == 0) {
            goto LABEL_291;
          }
          goto LABEL_290;
        }
      }
      if (v137 < v13) {
        goto LABEL_250;
      }
      goto LABEL_175;
    }
    unsigned int v251 = v60;
    physx::PxsCCDPair::updateShapes((physx::PxsCCDPair *)v61);
    int v64 = *(_DWORD *)(v61 + 84);
    int v65 = *(_DWORD *)(v61 + 88);
    BOOL v66 = v65 < v64;
    if (v65 < v64) {
      int v67 = *(_DWORD *)(v61 + 84);
    }
    else {
      int v67 = *(_DWORD *)(v61 + 88);
    }
    if (v65 < v64) {
      int v64 = *(_DWORD *)(v61 + 88);
    }
    int v242 = v67;
    int v243 = v64;
    if (v66) {
      double v68 = *(int ***)(v61 + 16);
    }
    else {
      double v68 = *(int ***)(v61 + 24);
    }
    if (v66) {
      double v69 = *(int ***)(v61 + 24);
    }
    else {
      double v69 = *(int ***)(v61 + 16);
    }
    if (v66) {
      double v70 = *(float32x2_t **)v61;
    }
    else {
      double v70 = *(float32x2_t **)(v61 + 8);
    }
    if (v66) {
      double v71 = *(float32x2_t **)(v61 + 8);
    }
    else {
      double v71 = *(float32x2_t **)v61;
    }
    long long v281 = *(_OWORD *)(v69 + 5);
    float v249 = *((float *)v69 + 15);
    float v250 = *((float *)v69 + 14);
    *(void *)&long long v282 = __PAIR64__(LODWORD(v249), LODWORD(v250));
    float v247 = *((float *)v69 + 16);
    *((float *)&v282 + 2) = v247;
    long long v267 = *(_OWORD *)((char *)v69 + 12);
    float v72 = *((float *)v69 + 8);
    float v248 = *((float *)v69 + 7);
    unint64_t v268 = __PAIR64__(LODWORD(v72), LODWORD(v248));
    float v246 = v72;
    float v73 = *((float *)v69 + 9);
    float v269 = v73;
    long long v270 = *(_OWORD *)(v68 + 5);
    float v75 = *((float *)v68 + 14);
    float v74 = *((float *)v68 + 15);
    BOOL v271 = (long long *)__PAIR64__(LODWORD(v74), LODWORD(v75));
    float v76 = *((float *)v68 + 16);
    *(float *)&uint64_t v272 = v76;
    __n128 v80 = *(__n128 *)((char *)v68 + 12);
    __n128 v263 = v80;
    float v78 = *((float *)v68 + 7);
    float v77 = *((float *)v68 + 8);
    float v264 = v78;
    float v265 = v77;
    float v79 = *((float *)v68 + 9);
    float v266 = v79;
    uint64_t v261 = 0;
    float v262 = 0.0;
    uint64_t v259 = 0;
    int v260 = 0;
    v80.n128_u64[0] = *(unsigned int *)(*(void *)(v61 + 72) + 92);
    v80.n128_f32[0] = fmaxf(v80.n128_f32[0], 0.0);
    *(float *)(v245 + 7200) = v253;
    *(_DWORD *)(v245 + 7208) = -1;
    float v239 = *((float *)v69 + 2);
    float v240 = *((float *)v68 + 2);
    if ((float)(v239 + v240) >= v244) {
      float v81 = v244;
    }
    else {
      float v81 = v239 + v240;
    }
    *(float *)&PoseToTouint64_t i = ((float (*)(int **, int **, long long *, long long *, long long *, __n128 *, uint64_t *, uint64_t *, __n128, float, float, int *))*(&physx::Gu::g_SweepMethodTable[7 * **v69] + **v68))(v69, v68, &v281, &v270, &v267, &v263, &v261, &v259, v80, *(float *)(v61 + 44), v81, v11);
    if (*(float *)&PoseToToi >= 1.0)
    {
      *(_DWORD *)(v61 + 128) = 1;
      *(_DWORD *)(v61 + 64) = 0;
      HIDWORD(PoseToToi) = 0;
      *(void *)(v61 + 44) = 2139095039;
      goto LABEL_118;
    }
    int v82 = *v11;
    *(_DWORD *)(v61 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *v11;
    uint64_t v83 = v261;
    float v84 = v262;
    float v85 = v262;
    float v86 = *((float *)&v261 + 1);
    float v87 = *(float *)&v261;
    if (*(_DWORD *)(v61 + 88) >= *(_DWORD *)(v61 + 84))
    {
      float v87 = -*(float *)&v261;
      float v86 = -*((float *)&v261 + 1);
      float v85 = -v262;
      *(float *)&uint64_t v261 = -*(float *)&v261;
      *((float *)&v261 + 1) = -*((float *)&v83 + 1);
      float v262 = -v262;
    }
    float v88 = (float)((float)-(float)(*((float *)&v83 + 1) * (float)((float)(v249 - v246) - (float)(v74 - v77)))
                - (float)((float)((float)(v250 - v248) - (float)(v75 - v78)) * *(float *)&v83))
        - (float)((float)((float)(v247 - v73) - (float)(v76 - v79)) * v84);
    *(_DWORD *)(v61 + 128) = 1;
    if (v88 < v81)
    {
      *(_DWORD *)(v61 + 44) = 2139095039;
LABEL_118:
      LODWORD(PoseToToi) = 2139095039;
      float v13 = 1.0;
      goto LABEL_142;
    }
    float v13 = 1.0;
    if (*(float *)&PoseToToi <= 0.0)
    {
      float v90 = 1.0;
      float v91 = 1.0;
      if (v71) {
        float v91 = *(float *)(*(void *)&v71[4] + 36);
      }
      float v92 = v240;
      if (v70) {
        float v90 = *(float *)(*(void *)&v70[4] + 36);
      }
      if (v91 >= v90) {
        float v91 = v90;
      }
      float v89 = -*(float *)&PoseToToi;
      LODWORD(PoseToToi) = 0;
      if (v91 == 1.0)
      {
        float v93 = 1.0;
        float v94 = 1.0;
        if (v71) {
          float v94 = *(float *)(*(void *)&v71[5] + 60);
        }
        if (v70) {
          float v93 = *(float *)(*(void *)&v70[5] + 60);
        }
        else {
          float v92 = 3.4028e38;
        }
        uint64_t v96 = v245;
        int v97 = v242;
        if (v94 < v93) {
          float v93 = v94;
        }
        float v98 = v239;
        if (v239 >= v92) {
          float v98 = v92;
        }
        float v95 = (float)(v98 * v93) / v88;
        goto LABEL_139;
      }
    }
    else
    {
      float v89 = 0.0;
    }
    float v95 = 0.0;
    uint64_t v96 = v245;
    int v97 = v242;
LABEL_139:
    *(_DWORD *)(v61 + 44) = LODWORD(PoseToToi);
    *(float *)(v61 + 48) = v95;
    *(void *)(v61 + 52) = v259;
    *(_DWORD *)(v61 + 60) = v260;
    *(float *)(v61 + 64) = v89;
    *(float *)(v61 + 32) = v87;
    *(float *)(v61 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v86;
    *(float *)(v61 + 40) = v85;
    if ((v97 - 5) >= 2) {
      int v82 = -1;
    }
    *(_DWORD *)(v96 + 465re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
    *(float *)(v96 + 560) = v87;
    *(float *)(v96 + 564) = v86;
    *(float *)(v96 + 568) = v85;
    *(void *)(v96 + 57re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v61 + 52);
    *(_DWORD *)(v96 + 584) = *(_DWORD *)(v61 + 60);
    *(_DWORD *)(v96 + 572) = 0;
    *(_DWORD *)(v96 + 6re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v82;
    ((void (*)(int *, void, uint64_t, unsigned __int16 *))physx::g_GetSingleMaterialMethodTable[v243])(v69[12], 0, v96, &v257);
    ((void (*)(int *, uint64_t, uint64_t, unsigned __int16 *))physx::g_GetSingleMaterialMethodTable[v97])(v68[12], 1, v96, &v257);
    double v99 = *(uint64_t **)(v96 + 7256);
    unsigned __int16 v100 = v257;
    uint64_t v101 = *v99;
    float v102 = (float32x2_t *)(v101 + 32 * v257);
    unsigned __int16 v103 = v258;
    float v104 = (float32x2_t *)(v101 + 32 * v258);
    float v105 = physx::PxsMaterialCombiner::combineRestitution((uint64_t)v102, (uint64_t)v104);
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v256 = _D0;
    unint64_t v110 = physx::PxsMaterialCombiner::combineIsotropicFriction((float *)&v256, v102, v104);
    *(_WORD *)(v61 + 100) = v100;
    *(_WORD *)(v61 + 102) = v103;
    *(_DWORD *)(v61 + 104) = HIDWORD(v110);
    *(_DWORD *)(v61 + 108) = v110;
    *(float *)(v61 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v105;
    LODWORD(PoseToToi) = *(_DWORD *)(v61 + 44);
LABEL_142:
    uint64_t v111 = v15 + 1;
    int v11 = v254;
    uint64_t v60 = v251;
    if (v111 < v10
      && *(float *)(*(void *)(*((void *)this + 5) + 8 * v111) + 44) < *(float *)&PoseToToi)
    {
      uint64_t v112 = 8 * v111;
      unsigned int v113 = v15;
      while (1)
      {
        uint64_t v114 = *((void *)this + 5);
        uint64_t v115 = *(void *)(v114 + v112);
        if (*(float *)(v115 + 44) >= *(float *)&PoseToToi) {
          break;
        }
        *(void *)(v114 + 8 * v113++) = v115;
        v112 += 8;
        if (v59 == v113)
        {
          uint64_t v114 = *((void *)this + 5);
          unsigned int v113 = v10 - 1;
          break;
        }
      }
      *(void *)(v114 + 8 * v113) = v61;
      --v15;
      goto LABEL_242;
    }
    goto LABEL_149;
  }
  unsigned int v252 = 0;
LABEL_327:
  atomic_fetch_add(*((atomic_uint *volatile *)this + 15), v252);
  uint64_t v236 = *(void *)(*((void *)this + 7) + 440);
  pthread_mutex_lock((pthread_mutex_t *)(v236 + 8));
  *(void *)uint64_t v245 = *(void *)v236;
  *(void *)uint64_t v236 = v245;
  return pthread_mutex_unlock((pthread_mutex_t *)(v236 + 8));
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>::getName() [T = physx::PxsCCDPair *]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

physx::PxcScratchAllocator *physx::PxcScratchAllocator::PxcScratchAllocator(physx::PxcScratchAllocator *this)
{
  uint64_t v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    uint64_t v3 = "<allocation names disabled>";
  }
  uint64_t v4 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16))(v2 + 24, 72, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)this = v4;
  physx::shdfnd::MutexImpl::MutexImpl(v4);
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::recreate((uint64_t)this + 8, 0x40u);
  uint64_t v5 = *((unsigned int *)this + 4);
  int v6 = *((_DWORD *)this + 5);
  uint64_t v8 = 0;
  if ((v6 & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)this + 8, &v8);
  }
  else
  {
    *(void *)(*((void *)this + 1) + 8 * v5) = 0;
    *((_DWORD *)this + 4) = v5 + 1;
  }
  return this;
}

void physx::Cm::RenderBuffer::~RenderBuffer(physx::Cm::RenderBuffer *this)
{
  physx::Cm::RenderBuffer::~RenderBuffer(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

{
  int v2;
  int v4;
  int v6;
  int v8;
  int v9;

  *(void *)this = &unk_26E722EE8;
  uint64_t v2 = *((_DWORD *)this + 21);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 9) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v4 = *((_DWORD *)this + 17);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 7) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v6 = *((_DWORD *)this + 13);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 5) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v8 = *((_DWORD *)this + 9);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unsigned int v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 1)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

uint64_t physx::Cm::RenderBuffer::getNbPoints(physx::Cm::RenderBuffer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t physx::Cm::RenderBuffer::getPoints(physx::Cm::RenderBuffer *this)
{
  return *((void *)this + 1);
}

uint64_t physx::Cm::RenderBuffer::getNbLines(physx::Cm::RenderBuffer *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::Cm::RenderBuffer::getLines(physx::Cm::RenderBuffer *this)
{
  return *((void *)this + 3);
}

uint64_t physx::Cm::RenderBuffer::getNbTriangles(physx::Cm::RenderBuffer *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t physx::Cm::RenderBuffer::getTriangles(physx::Cm::RenderBuffer *this)
{
  return *((void *)this + 5);
}

uint64_t physx::Cm::RenderBuffer::getNbTexts(physx::Cm::RenderBuffer *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t physx::Cm::RenderBuffer::getTexts(physx::Cm::RenderBuffer *this)
{
  return *((void *)this + 7);
}

uint64_t physx::Cm::RenderBuffer::append(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  physx::Cm::RenderBuffer::append<physx::PxDebugPoint>(a1, v4, v5, v6);
  unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  physx::Cm::RenderBuffer::append<physx::PxDebugLine>(a1, a1 + 24, v7, v8);
  unint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  physx::Cm::RenderBuffer::append<physx::PxDebugTriangle>(a1, a1 + 40, v9, v10);
  unint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
  unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  return physx::Cm::RenderBuffer::append<physx::PxDebugText>(a1, a1 + 56, v11, v12);
}

_DWORD *physx::Cm::RenderBuffer::clear(_DWORD *this)
{
  this[4] = 0;
  this[8] = 0;
  this[12] = 0;
  this[16] = 0;
  this[20] = 0;
  return this;
}

uint64_t physx::Cm::RenderBuffer::append<physx::PxDebugPoint>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 12);
  unsigned int v8 = *(_DWORD *)(a2 + 8) + a4;
  if ((v7 & 0x7FFFFFFFu) < v8) {
    uint64_t result = physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::recreate(a2, v8);
  }
  if (a4)
  {
    unint64_t v10 = a3 + 16 * a4;
    do
    {
      uint64_t v11 = *(unsigned int *)(a2 + 8);
      if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v11)
      {
        uint64_t result = physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::growAndPushBack(a2, a3);
      }
      else
      {
        uint64_t v12 = *(void *)a2 + 16 * v11;
        *(void *)uint64_t v12 = *(void *)a3;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(v12 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a2 + 8) = v11 + 1;
      }
      a3 += 16;
    }
    while (a3 < v10);
  }
  return result;
}

uint64_t physx::Cm::RenderBuffer::append<physx::PxDebugLine>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 12);
  unsigned int v8 = *(_DWORD *)(a2 + 8) + a4;
  if ((v7 & 0x7FFFFFFFu) < v8) {
    uint64_t result = physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(a2, v8);
  }
  if (a4)
  {
    unint64_t v10 = a3 + 32 * a4;
    do
    {
      uint64_t v11 = *(unsigned int *)(a2 + 8);
      if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v11)
      {
        uint64_t result = physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::growAndPushBack(a2, a3);
      }
      else
      {
        uint64_t v12 = *(void *)a2 + 32 * v11;
        *(void *)uint64_t v12 = *(void *)a3;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(v12 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(a3 + 12);
        *(void *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(v12 + 28) = *(_DWORD *)(a3 + 28);
        *(_DWORD *)(a2 + 8) = v11 + 1;
      }
      a3 += 32;
    }
    while (a3 < v10);
  }
  return result;
}

uint64_t physx::Cm::RenderBuffer::append<physx::PxDebugTriangle>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 12);
  unsigned int v8 = *(_DWORD *)(a2 + 8) + a4;
  if ((v7 & 0x7FFFFFFFu) < v8) {
    uint64_t result = physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::recreate(a2, v8);
  }
  if (a4)
  {
    unint64_t v10 = a3 + 48 * a4;
    do
    {
      unsigned int v11 = *(_DWORD *)(a2 + 8);
      if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v11)
      {
        uint64_t result = physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::growAndPushBack(a2, a3);
      }
      else
      {
        uint64_t v12 = *(void *)a2 + 48 * v11;
        *(void *)uint64_t v12 = *(void *)a3;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(v12 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(a3 + 12);
        *(void *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(v12 + 28) = *(_DWORD *)(a3 + 28);
        *(void *)(v12 + 32) = *(void *)(a3 + 32);
        *(_DWORD *)(v12 + 40) = *(_DWORD *)(a3 + 40);
        *(_DWORD *)(v12 + 44) = *(_DWORD *)(a3 + 44);
        *(_DWORD *)(a2 + 8) = v11 + 1;
      }
      a3 += 48;
    }
    while (a3 < v10);
  }
  return result;
}

uint64_t physx::Cm::RenderBuffer::append<physx::PxDebugText>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v7 = *(_DWORD *)(a2 + 12);
  unsigned int v8 = *(_DWORD *)(a2 + 8) + a4;
  if ((v7 & 0x7FFFFFFFu) < v8) {
    uint64_t result = physx::shdfnd::Array<physx::PxDebugText,physx::shdfnd::ReflectionAllocator<physx::PxDebugText>>::recreate(a2, v8);
  }
  if (a4)
  {
    unint64_t v10 = a3 + 32 * a4;
    do
    {
      uint64_t v11 = *(unsigned int *)(a2 + 8);
      if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v11)
      {
        uint64_t result = physx::shdfnd::Array<physx::PxDebugText,physx::shdfnd::ReflectionAllocator<physx::PxDebugText>>::growAndPushBack(a2, a3);
      }
      else
      {
        uint64_t v12 = *(void *)a2 + 32 * v11;
        *(void *)uint64_t v12 = *(void *)a3;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(a3 + 8);
        long long v13 = *(_OWORD *)(a3 + 12);
        *(_DWORD *)(v12 + 28) = *(_DWORD *)(a3 + 28);
        *(_OWORD *)(v12 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v13;
        ++*(_DWORD *)(a2 + 8);
      }
      a3 += 32;
    }
    while (a3 < v10);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>::allocate(result, 16 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(void *)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 16 * v5;
    uint64_t v8 = *(void *)v3;
    unint64_t v9 = v4;
    do
    {
      *(void *)unint64_t v9 = *(void *)v8;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
      *(_DWORD *)(v9 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v8 + 12);
      v9 += 16;
      v8 += 16;
    }
    while (v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>::getName() [T = physx::PxDebugPoint]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::growAndPushBack(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>::allocate(a1, 16 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v6 + 16 * v7;
  uint64_t v9 = *(void *)a1;
  if (v7)
  {
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = v6;
    do
    {
      *(void *)unint64_t v11 = *(void *)v10;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v11 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v10 + 12);
      v11 += 16;
      v10 += 16;
    }
    while (v11 < v8);
  }
  *(void *)unint64_t v8 = *(void *)a2;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v6 + 16 * v7 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(a2 + 12);
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v9)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v6 + 16 * v7;
}

uint64_t physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>::allocate(result, 32 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(void *)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 32 * v5;
    uint64_t v8 = *(void *)v3;
    unint64_t v9 = v4;
    do
    {
      *(void *)unint64_t v9 = *(void *)v8;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
      *(_DWORD *)(v9 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v8 + 12);
      *(void *)(v9 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v8 + 16);
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v9 + 28) = *(_DWORD *)(v8 + 28);
      v9 += 32;
      v8 += 32;
    }
    while (v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>::getName() [T = physx::PxDebugLine]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::growAndPushBack(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>::allocate(a1, 32 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  unint64_t v8 = v6 + 32 * v7;
  uint64_t v9 = *(void *)a1;
  if (v7)
  {
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = v6;
    do
    {
      *(void *)unint64_t v11 = *(void *)v10;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v11 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v10 + 12);
      *(void *)(v11 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v10 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v11 + 28) = *(_DWORD *)(v10 + 28);
      v11 += 32;
      v10 += 32;
    }
    while (v11 < v8);
  }
  *(void *)unint64_t v8 = *(void *)a2;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v8 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(v8 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 16);
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 + 28);
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v9)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v6 + 32 * v7;
}

uint64_t physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>::allocate(result, 48 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  uint64_t v6 = *(void *)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 48 * v5;
    uint64_t v8 = *(void *)v3;
    unint64_t v9 = v4;
    do
    {
      *(void *)unint64_t v9 = *(void *)v8;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
      *(_DWORD *)(v9 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v8 + 12);
      *(void *)(v9 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v8 + 16);
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 24);
      *(_DWORD *)(v9 + 28) = *(_DWORD *)(v8 + 28);
      *(void *)(v9 + 32) = *(void *)(v8 + 32);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(v8 + 40);
      *(_DWORD *)(v9 + 44) = *(_DWORD *)(v8 + 44);
      v9 += 48;
      v8 += 48;
    }
    while (v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>::getName() [T = physx::PxDebugTriangle]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::growAndPushBack(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>::allocate(a1, 48 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  unint64_t v8 = v6 + 48 * v7;
  uint64_t v9 = *(void *)a1;
  if (v7)
  {
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = v6;
    do
    {
      *(void *)unint64_t v11 = *(void *)v10;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v11 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v10 + 12);
      *(void *)(v11 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v10 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v11 + 28) = *(_DWORD *)(v10 + 28);
      *(void *)(v11 + 32) = *(void *)(v10 + 32);
      *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
      *(_DWORD *)(v11 + 44) = *(_DWORD *)(v10 + 44);
      v11 += 48;
      v10 += 48;
    }
    while (v11 < v8);
  }
  *(void *)unint64_t v8 = *(void *)a2;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v12 = v6 + 48 * v7;
  *(_DWORD *)(v12 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(a2 + 16);
  *(_DWORD *)(v12 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v12 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(v12 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(v12 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v12 + 44) = *(_DWORD *)(a2 + 44);
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v9)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    unsigned int v7 = *(_DWORD *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v6 + 48 * v7;
}

uint64_t physx::shdfnd::Array<physx::PxDebugText,physx::shdfnd::ReflectionAllocator<physx::PxDebugText>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxDebugText>::allocate(result, 32 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(void *)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 32 * v5;
    unint64_t v8 = v4;
    do
    {
      *(void *)unint64_t v8 = *(void *)v6;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v6 + 8);
      long long v9 = *(_OWORD *)(v6 + 12);
      *(_DWORD *)(v8 + 28) = *(_DWORD *)(v6 + 28);
      *(_OWORD *)(v8 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v9;
      v8 += 32;
      v6 += 32;
    }
    while (v8 < v7);
    uint64_t v6 = *(void *)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxDebugText>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugText>::getName() [T = physx::PxDebugText]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxDebugText,physx::shdfnd::ReflectionAllocator<physx::PxDebugText>>::growAndPushBack(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::PxDebugText>::allocate(a1, 32 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v6 + 32 * v7;
    uint64_t v9 = *(void *)a1;
    unint64_t v10 = v6;
    do
    {
      *(void *)unint64_t v10 = *(void *)v9;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v9 + 8);
      long long v11 = *(_OWORD *)(v9 + 12);
      *(_DWORD *)(v10 + 28) = *(_DWORD *)(v9 + 28);
      *(_OWORD *)(v10 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v11;
      v10 += 32;
      v9 += 32;
    }
    while (v10 < v8);
    uint64_t v12 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v6 + 32 * v12;
  *(void *)uint64_t v13 = *(void *)a2;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 8);
  long long v14 = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(v13 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(v13 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v14;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)a1 = v6;
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v6 + 32 * v15;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  float v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        int v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)int v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::getName() [T"
  }
         " = physx::Gu::SpherePersistentContactManifold]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  float v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        int v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)int v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    uint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::getName() [T "
  }
         "= physx::Gu::LargePersistentContactManifold]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
  return result;
}

void physx::PxsDefaultMemoryAllocator::~PxsDefaultMemoryAllocator(physx::PxsDefaultMemoryAllocator *this)
{
}

uint64_t physx::PxsDefaultMemoryAllocator::allocate(physx::PxsDefaultMemoryAllocator *this, uint64_t a2, const char *a3)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsDefaultMemoryManager.h", 67);
  else {
    return 0;
  }
}

uint64_t physx::PxsDefaultMemoryAllocator::deallocate(physx::PxsDefaultMemoryAllocator *this, void *a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return result;
}

pthread_mutex_t **physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(pthread_mutex_t **a1)
{
  if (*a1) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return a1;
}

uint64_t physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<unsigned char *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<unsigned char *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char *>::getName() [T = unsigned char *]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<unsigned char *>::allocate(a1, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = (void *)(v6 + 8 * v7);
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)a1;
    unint64_t v10 = (void *)v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v7 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v6 + 8 * v7;
}

uint64_t physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>::getName() [T = physx::PxcNpMemBlock *]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    uint64_t v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>::getName() [T = physx::PxcNpMemBlock *]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)a1;
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v8 + 8 * v9;
}

void physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(uint64_t a1, int a2)
{
  unsigned int v2 = (a2 + 31) >> 5;
  if (v2 > (*(_DWORD *)(a1 + 8) & 0x7FFFFFFFu))
  {
    int v4 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBitMap.h", 438);
    unsigned int v5 = v4;
    int v6 = *(_DWORD *)(a1 + 8);
    if (*(void *)a1)
    {
      memcpy(v4, *(const void **)a1, (4 * v6));
      int v6 = *(_DWORD *)(a1 + 8);
      if ((v6 & 0x80000000) == 0)
      {
        if (*(void *)a1)
        {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          int v6 = *(_DWORD *)(a1 + 8);
        }
      }
    }
    bzero(&v5[4 * (v6 & 0x7FFFFFFF)], 4 * (v2 - v6));
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 8) = v2;
  }
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDSweep>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDSweep>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDSweep>::runInternal(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  unint64_t v2 = *(unsigned int *)(v1 + 416);
  if (v2)
  {
    int v3 = 0;
    unsigned int v4 = 0;
    uint64_t v5 = *(void *)(result + 24);
    do
    {
      unsigned int v6 = 0;
      unsigned int v7 = v4;
      uint64_t v8 = v4++;
      if (v2 <= v4) {
        unsigned int v9 = v7 + 1;
      }
      else {
        unsigned int v9 = v2;
      }
      while (1)
      {
        v6 += *(_DWORD *)(*(void *)(v1 + 408) + 4 * v8);
        if (v6 > *(_DWORD *)(v1 + 432)) {
          break;
        }
        if (++v8 >= v2) {
          goto LABEL_10;
        }
      }
      unsigned int v4 = v8 + 1;
      unsigned int v9 = v8;
LABEL_10:
      if (v9 == v2)
      {
        unsigned int v4 = v2;
        if (!v6) {
          break;
        }
      }
      uint64_t v10 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*(void *)(v1 + 440) + 1920), 136, 0x10u);
      int v11 = *(_DWORD *)(v1 + 180);
      BOOL v12 = v11 == *(_DWORD *)(v1 + 436) - 1;
      uint64_t v13 = *(void *)(v1 + 392);
      int v14 = *(_DWORD *)(v1 + 400);
      uint64_t v15 = *(void *)(v1 + 440);
      int v16 = *(_DWORD *)(*(void *)(v1 + 424) + 7200);
      uint64_t v17 = *(void *)(v1 + 264);
      uint64_t v18 = *(void *)(v1 + 280);
      char v19 = *(unsigned char *)(v1 + 176);
      uint64_t v20 = *(void *)(v15 + 2616);
      *(void *)(v10 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(void *)(v10 + 8) = v20;
      unsigned int v21 = (uint64_t (**)(uint64_t))&unk_26E722E78;
      *(void *)uint64_t v10 = &unk_26E722E78;
      *(void *)(v10 + 40) = v13;
      *(_DWORD *)(v10 + 48) = v14;
      *(void *)(v10 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v15;
      *(void *)(v10 + 64) = v1;
      *(_DWORD *)(v10 + 72) = v16;
      *(_DWORD *)(v10 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v11;
      *(void *)(v10 + 80) = v1 + 192;
      *(_DWORD *)(v10 + 88) = v7;
      *(_DWORD *)(v10 + 92) = v4 - v7;
      *(_DWORD *)(v10 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v2;
      *(_DWORD *)(v10 + 100) = v3;
      *(void *)(v10 + 104) = v17;
      *(void *)(v10 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v18;
      *(void *)(v10 + 120) = v1 + 184;
      *(unsigned char *)(v10 + 128) = v12;
      *(unsigned char *)(v10 + 129) = v19;
      uint64_t v22 = *(void *)(*(void *)(v1 + 440) + 1912);
      *(_DWORD *)(v10 + 32) = 1;
      *(void *)(v10 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v22;
      *(void *)(v10 + 24) = v5;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
        unsigned int v21 = *(uint64_t (***)(uint64_t))v10;
      }
      v3 += v6;
      uint64_t result = v21[5](v10);
    }
    while (v4 < v2);
  }
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDAdvance>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDAdvance>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDAdvance>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v33 = *(unsigned int *)(v1 + 416);
  if (v33)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    int v35 = 0;
    unsigned int v4 = 0;
    do
    {
      int v5 = *(_DWORD *)(*(void *)(v1 + 408) + 4 * v2);
      unsigned int v34 = v5 + v4;
      if (v4 < v5 + v4)
      {
        uint64_t v6 = 8 * v4;
        do
        {
          uint64_t v7 = *(void *)(*(void *)(v1 + 392) + v6);
          if (*(float *)(v7 + 44) > 1.0) {
            break;
          }
          if (*(unsigned char *)(v7 + 92))
          {
            uint64_t v8 = *(void *)(v7 + 72);
            *(_DWORD *)(v8 + 16) |= 4u;
            char v9 = *(unsigned char *)(v8 + 83);
            uint64_t v10 = *(void *)(v1 + 440);
            unint64_t v11 = *(unsigned int *)(v8 + 88);
            physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v10 + 1704, v11 + 1);
            *(_DWORD *)(*(void *)(v10 + 1704) + ((v11 >> 3) & 0x1FFFFFFC)) |= 1 << v11;
            uint64_t v12 = *(void *)(v7 + 72);
            char v13 = *(unsigned char *)(v12 + 83);
            if ((v9 & 2) != 0)
            {
              *(unsigned char *)(v12 + 83) = v13 | 0x10;
              ++v35;
            }
            else
            {
              *(unsigned char *)(v12 + 83) = v13 & 0xFC | 2;
              (*(void (**)(void))(**(void **)(v1 + 456) + 72))(*(void *)(v1 + 456));
              (*(void (**)(void, void, uint64_t, void))(**(void **)(v1 + 456) + 56))(*(void *)(v1 + 456), *(void *)(v7 + 72), 1, 0);
              ++v3;
              uint64_t v12 = *(void *)(v7 + 72);
            }
            __int16 v14 = *(_WORD *)(v12 + 80);
            if ((v14 & 1) != 0
              || (*(_WORD *)(v12 + 80) & 0x100) != 0
              && ((v14 & 0x20) != 0 && *(_DWORD *)(*(void *)(v12 + 32) + 92) != 2139095039
               || (v14 & 0x40) != 0 && *(_DWORD *)(*(void *)(v12 + 40) + 92) != 2139095039))
            {
              uint64_t v15 = *(void *)(v1 + 440);
              unint64_t v16 = *(unsigned int *)(v12 + 88);
              physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v15 + 1688, v16 + 1);
              *(_DWORD *)(*(void *)(v15 + 1688) + ((v16 >> 3) & 0x1FFFFFFC)) |= 1 << v16;
              uint64_t v17 = *(void *)(v1 + 424);
              *(void *)(v17 + 57re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v7 + 52);
              *(_DWORD *)(v17 + 584) = *(_DWORD *)(v7 + 60);
              float v18 = -*(float *)(v7 + 40);
              *(float32x2_t *)(v17 + 560) = vneg_f32(*(float32x2_t *)(v7 + 32));
              *(float *)(v17 + 568) = v18;
              int v19 = *(_DWORD *)(v7 + 96);
              *(_DWORD *)(v17 + 6re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v19;
              *(_DWORD *)(v17 + 572) = 0;
              *(_DWORD *)(v17 + 620) = *(_DWORD *)(v7 + 112);
              *(_DWORD *)(v17 + 61re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v7 + 104);
              *(_DWORD *)(v17 + 604) = *(_DWORD *)(v7 + 108);
              *(_OWORD *)(v17 + 588) = xmmword_23441F6E0;
              v44[0] = *(_WORD *)(v7 + 100);
              v44[1] = *(_WORD *)(v7 + 102);
              uint64_t v42 = 0;
              float v43 = 0;
              __int16 v40 = 0;
              uint64_t v20 = *(void *)(v7 + 72);
              uint64_t v21 = *(void *)(v20 + 64);
              if (physx::writeCompressedContact((float *)(v17 + 560), 1u, v17, &v39, &v42, &v41, &v40, (uint64_t *)&v43, 4, *(void *)(v17 + 7256), (*(_WORD *)(v20 + 80) & 0x80) != 0, 1u, v44, &v38, 0x10u, 0, 0, 0, 0,
                                   0,
                                   0,
                                   v19 != -1))
              {
                uint64_t v22 = v42;
                *(_WORD *)(v42 + 8) = v40;
                *(_WORD *)(v22 + 10) = 0;
                *(void *)(*(void *)(v7 + 72) + 64) = v22;
                if (v21) {
                  *(_WORD *)(v21 + 10) = 1;
                }
                *(void *)uint64_t v22 = v21;
                *float v43 = *(_DWORD *)(v7 + 120);
              }
              else if (v21)
              {
                *(_WORD *)(v21 + 10) = 1;
              }
              else
              {
                *(void *)(*(void *)(v7 + 72) + 64) = 0;
              }
              if ((*(_WORD *)(*(void *)(v7 + 72) + 80) & 0x18) == 0 && *(float *)(v7 + 120) != 0.0)
              {
                DWORD2(v3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v7 + 120);
                DWORD2(v37) = 0;
                if (*(void *)v7) {
                  float v23 = *(float *)(*(void *)(*(void *)v7 + 40) + 92);
                }
                else {
                  float v23 = 3.4028e38;
                }
                uint64_t v24 = *(void *)(v7 + 8);
                if (v24) {
                  float v25 = *(float *)(*(void *)(v24 + 40) + 92);
                }
                else {
                  float v25 = 3.4028e38;
                }
                if (v23 >= v25) {
                  float v23 = v25;
                }
                *((float *)&v36 + 3) = v23;
                unsigned int v26 = *(_DWORD *)(*(void *)(v7 + 16) + 112);
                unsigned int v27 = *(_DWORD *)(*(void *)(v7 + 24) + 112);
                *(void *)&long long v37 = __PAIR64__(v27, v26);
                if (v27 < v26) {
                  *(void *)&long long v37 = __PAIR64__(v26, v27);
                }
                uint64_t v28 = *(void *)(v1 + 448);
                uint64_t v29 = *(unsigned int *)(v28 + 16);
                if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFFFu) <= v29)
                {
                  physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::growAndPushBack(v28, &v36);
                }
                else
                {
                  int v30 = (_OWORD *)(*(void *)(v28 + 8) + 32 * v29);
                  long long v31 = v37;
                  *int v30 = v36;
                  v30[1] = v31;
                  ++*(_DWORD *)(v28 + 16);
                }
              }
            }
          }
          v6 += 8;
          --v5;
        }
        while (v5);
      }
      ++v2;
      unsigned int v4 = v34;
    }
    while (v2 != v33);
  }
  else
  {
    int v35 = 0;
    int v3 = 0;
  }
  uint64_t v32 = *(void *)(v1 + 440);
  *(_DWORD *)(v32 + 1740) += v3;
  *(_DWORD *)(v32 + 1744) += v35;
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDDepenetrate>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDDepenetrate>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDDepenetrate>::runInternal(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 192);
  int v3 = *(_DWORD *)(v2 + 16 * *(unsigned int *)(v1 + 208) + 8) + (*(_DWORD *)(v1 + 208) << 7);
  if (v3)
  {
    for (unsigned int i = 0; i != v3; ++i)
    {
      unint64_t v5 = *(void *)(v2 + 16 * (i >> 7)) + ((unint64_t)(i & 0x7F) << 6);
      *(void *)(v5 + 48) = 0;
      *(_DWORD *)(v5 + 60) = 0;
    }
  }
  *(_DWORD *)(v1 + 232) = 0;
  *(_DWORD *)(*(void *)(v1 + 216) + 8) = 0;
  physx::PxsCCDContext::updateCCDEnd(v1);
  uint64_t v6 = *(void **)(v1 + 424);
  uint64_t v7 = *(void *)(*(void *)(v1 + 440) + 440);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 8));
  *uint64_t v6 = *(void *)v7;
  *(void *)uint64_t v7 = v6;
  return pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::BlockI"
    }
           "nfo>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::BlockInfo]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    unint64_t v11 = *(long long **)v3;
    uint64_t v12 = v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::Blo"
    }
           "ckInfo>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::BlockInfo]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    unint64_t v11 = *(long long **)v3;
    uint64_t v12 = v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Block"
    }
           "Info>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::BlockInfo]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    unint64_t v11 = *(long long **)v3;
    uint64_t v12 = v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*> const,physx::PxsCCDShape *>,physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v20 = *(_DWORD *)(a1 + 32);
  unsigned int v8 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v9 = ((-4 * (v3 + v8)) & 0xC) + 4 * (v3 + v8);
  uint64_t v10 = v9 + 24 * v8;
  if (v10) {
    unint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = &v11[4 * v3];
  uint64_t result = (uint64_t)memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v14 = 0;
    unsigned int v15 = v3 - 1;
    unint64_t v16 = &v11[v9 + 8];
    uint64_t v17 = (_OWORD *)(*(void *)(a1 + 8) + 8);
    do
    {
      uint64_t v18 = *((void *)v17 - 1);
      *((void *)v16 - 1) = v18;
      long long v19 = *v17;
      uint64_t v17 = (_OWORD *)((char *)v17 + 24);
      uint64_t result = physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(v18, v19);
      *(_DWORD *)&v12[4 * v14] = *(_DWORD *)&v11[4 * (result & v15)];
      *(_DWORD *)&v11[4 * (result & v15)] = v14;
      *(_OWORD *)unint64_t v16 = v19;
      v16 += 24;
      ++v14;
    }
    while (v14 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = &v11[v9];
  *(_DWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v20;
  }
  return result;
}

uint64_t physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  unint64_t v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  unint64_t v5 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  return (1000007 * ((v7 >> 31) ^ v7 ^ 0xFC955B95)) ^ (v4 >> 31) ^ v4;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::BlockI"
    }
           "nfo>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::BlockInfo]";
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unsigned int v8 = (_OWORD *)result;
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    unint64_t v11 = *(long long **)v3;
    uint64_t v12 = v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unsigned int v8 = &v6[v7];
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *unsigned int v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unsigned int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>::getName() [T = physx::PxsRigidBody *]";
  }
  else {
    unsigned int v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxsCCDPair *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>::allocate(8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(uint64_t **)a1;
  if (v6)
  {
    unint64_t v8 = result + 8 * v6;
    uint64_t v9 = (void *)result;
    do
    {
      uint64_t v10 = *v7++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v8);
    uint64_t v7 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v7) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDPair *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  unint64_t v8 = &v6[v7];
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)v3;
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *unint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)result + 16))();
    int v4 = (_OWORD *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 16);
  uint64_t v6 = *(long long **)(v3 + 8);
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[2 * v5];
    unint64_t v8 = v4;
    do
    {
      long long v9 = *v6;
      long long v10 = v6[1];
      v6 += 2;
      *unint64_t v8 = v9;
      v8[1] = v10;
      v8 += 2;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(long long **)(v3 + 8);
  }
  if ((*(_DWORD *)(v3 + 20) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 24))();
  }
  *(void *)(v3 + 8) = v4;
  *(_DWORD *)(v3 + 20) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate(result, 4 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (_DWORD *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(int **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    unint64_t v8 = *(int **)v3;
    long long v9 = v4;
    do
    {
      int v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<unsigned int>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBody const*,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody const*>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxsCCDBody *>::getName() [T = const physx::PxsCCDBody *]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  int v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    uint64_t v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    int v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<unsigned short>::allocate(result, 2 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = (_WORD *)result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(__int16 **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = *(__int16 **)v3;
    uint64_t v9 = v4;
    do
    {
      __int16 v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<unsigned short>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBody *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody *>::getName() [T = physx::PxsCCDBody *]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  __int16 v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    uint64_t v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    __int16 v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a1 + 16))();
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (v7)
  {
    unint64_t v8 = v6 + 32 * v7;
    uint64_t v9 = *(long long **)(a1 + 8);
    __int16 v10 = (_OWORD *)v6;
    do
    {
      long long v11 = *v9;
      long long v12 = v9[1];
      v9 += 2;
      _OWORD *v10 = v11;
      v10[1] = v12;
      v10 += 2;
    }
    while ((unint64_t)v10 < v8);
    uint64_t v13 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (_OWORD *)(v6 + 32 * v13);
  long long v15 = a2[1];
  _OWORD *v14 = *a2;
  v14[1] = v15;
  if ((*(_DWORD *)(a1 + 20) & 0x80000000) == 0 && *(void *)(a1 + 8)) {
    (*(void (**)(void))(**(void **)a1 + 24))();
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v16 + 1;
  *(_DWORD *)(a1 + 20) = v5;
  return v6 + 32 * v16;
}

uint64_t physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT(uint64_t a1)
{
  if (*(void *)a1) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return a1;
}

BOOL physx::Cm::PoolList<physx::PxsContactManager,physx::PxsContext>::extend(unsigned int *a1)
{
  uint64_t v2 = physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::allocate((uint64_t)a1, 120 * *a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 237);
  if (v2)
  {
    int v4 = *a1;
    unsigned int v3 = a1[1];
    unsigned int v5 = v3 + 1;
    if (*a1 * (v3 + 1) <= 32 * a1[14])
    {
      uint64_t v7 = (void *)*((void *)a1 + 4);
    }
    else
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)(a1 + 12), 2 * v5 * v4);
      if (*((void *)a1 + 2)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      *((void *)a1 + 2) = physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::allocate((uint64_t)a1, 8 * *a1 * 2 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 249);
      uint64_t v6 = (void *)physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::allocate((uint64_t)a1, 16 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 251);
      uint64_t v7 = v6;
      unint64_t v8 = (const void *)*((void *)a1 + 4);
      if (v8)
      {
        memcpy(v6, v8, 8 * v5);
        if (*((void *)a1 + 4)) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
      }
      *((void *)a1 + 4) = v7;
      int v4 = *a1;
      unsigned int v3 = a1[1];
      unsigned int v5 = v3 + 1;
    }
    a1[1] = v5;
    v7[v3] = v2;
    unsigned int v9 = a1[6];
    if (v4 - 1 < 0)
    {
      unsigned int v15 = a1[6];
    }
    else
    {
      uint64_t v10 = 120 * (v4 - 1);
      int v11 = v4 + v4 * v3 - 1;
      uint64_t v12 = -120;
      uint64_t v13 = v2;
      do
      {
        uint64_t v14 = v13 + v10;
        *(_DWORD *)(v14 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        *(void *)(v14 + 32) = 0;
        *(void *)(v14 + 40) = 0;
        *(_WORD *)(v14 + 84) = 257;
        *(void *)(v14 + 72) = 0;
        unsigned int v15 = v9 + 1;
        *(void *)(*((void *)a1 + 2) + 8 * v9) = v13 + v10;
        v12 += 120;
        *(_DWORD *)(v14 + 88) = v11;
        *(_DWORD *)(v14 + 92) = 0;
        *(unsigned char *)(v14 + 82) = 0;
        --v11;
        v13 -= 120;
        ++v9;
      }
      while (v10 != v12);
    }
    a1[6] = v15;
  }
  return v2 != 0;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::getName() [T = physx::PxsContactManager]";
  }
  else {
    unint64_t v8 = "<allocation names disabled>";
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::PoolBase<physx::Gu::SpherePersistentContactManifold,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 53re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v4 + 1;
  }
  unint64_t v5 = v3 + 144 * *(unsigned int *)(a1 + 544) - 144;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    uint64_t v7 = (unint64_t *)(v3 + 144 * *(unsigned int *)(a1 + 544) - 144);
    do
    {
      *uint64_t v7 = v6;
      v7 -= 18;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 18;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  uint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    int v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::Gu::LargePersistentContactManifold,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 53re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v4 + 1;
  }
  int v5 = (void *)(v3 + 288 * *(unsigned int *)(a1 + 544) - 288);
  if ((unint64_t)v5 >= v3)
  {
    uint64_t v6 = *(void **)(a1 + 560);
    do
    {
      *int v5 = v6;
      uint64_t v7 = v5 - 36;
      uint64_t v6 = v5;
      int v5 = v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 36;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  uint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    int v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

void physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::combine1<physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::OR>(uint64_t a1, int *a2, unsigned int a3)
{
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1, 32 * a3);
  LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(a1 + 8) & 0x7FFFFFFF;
  if (v6 >= a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = v6;
  }
  if (v6)
  {
    uint64_t v7 = *(_DWORD **)a1;
    do
    {
      int v8 = *a2++;
      *v7++ |= v8;
      --v6;
    }
    while (v6);
  }
}

uint64_t physx::shdfnd::Array<physx::shdfnd::VirtualAllocatorCallback *,physx::shdfnd::ReflectionAllocator<physx::shdfnd::VirtualAllocatorCallback *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::VirtualAllocatorCallback *>::getName() ["
    }
           "T = physx::shdfnd::VirtualAllocatorCallback *]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v8 = (void *)result;
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    int v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

double physx::IG::IslandSim::IslandSim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  double result = 0.0;
  *(void *)(a1 + 33re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 2048;
  *(void *)(a1 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 2048;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 49re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_OWORD *)(a1 + 21re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 600) = a2;
  *(void *)(a1 + 608) = a3;
  *(void *)(a1 + 61re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a4;
  *(void *)(a1 + 632) = a5;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_OWORD *)(a1 + 37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 53re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  return result;
}

_DWORD *physx::Cm::BlockArray<physx::IG::Edge>::reserve(_DWORD *result, unsigned int a2)
{
  unsigned int v2 = result[5];
  if (v2 < a2)
  {
    uint64_t v3 = (uint64_t)result;
    unsigned int v4 = result[6];
    unsigned int v5 = (a2 + v4 - 1) / v4;
    int v6 = result[2];
    int v7 = v5 - v6;
    result[5] = v2 + (v5 - v6) * v4;
    if (v5 != v6)
    {
      do
      {
        uint64_t v8 = *(unsigned int *)(v3 + 24);
        if (v8) {
          double result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        }
        else {
          double result = 0;
        }
        uint64_t v10 = result;
        uint64_t v9 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v9)
        {
          double result = (_DWORD *)physx::shdfnd::Array<physx::IG::Edge *,physx::shdfnd::ReflectionAllocator<physx::IG::Edge *>>::growAndPushBack(v3, &v10);
        }
        else
        {
          *(void *)(*(void *)v3 + 8 * v9) = result;
          *(_DWORD *)(v3 + 8) = v9 + 1;
        }
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

_DWORD *physx::Cm::BlockArray<physx::IG::EdgeInstance>::reserve(_DWORD *result, unsigned int a2)
{
  unsigned int v2 = result[5];
  if (v2 < a2)
  {
    uint64_t v3 = (uint64_t)result;
    unsigned int v4 = result[6];
    unsigned int v5 = (a2 + v4 - 1) / v4;
    int v6 = result[2];
    int v7 = v5 - v6;
    result[5] = v2 + (v5 - v6) * v4;
    if (v5 != v6)
    {
      do
      {
        uint64_t v8 = *(unsigned int *)(v3 + 24);
        if (v8) {
          double result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        }
        else {
          double result = 0;
        }
        uint64_t v10 = result;
        uint64_t v9 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v9)
        {
          double result = (_DWORD *)physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::growAndPushBack(v3, &v10);
        }
        else
        {
          *(void *)(*(void *)v3 + 8 * v9) = result;
          *(_DWORD *)(v3 + 8) = v9 + 1;
        }
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

void physx::IG::IslandSim::addNode(uint64_t a1, int a2, int a3, int a4, unsigned int a5)
{
  unsigned int v10 = a5 >> 7;
  uint64_t v11 = a1 + 24;
  if (a5 >> 7 == (*(_DWORD *)(a1 + 36) & 0x7FFFFFFF))
  {
    if (2 * v10 <= 0x100) {
      unsigned int v12 = 256;
    }
    else {
      unsigned int v12 = 2 * v10;
    }
    physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::recreate(a1 + 24, v12);
    if ((*(_DWORD *)(a1 + 284) & 0x7FFFFFFFu) < v12) {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 272, v12);
    }
    if ((*(_DWORD *)(a1 + 268) & 0x7FFFFFFFu) < v12) {
      physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::recreate(a1 + 256, v12);
    }
    if ((*(_DWORD *)(a1 + 252) & 0x7FFFFFFFu) < v12) {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 240, v12);
    }
    if ((*(_DWORD *)(a1 + 52) & 0x7FFFFFFFu) < v12) {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 40, v12);
    }
  }
  if (v10 + 1 > *(_DWORD *)(a1 + 32)) {
    unsigned int v13 = v10 + 1;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 32);
  }
  *(void *)&long long v27 = 0x8FFFFFFFFLL;
  *((void *)&v27 + 1) = 0x7F0000007FLL;
  LODWORD(v28) = 0;
  uint64_t v29 = 0;
  physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::resize(v11, v13, &v27);
  LODWORD(v27) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 272, v13, &v27);
  LODWORD(v27) = -128;
  physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::resize(a1 + 256, v13, &v27);
  LODWORD(v27) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 240, v13, &v27);
  LODWORD(v27) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 40, v13, &v27);
  uint64_t v14 = v10;
  *(_DWORD *)(*(void *)(a1 + 40) + 4 * v10) = 0x1FFFFFF;
  uint64_t v15 = *(void *)(a1 + 24) + 32 * v10;
  *(unsigned char *)(v15 + 5) = a4;
  char v16 = a2 ^ 1;
  if (a3) {
    char v16 = a2 ^ 1 | 4;
  }
  *(unsigned char *)(v15 + 4) = v16;
  *(_DWORD *)(*(void *)(a1 + 272) + 4 * v10) = -1;
  *(_DWORD *)(*(void *)(a1 + 256) + 4 * v10) = -128;
  *(_DWORD *)(*(void *)(a1 + 240) + 4 * v10) = 0;
  if ((a3 & 1) == 0)
  {
    int v17 = *(_DWORD *)(a1 + 8);
    if (v17)
    {
      unsigned int v18 = v17 - 1;
      unsigned int v19 = *(_DWORD *)(*(void *)a1 + 4 * v18);
      *(_DWORD *)(a1 + 8) = v18;
    }
    else
    {
      unsigned int v19 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v19 + 1;
    }
    if (v19 == (*(_DWORD *)(a1 + 132) & 0x7FFFFFFF))
    {
      uint64_t v20 = 2 * v19 <= 0x100 ? 256 : 2 * v19;
      physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::recreate(a1 + 120, v20);
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 288, v20);
      if ((*(_DWORD *)(a1 + 148) & 0x7FFFFFFFu) < v20) {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 136, v20);
      }
    }
    unsigned int v21 = v19 + 1;
    unsigned int v22 = *(_DWORD *)(a1 + 128);
    *(void *)&long long v27 = 0x7F0000007FLL;
    if (v19 + 1 > v22) {
      uint64_t v23 = v19 + 1;
    }
    else {
      uint64_t v23 = v22;
    }
    uint64_t v28 = -1;
    uint64_t v29 = -1;
    int v30 = -1;
    uint64_t v31 = 0;
    *((void *)&v27 + 1) = 0;
    physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::resize(a1 + 120, v23, &v27);
    if (v21 > *(_DWORD *)(a1 + 128)) {
      unsigned int v24 = v19 + 1;
    }
    else {
      unsigned int v24 = *(_DWORD *)(a1 + 128);
    }
    LODWORD(v27) = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 136, v24, &v27);
    if (v21 > *(_DWORD *)(a1 + 128)) {
      unsigned int v25 = v19 + 1;
    }
    else {
      unsigned int v25 = *(_DWORD *)(a1 + 128);
    }
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 288, v25 + 1);
    *(_DWORD *)(*(void *)(a1 + 288) + 4 * (v25 >> 5)) &= ~(1 << v25);
    unsigned int v26 = (int32x2_t *)(*(void *)(a1 + 120) + 44 * v19);
    *unsigned int v26 = vdup_n_s32(a5);
    v26[1].i32[a4] = 1;
    *(_DWORD *)(*(void *)(a1 + 272) + 4 * v14) = v19;
    *(_DWORD *)(*(void *)(a1 + 136) + 4 * v19) = 0;
  }
  if (a2) {
    physx::IG::IslandSim::activateNode(a1, a5);
  }
}

uint64_t physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    double result = physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 32 * a2;
    uint64_t v8 = (_OWORD *)(*(void *)v5 + 32 * v6);
    do
    {
      long long v9 = a3[1];
      *uint64_t v8 = *a3;
      v8[1] = v9;
      v8 += 2;
    }
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    double result = physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 4 * a2;
    uint64_t v8 = (_DWORD *)(*(void *)v5 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::resize(uint64_t result, uint64_t a2, long long *a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    double result = physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::recreate(result, a2);
  }
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    unint64_t v7 = *(void *)v5 + 44 * v4;
    uint64_t v8 = (_OWORD *)(*(void *)v5 + 44 * v6);
    do
    {
      long long v9 = *a3;
      long long v10 = a3[1];
      *(_OWORD *)((char *)v8 + 28) = *(long long *)((char *)a3 + 28);
      *uint64_t v8 = v9;
      v8[1] = v10;
      uint64_t v8 = (_OWORD *)((char *)v8 + 44);
    }
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

uint64_t physx::IG::IslandSim::activateNode(uint64_t result, unsigned int a2)
{
  unsigned int v18 = a2;
  unsigned int v2 = a2 >> 7;
  if (a2 >> 7 != 0x1FFFFFF)
  {
    uint64_t v3 = *(void *)(result + 24);
    uint64_t v4 = v2;
    uint64_t v5 = v3 + 32 * v2;
    int v8 = *(unsigned __int8 *)(v5 + 4);
    unint64_t v7 = (char *)(v5 + 4);
    char v6 = v8;
    if ((v8 & 0x22222222) == 0)
    {
      uint64_t v9 = *(void *)(result + 40);
      if ((v6 & 4) != 0 && *(_DWORD *)(v9 + 4 * v4) != 0x1FFFFFF)
      {
        uint64_t v10 = v3 + 32 * v4;
        int v13 = *(_DWORD *)(v10 + 16);
        uint64_t v11 = (_DWORD *)(v10 + 16);
        int v12 = v13;
        *uint64_t v11 = 0;
        v6 &= ~2u;
        int v14 = *(_DWORD *)(v9 + 4 * v4);
        if (v14 != 0x1FFFFFF)
        {
          uint64_t v15 = *(void *)(result + 184);
          unint64_t v16 = *(unsigned int *)(v15 + 4 * (*(_DWORD *)(result + 192) - 1));
          *(_DWORD *)(v9 + ((v16 >> 5) & 0x7FFFFFC)) = v14;
          *(_DWORD *)(v15 + 4 * *(unsigned int *)(v9 + 4 * v4)) = v16;
          --*(_DWORD *)(result + 192);
          *(_DWORD *)(v9 + 4 * v4) = 0x1FFFFFF;
        }
        *uint64_t v11 = v12;
      }
      v6 |= 0x20u;
      *unint64_t v7 = v6;
      *(_DWORD *)(v9 + 4 * v4) = *(_DWORD *)(result + 440);
      uint64_t v17 = *(unsigned int *)(result + 440);
      if ((*(_DWORD *)(result + 444) & 0x7FFFFFFFu) <= v17)
      {
        double result = physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(result + 432, &v18);
        char v6 = *v7;
      }
      else
      {
        *(_DWORD *)(*(void *)(result + 432) + 4 * v17) = a2;
        ++*(_DWORD *)(result + 440);
      }
    }
    *unint64_t v7 = v6 & 0xBE;
  }
  return result;
}

void *physx::IG::IslandSim::addConnection(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v21 = a5;
  int v8 = (_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 76) <= a5)
  {
    physx::Cm::BlockArray<physx::IG::Edge>::reserve((_DWORD *)(a1 + 56), a5 + 2048);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 304, *(_DWORD *)(a1 + 76));
  }
  if (*(_DWORD *)(a1 + 72) <= a5 + 1) {
    unsigned int v9 = a5 + 1;
  }
  else {
    unsigned int v9 = *(_DWORD *)(a1 + 72);
  }
  double result = physx::Cm::BlockArray<physx::IG::Edge>::reserve(v8, v9);
  unsigned int v11 = *(_DWORD *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 56);
  if (v11 < v9)
  {
    do
    {
      uint64_t v13 = *(void *)(v12 + 8 * (v11 / *(_DWORD *)(a1 + 80))) + 16 * (v11 % *(_DWORD *)(a1 + 80));
      *(_DWORD *)uint64_t v13 = 0;
      *(_WORD *)(v13 + 4) = 16;
      *(void *)(v13 + 8) = -1;
      ++v11;
    }
    while (v9 != v11);
  }
  *(_DWORD *)(a1 + 72) = v9;
  *(_DWORD *)(*(void *)(a1 + 304) + 4 * (a5 >> 5)) &= ~(1 << a5);
  uint64_t v14 = *(void *)(v12 + 8 * (a5 / *(_DWORD *)(a1 + 80))) + 16 * (a5 % *(_DWORD *)(a1 + 80));
  unint64_t v16 = (__int16 *)(v14 + 4);
  __int16 v15 = *(_WORD *)(v14 + 4);
  if ((v15 & 2) != 0)
  {
    __int16 v20 = v15 & 0xFFFD;
  }
  else
  {
    if ((v15 & 8) != 0) {
      return result;
    }
    __int16 v17 = v15 & 0xFFEF;
    __int16 *v16 = v17;
    *(_DWORD *)uint64_t v14 = a4;
    uint64_t v18 = a1 + 16 * a4;
    double result = (void *)(v18 + 376);
    uint64_t v19 = *(unsigned int *)(v18 + 384);
    if ((*(_DWORD *)(v18 + 388) & 0x7FFFFFFFu) <= v19)
    {
      double result = (void *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)result, &v21);
      __int16 v17 = *v16;
    }
    else
    {
      *(_DWORD *)(*result + 4 * v19) = a5;
      ++*(_DWORD *)(v18 + 384);
    }
    __int16 v20 = v17 & 0xFFB7 | 8;
  }
  __int16 *v16 = v20;
  return result;
}

void physx::IG::IslandSim::removeConnectionFromGraph(physx::IG::IslandSim *this, int a2)
{
  uint64_t v3 = (uint64_t *)*((void *)this + 76);
  unsigned int v4 = *((_DWORD *)v3 + 6);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(v5 + 8 * (2 * a2 / v4));
  unint64_t v7 = *(unsigned int *)(v6 + 4 * (2 * a2 % v4));
  unint64_t v8 = *(unsigned int *)(*(void *)(v5 + 8 * (((2 * a2) | 1u) / v4)) + 4 * (((2 * a2) | 1u) % v4));
  unint64_t v9 = v7 >> 7;
  if (*(_DWORD *)(v6 + 4 * (2 * a2 % v4)) >> 7 != 0x1FFFFFF)
  {
    uint64_t v10 = *((void *)this + 3);
    uint64_t v11 = *((void *)this + 32);
    if ((*(_DWORD *)(v11 + 4 * v9) ^ v8) <= 0x7F) {
      *(_DWORD *)(v11 + 4 * v9) = -128;
    }
    uint64_t v12 = v10 + 32 * v9;
    char v14 = *(unsigned char *)(v12 + 4);
    uint64_t v13 = (unsigned char *)(v12 + 4);
    if ((v14 & 0x10) == 0)
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 408, v9 + 1);
      *(_DWORD *)(*((void *)this + 51) + ((v7 >> 10) & 0x3FFFFC)) |= 1 << (v7 >> 7);
      *v13 |= 0x10u;
    }
  }
  unint64_t v15 = v8 >> 7;
  if ((v8 >> 7) != 0x1FFFFFF)
  {
    uint64_t v16 = *((void *)this + 3);
    uint64_t v17 = *((void *)this + 32);
    if (v9 == *(_DWORD *)(v17 + 4 * v15) >> 7) {
      *(_DWORD *)(v17 + 4 * v15) = -128;
    }
    uint64_t v18 = v16 + 32 * v15;
    char v20 = *(unsigned char *)(v18 + 4);
    uint64_t v19 = (unsigned char *)(v18 + 4);
    if ((v20 & 0x10) == 0)
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 408, v15 + 1);
      *(_DWORD *)(*((void *)this + 51) + ((v8 >> 10) & 0x3FFFFC)) |= 1 << (v8 >> 7);
      *v19 |= 0x10u;
    }
  }
}

double physx::IG::IslandSim::disconnectEdge(uint64_t a1, unsigned int *a2, int a3, unsigned int *a4)
{
  if (*a4 == a3)
  {
    unsigned int v4 = *a2;
    *a4 = *a2;
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8 * (a2[1] / *(_DWORD *)(a1 + 112)))
              + 8 * (a2[1] % *(_DWORD *)(a1 + 112))) = *a2;
    unsigned int v4 = *a2;
  }
  if (v4 != -1) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8 * (v4 / *(_DWORD *)(a1 + 112)))
  }
              + 8 * (v4 % *(_DWORD *)(a1 + 112))
              + 4) = a2[1];
  double result = NAN;
  *(void *)a2 = -1;
  return result;
}

uint64_t physx::IG::IslandSim::removeConnection(uint64_t this, unsigned int a2)
{
  unsigned int v7 = a2;
  uint64_t v2 = *(void *)(*(void *)(this + 56) + 8 * (a2 / *(_DWORD *)(this + 80))) + 16 * (a2 % *(_DWORD *)(this + 80));
  __int16 v5 = *(_WORD *)(v2 + 4);
  unsigned int v4 = (__int16 *)(v2 + 4);
  __int16 v3 = v5;
  if ((v5 & 2) == 0)
  {
    uint64_t v6 = *(unsigned int *)(this + 456);
    if ((*(_DWORD *)(this + 460) & 0x7FFFFFFFu) <= v6)
    {
      this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(this + 448, &v7);
      __int16 v3 = *v4;
    }
    else
    {
      *(_DWORD *)(*(void *)(this + 448) + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2;
      ++*(_DWORD *)(this + 456);
    }
  }
  *unsigned int v4 = v3 | 2;
  return this;
}

double physx::IG::IslandSim::removeConnectionInternal(physx::IG::IslandSim *this, int a2)
{
  unsigned int v3 = 2 * a2;
  unsigned int v4 = (uint64_t *)*((void *)this + 76);
  unsigned int v5 = *((_DWORD *)v4 + 6);
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(v6 + 8 * (2 * a2 / v5));
  unint64_t v8 = (unint64_t)*(unsigned int *)(v7 + 4 * (2 * a2 % v5)) >> 7;
  if (*(_DWORD *)(v7 + 4 * (2 * a2 % v5)) >> 7 != 0x1FFFFFF)
  {
    double result = physx::IG::IslandSim::disconnectEdge((uint64_t)this, (unsigned int *)(*(void *)(*((void *)this + 11) + 8 * (v3 / *((_DWORD *)this + 28)))+ 8 * (v3 % *((_DWORD *)this + 28))), v3, (unsigned int *)(*((void *)this + 3) + 32 * v8));
    uint64_t v10 = (uint64_t *)*((void *)this + 76);
    unsigned int v5 = *((_DWORD *)v10 + 6);
    uint64_t v6 = *v10;
  }
  unsigned int v11 = v3 | 1;
  unint64_t v12 = (unint64_t)*(unsigned int *)(*(void *)(v6 + 8 * (v11 / v5)) + 4 * (v11 % v5)) >> 7;
  if (v12 != 0x1FFFFFF && v8 != v12)
  {
    char v14 = (unsigned int *)(*((void *)this + 3) + 32 * v12);
    unint64_t v15 = (unsigned int *)(*(void *)(*((void *)this + 11) + 8 * (v11 / *((_DWORD *)this + 28)))
                         + 8 * (v11 % *((_DWORD *)this + 28)));
    return physx::IG::IslandSim::disconnectEdge((uint64_t)this, v15, v11, v14);
  }
  return result;
}

uint64_t physx::IG::IslandSim::deactivateNode(uint64_t result, unsigned int a2)
{
  unsigned int v13 = a2;
  unsigned int v2 = a2 >> 7;
  if (a2 >> 7 != 0x1FFFFFF)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(result + 24) + 32 * v2;
    char v7 = *(unsigned char *)(v4 + 4);
    uint64_t v6 = (char *)(v4 + 4);
    char v5 = v7;
    if ((v7 & 0x20) != 0)
    {
      char v8 = v5 & 0xDF;
      uint64_t v9 = *(void *)(result + 432);
      unint64_t v10 = *(unsigned int *)(v9 + 4 * (*(_DWORD *)(result + 440) - 1));
      *uint64_t v6 = v5 & 0xDF;
      uint64_t v11 = *(void *)(result + 40);
      *(_DWORD *)(v11 + ((v10 >> 5) & 0x7FFFFFC)) = *(_DWORD *)(v11 + 4 * v3);
      *(_DWORD *)(v9 + 4 * *(unsigned int *)(v11 + 4 * v3)) = v10;
      --*(_DWORD *)(result + 440);
      *(_DWORD *)(v11 + 4 * v3) = 0x1FFFFFF;
      if ((v5 & 4) != 0)
      {
        *(_DWORD *)(v11 + 4 * v3) = *(_DWORD *)(result + 192);
        uint64_t v12 = *(unsigned int *)(result + 192);
        if ((*(_DWORD *)(result + 196) & 0x7FFFFFFFu) <= v12)
        {
          double result = physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(result + 184, &v13);
          char v8 = *v6;
        }
        else
        {
          *(_DWORD *)(*(void *)(result + 184) + 4 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
          ++*(_DWORD *)(result + 192);
        }
      }
    }
    else
    {
      char v8 = v5;
    }
    *uint64_t v6 = v8 | 1;
  }
  return result;
}

unsigned int *physx::IG::IslandSim::activateNodeInternal(unsigned int *result, unsigned int a2)
{
  uint64_t v2 = *((void *)result + 3);
  uint64_t v3 = a2 >> 7;
  uint64_t v4 = v2 + 32 * v3;
  char v7 = *(unsigned char *)(v4 + 4);
  uint64_t v6 = (char *)(v4 + 4);
  char v5 = v7;
  if ((v7 & 2) == 0)
  {
    uint64_t v9 = result;
    unsigned int v10 = *(_DWORD *)(v2 + 32 * v3);
    if (v10 != -1)
    {
      uint64_t v47 = (uint64_t)(result + 46);
      do
      {
        unsigned int v11 = v10 >> 1;
        uint64_t v12 = (unsigned int *)(*(void *)(*((void *)v9 + 7) + 8 * (v11 / v9[20])) + 16 * (v11 % v9[20]));
        char v14 = v12 + 1;
        __int16 v13 = *((_WORD *)v12 + 2);
        if ((v13 & 4) == 0)
        {
          unsigned int v48 = v10 >> 1;
          _WORD *v14 = v13 | 0x40;
          uint64_t v15 = *v12;
          uint64_t v16 = &v9[4 * v15];
          unsigned int v19 = v16[52];
          uint64_t v17 = v16 + 52;
          uint64_t v18 = v19;
          double result = v17 - 2;
          if ((v17[1] & 0x7FFFFFFFu) <= v19)
          {
            double result = (unsigned int *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)result, &v48);
            uint64_t v15 = *v12;
          }
          else
          {
            *(_DWORD *)(*(void *)result + 4 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v11;
            ++*v17;
          }
          ++v9[v15 + 58];
          if (!v15) {
            *(_DWORD *)(*((void *)v9 + 38) + (((unint64_t)v48 >> 3) & 0x1FFFFFFC)) |= 1 << v48;
          }
          char v20 = (uint64_t *)*((void *)v9 + 76);
          unsigned int v21 = *((_DWORD *)v20 + 6);
          uint64_t v22 = *v20;
          uint64_t v23 = *(void *)(v22 + 8 * (2 * v48 / v21));
          unint64_t v24 = *(unsigned int *)(v23 + 4 * (2 * v48 % v21));
          unint64_t v25 = *(unsigned int *)(*(void *)(v22 + 8 * (((2 * v48) | 1) / v21)) + 4 * (((2 * v48) | 1) % v21));
          unint64_t v26 = v24 >> 7;
          unint64_t v27 = v25 >> 7;
          if (*(_DWORD *)(v23 + 4 * (2 * v48 % v21)) >> 7 != 0x1FFFFFF && v27 != 0x1FFFFFF)
          {
            uint64_t v29 = *((void *)v9 + 3);
            uint64_t v30 = v29 + 32 * v26;
            int v33 = *(_DWORD *)(v30 + 16);
            uint64_t v32 = (int *)(v30 + 16);
            int v31 = v33;
            if (!v33)
            {
              if ((*(unsigned char *)(v29 + 32 * v26 + 4) & 0x26) == 4)
              {
                int v49 = v24;
                if (!*v32)
                {
                  uint64_t v34 = *((void *)v9 + 5);
                  if (*(_DWORD *)(v34 + 4 * v26) == 0x1FFFFFF)
                  {
                    *(_DWORD *)(v34 + 4 * v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9[48];
                    uint64_t v35 = v9[48];
                    if ((v9[49] & 0x7FFFFFFF) <= v35)
                    {
                      double result = (unsigned int *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v47, &v49);
                      uint64_t v29 = *((void *)v9 + 3);
                    }
                    else
                    {
                      *(_DWORD *)(*((void *)v9 + 23) + 4 * v35) = v49;
                      ++v9[48];
                    }
                  }
                }
                int v31 = *v32;
              }
              else
              {
                int v31 = 0;
              }
            }
            *uint64_t v32 = v31 + 1;
            uint64_t v36 = v29 + 32 * v27;
            char v38 = (int *)(v36 + 16);
            int v37 = *(_DWORD *)(v36 + 16);
            if (!v37)
            {
              if ((*(unsigned char *)(v36 + 4) & 0x26) == 4)
              {
                int v49 = v25;
                if (!*v38)
                {
                  uint64_t v39 = *((void *)v9 + 5);
                  if (*(_DWORD *)(v39 + 4 * v27) == 0x1FFFFFF)
                  {
                    *(_DWORD *)(v39 + 4 * v27) = v9[48];
                    uint64_t v40 = v9[48];
                    if ((v9[49] & 0x7FFFFFFF) <= v40)
                    {
                      double result = (unsigned int *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v47, &v49);
                    }
                    else
                    {
                      *(_DWORD *)(*((void *)v9 + 23) + 4 * v40) = v49;
                      ++v9[48];
                    }
                  }
                }
                int v37 = *v38;
              }
              else
              {
                int v37 = 0;
              }
            }
            int *v38 = v37 + 1;
          }
          *v14 |= 4u;
        }
        unsigned int v10 = *(_DWORD *)(*(void *)(*((void *)v9 + 11) + 8 * (v10 / v9[28])) + 8 * (v10 % v9[28]));
      }
      while (v10 != -1);
      char v5 = *v6;
    }
    if ((v5 & 4) != 0)
    {
      int v49 = a2;
      if (*(_DWORD *)(*((void *)v9 + 3) + 32 * v3 + 16)) {
        goto LABEL_45;
      }
      uint64_t v45 = *((void *)v9 + 5);
      if (*(_DWORD *)(v45 + 4 * v3) != 0x1FFFFFF) {
        goto LABEL_45;
      }
      *(_DWORD *)(v45 + 4 * v3) = v9[48];
      uint64_t v46 = v9[48];
      if ((v9[49] & 0x7FFFFFFF) > v46)
      {
        *(_DWORD *)(*((void *)v9 + 23) + 4 * v4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2;
        ++v9[48];
        goto LABEL_45;
      }
      double result = v9 + 46;
    }
    else
    {
      int v49 = a2;
      float v41 = &v9[4 * *(unsigned __int8 *)(*((void *)v9 + 3) + 32 * v3 + 5)];
      unsigned int v43 = v41[40];
      uint64_t v42 = v41 + 40;
      double result = v42 - 2;
      *(_DWORD *)(*((void *)v9 + 5) + 4 * v3) = v43;
      uint64_t v44 = *v42;
      if ((v42[1] & 0x7FFFFFFF) > v44)
      {
        *(_DWORD *)(*(void *)result + 4 * v44) = a2;
        ++*v42;
LABEL_45:
        *v6 |= 2u;
        return result;
      }
    }
    double result = (unsigned int *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)result, &v49);
    goto LABEL_45;
  }
  return result;
}

uint64_t physx::IG::IslandSim::removeEdgeFromActivatingList(uint64_t this, unsigned int a2)
{
  uint64_t v2 = (unsigned int *)(*(void *)(*(void *)(this + 56) + 8 * (a2 / *(_DWORD *)(this + 80)))
                      + 16 * (a2 % *(_DWORD *)(this + 80)));
  __int16 v3 = *((_WORD *)v2 + 2);
  if ((v3 & 0x40) != 0)
  {
    uint64_t v4 = this + 16 * *v2;
    unsigned int v7 = *(_DWORD *)(v4 + 208);
    char v5 = (_DWORD *)(v4 + 208);
    uint64_t v6 = v7;
    if (v7)
    {
      char v8 = *(_DWORD **)(this + 16 * *v2 + 200);
      uint64_t v9 = v6;
      unsigned int v10 = v8;
      while (*v10 != a2)
      {
        ++v10;
        if (!--v9) {
          goto LABEL_8;
        }
      }
      int v11 = v6 - 1;
      *char v5 = v11;
      _DWORD *v10 = v8[v11];
    }
LABEL_8:
    *((_WORD *)v2 + 2) = v3 & 0xFFBF;
  }
  uint64_t v12 = *(uint64_t **)(this + 608);
  unsigned int v13 = *((_DWORD *)v12 + 6);
  uint64_t v14 = *v12;
  unint64_t v15 = *(unsigned int *)(*(void *)(*v12 + 8 * (2 * a2 / v13)) + 4 * (2 * a2 % v13));
  if (v15 <= 0xFFFFFF7F)
  {
    unint64_t v16 = *(unsigned int *)(*(void *)(v14 + 8 * (((2 * a2) | 1) / v13)) + 4 * (((2 * a2) | 1) % v13));
    if (v16 <= 0xFFFFFF7F)
    {
      uint64_t v17 = *(void *)(this + 24);
      --*(_DWORD *)(v17 + ((v15 >> 2) & 0x3FFFFFE0) + 16);
      --*(_DWORD *)(v17 + ((v16 >> 2) & 0x3FFFFFE0) + 16);
    }
  }
  if (!*v2) {
    *(_DWORD *)(*(void *)(this + 304) + 4 * (a2 >> 5)) &= ~(1 << a2);
  }
  return this;
}

unsigned int *physx::IG::IslandSim::activateIsland(unsigned int *this, unsigned int a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)this + 15);
  unint64_t v6 = *(unsigned int *)(v4 + 44 * a2);
  unint64_t v7 = v6 >> 7;
  if (v6 >> 7 != 0x1FFFFFF)
  {
    do
    {
      this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v3, v6);
      unint64_t v6 = *(unsigned int *)(*(void *)(v3 + 24) + 32 * v7 + 8);
      unint64_t v7 = v6 >> 7;
    }
    while (v6 >> 7 != 0x1FFFFFF);
    uint64_t v4 = *(void *)(v3 + 120);
  }
  unsigned int v9 = a2;
  *(_DWORD *)(*(void *)(v3 + 288) + 4 * (a2 >> 5)) |= 1 << a2;
  uint64_t v8 = *(unsigned int *)(v3 + 328);
  *(_DWORD *)(v4 + 44 * a2 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v8;
  if ((*(_DWORD *)(v3 + 332) & 0x7FFFFFFFu) <= v8) {
    return (unsigned int *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 320, &v9);
  }
  *(_DWORD *)(*(void *)(v3 + 320) + 4 * v8) = a2;
  ++*(_DWORD *)(v3 + 328);
  return this;
}

_DWORD *physx::IG::IslandSim::wakeIslands(_DWORD *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v2 = 0;
  unint64_t v3 = this[82];
  char v4 = 1;
  do
  {
    char v5 = v4;
    unint64_t v6 = &this[4 * v2];
    uint64_t v7 = v6[52];
    if (v7)
    {
      uint64_t v8 = (unsigned int *)*((void *)v6 + 25);
      unsigned int v9 = this[20];
      uint64_t v10 = *((void *)this + 7);
      do
      {
        unsigned int v11 = *v8++;
        uint64_t v12 = *(void *)(v10 + 8 * (v11 / v9)) + 16 * (v11 % v9);
        *(_WORD *)(v12 + 4) &= ~0x40u;
        --v7;
      }
      while (v7);
    }
    char v4 = 0;
    uint64_t v2 = 1;
  }
  while ((v5 & 1) != 0);
  this[52] = 0;
  this[56] = 0;
  if (this[110])
  {
    unint64_t v13 = 0;
    uint64_t v64 = (uint64_t)(this + 80);
    unint64_t v62 = v3;
    uint64_t v63 = (uint64_t)(this + 46);
    do
    {
      unsigned int v65 = *(_DWORD *)(*(void *)(v1 + 432) + 4 * v13);
      unint64_t v14 = (unint64_t)v65 >> 7;
      unint64_t v15 = *(unsigned int *)(*(void *)(v1 + 272) + 4 * v14);
      uint64_t v16 = *(void *)(v1 + 24) + 32 * v14;
      char v17 = *(unsigned char *)(v16 + 4) & 0xDF;
      *(unsigned char *)(v16 + 4) = v17;
      if (v15 == -1)
      {
        *(unsigned char *)(v16 + 4) = v17 | 2;
        *(_DWORD *)(*(void *)(v1 + 40) + 4 * v14) = *(_DWORD *)(v1 + 192);
        uint64_t v21 = *(unsigned int *)(v1 + 192);
        if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v21)
        {
          this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v63, &v65);
        }
        else
        {
          *(_DWORD *)(*(void *)(v1 + 184) + 4 * v21) = v65;
          ++*(_DWORD *)(v1 + 192);
        }
        for (unsigned int i = *(_DWORD *)v16; i != -1; unsigned int i = *(_DWORD *)(v24 + 8 * (i % v23)))
        {
          unsigned int v23 = *(_DWORD *)(v1 + 112);
          uint64_t v24 = *(void *)(*(void *)(v1 + 88) + 8 * (i / v23));
          unint64_t v25 = *(unsigned int *)(*(void *)(**(void **)(v1 + 608)
                                            + 8 * ((i ^ 1) / *(_DWORD *)(*(void *)(v1 + 608) + 24)))
                                + 4 * ((i ^ 1) % *(_DWORD *)(*(void *)(v1 + 608) + 24)));
          if (v25 > 0xFFFFFF7F
            || (unint64_t v26 = *(unsigned int *)(*(void *)(v1 + 272) + ((v25 >> 5) & 0x7FFFFFC)), v26 == -1))
          {
            unsigned int v30 = i >> 1;
            int v31 = (unsigned int *)(*(void *)(*(void *)(v1 + 56) + 8 * (v30 / *(_DWORD *)(v1 + 80)))
                                 + 16 * (v30 % *(_DWORD *)(v1 + 80)));
            int v33 = v31 + 1;
            __int16 v32 = *((_WORD *)v31 + 2);
            if ((v32 & 4) == 0)
            {
              uint64_t v34 = *v31;
              if (v34 != 1)
              {
                unsigned int v66 = i >> 1;
                *int v33 = v32 | 0x40;
                uint64_t v35 = v1 + 16 * v34;
                unsigned int v38 = *(_DWORD *)(v35 + 208);
                uint64_t v36 = (_DWORD *)(v35 + 208);
                uint64_t v37 = v38;
                this = v36 - 2;
                if ((v36[1] & 0x7FFFFFFFu) <= v38)
                {
                  this = (_DWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)this, &v66);
                  uint64_t v34 = *v31;
                }
                else
                {
                  *(_DWORD *)(*(void *)this + 4 * v37) = v30;
                  ++*v36;
                }
                ++*(_DWORD *)(v1 + 4 * v34 + 232);
                if (!v34) {
                  *(_DWORD *)(*(void *)(v1 + 304) + (((unint64_t)v66 >> 3) & 0x1FFFFFFC)) |= 1 << v66;
                }
                uint64_t v39 = *(uint64_t **)(v1 + 608);
                unsigned int v40 = *((_DWORD *)v39 + 6);
                uint64_t v41 = *v39;
                unint64_t v42 = *(unsigned int *)(*(void *)(*v39 + 8 * (2 * v66 / v40)) + 4 * (2 * v66 % v40));
                unint64_t v43 = v42 >> 7;
                if ((v42 >> 7) != 0x1FFFFFF)
                {
                  unint64_t v44 = *(unsigned int *)(*(void *)(v41 + 8 * (((2 * v66) | 1) / v40))
                                        + 4 * (((2 * v66) | 1) % v40));
                  unint64_t v45 = v44 >> 7;
                  if (*(_DWORD *)(*(void *)(v41 + 8 * (((2 * v66) | 1) / v40)) + 4 * (((2 * v66) | 1) % v40)) >> 7 != 0x1FFFFFF)
                  {
                    uint64_t v46 = *(void *)(v1 + 24);
                    uint64_t v47 = v46 + 32 * v43;
                    int v50 = *(_DWORD *)(v47 + 16);
                    int v49 = (int *)(v47 + 16);
                    int v48 = v50;
                    if (!v50)
                    {
                      if ((*(unsigned char *)(v46 + 32 * v43 + 4) & 0x26) == 4)
                      {
                        int v67 = v42;
                        if (!*v49)
                        {
                          uint64_t v51 = *(void *)(v1 + 40);
                          if (*(_DWORD *)(v51 + 4 * v43) == 0x1FFFFFF)
                          {
                            *(_DWORD *)(v51 + 4 * v43) = *(_DWORD *)(v1 + 192);
                            uint64_t v52 = *(unsigned int *)(v1 + 192);
                            if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v52)
                            {
                              this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v63, &v67);
                              uint64_t v46 = *(void *)(v1 + 24);
                            }
                            else
                            {
                              *(_DWORD *)(*(void *)(v1 + 184) + 4 * v52) = v67;
                              ++*(_DWORD *)(v1 + 192);
                            }
                          }
                        }
                        int v48 = *v49;
                      }
                      else
                      {
                        int v48 = 0;
                      }
                    }
                    *int v49 = v48 + 1;
                    uint64_t v53 = v46 + 32 * v45;
                    uint64_t v55 = (int *)(v53 + 16);
                    int v54 = *(_DWORD *)(v53 + 16);
                    if (!v54)
                    {
                      if ((*(unsigned char *)(v53 + 4) & 0x26) == 4)
                      {
                        int v67 = v44;
                        if (!*v55)
                        {
                          uint64_t v56 = *(void *)(v1 + 40);
                          if (*(_DWORD *)(v56 + 4 * v45) == 0x1FFFFFF)
                          {
                            *(_DWORD *)(v56 + 4 * v45) = *(_DWORD *)(v1 + 192);
                            uint64_t v57 = *(unsigned int *)(v1 + 192);
                            if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v57)
                            {
                              this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v63, &v67);
                            }
                            else
                            {
                              *(_DWORD *)(*(void *)(v1 + 184) + 4 * v57) = v67;
                              ++*(_DWORD *)(v1 + 192);
                            }
                          }
                        }
                        int v54 = *v55;
                      }
                      else
                      {
                        int v54 = 0;
                      }
                    }
                    *uint64_t v55 = v54 + 1;
                  }
                }
                *v33 |= 4u;
              }
            }
          }
          else
          {
            uint64_t v27 = *(void *)(v1 + 288);
            if ((*(_DWORD *)(v27 + 4 * (v26 >> 5)) & (1 << v26)) == 0)
            {
              int v67 = v26;
              uint64_t v28 = *(void *)(v1 + 120);
              *(_DWORD *)(v27 + 4 * (v26 >> 5)) |= 1 << v26;
              uint64_t v29 = *(unsigned int *)(v1 + 328);
              *(_DWORD *)(v28 + 44 * v26 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v29;
              if ((*(_DWORD *)(v1 + 332) & 0x7FFFFFFFu) <= v29)
              {
                this = (_DWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v64, &v67);
              }
              else
              {
                *(_DWORD *)(*(void *)(v1 + 320) + 4 * v29) = v67;
                ++*(_DWORD *)(v1 + 328);
              }
            }
          }
        }
      }
      else
      {
        uint64_t v18 = *(void *)(v1 + 288);
        if ((*(_DWORD *)(v18 + 4 * (v15 >> 5)) & (1 << v15)) == 0)
        {
          int v67 = v15;
          uint64_t v19 = *(void *)(v1 + 120);
          *(_DWORD *)(v18 + 4 * (v15 >> 5)) |= 1 << v15;
          uint64_t v20 = *(unsigned int *)(v1 + 328);
          *(_DWORD *)(v19 + 44 * v15 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v20;
          if ((*(_DWORD *)(v1 + 332) & 0x7FFFFFFFu) <= v20)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v64, &v67);
          }
          else
          {
            *(_DWORD *)(*(void *)(v1 + 320) + 4 * v20) = v67;
            ++*(_DWORD *)(v1 + 328);
          }
          unint64_t v14 = (unint64_t)v65 >> 7;
        }
        *(_DWORD *)(*(void *)(v1 + 40) + 4 * v14) = 0x1FFFFFF;
        this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v1, v65);
      }
      ++v13;
    }
    while (v13 < *(unsigned int *)(v1 + 440));
    unint64_t v58 = *(unsigned int *)(v1 + 328);
    *(_DWORD *)(v1 + 33re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v1 + 160);
    *(_DWORD *)(v1 + 340) = *(_DWORD *)(v1 + 176);
    *(_DWORD *)(v1 + 440) = 0;
    for (unint64_t j = v62; j < v58; ++j)
    {
      unint64_t v60 = *(unsigned int *)(*(void *)(v1 + 120) + 44 * *(unsigned int *)(*(void *)(v1 + 320) + 4 * j));
      unint64_t v61 = v60 >> 7;
      if (v60 >> 7 != 0x1FFFFFF)
      {
        do
        {
          this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v1, v60);
          unint64_t v60 = *(unsigned int *)(*(void *)(v1 + 24) + 32 * v61 + 8);
          unint64_t v61 = v60 >> 7;
        }
        while (v60 >> 7 != 0x1FFFFFF);
        unint64_t v58 = *(unsigned int *)(v1 + 328);
      }
    }
  }
  else
  {
    this[84] = this[40];
    this[85] = this[44];
    this[110] = 0;
  }
  return this;
}

_DWORD *physx::IG::IslandSim::wakeIslands2(_DWORD *this)
{
  uint64_t v1 = (uint64_t)this;
  if (this[110])
  {
    unint64_t v2 = 0;
    unint64_t v51 = this[82];
    uint64_t v52 = (uint64_t)(this + 46);
    uint64_t v53 = (uint64_t)(this + 80);
    do
    {
      unsigned int v54 = *(_DWORD *)(*(void *)(v1 + 432) + 4 * v2);
      unint64_t v3 = (unint64_t)v54 >> 7;
      unint64_t v4 = *(unsigned int *)(*(void *)(v1 + 272) + 4 * v3);
      uint64_t v5 = *(void *)(v1 + 24) + 32 * v3;
      char v6 = *(unsigned char *)(v5 + 4) & 0xDF;
      *(unsigned char *)(v5 + 4) = v6;
      if (v4 == -1)
      {
        *(unsigned char *)(v5 + 4) = v6 | 2;
        *(_DWORD *)(*(void *)(v1 + 40) + 4 * v3) = *(_DWORD *)(v1 + 192);
        uint64_t v10 = *(unsigned int *)(v1 + 192);
        if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v10)
        {
          this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v52, &v54);
        }
        else
        {
          *(_DWORD *)(*(void *)(v1 + 184) + 4 * v10) = v54;
          ++*(_DWORD *)(v1 + 192);
        }
        for (unsigned int i = *(_DWORD *)v5; i != -1; unsigned int i = *(_DWORD *)(v13 + 8 * (i % v12)))
        {
          unsigned int v12 = *(_DWORD *)(v1 + 112);
          uint64_t v13 = *(void *)(*(void *)(v1 + 88) + 8 * (i / v12));
          unint64_t v14 = *(unsigned int *)(*(void *)(**(void **)(v1 + 608)
                                            + 8 * ((i ^ 1) / *(_DWORD *)(*(void *)(v1 + 608) + 24)))
                                + 4 * ((i ^ 1) % *(_DWORD *)(*(void *)(v1 + 608) + 24)));
          if (v14 > 0xFFFFFF7F
            || (unint64_t v15 = *(unsigned int *)(*(void *)(v1 + 272) + ((v14 >> 5) & 0x7FFFFFC)), v15 == -1))
          {
            unsigned int v19 = i >> 1;
            uint64_t v20 = (unsigned int *)(*(void *)(*(void *)(v1 + 56) + 8 * (v19 / *(_DWORD *)(v1 + 80)))
                                 + 16 * (v19 % *(_DWORD *)(v1 + 80)));
            uint64_t v22 = v20 + 1;
            __int16 v21 = *((_WORD *)v20 + 2);
            if ((v21 & 4) == 0)
            {
              uint64_t v23 = *v20;
              if (v23 != 1)
              {
                unsigned int v55 = i >> 1;
                *uint64_t v22 = v21 | 0x40;
                uint64_t v24 = v1 + 16 * v23;
                unsigned int v27 = *(_DWORD *)(v24 + 208);
                unint64_t v25 = (_DWORD *)(v24 + 208);
                uint64_t v26 = v27;
                this = v25 - 2;
                if ((v25[1] & 0x7FFFFFFFu) <= v27)
                {
                  this = (_DWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)this, &v55);
                  uint64_t v23 = *v20;
                }
                else
                {
                  *(_DWORD *)(*(void *)this + 4 * v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v19;
                  ++*v25;
                }
                ++*(_DWORD *)(v1 + 4 * v23 + 232);
                if (!v23) {
                  *(_DWORD *)(*(void *)(v1 + 304) + (((unint64_t)v55 >> 3) & 0x1FFFFFFC)) |= 1 << v55;
                }
                uint64_t v28 = *(uint64_t **)(v1 + 608);
                unsigned int v29 = *((_DWORD *)v28 + 6);
                uint64_t v30 = *v28;
                unint64_t v31 = *(unsigned int *)(*(void *)(*v28 + 8 * (2 * v55 / v29)) + 4 * (2 * v55 % v29));
                unint64_t v32 = v31 >> 7;
                if ((v31 >> 7) != 0x1FFFFFF)
                {
                  unint64_t v33 = *(unsigned int *)(*(void *)(v30 + 8 * (((2 * v55) | 1) / v29))
                                        + 4 * (((2 * v55) | 1) % v29));
                  unint64_t v34 = v33 >> 7;
                  if (*(_DWORD *)(*(void *)(v30 + 8 * (((2 * v55) | 1) / v29)) + 4 * (((2 * v55) | 1) % v29)) >> 7 != 0x1FFFFFF)
                  {
                    uint64_t v35 = *(void *)(v1 + 24);
                    uint64_t v36 = v35 + 32 * v32;
                    int v39 = *(_DWORD *)(v36 + 16);
                    unsigned int v38 = (int *)(v36 + 16);
                    int v37 = v39;
                    if (!v39)
                    {
                      if ((*(unsigned char *)(v35 + 32 * v32 + 4) & 0x26) == 4)
                      {
                        int v56 = v31;
                        if (!*v38)
                        {
                          uint64_t v40 = *(void *)(v1 + 40);
                          if (*(_DWORD *)(v40 + 4 * v32) == 0x1FFFFFF)
                          {
                            *(_DWORD *)(v40 + 4 * v32) = *(_DWORD *)(v1 + 192);
                            uint64_t v41 = *(unsigned int *)(v1 + 192);
                            if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v41)
                            {
                              this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v52, &v56);
                              uint64_t v35 = *(void *)(v1 + 24);
                            }
                            else
                            {
                              *(_DWORD *)(*(void *)(v1 + 184) + 4 * v41) = v56;
                              ++*(_DWORD *)(v1 + 192);
                            }
                          }
                        }
                        int v37 = *v38;
                      }
                      else
                      {
                        int v37 = 0;
                      }
                    }
                    int *v38 = v37 + 1;
                    uint64_t v42 = v35 + 32 * v34;
                    unint64_t v44 = (int *)(v42 + 16);
                    int v43 = *(_DWORD *)(v42 + 16);
                    if (!v43)
                    {
                      if ((*(unsigned char *)(v42 + 4) & 0x26) == 4)
                      {
                        int v56 = v33;
                        if (!*v44)
                        {
                          uint64_t v45 = *(void *)(v1 + 40);
                          if (*(_DWORD *)(v45 + 4 * v34) == 0x1FFFFFF)
                          {
                            *(_DWORD *)(v45 + 4 * v34) = *(_DWORD *)(v1 + 192);
                            uint64_t v46 = *(unsigned int *)(v1 + 192);
                            if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v46)
                            {
                              this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v52, &v56);
                            }
                            else
                            {
                              *(_DWORD *)(*(void *)(v1 + 184) + 4 * v4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v56;
                              ++*(_DWORD *)(v1 + 192);
                            }
                          }
                        }
                        int v43 = *v44;
                      }
                      else
                      {
                        int v43 = 0;
                      }
                    }
                    *unint64_t v44 = v43 + 1;
                  }
                }
                *v22 |= 4u;
              }
            }
          }
          else
          {
            uint64_t v16 = *(void *)(v1 + 288);
            if ((*(_DWORD *)(v16 + 4 * (v15 >> 5)) & (1 << v15)) == 0)
            {
              int v56 = v15;
              uint64_t v17 = *(void *)(v1 + 120);
              *(_DWORD *)(v16 + 4 * (v15 >> 5)) |= 1 << v15;
              uint64_t v18 = *(unsigned int *)(v1 + 328);
              *(_DWORD *)(v17 + 44 * v15 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v18;
              if ((*(_DWORD *)(v1 + 332) & 0x7FFFFFFFu) <= v18)
              {
                this = (_DWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v53, &v56);
              }
              else
              {
                *(_DWORD *)(*(void *)(v1 + 320) + 4 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v56;
                ++*(_DWORD *)(v1 + 328);
              }
            }
          }
        }
      }
      else
      {
        uint64_t v7 = *(void *)(v1 + 288);
        if ((*(_DWORD *)(v7 + 4 * (v4 >> 5)) & (1 << v4)) == 0)
        {
          int v56 = v4;
          uint64_t v8 = *(void *)(v1 + 120);
          *(_DWORD *)(v7 + 4 * (v4 >> 5)) |= 1 << v4;
          uint64_t v9 = *(unsigned int *)(v1 + 328);
          *(_DWORD *)(v8 + 44 * v4 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9;
          if ((*(_DWORD *)(v1 + 332) & 0x7FFFFFFFu) <= v9)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v53, &v56);
          }
          else
          {
            *(_DWORD *)(*(void *)(v1 + 320) + 4 * v9) = v56;
            ++*(_DWORD *)(v1 + 328);
          }
          unint64_t v3 = (unint64_t)v54 >> 7;
        }
        *(_DWORD *)(*(void *)(v1 + 40) + 4 * v3) = 0x1FFFFFF;
        this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v1, v54);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 440));
    unint64_t v47 = *(unsigned int *)(v1 + 328);
    *(_DWORD *)(v1 + 440) = 0;
    for (unint64_t j = v51; j < v47; ++j)
    {
      unint64_t v49 = *(unsigned int *)(*(void *)(v1 + 120) + 44 * *(unsigned int *)(*(void *)(v1 + 320) + 4 * j));
      unint64_t v50 = v49 >> 7;
      if (v49 >> 7 != 0x1FFFFFF)
      {
        do
        {
          this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v1, v49);
          unint64_t v49 = *(unsigned int *)(*(void *)(v1 + 24) + 32 * v50 + 8);
          unint64_t v50 = v49 >> 7;
        }
        while (v49 >> 7 != 0x1FFFFFF);
        unint64_t v47 = *(unsigned int *)(v1 + 328);
      }
    }
  }
  else
  {
    this[110] = 0;
  }
  return this;
}

void physx::IG::IslandSim::removeDestroyedEdges(physx::IG::IslandSim *this)
{
  unint64_t v1 = *((unsigned int *)this + 114);
  if (v1)
  {
    for (unint64_t i = 0; i < v1; ++i)
    {
      unsigned int v4 = *(_DWORD *)(*((void *)this + 56) + 4 * i);
      if ((*(_WORD *)(*(void *)(*((void *)this + 7) + 8 * (v4 / *((_DWORD *)this + 20)))
                     + 16 * (v4 % *((_DWORD *)this + 20))
                     + 4) & 0xB) == 3)
      {
        physx::IG::IslandSim::removeConnectionInternal(this, *(_DWORD *)(*((void *)this + 56) + 4 * i));
        physx::IG::IslandSim::removeConnectionFromGraph(this, v4);
        unint64_t v1 = *((unsigned int *)this + 114);
      }
    }
  }
}

uint64_t physx::IG::IslandSim::processNewEdges(physx::IG::IslandSim *this)
{
  uint64_t v128 = (_DWORD *)((char *)this + 88);
  physx::Cm::BlockArray<physx::IG::EdgeInstance>::reserve((_DWORD *)this + 22, 2 * *((_DWORD *)this + 19));
  uint64_t v2 = 0;
  uint64_t v124 = (char *)this + 184;
  char v3 = 1;
  do
  {
    char v126 = v3;
    unsigned int v4 = (char *)this + 16 * v2;
    unint64_t v5 = *((unsigned int *)v4 + 96);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (unsigned int *)(v4 + 384);
      uint64_t v8 = v4 + 376;
      while (1)
      {
        unsigned int v9 = *(_DWORD *)(*v8 + 4 * v6);
        uint64_t v10 = *(void *)(*((void *)this + 7) + 8 * (v9 / *((_DWORD *)this + 20)))
            + 16 * (v9 % *((_DWORD *)this + 20));
        __int16 v12 = *(_WORD *)(v10 + 4);
        unsigned int v11 = (_WORD *)(v10 + 4);
        if ((v12 & 3) == 0) {
          break;
        }
LABEL_55:
        if (++v6 >= v5) {
          goto LABEL_56;
        }
      }
      unsigned int v13 = 2 * v9;
      if (2 * v9 + 2 <= *((_DWORD *)this + 26)) {
        unsigned int v14 = *((_DWORD *)this + 26);
      }
      else {
        unsigned int v14 = 2 * v9 + 2;
      }
      physx::Cm::BlockArray<physx::IG::EdgeInstance>::reserve(v128, v14);
      unsigned int v15 = *((_DWORD *)this + 26);
      if (v15 < v14)
      {
        do
        {
          *(void *)(*(void *)(*((void *)this + 11) + 8 * (v15 / *((_DWORD *)this + 28)))
                    + 8 * (v15 % *((_DWORD *)this + 28))) = -1;
          ++v15;
        }
        while (v14 != v15);
      }
      *((_DWORD *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      unsigned int v16 = *((_DWORD *)this + 20);
      uint64_t v17 = *(void *)(*((void *)this + 7) + 8 * (v9 / v16));
      uint64_t v18 = (uint64_t *)*((void *)this + 76);
      unsigned int v19 = *((_DWORD *)v18 + 6);
      uint64_t v20 = *v18;
      unsigned int v21 = v13 | 1;
      unint64_t v22 = *(unsigned int *)(*(void *)(v20 + 8 * (v21 / v19)) + 4 * (v21 % v19));
      unint64_t v23 = (unint64_t)*(unsigned int *)(*(void *)(v20 + 8 * (v13 / v19)) + 4 * (v13 % v19)) >> 7;
      if (v23 == 0x1FFFFFF)
      {
        int v24 = 0;
        int v25 = 1;
      }
      else
      {
        uint64_t v26 = *((void *)this + 3) + 32 * v23;
        unsigned int v27 = *((_DWORD *)this + 28);
        uint64_t v28 = *((void *)this + 11);
        uint64_t v29 = *(void *)(v28 + 8 * (v13 / v27));
        unsigned int v30 = *(_DWORD *)v26;
        *(_DWORD *)(v29 + 8 * (v13 % v27)) = *(_DWORD *)v26;
        if (v30 != -1) {
          *(_DWORD *)(*(void *)(v28 + 8 * (v30 / v27)) + 8 * (v30 % v27) + 4) = v13;
        }
        *(_DWORD *)uint64_t v26 = v13;
        *(_DWORD *)(v29 + 8 * (v13 % v27) + 4) = -1;
        unsigned int v31 = *(unsigned __int8 *)(v26 + 4);
        int v24 = (v31 & 0x22) != 0;
        int v25 = (v31 >> 2) & 1;
      }
      unint64_t v32 = v22 >> 7;
      if (v23 != v32 && v32 != 0x1FFFFFF)
      {
        uint64_t v33 = *((void *)this + 3);
        unint64_t v34 = (unsigned int *)(v33 + 32 * v32);
        unsigned int v35 = *((_DWORD *)this + 28);
        uint64_t v36 = *((void *)this + 11);
        uint64_t v37 = *(void *)(v36 + 8 * (v21 / v35));
        unsigned int v38 = *v34;
        *(_DWORD *)(v37 + 8 * (v21 % v35)) = *v34;
        if (v38 != -1) {
          *(_DWORD *)(*(void *)(v36 + 8 * (v38 / v35)) + 8 * (v38 % v35) + 4) = v21;
        }
        unsigned int *v34 = v21;
        *(_DWORD *)(v37 + 8 * (v21 % v35) + 4) = -1;
        if ((v24 & 1) == 0)
        {
          unsigned int v39 = *(unsigned __int8 *)(v33 + 32 * v32 + 4);
          if ((v39 & 2) == 0)
          {
            int v24 = (v39 >> 5) & 1;
            if (!v25) {
              goto LABEL_22;
            }
LABEL_25:
            if ((v24 & 1) == 0)
            {
LABEL_54:
              *v11 |= 1u;
              unint64_t v5 = *v7;
              goto LABEL_55;
            }
            int v25 = (*(unsigned __int8 *)(v33 + 32 * v32 + 4) >> 2) & 1;
LABEL_27:
            uint64_t v40 = v9 % v16;
            uint64_t v41 = (unsigned int *)(v17 + 16 * v40);
            uint64_t v42 = *v41;
            if (!v25 || !v42)
            {
              unsigned int v130 = v9;
              uint64_t v43 = v17 + 16 * v40;
              __int16 v45 = *(_WORD *)(v43 + 4);
              unint64_t v44 = (_WORD *)(v43 + 4);
              *unint64_t v44 = v45 | 0x40;
              uint64_t v46 = (char *)this + 16 * v42;
              unsigned int v49 = *((_DWORD *)v46 + 52);
              unint64_t v47 = v46 + 208;
              uint64_t v48 = v49;
              unint64_t v50 = v47 - 2;
              if ((v47[1] & 0x7FFFFFFFu) <= v49)
              {
                physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v50, &v130);
                uint64_t v42 = *v41;
                unsigned int v9 = v130;
              }
              else
              {
                *(_DWORD *)(*v50 + 4 * v48) = v9;
                ++*v47;
              }
              ++*((_DWORD *)this + v42 + 58);
              if (!v42)
              {
                *(_DWORD *)(*((void *)this + 38) + 4 * (v9 >> 5)) |= 1 << v9;
                unsigned int v9 = v130;
              }
              unint64_t v51 = (uint64_t *)*((void *)this + 76);
              unsigned int v52 = *((_DWORD *)v51 + 6);
              uint64_t v53 = *v51;
              unint64_t v54 = *(unsigned int *)(*(void *)(*v51 + 8 * (2 * v9 / v52)) + 4 * (2 * v9 % v52));
              unint64_t v55 = v54 >> 7;
              if ((v54 >> 7) != 0x1FFFFFF)
              {
                unsigned int v56 = (2 * v9) | 1;
                uint64_t v57 = *(void *)(v53 + 8 * (v56 / v52));
                unsigned int v58 = v56 % v52;
                unint64_t v59 = *(unsigned int *)(v57 + 4 * v58);
                unint64_t v60 = v59 >> 7;
                if (*(_DWORD *)(v57 + 4 * v58) >> 7 != 0x1FFFFFF)
                {
                  uint64_t v61 = *((void *)this + 3);
                  uint64_t v62 = v61 + 32 * v55;
                  int v65 = *(_DWORD *)(v62 + 16);
                  uint64_t v64 = (int *)(v62 + 16);
                  int v63 = v65;
                  if (!v65)
                  {
                    if ((*(unsigned char *)(v61 + 32 * v55 + 4) & 0x26) == 4)
                    {
                      int v131 = v54;
                      uint64_t v66 = *((void *)this + 5);
                      if (*(_DWORD *)(v66 + 4 * v55) == 0x1FFFFFF)
                      {
                        *(_DWORD *)(v66 + 4 * v55) = *((_DWORD *)this + 48);
                        uint64_t v67 = *((unsigned int *)this + 48);
                        if ((*((_DWORD *)this + 49) & 0x7FFFFFFFu) <= v67)
                        {
                          int v123 = v59;
                          physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)v124, &v131);
                          LODWORD(v59) = v123;
                          uint64_t v61 = *((void *)this + 3);
                        }
                        else
                        {
                          *(_DWORD *)(*((void *)this + 23) + 4 * v67) = v54;
                          ++*((_DWORD *)this + 48);
                        }
                      }
                      int v63 = *v64;
                    }
                    else
                    {
                      int v63 = 0;
                    }
                  }
                  *uint64_t v64 = v63 + 1;
                  uint64_t v68 = v61 + 32 * v60;
                  double v70 = (int *)(v68 + 16);
                  int v69 = *(_DWORD *)(v68 + 16);
                  if (!v69)
                  {
                    if ((*(unsigned char *)(v68 + 4) & 0x26) == 4)
                    {
                      int v131 = v59;
                      uint64_t v71 = *((void *)this + 5);
                      if (*(_DWORD *)(v71 + 4 * v60) == 0x1FFFFFF)
                      {
                        *(_DWORD *)(v71 + 4 * v60) = *((_DWORD *)this + 48);
                        uint64_t v72 = *((unsigned int *)this + 48);
                        if ((*((_DWORD *)this + 49) & 0x7FFFFFFFu) <= v72)
                        {
                          physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)v124, &v131);
                        }
                        else
                        {
                          *(_DWORD *)(*((void *)this + 23) + 4 * v72) = v59;
                          ++*((_DWORD *)this + 48);
                        }
                      }
                      int v69 = *v70;
                    }
                    else
                    {
                      int v69 = 0;
                    }
                  }
                  int *v70 = v69 + 1;
                }
              }
              *v44 |= 4u;
            }
            goto LABEL_54;
          }
        }
        int v24 = 1;
        if (v25) {
          goto LABEL_25;
        }
      }
LABEL_22:
      if (!v24) {
        goto LABEL_54;
      }
      goto LABEL_27;
    }
LABEL_56:
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v126 & 1) != 0);
  unsigned int v73 = *((_DWORD *)this + 8);
  int v131 = 0;
  uint64_t v129 = (uint64_t *)((char *)this + 240);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 240, v73, &v131);
  unsigned int v74 = *((_DWORD *)this + 8);
  int v131 = -128;
  float v125 = (void *)((char *)this + 256);
  physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::resize((uint64_t)this + 256, v74, &v131);
  uint64_t v75 = 0;
  uint64_t result = 0x1FFFFFFLL;
  char v77 = 1;
  do
  {
    char v127 = v77;
    float v78 = (char *)this + 16 * v75;
    if (*((_DWORD *)v78 + 96))
    {
      uint64_t v79 = 0;
      __n128 v80 = (unsigned int *)(v78 + 384);
      float v81 = v78 + 376;
      while (1)
      {
        unsigned int v82 = *(_DWORD *)(*v81 + 4 * v79);
        if ((*(_WORD *)(*(void *)(*((void *)this + 7) + 8 * (v82 / *((_DWORD *)this + 20)))
                       + 16 * (v82 % *((_DWORD *)this + 20))
                       + 4) & 2) != 0)
          goto LABEL_118;
        uint64_t v83 = (uint64_t *)*((void *)this + 76);
        unsigned int v84 = *((_DWORD *)v83 + 6);
        uint64_t v85 = *v83;
        unint64_t v86 = *(unsigned int *)(*(void *)(*v83 + 8 * (2 * v82 / v84)) + 4 * (2 * v82 % v84));
        unint64_t v87 = v86 >> 7;
        unsigned int v88 = (v86 >> 7) == 0x1FFFFFF ? -1 : *(_DWORD *)(*((void *)this + 34) + 4 * v87);
        unint64_t v89 = *(unsigned int *)(*(void *)(v85 + 8 * (((2 * v82) | 1) / v84)) + 4 * (((2 * v82) | 1) % v84));
        unint64_t v90 = v89 >> 7;
        unsigned int v91 = (v89 >> 7) == 0x1FFFFFF ? -1 : *(_DWORD *)(*((void *)this + 34) + 4 * v90);
        BOOL v92 = v87 != 0x1FFFFFF
           && (*(unsigned __int8 *)(*((void *)this + 3) + 32 * v87 + 4) >> 1) & 1;
        BOOL v93 = v90 != 0x1FFFFFF
           && (*(unsigned __int8 *)(*((void *)this + 3) + 32 * v90 + 4) >> 1) & 1;
        if (v88 == -1 && v91 == -1) {
          goto LABEL_118;
        }
        if (v88 != v91) {
          break;
        }
        uint64_t v94 = *v129;
        unsigned int v95 = *(_DWORD *)(*v129 + 4 * v87);
        unsigned int v96 = *(_DWORD *)(*v129 + 4 * v90);
        if (v95 + 1 >= v96)
        {
          if (v96 + 1 < v95)
          {
            *(_DWORD *)(v94 + 4 * v87) = v96 + 1;
            *(_DWORD *)(*v125 + 4 * v87) = v89;
          }
        }
        else
        {
          *(_DWORD *)(v94 + 4 * v90) = v95 + 1;
          *(_DWORD *)(*v125 + 4 * v90) = v86;
        }
LABEL_113:
        if (v88 != -1) {
          goto LABEL_114;
        }
LABEL_118:
        if (++v79 >= (unint64_t)*v80) {
          goto LABEL_123;
        }
      }
      if (v88 != -1)
      {
        if (v91 != -1)
        {
          if (v92 || v93)
          {
            uint64_t v97 = *((void *)this + 36);
            if (((*(_DWORD *)(v97 + 4 * (v88 >> 5)) >> v88) & 1) == 0)
            {
              physx::IG::IslandSim::activateIsland((unsigned int *)this, v88);
              uint64_t v97 = *((void *)this + 36);
            }
            if (((*(_DWORD *)(v97 + 4 * (v91 >> 5)) >> v91) & 1) == 0) {
              physx::IG::IslandSim::activateIsland((unsigned int *)this, v91);
            }
          }
          uint64_t v98 = *((void *)this + 15);
          double v99 = (unsigned int *)(v98 + 44 * v88);
          unsigned __int16 v100 = (unsigned int *)(v98 + 44 * v91);
          if (v99[3] + v99[2] <= v100[3] + v100[2])
          {
            physx::IG::IslandSim::mergeIslandsInternal((uint64_t)this, v100, v99, v91, v88, v89, v86);
            unsigned int v101 = v88;
            unint64_t v102 = v86;
            LODWORD(v8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v89;
            unsigned int v88 = v91;
          }
          else
          {
            physx::IG::IslandSim::mergeIslandsInternal((uint64_t)this, v99, v100, v88, v91, v86, v89);
            unsigned int v101 = v91;
            unint64_t v102 = v89;
          }
          *(_DWORD *)(*((void *)this + 36) + 4 * (v101 >> 5)) &= ~(1 << v101);
          physx::IG::HandleManager<unsigned int>::freeHandle((uint64_t)this, v101);
          *(_DWORD *)(*((void *)this + 32) + ((v102 >> 5) & 0x7FFFFFC)) = v86;
          uint64_t result = 0x1FFFFFFLL;
          goto LABEL_114;
        }
        uint64_t v104 = *((void *)this + 3);
        if (v90 == 0x1FFFFFF)
        {
          ++*(_WORD *)(v104 + 32 * v87 + 6);
          ++*(_DWORD *)(*((void *)this + 17) + 4 * v88);
LABEL_114:
          uint64_t v111 = *((void *)this + 15);
          unsigned int v112 = *((_DWORD *)this + 20);
          uint64_t v113 = *((void *)this + 7);
          uint64_t v114 = *(void *)(v113 + 8 * (v82 / v112));
          uint64_t v115 = v82 % v112;
          uint64_t v116 = *(unsigned int *)(v114 + 16 * v115);
          uint64_t v117 = v111 + 44 * v88 + 4 * v116;
          unsigned int v120 = *(_DWORD *)(v117 + 28);
          unsigned int v118 = (int *)(v117 + 28);
          unsigned int v119 = v120;
          if (v120 == -1)
          {
            *(_DWORD *)(v111 + 44 * v88 + 4 * v116 + 20) = v82;
            int v121 = -1;
          }
          else
          {
            *(_DWORD *)(*(void *)(v113 + 8 * (v119 / v112)) + 16 * (v119 % v112) + 8) = v82;
            int v121 = *v118;
          }
          *(_DWORD *)(v114 + 16 * v115 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v121;
          *unsigned int v118 = v82;
          uint64_t v122 = v111 + 44 * v88 + 4 * v116;
          ++*(_DWORD *)(v122 + 36);
          goto LABEL_118;
        }
        uint64_t v108 = v104 + 32 * v90;
        if ((*(unsigned char *)(v108 + 4) & 4) != 0)
        {
          if (!v93 || v92) {
            goto LABEL_114;
          }
          physx::IG::IslandSim::activateIsland((unsigned int *)this, v88);
        }
        else
        {
          uint64_t v109 = *((void *)this + 15) + 44 * v88;
          *(_DWORD *)(v104 + (((unint64_t)*(unsigned int *)(v109 + 4) >> 2) & 0x3FFFFFE0) + 8) = v89;
          *(_DWORD *)(v108 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v109 + 4);
          *(_DWORD *)(v109 + 4) = v89;
          uint64_t v110 = v109 + 4 * *(unsigned __int8 *)(v108 + 5);
          ++*(_DWORD *)(v110 + 8);
          *(_DWORD *)(*((void *)this + 34) + 4 * v90) = v88;
          *(_DWORD *)(*((void *)this + 30) + 4 * v90) = *(_DWORD *)(*((void *)this + 30)
                                                                                    + 4 * v87)
                                                                        + 1;
          *(_DWORD *)(*((void *)this + 32) + 4 * v90) = v86;
          if (!v92 && !v93) {
            goto LABEL_114;
          }
          if ((*(_DWORD *)(*((void *)this + 36) + 4 * (v88 >> 5)) >> v88))
          {
            if (v92) {
              goto LABEL_114;
            }
          }
          else
          {
            physx::IG::IslandSim::activateIsland((unsigned int *)this, v88);
            uint64_t result = 0x1FFFFFFLL;
            if (v92) {
              goto LABEL_114;
            }
          }
          physx::IG::IslandSim::activateNodeInternal((unsigned int *)this, v89);
        }
        uint64_t result = 0x1FFFFFFLL;
        goto LABEL_114;
      }
      uint64_t v103 = *((void *)this + 3);
      if (v87 == 0x1FFFFFF)
      {
        ++*(_WORD *)(v103 + 32 * v90 + 6);
        ++*(_DWORD *)(*((void *)this + 17) + 4 * v91);
LABEL_112:
        unsigned int v88 = v91;
        goto LABEL_113;
      }
      uint64_t v105 = v103 + 32 * v87;
      if ((*(unsigned char *)(v105 + 4) & 4) != 0)
      {
        if (!v92 || v93) {
          goto LABEL_112;
        }
        physx::IG::IslandSim::activateIsland((unsigned int *)this, v91);
      }
      else
      {
        uint64_t v106 = *((void *)this + 15) + 44 * v91;
        *(_DWORD *)(v103 + (((unint64_t)*(unsigned int *)(v106 + 4) >> 2) & 0x3FFFFFE0) + 8) = v86;
        *(_DWORD *)(v105 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v106 + 4);
        *(_DWORD *)(v106 + 4) = v86;
        uint64_t v107 = v106 + 4 * *(unsigned __int8 *)(v105 + 5);
        ++*(_DWORD *)(v107 + 8);
        *(_DWORD *)(*((void *)this + 34) + 4 * v87) = v91;
        *(_DWORD *)(*((void *)this + 30) + 4 * v87) = *(_DWORD *)(*((void *)this + 30)
                                                                                  + 4 * v90)
                                                                      + 1;
        *(_DWORD *)(*((void *)this + 32) + 4 * v87) = v89;
        if (!v92 && !v93) {
          goto LABEL_112;
        }
        if ((*(_DWORD *)(*((void *)this + 36) + 4 * (v91 >> 5)) >> v91))
        {
          if (v92) {
            goto LABEL_112;
          }
        }
        else
        {
          physx::IG::IslandSim::activateIsland((unsigned int *)this, v91);
          uint64_t result = 0x1FFFFFFLL;
          if (v92) {
            goto LABEL_112;
          }
        }
        physx::IG::IslandSim::activateNodeInternal((unsigned int *)this, v86);
      }
      uint64_t result = 0x1FFFFFFLL;
      goto LABEL_112;
    }
LABEL_123:
    char v77 = 0;
    uint64_t v75 = 1;
  }
  while ((v127 & 1) != 0);
  return result;
}

void physx::IG::IslandSim::processLostEdges(uint64_t a1, uint64_t a2, int a3, int a4)
{
  v382[1] = *MEMORY[0x263EF8340];
  uint64_t v6 = (void *)(a1 + 520);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extendUninitialized(a1 + 520, *(_DWORD *)(a1 + 32));
  bzero(*(void **)(a1 + 520), (4 * *(_DWORD *)(a1 + 528)));
  if (*(_DWORD *)(a1 + 496) <= 0x3FFu)
  {
    uint64_t v7 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::QueueElement>::getName() [T = physx::IG::QueueElement]";
    }
    else {
      uint64_t v8 = "<allocation names disabled>";
    }
    unsigned int v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v7 + 24)
                                                                                                  + 16))(v7 + 24, 0x4000, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPriorityQueue.h", 219);
    uint64_t v10 = v9;
    unsigned int v11 = *(const void **)(a1 + 488);
    if (v11)
    {
      memcpy(v9, v11, (16 * *(_DWORD *)(a1 + 480)));
      if (*(void *)(a1 + 488)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    *(void *)(a1 + 488) = v10;
    *(_DWORD *)(a1 + 49re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1024;
  }
  if ((*(_DWORD *)(a1 + 548) & 0x7FFFFC00) == 0) {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 536, 0x400u);
  }
  if ((*(_DWORD *)(a1 + 564) & 0x7FFFFC00) == 0) {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 552, 0x400u);
  }
  v369 = (unsigned int **)(a1 + 504);
  unsigned int v12 = *(_DWORD *)(a1 + 32);
  if ((*(_DWORD *)(a1 + 516) & 0x7FFFFFFFu) < v12) {
    physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::recreate((uint64_t)v369, v12);
  }
  unint64_t v13 = *(unsigned int *)(a1 + 456);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(a1 + 448);
    uint64_t v16 = *(void *)(a1 + 56);
    while (1)
    {
      unsigned int v17 = *(_DWORD *)(v15 + 4 * v14);
      uint64_t v18 = *(void *)(v16 + 8 * (v17 / *(_DWORD *)(a1 + 80))) + 16 * (v17 % *(_DWORD *)(a1 + 80));
      __int16 v21 = *(_WORD *)(v18 + 4);
      unsigned int v19 = (_WORD *)(v18 + 4);
      __int16 v20 = v21;
      if ((v21 & 0xA) == 2) {
        break;
      }
LABEL_42:
      if (++v14 >= v13) {
        goto LABEL_45;
      }
    }
    if ((v20 & 0x21) == 1)
    {
      unint64_t v22 = *(uint64_t **)(a1 + 608);
      unsigned int v23 = *((_DWORD *)v22 + 6);
      uint64_t v24 = *v22;
      unint64_t v25 = (unint64_t)*(unsigned int *)(*(void *)(*v22 + 8 * (2 * v17 / v23)) + 4 * (2 * v17 % v23)) >> 7;
      unint64_t v26 = (unint64_t)*(unsigned int *)(*(void *)(v24 + 8 * (((2 * v17) | 1) / v23))
                                              + 4 * (((2 * v17) | 1) % v23)) >> 7;
      BOOL v27 = v25 == 0x1FFFFFF || v26 == 0x1FFFFFF;
      if (!v27)
      {
        uint64_t v29 = *(void *)(a1 + 272);
        if (*(_DWORD *)(v29 + 4 * v25) == -1) {
          unint64_t v25 = v26;
        }
        uint64_t v30 = *(unsigned int *)(v29 + 4 * v25);
        goto LABEL_33;
      }
      if (v25 == 0x1FFFFFF)
      {
        if (v26 == 0x1FFFFFF) {
          goto LABEL_41;
        }
        unint64_t v25 = v26;
        uint64_t v28 = *(void *)(a1 + 24) + 32 * v26;
      }
      else
      {
        unint64_t v25 = v25;
        uint64_t v28 = *(void *)(a1 + 24) + 32 * v25;
      }
      if ((*(unsigned char *)(v28 + 4) & 4) == 0)
      {
        uint64_t v30 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * v25);
        --*(_WORD *)(v28 + 6);
        --*(_DWORD *)(*(void *)(a1 + 136) + 4 * v30);
LABEL_33:
        if (v30 != 0xFFFFFFFFLL)
        {
          uint64_t v31 = *(void *)(a1 + 120);
          unsigned int v32 = *(_DWORD *)(a1 + 80);
          uint64_t v33 = (unsigned int *)(*(void *)(v16 + 8 * (v17 / v32)) + 16 * (v17 % v32));
          unint64_t v34 = (int *)(v33 + 2);
          unsigned int v35 = v33[2];
          if (v35 == -1) {
            uint64_t v36 = (_DWORD *)(v31 + 44 * v30 + 4 * *v33 + 28);
          }
          else {
            uint64_t v36 = (_DWORD *)(*(void *)(v16 + 8 * (v35 / v32)) + 16 * (v35 % v32) + 12);
          }
          *uint64_t v36 = v33[3];
          unsigned int v37 = v33[3];
          int v38 = *v34;
          if (v37 == -1)
          {
            uint64_t v39 = *v33;
            *(_DWORD *)(v31 + 44 * v30 + 4 * v39 + 20) = v38;
          }
          else
          {
            *(_DWORD *)(*(void *)(v16 + 8 * (v37 / *(_DWORD *)(a1 + 80))) + 16 * (v37 % *(_DWORD *)(a1 + 80)) + 8) = v38;
            uint64_t v39 = *v33;
          }
          uint64_t v40 = v31 + 44 * v30 + 4 * v39;
          --*(_DWORD *)(v40 + 36);
          *(void *)unint64_t v34 = -1;
        }
      }
    }
LABEL_41:
    _WORD *v19 = v20 & 0xFFFE;
    unint64_t v13 = *(unsigned int *)(a1 + 456);
    goto LABEL_42;
  }
  unint64_t v13 = 0;
LABEL_45:
  int v362 = a4;
  if (a3)
  {
    int v41 = *(_DWORD *)(a1 + 416);
    if ((v41 & 0x7FFFFFFF) != 0)
    {
      uint64_t v42 = *(unsigned int **)(a1 + 408);
      unsigned int v43 = *v42;
      if (*v42)
      {
        uint64_t v44 = 0;
LABEL_52:
        v351 = (void *)(a1 + 288);
        int8x16_t v363 = v6;
        while (1)
        {
          unsigned int v46 = v43;
          int v47 = v44;
          int v41 = *(_DWORD *)(a1 + 416);
          v43 &= v43 - 1;
          if (!v43)
          {
            if ((int)v44 + 1 > (v41 & 0x7FFFFFFFu)) {
              uint64_t v44 = (v44 + 1);
            }
            else {
              uint64_t v44 = v41 & 0x7FFFFFFF;
            }
            LODWORD(v48) = v47;
            while (v44 - 1 != v48)
            {
              uint64_t v48 = (v48 + 1);
              unsigned int v43 = *(_DWORD *)(*(void *)(a1 + 408) + 4 * v48);
              if (v43)
              {
                uint64_t v44 = v48;
                goto LABEL_62;
              }
            }
            unsigned int v43 = 0;
          }
LABEL_62:
          unsigned int v49 = __clz(__rbit32(v46));
          int v50 = v49 | (32 * v47);
          if (v50 == -1) {
            goto LABEL_206;
          }
          *(_DWORD *)(a1 + 480) = 0;
          *(_DWORD *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
          uint64_t v51 = v50 & 0x1FFFFFF;
          uint64_t v52 = *(void *)(a1 + 24) + 32 * v51;
          char v54 = *(unsigned char *)(v52 + 4);
          uint64_t v53 = (unsigned char *)(v52 + 4);
          if ((v54 & 0xC) == 0)
          {
            uint64_t v55 = *v6;
            int v56 = 1 << v49;
            if ((*(_DWORD *)(*v6 + 4 * (v51 >> 5)) & (1 << v49)) == 0)
            {
              uint64_t v57 = *(void *)(a1 + 272);
              unint64_t v58 = *(unsigned int *)(v57 + 4 * v51);
              int v59 = *(_DWORD *)(*(void *)(a1 + 120) + 44 * v58) >> 7;
              if (v59 != v51)
              {
                unsigned int v60 = v50 << 7;
                uint64_t v61 = *(void *)(a1 + 256);
                uint64_t v361 = v44;
                int8x16_t v355 = v53;
                unint64_t v371 = *(unsigned int *)(v57 + 4 * v51);
                uint64_t v352 = *(void *)(a1 + 24);
                int v364 = *(_DWORD *)(*(void *)(a1 + 120) + 44 * v58) >> 7;
                unsigned int v353 = v60;
                if (*(_DWORD *)(v61 + 4 * v51) > 0xFFFFFF7F) {
                  goto LABEL_86;
                }
                int v62 = 0;
                unsigned int v63 = v60;
                while (1)
                {
                  unsigned int v64 = v63 >> 7;
                  uint64_t v65 = v63 >> 12;
                  int v66 = 1 << (v63 >> 7);
                  if ((v66 & *(_DWORD *)(v55 + 4 * v65)) != 0) {
                    break;
                  }
                  BOOL v67 = v64 == v59;
                  if (v64 != v59)
                  {
                    uint64_t v68 = *(unsigned int *)(a1 + 512);
                    *(void *)&long long v376 = __PAIR64__(v68, v63);
                    DWORD2(v37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v68 - 1;
                    HIDWORD(v37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v62;
                    if ((*(_DWORD *)(a1 + 516) & 0x7FFFFFFFu) <= v68)
                    {
                      physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::growAndPushBack((uint64_t)v369, &v376);
                      int v59 = v364;
                      unint64_t v58 = v371;
                    }
                    else
                    {
                      *(_OWORD *)(*(void *)(a1 + 504) + 16 * v68) = v376;
                      ++*(_DWORD *)(a1 + 512);
                    }
                    uint64_t v57 = *(void *)(a1 + 272);
                    *(_DWORD *)(v57 + 4 * v64) = -1;
                    uint64_t v55 = *(void *)(a1 + 520);
                    *(_DWORD *)(v55 + 4 * v65) |= v66;
                    uint64_t v61 = *(void *)(a1 + 256);
                    unsigned int v63 = *(_DWORD *)(v61 + 4 * v64);
                    ++v62;
                    if (v63 < 0xFFFFFF80) {
                      continue;
                    }
                  }
                  goto LABEL_76;
                }
                BOOL v67 = *(_DWORD *)(v57 + 4 * v64) != -1;
LABEL_76:
                uint64_t v53 = v355;
                if (*(_DWORD *)(a1 + 512))
                {
                  unint64_t v69 = 0;
                  double v70 = *v369;
                  uint64_t v6 = v363;
                  uint64_t v44 = v361;
                  do
                  {
                    unsigned int v71 = *v70;
                    v70 += 4;
                    *(_DWORD *)(v57 + (((unint64_t)v71 >> 5) & 0x7FFFFFC)) = v58;
                    ++v69;
                    unint64_t v72 = *(unsigned int *)(a1 + 512);
                  }
                  while (v69 < v72);
                  if (!v67)
                  {
                    if (*(_DWORD *)(a1 + 512))
                    {
                      unint64_t v73 = 0;
                      unsigned int v74 = *v369;
                      do
                      {
                        unsigned int v75 = *v74;
                        v74 += 4;
                        *(_DWORD *)(v55 + (((unint64_t)v75 >> 10) & 0x3FFFFC)) &= ~(1 << (v75 >> 7));
                        ++v73;
                      }
                      while (v73 < *(unsigned int *)(a1 + 512));
                    }
LABEL_85:
                    *(_DWORD *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
                    unsigned int v60 = v353;
LABEL_86:
                    uint64_t v354 = v51;
                    *(_DWORD *)(v57 + 4 * v51) = -1;
                    uint64_t v76 = *(unsigned int *)(a1 + 512);
                    *(void *)&long long v376 = __PAIR64__(v76, v60);
                    *((void *)&v376 + 1) = 0x1FFFFFFLL;
                    if ((*(_DWORD *)(a1 + 516) & 0x7FFFFFFFu) <= v76)
                    {
                      uint64_t v80 = physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::growAndPushBack((uint64_t)v369, &v376);
                      unint64_t v58 = v371;
                      uint64_t v79 = v80;
                      int v59 = v364;
                    }
                    else
                    {
                      *(_OWORD *)(*(void *)(a1 + 504) + 16 * v7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v376;
                      uint64_t v77 = *(void *)(a1 + 504);
                      uint64_t v78 = *(unsigned int *)(a1 + 512);
                      *(_DWORD *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v78 + 1;
                      uint64_t v79 = v77 + 16 * v78;
                    }
                    *(_DWORD *)(*(void *)(a1 + 520) + 4 * (v60 >> 12)) |= v56;
                    unsigned int v81 = *(_DWORD *)(*(void *)(a1 + 240) + 4 * v354);
                    unsigned int v82 = *(_DWORD *)(a1 + 480);
                    if (v82 == *(_DWORD *)(a1 + 496))
                    {
                      unsigned int v83 = 2 * v82 + 2;
                      if (v82 < v83)
                      {
                        unsigned int v84 = (void *)physx::shdfnd::ReflectionAllocator<physx::IG::QueueElement>::allocate(16 * (2 * v82 + 2));
                        uint64_t v85 = v84;
                        unint64_t v86 = *(const void **)(a1 + 488);
                        if (v86)
                        {
                          memcpy(v84, v86, (16 * *(_DWORD *)(a1 + 480)));
                          if (*(void *)(a1 + 488)) {
                            (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
                          }
                        }
                        *(void *)(a1 + 488) = v85;
                        *(_DWORD *)(a1 + 49re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v83;
                        unsigned int v82 = *(_DWORD *)(a1 + 480);
                        unint64_t v58 = v371;
                        int v59 = v364;
                      }
                    }
                    if (v82)
                    {
                      while (1)
                      {
                        unsigned int v87 = v82 - 1;
                        uint64_t v88 = (v82 - 1) >> 1;
                        uint64_t v89 = *(void *)(a1 + 488);
                        if (v81 >= *(_DWORD *)(v89 + 16 * v88 + 8)) {
                          break;
                        }
                        unint64_t v90 = (uint64_t *)(v89 + 16 * v88);
                        uint64_t v91 = *v90;
                        uint64_t v92 = v89 + 16 * v82;
                        *(_DWORD *)(v92 + 8) = *((_DWORD *)v90 + 2);
                        *(void *)uint64_t v92 = v91;
                        unsigned int v82 = v87 >> 1;
                        if (v87 <= 1) {
                          goto LABEL_101;
                        }
                      }
                      LODWORD(v88) = v82;
                    }
                    else
                    {
                      LODWORD(v88) = 0;
                    }
LABEL_101:
                    uint64_t v93 = *(void *)(a1 + 488) + 16 * v88;
                    *(void *)uint64_t v93 = v79;
                    *(_DWORD *)(v93 + 8) = v81;
                    int v94 = *(_DWORD *)(a1 + 480) + 1;
                    while (2)
                    {
                      unsigned int v95 = v94 - 1;
                      *(_DWORD *)(a1 + 480) = v94 - 1;
                      unsigned int v96 = *(unsigned int ***)(a1 + 488);
                      uint64_t v97 = *v96;
                      uint64_t v98 = &v96[2 * (v94 - 1)];
                      double v99 = *v98;
                      unsigned int v100 = *((_DWORD *)v98 + 2);
                      if (v95 < 2)
                      {
                        unsigned int v102 = 0;
                      }
                      else
                      {
                        int v101 = 0;
                        unsigned int v102 = 0;
                        unsigned int v103 = 1;
                        while (1)
                        {
                          unsigned int v104 = v101 + 2;
                          BOOL v106 = v101 + 2 >= v95;
                          unsigned int v96 = *(unsigned int ***)(a1 + 488);
                          unsigned int v105 = v96[2 * v104 + 1];
                          BOOL v106 = v106 || v105 >= LODWORD(v96[2 * v103 + 1]);
                          uint64_t v107 = v106 ? v103 : v103 + 1;
                          if (v100 < LODWORD(v96[2 * v107 + 1])) {
                            break;
                          }
                          uint64_t v108 = &v96[2 * v107];
                          uint64_t v109 = &v96[2 * v102];
                          uint64_t v110 = *v108;
                          *((_DWORD *)v109 + 2) = *((_DWORD *)v108 + 2);
                          *uint64_t v109 = v110;
                          int v101 = 2 * v107;
                          unsigned int v103 = (2 * v107) | 1;
                          unsigned int v102 = v107;
                          if (v103 >= v95)
                          {
                            unsigned int v96 = *(unsigned int ***)(a1 + 488);
                            unsigned int v102 = v107;
                            break;
                          }
                        }
                      }
                      uint64_t v111 = &v96[2 * v102];
                      unsigned __int16 *v111 = v99;
                      *((_DWORD *)v111 + 2) = v100;
                      for (unsigned int i = *(_DWORD *)(*(void *)(a1 + 24) + (((unint64_t)*v97 >> 2) & 0x3FFFFFE0));
                            i != -1;
                            unsigned int i = *(_DWORD *)(v114 + 8 * (i % v113)))
                      {
                        unsigned int v113 = *(_DWORD *)(a1 + 112);
                        uint64_t v114 = *(void *)(*(void *)(a1 + 88) + 8 * (i / v113));
                        uint64_t v115 = *(void *)(a1 + 608);
                        unsigned int v116 = *(_DWORD *)(v115 + 24);
                        uint64_t v117 = *(void *)(*(void *)v115 + 8 * ((i ^ 1) / v116));
                        unsigned int v118 = (i ^ 1) % v116;
                        unint64_t v119 = *(unsigned int *)(v117 + 4 * v118);
                        unint64_t v120 = v119 >> 7;
                        if (*(_DWORD *)(v117 + 4 * v118) >> 7 != 0x1FFFFFF
                          && (*(unsigned char *)(*(void *)(a1 + 24) + 32 * v120 + 4) & 4) == 0)
                        {
                          if (v120 == v59)
                          {
                            uint64_t v169 = v97[1];
                            uint64_t v170 = *(void *)(a1 + 504);
                            uint64_t v171 = *(void *)(a1 + 240);
                            uint64_t v57 = *(void *)(a1 + 272);
                            int v172 = 1;
                            uint64_t v61 = *(void *)(a1 + 256);
                            do
                            {
                              uint64_t v173 = (unsigned int *)(v170 + 16 * v169);
                              *(_DWORD *)(v171 + (((unint64_t)*v173 >> 5) & 0x7FFFFFC)) = v172;
                              *(_DWORD *)(v57 + (((unint64_t)*v173 >> 5) & 0x7FFFFFC)) = v58;
                              *(_DWORD *)(v61 + (((unint64_t)*v173 >> 5) & 0x7FFFFFC)) = v119;
                              uint64_t v169 = v173[2];
                              LODWORD(v119) = *v173;
                              ++v172;
                            }
                            while (v169 != 0x1FFFFFF);
                            goto LABEL_168;
                          }
                          unint64_t v121 = v119 >> 12;
                          int v122 = 1 << (v119 >> 7);
                          if ((*(_DWORD *)(*v6 + 4 * (v119 >> 12)) & v122) != 0)
                          {
                            uint64_t v57 = *(void *)(a1 + 272);
                            if (*(_DWORD *)(v57 + 4 * v120) != -1)
                            {
                              uint64_t v174 = v97[1];
                              uint64_t v175 = *(void *)(a1 + 240);
                              uint64_t v176 = *(void *)(a1 + 504);
                              uint64_t v61 = *(void *)(a1 + 256);
                              int v177 = *(_DWORD *)(v175 + 4 * v120) + 1;
                              do
                              {
                                float v178 = (unsigned int *)(v176 + 16 * v174);
                                *(_DWORD *)(v175 + (((unint64_t)*v178 >> 5) & 0x7FFFFFC)) = v177;
                                *(_DWORD *)(v57 + (((unint64_t)*v178 >> 5) & 0x7FFFFFC)) = v58;
                                *(_DWORD *)(v61 + (((unint64_t)*v178 >> 5) & 0x7FFFFFC)) = v119;
                                uint64_t v174 = v178[2];
                                LODWORD(v119) = *v178;
                                ++v177;
                              }
                              while (v174 != 0x1FFFFFF);
LABEL_168:
                              uint64_t v44 = v361;
                              uint64_t v53 = v355;
                              unint64_t v72 = *(unsigned int *)(a1 + 512);
                              goto LABEL_169;
                            }
                          }
                          else
                          {
                            uint64_t v123 = *(unsigned int *)(a1 + 512);
                            unsigned int v124 = v97[1];
                            int v125 = v97[3] + 1;
                            *(void *)&long long v376 = __PAIR64__(v123, v119);
                            *((void *)&v376 + 1) = __PAIR64__(v125, v124);
                            if ((*(_DWORD *)(a1 + 516) & 0x7FFFFFFFu) <= v123)
                            {
                              uint64_t v129 = v97;
                              uint64_t v128 = physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::growAndPushBack((uint64_t)v369, &v376);
                              uint64_t v97 = v129;
                              unint64_t v58 = v371;
                              int v59 = v364;
                            }
                            else
                            {
                              *(_OWORD *)(*(void *)(a1 + 504) + 16 * v123) = v376;
                              uint64_t v126 = *(void *)(a1 + 504);
                              uint64_t v127 = *(unsigned int *)(a1 + 512);
                              *(_DWORD *)(a1 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v127 + 1;
                              uint64_t v128 = v126 + 16 * v127;
                            }
                            unsigned int v130 = *(_DWORD *)(*(void *)(a1 + 240) + 4 * v120);
                            unsigned int v131 = *(_DWORD *)(a1 + 480);
                            if (v131 == *(_DWORD *)(a1 + 496) && v131 < 2 * v131 + 2)
                            {
                              uint64_t v357 = v128;
                              int32x4_t v358 = v97;
                              unsigned int v356 = 2 * v131 + 2;
                              uint64_t v132 = (void *)physx::shdfnd::ReflectionAllocator<physx::IG::QueueElement>::allocate(16 * v356);
                              uint64_t v133 = *(const void **)(a1 + 488);
                              if (v133)
                              {
                                int8x16_t v359 = v132;
                                memcpy(v132, v133, (16 * *(_DWORD *)(a1 + 480)));
                                uint64_t v132 = v359;
                                if (*(void *)(a1 + 488))
                                {
                                  (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
                                  uint64_t v132 = v359;
                                }
                              }
                              *(void *)(a1 + 488) = v132;
                              uint64_t v128 = v357;
                              *(_DWORD *)(a1 + 49re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v356;
                              unsigned int v131 = *(_DWORD *)(a1 + 480);
                              unint64_t v58 = v371;
                              int v59 = v364;
                              uint64_t v97 = v358;
                            }
                            if (v131)
                            {
                              while (1)
                              {
                                unsigned int v134 = v131 - 1;
                                uint64_t v135 = (v131 - 1) >> 1;
                                uint64_t v136 = *(void *)(a1 + 488);
                                if (v130 >= *(_DWORD *)(v136 + 16 * v135 + 8)) {
                                  break;
                                }
                                float v137 = (uint64_t *)(v136 + 16 * v135);
                                uint64_t v138 = *v137;
                                uint64_t v139 = v136 + 16 * v131;
                                *(_DWORD *)(v139 + 8) = *((_DWORD *)v137 + 2);
                                *(void *)uint64_t v139 = v138;
                                unsigned int v131 = v134 >> 1;
                                if (v134 <= 1) {
                                  goto LABEL_137;
                                }
                              }
                              LODWORD(v135) = v131;
                            }
                            else
                            {
                              LODWORD(v135) = 0;
                            }
LABEL_137:
                            uint64_t v140 = *(void *)(a1 + 488) + 16 * v135;
                            *(void *)uint64_t v140 = v128;
                            *(_DWORD *)(v140 + 8) = v130;
                            ++*(_DWORD *)(a1 + 480);
                            *(_DWORD *)(*(void *)(a1 + 520) + 4 * v121) |= v122;
                            *(_DWORD *)(*(void *)(a1 + 272) + 4 * v120) = -1;
                            uint64_t v6 = v363;
                          }
                        }
                      }
                      int v94 = *(_DWORD *)(a1 + 480);
                      uint64_t v44 = v361;
                      if (v94) {
                        continue;
                      }
                      break;
                    }
                    uint64_t v141 = *(void *)(a1 + 120);
                    *(_DWORD *)(a1 + 544) = 0;
                    *(_DWORD *)(a1 + 560) = 0;
                    v382[0] = 0;
                    if (*(_DWORD *)(a1 + 512))
                    {
                      unint64_t v142 = 0;
                      int v143 = 0;
                      uint64_t v360 = v141 + 44 * v58 + 4;
                      do
                      {
                        uint64_t v144 = *(void *)(a1 + 24);
                        unint64_t v145 = (unsigned int *)(v144
                                              + 32
                                              * ((unint64_t)*(unsigned int *)(*(void *)(a1 + 504) + 16 * v142) >> 7));
                        uint64_t v146 = v145 + 2;
                        unint64_t v147 = (unint64_t)v145[2] >> 7;
                        uint64_t v148 = v144 + 32 * v147 + 12;
                        BOOL v27 = v147 == 0x1FFFFFF;
                        int v149 = (_DWORD *)v360;
                        if (!v27) {
                          int v149 = (_DWORD *)v148;
                        }
                        _DWORD *v149 = v145[3];
                        unint64_t v150 = (unint64_t)v145[3] >> 7;
                        if (v150 != 0x1FFFFFF) {
                          *(_DWORD *)(v144 + 32 * v150 + 8) = *v146;
                        }
                        ++*((_DWORD *)v382 + *((unsigned __int8 *)v145 + 5));
                        *(void *)uint64_t v146 = 0x7F0000007FLL;
                        int v365 = *((unsigned __int16 *)v145 + 3);
                        unsigned int v151 = *v145;
                        if (*v145 != -1)
                        {
                          uint64_t v152 = *(void *)(a1 + 56);
                          do
                          {
                            unsigned int v153 = *(_DWORD *)(a1 + 112);
                            uint64_t v154 = *(void *)(*(void *)(a1 + 88) + 8 * (v151 / v153));
                            LODWORD(v37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v151 >> 1;
                            if ((v151 & 1) == 0
                              || (unint64_t v155 = (unint64_t)*(unsigned int *)(*(void *)(**(void **)(a1 + 608)
                                                                                       + 8
                                                                                       * ((v151 & 0xFFFFFFFE)
                                                                                        / *(_DWORD *)(*(void *)(a1 + 608) + 24)))
                                                                           + 4
                                                                           * ((v151 & 0xFFFFFFFE)
                                                                            % *(_DWORD *)(*(void *)(a1 + 608) + 24))) >> 7,
                                  v155 == 0x1FFFFFF)
                              || (*(unsigned char *)(*(void *)(a1 + 24) + 32 * v155 + 4) & 4) != 0)
                            {
                              uint64_t v156 = a1
                                   + 16
                                   * *(unsigned int *)(*(void *)(v152 + 8 * ((v151 >> 1) / *(_DWORD *)(a1 + 80)))
                                                     + 16 * ((v151 >> 1) % *(_DWORD *)(a1 + 80)));
                              uint64_t v157 = (void *)(v156 + 536);
                              uint64_t v158 = *(unsigned int *)(v156 + 544);
                              if ((*(_DWORD *)(v156 + 548) & 0x7FFFFFFFu) <= v158)
                              {
                                physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v157, &v376);
                                unint64_t v58 = v371;
                                uint64_t v152 = *(void *)(a1 + 56);
                              }
                              else
                              {
                                *(_DWORD *)(*v157 + 4 * v1re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58) = v151 >> 1;
                                ++*(_DWORD *)(v156 + 544);
                              }
                              unsigned int v159 = *(_DWORD *)(a1 + 80);
                              BOOL v160 = (unsigned int *)(*(void *)(v152 + 8 * (v376 / v159))
                                                    + 16 * (v376 % v159));
                              BOOL v161 = (int *)(v160 + 2);
                              unsigned int v162 = v160[2];
                              if (v162 == -1) {
                                BOOL v163 = (_DWORD *)(v141 + 44 * v58 + 4 * *v160 + 28);
                              }
                              else {
                                BOOL v163 = (_DWORD *)(*(void *)(v152 + 8 * (v162 / v159)) + 16 * (v162 % v159) + 12);
                              }
                              *BOOL v163 = v160[3];
                              unsigned int v164 = v160[3];
                              int v165 = *v161;
                              if (v164 == -1)
                              {
                                uint64_t v166 = *v160;
                                *(_DWORD *)(v141 + 44 * v58 + 4 * v166 + 20) = v165;
                              }
                              else
                              {
                                *(_DWORD *)(*(void *)(v152 + 8 * (v164 / *(_DWORD *)(a1 + 80)))
                                          + 16 * (v164 % *(_DWORD *)(a1 + 80))
                                          + 8) = v165;
                                uint64_t v166 = *v160;
                              }
                              uint64_t v167 = v141 + 44 * v58 + 4 * v166;
                              --*(_DWORD *)(v167 + 36);
                              *(void *)BOOL v161 = -1;
                            }
                            unsigned int v151 = *(_DWORD *)(v154 + 8 * (v151 % v153));
                          }
                          while (v151 != -1);
                        }
                        v143 += v365;
                        ++v142;
                      }
                      while (v142 < *(unsigned int *)(a1 + 512));
                      int32x2_t v168 = (int32x2_t)v382[0];
                      uint64_t v44 = v361;
                    }
                    else
                    {
                      int v143 = 0;
                      int32x2_t v168 = 0;
                    }
                    *(_DWORD *)(*(void *)(a1 + 136) + 4 * v58) -= v143;
                    *(int32x2_t *)(v141 + 44 * v58 + 8) = vsub_s32(*(int32x2_t *)(v141+ 44 * v58+ 8), v168);
                    unsigned int v381 = 0;
                    int v183 = *(_DWORD *)(a1 + 8);
                    if (v183)
                    {
                      int v184 = v183 - 1;
                      unsigned int v185 = *(_DWORD *)(*(void *)a1 + 4 * (v183 - 1));
                      *(_DWORD *)(a1 + 8) = v184;
                      unsigned int v186 = v185 + 1;
                    }
                    else
                    {
                      unsigned int v185 = *(_DWORD *)(a1 + 16);
                      unsigned int v186 = v185 + 1;
                      *(_DWORD *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v185 + 1;
                    }
                    unsigned int v381 = v185;
                    unsigned int v187 = *(_DWORD *)(a1 + 128);
                    if (v186 <= v187) {
                      uint64_t v188 = v187;
                    }
                    else {
                      uint64_t v188 = v186;
                    }
                    long long v376 = 0x7F0000007FuLL;
                    uint64_t v377 = -1;
                    uint64_t v378 = -1;
                    int v379 = -1;
                    uint64_t v380 = 0;
                    physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::resize(a1 + 120, v188, &v376);
                    if (v381 + 1 > *(_DWORD *)(a1 + 144)) {
                      unsigned int v189 = v381 + 1;
                    }
                    else {
                      unsigned int v189 = *(_DWORD *)(a1 + 144);
                    }
                    LODWORD(v37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
                    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 136, v189, &v376);
                    unsigned int v190 = v381;
                    int v191 = *(_DWORD *)(*(void *)(a1 + 288) + ((v371 >> 3) & 0x1FFFFFFC)) >> v371;
                    uint64_t v372 = *(void *)(a1 + 120);
                    if (v191)
                    {
                      uint64_t v192 = *(unsigned int *)(a1 + 328);
                      *(_DWORD *)(*(void *)(a1 + 120) + 44 * v381 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v192;
                      if ((*(_DWORD *)(a1 + 332) & 0x7FFFFFFFu) <= v192)
                      {
                        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a1 + 320, &v381);
                      }
                      else
                      {
                        *(_DWORD *)(*(void *)(a1 + 320) + 4 * v192) = v381;
                        ++*(_DWORD *)(a1 + 328);
                      }
                      unint64_t v193 = v381;
                      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v351, v381 + 1);
                      *(_DWORD *)(*v351 + ((v193 >> 3) & 0x1FFFFFFC)) |= 1 << v193;
                    }
                    else
                    {
                      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v351, v381 + 1);
                      *(_DWORD *)(*v351 + 4 * (v190 >> 5)) &= ~(1 << v190);
                    }
                    uint64_t v194 = v372;
                    *(_DWORD *)(v372 + 44 * v190) = v353;
                    uint64_t v195 = *(void *)(a1 + 240);
                    *(_DWORD *)(v195 + 4 * v354) = 0;
                    uint64_t v196 = *(void *)(a1 + 272);
                    *(_DWORD *)(v196 + 4 * v354) = v381;
                    uint64_t v197 = *(void *)(a1 + 24);
                    *(_DWORD *)(v197 + 32 * v354 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = -128;
                    uint64_t v198 = *(void *)(a1 + 256);
                    *(_DWORD *)(v198 + 4 * v354) = -128;
                    v382[0] = 0;
                    *((_DWORD *)v382 + *(unsigned __int8 *)(v352 + 32 * v354 + 5)) = 1;
                    uint64_t v199 = *(void *)(a1 + 504);
                    if (*(_DWORD *)(a1 + 512) >= 2u)
                    {
                      float v200 = (_DWORD *)(v199 + 28);
                      unint64_t v201 = 1;
                      do
                      {
                        unint64_t v202 = *(v200 - 3);
                        unint64_t v203 = v202 >> 7;
                        unint64_t v204 = *(v200 - 7);
                        uint64_t v205 = v197 + 32 * (v202 >> 7);
                        *(_DWORD *)(v205 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v204;
                        *(_DWORD *)(v197 + ((v204 >> 2) & 0x3FFFFFE0) + 8) = v202;
                        ++*((_DWORD *)v382 + *(unsigned __int8 *)(v205 + 5));
                        *(_DWORD *)(v196 + 4 * v203) = v381;
                        *(_DWORD *)(v195 + 4 * v203) = *v200;
                        *(_DWORD *)(v198 + 4 * v203) = *(_DWORD *)(v199 + 16 * *(v200 - 1));
                        ++v201;
                        v200 += 4;
                      }
                      while (v201 < *(unsigned int *)(a1 + 512));
                    }
                    uint64_t v206 = 0;
                    int v207 = v382[0];
                    float v208 = (_DWORD *)(v372 + 44 * v190);
                    v208[2] = v382[0];
                    int v209 = HIDWORD(v382[0]);
                    v208[3] = HIDWORD(v382[0]);
                    unint64_t v210 = *(unsigned int *)(v199 + 16 * (*(_DWORD *)(a1 + 512) - 1));
                    *(_DWORD *)(v197 + ((v210 >> 2) & 0x3FFFFFE0) + 8) = -128;
                    v208[1] = v210;
                    *(_DWORD *)(*(void *)(a1 + 136) + 4 * v381) = v143;
                    v208[2] = v207;
                    v208[3] = v209;
                    char v211 = 1;
                    do
                    {
                      char v212 = v211;
                      uint64_t v213 = a1 + 16 * v206;
                      uint64_t v214 = *(unsigned int *)(v213 + 544);
                      if (v214)
                      {
                        float v215 = (_DWORD **)(v213 + 536);
                        LODWORD(v37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -1;
                        if ((*(_DWORD *)(v213 + 548) & 0x7FFFFFFFu) <= v214)
                        {
                          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v213 + 536, &v376);
                          uint64_t v194 = v372;
                          float v217 = *v215;
                        }
                        else
                        {
                          float v216 = (_DWORD *)(v213 + 544);
                          float v217 = *v215;
                          (*v215)[v214] = -1;
                          ++*v216;
                        }
                        unsigned int v218 = *(_DWORD *)(a1 + 80);
                        uint64_t v219 = *(void *)(a1 + 56);
                        *(_DWORD *)(*(void *)(v219 + 8 * (*v217 / v218)) + 16 * (*v217 % v218) + 8) = v217[1];
                        if (v214 >= 2)
                        {
                          float v220 = v217 + 2;
                          uint64_t v221 = v214 - 1;
                          do
                          {
                            uint64_t v222 = *(void *)(v219 + 8 * (*(v220 - 1) / v218)) + 16 * (*(v220 - 1) % v218);
                            *(_DWORD *)(v222 + 8) = *v220;
                            *(_DWORD *)(v222 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(v220 - 2);
                            ++v220;
                            --v221;
                          }
                          while (v221);
                        }
                        float v223 = (_DWORD *)(v194 + 44 * v190 + 4 * v206);
                        v223[5] = *v217;
                        v223[7] = v217[(v214 - 1)];
                        v223[9] = v214;
                      }
                      char v211 = 0;
                      uint64_t v206 = 1;
                    }
                    while ((v212 & 1) != 0);
                    uint64_t v53 = v355;
                    goto LABEL_174;
                  }
LABEL_169:
                  if (v72)
                  {
                    unint64_t v179 = 0;
                    float v180 = *v369;
                    float v181 = *v369;
                    do
                    {
                      unint64_t v182 = (unint64_t)*v181 >> 7;
                      if (*(_DWORD *)(v57 + 4 * v182) == -1)
                      {
                        *(_DWORD *)(*(void *)(a1 + 240) + 4 * v182) = *(_DWORD *)(*(void *)(a1 + 240)
                                                                                  + (((unint64_t)v180[4 * v181[2]] >> 5) & 0x7FFFFFC))
                                                                      + 1;
                        *(_DWORD *)(v61 + (((unint64_t)*v181 >> 5) & 0x7FFFFFC)) = v180[4 * v181[2]];
                        *(_DWORD *)(v57 + (((unint64_t)*v181 >> 5) & 0x7FFFFFC)) = v58;
                        unint64_t v72 = *(unsigned int *)(a1 + 512);
                      }
                      ++v179;
                      v181 += 4;
                    }
                    while (v179 < v72);
                  }
                }
                else
                {
                  uint64_t v6 = v363;
                  uint64_t v44 = v361;
                  if (!v67) {
                    goto LABEL_85;
                  }
                }
              }
            }
          }
LABEL_174:
          *v53 &= ~0x10u;
          if (!v43)
          {
            int v41 = *(_DWORD *)(a1 + 416);
            goto LABEL_206;
          }
        }
      }
      uint64_t v44 = 0;
      __int16 v45 = v42 + 1;
      while ((v41 & 0x7FFFFFFF) - 1 != v44)
      {
        unsigned int v43 = v45[v44++];
        if (v43) {
          goto LABEL_52;
        }
      }
    }
LABEL_206:
    bzero(*(void **)(a1 + 408), (4 * v41));
    unint64_t v13 = *(unsigned int *)(a1 + 456);
  }
  if (v13)
  {
    for (unint64_t j = 0; j < v13; ++j)
    {
      uint64_t v225 = *(unsigned int *)(*(void *)(a1 + 448) + 4 * j);
      BOOL v226 = (unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8 * (v225 / *(_DWORD *)(a1 + 80)))
                            + 16 * (v225 % *(_DWORD *)(a1 + 80)));
      if ((v226[1] & 2) != 0)
      {
        *(void *)&long long v376 = 0;
        float32x2_t v227 = *(void **)(a1 + 600);
        if (v227)
        {
          uint64_t v228 = *(void *)(*v227 + 8 * v225);
          *(void *)&long long v376 = v228;
          if (v228)
          {
            uint64_t v229 = *(void *)(a1 + 616);
            uint64_t v230 = *(unsigned int *)(v229 + 8);
            if ((*(_DWORD *)(v229 + 12) & 0x7FFFFFFFu) <= v230)
            {
              physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::growAndPushBack(v229, &v376);
            }
            else
            {
              *(void *)(*(void *)v229 + 8 * v230) = v228;
              *(_DWORD *)(v229 + 8) = v230 + 1;
            }
            *(void *)(**(void **)(a1 + 600) + 8 * v225) = 0;
          }
        }
        if ((v226[1] & 4) != 0)
        {
          physx::IG::IslandSim::removeEdgeFromActivatingList(a1, v225);
          --*(_DWORD *)(a1 + 4 * *v226 + 232);
        }
        *BOOL v226 = 0;
        *((_WORD *)v226 + 2) = 16;
        *((void *)v226 + 1) = -1;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 304, v225 + 1);
        *(_DWORD *)(*(void *)(a1 + 304) + 4 * (v225 >> 5)) &= ~(1 << v225);
        unint64_t v13 = *(unsigned int *)(a1 + 456);
      }
    }
  }
  *(_DWORD *)(a1 + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v231 = a2;
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v232 = 0;
    while (1)
    {
      unint64_t v233 = *(unsigned int *)(*(void *)v231 + 4 * v232);
      unint64_t v234 = v233 >> 7;
      uint64_t v235 = *(void *)(a1 + 272);
      unint64_t v236 = *(unsigned int *)(v235 + 4 * (v233 >> 7));
      uint64_t v237 = *(void *)(a1 + 24);
      uint64_t v238 = v237 + 32 * (v233 >> 7);
      if (v236 != -1)
      {
        uint64_t v239 = *(void *)(a1 + 120);
        float v240 = (_DWORD *)(v238 + 8);
        unint64_t v241 = *(unsigned int *)(v238 + 8);
        int v242 = (_DWORD *)(v239 + 44 * v236);
        int v243 = v241 >= 0xFFFFFF80 ? v242 + 1 : (_DWORD *)(v237 + ((v241 >> 2) & 0x3FFFFFE0) + 12);
        *int v243 = *(_DWORD *)(v238 + 12);
        unint64_t v244 = *(unsigned int *)(v238 + 12);
        if (v244 > 0xFFFFFF7F) {
          *int v242 = *v240;
        }
        else {
          *(_DWORD *)(v237 + ((v244 >> 2) & 0x3FFFFFE0) + 8) = *v240;
        }
        uint64_t v245 = *(unsigned __int8 *)(v237 + 32 * v234 + 5);
        uint64_t v246 = v239 + 44 * v236;
        --*(_DWORD *)(v246 + 8 + 4 * v245);
        *(void *)float v240 = 0x7F0000007FLL;
        *(_DWORD *)(v235 + 4 * v234) = -1;
        if (!(*(_DWORD *)(v246 + 8) + *(_DWORD *)(v246 + 12)))
        {
          physx::IG::HandleManager<unsigned int>::freeHandle(a1, v236);
          uint64_t v247 = v239 + 44 * v236;
          int v250 = *(_DWORD *)(v247 + 16);
          float v248 = (_DWORD *)(v247 + 16);
          int v249 = v250;
          if (v250 != -1)
          {
            uint64_t v251 = *(void *)(a1 + 320);
            unsigned int v252 = *(_DWORD *)(v251 + 4 * (*(_DWORD *)(a1 + 328) - 1));
            *(_DWORD *)(*(void *)(a1 + 120) + 44 * v252 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v249;
            *(_DWORD *)(v251 + 4 * *v248) = v252;
            --*(_DWORD *)(a1 + 328);
            *float v248 = -1;
            *(_DWORD *)(*(void *)(a1 + 136) + 4 * v236) -= *(unsigned __int16 *)(v237 + 32 * v234 + 6);
          }
          *(_DWORD *)(*(void *)(a1 + 288) + ((v236 >> 3) & 0x1FFFFFFC)) &= ~(1 << v236);
          *(void *)int v242 = 0x7F0000007FLL;
          *float v248 = -1;
          uint64_t v231 = a2;
        }
      }
      uint64_t v253 = *(void *)(a1 + 40);
      uint64_t v254 = *(unsigned int *)(v253 + 4 * v234);
      if ((*(unsigned char *)(v238 + 4) & 4) != 0) {
        break;
      }
      if (v254 != 0x1FFFFFF)
      {
        uint64_t v255 = *(unsigned __int8 *)(*(void *)(a1 + 24) + 32 * v234 + 5);
        uint64_t v256 = a1 + 16 * v255;
        uint64_t v257 = a1 + 4 * v255;
        unsigned int v258 = *(_DWORD *)(v257 + 336);
        uint64_t v259 = *(void *)(v256 + 152);
        if (v254 < v258)
        {
          unint64_t v260 = *(unsigned int *)(v259 + 4 * (v258 - 1));
          uint64_t v261 = (v260 >> 5) & 0x7FFFFFC;
          *(_DWORD *)(v253 + 4 * v234) = *(_DWORD *)(v253 + v261);
          *(_DWORD *)(v253 + v261) = v254;
          *(_DWORD *)(v259 + 4 * v254) = v260;
          *(_DWORD *)(v259 + 4 * *(unsigned int *)(v253 + 4 * v234)) = v233;
          --*(_DWORD *)(v257 + 336);
          LODWORD(v254) = *(_DWORD *)(v253 + 4 * v234);
        }
        float v262 = (_DWORD *)(v256 + 160);
LABEL_241:
        unint64_t v263 = *(unsigned int *)(v259 + 4 * (*v262 - 1));
        *(_DWORD *)(v253 + ((v263 >> 5) & 0x7FFFFFC)) = v254;
        *(_DWORD *)(v259 + 4 * *(unsigned int *)(v253 + 4 * v234)) = v263;
        --*v262;
        *(_DWORD *)(v253 + 4 * v234) = 0x1FFFFFF;
      }
LABEL_242:
      *(_DWORD *)uint64_t v238 = -1;
      *(unsigned char *)(v238 + 4) = 8;
      uint64_t v264 = v237 + 32 * v234;
      *(void *)(v264 + 24) = 0;
      *(_DWORD *)(v264 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_WORD *)(v264 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      if (++v232 >= (unint64_t)*(unsigned int *)(v231 + 8)) {
        goto LABEL_243;
      }
    }
    if (v254 == 0x1FFFFFF || *(_DWORD *)(*(void *)(a1 + 24) + 32 * v234 + 16)) {
      goto LABEL_242;
    }
    uint64_t v259 = *(void *)(a1 + 184);
    float v262 = (_DWORD *)(a1 + 192);
    goto LABEL_241;
  }
LABEL_243:
  if (!a3) {
    goto LABEL_299;
  }
  if (*(_DWORD *)(a1 + 328))
  {
    unint64_t v265 = 0;
    uint64_t v266 = *(void *)(a1 + 320);
    uint64_t v267 = *(void *)(a1 + 288);
    int v268 = v362;
    do
    {
      *(_DWORD *)(v267 + (((unint64_t)*(unsigned int *)(v266 + 4 * v265) >> 3) & 0x1FFFFFFC)) &= ~(1 << *(_DWORD *)(v266 + 4 * v265));
      ++v265;
      unint64_t v269 = *(unsigned int *)(a1 + 328);
    }
    while (v265 < v269);
  }
  else
  {
    LODWORD(v269) = 0;
    int v268 = v362;
  }
  int v270 = *(_DWORD *)(a1 + 192);
  uint64_t v375 = (_DWORD *)(a1 + 192);
  if (v270)
  {
    uint64_t v271 = *(void *)(a1 + 184);
    uint64_t v272 = *(void *)(a1 + 24);
    do
    {
      unint64_t v273 = (unint64_t)*(unsigned int *)(v271 + 4 * --v270) >> 7;
      uint64_t v274 = v272 + 32 * v273;
      char v277 = *(unsigned char *)(v274 + 4);
      float v275 = (unsigned char *)(v274 + 4);
      char v276 = v277;
      if (v277)
      {
        if (v268)
        {
          *float v275 = v276 & 0xFD;
          if (!*(_DWORD *)(v272 + 32 * v273 + 16))
          {
            uint64_t v286 = *(void *)(a1 + 40);
            int v287 = *(_DWORD *)(v286 + 4 * v273);
            if (v287 != 0x1FFFFFF)
            {
              unint64_t v288 = *(unsigned int *)(v271 + 4 * (*v375 - 1));
              *(_DWORD *)(v286 + ((v288 >> 5) & 0x7FFFFFC)) = v287;
              *(_DWORD *)(v271 + 4 * *(unsigned int *)(v286 + 4 * v273)) = v288;
              --*v375;
              *(_DWORD *)(v286 + 4 * v273) = 0x1FFFFFF;
            }
          }
        }
      }
      else
      {
        unsigned int v278 = *(_DWORD *)(v272 + 32 * v273);
        if (v278 != -1)
        {
          uint64_t v279 = *(void *)(a1 + 88);
          uint64_t v280 = *(uint64_t **)(a1 + 608);
          uint64_t v281 = *v280;
          do
          {
            unsigned int v282 = *(_DWORD *)(a1 + 112);
            uint64_t v283 = *(void *)(v279 + 8 * (v278 / v282));
            unint64_t v284 = (unint64_t)*(unsigned int *)(*(void *)(v281 + 8 * ((v278 ^ 1) / *((_DWORD *)v280 + 6)))
                                                     + 4 * ((v278 ^ 1) % *((_DWORD *)v280 + 6))) >> 7;
            if (v284 != 0x1FFFFFF)
            {
              unint64_t v285 = *(unsigned int *)(*(void *)(a1 + 272) + 4 * v284);
              if (v285 != -1) {
                *(_DWORD *)(*(void *)(a1 + 288) + ((v285 >> 3) & 0x1FFFFFFC)) |= 1 << v285;
              }
            }
            unsigned int v278 = *(_DWORD *)(v283 + 8 * (v278 % v282));
          }
          while (v278 != -1);
        }
      }
    }
    while (v270);
    LODWORD(v269) = *(_DWORD *)(a1 + 328);
  }
  if (!v269) {
    goto LABEL_299;
  }
  uint64_t v289 = *(void *)(a1 + 320);
  uint64_t v290 = *(void *)(a1 + 120);
  uint64_t v291 = *(void *)(a1 + 288);
  uint64_t v292 = v269;
  do
  {
    unint64_t v293 = *(unsigned int *)(v289 + 4 * --v292);
    unint64_t v294 = v293 >> 5;
    int v295 = *(_DWORD *)(v291 + 4 * (v293 >> 5));
    int v296 = 1 << v293;
    *(_DWORD *)(v291 + 4 * (v293 >> 5)) = v295 | (1 << v293);
    if ((v295 & (1 << v293)) != 0) {
      continue;
    }
    unint64_t v297 = *(unsigned int *)(v290 + 44 * v293);
    unint64_t v298 = v297 >> 7;
    if (v297 >> 7 == 0x1FFFFFF)
    {
      LODWORD(v382[0]) = *(_DWORD *)(v290 + 44 * v293);
      goto LABEL_297;
    }
    unint64_t v299 = v297 >> 7;
    do
    {
      uint64_t v300 = *(void *)(a1 + 24) + 32 * v299;
      if ((*(unsigned char *)(v300 + 4) & 1) == 0) {
        goto LABEL_298;
      }
      unint64_t v299 = (unint64_t)*(unsigned int *)(v300 + 8) >> 7;
    }
    while (v299 != 0x1FFFFFF);
    int v366 = v293;
    int v368 = 1 << v293;
    unint64_t v370 = v293 >> 5;
    uint64_t v373 = v292;
    LODWORD(v382[0]) = *(_DWORD *)(v290 + 44 * v293);
    do
    {
      uint64_t v301 = *(void *)(a1 + 24);
      uint64_t v302 = a1 + 16 * *(unsigned __int8 *)(v301 + 32 * v298 + 5);
      unsigned int v303 = (void *)(v302 + 344);
      uint64_t v304 = *(unsigned int *)(v302 + 352);
      if ((*(_DWORD *)(v302 + 356) & 0x7FFFFFFFu) <= v304)
      {
        physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)v303, v382);
        uint64_t v305 = *(void *)(a1 + 24);
      }
      else
      {
        *(_DWORD *)(*v303 + 4 * v304) = v297;
        ++*(_DWORD *)(v302 + 352);
        uint64_t v305 = v301;
      }
      int v306 = v382[0];
      unint64_t v307 = (unint64_t)LODWORD(v382[0]) >> 7;
      int v308 = (int *)(v305 + 32 * v307);
      char v309 = *((unsigned char *)v308 + 4);
      if ((v309 & 2) == 0) {
        goto LABEL_278;
      }
      uint64_t v310 = v305 + 32 * v307;
      if ((v308[1] & 4) == 0)
      {
        uint64_t v311 = *(unsigned __int8 *)(v310 + 5);
        uint64_t v312 = a1 + 16 * v311;
        uint64_t v313 = a1 + 4 * v311;
        unsigned int v314 = *(_DWORD *)(v313 + 336);
        uint64_t v315 = *(void *)(a1 + 40);
        v316 = (_DWORD *)(v315 + 4 * v307);
        uint64_t v317 = *v316;
        uint64_t v318 = *(void *)(v312 + 152);
        if (v317 < v314)
        {
          unint64_t v319 = *(unsigned int *)(v318 + 4 * (v314 - 1));
          uint64_t v320 = (v319 >> 5) & 0x7FFFFFC;
          _DWORD *v316 = *(_DWORD *)(v315 + v320);
          *(_DWORD *)(v315 + v320) = v317;
          *(_DWORD *)(v318 + 4 * v317) = v319;
          *(_DWORD *)(v318 + 4 * *v31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v306;
          --*(_DWORD *)(v313 + 336);
          LODWORD(v317) = *v316;
        }
        v321 = (_DWORD *)(v312 + 160);
        goto LABEL_284;
      }
      if (!*(_DWORD *)(v310 + 16))
      {
        uint64_t v315 = *(void *)(a1 + 40);
        v316 = (_DWORD *)(v315 + 4 * v307);
        LODWORD(v317) = *v316;
        if (*v316 != 0x1FFFFFF)
        {
          uint64_t v318 = *(void *)(a1 + 184);
          v321 = (_DWORD *)(a1 + 192);
LABEL_284:
          unint64_t v322 = *(unsigned int *)(v318 + 4 * (*v321 - 1));
          *(_DWORD *)(v315 + ((v322 >> 5) & 0x7FFFFFC)) = v317;
          *(_DWORD *)(v318 + 4 * *v31re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v322;
          --*v321;
          _DWORD *v316 = 0x1FFFFFF;
        }
      }
      *((unsigned char *)v308 + 4) = v309 & 0xDD;
      while (1)
      {
        unsigned int v323 = *v308;
        if (*v308 == -1) {
          break;
        }
        unsigned int v324 = *(_DWORD *)(a1 + 112);
        uint64_t v325 = *(void *)(*(void *)(a1 + 88) + 8 * (v323 / v324));
        unint64_t v326 = (unint64_t)*(unsigned int *)(*(void *)(**(void **)(a1 + 608)
                                                             + 8
                                                             * ((v323 ^ 1)
                                                              / *(_DWORD *)(*(void *)(a1 + 608) + 24)))
                                                 + 4 * ((v323 ^ 1) % *(_DWORD *)(*(void *)(a1 + 608) + 24))) >> 7;
        if (v326 == 0x1FFFFFF || (*(unsigned char *)(*(void *)(a1 + 24) + 32 * v326 + 4) & 2) == 0)
        {
          LODWORD(v37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v323 >> 1;
          unsigned int v327 = *(_DWORD *)(a1 + 80);
          uint64_t v328 = *(void *)(*(void *)(a1 + 56) + 8 * ((v323 >> 1) / v327));
          uint64_t v329 = (v323 >> 1) % v327;
          uint64_t v330 = v328 + 16 * v329;
          __int16 v333 = *(_WORD *)(v330 + 4);
          int v331 = (_WORD *)(v330 + 4);
          __int16 v332 = v333;
          if ((v333 & 4) != 0)
          {
            uint64_t v334 = 16 * v329;
            *int v331 = v332 & 0xFFFB;
            uint64_t v335 = a1 + 4 * *(unsigned int *)(v328 + 16 * v329);
            --*(_DWORD *)(v335 + 232);
            physx::IG::IslandSim::removeEdgeFromActivatingList(a1, v323 >> 1);
            uint64_t v336 = a1 + 16 * *(unsigned int *)(v328 + v334);
            uint64_t v337 = (void *)(v336 + 568);
            uint64_t v338 = *(unsigned int *)(v336 + 576);
            if ((*(_DWORD *)(v336 + 580) & 0x7FFFFFFFu) <= v338)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v337, &v376);
            }
            else
            {
              *(_DWORD *)(*v337 + 4 * v338) = v376;
              ++*(_DWORD *)(v336 + 576);
            }
          }
        }
        int v308 = (int *)(v325 + 8 * (v323 % v324));
      }
LABEL_278:
      LODWORD(v382[0]) = *(_DWORD *)(v301 + 32 * v298 + 8);
      LODWORD(v297) = v382[0];
      unint64_t v298 = (unint64_t)LODWORD(v382[0]) >> 7;
    }
    while (v298 != 0x1FFFFFF);
    uint64_t v290 = *(void *)(a1 + 120);
    uint64_t v289 = *(void *)(a1 + 320);
    uint64_t v291 = *(void *)(a1 + 288);
    unint64_t v294 = v370;
    uint64_t v292 = v373;
    int v296 = v368;
    LODWORD(v293) = v366;
LABEL_297:
    unsigned int v339 = *(_DWORD *)(v289 + 4 * (*(_DWORD *)(a1 + 328) - 1));
    uint64_t v340 = v290 + 44 * v293;
    *(_DWORD *)(v290 + 44 * v339 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v340 + 16);
    *(_DWORD *)(v289 + 4 * *(unsigned int *)(v340 + 16)) = v339;
    --*(_DWORD *)(a1 + 328);
    *(_DWORD *)(v340 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -1;
    *(_DWORD *)(v291 + 4 * v294) &= ~v296;
LABEL_298:
    ;
  }
  while (v292);
LABEL_299:
  uint64_t v341 = 0;
  char v342 = 1;
  do
  {
    char v343 = v342;
    uint64_t v344 = a1 + 16 * v341;
    uint64_t v345 = *(unsigned int *)(v344 + 384);
    if (v345)
    {
      uint64_t v346 = *(unsigned int **)(v344 + 376);
      unsigned int v347 = *(_DWORD *)(a1 + 80);
      uint64_t v348 = *(void *)(a1 + 56);
      do
      {
        unsigned int v349 = *v346++;
        uint64_t v350 = *(void *)(v348 + 8 * (v349 / v347)) + 16 * (v349 % v347);
        *(_WORD *)(v350 + 4) &= ~8u;
        --v345;
      }
      while (v345);
    }
    char v342 = 0;
    *(_DWORD *)(v344 + 384) = 0;
    uint64_t v341 = 1;
  }
  while ((v343 & 1) != 0);
}

uint64_t physx::IG::HandleManager<unsigned int>::freeHandle(uint64_t result, int a2)
{
  int v3 = a2;
  if (*(_DWORD *)(result + 16) == a2)
  {
    *(_DWORD *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2 - 1;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(result + 8);
    if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) <= v2)
    {
      return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result, &v3);
    }
    else
    {
      *(_DWORD *)(*(void *)result + 4 * v2) = a2;
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t physx::IG::IslandSim::mergeIslandsInternal(uint64_t result, unsigned int *a2, unsigned int *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  uint64_t v7 = *(void *)(result + 240);
  uint64_t v8 = a6 >> 7;
  uint64_t v9 = a7 >> 7;
  unint64_t v10 = (unint64_t)*a3 >> 7;
  if (v10 == 0x1FFFFFF)
  {
    uint64_t v11 = *(void *)(result + 24);
  }
  else
  {
    uint64_t v12 = *(void *)(result + 272);
    uint64_t v11 = *(void *)(result + 24);
    int v13 = *(_DWORD *)(v7 + 4 * v9) + *(_DWORD *)(v7 + 4 * v8) + 1;
    do
    {
      *(_DWORD *)(v7 + 4 * v10) += v13;
      *(_DWORD *)(v12 + 4 * v10) = a4;
      unint64_t v10 = (unint64_t)*(unsigned int *)(v11 + 32 * v10 + 8) >> 7;
    }
    while (v10 != 0x1FFFFFF);
  }
  uint64_t v14 = 0;
  *(_DWORD *)(v7 + 4 * v9) = *(_DWORD *)(v7 + 4 * v8) + 1;
  unint64_t v15 = *a3;
  *(_DWORD *)(v11 + (((unint64_t)a2[1] >> 2) & 0x3FFFFFE0) + 8) = v15;
  *(_DWORD *)(v11 + ((v15 >> 2) & 0x3FFFFFE0) + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2[1];
  a2[1] = a3[1];
  unsigned int v16 = a2[3];
  a2[2] += a3[2];
  a2[3] = v16 + a3[3];
  uint64_t v17 = *(void *)(result + 136);
  *(_DWORD *)(v17 + 4 * a4) += *(_DWORD *)(v17 + 4 * a5);
  char v18 = 1;
  do
  {
    char v19 = v18;
    __int16 v20 = &a2[v14];
    unsigned int v23 = v20[7];
    __int16 v21 = v20 + 7;
    unsigned int v22 = v23;
    if (v23 == -1) {
      uint64_t v24 = &a2[v14 + 5];
    }
    else {
      uint64_t v24 = (unsigned int *)(*(void *)(*(void *)(result + 56) + 8 * (v22 / *(_DWORD *)(result + 80)))
    }
                           + 16 * (v22 % *(_DWORD *)(result + 80))
                           + 8);
    unint64_t v25 = &a3[v14];
    unsigned int v27 = v25[5];
    unint64_t v26 = v25 + 5;
    *uint64_t v24 = v27;
    if (*v26 != -1)
    {
      *(_DWORD *)(*(void *)(*(void *)(result + 56) + 8 * (*v26 / *(_DWORD *)(result + 80)))
                + 16 * (*v26 % *(_DWORD *)(result + 80))
                + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *v21;
      _DWORD *v21 = a3[v14 + 7];
    }
    char v18 = 0;
    uint64_t v28 = &a3[v14];
    a2[v14 + 9] += v28[9];
    *unint64_t v26 = -1;
    v28[7] = -1;
    v28[9] = 0;
    uint64_t v14 = 1;
  }
  while ((v19 & 1) != 0);
  *(_OWORD *)a3 = xmmword_23441F990;
  *(_DWORD *)(v17 + 4 * a5) = 0;
  if (a3[4] != -1)
  {
    uint64_t v29 = *(void *)(result + 120);
    uint64_t v30 = *(void *)(result + 320);
    unsigned int v31 = *(_DWORD *)(v30 + 4 * (*(_DWORD *)(result + 328) - 1));
    uint64_t v32 = v29 + 44 * a5;
    *(_DWORD *)(v29 + 44 * v31 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v32 + 16);
    *(_DWORD *)(v30 + 4 * *(unsigned int *)(v32 + 16)) = v31;
    --*(_DWORD *)(result + 328);
    *(_DWORD *)(v32 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -1;
    *(_DWORD *)(*(void *)(result + 288) + 4 * (a5 >> 5)) &= ~(1 << a5);
  }
  return result;
}

void physx::IG::IslandSim::setKinematic(physx::IG::IslandSim *this, unsigned int a2)
{
  unsigned int v69 = a2;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v3 = a2 >> 7;
  unsigned int v4 = (int *)(v2 + 32 * v3);
  uint64_t v6 = (char *)(v4 + 1);
  char v5 = *((unsigned char *)v4 + 4);
  if ((v5 & 4) != 0) {
    return;
  }
  uint64_t v8 = *((void *)this + 34);
  unint64_t v9 = *(unsigned int *)(v8 + 4 * v3);
  uint64_t v10 = *((void *)this + 15);
  *(_DWORD *)(v8 + 4 * v3) = -1;
  uint64_t v11 = v4 + 2;
  unint64_t v12 = v4[2];
  if (v12 >= 0xFFFFFF80) {
    int v13 = (_DWORD *)(v10 + 44 * v9 + 4);
  }
  else {
    int v13 = (_DWORD *)(v2 + ((v12 >> 2) & 0x3FFFFFE0) + 12);
  }
  *int v13 = v4[3];
  unint64_t v14 = v4[3];
  if (v14 > 0xFFFFFF7F) {
    *(_DWORD *)(v10 + 44 * v9) = *v11;
  }
  else {
    *(_DWORD *)(v2 + ((v14 >> 2) & 0x3FFFFFE0) + 8) = *v11;
  }
  uint64_t v15 = *(unsigned __int8 *)(v2 + 32 * v3 + 5);
  uint64_t v16 = v10 + 44 * v9 + 4 * v15;
  --*(_DWORD *)(v16 + 8);
  *(void *)uint64_t v11 = 0x7F0000007FLL;
  if ((v5 & 2) != 0)
  {
    unsigned int v23 = (char *)this + 16 * v15;
    uint64_t v24 = (char *)this + 4 * v15;
    unsigned int v25 = *((_DWORD *)v24 + 84);
    uint64_t v20 = *((void *)this + 5);
    __int16 v21 = (_DWORD *)(v20 + 4 * v3);
    uint64_t v22 = *v21;
    uint64_t v18 = *((void *)v23 + 19);
    if (v22 < v25)
    {
      unint64_t v26 = *(unsigned int *)(v18 + 4 * (v25 - 1));
      uint64_t v27 = (v26 >> 5) & 0x7FFFFFC;
      _DWORD *v21 = *(_DWORD *)(v20 + v27);
      *(_DWORD *)(v20 + v27) = v22;
      *(_DWORD *)(v18 + 4 * v22) = v26;
      *(_DWORD *)(v18 + 4 * *v21) = a2;
      --*((_DWORD *)v24 + 84);
      LODWORD(v22) = *v21;
    }
    int v28 = *((_DWORD *)v23 + 40);
    uint64_t v17 = v23 + 160;
    char v19 = (unsigned int *)(v18 + 4 * (v28 - 1));
    goto LABEL_14;
  }
  if ((v5 & 0x20) != 0)
  {
    v5 &= ~0x20u;
    uint64_t v17 = (_DWORD *)((char *)this + 440);
    uint64_t v18 = *((void *)this + 54);
    char v19 = (unsigned int *)(v18 + 4 * (*((_DWORD *)this + 110) - 1));
    uint64_t v20 = *((void *)this + 5);
    __int16 v21 = (_DWORD *)(v20 + 4 * v3);
    LODWORD(v22) = *v21;
LABEL_14:
    unint64_t v29 = *v19;
    *(_DWORD *)(v20 + ((v29 >> 5) & 0x7FFFFFC)) = v22;
    *(_DWORD *)(v18 + 4 * *v21) = v29;
    --*v17;
    _DWORD *v21 = 0x1FFFFFF;
  }
  char v30 = v5 & 0xF9 | 4;
  *uint64_t v6 = v30;
  if (*(_DWORD *)(v2 + 32 * v3 + 16))
  {
    *(_DWORD *)(*((void *)this + 5) + 4 * v3) = *((_DWORD *)this + 110);
    uint64_t v31 = *((unsigned int *)this + 110);
    if ((*((_DWORD *)this + 111) & 0x7FFFFFFFu) <= v31)
    {
      physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)this + 432, &v69);
      char v30 = *v6;
    }
    else
    {
      *(_DWORD *)(*((void *)this + 54) + 4 * v31) = a2;
      ++*((_DWORD *)this + 110);
    }
    *uint64_t v6 = v30 | 0x20;
  }
  uint64_t v32 = v10 + 44 * v9;
  int v33 = *(_DWORD *)(v32 + 8);
  int v34 = *(_DWORD *)(v32 + 12);
  unsigned int v35 = *v4;
  if (*v4 != -1)
  {
    while (1)
    {
      unsigned int v36 = *(_DWORD *)(*(void *)(*((void *)this + 11) + 8 * (v35 / *((_DWORD *)this + 28)))
                      + 8 * (v35 % *((_DWORD *)this + 28)));
      unsigned int v68 = v35 >> 1;
      unsigned int v37 = *((_DWORD *)this + 20);
      uint64_t v38 = *((void *)this + 7);
      uint64_t v39 = *(void *)(v38 + 8 * ((v35 >> 1) / v37));
      uint64_t v40 = (v35 >> 1) % v37;
      int v41 = (unsigned int *)(v39 + 16 * v40);
      uint64_t v42 = (int *)(v41 + 2);
      unsigned int v43 = v41[2];
      if (v43 == -1) {
        uint64_t v44 = (_DWORD *)(v10 + 44 * v9 + 4 * *v41 + 28);
      }
      else {
        uint64_t v44 = (_DWORD *)(*(void *)(v38 + 8 * (v43 / v37)) + 16 * (v43 % v37) + 12);
      }
      *uint64_t v44 = v41[3];
      unsigned int v45 = v41[3];
      int v46 = *v42;
      if (v45 == -1)
      {
        uint64_t v47 = *v41;
        *(_DWORD *)(v10 + 44 * v9 + 4 * v47 + 20) = v46;
      }
      else
      {
        *(_DWORD *)(*(void *)(v38 + 8 * (v45 / *((_DWORD *)this + 20))) + 16 * (v45 % *((_DWORD *)this + 20)) + 8) = v46;
        uint64_t v47 = *v41;
      }
      uint64_t v48 = v10 + 44 * v9 + 4 * v47;
      --*(_DWORD *)(v48 + 36);
      *(void *)uint64_t v42 = -1;
      physx::IG::IslandSim::removeConnectionInternal(this, v68);
      physx::IG::IslandSim::removeConnectionFromGraph(this, v68);
      uint64_t v49 = v39 + 16 * v40;
      __int16 v51 = *(_WORD *)(v49 + 4);
      int v50 = (__int16 *)(v49 + 4);
      __int16 v52 = v51 & 0xFFFE;
      *int v50 = v51 & 0xFFFE;
      if ((v51 & 4) != 0)
      {
        physx::IG::IslandSim::removeEdgeFromActivatingList((uint64_t)this, v68);
        __int16 v52 = *v50 & 0xFFFB;
        *int v50 = v52;
        --*((_DWORD *)this + *v41 + 58);
      }
      if ((v52 & 2) != 0) {
        break;
      }
      if ((v52 & 8) == 0)
      {
        uint64_t v53 = (char *)this + 16 * *v41;
        char v54 = v53 + 376;
        uint64_t v55 = *((unsigned int *)v53 + 96);
        if ((*((_DWORD *)v53 + 97) & 0x7FFFFFFFu) <= v55)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v54, &v68);
          __int16 v52 = *v50;
        }
        else
        {
          *(_DWORD *)(*v54 + 4 * v55) = v68;
          ++*((_DWORD *)v53 + 96);
        }
        __int16 v56 = v52 | 8;
        goto LABEL_36;
      }
LABEL_37:
      unsigned int v35 = v36;
      if (v36 == -1) {
        goto LABEL_38;
      }
    }
    __int16 v56 = v52 | 0x20;
LABEL_36:
    *int v50 = v56;
    goto LABEL_37;
  }
LABEL_38:
  if (!(v33 + v34))
  {
    uint64_t v57 = *((void *)this + 17);
    uint64_t v58 = v10 + 44 * v9;
    *(void *)&long long v59 = -1;
    *((void *)&v59 + 1) = -1;
    *(_OWORD *)(v58 + 20) = v59;
    *(_DWORD *)(v58 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(_DWORD *)(v58 + 40) = 0;
    *(_DWORD *)(v57 + 4 * v9) = 0;
    if (*(_DWORD *)(v58 + 16) == -1)
    {
      uint64_t v65 = *((void *)this + 36);
      int v64 = ~(1 << v9);
      unint64_t v66 = v9 >> 5;
      int v67 = *(_DWORD *)(v65 + 4 * (v9 >> 5));
    }
    else
    {
      uint64_t v60 = *((void *)this + 15);
      uint64_t v61 = *((void *)this + 40);
      unsigned int v62 = *(_DWORD *)(v61 + 4 * (*((_DWORD *)this + 82) - 1));
      uint64_t v63 = v60 + 44 * v9;
      *(_DWORD *)(v60 + 44 * v62 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v63 + 16);
      *(_DWORD *)(v61 + 4 * *(unsigned int *)(v63 + 16)) = v62;
      --*((_DWORD *)this + 82);
      *(_DWORD *)(v63 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -1;
      int v64 = ~(1 << v9);
      uint64_t v65 = *((void *)this + 36);
      unint64_t v66 = v9 >> 5;
      int v67 = *(_DWORD *)(v65 + 4 * v66) & v64;
      *(_DWORD *)(v65 + 4 * v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v67;
    }
    *(_DWORD *)(v65 + 4 * v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v67 & v64;
    physx::IG::HandleManager<unsigned int>::freeHandle((uint64_t)this, v9);
  }
}

uint64_t physx::IG::IslandSim::setDynamic(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(void *)(this + 24);
  uint64_t v3 = a2 >> 7;
  uint64_t v4 = v2 + 32 * v3;
  char v7 = *(unsigned char *)(v4 + 4);
  uint64_t v6 = (char *)(v4 + 4);
  char v5 = v7;
  if ((v7 & 4) != 0)
  {
    unsigned int v8 = a2;
    uint64_t v9 = this;
    unsigned int v10 = *(_DWORD *)(v2 + 32 * v3);
    if (v10 != -1)
    {
      while (1)
      {
        unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)(v9 + 88) + 8 * (v10 / *(_DWORD *)(v9 + 112)))
                        + 8 * (v10 % *(_DWORD *)(v9 + 112)));
        unint64_t v12 = *(unsigned int *)(*(void *)(**(void **)(v9 + 608)
                                          + 8 * ((v10 ^ 1) / *(_DWORD *)(*(void *)(v9 + 608) + 24)))
                              + 4 * ((v10 ^ 1) % *(_DWORD *)(*(void *)(v9 + 608) + 24)));
        int v13 = v10 >> 1;
        LODWORD(v55) = v10 >> 1;
        unsigned int v14 = *(_DWORD *)(v9 + 80);
        uint64_t v15 = *(void *)(v9 + 56);
        uint64_t v16 = *(void *)(v15 + 8 * ((v10 >> 1) / v14));
        uint64_t v17 = (v10 >> 1) % v14;
        uint64_t v18 = (unsigned int *)(v16 + 16 * v17);
        if (v12 <= 0xFFFFFF7F)
        {
          unsigned int v19 = *(_DWORD *)(*(void *)(v9 + 272) + ((v12 >> 5) & 0x7FFFFFC));
          if (v19 != -1)
          {
            uint64_t v20 = *(void *)(v9 + 120);
            uint64_t v21 = v16 + 16 * v17;
            unsigned int v24 = *(_DWORD *)(v21 + 8);
            uint64_t v22 = (int *)(v21 + 8);
            unsigned int v23 = v24;
            if (v24 == -1) {
              unsigned int v25 = (_DWORD *)(v20 + 44 * v19 + 4 * *v18 + 28);
            }
            else {
              unsigned int v25 = (_DWORD *)(*(void *)(v15 + 8 * (v23 / v14)) + 16 * (v23 % v14) + 12);
            }
            *unsigned int v25 = v22[1];
            unsigned int v26 = v22[1];
            int v27 = *v22;
            if (v26 == -1)
            {
              uint64_t v28 = *v18;
              *(_DWORD *)(v20 + 44 * v19 + 4 * v28 + 20) = v27;
            }
            else
            {
              *(_DWORD *)(*(void *)(v15 + 8 * (v26 / *(_DWORD *)(v9 + 80))) + 16 * (v26 % *(_DWORD *)(v9 + 80)) + 8) = v27;
              uint64_t v28 = *v18;
            }
            uint64_t v29 = v20 + 44 * v19 + 4 * v28;
            --*(_DWORD *)(v29 + 36);
            *(void *)uint64_t v22 = -1;
            int v13 = v55;
          }
        }
        physx::IG::IslandSim::removeConnectionInternal((physx::IG::IslandSim *)v9, v13);
        physx::IG::IslandSim::removeConnectionFromGraph((physx::IG::IslandSim *)v9, v55);
        uint64_t v30 = v16 + 16 * v17;
        __int16 v33 = *(_WORD *)(v30 + 4);
        uint64_t v32 = (__int16 *)(v30 + 4);
        __int16 v31 = v33;
        __int16 v34 = v33 & 0xFFFE;
        *uint64_t v32 = v33 & 0xFFFE;
        if ((v33 & 4) != 0)
        {
          *uint64_t v32 = v31 & 0xFFFA;
          physx::IG::IslandSim::removeEdgeFromActivatingList(v9, v55);
          --*(_DWORD *)(v9 + 4 * *v18 + 232);
          __int16 v34 = *v32;
        }
        if ((v34 & 2) != 0) {
          break;
        }
        if ((v34 & 8) == 0)
        {
          uint64_t v35 = v9 + 16 * *v18;
          unsigned int v36 = (void *)(v35 + 376);
          uint64_t v37 = *(unsigned int *)(v35 + 384);
          if ((*(_DWORD *)(v35 + 388) & 0x7FFFFFFFu) <= v37)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v36, &v55);
            __int16 v34 = *v32;
          }
          else
          {
            *(_DWORD *)(*v36 + 4 * v37) = v55;
            ++*(_DWORD *)(v35 + 384);
          }
          __int16 v38 = v34 | 8;
          goto LABEL_21;
        }
LABEL_22:
        unsigned int v10 = v11;
        if (v11 == -1)
        {
          char v5 = *v6;
          unsigned int v8 = a2;
          goto LABEL_24;
        }
      }
      __int16 v38 = v34 | 0x20;
LABEL_21:
      *uint64_t v32 = v38;
      goto LABEL_22;
    }
LABEL_24:
    if ((v5 & 0x20) == 0)
    {
      uint64_t v39 = *(void *)(v9 + 40);
      if (*(_DWORD *)(v39 + 4 * v3) != 0x1FFFFFF)
      {
        uint64_t v40 = v2 + 32 * v3;
        int v43 = *(_DWORD *)(v40 + 16);
        int v41 = (_DWORD *)(v40 + 16);
        int v42 = v43;
        _DWORD *v41 = 0;
        if (!*(_DWORD *)(*(void *)(v9 + 24) + 32 * v3 + 16))
        {
          int v44 = *(_DWORD *)(v39 + 4 * v3);
          if (v44 != 0x1FFFFFF)
          {
            uint64_t v45 = *(void *)(v9 + 184);
            unint64_t v46 = *(unsigned int *)(v45 + 4 * (*(_DWORD *)(v9 + 192) - 1));
            *(_DWORD *)(v39 + ((v46 >> 5) & 0x7FFFFFC)) = v44;
            *(_DWORD *)(v45 + 4 * *(unsigned int *)(v39 + 4 * v3)) = v46;
            --*(_DWORD *)(v9 + 192);
            *(_DWORD *)(v39 + 4 * v3) = 0x1FFFFFF;
          }
        }
        _DWORD *v41 = v42;
      }
    }
    *uint64_t v6 = v5 & 0xFB;
    int v47 = *(_DWORD *)(v9 + 8);
    if (v47)
    {
      unsigned int v48 = v47 - 1;
      unsigned int v49 = *(_DWORD *)(*(void *)v9 + 4 * v48);
      *(_DWORD *)(v9 + 8) = v48;
    }
    else
    {
      unsigned int v49 = *(_DWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v49 + 1;
    }
    if (v49 == (*(_DWORD *)(v9 + 132) & 0x7FFFFFFF))
    {
      if (v49 < ((2 * v49) | 1)) {
        physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::recreate(v9 + 120, (2 * v49) | 1);
      }
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v9 + 288, (2 * v49) | 1);
      LODWORD(v55) = 0;
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v9 + 136, (2 * v49) | 1, &v55);
    }
    *(_DWORD *)(*(void *)(v9 + 288) + 4 * (v49 >> 5)) &= ~(1 << v49);
    unsigned int v50 = *(_DWORD *)(v9 + 128);
    *(void *)&long long v55 = 0x7F0000007FLL;
    if (v49 + 1 > v50) {
      uint64_t v51 = v49 + 1;
    }
    else {
      uint64_t v51 = v50;
    }
    uint64_t v56 = -1;
    uint64_t v57 = -1;
    int v58 = -1;
    uint64_t v59 = 0;
    *((void *)&v55 + 1) = 0;
    physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::resize(v9 + 120, v51, &v55);
    if (v49 + 1 > *(_DWORD *)(v9 + 128)) {
      unsigned int v52 = v49 + 1;
    }
    else {
      unsigned int v52 = *(_DWORD *)(v9 + 128);
    }
    LODWORD(v55) = 0;
    this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v9 + 136, v52, &v55);
    uint64_t v53 = (int32x2_t *)(*(void *)(v9 + 120) + 44 * v49);
    int32x2_t *v53 = vdup_n_s32(v8);
    v53[1].i32[*(unsigned __int8 *)(v2 + 32 * v3 + 5)] = 1;
    *(_DWORD *)(*(void *)(v9 + 272) + 4 * v3) = v49;
    *(_DWORD *)(*(void *)(v9 + 136) + 4 * v49) = 0;
    if ((*v6 & 2) != 0)
    {
      *v6 &= ~2u;
      return physx::IG::IslandSim::activateNode(v9, v8);
    }
  }
  return this;
}

float physx::PxsMaterialCombiner::combineRestitution(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 14) & 0xF) <= (*(unsigned char *)(a2 + 14) & 0xF)) {
    int v2 = *(unsigned char *)(a2 + 14) & 0xF;
  }
  else {
    int v2 = *(unsigned char *)(a1 + 14) & 0xF;
  }
  float result = *(float *)(a1 + 8);
  float v4 = *(float *)(a2 + 8);
  switch(v2)
  {
    case 0:
      float result = result + v4;
      float v4 = 0.5;
      goto LABEL_6;
    case 1:
      if (result >= v4) {
        float result = *(float *)(a2 + 8);
      }
      break;
    case 2:
LABEL_6:
      float result = result * v4;
      break;
    case 3:
      if (result <= v4) {
        float result = *(float *)(a2 + 8);
      }
      break;
    default:
      float result = 0.0;
      break;
  }
  return result;
}

unint64_t physx::PxsMaterialCombiner::combineIsotropicFriction(float *a1, float32x2_t *a2, float32x2_t *a3)
{
  if ((a3[1].i16[2] | a2[1].i16[2])) {
    return 0;
  }
  if (a2[1].u8[6] >> 4 <= a3[1].u8[6] >> 4) {
    int v3 = a3[1].u8[6] >> 4;
  }
  else {
    int v3 = a2[1].u8[6] >> 4;
  }
  switch(v3)
  {
    case 0:
      float32x2_t v4 = vadd_f32(*a2, *a3);
      float32x2_t v5 = (float32x2_t)0x3F0000003F000000;
      goto LABEL_11;
    case 1:
      int8x8_t v8 = (int8x8_t)*a2;
      int8x8_t v9 = (int8x8_t)*a3;
      int8x8_t v10 = (int8x8_t)vcgt_f32(*a3, *a2);
      goto LABEL_13;
    case 2:
      float32x2_t v4 = *a2;
      float32x2_t v5 = *a3;
LABEL_11:
      float32x2_t v7 = vmul_f32(v4, v5);
      break;
    case 3:
      int8x8_t v8 = (int8x8_t)*a2;
      int8x8_t v9 = (int8x8_t)*a3;
      int8x8_t v10 = (int8x8_t)vcgt_f32(*a2, *a3);
LABEL_13:
      float32x2_t v7 = (float32x2_t)vbsl_s8(v10, v8, v9);
      break;
    default:
      float32x2_t v7 = 0;
      break;
  }
  float v11 = a1[1] * v7.f32[0];
  float v12 = vmuls_lane_f32(*a1, v7, 1);
  float v13 = fmaxf(v11, 0.0);
  if ((float)(v12 - v13) < 0.0) {
    float v12 = v13;
  }
  return LODWORD(v12) | ((unint64_t)LODWORD(v13) << 32);
}

uint64_t PxsCMUpdateTask::release(PxsCMUpdateTask *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t result = (**(uint64_t (***)(PxsCMUpdateTask *))this)(this);
  if (v1)
  {
    int v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 40);
    return v3(v1);
  }
  return result;
}

uint64_t physx::PxsNphaseImplementationContext::processContactManager(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(**(pthread_mutex_t ***)(*(void *)(result + 8) + 1920));
  }
  unsigned int v8 = *(_DWORD *)(v7 + 72);
  if (v8)
  {
    unsigned int v9 = 0;
    do
    {
      uint64_t NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe(*(physx::Cm::FlushPool **)(*(void *)(v7 + 8) + 1920), 88, 0x10u);
      float v11 = (void *)NotThreadSafe;
      if (v8 - v9 >= 0x80) {
        int v12 = 128;
      }
      else {
        int v12 = v8 - v9;
      }
      uint64_t v13 = *(void *)(v7 + 8);
      uint64_t v14 = *(void *)(v7 + 80);
      uint64_t v15 = *(void *)(v7 + 152);
      uint64_t v16 = *(void *)(v7 + 64) + 8 * v9;
      *(void *)(NotThreadSafe + 8) = *(void *)(v13 + 2616);
      *(void *)(NotThreadSafe + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(NotThreadSafe + 32) = 0;
      *(void *)(NotThreadSafe + 40) = v16;
      *(void *)(NotThreadSafe + 48) = a2 + 32 * v9;
      *(void *)(NotThreadSafe + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14 + 16 * v9;
      *(_DWORD *)(NotThreadSafe + 64) = v12;
      *(float *)(NotThreadSafe + 68) = a4;
      *(void *)(NotThreadSafe + 72) = v13;
      *(void *)(NotThreadSafe + 80) = v15;
      uint64_t v17 = (uint64_t (**)(void *))&unk_26E723550;
      *(void *)uint64_t NotThreadSafe = &unk_26E723550;
      *(_DWORD *)(NotThreadSafe + 32) = 1;
      *(void *)(NotThreadSafe + 24) = a3;
      if (a3)
      {
        (*(void (**)(uint64_t))(*(void *)a3 + 32))(a3);
        _DWORD v11[2] = *(void *)(v11[3] + 16);
        uint64_t v17 = (uint64_t (**)(void *))*v11;
      }
      v9 += v12;
      uint64_t result = v17[5](v11);
    }
    while (v9 < v8);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v18 = **(pthread_mutex_t ***)(*(void *)(v7 + 8) + 1920);
    return pthread_mutex_unlock(v18);
  }
  return result;
}

uint64_t non-virtual thunk to'physx::PxsNphaseImplementationContext::processContactManager(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return physx::PxsNphaseImplementationContext::processContactManager(a1 - 16, a2, a3, a4);
}

uint64_t physx::PxsNphaseImplementationContext::processContactManagerSecondPass(uint64_t this, float a2, physx::PxBaseTask *a3)
{
  uint64_t v5 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(**(pthread_mutex_t ***)(*(void *)(this + 8) + 1920));
  }
  unsigned int v6 = *(_DWORD *)(v5 + 128);
  if (v6)
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe(*(physx::Cm::FlushPool **)(*(void *)(v5 + 8) + 1920), 88, 0x10u);
      unsigned int v9 = (void *)NotThreadSafe;
      uint64_t v10 = *(void *)(v5 + 8);
      if (v6 - v7 >= 0x80) {
        int v11 = 128;
      }
      else {
        int v11 = v6 - v7;
      }
      uint64_t v12 = *(void *)(v5 + 136);
      uint64_t v13 = *(void *)(v5 + 104) + 32 * v7;
      uint64_t v14 = *(void *)(v5 + 152);
      uint64_t v15 = *(void *)(v5 + 120) + 8 * v7;
      *(void *)(NotThreadSafe + 8) = *(void *)(v10 + 2616);
      *(void *)(NotThreadSafe + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(NotThreadSafe + 32) = 0;
      *(void *)(NotThreadSafe + 40) = v15;
      *(void *)(NotThreadSafe + 48) = v13;
      *(void *)(NotThreadSafe + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v12 + 16 * v7;
      *(_DWORD *)(NotThreadSafe + 64) = v11;
      *(float *)(NotThreadSafe + 68) = a2;
      *(void *)(NotThreadSafe + 72) = v10;
      *(void *)(NotThreadSafe + 80) = v14;
      uint64_t v16 = (uint64_t (**)(void *))&unk_26E723550;
      *(void *)uint64_t NotThreadSafe = &unk_26E723550;
      *(_DWORD *)(NotThreadSafe + 32) = 1;
      *(void *)(NotThreadSafe + 24) = a3;
      if (a3)
      {
        (*(void (**)(physx::PxBaseTask *))(*(void *)a3 + 32))(a3);
        char v9[2] = *(void *)(v9[3] + 16);
        uint64_t v16 = (uint64_t (**)(void *))*v9;
      }
      v7 += v11;
      this = v16[5](v9);
    }
    while (v7 < v6);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v17 = **(pthread_mutex_t ***)(*(void *)(v5 + 8) + 1920);
    return pthread_mutex_unlock(v17);
  }
  return this;
}

uint64_t non-virtual thunk to'physx::PxsNphaseImplementationContext::processContactManagerSecondPass(physx::PxsNphaseImplementationContext *this, float a2, physx::PxBaseTask *a3)
{
  return physx::PxsNphaseImplementationContext::processContactManagerSecondPass((uint64_t)this - 16, a2, a3);
}

uint64_t physx::PxsNphaseImplementationContext::updateContactManager(uint64_t *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t))(*(void *)a6 + 40))(a6);
  uint64_t v9 = a1[1];
  bzero(*(void **)(v9 + 1704), (4 * *(_DWORD *)(v9 + 1712)));
  bzero(*(void **)(v9 + 1720), (4 * *(_DWORD *)(v9 + 1728)));
  *(_DWORD *)(v9 + 1752) = 0;
  *(_OWORD *)(v9 + 173re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  *(_DWORD *)(v10 + 2524) = 0;
  *(void *)(v10 + 2528) = 0;
  *(void *)(v10 + 2608) = 0;
  uint64_t v12 = a1[6];
  uint64_t v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, __n128))(v11 + 264);
  return v13(a1, v12, a5, (__n128)LODWORD(a2));
}

uint64_t physx::PxsNphaseImplementationContext::secondPassUpdateContactManager(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 272))();
}

uint64_t physx::PxsNphaseImplementationContext::create(physx::PxsNphaseImplementationContext *this, physx::PxsContext *a2, physx::IG::IslandSim *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 176, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsNphaseImplementationContext.cpp", 604);
  uint64_t v6 = v5;
  if (v5)
  {
    *(void *)uint64_t v5 = &unk_26E7232F8;
    *(void *)(v5 + 8) = this;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = &unk_26E723420;
    *(_DWORD *)(v5 + 40) = 0;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_DWORD *)(v5 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(void *)(v5 + 152) = 0;
    *(void *)(v5 + 160) = a2;
    uint64_t v7 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      unsigned int v8 = "<allocation names disabled>";
    }
    uint64_t v9 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v7 + 24) + 16))(v7 + 24, 72, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v6 + 168) = v9;
    physx::shdfnd::MutexImpl::MutexImpl(v9);
  }
  return v6;
}

uint64_t physx::PxsNphaseImplementationContext::destroy(physx::PxsNphaseImplementationContext *this)
{
  (**(void (***)(physx::PxsNphaseImplementationContext *))this)(this);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v1();
}

uint64_t physx::PxsNphaseImplementationContext::registerContactManagers(uint64_t result, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = *a2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v4 + 56))(v4, v6, 0, 0);
      --v5;
    }
    while (v5);
  }
  return result;
}

void physx::PxsNphaseImplementationContext::registerContactManager(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v19 = a2;
  unsigned int v8 = *(unsigned __int8 *)(a2 + 86);
  unsigned int v9 = *(unsigned __int8 *)(a2 + 87);
  DWORD2(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)&long long v16 = 0;
  physx::PxsContext::createCache(*(void *)(a1 + 8), (uint64_t)&v16, a2, v8, v9);
  long long v17 = 0u;
  long long v18 = 0u;
  BYTE9(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = a4;
  int v10 = (a3 >> 31) | 0x20;
  if (a3 > 0) {
    LOBYTE(v10) = 34;
  }
  BYTE10(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v10 & 0xF7 | (8 * ((*(unsigned char *)(a2 + 80) & 2) != 0));
  if ((*(unsigned char *)(a2 + 83) & 2) != 0) {
    *(unsigned char *)(a2 + 83) |= 0x40u;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 112);
  if ((*(_DWORD *)(a1 + 116) & 0x7FFFFFFFu) <= v11)
  {
    physx::shdfnd::Array<physx::PxsContactManagerOutput,physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>>::growAndPushBack(a1 + 104, &v17);
  }
  else
  {
    uint64_t v12 = (_OWORD *)(*(void *)(a1 + 104) + 32 * v11);
    long long v13 = v18;
    _OWORD *v12 = v17;
    v12[1] = v13;
    ++*(_DWORD *)(a1 + 112);
  }
  uint64_t v14 = *(unsigned int *)(a1 + 144);
  if ((*(_DWORD *)(a1 + 148) & 0x7FFFFFFFu) <= v14)
  {
    physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::growAndPushBack(a1 + 136, &v16);
  }
  else
  {
    *(_OWORD *)(*(void *)(a1 + 136) + 16 * v14) = v16;
    ++*(_DWORD *)(a1 + 144);
  }
  uint64_t v15 = *(unsigned int *)(a1 + 128);
  if ((*(_DWORD *)(a1 + 132) & 0x7FFFFFFFu) <= v15)
  {
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::growAndPushBack(a1 + 120, &v19);
  }
  else
  {
    *(void *)(*(void *)(a1 + 120) + 8 * v15) = a2;
    *(_DWORD *)(a1 + 128) = v15 + 1;
  }
  *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 96) | (8 * *(_DWORD *)(a1 + 112) + 2147483640) | 0x80000000;
}

void non-virtual thunk to'physx::PxsNphaseImplementationContext::registerContactManager(uint64_t a1, uint64_t a2, int a3, char a4)
{
}

_DWORD *physx::PxsNphaseImplementationContext::removeContactManagersFallback(_DWORD *result, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (!result[8]) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  (*(void (**)(_DWORD *))(*(void *)result + 208))(result);
  uint64_t v4 = *(void *)(v3 + 24);
  int v5 = *(_DWORD *)(v3 + 32);
  uint64_t v38 = 0x2000000000;
  uint64_t v39 = v41;
  char v40 = 0;
  int v6 = v5 - 1;
  if (v5 - 1 < 1) {
    goto LABEL_44;
  }
  int v7 = 0;
  unsigned int v8 = v41;
  memset(v41, 0, sizeof(v41));
  while (1)
  {
    while (1)
    {
      if (v6 <= v7) {
        goto LABEL_37;
      }
      if ((v6 - v7) <= 4) {
        break;
      }
      int v9 = v7 + v6;
      if (v7 + v6 < 0 != __OFADD__(v7, v6)) {
        ++v9;
      }
      uint64_t v10 = (uint64_t)v9 >> 1;
      unsigned int v11 = *(_DWORD *)(v4 + 4 * (v9 >> 1));
      unsigned int v12 = *(_DWORD *)(v4 + 4 * v7);
      if (v11 > v12)
      {
        *(_DWORD *)(v4 + 4 * v7) = v11;
        *(_DWORD *)(v4 + 4 * v10) = v12;
        unsigned int v11 = v12;
        unsigned int v12 = *(_DWORD *)(v4 + 4 * v7);
      }
      unsigned int v13 = *(_DWORD *)(v4 + 4 * v6);
      if (v13 <= v12)
      {
        unsigned int v12 = *(_DWORD *)(v4 + 4 * v6);
      }
      else
      {
        *(_DWORD *)(v4 + 4 * v7) = v13;
        *(_DWORD *)(v4 + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v12;
        unsigned int v11 = *(_DWORD *)(v4 + 4 * v10);
      }
      if (v12 > v11)
      {
        *(_DWORD *)(v4 + 4 * v10) = v12;
        *(_DWORD *)(v4 + 4 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v11;
        unsigned int v11 = *(_DWORD *)(v4 + 4 * v10);
      }
      uint64_t v14 = v6 - 1;
      *(_DWORD *)(v4 + 4 * v10) = *(_DWORD *)(v4 + 4 * v14);
      *(_DWORD *)(v4 + 4 * v14) = v11;
      int v15 = v7;
      int v16 = v6 - 1;
      while (1)
      {
        long long v17 = (unsigned int *)(v4 + 4 * v15);
        do
        {
          unsigned int v19 = v17[1];
          ++v17;
          unsigned int v18 = v19;
          ++v15;
        }
        while (v19 > v11);
        uint64_t v20 = (unsigned int *)(v4 + 4 * v16);
        do
        {
          unsigned int v22 = *--v20;
          unsigned int v21 = v22;
          --v16;
        }
        while (v11 > v22);
        if (v15 >= v16) {
          break;
        }
        *long long v17 = v21;
        *uint64_t v20 = v18;
        unsigned int v11 = *(_DWORD *)(v4 + 4 * v14);
      }
      *long long v17 = v11;
      *(_DWORD *)(v4 + 4 * v14) = v18;
      unsigned int v23 = v38;
      unsigned int v24 = HIDWORD(v38) - 1;
      if (v15 - v7 >= v6 - v15)
      {
        if (v38 >= v24)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v37);
          unsigned int v23 = v38;
          unsigned int v8 = v39;
        }
        LODWORD(v38) = v23 + 1;
        *((_DWORD *)v8 + v23) = v15 + 1;
        uint64_t v26 = v38;
        LODWORD(v38) = v38 + 1;
        *((_DWORD *)v8 + v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v6;
        int v6 = v15 - 1;
      }
      else
      {
        if (v38 >= v24)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v37);
          unsigned int v23 = v38;
          unsigned int v8 = v39;
        }
        LODWORD(v38) = v23 + 1;
        *((_DWORD *)v8 + v23) = v7;
        uint64_t v25 = v38;
        LODWORD(v38) = v38 + 1;
        *((_DWORD *)v8 + v25) = v15 - 1;
        int v7 = v15 + 1;
      }
    }
    uint64_t v27 = v7;
    int v28 = v7 + 1;
    uint64_t v29 = v4 + 4 + 4 * v7;
    do
    {
      uint64_t v30 = 0;
      uint64_t v31 = v27++;
      int v32 = v31;
      do
      {
        if (*(_DWORD *)(v29 + 4 * v30) > *(_DWORD *)(v4 + 4 * v32)) {
          int v32 = v28 + v30;
        }
        ++v30;
      }
      while (v31 + v30 < v6);
      if (v32 != v31)
      {
        int v33 = *(_DWORD *)(v4 + 4 * v32);
        *(_DWORD *)(v4 + 4 * v32) = *(_DWORD *)(v4 + 4 * v31);
        *(_DWORD *)(v4 + 4 * v31) = v33;
      }
      ++v28;
      v29 += 4;
    }
    while (v27 != v6);
LABEL_37:
    int v34 = v38;
    if (!v38) {
      break;
    }
    LODWORD(v38) = v38 - 1;
    int v6 = *((_DWORD *)v8 + (v34 - 1));
    LODWORD(v38) = v34 - 2;
    int v7 = *((_DWORD *)v8 + (v34 - 2));
  }
  if (v40) {
    BOOL v35 = v8 == 0;
  }
  else {
    BOOL v35 = 1;
  }
  if (!v35) {
    (*(void (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
  }
LABEL_44:
  if (*(_DWORD *)(v3 + 32))
  {
    unint64_t v36 = 0;
    do
      physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(v3, *(_DWORD *)(*(void *)(v3 + 24) + 4 * v36++), v3 + 40, a2);
    while (v36 < *(unsigned int *)(v3 + 32));
  }
  *(_DWORD *)(v3 + 32) = 0;
  return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 216))(v3);
}

uint64_t physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (a2 >> 3) & 0xFFFFFFF;
  uint64_t v9 = (*(_DWORD *)(a3 + 32) - 1);
  uint64_t v10 = *(void *)(*(void *)(a3 + 24) + 8 * v9);
  uint64_t result = physx::PxsContext::destroyCache(*(void *)(a1 + 8), (unsigned char *)(*(void *)(a3 + 40) + 16 * v8));
  *(void *)(*(void *)(a3 + 24) + 8 * v8) = v10;
  uint64_t v12 = *(void *)(a3 + 40);
  uint64_t v13 = v12 + 16 * v9;
  uint64_t v14 = v12 + 16 * v8;
  int v15 = *(_DWORD *)(v13 + 8);
  *(void *)uint64_t v14 = *(void *)v13;
  *(_DWORD *)(v14 + 8) = v15;
  int v16 = (_OWORD *)(a4 + 32 * v9);
  long long v17 = (_OWORD *)(a4 + 32 * v8);
  long long v18 = v16[1];
  *long long v17 = *v16;
  v17[1] = v18;
  uint64_t v19 = *(void *)(a3 + 40) + 16 * v9;
  *(_DWORD *)(v19 + 8) = 0;
  *(void *)uint64_t v19 = 0;
  uint64_t v20 = *(void *)(a1 + 160);
  uint64_t v21 = *(void *)(v20 + 624);
  *(_DWORD *)(v10 + 108) = a2;
  if ((*(unsigned char *)(v10 + 83) & 2) != 0 && (*(_WORD *)(v10 + 80) & 0x800) == 0)
  {
    for (uint64_t i = *(void *)(**(void **)(v20 + 600) + 8 * *(unsigned int *)(v10 + 104)); i; uint64_t i = *(void *)(i + 16))
      *(_DWORD *)(v21 + 4 * *(unsigned int *)(i + 24)) = *(_DWORD *)(v10 + 108);
  }
  *(_DWORD *)(a3 + 32) = v9;
  *(_DWORD *)(a3 + 48) = v9;
  return result;
}

_DWORD *non-virtual thunk to'physx::PxsNphaseImplementationContext::removeContactManagersFallback(uint64_t a1, uint64_t a2)
{
  return physx::PxsNphaseImplementationContext::removeContactManagersFallback((_DWORD *)(a1 - 16), a2);
}

uint64_t physx::PxsNphaseImplementationContext::unregisterContactManager(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a2 + 108);
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t result = physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(a1, v3, a1 + 96, *(void *)(a1 + 104));
    int v5 = (_DWORD *)(a1 + 112);
  }
  else
  {
    uint64_t result = physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(a1, v3, a1 + 40, *(void *)(a1 + 48));
    int v5 = (_DWORD *)(a1 + 56);
  }
  --*v5;
  return result;
}

uint64_t physx::PxsNphaseImplementationContext::refreshContactManager(void *a1, uint64_t a2)
{
  unint64_t v4 = *(unsigned int *)(a2 + 108);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v10 = a1[13];
    uint64_t v11 = v10 + 32 * ((v4 >> 3) & 0xFFFFFFF);
    uint64_t v7 = *(unsigned __int8 *)(v11 + 25);
    char v8 = *(unsigned char *)(v11 + 26);
    physx::PxsNphaseImplementationContext::unregisterContactManagerInternal((uint64_t)a1, v4, (uint64_t)(a1 + 12), v10);
    uint64_t v9 = a1 + 14;
  }
  else
  {
    uint64_t v5 = a1[6];
    uint64_t v6 = v5 + 32 * (v4 >> 3);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 25);
    char v8 = *(unsigned char *)(v6 + 26);
    physx::PxsNphaseImplementationContext::unregisterContactManagerInternal((uint64_t)a1, v4, (uint64_t)(a1 + 5), v5);
    uint64_t v9 = a1 + 7;
  }
  --*v9;
  if ((v8 & 2) != 0) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = -(v8 & 1);
  }
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 56);
  return v13(a1, a2, v12, v7);
}

uint64_t physx::PxsNphaseImplementationContext::unregisterContactManagerFallback(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(_DWORD *)(a2 + 108);
  unsigned int v5 = v3;
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t result = physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(result, v3, result + 96, *(void *)(result + 104));
    --*(_DWORD *)(v2 + 112);
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(result + 32);
    if ((*(_DWORD *)(result + 36) & 0x7FFFFFFFu) <= v4)
    {
      return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result + 24, &v5);
    }
    else
    {
      *(_DWORD *)(*(void *)(result + 24) + 4 * v4) = v3;
      ++*(_DWORD *)(result + 32);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'physx::PxsNphaseImplementationContext::unregisterContactManagerFallback(uint64_t a1, uint64_t a2)
{
  return physx::PxsNphaseImplementationContext::unregisterContactManagerFallback(a1 - 16, a2);
}

uint64_t physx::PxsNphaseImplementationContext::refreshContactManagerFallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 108);
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 104);
    uint64_t v11 = v10 + 32 * ((v5 >> 3) & 0xFFFFFFF);
    uint64_t v7 = *(unsigned __int8 *)(v11 + 25);
    char v8 = *(unsigned char *)(v11 + 26);
    physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(a1, v5, a1 + 96, v10);
    --*(_DWORD *)(a1 + 112);
    if ((v8 & 2) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = a3 + ((4 * v5) & 0x3FFFFFFE0);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 25);
    char v8 = *(unsigned char *)(v6 + 26);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a2);
    if ((v8 & 2) == 0)
    {
LABEL_3:
      uint64_t v9 = -(v8 & 1);
      goto LABEL_6;
    }
  }
  *(unsigned char *)(a2 + 83) |= 0x40u;
  uint64_t v9 = 1;
LABEL_6:
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56);
  return v12(a1, a2, v9, v7);
}

uint64_t non-virtual thunk to'physx::PxsNphaseImplementationContext::refreshContactManagerFallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return physx::PxsNphaseImplementationContext::refreshContactManagerFallback(a1 - 16, a2, a3);
}

void *physx::PxsNphaseImplementationContext::appendContactManagers(physx::PxsNphaseImplementationContext *this)
{
  int v2 = *((_DWORD *)this + 32);
  uint64_t v3 = *((unsigned int *)this + 18);
  unsigned int v4 = v2 + v3;
  unsigned int v5 = *((_DWORD *)this + 19) & 0x7FFFFFFF;
  if (v2 + (int)v3 > v5)
  {
    uint64_t v6 = (char *)this + 64;
    unsigned int v7 = 2 * v5;
    if (v7 <= v4) {
      unsigned int v7 = v2 + v3;
    }
    if (v7 <= 0x100) {
      unsigned int v8 = 256;
    }
    else {
      unsigned int v8 = v7;
    }
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate((uint64_t)v6, v8);
    if ((*((_DWORD *)this + 15) & 0x7FFFFFFFu) < v8) {
      physx::shdfnd::Array<physx::PxsContactManagerOutput,physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>>::recreate((uint64_t)this + 48, v8);
    }
    if ((*((_DWORD *)this + 23) & 0x7FFFFFFFu) < v8) {
      physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::recreate((uint64_t)this + 80, v8);
    }
  }
  *((_DWORD *)this + re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v4;
  *((_DWORD *)this + 14) = v4;
  *((_DWORD *)this + 22) = v4;
  memcpy((void *)(*((void *)this + 8) + 8 * v3), *((const void **)this + 15), (8 * v2));
  memcpy((void *)(*((void *)this + 6) + 32 * v3), *((const void **)this + 13), (32 * v2));
  uint64_t result = memcpy((void *)(*((void *)this + 10) + 16 * v3), *((const void **)this + 17), (16 * v2));
  unint64_t v10 = *((unsigned int *)this + 32);
  if (v10)
  {
    unint64_t v11 = 0;
    uint64_t v12 = *((void *)this + 20);
    uint64_t v13 = *(void *)(v12 + 624);
    uint64_t v14 = *((void *)this + 15);
    do
    {
      uint64_t v15 = *(void *)(v14 + 8 * v11);
      *(_DWORD *)(v15 + 108) = *((_DWORD *)this + 10) | (8 * (v3 + v11));
      if ((*(unsigned char *)(v15 + 83) & 0x40) != 0)
      {
        *(unsigned char *)(v15 + 83) &= ~0x40u;
        if ((*(unsigned char *)(v15 + 81) & 8) == 0)
        {
          uint64_t v16 = *(void *)(**(void **)(v12 + 600) + 8 * *(unsigned int *)(v15 + 104));
          if (v16)
          {
            do
            {
              *(_DWORD *)(v13 + 4 * *(unsigned int *)(v16 + 24)) = *(_DWORD *)(v15 + 108);
              uint64_t v16 = *(void *)(v16 + 16);
            }
            while (v16);
            unint64_t v10 = *((unsigned int *)this + 32);
          }
        }
      }
      ++v11;
    }
    while (v11 < v10);
  }
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_DWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

void *physx::PxsNphaseImplementationContext::appendContactManagersFallback(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 128);
  uint64_t v5 = *(unsigned int *)(a1 + 72);
  unsigned int v6 = v4 + v5;
  unsigned int v7 = *(_DWORD *)(a1 + 76) & 0x7FFFFFFF;
  if (v4 + (int)v5 > v7)
  {
    uint64_t v8 = a1 + 64;
    unsigned int v9 = 2 * v7;
    unsigned int v10 = v9 <= v6 ? v4 + v5 : v9;
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v8, v10);
    if ((*(_DWORD *)(a1 + 92) & 0x7FFFFFFFu) < v10) {
      physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::recreate(a1 + 80, v10);
    }
  }
  *(_DWORD *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 88) = v6;
  memcpy((void *)(*(void *)(a1 + 64) + 8 * v5), *(const void **)(a1 + 120), (8 * v4));
  memcpy((void *)(a2 + 32 * v5), *(const void **)(a1 + 104), (32 * v4));
  uint64_t result = memcpy((void *)(*(void *)(a1 + 80) + 16 * v5), *(const void **)(a1 + 136), (16 * v4));
  unint64_t v12 = *(unsigned int *)(a1 + 128);
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 160);
    uint64_t v15 = *(void *)(v14 + 624);
    uint64_t v16 = *(void *)(a1 + 120);
    do
    {
      uint64_t v17 = *(void *)(v16 + 8 * v13);
      *(_DWORD *)(v17 + 108) = *(_DWORD *)(a1 + 40) | (8 * (v5 + v13));
      if ((*(unsigned char *)(v17 + 83) & 0x40) != 0)
      {
        *(unsigned char *)(v17 + 83) &= ~0x40u;
        if ((*(unsigned char *)(v17 + 81) & 8) == 0)
        {
          uint64_t v18 = *(void *)(**(void **)(v14 + 600) + 8 * *(unsigned int *)(v17 + 104));
          if (v18)
          {
            do
            {
              *(_DWORD *)(v15 + 4 * *(unsigned int *)(v18 + 24)) = *(_DWORD *)(v17 + 108);
              uint64_t v18 = *(void *)(v18 + 16);
            }
            while (v18);
            unint64_t v12 = *(unsigned int *)(a1 + 128);
          }
        }
      }
      ++v13;
    }
    while (v13 < v12);
  }
  *(_DWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  return result;
}

void *non-virtual thunk to'physx::PxsNphaseImplementationContext::appendContactManagersFallback(uint64_t a1, uint64_t a2)
{
  return physx::PxsNphaseImplementationContext::appendContactManagersFallback(a1 - 16, a2);
}

uint64_t physx::PxsNphaseImplementationContext::getNewContactManagerOutput(physx::PxsNphaseImplementationContext *this, unsigned int a2)
{
  return *((void *)this + 13) + 32 * ((a2 >> 3) & 0xFFFFFFF);
}

uint64_t non-virtual thunk to'physx::PxsNphaseImplementationContext::getNewContactManagerOutput(physx::PxsNphaseImplementationContext *this, unsigned int a2)
{
  return *((void *)this + 11) + 32 * ((a2 >> 3) & 0xFFFFFFF);
}

uint64_t physx::PxsNphaseImplementationContext::getContactManagerOutputs@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = *(void *)(this + 48);
  *(_DWORD *)a2 = 0;
  return this;
}

physx::IG::SimpleIslandManager *physx::IG::SimpleIslandManager::SimpleIslandManager(physx::IG::SimpleIslandManager *this, int a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 2048;
  *((_OWORD *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  unsigned int v6 = (char *)this + 112;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 20) = 0;
  *((_OWORD *)this + 9) = 0u;
  unsigned int v7 = (char *)this + 144;
  *((_DWORD *)this + 42) = 2048;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 50) = 2048;
  *((void *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  uint64_t v8 = (char *)this + 224;
  *((_DWORD *)this + 54) = 0;
  physx::IG::IslandSim::IslandSim((uint64_t)this + 224, (uint64_t)this + 112, (uint64_t)this + 144, (uint64_t)this + 128, a3);
  physx::IG::IslandSim::IslandSim((uint64_t)this + 864, 0, (uint64_t)v7, 0, a3);
  *((void *)this + 191) = 0;
  *((void *)this + 190) = 0;
  *((_DWORD *)this + 384) = 0;
  *((void *)this + 189) = a3;
  *((void *)this + 188) = &unk_26E723248;
  *((void *)this + 193) = this;
  *((void *)this + 194) = v9;
  *((void *)this + 198) = 0;
  *((void *)this + 197) = 0;
  *((_DWORD *)this + 398) = 0;
  *((void *)this + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a3;
  *((void *)this + 195) = &unk_26E723248;
  *((void *)this + 200) = this;
  *((void *)this + 201) = v8;
  *((void *)this + 205) = 0;
  *((void *)this + 204) = 0;
  *((_DWORD *)this + 4re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 203) = a3;
  *((void *)this + 202) = &unk_26E7232A0;
  *((void *)this + 207) = this;
  *((void *)this + 209) = a3;
  uint64_t v12 = 0;
  physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::resize((uint64_t)v6, 0x400u, &v12);
  if (a2) {
    int v10 = -1;
  }
  else {
    int v10 = 1000;
  }
  *((_DWORD *)this + 41re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v10;
  return this;
}

uint64_t physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    uint64_t v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

void physx::IG::SimpleIslandManager::~SimpleIslandManager(physx::IG::SimpleIslandManager *this)
{
  *((void *)this + 202) = &unk_26E7231E8;
  *((void *)this + 204) = 0;
  *((void *)this + 195) = &unk_26E7231E8;
  *((void *)this + 197) = 0;
  *((void *)this + 188) = &unk_26E7231E8;
  *((void *)this + 190) = 0;
  physx::IG::IslandSim::~IslandSim((physx::IG::SimpleIslandManager *)((char *)this + 864));
  physx::IG::IslandSim::~IslandSim((physx::IG::SimpleIslandManager *)((char *)this + 224));
  if (*((void *)this + 26) && (*((_DWORD *)this + 54) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  unint64_t v2 = *((unsigned int *)this + 46);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      if (*(void *)(*((void *)this + 22) + 8 * i))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v2 = *((unsigned int *)this + 46);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 176);
  int v4 = *((_DWORD *)this + 47);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 22)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v5 = *((unsigned int *)this + 38);
  if (v5)
  {
    for (unint64_t j = 0; j < v5; ++j)
    {
      if (*(void *)(*((void *)this + 18) + 8 * j))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v5 = *((unsigned int *)this + 38);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 144);
  int v7 = *((_DWORD *)this + 39);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((void *)this + 18)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 35);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 16)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v9 = *((_DWORD *)this + 31);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((void *)this + 14)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 27);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 12)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v11 = *((unsigned int *)this + 18);
  if (v11)
  {
    for (unint64_t k = 0; k < v11; ++k)
    {
      if (*(void *)(*((void *)this + 8) + 8 * k))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v11 = *((unsigned int *)this + 18);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 64);
  int v13 = *((_DWORD *)this + 19);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((void *)this + 8)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v14 = *((_DWORD *)this + 15);
  if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0 && *((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::IG::HandleManager<unsigned int>::~HandleManager((uint64_t)this + 24);
  physx::IG::HandleManager<unsigned int>::~HandleManager((uint64_t)this);
}

void physx::IG::PostThirdPassTask::~PostThirdPassTask(physx::IG::PostThirdPassTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

void physx::IG::ThirdPassTask::~ThirdPassTask(physx::IG::ThirdPassTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

unint64_t physx::IG::SimpleIslandManager::addRigidBody(physx::IG::SimpleIslandManager *this, physx::PxsRigidBody *a2, int a3, int a4)
{
  int v8 = *((_DWORD *)this + 2);
  if (v8)
  {
    int v9 = v8 - 1;
    int v10 = *(_DWORD *)(*(void *)this + 4 * (v8 - 1));
    *((_DWORD *)this + 2) = v9;
  }
  else
  {
    int v10 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v10 + 1;
  }
  unint64_t v11 = (v10 << 7);
  physx::IG::IslandSim::addNode((uint64_t)this + 224, a4, a3, 0, v10 << 7);
  *(void *)(*((void *)this + 31) + (v11 >> 2) + 24) = a2;
  physx::IG::IslandSim::addNode((uint64_t)this + 864, a4, a3, 0, v11);
  *(void *)(*((void *)this + 111) + (v11 >> 2) + 24) = a2;
  return v11;
}

uint64_t physx::IG::SimpleIslandManager::removeNode(uint64_t result, int a2)
{
  int v3 = a2;
  uint64_t v2 = *(unsigned int *)(result + 56);
  if ((*(_DWORD *)(result + 60) & 0x7FFFFFFFu) <= v2) {
    return physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(result + 48, &v3);
  }
  *(_DWORD *)(*(void *)(result + 48) + 4 * v2) = a2;
  ++*(_DWORD *)(result + 56);
  return result;
}

unint64_t physx::IG::SimpleIslandManager::addArticulation(physx::IG::SimpleIslandManager *this, physx::Sc::ArticulationSim *a2, physx::Dy::ArticulationV *a3, int a4)
{
  int v7 = *((_DWORD *)this + 2);
  if (v7)
  {
    int v8 = v7 - 1;
    int v9 = *(_DWORD *)(*(void *)this + 4 * (v7 - 1));
    *((_DWORD *)this + 2) = v8;
  }
  else
  {
    int v9 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v9 + 1;
  }
  unint64_t v10 = (v9 << 7);
  physx::IG::IslandSim::addNode((uint64_t)this + 224, a4, 0, 1, v9 << 7);
  *(void *)(*((void *)this + 31) + (v10 >> 2) + 24) = a3;
  physx::IG::IslandSim::addNode((uint64_t)this + 864, a4, 0, 1, v10);
  *(void *)(*((void *)this + 111) + (v10 >> 2) + 24) = a3;
  return v10;
}

uint64_t physx::IG::SimpleIslandManager::addContactManager(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7 = a3;
  int v10 = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    unsigned int v11 = v10 - 1;
    uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * v11);
    *(_DWORD *)(a1 + 32) = v11;
  }
  else
  {
    uint64_t v12 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12 + 1;
  }
  unsigned int v13 = 2 * v12;
  if (*(_DWORD *)(a1 + 160) == 2 * v12)
  {
    physx::Cm::BlockArray<physx::IG::NodeIndex>::resize((_DWORD *)(a1 + 144), v13 + 2048);
    physx::Cm::BlockArray<void *>::resize((_DWORD *)(a1 + 176), v13 + 2048);
    physx::Cm::BlockArray<physx::Sc::Interaction *>::resize((_DWORD *)(a1 + 64), v13 + 2048);
  }
  uint64_t v14 = *(void *)(a1 + 144);
  *(_DWORD *)(*(void *)(v14 + 8 * (v13 / *(_DWORD *)(a1 + 168))) + 4 * (v13 % *(_DWORD *)(a1 + 168))) = v7;
  *(_DWORD *)(*(void *)(v14 + 8 * ((v13 | 1) / *(_DWORD *)(a1 + 168))) + 4 * ((v13 | 1) % *(_DWORD *)(a1 + 168))) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 176) + 8 * (v12 / *(_DWORD *)(a1 + 200)))
            + 8 * (v12 % *(_DWORD *)(a1 + 200))) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8 * (v12 / *(_DWORD *)(a1 + 88)))
            + 8 * (v12 % *(_DWORD *)(a1 + 88))) = a5;
  physx::IG::IslandSim::addConnection(a1 + 864, a2, a3, 0, v12);
  if (a2) {
    *(_DWORD *)(a2 + 104) = v12;
  }
  if (v12 == 32 * *(_DWORD *)(a1 + 216)) {
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 208, v13 + 2);
  }
  if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFF) == v12)
  {
    uint64_t v16 = 0;
    physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::resize(a1 + 112, v13 + 2, &v16);
  }
  *(_DWORD *)(*(void *)(a1 + 208) + 4 * (v12 >> 5)) &= ~(1 << v12);
  return v12;
}

_DWORD *physx::Cm::BlockArray<physx::IG::NodeIndex>::resize(_DWORD *result, unsigned int a2)
{
  uint64_t v3 = (uint64_t)result;
  unsigned int v4 = result[5];
  if (v4 < a2)
  {
    unsigned int v5 = result[6];
    unsigned int v6 = (a2 + v5 - 1) / v5;
    int v7 = result[2];
    int v8 = v6 - v7;
    result[5] = v4 + (v6 - v7) * v5;
    if (v6 != v7)
    {
      do
      {
        uint64_t v9 = *(unsigned int *)(v3 + 24);
        if (v9) {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        }
        else {
          uint64_t result = 0;
        }
        unsigned int v13 = result;
        uint64_t v10 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v10)
        {
          uint64_t result = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex *,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex *>>::growAndPushBack(v3, &v13);
        }
        else
        {
          *(void *)(*(void *)v3 + 8 * v10) = result;
          *(_DWORD *)(v3 + 8) = v10 + 1;
        }
        --v8;
      }
      while (v8);
    }
  }
  unsigned int v11 = *(_DWORD *)(v3 + 16);
  if (v11 < a2)
  {
    uint64_t v12 = *(void *)v3;
    do
    {
      *(_DWORD *)(*(void *)(v12 + 8 * (v11 / *(_DWORD *)(v3 + 24))) + 4 * (v11 % *(_DWORD *)(v3 + 24))) = -128;
      ++v11;
    }
    while (a2 != v11);
  }
  *(_DWORD *)(v3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  return result;
}

_DWORD *physx::Cm::BlockArray<void *>::resize(_DWORD *result, unsigned int a2)
{
  uint64_t v3 = (uint64_t)result;
  unsigned int v4 = result[5];
  if (v4 < a2)
  {
    unsigned int v5 = result[6];
    unsigned int v6 = (a2 + v5 - 1) / v5;
    int v7 = result[2];
    int v8 = v6 - v7;
    result[5] = v4 + (v6 - v7) * v5;
    if (v6 != v7)
    {
      do
      {
        uint64_t v9 = *(unsigned int *)(v3 + 24);
        if (v9) {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        }
        else {
          uint64_t result = 0;
        }
        unsigned int v13 = result;
        uint64_t v10 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v10)
        {
          uint64_t result = (_DWORD *)physx::shdfnd::Array<void **,physx::shdfnd::ReflectionAllocator<void **>>::growAndPushBack(v3, &v13);
        }
        else
        {
          *(void *)(*(void *)v3 + 8 * v10) = result;
          *(_DWORD *)(v3 + 8) = v10 + 1;
        }
        --v8;
      }
      while (v8);
    }
  }
  unsigned int v11 = *(_DWORD *)(v3 + 16);
  if (v11 < a2)
  {
    unsigned int v12 = *(_DWORD *)(v3 + 24);
    do
    {
      *(void *)(*(void *)(*(void *)v3 + 8 * (v11 / v12)) + 8 * (v11 % v12)) = 0;
      ++v11;
    }
    while (a2 != v11);
  }
  *(_DWORD *)(v3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  return result;
}

_DWORD *physx::Cm::BlockArray<physx::Sc::Interaction *>::resize(_DWORD *result, unsigned int a2)
{
  uint64_t v3 = (uint64_t)result;
  unsigned int v4 = result[5];
  if (v4 < a2)
  {
    unsigned int v5 = result[6];
    unsigned int v6 = (a2 + v5 - 1) / v5;
    int v7 = result[2];
    int v8 = v6 - v7;
    result[5] = v4 + (v6 - v7) * v5;
    if (v6 != v7)
    {
      do
      {
        uint64_t v9 = *(unsigned int *)(v3 + 24);
        if (v9) {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        }
        else {
          uint64_t result = 0;
        }
        unsigned int v13 = result;
        uint64_t v10 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v10)
        {
          uint64_t result = (_DWORD *)physx::shdfnd::Array<physx::Sc::Interaction **,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction **>>::growAndPushBack(v3, &v13);
        }
        else
        {
          *(void *)(*(void *)v3 + 8 * v10) = result;
          *(_DWORD *)(v3 + 8) = v10 + 1;
        }
        --v8;
      }
      while (v8);
    }
  }
  unsigned int v11 = *(_DWORD *)(v3 + 16);
  if (v11 < a2)
  {
    unsigned int v12 = *(_DWORD *)(v3 + 24);
    do
    {
      *(void *)(*(void *)(*(void *)v3 + 8 * (v11 / v12)) + 8 * (v11 % v12)) = 0;
      ++v11;
    }
    while (a2 != v11);
  }
  *(_DWORD *)(v3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  return result;
}

uint64_t physx::IG::SimpleIslandManager::addConstraint(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7 = a3;
  int v10 = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    unsigned int v11 = v10 - 1;
    uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * v11);
    *(_DWORD *)(a1 + 32) = v11;
  }
  else
  {
    uint64_t v12 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12 + 1;
  }
  unsigned int v13 = 2 * v12;
  if (*(_DWORD *)(a1 + 160) == 2 * v12)
  {
    physx::Cm::BlockArray<physx::IG::NodeIndex>::resize((_DWORD *)(a1 + 144), 4 * v12 + 4);
    physx::Cm::BlockArray<void *>::resize((_DWORD *)(a1 + 176), v13 + 2);
    physx::Cm::BlockArray<physx::Sc::Interaction *>::resize((_DWORD *)(a1 + 64), v13 + 2);
  }
  uint64_t v14 = *(void *)(a1 + 144);
  *(_DWORD *)(*(void *)(v14 + 8 * (v13 / *(_DWORD *)(a1 + 168))) + 4 * (v13 % *(_DWORD *)(a1 + 168))) = v7;
  *(_DWORD *)(*(void *)(v14 + 8 * ((v13 | 1) / *(_DWORD *)(a1 + 168))) + 4 * ((v13 | 1) % *(_DWORD *)(a1 + 168))) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 176) + 8 * (v12 / *(_DWORD *)(a1 + 200)))
            + 8 * (v12 % *(_DWORD *)(a1 + 200))) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8 * (v12 / *(_DWORD *)(a1 + 88)))
            + 8 * (v12 % *(_DWORD *)(a1 + 88))) = a5;
  physx::IG::IslandSim::addConnection(a1 + 224, a2, a3, 1u, v12);
  physx::IG::IslandSim::addConnection(a1 + 864, v15, v16, 1u, v12);
  int v17 = *(_DWORD *)(a1 + 216);
  if (v12 == 32 * v17) {
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 208, (v17 << 6) | 2);
  }
  if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFF) == v12)
  {
    uint64_t v19 = 0;
    physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::resize(a1 + 112, v13 + 2, &v19);
  }
  *(_DWORD *)(*(void *)(a1 + 208) + 4 * (v12 >> 5)) |= 1 << v12;
  return v12;
}

uint64_t physx::IG::SimpleIslandManager::deactivateNode(uint64_t a1, unsigned int a2)
{
  physx::IG::IslandSim::deactivateNode(a1 + 224, a2);
  return physx::IG::IslandSim::deactivateNode(a1 + 864, a2);
}

uint64_t physx::IG::SimpleIslandManager::putNodeToSleep(uint64_t result, unsigned int a2)
{
  if ((~a2 & 0xFFFFFF80) != 0)
  {
    uint64_t v3 = result;
    physx::IG::IslandSim::deactivateNode(result + 224, a2);
    return physx::IG::IslandSim::deactivateNode(v3 + 864, a2);
  }
  return result;
}

uint64_t physx::IG::SimpleIslandManager::removeConnection(uint64_t this, unsigned int a2)
{
  unsigned int v5 = a2;
  if (a2 != -1)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(unsigned int *)(this + 104);
    if ((*(_DWORD *)(this + 108) & 0x7FFFFFFFu) <= v3)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(this + 96, &v5);
      a2 = v5;
    }
    else
    {
      *(_DWORD *)(*(void *)(this + 96) + 4 * v3) = a2;
      ++*(_DWORD *)(this + 104);
    }
    this = physx::IG::IslandSim::removeConnection(v2 + 864, a2);
    unsigned int v4 = v5;
    if ((*(_DWORD *)(*(void *)(v2 + 208) + (((unint64_t)v5 >> 3) & 0x1FFFFFFC)) >> v5))
    {
      this = physx::IG::IslandSim::removeConnection(v2 + 224, v5);
      *(_DWORD *)(*(void *)(v2 + 208) + (((unint64_t)v5 >> 3) & 0x1FFFFFFC)) &= ~(1 << v5);
      unsigned int v4 = v5;
    }
    *(void *)(*(void *)(*(void *)(v2 + 176) + 8 * (v4 / *(_DWORD *)(v2 + 200)))
              + 8 * (v4 % *(_DWORD *)(v2 + 200))) = 0;
    *(void *)(*(void *)(*(void *)(v2 + 64) + 8 * (v4 / *(_DWORD *)(v2 + 88))) + 8
                                                                                      * (v4 % *(_DWORD *)(v2 + 88))) = 0;
  }
  return this;
}

void physx::IG::SimpleIslandManager::firstPassIslandGen(physx::IG::SimpleIslandManager *this)
{
  *((_DWORD *)this + 304) = 0;
  uint64_t v2 = (physx::IG::SimpleIslandManager *)((char *)this + 864);
  *((_DWORD *)this + 308) = 0;
  *((_DWORD *)this + 360) = 0;
  *((_DWORD *)this + 364) = 0;
  physx::IG::IslandSim::wakeIslands((_DWORD *)this + 216);
  physx::IG::IslandSim::processNewEdges(v2);
  physx::IG::IslandSim::removeDestroyedEdges(v2);
  physx::IG::IslandSim::processLostEdges((uint64_t)v2, (uint64_t)this + 48, 0, 0);
}

void physx::IG::SimpleIslandManager::secondPassIslandGen(physx::IG::SimpleIslandManager *this)
{
  uint64_t v2 = (physx::IG::SimpleIslandManager *)((char *)this + 224);
  physx::IG::IslandSim::wakeIslands((_DWORD *)this + 56);
  physx::IG::IslandSim::processNewEdges(v2);
  physx::IG::IslandSim::removeDestroyedEdges(v2);
  physx::IG::IslandSim::processLostEdges((uint64_t)v2, (uint64_t)this + 48, 0, 0);
  if (*((_DWORD *)this + 14))
  {
    unint64_t v3 = 0;
    do
      physx::IG::HandleManager<unsigned int>::freeHandle((uint64_t)this, *(_DWORD *)(*((void *)this + 6) + 4 * v3++) >> 7);
    while (v3 < *((unsigned int *)this + 14));
  }
  *((_DWORD *)this + 14) = 0;
}

void physx::IG::ThirdPassTask::runInternal(physx::IG::IslandSim **this)
{
  physx::IG::IslandSim::removeDestroyedEdges(this[6]);
  uint64_t v2 = (uint64_t)this[6];
  uint64_t v3 = (uint64_t)this[5] + 48;
  physx::IG::IslandSim::processLostEdges(v2, v3, 1, 1);
}

uint64_t physx::IG::PostThirdPassTask::runInternal(physx::IG::PostThirdPassTask *this)
{
  uint64_t result = *((void *)this + 5);
  if (*(_DWORD *)(result + 56))
  {
    unint64_t v3 = 0;
    do
    {
      physx::IG::HandleManager<unsigned int>::freeHandle(result, *(_DWORD *)(*(void *)(result + 48) + 4 * v3++) >> 7);
      uint64_t result = *((void *)this + 5);
    }
    while (v3 < *(unsigned int *)(result + 56));
  }
  *(_DWORD *)(result + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  if (*(_DWORD *)(result + 104))
  {
    unint64_t v4 = 0;
    do
    {
      physx::IG::HandleManager<unsigned int>::freeHandle(result + 24, *(_DWORD *)(*(void *)(result + 96) + 4 * v4++));
      uint64_t result = *((void *)this + 5);
    }
    while (v4 < *(unsigned int *)(result + 104));
  }
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t physx::IG::SimpleIslandManager::thirdPassIslandGen(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 57re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 81re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(a1 + 1648) = 1;
  *(void *)(a1 + 1640) = a2;
  if (a2)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
    *(void *)(a1 + 1632) = *(void *)(*(void *)(a1 + 1640) + 16);
  }
  *(_DWORD *)(a1 + 153re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  *(void *)(a1 + 1528) = a1 + 1616;
  (*(void (**)(uint64_t))(*(void *)(a1 + 1616) + 32))(a1 + 1616);
  *(void *)(a1 + 1520) = *(void *)(*(void *)(a1 + 1528) + 16);
  *(_DWORD *)(a1 + 1592) = 1;
  *(void *)(a1 + 1584) = a1 + 1616;
  (*(void (**)(uint64_t))(*(void *)(a1 + 1616) + 32))(a1 + 1616);
  *(void *)(a1 + 157re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(*(void *)(a1 + 1584) + 16);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 1520) + 144))(*(void *)(a1 + 1520), a1 + 1504);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 1576) + 144))(*(void *)(a1 + 1576), a1 + 1560);
  unint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 1632) + 144);
  return v3();
}

void *physx::IG::SimpleIslandManager::setEdgeConnected(void *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 >> 5;
  int v4 = 1 << a2;
  if ((*(_DWORD *)(this[26] + 4 * v3) & (1 << a2)) == 0)
  {
    unsigned int v5 = this;
    this = physx::IG::IslandSim::addConnection((uint64_t)(this + 28), a2, a3, 0, a2);
    *(_DWORD *)(v5[26] + 4 * v3) |= v4;
  }
  return this;
}

uint64_t physx::IG::SimpleIslandManager::deactivateEdge(uint64_t this, unsigned int a2)
{
  uint64_t v3 = (void *)(*(void *)(this + 112) + 8 * a2);
  if (*v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = a2;
    uint64_t v6 = *(unsigned int *)(this + 136);
    if ((*(_DWORD *)(this + 140) & 0x7FFFFFFFu) <= v6)
    {
      this = physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::growAndPushBack(this + 128, v3);
    }
    else
    {
      *(void *)(*(void *)(this + 128) + 8 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *v3;
      *(_DWORD *)(this + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v6 + 1;
    }
    *(void *)(*(void *)(v4 + 112) + 8 * v5) = 0;
  }
  return this;
}

uint64_t physx::IG::SimpleIslandManager::setEdgeDisconnected(uint64_t this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  int v3 = 1 << a2;
  if ((*(_DWORD *)(*(void *)(this + 208) + 4 * v2) & (1 << a2)) != 0)
  {
    uint64_t v4 = this;
    this = physx::IG::IslandSim::removeConnection(this + 224, a2);
    *(_DWORD *)(*(void *)(v4 + 208) + 4 * v2) &= ~v3;
  }
  return this;
}

uint64_t physx::IG::SimpleIslandManager::clearEdgeRigidCM(uint64_t this, unsigned int a2)
{
  *(void *)(*(void *)(*(void *)(this + 176) + 8 * (a2 / *(_DWORD *)(this + 200)))
            + 8 * (a2 % *(_DWORD *)(this + 200))) = 0;
  int v3 = (void *)(*(void *)(this + 112) + 8 * a2);
  if (*v3)
  {
    uint64_t v4 = this;
    uint64_t v5 = a2;
    uint64_t v6 = *(unsigned int *)(this + 136);
    if ((*(_DWORD *)(this + 140) & 0x7FFFFFFFu) <= v6)
    {
      this = physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::growAndPushBack(this + 128, v3);
    }
    else
    {
      *(void *)(*(void *)(this + 128) + 8 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *v3;
      *(_DWORD *)(this + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v6 + 1;
    }
    *(void *)(*(void *)(v4 + 112) + 8 * v5) = 0;
  }
  return this;
}

void physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext(physx::PxsNphaseImplementationContext *this)
{
  physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext(this);
  JUMPOUT(0x237DBCBD0);
}

{
  int v2;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  *(void *)this = &unk_26E7232F8;
  *((void *)this + 2) = &unk_26E723420;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 21);
  uint64_t v2 = *((_DWORD *)this + 37);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 17) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v4 = *((_DWORD *)this + 33);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 15) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v6 = *((_DWORD *)this + 29);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 13)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v7 = *((_DWORD *)this + 23);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((void *)this + 10)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 19);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 8)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v9 = *((_DWORD *)this + 15);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 9);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 3)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

uint64_t physx::PxsNphaseImplementationContext::getGPUContactManagerOutputBase(physx::PxsNphaseImplementationContext *this)
{
  return 0;
}

uint64_t physx::PxsNphaseImplementationContext::setContactModifyCallback(uint64_t result, uint64_t a2)
{
  *(void *)(result + 152) = a2;
  return result;
}

uint64_t physx::PxsNphaseImplementationContext::lock(uint64_t this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_lock(*(pthread_mutex_t **)(this + 168));
  }
  return this;
}

uint64_t physx::PxsNphaseImplementationContext::unlock(uint64_t this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)(this + 168));
  }
  return this;
}

void non-virtual thunk to'physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext(physx::PxsNphaseImplementationContext *this)
{
}

{
  uint64_t vars8;

  physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext((physx::PxsNphaseImplementationContext *)((char *)this - 16));
  JUMPOUT(0x237DBCBD0);
}

uint64_t non-virtual thunk to'physx::PxsNphaseImplementationContext::setContactModifyCallback(uint64_t result, uint64_t a2)
{
  *(void *)(result + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  return result;
}

uint64_t non-virtual thunk to'physx::PxsNphaseImplementationContext::lock(uint64_t this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_lock(*(pthread_mutex_t **)(this + 152));
  }
  return this;
}

uint64_t non-virtual thunk to'physx::PxsNphaseImplementationContext::unlock(uint64_t this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)(this + 152));
  }
  return this;
}

const char *physx::IG::ThirdPassTask::getName(physx::IG::ThirdPassTask *this)
{
  return "ThirdPassIslandGenTask";
}

const char *physx::IG::PostThirdPassTask::getName(physx::IG::PostThirdPassTask *this)
{
  return "PostThirdPassTask";
}

void PxsCMDiscreteUpdateTask::~PxsCMDiscreteUpdateTask(PxsCMDiscreteUpdateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *PxsCMDiscreteUpdateTask::getName(PxsCMDiscreteUpdateTask *this)
{
  return "PxsContext.contactManagerDiscreteUpdate";
}

uint64_t PxsCMDiscreteUpdateTask::runInternal(PxsCMDiscreteUpdateTask *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = (uint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 440));
  if (!v3)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpThreadContext>::getName() [T = physx::PxcNpThreadContext]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 7335, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      uint64_t v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(v3 - 8) = v3 - v6;
    }
    else
    {
      uint64_t v3 = 0;
    }
    physx::PxcNpThreadContext::PxcNpThreadContext(v3, *(void *)(v2 + 448));
  }
  *(_DWORD *)(v3 + 7200) = *((_DWORD *)this + 17);
  uint64_t v7 = *((void *)this + 9);
  int v8 = *(unsigned __int8 *)(v7 + 2584);
  *(unsigned char *)(v3 + 7184) = v8;
  *(unsigned char *)(v3 + 7187) = *(unsigned char *)(v7 + 2586);
  *(unsigned char *)(v3 + 7185) = *(unsigned char *)(v7 + 2585);
  *(void *)(v3 + 7168) = *(void *)(v7 + 2592);
  *(void *)(v3 + 717re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(*(void *)(v7 + 2600) + 8);
  if (v8) {
    PxsCMDiscreteUpdateTask::processCms<&(physx::PxcDiscreteNarrowPhasePCM(physx::PxcNpThreadContext &,physx::PxcNpWorkUnit const&,physx::Gu::Cache &,physx::PxsContactManagerOutput &))>((uint64_t)this, v3);
  }
  else {
    PxsCMDiscreteUpdateTask::processCms<&(physx::PxcDiscreteNarrowPhase(physx::PxcNpThreadContext &,physx::PxcNpWorkUnit const&,physx::Gu::Cache &,physx::PxsContactManagerOutput &))>((uint64_t)this, v3);
  }
  uint64_t v9 = *(void *)(*((void *)this + 9) + 440);
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 8));
  *(void *)uint64_t v3 = *(void *)v9;
  *(void *)uint64_t v9 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
}

void PxsCMDiscreteUpdateTask::processCms<&(physx::PxcDiscreteNarrowPhasePCM(physx::PxcNpThreadContext &,physx::PxcNpWorkUnit const&,physx::Gu::Cache &,physx::PxsContactManagerOutput &))>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  unsigned int v68 = (PxsCMDiscreteUpdateTask *)a1;
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)unint64_t v72 = 0;
  unsigned int v5 = *(_DWORD *)(a2 + 7212);
  unsigned int v71 = v5;
  uint64_t v6 = (4 * v3);
  if (v6 >= 0x401)
  {
    int v64 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v70, (4 * v3), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsNphaseImplementationContext.cpp", 407);
    if (v3) {
      goto LABEL_3;
    }
LABEL_37:
    int v55 = 0;
    int v54 = 0;
    unsigned int v52 = 0;
    unsigned int v53 = 0;
    goto LABEL_39;
  }
  MEMORY[0x270FA5388](a1);
  int v64 = (uint64_t *)((char *)&v56 - ((v6 + 15) & 0x1FFFFFFF0));
  bzero(v64, (4 * v3));
  if (!v3) {
    goto LABEL_37;
  }
LABEL_3:
  unsigned int v66 = 0;
  unsigned int v67 = v5;
  uint64_t v57 = (4 * v3);
  uint64_t v58 = v4;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v61 = 0;
  unint64_t v62 = 0;
  uint64_t v9 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = (void *)(v2 + 7264);
  uint64_t v59 = (uint64_t *)(v2 + 7280);
  unsigned int v10 = v3 - 1;
  uint64_t v69 = 32 * v3;
  uint64_t v65 = v2;
  unsigned int v11 = v68;
  do
  {
    if ((int)v9 + 1 < v10) {
      unsigned int v12 = v9 + 1;
    }
    else {
      unsigned int v12 = v10;
    }
    if ((int)v9 + 2 >= v10) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = (v9 + 2);
    }
    _X8 = *(void *)(v4 + 8 * v13);
    __asm { PRFM            #0, [X8] }
    uint64_t v19 = *((void *)v11 + 6);
    _X10 = v19 + 32 * v13;
    __asm { PRFM            #0, [X10] }
    uint64_t v22 = *(void *)(v4 + 8 * v12);
    _X10 = *(void *)(v22 + 48);
    __asm { PRFM            #0, [X10] }
    _X10 = *(void *)(v22 + 56);
    __asm { PRFM            #0, [X10] }
    uint64_t v27 = *(void *)(*(void *)(v2 + 7168) + 8);
    _X11 = v27 + 32 * *(unsigned int *)(v22 + 96);
    __asm { PRFM            #0, [X11] }
    _X9 = v27 + 32 * *(unsigned int *)(v22 + 100);
    __asm { PRFM            #0, [X9] }
    uint64_t v32 = *(void *)(v4 + 8 * v9);
    if (v32)
    {
      int v33 = (unsigned __int8 *)(v19 + v7);
      *(unsigned char *)(v19 + v7 + 27) = *(unsigned char *)(v19 + v7 + 25);
      char v34 = *(unsigned char *)(v19 + v7 + 26);
      physx::PxcDiscreteNarrowPhasePCM(v2, v32 + 32, *((void *)v11 + 7) + v8, v19 + v7);
      unsigned __int8 v35 = v33[26];
      unsigned int v36 = v33[25];
      if (v33[25] && (*(_WORD *)(v32 + 80) & 0x80) != 0)
      {
        unsigned int v37 = v66;
        *((_DWORD *)v64 + v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9;
        unsigned int v66 = v37 + 1;
      }
      else
      {
        unsigned int v38 = v67;
        if (v67 <= v36) {
          unsigned int v38 = v33[25];
        }
        unsigned int v67 = v38;
        if (v33[27] != v36)
        {
          unint64_t v39 = *(unsigned int *)(*(void *)(v4 + 8 * v9) + 88);
          char v40 = v59;
          physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v59, v39 + 1);
          int v41 = 1 << v39;
          uint64_t v42 = *v40;
          uint64_t v4 = v58;
          unint64_t v43 = v39 >> 3;
          uint64_t v2 = v65;
          *(_DWORD *)(v42 + (v43 & 0x1FFFFFFC)) |= v41;
          _CF = v33[27] >= v33[25];
          unsigned int v45 = v61;
          int v46 = v62;
          if (v33[27] < v33[25]) {
            unsigned int v47 = v61 + 1;
          }
          else {
            unsigned int v47 = HIDWORD(v62);
          }
          int v48 = HIDWORD(v61);
          if (v33[27] >= v33[25]) {
            int v46 = HIDWORD(v61) + 1;
          }
          unint64_t v62 = __PAIR64__(v47, v46);
          if (_CF) {
            int v48 = HIDWORD(v61) + 1;
          }
          else {
            unsigned int v45 = v61 + 1;
          }
          unint64_t v61 = __PAIR64__(v48, v45);
        }
      }
      int v49 = v35 & 2;
      if (v49 == (v34 & 2))
      {
        unsigned int v11 = v68;
        if ((v34 & 3) == 0) {
          *(unsigned char *)(v32 + 83) = *(unsigned char *)(v32 + 83) & 0x40 | v33[26];
        }
      }
      else
      {
        *(unsigned char *)(v32 + 83) = *(unsigned char *)(v32 + 83) & 0x40 | v33[26];
        unint64_t v50 = *(unsigned int *)(*(void *)(v4 + 8 * v9) + 88);
        uint64_t v51 = v60;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v60, v50 + 1);
        *(_DWORD *)(*v51 + ((v50 >> 3) & 0x1FFFFFFC)) |= 1 << v50;
        if (v49) {
          LODWORD(v63) = v63 + 1;
        }
        else {
          ++HIDWORD(v63);
        }
        uint64_t v2 = v65;
        unsigned int v11 = v68;
      }
    }
    v8 += 16;
    v7 += 32;
    ++v9;
  }
  while (v69 != v7);
  unsigned int v5 = v67;
  v72[1] = v62;
  unsigned int v71 = v67;
  v72[0] = HIDWORD(v62);
  LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v57;
  if (v66)
  {
    PxsCMDiscreteUpdateTask::runModifiableContactManagers(v11, (unsigned int *)v64, v66, (physx::PxcNpThreadContext *)v2, v72, &v72[1], &v71);
    unsigned int v53 = v72[0];
    unsigned int v52 = v72[1];
    unsigned int v5 = v71;
    int v55 = v63;
    int v54 = HIDWORD(v63);
  }
  else
  {
    int v55 = v63;
    int v54 = HIDWORD(v63);
    unsigned int v53 = v61;
    unsigned int v52 = HIDWORD(v61);
  }
LABEL_39:
  *(_DWORD *)(v2 + 7296) += v55;
  *(_DWORD *)(v2 + 7300) += v54;
  *(_DWORD *)(v2 + 7304) += v53;
  *(_DWORD *)(v2 + 7308) += v52;
  *(_DWORD *)(v2 + 72re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  if (v6 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v70, v64);
  }
}

void PxsCMDiscreteUpdateTask::processCms<&(physx::PxcDiscreteNarrowPhase(physx::PxcNpThreadContext &,physx::PxcNpWorkUnit const&,physx::Gu::Cache &,physx::PxsContactManagerOutput &))>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  unsigned int v68 = (PxsCMDiscreteUpdateTask *)a1;
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)unint64_t v72 = 0;
  unsigned int v5 = *(_DWORD *)(a2 + 7212);
  unsigned int v71 = v5;
  uint64_t v6 = (4 * v3);
  if (v6 >= 0x401)
  {
    int v64 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v70, (4 * v3), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsNphaseImplementationContext.cpp", 407);
    if (v3) {
      goto LABEL_3;
    }
LABEL_37:
    int v55 = 0;
    int v54 = 0;
    unsigned int v52 = 0;
    unsigned int v53 = 0;
    goto LABEL_39;
  }
  MEMORY[0x270FA5388](a1);
  int v64 = (uint64_t *)((char *)&v56 - ((v6 + 15) & 0x1FFFFFFF0));
  bzero(v64, (4 * v3));
  if (!v3) {
    goto LABEL_37;
  }
LABEL_3:
  unsigned int v66 = 0;
  unsigned int v67 = v5;
  uint64_t v57 = (4 * v3);
  uint64_t v58 = v4;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v61 = 0;
  unint64_t v62 = 0;
  uint64_t v9 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = (void *)(v2 + 7264);
  uint64_t v59 = (uint64_t *)(v2 + 7280);
  unsigned int v10 = v3 - 1;
  uint64_t v69 = 32 * v3;
  uint64_t v65 = v2;
  unsigned int v11 = v68;
  do
  {
    if ((int)v9 + 1 < v10) {
      unsigned int v12 = v9 + 1;
    }
    else {
      unsigned int v12 = v10;
    }
    if ((int)v9 + 2 >= v10) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = (v9 + 2);
    }
    _X8 = *(void *)(v4 + 8 * v13);
    __asm { PRFM            #0, [X8] }
    uint64_t v19 = *((void *)v11 + 6);
    _X10 = v19 + 32 * v13;
    __asm { PRFM            #0, [X10] }
    uint64_t v22 = *(void *)(v4 + 8 * v12);
    _X10 = *(void *)(v22 + 48);
    __asm { PRFM            #0, [X10] }
    _X10 = *(void *)(v22 + 56);
    __asm { PRFM            #0, [X10] }
    uint64_t v27 = *(void *)(*(void *)(v2 + 7168) + 8);
    _X11 = v27 + 32 * *(unsigned int *)(v22 + 96);
    __asm { PRFM            #0, [X11] }
    _X9 = v27 + 32 * *(unsigned int *)(v22 + 100);
    __asm { PRFM            #0, [X9] }
    uint64_t v32 = *(void *)(v4 + 8 * v9);
    if (v32)
    {
      int v33 = (unsigned __int8 *)(v19 + v7);
      *(unsigned char *)(v19 + v7 + 27) = *(unsigned char *)(v19 + v7 + 25);
      char v34 = *(unsigned char *)(v19 + v7 + 26);
      physx::PxcDiscreteNarrowPhase(v2, v32 + 32, *((void *)v11 + 7) + v8, v19 + v7);
      unsigned __int8 v35 = v33[26];
      unsigned int v36 = v33[25];
      if (v33[25] && (*(_WORD *)(v32 + 80) & 0x80) != 0)
      {
        unsigned int v37 = v66;
        *((_DWORD *)v64 + v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9;
        unsigned int v66 = v37 + 1;
      }
      else
      {
        unsigned int v38 = v67;
        if (v67 <= v36) {
          unsigned int v38 = v33[25];
        }
        unsigned int v67 = v38;
        if (v33[27] != v36)
        {
          unint64_t v39 = *(unsigned int *)(*(void *)(v4 + 8 * v9) + 88);
          char v40 = v59;
          physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v59, v39 + 1);
          int v41 = 1 << v39;
          uint64_t v42 = *v40;
          uint64_t v4 = v58;
          unint64_t v43 = v39 >> 3;
          uint64_t v2 = v65;
          *(_DWORD *)(v42 + (v43 & 0x1FFFFFFC)) |= v41;
          _CF = v33[27] >= v33[25];
          unsigned int v45 = v61;
          int v46 = v62;
          if (v33[27] < v33[25]) {
            unsigned int v47 = v61 + 1;
          }
          else {
            unsigned int v47 = HIDWORD(v62);
          }
          int v48 = HIDWORD(v61);
          if (v33[27] >= v33[25]) {
            int v46 = HIDWORD(v61) + 1;
          }
          unint64_t v62 = __PAIR64__(v47, v46);
          if (_CF) {
            int v48 = HIDWORD(v61) + 1;
          }
          else {
            unsigned int v45 = v61 + 1;
          }
          unint64_t v61 = __PAIR64__(v48, v45);
        }
      }
      int v49 = v35 & 2;
      if (v49 == (v34 & 2))
      {
        unsigned int v11 = v68;
        if ((v34 & 3) == 0) {
          *(unsigned char *)(v32 + 83) = *(unsigned char *)(v32 + 83) & 0x40 | v33[26];
        }
      }
      else
      {
        *(unsigned char *)(v32 + 83) = *(unsigned char *)(v32 + 83) & 0x40 | v33[26];
        unint64_t v50 = *(unsigned int *)(*(void *)(v4 + 8 * v9) + 88);
        uint64_t v51 = v60;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v60, v50 + 1);
        *(_DWORD *)(*v51 + ((v50 >> 3) & 0x1FFFFFFC)) |= 1 << v50;
        if (v49) {
          LODWORD(v63) = v63 + 1;
        }
        else {
          ++HIDWORD(v63);
        }
        uint64_t v2 = v65;
        unsigned int v11 = v68;
      }
    }
    v8 += 16;
    v7 += 32;
    ++v9;
  }
  while (v69 != v7);
  unsigned int v5 = v67;
  v72[1] = v62;
  unsigned int v71 = v67;
  v72[0] = HIDWORD(v62);
  LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v57;
  if (v66)
  {
    PxsCMDiscreteUpdateTask::runModifiableContactManagers(v11, (unsigned int *)v64, v66, (physx::PxcNpThreadContext *)v2, v72, &v72[1], &v71);
    unsigned int v53 = v72[0];
    unsigned int v52 = v72[1];
    unsigned int v5 = v71;
    int v55 = v63;
    int v54 = HIDWORD(v63);
  }
  else
  {
    int v55 = v63;
    int v54 = HIDWORD(v63);
    unsigned int v53 = v61;
    unsigned int v52 = HIDWORD(v61);
  }
LABEL_39:
  *(_DWORD *)(v2 + 7296) += v55;
  *(_DWORD *)(v2 + 7300) += v54;
  *(_DWORD *)(v2 + 7304) += v53;
  *(_DWORD *)(v2 + 7308) += v52;
  *(_DWORD *)(v2 + 72re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  if (v6 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v70, v64);
  }
}

void PxsCMDiscreteUpdateTask::runModifiableContactManagers(PxsCMDiscreteUpdateTask *this, unsigned int *a2, uint64_t a3, physx::PxcNpThreadContext *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v140 = a2;
  uint64_t v7 = this;
  uint64_t v144 = *MEMORY[0x263EF8340];
  int v125 = a5;
  unsigned int v133 = *a5;
  uint64_t v126 = a6;
  uint64_t v127 = a7;
  unsigned int v8 = *a6;
  unsigned int v137 = *a7;
  unsigned int v138 = v8;
  uint64_t v135 = (void *)((char *)a4 + 7280);
  uint64_t v9 = *((void *)this + 10);
  uint64_t v139 = a3;
  uint64_t v132 = a4;
  if (!v9) {
    goto LABEL_33;
  }
  size_t v12 = (104 * a3);
  v143[8] = v12 > 0x400;
  if (v12 < 0x401)
  {
    MEMORY[0x270FA5388](this);
    uint64_t v13 = (uint64_t *)((char *)&v124 - ((v12 + 15) & 0x1FFFFFFF0));
    bzero(v13, v12);
  }
  else
  {
    uint64_t v13 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v142, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsNphaseImplementationContext.cpp", 144);
  }
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(*((void *)v7 + 9) + 2592);
  do
  {
    uint64_t v16 = v140[v14];
    uint64_t v17 = *((void *)v7 + 6) + 32 * v16;
    LODWORD(vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = *(unsigned __int8 *)(v17 + 24);
    if (!*(unsigned char *)(v17 + 24)) {
      goto LABEL_30;
    }
    uint64_t v19 = *(void *)(*((void *)v7 + 5) + 8 * v16);
    uint64_t v20 = &v13[13 * v14];
    uint64_t v22 = &qword_2687A6240;
    uint64_t v21 = physx::gPxvOffsetTable;
    v20[2] = *(void *)(v19 + 48) + physx::gPxvOffsetTable;
    v20[3] = *(void *)(v19 + 56) + v21;
    __int16 v23 = *(_WORD *)(v19 + 80);
    if ((v23 & 0x20) != 0) {
      unsigned int v24 = (uint64_t *)&physx::gPxvOffsetTable + 1;
    }
    else {
      unsigned int v24 = &qword_2687A6240;
    }
    *uint64_t v20 = *(void *)(v19 + 32) + *v24;
    if ((v23 & 0x40) != 0) {
      uint64_t v22 = (uint64_t *)&physx::gPxvOffsetTable + 1;
    }
    v20[1] = *(void *)(v19 + 40) + *v22;
    uint64_t v25 = *(void *)(v15 + 8);
    uint64_t v26 = v25 + 32 * *(unsigned int *)(v19 + 96);
    *((_OWORD *)v20 + 2) = *(_OWORD *)v26;
    *((_DWORD *)v20 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *(_DWORD *)(v26 + 16);
    *(void *)&long long v27 = *(void *)(v26 + 20);
    uint64_t v28 = v25 + 32 * *(unsigned int *)(v19 + 100);
    *((void *)&v27 + 1) = *(void *)v28;
    *(_OWORD *)((char *)v20 + 52) = v27;
    *(_OWORD *)((char *)v20 + 68) = *(_OWORD *)(v28 + 8);
    *((_DWORD *)v20 + 21) = *(_DWORD *)(v28 + 24);
    uint64_t v29 = *(void *)(v17 + 8);
    *((_DWORD *)v20 + 22) = v18;
    v20[12] = v29;
    __int16 v30 = *(_WORD *)(v19 + 80);
    if ((v30 & 0x20) != 0)
    {
      float v31 = *(float *)(*(void *)(v19 + 32) + 128);
      if ((v30 & 0x40) == 0)
      {
LABEL_16:
        float v32 = 3.4028e38;
        goto LABEL_17;
      }
    }
    else
    {
      float v31 = 3.4028e38;
      if ((v30 & 0x40) == 0) {
        goto LABEL_16;
      }
    }
    float v32 = *(float *)(*(void *)(v19 + 40) + 128);
LABEL_17:
    if (v31 >= v32) {
      float v31 = v32;
    }
    if (v18 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v18;
    }
    int v33 = (float *)(v29 + 28);
    do
    {
      *int v33 = v31;
      v33 += 16;
      --v18;
    }
    while (v18);
    unsigned int v34 = *(unsigned __int8 *)(v19 + 86);
    unsigned int v35 = *(unsigned __int8 *)(v19 + 87);
    if (v34 >= v35) {
      unsigned int v36 = v35;
    }
    else {
      unsigned int v36 = v34;
    }
    if (v34 > v35) {
      unsigned int v35 = v34;
    }
    unsigned int v37 = (char *)a4 + 28 * v36 + 4 * v35;
    ++*((_DWORD *)v37 + 79);
LABEL_30:
    ++v14;
  }
  while (v14 != v139);
  (***((void (****)(void, void *, uint64_t))v7 + 10))(*((void *)v7 + 10), v13, a3);
  if (v12 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v143, v13);
  }
LABEL_33:
  uint64_t v38 = 0;
  unsigned int v134 = v7;
  while (2)
  {
    unint64_t v39 = (const void **)v140[v38];
    uint64_t v40 = *((void *)v7 + 6);
    uint64_t v41 = *(void *)(*((void *)v7 + 5) + 8 * (void)v39);
    uint64_t v141 = v39;
    uint64_t v42 = (uint64_t *)(v40 + 32 * (void)v39);
    unint64_t v43 = (const void **)v42;
    unsigned int v45 = (char *)v42 + 25;
    unsigned int v44 = *((unsigned __int8 *)v42 + 25);
    int v47 = *((unsigned __int8 *)v42 + 24);
    int v46 = v42 + 3;
    uint64_t v136 = v40;
    if (v47)
    {
      int v48 = (_WORD *)*v42;
      uint64_t v49 = v42[1];
      if ((*(unsigned char *)(*v42 + 43) & 0x40) != 0 && v44)
      {
        unsigned int v50 = 0;
        for (i = 0; i < v44; unsigned int v50 = ++i)
        {
          unsigned int v52 = &v48[24 * i];
          unsigned int v55 = *((unsigned __int8 *)v52 + 41);
          unsigned int v53 = (char *)v52 + 41;
          uint64_t v54 = v55;
          uint64_t v56 = *(v53 - 1);
          uint64_t v57 = v49 + (v56 << 6);
          *(int32x2_t *)(v53 - 9) = vrev64_s32(*(int32x2_t *)(v57 + 56));
          *(_OWORD *)(v53 - 25) = *(_OWORD *)(v57 + 32);
          if (v55 >= 2uLL)
          {
            uint64_t v58 = -1;
            uint64_t v59 = (float *)(v49 + 104 + (v56 << 6));
            while ((float)((float)((float)(*(float *)(v57 + 36) * *(v59 - 1))
                                  + (float)(*(float *)(v57 + 32) * *(v59 - 2)))
                          + (float)(*(float *)(v57 + 40) * *v59)) >= 0.999
                 || *(float *)(v57 + 28) <= 0.0)
            {
              --v58;
              v59 += 16;
              if (-v54 == v58) {
                goto LABEL_49;
              }
            }
            if (v44 - 1 > v50)
            {
              uint64_t v60 = (uint64_t)&v48[24 * v44 - 10];
              unsigned int v61 = v44;
              do
              {
                unint64_t v62 = &v48[24 * v61];
                *(_OWORD *)unint64_t v62 = *(_OWORD *)(v60 - 28);
                *((void *)v62 + 2) = *(void *)(v60 - 12);
                *((_DWORD *)v62 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v60 - 4);
                long long v63 = *(_OWORD *)v60;
                *((_DWORD *)v62 + 11) = *(_DWORD *)(v60 + 16);
                *(_OWORD *)(v62 + 14) = v63;
                LODWORD(v62) = v61 - 2;
                --v61;
                v60 -= 48;
              }
              while (v50 < v62);
              LOBYTE(v54) = *v53;
            }
            ++v44;
            int v64 = &v48[24 * v50 + 24];
            v64[21] = v48[24 * i + 21];
            *((unsigned char *)v64 + 40) = v56 - v58;
            *((unsigned char *)v64 + 41) = v54 + v58;
            unsigned char *v53 = -(char)v58;
          }
LABEL_49:
          ;
        }
      }
      if (v44 > *(unsigned __int8 *)(v40 + 32 * (void)v141 + 27))
      {
        ++v133;
        unint64_t v65 = *(unsigned int *)(v41 + 88);
        uint64_t v130 = v38;
        unsigned int v131 = (char *)v42 + 25;
        unsigned int v66 = (const void **)(v40 + 32 * (void)v39);
        unsigned int v67 = v135;
        uint64_t v68 = v41;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v135, v65 + 1);
        uint64_t v41 = v68;
        unint64_t v43 = v66;
        uint64_t v38 = v130;
        unsigned int v45 = v131;
        *(_DWORD *)(*v67 + ((v65 >> 3) & 0x1FFFFFFC)) |= 1 << v65;
      }
      unsigned int v69 = v137;
      if (v137 <= v44) {
        unsigned int v69 = v44;
      }
      unsigned int v137 = v69;
      *unsigned int v45 = v44;
      uint64_t v70 = *v46;
      if (*v46)
      {
        int v71 = 0;
        unint64_t v72 = (float *)(v49 + 28);
        do
        {
          float v73 = *v72;
          v72 += 16;
          if (v73 != 0.0) {
            ++v71;
          }
          --v70;
        }
        while (v70);
      }
      else
      {
        int v71 = 0;
      }
      unsigned int v44 = v44;
    }
    else
    {
      int v71 = 0;
    }
    unsigned int v75 = *((unsigned __int8 *)v42 + 27);
    unsigned int v74 = (unsigned __int8 *)v42 + 27;
    if (v44 >= v75)
    {
      uint64_t v76 = v41;
      if (!v71) {
        goto LABEL_80;
      }
LABEL_65:
      uint64_t v80 = v132;
      uint64_t v81 = *((void *)v132 + 903);
      if (v81)
      {
        int v82 = 3 * *v45;
        unsigned int v83 = 48 * *v45;
        int v84 = *v46;
        unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v81 + 8), 32 * v84);
        unint64_t v86 = (uint64_t *)*((void *)v80 + 903);
        unsigned int v87 = (unsigned char *)*((unsigned int *)v86 + 3);
        int v88 = *((_DWORD *)v86 + 4);
        int v89 = *((_DWORD *)v86 + 2);
        uint64_t v90 = *v86;
        unsigned int v91 = atomic_fetch_add((atomic_uint *volatile)(*((void *)v80 + 904) + 8), v83);
        uint64_t v92 = (uint64_t *)*((void *)v80 + 904);
        uint64_t v94 = *((unsigned int *)v92 + 3);
        int v93 = *((_DWORD *)v92 + 4);
        int v95 = *((_DWORD *)v92 + 2);
        uint64_t v96 = *v92;
        int v97 = *((unsigned __int8 *)*v43 + 43);
        unsigned int v98 = 4 * *v46;
        unsigned int v99 = atomic_fetch_add((atomic_uint *volatile)(*((void *)v80 + 905) + 8), v98);
        uint64_t v100 = *((void *)v80 + 905);
        uint64_t v101 = *(unsigned int *)(v100 + 12);
        if (*(_DWORD *)(v100 + 16) + *(_DWORD *)(v100 + 8) < v101
          && v93 + v95 < v94
          && v88 + v89 < v87)
        {
          int v129 = v97;
          uint64_t v130 = v90;
          unsigned int v131 = v87;
          unsigned int v102 = v43;
          uint64_t v128 = v91 + 16 * v82;
          unsigned int v103 = (_OWORD *)(v96 + v94 - (int)v128);
          unsigned int v104 = (void *)(*(void *)v100 + v101 - (int)(v99 + v98));
          v136 += 32 * (void)v141;
          *(void *)(v136 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v104;
          unsigned int v105 = add;
          bzero(v104, 4 * *v46);
          uint64_t v141 = v102;
          memcpy(v103, *v102, 48 * *v45);
          unsigned int v106 = *v45;
          if (*v45)
          {
            char v107 = v129 | 0x80;
            uint64_t v108 = v94 - (int)v128;
            uint64_t v109 = (unsigned char *)(v96 + v108 + 43);
            uint64_t v110 = *v45;
            do
            {
              *uint64_t v109 = v107;
              v109 += 48;
              --v110;
            }
            while (v110);
            if (v106 >= 2)
            {
              uint64_t v111 = (_OWORD *)(v96 + v108 + 48);
              unint64_t v112 = 1;
              do
              {
                _OWORD *v111 = *v103;
                v111 += 3;
                ++v112;
              }
              while (v112 < *v45);
            }
          }
          signed int v113 = v105 + 32 * v84;
          uint64_t v114 = (void *)(v136 + 8);
          uint64_t v115 = *v46;
          uint64_t v7 = v134;
          uint64_t v117 = v130;
          unsigned int v116 = v131;
          if (*v46)
          {
            unsigned int v118 = &v131[v130 - v113 + 16];
            unint64_t v119 = (long long *)(*(void *)(v136 + 8) + 16);
            do
            {
              *(v118 - 1) = *(v119 - 1);
              long long v120 = *v119;
              v119 += 4;
              *unsigned int v118 = v120;
              v118 += 2;
              --v115;
            }
            while (v115);
          }
          *uint64_t v141 = v103;
          *uint64_t v114 = &v116[v117 - v113];
          goto LABEL_84;
        }
        *unint64_t v43 = 0;
        v43[1] = 0;
        *((_WORD *)v43 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
        v43[2] = 0;
      }
      uint64_t v7 = v134;
      goto LABEL_84;
    }
    ++v138;
    uint64_t v76 = v41;
    unint64_t v77 = *(unsigned int *)(v41 + 88);
    uint64_t v78 = v135;
    uint64_t v79 = v43;
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v135, v77 + 1);
    unint64_t v43 = v79;
    *(_DWORD *)(*v78 + ((v77 >> 3) & 0x1FFFFFFC)) |= 1 << v77;
    if (v71) {
      goto LABEL_65;
    }
LABEL_80:
    *(unsigned char *)(v76 + 82) = 0;
    *(void *)(v76 + 64) = 0;
    *(void *)(v76 + 72) = 0;
    *unsigned int v45 = 0;
    *int v46 = 0;
    int v121 = *v74;
    uint64_t v7 = v134;
    if (v121)
    {
      ++v138;
      unint64_t v122 = *(unsigned int *)(v76 + 88);
      uint64_t v123 = v135;
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v135, v122 + 1);
      *(_DWORD *)(*v123 + ((v122 >> 3) & 0x1FFFFFFC)) |= 1 << v122;
    }
LABEL_84:
    if (++v38 != v139) {
      continue;
    }
    break;
  }
  unsigned int *v125 = v133;
  unsigned int *v126 = v138;
  *uint64_t v127 = v137;
}

void physx::IG::IslandSim::~IslandSim(physx::IG::IslandSim *this)
{
  for (uint64_t i = 0; i != -32; i -= 16)
  {
    int v3 = *(_DWORD *)((char *)this + i + 596);
    if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + i + 584) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  for (uint64_t j = 0; j != -32; j -= 16)
  {
    int v6 = *(_DWORD *)((char *)this + j + 564);
    if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + j + 552) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((void *)this + 65) && (*((_DWORD *)this + 132) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 65) = 0;
  int v8 = *((_DWORD *)this + 129);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 63)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 61)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v9 = *((_DWORD *)this + 119);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((void *)this + 58)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 115);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 56)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v11 = *((_DWORD *)this + 111);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((void *)this + 54)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 51) && (*((_DWORD *)this + 104) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v12 = 0;
  *((void *)this + 51) = 0;
  do
  {
    int v13 = *(_DWORD *)((char *)this + v12 + 404);
    if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + v12 + 392) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    v12 -= 16;
  }
  while (v12 != -32);
  for (uint64_t k = 0; k != -32; k -= 16)
  {
    int v16 = *(_DWORD *)((char *)this + k + 372);
    if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + k + 360) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v18 = *((_DWORD *)this + 83);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((void *)this + 40) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 38) && (*((_DWORD *)this + 78) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 38) = 0;
  if (*((void *)this + 36) && (*((_DWORD *)this + 74) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  int v20 = *((_DWORD *)this + 71);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((void *)this + 34)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v21 = *((_DWORD *)this + 67);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((void *)this + 32)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v22 = *((_DWORD *)this + 63);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((void *)this + 30)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  for (uint64_t m = 0; m != -32; m -= 16)
  {
    int v24 = *(_DWORD *)((char *)this + m + 228);
    if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + m + 216) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v26 = *((_DWORD *)this + 49);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0 && *((void *)this + 23) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  for (uint64_t n = 0; n != -32; n -= 16)
  {
    int v29 = *(_DWORD *)((char *)this + n + 180);
    if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + n + 168) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v31 = *((_DWORD *)this + 37);
  if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0 && *((void *)this + 17) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v33 = *((_DWORD *)this + 33);
  if ((v33 & 0x80000000) == 0 && (v33 & 0x7FFFFFFF) != 0 && *((void *)this + 15)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v34 = *((unsigned int *)this + 24);
  if (v34)
  {
    for (iuint64_t i = 0; ii < v34; ++ii)
    {
      if (*(void *)(*((void *)this + 11) + 8 * ii))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v34 = *((unsigned int *)this + 24);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 88);
  int v36 = *((_DWORD *)this + 25);
  if ((v36 & 0x80000000) == 0 && (v36 & 0x7FFFFFFF) != 0 && *((void *)this + 11)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v37 = *((unsigned int *)this + 16);
  if (v37)
  {
    for (juint64_t j = 0; jj < v37; ++jj)
    {
      if (*(void *)(*((void *)this + 7) + 8 * jj))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v37 = *((unsigned int *)this + 16);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 56);
  int v39 = *((_DWORD *)this + 17);
  if ((v39 & 0x80000000) == 0 && (v39 & 0x7FFFFFFF) != 0 && *((void *)this + 7)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v40 = *((_DWORD *)this + 13);
  if ((v40 & 0x80000000) == 0 && (v40 & 0x7FFFFFFF) != 0 && *((void *)this + 5)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v41 = *((_DWORD *)this + 9);
  if ((v41 & 0x80000000) == 0 && (v41 & 0x7FFFFFFF) != 0 && *((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::IG::HandleManager<unsigned int>::~HandleManager((uint64_t)this);
}

uint64_t physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t physx::IG::HandleManager<unsigned int>::~HandleManager(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *(void *)a1 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return a1;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(uint64_t a1, _DWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate(a1, 4 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  int v8 = *(int **)a1;
  if (v7)
  {
    unint64_t v9 = v6 + 4 * v7;
    int v10 = *(int **)a1;
    int v11 = (_DWORD *)v6;
    do
    {
      int v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
    uint64_t v13 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v13 = 0;
  }
  *(_DWORD *)(v6 + 4 * v13) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v8) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)a1 = v6;
  uint64_t v14 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v14 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v6 + 4 * v14;
}

uint64_t physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(uint64_t a1, _DWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>::getName() [T = physx::IG::NodeIndex]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 4 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  int v10 = *(int **)a1;
  if (v9)
  {
    unint64_t v11 = v8 + 4 * v9;
    int v12 = *(int **)a1;
    uint64_t v13 = (_DWORD *)v8;
    do
    {
      int v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    uint64_t v15 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(_DWORD *)(v8 + 4 * v15) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  uint64_t v16 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v16 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v8 + 4 * v16;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::IG::QueueElement>::allocate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::QueueElement>::getName() [T = physx::IG::QueueElement]";
    }
    else {
      int v3 = "<allocation names disabled>";
    }
    int v4 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16);
    return v4(v2 + 24, v1, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPriorityQueue.h", 219);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 32 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::Node>::getName() [T = physx::IG::Node]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  int v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 32 * v9;
    int v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10;
      long long v14 = v10[1];
      v10 += 2;
      _OWORD *v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v11);
    int v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::Edge *,physx::shdfnd::ReflectionAllocator<physx::IG::Edge *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::Edge *>::getName() [T = physx::IG::Edge *]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  int v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    int v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>::getName() [T = physx::IG::EdgeInstance *]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  int v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    int v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 4 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>::getName() [T = physx::IG::NodeIndex]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  int v10 = *(int **)a1;
  if (v9)
  {
    unint64_t v11 = result + 4 * v9;
    int v12 = *(int **)a1;
    uint64_t v13 = (_DWORD *)result;
    do
    {
      int v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::recreate(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 44 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::Island>::getName() [T = physx::IG::Island]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  int v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 44 * v9;
    int v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10;
      long long v14 = v10[1];
      *(_OWORD *)((char *)v12 + 28) = *(long long *)((char *)v10 + 28);
      _OWORD *v12 = v13;
      v12[1] = v14;
      int v12 = (_OWORD *)((char *)v12 + 44);
      int v10 = (long long *)((char *)v10 + 44);
    }
    while ((unint64_t)v12 < v11);
    int v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v2;
  return result;
}

uint64_t physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extendUninitialized(uint64_t result, int a2)
{
  unsigned int v2 = (a2 + 31) >> 5;
  int v3 = *(_DWORD *)(result + 8);
  if (v2 > (v3 & 0x7FFFFFFFu))
  {
    uint64_t v4 = result;
    if ((v3 & 0x80000000) == 0)
    {
      if (*(void *)result) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
    }
    *(_DWORD *)(v4 + 8) = v2;
    uint64_t result = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBitMap.h", 461);
    *(void *)uint64_t v4 = result;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>::getName() [T = physx::IG::TraversalState]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 16 * v9;
    unint64_t v11 = *(long long **)a1;
    int v12 = (_OWORD *)v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  *(_OWORD *)(v8 + 16 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v8 + 16 * v15;
}

uint64_t physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 16 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>::getName() [T = physx::IG::TraversalState]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 16 * v9;
    int v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>::getName() [T = physx::PartitionEdge *]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)a1;
    int v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxsContactManagerOutput,physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>::getName() [T = physx::"
    }
           "PxsContactManagerOutput]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[2 * v9];
    unint64_t v11 = *(long long **)v3;
    int v12 = v8;
    do
    {
      long long v13 = *v11;
      long long v14 = v11[1];
      v11 += 2;
      _OWORD *v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v15 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = &v8[2 * v15];
  long long v17 = a2[1];
  _OWORD *v16 = *a2;
  v16[1] = v17;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>::getName() [T = physx::Gu::Cache]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    unint64_t v11 = *(long long **)v3;
    int v12 = v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>::getName() [T = physx::PxsContactManager *]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<unsigned int>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsContactManagerOutput,physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 32 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>::getName() [T = physx::Px"
  }
         "sContactManagerOutput]";
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 32 * v9;
    int v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10;
      long long v14 = v10[1];
      v10 += 2;
      _OWORD *v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 16 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>::getName() [T = physx::Gu::Cache]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 16 * v9;
    int v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>::getName() [T = physx::PartitionEdge *]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    int v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::NodeIndex *,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex *>::getName() [T = physx::IG::NodeIndex *]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    int v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<void **,physx::shdfnd::ReflectionAllocator<void **>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<void **>::getName() [T = void **]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    int v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Interaction **,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction **>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction **>::getName() [T = physx::Sc::Interaction **]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    int v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

void BitArray::resize(BitArray *this, int a2)
{
  if ((a2 & 0x1F) != 0) {
    unsigned int v3 = ((a2 + 128) >> 5) + 1;
  }
  else {
    unsigned int v3 = (a2 + 128) >> 5;
  }
  if (v3) {
    int v4 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 274);
  else {
    int v4 = 0;
  }
  int v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    memcpy(v4, *(const void **)this, (4 * v5));
    int v5 = *((_DWORD *)this + 2);
  }
  if (v3 != v5) {
    bzero(&v4[4 * v5], 4 * (v3 - v5));
  }
  if (*(void *)this) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)this = v4;
  *((_DWORD *)this + 2) = v3;
}

uint64_t MBP_PairManager::addPair(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(this + 48);
  uint64_t v3 = *(void *)(this + 56);
  int v5 = *(_DWORD *)(v4 + 4 * *(unsigned int *)(v3 + 12 * (a2 >> 2)));
  int v6 = *(_DWORD *)(v4 + 4 * *(unsigned int *)(v3 + 12 * (a3 >> 2)));
  if (v5 != v6)
  {
    uint64_t v7 = this;
    if (*(unsigned char *)(*(void *)(this + 64) + (v6 & 3 | (4 * (v5 & 3)))))
    {
      if (a2 >= a3) {
        unsigned int v8 = a3;
      }
      else {
        unsigned int v8 = a2;
      }
      if (a2 <= a3) {
        unsigned int v9 = a3;
      }
      else {
        unsigned int v9 = a2;
      }
      unsigned int v10 = 9
          * ((((unsigned __int16)v8 | ((unsigned __int16)v9 << 16))
            + ~(((unsigned __int16)v8 | ((unsigned __int16)v9 << 16)) << 15)) ^ ((((unsigned __int16)v8 | ((unsigned __int16)v9 << 16))
                                                                                              + ~(((unsigned __int16)v8 | ((unsigned __int16)v9 << 16)) << 15)) >> 10));
      unsigned int v11 = ((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) ^ (((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) >> 16);
      this = *(_DWORD *)(this + 4) & v11;
      uint64_t v12 = *(void *)(v7 + 16);
      if (!v12 || (uint64_t v13 = *(unsigned int *)(v12 + 4 * this), v13 == -1))
      {
LABEL_15:
        unsigned int v19 = *(_DWORD *)(v7 + 8);
        if (v19 >= *(_DWORD *)v7)
        {
          this = physx::Bp::PairManagerData::growPairs((physx::Bp::PairManagerData *)v7, v11);
          unsigned int v19 = *(_DWORD *)(v7 + 8);
          uint64_t v12 = *(void *)(v7 + 16);
        }
        *(_DWORD *)(v7 + 8) = v19 + 1;
        uint64_t v20 = *(void *)(v7 + 24);
        int v21 = (unsigned int *)(*(void *)(v7 + 32) + 8 * v19);
        unsigned int *v21 = v8 | 0x80000000;
        v21[1] = v9;
        *(_DWORD *)(v20 + 4 * v19) = *(_DWORD *)(v12 + 4 * this);
        *(_DWORD *)(v12 + 4 * this) = v19;
      }
      else
      {
        uint64_t v14 = *(void *)(v7 + 32);
        while (1)
        {
          if ((*(_DWORD *)(v14 + 8 * v13) & 0x7FFFFFFF) == v8)
          {
            uint64_t v15 = v14 + 8 * v13;
            int v18 = *(_DWORD *)(v15 + 4);
            uint64_t v16 = (unsigned int *)(v15 + 4);
            int v17 = v18;
            if ((v18 & 0x7FFFFFFF) == v9) {
              break;
            }
          }
          uint64_t v13 = *(unsigned int *)(*(void *)(v7 + 24) + 4 * v13);
          if (v13 == -1) {
            goto LABEL_15;
          }
        }
        unsigned int *v16 = v17 | 0x80000000;
      }
    }
  }
  return this;
}

void Region::~Region(Region *this)
{
  if (*((void *)this + 16))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  if (*((void *)this + 23))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 23) = 0;
  }
  if (*((void *)this + 22))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 22) = 0;
  }
  if (*((void *)this + 21))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 21) = 0;
  }
  if (*((void *)this + 20))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 20) = 0;
  }
  if (*((void *)this + 19))
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 19) = 0;
  }
  unsigned int v2 = (Region *)*((void *)this + 1637);
  if (v2 != (Region *)((char *)this + 12576) && v2)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 1637) = 0;
  }
  uint64_t v3 = (Region *)*((void *)this + 1638);
  if (v3 != (Region *)((char *)this + 288) && v3)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 1638) = 0;
  }
  uint64_t v4 = (Region *)*((void *)this + 1639);
  if (v4 != (Region *)((char *)this + 6432) && v4)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)this + 1639) = 0;
  }
  *((void *)this + 163re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 27) = &unk_26E728438;
  physx::Cm::RadixSortBuffered::reset((uint64_t)this + 216);
  if (*((void *)this + 25)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
}

uint64_t Region::addObject(uint64_t a1, long long *a2, unsigned int a3, int a4)
{
  int v8 = *(_DWORD *)(a1 + 120);
  if (v8 != -1)
  {
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)(a1 + 128) + 8 * (unsigned __int16)*(_DWORD *)(a1 + 120));
    int v9 = *(_DWORD *)(a1 + 112);
    goto LABEL_17;
  }
  int v9 = *(_DWORD *)(a1 + 112);
  int v10 = *(_DWORD *)(a1 + 116);
  LOWORD(v8) = v9;
  if (v10 == v9)
  {
    unsigned int v11 = v10 + 128;
    if (v10 == -128)
    {
      uint64_t v15 = 0;
      int v17 = -128;
    }
    else
    {
      uint64_t v12 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        uint64_t v13 = "static const char *physx::shdfnd::ReflectionAllocator<MBPEntry>::getName() [T = MBPEntry]";
      }
      else {
        uint64_t v13 = "<allocation names disabled>";
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v12 + 24)
                                                                                             + 16))(v12 + 24, 8 * v11, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 870);
      uint64_t v15 = (void *)v14;
      uint64_t v16 = 0;
      do
      {
        *(_DWORD *)(v14 + v16 + 4) = -1;
        v16 += 8;
      }
      while (8 * v11 != v16);
      int v17 = *(_DWORD *)(a1 + 112);
      if (!v17) {
        goto LABEL_14;
      }
    }
    memcpy(v15, *(const void **)(a1 + 128), (8 * v17));
LABEL_14:
    if (*(void *)(a1 + 128)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(a1 + 128) = v15;
    *(_DWORD *)(a1 + 11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v11;
    int v9 = *(_DWORD *)(a1 + 112);
    LOWORD(v8) = v9;
  }
LABEL_17:
  *(_DWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v9 + 1;
  if (a4)
  {
    int v18 = *(_DWORD *)(a1 + 136);
    unsigned int v19 = *(_DWORD *)(a1 + 140);
    if (v18 == v19)
    {
      unsigned int v20 = v18 + 128;
      *(void *)(a1 + 152) = resizeBoxes(v18, v18 + 128, *(const void **)(a1 + 152));
      *(void *)(a1 + 168) = resizeMapping(*(_DWORD *)(a1 + 140), v20, *(unsigned __int16 **)(a1 + 168));
      *(_DWORD *)(a1 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v20;
      unsigned int v19 = *(_DWORD *)(a1 + 140);
    }
    *(_DWORD *)(a1 + 140) = v19 + 1;
    uint64_t v21 = *(void *)(a1 + 152) + 24 * v19;
    long long v22 = *a2;
    *(void *)(v21 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v21 = v22;
    *(_WORD *)(*(void *)(a1 + 168) + 2 * v19) = v8;
    *(unsigned char *)(a1 + 280) = 1;
    if (v19 >> 5 >= *(_DWORD *)(a1 + 208)) {
      BitArray::resize((BitArray *)(a1 + 200), v19);
    }
    *(_DWORD *)(*(void *)(a1 + 200) + 4 * (v19 >> 5)) |= 1 << v19;
    __int16 v23 = (unsigned int *)(*(void *)(a1 + 128) + 8 * (unsigned __int16)v8);
    unsigned int *v23 = v19;
    v23[1] = a3;
  }
  else
  {
    int v25 = *(_DWORD *)(a1 + 144);
    unsigned int v24 = *(_DWORD *)(a1 + 148);
    if (v25 == v24)
    {
      *(void *)(a1 + 160) = resizeBoxes(*(_DWORD *)(a1 + 144), v25 + 128, *(const void **)(a1 + 160));
      *(void *)(a1 + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = resizeMapping(*(_DWORD *)(a1 + 148), v25 + 128, *(unsigned __int16 **)(a1 + 176));
      *(_DWORD *)(a1 + 144) = v25 + 128;
      if (*(void *)(a1 + 184))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *(void *)(a1 + 184) = 0;
      }
      if (v25 == -129) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
      }
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (v25 + 129), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 974);
      *(void *)(a1 + 184) = v26;
      unsigned int v24 = *(_DWORD *)(a1 + 148);
    }
    *(_DWORD *)(a1 + 148) = v24 + 1;
    uint64_t v27 = *(void *)(a1 + 160) + 24 * v24;
    long long v28 = *a2;
    *(void *)(v27 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v27 = v28;
    uint64_t v29 = *(void *)(a1 + 176);
    *(_WORD *)(v29 + 2 * v24) = v8;
    uint64_t v30 = *(void *)(a1 + 128);
    int v31 = (unsigned int *)(v30 + 8 * (unsigned __int16)v8);
    *int v31 = v24;
    v31[1] = a3;
    uint64_t v32 = *(void *)(a1 + 160);
    uint64_t v33 = *(unsigned int *)(a1 + 192);
    if (v24 == v33)
    {
      long long v34 = *a2;
      uint64_t v35 = v32 + 24 * v24;
      *(void *)(v35 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v35 = v34;
    }
    else
    {
      int v36 = (long long *)(v32 + 24 * v33);
      long long v37 = *v36;
      uint64_t v38 = *((void *)v36 + 2);
      uint64_t v39 = *((void *)a2 + 2);
      *int v36 = *a2;
      *((void *)v36 + 2) = v39;
      uint64_t v40 = v32 + 24 * v24;
      *(void *)(v40 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v38;
      *(_OWORD *)uint64_t v40 = v37;
      uint64_t v41 = *(unsigned __int16 *)(v29 + 2 * v33);
      *(_WORD *)(v29 + 2 * v33) = *(_WORD *)(v29 + 2 * v24);
      *(_WORD *)(v29 + 2 * v24) = v41;
      *(_DWORD *)(v30 + 8 * v41) = v24;
      *int v31 = v33;
    }
    ++*(_DWORD *)(a1 + 192);
    *(_DWORD *)(a1 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(unsigned char *)(a1 + 281) = 1;
  }
  return (unsigned __int16)v8;
}

void *resizeBoxes(int a1, unsigned int a2, const void *a3)
{
  int v5 = (void *)physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::allocate(24 * a2, 884);
  int v6 = v5;
  if (a1) {
    memcpy(v5, a3, (24 * a1));
  }
  if (a3) {
    (*(void (**)(uint64_t, const void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a3);
  }
  return v6;
}

void *resizeMapping(int a1, unsigned int a2, unsigned __int16 *a3)
{
  if (a2)
  {
    int v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 893);
    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v5 = 0;
  if (a1) {
LABEL_3:
  }
    memcpy(v5, a3, (2 * a1));
LABEL_4:
  if (a3) {
    (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a3);
  }
  return v5;
}

__n128 Region::removeObject(Region *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 16);
  int v5 = (unsigned int *)(v4 + 8 * a2);
  unint64_t v6 = *v5;
  if (v5[1])
  {
    *((unsigned char *)this + 280) = 1;
    if ((v6 >> 5) >= *((_DWORD *)this + 52)) {
      BitArray::resize((Region *)((char *)this + 200), v6);
    }
    *(_DWORD *)(*((void *)this + 25) + 4 * (v6 >> 5)) |= 1 << v6;
    uint64_t v15 = *((void *)this + 21);
    uint64_t v16 = *((void *)this + 19);
    unsigned int v17 = *((_DWORD *)this + 35) - 1;
    *((_DWORD *)this + 35) = v17;
  }
  else
  {
    *((_DWORD *)this + 49) = 0;
    *((unsigned char *)this + 281) = 1;
    unsigned int v7 = *((_DWORD *)this + 48);
    if (v6 < v7)
    {
      if (v7 != *((_DWORD *)this + 37))
      {
        unsigned int v8 = v7 - 1;
        uint64_t v9 = *((void *)this + 22);
        uint64_t v10 = *((void *)this + 20);
        uint64_t v11 = *(unsigned __int16 *)(v9 + 2 * v8);
        uint64_t v12 = (long long *)(v10 + 24 * v8);
        uint64_t v13 = v10 + 24 * v6;
        long long v14 = *v12;
        *(void *)(v13 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)v12 + 2);
        *(_OWORD *)uint64_t v13 = v14;
        *(_WORD *)(v9 + 2 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v11;
        *(_DWORD *)(v4 + 8 * v11) = v6;
        unsigned int v7 = *((_DWORD *)this + 48);
        LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v8;
      }
      *((_DWORD *)this + 48) = v7 - 1;
    }
    uint64_t v15 = *((void *)this + 22);
    uint64_t v16 = *((void *)this + 20);
    unsigned int v17 = *((_DWORD *)this + 37) - 1;
    *((_DWORD *)this + 37) = v17;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v19 = *(unsigned __int16 *)(v15 + 2 * v17);
  unsigned int v20 = (__n128 *)(v16 + 24 * v17);
  uint64_t v21 = (__n128 *)(v16 + 24 * v6);
  __n128 result = *v20;
  v21[1].n128_u64[0] = v20[1].n128_u64[0];
  __n128 *v21 = result;
  *(_WORD *)(v15 + 2 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v19;
  *(_DWORD *)(v18 + 8 * v19) = v6;
  *int v5 = *((_DWORD *)this + 30);
  v5[1] = -1;
  *((_DWORD *)this + 30) = a2;
  --*((_DWORD *)this + 28);
  return result;
}

void Region::updateObject(uint64_t a1, long long *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t v4 = (unsigned int *)(v3 + 8 * a3);
  if (v4[1])
  {
    uint64_t v10 = *(void *)(a1 + 152) + 24 * *v4;
    long long v11 = *a2;
    *(void *)(v10 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v10 = v11;
    *(unsigned char *)(a1 + 280) = 1;
    uint64_t v12 = (void *)(a1 + 200);
    unint64_t v13 = *v4;
    if (*v4 >> 5 >= *(_DWORD *)(a1 + 208)) {
      BitArray::resize((BitArray *)(a1 + 200), v13);
    }
    *(_DWORD *)(*v12 + 4 * (v13 >> 5)) |= 1 << v13;
  }
  else
  {
    uint64_t v5 = *v4;
    if (v5 >= *(_DWORD *)(a1 + 196)) {
      *(unsigned char *)(a1 + 281) = 1;
    }
    uint64_t v6 = *(unsigned int *)(a1 + 192);
    uint64_t v7 = *(void *)(a1 + 160);
    if (v5 >= v6)
    {
      if (v5 == v6)
      {
        long long v14 = *a2;
        uint64_t v15 = v7 + 24 * v5;
        *(void *)(v15 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v15 = v14;
      }
      else
      {
        uint64_t v16 = *(void *)(a1 + 176);
        unsigned int v17 = (long long *)(v7 + 24 * v6);
        long long v18 = *v17;
        uint64_t v19 = *((void *)v17 + 2);
        uint64_t v20 = *((void *)a2 + 2);
        *unsigned int v17 = *a2;
        *((void *)v17 + 2) = v20;
        uint64_t v21 = v7 + 24 * v5;
        *(void *)(v21 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v19;
        *(_OWORD *)uint64_t v21 = v18;
        uint64_t v22 = *(unsigned __int16 *)(v16 + 2 * v6);
        *(_WORD *)(v16 + 2 * vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_WORD *)(v16 + 2 * v5);
        *(_WORD *)(v16 + 2 * v5) = v22;
        *(_DWORD *)(v3 + 8 * v22) = v5;
        *uint64_t v4 = v6;
      }
      ++*(_DWORD *)(a1 + 192);
    }
    else
    {
      long long v8 = *a2;
      uint64_t v9 = v7 + 24 * v5;
      *(void *)(v9 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v9 = v8;
    }
  }
}

uint64_t MBP::addToOutOfBoundsArray(uint64_t this, int a2)
{
  int v3 = a2;
  uint64_t v2 = *(unsigned int *)(this + 5304);
  if ((*(_DWORD *)(this + 5308) & 0x7FFFFFFFu) <= v2) {
    return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(this + 5296, &v3);
  }
  *(_DWORD *)(*(void *)(this + 5296) + 4 * v2) = a2;
  ++*(_DWORD *)(this + 5304);
  return this;
}

_DWORD *setupOverlapFlags(_DWORD *result, uint64_t a2)
{
  if (result)
  {
    unint64_t v2 = result;
    int v3 = (_DWORD *)(a2 + 40);
    uint64_t v4 = result;
    do
    {
      *int v3 = 0;
      v3 += 14;
      --v4;
    }
    while (v4);
    unint64_t v5 = 0;
    int v6 = result - 1;
    uint64_t v7 = a2 + 60;
    do
    {
      unint64_t v8 = v5 + 1;
      if (*(void *)(a2 + 56 * v5 + 32)) {
        BOOL v9 = v8 >= v2;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
        uint64_t v10 = (_DWORD *)(a2 + 56 * v5);
        long long v11 = v10 + 4;
        uint64_t v12 = v10 + 1;
        unint64_t v13 = v10 + 5;
        long long v14 = v10 + 2;
        __n128 result = v10 + 6;
        uint64_t v15 = v10 + 3;
        uint64_t v16 = v10 + 10;
        uint64_t v17 = v7;
        int v18 = v6;
        do
        {
          if (*(void *)(v17 + 28)
            && *v11 > *(_DWORD *)v17
            && *(_DWORD *)(v17 + 12) > *v12
            && *v13 > *(_DWORD *)(v17 + 4)
            && *(_DWORD *)(v17 + 16) > *v14
            && *result > *(_DWORD *)(v17 + 8)
            && *(_DWORD *)(v17 + 20) > *v15)
          {
            _DWORD *v16 = 1;
            *(_DWORD *)(v17 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
          }
          v17 += 56;
          --v18;
        }
        while (v18);
      }
      --v6;
      v7 += 56;
      unint64_t v5 = v8;
    }
    while (v8 != v2);
  }
  return result;
}

char *MBP::storeHandles(char *result, uint64_t a2, int a3, _DWORD *__src)
{
  if (a3)
  {
    if (a3 == 1)
    {
      *(_DWORD *)(a2 + 8) = *__src;
    }
    else
    {
      int v6 = &result[16 * a3 + 152];
      uint64_t v7 = &result[4 * a3];
      uint64_t v8 = *((unsigned int *)v7 + 1066);
      if (v8 == -1)
      {
        uint64_t v10 = &result[16 * a3];
        int v12 = *((_DWORD *)v10 + 40);
        long long v11 = (unsigned int *)(v10 + 160);
        *(_DWORD *)(a2 + 8) = v12;
        unsigned int v13 = *v11;
        unsigned int v14 = v11[1] & 0x7FFFFFFF;
        unsigned int v15 = *v11 + a3;
        if (v15 > v14)
        {
          unsigned int v16 = 2 * v11[1];
          if (!v14) {
            unsigned int v16 = 2;
          }
          if (v15 <= v16) {
            unsigned int v17 = v16;
          }
          else {
            unsigned int v17 = *v11 + a3;
          }
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&result[16 * a3 + 152], v17);
          unsigned int v13 = *v11;
        }
        BOOL v9 = (_DWORD *)(*(void *)v6 + 4 * v13);
        *long long v11 = v15;
      }
      else
      {
        *(_DWORD *)(a2 + 8) = v8;
        BOOL v9 = (_DWORD *)(*(void *)v6 + 4 * v8);
        *((_DWORD *)v7 + 106re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *v9;
      }
      return (char *)memcpy(v9, __src, (4 * a3));
    }
  }
  return result;
}

void *MBP::findOverlaps(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)result;
  uint64_t v4 = result[2];
  uint64_t v5 = result[4];
  result[12] = a2;
  result[13] = v5;
  result[14] = a3;
  if (v3)
  {
    uint64_t v6 = 0;
    uint64_t v111 = (MBP_PairManager *)(result + 6);
    uint64_t v97 = v4;
    uint64_t v98 = v3;
    while (1)
    {
      uint64_t v7 = *(uint64_t **)(v4 + 56 * v6 + 32);
      if (v7)
      {
        if (*((_DWORD *)v7 + 48)) {
          break;
        }
      }
LABEL_65:
      if (++v6 == v3) {
        return result;
      }
    }
    uint64_t v99 = v6;
    uint64_t v100 = *(uint64_t **)(v4 + 56 * v6 + 32);
    if (*((unsigned char *)v7 + 48))
    {
      uint64_t v8 = v7[1];
      uint64_t v107 = v7[3];
      uint64_t v109 = *v7;
      unint64_t v103 = *((unsigned int *)v7 + 10);
      unint64_t v101 = *((unsigned int *)v7 + 11);
      if (!v101)
      {
LABEL_28:
        uint64_t v7 = v100;
        if (v103)
        {
          uint64_t v44 = 0;
          LODWORD(v45) = 0;
          do
          {
            int v46 = (unsigned int *)(v8 + 24 * v44);
            unsigned int v47 = v46[3];
            unsigned int v48 = *v46;
            unsigned int v49 = v45 + 2;
            do
            {
              unsigned int v50 = v49;
              uint64_t v51 = 24 * v45;
              uint64_t v45 = (v45 + 1);
              unsigned int v52 = *(_DWORD *)(v8 + v51);
              unsigned int v49 = v50 + 1;
            }
            while (v52 < v48);
            if (v45 >= v103) {
              break;
            }
            if (*(_DWORD *)(v8 + 24 * v45) <= v47)
            {
              unsigned int v53 = (int32x2_t *)(v8 + 24 * v44);
              uint64_t v54 = (_DWORD *)v53 + 1;
              unsigned int v55 = v53 + 1;
              uint64_t v56 = v53 + 2;
              uint64_t v57 = v45;
              do
              {
                uint64_t v58 = v8 + 24 * v57;
                int8x8_t v59 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v56, *(int32x2_t *)(v58 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
                if (!((*(_DWORD *)(v58 + 16) - *v54) & 0x80000000 | ((*(_DWORD *)(v58 + 20) - v55->i32[0]) >> 31 << 30) | v59.i32[0] | v59.i32[1])) {
                  __n128 result = (void *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v107 + 2 * v44) + 4), *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v107 + 2 * v57) + 4));
                }
                uint64_t v57 = v50;
                unsigned int v60 = *(_DWORD *)(v8 + 24 * v50++);
              }
              while (v60 <= v47);
            }
            ++v44;
          }
          while (v44 != v103);
        }
        goto LABEL_39;
      }
      if (v103)
      {
        unint64_t v9 = 0;
        unsigned int v10 = 0;
        uint64_t v11 = v100[2];
        uint64_t v105 = v100[4];
        do
        {
          int v12 = (unsigned int *)(v8 + 24 * v9);
          unsigned int v13 = v12[3];
          unsigned int v14 = *v12;
          unsigned int v15 = v10 + 1;
          do
          {
            unsigned int v16 = v10;
            unsigned int v17 = v15;
            unsigned int v18 = *(_DWORD *)(v11 + 24 * v10++);
            ++v15;
          }
          while (v18 < v14);
          if (v18 <= v13)
          {
            uint64_t v19 = v16;
            uint64_t v20 = (int32x2_t *)(v8 + 24 * v9);
            uint64_t v21 = (_DWORD *)v20 + 1;
            uint64_t v22 = v20 + 1;
            __int16 v23 = v20 + 2;
            do
            {
              uint64_t v24 = v11 + 24 * v19;
              int8x8_t v25 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v23, *(int32x2_t *)(v24 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
              if (!((*(_DWORD *)(v24 + 16) - *v21) & 0x80000000 | ((*(_DWORD *)(v24 + 20) - v22->i32[0]) >> 31 << 30) | v25.i32[0] | v25.i32[1])) {
                __n128 result = (void *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v107 + 2 * v9) + 4), *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v105 + 2 * v19) + 4));
              }
              uint64_t v19 = v17;
              unsigned int v26 = *(_DWORD *)(v11 + 24 * v17++);
            }
            while (v26 <= v13);
          }
          if (--v10 >= v101) {
            break;
          }
          ++v9;
        }
        while (v9 < v103);
        unint64_t v27 = 0;
        unsigned int v28 = 0;
        do
        {
          uint64_t v29 = (unsigned int *)(v11 + 24 * v27);
          unsigned int v30 = v29[3];
          unsigned int v31 = *v29;
          unsigned int v32 = v28 + 1;
          do
          {
            unsigned int v33 = v28;
            unsigned int v34 = v32;
            unsigned int v35 = *(_DWORD *)(v8 + 24 * v28++);
            ++v32;
          }
          while (v35 <= v31);
          if (v35 <= v30)
          {
            uint64_t v36 = v33;
            long long v37 = (int32x2_t *)(v11 + 24 * v27);
            uint64_t v38 = (_DWORD *)v37 + 1;
            uint64_t v39 = v37 + 1;
            uint64_t v40 = v37 + 2;
            do
            {
              uint64_t v41 = v8 + 24 * v36;
              int8x8_t v42 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v40, *(int32x2_t *)(v41 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
              if (!((*(_DWORD *)(v41 + 16) - *v38) & 0x80000000 | ((*(_DWORD *)(v41 + 20) - v39->i32[0]) >> 31 << 30) | v42.i32[0] | v42.i32[1])) {
                __n128 result = (void *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v107 + 2 * v36) + 4), *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v105 + 2 * v27) + 4));
              }
              uint64_t v36 = v34;
              unsigned int v43 = *(_DWORD *)(v8 + 24 * v34++);
            }
            while (v43 <= v30);
          }
          if (--v28 >= v103) {
            break;
          }
          ++v27;
        }
        while (v27 < v101);
        goto LABEL_28;
      }
    }
LABEL_39:
    if (*((unsigned char *)v7 + 104))
    {
      unint64_t v104 = *((unsigned int *)v100 + 16);
      uint64_t v62 = v100[9];
      uint64_t v61 = v100[10];
      uint64_t v108 = v100[11];
      uint64_t v110 = v100[7];
      uint64_t v106 = v100[12];
      unint64_t v102 = *((unsigned int *)v100 + 17);
      if (v102 && v104)
      {
        unint64_t v63 = 0;
        unsigned int v64 = 0;
        do
        {
          unint64_t v65 = (unsigned int *)(v62 + 24 * v63);
          unsigned int v66 = v65[3];
          unsigned int v67 = *v65;
          unsigned int v68 = v64 + 1;
          do
          {
            unsigned int v69 = v64;
            unsigned int v70 = v68;
            unsigned int v71 = *(_DWORD *)(v61 + 24 * v64++);
            ++v68;
          }
          while (v71 < v67);
          if (v71 <= v66)
          {
            uint64_t v72 = v69;
            float v73 = (int32x2_t *)(v62 + 24 * v63);
            unsigned int v74 = (_DWORD *)v73 + 1;
            unsigned int v75 = v73 + 1;
            uint64_t v76 = v73 + 2;
            do
            {
              uint64_t v77 = v61 + 24 * v72;
              int8x8_t v78 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v76, *(int32x2_t *)(v77 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
              if (!((*(_DWORD *)(v77 + 16) - *v74) & 0x80000000 | ((*(_DWORD *)(v77 + 20) - v75->i32[0]) >> 31 << 30) | v78.i32[0] | v78.i32[1])) {
                __n128 result = (void *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v110 + 8 * *(unsigned __int16 *)(v106 + 2 * v63) + 4), *(_DWORD *)(v110 + 8 * *(unsigned __int16 *)(v108 + 2 * v72) + 4));
              }
              uint64_t v72 = v70;
              unsigned int v79 = *(_DWORD *)(v61 + 24 * v70++);
            }
            while (v79 <= v66);
          }
          if (--v64 >= v102) {
            break;
          }
          ++v63;
        }
        while (v63 < v104);
      }
      if (v104 && v102)
      {
        uint64_t v80 = 0;
        unsigned int v81 = 0;
        do
        {
          int v82 = (unsigned int *)(v61 + 24 * v80);
          unsigned int v83 = v82[3];
          unsigned int v84 = *v82;
          unsigned int v85 = v81 + 1;
          do
          {
            unsigned int v86 = v81;
            unsigned int v87 = v85;
            unsigned int v88 = *(_DWORD *)(v62 + 24 * v81++);
            ++v85;
          }
          while (v88 <= v84);
          if (v88 <= v83)
          {
            uint64_t v89 = v86;
            uint64_t v90 = (int32x2_t *)(v61 + 24 * v80);
            unsigned int v91 = (_DWORD *)v90 + 1;
            uint64_t v92 = v90 + 1;
            int v93 = v90 + 2;
            do
            {
              uint64_t v94 = v62 + 24 * v89;
              int8x8_t v95 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v93, *(int32x2_t *)(v94 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
              if (!((*(_DWORD *)(v94 + 16) - *v91) & 0x80000000 | ((*(_DWORD *)(v94 + 20) - v92->i32[0]) >> 31 << 30) | v95.i32[0] | v95.i32[1])) {
                __n128 result = (void *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v110 + 8 * *(unsigned __int16 *)(v106 + 2 * v89) + 4), *(_DWORD *)(v110 + 8 * *(unsigned __int16 *)(v108 + 2 * v80) + 4));
              }
              uint64_t v89 = v87;
              unsigned int v96 = *(_DWORD *)(v62 + 24 * v87++);
            }
            while (v96 <= v83);
          }
          if (++v80 >= v102) {
            break;
          }
          --v81;
        }
        while (v81 < v104);
      }
    }
    uint64_t v6 = v99;
    *((_DWORD *)v100 + 48) = 0;
    uint64_t v4 = v97;
    uint64_t v3 = v98;
    goto LABEL_65;
  }
  return result;
}

physx::Bp::BroadPhaseMBP *physx::Bp::BroadPhaseMBP::BroadPhaseMBP(physx::Bp::BroadPhaseMBP *this, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  *(void *)this = &unk_26E7235C0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 1) = &unk_26E723740;
  *((void *)this + 2) = a6;
  *((void *)this + 11) = 0;
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *((_DWORD *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((void *)this + 9) = &unk_26E7237E8;
  *((void *)this + 10) = a6;
  *((void *)this + re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  unsigned int v10 = (char *)this + 160;
  *((_OWORD *)this + 11) = 0u;
  uint64_t v11 = (char *)this + 176;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  uint64_t v12 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unsigned int v13 = "static const char *physx::shdfnd::ReflectionAllocator<MBP>::getName() [T = MBP]";
  }
  else {
    unsigned int v13 = "<allocation names disabled>";
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v12 + 24) + 16))(v12 + 24, 5328, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2956);
  *(void *)uint64_t v14 = 0xFFFFFFFF00000000;
  *(_DWORD *)(v14 + 8) = -1;
  *(void *)(v14 + 72) = 0;
  *(void *)(v14 + 80) = 0;
  *(void *)(v14 + 64) = 0;
  *(_DWORD *)(v14 + 88) = 0;
  *(void *)(v14 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(v14 + 144) = 0;
  bzero((void *)(v14 + 152), 0x1010uLL);
  *(_OWORD *)(v14 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(v14 + 128) = 0;
  *(_OWORD *)(v14 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v14 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *(void *)(v14 + 529re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(v14 + 53re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(void *)(v14 + 5304) = 0;
  *(_DWORD *)(v14 + 5320) = 0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 44) = 0u;
  memset((void *)(v14 + 4264), 255, 0x404uLL);
  *((void *)this + 17) = v14;
  uint64_t v15 = (a5 + a4);
  if (a2) {
    physx::shdfnd::Array<RegionData,physx::shdfnd::ReflectionAllocator<RegionData>>::recreate((uint64_t *)(v14 + 16), a2);
  }
  if (v15)
  {
    *(_DWORD *)(v14 + 40) = 0;
    if ((*(_DWORD *)(v14 + 44) & 0x7FFFFFFFu) < v15) {
      physx::shdfnd::Array<MBP_Object,physx::shdfnd::ReflectionAllocator<MBP_Object>>::recreate((uint64_t *)(v14 + 32), v15);
    }
    unsigned int v16 = v15 >> 5;
    if ((v15 & 0x1F) != 0) {
      ++v16;
    }
    *(_DWORD *)(v14 + 5320) = v16;
    if (*(void *)(v14 + 5312))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *(void *)(v14 + 53re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
      unsigned int v16 = *(_DWORD *)(v14 + 5320);
    }
    if (v16)
    {
      unsigned int v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 254);
      size_t v18 = (4 * *(_DWORD *)(v14 + 5320));
    }
    else
    {
      size_t v18 = 0;
      unsigned int v17 = 0;
    }
    *(void *)(v14 + 53re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v17;
    bzero(v17, v18);
    bzero(*(void **)(v14 + 5312), (4 * *(_DWORD *)(v14 + 5320)));
    physx::Bp::PairManagerData::reserveMemory((unsigned int *)(v14 + 48), a3);
    physx::Bp::BroadPhaseMBP::allocateMappingArray((char *)this, v15);
  }
  else
  {
    physx::Bp::PairManagerData::reserveMemory((unsigned int *)(v14 + 48), a3);
  }
  if ((*((_DWORD *)this + 43) & 0x7FFFFC00) == 0) {
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate((uint64_t)v10, 0x400u);
  }
  if ((*((_DWORD *)this + 47) & 0x7FFFFC00) == 0) {
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate((uint64_t)v11, 0x400u);
  }
  return this;
}

char *physx::Bp::BroadPhaseMBP::allocateMappingArray(char *this, unsigned int a2)
{
  uint64_t v3 = (uint64_t)this;
  if (a2)
  {
    this = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2977);
    uint64_t v4 = this;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 152);
  if (v5)
  {
    this = (char *)memcpy(v4, *(const void **)(v3 + 144), 4 * v5);
    unsigned int v5 = *(_DWORD *)(v3 + 152);
  }
  if (v5 < a2) {
    this = (char *)memset(&v4[4 * v5], 255, 4 * (~v5 + a2) + 4);
  }
  if (*(void *)(v3 + 144)) {
    this = (char *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(v3 + 144) = v4;
  *(_DWORD *)(v3 + 152) = a2;
  return this;
}

void physx::Bp::BroadPhaseMBP::~BroadPhaseMBP(physx::Bp::BroadPhaseMBP *this)
{
  *(void *)this = &unk_26E7235C0;
  unint64_t v2 = (int *)*((void *)this + 17);
  if (v2)
  {
    int v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = (Region **)(*((void *)v2 + 2) + 32);
      do
      {
        unsigned int v5 = *v4;
        if (*v4)
        {
          Region::~Region(*v4);
          (*(void (**)(uint64_t, Region *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v5);
          *uint64_t v4 = 0;
        }
        v4 += 7;
        --v3;
      }
      while (v3);
    }
    uint64_t v6 = 0;
    *(void *)unint64_t v2 = 0xFFFFFFFF00000000;
    v2[2] = -1;
    do
    {
      v2[v6 * 4 + 40] = 0;
      v2[v6 + 1066] = -1;
      ++v6;
    }
    while (v6 != 257);
    v2[6] = 0;
    v2[10] = 0;
    physx::Bp::PairManagerData::purge((uint64_t)(v2 + 12));
    if (*((void *)v2 + 15)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)v2 + 15) = 0;
    v2[32] = 0;
    if (*((void *)v2 + 17)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)v2 + 17) = 0;
    v2[36] = 0;
    v2[1326] = 0;
    if (*((void *)v2 + 664)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    v2[1330] = 0;
    *((void *)v2 + 664) = 0;
    int v7 = v2[1327];
    if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((void *)v2 + 662)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    uint64_t v8 = 1028;
    do
    {
      int v9 = v2[v8 + 37];
      if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *(void *)&v2[v8 + 34] != 0) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      v8 -= 4;
    }
    while (v8 * 4);
    if (*((void *)v2 + 17)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)v2 + 17) = 0;
    v2[36] = 0;
    if (*((void *)v2 + 15)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)v2 + 15) = 0;
    v2[32] = 0;
    physx::Bp::PairManagerData::purge((uint64_t)(v2 + 12));
    int v11 = v2[11];
    if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((void *)v2 + 4)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    int v12 = v2[7];
    if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((void *)v2 + 2)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    (*(void (**)(uint64_t, int *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    *((void *)this + 17) = 0;
  }
  if (*((void *)this + 18)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v13 = *((_DWORD *)this + 47);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((void *)this + 22) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v15 = *((_DWORD *)this + 43);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && *((void *)this + 20)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 9) = &unk_26E7231E8;
  *((void *)this + 11) = 0;
  *((void *)this + 1) = &unk_26E7231E8;
  *((void *)this + 3) = 0;
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Bp::BroadPhaseMBP::~BroadPhaseMBP(this);
  if (v1)
  {
    unint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void physx::MBPPostUpdateWorkTask::~MBPPostUpdateWorkTask(physx::MBPPostUpdateWorkTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  uint64_t v1;

  *(void *)this = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  *((void *)this + 2) = 0;
  (*(void (**)(void))(v1 + 24))();
}

void physx::MBPUpdateWorkTask::~MBPUpdateWorkTask(physx::MBPUpdateWorkTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  uint64_t v1;

  *(void *)this = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  *((void *)this + 2) = 0;
  (*(void (**)(void))(v1 + 24))();
}

uint64_t physx::Bp::BroadPhaseMBP::getCaps(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 256;
  *(unsigned char *)(a2 + 8) = 1;
  return 1;
}

uint64_t physx::Bp::BroadPhaseMBP::getNbRegions(physx::Bp::BroadPhaseMBP *this)
{
  return **((unsigned int **)this + 17);
}

uint64_t physx::Bp::BroadPhaseMBP::getRegions(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *(unsigned int **)(a1 + 136);
  if (*v4 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = *v4;
  }
  if (result)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)v4 + 2) + 56 * a4 + 24;
    int32x2_t v8 = vdup_n_s32(0xFE7FFFFF);
    do
    {
      int v9 = (int32x2_t *)(a2 + v6);
      int v10 = 2 * *(_DWORD *)(v7 - 20);
      if ((*(_DWORD *)(v7 - 20) & 0x40000000) != 0) {
        int v11 = v10 & 0x7FFFFFFE;
      }
      else {
        int v11 = ~v10;
      }
      v9->i32[0] = v11;
      int v12 = 2 * *(_DWORD *)(v7 - 16);
      if ((*(_DWORD *)(v7 - 16) & 0x40000000) != 0) {
        int v13 = v12 & 0x7FFFFFFE;
      }
      else {
        int v13 = ~v12;
      }
      v9->i32[1] = v13;
      int v14 = 2 * *(_DWORD *)(v7 - 12);
      if ((*(_DWORD *)(v7 - 12) & 0x40000000) != 0) {
        int v15 = v14 & 0x7FFFFFFE;
      }
      else {
        int v15 = ~v14;
      }
      v9[1].i32[0] = v15;
      int v16 = 2 * *(_DWORD *)(v7 - 8);
      if ((*(_DWORD *)(v7 - 8) & 0x40000000) != 0) {
        int v17 = v16 & 0x7FFFFFFE;
      }
      else {
        int v17 = ~v16;
      }
      v9[1].i32[1] = v17;
      int v18 = 2 * *(_DWORD *)(v7 - 4);
      if ((*(_DWORD *)(v7 - 4) & 0x40000000) != 0) {
        int v19 = v18 & 0x7FFFFFFE;
      }
      else {
        int v19 = ~v18;
      }
      v9[2].i32[0] = v19;
      int v20 = 2 * *(_DWORD *)v7;
      if ((*(_DWORD *)v7 & 0x40000000) != 0) {
        int v21 = v20 & 0x7FFFFFFE;
      }
      else {
        int v21 = ~v20;
      }
      v9[2].i32[1] = v21;
      uint64_t v22 = *(void *)(v7 + 8);
      if (v22)
      {
        uint64_t v23 = *(void *)(v7 + 24);
        BOOL v24 = *(_DWORD *)(v7 + 16) != 0;
        int v25 = *(_DWORD *)(v22 + 140);
        LODWORD(v22) = *(_DWORD *)(v22 + 148);
        char v26 = 1;
      }
      else
      {
        uint64_t v23 = 0;
        char v26 = 0;
        BOOL v24 = 0;
        int v25 = 0;
        char v9[2] = v8;
        *(_OWORD *)(a2 + vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = xmmword_23441FAD0;
      }
      uint64_t v27 = a2 + v6;
      *(void *)(v27 + 24) = v23;
      v7 += 56;
      *(unsigned char *)(v27 + 40) = v26;
      *(unsigned char *)(v27 + 41) = v24;
      v6 += 48;
      *(_DWORD *)(v27 + 32) = v25;
      *(_DWORD *)(v27 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v22;
    }
    while (48 * result != v6);
  }
  return result;
}

uint64_t physx::Bp::BroadPhaseMBP::addRegion(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  int v10 = *(uint64_t **)(a1 + 136);
  uint64_t v11 = *((unsigned int *)v10 + 2);
  *(void *)unsigned int v86 = v10;
  if (v11 == -1)
  {
    uint64_t v11 = *(unsigned int *)v10;
    if (v11 >= 0x100)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2106, "MBP::addRegion: max number of regions reached.", a6, a7, a8, v73);
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)int v10 = v11 + 1;
    unsigned int v13 = *((_DWORD *)v10 + 6);
    unsigned int v14 = *((_DWORD *)v10 + 7) & 0x7FFFFFFF;
    unsigned int v15 = v13 + 1;
    if (v13 + 1 > v14)
    {
      unsigned int v16 = 2 * *((_DWORD *)v10 + 7);
      if (!v14) {
        unsigned int v16 = 2;
      }
      if (v15 <= v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = v15;
      }
      physx::shdfnd::Array<RegionData,physx::shdfnd::ReflectionAllocator<RegionData>>::recreate(v10 + 2, v17);
      int v10 = *(uint64_t **)v86;
      unsigned int v13 = *(_DWORD *)(*(void *)v86 + 24);
    }
    uint64_t v12 = v10[2] + 56 * v13;
    *((_DWORD *)v10 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v15;
  }
  else
  {
    uint64_t v12 = v10[2] + 56 * v11;
    *((_DWORD *)v10 + 2) = *(void *)(v12 + 48);
  }
  int v18 = v10;
  uint64_t v19 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v20 = "static const char *physx::shdfnd::ReflectionAllocator<Region>::getName() [T = Region]";
  }
  else {
    int v20 = "<allocation names disabled>";
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v19 + 24) + 16))(v19 + 24, 13120, v20, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2114);
  *(_OWORD *)(v21 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  *(unsigned char *)(v21 + 104) = 0;
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(unsigned char *)(v21 + 48) = 0;
  *(void *)(v21 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(v21 + 120) = -1;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_DWORD *)(v21 + 208) = 0;
  *(void *)(v21 + 264) = 0;
  *(_OWORD *)(v21 + 248) = 0u;
  *(_OWORD *)(v21 + 232) = 0u;
  *(unsigned char *)(v21 + 272) = 1;
  *(_DWORD *)(v21 + 224) = 0x80000000;
  *(void *)(v21 + 21re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = &unk_26E728438;
  *(_WORD *)(v21 + 280) = 256;
  *(_OWORD *)(v21 + 13088) = 0u;
  *(_OWORD *)(v21 + 13104) = 0u;
  if (*(int *)a2 < 0) {
    unsigned int v22 = ~*(_DWORD *)a2;
  }
  else {
    unsigned int v22 = *(_DWORD *)a2 | 0x80000000;
  }
  *(_DWORD *)(v12 + 4) = v22 >> 1;
  int v23 = *(_DWORD *)(a2 + 4);
  if (v23 < 0) {
    unsigned int v24 = ~v23;
  }
  else {
    unsigned int v24 = v23 | 0x80000000;
  }
  *(_DWORD *)(v12 + 8) = v24 >> 1;
  int v25 = *(_DWORD *)(a2 + 8);
  if (v25 < 0) {
    unsigned int v26 = ~v25;
  }
  else {
    unsigned int v26 = v25 | 0x80000000;
  }
  *(_DWORD *)(v12 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v26 >> 1;
  int v27 = *(_DWORD *)(a2 + 12);
  if (v27 < 0) {
    unsigned int v28 = ~v27;
  }
  else {
    unsigned int v28 = v27 | 0x80000000;
  }
  *(_DWORD *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v28 >> 1;
  int v29 = *(_DWORD *)(a2 + 16);
  if (v29 < 0) {
    unsigned int v30 = ~v29;
  }
  else {
    unsigned int v30 = v29 | 0x80000000;
  }
  *(_DWORD *)(v12 + 20) = v30 >> 1;
  int v31 = *(_DWORD *)(a2 + 20);
  if (v31 < 0) {
    unsigned int v32 = ~v31;
  }
  else {
    unsigned int v32 = v31 | 0x80000000;
  }
  *(_DWORD *)(v12 + 24) = v32 >> 1;
  uint64_t v76 = v21;
  *(void *)(v12 + 32) = v21;
  *(void *)(v12 + 48) = *(void *)(a2 + 24);
  setupOverlapFlags((_DWORD *)*(unsigned int *)v18, v18[2]);
  if (a3)
  {
    uint64_t v33 = v18[664];
    if (v33)
    {
      unsigned int v34 = (char *)v18;
      uint64_t v35 = v18[2];
      uint64_t v36 = v18[4];
      uint64_t v37 = 1;
      uint64_t v38 = *((unsigned int *)v34 + 1330);
      uint64_t v40 = a4;
      uint64_t v39 = a5;
      do
      {
        if (!v38) {
          goto LABEL_40;
        }
        int v41 = v38 - 1;
      }
      while (!*(_DWORD *)(v33 - 4 + 4 * v38--));
      uint64_t v37 = (v41 & 0x7FFFFFF) + 1;
LABEL_40:
      uint64_t v43 = 0;
      uint64_t v80 = (BitArray *)(v34 + 120);
      uint64_t v74 = v37;
      uint64_t v75 = v33;
      uint64_t v83 = v11;
      while (1)
      {
        unsigned int v44 = *(_DWORD *)(v33 + 4 * v43);
        if (v44) {
          break;
        }
LABEL_70:
        if (++v43 == v37) {
          return v11;
        }
      }
      while (1)
      {
        unsigned int v45 = __clz(__rbit32(v44)) | (32 * v43);
        uint64_t v46 = *(unsigned __int16 *)(v36 + 12 * v45 + 4);
        if (*(_WORD *)(v36 + 12 * v45 + 4))
        {
          uint64_t v47 = v36 + 12 * v45;
          if (v46 == 1) {
            unsigned int v48 = (unsigned __int16 *)(v47 + 8);
          }
          else {
            unsigned int v48 = (unsigned __int16 *)(*(void *)&v34[16 * v46 + 152] + 4 * *(unsigned int *)(v47 + 8));
          }
          uint64_t v57 = *(void *)(v35 + 56 * v48[1] + 32);
          int8x8_t v59 = (unsigned int *)(*(void *)(v57 + 128) + 8 * *v48);
          unsigned int v58 = *v59;
          unsigned int v55 = v59[1];
          if (v55) {
            uint64_t v60 = 152;
          }
          else {
            uint64_t v60 = 160;
          }
          uint64_t v61 = *(void *)(v57 + v60) + 24 * v58;
          uint32x4_t v87 = *(uint32x4_t *)v61;
          uint32x2_t v88 = *(uint32x2_t *)(v61 + 16);
          unsigned __int32 v56 = v87.u32[3];
        }
        else
        {
          unsigned int v49 = (unsigned int *)(v36 + 12 * v45);
          uint64_t v50 = *v49;
          uint64_t v51 = v40 + 24 * v50;
          unsigned int v52 = (const float *)(v39 + 4 * v50);
          float32x4_t v53 = vld1q_dup_f32(v52);
          int8x16_t v54 = (int8x16_t)vsubq_f32(*(float32x4_t *)v51, v53);
          v54.i32[3] = vaddq_f32(*(float32x4_t *)v51, v53).i32[3];
          uint32x4_t v87 = vshrq_n_u32((uint32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)v54), vmvnq_s8(v54), (int8x16_t)(*(_OWORD *)&v54 | __PAIR128__(0x8000000080000000, 0x8000000080000000))), 1uLL);
          *(float32x2_t *)v53.f32 = vadd_f32(*(float32x2_t *)(v51 + 16), *(float32x2_t *)v53.f32);
          uint32x2_t v88 = vshr_n_u32((uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v53.f32), vmvn_s8(*(int8x8_t *)v53.f32), (int8x8_t)(v53.i64[0] | 0x8000000080000000)), 1uLL);
          unsigned int v55 = v49[2];
          unsigned __int32 v56 = v87.u32[3];
        }
        if (v56 < *(_DWORD *)(v12 + 4)
          || *(_DWORD *)(v12 + 16) < v87.i32[0]
          || v88.i32[0] < *(_DWORD *)(v12 + 8)
          || *(_DWORD *)(v12 + 20) < v87.i32[1]
          || v88.i32[1] < *(_DWORD *)(v12 + 12)
          || *(_DWORD *)(v12 + 24) < v87.i32[2])
        {
          goto LABEL_67;
        }
        unsigned int v62 = v55 >> 2;
        uint64_t v63 = *((void *)v34 + 4);
        uint64_t v84 = v63;
        unsigned int v85 = v55 >> 2;
        if (v55 >> 7 >= *((_DWORD *)v34 + 32))
        {
          BitArray::resize(v80, v85);
          uint64_t v63 = v84;
          unsigned int v62 = v55 >> 2;
          unsigned int v34 = *(char **)v86;
        }
        *(_DWORD *)(*(void *)v80 + 4 * (v55 >> 7)) |= 1 << v62;
        uint64_t v64 = v63 + 12 * v62;
        uint64_t v65 = *(unsigned __int16 *)(v64 + 4);
        unsigned int v81 = *(unsigned __int16 *)(v64 + 4);
        int v82 = (_WORD *)(v64 + 4);
        unsigned int v66 = (unsigned int *)(v64 + 8);
        unsigned int v79 = (unsigned int *)(v64 + 8);
        if (v81 == 1)
        {
          uint64_t v65 = 1;
        }
        else
        {
          if (!*(_WORD *)(v64 + 4))
          {
            uint64_t v67 = 0;
            goto LABEL_64;
          }
          unsigned int v66 = (unsigned int *)(*(void *)&v34[16 * v65 + 152] + 4 * *v66);
        }
        uint64_t v67 = v65;
        memcpy(__dst, v66, 4 * v65);
LABEL_64:
        __int16 v68 = Region::addObject(v76, (long long *)v87.i8, v55, v55 & 1);
        unsigned int v69 = &__dst[v67];
        _WORD *v69 = v68;
        v69[1] = v83;
        if (v81 >= 2)
        {
          uint64_t v70 = *v79;
          uint64_t v71 = *(void *)v86 + 4 * v67;
          *(_DWORD *)(*(void *)(*(void *)v86 + 16 * v67 + 152) + 4 * v70) = *(_DWORD *)(v71 + 4264);
          *(_DWORD *)(v71 + 4264) = v70;
        }
        MBP::storeHandles(*(char **)v86, v84 + 12 * v85, v81 + 1, __dst);
        unsigned int v34 = *(char **)v86;
        uint64_t v11 = v83;
        _WORD *v82 = v81 + 1;
        uint64_t v40 = a4;
        uint64_t v39 = a5;
        uint64_t v37 = v74;
        uint64_t v33 = v75;
LABEL_67:
        v44 &= v44 - 1;
        if (!v44) {
          goto LABEL_70;
        }
      }
    }
  }
  return v11;
}

uint64_t physx::Bp::BroadPhaseMBP::removeRegion(physx::Bp::BroadPhaseMBP *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  int32x2_t v8 = (unsigned int *)*((void *)this + 17);
  if (*v8 <= a2)
  {
    uint64_t v31 = physx::shdfnd::Foundation::mInstance;
    uint64_t v32 = 2139;
LABEL_26:
    physx::shdfnd::Foundation::error(v31, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", v32, "MBP::removeRegion: invalid handle.", a6, a7, a8, v33);
    return 0;
  }
  uint64_t v9 = *((void *)v8 + 2);
  uint64_t v10 = v9 + 56 * a2;
  uint64_t v13 = *(void *)(v10 + 32);
  uint64_t v11 = (void *)(v10 + 32);
  uint64_t v12 = v13;
  if (!v13)
  {
    uint64_t v31 = physx::shdfnd::Foundation::mInstance;
    uint64_t v32 = 2149;
    goto LABEL_26;
  }
  unsigned int v34 = v11;
  uint64_t v36 = *((void *)v8 + 2);
  uint64_t v14 = v9 + 56 * a2;
  *(_OWORD *)(v14 + 4) = xmmword_23441FAE0;
  *(void *)(v14 + 20) = 0xC0000000C00000;
  uint64_t v40 = *(unsigned int *)(v12 + 116);
  if (v40)
  {
    uint64_t v15 = 0;
    uint64_t v39 = *(void *)(v12 + 128);
    uint64_t v38 = (BitArray *)(v8 + 1328);
    while (1)
    {
      unint64_t v16 = *(unsigned int *)(v39 + 8 * v15 + 4);
      if (v16 != -1) {
        break;
      }
LABEL_22:
      if (++v15 == v40) {
        goto LABEL_23;
      }
    }
    uint64_t v17 = *((void *)v8 + 2);
    uint64_t v18 = *((void *)v8 + 4) + 12 * (*(_DWORD *)(v39 + 8 * v15 + 4) >> 2);
    uint64_t v19 = (_DWORD *)(v18 + 8);
    uint64_t v21 = (_WORD *)(v18 + 4);
    uint64_t v20 = *(unsigned __int16 *)(v18 + 4);
    if (*(_WORD *)(v18 + 4) == 1)
    {
      uint64_t v22 = 1;
      uint64_t v23 = v18 + 8;
    }
    else
    {
      if (!*(_WORD *)(v18 + 4))
      {
        _WORD *v21 = 0;
LABEL_19:
        _DWORD *v19 = v16;
        MBP::addToOutOfBoundsArray((uint64_t)v8, *(_DWORD *)v18);
        if ((v16 >> 7) >= v8[1330]) {
          BitArray::resize(v38, v16 >> 2);
        }
        *(_DWORD *)(*(void *)v38 + 4 * (v16 >> 7)) |= 1 << (v16 >> 2);
        goto LABEL_22;
      }
      uint64_t v23 = *(void *)&v8[4 * v20 + 38] + 4 * *v19;
      uint64_t v22 = *(unsigned __int16 *)(v18 + 4);
    }
    int v24 = 0;
    int v25 = (unsigned __int16 *)(v23 + 2);
    uint64_t v26 = v22;
    do
    {
      if (*(void *)(v17 + 56 * *v25 + 32) != v12) {
        __src[v24++] = *(_DWORD *)(v25 - 1);
      }
      v25 += 2;
      --v26;
    }
    while (v26);
    if (v20 >= 2)
    {
      uint64_t v27 = *v19;
      uint64_t v28 = *(void *)&v8[4 * v22 + 38];
      int v29 = &v8[v22];
      *(_DWORD *)(v28 + 4 * v27) = v29[1066];
      v29[1066] = v27;
    }
    MBP::storeHandles((char *)v8, v18, v24, __src);
    _WORD *v21 = v24;
    if (v24) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
LABEL_23:
  Region::~Region((Region *)v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
  void *v34 = 0;
  *(void *)(v36 + 56 * a2 + 48) = v8[2];
  char v8[2] = a2;
  setupOverlapFlags((_DWORD *)*v8, *((void *)v8 + 2));
  return 1;
}

void physx::Bp::BroadPhaseMBP::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 40))(a6);
  }
  physx::Bp::BroadPhaseMBP::setUpdateData(a1);
  MBP::findOverlaps(*(void **)(a1 + 136), *(void *)(a1 + 192), *(void *)(a1 + 200));
  physx::Bp::BroadPhaseMBP::postUpdate((physx::Bp::BroadPhaseMBP *)a1);
}

void physx::Bp::BroadPhaseMBP::setUpdateData(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = v1;
  uint64_t v266 = *MEMORY[0x263EF8340];
  uint64_t v237 = v7;
  unsigned int v8 = *(_DWORD *)(v7 + 80);
  if (v8 > *(_DWORD *)(v1 + 152)) {
    physx::Bp::BroadPhaseMBP::allocateMappingArray((char *)v1, v8);
  }
  *(_OWORD *)(v6 + 192) = *(_OWORD *)(v237 + 56);
  uint64_t v9 = *(unsigned int **)(v237 + 32);
  int v10 = *(_DWORD *)(v237 + 40);
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  uint64_t v238 = v6;
  if (!v11)
  {
    uint64_t v12 = *(void *)(v6 + 144);
    do
    {
      uint64_t v253 = v9 + 1;
      uint64_t v248 = *v9;
      unint64_t v13 = *(unsigned int *)(v12 + 4 * v248);
      uint64_t v14 = *(void *)(v6 + 136);
      unint64_t v15 = v13 >> 2;
      uint64_t v16 = *(void *)(v14 + 32);
      uint64_t v17 = v16 + 12 * (*(_DWORD *)(v12 + 4 * v248) >> 2);
      unsigned int v20 = *(unsigned __int16 *)(v17 + 4);
      uint64_t v19 = (_WORD *)(v17 + 4);
      uint64_t v18 = v20;
      if (v20)
      {
        unint64_t v245 = *(unsigned int *)(v12 + 4 * *v9);
        uint64_t v21 = v16 + 12 * v15;
        if (v18 == 1)
        {
          uint64_t v22 = v21 + 8;
          uint64_t v23 = 1;
        }
        else
        {
          uint64_t v22 = *(void *)(v14 + 16 * v18 + 152) + 4 * *(unsigned int *)(v21 + 8);
          uint64_t v23 = v18;
        }
        uint64_t v24 = *(void *)(v14 + 16);
        int v25 = (unsigned __int16 *)(v22 + 2);
        uint64_t v240 = v23;
        do
        {
          Region::removeObject(*(Region **)(v24 + 56 * *v25 + 32), *(v25 - 1));
          v25 += 2;
          --v23;
        }
        while (v23);
        uint64_t v6 = v238;
        unint64_t v13 = v245;
        if (v18 >= 2)
        {
          uint64_t v26 = *(unsigned int *)(v16 + 12 * v15 + 8);
          uint64_t v27 = v14 + 4 * v240;
          *(_DWORD *)(*(void *)(v14 + 16 * v240 + 152) + 4 * v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v27 + 4264);
          *(_DWORD *)(v27 + 4264) = v26;
        }
      }
      _WORD *v19 = 0;
      uint64_t v28 = v16 + 12 * v15;
      *(_WORD *)(v28 + 6) |= 4u;
      *(_DWORD *)(v28 + 8) = *(_DWORD *)(v14 + 4);
      unint64_t v29 = v13 >> 7;
      if ((v13 >> 7) >= *(_DWORD *)(v14 + 128)) {
        BitArray::resize((BitArray *)(v14 + 120), v15);
      }
      int v30 = 1 << (v13 >> 2);
      *(_DWORD *)(*(void *)(v14 + 120) + 4 * v29) |= v30;
      *(_DWORD *)(v14 + 4) = v15;
      if (v29 >= *(_DWORD *)(v14 + 144)) {
        BitArray::resize((BitArray *)(v14 + 136), v15);
      }
      *(_DWORD *)(*(void *)(v14 + 136) + 4 * v29) |= v30;
      if (v29 >= *(_DWORD *)(v14 + 5320)) {
        BitArray::resize((BitArray *)(v14 + 5312), v15);
      }
      *(_DWORD *)(*(void *)(v14 + 5312) + 4 * v29) &= ~v30;
      uint64_t v12 = *(void *)(v6 + 144);
      *(_DWORD *)(v12 + 4 * v248) = -1;
      --v10;
      uint64_t v9 = v253;
    }
    while (v10);
  }
  uint64_t v31 = *(unsigned int **)v237;
  if (*(void *)v237)
  {
    int v32 = *(_DWORD *)(v237 + 8);
    if (v32)
    {
      uint64_t v227 = *(void *)(v237 + 56);
      uint64_t v229 = *(void *)(v237 + 48);
      do
      {
        unsigned int v35 = *v31;
        char v33 = v31 + 1;
        uint64_t v34 = v35;
        uint64_t v36 = v229 + 24 * v35;
        uint64_t v37 = (const float *)(*(void *)(v237 + 72) + 4 * v35);
        float32x4_t v38 = vld1q_dup_f32(v37);
        float32x4_t v39 = vsubq_f32(*(float32x4_t *)v36, v38);
        float32x4_t v40 = vaddq_f32(*(float32x4_t *)(v36 + 12), v38);
        float32x4_t v265 = v39;
        *(float32x4_t *)uint64_t v259 = v40;
        uint32x2_t v41 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)(*(void *)&vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v39.f32), vmvn_s8(*(int8x8_t *)v39.f32), (int8x8_t)(v39.i64[0] | 0x8000000080000000)) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0xF0000000FLL), 1uLL);
        *(uint32x2_t *)__src = v41;
        if (v39.i32[2] < 0) {
          unsigned int v42 = ~v39.i32[2];
        }
        else {
          unsigned int v42 = v39.i32[2] | 0x80000000;
        }
        unsigned int v43 = ((v42 & 0xFFFFFFF0) - 16) >> 1;
        *(_DWORD *)&__src[8] = v43;
        uint64_t v44 = *(void *)&vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)(*(void *)&vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v259), vmvn_s8(*(int8x8_t *)v259), (int8x8_t)(*(void *)v259 | 0x8000000080000000)) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0x1000000010), 1uLL) | 0x200000002;
        *(void *)&__src[12] = v44;
        if (*(int *)&v259[8] < 0) {
          unsigned int v45 = ~*(_DWORD *)&v259[8];
        }
        else {
          unsigned int v45 = *(_DWORD *)&v259[8] | 0x80000000;
        }
        unsigned int v46 = (((v45 & 0xFFFFFFF0) + 16) >> 1) | 2;
        *(_DWORD *)&__src[20] = v46;
        int v47 = *(_DWORD *)(v227 + 4 * v34);
        unsigned int v48 = *(uint64_t **)(v6 + 136);
        unsigned int v49 = *((_DWORD *)v48 + 1);
        unint64_t v241 = v33;
        int v235 = v32;
        if (v49 == -1)
        {
          unsigned int v49 = *((_DWORD *)v48 + 10);
          unsigned int v52 = *((_DWORD *)v48 + 11) & 0x7FFFFFFF;
          unsigned int v53 = v49 + 1;
          unsigned int v54 = v49;
          if (v49 + 1 > v52)
          {
            if (v52) {
              unsigned int v55 = 2 * *((_DWORD *)v48 + 11);
            }
            else {
              unsigned int v55 = 2;
            }
            if (v53 <= v55) {
              uint64_t v56 = v55;
            }
            else {
              uint64_t v56 = v53;
            }
            unsigned int v57 = v43;
            unsigned int v58 = v46;
            uint64_t v249 = v44;
            uint32x2_t v254 = v41;
            physx::shdfnd::Array<MBP_Object,physx::shdfnd::ReflectionAllocator<MBP_Object>>::recreate(v48 + 4, v56);
            uint64_t v44 = v249;
            uint32x2_t v41 = v254;
            unsigned int v46 = v58;
            unsigned int v43 = v57;
            unsigned int v54 = *((_DWORD *)v48 + 10);
          }
          BOOL v51 = 0;
          uint64_t v50 = v48[4] + 12 * v54;
          *((_DWORD *)v48 + 10) = v53;
        }
        else
        {
          uint64_t v50 = v48[4] + 12 * v49;
          *((_DWORD *)v48 + 1) = *(_DWORD *)(v50 + 8);
          BOOL v51 = (*(_WORD *)(v50 + 6) & 2) == 0;
        }
        *(void *)unint64_t v233 = v34;
        int v250 = v47;
        __int16 v231 = 2 * v51;
        unsigned int v246 = (2 * v51) | (4 * v49) | (v47 == 0);
        uint64_t v59 = *(unsigned int *)v48;
        if (v59)
        {
          uint64_t v60 = 0;
          unsigned int v61 = 0;
          unsigned __int32 v62 = v41.u32[1];
          unsigned __int32 v63 = v41.i32[0];
          unsigned __int32 v64 = v44;
          unsigned __int32 v65 = HIDWORD(v44);
          uint64_t v66 = v48[2] + 16;
          char v255 = 1;
          do
          {
            if (*(_DWORD *)v66 >= v63)
            {
              unsigned __int32 v67 = *(_DWORD *)(v66 - 12);
              if (v64 >= v67)
              {
                unsigned __int32 v68 = *(_DWORD *)(v66 + 4);
                if (v68 >= v62)
                {
                  unsigned __int32 v69 = *(_DWORD *)(v66 - 8);
                  if (v65 >= v69)
                  {
                    unsigned int v70 = *(_DWORD *)(v66 + 8);
                    if (v70 >= v43)
                    {
                      unsigned int v71 = *(_DWORD *)(v66 - 4);
                      if (v46 >= v71)
                      {
                        unsigned int v223 = v46;
                        unsigned int v225 = v43;
                        BOOL v72 = *(_DWORD *)v66 < v64 || v71 > v43;
                        unsigned __int32 v221 = v65;
                        char v75 = !v72 && v68 >= v65 && v70 >= v46;
                        if (v69 > v62) {
                          char v75 = 0;
                        }
                        if (v67 <= v63) {
                          char v76 = v75;
                        }
                        else {
                          char v76 = 0;
                        }
                        v255 &= v76;
                        uint64_t v77 = *(void *)(v66 + 16);
                        if (*(_DWORD *)(v77 + 112) == 0xFFFF)
                        {
                          physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2355, "MBP::addObject: 64K objects in single region reached. Some collisions might be lost.", v2, v3, v4, v219);
                        }
                        else
                        {
                          unsigned int v220 = v61 + 1;
                          int8x8_t v78 = &v265.i16[2 * v61];
                          *int8x8_t v78 = Region::addObject(v77, (long long *)__src, v246, v250 == 0);
                          v78[1] = v60;
                          unsigned int v61 = v220;
                        }
                        unsigned int v46 = v223;
                        unsigned int v43 = v225;
                        unsigned __int32 v65 = v221;
                      }
                    }
                  }
                }
              }
            }
            ++v60;
            v66 += 56;
          }
          while (v59 != v60);
        }
        else
        {
          unsigned int v61 = 0;
          char v255 = 1;
        }
        MBP::storeHandles((char *)v48, v50, v61, &v265);
        *(_WORD *)(v50 + 4) = v61;
        unsigned int v79 = v48 + 664;
        unsigned int v80 = v49 >> 5;
        unsigned int v81 = *((_DWORD *)v48 + 1330);
        int v82 = 1 << v49;
        if (v61 && (v255 & 1) != 0)
        {
          unsigned int v83 = v246;
          if (v80 >= v81) {
            BitArray::resize((BitArray *)(v48 + 664), v49);
          }
          *(_DWORD *)(*v79 + 4 * v80) &= ~v82;
        }
        else
        {
          unsigned int v83 = v246;
          if (v80 >= v81) {
            BitArray::resize((BitArray *)(v48 + 664), v49);
          }
          *(_DWORD *)(*v79 + 4 * v80) |= v82;
          if (!v61)
          {
            *(_DWORD *)(v50 + 8) = v246;
            MBP::addToOutOfBoundsArray((uint64_t)v48, v233[0]);
          }
        }
        uint64_t v6 = v238;
        if (v250)
        {
          if (v80 >= *((_DWORD *)v48 + 32)) {
            BitArray::resize((BitArray *)(v48 + 15), v49);
          }
          *(_DWORD *)(v48[15] + 4 * v80) |= v82;
        }
        *(_WORD *)(v50 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v231;
        *(_DWORD *)uint64_t v50 = v233[0];
        *(_DWORD *)(*(void *)(v238 + 144) + 4 * *(void *)v233) = v83;
        int v32 = v235 - 1;
        uint64_t v31 = v241;
      }
      while (v235 != 1);
    }
  }
  uint64_t v84 = *(unsigned int **)(v237 + 16);
  if (v84)
  {
    int v85 = *(_DWORD *)(v237 + 24);
    if (v85)
    {
      uint64_t v222 = *(void *)(v237 + 48);
      do
      {
        int v234 = v85;
        unsigned int v87 = *v84++;
        uint64_t v86 = v87;
        uint64_t v88 = v222 + 24 * v87;
        uint64_t v89 = (const float *)(*(void *)(v237 + 72) + 4 * v87);
        float32x4_t v90 = vld1q_dup_f32(v89);
        float32x4_t v91 = vsubq_f32(*(float32x4_t *)v88, v90);
        float32x4_t v92 = vaddq_f32(*(float32x4_t *)(v88 + 12), v90);
        float32x4_t v265 = v91;
        *(float32x4_t *)__src = v92;
        *(uint32x2_t *)&long long v5 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)(*(void *)&vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v91.f32), vmvn_s8(*(int8x8_t *)v91.f32), (int8x8_t)(v91.i64[0] | 0x8000000080000000)) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0xF0000000FLL), 1uLL);
        *(void *)uint64_t v259 = v5;
        if (v91.i32[2] < 0) {
          unsigned int v93 = ~v91.i32[2];
        }
        else {
          unsigned int v93 = v91.i32[2] | 0x80000000;
        }
        unsigned int v94 = ((v93 & 0xFFFFFFF0) - 16) >> 1;
        *(_DWORD *)&v259[8] = v94;
        uint64_t v95 = *(void *)&vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)(*(void *)&vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)__src), vmvn_s8(*(int8x8_t *)__src), (int8x8_t)(*(void *)__src | 0x8000000080000000)) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0x1000000010), 1uLL) | 0x200000002;
        *(void *)&v259[12] = v95;
        if (*(int *)&__src[8] < 0) {
          unsigned int v96 = ~*(_DWORD *)&__src[8];
        }
        else {
          unsigned int v96 = *(_DWORD *)&__src[8] | 0x80000000;
        }
        unsigned int v97 = (((v96 & 0xFFFFFFF0) + 16) >> 1) | 2;
        unsigned int v260 = v97;
        uint64_t v98 = *(unsigned int **)(v6 + 136);
        unint64_t v99 = *(unsigned int *)(*(void *)(v6 + 144) + 4 * v86);
        uint64_t v100 = *v98;
        uint64_t v101 = *((void *)v98 + 2);
        uint64_t v247 = *((void *)v98 + 4);
        uint64_t v251 = (uint64_t)v98;
        unint64_t v102 = v98 + 30;
        if (*(_DWORD *)(*(void *)(v6 + 144) + 4 * v86) >> 7 >= v98[32])
        {
          uint64_t v103 = v6;
          unint64_t v104 = v84;
          unsigned int v105 = v94;
          *(_OWORD *)uint64_t v256 = v5;
          uint64_t v242 = v95;
          BitArray::resize((BitArray *)(v98 + 30), v99 >> 2);
          uint64_t v95 = v242;
          long long v5 = *(_OWORD *)v256;
          unsigned int v94 = v105;
          uint64_t v84 = v104;
          uint64_t v6 = v103;
        }
        int v232 = 1 << (v99 >> 2);
        unint64_t v236 = v99 >> 7;
        *(_DWORD *)(*v102 + 4 * (v99 >> 7)) |= v232;
        unint64_t v257 = v99 >> 2;
        uint64_t v106 = v247 + 12 * (v99 >> 2);
        unsigned int v108 = *(unsigned __int16 *)(v106 + 4);
        uint64_t v107 = (_WORD *)(v106 + 4);
        uint64_t v243 = v108;
        if (v108 == 1)
        {
          uint64_t v109 = v247 + 12 * v257;
          unsigned int v110 = *(unsigned __int16 *)(v109 + 10);
          if (!*(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 40)
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 4) <= v5
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 8) <= DWORD1(v5)
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 12) <= v94
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 16) >= v95
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 20) >= HIDWORD(v95)
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 24) >= v97)
          {
            if (v236 >= *(_DWORD *)(v251 + 5320)) {
              BitArray::resize((BitArray *)(v251 + 5312), v257);
            }
            *(_DWORD *)(*(void *)(v251 + 5312) + 4 * v236) &= ~v232;
            Region::updateObject(*(void *)(v101 + 56 * v110 + 32), (long long *)v259, *(unsigned __int16 *)(v109 + 8));
            int v142 = v234;
            goto LABEL_169;
          }
        }
        if (v100)
        {
          uint64_t v111 = 0;
          unsigned int v112 = 0;
          signed int v113 = (unsigned int *)(v101 + 12);
          char v114 = 1;
          unsigned int v115 = v99 >> 2;
          uint64_t v116 = v243;
          do
          {
            unsigned int v117 = v113[1];
            if (v117 >= v5)
            {
              unsigned int v118 = *(v113 - 2);
              if (v95 >= v118)
              {
                unsigned int v119 = v113[2];
                if (v119 >= DWORD1(v5))
                {
                  unsigned int v120 = *(v113 - 1);
                  if (HIDWORD(v95) >= v120)
                  {
                    unsigned int v121 = v113[3];
                    if (v121 >= v94 && v97 >= *v113)
                    {
                      BOOL v122 = 0;
                      if (v118 <= v5 && v120 <= DWORD1(v5)) {
                        BOOL v122 = *v113 <= v94 && v117 >= v95 && v119 >= HIDWORD(v95) && v121 >= v97;
                      }
                      v114 &= v122;
                      v265.i32[v112++] = v111;
                    }
                  }
                }
              }
            }
            ++v111;
            v113 += 14;
          }
          while (v100 != v111);
        }
        else
        {
          unsigned int v112 = 0;
          char v114 = 1;
          unsigned int v115 = v99 >> 2;
          uint64_t v116 = v243;
        }
        uint64_t v228 = v107;
        uint64_t v230 = v84;
        char v224 = v114;
        BOOL v226 = (_DWORD *)(v247 + 12 * v115 + 8);
        if (v116 == 1)
        {
          uint64_t v116 = 1;
          uint64_t v126 = (char *)(v247 + 12 * v115 + 8);
        }
        else
        {
          uint64_t v126 = (char *)(*(void *)(v251 + 16 * v116 + 152) + 4 * *(unsigned int *)(v247 + 12 * v115 + 8));
          if (!v116)
          {
            int v128 = 0;
            if (!v112) {
              goto LABEL_150;
            }
            goto LABEL_146;
          }
        }
        uint64_t v127 = 0;
        int v128 = 0;
        do
        {
          int v129 = &v126[4 * v127];
          unsigned int v130 = *((unsigned __int16 *)v129 + 1);
          if (v112)
          {
            uint64_t v131 = v112;
            uint64_t v132 = &v265;
            while (v132->i32[0] != v130)
            {
              uint64_t v132 = (float32x4_t *)((char *)v132 + 4);
              if (!--v131) {
                goto LABEL_142;
              }
            }
            v132->i32[0] = v265.i32[--v112];
            Region::updateObject(*(void *)(v101 + 56 * v130 + 32), (long long *)v259, *(unsigned __int16 *)v129);
            *(_DWORD *)&__src[4 * v128++] = *(_DWORD *)v129;
          }
          else
          {
LABEL_142:
            Region::removeObject(*(Region **)(v101 + 56 * *((unsigned __int16 *)v129 + 1) + 32), *(unsigned __int16 *)v129);
          }
          ++v127;
        }
        while (v127 != v116);
        if (!v112)
        {
LABEL_150:
          uint64_t v6 = v238;
          goto LABEL_151;
        }
LABEL_146:
        uint64_t v133 = v112;
        unsigned int v134 = (unsigned int *)&v265;
        uint64_t v6 = v238;
        do
        {
          unsigned int v135 = *v134++;
          __int16 v136 = Region::addObject(*(void *)(v101 + 56 * v135 + 32), (long long *)v259, v99, v99 & 1);
          unsigned int v137 = &__src[4 * v128];
          *unsigned int v137 = v136;
          v137[1] = v135;
          ++v128;
          --v133;
        }
        while (v133);
LABEL_151:
        unsigned int v138 = (int *)(v247 + 12 * v257);
        if (v128 == v243)
        {
          uint64_t v84 = v230;
          unint64_t v139 = v99 >> 7;
          if (!v243)
          {
            *uint64_t v228 = 0;
            int v143 = 1 << (v99 >> 2);
            int v142 = v234;
            goto LABEL_161;
          }
          memcpy(v126, __src, 4 * v243);
        }
        else
        {
          uint64_t v84 = v230;
          unint64_t v139 = v99 >> 7;
          if (v243 >= 2)
          {
            uint64_t v140 = *v226;
            uint64_t v141 = v251 + 4 * v243;
            *(_DWORD *)(*(void *)(v251 + 16 * v243 + 152) + 4 * v140) = *(_DWORD *)(v141 + 4264);
            *(_DWORD *)(v141 + 4264) = v140;
          }
          MBP::storeHandles((char *)v251, (uint64_t)v138, v128, __src);
        }
        int v143 = 1 << (v99 >> 2);
        int v142 = v234;
        *uint64_t v228 = v128;
        if (v243 && !v128)
        {
          *BOOL v226 = v99;
          uint64_t v144 = v251;
          MBP::addToOutOfBoundsArray(v251, *v138);
          goto LABEL_165;
        }
LABEL_161:
        BOOL v145 = v128 == 0;
        uint64_t v144 = v251;
        if (!v145 && (v224 & 1) != 0)
        {
          uint64_t v146 = (uint64_t *)(v251 + 5312);
          if (v139 >= *(_DWORD *)(v251 + 5320)) {
            BitArray::resize((BitArray *)(v251 + 5312), v257);
          }
          uint64_t v147 = *v146;
          int v148 = *(_DWORD *)(*v146 + 4 * v139) & ~v143;
          goto LABEL_168;
        }
LABEL_165:
        int v149 = (uint64_t *)(v144 + 5312);
        if (v139 >= *(_DWORD *)(v144 + 5320)) {
          BitArray::resize((BitArray *)(v144 + 5312), v257);
        }
        uint64_t v147 = *v149;
        int v148 = *(_DWORD *)(*v149 + 4 * v139) | v143;
LABEL_168:
        *(_DWORD *)(v147 + 4 * v139) = v148;
LABEL_169:
        int v85 = v142 - 1;
      }
      while (v85);
    }
  }
  unint64_t v150 = *(unsigned int **)(v6 + 136);
  uint64_t v151 = *v150;
  if (!v151) {
    return;
  }
  uint64_t v152 = 0;
  uint64_t v153 = *((void *)v150 + 2);
  uint64_t v239 = *v150;
  uint64_t v244 = v153;
  do
  {
    uint64_t v154 = *(void *)(v153 + 56 * v152 + 32);
    if (!v154) {
      goto LABEL_278;
    }
    unsigned int v155 = *(_DWORD *)(v154 + 192);
    if (v155)
    {
      if (!*(unsigned char *)(v154 + 280))
      {
        int v156 = *(_DWORD *)(v154 + 196);
        goto LABEL_228;
      }
    }
    else if (!*(unsigned char *)(v154 + 280))
    {
      goto LABEL_278;
    }
    *(unsigned char *)(v154 + 280) = 0;
    uint64_t v157 = *(unsigned int *)(v154 + 140);
    if (!v157)
    {
      if (*(void *)(v154 + 200)) {
        (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
      *(void *)(v154 + 200) = 0;
      *(_DWORD *)(v154 + 208) = 0;
      goto LABEL_227;
    }
    if ((16 * v157) > 0x2000) {
      uint64_t v158 = (float32x4_t *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))();
    }
    else {
      uint64_t v158 = &v265;
    }
    uint64_t v159 = 0;
    uint64_t v160 = 0;
    unsigned int v161 = 0;
    unsigned int v162 = 0;
    BOOL v163 = &v158->u32[v157];
    unsigned int v164 = (char *)v158 + 12 * v157;
    int v165 = (char *)v158 + 8 * v157;
    do
    {
      if (v160 >> 5 >= *(_DWORD *)(v154 + 208))
      {
        uint64_t v166 = *(void *)(v154 + 152);
      }
      else
      {
        uint64_t v166 = *(void *)(v154 + 152);
        if ((*(_DWORD *)(*(void *)(v154 + 200) + 4 * (v160 >> 5)) >> v160))
        {
          v158->i32[v162] = *(_DWORD *)(v166 + v159);
          *(_DWORD *)&v165[4 * v162++] = v160;
          goto LABEL_194;
        }
      }
      v163[v161] = *(_DWORD *)(v166 + v159);
      *(_DWORD *)&v164[4 * v161++] = v160;
LABEL_194:
      ++v160;
      v159 += 24;
    }
    while (v157 != v160);
    uint64_t v258 = v152;
    uint64_t v263 = 0;
    *(_OWORD *)&__src[16] = 0u;
    long long v262 = 0u;
    char v264 = 1;
    *(_DWORD *)&__src[8] = 0x80000000;
    unsigned int v252 = v158;
    *(void *)__src = &unk_26E728438;
    if (v162 >= 0x400) {
      uint64_t v167 = __src;
    }
    else {
      uint64_t v167 = (unsigned char *)(v154 + 216);
    }
    if (v162 >= 0x400) {
      int32x2_t v168 = (unsigned int **)&__src[16];
    }
    else {
      int32x2_t v168 = (unsigned int **)(v154 + 232);
    }
    physx::Cm::RadixSortBuffered::Sort((uint64_t)v167);
    uint64_t v169 = *v168;
    uint64_t v170 = *(unsigned int *)(v154 + 136);
    if (v170)
    {
      uint64_t v171 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v170, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 791);
      uint64_t v172 = 24 * (*(_DWORD *)(v154 + 136) + 2);
    }
    else
    {
      uint64_t v171 = 0;
      uint64_t v172 = 48;
    }
    uint64_t v173 = physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::allocate(v172, 793);
    unsigned int v174 = -1;
    *(_DWORD *)(v173 + 24 * v157) = -1;
    *(_DWORD *)(v173 + 24 * (v157 + 1)) = -1;
    if (v162)
    {
      uint64_t v175 = (float32x4_t *)v252;
      unsigned int v174 = *((_DWORD *)v252 + *v169);
      if (v161) {
        goto LABEL_206;
      }
LABEL_208:
      unsigned int v176 = -1;
    }
    else
    {
      uint64_t v175 = (float32x4_t *)v252;
      if (!v161) {
        goto LABEL_208;
      }
LABEL_206:
      unsigned int v176 = *v163;
    }
    uint64_t v177 = 0;
    unsigned int v178 = 0;
    unsigned int v179 = 0;
    uint64_t v180 = v173;
    uint64_t v181 = v173;
    do
    {
      if (v174 >= v176)
      {
        uint64_t v182 = *(unsigned int *)&v164[4 * v179++];
        if (v179 >= v161) {
          unsigned int v176 = -1;
        }
        else {
          unsigned int v176 = v163[v179];
        }
      }
      else
      {
        uint64_t v182 = *(unsigned int *)&v165[4 * v169[v178++]];
        if (v178 >= v162) {
          unsigned int v174 = -1;
        }
        else {
          unsigned int v174 = v175->u32[v169[v178]];
        }
      }
      uint64_t v183 = *(unsigned __int16 *)(*(void *)(v154 + 168) + 2 * v182);
      uint64_t v184 = *(void *)(v154 + 152) + 24 * v182;
      long long v185 = *(_OWORD *)v184;
      *(void *)(v181 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v184 + 16);
      *(_OWORD *)uint64_t v181 = v185;
      v181 += 24;
      *(_WORD *)(v171 + 2 * v177) = v183;
      *(_DWORD *)(*(void *)(v154 + 128) + 8 * v183) = v177++;
    }
    while (v157 != v177);
    if (v175 != &v265) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    uint64_t v151 = v239;
    uint64_t v153 = v244;
    uint64_t v152 = v258;
    if (*(void *)(v154 + 152)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(v154 + 152) = v180;
    if (*(void *)(v154 + 168)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(v154 + 168) = v171;
    if (*(void *)(v154 + 200)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(v154 + 200) = 0;
    *(_DWORD *)(v154 + 208) = 0;
    *(void *)__src = &unk_26E728438;
    physx::Cm::RadixSortBuffered::reset((uint64_t)__src);
LABEL_227:
    int v156 = 0;
    unsigned int v155 = *(_DWORD *)(v154 + 148);
    *(unsigned char *)(v154 + 281) = 1;
LABEL_228:
    *(_DWORD *)(v154 + 192) = 0;
    if (v156 != v155) {
      *(unsigned char *)(v154 + 281) = 1;
    }
    LODWORD(v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v154 + 148);
    if (!v186) {
      goto LABEL_242;
    }
    uint64_t v187 = *(void *)(v154 + 160);
    uint64_t v188 = *(void *)(v154 + 184);
    if (v155)
    {
      uint64_t v189 = v155;
      unsigned int v190 = *(int **)(v154 + 160);
      int v191 = *(_DWORD **)(v154 + 184);
      do
      {
        int v192 = *v190;
        v190 += 6;
        *v191++ = v192;
        --v189;
      }
      while (v189);
    }
    uint64_t v193 = v186 - v155;
    int v194 = *(unsigned __int8 *)(v154 + 281);
    if (v186 != v155 && *(unsigned char *)(v154 + 281))
    {
      unsigned int v195 = v155;
      uint64_t v196 = v186 - v155;
      do
      {
        *(_DWORD *)(v188 + 4 * v195) = *(_DWORD *)(v187 + 24 * v195);
        ++v195;
        --v196;
      }
      while (v196);
    }
    *(_DWORD *)(v154 + 192) = v155;
    if (!v155)
    {
      LOBYTE(v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
LABEL_242:
      *(unsigned char *)(v154 + 48) = 0;
      *(_DWORD *)(v154 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(unsigned char *)(v154 + 281) = 1;
      goto LABEL_277;
    }
    *(_DWORD *)(v154 + 19re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v155;
    if (v186 == v155)
    {
      uint64_t v197 = 0;
      uint64_t v198 = 0;
      *(unsigned char *)(v154 + 281) = 1;
    }
    else if (v194)
    {
      physx::Cm::RadixSortBuffered::Sort(v154 + 216);
      uint64_t v199 = *(void *)(v154 + 232);
      uint64_t v197 = *(void *)(v154 + 13096);
      if (*(_DWORD *)(v154 + 13088) < v193)
      {
        if (v197 != v154 + 12576 && v197)
        {
          (*(void (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(void *)(v154 + 13096));
          *(void *)(v154 + 1309re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        }
        uint64_t v200 = *(void *)(v154 + 13104);
        if (v200 != v154 + 288 && v200)
        {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
          *(void *)(v154 + 13104) = 0;
        }
        if ((v193 + 2) > 0x100)
        {
          *(void *)(v154 + 13104) = physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::allocate(24 * (v193 + 2), 1260);
          uint64_t v197 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v193, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 1261);
        }
        else
        {
          *(void *)(v154 + 13104) = v154 + 288;
          uint64_t v197 = v154 + 12576;
        }
        *(void *)(v154 + 1309re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v197;
        *(_DWORD *)(v154 + 13088) = v193;
      }
      uint64_t v201 = 0;
      uint64_t v198 = *(void *)(v154 + 13104);
      uint64_t v202 = v198;
      do
      {
        unsigned int v203 = *(_DWORD *)(v199 + 4 * v201) + v155;
        unint64_t v204 = (long long *)(v187 + 24 * v203);
        long long v205 = *v204;
        *(void *)(v202 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)v204 + 2);
        *(_OWORD *)uint64_t v202 = v205;
        v202 += 24;
        *(_WORD *)(v197 + 2 * v201++) = *(_WORD *)(*(void *)(v154 + 176) + 2 * v203);
      }
      while (v193 != v201);
      *(_DWORD *)(v198 + 24 * v193) = -1;
      *(_DWORD *)(v198 + 24 * (v193 + 1)) = -1;
      *(unsigned char *)(v154 + 281) = 0;
    }
    else
    {
      uint64_t v198 = *(void *)(v154 + 13104);
      uint64_t v197 = *(void *)(v154 + 13096);
    }
    physx::Cm::RadixSortBuffered::Sort(v154 + 216);
    uint64_t v206 = *(void *)(v154 + 232);
    uint64_t v207 = *(void *)(v154 + 13112);
    if (*(_DWORD *)(v154 + 13092) < v155)
    {
      uint64_t v208 = v154 + 6432;
      if (v207 != v154 + 6432 && v207)
      {
        (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        *(void *)(v154 + 131re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
      }
      if (v155 + 2 >= 0x101) {
        uint64_t v208 = physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::allocate(24 * (v155 + 2), 1277);
      }
      *(void *)(v154 + 131re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v208;
      *(_DWORD *)(v154 + 13092) = v155;
      uint64_t v207 = v208;
    }
    uint64_t v209 = 0;
    uint64_t v186 = *(void *)(v154 + 240);
    if (v155 <= 1) {
      uint64_t v210 = 1;
    }
    else {
      uint64_t v210 = v155;
    }
    uint64_t v211 = v207;
    do
    {
      uint64_t v212 = *(unsigned int *)(v206 + 4 * v209);
      uint64_t v213 = (long long *)(v187 + 24 * v212);
      long long v214 = *v213;
      *(void *)(v211 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)v213 + 2);
      *(_OWORD *)uint64_t v211 = v214;
      v211 += 24;
      *(_WORD *)(v186 + 2 * v209++) = *(_WORD *)(*(void *)(v154 + 176) + 2 * v212);
    }
    while (v210 != v209);
    *(_DWORD *)(v207 + 24 * v155) = -1;
    *(_DWORD *)(v207 + 24 * (v155 + 1)) = -1;
    uint64_t v215 = *(void *)(v154 + 128);
    *(void *)uint64_t v154 = v215;
    *(void *)(v154 + 8) = v207;
    *(void *)(v154 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v198;
    *(void *)(v154 + 24) = v186;
    *(void *)(v154 + 32) = v197;
    *(_DWORD *)(v154 + 40) = v155;
    *(_DWORD *)(v154 + 44) = v193;
    *(unsigned char *)(v154 + 48) = 1;
    LODWORD(v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v154 + 192);
    if (v186)
    {
      int v216 = *(_DWORD *)(v154 + 140);
      uint64_t v153 = v244;
      if (v216)
      {
        uint64_t v217 = *(void *)(v154 + 13112);
        *(void *)(v154 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v215;
        *(_DWORD *)(v154 + 64) = v186;
        *(_DWORD *)(v154 + 68) = v216;
        uint64_t v186 = *(void *)(v154 + 152);
        *(void *)(v154 + 72) = v217;
        *(void *)(v154 + 80) = v186;
        uint64_t v218 = *(void *)(v154 + 240);
        LOBYTE(v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
        *(void *)(v154 + 88) = *(void *)(v154 + 168);
        *(void *)(v154 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v218;
      }
      else
      {
        LOBYTE(v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      }
    }
    else
    {
      uint64_t v153 = v244;
    }
LABEL_277:
    *(unsigned char *)(v154 + 104) = v186;
LABEL_278:
    ++v152;
  }
  while (v152 != v151);
}

void physx::Bp::BroadPhaseMBP::postUpdate(physx::Bp::BroadPhaseMBP *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 17);
  uint64_t v3 = *v2;
  if (v3)
  {
    uint64_t v4 = *((void *)v2 + 2) + 32;
    do
    {
      if (*(void *)v4) {
        *(_DWORD *)(*(void *)v4 + 192) = 0;
      }
      v4 += 56;
      --v3;
    }
    while (v3);
  }
  unsigned int v5 = v2[14];
  if (v5)
  {
    unsigned int v6 = 0;
    uint64_t v7 = *((void *)v2 + 4);
    uint64_t v26 = (char *)this + 176;
    uint64_t v27 = (char *)this + 160;
    do
    {
      unsigned int v8 = (unsigned int *)(*((void *)v2 + 10) + 8 * v6);
      unint64_t v9 = *v8;
      unint64_t v10 = v8[1];
      if ((v9 & 0x80000000) != 0)
      {
        unsigned int v18 = *(_DWORD *)(v7 + 12 * ((v9 >> 2) & 0x1FFFFFFF));
        unsigned int v19 = *(_DWORD *)(v7 + 12 * ((v10 >> 2) & 0x1FFFFFFF));
        if (v18 >= v19) {
          unsigned int v20 = *(_DWORD *)(v7 + 12 * ((v10 >> 2) & 0x1FFFFFFF));
        }
        else {
          unsigned int v20 = *(_DWORD *)(v7 + 12 * ((v9 >> 2) & 0x1FFFFFFF));
        }
        if (v18 <= v19) {
          unsigned int v18 = *(_DWORD *)(v7 + 12 * ((v10 >> 2) & 0x1FFFFFFF));
        }
        unint64_t v28 = __PAIR64__(v18, v20);
        uint64_t v21 = *((unsigned int *)this + 42);
        if ((*((_DWORD *)this + 43) & 0x7FFFFFFFu) <= v21)
        {
          physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack((uint64_t)v27, &v28);
        }
        else
        {
          *(void *)(*((void *)this + 20) + 8 * v21) = v28;
          ++*((_DWORD *)this + 42);
        }
        *(void *)v8 &= 0x7FFFFFFF7FFFFFFFuLL;
      }
      else if ((v10 & 0x80000000) != 0)
      {
        v8[1] = v10 & 0x7FFFFFFF;
      }
      else
      {
        unint64_t v11 = v9 >> 7;
        unsigned int v12 = v2[32];
        if (*v8 >> 7 < v12 && ((*(_DWORD *)(*((void *)v2 + 15) + 4 * v11) >> (v9 >> 2)) & 1) != 0
          || v8[1] >> 7 < v12
          && ((*(_DWORD *)(*((void *)v2 + 15) + 4 * (v10 >> 7)) >> (v10 >> 2)) & 1) != 0)
        {
          unsigned int v13 = v2[36];
          if ((v11 >= v13
             || ((*(_DWORD *)(*((void *)v2 + 17) + 4 * v11) >> (v9 >> 2)) & 1) == 0)
            && (v8[1] >> 7 >= v13
             || ((*(_DWORD *)(*((void *)v2 + 17) + 4 * (v10 >> 7)) >> (v10 >> 2)) & 1) == 0))
          {
            unsigned int v14 = *(_DWORD *)(v7 + 12 * (*v8 >> 2));
            unsigned int v15 = *(_DWORD *)(v7 + 12 * (v8[1] >> 2));
            if (v14 >= v15) {
              unsigned int v16 = *(_DWORD *)(v7 + 12 * (v8[1] >> 2));
            }
            else {
              unsigned int v16 = *(_DWORD *)(v7 + 12 * (*v8 >> 2));
            }
            if (v14 <= v15) {
              unsigned int v14 = *(_DWORD *)(v7 + 12 * (v8[1] >> 2));
            }
            unint64_t v28 = __PAIR64__(v14, v16);
            uint64_t v17 = *((unsigned int *)this + 46);
            if ((*((_DWORD *)this + 47) & 0x7FFFFFFFu) <= v17)
            {
              physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack((uint64_t)v26, &v28);
            }
            else
            {
              *(void *)(*((void *)this + 22) + 8 * v17) = v28;
              ++*((_DWORD *)this + 46);
            }
          }
          unsigned int v22 = ((unsigned __int16)v9 | ((unsigned __int16)v10 << 16))
              + ~(((unsigned __int16)v9 | ((unsigned __int16)v10 << 16)) << 15);
          unsigned int v23 = (9 * (v22 ^ (v22 >> 10))) ^ ((9 * (v22 ^ (v22 >> 10))) >> 6);
          physx::Bp::PairManagerData::removePair((uint64_t)(v2 + 12), v9, v10, v2[13] & ((v23 + ~(v23 << 11)) ^ ((v23 + ~(v23 << 11)) >> 16)), v6);
          --v5;
          continue;
        }
      }
      ++v6;
    }
    while (v6 < v5);
  }
  physx::Bp::PairManagerData::shrinkMemory(v2 + 12);
  uint64_t v24 = (void *)*((void *)v2 + 15);
  size_t v25 = 4 * v2[32];
  bzero(v24, v25);
}

void physx::Bp::BroadPhaseMBP::singleThreadedUpdate(uint64_t a1)
{
  physx::Bp::BroadPhaseMBP::setUpdateData(a1);
  MBP::findOverlaps(*(void **)(a1 + 136), *(void *)(a1 + 192), *(void *)(a1 + 200));
  physx::Bp::BroadPhaseMBP::postUpdate((physx::Bp::BroadPhaseMBP *)a1);
}

void *physx::MBPUpdateWorkTask::runInternal(physx::MBPUpdateWorkTask *this)
{
  return MBP::findOverlaps(*(void **)(*((void *)this + 5) + 136), *(void *)(*((void *)this + 5) + 192), *(void *)(*((void *)this + 5) + 200));
}

void physx::MBPPostUpdateWorkTask::runInternal(physx::Bp::BroadPhaseMBP **this)
{
}

uint64_t physx::Bp::BroadPhaseMBP::getNbCreatedPairs(physx::Bp::BroadPhaseMBP *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t physx::Bp::BroadPhaseMBP::getCreatedPairs(physx::Bp::BroadPhaseMBP *this)
{
  return *((void *)this + 20);
}

uint64_t physx::Bp::BroadPhaseMBP::getNbDeletedPairs(physx::Bp::BroadPhaseMBP *this)
{
  return *((unsigned int *)this + 46);
}

uint64_t physx::Bp::BroadPhaseMBP::getDeletedPairs(physx::Bp::BroadPhaseMBP *this)
{
  return *((void *)this + 22);
}

uint64_t physx::Bp::BroadPhaseMBP::getNbOutOfBoundsObjects(physx::Bp::BroadPhaseMBP *this)
{
  return *(unsigned int *)(*((void *)this + 17) + 5304);
}

uint64_t physx::Bp::BroadPhaseMBP::getOutOfBoundsObjects(physx::Bp::BroadPhaseMBP *this)
{
  return *(void *)(*((void *)this + 17) + 5296);
}

uint64_t physx::Bp::BroadPhaseMBP::freeBuffers(physx::Bp::BroadPhaseMBP *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (*(void *)(v2 + 136)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)(v2 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 5304) = 0;
  freeBuffer((uint64_t)this + 160);
  return freeBuffer((uint64_t)this + 176);
}

uint64_t freeBuffer(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 8) < 0x401u)
  {
    *(_DWORD *)(result + 8) = 0;
  }
  else
  {
    unint64_t v2 = 0xC0000000C0000000;
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::resize(result, 0, &v2);
    uint64_t result = physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate(v1, *(_DWORD *)(v1 + 8));
    if ((*(_DWORD *)(v1 + 12) & 0x7FFFFC00) == 0) {
      return physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate(v1, 0x400u);
    }
  }
  return result;
}

uint64_t physx::Bp::BroadPhaseMBP::shiftOrigin(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int **)(result + 136);
  uint64_t v5 = *v4;
  uint64_t v6 = *((void *)v4 + 2);
  if (v5)
  {
    float32x2_t v7 = *(float32x2_t *)(a2 + 4);
    *(int32x2_t *)v8.f32 = vzip1_s32(*(int32x2_t *)a2, (int32x2_t)v7);
    v8.i32[2] = vdup_lane_s32((int32x2_t)v7, 1).u32[0];
    v8.i32[3] = v8.i32[0];
    uint64_t v9 = v6 + 20;
    do
    {
      if (*(void *)(v9 + 12))
      {
        int32x4_t v10 = vaddq_s32(*(int32x4_t *)(v9 - 16), *(int32x4_t *)(v9 - 16));
        int32x4_t v11 = (int32x4_t)vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v10), (int8x16_t)(*(_OWORD *)&v10 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vmvnq_s8((int8x16_t)v10)), v8);
        *(uint32x4_t *)(v9 - 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = vshrq_n_u32((uint32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v11), vmvnq_s8((int8x16_t)v11), (int8x16_t)(*(_OWORD *)&v11 | __PAIR128__(0x8000000080000000, 0x8000000080000000))), 1uLL);
        *(int32x2_t *)v11.i8 = vadd_s32(*(int32x2_t *)v9, *(int32x2_t *)v9);
        *(float32x2_t *)v11.i8 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v11.i8), (int8x8_t)(v11.i64[0] & 0x7FFFFFFF7FFFFFFFLL), vmvn_s8(*(int8x8_t *)v11.i8)), v7);
        *(uint32x2_t *)uint64_t v9 = vshr_n_u32((uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v11.i8), vmvn_s8(*(int8x8_t *)v11.i8), (int8x8_t)(v11.i64[0] | 0x8000000080000000)), 1uLL);
      }
      v9 += 56;
      --v5;
    }
    while (v5);
  }
  uint64_t v12 = v4[10];
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *((void *)v4 + 4);
    do
    {
      uint64_t result = *(unsigned __int16 *)(v14 + 12 * v13 + 4);
      if (*(_WORD *)(v14 + 12 * v13 + 4))
      {
        unsigned int v15 = (unsigned int *)(v14 + 12 * v13);
        unsigned int v18 = *v15;
        unsigned int v16 = v15 + 2;
        uint64_t v17 = v18;
        if (result == 1) {
          uint64_t result = 1;
        }
        else {
          unsigned int v16 = (unsigned int *)(*(void *)&v4[4 * result + 38] + 4 * *v16);
        }
        uint64_t v19 = a3 + 24 * v17;
        unsigned int v20 = (const float *)(a4 + 4 * v17);
        float32x4_t v21 = vld1q_dup_f32(v20);
        int32x4_t v22 = (int32x4_t)vsubq_f32(*(float32x4_t *)v19, v21);
        v22.i32[3] = vaddq_f32(*(float32x4_t *)v19, v21).i32[3];
        uint32x4_t v23 = vshrq_n_u32((uint32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v22), vmvnq_s8((int8x16_t)v22), (int8x16_t)(*(_OWORD *)&v22 | __PAIR128__(0x8000000080000000, 0x8000000080000000))), 1uLL);
        *(float32x2_t *)v21.f32 = vadd_f32(*(float32x2_t *)(v19 + 16), *(float32x2_t *)v21.f32);
        uint32x2_t v24 = vshr_n_u32((uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v21.f32), vmvn_s8(*(int8x8_t *)v21.f32), (int8x8_t)(v21.i64[0] | 0x8000000080000000)), 1uLL);
        size_t v25 = (unsigned __int16 *)v16 + 1;
        do
        {
          uint64_t v26 = *(void *)(v6 + 56 * *v25 + 32);
          if (*(_DWORD *)(*(void *)(v26 + 128) + 8 * *(v25 - 1) + 4)) {
            uint64_t v27 = 152;
          }
          else {
            uint64_t v27 = 160;
          }
          uint64_t v28 = *(void *)(v26 + v27) + 24 * *(unsigned int *)(*(void *)(v26 + 128) + 8 * *(v25 - 1));
          *(uint32x4_t *)uint64_t v28 = v23;
          *(uint32x2_t *)(v28 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v24;
          v25 += 2;
          --result;
        }
        while (result);
      }
      ++v13;
    }
    while (v13 != v12);
  }
  return result;
}

physx::Bp::BroadPhaseSap *physx::Bp::BroadPhaseSap::BroadPhaseSap(physx::Bp::BroadPhaseSap *this, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7 = 0;
  *(void *)this = &unk_26E723680;
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((_DWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 2) = &unk_26E723E38;
  *((void *)this + 3) = a5;
  *((void *)this + 11) = 0;
  *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *((_DWORD *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 9) = &unk_26E723E90;
  *((void *)this + 10) = a5;
  float32x4_t v8 = (void *)((char *)this + 360);
  uint64_t v9 = (uint64_t *)((char *)this + 392);
  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 45) = 0;
  *((_DWORD *)this + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((_DWORD *)this + 104) = 0;
  __n128 v10 = 0uLL;
  *((void *)this + 51) = 0;
  do
  {
    int32x4_t v11 = (char *)this + v7;
    *((void *)v11 + 60) = 0;
    *((void *)v11 + 61) = 0;
    *((_DWORD *)v11 + 124) = 0;
    *((void *)v11 + re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58) = &unk_26E723890;
    *((void *)v11 + 59) = 0;
    *((void *)v11 + 63) = 0;
    *((_DWORD *)v11 + 128) = -1;
    *(_OWORD *)((char *)this + v7 + 520) = 0uLL;
    v7 += 72;
  }
  while (v7 != 216);
  *((void *)this + 85) = a5;
  for (uint64_t i = 472; i != 688; i += 72)
    *(void *)((char *)this + i) = a5;
  *((void *)this + 41) = 0;
  unsigned int v13 = (a3 + a4 + 31) & 0xFFFFFFE0;
  *((_DWORD *)this + 52) = v13;
  uint64_t v14 = 8 * v13;
  if (!v14)
  {
    *((void *)this + 27) = 0;
    unsigned int v15 = (uint64_t *)((char *)this + 216);
    goto LABEL_10;
  }
  *((void *)this + 27) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v14, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 69);
  unsigned int v15 = (uint64_t *)((char *)this + 216);
  unsigned int v13 = *((_DWORD *)this + 52);
  int v16 = 8 * v13 + 15;
  if ((v16 & 0xFFFFFFF0) == 0)
  {
LABEL_10:
    uint64_t v19 = 0;
    *((void *)this + 28) = 0;
    uint64_t v17 = (uint64_t *)((char *)this + 224);
    goto LABEL_11;
  }
  *((void *)this + 28) = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v16 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 70);
  uint64_t v17 = (uint64_t *)((char *)this + 224);
  unsigned int v13 = *((_DWORD *)this + 52);
  int v18 = 8 * v13 + 15;
  if ((v18 & 0xFFFFFFF0) != 0)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v18 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 71);
    unsigned int v13 = *((_DWORD *)this + 52);
  }
  else
  {
    uint64_t v19 = 0;
  }
LABEL_11:
  *((void *)this + 29) = v19;
  if (!v13)
  {
    size_t v25 = (unsigned int *)((char *)this + 336);
    *((_DWORD *)this + 84) = 2;
    *((void *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    unsigned int v27 = 16;
LABEL_19:
    uint64_t v28 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v27, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 86);
    int v24 = *v25;
    goto LABEL_21;
  }
  unint64_t v20 = 0;
  uint64_t v21 = *v15;
  uint64_t v22 = *v17;
  v10.n128_u64[0] = 0xC0000000C0000000;
  do
  {
    *(void *)(v21 + 8 * v20) = 0xC0000000C0000000;
    *(void *)(v22 + 8 * v20) = 0xC0000000C0000000;
    *(void *)(v19 + 8 * v20++) = 0xC0000000C0000000;
    unint64_t v23 = *((unsigned int *)this + 52);
  }
  while (v20 < v23);
  int v24 = 2 * v23 + 2;
  size_t v25 = (unsigned int *)((char *)this + 336);
  *((_DWORD *)this + 84) = v24;
  if (((v23 + 15) & 0xFFFFFFF0) != 0)
  {
    uint64_t v26 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, (v23 + 15) & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 85, v10);
    int v24 = *v25;
  }
  else
  {
    uint64_t v26 = 0;
  }
  *((void *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v26;
  unsigned int v27 = (4 * v24 + 15) & 0xFFFFFFF0;
  if (v27) {
    goto LABEL_19;
  }
  uint64_t v28 = 0;
LABEL_21:
  *((void *)this + 37) = v28;
  int v29 = 8 * v24 + 15;
  if ((v29 & 0xFFFFFFF0) != 0)
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v29 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 87);
    int v24 = *v25;
  }
  else
  {
    uint64_t v30 = 0;
  }
  *((void *)this + 38) = v30;
  int v31 = 4 * v24 + 15;
  if ((v31 & 0xFFFFFFF0) == 0)
  {
    *((void *)this + 30) = 0;
    goto LABEL_31;
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, v31 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 89);
  int v33 = 4 * *((_DWORD *)this + 84) + 15;
  *((void *)this + 30) = v32;
  if ((v33 & 0xFFFFFFF0) == 0)
  {
LABEL_31:
    *((void *)this + 31) = 0;
    goto LABEL_32;
  }
  uint64_t v34 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, v33 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 90);
  int v35 = 4 * *((_DWORD *)this + 84) + 15;
  *((void *)this + 31) = v34;
  if ((v35 & 0xFFFFFFF0) == 0)
  {
LABEL_32:
    *((void *)this + 32) = 0;
    goto LABEL_33;
  }
  uint64_t v36 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, v35 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 91);
  int v37 = 4 * *((_DWORD *)this + 84) + 15;
  *((void *)this + 32) = v36;
  if ((v37 & 0xFFFFFFF0) != 0)
  {
    uint64_t v38 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v37 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 92);
    int v39 = 4 * *((_DWORD *)this + 84) + 15;
    *((void *)this + 33) = v38;
    if ((v39 & 0xFFFFFFF0) != 0)
    {
      uint64_t v40 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, v39 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 93);
      unsigned int v41 = (4 * *v25 + 15) & 0xFFFFFFF0;
    }
    else
    {
      unsigned int v41 = 0;
      uint64_t v40 = 0;
    }
    goto LABEL_34;
  }
LABEL_33:
  unsigned int v41 = 0;
  uint64_t v40 = 0;
  *((void *)this + 33) = 0;
LABEL_34:
  *((void *)this + 34) = v40;
  unsigned int v42 = (_DWORD *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v41, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 94);
  unsigned int v43 = (_DWORD *)*((void *)this + 30);
  int v47 = (_DWORD *)*((void *)this + 31);
  *unsigned int v43 = 0;
  unsigned int v45 = (_DWORD *)*((void *)this + 32);
  uint64_t v44 = (_DWORD *)*((void *)this + 33);
  *uint64_t v44 = 1073741822;
  v43[1] = -1;
  v44[1] = 0x3FFFFFFF;
  unsigned int v46 = (_DWORD *)*((void *)this + 34);
  *int v47 = 0;
  *unsigned int v46 = 1073741822;
  v47[1] = -1;
  *((void *)this + 35) = v42;
  v46[1] = 0x3FFFFFFF;
  *unsigned int v45 = 0;
  *unsigned int v42 = 1073741822;
  v45[1] = -1;
  v42[1] = 0x3FFFFFFF;
  LODWORD(v47) = *((_DWORD *)this + 84);
  int v48 = 4 * v47 + 15;
  if ((v48 & 0xFFFFFFF0) != 0)
  {
    uint64_t v49 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v48 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 104);
    LODWORD(v47) = *((_DWORD *)this + 84);
    int v50 = 4 * v47 + 15;
    *((void *)this + 39) = v49;
    if ((v50 & 0xFFFFFFF0) != 0)
    {
      BOOL v51 = (_DWORD *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v50 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 105);
      LODWORD(v47) = *((_DWORD *)this + 84);
      uint64_t v49 = *((void *)this + 39);
    }
    else
    {
      BOOL v51 = 0;
    }
  }
  else
  {
    uint64_t v49 = 0;
    BOOL v51 = 0;
    *((void *)this + 39) = 0;
  }
  *((void *)this + 40) = v51;
  if (v47 >= 2)
  {
    uint64_t v52 = 0;
    do
    {
      *(_DWORD *)(v49 + 4 * v52) = v52 + 1;
      v51[v52 + 1] = v52;
      int v47 = (_DWORD *)*v25;
      unint64_t v53 = v52 + 2;
      ++v52;
    }
    while (v53 < (unint64_t)v47);
  }
  *(_DWORD *)(v49 + 4 * (v47 - 1)) = v47 - 1;
  _DWORD *v51 = 0;
  if (a2 <= 0x40) {
    int v54 = 64;
  }
  else {
    int v54 = a2;
  }
  *((_DWORD *)this + 85) = v54;
  int v55 = 4 * v54 + 15;
  uint64_t v56 = v55 & 0xFFFFFFF0;
  if ((v55 & 0xFFFFFFF0) != 0)
  {
    *float32x4_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v56, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 103);
    uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v56, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 104);
  }
  else
  {
    uint64_t v57 = 0;
    *float32x4_t v8 = 0;
  }
  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v57;
  int v58 = 8 * v54 + 15;
  if ((v58 & 0xFFFFFFF0) != 0) {
    uint64_t v59 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v58 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 105);
  else {
    uint64_t v59 = 0;
  }
  uint64_t *v9 = v59;
  if (((v54 + 15) & 0xFFFFFFF0) != 0) {
    uint64_t v60 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, (v54 + 15) & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 106);
  else {
    uint64_t v60 = 0;
  }
  *((void *)this + 50) = v60;
  *((_DWORD *)this + 95) = v54;
  *((_DWORD *)this + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v54;
  *((_DWORD *)this + 103) = v54;
  *((void *)this + 81) = this;
  *((_DWORD *)this + 164) = 2;
  *((void *)this + 72) = this;
  *((_DWORD *)this + 14re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  *((void *)this + 63) = this;
  *((_DWORD *)this + 128) = 0;
  *((void *)this + 83) = 0;
  *((_DWORD *)this + 169) = 0;
  *((void *)this + 74) = 0;
  *((_DWORD *)this + 151) = 0;
  *((void *)this + 65) = 0;
  *((_DWORD *)this + 133) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 114) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  return this;
}

void physx::Bp::BroadPhaseSap::~BroadPhaseSap(physx::Bp::BroadPhaseSap *this)
{
  *(void *)this = &unk_26E723680;
  if (*((void *)this + 27)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 28)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 29)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 30)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 31)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 32)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 33)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 34)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 35)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 39)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 40)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 37)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 38)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 36)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 45)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 46)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 49)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 50)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v2 = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 4re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((_DWORD *)this + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 49) = 0;
  *((_DWORD *)this + 104) = 0;
  *((void *)this + 65) = 0;
  *((_DWORD *)this + 133) = 0;
  *((void *)this + 74) = 0;
  *((_DWORD *)this + 151) = 0;
  *((void *)this + 83) = 0;
  *((_DWORD *)this + 169) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 55) = 0;
  do
  {
    uint64_t v3 = (char *)this + v2;
    *((void *)v3 + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = &unk_26E7231E8;
    *((void *)v3 + 78) = 0;
    v2 -= 72;
  }
  while (v2 != -216);
  *((void *)this + 9) = &unk_26E7231E8;
  *((void *)this + 11) = 0;
  *((void *)this + 2) = &unk_26E7231E8;
  *((void *)this + 4) = 0;
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Bp::BroadPhaseSap::~BroadPhaseSap(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void physx::Bp::BroadPhaseBatchUpdateWorkTask::~BroadPhaseBatchUpdateWorkTask(physx::Bp::BroadPhaseBatchUpdateWorkTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::Bp::BroadPhaseSap::destroy(physx::Bp::BroadPhaseSap *this)
{
  (**(void (***)(physx::Bp::BroadPhaseSap *))this)(this);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v1();
}

uint64_t physx::Bp::BroadPhaseSap::resizeBuffers(physx::Bp::BroadPhaseSap *this)
{
  int v2 = *((_DWORD *)this + 85);
  *((void *)this + 53) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_DWORD *)this + 109) = v2;
  *((_DWORD *)this + 108) = 0;
  *((void *)this + 55) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_DWORD *)this + 113) = v2;
  *((_DWORD *)this + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *((void *)this + 43) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 4 * v2, 1);
  *((_DWORD *)this + 89) = v2;
  *((_DWORD *)this + 88) = 0;
  *((void *)this + 65) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_DWORD *)this + 133) = v2;
  *((_DWORD *)this + 132) = 0;
  *((void *)this + 74) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_DWORD *)this + 151) = v2;
  *((_DWORD *)this + 150) = 0;
  uint64_t result = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((void *)this + 83) = result;
  *((_DWORD *)this + 169) = v2;
  *((_DWORD *)this + 168) = 0;
  return result;
}

uint64_t physx::PxcScratchAllocator::alloc(pthread_mutex_t **this, int a2, int a3)
{
  uint64_t v5 = (a2 + 15) & 0xFFFFFFF0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*this);
  }
  uint64_t v6 = this[1];
  uint64_t v7 = *((unsigned int *)this + 4);
  uint64_t v8 = *(&v6->__sig + (v7 - 1));
  if (v8 - (uint64_t)this[3] >= v5)
  {
    uint64_t v9 = v8 - v5;
    uint64_t v11 = v8 - v5;
    if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v7)
    {
      physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)(this + 1), &v11);
      uint64_t v9 = v11;
    }
    else
    {
      *(&v6->__sig + v7) = v9;
      *((_DWORD *)this + 4) = v7 + 1;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if (v5 && a3) {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcScratchAllocator.h", 99);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*this);
  }
  return v9;
}

const void **physx::Bp::BroadPhaseSap::freeBuffers(physx::Bp::BroadPhaseSap *this)
{
  int v2 = (void *)((char *)this + 424);
  unint64_t v3 = *((void *)this + 53);
  if (v3) {
    physx::PxcScratchAllocator::free(*((void *)this + 1), v3);
  }
  void *v2 = 0;
  v2[1] = 0;
  unint64_t v4 = *((void *)this + 55);
  if (v4) {
    physx::PxcScratchAllocator::free(*((void *)this + 1), v4);
  }
  *((void *)this + 55) = 0;
  *((void *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((_DWORD *)this + 114) = 0;
  unint64_t v5 = *((void *)this + 43);
  if (v5) {
    physx::PxcScratchAllocator::free(*((void *)this + 1), v5);
  }
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  unint64_t v6 = *((void *)this + 65);
  if (v6) {
    physx::PxcScratchAllocator::free(*((void *)this + 1), v6);
  }
  *((void *)this + 65) = 0;
  *((void *)this + 6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  unint64_t v7 = *((void *)this + 74);
  if (v7) {
    physx::PxcScratchAllocator::free(*((void *)this + 1), v7);
  }
  *((void *)this + 74) = 0;
  *((void *)this + 75) = 0;
  unint64_t v8 = *((void *)this + 83);
  if (v8) {
    physx::PxcScratchAllocator::free(*((void *)this + 1), v8);
  }
  *((void *)this + 83) = 0;
  *((void *)this + 84) = 0;
  return physx::Bp::SapPairManager::shrinkMemory((const void **)this + 45);
}

const void **physx::Bp::SapPairManager::shrinkMemory(const void **this)
{
  unsigned int v1 = *((_DWORD *)this + 12) | (*((_DWORD *)this + 12) >> 1);
  unsigned int v2 = v1 | (v1 >> 2) | ((v1 | (v1 >> 2)) >> 4);
  unsigned int v3 = (v2 | (v2 >> 8) | ((v2 | (v2 >> 8)) >> 16)) + 1;
  int v4 = *((_DWORD *)this + 4);
  if (v3 != v4)
  {
    unsigned int v5 = *((_DWORD *)this + 6);
    if (v3 >= v5 || v4 != v5)
    {
      if (v3 <= v5) {
        unsigned int v7 = *((_DWORD *)this + 6);
      }
      else {
        unsigned int v7 = v3;
      }
      *((_DWORD *)this + 4) = v7;
      *((_DWORD *)this + 14) = v7 - 1;
      char v8 = v5 < v3 || v7 <= *((_DWORD *)this + 5) >> 2 || v7 <= *((_DWORD *)this + 13) >> 2;
      return physx::Bp::SapPairManager::reallocPairs(this, v8);
    }
  }
  return this;
}

uint64_t physx::Bp::BroadPhaseSap::shiftOrigin(uint64_t result)
{
  if (*(_DWORD *)(result + 328))
  {
    uint64_t v1 = *(void *)(result + 240);
    uint64_t v2 = *(void *)(result + 248);
    uint64_t v3 = *(void *)(result + 272);
    uint64_t v4 = *(void *)(result + 280);
    uint64_t v6 = *(void *)(result + 256);
    uint64_t v5 = *(void *)(result + 264);
    int v7 = *(_DWORD *)(v1 + 4);
    int v8 = *(_DWORD *)(v5 + 4);
    int v9 = *(_DWORD *)(v2 + 4);
    int v10 = *(_DWORD *)(v3 + 4);
    int v11 = *(_DWORD *)(v6 + 4);
    int v12 = *(_DWORD *)(v4 + 4);
    unsigned __int32 v68 = &v65;
    if (v7 >= 0) {
      int v13 = ~v7;
    }
    else {
      int v13 = v7 & 0x7FFFFFFF;
    }
    int v67 = v13;
    int v14 = v9 & 0x7FFFFFFF;
    if (v9 >= 0) {
      int v14 = ~v9;
    }
    int v66 = v14;
    int v15 = v11 & 0x7FFFFFFF;
    if (v11 >= 0) {
      int v15 = ~v11;
    }
    int v65 = v15;
    if (v67 < 0) {
      unsigned int v16 = ~v67;
    }
    else {
      unsigned int v16 = v67 | 0x80000000;
    }
    unsigned int v17 = v16 & 0xFFFFFFF0;
    unsigned int v18 = v17 + 17;
    unsigned int v19 = (v17 - 15) & 0xFFFFFFF0;
    if (v8) {
      unsigned int v19 = v18;
    }
    *(_DWORD *)(v1 + 4) = v19;
    if (v66 < 0) {
      unsigned int v20 = ~v66;
    }
    else {
      unsigned int v20 = v66 | 0x80000000;
    }
    unsigned int v21 = v20 & 0xFFFFFFF0;
    unsigned int v22 = v21 + 17;
    unsigned int v23 = (v21 - 15) & 0xFFFFFFF0;
    if (v10) {
      unsigned int v23 = v22;
    }
    *(_DWORD *)(v2 + 4) = v23;
    if (v65 < 0) {
      unsigned int v24 = ~v65;
    }
    else {
      unsigned int v24 = v65 | 0x80000000;
    }
    unsigned int v25 = v24 & 0xFFFFFFF0;
    unsigned int v26 = v25 + 17;
    unsigned int v27 = (v25 - 15) & 0xFFFFFFF0;
    if (v12) {
      unsigned int v27 = v26;
    }
    *(_DWORD *)(v6 + 4) = v27;
    if ((*(_DWORD *)(result + 328) & 0x7FFFFFFF) != 0)
    {
      int v28 = *(_DWORD *)(v4 + 4) & 1;
      int v29 = *(_DWORD *)(v3 + 4) & 1;
      unsigned int v30 = *(_DWORD *)(v2 + 4);
      int v31 = *(_DWORD *)(v5 + 4) & 1;
      unsigned int v32 = *(_DWORD *)(v1 + 4);
      unint64_t v33 = 2;
      do
      {
        int v34 = *(_DWORD *)(v5 + 4 * v33);
        int v35 = *(_DWORD *)(v3 + 4 * v33);
        int v36 = *(_DWORD *)(v4 + 4 * v33);
        int v37 = *(_DWORD *)(v1 + 4 * v33);
        int v38 = *(_DWORD *)(v2 + 4 * v33);
        int v39 = *(_DWORD *)(v6 + 4 * v33);
        int v65 = 0;
        unsigned __int32 v68 = &v65;
        if (v37 >= 0) {
          int v40 = ~v37;
        }
        else {
          int v40 = v37 & 0x7FFFFFFF;
        }
        int v67 = v40;
        int v41 = v38 & 0x7FFFFFFF;
        if (v38 >= 0) {
          int v41 = ~v38;
        }
        int v66 = v41;
        int v42 = v39 & 0x7FFFFFFF;
        if (v39 >= 0) {
          int v42 = ~v39;
        }
        int v65 = v42;
        if (v67 < 0) {
          unsigned int v43 = ~v67;
        }
        else {
          unsigned int v43 = v67 | 0x80000000;
        }
        unsigned int v44 = v43 & 0xFFFFFFF0;
        unsigned int v45 = v44 - 15;
        int v46 = v34 & 1;
        unsigned int v47 = v44 + 17;
        unsigned int v48 = v45 & 0xFFFFFFF0;
        if (!v46) {
          unsigned int v47 = v48;
        }
        if (v66 < 0) {
          unsigned int v49 = ~v66;
        }
        else {
          unsigned int v49 = v66 | 0x80000000;
        }
        unsigned int v50 = v49 & 0xFFFFFFF0;
        unsigned int v51 = v50 - 15;
        int v52 = v35 & 1;
        unsigned int v53 = v50 + 17;
        unsigned int v54 = v51 & 0xFFFFFFF0;
        if (!v52) {
          unsigned int v53 = v54;
        }
        if (v42 < 0) {
          unsigned int v55 = ~v42;
        }
        else {
          unsigned int v55 = v42 | 0x80000000;
        }
        unsigned int v56 = v55 & 0xFFFFFFF0;
        unsigned int v57 = v56 - 15;
        int v58 = v36 & 1;
        unsigned int v59 = v56 + 17;
        unsigned int v60 = v57 & 0xFFFFFFF0;
        if (!v58) {
          unsigned int v59 = v60;
        }
        if (v31 == v46) {
          unsigned int v61 = v32;
        }
        else {
          unsigned int v61 = v32 + 1;
        }
        if (v47 >= v32) {
          unsigned int v32 = v47;
        }
        else {
          unsigned int v32 = v61;
        }
        if (v29 == v52) {
          unsigned int v62 = v30;
        }
        else {
          unsigned int v62 = v30 + 1;
        }
        if (v53 >= v30) {
          unsigned int v30 = v53;
        }
        else {
          unsigned int v30 = v62;
        }
        if (v28 == v58) {
          unsigned int v63 = v27;
        }
        else {
          unsigned int v63 = v27 + 1;
        }
        if (v59 >= v27) {
          unsigned int v27 = v59;
        }
        else {
          unsigned int v27 = v63;
        }
        *(_DWORD *)(v1 + 4 * v33) = v32;
        *(_DWORD *)(v2 + 4 * v33) = v30;
        *(_DWORD *)(v6 + 4 * v33) = v27;
        int v28 = v58;
        int v29 = v52;
        int v31 = v46;
      }
      while (v33++ < (2 * *(_DWORD *)(result + 328)));
    }
  }
  return result;
}

uint64_t physx::Bp::BroadPhaseSap::update(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 40))(a6);
  }
  physx::Bp::BroadPhaseSap::setUpdateData(a1, a4);
  *(void *)(a1 + 8) = a3;
  physx::Bp::BroadPhaseSap::resizeBuffers((physx::Bp::BroadPhaseSap *)a1);
  *(void *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a1;
  *(void *)(a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a1;
  *(_DWORD *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + 64) = a2;
  *(_DWORD *)(a1 + 104) = 1;
  *(void *)(a1 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a5;
  if (a5)
  {
    (*(void (**)(uint64_t))(*(void *)a5 + 32))(a5);
    *(void *)(a1 + 88) = *(void *)(*(void *)(a1 + 96) + 16);
  }
  uint64_t v12 = *(void *)(a1 + 72);
  uint64_t v11 = a1 + 72;
  *(_DWORD *)(v11 - 24) = 1;
  *(void *)(v11 - 32) = v11;
  (*(void (**)(uint64_t))(v12 + 32))(v11);
  *(void *)(v11 - 40) = *(void *)(*(void *)(v11 - 32) + 16);
  (*(void (**)(void, uint64_t))(**(void **)(v11 + 16) + 144))(*(void *)(v11 + 16), v11);
  int v13 = *(uint64_t (**)(void))(**(void **)(v11 - 40) + 144);
  return v13();
}

void physx::Bp::BroadPhaseSap::setUpdateData(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 128) = *(void *)a2;
  int v3 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
  *(void *)(a1 + 160) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 144) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 64);
  uint64_t v4 = *(unsigned int *)(a2 + 80);
  uint64_t v5 = *(unsigned int *)(a1 + 208);
  if (v4 > v5)
  {
    int v6 = 8 * v4 + 15;
    uint64_t v7 = v6 & 0xFFFFFFF0;
    if ((v6 & 0xFFFFFFF0) != 0)
    {
      int v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 540);
      int v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 541);
      int v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 542);
    }
    else
    {
      int v9 = 0;
      int v8 = 0;
      int v10 = 0;
    }
    memcpy(v8, *(const void **)(a1 + 216), (8 * v5));
    memcpy(v9, *(const void **)(a1 + 224), (8 * v5));
    memcpy(v10, *(const void **)(a1 + 232), (8 * v5));
    v11.n128_u64[0] = 0xC0000000C0000000;
    do
    {
      *((void *)v8 + v5) = 0xC0000000C0000000;
      *((void *)v9 + v5) = 0xC0000000C0000000;
      *((void *)v10 + v5++) = 0xC0000000C0000000;
    }
    while (v4 != v5);
    if (*(void *)(a1 + 216)) {
      (*(void (**)(__n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(v11);
    }
    if (*(void *)(a1 + 224)) {
      (*(void (**)(__n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(v11);
    }
    if (*(void *)(a1 + 232)) {
      (*(void (**)(__n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(v11);
    }
    *(void *)(a1 + 21re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v8;
    *(void *)(a1 + 224) = v9;
    *(void *)(a1 + 232) = v10;
    *(_DWORD *)(a1 + 208) = v4;
    if (*(void *)(a1 + 288)) {
      (*(void (**)(__n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(v11);
    }
    if (((v4 + 15) & 0xFFFFFFF0) != 0) {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, (v4 + 15) & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 567, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    *(void *)(a1 + 288) = v12;
    int v3 = *(_DWORD *)(a1 + 136);
  }
  int v13 = 2 * (*(_DWORD *)(a1 + 328) + v3);
  uint64_t v14 = (v13 + 2);
  if (v14 > *(_DWORD *)(a1 + 336))
  {
    int v15 = 4 * v14 + 15;
    unsigned int v16 = &unk_2687A6000;
    uint64_t v17 = v15 & 0xFFFFFFF0;
    if ((v15 & 0xFFFFFFF0) != 0)
    {
      uint64_t __dst = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 575);
      unsigned int v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 576);
      unsigned int v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 577);
      unsigned int v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 578);
      int v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 579);
      unsigned int v16 = (void *)&unk_2687A6000;
      unsigned int v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 580);
    }
    else
    {
      int v31 = 0;
      unsigned int v32 = 0;
      unsigned int v19 = 0;
      uint64_t __dst = 0;
      unsigned int v18 = 0;
      unsigned int v20 = 0;
    }
    if (*(void *)(a1 + 312)) {
      (*(void (**)(void))(*(void *)(v16[105] + 24) + 24))();
    }
    if (*(void *)(a1 + 320)) {
      (*(void (**)(void))(*(void *)(v16[105] + 24) + 24))();
    }
    if (v17)
    {
      *(void *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = (*(uint64_t (**)(void))(*(void *)(v16[105] + 24) + 16))();
      unsigned int v21 = *(uint64_t (**)(void))(*(void *)(v16[105] + 24) + 16);
      uint64_t v22 = v17;
      unsigned int v23 = (_DWORD *)v21();
      uint64_t v24 = *(void *)(a1 + 312);
    }
    else
    {
      uint64_t v22 = v17;
      uint64_t v24 = 0;
      unsigned int v23 = 0;
      *(void *)(a1 + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
    }
    uint64_t v25 = 0;
    *(void *)(a1 + 320) = v23;
    do
    {
      *(_DWORD *)(v24 + 4 * v25) = v25 + 1;
      v23[v25 + 1] = v25;
      uint64_t v26 = v25 + 2;
      ++v25;
    }
    while (v26 != v14);
    *(_DWORD *)(v24 + 4 * (v13 | 1u)) = v13 | 1;
    _DWORD *v23 = 0;
    memcpy(__dst, *(const void **)(a1 + 240), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v18, *(const void **)(a1 + 248), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v19, *(const void **)(a1 + 256), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v32, *(const void **)(a1 + 264), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v31, *(const void **)(a1 + 272), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v20, *(const void **)(a1 + 280), (8 * *(_DWORD *)(a1 + 328) + 8));
    if (*(void *)(a1 + 240)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(a1 + 248)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(a1 + 256)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(a1 + 264)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(a1 + 272)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(a1 + 280)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(a1 + 240) = __dst;
    *(void *)(a1 + 248) = v18;
    *(void *)(a1 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v19;
    *(void *)(a1 + 264) = v32;
    *(void *)(a1 + 272) = v31;
    *(void *)(a1 + 280) = v20;
    *(_DWORD *)(a1 + 33re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14;
    if (*(void *)(a1 + 296)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(a1 + 304)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (v22) {
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, v22, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 619);
    else {
      uint64_t v27 = 0;
    }
    *(void *)(a1 + 29re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v27;
    uint64_t v28 = (8 * v14);
    if (v28) {
      uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, v28, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 620);
    else {
      uint64_t v29 = 0;
    }
    *(void *)(a1 + 304) = v29;
  }
  bzero(*(void **)(a1 + 288), *(unsigned int *)(a1 + 208));
  if (*(_DWORD *)(a1 + 168))
  {
    unint64_t v30 = 0;
    do
      *(unsigned char *)(*(void *)(a1 + 288) + *(unsigned int *)(*(void *)(a1 + 160) + 4 * v30++)) = 1;
    while (v30 < *(unsigned int *)(a1 + 168));
  }
  *(_DWORD *)(a1 + 328) += *(_DWORD *)(a1 + 136);
}

void physx::Bp::BroadPhaseSap::singleThreadedUpdate(physx::Bp::BroadPhaseSap *a1, uint64_t a2, uint64_t a3)
{
  physx::Bp::BroadPhaseSap::setUpdateData((uint64_t)a1, a3);
  *((void *)a1 + 1) = a2;
  physx::Bp::BroadPhaseSap::resizeBuffers(a1);
  physx::Bp::BroadPhaseSap::update(a1);
  physx::Bp::BroadPhaseSap::postUpdate(a1, v5, v6, v7, v8, v9);
}

uint64_t physx::Bp::BroadPhaseSap::update(physx::Bp::BroadPhaseSap *this)
{
  physx::Bp::BroadPhaseSap::batchRemove(this);
  (*(void (**)(void))(*((void *)this + 58) + 64))();
  (*(void (**)(void))(*((void *)this + 67) + 64))();
  uint64_t v2 = *(uint64_t (**)(void))(*((void *)this + 76) + 64);
  return v2();
}

void physx::Bp::BroadPhaseSap::postUpdate(physx::Bp::BroadPhaseSap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, physx::Bp::DataArray *a6)
{
  uint64_t v7 = 0;
  uint64_t v16 = *((void *)this + 43);
  uint64_t v17 = *((void *)this + 44);
  uint64_t v8 = (physx::Bp::BroadPhaseSap *)((char *)this + 360);
  do
  {
    int v9 = (char *)this + 72 * v7;
    uint64_t v10 = *((unsigned int *)v9 + 132);
    if (v10)
    {
      __n128 v11 = (unsigned int *)(*((void *)v9 + 65) + 4);
      do
      {
        uint64_t v12 = (physx::Bp *)*(v11 - 1);
        unsigned int v13 = *v11;
        uint64_t v14 = (pthread_mutex_t **)*((void *)this + 1);
        if (v12 <= *v11) {
          physx::Bp::removePair(v12, v13, v14, v8, (physx::Bp::SapPairManager *)&v16, a6);
        }
        else {
          physx::Bp::addPair(v12, v13, v14, v8, (physx::Bp::SapPairManager *)&v16, a6);
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    ++v7;
  }
  while (v7 != 3);
  *((void *)this + 43) = v16;
  *((void *)this + 44) = v17;
  physx::Bp::BroadPhaseSap::batchCreate(this);
  physx::Bp::ComputeCreatedDeletedPairsLists(v15, *((unsigned int **)this + 43), *((_DWORD *)this + 88), *((pthread_mutex_t ***)this + 1), (const void **)this + 53, (_DWORD *)this + 108, (_DWORD *)this + 109, (const void **)this + 55, (unsigned int *)this + 112, (_DWORD *)this + 113, (unsigned int *)this + 114, (uint64_t)v8);
  *((_DWORD *)this + 83) = *((_DWORD *)this + 82);
}

uint64_t physx::Bp::addPair(physx::Bp *this, unsigned int a2, pthread_mutex_t **a3, physx::PxcScratchAllocator *a4, physx::Bp::SapPairManager *a5, physx::Bp::DataArray *a6)
{
  uint64_t result = (uint64_t)physx::Bp::SapPairManager::AddPair(a4, this, a2);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = *((void *)a4 + 5);
    uint64_t v12 = (result - *((void *)a4 + 4)) >> 3;
    char v13 = *(unsigned char *)(v11 + v12);
    if ((v13 & 8) != 0)
    {
      *(unsigned char *)(v11 + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
      *(unsigned char *)(*((void *)a4 + 5) + ((result - *((void *)a4 + 4)) >> 3)) |= 1u;
      uint64_t v14 = result - *((void *)a4 + 4);
      unsigned int v15 = v14 >> 3;
      unsigned int v16 = *((_DWORD *)a5 + 2);
      if (v16 == *((_DWORD *)a5 + 3))
      {
        uint64_t result = physx::Bp::DataArray::Resize(a5, a3);
        unsigned int v16 = *((_DWORD *)a5 + 2);
        uint64_t v14 = v10 - *((void *)a4 + 4);
      }
      uint64_t v17 = *(void *)a5;
      *((_DWORD *)a5 + 2) = v16 + 1;
      *(_DWORD *)(v17 + 4 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v15;
      *(unsigned char *)(*((void *)a4 + 5) + (v14 >> 3)) |= 4u;
      uint64_t v11 = *((void *)a4 + 5);
      uint64_t v12 = (v10 - *((void *)a4 + 4)) >> 3;
      char v13 = *(unsigned char *)(v11 + v12);
    }
    *(unsigned char *)(v11 + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v13 & 0xFD;
  }
  return result;
}

uint64_t physx::Bp::removePair(physx::Bp *this, unsigned int a2, pthread_mutex_t **a3, physx::PxcScratchAllocator *a4, physx::Bp::SapPairManager *a5, physx::Bp::DataArray *a6)
{
  uint64_t result = (uint64_t)physx::Bp::SapPairManager::FindPair(a4, this, a2);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = *((void *)a4 + 5);
    uint64_t v12 = (result - *((void *)a4 + 4)) >> 3;
    char v13 = *(unsigned char *)(v11 + v12);
    if ((v13 & 1) == 0)
    {
      *(unsigned char *)(v11 + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v13 | 1;
      uint64_t v14 = result - *((void *)a4 + 4);
      unsigned int v15 = v14 >> 3;
      unsigned int v16 = *((_DWORD *)a5 + 2);
      if (v16 == *((_DWORD *)a5 + 3))
      {
        uint64_t result = physx::Bp::DataArray::Resize(a5, a3);
        unsigned int v16 = *((_DWORD *)a5 + 2);
        uint64_t v14 = v10 - *((void *)a4 + 4);
      }
      uint64_t v17 = *(void *)a5;
      *((_DWORD *)a5 + 2) = v16 + 1;
      *(_DWORD *)(v17 + 4 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v15;
      uint64_t v11 = *((void *)a4 + 5);
      uint64_t v12 = v14 >> 3;
      char v13 = *(unsigned char *)(v11 + v12);
    }
    *(unsigned char *)(v11 + vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v13 | 2;
  }
  return result;
}

void physx::Bp::BroadPhaseSap::batchCreate(physx::Bp::BroadPhaseSap *this)
{
  uint64_t v1 = *((unsigned int *)this + 34);
  if (!v1) {
    return;
  }
  uint64_t v2 = this;
  int v3 = (unsigned int *)*((void *)this + 16);
  uint64_t v4 = *((void *)this + 22);
  unsigned int v5 = 2 * v1;
  if ((2 * v1) > 0x20)
  {
    uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, physx::Bp::BroadPhaseSap *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (2 * v1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56, this);
    uint64_t v197 = v6;
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (2 * v1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
    uint64_t v2 = this;
    uint64_t v7 = (unsigned char *)v8;
  }
  else
  {
    uint64_t v6 = &v192;
    uint64_t v197 = &v192;
    uint64_t v7 = v189;
  }
  uint64_t v9 = 0;
  int v191 = v7;
  uint64_t v187 = 0;
  long long v186 = 0u;
  long long v185 = 0u;
  char v188 = 1;
  unsigned int v184 = 0x80000000;
  uint64_t v183 = &unk_26E728438;
  do
  {
    uint64_t v10 = *((void *)v2 + 25);
    unsigned int v11 = 1;
    uint64_t v12 = v3;
    uint64_t v13 = v1;
    do
    {
      unsigned int v14 = *v12++;
      float v15 = *(float *)(v10 + 4 * v14);
      unsigned int v16 = (float *)(v4 + 4 * v9 + 24 * v14);
      *(float *)&uint64_t v178 = *v16 - v15;
      if ((int)v178 < 0) {
        int v17 = ~v178;
      }
      else {
        int v17 = v178 | 0x80000000;
      }
      *((_DWORD *)v6 + v11 - 1) = (v17 & 0xFFFFFFF0) - 16;
      *(float *)&uint64_t v178 = v15 + v16[3];
      if ((int)v178 < 0) {
        int v18 = ~v178;
      }
      else {
        int v18 = v178 | 0x80000000;
      }
      *((_DWORD *)v6 + v11) = (v18 & 0xFFFFFFF0) + 20;
      v11 += 2;
      --v13;
    }
    while (v13);
    v184 |= 0x80000000;
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v183);
    uint64_t v19 = *((void *)&v185 + 1);
    if (v5)
    {
      uint64_t v20 = v185;
      unsigned int v21 = v5 - 1;
      uint64_t v22 = v7;
      unsigned int v23 = (_DWORD *)*((void *)&v185 + 1);
      uint64_t v24 = (2 * v1);
      do
      {
        uint64_t v25 = *(unsigned int *)(v20 + 4 * v21);
        *v22++ = *((_DWORD *)v6 + v25);
        *v23++ = v25 & 1 | (2 * *(unsigned int *)((char *)v3 + ((2 * v25) & 0x1FFFFFFFCLL)));
        --v21;
        --v24;
      }
      while (v24);
    }
    unsigned int v26 = 0;
    uint64_t v2 = this;
    uint64_t v27 = (void *)((char *)this + 8 * v9);
    uint64_t v28 = v27[30];
    unint64_t v29 = v27[33];
    int v30 = *((_DWORD *)this + 82) - *((_DWORD *)this + 34);
    uint64_t v31 = v27[27];
    unsigned int v32 = (2 * v30) | 1;
    unsigned int v33 = v5 + 2 * v30;
    unsigned int v34 = v33 | 1;
    *(_DWORD *)(v28 + 4 * v34) = *(_DWORD *)(v28 + 4 * v32);
    unsigned int v35 = 2 * v30;
    *(_DWORD *)(v29 + 4 * v34) = *(_DWORD *)(v29 + 4 * v32);
    int v36 = (_DWORD *)(v29 + 4 * (2 * v30));
    int v37 = (unsigned int *)(v28 + 4 * v35);
    uint64_t v38 = 4 * (int)v33;
    do
    {
      int v39 = (_DWORD *)(v19 + 4 * v26);
      unsigned int v40 = *v37;
      unsigned int v41 = *(_DWORD *)&v7[4 * v26];
      if (*v39) {
        BOOL v42 = *v37 <= v41;
      }
      else {
        BOOL v42 = *v37 < v41;
      }
      if (v42) {
        unsigned int v40 = *(_DWORD *)&v7[4 * v26];
      }
      else {
        int v39 = v36;
      }
      *(_DWORD *)(v28 + v38) = v40;
      *(_DWORD *)(v29 + v38) = *v39;
      *(_DWORD *)(v31 + ((4 * *v39) & 0x3FFFFFFF8) + 4 * (*v39 & 1)) = v33;
      if (v42)
      {
        if (++v26 >= v5) {
          break;
        }
      }
      else
      {
        --v37;
        --v36;
      }
      --v33;
      v38 -= 4;
    }
    while ((unint64_t)v36 >= v29);
    ++v9;
  }
  while (v9 != 3);
  uint64_t v183 = &unk_26E728438;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v183);
  if (v191 != v189 && v191) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (v197 != &v192 && v197) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v43 = *((unsigned int *)this + 34);
  int v44 = *((_DWORD *)this + 82);
  if ((v44 - v43) >= 9) {
    unsigned int v45 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (v44 - v43), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
  }
  else {
    unsigned int v45 = (unsigned int *)v189;
  }
  unsigned int v190 = v45;
  if (v43 >= 9)
  {
    int v46 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v43, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
    BOOL v163 = v190;
  }
  else
  {
    BOOL v163 = v45;
    int v46 = (unsigned int *)&v183;
  }
  *(void *)&long long v186 = v46;
  unsigned int v47 = 2 * *((_DWORD *)this + 52) + 31;
  size_t v48 = (v47 >> 3) & 0x1FFFFFFC;
  if (v47 >= 0x120) {
    unsigned int v49 = (uint64_t *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v48, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
  }
  else {
    unsigned int v49 = &v192;
  }
  uint64_t v196 = v49;
  bzero(v49, v48);
  unsigned int v50 = this;
  uint64_t v51 = *((unsigned int *)this + 34);
  uint64_t v52 = *((void *)this + 23);
  uint64_t v53 = *((void *)this + 33);
  uint64_t v54 = (2 * *((_DWORD *)this + 82));
  if (v51)
  {
    unsigned int v55 = 0;
    unsigned int v56 = 0;
    unsigned int v57 = 0;
    int v58 = (unsigned int *)*((void *)this + 16);
    uint64_t v60 = *((void *)this + 28);
    uint64_t v59 = *((void *)this + 29);
    unsigned int v61 = -1;
    unsigned int v62 = -1;
    unsigned int v63 = -1;
    uint64_t v64 = *((void *)this + 27);
    int v65 = v163;
    do
    {
      unsigned int v67 = *v58++;
      uint64_t v66 = v67;
      *(_DWORD *)((char *)v49 + (((unint64_t)v67 >> 3) & 0x1FFFFFFC)) |= 1 << v67;
      unsigned __int32 v68 = (unsigned int *)(v64 + 8 * v67);
      unsigned int v70 = *v68;
      unsigned int v69 = v68[1];
      if (v63 >= v70) {
        unsigned int v63 = v70;
      }
      if (v57 <= v69) {
        unsigned int v57 = v69;
      }
      unsigned int v71 = (unsigned int *)(v59 + 8 * v66);
      unsigned int v73 = *v71;
      unsigned int v72 = v71[1];
      if (v62 >= v73) {
        unsigned int v62 = v73;
      }
      if (v56 <= v72) {
        unsigned int v56 = v72;
      }
      uint64_t v74 = (unsigned int *)(v60 + 8 * v66);
      unsigned int v76 = *v74;
      unsigned int v75 = v74[1];
      if (v61 >= v76) {
        unsigned int v61 = v76;
      }
      if (v55 <= v75) {
        unsigned int v55 = v75;
      }
      --v51;
    }
    while (v51);
    if (v54) {
      goto LABEL_61;
    }
  }
  else
  {
    unsigned int v57 = 0;
    unsigned int v56 = 0;
    unsigned int v55 = 0;
    unsigned int v63 = -1;
    unsigned int v62 = -1;
    unsigned int v61 = -1;
    int v65 = v163;
    if (v54)
    {
LABEL_61:
      unsigned int v165 = 0;
      unsigned int v77 = 0;
      int v78 = 0;
      int v79 = 0;
      unsigned int v80 = (unsigned int *)(v53 + 4);
      unsigned int v81 = (void *)&unk_2687A6000;
      do
      {
        unsigned int v83 = *v80++;
        unint64_t v82 = v83;
        if ((v83 & 1) == 0)
        {
          unsigned int v84 = v82 >> 1;
          if ((*(_DWORD *)((char *)v49 + ((v82 >> 4) & 0xFFFFFFC)) >> (v82 >> 1)))
          {
            v46[v77++] = v84;
            if (*(_DWORD *)(v52 + 4 * v84)) {
              ++v78;
            }
          }
          else
          {
            int v85 = (unsigned int *)(*((void *)this + 27) + 8 * v84);
            unsigned int v87 = *v85;
            unsigned int v86 = v85[1];
            uint64_t v88 = (unsigned int *)(*((void *)this + 29) + 8 * v84);
            unsigned int v90 = *v88;
            unsigned int v89 = v88[1];
            float32x4_t v91 = (unsigned int *)(*((void *)this + 28) + 8 * v84);
            unsigned int v93 = *v91;
            unsigned int v92 = v91[1];
            if (v57 >= v87 && v86 >= v63 && v56 >= v90 && v89 >= v62 && v55 >= v93 && v92 >= v61)
            {
              v65[v165] = v84;
              if (*(_DWORD *)(v52 + 4 * v84)) {
                ++v79;
              }
              ++v165;
            }
          }
        }
        --v54;
      }
      while (v54);
      goto LABEL_91;
    }
  }
  unsigned int v165 = 0;
  unsigned int v77 = 0;
  int v79 = 0;
  int v78 = 0;
  unsigned int v81 = &unk_2687A6000;
LABEL_91:
  if (v196 != &v192 && v196 != 0)
  {
    (*(void (**)(void))(*(void *)(v81[105] + 24) + 24))();
    unsigned int v50 = this;
  }
  if (v78 | v79)
  {
    uint64_t v100 = (uint64_t *)((char *)v50 + 216);
    physx::Bp::AuxData::AuxData((uint64_t)&v178, v77, (uint64_t *)v50 + 27, v46, *((void *)v50 + 23));
    if (v78 && v182)
    {
      uint64_t v157 = (uint64_t *)((char *)v50 + 216);
      int v159 = v44;
      int v161 = v43;
      unint64_t v101 = 0;
      LODWORD(v102) = 0;
      uint64_t v103 = this;
      uint64_t v104 = *((void *)this + 24);
      uint64_t v105 = *((void *)this + 1);
      uint64_t v173 = *((void *)this + 43);
      uint64_t v174 = *((void *)this + 44);
      uint64_t v106 = v180;
      uint64_t v192 = v181;
      uint64_t v193 = v181;
      uint64_t v108 = v178;
      uint64_t v107 = v179;
      uint64_t v194 = v105;
      unsigned int v195 = (char *)this + 360;
      uint64_t v196 = &v173;
      unint64_t v167 = v182;
      uint64_t v169 = v179;
      do
      {
        int v109 = *(_DWORD *)(v106 + 4 * v101);
        do
        {
          uint64_t v110 = 8 * v102;
          uint64_t v102 = (v102 + 1);
        }
        while (*(_DWORD *)(v108 + v110) < *(_DWORD *)(v108 + 8 * v101));
        unsigned int v111 = *(_DWORD *)(v108 + 8 * v101 + 4);
        if (*(_DWORD *)(v108 + 8 * v102) <= v111)
        {
          unsigned int v112 = (uint64_t *)(v107 + 16 * v101);
          signed int v113 = v112 + 1;
          uint64_t v114 = v102;
          unsigned int v115 = v102;
          do
          {
            int v116 = *(_DWORD *)(v106 + 4 * v114);
            if (v109 != v116)
            {
              if (*(unsigned char *)(v104 + (v116 & 3 | (4 * (v109 & 3)))))
              {
                unsigned int v117 = (uint64_t *)(v107 + 16 * v114);
                v118.i64[0] = *v113;
                v119.i64[0] = *v117;
                v118.i64[1] = v117[1];
                v119.i64[1] = *v112;
                if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(v119, v118))) & 1) == 0)
                {
                  physx::Bp::addPair((uint64_t)&v192, v101, v115);
                  uint64_t v107 = v169;
                  signed int v113 = v112 + 1;
                  uint64_t v103 = this;
                }
              }
            }
            uint64_t v114 = ++v115;
          }
          while (*(_DWORD *)(v108 + 8 * v114) <= v111);
        }
        if (v102 >= v167) {
          break;
        }
        ++v101;
      }
      while (v101 < v167);
      *((void *)v103 + 43) = v173;
      *((void *)v103 + 44) = v174;
      unsigned int v81 = (void *)&unk_2687A6000;
      LODWORD(v43) = v161;
      int v65 = v163;
      int v44 = v159;
      uint64_t v100 = v157;
    }
    if (v44 != v43 && v165)
    {
      physx::Bp::AuxData::AuxData((uint64_t)&v173, v165, v100, v65, *((void *)this + 23));
      unint64_t v162 = v182;
      if (v182)
      {
        unint64_t v160 = v177;
        if (v177)
        {
          unint64_t v120 = 0;
          unsigned int v121 = 0;
          BOOL v122 = this;
          uint64_t v123 = v173;
          uint64_t v124 = *((void *)this + 1);
          uint64_t v125 = *((void *)this + 24);
          uint64_t v198 = *((void *)this + 43);
          uint64_t v199 = *((void *)this + 44);
          uint64_t v126 = v178;
          uint64_t v171 = v179;
          uint64_t v127 = v180;
          uint64_t v128 = v175;
          uint64_t v168 = v125;
          uint64_t v170 = v174;
          unsigned int v195 = (char *)this + 360;
          uint64_t v196 = &v198;
          uint64_t v155 = v176;
          uint64_t v156 = v181;
          uint64_t v192 = v181;
          uint64_t v193 = v176;
          uint64_t v158 = v124;
          uint64_t v194 = v124;
          uint64_t v164 = v175;
          uint64_t v166 = v180;
          do
          {
            int v129 = *(_DWORD *)(v127 + 4 * v120);
            unsigned int v130 = v121 + 1;
            do
            {
              LODWORD(v131) = v121;
              unsigned int v132 = v130;
              unsigned int v133 = *(_DWORD *)(v123 + 8 * v121++);
              ++v130;
            }
            while (v133 < *(_DWORD *)(v126 + 8 * v120));
            unsigned int v134 = *(_DWORD *)(v126 + 8 * v120 + 4);
            if (v133 <= v134)
            {
              uint64_t v131 = v131;
              unsigned int v135 = (uint64_t *)(v171 + 16 * v120);
              do
              {
                int v136 = *(_DWORD *)(v128 + 4 * v131);
                if (v129 != v136)
                {
                  if (*(unsigned char *)(v125 + (v136 & 3 | (4 * (v129 & 3)))))
                  {
                    unsigned int v137 = (uint64_t *)(v170 + 16 * v131);
                    v138.i64[0] = v135[1];
                    v139.i64[0] = *v137;
                    v138.i64[1] = v137[1];
                    v139.i64[1] = *v135;
                    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(v139, v138))) & 1) == 0)
                    {
                      physx::Bp::addPair((uint64_t)&v192, v120, v132 - 1);
                      uint64_t v128 = v164;
                      uint64_t v127 = v166;
                      uint64_t v125 = v168;
                      BOOL v122 = this;
                    }
                  }
                }
                uint64_t v131 = v132;
                unsigned int v140 = *(_DWORD *)(v123 + 8 * v132++);
              }
              while (v140 <= v134);
            }
            if (--v121 >= v160) {
              break;
            }
            ++v120;
          }
          while (v120 < v162);
          unint64_t v141 = 0;
          unsigned int v142 = 0;
          uint64_t v192 = v155;
          uint64_t v193 = v156;
          uint64_t v194 = v158;
          unsigned int v195 = (char *)this + 360;
          uint64_t v196 = &v198;
          do
          {
            int v143 = *(_DWORD *)(v128 + 4 * v141);
            unsigned int v144 = v142 + 1;
            do
            {
              LODWORD(v145) = v142;
              unsigned int v146 = v144;
              unsigned int v147 = *(_DWORD *)(v126 + 8 * v142++);
              ++v144;
            }
            while (v147 <= *(_DWORD *)(v123 + 8 * v141));
            unsigned int v148 = *(_DWORD *)(v123 + 8 * v141 + 4);
            if (v147 <= v148)
            {
              uint64_t v145 = v145;
              int v149 = (uint64_t *)(v170 + 16 * v141);
              do
              {
                int v150 = *(_DWORD *)(v127 + 4 * v145);
                if (v143 != v150)
                {
                  if (*(unsigned char *)(v125 + (v150 & 3 | (4 * (v143 & 3)))))
                  {
                    uint64_t v151 = (uint64_t *)(v171 + 16 * v145);
                    v152.i64[0] = v149[1];
                    v153.i64[0] = *v151;
                    v152.i64[1] = v151[1];
                    v153.i64[1] = *v149;
                    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(v153, v152))) & 1) == 0)
                    {
                      physx::Bp::addPair((uint64_t)&v192, v141, v146 - 1);
                      uint64_t v128 = v164;
                      uint64_t v127 = v166;
                      uint64_t v125 = v168;
                      BOOL v122 = this;
                    }
                  }
                }
                uint64_t v145 = v146;
                unsigned int v154 = *(_DWORD *)(v126 + 8 * v146++);
              }
              while (v154 <= v148);
            }
            if (--v142 >= v162) {
              break;
            }
            ++v141;
          }
          while (v141 < v160);
          *((void *)v122 + 43) = v198;
          *((void *)v122 + 44) = v199;
          unsigned int v81 = &unk_2687A6000;
        }
      }
      physx::Bp::AuxData::~AuxData((physx::Bp::AuxData *)&v173);
    }
    physx::Bp::AuxData::~AuxData((physx::Bp::AuxData *)&v178);
  }
  if ((void **)v186 != &v183 && (void)v186) {
    (*(void (**)(void))(*(void *)(v81[105] + 24) + 24))();
  }
  if (v190 != (unsigned int *)v189)
  {
    if (v190) {
      (*(void (**)(void))(*(void *)(v81[105] + 24) + 24))();
    }
  }
}

void physx::Bp::ComputeCreatedDeletedPairsLists(uint64_t a1, unsigned int *a2, unsigned int a3, pthread_mutex_t **a4, const void **a5, _DWORD *a6, _DWORD *a7, const void **a8, unsigned int *a9, _DWORD *a10, unsigned int *a11, uint64_t a12)
{
  uint64_t v12 = a9;
  if (a3)
  {
    uint64_t v13 = a10;
    uint64_t v14 = a3;
    float v15 = a2;
    uint64_t v16 = a3;
    uint64_t v43 = a6;
    do
    {
      unsigned int v18 = *v15++;
      uint64_t v17 = v18;
      uint64_t v20 = *(void *)(a12 + 32);
      uint64_t v19 = *(void *)(a12 + 40);
      unsigned int v21 = (unsigned int *)(v20 + 8 * v18);
      char v22 = *(unsigned char *)(v19 + v18);
      if ((v22 & 2) != 0)
      {
        if ((v22 & 4) == 0)
        {
          unsigned int v25 = *v12;
          if (*v12 == *v13)
          {
            unsigned int v26 = (void *)physx::PxcScratchAllocator::alloc(a4, 16 * v25, 1);
            memcpy(v26, *a8, (8 * *a10));
            physx::PxcScratchAllocator::free((uint64_t)a4, (unint64_t)*a8);
            uint64_t v12 = a9;
            a6 = v43;
            uint64_t v13 = a10;
            *a8 = v26;
            *a10 *= 2;
            unsigned int v25 = *a9;
          }
          else
          {
            unsigned int v26 = (void *)*a8;
          }
          LODWORD(v30) = *v21;
          unsigned int v31 = *(_DWORD *)(v20 + 8 * v17 + 4);
          if (*v21 >= v31) {
            uint64_t v32 = v31;
          }
          else {
            uint64_t v32 = v30;
          }
          if (v30 <= v31) {
            uint64_t v30 = v31;
          }
          else {
            uint64_t v30 = v30;
          }
          unsigned int *v12 = v25 + 1;
          *((void *)v26 + v25) = v32 | (v30 << 32);
        }
      }
      else
      {
        *(unsigned char *)(v19 + v17) = v22 & 0xFE;
        if ((*(unsigned char *)(*(void *)(a12 + 40) + (((uint64_t)v21 - *(void *)(a12 + 32)) >> 3)) & 4) != 0)
        {
          unsigned int v23 = *a6;
          if (*a6 == *a7)
          {
            uint64_t v24 = (void *)physx::PxcScratchAllocator::alloc(a4, 16 * v23, 1);
            memcpy(v24, *a5, (8 * *a7));
            physx::PxcScratchAllocator::free((uint64_t)a4, (unint64_t)*a5);
            uint64_t v12 = a9;
            a6 = v43;
            uint64_t v13 = a10;
            *a5 = v24;
            *a7 *= 2;
            unsigned int v23 = *v43;
          }
          else
          {
            uint64_t v24 = (void *)*a5;
          }
          LODWORD(v27) = *v21;
          unsigned int v28 = *(_DWORD *)(v20 + 8 * v17 + 4);
          if (*v21 >= v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = v27;
          }
          if (v27 <= v28) {
            uint64_t v27 = v28;
          }
          else {
            uint64_t v27 = v27;
          }
          *a6 = v23 + 1;
          *((void *)v24 + v23) = v29 | (v27 << 32);
          *(unsigned char *)(*(void *)(a12 + 40) + (((uint64_t)v21 - *(void *)(a12 + 32)) >> 3)) &= ~4u;
        }
      }
      --v16;
    }
    while (v16);
    unsigned int v33 = a2;
    *a11 = *v12;
    do
    {
      unsigned int v35 = *v33++;
      uint64_t v34 = v35;
      if ((~*(unsigned __int8 *)(*(void *)(a12 + 40) + v35) & 6) == 0)
      {
        uint64_t v36 = *(void *)(a12 + 32);
        unsigned int v37 = *a11;
        if (*a11 == *v13)
        {
          uint64_t v38 = (void *)physx::PxcScratchAllocator::alloc(a4, 16 * v37, 1);
          memcpy(v38, *a8, (8 * *a10));
          physx::PxcScratchAllocator::free((uint64_t)a4, (unint64_t)*a8);
          uint64_t v13 = a10;
          *a8 = v38;
          *a10 *= 2;
          unsigned int v37 = *a11;
        }
        else
        {
          uint64_t v38 = (void *)*a8;
        }
        LODWORD(v39) = *(_DWORD *)(v36 + 8 * v34);
        unsigned int v40 = *(_DWORD *)(v36 + 8 * v34 + 4);
        if (v39 >= v40) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = v39;
        }
        if (v39 <= v40) {
          uint64_t v39 = v40;
        }
        else {
          uint64_t v39 = v39;
        }
        *a11 = v37 + 1;
        *((void *)v38 + v37) = v41 | (v39 << 32);
      }
      --v14;
    }
    while (v14);
  }
  else
  {
    *a11 = *a9;
  }
}

const void **physx::Bp::BroadPhaseSap::deletePairs(const void **this)
{
  uint64_t v1 = *((unsigned int *)this + 114);
  if (v1)
  {
    uint64_t v2 = (uint64_t)this;
    uint64_t v3 = 0;
    uint64_t v4 = (char *)this[55];
    unsigned int v5 = (uint64_t *)(this + 45);
    do
    {
      uint64_t v6 = &v4[8 * v3];
      unsigned int v7 = *(_DWORD *)v6;
      unsigned int v8 = *((_DWORD *)v6 + 1);
      if (*(_DWORD *)v6 >= v8) {
        unsigned int v9 = *((_DWORD *)v6 + 1);
      }
      else {
        unsigned int v9 = *(_DWORD *)v6;
      }
      if (v7 <= v8) {
        unsigned int v7 = v8;
      }
      if (*(_DWORD *)(v2 + 376))
      {
        int v10 = (v9 | (v7 << 16)) + ~((v9 | (v7 << 16)) << 15);
        int v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
        unsigned int v12 = ((v11 + ~(v11 << 11)) ^ ((v11 + ~(v11 << 11)) >> 16)) & *(_DWORD *)(v2 + 416);
        unsigned int v13 = *(_DWORD *)(*v5 + 4 * v12);
        if (v13 != 0x3FFFFFFF)
        {
          while (1)
          {
            uint64_t v14 = v13;
            float v15 = (int *)(*(void *)(v2 + 392) + 8 * v13);
            int v17 = *v15;
            int v16 = v15[1];
            if (v17 == v9 && v16 == v7) {
              break;
            }
            unsigned int v13 = *(_DWORD *)(*(void *)(v2 + 368) + 4 * v14);
            if (v13 == 0x3FFFFFFF) {
              goto LABEL_17;
            }
          }
          physx::Bp::SapPairManager::RemovePair(v5, v12, v14 & 0x1FFFFFFF);
          this = physx::Bp::SapPairManager::shrinkMemory((const void **)v5);
        }
      }
LABEL_17:
      ++v3;
    }
    while (v3 != v1);
  }
  return this;
}

uint64_t physx::Bp::BroadPhaseBatchUpdateWorkTask::runInternal(uint64_t this)
{
  uint64_t v252 = *MEMORY[0x263EF8340];
  *(_DWORD *)(this + 64) = 0;
  uint64_t v1 = *(void *)(this + 40);
  unsigned int v2 = *(_DWORD *)(v1 + 168);
  if (!v2) {
    return this;
  }
  uint64_t v3 = *(unsigned int *)(this + 48);
  unsigned int v4 = *(_DWORD *)(v1 + 328);
  int v5 = *(_DWORD *)(this + 68);
  uint64_t v6 = *(void *)(v1 + 176);
  uint64_t v219 = this;
  uint64_t v220 = *(void *)(this + 40);
  if (5 * v2 < v4)
  {
    uint64_t v7 = *(void *)(v1 + 232);
    uint64_t v246 = *(void *)(v1 + 224);
    uint64_t v247 = v7;
    uint64_t v8 = *(void *)(v1 + 216);
    uint64_t v248 = v7;
    uint64_t v249 = v8;
    uint64_t v250 = v8;
    uint64_t v251 = v246;
    uint64_t v9 = v1 + 8 * v3;
    uint64_t v10 = *(void *)(v9 + 264);
    if (*(_DWORD *)(v10 + 4) >> 1 == 0x1FFFFFFF) {
      return this;
    }
    int v11 = *(char **)(v1 + 216 + 8 * v3);
    uint64_t v12 = *(void *)(v9 + 240);
    uint64_t v210 = (physx::PxcScratchAllocator *)*(&v246 + (2 * v3));
    uint64_t v213 = *(physx::PxcScratchAllocator **)(v1 + 184);
    uint64_t v206 = *(void *)(v9 + 264);
    uint64_t v208 = *(&v246 + ((2 * v3) | 1u));
    uint64_t v13 = *(void *)(v1 + 288);
    uint64_t v14 = v6 + 4 * v3;
    __src = v11;
    uint64_t v202 = v14;
    uint64_t v204 = v13;
    if (v2 >= 0x200)
    {
      uint64_t v47 = 2 * v4;
      if (!v47)
      {
        int v57 = 0;
        unsigned int v55 = *(unsigned int **)(v1 + 304);
        *(void *)unsigned int v55 = 0;
        unint64_t v59 = (unint64_t)v55;
LABEL_199:
        *(_DWORD *)(this + 64) = v57;
        *(_DWORD *)(this + 68) = v5;
        while ((unint64_t)(v55 + 2) <= v59)
        {
          long long v185 = v55;
          v55 += 2;
          unsigned int v186 = v185[2];
          unsigned int v187 = v185[3];
          if (v186 <= v187)
          {
            uint64_t v188 = *(void *)(v1 + 320);
            do
            {
              *(_DWORD *)(v188 + 4 * v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v186;
              ++v186;
              unsigned int v187 = v185[3];
            }
            while (v186 <= v187);
            unsigned int v186 = *v55;
          }
          if (v186 <= v187)
          {
            LODWORD(v189) = v186 - 1;
            uint64_t v190 = *(void *)(v1 + 312);
            do
            {
              uint64_t v189 = *(unsigned int *)(v190 + 4 * v189);
              if (v186 != v189)
              {
                uint64_t v191 = *(void *)(v1 + 320);
                uint64_t v192 = *(unsigned int *)(v191 + 4 * v189);
                uint64_t v193 = *(unsigned int *)(v10 + 4 * v192);
                int v194 = *(_DWORD *)(v12 + 4 * v186);
                this = *(unsigned int *)(v10 + 4 * v186);
                *(_DWORD *)(v12 + 4 * v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v12 + 4 * v192);
                *(_DWORD *)(v10 + 4 * v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(v10 + 4 * v192);
                *(_DWORD *)(v12 + 4 * v192) = v194;
                *(_DWORD *)(v10 + 4 * v192) = this;
                *(_DWORD *)(v191 + 4 * v192) = *(_DWORD *)(v191 + 4 * v186);
                *(_DWORD *)(v191 + 4 * *(unsigned int *)(v191 + 4 * v186)) = v192;
                *(_DWORD *)&v11[4 * (v193 & 1) + ((4 * v193) & 0x3FFFFFFF8)] = v186;
                unsigned int v187 = v185[3];
              }
              ++v186;
            }
            while (v186 <= v187);
            unsigned int v186 = *v55;
          }
          if (v186 - 1 <= v187)
          {
            uint64_t v196 = *(void *)(v1 + 312);
            uint64_t v195 = *(void *)(v1 + 320);
            do
            {
              *(_DWORD *)(v195 + 4 * v18re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v186 - 1;
              *(_DWORD *)(v196 + 4 * (v186 - 1)) = v186;
              BOOL v81 = v186++ > v185[3];
            }
            while (!v81);
          }
        }
        return this;
      }
      uint64_t v48 = 0;
      unsigned int v17 = 0;
      do
      {
        unint64_t v49 = *(unsigned int *)(v10 + 4 + 4 * v48);
        if (v49 >> 1 == 0x1FFFFFFF) {
          break;
        }
        unint64_t v50 = v49 >> 1;
        if (*(unsigned char *)(v13 + (v49 >> 1)))
        {
          float v51 = *(float *)(*(void *)(v1 + 200) + 4 * v50);
          if (v49)
          {
            float v244 = v51 + *(float *)(v14 + 24 * v50 + 12);
            int v52 = LODWORD(v244);
            int v53 = 20;
          }
          else
          {
            float v244 = *(float *)(v14 + 24 * v50) - v51;
            int v52 = LODWORD(v244);
            int v53 = -16;
          }
          if (v52 < 0) {
            unsigned int v54 = ~v52;
          }
          else {
            unsigned int v54 = v52 | 0x80000000;
          }
          *(_DWORD *)(v12 + 4 + 4 * v48) = (v54 & 0xFFFFFFF0) + v53;
          *(_DWORD *)(*(void *)(v1 + 296) + 4 * v17++) = v48 + 1;
        }
        ++v48;
      }
      while (v47 != v48);
    }
    else
    {
      int v15 = v5;
      unint64_t v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = *(void *)(v1 + 160);
      uint64_t v19 = *(void *)(v1 + 200);
      uint64_t v20 = *(void *)(v1 + 296);
      do
      {
        uint64_t v21 = *(unsigned int *)(v18 + 4 * v16);
        char v22 = (float *)(v14 + 24 * v21);
        unsigned int v23 = &v11[8 * v21];
        float v244 = *v22 - *(float *)(v19 + 4 * v21);
        if (v244 < 0.0) {
          unsigned int v24 = ~LODWORD(v244);
        }
        else {
          unsigned int v24 = LODWORD(v244) | 0x80000000;
        }
        float v244 = *(float *)(v19 + 4 * v21) + v22[3];
        if (v244 < 0.0) {
          unsigned int v25 = ~LODWORD(v244);
        }
        else {
          unsigned int v25 = LODWORD(v244) | 0x80000000;
        }
        *(_DWORD *)(v12 + 4 * *(unsigned int *)v23) = (v24 & 0xFFFFFFF0) - 16;
        *(_DWORD *)(v12 + 4 * *((unsigned int *)v23 + 1)) = (v25 & 0xFFFFFFF0) + 20;
        *(_DWORD *)(v20 + 4 * v17) = *(_DWORD *)v23;
        unsigned int v26 = v17 + 1;
        v17 += 2;
        *(_DWORD *)(v20 + 4 * v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((_DWORD *)v23 + 1);
        ++v16;
      }
      while (v16 < *(unsigned int *)(v1 + 168));
      physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(v20, v17, (uint64_t)&v244, (uint64_t)&v245, 32);
      uint64_t v13 = v204;
      this = v219;
      uint64_t v1 = v220;
      int v5 = v15;
      uint64_t v10 = v206;
    }
    unsigned int v55 = *(unsigned int **)(v1 + 304);
    *(void *)unsigned int v55 = 0;
    if (v17)
    {
      uint64_t v56 = 0;
      int v57 = 0;
      uint64_t v58 = *(void *)(v1 + 320);
      unint64_t v59 = (unint64_t)v55;
      uint64_t v197 = v17;
      uint64_t v60 = v213;
      int v11 = __src;
      uint64_t v62 = v208;
      unsigned int v61 = v210;
      do
      {
        uint64_t v198 = v56;
        uint64_t v63 = *(unsigned int *)(*(void *)(v1 + 296) + 4 * v56);
        LODWORD(v64) = *(_DWORD *)(v10 + 4 * v63);
        do
        {
          uint64_t v65 = v64 >> 1;
          unsigned int v66 = *(_DWORD *)(v12 + 4 * v63);
          float v244 = *(float *)(*(void *)(v1 + 200) + 4 * v65)
               + *(float *)(v14 + 24 * v65 + 12);
          if (v244 < 0.0) {
            unsigned int v67 = ~LODWORD(v244);
          }
          else {
            unsigned int v67 = LODWORD(v244) | 0x80000000;
          }
          uint64_t v68 = *(unsigned int *)(v58 + 4 * v63);
          if (*(_DWORD *)(v12 + 4 * v68) > v66)
          {
            unint64_t v229 = v59;
            unsigned int v232 = v64 >> 1;
            int v242 = *((_DWORD *)v60 + v65);
            unsigned int v69 = (unsigned int *)((char *)v61 + 8 * v65);
            unsigned int v70 = (unsigned int *)(v62 + 8 * v65);
            int v234 = v63;
            uint64_t v236 = 4 * (v242 & 3);
            if (v64)
            {
              unsigned int v72 = v63;
              do
              {
                unint64_t v90 = *(unsigned int *)(v10 + 4 * v68);
                if ((v90 & 1) == 0)
                {
                  unint64_t v91 = v90 >> 1;
                  unsigned int v92 = (unsigned int *)((char *)v61 + 8 * (v90 >> 1));
                  unsigned int v94 = *v92;
                  unsigned int v93 = v92[1];
                  uint64_t v95 = (unsigned int *)(v62 + 8 * (v90 >> 1));
                  unsigned int v97 = *v95;
                  unsigned int v96 = v95[1];
                  BOOL v98 = v69[1] > v94 && v93 > *v69;
                  BOOL v99 = v98 && v70[1] > v97;
                  if (v99 && v96 > *v70)
                  {
                    int v101 = *((_DWORD *)v60 + v91);
                    if (v242 != v101)
                    {
                      if (*(unsigned char *)(*(void *)(v1 + 192) + (v101 & 3 | (unint64_t)v236)))
                      {
                        uint64_t v102 = *(char **)(this + 56);
                        if (v57 == v5)
                        {
                          int v222 = 2 * v5;
                          int v239 = v57;
                          uint64_t v103 = *(pthread_mutex_t ***)(v1 + 8);
                          int v226 = v5;
                          uint64_t v104 = (char *)physx::PxcScratchAllocator::alloc(v103, 16 * v5, 1);
                          memcpy(v104, v102, (8 * v226));
                          uint64_t v105 = (uint64_t)v103;
                          int v57 = v239;
                          physx::PxcScratchAllocator::free(v105, (unint64_t)v102);
                          uint64_t v14 = v202;
                          uint64_t v13 = v204;
                          uint64_t v62 = v208;
                          unsigned int v61 = v210;
                          uint64_t v60 = v213;
                          int v11 = __src;
                          uint64_t v10 = v206;
                          this = v219;
                          uint64_t v1 = v220;
                          *(void *)(v219 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v104;
                          uint64_t v58 = *(void *)(v220 + 320);
                          uint64_t v102 = v104;
                          int v5 = v222;
                        }
                        if (v232 >= v91) {
                          unsigned int v106 = v91;
                        }
                        else {
                          unsigned int v106 = v232;
                        }
                        uint64_t v107 = (unsigned int *)&v102[8 * v57];
                        if (v232 <= v91) {
                          unsigned int v108 = v91;
                        }
                        else {
                          unsigned int v108 = v232;
                        }
                        unsigned int *v107 = v106;
                        v107[1] = v108;
                        ++v57;
                        LODWORD(v63) = v234;
                      }
                    }
                  }
                }
                --v72;
                uint64_t v68 = *(unsigned int *)(v58 + 4 * v68);
              }
              while (v66 < *(_DWORD *)(v12 + 4 * v68));
            }
            else
            {
              int v238 = v57;
              unsigned int v71 = (v67 & 0xFFFFFFF0) + 20;
              unsigned int v72 = v63;
              do
              {
                unint64_t v73 = *(unsigned int *)(v10 + 4 * v68);
                if (v73)
                {
                  unint64_t v74 = v73 >> 1;
                  if (*(_DWORD *)(v12 + 4 * *(unsigned int *)&v11[8 * (v73 >> 1)]) < v71)
                  {
                    unsigned int v75 = (unsigned int *)((char *)v61 + 8 * v74);
                    unsigned int v77 = *v75;
                    unsigned int v76 = v75[1];
                    int v78 = (unsigned int *)(v62 + 8 * v74);
                    unsigned int v80 = *v78;
                    unsigned int v79 = v78[1];
                    BOOL v81 = v69[1] > v77 && v76 > *v69;
                    BOOL v82 = v81 && v70[1] > v80;
                    if (v82 && v79 > *v70)
                    {
                      int v84 = *((_DWORD *)v60 + v74);
                      if (v242 != v84)
                      {
                        if (*(unsigned char *)(*(void *)(v1 + 192) + (v84 & 3 | (unint64_t)v236)))
                        {
                          int v85 = *(char **)(this + 56);
                          if (v238 == v5)
                          {
                            int v221 = 2 * v5;
                            uint64_t v200 = *(pthread_mutex_t ***)(v1 + 8);
                            int v225 = v5;
                            unsigned int v86 = (char *)physx::PxcScratchAllocator::alloc(v200, 16 * v5, 1);
                            memcpy(v86, v85, (8 * v225));
                            physx::PxcScratchAllocator::free((uint64_t)v200, (unint64_t)v85);
                            uint64_t v14 = v202;
                            uint64_t v13 = v204;
                            uint64_t v62 = v208;
                            unsigned int v61 = v210;
                            uint64_t v60 = v213;
                            int v11 = __src;
                            uint64_t v10 = v206;
                            this = v219;
                            uint64_t v1 = v220;
                            *(void *)(v219 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v86;
                            uint64_t v58 = *(void *)(v220 + 320);
                            int v85 = v86;
                            int v5 = v221;
                          }
                          if (v232 <= v74) {
                            unsigned int v87 = v74;
                          }
                          else {
                            unsigned int v87 = v232;
                          }
                          uint64_t v88 = (unsigned int *)&v85[8 * v238];
                          if (v232 >= v74) {
                            unsigned int v89 = v74;
                          }
                          else {
                            unsigned int v89 = v232;
                          }
                          unsigned int *v88 = v87;
                          v88[1] = v89;
                          ++v238;
                          LODWORD(v63) = v234;
                        }
                      }
                    }
                  }
                }
                --v72;
                uint64_t v68 = *(unsigned int *)(v58 + 4 * v68);
              }
              while (v66 < *(_DWORD *)(v12 + 4 * v68));
              int v57 = v238;
            }
            uint64_t v109 = *(void *)(v1 + 312);
            uint64_t v110 = *(unsigned int *)(v109 + 4 * v63);
            uint64_t v111 = *(unsigned int *)(v58 + 4 * v63);
            uint64_t v112 = *(unsigned int *)(v109 + 4 * v68);
            *(_DWORD *)(v109 + 4 * v111) = v110;
            *(_DWORD *)(v58 + 4 * v110) = v111;
            *(_DWORD *)(v109 + 4 * v63) = v112;
            *(_DWORD *)(v58 + 4 * v63) = v68;
            *(_DWORD *)(v58 + 4 * v1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v63;
            *(_DWORD *)(v109 + 4 * v68) = v63;
            signed int v113 = (unsigned int *)(v229 + 16);
            do
            {
              unsigned int v114 = *(v113 - 4);
              v113 -= 2;
            }
            while (v72 < v114);
            unsigned int v55 = *(unsigned int **)(v1 + 304);
            unint64_t v59 = (unint64_t)(v113 - 2);
            if (v113 - 2 == v55 || v72 > *(v113 - 1) + 1)
            {
              *signed int v113 = v72;
              unint64_t v59 = (unint64_t)v113;
            }
            *(_DWORD *)(v59 + 4) = v63;
          }
          LODWORD(v63) = v63 + 1;
          unint64_t v64 = *(unsigned int *)(v10 + 4 * v63);
        }
        while (v64 >> 1 != 0x1FFFFFFF
             && !*(unsigned char *)(v13 + (v64 >> 1))
             && *(unsigned char *)(v13
                         + ((unint64_t)*(unsigned int *)(v10
                                                              + 4 * *(unsigned int *)(v58 + 4 * v63)) >> 1)));
        uint64_t v56 = v198 + 1;
      }
      while (v198 + 1 != v197);
    }
    else
    {
      int v57 = 0;
      unint64_t v59 = (unint64_t)v55;
      int v11 = __src;
    }
    goto LABEL_199;
  }
  uint64_t v27 = *(void *)(v1 + 232);
  uint64_t v246 = *(void *)(v1 + 224);
  uint64_t v247 = v27;
  uint64_t v28 = *(void *)(v1 + 216);
  uint64_t v248 = v27;
  uint64_t v249 = v28;
  uint64_t v250 = v28;
  uint64_t v251 = v246;
  uint64_t v29 = v1 + 8 * v3;
  uint64_t v30 = *(void *)(v29 + 264);
  unint64_t v31 = *(unsigned int *)(v30 + 4);
  if (v31 >> 1 != 0x1FFFFFFF)
  {
    uint64_t v32 = *(&v246 + (2 * v3));
    uint64_t v33 = *(&v246 + ((2 * v3) | 1u));
    uint64_t v34 = *(void *)(v1 + 184);
    uint64_t v35 = *(void *)(v1 + 216 + 8 * v3);
    uint64_t v36 = *(void *)(v29 + 240);
    unint64_t v37 = v31 >> 1;
    uint64_t v38 = v6 + 4 * v3;
    uint64_t v39 = *(physx::PxcScratchAllocator **)(v1 + 288);
    float v244 = *(float *)(v38 + 24 * (*(_DWORD *)(v30 + 4) >> 1))
         - *(float *)(*(void *)(v1 + 200) + 4 * ((unint64_t)*(unsigned int *)(v30 + 4) >> 1));
    if (v244 < 0.0) {
      unsigned int v40 = ~LODWORD(v244);
    }
    else {
      unsigned int v40 = LODWORD(v244) | 0x80000000;
    }
    *(_DWORD *)(v36 + 4) = (v40 & 0xFFFFFFF0) - 16;
    int v41 = *((unsigned __int8 *)v39 + v37);
    int v42 = *(_DWORD *)(v1 + 168);
    uint64_t v43 = *(unsigned int **)(v1 + 304);
    *(void *)uint64_t v43 = 0;
    unsigned int v44 = *(_DWORD *)(v30 + 8);
    if (v44 >> 1 == 0x1FFFFFFF)
    {
      unsigned int v45 = 0;
      unint64_t v46 = (unint64_t)v43;
    }
    else
    {
      unsigned int v45 = 0;
      int v115 = *((unsigned __int8 *)v39 + v37);
      int v116 = 2 * v42 - v41;
      uint64_t v117 = 2;
      unint64_t v46 = (unint64_t)v43;
      uint64_t v207 = v33;
      uint64_t v209 = v32;
      uint64_t v203 = v38;
      uint64_t v205 = v34;
      uint64_t v201 = v39;
      do
      {
        int v118 = v115;
        char v119 = v44;
        unint64_t v120 = (unint64_t)v44 >> 1;
        int v115 = *((unsigned __int8 *)v39 + v120);
        if (v115 | v118)
        {
          uint64_t v121 = *(void *)(v1 + 200);
          float v122 = *(float *)(v121 + 4 * v120);
          if (v44)
          {
            float v244 = v122 + *(float *)(v38 + 24 * v120 + 12);
            int v123 = LODWORD(v244);
            int v124 = 20;
          }
          else
          {
            float v244 = *(float *)(v38 + 24 * v120) - v122;
            int v123 = LODWORD(v244);
            int v124 = -16;
          }
          v116 -= v115;
          if (v123 < 0) {
            unsigned int v125 = ~v123;
          }
          else {
            unsigned int v125 = v123 | 0x80000000;
          }
          unsigned int v126 = (v125 & 0xFFFFFFF0) + v124;
          *(_DWORD *)(v36 + 4 * v117) = v126;
          uint64_t v127 = *(void *)(v1 + 320);
          uint64_t v128 = *(unsigned int *)(v127 + 4 * v117);
          if (*(_DWORD *)(v36 + 4 * v128) > v126)
          {
            int v233 = v116;
            float v244 = *(float *)(v121 + 4 * v120) + *(float *)(v38 + 24 * v120 + 12);
            int v129 = *(_DWORD *)(v34 + 4 * v120);
            if (v244 < 0.0) {
              unsigned int v130 = ~LODWORD(v244);
            }
            else {
              unsigned int v130 = LODWORD(v244) | 0x80000000;
            }
            uint64_t v131 = (unsigned int *)(v32 + 8 * v120);
            unsigned int v235 = v120;
            unsigned int v132 = (unsigned int *)(v33 + 8 * v120);
            int v243 = v129;
            uint64_t v237 = 4 * (v129 & 3);
            if (v119)
            {
              unsigned int v134 = v117;
              unint64_t v224 = v46;
              do
              {
                unint64_t v151 = *(unsigned int *)(v30 + 4 * v128);
                if ((v151 & 1) == 0)
                {
                  unint64_t v152 = v151 >> 1;
                  uint32x4_t v153 = (unsigned int *)(v32 + 8 * (v151 >> 1));
                  unsigned int v155 = *v153;
                  unsigned int v154 = v153[1];
                  uint64_t v156 = (unsigned int *)(v33 + 8 * (v151 >> 1));
                  unsigned int v158 = *v156;
                  unsigned int v157 = v156[1];
                  BOOL v159 = v131[1] > v155 && v154 > *v131;
                  BOOL v160 = v159 && v132[1] > v158;
                  if (v160 && v157 > *v132)
                  {
                    int v162 = *(_DWORD *)(v34 + 4 * v152);
                    if (v243 != v162)
                    {
                      if (*(unsigned char *)(*(void *)(v1 + 192) + (v162 & 3 | (unint64_t)v237)))
                      {
                        BOOL v163 = *(physx::PxcScratchAllocator **)(this + 56);
                        if (v45 == v5)
                        {
                          int __srcb = 2 * v5;
                          uint64_t v215 = *(pthread_mutex_t ***)(v1 + 8);
                          int v228 = v5;
                          unsigned int v231 = v45;
                          unint64_t v241 = *(void **)(this + 56);
                          uint64_t v212 = (physx::PxcScratchAllocator *)physx::PxcScratchAllocator::alloc(v215, 16 * v5, 1);
                          memcpy(v212, v241, (8 * v228));
                          physx::PxcScratchAllocator::free((uint64_t)v215, (unint64_t)v241);
                          uint64_t v39 = v201;
                          uint64_t v38 = v203;
                          uint64_t v34 = v205;
                          uint64_t v33 = v207;
                          uint64_t v32 = v209;
                          BOOL v163 = v212;
                          unsigned int v45 = v231;
                          uint64_t v1 = v220;
                          unint64_t v46 = v224;
                          this = v219;
                          *(void *)(v219 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v212;
                          uint64_t v127 = *(void *)(v220 + 320);
                          int v5 = __srcb;
                        }
                        if (v235 >= v152) {
                          unsigned int v164 = v152;
                        }
                        else {
                          unsigned int v164 = v235;
                        }
                        unsigned int v165 = (unsigned int *)((char *)v163 + 8 * v45);
                        if (v235 <= v152) {
                          unsigned int v166 = v152;
                        }
                        else {
                          unsigned int v166 = v235;
                        }
                        *unsigned int v165 = v164;
                        v165[1] = v166;
                        ++v45;
                      }
                    }
                  }
                }
                --v134;
                uint64_t v128 = *(unsigned int *)(v127 + 4 * v128);
              }
              while (v126 < *(_DWORD *)(v36 + 4 * v128));
            }
            else
            {
              unsigned int v133 = (v130 & 0xFFFFFFF0) + 20;
              unsigned int v134 = v117;
              unsigned int v240 = v133;
              do
              {
                unint64_t v135 = *(unsigned int *)(v30 + 4 * v128);
                if (v135)
                {
                  unint64_t v136 = v135 >> 1;
                  if (*(_DWORD *)(v36 + 4 * *(unsigned int *)(v35 + 8 * (v135 >> 1))) < v133)
                  {
                    unsigned int v137 = (unsigned int *)(v32 + 8 * v136);
                    unsigned int v139 = *v137;
                    unsigned int v138 = v137[1];
                    unsigned int v140 = (unsigned int *)(v33 + 8 * v136);
                    unsigned int v142 = *v140;
                    unsigned int v141 = v140[1];
                    if (v131[1] > v139 && v138 > *v131 && v132[1] > v142 && v141 > *v132)
                    {
                      int v146 = *(_DWORD *)(v34 + 4 * v136);
                      if (v243 != v146)
                      {
                        if (*(unsigned char *)(*(void *)(v1 + 192) + (v146 & 3 | (unint64_t)v237)))
                        {
                          unsigned int v147 = *(char **)(this + 56);
                          if (v45 == v5)
                          {
                            int v214 = 2 * v5;
                            uint64_t v211 = *(pthread_mutex_t ***)(v1 + 8);
                            int v227 = v5;
                            unsigned int v230 = v45;
                            unint64_t v223 = v46;
                            __srca = *(void **)(this + 56);
                            uint64_t v199 = (char *)physx::PxcScratchAllocator::alloc(v211, 16 * v5, 1);
                            memcpy(v199, __srca, (8 * v227));
                            physx::PxcScratchAllocator::free((uint64_t)v211, (unint64_t)__srca);
                            uint64_t v39 = v201;
                            uint64_t v38 = v203;
                            uint64_t v34 = v205;
                            uint64_t v33 = v207;
                            uint64_t v32 = v209;
                            unsigned int v45 = v230;
                            uint64_t v1 = v220;
                            unint64_t v46 = v223;
                            this = v219;
                            unsigned int v147 = v199;
                            *(void *)(v219 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v199;
                            uint64_t v127 = *(void *)(v220 + 320);
                            int v5 = v214;
                          }
                          if (v235 <= v136) {
                            unsigned int v148 = v136;
                          }
                          else {
                            unsigned int v148 = v235;
                          }
                          int v149 = (unsigned int *)&v147[8 * v45];
                          if (v235 >= v136) {
                            unsigned int v150 = v136;
                          }
                          else {
                            unsigned int v150 = v235;
                          }
                          unsigned int *v149 = v148;
                          v149[1] = v150;
                          ++v45;
                        }
                      }
                    }
                    unsigned int v133 = v240;
                  }
                }
                --v134;
                uint64_t v128 = *(unsigned int *)(v127 + 4 * v128);
              }
              while (v126 < *(_DWORD *)(v36 + 4 * v128));
            }
            uint64_t v167 = *(void *)(v1 + 312);
            uint64_t v168 = *(unsigned int *)(v167 + 4 * v117);
            uint64_t v169 = *(unsigned int *)(v127 + 4 * v117);
            uint64_t v170 = *(unsigned int *)(v167 + 4 * v128);
            *(_DWORD *)(v167 + 4 * v169) = v168;
            *(_DWORD *)(v127 + 4 * v168) = v169;
            *(_DWORD *)(v167 + 4 * v117) = v170;
            *(_DWORD *)(v127 + 4 * v117) = v128;
            *(_DWORD *)(v127 + 4 * v170) = v117;
            *(_DWORD *)(v167 + 4 * v128) = v117;
            uint64_t v171 = (unsigned int *)(v46 + 16);
            int v116 = v233;
            do
            {
              unsigned int v172 = *(v171 - 4);
              v171 -= 2;
            }
            while (v134 < v172);
            uint64_t v43 = *(unsigned int **)(v1 + 304);
            unint64_t v46 = (unint64_t)(v171 - 2);
            if (v171 - 2 == v43 || v134 > *(v171 - 1) + 1)
            {
              unsigned int *v171 = v134;
              unint64_t v46 = (unint64_t)v171;
            }
            *(_DWORD *)(v46 + 4) = v117;
            int v115 = 1;
          }
        }
        else
        {
          if (!v116) {
            break;
          }
          int v115 = 0;
        }
        uint64_t v117 = (v117 + 1);
        unsigned int v44 = *(_DWORD *)(v30 + 4 * v117);
      }
      while (v44 >> 1 != 0x1FFFFFFF);
    }
    *(_DWORD *)(this + 64) = v45;
    *(_DWORD *)(this + 68) = v5;
    while ((unint64_t)(v43 + 2) <= v46)
    {
      uint64_t v173 = v43;
      v43 += 2;
      unsigned int v174 = v173[2];
      unsigned int v175 = v173[3];
      if (v174 <= v175)
      {
        uint64_t v176 = *(void *)(v1 + 320);
        do
        {
          *(_DWORD *)(v176 + 4 * v174) = v174;
          ++v174;
          unsigned int v175 = v173[3];
        }
        while (v174 <= v175);
        unsigned int v174 = *v43;
      }
      if (v174 <= v175)
      {
        LODWORD(v177) = v174 - 1;
        uint64_t v178 = *(void *)(v1 + 312);
        do
        {
          uint64_t v177 = *(unsigned int *)(v178 + 4 * v177);
          if (v174 != v177)
          {
            uint64_t v179 = *(void *)(v1 + 320);
            uint64_t v180 = *(unsigned int *)(v179 + 4 * v177);
            uint64_t v181 = *(unsigned int *)(v30 + 4 * v180);
            int v182 = *(_DWORD *)(v36 + 4 * v174);
            this = *(unsigned int *)(v30 + 4 * v174);
            *(_DWORD *)(v36 + 4 * v174) = *(_DWORD *)(v36 + 4 * v180);
            *(_DWORD *)(v30 + 4 * v174) = *(_DWORD *)(v30 + 4 * v180);
            *(_DWORD *)(v36 + 4 * v180) = v182;
            *(_DWORD *)(v30 + 4 * v180) = this;
            *(_DWORD *)(v179 + 4 * v180) = *(_DWORD *)(v179 + 4 * v174);
            *(_DWORD *)(v179 + 4 * *(unsigned int *)(v179 + 4 * v174)) = v180;
            *(_DWORD *)(v35 + ((4 * v181) & 0x3FFFFFFF8) + 4 * (v181 & 1)) = v174;
            unsigned int v175 = v173[3];
          }
          ++v174;
        }
        while (v174 <= v175);
        unsigned int v174 = *v43;
      }
      if (v174 - 1 <= v175)
      {
        uint64_t v184 = *(void *)(v1 + 312);
        uint64_t v183 = *(void *)(v1 + 320);
        do
        {
          *(_DWORD *)(v183 + 4 * v174) = v174 - 1;
          *(_DWORD *)(v184 + 4 * (v174 - 1)) = v174;
          BOOL v81 = v174++ > v173[3];
        }
        while (!v81);
      }
    }
    **(_DWORD **)(v1 + 320) = 0;
  }
  return this;
}

void physx::Bp::BroadPhaseSap::batchRemove(physx::Bp::BroadPhaseSap *this)
{
  if (!*((_DWORD *)this + 38)) {
    return;
  }
  uint64_t v2 = 0;
  int v3 = *((_DWORD *)this + 82);
  *((_DWORD *)this + 82) = *((_DWORD *)this + 83);
  do
  {
    unsigned int v4 = (void *)((char *)this + 8 * v2);
    uint64_t v5 = v4[30];
    uint64_t v6 = v4[33];
    if (*((_DWORD *)this + 38))
    {
      unint64_t v7 = 0;
      uint64_t v8 = v4[27];
      uint64_t v9 = *((void *)this + 18);
      unsigned int v10 = -1;
      do
      {
        int v11 = (unsigned int *)(v8 + 8 * *(unsigned int *)(v9 + 4 * v7));
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        *(_DWORD *)(v6 + 4 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 1073741821;
        *(_DWORD *)(v6 + 4 * v13) = 1073741821;
        if (v12 < v10) {
          unsigned int v10 = v12;
        }
        ++v7;
      }
      while (v7 < *((unsigned int *)this + 38));
      int v14 = 2 * *((_DWORD *)this + 82) + 2;
      if (v10 == v14) {
        goto LABEL_9;
      }
    }
    else
    {
      int v14 = 2 * *((_DWORD *)this + 82) + 2;
      unsigned int v10 = -1;
    }
    int v15 = -v14;
    int v16 = -v10;
    unsigned int v17 = v10;
    do
    {
      _X1 = v6 + 128 + 4 * v17;
      __asm { PRFM            #0, [X1] }
      ++v17;
      while (1)
      {
        uint64_t v24 = v17 - 1;
        _X2 = (_DWORD *)(v6 + 4 * v24);
        if (*_X2 != 1073741821) {
          break;
        }
        __asm { PRFM            #0, [X2,#0x80] }
        ++v17;
        if (v15 + v17 == 1) {
          goto LABEL_9;
        }
      }
      if (v16 + v17 != 1)
      {
        *(_DWORD *)(v5 + 4 * v10) = *(_DWORD *)(v5 + 4 * v24);
        uint64_t v27 = *(unsigned int *)(v6 + 4 * v24);
        *(_DWORD *)(v6 + 4 * v10) = v27;
        if (v27 >> 1 != 0x1FFFFFFF) {
          *(_DWORD *)(*((void *)this + v2 + 27) + ((4 * v27) & 0x3FFFFFFF8) + 4 * (v27 & 1)) = v10;
        }
      }
      ++v10;
      --v16;
    }
    while (v15 + v17);
LABEL_9:
    ++v2;
  }
  while (v2 != 3);
  if (*((_DWORD *)this + 38))
  {
    unint64_t v28 = 0;
    uint64_t v29 = *((void *)this + 18);
    uint64_t v30 = *((void *)this + 27);
    uint64_t v31 = *((void *)this + 28);
    uint64_t v32 = *((void *)this + 29);
    int32x2_t v33 = vdup_n_s32(0x3FFFFFFDu);
    do
    {
      uint64_t v34 = *(unsigned int *)(v29 + 4 * v28);
      *(int32x2_t *)(v30 + 8 * v34) = v33;
      *(int32x2_t *)(v31 + 8 * v34) = v33;
      *(int32x2_t *)(v32 + 8 * v34) = v33;
      ++v28;
    }
    while (v28 < *((unsigned int *)this + 38));
  }
  unint64_t v35 = *((unsigned int *)this + 52);
  size_t v36 = ((v35 >> 3) & 0x1FFFFFFC) + 4;
  if (v35 >= 0x1000) {
    unint64_t v37 = (unsigned char *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v36, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
  }
  else {
    unint64_t v37 = v49;
  }
  unint64_t v50 = v37;
  bzero(v37, v36);
  uint64_t v38 = v50;
  if (*((_DWORD *)this + 38))
  {
    unint64_t v39 = 0;
    uint64_t v40 = *((void *)this + 18);
    do
    {
      *(_DWORD *)&v38[((unint64_t)*(unsigned int *)(v40 + 4 * v39) >> 3) & 0x1FFFFFFC] |= 1 << *(_DWORD *)(v40 + 4 * v39);
      ++v39;
      unint64_t v41 = *((unsigned int *)this + 38);
    }
    while (v39 < v41);
  }
  else
  {
    LODWORD(v41) = 0;
  }
  unsigned int v42 = *((_DWORD *)this + 102);
  if (v42)
  {
    unsigned int v43 = 0;
    do
    {
      unsigned int v44 = (unsigned int *)(*((void *)this + 49) + 8 * v43);
      unint64_t v45 = *v44;
      unint64_t v46 = v44[1];
      if (((*(_DWORD *)&v38[(v45 >> 3) & 0x1FFFFFFC] >> v45) & 1) != 0
        || ((*(_DWORD *)&v38[(v46 >> 3) & 0x1FFFFFFC] >> v46) & 1) != 0)
      {
        int v47 = (v45 | (v46 << 16)) + ~((v45 | (v46 << 16)) << 15);
        int v48 = (9 * (v47 ^ (v47 >> 10))) ^ ((9 * (v47 ^ (v47 >> 10))) >> 6);
        physx::Bp::SapPairManager::RemovePair((uint64_t *)this + 45, *((_DWORD *)this + 104) & ((v48 + ~(v48 << 11)) ^ ((v48 + ~(v48 << 11)) >> 16)), v43);
        unsigned int v42 = *((_DWORD *)this + 102);
      }
      else
      {
        ++v43;
      }
    }
    while (v43 < v42);
    LODWORD(v41) = *((_DWORD *)this + 38);
    uint64_t v38 = v50;
  }
  *((_DWORD *)this + 82) = v3 - v41;
  *((_DWORD *)this + 83) = v3 - v41 - *((_DWORD *)this + 34);
  if (v38 != v49)
  {
    if (v38) {
      (*(void (**)(uint64_t, unsigned char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v38);
    }
  }
}

_DWORD *physx::Bp::SapPairManager::FindPair(physx::Bp::SapPairManager *this, unsigned int a2, unsigned int a3)
{
  if (!*((_DWORD *)this + 4)) {
    return 0;
  }
  int v3 = a2 >= a3 ? a3 : a2;
  int v4 = a2 <= a3 ? a3 : a2;
  int v5 = (v3 | (v4 << 16)) + ~((v3 | (v4 << 16)) << 15);
  int v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  uint64_t v7 = *(unsigned int *)(*(void *)this
                       + 4
                       * (*((_DWORD *)this + 14) & ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16))));
  if (v7 == 0x3FFFFFFF) {
    return 0;
  }
  while (1)
  {
    uint64_t v8 = (_DWORD *)(*((void *)this + 4) + 8 * v7);
    if (*v8 == v3 && v8[1] == v4) {
      break;
    }
    uint64_t v7 = *(unsigned int *)(*((void *)this + 1) + 4 * v7);
    if (v7 == 0x3FFFFFFF) {
      return 0;
    }
  }
  return v8;
}

unsigned int *physx::Bp::SapPairManager::AddPair(physx::Bp::SapPairManager *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *((_DWORD *)this + 12);
  if (v3 == 0x3FFFFFFF) {
    return 0;
  }
  if (a2 >= a3) {
    unsigned int v6 = a3;
  }
  else {
    unsigned int v6 = a2;
  }
  if (a2 <= a3) {
    unsigned int v7 = a3;
  }
  else {
    unsigned int v7 = a2;
  }
  int v8 = 9
     * (((v6 | (v7 << 16)) + ~((v6 | (v7 << 16)) << 15)) ^ ((int)((v6 | (v7 << 16)) + ~((v6 | (v7 << 16)) << 15)) >> 10));
  int v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  int v10 = v9 ^ (v9 >> 16);
  unsigned int v11 = *((_DWORD *)this + 14) & v10;
  unsigned int v12 = *((_DWORD *)this + 4);
  if (!v12 || (uint64_t v13 = *(unsigned int *)(*(void *)this + 4 * v11), v13 == 0x3FFFFFFF))
  {
LABEL_16:
    if (v3 >= v12)
    {
      unsigned int v15 = (v3 + 1) | ((v3 + 1) >> 1) | (((v3 + 1) | ((v3 + 1) >> 1)) >> 2);
      unsigned int v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
      int v17 = v16 | HIWORD(v16);
      *((_DWORD *)this + 4) = v17 + 1;
      *((_DWORD *)this + 14) = v17;
      physx::Bp::SapPairManager::reallocPairs((const void **)this, (v17 + 1) > *((_DWORD *)this + 5));
      unsigned int v11 = *((_DWORD *)this + 14) & v10;
      unsigned int v3 = *((_DWORD *)this + 12);
    }
    uint64_t v18 = *((void *)this + 5);
    uint64_t result = (unsigned int *)(*((void *)this + 4) + 8 * v3);
    *uint64_t result = v6;
    result[1] = v7;
    *(unsigned char *)(v18 + v3) = 8;
    uint64_t v19 = *(void *)this;
    *(_DWORD *)(*((void *)this + 1) + 4 * *((unsigned int *)this + 12)) = *(_DWORD *)(*(void *)this + 4 * v11);
    int v20 = *((_DWORD *)this + 12);
    *((_DWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v20 + 1;
    *(_DWORD *)(v19 + 4 * v11) = v20;
  }
  else
  {
    while (1)
    {
      uint64_t result = (unsigned int *)(*((void *)this + 4) + 8 * v13);
      if (*result == v6 && result[1] == v7) {
        break;
      }
      uint64_t v13 = *(unsigned int *)(*((void *)this + 1) + 4 * v13);
      if (v13 == 0x3FFFFFFF) {
        goto LABEL_16;
      }
    }
  }
  return result;
}

const void **physx::Bp::SapPairManager::reallocPairs(const void **this, char a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    if (*this) {
      this = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v3 = *((unsigned int *)v2 + 4);
    *((_DWORD *)v2 + 5) = v3;
    *((_DWORD *)v2 + 13) = v3;
    if (v3)
    {
      this = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 413);
      unsigned int v4 = *((_DWORD *)v2 + 4);
      physx::Bp::BroadPhaseSap *v2 = this;
      if (!v4) {
        goto LABEL_19;
      }
      unint64_t v5 = 0;
      do
      {
        *((_DWORD *)this + v5++) = 0x3FFFFFFF;
        unint64_t v6 = *((unsigned int *)v2 + 4);
      }
      while (v5 < v6);
      if (v6)
      {
        this = (const void **)(*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 421);
        unsigned int v7 = this;
        uint64_t v8 = *((unsigned int *)v2 + 4);
        if (v8)
        {
          this = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 422);
          int v9 = this;
          uint64_t v10 = *((unsigned int *)v2 + 4);
          if (v10)
          {
            this = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 423);
            unsigned int v11 = this;
            goto LABEL_23;
          }
        }
        else
        {
          int v9 = 0;
        }
      }
      else
      {
LABEL_19:
        int v9 = 0;
        unsigned int v7 = 0;
      }
      unsigned int v11 = 0;
    }
    else
    {
      int v9 = 0;
      unsigned int v7 = 0;
      unsigned int v11 = 0;
      physx::Bp::BroadPhaseSap *v2 = 0;
    }
LABEL_23:
    unsigned int v22 = *((_DWORD *)v2 + 12);
    if (v22)
    {
      memcpy(v7, v2[4], 8 * v22);
      this = (const void **)memcpy(v11, v2[5], *((unsigned int *)v2 + 12));
      if (*((_DWORD *)v2 + 12))
      {
        unint64_t v23 = 0;
        uint64_t v24 = *v2;
        unsigned int v25 = (char *)v2[4] + 4;
        do
        {
          int v26 = *(v25 - 1) | (*v25 << 16);
          int v27 = 9 * ((v26 + ~(v26 << 15)) ^ ((v26 + ~(v26 << 15)) >> 10));
          int v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
          unsigned int v29 = (v28 ^ (v28 >> 16)) & v2[7];
          *((_DWORD *)v9 + v23) = v24[v29];
          v24[v29] = v23++;
          v25 += 2;
        }
        while (v23 < *((unsigned int *)v2 + 12));
      }
    }
    if (v2[1]) {
      this = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (v2[4]) {
      this = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (v2[5]) {
      this = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v2[4] = v7;
    v2[5] = v11;
    v2[1] = v9;
    return this;
  }
  if (*((_DWORD *)this + 4))
  {
    unint64_t v12 = 0;
    uint64_t v13 = *this;
    do
      v13[v12++] = 0x3FFFFFFF;
    while (v12 < *((unsigned int *)this + 4));
  }
  if (*((_DWORD *)this + 12))
  {
    unint64_t v14 = 0;
    unsigned int v15 = *this;
    unsigned int v16 = this[1];
    int v17 = (char *)this[4] + 4;
    do
    {
      int v18 = *(v17 - 1) | (*v17 << 16);
      int v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
      int v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      unsigned int v21 = (v20 ^ (v20 >> 16)) & this[7];
      v16[v14] = v15[v21];
      v15[v21] = v14++;
      v17 += 2;
    }
    while (v14 < *((unsigned int *)this + 12));
  }
  return this;
}

uint64_t *physx::Bp::SapPairManager::RemovePair(uint64_t *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = *this;
  uint64_t v3 = this[1];
  unint64_t v5 = (unsigned int *)(*this + 4 * a2);
  unsigned int v6 = *v5;
  if (*v5 != a3)
  {
    do
    {
      unsigned int v7 = v6;
      unsigned int v6 = *(_DWORD *)(v3 + 4 * v6);
    }
    while (v6 != a3);
    if (v7 != 0x3FFFFFFF) {
      unint64_t v5 = (unsigned int *)(v3 + 4 * v7);
    }
  }
  *unint64_t v5 = *(_DWORD *)(v3 + 4 * a3);
  uint64_t v8 = (*((_DWORD *)this + 12) - 1);
  if (v8 != a3)
  {
    uint64_t v9 = this[4];
    int v10 = *(_DWORD *)(v9 + 8 * v8) | (*(_DWORD *)(v9 + 8 * v8 + 4) << 16);
    int v11 = 9 * ((v10 + ~(v10 << 15)) ^ ((v10 + ~(v10 << 15)) >> 10));
    int v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
    uint64_t v13 = (v12 ^ (v12 >> 16)) & this[7];
    unint64_t v14 = (unsigned int *)(v4 + 4 * v13);
    unsigned int v15 = *v14;
    if (*v14 != v8)
    {
      do
      {
        unsigned int v16 = v15;
        unsigned int v15 = *(_DWORD *)(v3 + 4 * v15);
      }
      while (v15 != v8);
      if (v16 != 0x3FFFFFFF) {
        unint64_t v14 = (unsigned int *)(v3 + 4 * v16);
      }
    }
    unsigned int *v14 = *(_DWORD *)(v3 + 4 * v8);
    *(void *)(v9 + 8 * a3) = *(void *)(v9 + 8 * v8);
    *(unsigned char *)(this[5] + a3) = *(unsigned char *)(this[5] + v8);
    uint64_t v17 = *this;
    *(_DWORD *)(this[1] + 4 * a3) = *(_DWORD *)(*this + 4 * v13);
    *(_DWORD *)(v17 + 4 * v13) = a3;
    a3 = *((_DWORD *)this + 12) - 1;
  }
  *((_DWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a3;
  return this;
}

uint64_t physx::Bp::DataArray::Resize(physx::Bp::DataArray *this, pthread_mutex_t **a2)
{
  uint64_t v4 = (void *)physx::PxcScratchAllocator::alloc(a2, 8 * *((_DWORD *)this + 3), 1);
  memcpy(v4, *(const void **)this, (4 * *((_DWORD *)this + 3)));
  uint64_t result = physx::PxcScratchAllocator::free((uint64_t)a2, *(void *)this);
  *(void *)this = v4;
  *((_DWORD *)this + 3) *= 2;
  return result;
}

uint64_t physx::Bp::AuxData::AuxData(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v7 = a2;
  if (a2 == -1)
  {
    int v28 = -1;
    uint64_t v29 = 0;
    uint64_t v9 = 0xFFFFFFFFLL;
LABEL_5:
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 743);
    uint64_t v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 744);
    unint64_t v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))();
    char v15 = 0;
    uint64_t v11 = v29;
    unsigned int v7 = v28;
    goto LABEL_7;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (a2 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 742);
  uint64_t v11 = v10;
  if (v7)
  {
    uint64_t v29 = v10;
    int v28 = v7;
    uint64_t v9 = v7;
    goto LABEL_5;
  }
  uint64_t v12 = 0;
  uint64_t v9 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  char v15 = 1;
LABEL_7:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v13;
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = v7;
  if ((v15 & 1) == 0)
  {
    unsigned int v16 = (_DWORD *)(v12 + 8);
    uint64_t v17 = (_DWORD *)(v11 + 4);
    uint64_t v18 = v9;
    uint64_t v19 = *a3;
    uint64_t v21 = a3[1];
    uint64_t v20 = a3[2];
    do
    {
      unsigned int v22 = *a4++;
      *v13++ = *(_DWORD *)(a5 + 4 * v22);
      *v14++ = v22;
      unint64_t v23 = (_DWORD *)(v19 + 8 * v22);
      *(v17 - 1) = *v23;
      *uint64_t v17 = v23[1];
      v17 += 2;
      uint64_t v24 = (_DWORD *)(v20 + 8 * v22);
      *(v16 - 2) = *v24;
      _DWORD *v16 = v24[1];
      unsigned int v25 = (_DWORD *)(v21 + 8 * v22);
      *(v16 - 1) = *v25;
      v16[1] = v25[1];
      v16 += 4;
      --v18;
    }
    while (v18);
  }
  *(_DWORD *)(v11 + 8 * v9) = -1;
  return a1;
}

void physx::Bp::AuxData::~AuxData(physx::Bp::AuxData *this)
{
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 2)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 1)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*(void *)this) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::Bp::addPair(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = *(physx::Bp::SapPairManager **)(a1 + 24);
  uint64_t result = (uint64_t)physx::Bp::SapPairManager::AddPair(v4, *(_DWORD *)(*(void *)a1 + 4 * a2), *(_DWORD *)(*(void *)(a1 + 8) + 4 * a3));
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *((void *)v4 + 5);
    uint64_t v8 = (result - *((void *)v4 + 4)) >> 3;
    char v9 = *(unsigned char *)(v7 + v8);
    if ((v9 & 8) != 0)
    {
      *(unsigned char *)(v7 + v8) = 0;
      *(unsigned char *)(*((void *)v4 + 5) + ((result - *((void *)v4 + 4)) >> 3)) |= 1u;
      uint64_t v10 = *(uint64_t **)(a1 + 32);
      uint64_t v11 = result - *((void *)v4 + 4);
      unsigned int v12 = v11 >> 3;
      unsigned int v13 = *((_DWORD *)v10 + 2);
      if (v13 == *((_DWORD *)v10 + 3))
      {
        uint64_t result = physx::Bp::DataArray::Resize(*(physx::Bp::DataArray **)(a1 + 32), *(pthread_mutex_t ***)(a1 + 16));
        unsigned int v13 = *((_DWORD *)v10 + 2);
        uint64_t v11 = v6 - *((void *)v4 + 4);
      }
      uint64_t v14 = *v10;
      *((_DWORD *)v10 + 2) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13) = v12;
      *(unsigned char *)(*((void *)v4 + 5) + (v11 >> 3)) |= 4u;
      uint64_t v7 = *((void *)v4 + 5);
      uint64_t v8 = (v6 - *((void *)v4 + 4)) >> 3;
      char v9 = *(unsigned char *)(v7 + v8);
    }
    *(unsigned char *)(v7 + v8) = v9 & 0xFD;
  }
  return result;
}

const char *physx::MBPUpdateWorkTask::getName(physx::MBPUpdateWorkTask *this)
{
  return "BpMBP.updateWork";
}

const char *physx::MBPPostUpdateWorkTask::getName(physx::MBPPostUpdateWorkTask *this)
{
  return "BpMBP.postUpdateWork";
}

uint64_t physx::Bp::BroadPhaseMBP::getType(physx::Bp::BroadPhaseMBP *this)
{
  return 1;
}

uint64_t physx::Bp::BroadPhaseMBP::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t physx::Bp::BroadPhaseMBP::getBroadPhasePairs(physx::Bp::BroadPhaseMBP *this)
{
  return 0;
}

const char *physx::Bp::BroadPhaseBatchUpdateWorkTask::getName(physx::Bp::BroadPhaseBatchUpdateWorkTask *this)
{
  return "BpBroadphaseSap.batchUpdate";
}

uint64_t physx::Bp::BroadPhaseBase::getCaps(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  return 1;
}

uint64_t physx::Bp::BroadPhaseBase::getNbRegions(physx::Bp::BroadPhaseBase *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseBase::getRegions()
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseBase::addRegion()
{
  return 0xFFFFFFFFLL;
}

uint64_t physx::Bp::BroadPhaseBase::removeRegion(physx::Bp::BroadPhaseBase *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseBase::getNbOutOfBoundsObjects(physx::Bp::BroadPhaseBase *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseBase::getOutOfBoundsObjects(physx::Bp::BroadPhaseBase *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseSap::getType(physx::Bp::BroadPhaseSap *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseSap::getNbCreatedPairs(physx::Bp::BroadPhaseSap *this)
{
  return *((unsigned int *)this + 108);
}

uint64_t physx::Bp::BroadPhaseSap::getCreatedPairs(physx::Bp::BroadPhaseSap *this)
{
  return *((void *)this + 53);
}

uint64_t physx::Bp::BroadPhaseSap::getNbDeletedPairs(physx::Bp::BroadPhaseSap *this)
{
  return *((unsigned int *)this + 112);
}

uint64_t physx::Bp::BroadPhaseSap::getDeletedPairs(physx::Bp::BroadPhaseSap *this)
{
  return *((void *)this + 55);
}

uint64_t physx::Bp::BroadPhaseSap::getBroadPhasePairs(physx::Bp::BroadPhaseSap *this)
{
  return *((void *)this + 49);
}

uint64_t physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    uint64_t v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = (void *)result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>::getName() [T = physx::Bp::BroadPhasePair]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::allocate(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::getName() [T = physx::Bp::IAABB]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16);
    return v6(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", a2);
  }
  return result;
}

uint64_t physx::shdfnd::Array<RegionData,physx::shdfnd::ReflectionAllocator<RegionData>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 56 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<RegionData>::getName() [T = RegionData]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = (long long *)*a1;
  if (v9)
  {
    unint64_t v11 = result + 56 * v9;
    unint64_t v12 = result;
    do
    {
      long long v13 = *v10;
      long long v14 = v10[1];
      long long v15 = v10[2];
      *(void *)(v12 + 48) = *((void *)v10 + 6);
      *(_OWORD *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14;
      *(_OWORD *)(v12 + 32) = v15;
      *(_OWORD *)unint64_t v12 = v13;
      v12 += 56;
      uint64_t v10 = (long long *)((char *)v10 + 56);
    }
    while (v12 < v11);
    uint64_t v10 = (long long *)*a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<MBP_Object,physx::shdfnd::ReflectionAllocator<MBP_Object>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 12 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<MBP_Object>::getName() [T = MBP_Object]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = (uint64_t *)*a1;
  if (v9)
  {
    unint64_t v11 = result + 12 * v9;
    unint64_t v12 = result;
    do
    {
      uint64_t v13 = *v10;
      *(_DWORD *)(v12 + 8) = *((_DWORD *)v10 + 2);
      *(void *)unint64_t v12 = v13;
      v12 += 12;
      uint64_t v10 = (uint64_t *)((char *)v10 + 12);
    }
    while (v12 < v11);
    uint64_t v10 = (uint64_t *)*a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>::allocate(a1, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v6 + 8 * v7;
    unsigned int v9 = *(uint64_t **)a1;
    uint64_t v10 = (void *)v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
    uint64_t v12 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(void *)(v6 + 8 * vre::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)a1 = v6;
  uint64_t v13 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v13 + 1;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return v6 + 8 * v13;
}

void physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  size_t v8 = (4 * a5);
  BOOL v47 = v8 > 0x400;
  if (v8 < 0x401)
  {
    MEMORY[0x270FA5388](a1);
    unsigned int v9 = &v41[-((v8 + 15) & 0x1FFFFFFF0) - 8];
    bzero(v9, v8);
  }
  else
  {
    unsigned int v9 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v41, (4 * a5), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSort.h", 65);
  }
  unint64_t v46 = v9;
  unsigned int v42 = 0;
  int v43 = a5;
  unsigned int v44 = v9;
  int v10 = a2 - 1;
  char v45 = 0;
  if (a2 - 1 < 1) {
    goto LABEL_46;
  }
  int v11 = 0;
  for (i = v9; ; int v11 = *((_DWORD *)i + v38 - 2))
  {
    while (1)
    {
      if (v10 <= v11) {
        goto LABEL_39;
      }
      if ((v10 - v11) <= 4) {
        break;
      }
      int v13 = v11 + v10;
      if (v11 + v10 < 0 != __OFADD__(v11, v10)) {
        ++v13;
      }
      uint64_t v14 = (uint64_t)v13 >> 1;
      unsigned int v15 = *(_DWORD *)(a1 + 4 * (v13 >> 1));
      unsigned int v16 = *(_DWORD *)(a1 + 4 * v11);
      if (v15 < v16)
      {
        *(_DWORD *)(a1 + 4 * v11) = v15;
        *(_DWORD *)(a1 + 4 * v14) = v16;
        unsigned int v15 = v16;
        unsigned int v16 = *(_DWORD *)(a1 + 4 * v11);
      }
      unsigned int v17 = *(_DWORD *)(a1 + 4 * v10);
      if (v17 >= v16)
      {
        unsigned int v16 = *(_DWORD *)(a1 + 4 * v10);
      }
      else
      {
        *(_DWORD *)(a1 + 4 * v11) = v17;
        *(_DWORD *)(a1 + 4 * v10) = v16;
        unsigned int v15 = *(_DWORD *)(a1 + 4 * v14);
      }
      if (v16 < v15)
      {
        *(_DWORD *)(a1 + 4 * v14) = v16;
        *(_DWORD *)(a1 + 4 * v10) = v15;
        unsigned int v15 = *(_DWORD *)(a1 + 4 * v14);
      }
      uint64_t v18 = v10 - 1;
      *(_DWORD *)(a1 + 4 * v14) = *(_DWORD *)(a1 + 4 * v18);
      *(_DWORD *)(a1 + 4 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v15;
      int v19 = v11;
      int v20 = v10 - 1;
      while (1)
      {
        uint64_t v21 = (unsigned int *)(a1 + 4 * v19);
        do
        {
          unsigned int v23 = v21[1];
          ++v21;
          unsigned int v22 = v23;
          ++v19;
        }
        while (v23 < v15);
        uint64_t v24 = (unsigned int *)(a1 + 4 * v20);
        do
        {
          unsigned int v26 = *--v24;
          unsigned int v25 = v26;
          --v20;
        }
        while (v15 < v26);
        if (v19 >= v20) {
          break;
        }
        unsigned int *v21 = v25;
        *uint64_t v24 = v22;
        unsigned int v15 = *(_DWORD *)(a1 + 4 * v18);
      }
      unsigned int *v21 = v15;
      *(_DWORD *)(a1 + 4 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v22;
      unsigned int v27 = v42;
      unsigned int v28 = v43 - 1;
      if (v19 - v11 >= v10 - v19)
      {
        if (v42 >= v28)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v41);
          unsigned int v27 = v42;
          uint64_t i = v44;
        }
        unsigned int v42 = v27 + 1;
        *((_DWORD *)i + v27) = v19 + 1;
        uint64_t v30 = v42++;
        *((_DWORD *)i + v30) = v10;
        int v10 = v19 - 1;
      }
      else
      {
        if (v42 >= v28)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v41);
          unsigned int v27 = v42;
          uint64_t i = v44;
        }
        unsigned int v42 = v27 + 1;
        *((_DWORD *)i + v27) = v11;
        uint64_t v29 = v42++;
        *((_DWORD *)i + v29) = v19 - 1;
        int v11 = v19 + 1;
      }
    }
    uint64_t v31 = v11;
    int v32 = v11 + 1;
    uint64_t v33 = a1 + 4 + 4 * v11;
    do
    {
      uint64_t v34 = 0;
      uint64_t v35 = v31++;
      int v36 = v35;
      do
      {
        if (*(_DWORD *)(v33 + 4 * v34) < *(_DWORD *)(a1 + 4 * v36)) {
          int v36 = v32 + v34;
        }
        ++v34;
      }
      while (v35 + v34 < v10);
      if (v36 != v35)
      {
        int v37 = *(_DWORD *)(a1 + 4 * v36);
        *(_DWORD *)(a1 + 4 * v3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(_DWORD *)(a1 + 4 * v35);
        *(_DWORD *)(a1 + 4 * v35) = v37;
      }
      ++v32;
      v33 += 4;
    }
    while (v31 != v10);
LABEL_39:
    unsigned int v38 = v42;
    if (!v42) {
      break;
    }
    --v42;
    int v10 = *((_DWORD *)i + v38 - 1);
    unsigned int v42 = v38 - 2;
  }
  if (v45) {
    BOOL v39 = i == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (!v39) {
    (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, i);
  }
LABEL_46:
  if (v8 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v46, v9);
  }
}

uint64_t physx::Bp::PersistentActorAggregatePair::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    return 1;
  }
  uint64_t v4 = *(void *)(a2 + 264);
  if (*(_DWORD *)(v4 + 4 * *(unsigned int *)(a1 + 68)) == -1) {
    return 1;
  }
  unint64_t v5 = *(unsigned int *)(a1 + 72);
  if (*(_DWORD *)(v4 + 4 * v5) == -1) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  if (!*(_DWORD *)(v6 + 16)) {
    return 1;
  }
  if (*(_DWORD *)(v6 + 32) != -1
    || *(_DWORD *)(a1 + 72) >> 5 < (*(_DWORD *)(a2 + 232) & 0x7FFFFFFFu)
    && ((*(_DWORD *)(*(void *)(a2 + 224) + 4 * (v5 >> 5)) >> v5) & 1) != 0)
  {
    physx::Bp::AABBManager::updatePairs((unsigned int *)a2, a1, a3);
  }
  return 0;
}

unsigned int *physx::Bp::AABBManager::updatePairs(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  unsigned int v5 = result[142];
  int v6 = *(_DWORD *)(a2 + 8);
  if (a3)
  {
    if (v6 == v5) {
      return result;
    }
    *(_DWORD *)(a2 + 8) = v5;
    uint64_t v56 = (unsigned int *)(a2 + 16);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    unsigned int v8 = *(_DWORD *)(a2 + 24);
    if (v8)
    {
      unsigned int v9 = 0;
      uint64_t v54 = a3 + 40;
      uint64_t v55 = a3 + 8;
      while (1)
      {
        int v10 = (int *)(*(void *)(a2 + 48) + 8 * v9);
        int v11 = *v10;
        uint64_t v12 = *v10 & 0x7FFFFFFF;
        int v13 = v10[1];
        uint64_t v14 = v13 & 0x7FFFFFFF;
        if (*v10 < 0)
        {
          uint64_t v23 = *((void *)v4 + 36);
          int v24 = *(_DWORD *)(v23 + 16 * v12) & 3;
          int v25 = *(_DWORD *)(v23 + 16 * v14) & 3;
          if (v24 > v25) {
            int v25 = v24;
          }
          *(void *)&long long v57 = v11 & 0x7FFFFFFF;
          *((void *)&v57 + 1) = v13 & 0x7FFFFFFF;
          uint64_t v26 = v55 + 16 * v25;
          unsigned int v27 = *(_DWORD *)(v26 + 8);
          if ((*(_DWORD *)(v26 + 12) & 0x7FFFFFFFu) <= v27)
          {
            physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v26, &v57);
          }
          else
          {
            uint64_t v28 = *(void *)v26 + 24 * v27;
            *(_OWORD *)uint64_t v28 = v57;
            *(void *)(v28 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v58;
            ++*(_DWORD *)(v26 + 8);
          }
          *(void *)v10 &= 0x7FFFFFFF7FFFFFFFuLL;
        }
        else
        {
          if ((v13 & 0x80000000) == 0)
          {
            uint64_t v15 = *((void *)v4 + 36);
            unint64_t v16 = *(void *)(v15 + 16 * (*v10 & 0x7FFFFFFF));
            if (v16 >= 4)
            {
              unint64_t v17 = *(void *)(v15 + 16 * (v13 & 0x7FFFFFFF));
              if (v17 >= 4)
              {
                unsigned int v18 = v16 & 3;
                int v19 = v17 & 3;
                if ((int)v18 <= v19) {
                  unsigned int v18 = v19;
                }
                *(void *)&long long v57 = v12;
                *((void *)&v57 + 1) = v14;
                uint64_t v20 = v54 + 16 * v18;
                unsigned int v21 = *(_DWORD *)(v20 + 8);
                if ((*(_DWORD *)(v20 + 12) & 0x7FFFFFFFu) <= v21)
                {
                  physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v20, &v57);
                }
                else
                {
                  uint64_t v22 = *(void *)v20 + 24 * v21;
                  *(_OWORD *)uint64_t v22 = v57;
                  *(void *)(v22 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v58;
                  ++*(_DWORD *)(v20 + 8);
                }
              }
            }
            unsigned int v29 = 9
                * ((((unsigned __int16)v11 | ((unsigned __int16)v13 << 16))
                  + ~(((unsigned __int16)v11 | ((unsigned __int16)v13 << 16)) << 15)) ^ ((((unsigned __int16)v11 | ((unsigned __int16)v13 << 16)) + ~(((unsigned __int16)v11 | ((unsigned __int16)v13 << 16)) << 15)) >> 10));
            unsigned int v30 = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
            physx::Bp::PairManagerData::removePair((uint64_t)v56, v12, v14, *(_DWORD *)(a2 + 20) & (v30 ^ HIWORD(v30)), v9);
            --v8;
            goto LABEL_23;
          }
          v10[1] = v14;
        }
        ++v9;
LABEL_23:
        if (v9 >= v8) {
          goto LABEL_49;
        }
      }
    }
    goto LABEL_49;
  }
  if (v6 == v5) {
    return result;
  }
  *(_DWORD *)(a2 + 8) = v5;
  uint64_t v56 = (unsigned int *)(a2 + 16);
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  unsigned int v31 = *(_DWORD *)(a2 + 24);
  if (v31)
  {
    unsigned int v32 = 0;
    do
    {
      uint64_t v33 = (int *)(*(void *)(a2 + 48) + 8 * v32);
      int v34 = *v33;
      uint64_t v35 = *v33 & 0x7FFFFFFF;
      int v36 = v33[1];
      uint64_t v37 = v36 & 0x7FFFFFFF;
      if (*v33 < 0)
      {
        uint64_t v46 = *((void *)v4 + 36);
        int v47 = *(_DWORD *)(v46 + 16 * v35) & 3;
        int v48 = *(_DWORD *)(v46 + 16 * v37) & 3;
        if (v47 > v48) {
          int v48 = v47;
        }
        *(void *)&long long v57 = v34 & 0x7FFFFFFF;
        *((void *)&v57 + 1) = v36 & 0x7FFFFFFF;
        uint64_t v49 = (uint64_t)&v4[4 * v48 + 110];
        unsigned int v50 = *(_DWORD *)(v49 + 8);
        if ((*(_DWORD *)(v49 + 12) & 0x7FFFFFFFu) <= v50)
        {
          physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v49, &v57);
        }
        else
        {
          uint64_t v51 = *(void *)v49 + 24 * v50;
          *(_OWORD *)uint64_t v51 = v57;
          *(void *)(v51 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v58;
          ++*(_DWORD *)(v49 + 8);
        }
        *(void *)v33 &= 0x7FFFFFFF7FFFFFFFuLL;
      }
      else
      {
        if ((v36 & 0x80000000) == 0)
        {
          uint64_t v38 = *((void *)v4 + 36);
          unint64_t v39 = *(void *)(v38 + 16 * (*v33 & 0x7FFFFFFF));
          if (v39 >= 4)
          {
            unint64_t v40 = *(void *)(v38 + 16 * (v36 & 0x7FFFFFFF));
            if (v40 >= 4)
            {
              int v41 = v39 & 3;
              int v42 = v40 & 3;
              if (v41 <= v42) {
                int v41 = v42;
              }
              *(void *)&long long v57 = v35;
              *((void *)&v57 + 1) = v37;
              uint64_t v43 = (uint64_t)&v4[4 * v41 + 118];
              unsigned int v44 = *(_DWORD *)(v43 + 8);
              if ((*(_DWORD *)(v43 + 12) & 0x7FFFFFFFu) <= v44)
              {
                physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v43, &v57);
              }
              else
              {
                uint64_t v45 = *(void *)v43 + 24 * v44;
                *(_OWORD *)uint64_t v45 = v57;
                *(void *)(v45 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v58;
                ++*(_DWORD *)(v43 + 8);
              }
            }
          }
          unsigned int v52 = 9
              * ((((unsigned __int16)v34 | ((unsigned __int16)v36 << 16))
                + ~(((unsigned __int16)v34 | ((unsigned __int16)v36 << 16)) << 15)) ^ ((((unsigned __int16)v34 | ((unsigned __int16)v36 << 16)) + ~(((unsigned __int16)v34 | ((unsigned __int16)v36 << 16)) << 15)) >> 10));
          unsigned int v53 = (v52 ^ (v52 >> 6)) + ~((v52 ^ (v52 >> 6)) << 11);
          physx::Bp::PairManagerData::removePair((uint64_t)v56, v35, v37, *(_DWORD *)(a2 + 20) & (v53 ^ HIWORD(v53)), v32);
          --v31;
          continue;
        }
        v33[1] = v37;
      }
      ++v32;
    }
    while (v32 < v31);
  }
LABEL_49:
  return physx::Bp::PairManagerData::shrinkMemory(v56);
}

uint64_t physx::Bp::PersistentAggregateAggregatePair::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 64)) {
    return 1;
  }
  uint64_t v4 = *(void *)(a2 + 264);
  if (*(_DWORD *)(v4 + 4 * *(unsigned int *)(a1 + 68)) == -1) {
    return 1;
  }
  if (*(_DWORD *)(v4 + 4 * *(unsigned int *)(a1 + 72)) == -1) {
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  if (!*(_DWORD *)(v5 + 16)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 88);
  if (!*(_DWORD *)(v6 + 16)) {
    return 1;
  }
  if (*(_DWORD *)(v5 + 32) != -1 || *(_DWORD *)(v6 + 32) != -1) {
    physx::Bp::AABBManager::updatePairs((unsigned int *)a2, a1, a3);
  }
  return 0;
}

void physx::Bp::Aggregate::~Aggregate(physx::Bp::Aggregate *this)
{
  if (*((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  if (*((void *)this + 5)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 5) = 0;
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *((void *)this + 3) = 0;
  }
  int v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 1)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

void physx::Bp::Aggregate::sortBounds(physx::Bp::Aggregate *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 84) = 0;
  uint64_t v1 = *((unsigned int *)this + 4);
  if (v1 >= 2)
  {
    int v3 = (char *)this + 8;
    int v4 = v1 + 1;
    uint64_t v5 = (4 * (v1 + 1));
    if (v5 < 0x401)
    {
      MEMORY[0x270FA5388](this);
      uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0x1FFFFFFF0));
      bzero(v6, (4 * v4));
    }
    else
    {
      uint64_t v6 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v24, (4 * v4), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 903);
    }
    uint64_t v7 = (unsigned int *)*((void *)this + 5);
    unsigned int v10 = *v7;
    unsigned int v8 = v7 + 2;
    unsigned int v9 = v10;
    *(_DWORD *)uint64_t v6 = v10;
    uint64_t v11 = 1;
    char v12 = 1;
    do
    {
      unsigned int v13 = *v8;
      v8 += 2;
      v12 &= v13 >= v9;
      *((_DWORD *)v6 + v11++) = v13;
      unsigned int v9 = v13;
    }
    while (v1 != v11);
    if ((v12 & 1) == 0)
    {
      uint64_t v28 = 0;
      long long v27 = 0u;
      long long v26 = 0u;
      char v29 = 1;
      unsigned int v25 = 0x80000000;
      int v24 = &unk_26E728438;
      *((_DWORD *)v6 + v1) = -1;
      physx::Cm::RadixSortBuffered::Sort((uint64_t)&v24);
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::copy<physx::shdfnd::ReflectionAllocator<unsigned int>>(&v22, (uint64_t)v3);
      if (v1 == -6) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
      }
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (v1 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 945);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v1, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 946);
      uint64_t v16 = v15;
      uint64_t v17 = 0;
      uint64_t v18 = v26;
      do
      {
        uint64_t v19 = *(unsigned int *)(v18 + 4 * v17);
        *(_DWORD *)(*((void *)this + 1) + 4 * v17) = *(_DWORD *)(v22 + 4 * v19);
        *(void *)(v14 + 8 * v17) = *(void *)(*((void *)this + 5) + 8 * v19);
        *(_OWORD *)(v15 + 16 * v17++) = *(_OWORD *)(*((void *)this + 6) + 16 * v19);
      }
      while (v1 != v17);
      for (uint64_t i = 0; i != 6; ++i)
        *(_DWORD *)(v14 + 8 * (v1 + i)) = -1;
      *((_DWORD *)this + 14) = v1;
      if (*((void *)this + 6)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      if (*((void *)this + 5)) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      *((void *)this + 5) = v14;
      *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v16;
      if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0 && v22) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      int v24 = &unk_26E728438;
      physx::Cm::RadixSortBuffered::reset((uint64_t)&v24);
    }
    if (v5 >= 0x401) {
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v24, v6);
    }
  }
}

uint64_t physx::Bp::Aggregate::allocateBounds(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 16);
  if (v1 != *(_DWORD *)(this + 56))
  {
    uint64_t v2 = this;
    *(_DWORD *)(this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v1;
    if (*(void *)(this + 48)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (*(void *)(v2 + 40)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if (v1 == -6)
    {
      *(void *)(v2 + 40) = 0;
    }
    else
    {
      *(void *)(v2 + 40) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (v1 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 976);
      if (!v1)
      {
        this = 0;
LABEL_11:
        *(void *)(v2 + 48) = this;
        return this;
      }
    }
    this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v1, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 977);
    goto LABEL_11;
  }
  return this;
}

uint64_t physx::Bp::Aggregate::computeBounds(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 16);
  int v4 = *(unsigned int **)(result + 8);
  uint64_t v5 = *v4;
  unint64_t v6 = (v3 - 1);
  if (v6 >= 4) {
    int v7 = 4;
  }
  else {
    int v7 = v3 - 1;
  }
  if (v7)
  {
    if (v6 >= 4) {
      unint64_t v6 = 4;
    }
    unsigned int v8 = v4 + 1;
    do
    {
      unsigned int v9 = *v8++;
      _X15 = a2 + 24 * v9;
      __asm { PRFM            #0, [X15] }
      _X14 = a3 + 4 * v9;
      __asm { PRFM            #0, [X14] }
      --v6;
    }
    while (v6);
  }
  uint64_t v18 = a2 + 24 * v5;
  uint64_t v19 = (const float *)(a3 + 4 * v5);
  float32x4_t v20 = vld1q_dup_f32(v19);
  float32x4_t v21 = vsubq_f32(*(float32x4_t *)v18, v20);
  float32x4_t v22 = vaddq_f32(*(float32x4_t *)(v18 + 12), v20);
  if (v21.i32[0] < 0) {
    int v23 = ~v21.i32[0];
  }
  else {
    int v23 = v21.i32[0] | 0x80000000;
  }
  if (v22.i32[0] < 0) {
    int v24 = ~v22.i32[0];
  }
  else {
    int v24 = v22.i32[0] | 0x80000000;
  }
  unsigned int v25 = *(int **)(result + 40);
  long long v26 = *(int32x4_t **)(result + 48);
  *unsigned int v25 = v23;
  v25[1] = v24;
  *long long v26 = vzip2q_s32(vzip1q_s32((int32x4_t)v21, (int32x4_t)v22), vtrn1q_s32((int32x4_t)v21, (int32x4_t)v22));
  if (v3 >= 2)
  {
    long long v27 = v25 + 3;
    for (uint64_t i = 1; i != v3; ++i)
    {
      uint64_t v29 = v4[i];
      if ((int)i + 4 < v3)
      {
        uint64_t v30 = v4[(i + 4)];
        _X17 = a2 + 24 * v30;
        __asm { PRFM            #0, [X17] }
        _X16 = a3 + 4 * v30;
        __asm { PRFM            #0, [X16] }
      }
      uint64_t v35 = a2 + 24 * v29;
      int v36 = (const float *)(a3 + 4 * v29);
      float32x4_t v37 = vld1q_dup_f32(v36);
      float32x4_t v38 = vsubq_f32(*(float32x4_t *)v35, v37);
      float32x4_t v39 = vaddq_f32(*(float32x4_t *)(v35 + 12), v37);
      float32x4_t v21 = vminq_f32(v21, v38);
      int32x4_t v40 = vtrn1q_s32((int32x4_t)v38, (int32x4_t)v39);
      int32x4_t v41 = vzip1q_s32((int32x4_t)v38, (int32x4_t)v39);
      float32x4_t v22 = vmaxq_f32(v22, v39);
      if (v38.i32[0] < 0) {
        int v42 = ~v38.i32[0];
      }
      else {
        int v42 = v38.i32[0] | 0x80000000;
      }
      *(v27 - 1) = v42;
      if (v39.i32[0] < 0) {
        int v43 = ~v39.i32[0];
      }
      else {
        int v43 = v39.i32[0] | 0x80000000;
      }
      *long long v27 = v43;
      v27 += 2;
      v26[i] = vzip2q_s32(v41, v40);
    }
  }
  uint64_t v44 = 0;
  *(_DWORD *)(result + 60) = v21.i32[0];
  *(void *)(result + 64) = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
  *(_DWORD *)(result + 72) = v22.i32[0];
  *(void *)(result + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL).u64[0];
  do
    v25[2 * (v3 + v44++)] = -1;
  while (v44 != 6);
  *(unsigned char *)(result + 84) = 1;
  return result;
}

void physx::Bp::AABBManager::reserveShapeSpace(physx::Bp::AABBManager *this, unsigned int a2)
{
  unsigned int v3 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
  unsigned int v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  int v5 = (v4 | HIWORD(v4)) + 1;
  LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -1;
  physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::VirtualAllocator>::resize((uint64_t)this + 256, v5, &v6);
  long long v6 = 0uLL;
  physx::shdfnd::Array<physx::Bp::VolumeData,physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>>::resize((uint64_t)this + 288, v5, &v6);
  physx::shdfnd::Array<float,physx::shdfnd::VirtualAllocator>::resizeUninitialized(*((void *)this + 35), v5);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 192, v5);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 208, v5);
}

uint64_t physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::VirtualAllocator>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 20) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::VirtualAllocator>::recreate((void *)result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 16);
  if (v6 < a2)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    unsigned int v8 = (_DWORD *)(v7 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7 + 4 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::VolumeData,physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::Bp::VolumeData,physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 16 * a2;
    unsigned int v8 = (_OWORD *)(*(void *)v5 + 16 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<float,physx::shdfnd::VirtualAllocator>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 20) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<float,physx::shdfnd::VirtualAllocator>::recreate((void *)result, a2);
  }
  *(_DWORD *)(v3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a2;
  return result;
}

uint64_t physx::Bp::AABBManager::AABBManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, void *a7, uint64_t a8, int a9, int a10)
{
  uint64_t v17 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  }
  else {
    uint64_t v18 = "<allocation names disabled>";
  }
  uint64_t v19 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v17 + 24) + 16))(v17 + 24, 72, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)a1 = v19;
  physx::shdfnd::MutexImpl::MutexImpl(v19);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 8) = &unk_26E723B10;
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a8;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 64) = &unk_26E723DA8;
  *(void *)(a1 + 72) = a8;
  *(void *)(a1 + 104) = a1;
  *(void *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = "AABBManager::postBroadPhaseStage3";
  *(_OWORD *)(a1 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 120) = &unk_26E723A80;
  *(void *)(a1 + 128) = a8;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 21re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 17re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 240) = *a7;
  *(void *)(a1 + 25re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *a7;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = a4;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 320) = *a7;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 344) = *a7;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 368) = *a7;
  *(_OWORD *)(a1 + 37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(void *)(a1 + 392) = a2;
  *(void *)(a1 + 400) = a3;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 45re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 517) = 0;
  *(unsigned char *)(a1 + 525) = 1;
  *(void *)(a1 + 528) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 57re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 53re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 0;
  *(void *)(a1 + 61re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = -3233808384;
  *(void *)(a1 + 624) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 576, 0x40u, 0);
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 672) = -3233808384;
  *(void *)(a1 + 680) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 632, 0x40u, 0);
  *(_OWORD *)(a1 + 688) = 0u;
  *(_DWORD *)(a1 + 704) = -2;
  *(_OWORD *)(a1 + 7re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 768) = -3233808384;
  *(void *)(a1 + 77re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  physx::shdfnd::internal::HashBase<physx::Bp::Pair,physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::internal::HashSetBase<physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(a1 + 728, 0x40u, 0);
  *(void *)(a1 + 784) = a8;
  uint64_t v20 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>::getName() [T = physx::shdfnd::SListImpl]";
  }
  else {
    float32x4_t v21 = "<allocation names disabled>";
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v20 + 24) + 16))(v20 + 24, 72, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSList.h", 103);
  *(void *)(a1 + 792) = v22;
  *(void *)uint64_t v22 = 0;
  pthread_mutex_init((pthread_mutex_t *)(v22 + 8), 0);
  if (a6 <= 1) {
    unsigned int v23 = 1;
  }
  else {
    unsigned int v23 = a6;
  }
  physx::Bp::AABBManager::reserveShapeSpace((physx::Bp::AABBManager *)a1, v23);
  *(unsigned char *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 30re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 257;
  *(unsigned char *)(a1 + 308) = a10 != 2;
  *(unsigned char *)(a1 + 305) = a10 != 2;
  *(unsigned char *)(a1 + 314) = 1;
  *(unsigned char *)(a1 + 309) = a9 != 2;
  *(_DWORD *)(a1 + 310) = 16843009;
  *(_DWORD *)(a1 + 315) = 16843009;
  *(unsigned char *)(a1 + 319) = 1;
  return a1;
}

uint64_t physx::Bp::AABBManager::destroy(physx::Bp::AABBManager *this)
{
  uint64_t v2 = (void *)((char *)this + 576);
  physx::Bp::releasePairs((uint64_t)this + 576);
  physx::Bp::releasePairs((uint64_t)this + 632);
  uint64_t v3 = *((unsigned int *)this + 136);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = *((unsigned int *)this + 133);
      if (v5 == -1)
      {
        uint64_t v6 = *((void *)this + 67);
LABEL_7:
        uint64_t v8 = *(void *)(v6 + 8 * i);
        if (v8)
        {
          physx::Bp::Aggregate::~Aggregate(*(physx::Bp::Aggregate **)(v6 + 8 * i));
          (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
        }
      }
      else
      {
        while (i != v5)
        {
          uint64_t v6 = *((void *)this + 67);
          uint64_t v7 = *(void *)(v6 + 8 * v5);
          uint64_t v5 = v7;
          if (v7 == -1) {
            goto LABEL_7;
          }
        }
      }
    }
  }
  unsigned int v9 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)this + 99));
  if (v9)
  {
    unsigned int v10 = v9;
    do
    {
      for (uint64_t j = 0; j != -4; j -= 2)
      {
        int v12 = HIDWORD(v10[j + 8]);
        if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && v10[j + 7] != 0) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
      }
      for (uint64_t k = 0; k != -4; k -= 2)
      {
        int v15 = HIDWORD(v10[k + 4]);
        if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && v10[k + 3] != 0) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
      }
      (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
      unsigned int v10 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)this + 99));
    }
    while (v10);
  }
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT((uint64_t)this + 792);
  if (*((void *)this + 91)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v17 = *((_DWORD *)this + 181);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && *((void *)this + 89)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v18 = *((_DWORD *)this + 175);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((void *)this + 86)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 79)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*v2) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v19 = *((_DWORD *)this + 141);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((void *)this + 69)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v20 = *((_DWORD *)this + 137);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((void *)this + 67)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  for (uint64_t m = 0; m != -32; m -= 16)
  {
    int v22 = *(_DWORD *)((char *)this + m + 500);
    if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + m + 488) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  for (uint64_t n = 0; n != -32; n -= 16)
  {
    int v25 = *(_DWORD *)((char *)this + n + 468);
    if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + n + 456) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v27 = *((_DWORD *)this + 109);
  if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && *((void *)this + 53) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v29 = *((_DWORD *)this + 105);
  if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0 && *((void *)this + 51)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v30 = *((_DWORD *)this + 97);
  if ((v30 & 0x80000000) == 0 && (v30 & 0x7FFFFFFF) != 0 && *((void *)this + 47)) {
    (*(void (**)(void))(**((void **)this + 46) + 24))(*((void *)this + 46));
  }
  int v31 = *((_DWORD *)this + 91);
  if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0 && *((void *)this + 44)) {
    (*(void (**)(void))(**((void **)this + 43) + 24))(*((void *)this + 43));
  }
  int v32 = *((_DWORD *)this + 85);
  if ((v32 & 0x80000000) == 0 && (v32 & 0x7FFFFFFF) != 0 && *((void *)this + 41)) {
    (*(void (**)(void))(**((void **)this + 40) + 24))(*((void *)this + 40));
  }
  int v33 = *((_DWORD *)this + 75);
  if ((v33 & 0x80000000) == 0 && (v33 & 0x7FFFFFFF) != 0 && *((void *)this + 36)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v34 = *((_DWORD *)this + 69);
  if ((v34 & 0x80000000) == 0 && (v34 & 0x7FFFFFFF) != 0 && *((void *)this + 33)) {
    (*(void (**)(void))(**((void **)this + 32) + 24))(*((void *)this + 32));
  }
  if (*((void *)this + 28) && (*((_DWORD *)this + 58) & 0x80000000) == 0) {
    (*(void (**)(void))(**((void **)this + 30) + 24))(*((void *)this + 30));
  }
  *((void *)this + 28) = 0;
  if (*((void *)this + 26) && (*((_DWORD *)this + 54) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  if (*((void *)this + 24) && (*((_DWORD *)this + 50) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 24) = 0;
  *((void *)this + 15) = &unk_26E7231E8;
  *((void *)this + 17) = 0;
  *((void *)this + 8) = &unk_26E7231E8;
  *((void *)this + 10) = 0;
  *((void *)this + 1) = &unk_26E7231E8;
  *((void *)this + 3) = 0;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this);
  uint64_t v35 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  return v35();
}

uint64_t physx::Bp::releasePairs(uint64_t result)
{
  if (*(_DWORD *)(result + 32))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int **)(result + 24);
    uint64_t v3 = *v2;
    if (v3 == -1)
    {
      uint64_t v4 = 0;
      while (*(_DWORD *)(result + 36) - 1 != v4)
      {
        uint64_t v3 = v2[++v4];
        if (v3 != -1) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      LODWORD(v4) = 0;
      do
      {
LABEL_8:
        uint64_t result = *(void *)(*(void *)(v1 + 8) + 16 * v3 + 8);
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
        uint64_t v3 = *(unsigned int *)(*(void *)(v1 + 16) + 4 * v3);
      }
      while (v3 != -1);
      while (*(_DWORD *)(v1 + 36) - 1 != v4)
      {
        LODWORD(v4) = v4 + 1;
        uint64_t v3 = *(unsigned int *)(*(void *)(v1 + 24) + 4 * v4);
        if (v3 != -1) {
          goto LABEL_8;
        }
      }
    }
  }
  return result;
}

void physx::Bp::AABBManager::reserveSpaceForBounds(physx::Bp::AABBManager *this, unsigned int a2)
{
  unsigned int v4 = a2 + 1;
  if (v4 >= *((_DWORD *)this + 74)) {
    physx::Bp::AABBManager::reserveShapeSpace(this, v4);
  }
  *(_DWORD *)(*((void *)this + 33) + 4 * a2) = -1;
  uint64_t v5 = *((void *)this + 36);
  *(_DWORD *)(*(void *)(*((void *)this + 35) + 8) + 4 * a2) = 0;
  uint64_t v6 = v5 + 16 * a2;
  *(_DWORD *)(v6 + 8) = -1;
  *(void *)uint64_t v6 = 0;
}

uint64_t physx::Bp::AABBManager::addBounds(physx::Bp::AABBManager *this, unsigned int a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6, float a7)
{
  unsigned int v14 = a2 + 1;
  if (a2 + 1 >= *((_DWORD *)this + 74)) {
    physx::Bp::AABBManager::reserveShapeSpace(this, a2 + 1);
  }
  unsigned int v15 = *((_DWORD *)this + 130);
  if (v14 > v15) {
    unsigned int v15 = v14;
  }
  *((_DWORD *)this + 130) = v15;
  *(_DWORD *)(*((void *)this + 33) + 4 * a2) = a3;
  uint64_t v16 = *((void *)this + 36);
  *(float *)(*(void *)(*((void *)this + 35) + 8) + 4 * a2) = a7;
  *(void *)(v16 + 16 * a2) = a4 & 0xFFFFFFFFFFFFFFFCLL | a6;
  if (a5 == -1)
  {
    *(_DWORD *)(v16 + 16 * a2 + 8) = -1;
    uint64_t v24 = *((void *)this + 26);
    uint64_t v25 = a2 >> 5;
    int v26 = *(_DWORD *)(v24 + 4 * v25);
    int v27 = 1 << a2;
    if ((v26 & (1 << a2)) != 0)
    {
      int v28 = v26 & ~v27;
    }
    else
    {
      uint64_t v24 = *((void *)this + 24);
      int v28 = *(_DWORD *)(v24 + 4 * v25) | v27;
    }
    *(_DWORD *)(v24 + 4 * v25) = v28;
    *((unsigned char *)this + 525) = 1;
  }
  else
  {
    *(_DWORD *)(v16 + 16 * a2 + 8) = 2 * a5;
    *((unsigned char *)this + 525) = 1;
    int v17 = *(unsigned int **)(*((void *)this + 67) + 8 * a5);
    if (!v17[4])
    {
      unint64_t v18 = *v17;
      uint64_t v19 = *((void *)this + 26);
      unint64_t v20 = v18 >> 5;
      int v21 = *(_DWORD *)(v19 + 4 * (v18 >> 5));
      int v22 = 1 << v18;
      if ((v21 & (1 << v18)) != 0)
      {
        int v23 = v21 & ~v22;
      }
      else
      {
        uint64_t v19 = *((void *)this + 24);
        int v23 = *(_DWORD *)(v19 + 4 * v20) | v22;
      }
      *(_DWORD *)(v19 + 4 * v20) = v23;
    }
    unsigned int v32 = a2;
    uint64_t v29 = v17[4];
    if ((v17[5] & 0x7FFFFFFF) <= v29)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)(v17 + 2), &v32);
    }
    else
    {
      *(_DWORD *)(*((void *)v17 + 1) + 4 * v29) = a2;
      ++v17[4];
    }
    if (v17[8] == -1)
    {
      uint64_t v30 = *((unsigned int *)this + 140);
      v17[8] = v30;
      int v33 = v17;
      if ((*((_DWORD *)this + 141) & 0x7FFFFFFFu) <= v30)
      {
        physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack((uint64_t)this + 552, &v33);
      }
      else
      {
        *(void *)(*((void *)this + 69) + 8 * v30) = v17;
        *((_DWORD *)this + 140) = v30 + 1;
      }
    }
  }
  return 1;
}

uint64_t physx::Bp::AABBManager::removeBounds(uint64_t this, unsigned int a2)
{
  uint64_t v2 = this;
  uint64_t v3 = *(void *)(this + 288);
  uint64_t v4 = a2;
  uint64_t v5 = *(unsigned int *)(v3 + 16 * a2 + 8);
  if (v5 == -1)
  {
    uint64_t v9 = *(void *)(this + 192);
    uint64_t v10 = a2 >> 5;
    int v11 = *(_DWORD *)(v9 + 4 * v10);
    int v12 = 1 << a2;
    if ((v11 & (1 << a2)) != 0)
    {
      int v13 = v11 & ~v12;
    }
    else
    {
      uint64_t v9 = *(void *)(this + 208);
      int v13 = *(_DWORD *)(v9 + 4 * v10) | v12;
    }
    *(_DWORD *)(v9 + 4 * v10) = v13;
    *(unsigned char *)(this + 525) = 1;
  }
  else
  {
    uint64_t v6 = *(unsigned int **)(*(void *)(this + 536) + ((4 * v5) & 0x3FFFFFFF8));
    uint64_t v7 = v6[4];
    if (v7)
    {
      uint64_t v8 = 0;
      while (*(_DWORD *)(*((void *)v6 + 1) + 4 * v8) != a2)
      {
        if (v7 == ++v8) {
          goto LABEL_13;
        }
      }
    }
    else
    {
      LODWORD(v8) = 0;
    }
    if (v8 != v7)
    {
      uint64_t v14 = *((void *)v6 + 1);
      unsigned int v15 = v7 - 1;
      unsigned char v6[4] = v15;
      *(_DWORD *)(v14 + 4 * v8) = *(_DWORD *)(v14 + 4 * v15);
      LODWORD(v7) = v6[4];
    }
    if (v7)
    {
LABEL_13:
      if (v6[8] == -1)
      {
        uint64_t v16 = *(unsigned int *)(this + 560);
        v6[8] = v16;
        int v27 = v6;
        if ((*(_DWORD *)(this + 564) & 0x7FFFFFFFu) <= v16)
        {
          this = physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack(this + 552, &v27);
        }
        else
        {
          *(void *)(*(void *)(this + 552) + 8 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v6;
          *(_DWORD *)(this + 560) = v16 + 1;
        }
      }
    }
    else
    {
      unint64_t v17 = *v6;
      uint64_t v18 = *(void *)(this + 192);
      unint64_t v19 = v17 >> 5;
      int v20 = *(_DWORD *)(v18 + 4 * (v17 >> 5));
      int v21 = 1 << v17;
      if ((v20 & v21) != 0)
      {
        int v22 = v20 & ~v21;
      }
      else
      {
        uint64_t v18 = *(void *)(this + 208);
        int v22 = *(_DWORD *)(v18 + 4 * v19) | v21;
      }
      *(_DWORD *)(v18 + 4 * v19) = v22;
      uint64_t v23 = v6[8];
      if (v23 != -1)
      {
        uint64_t v24 = *(void *)(this + 552);
        unsigned int v25 = *(_DWORD *)(this + 560) - 1;
        *(_DWORD *)(this + 560) = v25;
        *(void *)(v24 + 8 * v23) = *(void *)(v24 + 8 * v25);
        if (v23 < v25) {
          *(_DWORD *)(*(void *)(*(void *)(this + 552) + 8 * v23) + 32) = v23;
        }
        v6[8] = -1;
      }
    }
    *(unsigned char *)(v2 + 525) = 1;
    uint64_t v3 = *(void *)(v2 + 288);
  }
  *(_DWORD *)(*(void *)(v2 + 264) + 4 * v4) = -1;
  *(_DWORD *)(*(void *)(*(void *)(v2 + 280) + 8) + 4 * v4) = 0;
  uint64_t v26 = v3 + 16 * v4;
  *(_DWORD *)(v26 + 8) = -1;
  *(void *)uint64_t v26 = 0;
  return this;
}

uint64_t physx::Bp::AABBManager::createAggregate(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate>::getName() [T = physx::Bp::Aggregate]";
  }
  else {
    uint64_t v10 = "<allocation names disabled>";
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v9 + 24) + 16))(v9 + 24, 88, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 1319);
  uint64_t v12 = 0;
  *(_DWORD *)uint64_t v11 = a2;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(unsigned char *)(v11 + 84) = 0;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(_DWORD *)(v11 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(_DWORD *)(v11 + 32) = -1;
  if (a5)
  {
    uint64_t v13 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v14 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::PersistentSelfCollisionPairs>::getName() [T"
    }
            " = physx::Bp::PersistentSelfCollisionPairs]";
    else {
      uint64_t v14 = "<allocation names disabled>";
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v13 + 24) + 16))(v13 + 24, 80, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 883);
    *(_DWORD *)(v12 + 8) = -1;
    *(void *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    *(void *)(v12 + 40) = 0;
    *(void *)(v12 + 48) = 0;
    *(void *)(v12 + 32) = 0;
    *(_DWORD *)(v12 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(unsigned char *)(v12 + 64) = 0;
    *(void *)uint64_t v12 = &unk_26E7239C0;
    *(void *)(v12 + 72) = v11;
  }
  *(void *)(v11 + 24) = v12;
  uint64_t v27 = v11;
  uint64_t v15 = *(unsigned int *)(a1 + 532);
  if (v15 == -1)
  {
    uint64_t v15 = *(unsigned int *)(a1 + 544);
    if ((*(_DWORD *)(a1 + 548) & 0x7FFFFFFFu) <= v15)
    {
      physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack(a1 + 536, &v27);
    }
    else
    {
      *(void *)(*(void *)(a1 + 536) + 8 * v15) = v11;
      *(_DWORD *)(a1 + 544) = v15 + 1;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 536);
    *(_DWORD *)(a1 + 532) = *(void *)(v16 + 8 * v15);
    *(void *)(v16 + 8 * v15) = v11;
  }
  int v17 = *(_DWORD *)(a1 + 720);
  if (v17)
  {
    unsigned int v18 = v17 - 1;
    int v19 = *(_DWORD *)(*(void *)(a1 + 712) + 4 * v18);
    *(_DWORD *)(a1 + 720) = v18;
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 704);
    *(_DWORD *)(a1 + 704) = v20 - 1;
    int v19 = (4 * v20) | 3;
  }
  if (a2 + 1 >= *(_DWORD *)(a1 + 296)) {
    physx::Bp::AABBManager::reserveShapeSpace((physx::Bp::AABBManager *)a1, a2 + 1);
  }
  unsigned int v21 = *(_DWORD *)(a1 + 520);
  if (a2 + 1 > v21) {
    unsigned int v21 = a2 + 1;
  }
  *(_DWORD *)(a1 + 520) = v21;
  *(_DWORD *)(*(void *)(a1 + 264) + 4 * a2) = v19;
  uint64_t v22 = *(void *)(a1 + 288);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 280) + 8) + 4 * a2) = 0;
  uint64_t v23 = v22 + 16 * a2;
  *(void *)uint64_t v23 = a4;
  *(_DWORD *)(v23 + 8) = (2 * v15) | 1;
  uint64_t v24 = *(void *)(a1 + 400);
  uint64_t v25 = *(void *)(v24 + 8) + 24 * a2;
  *(_OWORD *)uint64_t v25 = xmmword_23441FAD0;
  *(int32x2_t *)(v25 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = vdup_n_s32(0xFE7FFFFF);
  *(unsigned char *)(v24 + 24) = 1;
  ++*(_DWORD *)(a1 + 528);
  return v15;
}

uint64_t physx::Bp::AABBManager::destroyAggregate(uint64_t a1, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v8 = a4;
  uint64_t v9 = *(physx::Bp::Aggregate **)(*(void *)(a1 + 536) + 8 * a4);
  unint64_t v10 = *(unsigned int *)v9;
  uint64_t v11 = *((unsigned int *)v9 + 8);
  if (v11 != -1)
  {
    uint64_t v12 = *(void *)(a1 + 552);
    unsigned int v13 = *(_DWORD *)(a1 + 560) - 1;
    *(_DWORD *)(a1 + 560) = v13;
    *(void *)(v12 + 8 * v11) = *(void *)(v12 + 8 * v13);
    if (v11 < v13) {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 552) + 8 * v11) + 32) = v11;
    }
    *((_DWORD *)v9 + 8) = -1;
  }
  uint64_t v14 = *(void *)(a1 + 192);
  unint64_t v15 = v10 >> 5;
  int v16 = *(_DWORD *)(v14 + 4 * (v10 >> 5));
  int v17 = 1 << v10;
  if ((v16 & (1 << v10)) != 0)
  {
    int v18 = v16 & ~v17;
  }
  else
  {
    if (!*((_DWORD *)v9 + 4)) {
      goto LABEL_10;
    }
    uint64_t v14 = *(void *)(a1 + 208);
    int v18 = *(_DWORD *)(v14 + 4 * v15) | v17;
  }
  *(_DWORD *)(v14 + 4 * v15) = v18;
LABEL_10:
  physx::Bp::Aggregate::~Aggregate(v9);
  (*(void (**)(uint64_t, physx::Bp::Aggregate *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v9);
  *(void *)(*(void *)(a1 + 536) + 8 * v8) = *(unsigned int *)(a1 + 532);
  *(_DWORD *)(a1 + 532) = a4;
  uint64_t v19 = *(void *)(a1 + 264);
  *a3 = *(_DWORD *)(v19 + 4 * v10);
  int v20 = *(_DWORD *)(v19 + 4 * v10);
  *a2 = v10;
  int v25 = v20;
  uint64_t v21 = *(unsigned int *)(a1 + 720);
  if ((*(_DWORD *)(a1 + 724) & 0x7FFFFFFFu) <= v21)
  {
    physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::ReflectionAllocator<physx::Bp::FilterGroup::Enum>>::growAndPushBack(a1 + 712, &v25);
    uint64_t v19 = *(void *)(a1 + 264);
  }
  else
  {
    *(_DWORD *)(*(void *)(a1 + 712) + 4 * v21) = v20;
    *(_DWORD *)(a1 + 720) = v21 + 1;
  }
  *(_DWORD *)(v19 + 4 * v10) = -1;
  uint64_t v22 = *(void *)(a1 + 288);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 280) + 8) + 4 * v10) = 0;
  uint64_t v23 = v22 + 16 * v10;
  *(_DWORD *)(v23 + 8) = -1;
  *(void *)uint64_t v23 = 0;
  *(unsigned char *)(a1 + 525) = 1;
  --*(_DWORD *)(a1 + 528);
  return 1;
}

uint64_t physx::Bp::AggregateBoundsComputationTask::runInternal(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 52);
  if (v1)
  {
    uint64_t v2 = *(void *)(this + 40);
    uint64_t v3 = *(void *)(*(void *)(v2 + 280) + 8);
    uint64_t v4 = (uint64_t *)(*(void *)(this + 56) + 8 * *(unsigned int *)(this + 48));
    uint64_t v5 = *(void *)(v2 + 400);
    int v6 = v1 - 1;
    if (v1 == 1)
    {
      uint64_t v7 = (uint64_t *)(*(void *)(this + 56) + 8 * *(unsigned int *)(this + 48));
    }
    else
    {
      uint64_t v7 = (uint64_t *)(*(void *)(this + 56) + 8 * *(unsigned int *)(this + 48));
      do
      {
        uint64_t v9 = v7[1];
        ++v7;
        _X9 = v9;
        __asm
        {
          PRFM            #0, [X9]
          PRFM            #0, [X9,#0x40]
        }
        physx::Bp::Aggregate::computeBounds(*v4, *(void *)(v5 + 8), v3);
        uint64_t v4 = v7;
        --v6;
      }
      while (v6);
    }
    uint64_t v16 = *v7;
    uint64_t v17 = *(void *)(v5 + 8);
    return physx::Bp::Aggregate::computeBounds(v16, v17, v3);
  }
  return this;
}

uint64_t physx::Bp::FinalizeUpdateTask::runInternal(physx::Bp::FinalizeUpdateTask *this)
{
  return physx::Bp::AABBManager::finalizeUpdate(*((void *)this + 5), *((_DWORD *)this + 12), *((void *)this + 7), *((void *)this + 3), *((void *)this + 8));
}

uint64_t physx::Bp::AABBManager::finalizeUpdate(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 >= 2)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 560);
    if (v5)
    {
      int v6 = *(unsigned int ***)(a1 + 552);
      uint64_t v7 = *(void *)(*(void *)(a1 + 400) + 8);
      do
      {
        uint64_t v8 = *v6++;
        uint64_t v9 = (void *)(v7 + 24 * *v8);
        void *v9 = *(void *)(v8 + 15);
        v9[1] = *(void *)(v8 + 17);
        char v9[2] = *(void *)(v8 + 19);
        --v5;
      }
      while (v5);
    }
  }
  int v10 = *(_DWORD *)(a1 + 336);
  int v11 = *(_DWORD *)(a1 + 360);
  int v12 = *(_DWORD *)(a1 + 384);
  *(unsigned char *)(a1 + 525) = 0;
  if (v10 || v12 || v11) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 392) + 88))(*(void *)(a1 + 392));
  }
  unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)a5 + 40);
  return v13(a5);
}

uint64_t physx::Bp::AABBManager::updateAABBsAndBP(physx::Bp::AABBManager *this, unsigned int a2, pthread_mutex_t **a3, physx::PxcScratchAllocator *a4, char a5, physx::PxBaseTask *a6, physx::PxBaseTask *a7)
{
  if (*((unsigned char *)this + 525)) {
    a5 = 1;
  }
  *((unsigned char *)this + 525) = a5;
  *((void *)this + 63) = a4;
  *((void *)this + 64) = a7;
  if (a2 >= 2)
  {
    *((void *)this + 20) = this;
    *((_DWORD *)this + 42) = a2;
    *((void *)this + 22) = a4;
    *((void *)this + 23) = a7;
    *((_DWORD *)this + 38) = 1;
    *((void *)this + re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = a6;
    if (a6)
    {
      (*(void (**)(physx::PxBaseTask *))(*(void *)a6 + 32))(a6);
      *((void *)this + 17) = *(void *)(*((void *)this + 18) + 16);
    }
  }
  unint64_t v73 = a4;
  unint64_t v74 = a6;
  unsigned int v75 = a7;
  physx::Bp::resetOrClear<physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>>((uint64_t)this + 320);
  uint64_t v14 = *((void *)this + 24);
  if (v14)
  {
    uint64_t v15 = *((_DWORD *)this + 50) & 0x7FFFFFFF;
    uint64_t v16 = 1;
    while (v15)
    {
      int v17 = v15 - 1;
      if (*(_DWORD *)(v14 - 4 + 4 * v15--))
      {
        uint64_t v16 = (v17 & 0x7FFFFFF) + 1;
        break;
      }
    }
    uint64_t v19 = 0;
    do
    {
      for (unsigned int i = *(_DWORD *)(v14 + 4 * v19); i; i &= i - 1)
      {
        int v21 = __clz(__rbit32(i)) | (32 * v19);
        LODWORD(v77) = v21;
        uint64_t v22 = *((unsigned int *)this + 84);
        if ((*((_DWORD *)this + 85) & 0x7FFFFFFFu) <= v22)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 80, &v77);
        }
        else
        {
          *(_DWORD *)(*((void *)this + 41) + 4 * v22) = v21;
          ++*((_DWORD *)this + 84);
        }
      }
      ++v19;
    }
    while (v19 != v16);
  }
  physx::Bp::resetOrClear<physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>>((uint64_t)this + 344);
  if (*((unsigned char *)this + 524))
  {
    *((_WORD *)this + 262) = 256;
    int v76 = 0;
    if (*((_DWORD *)this + 130))
    {
      unint64_t v23 = 0;
      uint64_t v24 = 8;
      while (1)
      {
        if (*(_DWORD *)(*((void *)this + 33) + 4 * v23) != -1)
        {
          uint64_t v25 = *(unsigned int *)(*((void *)this + 36) + v24);
          if (v25 == -1) {
            goto LABEL_31;
          }
          if (v25)
          {
            uint64_t v26 = *(unsigned int **)(*((void *)this + 67) + ((4 * v25) & 0x3FFFFFFF8));
            if (v26[4]) {
              break;
            }
          }
        }
LABEL_35:
        int v76 = ++v23;
        v24 += 16;
        if (v23 >= *((unsigned int *)this + 130)) {
          goto LABEL_78;
        }
      }
      if (v26[8] == -1)
      {
        uint64_t v27 = *((unsigned int *)this + 140);
        uint8_t v26[8] = v27;
        unsigned int v77 = v26;
        if ((*((_DWORD *)this + 141) & 0x7FFFFFFFu) <= v27)
        {
          physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack((uint64_t)this + 552, &v77);
        }
        else
        {
          *(void *)(*((void *)this + 69) + 8 * v27) = v26;
          *((_DWORD *)this + 140) = v27 + 1;
        }
      }
      physx::Bp::Aggregate::allocateBounds((uint64_t)v26);
      physx::Bp::Aggregate::computeBounds((uint64_t)v26, *(void *)(*((void *)this + 50) + 8), *(void *)(*((void *)this + 35) + 8));
      int v28 = (void *)(*(void *)(*((void *)this + 50) + 8) + 24 * *v26);
      *int v28 = *(void *)(v26 + 15);
      v28[1] = *(void *)(v26 + 17);
      v28[2] = *(void *)(v26 + 19);
LABEL_31:
      if (((*(_DWORD *)(*((void *)this + 24) + 4 * (v23 >> 5)) >> v23) & 1) == 0)
      {
        uint64_t v29 = *((unsigned int *)this + 90);
        if ((*((_DWORD *)this + 91) & 0x7FFFFFFFu) <= v29)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 86, &v76);
        }
        else
        {
          *(_DWORD *)(*((void *)this + 44) + 4 * v29) = v23;
          ++*((_DWORD *)this + 90);
        }
      }
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v30 = *((void *)this + 28);
    if (v30)
    {
      uint64_t v31 = *((_DWORD *)this + 58) & 0x7FFFFFFF;
      uint64_t v32 = 1;
      while (v31)
      {
        int v33 = v31 - 1;
        if (*(_DWORD *)(v30 - 4 + 4 * v31--))
        {
          uint64_t v32 = (v33 & 0x7FFFFFF) + 1;
          break;
        }
      }
      uint64_t v35 = 0;
      do
      {
        unsigned int v36 = *(_DWORD *)(v30 + 4 * v35);
        if (v36)
        {
          int v37 = 32 * v35;
          do
          {
            unsigned int v38 = __clz(__rbit32(v36));
            unsigned int v39 = v38 | v37;
            int v76 = v38 | v37;
            if (((*(_DWORD *)(*((void *)this + 24) + 4 * v35) >> v38) & 1) == 0)
            {
              uint64_t v40 = *(unsigned int *)(*((void *)this + 36) + 16 * v39 + 8);
              if (v40 == -1)
              {
                uint64_t v43 = *((unsigned int *)this + 90);
                if ((*((_DWORD *)this + 91) & 0x7FFFFFFFu) <= v43)
                {
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 86, &v76);
                }
                else
                {
                  *(_DWORD *)(*((void *)this + 44) + 4 * v43) = v39;
                  ++*((_DWORD *)this + 90);
                }
              }
              else
              {
                int32x4_t v41 = *(unsigned int **)(*((void *)this + 67) + ((4 * v40) & 0x3FFFFFFF8));
                if (v41[8] == -1)
                {
                  uint64_t v42 = *((unsigned int *)this + 140);
                  _OWORD v41[8] = v42;
                  unsigned int v77 = v41;
                  if ((*((_DWORD *)this + 141) & 0x7FFFFFFFu) <= v42)
                  {
                    physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack((uint64_t)this + 552, &v77);
                  }
                  else
                  {
                    *(void *)(*((void *)this + 69) + 8 * v42) = v41;
                    *((_DWORD *)this + 140) = v42 + 1;
                  }
                }
              }
            }
            v36 &= v36 - 1;
          }
          while (v36);
        }
        ++v35;
      }
      while (v35 != v32);
    }
    uint64_t v44 = *((unsigned int *)this + 140);
    if (v44)
    {
      uint64_t v45 = 0;
      do
      {
        uint64_t v46 = *((void *)this + 69);
        _X26 = *(unsigned int **)(v46 + v45);
        if (8 * (v44 - 1) != v45) {
          __asm { PRFM            #0, [X26] }
        }
        physx::Bp::Aggregate::allocateBounds(*(void *)(v46 + v45));
        if (a2 >= 2)
        {
          unsigned int v53 = *_X26;
        }
        else
        {
          physx::Bp::Aggregate::computeBounds((uint64_t)_X26, *(void *)(*((void *)this + 50) + 8), *(void *)(*((void *)this + 35) + 8));
          unsigned int v53 = *_X26;
          uint64_t v54 = (void *)(*(void *)(*((void *)this + 50) + 8) + 24 * *_X26);
          *uint64_t v54 = *(void *)(_X26 + 15);
          v54[1] = *(void *)(_X26 + 17);
          v54[2] = *(void *)(_X26 + 19);
        }
        if (((*(_DWORD *)(*((void *)this + 24) + 4 * (v53 >> 5)) >> v53) & 1) == 0)
        {
          uint64_t v55 = *((unsigned int *)this + 90);
          if ((*((_DWORD *)this + 91) & 0x7FFFFFFFu) <= v55)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 86, _X26);
          }
          else
          {
            *(_DWORD *)(*((void *)this + 44) + 4 * v55) = v53;
            ++*((_DWORD *)this + 90);
          }
        }
        v45 += 8;
      }
      while (8 * v44 != v45);
      if (a2 >= 2)
      {
        unsigned int v56 = v44;
        if (v44 > a2) {
          unsigned int v56 = v44 / a2;
        }
        int v57 = 0;
        do
        {
          uint64_t v58 = physx::Cm::FlushPool::allocate(a3, 64, 0x10u);
          unint64_t v59 = (void *)v58;
          uint64_t v60 = *((void *)this + 98);
          *(void *)(v58 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
          *(void *)(v58 + 24) = 0;
          *(_DWORD *)(v58 + 32) = 0;
          *(void *)uint64_t v58 = &unk_26E7239F0;
          *(void *)(v58 + 8) = v60;
          *(void *)(v58 + 48) = 0;
          *(void *)(v58 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
          *(void *)(v58 + 40) = 0;
          if (v44 >= v56) {
            unsigned int v61 = v56;
          }
          else {
            unsigned int v61 = v44;
          }
          uint64_t v62 = *((void *)this + 69);
          *(void *)(v58 + 40) = this;
          *(_DWORD *)(v58 + 48) = v57;
          *(_DWORD *)(v58 + 52) = v61;
          *(void *)(v58 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v62;
          v57 += v61;
          LODWORD(v44) = v44 - v61;
          *(_DWORD *)(v58 + 32) = 1;
          *(void *)(v58 + 24) = (char *)this + 120;
          (*(void (**)(char *))(*((void *)this + 15) + 32))((char *)this + 120);
          v59[2] = *(void *)(v59[3] + 16);
          (*(void (**)(void *))(*v59 + 40))(v59);
        }
        while (v44);
      }
      *((unsigned char *)this + 525) = 1;
      physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(*((void *)this + 44), *((_DWORD *)this + 90), (uint64_t)&v77, (uint64_t)&v76, 32);
    }
  }
LABEL_78:
  physx::Bp::resetOrClear<physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>>((uint64_t)this + 368);
  uint64_t v63 = *((void *)this + 26);
  if (v63)
  {
    uint64_t v64 = *((_DWORD *)this + 54) & 0x7FFFFFFF;
    uint64_t v65 = 1;
    while (v64)
    {
      int v66 = v64 - 1;
      if (*(_DWORD *)(v63 - 4 + 4 * v64--))
      {
        uint64_t v65 = (v66 & 0x7FFFFFF) + 1;
        break;
      }
    }
    uint64_t v68 = 0;
    do
    {
      for (unsigned int j = *(_DWORD *)(v63 + 4 * v68); j; j &= j - 1)
      {
        int v70 = __clz(__rbit32(j)) | (32 * v68);
        LODWORD(v77) = v70;
        uint64_t v71 = *((unsigned int *)this + 96);
        if ((*((_DWORD *)this + 97) & 0x7FFFFFFFu) <= v71)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 92, &v77);
        }
        else
        {
          *(_DWORD *)(*((void *)this + 47) + 4 * v71) = v70;
          ++*((_DWORD *)this + 96);
        }
      }
      ++v68;
    }
    while (v68 != v65);
  }
  if (a2 > 1) {
    return (*(uint64_t (**)(void, char *))(**((void **)this + 17) + 144))(*((void *)this + 17), (char *)this + 120);
  }
  else {
    return physx::Bp::AABBManager::finalizeUpdate((uint64_t)this, a2, (uint64_t)v73, (uint64_t)v74, (uint64_t)v75);
  }
}

uint64_t physx::Bp::resetOrClear<physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>>(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 16) >= ((*(_DWORD *)(result + 20) >> 1) & 0x3FFFFFFFu))
  {
    *(_DWORD *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  else
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::resize(result);
    int v2 = *(_DWORD *)(v1 + 16);
    return physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::recreate(v1, v2);
  }
  return result;
}

void physx::Bp::AABBManager::postBroadPhase(physx::Bp::AABBManager *this, physx::PxBaseTask *a2, physx::PxBaseTask *a3, pthread_mutex_t **a4)
{
  if (a2)
  {
    *((_DWORD *)this + 24) = 1;
    *((void *)this + 11) = a2;
    (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
    uint64_t v8 = *((void *)this + 8);
    *((void *)this + 10) = *(void *)(*((void *)this + 11) + 16);
    *((_DWORD *)this + 10) = 1;
    *((void *)this + 4) = (char *)this + 64;
    (*(void (**)(char *))(v8 + 32))((char *)this + 64);
    *((void *)this + 3) = *(void *)(*((void *)this + 4) + 16);
  }
  unsigned int v72 = a2;
  ++*((_DWORD *)this + 142);
  if (*((_DWORD *)this + 84) || *((_DWORD *)this + 90) || *((_DWORD *)this + 96)) {
    (*(void (**)(void, physx::PxBaseTask *))(**((void **)this + 49) + 96))(*((void *)this + 49), a3);
  }
  physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>((uint64_t)this + 440);
  physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>((uint64_t)this + 472);
  physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>((uint64_t)this + 456);
  physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>((uint64_t)this + 488);
  int v9 = (*(uint64_t (**)(void))(**((void **)this + 49) + 120))(*((void *)this + 49));
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 49) + 128))(*((void *)this + 49));
  if (v9)
  {
    int v11 = (unsigned int *)v10;
    int v12 = 0x3FFFFFFF;
    int v13 = 0x3FFFFFFF;
    do
    {
      uint64_t v14 = *v11;
      uint64_t v15 = v11[1];
      if (v14 != v13 || v15 != v12)
      {
        uint64_t v17 = *((void *)this + 36);
        int v18 = *(_DWORD *)(v17 + 16 * v14 + 8);
        uint64_t v19 = v17 + 16 * v15;
        int v20 = *(_DWORD *)(v19 + 8);
        if (v18 == -1 && v20 == -1)
        {
          unint64_t v55 = *(void *)(v17 + 16 * v14);
          if (v55 >= 4)
          {
            unint64_t v56 = *(void *)v19;
            if (v56 >= 4)
            {
              int v57 = v55 & 3;
              unsigned int v58 = v56 & 3;
              if (v57 > (int)v58) {
                unsigned int v58 = v57;
              }
              unint64_t v59 = (char *)this + 16 * v58;
              uint64_t v60 = v59 + 472;
              *(void *)&long long v73 = *v11;
              *((void *)&v73 + 1) = v15;
              unsigned int v61 = *((_DWORD *)v59 + 120);
              if ((*((_DWORD *)v59 + 121) & 0x7FFFFFFFu) <= v61)
              {
                physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack((uint64_t)v60, &v73);
              }
              else
              {
                uint64_t v62 = *v60 + 24 * v61;
                *(_OWORD *)uint64_t v62 = v73;
                *(void *)(v62 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v74;
                ++*((_DWORD *)v59 + 120);
              }
            }
          }
        }
        else
        {
          if (v15 <= v14) {
            unsigned int v22 = *v11;
          }
          else {
            unsigned int v22 = v11[1];
          }
          if (v15 >= v14) {
            unsigned int v23 = *v11;
          }
          else {
            unsigned int v23 = v11[1];
          }
          if (v20 == -1 || v18 == -1) {
            uint64_t v25 = (char *)this + 576;
          }
          else {
            uint64_t v25 = (char *)this + 632;
          }
          unsigned int v26 = ((unsigned __int16)v23 | ((unsigned __int16)v22 << 16))
              + ~(((unsigned __int16)v23 | ((unsigned __int16)v22 << 16)) << 15);
          unsigned int v27 = (9 * (v26 ^ (v26 >> 10))) ^ ((9 * (v26 ^ (v26 >> 10))) >> 6);
          uint64_t v28 = *(unsigned int *)(*((void *)v25 + 3)
                                + 4
                                * ((*((_DWORD *)v25 + 9) - 1) & ((v27 + ~(v27 << 11)) ^ ((v27 + ~(v27 << 11)) >> 16))));
          uint64_t v29 = *((void *)v25 + 1);
          uint64_t v30 = (int *)(v29 + 16 * v28);
          int v32 = *v30;
          int v31 = v30[1];
          if (v23 != v32 || v22 != v31)
          {
            uint64_t v34 = *((void *)v25 + 2);
            do
            {
              uint64_t v28 = *(unsigned int *)(v34 + 4 * v28);
              uint64_t v35 = (int *)(v29 + 16 * v28);
              int v37 = *v35;
              int v36 = v35[1];
            }
            while (v23 != v37 || v22 != v36);
          }
          uint64_t v39 = *(void *)(v29 + 16 * v28 + 8);
          uint64_t v40 = *(unsigned int *)(v39 + 24);
          if (v40)
          {
            uint64_t v41 = 0;
            uint64_t v42 = 8 * v40;
            do
            {
              uint64_t v43 = *(void *)(v39 + 48);
              uint64_t v44 = *(_DWORD *)(v43 + v41) & 0x7FFFFFFF;
              uint64_t v45 = *((void *)this + 36);
              unint64_t v46 = *(void *)(v45 + 16 * v44);
              if (v46 >= 4)
              {
                uint64_t v47 = *(_DWORD *)(v43 + v41 + 4) & 0x7FFFFFFF;
                unint64_t v48 = *(void *)(v45 + 16 * v47);
                if (v48 >= 4)
                {
                  unsigned int v49 = v46 & 3;
                  int v50 = v48 & 3;
                  if ((int)v49 <= v50) {
                    unsigned int v49 = v50;
                  }
                  uint64_t v51 = (char *)this + 16 * v49;
                  unsigned int v52 = v51 + 472;
                  *(void *)&long long v73 = v44;
                  *((void *)&v73 + 1) = v47;
                  unsigned int v53 = *((_DWORD *)v51 + 120);
                  if ((*((_DWORD *)v51 + 121) & 0x7FFFFFFFu) <= v53)
                  {
                    physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack((uint64_t)v52, &v73);
                  }
                  else
                  {
                    uint64_t v54 = *v52 + 24 * v53;
                    *(_OWORD *)uint64_t v54 = v73;
                    *(void *)(v54 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v74;
                    ++*((_DWORD *)v51 + 120);
                  }
                }
              }
              v41 += 8;
            }
            while (v42 != v41);
          }
          *(unsigned char *)(v39 + 64) = 1;
        }
        int v13 = v14;
        int v12 = v15;
      }
      v11 += 2;
      --v9;
    }
    while (v9);
  }
  if (v72)
  {
    unsigned int v63 = *((_DWORD *)this + 140);
    if (v63)
    {
      unsigned int v64 = 0;
      unsigned int v65 = *((_DWORD *)this + 140);
      do
      {
        unsigned int v66 = v65 - 16;
        if (v65 >= 0x10) {
          int v67 = 16;
        }
        else {
          int v67 = v65;
        }
        uint64_t v68 = physx::Cm::FlushPool::allocate(a4, 56, 0x10u);
        uint64_t v69 = *((void *)this + 69) + 8 * v64;
        *(void *)(v68 + 8) = *((void *)this + 98);
        *(void *)(v68 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        *(_DWORD *)(v68 + 32) = 0;
        *(void *)uint64_t v68 = &unk_26E723C40;
        *(void *)(v68 + 40) = v69;
        *(_DWORD *)(v68 + 48) = v67;
        *(_DWORD *)(v68 + 32) = 1;
        *(void *)(v68 + 24) = (char *)this + 8;
        (*(void (**)(char *))(*((void *)this + 1) + 32))((char *)this + 8);
        *(void *)(v68 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(*(void *)(v68 + 24) + 16);
        (*(void (**)(uint64_t))(*(void *)v68 + 40))(v68);
        v64 += 16;
        unsigned int v65 = v66;
      }
      while (v64 < v63);
    }
    *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a4;
    (*(void (**)(void, char *))(**((void **)this + 10) + 144))(*((void *)this + 10), (char *)this + 64);
    int v70 = *(void (**)(void))(**((void **)this + 3) + 144);
    v70();
  }
  else
  {
    physx::Bp::AABBManager::postBpStage2(this, 0, a4);
    physx::Bp::AABBManager::postBpStage3(this, v71);
  }
}

uint64_t physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 8) >= ((*(_DWORD *)(result + 12) >> 1) & 0x3FFFFFFFu))
  {
    *(_DWORD *)(result + 8) = 0;
  }
  else
  {
    physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize(result);
    unsigned int v2 = *(_DWORD *)(v1 + 8);
    return physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::recreate(v1, v2);
  }
  return result;
}

uint64_t physx::Bp::AABBManager::postBpStage2(physx::Bp::AABBManager *this, physx::PxBaseTask *a2, pthread_mutex_t **a3)
{
  unsigned int v6 = *((_DWORD *)this + 140);
  if (v6)
  {
    unsigned int v7 = 0;
    unsigned int v8 = *((_DWORD *)this + 140);
    do
    {
      unsigned int v9 = v8 - 16;
      if (v8 >= 0x10) {
        int v10 = 16;
      }
      else {
        int v10 = v8;
      }
      uint64_t v11 = physx::Cm::FlushPool::allocate(a3, 128, 0x10u);
      int v12 = (void *)v11;
      uint64_t v13 = *((void *)this + 98);
      uint64_t v14 = *((void *)this + 69) + 8 * v7;
      *(void *)(v11 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(void *)(v11 + 24) = 0;
      *(_DWORD *)(v11 + 32) = 0;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(_OWORD *)(v11 + 88) = 0u;
      *(void *)uint64_t v11 = &unk_26E723CB0;
      *(void *)(v11 + 8) = v13;
      *(void *)(v11 + 104) = v14;
      *(_DWORD *)(v11 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v10;
      *(void *)(v11 + 120) = this;
      if (a2)
      {
        *(_DWORD *)(v11 + 32) = 1;
        *(void *)(v11 + 24) = a2;
        (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
        v12[2] = *(void *)(v12[3] + 16);
        (*(void (**)(void *))(*v12 + 40))(v12);
      }
      else
      {
        physx::Bp::ProcessSelfCollisionPairsParallel::runInternal((physx::Bp::ProcessSelfCollisionPairsParallel *)v11);
      }
      int v18 = v12;
      uint64_t v15 = *((unsigned int *)this + 174);
      if ((*((_DWORD *)this + 175) & 0x7FFFFFFFu) <= v15)
      {
        physx::shdfnd::Array<physx::Bp::ProcessAggPairsBase *,physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>>::growAndPushBack((uint64_t)this + 688, &v18);
      }
      else
      {
        *(void *)(*((void *)this + 86) + 8 * v15) = v12;
        *((_DWORD *)this + 174) = v15 + 1;
      }
      v7 += 16;
      unsigned int v8 = v9;
    }
    while (v7 < v6);
  }
  uint64_t v16 = (char *)this + 632;
  if (a2)
  {
    physx::Bp::processAggregatePairsParallel((uint64_t)v16, (pthread_mutex_t **)this, a3, (uint64_t)a2, (uint64_t)"AggAggPairs", (uint64_t)this + 688);
    return physx::Bp::processAggregatePairsParallel((uint64_t)this + 576, (pthread_mutex_t **)this, a3, (uint64_t)a2, (uint64_t)"AggActorPairs", (uint64_t)this + 688);
  }
  else
  {
    physx::Bp::processAggregatePairs((uint64_t)v16, (uint64_t)this);
    return physx::Bp::processAggregatePairs((uint64_t)this + 576, (uint64_t)this);
  }
}

void physx::Bp::AABBManager::postBpStage3(physx::Bp::AABBManager *this, physx::PxBaseTask *a2)
{
  unsigned int v2 = this;
  uint64_t v172 = *MEMORY[0x263EF8340];
  uint64_t v3 = (uint64_t **)((char *)this + 552);
  unsigned int v4 = *((_DWORD *)this + 140);
  if (v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = *((unsigned int *)this + 140);
    do
    {
      uint64_t v7 = *v5++;
      *(_DWORD *)(v7 + 32) = -1;
      --v6;
    }
    while (v6);
  }
  if (v4 >= ((*((_DWORD *)this + 141) >> 1) & 0x3FFFFFFFu))
  {
    *((_DWORD *)this + 140) = 0;
  }
  else
  {
    physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 552);
    physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::recreate((uint64_t)v3, *((_DWORD *)v2 + 140));
  }
  int v162 = v2;
  if (*((_DWORD *)v2 + 174))
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = 0;
      uint64_t v159 = v8;
      uint64_t v160 = *(void *)(*((void *)v2 + 86) + 8 * v8);
      char v10 = 1;
      do
      {
        char v164 = v10;
        uint64_t v11 = v160 + 16 * v9;
        if (*(_DWORD *)(v11 + 52))
        {
          unint64_t v12 = 0;
          int v13 = *(_DWORD *)(v11 + 48);
          uint64_t v14 = (char *)v162 + 16 * v9;
          uint64_t v15 = v14 + 440;
          uint64_t v16 = v14 + 452;
          uint64_t v17 = (unsigned int *)(v14 + 448);
          do
          {
            uint64_t v18 = **(void **)(v11 + 40) + 24 * (v13 + v12);
            if ((*v16 & 0x7FFFFFFFu) <= *v17)
            {
              physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack((uint64_t)v15, (long long *)v18);
            }
            else
            {
              uint64_t v19 = *v15 + 24 * *v17;
              long long v20 = *(_OWORD *)v18;
              *(void *)(v19 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v18 + 16);
              *(_OWORD *)uint64_t v19 = v20;
              ++*v17;
            }
            ++v12;
          }
          while (v12 < *(unsigned int *)(v11 + 52));
        }
        int v22 = *(_DWORD *)(v11 + 84);
        int v21 = (unsigned int *)(v11 + 84);
        if (v22)
        {
          unint64_t v23 = 0;
          int v24 = *(v21 - 1);
          uint64_t v25 = (char *)v162 + 16 * v9;
          unsigned int v26 = v25 + 472;
          unsigned int v27 = v25 + 484;
          uint64_t v28 = (unsigned int *)(v25 + 480);
          do
          {
            uint64_t v29 = **(void **)(v21 - 3) + 24 * (v24 + v23);
            if ((*v27 & 0x7FFFFFFFu) <= *v28)
            {
              physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack((uint64_t)v26, (long long *)v29);
            }
            else
            {
              uint64_t v30 = *v26 + 24 * *v28;
              long long v31 = *(_OWORD *)v29;
              *(void *)(v30 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(v29 + 16);
              *(_OWORD *)uint64_t v30 = v31;
              ++*v28;
            }
            ++v23;
          }
          while (v23 < *v21);
        }
        char v10 = 0;
        uint64_t v9 = 1;
      }
      while ((v164 & 1) != 0);
      uint64_t v8 = v159 + 1;
      unsigned int v2 = v162;
    }
    while (v159 + 1 < (unint64_t)*((unsigned int *)v162 + 174));
  }
  *((_DWORD *)v2 + 174) = 0;
  char v169 = 1;
  uint64_t v170 = &v167;
  uint64_t v171 = 0x1000000000;
  int v32 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)v2 + 99));
  unsigned int v166 = v32;
  if (v32)
  {
    int v33 = v32;
    do
    {
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v33 + 1));
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v33 + 3));
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v33 + 5));
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v33 + 7));
      int v34 = v171;
      if ((HIDWORD(v171) & 0x7FFFFFFFu) <= v171)
      {
        physx::shdfnd::Array<physx::Bp::BpCacheData *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::Bp::BpCacheData *>>>::growAndPushBack((uint64_t)&v167, &v166);
      }
      else
      {
        *((void *)v170 + v171) = v166;
        LODWORD(v171) = v34 + 1;
      }
      int v33 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)v2 + 99));
      unsigned int v166 = v33;
    }
    while (v33);
  }
  if (v171)
  {
    uint64_t v35 = v2;
    unint64_t v36 = 0;
    do
    {
      int v37 = (void *)*((void *)v170 + v36);
      uint64_t v38 = *((void *)v35 + 99);
      pthread_mutex_lock((pthread_mutex_t *)(v38 + 8));
      void *v37 = *(void *)v38;
      *(void *)uint64_t v38 = v37;
      pthread_mutex_unlock((pthread_mutex_t *)(v38 + 8));
      ++v36;
    }
    while (v36 < v171);
  }
  if ((v171 & 0x8000000000000000) == 0 && (v171 & 0x7FFFFFFF00000000) != 0 && v170 != &v167 && v170) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  unsigned int i = v162;
  int v40 = (*(uint64_t (**)(void))(**((void **)v162 + 49) + 104))(*((void *)v162 + 49));
  uint64_t v41 = (*(uint64_t (**)(void))(**((void **)i + 49) + 112))(*((void *)i + 49));
  if (v40)
  {
    uint64_t v43 = (unsigned int *)v41;
    int v44 = 0x3FFFFFFF;
    int v45 = 0x3FFFFFFF;
    do
    {
      uint64_t v47 = *v43;
      uint64_t v46 = v43[1];
      if (v47 == v45 && v46 == v44) {
        goto LABEL_100;
      }
      uint64_t v49 = *((void *)i + 36);
      int v50 = *(_DWORD *)(v49 + 16 * v47 + 8);
      int v51 = *(_DWORD *)(v49 + 16 * v46 + 8);
      if (v50 == -1 && v51 == -1)
      {
        int v67 = *(_DWORD *)(v49 + 16 * v47) & 3;
        int v68 = *(_DWORD *)(v49 + 16 * v46) & 3;
        if (v67 > v68) {
          int v68 = v67;
        }
        *(void *)&long long v167 = *v43;
        *((void *)&v167 + 1) = v46;
        uint64_t v69 = (uint64_t)v162 + 16 * v68 + 440;
        unsigned int v70 = *(_DWORD *)(v69 + 8);
        if ((*(_DWORD *)(v69 + 12) & 0x7FFFFFFFu) <= v70)
        {
          physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v69, &v167);
        }
        else
        {
          uint64_t v71 = *(void *)v69 + 24 * v70;
          int8x8_t v42 = (int8x8_t)v167;
          *(_OWORD *)uint64_t v71 = v167;
          *(void *)(v71 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v168;
          ++*(_DWORD *)(v69 + 8);
        }
        goto LABEL_99;
      }
      if (v46 <= v47) {
        uint64_t v53 = v47;
      }
      else {
        uint64_t v53 = v46;
      }
      if (v46 >= v47) {
        uint64_t v54 = v47;
      }
      else {
        uint64_t v54 = v46;
      }
      uint64_t v55 = *((void *)i + 67);
      unsigned int v56 = *(_DWORD *)(v49 + 16 * v54 + 8);
      if (v50 == -1 || v51 == -1)
      {
        BOOL v58 = (v56 & 1) == 0 || v56 == -1;
        if (v58) {
          unsigned int v59 = v53;
        }
        else {
          unsigned int v59 = v54;
        }
        uint64_t v60 = *(_DWORD **)(v55 + ((4 * *(unsigned int *)(v49 + 16 * v59 + 8)) & 0x3FFFFFFF8));
        if (v58) {
          int v61 = v54;
        }
        else {
          int v61 = v53;
        }
        uint64_t v62 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
          unsigned int v63 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::PersistentActorAggregatePair>::getName("
        }
                ") [T = physx::Bp::PersistentActorAggregatePair]";
        else {
          unsigned int v63 = "<allocation names disabled>";
        }
        uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v62 + 24)
                                                                                               + 16))(v62 + 24, 88, v63, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 1809);
        *(_DWORD *)(v64 + 8) = -1;
        *(void *)(v64 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        *(_DWORD *)(v64 + 24) = 0;
        *(void *)(v64 + 40) = 0;
        *(void *)(v64 + 48) = 0;
        *(void *)(v64 + 32) = 0;
        *(_DWORD *)(v64 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        *(unsigned char *)(v64 + 64) = 0;
        *(void *)uint64_t v64 = &unk_26E723960;
        *(_DWORD *)(v64 + 68) = *v60;
        *(_DWORD *)(v64 + 72) = v61;
        *(void *)(v64 + 80) = v60;
        unsigned int v66 = (int32x2_t *)((char *)v162 + 576);
      }
      else
      {
        unsigned int v72 = *(_DWORD **)(v55 + 8 * (v56 >> 1));
        long long v73 = *(_DWORD **)(v55 + ((4 * *(unsigned int *)(v49 + 16 * v53 + 8)) & 0x3FFFFFFF8));
        uint64_t v74 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
          int v76 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::PersistentAggregateAggregatePair>::getN"
        }
                "ame() [T = physx::Bp::PersistentAggregateAggregatePair]";
        else {
          int v76 = "<allocation names disabled>";
        }
        uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v74 + 24)
                                                                                               + 16))(v74 + 24, 96, v76, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 1822);
        *(_DWORD *)(v64 + 8) = -1;
        *(void *)(v64 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        *(_DWORD *)(v64 + 24) = 0;
        *(void *)(v64 + 40) = 0;
        *(void *)(v64 + 48) = 0;
        *(void *)(v64 + 32) = 0;
        *(_DWORD *)(v64 + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
        *(unsigned char *)(v64 + 64) = 0;
        *(void *)uint64_t v64 = &unk_26E723990;
        *(_DWORD *)(v64 + 68) = *v72;
        *(_DWORD *)(v64 + 72) = *v73;
        *(void *)(v64 + 80) = v72;
        *(void *)(v64 + 88) = v73;
        unsigned int v66 = (int32x2_t *)((char *)v162 + 632);
      }
      unsigned int v77 = v66[4].u32[1];
      if (v77)
      {
        unsigned int v78 = ((unsigned __int16)v54 | ((unsigned __int16)v53 << 16))
            + ~(((unsigned __int16)v54 | ((unsigned __int16)v53 << 16)) << 15);
        unsigned int v79 = (9 * (v78 ^ (v78 >> 10))) ^ ((9 * (v78 ^ (v78 >> 10))) >> 6);
        unsigned int v80 = (v77 - 1) & ((v79 + ~(v79 << 11)) ^ ((v79 + ~(v79 << 11)) >> 16));
        uint64_t v81 = *(unsigned int *)(*(void *)&v66[3] + 4 * v80);
        for (i = v162; v81 != -1; uint64_t v81 = *(unsigned int *)(*(void *)&v66[2] + 4 * v81))
        {
          BOOL v82 = (int *)(*(void *)&v66[1] + 16 * v81);
          int v84 = *v82;
          int v83 = v82[1];
          if (v84 == v54 && v83 == v53) {
            goto LABEL_98;
          }
        }
      }
      else
      {
        unsigned int v80 = 0;
        unsigned int i = v162;
      }
      if (v66[6].i32[1] == v66[4].i32[0])
      {
        if (v77) {
          unsigned int v86 = 2 * v77;
        }
        else {
          unsigned int v86 = 16;
        }
        if (v77 < v86)
        {
          physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)v66, v86, v65);
          unsigned int v77 = v66[4].u32[1];
        }
        unsigned int v87 = ((unsigned __int16)v54 | ((unsigned __int16)v53 << 16))
            + ~(((unsigned __int16)v54 | ((unsigned __int16)v53 << 16)) << 15);
        unsigned int v88 = (9 * (v87 ^ (v87 >> 10))) ^ ((9 * (v87 ^ (v87 >> 10))) >> 6);
        unsigned int v80 = (v77 - 1) & ((v88 + ~(v88 << 11)) ^ ((v88 + ~(v88 << 11)) >> 16));
      }
      uint64_t v89 = v66[5].u32[1];
      v66[5].i32[1] = v89 + 1;
      int32x2_t v90 = v66[3];
      *(_DWORD *)(*(void *)&v66[2] + 4 * v89) = *(_DWORD *)(*(void *)&v90 + 4 * v80);
      *(_DWORD *)(*(void *)&v90 + 4 * v80) = v89;
      v66[6] = vadd_s32(v66[6], (int32x2_t)0x100000001);
      unint64_t v91 = (uint64_t *)(*(void *)&v66[1] + 16 * v89);
      *unint64_t v91 = v54 | (v53 << 32);
      v91[1] = v64;
LABEL_98:
      physx::Bp::AABBManager::updatePairs((unsigned int *)i, v64, 0);
LABEL_99:
      int v45 = v47;
      int v44 = v46;
LABEL_100:
      v43 += 2;
      --v40;
    }
    while (v40);
  }
  unsigned int v92 = *((_DWORD *)i + 116) + *((_DWORD *)i + 112);
  uint64_t v165 = (uint64_t)i + 728;
  unsigned int v93 = *((_DWORD *)i + 191);
  if (v93 && *((_DWORD *)i + 195))
  {
    memset(*((void **)i + 94), 255, 4 * v93);
    uint64_t v94 = *((void *)i + 93);
    uint64_t v95 = (*((_DWORD *)i + 190) - 1);
    if (*((_DWORD *)i + 190) == 1)
    {
      uint64_t v102 = 0;
    }
    else
    {
      _X10 = v94 + 128;
      int v97 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v97++;
        _X10 += 4;
        --v95;
      }
      while (v95);
      uint64_t v102 = (*((_DWORD *)i + 190) - 1);
    }
    *(_DWORD *)(v94 + 4 * v102) = -1;
    *((_DWORD *)i + 193) = 0;
    *((_DWORD *)i + 195) = 0;
    unsigned int v93 = *((_DWORD *)i + 191);
  }
  if (v93 < v92) {
    physx::shdfnd::internal::HashBase<physx::Bp::Pair,physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::internal::HashSetBase<physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v165, v92, v42);
  }
  uint64_t v103 = 0;
  char v104 = 1;
  do
  {
    char v161 = v104;
    uint64_t v105 = (uint64_t)i + 16 * v103;
    uint64_t v106 = *(unsigned int *)(v105 + 480);
    uint64_t v163 = v105;
    uint64_t v107 = *(unsigned int *)(v105 + 448);
    if (v107)
    {
      uint64_t v108 = 0;
      uint64_t v109 = (void *)(v105 + 440);
      do
      {
        uint64_t v110 = (unint64_t *)(*v109 + 24 * v108);
        unint64_t v111 = *v110;
        unint64_t v112 = v110[1];
        uint64_t v113 = *((void *)i + 36);
        uint64_t v114 = *v110;
        unint64_t *v110 = *(void *)(v113 + 16 * v114) & 0xFFFFFFFFFFFFFFFCLL;
        v110[1] = *(void *)(v113 + 16 * v112) & 0xFFFFFFFFFFFFFFFCLL;
        if (v106)
        {
          unsigned int v115 = *((_DWORD *)i + 191);
          int v116 = (unsigned __int16)v111 | ((unsigned __int16)v112 << 16);
          if (v115)
          {
            unsigned int v117 = 9 * ((v116 + ~(v116 << 15)) ^ ((v116 + ~(v116 << 15)) >> 10));
            unsigned int v118 = (v117 ^ (v117 >> 6)) + ~((v117 ^ (v117 >> 6)) << 11);
            unsigned int v119 = (v115 - 1) & (v118 ^ HIWORD(v118));
            for (uint64_t j = *(unsigned int *)(*((void *)i + 94) + 4 * v119);
                  j != -1;
                  uint64_t j = *(unsigned int *)(*((void *)i + 93) + 4 * j))
            {
              uint64_t v121 = (int *)(*((void *)i + 92) + 8 * j);
              int v123 = *v121;
              int v122 = v121[1];
              if (v123 == v111 && v122 == v112) {
                goto LABEL_133;
              }
            }
          }
          else
          {
            unsigned int v119 = 0;
          }
          uint64_t v125 = *((unsigned int *)i + 193);
          if (v125 == -1)
          {
            if (v115) {
              unsigned int v126 = 2 * v115;
            }
            else {
              unsigned int v126 = 16;
            }
            if (v115 >= v126)
            {
              uint64_t v125 = 0xFFFFFFFFLL;
            }
            else
            {
              physx::shdfnd::internal::HashBase<physx::Bp::Pair,physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::internal::HashSetBase<physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v165, v126, v42);
              unsigned int v115 = *((_DWORD *)i + 191);
              uint64_t v125 = *((unsigned int *)i + 193);
            }
            unsigned int v127 = 9 * ((v116 + ~(v116 << 15)) ^ ((v116 + ~(v116 << 15)) >> 10));
            unsigned int v119 = (v115 - 1) & (((v127 ^ (v127 >> 6)) + ~((v127 ^ (v127 >> 6)) << 11)) ^ (((v127 ^ (v127 >> 6))
                                                                                          + ~((v127 ^ (v127 >> 6)) << 11)) >> 16));
          }
          uint64_t v128 = *((void *)i + 93);
          *((_DWORD *)i + 193) = *(_DWORD *)(v128 + 4 * v125);
          uint64_t v129 = *((void *)i + 94);
          *(_DWORD *)(v128 + 4 * v125) = *(_DWORD *)(v129 + 4 * v119);
          *(_DWORD *)(v129 + 4 * v119) = v125;
          int8x8_t v42 = (int8x8_t)vadd_s32(*(int32x2_t *)((char *)i + 776), (int32x2_t)0x100000001);
          *((int8x8_t *)i + 97) = v42;
          *(void *)(*((void *)i + 92) + 8 * v125) = v114 | (v112 << 32);
        }
LABEL_133:
        ++v108;
      }
      while (v108 != v107);
    }
    if (v106)
    {
      uint64_t v130 = 0;
      unsigned int v131 = 0;
      uint64_t v132 = v163;
      uint64_t v133 = *(void *)(v163 + 472);
      int v134 = *((_DWORD *)i + 195);
      char v135 = v161;
      do
      {
        unint64_t v136 = (uint64_t *)(v133 + 24 * v130);
        uint64_t v138 = *v136;
        uint64_t v137 = v136[1];
        if (!v134
          || (unsigned int v139 = ((unsigned __int16)v138 | ((unsigned __int16)v137 << 16))
                   + ~(((unsigned __int16)v138 | ((unsigned __int16)v137 << 16)) << 15),
              unsigned int v140 = (9 * (v139 ^ (v139 >> 10))) ^ ((9 * (v139 ^ (v139 >> 10))) >> 6),
              uint64_t v141 = *(unsigned int *)(*((void *)i + 94)
                                     + 4
                                     * ((*((_DWORD *)i + 191) - 1) & ((v140 + ~(v140 << 11)) ^ ((v140 + ~(v140 << 11)) >> 16)))),
              v141 == -1))
        {
LABEL_143:
          uint64_t v146 = *((void *)i + 36);
          unsigned int v147 = (unint64_t *)(v133 + 24 * v131);
          unint64_t *v147 = *(void *)(v146 + 16 * v138) & 0xFFFFFFFFFFFFFFFCLL;
          v147[1] = *(void *)(v146 + 16 * v137) & 0xFFFFFFFFFFFFFFFCLL;
          ++v131;
        }
        else
        {
          while (1)
          {
            unsigned int v142 = (int *)(*((void *)i + 92) + 8 * v141);
            int v144 = *v142;
            int v143 = v142[1];
            if (v144 == v138 && v143 == v137) {
              break;
            }
            uint64_t v141 = *(unsigned int *)(*((void *)i + 93) + 4 * v141);
            if (v141 == -1) {
              goto LABEL_143;
            }
          }
        }
        ++v130;
      }
      while (v130 != v106);
    }
    else
    {
      unsigned int v131 = 0;
      char v135 = v161;
      uint64_t v132 = v163;
    }
    char v104 = 0;
    *(_DWORD *)(v132 + 480) = v131;
    uint64_t v103 = 1;
  }
  while ((v135 & 1) != 0);
  int v148 = (*(uint64_t (**)(void))(**((void **)i + 49) + 56))(*((void *)i + 49));
  uint64_t v149 = (*(uint64_t (**)(void))(**((void **)i + 49) + 64))(*((void *)i + 49));
  if (v148)
  {
    unsigned int v150 = (unsigned int *)v149;
    do
    {
      unsigned int v152 = *v150++;
      uint64_t v151 = v152;
      if (((*(_DWORD *)(*((void *)i + 26) + (((unint64_t)v152 >> 3) & 0x1FFFFFFC)) >> v152) & 1) == 0)
      {
        uint64_t v153 = *((void *)i + 36) + 16 * v151;
        if (*(_DWORD *)(v153 + 8) == -1)
        {
          unint64_t v156 = *(void *)v153 & 0xFFFFFFFFFFFFFFFCLL;
          *(void *)&long long v167 = v156;
          uint64_t v157 = *((unsigned int *)i + 104);
          if ((*((_DWORD *)i + 105) & 0x7FFFFFFFu) <= v157)
          {
            uint64_t v158 = (uint64_t)i + 408;
            goto LABEL_158;
          }
          *(void *)(*((void *)i + 51) + 8 * v157) = v156;
          *((_DWORD *)i + 104) = v157 + 1;
        }
        else
        {
          unint64_t v154 = *(void *)v153 & 0xFFFFFFFFFFFFFFFCLL;
          *(void *)&long long v167 = v154;
          uint64_t v155 = *((unsigned int *)i + 108);
          if ((*((_DWORD *)i + 109) & 0x7FFFFFFFu) <= v155)
          {
            uint64_t v158 = (uint64_t)i + 424;
LABEL_158:
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<void *>>::growAndPushBack(v158, &v167);
            goto LABEL_159;
          }
          *(void *)(*((void *)i + 53) + 8 * v155) = v154;
          *((_DWORD *)i + 108) = v155 + 1;
        }
      }
LABEL_159:
      --v148;
    }
    while (v148);
  }
  bzero(*((void **)i + 24), (4 * *((_DWORD *)i + 50)));
  bzero(*((void **)i + 26), (4 * *((_DWORD *)i + 54)));
}

uint64_t physx::Bp::PostBroadPhaseStage2Task::runInternal(physx::Bp::PostBroadPhaseStage2Task *this)
{
  return physx::Bp::AABBManager::postBpStage2(*((physx::Bp::AABBManager **)this + 6), *((physx::PxBaseTask **)this + 3), *((pthread_mutex_t ***)this + 5));
}

uint64_t physx::Bp::processAggregatePairsParallel(uint64_t a1, pthread_mutex_t **a2, pthread_mutex_t **this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*a2);
  }
  uint64_t result = physx::Cm::FlushPool::allocate(this, 400, 0x10u);
  uint64_t v13 = result;
  *(void *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(void *)uint64_t result = &unk_26E723D38;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 360) = 0;
  *(void *)(result + 368) = a2;
  *(void *)(result + 37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a1;
  *(void *)(result + 384) = a2;
  *(void *)(result + 392) = a5;
  unint64_t v14 = *(unsigned int *)(a6 + 8);
  if (*(_DWORD *)(a1 + 32))
  {
    uint64_t v15 = *(unsigned int **)(a1 + 24);
    uint64_t v16 = *v15;
    if (v16 == -1)
    {
      uint64_t v17 = 0;
      while (*(_DWORD *)(a1 + 36) - 1 != v17)
      {
        uint64_t v16 = v15[++v17];
        if (v16 != -1) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      LODWORD(v17) = 0;
LABEL_11:
      unsigned int v18 = 0;
      do
      {
LABEL_12:
        *(void *)(v13 + 8 * v18 + 232) = *(void *)(*(void *)(a1 + 8) + 16 * v16);
        uint64_t v19 = *(void *)(*(void *)(a1 + 8) + 16 * v16 + 8);
        uint64_t v20 = *(unsigned int *)(v13 + 360);
        unsigned int v18 = v20 + 1;
        *(_DWORD *)(v13 + 360) = v20 + 1;
        *(void *)(v13 + 8 * v20 + 104) = v19;
        if (v20 == 15)
        {
          uint64_t v24 = v13;
          uint64_t v21 = *(unsigned int *)(a6 + 8);
          if ((*(_DWORD *)(a6 + 12) & 0x7FFFFFFFu) <= v21)
          {
            physx::shdfnd::Array<physx::Bp::ProcessAggPairsBase *,physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>>::growAndPushBack(a6, &v24);
          }
          else
          {
            *(void *)(*(void *)a6 + 8 * v21) = v13;
            *(_DWORD *)(a6 + 8) = v21 + 1;
          }
          *(_DWORD *)(v13 + 32) = 1;
          *(void *)(v13 + 24) = a4;
          (*(void (**)(uint64_t))(*(void *)a4 + 32))(a4);
          *(void *)(v13 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(*(void *)(v13 + 24) + 16);
          uint64_t result = physx::Cm::FlushPool::allocate(this, 400, 0x10u);
          uint64_t v13 = result;
          unsigned int v18 = 0;
          *(void *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
          *(void *)(result + 24) = 0;
          *(_DWORD *)(result + 32) = 0;
          *(_OWORD *)(result + 40) = 0u;
          *(_OWORD *)(result + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
          *(_OWORD *)(result + 72) = 0u;
          *(_OWORD *)(result + 88) = 0u;
          *(void *)uint64_t result = &unk_26E723D38;
          *(void *)(result + 8) = 0;
          *(_DWORD *)(result + 360) = 0;
          *(void *)(result + 368) = a2;
          *(void *)(result + 37re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = a1;
          *(void *)(result + 384) = a2;
          *(void *)(result + 392) = a5;
        }
        uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * v16);
      }
      while (v16 != -1);
      while (*(_DWORD *)(a1 + 36) - 1 != v17)
      {
        LODWORD(v17) = v17 + 1;
        uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * v17);
        if (v16 != -1) {
          goto LABEL_12;
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_unlock(*a2);
  }
  LODWORD(v22) = *(_DWORD *)(a6 + 8);
  if (v14 < v22)
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)a6 + 8 * v14) + 40))(*(void *)(*(void *)a6 + 8 * v14));
      ++v14;
      unint64_t v22 = *(unsigned int *)(a6 + 8);
    }
    while (v14 < v22);
  }
  if (*(_DWORD *)(v13 + 360))
  {
    uint64_t v24 = v13;
    if ((*(_DWORD *)(a6 + 12) & 0x7FFFFFFFu) <= v22)
    {
      physx::shdfnd::Array<physx::Bp::ProcessAggPairsBase *,physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>>::growAndPushBack(a6, &v24);
    }
    else
    {
      *(void *)(*(void *)a6 + 8 * v22) = v13;
      *(_DWORD *)(a6 + 8) = v22 + 1;
    }
    *(_DWORD *)(v13 + 32) = 1;
    *(void *)(v13 + 24) = a4;
    (*(void (**)(uint64_t))(*(void *)a4 + 32))(a4);
    *(void *)(v13 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(*(void *)(v13 + 24) + 16);
    unint64_t v23 = *(uint64_t (**)(uint64_t))(*(void *)v13 + 40);
    return v23(v13);
  }
  return result;
}

uint64_t physx::Bp::processAggregatePairs(uint64_t result, uint64_t a2)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  if (!*(_DWORD *)(result + 32))
  {
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_21;
  }
  uint64_t v3 = result;
  unsigned int v4 = *(unsigned int **)(result + 24);
  uint64_t v5 = *v4;
  if (v5 == -1)
  {
    uint64_t v6 = 0;
    while (*(_DWORD *)(result + 36) - 1 != v6)
    {
      uint64_t v5 = v4[++v6];
      if (v5 != -1) {
        goto LABEL_9;
      }
    }
    goto LABEL_7;
  }
  LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  do
  {
LABEL_9:
    uint64_t v8 = *(void *)(*(void *)(v3 + 8) + 16 * v5 + 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v8 + 16))(v8, a2, 0);
    if (result)
    {
      uint64_t v9 = (void *)(*(void *)(v3 + 8) + 16 * v5);
      int v10 = v16;
      if ((HIDWORD(v16) & 0x7FFFFFFFu) <= v16)
      {
        physx::shdfnd::Array<physx::Bp::AggPair,physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>>::growAndPushBack((uint64_t)&v15, v9);
      }
      else
      {
        *(void *)(v15 + 8 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *v9;
        LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v10 + 1;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v5 = *(unsigned int *)(*(void *)(v3 + 16) + 4 * v5);
  }
  while (v5 != -1);
  while (*(_DWORD *)(v3 + 36) - 1 != v6)
  {
    LODWORD(vre::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v6 + 1;
    uint64_t v5 = *(unsigned int *)(*(void *)(v3 + 24) + 4 * v6);
    if (v5 != -1) {
      goto LABEL_9;
    }
  }
  uint64_t v7 = v15;
  if (v16)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 8 * v16;
    do
    {
      uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v3, *(_DWORD *)(v7 + v11), *(_DWORD *)(v7 + v11 + 4));
      v11 += 8;
    }
    while (v12 != v11);
  }
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0 && (v16 & 0x7FFFFFFF00000000) != 0 && v7 != 0)
  {
    unint64_t v14 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    return v14();
  }
  return result;
}

double physx::Bp::AABBManager::getBpCacheData(physx::Bp::AABBManager *this)
{
  if (!physx::shdfnd::SListImpl::pop(this))
  {
    unsigned int v2 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 80, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 2450);
    double result = 0.0;
    _OWORD *v2 = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
  }
  return result;
}

uint64_t physx::Bp::AABBManager::visualize(uint64_t a1, _DWORD *a2)
{
  long long v12 = xmmword_23435FBB0;
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t result = physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v12);
  uint64_t v5 = *(unsigned int *)(a1 + 544);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *(unsigned int **)(*(void *)(a1 + 536) + v6);
      if (v8[4])
      {
        a2[1] = -16711936;
        uint64_t v9 = (uint64_t *)(*(void *)(*(void *)(a1 + 400) + 8) + 24 * *v8);
        v10[0] = *v9;
        v10[1] = v9[1];
        v10[2] = v9[2];
        char v11 = 1;
        uint64_t result = physx::Cm::operator<<(a2, v10);
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t physx::Bp::SapUpdateWorkTask::runInternal(physx::Bp::BroadPhaseSap **this)
{
  return physx::Bp::BroadPhaseSap::update(this[5]);
}

void physx::Bp::SapPostUpdateWorkTask::runInternal(physx::Bp::BroadPhaseSap **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, physx::Bp::DataArray *a6)
{
}

void physx::Bp::AggregateBoundsComputationTask::~AggregateBoundsComputationTask(physx::Bp::AggregateBoundsComputationTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  uint64_t v1;

  *(void *)this = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  *((void *)this + 2) = 0;
  (*(void (**)(void))(v1 + 24))();
}

const char *physx::Bp::AggregateBoundsComputationTask::getName(physx::Bp::AggregateBoundsComputationTask *this)
{
  return "AggregateBoundsComputationTask";
}

void physx::Bp::FinalizeUpdateTask::~FinalizeUpdateTask(physx::Bp::FinalizeUpdateTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  uint64_t v1;

  *(void *)this = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  *((void *)this + 2) = 0;
  (*(void (**)(void))(v1 + 24))();
}

const char *physx::Bp::FinalizeUpdateTask::getName(physx::Bp::FinalizeUpdateTask *this)
{
  return "FinalizeUpdateTask";
}

void physx::Bp::PostBroadPhaseStage2Task::~PostBroadPhaseStage2Task(physx::Bp::PostBroadPhaseStage2Task *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Bp::PostBroadPhaseStage2Task::getName(physx::Bp::PostBroadPhaseStage2Task *this)
{
  return "PostBroadPhaseStage2Task";
}

void physx::Bp::PersistentActorAggregatePair::~PersistentActorAggregatePair(physx::Bp::PersistentActorAggregatePair *this)
{
  *(void *)this = &unk_26E723C10;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
}

{
  void (*v1)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E723C10;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::Bp::PersistentActorAggregatePair::findOverlaps(uint64_t a1, physx::Bp::PairManagerData *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a1 + 80);
  if (*(unsigned char *)(v12 + 84))
  {
    physx::Bp::Aggregate::sortBounds((physx::Bp::Aggregate *)v12);
    uint64_t v12 = *(void *)(a1 + 80);
  }
  unsigned int v14 = *(_DWORD *)(a1 + 72);
  uint64_t v13 = a1 + 72;
  uint64_t v15 = a3 + 24 * v14;
  uint64_t v16 = (const float *)(a4 + 4 * v14);
  float32x4_t v17 = vld1q_dup_f32(v16);
  int32x4_t v18 = (int32x4_t)vsubq_f32(*(float32x4_t *)v15, v17);
  int32x4_t v19 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v15 + 12), v17);
  int32x4_t v20 = vtrn1q_s32(v18, v19);
  int32x4_t v21 = vzip1q_s32(v18, v19);
  unsigned int v22 = *(_DWORD *)(v12 + 16);
  uint64_t v23 = *(void *)(v12 + 8);
  uint64_t v24 = *(void *)(v12 + 40);
  uint64_t v25 = *(void *)(v12 + 48);
  if (v18.i32[0] < 0) {
    int v26 = ~v18.i32[0];
  }
  else {
    int v26 = v18.i32[0] | 0x80000000;
  }
  if (v19.i32[0] < 0) {
    int v27 = ~v19.i32[0];
  }
  else {
    int v27 = v19.i32[0] | 0x80000000;
  }
  v31[0] = v26;
  v31[1] = v27;
  int32x4_t v30 = vzip2q_s32(v21, v20);
  for (uint64_t i = 2; i != 14; i += 2)
    v31[i] = -1;
  physx::Bp::boxPruningKernel<0>((uint64_t)this, a6, v22, v23, v24, v25, 1u, v13, (uint64_t)v31, (uint64_t)&v30, a5);
  return physx::Bp::boxPruningKernel<1>((uint64_t)this, a6, 1u, v13, (uint64_t)v31, (uint64_t)&v30, v22, v23, v24, v25, a5);
}

void physx::Bp::PersistentAggregateAggregatePair::~PersistentAggregateAggregatePair(physx::Bp::PersistentAggregateAggregatePair *this)
{
  *(void *)this = &unk_26E723C10;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
}

{
  void (*v1)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E723C10;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::Bp::PersistentAggregateAggregatePair::findOverlaps(uint64_t a1, physx::Bp::PairManagerData *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(physx::Bp::Aggregate **)(a1 + 80);
  if (*((unsigned char *)v9 + 84)) {
    physx::Bp::Aggregate::sortBounds(v9);
  }
  uint64_t v10 = *(void *)(a1 + 88);
  if (*(unsigned char *)(v10 + 84))
  {
    physx::Bp::Aggregate::sortBounds((physx::Bp::Aggregate *)v10);
    uint64_t v10 = *(void *)(a1 + 88);
  }
  uint64_t v11 = *(void *)(a1 + 80);
  unsigned int v12 = *(_DWORD *)(v11 + 16);
  unsigned int v13 = *(_DWORD *)(v10 + 16);
  uint64_t v14 = *(void *)(v11 + 8);
  uint64_t v15 = *(void *)(v10 + 8);
  uint64_t v16 = *(void *)(v11 + 40);
  uint64_t v17 = *(void *)(v11 + 48);
  uint64_t v19 = *(void *)(v10 + 40);
  uint64_t v18 = *(void *)(v10 + 48);
  physx::Bp::boxPruningKernel<0>((uint64_t)this, a6, v12, v14, v16, v17, v13, v15, v19, v18, a5);
  return physx::Bp::boxPruningKernel<1>((uint64_t)this, a6, v13, v15, v19, v18, v12, v14, v16, v17, a5);
}

void physx::Bp::PersistentSelfCollisionPairs::~PersistentSelfCollisionPairs(physx::Bp::PersistentSelfCollisionPairs *this)
{
  *(void *)this = &unk_26E723C10;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
}

{
  void (*v1)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E723C10;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::Bp::PersistentPairs::update()
{
  return 0;
}

void physx::Bp::PersistentSelfCollisionPairs::findOverlaps(uint64_t a1, physx::Bp::PairManagerData *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  if (*(unsigned char *)(v7 + 84))
  {
    physx::Bp::Aggregate::sortBounds((physx::Bp::Aggregate *)v7);
    a5 = v47;
    a6 = v48;
    uint64_t v7 = *(void *)(a1 + 72);
  }
  unint64_t v9 = *(unsigned int *)(v7 + 16);
  if (v9)
  {
    unint64_t v10 = 0;
    LODWORD(v11) = 0;
    uint64_t v12 = *(void *)(v7 + 40);
    uint64_t v13 = *(void *)(v7 + 48);
    uint64_t v45 = v7;
    uint64_t v46 = this;
    do
    {
      unsigned int v14 = *(_DWORD *)(v12 + 8 * v10 + 4);
      do
      {
        uint64_t v15 = 8 * v11;
        uint64_t v11 = (v11 + 1);
      }
      while (*(_DWORD *)(v12 + v15) < *(_DWORD *)(v12 + 8 * v10));
      if (*(_DWORD *)(v12 + 8 * v11) <= v14)
      {
        uint64_t v16 = (uint64_t *)(v13 + 16 * v10);
        uint64_t v17 = v11;
        int v18 = v11;
        unint64_t v49 = v10;
        do
        {
          uint64_t v19 = (uint64_t *)(v13 + 16 * v17);
          v20.i64[0] = v16[1];
          v21.i64[0] = *v19;
          v20.i64[1] = v19[1];
          v21.i64[1] = *v16;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v21, v20))) & 1) == 0)
          {
            uint64_t v22 = *(void *)(v7 + 8);
            uint64_t v23 = *(unsigned int *)(v22 + 4 * v10);
            uint64_t v24 = *(unsigned int *)(v22 + 4 * v17);
            int v25 = *(_DWORD *)(a5 + 4 * v23);
            int v26 = *(_DWORD *)(a5 + 4 * v24);
            if (v25 != v26)
            {
              if (*(unsigned char *)(a6 + (v26 & 3 | (4 * (v25 & 3)))))
              {
                if (v23 <= v24) {
                  unsigned int v27 = v24;
                }
                else {
                  unsigned int v27 = v23;
                }
                if (v23 >= v24) {
                  int v28 = v24;
                }
                else {
                  int v28 = v23;
                }
                unsigned int v29 = ((unsigned __int16)v28 | ((unsigned __int16)v27 << 16))
                    + ~(((unsigned __int16)v28 | ((unsigned __int16)v27 << 16)) << 15);
                unsigned int v30 = (9 * (v29 ^ (v29 >> 10))) ^ ((9 * (v29 ^ (v29 >> 10))) >> 6);
                unsigned int v31 = (v30 + ~(v30 << 11)) ^ ((v30 + ~(v30 << 11)) >> 16);
                unsigned int v32 = *((_DWORD *)this + 1) & v31;
                uint64_t v33 = *((void *)this + 2);
                if (!v33 || (uint64_t v34 = *(unsigned int *)(v33 + 4 * v32), v34 == -1))
                {
LABEL_27:
                  unsigned int v40 = *((_DWORD *)this + 2);
                  if (v40 >= *(_DWORD *)this)
                  {
                    uint64_t v41 = this;
                    unint64_t v42 = v9;
                    unsigned int v32 = physx::Bp::PairManagerData::growPairs(v41, v31);
                    a6 = v48;
                    unint64_t v10 = v49;
                    unint64_t v9 = v42;
                    uint64_t v7 = v45;
                    this = v46;
                    a5 = v47;
                    unsigned int v40 = *((_DWORD *)v46 + 2);
                    uint64_t v33 = *((void *)v46 + 2);
                  }
                  *((_DWORD *)this + 2) = v40 + 1;
                  uint64_t v43 = *((void *)this + 3);
                  int v44 = (unsigned int *)(*((void *)this + 4) + 8 * v40);
                  *int v44 = v28 | 0x80000000;
                  v44[1] = v27;
                  *(_DWORD *)(v43 + 4 * v40) = *(_DWORD *)(v33 + 4 * v32);
                  *(_DWORD *)(v33 + 4 * v32) = v40;
                }
                else
                {
                  uint64_t v35 = *((void *)this + 4);
                  while (1)
                  {
                    if ((*(_DWORD *)(v35 + 8 * v34) & 0x7FFFFFFF) == v28)
                    {
                      uint64_t v36 = v35 + 8 * v34;
                      int v39 = *(_DWORD *)(v36 + 4);
                      int v37 = (unsigned int *)(v36 + 4);
                      int v38 = v39;
                      if ((v39 & 0x7FFFFFFF) == v27) {
                        break;
                      }
                    }
                    uint64_t v34 = *(unsigned int *)(*((void *)this + 3) + 4 * v34);
                    if (v34 == -1) {
                      goto LABEL_27;
                    }
                  }
                  unsigned int *v37 = v38 | 0x80000000;
                }
              }
            }
          }
          uint64_t v17 = ++v18;
        }
        while (*(_DWORD *)(v12 + 8 * v17) <= v14);
      }
      ++v10;
    }
    while (v10 < v9 && v11 < v9);
  }
}

void physx::Bp::SapUpdateWorkTask::~SapUpdateWorkTask(physx::Bp::SapUpdateWorkTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Bp::SapUpdateWorkTask::getName(physx::Bp::SapUpdateWorkTask *this)
{
  return "BpSAP.updateWork";
}

void physx::Bp::SapPostUpdateWorkTask::~SapPostUpdateWorkTask(physx::Bp::SapPostUpdateWorkTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Bp::SapPostUpdateWorkTask::getName(physx::Bp::SapPostUpdateWorkTask *this)
{
  return "BpSAP.postUpdateWork";
}

void *physx::Cm::DelegateTask<physx::Bp::AABBManager,&physx::Bp::AABBManager::postBpStage3>::~DelegateTask(void *result)
{
  *uint64_t result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::ReflectionAllocator<physx::Bp::FilterGroup::Enum>>::growAndPushBack(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::FilterGroup::Enum>::getName() [T = physx::Bp"
    }
           "::FilterGroup::Enum]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 4 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_DWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  uint64_t v11 = *(int **)v3;
  if (v9)
  {
    uint64_t v12 = *(int **)v3;
    uint64_t v13 = v8;
    do
    {
      int v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v10);
  }
  _DWORD *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v11)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

void physx::Bp::SortAggregateBoundsParallel::~SortAggregateBoundsParallel(physx::Bp::SortAggregateBoundsParallel *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Bp::SortAggregateBoundsParallel::getName(physx::Bp::SortAggregateBoundsParallel *this)
{
  return "SortAggregateBoundsParallel";
}

void physx::Bp::SortAggregateBoundsParallel::runInternal(physx::Bp::SortAggregateBoundsParallel *this)
{
  unint64_t v1 = *((unsigned int *)this + 12);
  if (v1)
  {
    for (unint64_t i = 0; i < v1; ++i)
    {
      int v4 = *(physx::Bp::Aggregate **)(*((void *)this + 5) + 8 * i);
      if (*((unsigned char *)v4 + 84))
      {
        physx::Bp::Aggregate::sortBounds(v4);
        unint64_t v1 = *((unsigned int *)this + 12);
      }
    }
  }
}

void physx::Bp::ProcessSelfCollisionPairsParallel::~ProcessSelfCollisionPairsParallel(physx::Bp::ProcessSelfCollisionPairsParallel *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

const char *physx::Bp::ProcessSelfCollisionPairsParallel::getName(physx::Bp::ProcessSelfCollisionPairsParallel *this)
{
  return "ProcessSelfCollisionPairsParallel";
}

uint64_t physx::Bp::ProcessSelfCollisionPairsParallel::runInternal(physx::Bp::ProcessSelfCollisionPairsParallel *this)
{
  physx::Bp::AABBManager::getBpCacheData(*(physx::Bp::AABBManager **)(*((void *)this + 15) + 792));
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v7 = &v2[2 * v4];
    uint64_t v8 = (char *)this + 16 * v4;
    *((void *)v8 + 5) = v7 + 1;
    *((_DWORD *)v8 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *((_DWORD *)v7 + 4);
    *((void *)v8 + 9) = v7 + 5;
    *((_DWORD *)v8 + 20) = *((_DWORD *)v7 + 12);
    uint64_t v4 = 1;
    char v5 = 0;
  }
  while ((v6 & 1) != 0);
  unint64_t v9 = *((unsigned int *)this + 28);
  if (v9)
  {
    for (unint64_t i = 0; i < v9; ++i)
    {
      uint64_t v11 = *(void *)(*(void *)(*((void *)this + 13) + 8 * i) + 24);
      if (v11)
      {
        physx::Bp::AABBManager::updatePairs(*((unsigned int **)this + 15), v11, (uint64_t)v3);
        unint64_t v9 = *((unsigned int *)this + 28);
      }
    }
  }
  physx::Bp::ProcessAggPairsBase::updateCounters((uint64_t)this);
  uint64_t v12 = *(void *)(*((void *)this + 15) + 792);
  pthread_mutex_lock((pthread_mutex_t *)(v12 + 8));
  *uint64_t v3 = *(void *)v12;
  *(void *)uint64_t v12 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v12 + 8));
}

uint64_t physx::Bp::ProcessAggPairsBase::updateCounters(uint64_t this)
{
  uint64_t v1 = 0;
  char v2 = 1;
  do
  {
    char v3 = v2;
    uint64_t v4 = this + 16 * v1;
    *(_DWORD *)(v4 + 52) = *(_DWORD *)(*(void *)(v4 + 40) + 8) - *(_DWORD *)(v4 + 48);
    *(_DWORD *)(v4 + 84) = *(_DWORD *)(*(void *)(v4 + 72) + 8) - *(_DWORD *)(v4 + 80);
    uint64_t v1 = 1;
    char v2 = 0;
  }
  while ((v3 & 1) != 0);
  return this;
}

void physx::Bp::ProcessAggPairsParallelTask::~ProcessAggPairsParallelTask(physx::Bp::ProcessAggPairsParallelTask *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::Bp::ProcessAggPairsParallelTask::getName(physx::Bp::ProcessAggPairsParallelTask *this)
{
  return *((void *)this + 49);
}

uint64_t physx::Bp::ProcessAggPairsParallelTask::runInternal(physx::Bp::ProcessAggPairsParallelTask *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  v3.n128_f64[0] = physx::Bp::AABBManager::getBpCacheData(*(physx::Bp::AABBManager **)(*((void *)this + 46) + 792));
  uint64_t v4 = v2;
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = &v2[2 * v5];
    unint64_t v9 = (char *)this + 16 * v5;
    *((void *)v9 + 5) = v8 + 1;
    *((_DWORD *)v9 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *((_DWORD *)v8 + 4);
    *((void *)v9 + 9) = v8 + 5;
    *((_DWORD *)v9 + 20) = *((_DWORD *)v8 + 12);
    uint64_t v5 = 1;
    char v6 = 0;
  }
  while ((v7 & 1) != 0);
  v18[128] = 1;
  uint64_t v19 = v18;
  uint64_t v20 = 0x1000000000;
  if (*((_DWORD *)this + 90))
  {
    unint64_t v10 = 0;
    uint64_t v11 = (void *)((char *)this + 232);
    do
    {
      if ((*(unsigned int (**)(void, void, void *, __n128))(*(void *)*(v11 - 16) + 16))(*(v11 - 16), *((void *)this + 46), v4, v3))
      {
        if ((HIDWORD(v20) & 0x7FFFFFFFu) <= v20)
        {
          physx::shdfnd::Array<physx::Bp::AggPair,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>>>::growAndPushBack((uint64_t)v18, v11);
        }
        else
        {
          *(void *)&v19[8 * v20] = *v11;
          LODWORD(v20) = v20 + 1;
        }
        uint64_t v12 = *(v11 - 16);
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
      ++v10;
      ++v11;
    }
    while (v10 < *((unsigned int *)this + 90));
  }
  physx::Bp::ProcessAggPairsBase::updateCounters((uint64_t)this);
  uint64_t v13 = *(void *)(*((void *)this + 46) + 792);
  pthread_mutex_lock((pthread_mutex_t *)(v13 + 8));
  *uint64_t v4 = *(void *)v13;
  *(void *)uint64_t v13 = v4;
  uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v13 + 8));
  if (v20)
  {
    uint64_t v15 = (pthread_mutex_t **)*((void *)this + 48);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled
      || (uint64_t result = pthread_mutex_lock(*v15), v20))
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      do
      {
        uint64_t result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(*((void *)this + 47), *(_DWORD *)&v19[v16], *(_DWORD *)&v19[v16 + 4]);
        ++v17;
        v16 += 8;
      }
      while (v17 < v20);
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      uint64_t result = pthread_mutex_unlock(*v15);
    }
  }
  if ((v20 & 0x8000000000000000) == 0 && (v20 & 0x7FFFFFFF00000000) != 0 && v19 != v18)
  {
    if (v19) {
      return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>::allocate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      __n128 v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>::getName() [T = physx::Bp::AggPair]";
    }
    else {
      __n128 v3 = "<allocation names disabled>";
    }
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16);
    return v4(v2 + 24, v1, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::AggPair,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 148);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x80 && *(unsigned char *)(v3 + 128) == 0)
    {
      *(unsigned char *)(v3 + 128) = 1;
      char v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>::allocate(result);
      char v7 = (void *)result;
    }
  }
  else
  {
    char v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 144);
  if (v8)
  {
    unint64_t v9 = (unint64_t)&v7[v8];
    unint64_t v10 = *(uint64_t **)(v3 + 136);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
    uint64_t v13 = *(unsigned int *)(v3 + 144);
  }
  else
  {
    uint64_t v13 = 0;
  }
  v7[v13] = *a2;
  if ((*(_DWORD *)(v3 + 148) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(v3 + 136);
    if (v14 == v3)
    {
      *(unsigned char *)(v3 + 128) = 0;
    }
    else if (v14)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v7;
  ++*(_DWORD *)(v3 + 144);
  *(_DWORD *)(v3 + 148) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t result, int a2, int a3)
{
  if (*(_DWORD *)(result + 52))
  {
    unsigned int v3 = 9
       * ((((unsigned __int16)a2 | ((unsigned __int16)a3 << 16))
         + ~(((unsigned __int16)a2 | ((unsigned __int16)a3 << 16)) << 15)) ^ ((((unsigned __int16)a2 | ((unsigned __int16)a3 << 16))
                                                                                           + ~(((unsigned __int16)a2 | ((unsigned __int16)a3 << 16)) << 15)) >> 10));
    int v4 = (_DWORD *)(*(void *)(result + 24)
                  + 4
                  * ((*(_DWORD *)(result + 36) - 1) & (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) ^ (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) >> 16))));
    uint64_t v5 = *v4;
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(result + 16);
      uint64_t v8 = v6 + 16 * v5;
      if (*(_DWORD *)v8 == a2 && *(_DWORD *)(v8 + 4) == a3)
      {
LABEL_14:
        *int v4 = *(_DWORD *)(v7 + 4 * v5);
        unsigned int v12 = *(_DWORD *)(result + 52) - 1;
        ++*(_DWORD *)(result + 48);
        *(_DWORD *)(result + 52) = v12;
        if (v5 != v12)
        {
          uint64_t v13 = (uint64_t *)(v6 + 16 * v12);
          uint64_t v15 = *v13;
          uint64_t v14 = v13[1];
          *(void *)uint64_t v8 = v15;
          uint64_t v16 = v6 + 16 * v5;
          uint64_t v18 = *(void *)(result + 8);
          uint64_t v17 = *(void *)(result + 16);
          LODWORD(v15) = *(_DWORD *)(v17 + 4 * *(unsigned int *)(result + 52));
          *(void *)(v16 + 8) = v14;
          *(_DWORD *)(v17 + 4 * v5) = v15;
          LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(unsigned __int16 *)(v18 + 16 * v5) | (*(_DWORD *)(v18 + 16 * v5 + 4) << 16);
          LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
          LODWORD(v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
          uint64_t v19 = (_DWORD *)(*(void *)(result + 24)
                         + 4 * ((v16 ^ WORD1(v16)) & (*(_DWORD *)(result + 36) - 1)));
          uint64_t v20 = *(unsigned int *)(result + 52);
          uint64_t v21 = *v19;
          if (v21 != v20)
          {
            do
            {
              uint64_t v22 = v21;
              uint64_t v21 = *(unsigned int *)(v17 + 4 * v21);
            }
            while (v21 != v20);
            uint64_t v19 = (_DWORD *)(v17 + 4 * v22);
          }
          _DWORD *v19 = v5;
        }
        --*(_DWORD *)(result + 44);
      }
      else
      {
        while (1)
        {
          uint64_t v10 = v5;
          uint64_t v5 = *(unsigned int *)(v7 + 4 * v5);
          if (v5 == -1) {
            break;
          }
          uint64_t v8 = v6 + 16 * v5;
          if (*(_DWORD *)v8 == a2 && *(_DWORD *)(v8 + 4) == a3)
          {
            int v4 = (_DWORD *)(v7 + 4 * v10);
            goto LABEL_14;
          }
        }
      }
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::AggPair,physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>::allocate(8 * v5);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  if (v7)
  {
    unint64_t v8 = (unint64_t)&v6[v7];
    unint64_t v9 = *(uint64_t **)v3;
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
    uint64_t v12 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v12 = 0;
  }
  v6[v12] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v6;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>::getName() [T = physx::Bp::AABBOverlap]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 24 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(v3 + 8);
  unint64_t v8 = *(long long **)v3;
  if (v7)
  {
    unint64_t v9 = v6 + 24 * v7;
    unint64_t v10 = v6;
    do
    {
      long long v11 = *v8;
      *(void *)(v10 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)v8 + 2);
      *(_OWORD *)unint64_t v10 = v11;
      v10 += 24;
      unint64_t v8 = (long long *)((char *)v8 + 24);
    }
    while (v10 < v9);
    unint64_t v8 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::Bp::boxPruningKernel<0>(uint64_t this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3 && a7)
  {
    uint64_t v12 = a2;
    uint64_t v13 = this;
    unint64_t v14 = 0;
    unsigned int v15 = 0;
    uint64_t v16 = a11;
    unint64_t v50 = a3;
    uint64_t v49 = a8;
    uint64_t v47 = this;
    do
    {
      uint64_t v17 = (unsigned int *)(a5 + 8 * v14);
      unsigned int v18 = *v17;
      unsigned int v19 = v17[1];
      do
      {
        LODWORD(v20) = v15;
        unsigned int v21 = *(_DWORD *)(a9 + 8 * v15++);
      }
      while (v21 < v18);
      --v15;
      if (v21 <= v19)
      {
        uint64_t v20 = v20;
        uint64_t v22 = (uint64_t *)(a6 + 16 * v14);
        unsigned int v23 = v15;
        unint64_t v53 = v14;
        do
        {
          uint64_t v24 = (uint64_t *)(a10 + 16 * v20);
          v25.i64[0] = v22[1];
          v26.i64[0] = *v24;
          v25.i64[1] = v24[1];
          v26.i64[1] = *v22;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v26, v25))) & 1) == 0)
          {
            uint64_t v27 = *(unsigned int *)(a4 + 4 * v14);
            uint64_t v28 = *(unsigned int *)(a8 + 4 * v20);
            int v29 = *(_DWORD *)(v16 + 4 * v27);
            int v30 = *(_DWORD *)(v16 + 4 * v28);
            if (v29 != v30)
            {
              if (*(unsigned char *)(v12 + (v30 & 3 | (4 * (v29 & 3)))))
              {
                if (v27 <= v28) {
                  unsigned int v31 = v28;
                }
                else {
                  unsigned int v31 = *(_DWORD *)(a4 + 4 * v14);
                }
                if (v27 >= v28) {
                  int v32 = v28;
                }
                else {
                  int v32 = *(_DWORD *)(a4 + 4 * v14);
                }
                unsigned int v33 = ((unsigned __int16)v32 | ((unsigned __int16)v31 << 16))
                    + ~(((unsigned __int16)v32 | ((unsigned __int16)v31 << 16)) << 15);
                unsigned int v34 = (9 * (v33 ^ (v33 >> 10))) ^ ((9 * (v33 ^ (v33 >> 10))) >> 6);
                unsigned int v35 = (v34 + ~(v34 << 11)) ^ ((v34 + ~(v34 << 11)) >> 16);
                this = *(_DWORD *)(v13 + 4) & v35;
                uint64_t v36 = *(void *)(v13 + 16);
                if (!v36 || (uint64_t v37 = *(unsigned int *)(v36 + 4 * this), v37 == -1))
                {
LABEL_26:
                  unsigned int v43 = *(_DWORD *)(v13 + 8);
                  if (v43 >= *(_DWORD *)v13)
                  {
                    this = physx::Bp::PairManagerData::growPairs((physx::Bp::PairManagerData *)v13, v35);
                    uint64_t v16 = a11;
                    uint64_t v13 = v47;
                    unint64_t v14 = v53;
                    uint64_t v12 = a2;
                    a8 = v49;
                    unsigned int v43 = *(_DWORD *)(v47 + 8);
                    uint64_t v36 = *(void *)(v47 + 16);
                  }
                  *(_DWORD *)(v13 + 8) = v43 + 1;
                  uint64_t v44 = *(void *)(v13 + 24);
                  uint64_t v45 = (unsigned int *)(*(void *)(v13 + 32) + 8 * v43);
                  *uint64_t v45 = v32 | 0x80000000;
                  v45[1] = v31;
                  *(_DWORD *)(v44 + 4 * v43) = *(_DWORD *)(v36 + 4 * this);
                  *(_DWORD *)(v36 + 4 * this) = v43;
                }
                else
                {
                  uint64_t v38 = *(void *)(v13 + 32);
                  while (1)
                  {
                    if ((*(_DWORD *)(v38 + 8 * v37) & 0x7FFFFFFF) == v32)
                    {
                      uint64_t v39 = v38 + 8 * v37;
                      int v42 = *(_DWORD *)(v39 + 4);
                      unsigned int v40 = (unsigned int *)(v39 + 4);
                      int v41 = v42;
                      if ((v42 & 0x7FFFFFFF) == v31) {
                        break;
                      }
                    }
                    uint64_t v37 = *(unsigned int *)(*(void *)(v13 + 24) + 4 * v37);
                    if (v37 == -1) {
                      goto LABEL_26;
                    }
                  }
                  *unsigned int v40 = v41 | 0x80000000;
                }
              }
            }
          }
          uint64_t v20 = ++v23;
        }
        while (*(_DWORD *)(a9 + 8 * v20) <= v19);
      }
      ++v14;
    }
    while (v14 < v50 && v15 < a7);
  }
  return this;
}

uint64_t physx::Bp::boxPruningKernel<1>(uint64_t this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3 && a7)
  {
    uint64_t v12 = a2;
    uint64_t v13 = this;
    unint64_t v14 = 0;
    unsigned int v15 = 0;
    uint64_t v16 = a11;
    unint64_t v50 = a3;
    uint64_t v49 = a8;
    uint64_t v47 = this;
    do
    {
      uint64_t v17 = (unsigned int *)(a5 + 8 * v14);
      unsigned int v18 = *v17;
      unsigned int v19 = v17[1];
      do
      {
        LODWORD(v20) = v15;
        unsigned int v21 = *(_DWORD *)(a9 + 8 * v15++);
      }
      while (v21 <= v18);
      --v15;
      if (v21 <= v19)
      {
        uint64_t v20 = v20;
        uint64_t v22 = (uint64_t *)(a6 + 16 * v14);
        unsigned int v23 = v15;
        unint64_t v53 = v14;
        do
        {
          uint64_t v24 = (uint64_t *)(a10 + 16 * v20);
          v25.i64[0] = v22[1];
          v26.i64[0] = *v24;
          v25.i64[1] = v24[1];
          v26.i64[1] = *v22;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v26, v25))) & 1) == 0)
          {
            uint64_t v27 = *(unsigned int *)(a4 + 4 * v14);
            uint64_t v28 = *(unsigned int *)(a8 + 4 * v20);
            int v29 = *(_DWORD *)(v16 + 4 * v27);
            int v30 = *(_DWORD *)(v16 + 4 * v28);
            if (v29 != v30)
            {
              if (*(unsigned char *)(v12 + (v30 & 3 | (4 * (v29 & 3)))))
              {
                if (v27 <= v28) {
                  unsigned int v31 = v28;
                }
                else {
                  unsigned int v31 = *(_DWORD *)(a4 + 4 * v14);
                }
                if (v27 >= v28) {
                  int v32 = v28;
                }
                else {
                  int v32 = *(_DWORD *)(a4 + 4 * v14);
                }
                unsigned int v33 = ((unsigned __int16)v32 | ((unsigned __int16)v31 << 16))
                    + ~(((unsigned __int16)v32 | ((unsigned __int16)v31 << 16)) << 15);
                unsigned int v34 = (9 * (v33 ^ (v33 >> 10))) ^ ((9 * (v33 ^ (v33 >> 10))) >> 6);
                unsigned int v35 = (v34 + ~(v34 << 11)) ^ ((v34 + ~(v34 << 11)) >> 16);
                this = *(_DWORD *)(v13 + 4) & v35;
                uint64_t v36 = *(void *)(v13 + 16);
                if (!v36 || (uint64_t v37 = *(unsigned int *)(v36 + 4 * this), v37 == -1))
                {
LABEL_26:
                  unsigned int v43 = *(_DWORD *)(v13 + 8);
                  if (v43 >= *(_DWORD *)v13)
                  {
                    this = physx::Bp::PairManagerData::growPairs((physx::Bp::PairManagerData *)v13, v35);
                    uint64_t v16 = a11;
                    uint64_t v13 = v47;
                    unint64_t v14 = v53;
                    uint64_t v12 = a2;
                    a8 = v49;
                    unsigned int v43 = *(_DWORD *)(v47 + 8);
                    uint64_t v36 = *(void *)(v47 + 16);
                  }
                  *(_DWORD *)(v13 + 8) = v43 + 1;
                  uint64_t v44 = *(void *)(v13 + 24);
                  uint64_t v45 = (unsigned int *)(*(void *)(v13 + 32) + 8 * v43);
                  *uint64_t v45 = v32 | 0x80000000;
                  v45[1] = v31;
                  *(_DWORD *)(v44 + 4 * v43) = *(_DWORD *)(v36 + 4 * this);
                  *(_DWORD *)(v36 + 4 * this) = v43;
                }
                else
                {
                  uint64_t v38 = *(void *)(v13 + 32);
                  while (1)
                  {
                    if ((*(_DWORD *)(v38 + 8 * v37) & 0x7FFFFFFF) == v32)
                    {
                      uint64_t v39 = v38 + 8 * v37;
                      int v42 = *(_DWORD *)(v39 + 4);
                      unsigned int v40 = (unsigned int *)(v39 + 4);
                      int v41 = v42;
                      if ((v42 & 0x7FFFFFFF) == v31) {
                        break;
                      }
                    }
                    uint64_t v37 = *(unsigned int *)(*(void *)(v13 + 24) + 4 * v37);
                    if (v37 == -1) {
                      goto LABEL_26;
                    }
                  }
                  *unsigned int v40 = v41 | 0x80000000;
                }
              }
            }
          }
          uint64_t v20 = ++v23;
        }
        while (*(_DWORD *)(a9 + 8 * v20) <= v19);
      }
      ++v14;
    }
    while (v14 < v50 && v15 < a7);
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>::getName() [T = physx::Bp::Aggregate *]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v8 = (void *)result;
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    long long v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

_DWORD *physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::copy<physx::shdfnd::ReflectionAllocator<unsigned int>>(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    result[2] = v3;
    result[3] = v3;
    uint64_t result = (_DWORD *)physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)result, 4 * v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    *(void *)uint64_t v2 = result;
    uint64_t v5 = v2[2];
    if (v5)
    {
      uint64_t v6 = &result[v5];
      unsigned int v7 = *(int **)a2;
      do
      {
        int v8 = *v7++;
        *result++ = v8;
      }
      while (result < v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::VirtualAllocator>::recreate(void *a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const char *, uint64_t))(*(void *)*a1 + 16))(*a1, 4 * a2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  uint64_t v6 = *((unsigned int *)a1 + 4);
  uint64_t v7 = a1[1];
  if (v6)
  {
    unint64_t v8 = result + 4 * v6;
    uint64_t v9 = (int *)a1[1];
    unint64_t v10 = (_DWORD *)result;
    do
    {
      int v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
  }
  if ((*((_DWORD *)a1 + 5) & 0x80000000) == 0 && v7) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  a1[1] = v5;
  *((_DWORD *)a1 + 5) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::VolumeData,physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 16 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>::getName() [T = physx::Bp::VolumeData]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 16 * v9;
    uint64_t v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<float,physx::shdfnd::VirtualAllocator>::recreate(void *a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const char *, uint64_t))(*(void *)*a1 + 16))(*a1, 4 * a2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v5 = result;
  uint64_t v6 = *((unsigned int *)a1 + 4);
  uint64_t v7 = a1[1];
  if (v6)
  {
    unint64_t v8 = result + 4 * v6;
    uint64_t v9 = (int *)a1[1];
    unint64_t v10 = (_DWORD *)result;
    do
    {
      int v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
  }
  if ((*((_DWORD *)a1 + 5) & 0x80000000) == 0 && v7) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  a1[1] = v5;
  *((_DWORD *)a1 + 5) = a2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Bp::AABBManager,&physx::Bp::AABBManager::postBpStage3>::~DelegateTask(void *a1)
{
  *a1 = &unk_26E7231E8;
  uint64_t v1 = *(void *)(physx::shdfnd::Foundation::mInstance + 24);
  a1[2] = 0;
  return (*(uint64_t (**)(void))(v1 + 24))();
}

uint64_t physx::Cm::DelegateTask<physx::Bp::AABBManager,&physx::Bp::AABBManager::postBpStage3>::getName(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Bp::AABBManager,&physx::Bp::AABBManager::postBpStage3>::runInternal(uint64_t a1, physx::PxBaseTask *a2)
{
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 16 * v9) {
    int v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    int v11 = 0;
  }
  uint64_t v12 = &v11[4 * v3];
  long long v13 = &v11[v10];
  uint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = (unsigned __int16 *)(*(void *)(a1 + 8) + v15);
      int v18 = *v17 | (*((_DWORD *)v17 + 1) << 16);
      unsigned int v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
      unsigned int v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      unsigned int v21 = (v20 ^ HIWORD(v20)) & (v3 - 1);
      *(_DWORD *)&v12[4 * v16] = *(_DWORD *)&v11[4 * v21];
      *(_DWORD *)&v11[4 * v21] = v16;
      uint64_t v22 = &v13[v15];
      *(void *)uint64_t v22 = *(void *)v17;
      *((void *)v22 + 1) = *((void *)v17 + 1);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Bp::Pair,physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::internal::HashSetBase<physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 44);
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  unsigned int v10 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v11 = 4 * v3;
  uint64_t v12 = ((-4 * (v3 + v10)) & 0xC) + 4 * (v3 + v10);
  if (v12 + 8 * v10) {
    long long v13 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v12 + 8 * v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    long long v13 = 0;
  }
  unint64_t v14 = &v13[v11];
  uint64_t v15 = &v13[v12];
  uint64_t result = memset(v13, 255, 4 * v3);
  if (v8 == -1)
  {
    if (*(_DWORD *)(a1 + 52))
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      do
      {
        uint64_t v27 = (unsigned __int16 *)(*(void *)(a1 + 8) + v25);
        int v28 = *v27 | (*((_DWORD *)v27 + 1) << 16);
        unsigned int v29 = 9 * ((v28 + ~(v28 << 15)) ^ ((v28 + ~(v28 << 15)) >> 10));
        unsigned int v30 = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
        unsigned int v31 = (v30 ^ HIWORD(v30)) & (v3 - 1);
        *(_DWORD *)&v14[4 * v26] = *(_DWORD *)&v13[4 * v31];
        *(_DWORD *)&v13[4 * v31] = v26;
        *(void *)&v15[8 * v26++] = *(void *)v27;
        v25 += 8;
      }
      while (v26 < *(unsigned int *)(a1 + 52));
    }
  }
  else
  {
    uint64_t result = memcpy(&v13[v11], *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 32)));
    unint64_t v17 = *(unsigned int *)(a1 + 36);
    if (v17)
    {
      for (unint64_t i = 0; i < v17; ++i)
      {
        uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * i);
        if (v19 != -1)
        {
          do
          {
            unsigned int v20 = (unsigned __int16 *)(*(void *)(a1 + 8) + 8 * v19);
            int v21 = *v20 | (*((_DWORD *)v20 + 1) << 16);
            unsigned int v22 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
            unsigned int v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
            unsigned int v24 = (v23 ^ HIWORD(v23)) & (v3 - 1);
            *(_DWORD *)&v14[4 * v19] = *(_DWORD *)&v13[4 * v24];
            *(_DWORD *)&v13[4 * v24] = v19;
            *(void *)&v15[8 * v19] = *(void *)v20;
            uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * v19);
          }
          while (v19 != -1);
          unint64_t v17 = *(unsigned int *)(a1 + 36);
        }
      }
    }
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v14;
  *(void *)(a1 + 24) = v13;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v15;
  uint64_t v32 = v10 - 1;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v3;
  if (v32 > v9)
  {
    uint64_t v33 = v9;
    do
    {
      *(_DWORD *)&v14[4 * v33] = v33 + 1;
      ++v33;
    }
    while (v32 != v33);
  }
  *(_DWORD *)&v14[4 * v32] = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v9;
  return result;
}

_DWORD *physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack(_DWORD *result, _DWORD *a2)
{
  unsigned int v3 = result;
  int v4 = result[5];
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (_DWORD *)(*(uint64_t (**)(void))(**(void **)result + 16))();
    unsigned int v6 = result;
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = v3[4];
  uint64_t v8 = *((void *)v3 + 1);
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    unsigned int v10 = (int *)*((void *)v3 + 1);
    uint64_t v11 = v6;
    do
    {
      int v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
    uint64_t v13 = v3[4];
  }
  else
  {
    uint64_t v13 = 0;
  }
  v6[v13] = *a2;
  if ((v3[5] & 0x80000000) == 0 && v8) {
    uint64_t result = (_DWORD *)(*(uint64_t (**)(void))(**(void **)v3 + 24))();
  }
  *((void *)v3 + 1) = v6;
  ++v3[4];
  v3[5] = v5;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::resize(uint64_t result)
{
  *(_DWORD *)(result + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)result + 16))();
    int v4 = (_DWORD *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 8);
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = *(int **)(v3 + 8);
    unint64_t v9 = v4;
    do
    {
      int v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 20) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 24))();
  }
  *(void *)(v3 + 8) = v4;
  *(_DWORD *)(v3 + 20) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>::getName() [T = physx::Bp::AABBOverlap]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 24 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 24 * v9;
    uint64_t v11 = *(long long **)v3;
    unint64_t v12 = v8;
    do
    {
      long long v13 = *v11;
      *(void *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)v11 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      v12 += 24;
      uint64_t v11 = (long long *)((char *)v11 + 24);
    }
    while (v12 < v10);
    unsigned int v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v14 = 0;
  }
  uint64_t v15 = v8 + 24 * v14;
  long long v16 = *a2;
  *(void *)(v15 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v15 = v16;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::ProcessAggPairsBase *,physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>::getName() [T = physx"
    }
           "::Bp::ProcessAggPairsBase *]";
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)v3;
    unint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>::getName() [T = physx::Bp::Aggregate *]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = *(uint64_t **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    uint64_t v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::BpCacheData *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::Bp::BpCacheData *>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 148);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (!v5) {
    goto LABEL_14;
  }
  if ((8 * v5) <= 0x80 && *(unsigned char *)(result + 128) == 0)
  {
    *(unsigned char *)(result + 128) = 1;
    unint64_t v9 = (void *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    unint64_t v9 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BpCacheData *>::getName() [T = physx::Bp::BpCacheData *]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  unint64_t v9 = (void *)result;
LABEL_16:
  uint64_t v10 = *(unsigned int *)(v3 + 144);
  uint64_t v11 = &v9[v10];
  if (v10)
  {
    unint64_t v12 = *(uint64_t **)(v3 + 136);
    uint64_t v13 = v9;
    do
    {
      uint64_t v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *uint64_t v11 = *a2;
  if ((*(_DWORD *)(v3 + 148) & 0x80000000) == 0)
  {
    uint64_t v15 = *(void *)(v3 + 136);
    if (v15 == v3)
    {
      *(unsigned char *)(v3 + 128) = 0;
    }
    else if (v15)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v10) = *(_DWORD *)(v3 + 144);
    }
  }
  *(void *)(v3 + 13re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9;
  *(_DWORD *)(v3 + 144) = v10 + 1;
  *(_DWORD *)(v3 + 148) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<void *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<void *>::getName() [T = void *]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)v3;
    unint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  void *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v5;
  return result;
}

uint64_t internalABP::ABP_MM::frameAlloc(pthread_mutex_t **this, unsigned int a2)
{
  if (this) {
    return physx::PxcScratchAllocator::alloc(this, a2, 1);
  }
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 373);
  return 0;
}

uint64_t internalABP::ABP_MM::frameFree(uint64_t this, unint64_t a2)
{
  if (this) {
    return physx::PxcScratchAllocator::free(this, a2);
  }
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return this;
}

void *internalABP::SplitBoxes::reset(void *this)
{
  uint64_t v1 = this;
  if (this[2])
  {
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v1[2] = 0;
  }
  if (v1[1]) {
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return this;
}

BOOL internalABP::SplitBoxes::allocate(internalABP::SplitBoxes *this, unsigned int a2)
{
  unsigned int v3 = *(_DWORD *)this;
  if (*(_DWORD *)this < a2)
  {
    if (*((void *)this + 2))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *((void *)this + 2) = 0;
    }
    if (*((void *)this + 1))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *((void *)this + 1) = 0;
    }
    if (a2 == -6) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (a2 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 643);
    *((void *)this + 1) = v5;
    *((void *)this + 2) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 644);
    *(_DWORD *)this = a2;
    *((_DWORD *)this + 1) = a2;
  }
  return v3 < a2;
}

void internalABP::BitArray::resize(internalABP::BitArray *this, int a2)
{
  if ((a2 & 0x1F) != 0) {
    unsigned int v3 = ((a2 + 128) >> 5) + 1;
  }
  else {
    unsigned int v3 = (a2 + 128) >> 5;
  }
  if (v3) {
    int v4 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 855);
  else {
    int v4 = 0;
  }
  int v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    memcpy(v4, *(const void **)this, (4 * v5));
    int v5 = *((_DWORD *)this + 2);
  }
  if (v3 != v5) {
    bzero(&v4[4 * v5], 4 * (v3 - v5));
  }
  if (*(void *)this) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)this = v4;
  *((_DWORD *)this + 2) = v3;
}

void *internalABP::ABP_SharedData::resize(internalABP::ABP_SharedData *this, int a2)
{
  int v3 = *((_DWORD *)this + 2);
  unsigned int v4 = 2 * v3;
  if (!v3) {
    unsigned int v4 = 256;
  }
  if (v4 <= a2 + 1) {
    unsigned int v5 = a2 + 1;
  }
  else {
    unsigned int v5 = v4;
  }
  uint64_t result = (void *)physx::shdfnd::ReflectionAllocator<internalABP::ABP_Object>::allocate((uint64_t)&v8, 4 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 949);
  uint64_t v7 = result;
  if (v5) {
    uint64_t result = memset(result, 255, 4 * v5);
  }
  if (*(void *)this)
  {
    uint64_t result = memcpy(v7, *(const void **)this, (4 * v3));
    if (*(void *)this) {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)this = v7;
  *((_DWORD *)this + 2) = v5;
  return result;
}

void internalABP::BoxManager::~BoxManager(internalABP::BoxManager *this)
{
  *((void *)this + internalABP::SplitBoxes::reset((void *)this + 13) = 0;
  internalABP::SplitBoxes::reset((void *)this + 8);
  *((void *)this + 8) = 0;
}

void *internalABP::BoxManager::reset(internalABP::BoxManager *this)
{
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 7) = 0;
  if (*((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  if (*((void *)this + 11)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 11) = 0;
  internalABP::SplitBoxes::reset((void *)this + 8);
  return internalABP::SplitBoxes::reset((void *)this + 13);
}

unsigned int *internalABP::BoxManager::addObjects(unsigned int *result, unsigned int *a2, int a3, uint64_t a4)
{
  int v5 = a3;
  uint64_t v7 = result;
  uint64_t v9 = result[14];
  unsigned int v8 = result[15];
  unsigned int v10 = v9 + a3;
  if ((int)v9 + a3 <= v8)
  {
    uint64_t v13 = (unsigned int *)*((void *)result + 6);
  }
  else
  {
    if (v10 <= 2 * v8) {
      unsigned int v11 = 2 * v8;
    }
    else {
      unsigned int v11 = v9 + a3;
    }
    if (v11 <= 0x400) {
      unsigned int v11 = 1024;
    }
    result[15] = v11;
    unint64_t v12 = (const void *)*((void *)result + 6);
    uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 890);
    uint64_t v13 = result;
    if (v9) {
      uint64_t result = (unsigned int *)memcpy(result, v12, (4 * v9));
    }
    if (v12) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t, const void *))(*(void *)(physx::shdfnd::Foundation::mInstance
    }
                                                                                            + 24)
                                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
  }
  *((void *)v7 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v13;
  v7[14] = v10;
  uint64_t v14 = &v13[v9];
  do
  {
    unsigned int v16 = *a2++;
    unint64_t v15 = v16;
    *v14++ = v16 | 0x80000000;
    if (a4) {
      *(_DWORD *)(*(void *)(a4 + 16) + ((v15 >> 3) & 0x1FFFFFFC)) |= 1 << v15;
    }
    --v5;
  }
  while (v5);
  return result;
}

void *internalABP::BoxManager::purgeRemovedFromSleeping(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v4 = (unsigned int *)(result + 16);
  int v3 = *((_DWORD *)result + 32);
  uint64_t v6 = (unsigned int *)(result + 12);
  unsigned int v5 = *((_DWORD *)result + 24);
  unsigned int v7 = v5 - v3;
  if (v5 == v3)
  {
    uint64_t result = internalABP::SplitBoxes::reset(result + 13);
    if (v2[11]) {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    v2[11] = 0;
    *((_DWORD *)v2 + 32) = 0;
  }
  else
  {
    if (v7 >= *((_DWORD *)result + 27) >> 1)
    {
      uint64_t v20 = result[14];
      if (v5)
      {
        unint64_t v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = result[15];
        uint64_t v24 = result[11];
        do
        {
          uint64_t v25 = *(unsigned int *)(v24 + 4 * v21);
          if (v25 != -1)
          {
            if (v21 != v22)
            {
              *(_DWORD *)(v24 + 4 * v22) = v25;
              *(void *)(v20 + 8 * v22) = *(void *)(v20 + 8 * v21);
              *(_OWORD *)(v23 + 16 * v22) = *(_OWORD *)(v23 + 16 * v21);
              unsigned int v5 = *v6;
            }
            *(_DWORD *)(a2 + 4 * v25) = *(_DWORD *)result | (8 * v22++) | 4;
          }
          ++v21;
        }
        while (v21 < v5);
      }
      for (uint64_t i = 0; i != 6; ++i)
        *(_DWORD *)(v20 + 8 * (v7 + i)) = -1;
      *((_DWORD *)result + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v7;
    }
    else
    {
      uint64_t v27 = (internalABP::SplitBoxes *)(result + 13);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (v7 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1282);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * (v7 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1283);
      for (uint64_t j = 0; j != 6; ++j)
        *(_DWORD *)(v9 + 8 * (v7 + j)) = -1;
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1285);
      unint64_t v13 = *((unsigned int *)v2 + 24);
      if (v13)
      {
        unint64_t v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = v2[14];
        uint64_t v17 = v2[15];
        uint64_t v18 = v2[11];
        do
        {
          uint64_t v19 = *(unsigned int *)(v18 + 4 * v14);
          if (v19 != -1)
          {
            *(_DWORD *)(v12 + 4 * v15) = v19;
            *(void *)(v9 + 8 * v15) = *(void *)(v16 + 8 * v14);
            *(_OWORD *)(v10 + 16 * v15) = *(_OWORD *)(v17 + 16 * v14);
            *(_DWORD *)(a2 + 4 * v19) = *(_DWORD *)v2 | (8 * v15++) | 4;
            unint64_t v13 = *((unsigned int *)v2 + 24);
          }
          ++v14;
        }
        while (v14 < v13);
      }
      uint64_t result = internalABP::SplitBoxes::reset(v27);
      *((_DWORD *)v2 + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v7;
      *((_DWORD *)v2 + 27) = v7;
      v2[14] = v9;
      v2[15] = v10;
      if (v2[11]) {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
      }
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v2[11] = v12;
    }
    *uint64_t v6 = v7;
    uint64_t v6 = v4;
  }
  *uint64_t v6 = 0;
  return result;
}

void internalABP::BoxManager::prepareData(uint64_t a1)
{
  v3.n128_f64[0] = MEMORY[0x270FA5388](a1);
  unsigned int v87 = v4;
  uint64_t v5 = v2;
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v6 = v1[14];
  if (v6)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = *((void *)v1 + 6);
    uint64_t v13 = *((void *)v1 + 2);
    int v85 = v1;
    uint64_t v86 = *((void *)v1 + 1);
    uint64_t v88 = v13;
    do
    {
      int v14 = *(_DWORD *)(v12 + 4 * v7);
      if (v14 != -1)
      {
        if (v14 < 0)
        {
          if (!v8)
          {
            uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1402, v3);
            uint64_t v13 = v88;
            unsigned int v8 = (float *)v16;
          }
          uint64_t v17 = v14 & 0x7FFFFFFF;
          v3.n128_f32[0] = *(float *)(v86 + 24 * v17) - *(float *)(v13 + 4 * v17);
          v8[v10] = v3.n128_f32[0];
          if (!v9)
          {
            uint64_t v18 = internalABP::ABP_MM::frameAlloc(*v87, 4 * (int)v6);
            uint64_t v13 = v88;
            uint64_t v9 = (unsigned int *)v18;
          }
          v9[v6 + ~v10++] = v17;
        }
        else
        {
          if (!v9)
          {
            uint64_t v15 = internalABP::ABP_MM::frameAlloc(*v87, 4 * (int)v6);
            uint64_t v13 = v88;
            uint64_t v9 = (unsigned int *)v15;
          }
          v9[v11++] = v7;
        }
      }
      ++v7;
    }
    while (v6 != v7);
    uint64_t v19 = v85;
    unsigned int v20 = v85[24];
    if (v11)
    {
      if (!v20)
      {
        if (internalABP::SplitBoxes::allocate((internalABP::SplitBoxes *)(v85 + 26), v11))
        {
          unsigned int v29 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1604);
          if (*((void *)v85 + 11)) {
            (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
          }
          *((void *)v85 + 11) = v29;
        }
        else
        {
          unsigned int v29 = (_DWORD *)*((void *)v85 + 11);
        }
        uint64_t v64 = 0;
        uint64_t v65 = *((void *)v85 + 9);
        uint64_t v66 = *((void *)v85 + 10);
        uint64_t v67 = *((void *)v85 + 14);
        int v68 = (_OWORD *)*((void *)v85 + 15);
        do
          *(_DWORD *)(v67 + 8 * (v11 + v64++)) = -1;
        while (v64 != 6);
        uint64_t v69 = 0;
        if (v11 <= 1) {
          unsigned int v70 = 1;
        }
        else {
          unsigned int v70 = v11;
        }
        uint64_t v71 = 8 * v70;
        unsigned int v72 = v9;
        do
        {
          unsigned int v73 = *v72++;
          uint64_t v74 = *(unsigned int *)(v12 + 4 * v73);
          *v29++ = v74;
          *(void *)(v67 + v69) = *(void *)(v65 + 8 * v73);
          *v68++ = *(_OWORD *)(v66 + 16 * v73);
          *(_DWORD *)(v5 + 4 * v74) = v69 | *v85 | 4;
          v69 += 8;
        }
        while (v71 != v69);
        v85[24] = v11;
        uint64_t v28 = v86;
        if (v10) {
          goto LABEL_54;
        }
        goto LABEL_87;
      }
      uint64_t v80 = *((void *)v85 + 6);
      uint64_t v81 = *((void *)v85 + 10);
      uint64_t v82 = *((void *)v85 + 9);
      uint64_t v77 = *((void *)v85 + 11);
      uint64_t v78 = *((void *)v85 + 15);
      unsigned int v79 = (unsigned int *)*((void *)v85 + 14);
      unsigned int v21 = *v79;
      unsigned int v22 = *(_DWORD *)(v82 + 8 * *v9);
      unsigned int v23 = v20 + v11;
      int v24 = v85[32];
      unsigned int v84 = v20 + v11 - v24;
      unsigned int v83 = v85[24];
      if (v84 == -6)
      {
        uint64_t v25 = 0;
        uint64_t v27 = 0;
      }
      else
      {
        int v75 = v85[32];
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (v84 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1521, v3);
        uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * (v84 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1522);
        int v24 = v75;
        unsigned int v20 = v83;
        uint64_t v27 = v26;
      }
      for (uint64_t i = 0; i != 6; ++i)
        *(_DWORD *)(v25 + 8 * (v20 - v24 + v11 + i)) = -1;
      if (v23 == v24)
      {
        uint64_t v31 = 0;
      }
      else
      {
        uint64_t v76 = v27;
        uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v84, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1525);
        uint64_t v27 = v76;
        unsigned int v20 = v83;
      }
      if (v23)
      {
        unsigned int v32 = 0;
        unsigned int v33 = 0;
        int v34 = 0;
        do
        {
          if (v21 >= v22)
          {
            uint64_t v36 = v9[v34];
            uint64_t v35 = *(unsigned int *)(v80 + 4 * v36);
            *(_DWORD *)(v31 + 4 * v32) = v35;
            *(void *)(v25 + 8 * v32) = *(void *)(v82 + 8 * v36);
            *(_OWORD *)(v27 + 16 * v32) = *(_OWORD *)(v81 + 16 * v36);
            if (++v34 >= v11) {
              unsigned int v22 = -1;
            }
            else {
              unsigned int v22 = *(_DWORD *)(v82 + 8 * v9[v34]);
            }
          }
          else
          {
            uint64_t v35 = *(unsigned int *)(v77 + 4 * v33);
            if (v35 != -1)
            {
              *(_DWORD *)(v31 + 4 * v32) = v35;
              *(void *)(v25 + 8 * v32) = *(void *)&v79[2 * v33];
              *(_OWORD *)(v27 + 16 * v32) = *(_OWORD *)(v78 + 16 * v33);
            }
            if (++v33 >= v20) {
              unsigned int v21 = -1;
            }
            else {
              unsigned int v21 = v79[2 * v33];
            }
          }
          if (v35 != 0xFFFFFFFFLL) {
            *(_DWORD *)(v5 + 4 * v35) = *v85 | (8 * v32++) | 4;
          }
          --v23;
        }
        while (v23);
      }
      uint64_t v37 = v31;
      uint64_t v38 = v27;
      internalABP::SplitBoxes::reset((void *)v85 + 13);
      v85[26] = v84;
      v85[27] = v84;
      *((void *)v85 + 14) = v25;
      *((void *)v85 + 15) = v38;
      uint64_t v19 = v85;
      if (*((void *)v85 + 11)) {
        (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
      *((void *)v85 + 11) = v37;
      v85[24] = v84;
      v85[32] = 0;
      uint64_t v28 = v86;
    }
    else
    {
      uint64_t v28 = v86;
      if (v20 && v85[32])
      {
        internalABP::BoxManager::purgeRemovedFromSleeping(v85, v5);
        if (v10) {
          goto LABEL_54;
        }
        goto LABEL_87;
      }
    }
    if (v10)
    {
LABEL_54:
      unint64_t v39 = internalABP::ABP_MM::frameAlloc(*v87, 4 * v10);
      uint64_t v40 = internalABP::ABP_MM::frameAlloc(*v87, 4 * v10);
      unint64_t v41 = v40;
      uint64_t v89 = &unk_26E728418;
      long long v91 = 0u;
      long long v92 = 0u;
      uint64_t v93 = 0;
      char v94 = 1;
      unsigned int v90 = 0x80000000;
      memset(v95, 0, 512);
      if (v39 && v40)
      {
        *(void *)&long long v91 = v39;
        *((void *)&v91 + 1) = v40;
        *(void *)&long long v92 = &v96;
        *((void *)&v92 + 1) = v95;
        char v94 = 0;
        unsigned int v90 = 0x80000000;
      }
      int v42 = (int *)*((void *)physx::Cm::RadixSort::Sort((physx::Cm::RadixSort *)&v89, v8, v10) + 2);
      if (internalABP::SplitBoxes::allocate((internalABP::SplitBoxes *)(v19 + 16), v10))
      {
        if (*((void *)v19 + 6)) {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
        *((void *)v19 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v8;
      }
      else
      {
        if (v8) {
          (*(void (**)(uint64_t, float *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
        }
        unsigned int v8 = (float *)*((void *)v19 + 6);
      }
      uint64_t v43 = 0;
      uint64_t v44 = *((void *)v19 + 9);
      do
        *(_DWORD *)(v44 + 8 * (v10 + v43++)) = -1;
      while (v43 != 6);
      uint64_t v45 = 0;
      int v46 = *v19;
      uint64_t v47 = (int32x4_t *)*((void *)v19 + 10);
      if (v10 <= 1) {
        unsigned int v48 = 1;
      }
      else {
        unsigned int v48 = v10;
      }
      uint64_t v49 = 8 * v48;
      float32x4_t v50 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      v51.i64[0] = 0x80000000800000;
      v51.i64[1] = 0x80000000800000;
      do
      {
        int v52 = *v42++;
        uint64_t v53 = v9[(v6 + ~v52)];
        *(_DWORD *)v8++ = v53;
        *(_DWORD *)(v5 + 4 * v53) = v45 | v46;
        uint64_t v54 = v28 + 24 * v53;
        uint64_t v55 = (const float *)(v88 + 4 * v53);
        float32x4_t v56 = vld1q_dup_f32(v55);
        float32x4_t v57 = vsubq_f32(*(float32x4_t *)v54, v56);
        float32x4_t v58 = vaddq_f32(*(float32x4_t *)(v54 + 12), v56);
        float32x4_t v50 = vminq_f32(v50, v57);
        int32x4_t v59 = vtrn1q_s32((int32x4_t)v57, (int32x4_t)v58);
        int32x4_t v60 = vzip1q_s32((int32x4_t)v57, (int32x4_t)v58);
        float32x4_t v51 = vmaxq_f32(v51, v58);
        if (v57.i32[0] < 0) {
          int v61 = ~v57.i32[0];
        }
        else {
          int v61 = v57.i32[0] | 0x80000000;
        }
        if (v58.i32[0] < 0) {
          int v62 = ~v58.i32[0];
        }
        else {
          int v62 = v58.i32[0] | 0x80000000;
        }
        unsigned int v63 = (int *)(v44 + v45);
        *unsigned int v63 = v61;
        v63[1] = v62;
        *v47++ = vzip2q_s32(v60, v59);
        v45 += 8;
      }
      while (v49 != v45);
      v50.i32[3] = v51.i32[0];
      *(float32x4_t *)(v19 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v50;
      *((void *)v19 + 5) = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL).u64[0];
      internalABP::ABP_MM::frameFree((uint64_t)*v87, v41);
      internalABP::ABP_MM::frameFree((uint64_t)*v87, v39);
LABEL_91:
      v19[14] = v10;
      v19[15] = v10;
      if (v9) {
        internalABP::ABP_MM::frameFree((uint64_t)*v87, (unint64_t)v9);
      }
      return;
    }
LABEL_87:
    if (v8) {
      (*(void (**)(uint64_t, float *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
    }
    internalABP::SplitBoxes::reset((void *)v19 + 8);
    if (*((void *)v19 + 6))
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *((void *)v19 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    }
    goto LABEL_91;
  }
  if (v1[32])
  {
    internalABP::BoxManager::purgeRemovedFromSleeping(v1, v2);
  }
}

uint64_t internalABP::ABP_PairManager::addPair(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(this + 48);
  uint64_t v4 = *(unsigned int *)(*(void *)(this + 56) + 4 * a2);
  uint64_t v5 = *(unsigned int *)(*(void *)(this + 64) + 4 * a3);
  int v6 = *(_DWORD *)(v3 + 4 * v4);
  int v7 = *(_DWORD *)(v3 + 4 * v5);
  if (v6 != v7)
  {
    uint64_t v8 = this;
    if (*(unsigned char *)(*(void *)(this + 80) + (v7 & 3 | (4 * (v6 & 3)))))
    {
      if (v4 >= v5) {
        int v9 = *(_DWORD *)(*(void *)(this + 64) + 4 * a3);
      }
      else {
        int v9 = *(_DWORD *)(*(void *)(this + 56) + 4 * a2);
      }
      if (v4 <= v5) {
        unsigned int v10 = *(_DWORD *)(*(void *)(this + 64) + 4 * a3);
      }
      else {
        unsigned int v10 = *(_DWORD *)(*(void *)(this + 56) + 4 * a2);
      }
      unsigned int v11 = 9
          * ((((unsigned __int16)v9 | ((unsigned __int16)v10 << 16))
            + ~(((unsigned __int16)v9 | ((unsigned __int16)v10 << 16)) << 15)) ^ ((((unsigned __int16)v9 | ((unsigned __int16)v10 << 16))
                                                                                               + ~(((unsigned __int16)v9 | ((unsigned __int16)v10 << 16)) << 15)) >> 10));
      unsigned int v12 = ((v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11)) ^ (((v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11)) >> 16);
      this = *(_DWORD *)(this + 4) & v12;
      uint64_t v13 = *(void *)(v8 + 16);
      if (!v13 || (uint64_t v14 = *(unsigned int *)(v13 + 4 * this), v14 == -1))
      {
LABEL_15:
        unsigned int v20 = *(_DWORD *)(v8 + 8);
        if (v20 >= *(_DWORD *)v8)
        {
          this = physx::Bp::PairManagerData::growPairs((physx::Bp::PairManagerData *)v8, v12);
          unsigned int v20 = *(_DWORD *)(v8 + 8);
          uint64_t v13 = *(void *)(v8 + 16);
        }
        *(_DWORD *)(v8 + 8) = v20 + 1;
        uint64_t v21 = *(void *)(v8 + 24);
        unsigned int v22 = (unsigned int *)(*(void *)(v8 + 32) + 8 * v20);
        *unsigned int v22 = v9 | 0x80000000;
        v22[1] = v10;
        *(_DWORD *)(v21 + 4 * v20) = *(_DWORD *)(v13 + 4 * this);
        *(_DWORD *)(v13 + 4 * this) = v20;
      }
      else
      {
        uint64_t v15 = *(void *)(v8 + 32);
        while (1)
        {
          if ((*(_DWORD *)(v15 + 8 * v14) & 0x7FFFFFFF) == v9)
          {
            uint64_t v16 = v15 + 8 * v14;
            int v19 = *(_DWORD *)(v16 + 4);
            uint64_t v17 = (unsigned int *)(v16 + 4);
            int v18 = v19;
            if ((v19 & 0x7FFFFFFF) == v10) {
              break;
            }
          }
          uint64_t v14 = *(unsigned int *)(*(void *)(v8 + 24) + 4 * v14);
          if (v14 == -1) {
            goto LABEL_15;
          }
        }
        *uint64_t v17 = v18 | 0x80000000;
      }
    }
  }
  return this;
}

void *internalABP::ABP::Region_findOverlaps(internalABP::ABP *this, internalABP::ABP_PairManager *a2)
{
  uint64_t v4 = *((void *)this + 76);
  char v5 = *(unsigned char *)(v4 + 4);
  int v6 = (const internalABP::BoxManager *)*(unsigned __int8 *)(v4 + 5);
  int v7 = (internalABP::ABP *)((char *)this + 480);
  uint64_t v8 = (internalABP::ABP *)((char *)this + 8);
  internalABP::findAllOverlaps((pthread_mutex_t ***)this, a2, (internalABP::ABP *)((char *)this + 480), (internalABP::ABP *)((char *)this + 8), (internalABP::ABP *)((char *)this + 144), (const internalABP::BoxManager *)1, 1);
  uint64_t result = internalABP::findAllOverlaps((pthread_mutex_t ***)this, a2, v7, v8, (internalABP::ABP *)((char *)this + 344), v6, v5);
  unsigned int v10 = *((_DWORD *)this + 50);
  unsigned int v11 = *((_DWORD *)this + 60);
  unsigned int v12 = *((_DWORD *)this + 100);
  if (v10)
  {
    unsigned int v13 = *((_DWORD *)this + 110);
    if (v12) {
      uint64_t result = internalABP::doBipartiteBoxPruning_Leaf(a2, *((void *)this + 60), v10, v12, *((void *)this + 27), *((void *)this + 52), *((void *)this + 28), *((void *)this + 53), *((void *)this + 24), *((void *)this + 49));
    }
    if (v13) {
      uint64_t result = internalABP::doBipartiteBoxPruning_Leaf(a2, *((void *)this + 60), v10, v13, *((void *)this + 27), *((void *)this + 57), *((void *)this + 28), *((void *)this + 58), *((void *)this + 24), *((void *)this + 54));
    }
  }
  if (v12) {
    BOOL v14 = v11 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14) {
    return internalABP::doBipartiteBoxPruning_Leaf(a2, *((void *)this + 60), v11, v12, *((void *)this + 32), *((void *)this + 52), *((void *)this + 33), *((void *)this + 53), *((void *)this + 29), *((void *)this + 49));
  }
  return result;
}

pthread_mutex_t ***internalABP::findAllOverlaps(pthread_mutex_t ***this, internalABP::ABP_MM *a2, internalABP::ABP_PairManager *a3, const internalABP::ABP_SharedData *a4, const internalABP::BoxManager *a5, const internalABP::BoxManager *a6, char a7)
{
  char v7 = a7;
  uint64_t v8 = a5;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v12 = *((unsigned int *)a5 + 14);
  if (a6)
  {
    if (!v12)
    {
      if ((a7 & 1) == 0) {
        return this;
      }
      goto LABEL_28;
    }
    unsigned int v13 = this;
    uint64_t v14 = *(void *)a3;
    unsigned int v15 = *((_DWORD *)a5 + 24);
    uint64_t v17 = *((void *)a5 + 9);
    uint64_t v16 = *((void *)a5 + 10);
    if (v15) {
      internalABP::doBipartiteBoxPruning_Leaf(a2, v14, v12, v15, v17, *((void *)a5 + 14), v16, *((void *)a5 + 15), *((void *)a5 + 6), *((void *)a5 + 11));
    }
    uint64_t v61 = v14;
    uint64_t v18 = *((void *)v8 + 6);
    if (v12 < 0x1389)
    {
      this = (pthread_mutex_t ***)internalABP::doCompleteBoxPruning_Leaf(a2, v12, v17, v16, *((void *)v8 + 6), v61);
      if ((v7 & 1) == 0) {
        return this;
      }
      goto LABEL_22;
    }
    int32x4_t v60 = (char *)internalABP::ABP_MM::frameAlloc(*v13, 8 * (int)v12 + 240);
    int32x4_t v59 = (char *)internalABP::ABP_MM::frameAlloc(*v13, 16 * (int)v12);
    float v19 = *((float *)v8 + 10) + *((float *)v8 + 7);
    float v20 = *((float *)v8 + 11) + *((float *)v8 + 8);
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    unsigned int v70 = 0;
    float v21 = v19 * 0.5;
    float v22 = v20 * 0.5;
    float32x4_t v58 = (char *)internalABP::ABP_MM::frameAlloc(*v13, 4 * (int)v12);
    unint64_t v23 = internalABP::ABP_MM::frameAlloc(*v13, v12);
    uint64_t v24 = 0;
    uint64_t v25 = (float *)(v16 + 8);
    do
    {
      BOOL v26 = *(v25 - 1) > v22;
      uint64_t v27 = *(v25 - 2) > v21;
      float v29 = *v25;
      float v28 = v25[1];
      v25 += 4;
      uint64_t v30 = internalABP::gCodes[v27 | (4 * v26) | (8 * (v28 < v22)) | (2 * (v29 < v21))];
      LODWORD(v27) = *((_DWORD *)&v68 + v30);
      *(unsigned char *)(v23 + v24) = v30;
      *((_DWORD *)&v68 + v30) = v27 + 1;
      ++v24;
    }
    while (v12 != v24);
    uint64_t v31 = 0;
    uint64_t v67 = 0;
    memset(v66, 0, sizeof(v66));
    *(void *)uint64_t v65 = 0;
    memset(v64, 0, sizeof(v64));
    uint64_t v63 = 0;
    unsigned int v32 = v58;
    unsigned int v33 = v59;
    int v34 = v60;
    memset(v62, 0, sizeof(v62));
    do
    {
      uint64_t v35 = *((unsigned int *)&v68 + v31);
      *((void *)v66 + v31) = v34;
      *((void *)v64 + v31) = v33;
      *((void *)v62 + v31) = v32;
      v34 += 8 * (v35 + 6);
      v33 += 16 * v35;
      v32 += 4 * v35;
      ++v31;
    }
    while (v31 != 5);
    uint64_t v36 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    unsigned int v70 = 0;
    do
    {
      uint64_t v37 = *(unsigned __int8 *)(v23 + v36);
      uint64_t v38 = *((unsigned int *)&v68 + v37);
      *((_DWORD *)&v68 + v37) = v38 + 1;
      uint64_t v39 = *((void *)v66 + v37);
      uint64_t v40 = *((void *)v64 + v37);
      *(_DWORD *)(*((void *)v62 + v37) + 4 * v38) = *(_DWORD *)(v18 + 4 * v36);
      *(void *)(v39 + 8 * v38) = *(void *)(v17 + 8 * v36);
      *(_OWORD *)(v40 + 16 * v38) = *(_OWORD *)(v16 + 16 * v36++);
    }
    while (v12 != v36);
    internalABP::ABP_MM::frameFree((uint64_t)*v13, v23);
    for (uint64_t i = 0; i != 5; ++i)
    {
      uint64_t v42 = 0;
      uint64_t v43 = *((void *)v66 + i);
      int v44 = *((_DWORD *)&v68 + i);
      do
        *(_DWORD *)(v43 + 8 * (v44 + v42++)) = -1;
      while (v42 != 6);
    }
    uint64_t v55 = (uint64_t *)v13;
    char v56 = v7;
    float32x4_t v57 = v8;
    for (uint64_t j = 0; j != 5; ++j)
      internalABP::doCompleteBoxPruning_Leaf(a2, *((_DWORD *)&v68 + j), *((void *)v66 + j), *((void *)v64 + j), *((void *)v62 + j), v61);
    uint64_t v46 = 0;
    unsigned int v47 = v70;
    uint64_t v48 = v67;
    uint64_t v49 = *(void *)v65;
    uint64_t v50 = v63;
    do
    {
      internalABP::doBipartiteBoxPruning_Leaf(a2, v61, *((_DWORD *)&v68 + v46), v47, *((void *)v66 + v46), v48, *((void *)v64 + v46), v49, *((void *)v62 + v46), v50);
      ++v46;
    }
    while (v46 != 4);
    internalABP::ABP_MM::frameFree(*v55, (unint64_t)v58);
    internalABP::ABP_MM::frameFree(*v55, (unint64_t)v59);
    this = (pthread_mutex_t ***)internalABP::ABP_MM::frameFree(*v55, (unint64_t)v60);
    uint64_t v8 = v57;
    char v7 = v56;
  }
  if ((v7 & 1) == 0) {
    return this;
  }
LABEL_22:
  if (v12)
  {
    unsigned int v51 = *((_DWORD *)a4 + 14);
    if (v51) {
      this = (pthread_mutex_t ***)internalABP::doBipartiteBoxPruning_Leaf(a2, *(void *)a3, v12, v51, *((void *)v8 + 9), *((void *)a4 + 9), *((void *)v8 + 10), *((void *)a4 + 10), *((void *)v8 + 6), *((void *)a4 + 6));
    }
    unsigned int v52 = *((_DWORD *)a4 + 24);
    if (v52) {
      this = (pthread_mutex_t ***)internalABP::doBipartiteBoxPruning_Leaf(a2, *(void *)a3, v12, v52, *((void *)v8 + 9), *((void *)a4 + 14), *((void *)v8 + 10), *((void *)a4 + 15), *((void *)v8 + 6), *((void *)a4 + 11));
    }
  }
LABEL_28:
  unsigned int v53 = *((_DWORD *)a4 + 14);
  if (v53)
  {
    unsigned int v54 = *((_DWORD *)v8 + 24);
    if (v54) {
      return (pthread_mutex_t ***)internalABP::doBipartiteBoxPruning_Leaf(a2, *(void *)a3, v54, v53, *((void *)v8 + 14), *((void *)a4 + 9), *((void *)v8 + 15), *((void *)a4 + 10), *((void *)v8 + 11), *((void *)a4 + 6));
    }
  }
  return this;
}

double internalABP::ABP::ABP(internalABP::ABP *this)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 2;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + internalABP::SplitBoxes::reset((void *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((_DWORD *)this + 68) = 0;
  *((void *)this + 33) = 0;
  *(_OWORD *)((char *)this + 29re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 3re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0u;
  *((void *)this + 41) = 0;
  *((unsigned char *)this + 33re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  *((_DWORD *)this + 72) = 0x80000000;
  *((void *)this + 35) = &unk_26E728438;
  *((_DWORD *)this + 8re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 1;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + re::HashTable<re::VideoGammaToneCurve,re::VideoColorManager::TableEntry,re::Hash<re::VideoGammaToneCurve>,re::EqualTo<re::VideoGammaToneCurve>,true,false>::deinit((uint64_t *)this + 58) = 0;
  *((_DWORD *)this + 1re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = 0;
  *((void *)this + 5re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 60) = 0;
  *((_DWORD *)this + 122) = 0;
  *((void *)this + 62) = 0;
  *((_DWORD *)this + 12re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((void *)this + 64) = 0;
  *((_DWORD *)this + 130) = 0;
  *((void *)this + 6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((_DWORD *)this + 134) = 0;
  *((void *)this + 70) = 0;
  *((_DWORD *)this + 142) = 0;
  *((void *)this + 68) = 0;
  *((void *)this + 69) = 0;
  *((void *)this + 7re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  *((_OWORD *)this + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0u;
  *((_OWORD *)this + 37) = 0u;
  return result;
}

unsigned int *internalABP::ABP::preallocate(internalABP::ABP *this, unsigned int a2, unsigned int a3)
{
  if (a2)
  {
    if (*((void *)this + 60)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *((void *)this + 60) = 0;
    int v6 = (void *)physx::shdfnd::ReflectionAllocator<internalABP::ABP_Object>::allocate((uint64_t)&v8, 4 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 2858);
    memset(v6, 255, 4 * a2);
    *((void *)this + 60) = v6;
    *((_DWORD *)this + 122) = a2;
  }
  return physx::Bp::PairManagerData::reserveMemory((unsigned int *)this + 132, a3);
}

unsigned int *physx::Bp::PairManagerData::reserveMemory(unsigned int *this, unsigned int a2)
{
  if (a2)
  {
    if ((a2 & (a2 - 1)) != 0)
    {
      unsigned int v2 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
      unsigned int v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
      a2 = (v3 | HIWORD(v3)) + 1;
    }
    *this = a2;
    this[1] = a2 - 1;
    this[10] = a2;
    return physx::Bp::PairManagerData::reallocPairs(this);
  }
  return this;
}

unsigned int *internalABP::ABP::addStaticObjects(internalABP::ABP *this, unsigned int *a2, int a3, int a4)
{
  if (*((_DWORD *)this + 122) < (a4 + 1)) {
    internalABP::ABP_SharedData::resize((internalABP::ABP *)((char *)this + 480), a4);
  }
  return internalABP::BoxManager::addObjects((unsigned int *)this + 2, a2, a3, 0);
}

unsigned int *internalABP::ABP::addDynamicObjects(internalABP::ABP *this, unsigned int *a2, int a3, unsigned int a4)
{
  char v8 = (char *)this + 480;
  if (*((_DWORD *)this + 122) < a4 + 1) {
    internalABP::ABP_SharedData::resize((internalABP::ABP *)((char *)this + 480), a4);
  }
  if (*((_DWORD *)this + 126) <= a4 >> 5) {
    internalABP::BitArray::resize((internalABP::ABP *)((char *)this + 496), a4);
  }
  return internalABP::BoxManager::addObjects((unsigned int *)this + 36, a2, a3, (uint64_t)v8);
}

unsigned int *internalABP::ABP::addKinematicObjects(internalABP::ABP *this, unsigned int *a2, int a3, unsigned int a4)
{
  char v8 = (char *)this + 480;
  if (*((_DWORD *)this + 122) < a4 + 1) {
    internalABP::ABP_SharedData::resize((internalABP::ABP *)((char *)this + 480), a4);
  }
  if (*((_DWORD *)this + 126) <= a4 >> 5) {
    internalABP::BitArray::resize((internalABP::ABP *)((char *)this + 496), a4);
  }
  return internalABP::BoxManager::addObjects((unsigned int *)this + 86, a2, a3, (uint64_t)v8);
}

unsigned int *internalABP::ABP_PairManager::computeCreatedDeletedPairs(internalABP::ABP_PairManager *this, physx::Bp::BroadPhaseABP *a2, const internalABP::BitArray *a3, const internalABP::BitArray *a4)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    unsigned int v9 = 0;
    unsigned int v10 = (char *)a2 + 16;
    uint64_t v30 = (char *)a2 + 32;
    do
    {
      uint64_t v11 = *((void *)this + 4);
      uint64_t v12 = (void *)(v11 + 8 * v9);
      unint64_t v13 = *(unsigned int *)v12;
      if ((v13 & 0x80000000) != 0)
      {
        unsigned int v24 = *(_DWORD *)(v11 + 8 * v9 + 4) & 0x7FFFFFFF;
        if ((v13 & 0x7FFFFFFF) >= v24) {
          unsigned int v25 = v24;
        }
        else {
          unsigned int v25 = v13 & 0x7FFFFFFF;
        }
        if ((v13 & 0x7FFFFFFF) > v24) {
          unsigned int v24 = v13 & 0x7FFFFFFF;
        }
        unint64_t v31 = __PAIR64__(v24, v25);
        uint64_t v26 = *((unsigned int *)a2 + 6);
        if ((*((_DWORD *)a2 + 7) & 0x7FFFFFFFu) <= v26)
        {
          physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack((uint64_t)v10, &v31);
        }
        else
        {
          *(void *)(*((void *)a2 + 2) + 8 * v2re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v31;
          ++*((_DWORD *)a2 + 6);
        }
        *v12 &= 0x7FFFFFFF7FFFFFFFuLL;
      }
      else
      {
        uint64_t v14 = v11 + 8 * v9;
        unsigned int v17 = *(_DWORD *)(v14 + 4);
        unsigned int v15 = (_DWORD *)(v14 + 4);
        unint64_t v16 = v17;
        if ((v17 & 0x80000000) != 0)
        {
          _DWORD *v15 = v16 & 0x7FFFFFFF;
        }
        else
        {
          unint64_t v18 = v13 >> 5;
          unsigned int v19 = *((_DWORD *)a3 + 2);
          if ((v13 >> 5) < v19 && ((*(_DWORD *)(*(void *)a3 + 4 * v18) >> v13) & 1) != 0
            || (v16 >> 5) < v19 && ((*(_DWORD *)(*(void *)a3 + 4 * (v16 >> 5)) >> v16) & 1) != 0)
          {
            unsigned int v20 = *((_DWORD *)a4 + 2);
            if ((v18 >= v20 || ((*(_DWORD *)(*(void *)a4 + 4 * v18) >> v13) & 1) == 0)
              && ((v16 >> 5) >= v20 || ((*(_DWORD *)(*(void *)a4 + 4 * (v16 >> 5)) >> v16) & 1) == 0))
            {
              if (v13 >= v16) {
                unsigned int v21 = v16;
              }
              else {
                unsigned int v21 = v13;
              }
              if (v13 <= v16) {
                unsigned int v22 = v16;
              }
              else {
                unsigned int v22 = v13;
              }
              unint64_t v31 = __PAIR64__(v22, v21);
              uint64_t v23 = *((unsigned int *)a2 + 10);
              if ((*((_DWORD *)a2 + 11) & 0x7FFFFFFFu) <= v23)
              {
                physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack((uint64_t)v30, &v31);
              }
              else
              {
                *(void *)(*((void *)a2 + 4) + 8 * v23) = v31;
                ++*((_DWORD *)a2 + 10);
              }
            }
            unsigned int v27 = 9
                * ((((unsigned __int16)v13 | ((unsigned __int16)v16 << 16))
                  + ~(((unsigned __int16)v13 | ((unsigned __int16)v16 << 16)) << 15)) ^ ((((unsigned __int16)v13 | ((unsigned __int16)v16 << 16)) + ~(((unsigned __int16)v13 | ((unsigned __int16)v16 << 16)) << 15)) >> 10));
            unsigned int v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
            physx::Bp::PairManagerData::removePair((uint64_t)this, a2, a3, *((_DWORD *)this + 1) & (v28 ^ HIWORD(v28)), v9);
            --v5;
            continue;
          }
        }
      }
      ++v9;
    }
    while (v9 < v5);
  }
  return physx::Bp::PairManagerData::shrinkMemory((unsigned int *)this);
}

uint64_t physx::Bp::PairManagerData::removePair(uint64_t this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6 = *(void *)(this + 16);
  uint64_t v5 = *(void *)(this + 24);
  char v7 = (unsigned int *)(v6 + 4 * a4);
  unsigned int v8 = *v7;
  if (*v7 != a5)
  {
    do
    {
      unsigned int v9 = v8;
      unsigned int v8 = *(_DWORD *)(v5 + 4 * v8);
    }
    while (v8 != a5);
    if (v9 != -1) {
      char v7 = (unsigned int *)(v5 + 4 * v9);
    }
  }
  *char v7 = *(_DWORD *)(v5 + 4 * a5);
  uint64_t v10 = (*(_DWORD *)(this + 8) - 1);
  if (v10 != a5)
  {
    uint64_t v11 = *(void *)(this + 32);
    int v12 = *(unsigned __int16 *)(v11 + 8 * v10) | (*(_DWORD *)(v11 + 8 * v10 + 4) << 16);
    unsigned int v13 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
    unsigned int v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    uint64_t v15 = (v14 ^ HIWORD(v14)) & *(_DWORD *)(this + 4);
    unint64_t v16 = (unsigned int *)(v6 + 4 * v15);
    unsigned int v17 = *v16;
    if (*v16 != v10)
    {
      do
      {
        unsigned int v18 = v17;
        unsigned int v17 = *(_DWORD *)(v5 + 4 * v17);
      }
      while (v17 != v10);
      if (v18 != -1) {
        unint64_t v16 = (unsigned int *)(v5 + 4 * v18);
      }
    }
    unsigned int *v16 = *(_DWORD *)(v5 + 4 * v10);
    *(void *)(v11 + 8 * a5) = *(void *)(v11 + 8 * v10);
    uint64_t v19 = *(void *)(this + 16);
    *(_DWORD *)(*(void *)(this + 24) + 4 * a5) = *(_DWORD *)(v19 + 4 * v15);
    *(_DWORD *)(v19 + 4 * v15) = a5;
    a5 = *(_DWORD *)(this + 8) - 1;
  }
  *(_DWORD *)(this + 8) = a5;
  return this;
}

unsigned int *physx::Bp::PairManagerData::shrinkMemory(unsigned int *this)
{
  unsigned int v1 = this[2] | (this[2] >> 1);
  unsigned int v2 = v1 | (v1 >> 2) | ((v1 | (v1 >> 2)) >> 4);
  unsigned int v3 = v2 | (v2 >> 8) | ((v2 | (v2 >> 8)) >> 16);
  unsigned int v4 = v3 + 1;
  if (*this != v3 + 1 && v4 >= this[10])
  {
    *this = v4;
    this[1] = v3;
    return physx::Bp::PairManagerData::reallocPairs(this);
  }
  return this;
}

uint64_t physx::Bp::PairManagerData::purge(uint64_t this)
{
  uint64_t v1 = this;
  if (*(void *)(this + 24))
  {
    this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(void *)(v1 + 24) = 0;
  }
  if (*(void *)(v1 + 32))
  {
    this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(void *)(v1 + 32) = 0;
  }
  if (*(void *)(v1 + 16))
  {
    this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(void *)(v1 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  return this;
}

physx::Bp::BroadPhaseABP *physx::Bp::BroadPhaseABP::BroadPhaseABP(physx::Bp::BroadPhaseABP *this, unsigned int a2, int a3, int a4)
{
  *(void *)this = &unk_26E723EE8;
  *((_OWORD *)this + 1) = 0u;
  unsigned int v8 = (char *)this + 16;
  *((_OWORD *)this + 2) = 0u;
  unsigned int v9 = (char *)this + 32;
  *((_OWORD *)this + 3) = 0u;
  uint64_t v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v11 = "static const char *physx::shdfnd::ReflectionAllocator<internalABP::ABP>::getName() [T = internalABP::ABP]";
  }
  else {
    uint64_t v11 = "<allocation names disabled>";
  }
  int v12 = (internalABP::ABP *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 616, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 3102);
  internalABP::ABP::ABP(v12);
  *((void *)this + 1) = v13;
  internalABP::ABP::preallocate(v13, a4 + a3, a2);
  if ((*((_DWORD *)this + 7) & 0x7FFFFC00) == 0) {
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate((uint64_t)v8, 0x400u);
  }
  if ((*((_DWORD *)this + 11) & 0x7FFFFC00) == 0) {
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate((uint64_t)v9, 0x400u);
  }
  return this;
}

void physx::Bp::BroadPhaseABP::~BroadPhaseABP(physx::Bp::BroadPhaseABP *this)
{
  *(void *)this = &unk_26E723EE8;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    internalABP::BoxManager::reset((internalABP::BoxManager *)(v2 + 8));
    internalABP::BoxManager::reset((internalABP::BoxManager *)(v2 + 144));
    internalABP::BoxManager::reset((internalABP::BoxManager *)(v2 + 344));
    if (*(void *)(v2 + 480)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v2 + 480) = 0;
    *(_DWORD *)(v2 + 488) = 0;
    physx::Bp::PairManagerData::purge(v2 + 528);
    if (*(void *)(v2 + 496)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v2 + 49re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(_DWORD *)(v2 + 504) = 0;
    if (*(void *)(v2 + 512)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v2 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
    *(_DWORD *)(v2 + 520) = 0;
    physx::Bp::PairManagerData::purge(v2 + 528);
    if (*(void *)(v2 + 512)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v2 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
    *(_DWORD *)(v2 + 520) = 0;
    if (*(void *)(v2 + 496)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v2 + 49re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
    *(_DWORD *)(v2 + 504) = 0;
    internalABP::BoxManager::~BoxManager((internalABP::BoxManager *)(v2 + 344));
    *(void *)(v2 + 280) = &unk_26E728438;
    physx::Cm::RadixSortBuffered::reset(v2 + 280);
    internalABP::BoxManager::~BoxManager((internalABP::BoxManager *)(v2 + 144));
    internalABP::BoxManager::~BoxManager((internalABP::BoxManager *)(v2 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    *((void *)this + 1) = 0;
  }
  int v3 = *((_DWORD *)this + 11);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *((void *)this + 4) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v5 = *((_DWORD *)this + 7);
  if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0 && *((void *)this + 2) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Bp::BroadPhaseABP::~BroadPhaseABP(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void physx::Bp::BroadPhaseABP::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  **(void **)(a1 + 8) = a3;
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 40))(a6);
  }
  physx::Bp::BroadPhaseABP::setUpdateData(a1, a4);
  unsigned int v8 = *(void **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 56);
  v8[72] = *(void *)(a1 + 48);
  v8[76] = v9;
  internalABP::ABP::Region_findOverlaps((internalABP::ABP *)v8, (internalABP::ABP_PairManager *)(v8 + 66));
  uint64_t v10 = *(_DWORD **)(a1 + 8);
  internalABP::ABP_PairManager::computeCreatedDeletedPairs((internalABP::ABP_PairManager *)(v10 + 132), (physx::Bp::BroadPhaseABP *)a1, (const internalABP::BitArray *)(v10 + 124), (const internalABP::BitArray *)(v10 + 128));
  uint64_t v11 = (void *)*((void *)v10 + 62);
  size_t v12 = (4 * v10[126]);
  bzero(v11, v12);
}

void physx::Bp::BroadPhaseABP::setUpdateData(uint64_t a1, uint64_t a2)
{
  v47[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(v4 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v5;
  *(void *)(v4 + 24) = v6;
  *(void *)(v4 + 152) = v5;
  *(void *)(v4 + 160) = v6;
  *(void *)(v4 + 352) = v5;
  *(void *)(v4 + 360) = v6;
  int v7 = *(_DWORD *)(a2 + 80);
  if (*(_DWORD *)(v4 + 488) < (v7 + 1)) {
    internalABP::ABP_SharedData::resize((internalABP::ABP_SharedData *)(v4 + 480), v7);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 56);
  int v8 = *(_DWORD *)(a2 + 40);
  if (v8)
  {
    uint64_t v9 = *(unsigned int **)(a2 + 32);
    do
    {
      unsigned int v11 = *v9++;
      uint64_t v10 = v11;
      uint64_t v12 = *(void *)(a1 + 8);
      unint64_t v13 = (unint64_t)v11 >> 5;
      if (v13 >= *(_DWORD *)(v12 + 504)) {
        internalABP::BitArray::resize((internalABP::BitArray *)(v12 + 496), v10);
      }
      *(_DWORD *)(*(void *)(v12 + 496) + 4 * v13) |= 1 << v10;
      if (v13 >= *(_DWORD *)(v12 + 520)) {
        internalABP::BitArray::resize((internalABP::BitArray *)(v12 + 512), v10);
      }
      *(_DWORD *)(*(void *)(v12 + 512) + 4 * v13) |= 1 << v10;
      uint64_t v14 = *(void *)(v12 + 480);
      unint64_t v15 = *(unsigned int *)(v14 + 4 * v10);
      uint64_t v16 = v12 + 144;
      if ((v15 & 3) == 0) {
        uint64_t v16 = v12 + 8;
      }
      if ((*(_DWORD *)(v14 + 4 * v10) & 3) == 1) {
        uint64_t v17 = v12 + 344;
      }
      else {
        uint64_t v17 = v16;
      }
      unint64_t v18 = v15 >> 3;
      if ((v15 & 4) != 0)
      {
        *(_DWORD *)(*(void *)(v17 + 88) + 4 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = -1;
        ++*(_DWORD *)(v17 + 128);
      }
      else
      {
        *(_DWORD *)(*(void *)(v17 + 48) + 4 * vre::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = -1;
      }
      *(_DWORD *)(v14 + 4 * v10) = -1;
      --v8;
    }
    while (v8);
  }
  int v19 = *(_DWORD *)(a2 + 8);
  if (v19)
  {
    unsigned int v20 = *(unsigned int **)a2;
    uint64_t v21 = *(void *)(a2 + 56);
    *(void *)uint64_t v45 = 0;
    *(void *)uint64_t v43 = 0;
    *(void *)unint64_t v41 = 0;
    v47[2] = v43;
    v47[3] = v43;
    v47[0] = v45;
    v47[1] = v41;
    do
    {
      unsigned int v23 = *v20++;
      unsigned int v22 = v23;
      uint64_t v24 = *(_DWORD *)(v21 + 4 * v23) & 3;
      unsigned int v25 = (unsigned int *)v47[v24];
      uint64_t v26 = *(internalABP::ABP **)(a1 + 8);
      uint64_t v27 = *v25;
      if (v25[1] <= v23) {
        unsigned int v28 = v22;
      }
      else {
        unsigned int v28 = v25[1];
      }
      v25[1] = v28;
      float v29 = v25 + 2;
      v25[v27 + 2] = v22;
      if (v27 == 127)
      {
        *unsigned int v25 = 0;
        if (v24 == 1)
        {
          internalABP::ABP::addKinematicObjects(v26, v29, 128, v28);
        }
        else if (v24)
        {
          internalABP::ABP::addDynamicObjects(v26, v29, 128, v28);
        }
        else
        {
          internalABP::ABP::addStaticObjects(v26, v29, 128, v28);
        }
        v25[1] = 0;
      }
      else
      {
        *unsigned int v25 = v27 + 1;
      }
      --v19;
    }
    while (v19);
    if (v45[0]) {
      internalABP::ABP::addStaticObjects(*(internalABP::ABP **)(a1 + 8), v46, v45[0], v45[1]);
    }
    if (v41[0]) {
      internalABP::ABP::addKinematicObjects(*(internalABP::ABP **)(a1 + 8), v42, v41[0], v41[1]);
    }
    if (v43[0]) {
      internalABP::ABP::addDynamicObjects(*(internalABP::ABP **)(a1 + 8), v44, v43[0], v43[1]);
    }
  }
  uint64_t v30 = *(unsigned int **)(a2 + 16);
  if (v30)
  {
    for (int i = *(_DWORD *)(a2 + 24); i; --i)
    {
      unsigned int v33 = *v30++;
      uint64_t v32 = v33;
      uint64_t v34 = *(void *)(a1 + 8);
      unint64_t v35 = (unint64_t)v33 >> 5;
      if (v35 >= *(_DWORD *)(v34 + 504)) {
        internalABP::BitArray::resize((internalABP::BitArray *)(v34 + 496), v32);
      }
      *(_DWORD *)(*(void *)(v34 + 496) + 4 * v35) |= 1 << v32;
      unint64_t v36 = *(unsigned int *)(*(void *)(v34 + 480) + 4 * v32);
      uint64_t v37 = v34 + 144;
      if ((v36 & 3) == 0) {
        uint64_t v37 = v34 + 8;
      }
      if ((*(_DWORD *)(*(void *)(v34 + 480) + 4 * v32) & 3) == 1) {
        uint64_t v38 = v34 + 344;
      }
      else {
        uint64_t v38 = v37;
      }
      v45[0] = v32;
      unint64_t v39 = v36 >> 3;
      if ((v36 & 4) != 0)
      {
        *(_DWORD *)(*(void *)(v38 + 88) + 4 * v39) = -1;
        ++*(_DWORD *)(v38 + 128);
        internalABP::BoxManager::addObjects((unsigned int *)v38, v45, 1, 0);
      }
      else
      {
        *(_DWORD *)(*(void *)(v38 + 48) + 4 * v39) |= 0x80000000;
      }
    }
  }
  uint64_t v40 = *(_DWORD **)(a1 + 8);
  if (v40[50] || v40[68] || v40[100] || v40[118] || v40[16] || v40[34])
  {
    if (v40[16] || v40[34]) {
      internalABP::BoxManager::prepareData((uint64_t)(v40 + 2));
    }
    internalABP::BoxManager::prepareData((uint64_t)(v40 + 36));
    internalABP::BoxManager::prepareData((uint64_t)(v40 + 86));
    physx::Cm::RadixSortBuffered::reset((uint64_t)(v40 + 70));
  }
}

void physx::Bp::BroadPhaseABP::singleThreadedUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  **(void **)(a1 + 8) = a2;
  physx::Bp::BroadPhaseABP::setUpdateData(a1, a3);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 56);
  v4[72] = *(void *)(a1 + 48);
  v4[76] = v5;
  internalABP::ABP::Region_findOverlaps((internalABP::ABP *)v4, (internalABP::ABP_PairManager *)(v4 + 66));
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  internalABP::ABP_PairManager::computeCreatedDeletedPairs((internalABP::ABP_PairManager *)(v6 + 132), (physx::Bp::BroadPhaseABP *)a1, (const internalABP::BitArray *)(v6 + 124), (const internalABP::BitArray *)(v6 + 128));
  int v7 = (void *)*((void *)v6 + 62);
  size_t v8 = (4 * v6[126]);
  bzero(v7, v8);
}

uint64_t physx::Bp::BroadPhaseABP::getNbCreatedPairs(physx::Bp::BroadPhaseABP *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::Bp::BroadPhaseABP::getCreatedPairs(physx::Bp::BroadPhaseABP *this)
{
  return *((void *)this + 2);
}

uint64_t physx::Bp::BroadPhaseABP::getNbDeletedPairs(physx::Bp::BroadPhaseABP *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t physx::Bp::BroadPhaseABP::getDeletedPairs(physx::Bp::BroadPhaseABP *this)
{
  return *((void *)this + 4);
}

uint64_t physx::Bp::BroadPhaseABP::freeBuffers(physx::Bp::BroadPhaseABP *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)(v2 + 512)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)(v2 + 5re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  *(_DWORD *)(v2 + 520) = 0;
  freeBuffer((uint64_t)this + 16);
  return freeBuffer((uint64_t)this + 32);
}

physx::Bp::BroadPhaseMBP *physx::Bp::BroadPhase::create(int a1, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  if (a1 == 1)
  {
    uint64_t v15 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhaseMBP>::getName() [T = physx::Bp::BroadPhaseMBP]";
    }
    else {
      uint64_t v16 = "<allocation names disabled>";
    }
    uint64_t v17 = (physx::Bp::BroadPhaseMBP *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v15 + 24) + 16))(v15 + 24, 208, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhase.cpp", 66);
    return physx::Bp::BroadPhaseMBP::BroadPhaseMBP(v17, a2, a3, a4, a5, a6);
  }
  else if (a1 == 2)
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhaseABP>::getName() [T = physx::Bp::BroadPhaseABP]";
    }
    else {
      unsigned int v11 = "<allocation names disabled>";
    }
    uint64_t v12 = (physx::Bp::BroadPhaseABP *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 64, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 3401);
    return physx::Bp::BroadPhaseABP::BroadPhaseABP(v12, a3, a4, a5);
  }
  else
  {
    uint64_t v18 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v19 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhaseSap>::getName() [T = physx::Bp::BroadPhaseSap]";
    }
    else {
      int v19 = "<allocation names disabled>";
    }
    unsigned int v20 = (physx::Bp::BroadPhaseSap *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v18 + 24) + 16))(v18 + 24, 688, v19, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhase.cpp", 68);
    return physx::Bp::BroadPhaseSap::BroadPhaseSap(v20, a3, a4, a5, a6);
  }
}

unsigned int *physx::Bp::PairManagerData::reallocPairs(unsigned int *this)
{
  uint64_t v1 = this;
  if (*((void *)this + 2))
  {
    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)v1 + 2) = 0;
  }
  uint64_t v2 = *v1;
  if (!v2)
  {
    uint64_t v5 = 0;
    int v7 = 0;
    *((void *)v1 + 2) = 0;
    goto LABEL_11;
  }
  this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseShared.cpp", 83);
  uint64_t v3 = *v1;
  *((void *)v1 + 2) = this;
  if (!v3 || (this = (unsigned int *)memset(this, 255, 4 * v3), uint64_t v4 = *v1, !v4))
  {
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseShared.cpp", 87);
  uint64_t v5 = this;
  uint64_t v6 = *v1;
  if (!v6)
  {
LABEL_10:
    int v7 = 0;
    goto LABEL_11;
  }
  this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseShared.cpp", 88);
  int v7 = this;
LABEL_11:
  unsigned int v8 = v1[2];
  if (v8)
  {
    this = (unsigned int *)memcpy(v5, *((const void **)v1 + 4), 8 * v8);
    if (v1[2])
    {
      unint64_t v9 = 0;
      uint64_t v10 = *((void *)v1 + 2);
      unsigned int v11 = (int *)(*((void *)v1 + 4) + 4);
      do
      {
        int v12 = *((unsigned __int16 *)v11 - 2);
        int v13 = *v11;
        v11 += 2;
        unsigned int v14 = (v12 | (v13 << 16)) + ~((v12 | (v13 << 16)) << 15);
        unsigned int v15 = (9 * (v14 ^ (v14 >> 10))) ^ ((9 * (v14 ^ (v14 >> 10))) >> 6);
        unsigned int v16 = ((v15 + ~(v15 << 11)) ^ ((v15 + ~(v15 << 11)) >> 16)) & v1[1];
        v7[v9] = *(_DWORD *)(v10 + 4 * v16);
        *(_DWORD *)(v10 + 4 * v1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v9++;
      }
      while (v9 < v1[2]);
    }
  }
  if (*((void *)v1 + 3))
  {
    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((void *)v1 + 3) = 0;
  }
  if (*((void *)v1 + 4)) {
    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((void *)v1 + 3) = v7;
  *((void *)v1 + 4) = v5;
  return this;
}

uint64_t physx::Bp::PairManagerData::growPairs(physx::Bp::PairManagerData *this, unsigned int a2)
{
  unsigned int v4 = (*((_DWORD *)this + 2) + 1) | ((*((_DWORD *)this + 2) + 1) >> 1);
  unsigned int v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
  unsigned int v6 = v5 | (v5 >> 8) | ((v5 | (v5 >> 8)) >> 16);
  *(_DWORD *)this = v6 + 1;
  *((_DWORD *)this + 1) = v6;
  physx::Bp::PairManagerData::reallocPairs((unsigned int *)this);
  return *((_DWORD *)this + 1) & a2;
}

uint64_t physx::Bp::BroadPhaseABP::getType(physx::Bp::BroadPhaseABP *this)
{
  return 2;
}

uint64_t physx::Bp::BroadPhaseABP::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t physx::Bp::BroadPhaseABP::getBroadPhasePairs(physx::Bp::BroadPhaseABP *this)
{
  return 0;
}

void *internalABP::doCompleteBoxPruning_Leaf(void *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  this[7] = a5;
  this[8] = a5;
  this[9] = a6;
  if (a2)
  {
    uint64_t v9 = (uint64_t)this;
    unint64_t v10 = 0;
    LODWORD(v11) = 0;
    unint64_t v12 = a2;
    do
    {
      unsigned int v13 = *(_DWORD *)(a3 + 8 * v10 + 4);
      do
      {
        uint64_t v14 = 8 * v11;
        uint64_t v11 = (v11 + 1);
      }
      while (*(_DWORD *)(a3 + v14) < *(_DWORD *)(a3 + 8 * v10));
      if (*(_DWORD *)(a3 + 8 * v11) <= v13)
      {
        unsigned int v15 = (uint64_t *)(a4 + 16 * v10);
        uint64_t v16 = v11;
        unsigned int v17 = v11;
        do
        {
          uint64_t v18 = (uint64_t *)(a4 + 16 * v16);
          v19.i64[0] = v15[1];
          v20.i64[0] = *v18;
          v19.i64[1] = v18[1];
          v20.i64[1] = *v15;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v20, v19))) & 1) == 0) {
            this = (void *)internalABP::ABP_PairManager::addPair(v9, v10, v17);
          }
          uint64_t v16 = ++v17;
        }
        while (*(_DWORD *)(a3 + 8 * v16) <= v13);
      }
      ++v10;
    }
    while (v10 < v12 && v11 < a2);
  }
  return this;
}

void *internalABP::doBipartiteBoxPruning_Leaf(void *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v10 = this;
  this[7] = a9;
  this[8] = a10;
  this[9] = a2;
  if (a3 && a4)
  {
    uint64_t v15 = 0;
    for (unsigned int i = 0; i < a4; --i)
    {
      unsigned int v17 = *(_DWORD *)(a5 + 8 * v15 + 4);
      unsigned int v18 = i + 1;
      do
      {
        unsigned int v19 = i;
        unsigned int v20 = v18;
        unsigned int v21 = *(_DWORD *)(a6 + 8 * i++);
        ++v18;
      }
      while (v21 < *(_DWORD *)(a5 + 8 * v15));
      if (v21 <= v17)
      {
        uint64_t v22 = v19;
        unsigned int v23 = (uint64_t *)(a7 + 16 * v15);
        do
        {
          uint64_t v24 = (uint64_t *)(a8 + 16 * v22);
          v25.i64[0] = v23[1];
          v26.i64[0] = *v24;
          v25.i64[1] = v24[1];
          v26.i64[1] = *v23;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v26, v25))) & 1) == 0) {
            this = (void *)internalABP::ABP_PairManager::addPair((uint64_t)v10, v15, v20 - 1);
          }
          uint64_t v22 = v20;
          unsigned int v27 = *(_DWORD *)(a6 + 8 * v20++);
        }
        while (v27 <= v17);
      }
      if (++v15 >= (unint64_t)a3) {
        break;
      }
    }
    uint64_t v28 = 0;
    unsigned int v29 = 0;
    v10[7] = a10;
    v10[8] = a9;
    v10[9] = a2;
    do
    {
      unsigned int v30 = *(_DWORD *)(a6 + 8 * v28 + 4);
      unsigned int v31 = v29 + 1;
      do
      {
        unsigned int v32 = v29;
        unsigned int v33 = v31;
        unsigned int v34 = *(_DWORD *)(a5 + 8 * v29++);
        ++v31;
      }
      while (v34 <= *(_DWORD *)(a6 + 8 * v28));
      if (v34 <= v30)
      {
        uint64_t v35 = v32;
        unint64_t v36 = (uint64_t *)(a8 + 16 * v28);
        do
        {
          uint64_t v37 = (uint64_t *)(a7 + 16 * v35);
          v38.i64[0] = v36[1];
          v39.i64[0] = *v37;
          v38.i64[1] = v37[1];
          v39.i64[1] = *v36;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v39, v38))) & 1) == 0) {
            this = (void *)internalABP::ABP_PairManager::addPair((uint64_t)v10, v28, v33 - 1);
          }
          uint64_t v35 = v33;
          unsigned int v40 = *(_DWORD *)(a5 + 8 * v33++);
        }
        while (v40 <= v30);
      }
      if (++v28 >= (unint64_t)a4) {
        break;
      }
      --v29;
    }
    while (v29 < a3);
  }
  else
  {
    this[7] = a10;
    this[8] = a9;
  }
  return this;
}

uint64_t physx::shdfnd::ReflectionAllocator<internalABP::ABP_Object>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unsigned int v8 = "static const char *physx::shdfnd::ReflectionAllocator<internalABP::ABP_Object>::getName() [T = internalABP::ABP_Object]";
  }
  else {
    unsigned int v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

float32x4_t physx::Dy::PxcLtbFactor(unsigned __int16 *a1)
{
  uint64_t v1 = (float32x4_t *)((char *)a1 + a1[8]);
  int v2 = *a1;
  uint64_t v3 = (v2 - 1);
  if (v2 != 1)
  {
    v5.i64[0] = 0x3F0000003F000000;
    v5.i64[1] = 0x3F0000003F000000;
    do
    {
      unsigned int v6 = (char *)&v1[25 * v3];
      float32x4_t v7 = *((float32x4_t *)v6 + 6);
      float32x4_t v8 = *((float32x4_t *)v6 + 7);
      float32x4_t v9 = *((float32x4_t *)v6 + 8);
      *(int8x8_t *)v10.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), *(int8x8_t *)v8.f32, 4uLL);
      v10.i64[1] = v9.i64[0];
      int8x8_t v11 = vext_s8(*(int8x8_t *)v7.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 1), 4uLL);
      *(int32x2_t *)&v25.u32[2] = vdup_lane_s32(*(int32x2_t *)v9.f32, 1);
      *(int8x8_t *)v12.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v7, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), 4uLL);
      v12.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
      float32x4_t v13 = vaddq_f32(v7, v10);
      float32x4_t v14 = vaddq_f32(v8, v25);
      float32x4_t v15 = vaddq_f32(v9, v12);
      float32x4_t v16 = vmulq_f32(v13, v5);
      float32x4_t v17 = v16;
      v17.i32[3] = 0;
      float32x4_t v18 = vmulq_f32(v14, v5);
      int8x16_t v19 = (int8x16_t)v18;
      v19.i32[3] = 0;
      float32x4_t v20 = vmulq_f32(v15, v5);
      int8x16_t v21 = (int8x16_t)v20;
      v21.i32[3] = 0;
      unsigned int v22 = *((unsigned __int8 *)a1 + v3 + 64);
      float32x4_t v23 = *((float32x4_t *)v6 + 1);
      float32x4_t v24 = *((float32x4_t *)v6 + 2);
      *(int8x8_t *)v25.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v6, 0), *(int8x8_t *)v23.f32, 4uLL);
      *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v6, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v23.f32, 1), 4uLL);
      *(int32x2_t *)&v26.u32[2] = vdup_lane_s32(*(int32x2_t *)v24.f32, 1);
      *(int8x8_t *)v27.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)v6, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), 4uLL);
      v27.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
      float32x4_t v28 = vaddq_f32(v23, v26);
      float32x4_t v29 = vaddq_f32(v24, v27);
      v19.i64[0] = vextq_s8(v19, v19, 8uLL).u64[0];
      float32x2_t v30 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
      float32x2_t v31 = (float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v30, 4uLL);
      float32x2_t v32 = (float32x2_t)vext_s8(*(int8x8_t *)v18.f32, *(int8x8_t *)v19.i8, 4uLL);
      int8x8_t v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v19.i8), *(float32x2_t *)v18.f32, v30);
      int32x2_t v34 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, v31), v32, *(float32x2_t *)v20.f32);
      *(int8x8_t *)v35.f32 = vext_s8((int8x8_t)v34, v33, 4uLL);
      v34.i32[1] = 0;
      v35.i64[1] = v34.u32[0];
      float32x2_t v36 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      float32x2_t v37 = (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v36, 4uLL);
      *(int32x2_t *)v39.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, v30), *(float32x2_t *)v20.f32, v36), 0);
      unsigned __int32 v38 = vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v37), v31, *(float32x2_t *)v16.f32).u32[0];
      v39.i64[1] = v38;
      float32x4_t v40 = vmulq_f32(v28, v5);
      float32x4_t v41 = vmulq_f32(v17, v35);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      float32x2_t v42 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
      float32x2_t v43 = vrecpe_f32(v42);
      int v44 = 4;
      do
      {
        float32x2_t v43 = vmul_f32(v43, vrecps_f32(v42, v43));
        --v44;
      }
      while (v44);
      v25.i64[1] = *((void *)v6 + 4);
      float32x4_t v45 = vmulq_f32(vaddq_f32(*(float32x4_t *)v6, v25), v5);
      v45.i32[3] = 0;
      v40.i32[3] = 0;
      float32x4_t v46 = vmulq_f32(v29, v5);
      v46.i32[3] = 0;
      v39.i32[0] = v33.i32[0];
      *(int8x8_t *)v47.f32 = vext_s8((int8x8_t)vdup_lane_s32(v34, 0), (int8x8_t)v38, 4uLL);
      *(float32x2_t *)&v47.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, v32), v37, *(float32x2_t *)v18.f32);
      float32x4_t v48 = vmulq_n_f32(v35, v43.f32[0]);
      float32x4_t v49 = vmulq_n_f32(v39, v43.f32[0]);
      float32x4_t v50 = *((float32x4_t *)v6 + 3);
      float32x4_t v51 = *((float32x4_t *)v6 + 4);
      float32x4_t v52 = vnegq_f32(v50);
      v52.i32[3] = 0;
      float32x4_t v53 = vnegq_f32(v51);
      v53.i32[3] = 0;
      float32x4_t v54 = *((float32x4_t *)v6 + 5);
      float32x4_t v55 = vnegq_f32(v54);
      v55.i32[3] = 0;
      float32x4_t v56 = vmulq_n_f32(v52, v48.f32[0]);
      v56.i32[3] = 0;
      float32x4_t v57 = vmulq_lane_f32(v53, *(float32x2_t *)v48.f32, 1);
      v57.i32[3] = 0;
      float32x4_t v58 = vmulq_laneq_f32(v55, v48, 2);
      v58.i32[3] = 0;
      float32x4_t v59 = vmulq_n_f32(v47, v43.f32[0]);
      float32x4_t v60 = vaddq_f32(vaddq_f32(v56, v57), v58);
      float32x4_t v61 = vmulq_n_f32(v52, v49.f32[0]);
      v61.i32[3] = 0;
      float32x4_t v62 = vmulq_lane_f32(v53, *(float32x2_t *)v49.f32, 1);
      v62.i32[3] = 0;
      float32x4_t v63 = vmulq_laneq_f32(v55, v49, 2);
      v63.i32[3] = 0;
      float32x4_t v64 = vmulq_n_f32(v52, v59.f32[0]);
      v64.i32[3] = 0;
      float32x4_t v65 = vmulq_lane_f32(v53, *(float32x2_t *)v59.f32, 1);
      v65.i32[3] = 0;
      float32x4_t v66 = vaddq_f32(v61, v62);
      float32x4_t v67 = vmulq_laneq_f32(v55, v59, 2);
      v67.i32[3] = 0;
      float32x4_t v68 = vaddq_f32(v66, v63);
      *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), *(int8x8_t *)v51.f32, 4uLL);
      v55.i64[1] = vdup_lane_s32(*(int32x2_t *)v54.f32, 0).u32[0];
      *(int8x8_t *)v62.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v51.f32, 1), 4uLL);
      v62.i64[1] = vdup_lane_s32(*(int32x2_t *)v54.f32, 1).u32[0];
      float32x4_t v69 = vaddq_f32(vaddq_f32(v64, v65), v67);
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v50, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), 4uLL);
      v50.i64[1] = vdup_laneq_s32((int32x4_t)v54, 2).u32[0];
      float32x4_t v70 = vmulq_n_f32(v60, v55.f32[0]);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_lane_f32(v68, *(float32x2_t *)v55.f32, 1);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_laneq_f32(v69, v55, 2);
      v72.i32[3] = 0;
      float32x4_t v73 = vaddq_f32(v70, v71);
      float32x4_t v74 = vmulq_n_f32(v60, v62.f32[0]);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_lane_f32(v68, *(float32x2_t *)v62.f32, 1);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_laneq_f32(v69, v62, 2);
      v76.i32[3] = 0;
      float32x4_t v77 = vaddq_f32(v72, v73);
      float32x4_t v78 = vaddq_f32(v76, vaddq_f32(v74, v75));
      float32x4_t v79 = vmulq_n_f32(v60, v50.f32[0]);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_lane_f32(v68, *(float32x2_t *)v50.f32, 1);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_laneq_f32(v69, v50, 2);
      v81.i32[3] = 0;
      float32x4_t v82 = vaddq_f32(v81, vaddq_f32(v79, v80));
      float32x4_t v83 = vaddq_f32(v45, v77);
      int8x16_t v84 = (int8x16_t)vaddq_f32(v40, v78);
      int8x16_t v85 = (int8x16_t)vaddq_f32(v46, v82);
      v63.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
      v64.i64[0] = vextq_s8(v85, v85, 4uLL).u64[0];
      float32x2_t v86 = (float32x2_t)vextq_s8(v84, v84, 4uLL).u64[0];
      int8x8_t v87 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), *(float32x2_t *)v85.i8), *(float32x2_t *)v84.i8, *(float32x2_t *)v63.f32);
      int32x2_t v88 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v64.f32), v86, *(float32x2_t *)v85.i8);
      *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)v88, v87, 4uLL);
      v88.i32[1] = 0;
      v89.i64[1] = v88.u32[0];
      float32x2_t v90 = (float32x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL).u64[0];
      float32x2_t v91 = vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v83.f32);
      unsigned __int32 v92 = vmls_f32(vmul_f32(*(float32x2_t *)v85.i8, v90), *(float32x2_t *)v64.f32, *(float32x2_t *)v83.f32).u32[0];
      *(int32x2_t *)v93.f32 = vdup_lane_s32((int32x2_t)vmls_f32(v91, *(float32x2_t *)v85.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL)), 0);
      v93.i64[1] = v92;
      float32x4_t v94 = vmulq_f32(v83, v89);
      v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
      float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
      float32x2_t v96 = vrecpe_f32(v95);
      int v97 = 4;
      do
      {
        float32x2_t v96 = vmul_f32(v96, vrecps_f32(v95, v96));
        --v97;
      }
      while (v97);
      v48.i32[3] = 0;
      v49.i32[3] = 0;
      v59.i32[3] = 0;
      v93.i32[0] = v87.i32[0];
      float32x2_t v98 = vmls_f32(vmul_f32(*(float32x2_t *)v83.f32, v86), v90, *(float32x2_t *)v84.i8);
      *(int8x8_t *)v99.f32 = vext_s8((int8x8_t)vdup_lane_s32(v88, 0), (int8x8_t)v92, 4uLL);
      *(float32x2_t *)&v99.u32[2] = v98;
      float32x4_t v100 = vmulq_n_f32(v89, v96.f32[0]);
      float32x4_t v101 = vmulq_n_f32(v100, v60.f32[0]);
      float32x4_t v102 = vmulq_n_f32(v100, v68.f32[0]);
      float32x4_t v103 = v100;
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_n_f32(v100, v69.f32[0]);
      float32x4_t v105 = vmulq_n_f32(v93, v96.f32[0]);
      float32x4_t v106 = vmulq_lane_f32(v105, *(float32x2_t *)v60.f32, 1);
      float32x4_t v107 = vmulq_lane_f32(v105, *(float32x2_t *)v68.f32, 1);
      float32x4_t v108 = vmulq_lane_f32(v105, *(float32x2_t *)v69.f32, 1);
      float32x4_t v109 = v105;
      v109.i32[3] = 0;
      float32x4_t v110 = vmulq_n_f32(v99, v96.f32[0]);
      float32x4_t v111 = vmulq_laneq_f32(v110, v60, 2);
      float32x4_t v112 = vmulq_laneq_f32(v110, v68, 2);
      float32x4_t v113 = v110;
      v113.i32[3] = 0;
      int8x8_t v114 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v60, 2).u64[0];
      v101.i32[3] = 0;
      v106.i32[3] = 0;
      v111.i32[3] = 0;
      float32x4_t v115 = vmulq_laneq_f32(v110, v69, 2);
      float32x4_t v116 = vaddq_f32(v101, v106);
      v106.i64[0] = vdupq_lane_s32(*(int32x2_t *)v68.f32, 1).u64[0];
      v102.i32[3] = 0;
      float32x4_t v117 = vaddq_f32(v111, v116);
      v107.i32[3] = 0;
      v112.i32[3] = 0;
      float32x4_t v118 = vaddq_f32(v102, v107);
      v104.i32[3] = 0;
      v108.i32[3] = 0;
      v115.i32[3] = 0;
      v107.i64[0] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u64[0];
      *(int8x8_t *)v119.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v60.f32, 0), *(int8x8_t *)v68.f32, 4uLL);
      v119.i64[1] = vdupq_lane_s32(*(int32x2_t *)v69.f32, 0).u32[0];
      float32x4_t v120 = vaddq_f32(v112, v118);
      *(int8x8_t *)v121.f32 = vext_s8(*(int8x8_t *)v60.f32, *(int8x8_t *)v106.f32, 4uLL);
      v121.i64[1] = vdupq_lane_s32(*(int32x2_t *)v69.f32, 1).u32[0];
      float32x4_t v122 = vaddq_f32(v104, v108);
      *(int8x8_t *)v104.f32 = vext_s8(v114, *(int8x8_t *)v107.f32, 4uLL);
      v104.i64[1] = vdupq_laneq_s32((int32x4_t)v69, 2).u32[0];
      float32x4_t v123 = vmulq_n_f32(v119, v117.f32[0]);
      v123.i32[3] = 0;
      float32x4_t v124 = vmulq_lane_f32(v121, *(float32x2_t *)v117.f32, 1);
      v124.i32[3] = 0;
      float32x4_t v125 = vaddq_f32(v115, v122);
      float32x4_t v126 = vmulq_laneq_f32(v104, v117, 2);
      v126.i32[3] = 0;
      float32x4_t v127 = vaddq_f32(v126, vaddq_f32(v123, v124));
      float32x4_t v128 = vmulq_n_f32(v119, v120.f32[0]);
      v128.i32[3] = 0;
      float32x4_t v129 = vmulq_lane_f32(v121, *(float32x2_t *)v120.f32, 1);
      v129.i32[3] = 0;
      float32x4_t v130 = vmulq_laneq_f32(v104, v120, 2);
      v130.i32[3] = 0;
      float32x4_t v131 = vaddq_f32(v130, vaddq_f32(v128, v129));
      float32x4_t v132 = vmulq_n_f32(v119, v125.f32[0]);
      v132.i32[3] = 0;
      float32x4_t v133 = vmulq_lane_f32(v121, *(float32x2_t *)v125.f32, 1);
      v133.i32[3] = 0;
      float32x4_t v134 = vmulq_laneq_f32(v104, v125, 2);
      v134.i32[3] = 0;
      float32x4_t v348 = v103;
      v349[0] = v103;
      float32x4_t v346 = v113;
      float32x4_t v347 = v109;
      v349[1] = v109;
      v349[2] = v113;
      float32x4_t v344 = v120;
      float32x4_t v345 = v117;
      v349[3] = v117;
      v349[4] = v120;
      float32x4_t v342 = vaddq_f32(v59, vaddq_f32(v134, vaddq_f32(v132, v133)));
      float32x4_t v343 = v125;
      v349[5] = v125;
      float32x4_t v350 = vaddq_f32(v48, v127);
      float32x4_t v340 = vaddq_f32(v49, v131);
      float32x4_t v341 = v350;
      float32x4_t v351 = v340;
      float32x4_t v352 = v342;
      *(int8x8_t *)v135.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v349, (float32x2_t *)&v1[25 * v3 + 15], &v1[25 * v3 + 15]);
      float32x4_t v136 = vnegq_f32(v135);
      float32x4_t v137 = v136;
      v137.i32[3] = 0;
      float32x4_t v139 = vnegq_f32(v138);
      int8x16_t v140 = (int8x16_t)v139;
      v140.i32[3] = 0;
      float32x4_t v142 = vnegq_f32(v141);
      int8x16_t v143 = (int8x16_t)v142;
      v143.i32[3] = 0;
      v140.i64[0] = vextq_s8(v140, v140, 8uLL).u64[0];
      float32x2_t v144 = (float32x2_t)vextq_s8(v143, v143, 8uLL).u64[0];
      float32x2_t v145 = (float32x2_t)vext_s8(*(int8x8_t *)v142.f32, (int8x8_t)v144, 4uLL);
      float32x2_t v146 = (float32x2_t)vext_s8(*(int8x8_t *)v139.f32, *(int8x8_t *)v140.i8, 4uLL);
      int8x8_t v147 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v140.i8), *(float32x2_t *)v139.f32, v144);
      int32x2_t v148 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v139.f32, v145), v146, *(float32x2_t *)v142.f32);
      *(int8x8_t *)v149.f32 = vext_s8((int8x8_t)v148, v147, 4uLL);
      v148.i32[1] = 0;
      v149.i64[1] = v148.u32[0];
      float32x2_t v150 = (float32x2_t)vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
      float32x2_t v151 = (float32x2_t)vext_s8(*(int8x8_t *)v136.f32, (int8x8_t)v150, 4uLL);
      float32x2_t v152 = vmul_f32(*(float32x2_t *)v136.f32, v144);
      unsigned __int32 v153 = vmls_f32(vmul_f32(*(float32x2_t *)v142.f32, v151), v145, *(float32x2_t *)v136.f32).u32[0];
      *(int32x2_t *)v154.f32 = vdup_lane_s32((int32x2_t)vmls_f32(v152, *(float32x2_t *)v142.f32, v150), 0);
      v154.i64[1] = v153;
      float32x4_t v155 = vmulq_f32(v137, v149);
      v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
      float32x2_t v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
      float32x2_t v157 = vrecpe_f32(v156);
      int v158 = 4;
      do
      {
        float32x2_t v157 = vmul_f32(v157, vrecps_f32(v156, v157));
        --v158;
      }
      while (v158);
      v154.i32[0] = v147.i32[0];
      *(int8x8_t *)v159.f32 = vext_s8((int8x8_t)vdup_lane_s32(v148, 0), (int8x8_t)v153, 4uLL);
      *(float32x2_t *)&v159.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v136.f32, v146), v151, *(float32x2_t *)v139.f32);
      float32x4_t v160 = vmulq_n_f32(v149, v157.f32[0]);
      char v161 = &v1[25 * v3];
      float32x4_t v163 = v161[9];
      float32x4_t v162 = v161[10];
      float32x4_t v165 = v161[11];
      float32x4_t v164 = v161[12];
      float32x4_t v167 = v161[13];
      float32x4_t v166 = v161[14];
      float32x4_t v168 = vmulq_laneq_f32(v167, v160, 2);
      v168.i32[3] = 0;
      float32x4_t v169 = vmlaq_lane_f32(v168, v165, *(float32x2_t *)v160.f32, 1);
      v169.i64[1] = vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL).u32[0];
      float32x4_t v170 = vmlaq_n_f32(v169, v163, v160.f32[0]);
      float32x4_t v171 = vmulq_laneq_f32(v166, v160, 2);
      v171.i32[3] = 0;
      float32x4_t v172 = vmlaq_lane_f32(v171, v164, *(float32x2_t *)v160.f32, 1);
      v172.i64[1] = vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL).u32[0];
      float32x4_t v173 = vmlaq_n_f32(v172, v162, v160.f32[0]);
      v160.i32[3] = 0;
      float32x4_t v174 = vmulq_n_f32(v154, v157.f32[0]);
      float32x4_t v175 = vmulq_laneq_f32(v167, v174, 2);
      v175.i32[3] = 0;
      float32x4_t v176 = vmlaq_lane_f32(v175, v165, *(float32x2_t *)v174.f32, 1);
      v176.i64[1] = vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u32[0];
      float32x4_t v177 = vmlaq_n_f32(v176, v163, v174.f32[0]);
      float32x4_t v178 = vmulq_laneq_f32(v166, v174, 2);
      v178.i32[3] = 0;
      float32x4_t v179 = vmlaq_lane_f32(v178, v164, *(float32x2_t *)v174.f32, 1);
      v179.i64[1] = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u32[0];
      float32x4_t v180 = vmlaq_n_f32(v179, v162, v174.f32[0]);
      v174.i32[3] = 0;
      float32x4_t v181 = vmulq_n_f32(v159, v157.f32[0]);
      float32x4_t v182 = vmulq_laneq_f32(v167, v181, 2);
      v182.i32[3] = 0;
      float32x4_t v183 = vmlaq_lane_f32(v182, v165, *(float32x2_t *)v181.f32, 1);
      v183.i64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u32[0];
      float32x4_t v184 = vmlaq_n_f32(v183, v163, v181.f32[0]);
      float32x4_t v185 = vmulq_laneq_f32(v166, v181, 2);
      v185.i32[3] = 0;
      float32x4_t v186 = vmlaq_lane_f32(v185, v164, *(float32x2_t *)v181.f32, 1);
      v186.i64[1] = vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u32[0];
      float32x4_t v187 = vmlaq_n_f32(v186, v162, v181.f32[0]);
      v181.i32[3] = 0;
      *(float32x4_t *)unsigned int v6 = v348;
      *((float32x4_t *)v6 + 1) = v347;
      *((float32x4_t *)v6 + 2) = v346;
      *((float32x4_t *)v6 + 3) = v345;
      *((float32x4_t *)v6 + 4) = v344;
      *((float32x4_t *)v6 + 5) = v343;
      v170.i64[1] = vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL).u32[0];
      v177.i64[1] = vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u32[0];
      *((float32x4_t *)v6 + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v341;
      *((float32x4_t *)v6 + 7) = v340;
      v184.i64[1] = vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL).u32[0];
      *((float32x4_t *)v6 + 8) = v342;
      v173.i64[1] = vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u32[0];
      uint64_t v188 = &v1[25 * v22];
      v180.i64[1] = vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u32[0];
      v187.i64[1] = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u32[0];
      float32x4_t v189 = vmlsq_lane_f32(*v188, v170, *(float32x2_t *)v163.f32, 0);
      v189.i64[1] = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u32[0];
      float32x4_t v190 = vmlsq_lane_f32(v188[3], v170, *(float32x2_t *)v162.f32, 0);
      v190.i64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u32[0];
      float32x4_t v191 = vmlsq_lane_f32(v188[6], v173, *(float32x2_t *)v162.f32, 0);
      v191.i64[1] = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u32[0];
      float32x4_t v192 = vmlsq_lane_f32(v188[1], v170, *(float32x2_t *)v163.f32, 1);
      v192.i64[1] = vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL).u32[0];
      float32x4_t v193 = vmlsq_lane_f32(v188[4], v170, *(float32x2_t *)v162.f32, 1);
      v193.i64[1] = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u32[0];
      float32x4_t v194 = vmlsq_lane_f32(v188[7], v173, *(float32x2_t *)v162.f32, 1);
      v194.i64[1] = vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL).u32[0];
      float32x4_t v195 = vmlsq_laneq_f32(v188[2], v170, v163, 2);
      v195.i64[1] = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u32[0];
      float32x4_t v196 = vmlsq_laneq_f32(v188[5], v170, v162, 2);
      v196.i64[1] = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u32[0];
      float32x4_t v197 = vmlsq_laneq_f32(v188[8], v173, v162, 2);
      v197.i64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u32[0];
      float32x4_t v198 = vmlsq_lane_f32(v189, v177, *(float32x2_t *)v165.f32, 0);
      v198.i64[1] = vextq_s8((int8x16_t)v198, (int8x16_t)v198, 8uLL).u32[0];
      float32x4_t v199 = vmlsq_lane_f32(v190, v177, *(float32x2_t *)v164.f32, 0);
      v199.i64[1] = vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL).u32[0];
      float32x4_t v200 = vmlsq_lane_f32(v191, v180, *(float32x2_t *)v164.f32, 0);
      v200.i64[1] = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u32[0];
      float32x4_t v201 = vmlsq_lane_f32(v192, v177, *(float32x2_t *)v165.f32, 1);
      v201.i64[1] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u32[0];
      float32x4_t v202 = vmlsq_lane_f32(v193, v177, *(float32x2_t *)v164.f32, 1);
      v202.i64[1] = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u32[0];
      float32x4_t v203 = vmlsq_lane_f32(v194, v180, *(float32x2_t *)v164.f32, 1);
      v203.i64[1] = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u32[0];
      float32x4_t v204 = vmlsq_laneq_f32(v195, v177, v165, 2);
      v204.i64[1] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u32[0];
      float32x4_t v205 = vmlsq_laneq_f32(v196, v177, v164, 2);
      v205.i64[1] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u32[0];
      float32x4_t v206 = vmlsq_laneq_f32(v197, v180, v164, 2);
      v206.i64[1] = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u32[0];
      int8x16_t v207 = (int8x16_t)vmlsq_lane_f32(v198, v184, *(float32x2_t *)v167.f32, 0);
      v207.i64[1] = vextq_s8(v207, v207, 8uLL).u32[0];
      int8x16_t v208 = (int8x16_t)vmlsq_lane_f32(v199, v184, *(float32x2_t *)v166.f32, 0);
      v208.i64[1] = vextq_s8(v208, v208, 8uLL).u32[0];
      int8x16_t v209 = (int8x16_t)vmlsq_lane_f32(v200, v187, *(float32x2_t *)v166.f32, 0);
      v209.i64[1] = vextq_s8(v209, v209, 8uLL).u32[0];
      int8x16_t v210 = (int8x16_t)vmlsq_lane_f32(v201, v184, *(float32x2_t *)v167.f32, 1);
      v210.i64[1] = vextq_s8(v210, v210, 8uLL).u32[0];
      int8x16_t v211 = (int8x16_t)vmlsq_lane_f32(v202, v184, *(float32x2_t *)v166.f32, 1);
      v211.i64[1] = vextq_s8(v211, v211, 8uLL).u32[0];
      int8x16_t v212 = (int8x16_t)vmlsq_lane_f32(v203, v187, *(float32x2_t *)v166.f32, 1);
      v212.i64[1] = vextq_s8(v212, v212, 8uLL).u32[0];
      int8x16_t v213 = (int8x16_t)vmlsq_laneq_f32(v204, v184, v167, 2);
      v213.i64[1] = vextq_s8(v213, v213, 8uLL).u32[0];
      int8x16_t v214 = (int8x16_t)vmlsq_laneq_f32(v205, v184, v166, 2);
      v214.i64[1] = vextq_s8(v214, v214, 8uLL).u32[0];
      int8x16_t v215 = (int8x16_t)vmlsq_laneq_f32(v206, v187, v166, 2);
      v215.i64[1] = vextq_s8(v215, v215, 8uLL).u32[0];
      v161[9] = v170;
      v161[10] = v173;
      v161[11] = v177;
      v161[12] = v180;
      v161[13] = v184;
      v161[14] = v187;
      *uint64_t v188 = (float32x4_t)v207;
      v188[1] = (float32x4_t)v210;
      v188[2] = (float32x4_t)v213;
      v188[3] = (float32x4_t)v208;
      v188[4] = (float32x4_t)v211;
      v188[5] = (float32x4_t)v214;
      v188[6] = (float32x4_t)v209;
      v188[7] = (float32x4_t)v212;
      v188[8] = (float32x4_t)v215;
      v161[21] = v160;
      v161[22] = v174;
      v161[23] = v181;
      --v3;
      v5.i64[0] = 0x3F0000003F000000;
      v5.i64[1] = 0x3F0000003F000000;
    }
    while (v3);
  }
  float32x4_t v216 = v1[6];
  float32x4_t v217 = v1[7];
  float32x4_t v218 = v1[8];
  *(int8x8_t *)v219.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v216.f32, 0), *(int8x8_t *)v217.f32, 4uLL);
  v219.i64[1] = v218.i64[0];
  int8x8_t v220 = vext_s8(*(int8x8_t *)v216.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v217.f32, 1), 4uLL);
  *(int32x2_t *)&v232.u32[2] = vdup_lane_s32(*(int32x2_t *)v218.f32, 1);
  *(int8x8_t *)v221.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v216, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL), 4uLL);
  v221.i64[1] = vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u64[0];
  float32x4_t v222 = vaddq_f32(v216, v219);
  float32x4_t v223 = vaddq_f32(v218, v221);
  v221.i64[0] = 0x3F0000003F000000;
  v221.i64[1] = 0x3F0000003F000000;
  float32x4_t v224 = vmulq_f32(v222, v221);
  float32x4_t v225 = v224;
  v225.i32[3] = 0;
  float32x4_t v226 = vmulq_f32(vaddq_f32(v217, v232), v221);
  int8x16_t v227 = (int8x16_t)v226;
  v227.i32[3] = 0;
  float32x4_t v228 = vmulq_f32(v223, v221);
  int8x16_t v229 = (int8x16_t)v228;
  v229.i32[3] = 0;
  float32x4_t v230 = v1[1];
  float32x4_t v231 = v1[2];
  *(int8x8_t *)v232.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v1->f32, 0), *(int8x8_t *)v230.f32, 4uLL);
  *(int8x8_t *)v233.f32 = vext_s8(*(int8x8_t *)v1->f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v230.f32, 1), 4uLL);
  *(int32x2_t *)&v233.u32[2] = vdup_lane_s32(*(int32x2_t *)v231.f32, 1);
  *(int8x8_t *)v234.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)v1, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL), 4uLL);
  v234.i64[1] = vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL).u64[0];
  float32x4_t v235 = vaddq_f32(v230, v233);
  float32x4_t v236 = vaddq_f32(v231, v234);
  v227.i64[0] = vextq_s8(v227, v227, 8uLL).u64[0];
  float32x2_t v237 = (float32x2_t)vextq_s8(v229, v229, 8uLL).u64[0];
  float32x2_t v238 = (float32x2_t)vext_s8(*(int8x8_t *)v228.f32, (int8x8_t)v237, 4uLL);
  float32x2_t v239 = (float32x2_t)vext_s8(*(int8x8_t *)v226.f32, *(int8x8_t *)v227.i8, 4uLL);
  int8x8_t v240 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v227.i8), *(float32x2_t *)v226.f32, v237);
  int32x2_t v241 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v226.f32, v238), v239, *(float32x2_t *)v228.f32);
  *(int8x8_t *)v242.f32 = vext_s8((int8x8_t)v241, v240, 4uLL);
  v241.i32[1] = 0;
  v242.i64[1] = v241.u32[0];
  v227.i64[0] = vextq_s8((int8x16_t)v225, (int8x16_t)v225, 8uLL).u64[0];
  float32x2_t v243 = (float32x2_t)vext_s8(*(int8x8_t *)v224.f32, *(int8x8_t *)v227.i8, 4uLL);
  int32x2_t v244 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v224.f32, v237), *(float32x2_t *)v228.f32, *(float32x2_t *)v227.i8);
  unsigned __int32 v245 = vmls_f32(vmul_f32(*(float32x2_t *)v228.f32, v243), v238, *(float32x2_t *)v224.f32).u32[0];
  *(int32x2_t *)v246.f32 = vdup_lane_s32(v244, 0);
  v246.i64[1] = v245;
  float32x4_t v247 = vmulq_f32(v235, v221);
  float32x4_t v248 = vmulq_f32(v225, v242);
  v248.i64[0] = vpaddq_f32(v248, v248).u64[0];
  float32x2_t v249 = vpadd_f32(*(float32x2_t *)v248.f32, *(float32x2_t *)v248.f32);
  float32x2_t v250 = vrecpe_f32(v249);
  int v251 = 4;
  do
  {
    float32x2_t v250 = vmul_f32(v250, vrecps_f32(v249, v250));
    --v251;
  }
  while (v251);
  v232.i64[1] = v1[2].i64[0];
  v252.i64[0] = 0x3F0000003F000000;
  v252.i64[1] = 0x3F0000003F000000;
  float32x4_t v253 = vmulq_f32(vaddq_f32(*v1, v232), v252);
  v253.i32[3] = 0;
  float32x4_t v254 = vmulq_f32(v236, v252);
  v247.i32[3] = 0;
  v254.i32[3] = 0;
  v246.i32[0] = v240.i32[0];
  *(int8x8_t *)v255.f32 = vext_s8((int8x8_t)vdup_lane_s32(v241, 0), (int8x8_t)v245, 4uLL);
  *(float32x2_t *)&v255.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v224.f32, v239), v243, *(float32x2_t *)v226.f32);
  float32x4_t v256 = vmulq_n_f32(v242, v250.f32[0]);
  float32x4_t v257 = vmulq_n_f32(v246, v250.f32[0]);
  float32x4_t v258 = v1[3];
  float32x4_t v259 = v1[4];
  float32x4_t v260 = vnegq_f32(v258);
  v260.i32[3] = 0;
  float32x4_t v261 = vnegq_f32(v259);
  v261.i32[3] = 0;
  float32x4_t v262 = vmulq_n_f32(v255, v250.f32[0]);
  float32x4_t v263 = v1[5];
  float32x4_t v264 = vnegq_f32(v263);
  v264.i32[3] = 0;
  float32x4_t v265 = vmulq_n_f32(v260, v256.f32[0]);
  v265.i32[3] = 0;
  float32x4_t v266 = vmulq_lane_f32(v261, *(float32x2_t *)v256.f32, 1);
  v266.i32[3] = 0;
  float32x4_t v267 = vmulq_laneq_f32(v264, v256, 2);
  v267.i32[3] = 0;
  float32x4_t v268 = vaddq_f32(v265, v266);
  float32x4_t v269 = vmulq_n_f32(v260, v257.f32[0]);
  v269.i32[3] = 0;
  float32x4_t v270 = vmulq_lane_f32(v261, *(float32x2_t *)v257.f32, 1);
  v270.i32[3] = 0;
  float32x4_t v271 = vmulq_laneq_f32(v264, v257, 2);
  v271.i32[3] = 0;
  float32x4_t v272 = vaddq_f32(v268, v267);
  float32x4_t v273 = vaddq_f32(vaddq_f32(v269, v270), v271);
  float32x4_t v274 = vmulq_n_f32(v260, v262.f32[0]);
  v274.i32[3] = 0;
  float32x4_t v275 = vmulq_lane_f32(v261, *(float32x2_t *)v262.f32, 1);
  v275.i32[3] = 0;
  float32x4_t v276 = vmulq_laneq_f32(v264, v262, 2);
  v276.i32[3] = 0;
  float32x4_t v277 = vaddq_f32(v274, v275);
  *(int8x8_t *)v275.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v258.f32, 0), *(int8x8_t *)v259.f32, 4uLL);
  v275.i64[1] = vdup_lane_s32(*(int32x2_t *)v263.f32, 0).u32[0];
  float32x4_t v278 = vaddq_f32(v277, v276);
  *(int8x8_t *)v267.f32 = vext_s8(*(int8x8_t *)v258.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v259.f32, 1), 4uLL);
  v267.i64[1] = vdup_lane_s32(*(int32x2_t *)v263.f32, 1).u32[0];
  *(int8x8_t *)v258.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v258, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v259, (int8x16_t)v259, 8uLL), 4uLL);
  v258.i64[1] = vdup_laneq_s32((int32x4_t)v263, 2).u32[0];
  float32x4_t v279 = vmulq_n_f32(v272, v275.f32[0]);
  v279.i32[3] = 0;
  float32x4_t v280 = vmulq_lane_f32(v273, *(float32x2_t *)v275.f32, 1);
  v280.i32[3] = 0;
  float32x4_t v281 = vmulq_laneq_f32(v278, v275, 2);
  v281.i32[3] = 0;
  float32x4_t v282 = vaddq_f32(v281, vaddq_f32(v279, v280));
  float32x4_t v283 = vmulq_n_f32(v272, v267.f32[0]);
  v283.i32[3] = 0;
  float32x4_t v284 = vmulq_lane_f32(v273, *(float32x2_t *)v267.f32, 1);
  v284.i32[3] = 0;
  float32x4_t v285 = vmulq_laneq_f32(v278, v267, 2);
  v285.i32[3] = 0;
  float32x4_t v286 = vaddq_f32(v283, v284);
  float32x4_t v287 = vmulq_n_f32(v272, v258.f32[0]);
  v287.i32[3] = 0;
  float32x4_t v288 = vmulq_lane_f32(v273, *(float32x2_t *)v258.f32, 1);
  v288.i32[3] = 0;
  float32x4_t v289 = vmulq_laneq_f32(v278, v258, 2);
  v289.i32[3] = 0;
  float32x4_t v290 = vaddq_f32(v289, vaddq_f32(v287, v288));
  int8x16_t v291 = (int8x16_t)vaddq_f32(v247, vaddq_f32(v285, v286));
  int8x16_t v292 = (int8x16_t)vaddq_f32(v254, v290);
  float32x2_t v293 = (float32x2_t)vextq_s8(v292, v292, 8uLL).u64[0];
  float32x2_t v294 = (float32x2_t)vextq_s8(v292, v292, 4uLL).u64[0];
  float32x2_t v295 = (float32x2_t)vextq_s8(v291, v291, 4uLL).u64[0];
  int8x8_t v296 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v291, v291, 8uLL), *(float32x2_t *)v292.i8), *(float32x2_t *)v291.i8, v293);
  int32x2_t v297 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v291.i8, v294), v295, *(float32x2_t *)v292.i8);
  *(int8x8_t *)v298.f32 = vext_s8((int8x8_t)v297, v296, 4uLL);
  v297.i32[1] = 0;
  v298.i64[1] = v297.u32[0];
  float32x4_t v299 = vaddq_f32(v253, v282);
  float32x4_t v300 = vmulq_f32(v299, v298);
  v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
  float32x2_t v301 = vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32);
  float32x2_t v302 = vrecpe_f32(v301);
  int v303 = 4;
  do
  {
    float32x2_t v302 = vmul_f32(v302, vrecps_f32(v301, v302));
    --v303;
  }
  while (v303);
  float32x2_t v304 = (float32x2_t)vextq_s8((int8x16_t)v299, (int8x16_t)v299, 4uLL).u64[0];
  int8x8_t v305 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v292.i8, v304), v294, *(float32x2_t *)v299.f32);
  *(int32x2_t *)v306.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(v293, *(float32x2_t *)v299.f32), *(float32x2_t *)v292.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL)), 0);
  *(int8x8_t *)&v306.u32[2] = v305;
  v262.i32[3] = 0;
  v257.i32[3] = 0;
  v256.i32[3] = 0;
  float32x2_t v307 = vmls_f32(vmul_f32(*(float32x2_t *)v299.f32, v295), v304, *(float32x2_t *)v291.i8);
  v306.i32[0] = v296.i32[0];
  *(int8x8_t *)v308.f32 = vext_s8((int8x8_t)vdup_lane_s32(v297, 0), v305, 4uLL);
  *(float32x2_t *)&v308.u32[2] = v307;
  float32x4_t v309 = vmulq_n_f32(v298, v302.f32[0]);
  float32x4_t v310 = vmulq_n_f32(v309, v272.f32[0]);
  float32x4_t v311 = vmulq_n_f32(v309, v273.f32[0]);
  float32x4_t v312 = vmulq_n_f32(v309, v278.f32[0]);
  v309.i32[3] = 0;
  float32x4_t v313 = vmulq_n_f32(v306, v302.f32[0]);
  float32x4_t v314 = vmulq_lane_f32(v313, *(float32x2_t *)v272.f32, 1);
  float32x4_t v315 = vmulq_lane_f32(v313, *(float32x2_t *)v273.f32, 1);
  float32x4_t v316 = vmulq_lane_f32(v313, *(float32x2_t *)v278.f32, 1);
  v313.i32[3] = 0;
  float32x4_t v317 = vmulq_n_f32(v308, v302.f32[0]);
  float32x4_t v318 = vmulq_laneq_f32(v317, v272, 2);
  float32x4_t v319 = vmulq_laneq_f32(v317, v273, 2);
  float32x4_t v320 = v317;
  v320.i32[3] = 0;
  int8x8_t v321 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v272, 2).u64[0];
  v310.i32[3] = 0;
  v314.i32[3] = 0;
  float32x4_t v322 = vmulq_laneq_f32(v317, v278, 2);
  v318.i32[3] = 0;
  float32x4_t v323 = vaddq_f32(v310, v314);
  v310.i64[0] = vdupq_lane_s32(*(int32x2_t *)v273.f32, 1).u64[0];
  float32x4_t v324 = vaddq_f32(v318, v323);
  v314.i64[0] = vextq_s8((int8x16_t)v273, (int8x16_t)v273, 8uLL).u64[0];
  v311.i32[3] = 0;
  v315.i32[3] = 0;
  v319.i32[3] = 0;
  float32x4_t v325 = vaddq_f32(v319, vaddq_f32(v311, v315));
  v312.i32[3] = 0;
  v316.i32[3] = 0;
  v322.i32[3] = 0;
  *(int8x8_t *)v326.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v272.f32, 0), *(int8x8_t *)v273.f32, 4uLL);
  v326.i64[1] = vdupq_lane_s32(*(int32x2_t *)v278.f32, 0).u32[0];
  float32x4_t v327 = vaddq_f32(v322, vaddq_f32(v312, v316));
  *(int8x8_t *)v328.f32 = vext_s8(*(int8x8_t *)v272.f32, *(int8x8_t *)v310.f32, 4uLL);
  v328.i64[1] = vdupq_lane_s32(*(int32x2_t *)v278.f32, 1).u32[0];
  *(int8x8_t *)v310.f32 = vext_s8(v321, *(int8x8_t *)v314.f32, 4uLL);
  v310.i64[1] = vdupq_laneq_s32((int32x4_t)v278, 2).u32[0];
  float32x4_t v329 = vmulq_n_f32(v326, v324.f32[0]);
  v329.i32[3] = 0;
  float32x4_t v330 = vmulq_lane_f32(v328, *(float32x2_t *)v324.f32, 1);
  v330.i32[3] = 0;
  float32x4_t v331 = vmulq_laneq_f32(v310, v324, 2);
  v331.i32[3] = 0;
  float32x4_t v332 = vaddq_f32(v331, vaddq_f32(v329, v330));
  float32x4_t v333 = vmulq_n_f32(v326, v325.f32[0]);
  v333.i32[3] = 0;
  float32x4_t v334 = vmulq_lane_f32(v328, *(float32x2_t *)v325.f32, 1);
  v334.i32[3] = 0;
  float32x4_t v335 = vmulq_laneq_f32(v310, v325, 2);
  v335.i32[3] = 0;
  float32x4_t v336 = vmulq_n_f32(v326, v327.f32[0]);
  v336.i32[3] = 0;
  float32x4_t v337 = vmulq_lane_f32(v328, *(float32x2_t *)v327.f32, 1);
  v337.i32[3] = 0;
  float32x4_t v338 = vmulq_laneq_f32(v310, v327, 2);
  v338.i32[3] = 0;
  float32x4_t result = vaddq_f32(v257, vaddq_f32(v335, vaddq_f32(v333, v334)));
  float32x4_t *v1 = v309;
  v1[1] = v313;
  v1[2] = v320;
  v1[3] = v324;
  v1[4] = v325;
  v1[5] = v327;
  v1[6] = vaddq_f32(v256, v332);
  v1[7] = result;
  v1[8] = vaddq_f32(v262, vaddq_f32(v338, vaddq_f32(v336, v337)));
  return result;
}

int8x8_t physx::Dy::ArticulationFnsSimdBase::computeSIS(float32x4_t *a1, float32x2_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = *(float32x4_t *)a2[2].f32;
  float32x4_t v5 = *(float32x4_t *)a2[4].f32;
  float32x4_t v4 = *(float32x4_t *)a2[6].f32;
  float32x4_t v7 = *(float32x4_t *)a2[8].f32;
  float32x4_t v6 = *(float32x4_t *)a2[10].f32;
  float32x4_t v8 = a1[1];
  float32x4_t v9 = vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32));
  v9.i32[3] = 0;
  float32x4_t v10 = vmulq_lane_f32(v8, *a2, 1);
  v10.i32[3] = 0;
  float32x4_t v12 = a1[2];
  float32x4_t v11 = a1[3];
  float32x4_t v13 = vmulq_laneq_f32(v12, *(float32x4_t *)a2->f32, 2);
  v13.i32[3] = 0;
  float32x4_t v14 = vaddq_f32(vaddq_f32(v9, v10), v13);
  float32x4_t v15 = vmulq_n_f32(v11, v3.f32[0]);
  v15.i32[3] = 0;
  float32x4_t v16 = a1[4];
  float32x4_t v17 = a1[5];
  float32x4_t v18 = vmulq_lane_f32(v16, *(float32x2_t *)v3.f32, 1);
  v18.i32[3] = 0;
  float32x4_t v19 = vmulq_laneq_f32(v17, v3, 2);
  v19.i32[3] = 0;
  float32x4_t v20 = vaddq_f32(vaddq_f32(v15, v18), v19);
  float32x4_t v21 = vmulq_f32(*(float32x4_t *)a2->f32, v11);
  v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
  float32x4_t v22 = vmulq_f32(*(float32x4_t *)a2->f32, v16);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  float32x4_t v23 = vmulq_f32(*(float32x4_t *)a2->f32, v17);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), 4uLL);
  v21.i64[1] = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).u32[0];
  float32x4_t v24 = a1[6];
  float32x4_t v25 = a1[7];
  float32x4_t v26 = vmulq_n_f32(v24, v3.f32[0]);
  v26.i32[3] = 0;
  float32x4_t v27 = vmulq_lane_f32(v25, *(float32x2_t *)v3.f32, 1);
  v27.i32[3] = 0;
  float32x4_t v28 = vaddq_f32(v14, v20);
  float32x4_t v29 = a1[8];
  float32x4_t v30 = vmulq_laneq_f32(v29, v3, 2);
  v30.i32[3] = 0;
  float32x4_t v31 = vaddq_f32(vaddq_f32(vaddq_f32(v26, v27), v30), v21);
  float32x4_t v32 = vmulq_n_f32(*a1, v5.f32[0]);
  v32.i32[3] = 0;
  float32x4_t v33 = vmulq_lane_f32(v8, *(float32x2_t *)v5.f32, 1);
  v33.i32[3] = 0;
  float32x4_t v34 = vmulq_laneq_f32(v12, v5, 2);
  v34.i32[3] = 0;
  float32x4_t v35 = vaddq_f32(v32, v33);
  float32x4_t v36 = vmulq_n_f32(v11, v4.f32[0]);
  v36.i32[3] = 0;
  float32x4_t v37 = vmulq_lane_f32(v16, *(float32x2_t *)v4.f32, 1);
  v37.i32[3] = 0;
  float32x4_t v38 = vaddq_f32(v35, v34);
  float32x4_t v39 = vmulq_laneq_f32(v17, v4, 2);
  v39.i32[3] = 0;
  float32x4_t v40 = vaddq_f32(v38, vaddq_f32(vaddq_f32(v36, v37), v39));
  float32x4_t v41 = vmulq_f32(v5, v11);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  float32x4_t v42 = vmulq_f32(v5, v16);
  v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
  float32x4_t v43 = vmulq_f32(v5, v17);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  *(int8x8_t *)v41.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32), 4uLL);
  v41.i64[1] = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32).u32[0];
  float32x4_t v44 = vmulq_n_f32(v24, v4.f32[0]);
  v44.i32[3] = 0;
  float32x4_t v45 = vmulq_lane_f32(v25, *(float32x2_t *)v4.f32, 1);
  v45.i32[3] = 0;
  float32x4_t v46 = vmulq_laneq_f32(v29, v4, 2);
  v46.i32[3] = 0;
  float32x4_t v47 = vaddq_f32(vaddq_f32(vaddq_f32(v44, v45), v46), v41);
  float32x4_t v48 = vmulq_n_f32(*a1, v7.f32[0]);
  v48.i32[3] = 0;
  float32x4_t v49 = vmulq_lane_f32(v8, *(float32x2_t *)v7.f32, 1);
  v49.i32[3] = 0;
  float32x4_t v50 = vmulq_laneq_f32(v12, v7, 2);
  v50.i32[3] = 0;
  float32x4_t v51 = vaddq_f32(vaddq_f32(v48, v49), v50);
  float32x4_t v52 = vmulq_n_f32(v11, v6.f32[0]);
  v52.i32[3] = 0;
  float32x4_t v53 = vmulq_lane_f32(v16, *(float32x2_t *)v6.f32, 1);
  v53.i32[3] = 0;
  float32x4_t v54 = vmulq_laneq_f32(v17, v6, 2);
  v54.i32[3] = 0;
  float32x4_t v55 = vaddq_f32(vaddq_f32(v52, v53), v54);
  float32x4_t v56 = vmulq_f32(v7, v11);
  v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
  float32x4_t v57 = vmulq_f32(v7, v16);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  float32x4_t v58 = vmulq_f32(v7, v17);
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  *(int8x8_t *)v57.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), 4uLL);
  v57.i64[1] = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).u32[0];
  float32x4_t v59 = vmulq_n_f32(v24, v6.f32[0]);
  v59.i32[3] = 0;
  float32x4_t v60 = vmulq_lane_f32(v25, *(float32x2_t *)v6.f32, 1);
  v60.i32[3] = 0;
  float32x4_t v61 = vmulq_laneq_f32(v29, v6, 2);
  v61.i32[3] = 0;
  float32x4_t v62 = vaddq_f32(v51, v55);
  float32x4_t v63 = vaddq_f32(vaddq_f32(vaddq_f32(v59, v60), v61), v57);
  float32x4_t v64 = vmulq_f32(*(float32x4_t *)a2->f32, v28);
  v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
  float32x4_t v65 = vmulq_f32(v3, v31);
  v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
  *(float32x2_t *)v64.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32), vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32));
  float32x4_t v66 = vmulq_f32(*(float32x4_t *)a2->f32, v40);
  v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
  float32x4_t v67 = vmulq_f32(v3, v47);
  v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
  *a3 = v28;
  a3[1] = v31;
  a3[2] = v40;
  a3[3] = v47;
  int8x8_t result = vext_s8(*(int8x8_t *)v64.f32, (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32)), 4uLL);
  a3[4] = v62;
  a3[5] = v63;
  return result;
}

void physx::Dy::Articulation::~Articulation(physx::Dy::Articulation *this)
{
  *(void *)this = &unk_26E723FE0;
  int v2 = *((_DWORD *)this + 69);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 33) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 65);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 31) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 29) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 57);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 27)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((void *)this + 25)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 49);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 23)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v11 = *((_DWORD *)this + 45);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((void *)this + 21)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Dy::ArticulationV::~ArticulationV(this);
}

{
  uint64_t vars8;

  physx::Dy::Articulation::~Articulation(this);
  JUMPOUT(0x237DBCBC0);
}

void physx::Dy::ArticulationV::~ArticulationV(physx::Dy::ArticulationV *this)
{
  *(void *)this = &unk_26E724170;
  int v1 = *((_DWORD *)this + 39);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0 && *((void *)this + 18) != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
}

BOOL physx::Dy::Articulation::resize(physx::Dy::Articulation *this, uint64_t a2)
{
  int v2 = *((unsigned __int8 *)this + 160);
  if (*((unsigned char *)this + 160))
  {
    int v5 = *((unsigned __int8 *)this + 140);
    if (v5 != a2)
    {
      uint64_t v13 = 0;
      unsigned int v12 = 0;
      (*(void (**)(physx::Dy::Articulation *, uint64_t, char *, uint64_t *, unsigned int *))(*(void *)this + 48))(this, a2, (char *)&v13 + 4, &v13, &v12);
      LOBYTE(v9) = 0;
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resize((uint64_t)this + 168, v13, &v9);
      long long v9 = xmmword_23435FD50;
      long long v10 = xmmword_23435FD60;
      long long v11 = xmmword_23435FD80;
      physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::resize((uint64_t)this + 200, a2, &v9);
      long long v9 = xmmword_23435FD50;
      long long v10 = xmmword_23435FD60;
      long long v11 = xmmword_23435FD80;
      physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::resize((uint64_t)this + 184, a2, &v9);
      long long v9 = xmmword_23435FBB0;
      *(void *)&long long v10 = 0;
      DWORD2(v10) = 0;
      physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::resize((uint64_t)this + 232, a2, (uint64_t)&v9);
      long long v9 = xmmword_23435FBB0;
      physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::resize((uint64_t)this + 248, a2, &v9);
      uint64_t v6 = *((void *)this + 23);
      *((void *)this + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = *((void *)this + 25);
      *((void *)this + internalABP::SplitBoxes::reset((void *)this + 13) = v6;
      LOBYTE(v9) = 0;
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resize((uint64_t)this + 216, v12, &v9);
      *((void *)this + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *((void *)this + 27);
      *((_WORD *)this + 71) = v12;
      *((_WORD *)this + 69) = WORD2(v13);
      *((_WORD *)this + 68) = v13;
      uint64_t v7 = *((void *)this + 31);
      *((void *)this + 10) = *((void *)this + 29);
      *((void *)this + 11) = v7;
      long long v9 = 0u;
      long long v10 = 0u;
      physx::shdfnd::Array<physx::Cm::SpatialVectorV,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>>::resize((uint64_t)this + 264, a2, &v9);
      *((void *)this + 8) = *((void *)this + 33);
      if (!*((unsigned char *)this + 160)) {
        return v2 != 0;
      }
      int v5 = *((unsigned __int8 *)this + 140);
    }
    if (v5 != a2)
    {
      *((void *)this + 9) = *((void *)this + 18);
      *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = this;
    }
    *((unsigned char *)this + 160) = 0;
  }
  return v2 != 0;
}

uint64_t physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resize(uint64_t result, unsigned int a2, unsigned char *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    int8x8_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    uint64_t v7 = (unsigned char *)(*(void *)v5 + v6);
    uint64_t v8 = a2 - v6;
    do
    {
      *v7++ = *a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::resize(uint64_t result, uint64_t a2, long long *a3)
{
  unsigned int v4 = a2;
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    int8x8_t result = physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::recreate(result, a2);
  }
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    unint64_t v7 = *(void *)v5 + 48 * v4;
    uint64_t v8 = (_OWORD *)(*(void *)v5 + 48 * v6);
    do
    {
      long long v9 = *a3;
      long long v10 = a3[2];
      v8[1] = a3[1];
      char v8[2] = v10;
      *uint64_t v8 = v9;
      v8 += 3;
    }
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    int8x8_t result = physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate(result, a2);
  }
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 28 * a2;
    unint64_t v8 = *(void *)v5 + 28 * v6;
    do
    {
      *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
      *(void *)(v8 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(void *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      v8 += 28;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    int8x8_t result = physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 16 * a2;
    unint64_t v8 = (_OWORD *)(*(void *)v5 + 16 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVectorV,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    int8x8_t result = physx::shdfnd::Array<physx::Cm::SpatialVectorV,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 32 * a2;
    unint64_t v8 = (_OWORD *)(*(void *)v5 + 32 * v6);
    do
    {
      *unint64_t v8 = *a3;
      v8[1] = a3[1];
      v8 += 2;
    }
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

BOOL physx::Dy::ArticulationV::resize(physx::Dy::ArticulationV *this, int a2)
{
  int v2 = *((unsigned __int8 *)this + 160);
  if (*((unsigned char *)this + 160))
  {
    if (*((unsigned __int8 *)this + 140) != a2)
    {
      *((void *)this + 9) = *((void *)this + 18);
      *((void *)this + re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = this;
    }
    *((unsigned char *)this + 160) = 0;
  }
  return v2 != 0;
}

void physx::Dy::PxvRegisterArticulations(physx::Dy *this)
{
  qword_2687A6250 = (uint64_t)physx::Dy::Articulation::computeUnconstrainedVelocities;
  qword_2687A6260 = (uint64_t)physx::Dy::Articulation::updateBodies;
  qword_2687A6270 = (uint64_t)physx::Dy::Articulation::updateBodies;
  qword_2687A6280 = (uint64_t)physx::Dy::Articulation::saveVelocity;
  qword_2687A6290 = (uint64_t)physx::Dy::Articulation::saveVelocityTGS;
  qword_2687A62A0 = (uint64_t)physx::Dy::Articulation::recordDeltaMotion;
  qword_2687A62B0 = (uint64_t)physx::Dy::Articulation::deltaMotionToMotionVelocity;
  qword_2687A62C0 = (uint64_t)physx::Dy::Articulation::computeUnconstrainedVelocitiesTGS;
  qword_2687A62D0 = (uint64_t)physx::Dy::Articulation::setupSolverConstraintsTGS;
  physx::Dy::SolverCoreRegisterArticulationFns(this);
  physx::Dy::SolverCoreRegisterArticulationFnsCoulomb(v1);
}

uint64_t physx::Dy::Articulation::computeUnconstrainedVelocities(uint64_t a1, uint64_t (***a2)(void), uint64_t a3, _DWORD *a4, float a5)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 92);
  uint64_t v10 = 9 * v9;
  uint64_t v11 = v8 + 144 * v9;
  physx::Dy::Articulation::computeUnconstrainedVelocitiesInternal(*(void *)a1);
  unsigned int v121 = 0;
  float32x4_t v109 = a4;
  *a4 = 0;
  uint64_t v12 = v6;
  uint64_t v106 = v7;
  float32x4_t v115 = *(unsigned __int16 **)(v7 + 168);
  unint64_t v13 = *v115;
  if (v13 >= 2)
  {
    unsigned int v121 = 0;
    float v14 = 1.0;
    uint64_t v15 = v8 + 16 * v10;
    unint64_t v16 = v15 + 168;
    unint64_t v17 = v15 + 251;
    uint64_t v18 = 1;
    float v19 = -0.5;
    float v112 = 1.0 / a5;
    uint64_t v113 = v12;
    unint64_t v114 = *v115;
    uint64_t v105 = v11;
    do
    {
      uint64_t v20 = *(void *)(v12 + 40 * v18 + 24);
      uint64_t v21 = v18 + 1;
      if (v18 + 1 < v13)
      {
        int v22 = ~(v17 >> 5) + (v16 >> 5);
        _X9 = *(void *)(v12 + 40 * v21 + 24);
        int v24 = ~((_X9 + 359) >> 5) + (_X9 >> 5);
        do
        {
          __asm { PRFM            #0, [X9] }
          _X9 += 32;
          _CF = __CFADD__(v24++, 1);
        }
        while (!_CF);
        _X9 = v11 + 84 * v21;
        do
        {
          __asm { PRFM            #0, [X9] }
          _X9 += 32;
          _CF = __CFADD__(v22++, 1);
        }
        while (!_CF);
      }
      if (*(unsigned char *)(v20 + 329) || *(unsigned char *)(v20 + 328))
      {
        float32x4_t v32 = (float *)(v11 + 84 * v18);
        float v33 = v32[14];
        float v34 = v32[17];
        if (v33 == 0.0)
        {
          float v38 = 1.0;
          float v36 = 0.0;
          float v37 = 0.0;
        }
        else
        {
          float v35 = sqrtf((float)((float)(v33 * v33) + 0.0) + (float)(v34 * v34));
          float v36 = v33 / v35;
          float v37 = 0.0 / v35;
          float v38 = v34 / v35;
        }
        float v39 = v32[15];
        float v40 = v32[16];
        v130[0] = (float)((float)((float)(v33 * v38) - (float)(v34 * v36)) - (float)(v39 * v37)) + (float)(v37 * v40);
        v130[1] = (float)((float)((float)(v38 * v39) - (float)(v34 * v37)) - (float)(v40 * v36)) + (float)(v37 * v33);
        v130[2] = (float)((float)((float)(v38 * v40) - (float)(v34 * v37)) - (float)(v33 * v37)) + (float)(v36 * v39);
        v130[3] = (float)((float)((float)(v33 * v36) + (float)(v34 * v38)) + (float)(v39 * v37)) + (float)(v40 * v37);
        int v41 = *(_DWORD *)(v20 + 344);
        uint64_t v128 = *(void *)(v20 + 336);
        int v129 = v41;
        float v124 = 0.0;
        if (*(unsigned char *)(v20 + 328) && physx::Cm::ConeLimitHelper::getLimit((float *)&v128, v130, &v125, &v124))
        {
          if (*(float *)(v20 + 320) <= 0.0)
          {
            BOOL v43 = *(float *)(v20 + 324) > 0.0;
            int v42 = 1;
          }
          else
          {
            int v42 = 1;
            BOOL v43 = 1;
          }
        }
        else
        {
          int v42 = 0;
          BOOL v43 = 0;
        }
        float32x4_t v44 = (float *)(v11 + 84 * v18);
        float v46 = v44[9];
        float v45 = v44[10];
        float v47 = v19 + (float)(v45 * v45);
        float v48 = v44[7];
        float v49 = v44[8];
        float v50 = (float)((float)(v49 * 0.0) + (float)(v48 * 2.0)) + (float)(v46 * 0.0);
        float v51 = (float)((float)(v45 * (float)((float)(v46 * -0.0) + (float)(v49 * 0.0))) + (float)(v47 * 2.0))
            + (float)(v48 * v50);
        float v52 = (float)((float)(v45 * (float)((float)(v48 * -0.0) + (float)(v46 * 2.0))) + (float)(v47 * 0.0))
            + (float)(v49 * v50);
        float v53 = (float)((float)(v45 * (float)((float)(v49 * -2.0) + (float)(v48 * 0.0))) + (float)(v47 * 0.0))
            + (float)(v46 * v50);
        v123[0] = v51;
        v123[1] = v52;
        v123[2] = v53;
        if (v38 == -1.0)
        {
          if (v36 >= 0.0) {
            float v54 = 1.8447e19;
          }
          else {
            float v54 = -1.8447e19;
          }
        }
        else
        {
          float v54 = v36 / (float)(v38 + v14);
        }
        if (*(unsigned char *)(v20 + 329))
        {
          float v55 = *(float *)(v20 + 356);
          BOOL v56 = v54 < (float)((float)(*(float *)(v20 + 352) + v55) / (float)(v14 - (float)(*(float *)(v20 + 352) * v55)));
          BOOL v57 = v54 > (float)((float)(*(float *)(v20 + 348) - v55) / (float)(v14 + (float)(*(float *)(v20 + 348) * v55)));
        }
        else
        {
          BOOL v56 = 0;
          BOOL v57 = 0;
        }
        int v58 = v43 + v42 + v56 + v57;
        if (v58)
        {
          BOOL v110 = v43;
          BOOL v119 = v57;
          BOOL v117 = v56;
          uint64_t v59 = a3 + 48 * v121;
          *(void *)uint64_t v59 = v106;
          uint64_t v60 = v12 + 40 * v18;
          int v62 = *(_DWORD *)(v60 + 32);
          float32x4_t v61 = (unsigned int *)(v60 + 32);
          *(_WORD *)(v59 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v62;
          *(void *)(v59 + 8) = v106;
          *(_WORD *)(v59 + re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = v18;
          *(_WORD *)(v59 + 30) = (160 * v58 + 48) >> 4;
          float32x4_t v116 = (unsigned __int16 *)(v59 + 30);
          uint64_t v63 = (**a2)();
          unsigned int v65 = 0;
          *(void *)(v59 + 32) = v63;
          *(void *)(v59 + 40) = 0;
          float32x4_t v66 = (void *)(v59 + 32);
          float32x4_t v67 = (float32x4_t *)(v63 + 48);
          *(unsigned char *)uint64_t v63 = 4;
          int v120 = v58;
          *(unsigned char *)(v63 + 1) = v58;
          *(unsigned char *)(v63 + 2) = 0;
          *(_OWORD *)(v63 + 32) = xmmword_23441FE50;
          if (v42)
          {
            float32x4_t v68 = (float32x4_t *)v63;
            v64.f32[0] = v127 + v127;
            float v70 = v32[2];
            float v69 = v32[3];
            float v71 = v19 + (float)(v69 * v69);
            float v72 = v32[1];
            float v73 = (float)((float)((float)(v126 + v126) * v72) + (float)(*v32 * (float)(v125 + v125)))
                + (float)(v70 * (float)(v127 + v127));
            float v74 = (float)((float)(v69
                                * (float)((float)(v72 * (float)(v127 + v127)) - (float)(v70 * (float)(v126 + v126))))
                        + (float)((float)(v125 + v125) * v71))
                + (float)(*v32 * v73);
            float v75 = (float)((float)(v69
                                * (float)((float)(v70 * (float)(v125 + v125)) - (float)(*v32 * (float)(v127 + v127))))
                        + (float)((float)(v126 + v126) * v71))
                + (float)(v72 * v73);
            float v76 = (float)((float)(v69
                                * (float)((float)(*v32 * (float)(v126 + v126)) - (float)(v72 * (float)(v125 + v125))))
                        + (float)((float)(v127 + v127) * v71))
                + (float)(v70 * v73);
            v122[0] = v74;
            v122[1] = v75;
            v122[2] = v76;
            float32x4_t v77 = (float32x4_t *)(v63 + 48);
            physx::Dy::ArticulationHelper::createHardLimit((uint64_t)v115, v113, v18, v67, (uint64_t)v122, v124, v112, v64);
            if (v110)
            {
              float v78 = (float)(v52 * v76) - (float)(v53 * v75);
              float v79 = (float)(v53 * v74) - (float)(v51 * v76);
              float v80 = (float)(v51 * v75) - (float)(v52 * v74);
              float v81 = (float)((float)(v79 * v79) + (float)(v78 * v78)) + (float)(v80 * v80);
              float v82 = 0.0;
              float v83 = 0.0;
              float v84 = 0.0;
              if (v81 > 0.0)
              {
                float v85 = 1.0 / sqrtf(v81);
                float v82 = v78 * v85;
                float v83 = v79 * v85;
                float v84 = v80 * v85;
              }
              float v103 = v83;
              float v104 = v82;
              float v111 = v84;
              float v86 = *(float *)(v20 + 320);
              float v87 = *(float *)(v20 + 324);
              v68[13].i64[0] = 0;
              v68[13].i32[2] = 0;
              v68[14].i64[0] = 0;
              v68[14].i32[2] = 0;
              v68[15].f32[0] = v82;
              v68[15].f32[1] = v83;
              v68[15].f32[2] = v84;
              v68[16].f32[0] = v82;
              v68[16].f32[1] = v83;
              v68[16].f32[2] = v84;
              v68[18].i64[0] = 0x7F7FFFFFFF7FFFFFLL;
              v68[18].i64[1] = 0;
              unsigned int v88 = *v61;
              v132[0] = 0uLL;
              v89.i64[0] = __PAIR64__(LODWORD(v83), LODWORD(v82));
              v89.i64[1] = LODWORD(v84);
              v132[1] = v89;
              v90.i32[3] = 0;
              v90.f32[0] = -v82;
              v90.f32[1] = -v83;
              v90.f32[2] = -v84;
              v131[0] = (float32x4_t)xmmword_23441FE60;
              v131[1] = v90;
              physx::Dy::ArticulationHelper::getImpulseSelfResponse((uint64_t)v115, v88, v132, v68 + 19, v18, v131, v68 + 21);
              float v94 = (float)((float)((float)(v103 * v68[20].f32[1]) + (float)(v104 * v68[20].f32[0]))
                          + (float)(v111 * v68[20].f32[2]))
                  - (float)((float)((float)(v103 * v68[22].f32[1]) + (float)(v104 * v68[22].f32[0]))
                          + (float)(v111 * v68[22].f32[2]));
              if (v94 < 0.0) {
                physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyArticulationHelper.cpp", 372, "Warning: articulation ill-conditioned or under severe stress, tangential spring ignored", v91, v92, v93, v101);
              }
              float v95 = 1.0 / v94;
              if (v94 <= 0.0) {
                float v95 = 0.0;
              }
              float v96 = v87 * a5;
              float v14 = 1.0;
              float v97 = v96 + (float)((float)(a5 * a5) * v86);
              v64.f32[0] = 1.0 / (float)(v97 + 1.0);
              v68[14].i32[3] = 0;
              v68[13].i32[3] = 0;
              v68[15].f32[3] = v97 * (float)-(float)(v64.f32[0] * v95);
              v68[16].f32[3] = 1.0 - v64.f32[0];
              unsigned int v65 = 2;
            }
            else
            {
              unsigned int v65 = 1;
              float v14 = 1.0;
            }
            float v19 = -0.5;
            float32x4_t v67 = v77;
          }
          unint64_t v118 = v16;
          if (v119)
          {
            unsigned int v98 = v65 + 1;
            float32x4_t v99 = v67;
            uint64_t v12 = v113;
            physx::Dy::ArticulationHelper::createHardLimit((uint64_t)v115, v113, v18, &v67[10 * v65], (uint64_t)v123, (float)(*(float *)(v20 + 348) - v54) * 4.0, v112, v64);
            unsigned int v65 = v98;
          }
          else
          {
            float32x4_t v99 = v67;
            uint64_t v12 = v113;
          }
          unint64_t v13 = v114;
          uint64_t v21 = v18 + 1;
          if (v117)
          {
            v64.f32[0] = -v53;
            v132[0].f32[0] = -v51;
            v132[0].f32[1] = -v52;
            v132[0].f32[2] = -v53;
            physx::Dy::ArticulationHelper::createHardLimit((uint64_t)v115, v12, v18, &v99[10 * v65], (uint64_t)v132, (float)(*(float *)(v20 + 352) - v54) * -4.0, v112, v64);
          }
          ++v121;
          *(unsigned char *)(*v66 + 16 * *v11re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
          *v109 += v120;
          uint64_t v11 = v105;
          unint64_t v16 = v118;
        }
        else
        {
          unint64_t v13 = v114;
          uint64_t v21 = v18 + 1;
        }
      }
      v16 += 84;
      v17 += 84;
      uint64_t v18 = v21;
    }
    while (v21 != v13);
  }
  return v121;
}

void physx::Dy::Articulation::updateBodies(uint64_t a1, float a2)
{
  v157[126] = *MEMORY[0x263EF8340];
  float32x4_t v3 = *(unsigned __int16 **)(*(void *)a1 + 168);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(float32x2_t **)(a1 + 32);
  uint64_t v150 = *(void *)(a1 + 8);
  float32x2_t v151 = *(float32x4_t **)(a1 + 16);
  uint64_t v6 = *v3;
  physx::Dy::PxcFsFlushVelocity((float32x4_t *)v3);
  physx::Dy::PxcLtbComputeJv((uint64_t)&v156, v3, (int8x16_t *)v3 + 8);
  physx::Dy::PxcLtbProject(v3, (float32x4_t *)v3 + 8, &v156);
  float v7 = a2;
  uint64_t v153 = *(void *)(a1 + 80);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 92);
  if (v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v151[1].f32[2];
    do
    {
      uint64_t v11 = (float32x2_t *)((char *)v5 + v9 * 4);
      uint64_t v12 = v153 + v9 * 4;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)&v5->f32[v9];
      *(float32x2_t *)(v12 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *(float32x2_t *)((char *)v5 + v9 * 4 + 16);
      *(_DWORD *)(v12 + 24) = v5[3].i32[v9];
      float v13 = *(v10 - 4);
      float32x2_t v14 = *(float32x2_t *)(v10 - 6);
      float32x2_t v15 = *(float32x2_t *)((char *)v5 + v9 * 4 + 16);
      float v16 = v5[3].f32[v9];
      float v17 = *(v10 - 2) * v7;
      float v18 = *(v10 - 1) * v7;
      float v19 = *v10 * v7;
      float v20 = (float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19);
      float v21 = 0.0;
      float v22 = 0.0;
      float v23 = 0.0;
      float cosval = 1.0;
      if (v20 >= 1.0e-24)
      {
        float v25 = sqrtf(v20);
        float v26 = v17 * (float)(1.0 / v25);
        float v27 = v18 * (float)(1.0 / v25);
        float v28 = v19 * (float)(1.0 / v25);
        __float2 v29 = __sincosf_stret(v25 * 0.5);
        float cosval = v29.__cosval;
        float v7 = a2;
        float v21 = v29.__sinval * v26;
        float v22 = v29.__sinval * v27;
        float v23 = v29.__sinval * v28;
      }
      float v31 = v11[1].f32[0];
      float v30 = v11[1].f32[1];
      float v32 = v11->f32[1];
      float32_t v33 = (float)((float)((float)(v21 * v30) + (float)(cosval * v11->f32[0])) + (float)(v22 * v31))
          - (float)(v32 * v23);
      float32_t v34 = (float)((float)((float)(v22 * v30) + (float)(cosval * v32)) + (float)(v23 * v11->f32[0]))
          - (float)(v31 * v21);
      float32_t v35 = (float)((float)((float)(v23 * v30) + (float)(cosval * v31)) + (float)(v21 * v32))
          - (float)(v11->f32[0] * v22);
      float v36 = -(float)(v21 * v11->f32[0]);
      v11->f32[0] = v33;
      v11->f32[1] = v34;
      v11[1].f32[0] = v35;
      v11[1].f32[1] = (float)((float)(v36 + (float)(cosval * v30)) - (float)(v22 * v32)) - (float)(v23 * v31);
      _DWORD v11[2] = vadd_f32(vmul_n_f32(v14, v7), v15);
      v11[3].f32[0] = (float)(v13 * v7) + v16;
      v9 += 7;
      v10 += 8;
    }
    while (7 * v6 != v9);
  }
  if (*(_DWORD *)(v4 + 8))
  {
    int v37 = 0;
    char v38 = 0;
    float v39 = (void *)(v153 + 32 * v8);
    uint64_t v148 = v153 + 176 * v8;
    int8x8_t v147 = v3 + 392;
    float v154 = 1.0 / v7;
    uint64_t v149 = v4;
    while (1)
    {
      float v40 = -3.4028e38;
      if (v6 >= 2)
      {
        int v41 = (float *)&v5[6] + 1;
        int v42 = (_DWORD *)(v150 + 72);
        uint64_t v43 = v6 - 1;
        do
        {
          float32x4_t v44 = (float *)*((void *)v42 - 1);
          unsigned int v45 = *v42;
          v42 += 10;
          float v46 = (float *)v5 + 7 * v45;
          float v47 = v44[4] + v44[4];
          float v48 = v44[5] + v44[5];
          float v49 = v44[6] + v44[6];
          float v51 = v46[2];
          float v50 = v46[3];
          float v52 = v46[1];
          float v53 = (float)(v50 * v50) + -0.5;
          float v54 = (float)((float)(v48 * v52) + (float)(*v46 * v47)) + (float)(v51 * v49);
          float v55 = (float)(v50 * (float)((float)(v52 * v49) - (float)(v51 * v48))) + (float)(v47 * v53);
          float v56 = (float)(v50 * (float)((float)(v51 * v47) - (float)(*v46 * v49))) + (float)(v48 * v53);
          float v57 = (float)(v50 * (float)((float)(*v46 * v48) - (float)(v52 * v47))) + (float)(v49 * v53);
          float v58 = v44[11] + v44[11];
          float v59 = v44[12] + v44[12];
          float v60 = v55 + (float)(*v46 * v54);
          float v61 = v44[13] + v44[13];
          float v63 = *(v41 - 4);
          float v62 = *(v41 - 3);
          float v64 = (float)(v62 * v62) + -0.5;
          float v65 = v56 + (float)(v52 * v54);
          float v67 = *(v41 - 6);
          float v66 = *(v41 - 5);
          float v68 = (float)((float)(v59 * v66) + (float)(v67 * v58)) + (float)(v63 * v61);
          float v69 = v57 + (float)(v51 * v54);
          float v70 = v46[4] + v60;
          float v71 = *(v41 - 2)
              + (float)((float)((float)(v62 * (float)((float)(v66 * v61) - (float)(v63 * v59))) + (float)(v58 * v64))
                      + (float)(v67 * v68));
          float v72 = *(v41 - 1)
              + (float)((float)((float)(v62 * (float)((float)(v63 * v58) - (float)(v67 * v61))) + (float)(v59 * v64))
                      + (float)(v66 * v68));
          float v73 = *v41;
          v41 += 7;
          float v74 = (float)(v46[6] + v69)
              - (float)(v73
                      + (float)((float)((float)(v62 * (float)((float)(v67 * v59) - (float)(v66 * v58)))
                                      + (float)(v61 * v64))
                              + (float)(v63 * v68)));
          float v75 = sqrtf((float)((float)((float)((float)(v46[5] + v65) - v72) * (float)((float)(v46[5] + v65) - v72))+ (float)((float)(v70 - v71) * (float)(v70 - v71)))+ (float)(v74 * v74));
          if (v40 <= v75) {
            float v40 = v75;
          }
          --v43;
        }
        while (v43);
      }
      if (v40 <= *(float *)(v4 + 16)) {
        break;
      }
      int v152 = v37;
      float v76 = v3;
      bzero(v39, 144 * v6);
      float32x4_t v77 = v39;
      physx::Dy::Articulation::setInertia((uint64_t)v39, *(float32x2_t **)(v150 + 16), v5);
      float v78 = (float32x2_t *)((char *)v5 + 28);
      float v79 = (float *)(v148 + 84);
      float v80 = (unsigned int *)(v150 + 72);
      uint64_t v81 = 32 * v8 + v153 + 144;
      uint64_t v82 = v6 - 1;
      if (v6 >= 2)
      {
        do
        {
          physx::Dy::Articulation::setInertia(v81, *((float32x2_t **)v80 - 2), v78);
          physx::Dy::Articulation::setJointTransforms(v79, (float *)v5 + 7 * *v80, (float *)v78, *((float **)v80 - 1));
          v81 += 144;
          v80 += 10;
          v79 += 21;
          float v78 = (float32x2_t *)((char *)v78 + 28);
          --v82;
        }
        while (v82);
      }
      float32x4_t v3 = v76;
      float v39 = v77;
      physx::Dy::Articulation::prepareLtbMatrix(v76, v77, (uint64_t)v5, v148, v154);
      physx::Dy::PxcLtbFactor(v76);
      if (v6 >= 2)
      {
        float v83 = (_OWORD *)((char *)v147 + v76[8]);
        float v84 = v157;
        uint64_t v85 = v6 - 1;
        do
        {
          *v84++ = *v83;
          v83 += 25;
          --v85;
        }
        while (v85);
      }
      bzero(v151, 32 * v6);
      physx::Dy::PxcLtbProject(v76, v151, &v156);
      float v86 = (char *)&v5[1] + 4;
      float v87 = &v151[1].f32[2];
      uint64_t v88 = v6;
      float v89 = a2;
      if (v6)
      {
        do
        {
          float v90 = *(v87 - 4);
          float32x2_t v91 = *(float32x2_t *)(v87 - 6);
          float32x2_t v92 = *(float32x2_t *)(v86 + 4);
          float v93 = *((float *)v86 + 3);
          float v94 = *(v87 - 2) * v89;
          float v95 = *(v87 - 1) * v89;
          float v96 = *v87 * v89;
          float v97 = (float)((float)(v95 * v95) + (float)(v94 * v94)) + (float)(v96 * v96);
          if (v97 >= 1.0e-24)
          {
            float v102 = sqrtf(v97);
            float v103 = v94 * (float)(1.0 / v102);
            float v104 = v95 * (float)(1.0 / v102);
            float v105 = v96 * (float)(1.0 / v102);
            __float2 v106 = __sincosf_stret(v102 * 0.5);
            float v98 = v106.__cosval;
            float v89 = a2;
            float v99 = v106.__sinval * v103;
            float v100 = v106.__sinval * v104;
            float v101 = v106.__sinval * v105;
          }
          else
          {
            float v98 = 1.0;
            float v99 = 0.0;
            float v100 = 0.0;
            float v101 = 0.0;
          }
          float v107 = *((float *)v86 - 1);
          float v108 = *((float *)v86 - 3);
          float v109 = *((float *)v86 - 2);
          float v110 = (float)(v99 * *(float *)v86) + (float)(v98 * v108);
          float v111 = (float)((float)((float)(v100 * *(float *)v86) + (float)(v98 * v109)) + (float)(v101 * v108))
               - (float)(v107 * v99);
          float v112 = (float)((float)((float)(v101 * *(float *)v86) + (float)(v98 * v107)) + (float)(v99 * v109))
               - (float)(v108 * v100);
          float v113 = (float)((float)(v98 * *(float *)v86) - (float)(v99 * v108)) - (float)(v100 * v109);
          *((float *)v86 - 3) = (float)(v110 + (float)(v100 * v107)) - (float)(v109 * v101);
          *((float *)v86 - 2) = v111;
          *((float *)v86 - 1) = v112;
          *(float *)float v86 = v113 - (float)(v101 * v107);
          *(float32x2_t *)(v86 + 4) = vadd_f32(vmul_n_f32(v91, v89), v92);
          *((float *)v86 + 3) = (float)(v90 * v89) + v93;
          v87 += 8;
          v86 += 28;
          --v88;
        }
        while (v88);
        int v37 = v152 + 1;
        uint64_t v4 = v149;
        char v38 = 1;
        if ((v152 + 1) >= *(_DWORD *)(v149 + 8)) {
          goto LABEL_29;
        }
      }
      else
      {
        int v37 = v152 + 1;
        uint64_t v4 = v149;
        char v38 = 1;
        if ((v152 + 1) >= *(_DWORD *)(v149 + 8)) {
          return;
        }
      }
    }
    if ((v38 & (v6 != 0)) == 0) {
      goto LABEL_41;
    }
LABEL_29:
    if (v6 <= 1) {
      uint64_t v114 = 1;
    }
    else {
      uint64_t v114 = v6;
    }
    float32x4_t v115 = (char *)&v5[1] + 4;
    f32 = (_OWORD *)v151[1].f32;
    uint64_t v117 = v153 + 12;
    do
    {
      *(float32x2_t *)&long long v118 = vmul_n_f32(vsub_f32(*(float32x2_t *)(v115 + 4), *(float32x2_t *)(v117 + 4)), v154);
      *((float *)&v118 + 2) = v154 * (float)(*((float *)v115 + 3) - *(float *)(v117 + 12));
      HIDWORD(v1re::HashTable<float,re::VideoColorManager::TableEntry,re::Hash<float>,re::EqualTo<float>,true,false>::deinit((uint64_t *)this + 18) = 0;
      *(f32 - 1) = v118;
      float v120 = *(float *)(v117 - 12);
      float v119 = *(float *)(v117 - 8);
      float v121 = *(float *)(v117 - 4);
      float v122 = *((float *)v115 - 3);
      float v123 = *((float *)v115 - 2);
      float v124 = *((float *)v115 - 1);
      float v125 = (float)((float)((float)(*(float *)v117 * v122) - (float)(*(float *)v115 * v120)) - (float)(v123 * v121))
           + (float)(v119 * v124);
      float v126 = (float)((float)((float)(*(float *)v117 * v123) - (float)(*(float *)v115 * v119)) - (float)(v124 * v120))
           + (float)(v121 * v122);
      float v127 = (float)((float)((float)(*(float *)v117 * v124) - (float)(*(float *)v115 * v121)) - (float)(v122 * v119))
           + (float)(v120 * v123);
      float v128 = (float)((float)(v126 * v126) + (float)(v125 * v125)) + (float)(v127 * v127);
      float v129 = sqrtf(v128);
      float v130 = 0.0;
      float v131 = 0.0;
      float v132 = 0.0;
      if (v129 >= 1.0e-12)
      {
        float v133 = (float)((float)((float)(v120 * v122) + (float)(*(float *)v115 * *(float *)v117)) + (float)(v123 * v119))
             + (float)(v124 * v121);
        if (v133 >= 0.0)
        {
          float v134 = v129;
        }
        else
        {
          float v134 = -v129;
          float v133 = -v133;
        }
        float v135 = atan2f(v134, v133);
        float v136 = 0.0;
        float v137 = 0.0;
        float v138 = 0.0;
        if (v128 > 0.0)
        {
          float v136 = (float)(v125 * (float)(1.0 / v129)) + (float)(v125 * (float)(1.0 / v129));
          float v137 = (float)(v126 * (float)(1.0 / v129)) + (float)(v126 * (float)(1.0 / v129));
          float v138 = (float)(v127 * (float)(1.0 / v129)) + (float)(v127 * (float)(1.0 / v129));
        }
        float v130 = v135 * v136;
        float v131 = v135 * v137;
        float v132 = v135 * v138;
      }
      HIDWORD(v139) = 0;
      *(float *)&long long v139 = v154 * v130;
      *((float *)&v139 + 1) = v154 * v131;
      *((float *)&v139 + 2) = v154 * v132;
      _OWORD *f32 = v139;
      f32 += 2;
      v115 += 28;
      v117 += 28;
      --v114;
    }
    while (v114);
  }
LABEL_41:
  if (v6)
  {
    int8x16_t v140 = v3 + 76;
    float32x4_t v141 = v5 + 3;
    float32x4_t v142 = (uint64_t *)(v150 + 16);
    do
    {
      uint64_t v144 = *v142;
      v142 += 5;
      uint64_t v143 = v144;
      *(_OWORD *)uint64_t v144 = *(_OWORD *)v141[-3].f32;
      *(float32x2_t *)(v144 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v141[-1];
      LODWORD(v144) = v141->i32[0];
      float32x4_t v141 = (float32x2_t *)((char *)v141 + 28);
      *(_DWORD *)(v143 + 24) = v144;
      int v145 = *(v140 - 4);
      *(void *)(v143 + 64) = *((void *)v140 - 3);
      *(_DWORD *)(v143 + 72) = v145;
      int v146 = *v140;
      *(void *)(v143 + 80) = *((void *)v140 - 1);
      *(_DWORD *)(v143 + 88) = v146;
      v140 += 8;
      --v6;
    }
    while (v6);
  }
}

double physx::Dy::Articulation::saveVelocity(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v2 = *(unsigned __int16 **)(*a1 + 168);
  physx::Dy::PxcFsFlushVelocity((float32x4_t *)v2);
  if (*v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (_OWORD *)(a1[2] + v3 * 2);
      *uint64_t v5 = *(_OWORD *)&v2[v3 + 64];
      v5[1] = *(_OWORD *)&v2[v3 + 72];
      ++v4;
      v3 += 16;
    }
    while (v4 < *v2);
  }
  physx::Dy::PxcLtbComputeJv((uint64_t)v7, v2, (int8x16_t *)v2 + 8);
  *(void *)&double result = physx::Dy::PxcLtbProject(v2, (float32x4_t *)v2 + 8, v7).u64[0];
  return result;
}

double physx::Dy::Articulation::saveVelocityTGS(void *a1, float a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned __int16 **)(*a1 + 168);
  physx::Dy::PxcFsFlushVelocity((float32x4_t *)v3);
  if (*v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = &v3[32 * (unint64_t)*v3];
    do
    {
      float32x4_t v7 = vmulq_n_f32(*(float32x4_t *)&v6[v4 + 64], a2);
      v7.i32[3] = 0;
      float32x4_t v8 = vmulq_n_f32(*(float32x4_t *)&v6[v4 + 72], a2);
      v8.i32[3] = 0;
      uint64_t v9 = (float32x4_t *)(a1[2] + v4 * 2);
      float32x4_t *v9 = v7;
      v9[1] = v8;
      ++v5;
      v4 += 16;
    }
    while (v5 < *v3);
  }
  physx::Dy::PxcLtbComputeJv((uint64_t)v12, v3, (int8x16_t *)v3 + 8);
  *(void *)&double result = physx::Dy::PxcLtbProject(v3, (float32x4_t *)v3 + 8, v12).u64[0];
  return result;
}

void physx::Dy::Articulation::recordDeltaMotion(void *a1, float a2)
{
  int v2 = *(float32x4_t **)(*a1 + 168);
  uint64_t v3 = a1[5];
  uint64_t v4 = v2->u16[0];
  physx::Dy::PxcFsFlushVelocity(v2);
  unsigned int v7 = v2->u16[0];
  unint64_t v5 = v2 + 8;
  uint64_t v6 = v7;
  if (v7)
  {
    float32x4_t v8 = (float *)(v3 + 8);
    uint64_t v9 = v4 << 6;
    do
    {
      float32x4_t v10 = vmulq_n_f32(*v5, a2);
      v10.i32[3] = 0;
      float32x4_t v11 = vmulq_n_f32(v5[1], a2);
      v11.i32[3] = 0;
      uint64_t v12 = (float32x4_t *)((char *)v5 + v9);
      float32x4_t v13 = vaddq_f32(v11, *(float32x4_t *)((char *)v5 + v9 + 16));
      float32x4_t *v12 = vaddq_f32(*(float32x4_t *)((char *)v5 + v9), v10);
      v12[1] = v13;
      float v14 = v5[1].f32[0] * a2;
      float v15 = v5[1].f32[1] * a2;
      float v16 = v5[1].f32[2] * a2;
      float v17 = (float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16);
      float v18 = 0.0;
      float v19 = 0.0;
      float v20 = 0.0;
      float cosval = 1.0;
      if (v17 >= 1.0e-24)
      {
        float v22 = sqrtf(v17);
        float v23 = v14 * (float)(1.0 / v22);
        float v24 = v15 * (float)(1.0 / v22);
        float v25 = v16 * (float)(1.0 / v22);
        __float2 v26 = __sincosf_stret(v22 * 0.5);
        float cosval = v26.__cosval;
        float v18 = v26.__sinval * v23;
        float v19 = v26.__sinval * v24;
        float v20 = v26.__sinval * v25;
      }
      float v28 = *v8;
      float v27 = v8[1];
      float v29 = *(v8 - 2);
      float v30 = *(v8 - 1);
      float v31 = (float)((float)((float)(v19 * v27) + (float)(cosval * v30)) + (float)(v20 * v29)) - (float)(*v8 * v18);
      float v32 = (float)((float)((float)(v20 * v27) + (float)(cosval * *v8)) + (float)(v18 * v30)) - (float)(v29 * v19);
      *(v8 - 2) = (float)((float)((float)(v18 * v27) + (float)(cosval * v29)) + (float)(v19 * *v8)) - (float)(v30 * v20);
      *(v8 - 1) = v31;
      *float32x4_t v8 = v32;
      v8[1] = (float)((float)((float)(cosval * v27) - (float)(v18 * v29)) - (float)(v19 * v30)) - (float)(v20 * v28);
      v8 += 4;
      v5 += 2;
      --v6;
    }
    while (v6);
  }
}

void *physx::Dy::Articulation::deltaMotionToMotionVelocity(void *result, float a2)
{
  int v2 = *(_WORD **)(*result + 168);
  if (*v2)
  {
    unint64_t v3 = 0;
    unint64_t v4 = (unint64_t)(unsigned __int16)*v2 << 6;
    uint64_t v5 = 64;
    do
    {
      float32x4_t v6 = vmulq_n_f32(*(float32x4_t *)((char *)v2 + v4 + 128), a2);
      v6.i32[3] = 0;
      float32x4_t v7 = vmulq_n_f32(*(float32x4_t *)((char *)v2 + v4 + 144), a2);
      v7.i32[3] = 0;
      uint64_t v8 = result[2] + v5 * 2;
      *(float32x4_t *)(v8 - 128) = v6;
      *(float32x4_t *)(v8 - 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v7;
      uint64_t v9 = (float32x4_t *)&v2[v5];
      float32x4_t *v9 = v6;
      v9[1] = *(float32x4_t *)(v8 - 112);
      ++v3;
      v5 += 16;
      v4 += 32;
    }
    while (v3 < (unsigned __int16)*v2);
  }
  return result;
}

void *physx::Dy::Articulation::computeUnconstrainedVelocitiesTGS(uint64_t *a1)
{
  return physx::Dy::Articulation::computeUnconstrainedVelocitiesInternal(*a1);
}

void physx::Dy::Articulation::getDataSizes(physx::Dy::Articulation *this, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  int v5 = 304 * a2 + 4 * ((a2 + 15) & 0x3FFFFFF0) + 272;
  *a3 = v5;
  *a4 = v5 + 528 * a2;
  *a5 = 672 * a2;
}

uint64_t physx::Dy::Articulation::getImpulseResponse(uint64_t a1, unsigned int a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5)
{
  return physx::Dy::ArticulationHelper::getImpulseResponse(*(void *)(a1 + 168), a2, a4, a5);
}

{
  return physx::Dy::ArticulationHelper::getImpulseResponse(*(void *)(a1 + 168), a2, a4, a5);
}

uint64_t physx::Dy::ArticulationHelper::getImpulseResponse(uint64_t result, unsigned int a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t v4 = (float32x4_t *)(result + *(unsigned __int16 *)(result + 18));
  int v5 = v4 + 9;
  uint64_t v6 = result + *(unsigned __int16 *)(result + 2);
  float32x4_t v7 = vnegq_f32(*a3);
  v7.i32[3] = 0;
  float32x4_t v8 = vnegq_f32(a3[1]);
  v8.i32[3] = 0;
  if (a2)
  {
    int v9 = 0;
    float32x4_t v10 = v7;
    do
    {
      float32x4_t v11 = &v5[10 * a2];
      uint64_t v12 = (_OWORD *)(v6 + 32 * a2);
      int8x16_t v14 = *(int8x16_t *)v12;
      float32x4_t v13 = *((float32x4_t *)v12 + 1);
      float32x2_t v15 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      int8x8_t v16 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v10.f32, (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v15, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL), *(float32x2_t *)v13.f32);
      *(int8x8_t *)v13.f32 = vext_s8(v16, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), *(float32x2_t *)v13.f32), *(float32x2_t *)v10.f32, v15), 4uLL);
      v13.i64[1] = v16.u32[0];
      float32x4_t v17 = vaddq_f32(v8, v13);
      *(float32x4_t *)&v68[4 * v9 + 64] = v17;
      float32x4_t v18 = vmlsq_laneq_f32(v10, v11[4], v17, 2);
      v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
      float32x4_t v19 = vmlsq_lane_f32(v18, v11[2], *(float32x2_t *)v17.f32, 1);
      v19.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
      int8x16_t v20 = (int8x16_t)vmlsq_lane_f32(v19, *v11, *(float32x2_t *)v17.f32, 0);
      v7.i64[0] = v20.i64[0];
      v7.i64[1] = vextq_s8(v20, v20, 8uLL).u32[0];
      float32x4_t v21 = vmlsq_laneq_f32(v8, v11[5], v17, 2);
      v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
      float32x4_t v22 = vmlsq_lane_f32(v21, v11[3], *(float32x2_t *)v17.f32, 1);
      v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
      int8x16_t v23 = (int8x16_t)vmlsq_lane_f32(v22, v11[1], *(float32x2_t *)v17.f32, 0);
      v17.i32[0] = vextq_s8(v23, v23, 8uLL).u32[0];
      float32x2_t v24 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
      int8x8_t v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v14.i8, (int8x8_t)v24, 4uLL), *(float32x2_t *)v20.i8);
      *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(v24, *(float32x2_t *)v20.i8), *(float32x2_t *)v14.i8, *(float32x2_t *)&v7.u32[2]), 4uLL));
      *(float32x2_t *)&v8.u32[2] = vadd_f32((float32x2_t)v17.u32[0], (float32x2_t)v25.u32[0]);
      unsigned int v26 = v9 + 1;
      v68[v9] = a2;
      a2 = *(unsigned __int8 *)(result + a2 + 64);
      float32x4_t v10 = v7;
      ++v9;
    }
    while (a2);
  }
  else
  {
    unsigned int v26 = 0;
  }
  float32x4_t v27 = vmulq_n_f32(*v4, v7.f32[0]);
  v27.i32[3] = 0;
  float32x4_t v28 = vmulq_lane_f32(v4[1], *(float32x2_t *)v7.f32, 1);
  v28.i32[3] = 0;
  float32x4_t v29 = v4[3];
  float32x4_t v30 = vmulq_laneq_f32(v4[2], v7, 2);
  v30.i32[3] = 0;
  float32x4_t v31 = vmulq_n_f32(v29, v8.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v32 = vaddq_f32(v27, v28);
  float32x4_t v33 = v4[4];
  float32x4_t v34 = v4[5];
  float32x4_t v35 = vmulq_lane_f32(v33, *(float32x2_t *)v8.f32, 1);
  v35.i32[3] = 0;
  float32x4_t v36 = vaddq_f32(v32, v30);
  float32x4_t v37 = vmulq_laneq_f32(v34, v8, 2);
  v37.i32[3] = 0;
  float32x4_t v38 = vnegq_f32(vaddq_f32(v36, vaddq_f32(vaddq_f32(v31, v35), v37)));
  v38.i32[3] = 0;
  float32x4_t v39 = vmulq_f32(v7, v29);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  float32x4_t v40 = vmulq_f32(v7, v33);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  float32x4_t v41 = vmulq_f32(v7, v34);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  *(int8x8_t *)v40.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), 4uLL);
  v40.i64[1] = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).u32[0];
  float32x4_t v42 = vmulq_n_f32(v4[6], v8.f32[0]);
  v42.i32[3] = 0;
  float32x4_t v43 = vmulq_lane_f32(v4[7], *(float32x2_t *)v8.f32, 1);
  v43.i32[3] = 0;
  float32x4_t v44 = vmulq_laneq_f32(v4[8], v8, 2);
  v44.i32[3] = 0;
  float32x4_t v45 = vnegq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v42, v43), v44), v40));
  v45.i32[3] = 0;
  if (v26)
  {
    uint64_t v46 = v26 - 1;
    do
    {
      uint64_t v47 = v68[v46];
      uint64_t v48 = v6 + 32 * v47;
      float32x4_t v49 = *(float32x4_t *)(v48 + 16);
      float32x2_t v50 = (float32x2_t)vextq_s8(*(int8x16_t *)v48, *(int8x16_t *)v48, 8uLL).u64[0];
      int8x8_t v51 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), *(float32x2_t *)v48), (float32x2_t)vext_s8(*(int8x8_t *)v48, (int8x8_t)v50, 4uLL), *(float32x2_t *)v45.f32);
      *(int8x8_t *)v52.f32 = vext_s8(v51, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v45.f32, v50), *(float32x2_t *)v48, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)), 4uLL);
      v52.i64[1] = v51.u32[0];
      float v53 = &v5[10 * v47];
      float32x4_t v54 = vsubq_f32(v38, v52);
      float32x4_t v55 = vmulq_f32(*v53, v54);
      v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
      float32x4_t v56 = vmulq_f32(v53[2], v54);
      v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
      *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), 4uLL);
      float32x4_t v57 = vmulq_f32(v53[4], v54);
      v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
      v55.i64[1] = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).u32[0];
      float32x4_t v58 = vmulq_f32(v45, v53[1]);
      v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
      float32x4_t v59 = vmulq_f32(v45, v53[3]);
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      float32x4_t v60 = vmulq_f32(v45, v53[5]);
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      *(int8x8_t *)v58.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), 4uLL);
      v58.i64[1] = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32).u32[0];
      float32x4_t v61 = vaddq_f32(v55, v58);
      float32x4_t v62 = *(float32x4_t *)&v68[4 * v46 + 64];
      float32x4_t v63 = vmulq_n_f32(v53[6], v62.f32[0]);
      v63.i32[3] = 0;
      float32x4_t v64 = vmulq_lane_f32(v53[7], *(float32x2_t *)v62.f32, 1);
      v64.i32[3] = 0;
      float32x4_t v65 = vmulq_laneq_f32(v53[8], v62, 2);
      v65.i32[3] = 0;
      float32x4_t v66 = vaddq_f32(v61, vaddq_f32(vaddq_f32(v63, v64), v65));
      v65.i64[0] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
      *(float32x2_t *)v64.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v49.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v49.f32, *(int8x8_t *)v65.f32, 4uLL), *(float32x2_t *)v66.f32);
      *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v64.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v66.f32), *(float32x2_t *)v49.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL)), 4uLL);
      v49.i64[1] = v64.u32[0];
      float32x4_t v38 = vsubq_f32(v54, v49);
      float32x4_t v45 = vsubq_f32(v45, v66);
    }
    while ((unint64_t)v46--);
  }
  *a4 = v38;
  a4[1] = v45;
  return result;
}

double physx::Dy::Articulation::getImpulseSelfResponse(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8)
{
  *(void *)&double result = physx::Dy::ArticulationHelper::getImpulseSelfResponse(*(void *)(a1 + 168), a2, a5, a7, a3, a6, a8).u64[0];
  return result;
}

float32x4_t physx::Dy::ArticulationHelper::getImpulseSelfResponse(uint64_t a1, unsigned int a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, float32x4_t *a6, float32x4_t *a7)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  if (*(unsigned __int8 *)(a1 + a5 + 64) == a2)
  {
    float32x4_t v11 = (float32x4_t *)(a1 + *(unsigned __int16 *)(a1 + 18));
    uint64_t v12 = v11 + 9;
    uint64_t v13 = a1 + *(unsigned __int16 *)(a1 + 2);
    float32x2_t v15 = (int8x16_t *)(v13 + 32 * a5);
    float32x4_t v16 = vnegq_f32(*a6);
    float32x4_t v17 = v16;
    v17.i32[3] = 0;
    float32x4_t v18 = vnegq_f32(a6[1]);
    v18.i32[3] = 0;
    int8x16_t v20 = v15[1];
    float32x4_t v19 = v15 + 1;
    float32x4_t v21 = &v11[10 * a5 + 9];
    float32x2_t v22 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    float32x2_t v23 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
    int8x8_t v24 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)vext_s8(*(int8x8_t *)v20.i8, (int8x8_t)v23, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v22, 4uLL), *(float32x2_t *)v20.i8);
    *(int8x8_t *)v16.f32 = vext_s8(v24, (int8x8_t)vmls_f32(vmul_f32(v22, *(float32x2_t *)v20.i8), *(float32x2_t *)v16.f32, v23), 4uLL);
    v16.i64[1] = v24.u32[0];
    float32x4_t v25 = vaddq_f32(v18, v16);
    float32x4_t v26 = vmulq_laneq_f32(v21[4], v25, 2);
    v26.i32[3] = 0;
    float32x4_t v27 = vmlaq_lane_f32(v26, v21[2], *(float32x2_t *)v25.f32, 1);
    v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
    float32x4_t v28 = vmlaq_n_f32(v27, *v21, v25.f32[0]);
    v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
    float32x4_t v29 = vsubq_f32(v17, v28);
    float32x4_t v30 = vmulq_laneq_f32(v21[5], v25, 2);
    v30.i32[3] = 0;
    float32x4_t v31 = vmlaq_lane_f32(v30, v21[3], *(float32x2_t *)v25.f32, 1);
    v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
    float32x4_t v32 = vmlaq_n_f32(v31, v21[1], v25.f32[0]);
    v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
    float32x2_t v33 = (float32x2_t)vextq_s8(*v15, *v15, 8uLL).u64[0];
    int8x8_t v34 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v15->i8, (int8x8_t)v33, 4uLL), *(float32x2_t *)v29.f32);
    *(int8x8_t *)v35.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32(v33, *(float32x2_t *)v29.f32), *(float32x2_t *)v15->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)), 4uLL);
    v35.i64[1] = v34.u32[0];
    float32x4_t v36 = vsubq_f32(a3[1], vaddq_f32(vsubq_f32(v18, v32), v35));
    float32x4_t v37 = vnegq_f32(vsubq_f32(*a3, v29));
    v37.i32[3] = 0;
    float32x4_t v38 = vnegq_f32(v36);
    v38.i32[3] = 0;
    if (a2)
    {
      int v39 = 0;
      float32x4_t v40 = v37;
      do
      {
        float32x4_t v41 = &v12[10 * a2];
        float32x4_t v42 = (_OWORD *)(v13 + 32 * a2);
        int8x16_t v44 = *(int8x16_t *)v42;
        float32x4_t v43 = *((float32x4_t *)v42 + 1);
        float32x2_t v45 = (float32x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
        int8x8_t v46 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v40.f32, (float32x2_t)vext_s8(*(int8x8_t *)v43.f32, (int8x8_t)v45, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL), *(float32x2_t *)v43.f32);
        *(int8x8_t *)v43.f32 = vext_s8(v46, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), *(float32x2_t *)v43.f32), *(float32x2_t *)v40.f32, v45), 4uLL);
        v43.i64[1] = v46.u32[0];
        float32x4_t v47 = vaddq_f32(v38, v43);
        *(float32x4_t *)&v115[4 * v39 + 64] = v47;
        float32x4_t v48 = vmlsq_laneq_f32(v40, v41[4], v47, 2);
        v48.i64[1] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u32[0];
        float32x4_t v49 = vmlsq_lane_f32(v48, v41[2], *(float32x2_t *)v47.f32, 1);
        v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
        int8x16_t v50 = (int8x16_t)vmlsq_lane_f32(v49, *v41, *(float32x2_t *)v47.f32, 0);
        v37.i64[0] = v50.i64[0];
        v37.i64[1] = vextq_s8(v50, v50, 8uLL).u32[0];
        float32x4_t v51 = vmlsq_laneq_f32(v38, v41[5], v47, 2);
        v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
        float32x4_t v52 = vmlsq_lane_f32(v51, v41[3], *(float32x2_t *)v47.f32, 1);
        v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
        int8x16_t v53 = (int8x16_t)vmlsq_lane_f32(v52, v41[1], *(float32x2_t *)v47.f32, 0);
        v47.i32[0] = vextq_s8(v53, v53, 8uLL).u32[0];
        float32x2_t v54 = (float32x2_t)vextq_s8(v44, v44, 8uLL).u64[0];
        int8x8_t v55 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v44.i8, (int8x8_t)v54, 4uLL), *(float32x2_t *)v50.i8);
        *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)vext_s8(v55, (int8x8_t)vmls_f32(vmul_f32(v54, *(float32x2_t *)v50.i8), *(float32x2_t *)v44.i8, *(float32x2_t *)&v37.u32[2]), 4uLL));
        *(float32x2_t *)&v38.u32[2] = vadd_f32((float32x2_t)v47.u32[0], (float32x2_t)v55.u32[0]);
        unsigned int v56 = v39 + 1;
        v115[v39] = a2;
        a2 = *(unsigned __int8 *)(a1 + a2 + 64);
        float32x4_t v40 = v37;
        ++v39;
      }
      while (a2);
    }
    else
    {
      unsigned int v56 = 0;
    }
    float32x4_t v58 = vmulq_n_f32(*v11, v37.f32[0]);
    v58.i32[3] = 0;
    float32x4_t v59 = vmulq_lane_f32(v11[1], *(float32x2_t *)v37.f32, 1);
    v59.i32[3] = 0;
    float32x4_t v60 = v11[3];
    float32x4_t v61 = vmulq_laneq_f32(v11[2], v37, 2);
    v61.i32[3] = 0;
    float32x4_t v62 = vmulq_n_f32(v60, v38.f32[0]);
    v62.i32[3] = 0;
    float32x4_t v63 = vaddq_f32(v58, v59);
    float32x4_t v64 = v11[4];
    float32x4_t v65 = v11[5];
    float32x4_t v66 = vmulq_lane_f32(v64, *(float32x2_t *)v38.f32, 1);
    v66.i32[3] = 0;
    float32x4_t v67 = vaddq_f32(v63, v61);
    float32x4_t v68 = vmulq_laneq_f32(v65, v38, 2);
    v68.i32[3] = 0;
    float32x4_t v69 = vnegq_f32(vaddq_f32(v67, vaddq_f32(vaddq_f32(v62, v66), v68)));
    v69.i32[3] = 0;
    float32x4_t v70 = vmulq_f32(v37, v60);
    v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
    float32x4_t v71 = vmulq_f32(v37, v64);
    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
    float32x4_t v72 = vmulq_f32(v37, v65);
    v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
    *(int8x8_t *)v71.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), 4uLL);
    v71.i64[1] = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32).u32[0];
    float32x4_t v73 = vmulq_n_f32(v11[6], v38.f32[0]);
    v73.i32[3] = 0;
    float32x4_t v74 = vmulq_lane_f32(v11[7], *(float32x2_t *)v38.f32, 1);
    v74.i32[3] = 0;
    float32x4_t v75 = vmulq_laneq_f32(v11[8], v38, 2);
    v75.i32[3] = 0;
    float32x4_t v76 = vnegq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v73, v74), v75), v71));
    v76.i32[3] = 0;
    if (v56)
    {
      uint64_t v77 = v56 - 1;
      do
      {
        uint64_t v78 = v115[v77];
        uint64_t v79 = v13 + 32 * v78;
        float32x4_t v80 = *(float32x4_t *)(v79 + 16);
        float32x2_t v81 = (float32x2_t)vextq_s8(*(int8x16_t *)v79, *(int8x16_t *)v79, 8uLL).u64[0];
        int8x8_t v82 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL), *(float32x2_t *)v79), (float32x2_t)vext_s8(*(int8x8_t *)v79, (int8x8_t)v81, 4uLL), *(float32x2_t *)v76.f32);
        *(int8x8_t *)v83.f32 = vext_s8(v82, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v76.f32, v81), *(float32x2_t *)v79, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL)), 4uLL);
        v83.i64[1] = v82.u32[0];
        float v84 = &v12[10 * v78];
        float32x4_t v85 = vsubq_f32(v69, v83);
        float32x4_t v86 = vmulq_f32(*v84, v85);
        v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
        float32x4_t v87 = vmulq_f32(v84[2], v85);
        v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
        *(int8x8_t *)v86.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), 4uLL);
        float32x4_t v88 = vmulq_f32(v84[4], v85);
        v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
        v86.i64[1] = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).u32[0];
        float32x4_t v89 = vmulq_f32(v76, v84[1]);
        v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
        float32x4_t v90 = vmulq_f32(v76, v84[3]);
        v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
        float32x4_t v91 = vmulq_f32(v76, v84[5]);
        v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
        *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32), 4uLL);
        v89.i64[1] = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32).u32[0];
        float32x4_t v92 = vaddq_f32(v86, v89);
        float32x4_t v93 = *(float32x4_t *)&v115[4 * v77 + 64];
        float32x4_t v94 = vmulq_n_f32(v84[6], v93.f32[0]);
        v94.i32[3] = 0;
        float32x4_t v95 = vmulq_lane_f32(v84[7], *(float32x2_t *)v93.f32, 1);
        v95.i32[3] = 0;
        float32x4_t v96 = vmulq_laneq_f32(v84[8], v93, 2);
        v96.i32[3] = 0;
        float32x4_t v97 = vaddq_f32(v92, vaddq_f32(vaddq_f32(v94, v95), v96));
        v96.i64[0] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
        *(float32x2_t *)v95.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v80.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v80.f32, *(int8x8_t *)v96.f32, 4uLL), *(float32x2_t *)v97.f32);
        *(int8x8_t *)v80.f32 = vext_s8(*(int8x8_t *)v95.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v97.f32), *(float32x2_t *)v80.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL)), 4uLL);
        v80.i64[1] = v95.u32[0];
        float32x4_t v69 = vsubq_f32(v85, v80);
        float32x4_t v76 = vsubq_f32(v76, v97);
      }
      while ((unint64_t)v77--);
    }
    *a4 = v69;
    a4[1] = v76;
    float32x2_t v99 = (float32x2_t)vextq_s8(*v15, *v15, 8uLL).u64[0];
    int8x8_t v100 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL), *(float32x2_t *)v15->i8), (float32x2_t)vext_s8(*(int8x8_t *)v15->i8, (int8x8_t)v99, 4uLL), *(float32x2_t *)v76.f32);
    *(int8x8_t *)v101.f32 = vext_s8(v100, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v76.f32, v99), *(float32x2_t *)v15->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL)), 4uLL);
    v101.i64[1] = v100.u32[0];
    float32x4_t v102 = vsubq_f32(v69, v101);
    float32x4_t v103 = vmulq_f32(*v21, v102);
    v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
    float32x4_t v104 = vmulq_f32(v21[2], v102);
    v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
    *(int8x8_t *)v103.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32), 4uLL);
    float32x4_t v105 = vmulq_f32(v21[4], v102);
    v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
    v103.i64[1] = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32).u32[0];
    float32x4_t v106 = vmulq_f32(v76, v21[1]);
    v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
    float32x4_t v107 = vmulq_f32(v76, v21[3]);
    v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
    float32x4_t v108 = vmulq_f32(v76, v21[5]);
    v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
    *(int8x8_t *)v106.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32), 4uLL);
    v106.i64[1] = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32).u32[0];
    float32x4_t v109 = vaddq_f32(v103, v106);
    float v110 = &v12[10 * a5];
    float32x4_t v111 = vmulq_n_f32(v110[6], v25.f32[0]);
    v111.i32[3] = 0;
    float32x4_t v112 = vmulq_lane_f32(v110[7], *(float32x2_t *)v25.f32, 1);
    v112.i32[3] = 0;
    float32x4_t v113 = vmulq_laneq_f32(v110[8], v25, 2);
    v113.i32[3] = 0;
    float32x4_t v114 = vaddq_f32(v109, vaddq_f32(vaddq_f32(v111, v112), v113));
    v111.i64[0] = vextq_s8(*v19, *v19, 8uLL).u64[0];
    *(float32x2_t *)v108.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v19->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v114, (int8x16_t)v114, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v19->i8, *(int8x8_t *)v111.f32, 4uLL), *(float32x2_t *)v114.f32);
    *(int8x8_t *)v109.f32 = vext_s8(*(int8x8_t *)v108.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v114.f32), *(float32x2_t *)v19->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL)), 4uLL);
    v109.i64[1] = v108.u32[0];
    float32x4_t result = vsubq_f32(v76, v114);
    *a7 = vsubq_f32(v102, v109);
    a7[1] = result;
  }
  else
  {
    physx::Dy::ArticulationHelper::getImpulseResponse(a1, a2, a3, a4);
    physx::Dy::ArticulationHelper::getImpulseResponse(a1, a5, a6, a7);
  }
  return result;
}

__n128 physx::Dy::Articulation::getLinkVelocity@<Q0>(physx::Dy::Articulation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *((void *)this + 21) + 32 * a2;
  __n128 result = *(__n128 *)(v3 + 128);
  long long v5 = *(_OWORD *)(v3 + 144);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v5;
  return result;
}

__n128 physx::Dy::Articulation::getLinkMotionVector@<Q0>(physx::Dy::Articulation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *((void *)this + 21)
     + 32 * **((unsigned __int16 **)this + 21)
     + 32 * **((unsigned __int16 **)this + 21)
     + 32 * a2;
  __n128 result = *(__n128 *)(v3 + 128);
  long long v5 = *(_OWORD *)(v3 + 144);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v5;
  return result;
}

double physx::Dy::Articulation::getMotionVelocity@<D0>(physx::Dy::Articulation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *((void *)this + 33) + 32 * a2;
  int v4 = *(_DWORD *)(v3 + 8);
  int v5 = *(_DWORD *)(v3 + 24);
  *(void *)a3 = *(void *)v3;
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = 0;
  double result = *(double *)(v3 + 16);
  *(double *)(a3 + 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = result;
  *(_DWORD *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

double physx::Dy::Articulation::getMotionAcceleration@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t physx::Dy::Articulation::fillIndexedManager(unint64_t this, unsigned int a2, unint64_t *a3, unsigned __int8 *a4)
{
  *a4 = 2;
  *a3 = a2 | this;
  return this;
}

float physx::Dy::Articulation::getLinkMaxPenBias(physx::Dy::Articulation *this, int a2)
{
  int v2 = (unsigned __int16 *)*((void *)this + 21);
  return *(float *)&v2[16 * *v2 + 64 + 16 * *v2 + 16 * *v2 + 8 * *v2 + 2 * a2];
}

float physx::Dy::Articulation::setInertia(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float v3 = 1.0 / a2[15].f32[1];
  *(float *)a1 = v3;
  *(float *)(a1 + 20) = v3;
  *(float *)(a1 + 40) = v3;
  float32x2_t v4 = a3[1];
  float32x2_t v5 = vadd_f32(*a3, *a3);
  float32x2_t v6 = vadd_f32(v4, v4);
  float32x2_t v7 = vmul_f32(*a3, v5);
  int32x2_t v8 = (int32x2_t)vmul_f32(v4, v6);
  float32x2_t v9 = vmul_lane_f32(v5, *a3, 1);
  float32x2_t v10 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v4, v5.f32[0]));
  float32x2_t v11 = vmul_lane_f32(v4, v5, 1);
  float32x2_t v12 = vmul_lane_f32(v6, v4, 1);
  int32x2_t v13 = (int32x2_t)vsub_f32(v9, v12);
  float32x2_t v14 = vadd_f32(v9, v12);
  __asm { FMOV            V19.2S, #1.0 }
  float32x2_t v20 = vsub_f32(_D19, v7);
  float32x2_t v21 = vsub_f32(v20, (float32x2_t)vdup_lane_s32(v8, 0));
  v22.i32[0] = v21.i32[0];
  v22.i32[1] = vdup_lane_s32(v13, 0).i32[1];
  float32x2_t v23 = (float32x2_t)__PAIR64__(v22.u32[1], v14.u32[0]);
  float32x2_t v24 = vsub_f32(v10, v11);
  float32x2_t v25 = vadd_f32(v10, v11);
  float32x2_t v26 = vsub_f32(v11, v10);
  *(void *)&long long v27 = __PAIR64__(v25.u32[1], v26.u32[0]);
  float32x2_t v28 = vdiv_f32(_D19, a2[14]);
  float32x2_t v29 = vmul_f32((float32x2_t)__PAIR64__(v25.u32[1], v26.u32[0]), 0);
  float32x2_t v30 = vmul_f32((float32x2_t)__PAIR64__(v21.u32[1], v14.u32[0]), 0);
  float32x2_t v31 = vadd_f32(v29, vadd_f32(v30, vmul_lane_f32(v22, v28, 1)));
  float32x2_t v32 = vmul_n_f32(v31, v25.f32[0]);
  v25.i32[1] = v24.i32[1];
  float32x2_t v33 = vsub_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v7, 1));
  float32x2_t v34 = vmul_f32(v22, 0);
  float32x2_t v35 = vadd_f32(v29, vadd_f32(v34, vmul_n_f32((float32x2_t)__PAIR64__(v21.u32[1], v14.u32[0]), v28.f32[0])));
  float32x2_t v36 = vmul_f32(v25, 0);
  float32x2_t v37 = (float32x2_t)vrev64_s32((int32x2_t)v25);
  float32x2_t v38 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)COERCE_UNSIGNED_INT(0.0 * v33.f32[0]), 0), vadd_f32(v36, vmul_f32(v37, v28)));
  float32x2_t v39 = vadd_f32(vadd_f32(v30, v34), vmul_n_f32(*(float32x2_t *)&v27, 1.0 / a2[15].f32[0]));
  float32x2_t v40 = vmul_f32((float32x2_t)vzip2_s32(*(int32x2_t *)&v27, (int32x2_t)v21), (float32x2_t)vzip2_s32((int32x2_t)v39, (int32x2_t)v35));
  float32x2_t v41 = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v40, vmul_n_f32(v31, *(float *)v13.i32)), 1));
  float32x2_t v42 = vadd_f32(vmul_f32(v23, v38), vmul_f32(v21, (float32x2_t)vrev64_s32((int32x2_t)v38)));
  v14.f32[0] = vmul_lane_f32(v26, v39, 1).f32[0]
             + (float)(vmul_lane_f32(v14, v35, 1).f32[0] + vmuls_lane_f32(v21.f32[0], v31, 1));
  v36.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v36, 1), v36).u32[0];
  v36.i32[1] = vmul_n_f32(v24, *(float *)&v38).i32[1];
  v37.i32[0] = v33.i32[0];
  v38.f32[0] = 1.0 / a2[15].f32[0];
  float32x2_t v43 = vadd_f32(v36, vmul_f32(v37, v38));
  float32x2_t v44 = vadd_f32(vmul_n_f32(*(float32x2_t *)&v27, v43.f32[0]), v42);
  float32x2_t v45 = vadd_f32(vmul_f32(v33, v43), (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1));
  float32x2_t v46 = vadd_f32(vmul_n_f32(*(float32x2_t *)&v27, v39.f32[0]), vadd_f32(vmul_f32(v23, (float32x2_t)vzip1_s32((int32x2_t)v35, (int32x2_t)v31)), vmul_f32(v21, (float32x2_t)vzip1_s32((int32x2_t)v31, (int32x2_t)v35))));
  int32x2_t v47 = (int32x2_t)vmul_f32(vadd_f32(v46, (float32x2_t)__PAIR64__(v14.u32[0], v46.u32[0])), (float32x2_t)0x3F0000003F000000);
  *(float *)&long long v27 = 0.5 * vadd_f32(v41, v41).f32[0];
  DWORD1(v27) = v47.i32[1];
  int32x2_t v48 = (int32x2_t)vmul_f32(vadd_f32(v44, vadd_f32(vmul_n_f32(v39, v33.f32[0]), vadd_f32(vmul_lane_f32(v35, v24, 1), v32))), (float32x2_t)0x3F0000003F000000);
  *((void *)&v27 + 1) = v48.u32[1];
  *(int32x2_t *)&long long v49 = vrev64_s32(v47);
  *((void *)&v49 + 1) = v48.u32[0];
  float result = 0.5 * vadd_f32(v45, v45).f32[0];
  *(int32x2_t *)&long long v51 = vrev64_s32(v48);
  *((void *)&v51 + 1) = LODWORD(result);
  *(_OWORD *)(a1 + 9re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v27;
  *(_OWORD *)(a1 + 1re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 12) = v49;
  *(_OWORD *)(a1 + 128) = v51;
  return result;
}

float physx::Dy::Articulation::setJointTransforms(float *a1, float *a2, float *a3, float *a4)
{
  float v4 = a4[4] + a4[4];
  float v5 = a4[5] + a4[5];
  float v6 = *a2;
  float v7 = a2[1];
  float v9 = a2[2];
  float v8 = a2[3];
  float v11 = a4[2];
  float v10 = a4[3];
  float v12 = *a4;
  float v13 = a4[1];
  float v14 = (float)((float)((float)(*a2 * v10) + (float)(v8 * *a4)) + (float)(v7 * v11)) - (float)(v13 * v9);
  float v15 = (float)((float)((float)(v7 * v10) + (float)(v8 * v13)) + (float)(v9 * *a4)) - (float)(v11 * *a2);
  *a1 = v14;
  float v16 = a4[7];
  float v17 = a4[6] + a4[6];
  float v18 = (float)(v8 * v8) + -0.5;
  float v19 = (float)((float)(v5 * v7) + (float)(v6 * v4)) + (float)(v9 * v17);
  float v20 = (float)((float)(v8 * (float)((float)(v7 * v17) - (float)(v9 * v5))) + (float)(v4 * v18)) + (float)(v6 * v19);
  float v21 = (float)((float)(v8 * (float)((float)(v9 * v4) - (float)(v6 * v17))) + (float)(v5 * v18)) + (float)(v7 * v19);
  float v22 = (float)((float)(v8 * (float)((float)(v6 * v5) - (float)(v7 * v4))) + (float)(v17 * v18)) + (float)(v9 * v19);
  float v23 = a2[4] + v20;
  float v24 = a2[5] + v21;
  float v25 = a2[6] + v22;
  float v26 = (float)((float)((float)(v9 * v10) + (float)(v8 * v11)) + (float)(v6 * v13)) - (float)(v12 * v7);
  float v27 = (float)((float)((float)(v8 * v10) - (float)(v6 * v12)) - (float)(v7 * v13)) - (float)(v9 * v11);
  a1[1] = v15;
  a1[2] = v26;
  a1[3] = v27;
  a1[4] = v23;
  a1[5] = v24;
  float v28 = *a3;
  float v29 = a3[1];
  float v31 = a3[2];
  float v30 = a3[3];
  float v33 = a4[10];
  float v32 = a4[11];
  float v35 = a4[8];
  float v34 = a4[9];
  float v36 = (float)((float)((float)(*a3 * v33) + (float)(v30 * v16)) + (float)(v29 * v34)) - (float)(v35 * v31);
  a1[6] = v25;
  float v37 = v32 + v32;
  float v38 = a4[12] + a4[12];
  float v39 = a4[13] + a4[13];
  float v40 = (float)(v30 * v30) + -0.5;
  float v41 = (float)(v38 * v29) + (float)(v28 * v37);
  float v42 = (float)(v30 * (float)((float)(v29 * v39) - (float)(v31 * v38))) + (float)(v37 * v40);
  float v43 = (float)(v30 * (float)((float)(v31 * v37) - (float)(v28 * v39))) + (float)(v38 * v40);
  float v44 = (float)(v30 * (float)((float)(v28 * v38) - (float)(v29 * v37))) + (float)(v39 * v40);
  float v45 = v41 + (float)(v31 * v39);
  float v46 = a3[4] + (float)(v42 + (float)(v28 * v45));
  float v47 = a3[5] + (float)(v43 + (float)(v29 * v45));
  float v48 = a3[6] + (float)(v44 + (float)(v31 * v45));
  float v49 = (float)((float)((float)(v29 * v33) + (float)(v30 * v35)) + (float)(v31 * v16)) - (float)(v34 * v28);
  float v50 = (float)((float)((float)(v31 * v33) + (float)(v30 * v34)) + (float)(v28 * v35)) - (float)(v16 * v29);
  float v51 = (float)((float)((float)(v30 * v33) - (float)(v28 * v16)) - (float)(v29 * v35)) - (float)(v31 * v34);
  a1[7] = v36;
  a1[8] = v49;
  a1[9] = v50;
  a1[10] = v51;
  a1[11] = v46;
  a1[12] = v47;
  a1[13] = v48;
  float v52 = (float)(v46 - v23) + (float)(v46 - v23);
  float v53 = (float)(v47 - v24) + (float)(v47 - v24);
  float v54 = (float)(v48 - v25) + (float)(v48 - v25);
  float v55 = (float)(v27 * v27) + -0.5;
  float v56 = (float)((float)-(float)(v15 * v53) - (float)(v14 * v52)) - (float)(v26 * v54);
  float v57 = (float)((float)(v27 * (float)((float)(v26 * v53) - (float)(v15 * v54))) + (float)(v52 * v55))
      - (float)(v14 * v56);
  float v58 = (float)((float)(v27 * (float)((float)(v14 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v15 * v56);
  float v59 = (float)((float)(v27 * (float)((float)(v15 * v52) - (float)(v14 * v53))) + (float)(v54 * v55))
      - (float)(v26 * v56);
  float v60 = (float)((float)((float)(v27 * v36) - (float)(v14 * v51)) - (float)(v15 * v50)) + (float)(v49 * v26);
  float v61 = (float)((float)((float)(v27 * v49) - (float)(v15 * v51)) - (float)(v26 * v36)) + (float)(v50 * v14);
  float v62 = (float)((float)((float)(v27 * v50) - (float)(v26 * v51)) - (float)(v14 * v49)) + (float)(v36 * v15);
  float result = (float)((float)((float)(v14 * v36) + (float)(v27 * v51)) + (float)(v15 * v49)) + (float)(v26 * v50);
  a1[14] = v60;
  a1[15] = v61;
  a1[16] = v62;
  a1[17] = result;
  a1[18] = v57;
  a1[19] = v58;
  a1[20] = v59;
  if (result < 0.0)
  {
    a1[14] = -v60;
    a1[15] = -v61;
    a1[16] = -v62;
    a1[17] = -result;
    float result = -v51;
    a1[7] = -v36;
    a1[8] = -v49;
    a1[9] = -v50;
    a1[10] = -v51;
  }
  return result;
}

__n128 physx::Dy::Articulation::prepareDataBlock(_WORD *a1, uint64_t a2, unsigned int a3, float32x2_t *a4, uint64_t a5, char *a6, float *a7)
{
  unint64_t v58 = a3;
  __int16 v13 = 112 * a3 + ((4 * a3 + 60) & 0xFFC0) + 128;
  __int16 v14 = v13 + 32 * a3;
  __int16 v15 = v14 + 160 * a3 + 144;
  bzero(a1, 112 * a3 + ((4 * a3 + 60) & 0x7FFC0) + 128);
  a1[1] = v13;
  a1[9] = v14;
  a1[8] = v15;
  *a1 = a3;
  if (a3 >= 2)
  {
    unint64_t v16 = v58 - 1;
    float v17 = (char *)a1 + 65;
    float v18 = (int *)(a2 + 72);
    do
    {
      int v19 = *v18;
      v18 += 10;
      *v17++ = v19;
      --v16;
    }
    while (v16);
  }
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  bzero(a6, 144 * a3);
  if (a3)
  {
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    unsigned int v53 = a3;
    unint64_t v23 = 32 * a3;
    float v56 = &a1[v23 / 2 + 64 + v23 / 2];
    float v24 = a1;
    float v25 = a4;
    uint64_t v26 = (uint64_t)&a1[16 * (unsigned __int16)*a1
                     + 64
                     + 16 * (unsigned __int16)*a1
                     + 16 * (unsigned __int16)*a1
                     + 8 * (unsigned __int16)*a1];
    float v27 = (uint64_t *)(a2 + 96);
    float v28 = a7;
    float v55 = v25;
    float v29 = v25 + 3;
    float v54 = v28;
    do
    {
      if (v22 + 2 < v58)
      {
        _X8 = *v27;
        __asm { PRFM            #0, [X8] }
        _X8 = v27[1];
        __asm { PRFM            #0, [X8] }
      }
      float v38 = (float32x2_t *)*(v27 - 10);
      *(_OWORD *)v29[-3].f32 = *(_OWORD *)v38->f32;
      v29[-1] = v38[2];
      v29->i32[0] = v38[3].i32[0];
      *(_OWORD *)(a5 + 16 * v22) = xmmword_23435FBB0;
      __int32 v39 = v38[11].i32[0];
      float v40 = (float32x2_t *)&v24[v21 / 2];
      float32x2_t v41 = v38[8];
      v40[17].i32[0] = v38[9].i32[0];
      v40[17].i32[1] = 0;
      float32x2_t v42 = v38[10];
      v40[16] = v41;
      v40[18] = v42;
      v40[19].i32[0] = v39;
      v40[19].i32[1] = 0;
      float v43 = &v56[v21 / 2];
      *float v43 = 0u;
      v43[1] = 0u;
      physx::Dy::Articulation::setInertia((uint64_t)a6, v38, v38);
      result.n128_u32[0] = v38[9].u32[1];
      *(_DWORD *)(v26 + 4 * v22) = result.n128_u32[0];
      if (v21) {
        result.n128_f32[0] = physx::Dy::Articulation::setJointTransforms(v28, (float *)v55 + 7 * *((unsigned int *)v27 - 16), (float *)v38, (float *)*(v27 - 9));
      }
      ++v22;
      v28 += 21;
      v27 += 5;
      v21 += 32;
      a6 += 144;
      float v29 = (float32x2_t *)((char *)v29 + 28);
    }
    while (v23 != v21);
    if (v53 >= 2)
    {
      unint64_t v44 = 0;
      float v45 = (float *)&v55[6] + 1;
      float v46 = (__n128 *)((char *)v24 + (unsigned __int16)v24[1] + 48);
      float v47 = (unsigned __int8 *)v24 + 65;
      do
      {
        unsigned int v48 = *v47++;
        float v49 = (float32x2_t *)((char *)v55 + 28 * v48);
        float32x2_t v50 = *(float32x2_t *)(v45 - 2);
        v51.n128_u64[0] = (unint64_t)vsub_f32(v50, v49[2]);
        float v52 = *v45;
        v45 += 7;
        result.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)&v54[v44 / 4 + 32], v50);
        v51.n128_u64[1] = COERCE_UNSIGNED_INT(v52 - v49[3].f32[0]);
        result.n128_f32[2] = v54[v44 / 4 + 34] - v52;
        result.n128_u32[3] = 0;
        v46[-1] = v51;
        *float v46 = result;
        v44 += 84;
        v46 += 2;
      }
      while (84 * v58 - 84 != v44);
    }
  }
  return result;
}

unsigned __int16 *physx::Dy::Articulation::prepareFsData(unsigned __int16 *result, void *a2)
{
  unint64_t v2 = *result;
  uint64_t v3 = result[9];
  float v4 = (char *)result + v3;
  uint64_t v5 = result[8];
  uint64_t v6 = result[1];
  *((void *)v4 + 3re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = *a2;
  *((void *)v4 + 37) = 1;
  if (v2 >= 2)
  {
    unint64_t v7 = v2 - 1;
    float v8 = (int8x16_t *)((char *)result + v6 + 48);
    float v9 = (_OWORD *)((char *)result + v3 + 448);
    float v10 = (long long *)(a2 + 5);
    float v11 = (_OWORD *)((char *)&result[216 * v2 + 88] + v5);
    do
    {
      long long v12 = *v10;
      float v10 = (long long *)((char *)v10 + 40);
      _OWORD *v9 = v12;
      v9 += 10;
      int8x16_t v13 = *v8;
      v8 += 2;
      float32x2_t v14 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
      float32x2_t v15 = (float32x2_t)vext_s8(*(int8x8_t *)v13.i8, (int8x8_t)v14, 4uLL);
      int8x8_t v16 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v13.i8, 0), (float32x2_t)0x80000000BF800000, v15);
      *(int8x8_t *)v17.f32 = vext_s8(v16, (int8x8_t)vmla_f32(vmul_f32(v14, (float32x2_t)1065353216), (float32x2_t)0x8000000080000000, *(float32x2_t *)v13.i8), 4uLL);
      int8x8_t v18 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v13.i8, (float32x2_t)1065353216), (float32x2_t)0xBF80000080000000, v15);
      *(int8x8_t *)v19.f32 = vext_s8(v18, (int8x8_t)vmla_f32(vmul_f32(v14, (float32x2_t)0x3F80000000000000), (float32x2_t)0x8000000080000000, *(float32x2_t *)v13.i8), 4uLL);
      v17.i64[1] = v16.u32[0];
      v19.i64[1] = v18.u32[0];
      int8x8_t v20 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v13.i8, (float32x2_t)0x3F80000000000000), (float32x2_t)0x8000000080000000, v15);
      *(v11 - 5) = vaddq_f32(v17, (float32x4_t)0);
      *(v11 - 4) = xmmword_23435FD50;
      *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmla_f32(vmul_f32(v14, 0), (float32x2_t)0x80000000BF800000, *(float32x2_t *)v13.i8), 4uLL);
      v21.i64[1] = v20.u32[0];
      *(v11 - 3) = vaddq_f32(v19, (float32x4_t)0);
      *(v11 - 2) = xmmword_23435FD60;
      *(v11 - 1) = vaddq_f32(v21, (float32x4_t)0);
      *float v11 = xmmword_23435FD80;
      v11 += 6;
      --v7;
    }
    while (v7);
  }
  return result;
}

unsigned __int16 *physx::Dy::Articulation::prepareLtbMatrix(unsigned __int16 *result, _OWORD *a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  unint64_t v6 = *result;
  uint64_t v7 = result[8];
  float v8 = (_OWORD *)((char *)result + v7);
  *float v8 = *a2;
  v8[1] = a2[1];
  char v8[2] = a2[2];
  _OWORD v8[3] = a2[3];
  v8[4] = a2[4];
  v8[5] = a2[5];
  v8[6] = a2[6];
  v8[7] = a2[7];
  v8[8] = a2[8];
  v41[0] = xmmword_23435FD50;
  v41[1] = xmmword_23435FD50;
  int v42 = 1065353216;
  if (v6 >= 2)
  {
    uint64_t v9 = (uint64_t)result + v7 + 656;
    uint64_t v10 = 1;
    float32x2_t v11 = (float32x2_t)vdup_n_s32(0x3F7D70A4u);
    do
    {
      uint64_t v12 = 0;
      int8x16_t v13 = &a2[9 * v10];
      float32x2_t v14 = &v8[25 * v10];
      _OWORD *v14 = *v13;
      v14[1] = v13[1];
      v14[2] = v13[2];
      v14[3] = v13[3];
      v14[4] = v13[4];
      v14[5] = v13[5];
      v14[6] = v13[6];
      v14[7] = v13[7];
      v14[8] = v13[8];
      float32x2_t v15 = (float *)(a3 + 28 * v10);
      float v16 = v15[4];
      float v17 = v15[5];
      float v18 = v15[6];
      uint64_t v19 = a4 + 84 * v10;
      uint64_t v20 = a3 + 28 * *((unsigned __int8 *)result + v10 + 64);
      float v21 = *(float *)(v19 + 52);
      float v22 = v21 - v18;
      float32x2_t v23 = *(float32x2_t *)(v19 + 44);
      float v24 = v23.f32[0] - *(float *)(v20 + 16);
      float32x2_t v25 = vsub_f32(*(float32x2_t *)(v19 + 48), *(float32x2_t *)(v20 + 20));
      float v26 = v23.f32[0] - v16;
      float v27 = v23.f32[1] - v17;
      float32x2_t v28 = *(float32x2_t *)(v19 + 16);
      float v29 = *(float *)(v19 + 24) - v21;
      v30.i32[0] = vdup_lane_s32((int32x2_t)v25, 1).u32[0];
      v30.f32[1] = v24;
      float32x2_t v31 = vneg_f32(v30);
      float v32 = (_OWORD *)v9;
      do
      {
        float v33 = *(float *)((char *)v41 + v12);
        float32x2_t v34 = *(float32x2_t *)((char *)v41 + v12 + 4);
        v35.i32[0] = vrev64_s32((int32x2_t)v34).u32[0];
        v35.f32[1] = v33;
        *(void *)&long long v36 = __PAIR64__(v34.u32[0], LODWORD(v33));
        v5.i64[0] = *(void *)((char *)v41 + v12);
        *(float32x2_t *)&long long v37 = vmla_f32(vmul_f32(v34, v31), v35, v25);
        *(void *)&long long v38 = vnegq_f32(v5).u64[0];
        *((float *)&v38 + 2) = -v34.f32[1];
        *((void *)&v36 + 1) = v34.u32[1];
        HIDWORD(v38) = 0;
        *((void *)&v37 + 1) = COERCE_UNSIGNED_INT(vmlas_n_f32(v33 * (float)-v25.f32[0], v24, v34.f32[0]));
        *(float *)&long long v39 = -(float)((float)((float)-v22 * v34.f32[0]) + (float)(v27 * v34.f32[1]));
        *((float *)&v39 + 1) = -(float)(vmuls_lane_f32(-v26, v34, 1) + (float)(v22 * v33));
        *((void *)&v39 + 1) = COERCE_UNSIGNED_INT(-(float)((float)(v33 * (float)-v27) + (float)(v26 * v34.f32[0])));
        *(v32 - 7) = v36;
        *(v32 - re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = v37;
        *(v32 - 1) = v38;
        *float v32 = v39;
        v12 += 12;
        v32 += 2;
      }
      while (v12 != 36);
      *(float32x2_t *)&long long v40 = vmul_n_f32(vmul_f32(vsub_f32(v28, v23), v11), a5);
      *((float *)&v40 + 2) = (float)(v29 * 0.99) * a5;
      HIDWORD(v40) = 0;
      v8[25 * v10++ + 24] = v40;
      v9 += 400;
    }
    while (v10 != v6);
  }
  return result;
}

float32x4_t physx::Dy::PxcLtbComputeJv(uint64_t a1, unsigned __int16 *a2, int8x16_t *a3)
{
  if (*a2 >= 2u)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2[1] + 32;
    float32x4_t v5 = a3 + 3;
    do
    {
      unint64_t v6 = (float32x4_t *)&a3[2 * *((unsigned __int8 *)a2 + v3 + 65)];
      float32x4_t v7 = v6[1];
      float32x4_t v8 = *(float32x4_t *)((char *)a2 + v4 + 16);
      int8x16_t v9 = (int8x16_t)vaddq_f32(v8, *(float32x4_t *)((char *)a2 + v4));
      float32x2_t v10 = (float32x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
      int8x8_t v11 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v7.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v7.f32, (int8x8_t)v10, 4uLL), *(float32x2_t *)v9.i8);
      *(int8x8_t *)v7.f32 = vext_s8(v11, (int8x8_t)vmls_f32(vmul_f32(v10, *(float32x2_t *)v9.i8), *(float32x2_t *)v7.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 4uLL);
      v7.i64[1] = v11.u32[0];
      v9.i64[0] = vextq_s8(*v5, *v5, 8uLL).u64[0];
      float32x2_t v12 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
      int8x8_t v13 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v5->i8, (float32x2_t)vext_s8(*(int8x8_t *)v8.f32, (int8x8_t)v12, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v5->i8, *(int8x8_t *)v9.i8, 4uLL), *(float32x2_t *)v8.f32);
      *(int8x8_t *)v14.f32 = vext_s8(v13, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v8.f32), *(float32x2_t *)v5->i8, v12), 4uLL);
      v14.i64[1] = v13.u32[0];
      float32x4_t result = vsubq_f32(vaddq_f32(*v6, v7), vaddq_f32((float32x4_t)v5[-1], v14));
      *(float32x4_t *)(a1 + 16 + 16 * v3) = result;
      unint64_t v16 = v3 + 2;
      ++v3;
      v4 += 32;
      v5 += 2;
    }
    while (v16 < *a2);
  }
  return result;
}

float32x4_t physx::Dy::PxcLtbProject(unsigned __int16 *a1, float32x4_t *a2, float32x4_t *a3)
{
  v106[251] = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[8];
  float32x4_t v7 = (float32x4_t *)((char *)a1 + v6);
  uint64_t v8 = *a1;
  bzero(&v104, 32 * v8);
  if (v8 >= 2)
  {
    uint64_t v9 = v8 - 1;
    do
    {
      float32x2_t v10 = &v7[25 * v9];
      int8x8_t v11 = &v104 + 2 * v9;
      float32x4_t v12 = v11[1];
      float32x4_t v13 = vmulq_f32(v10[15], *v11);
      v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
      float32x4_t v14 = vmulq_f32(v10[16], v12);
      v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
      *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32));
      float32x4_t v15 = vmulq_f32(*v11, v10[17]);
      v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
      float32x4_t v16 = vmulq_f32(v12, v10[18]);
      v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
      float32x4_t v17 = vmulq_f32(*v11, v10[19]);
      uint64_t v18 = *((unsigned __int8 *)a1 + v9 + 64);
      v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
      float32x4_t v19 = vmulq_f32(v12, v10[20]);
      v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
      *(int8x8_t *)v13.f32 = vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)), 4uLL);
      v13.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32)).u32[0];
      float32x4_t v20 = vsubq_f32(a3[v9], v13);
      a3[v9] = v20;
      float32x4_t v21 = v10[14];
      float32x4_t v22 = vmulq_laneq_f32(v10[13], v20, 2);
      v22.i32[3] = 0;
      float32x4_t v23 = v10[12];
      float32x4_t v24 = vmlaq_lane_f32(v22, v10[11], *(float32x2_t *)v20.f32, 1);
      v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
      float32x4_t v25 = v10[10];
      float32x4_t v26 = vmlaq_n_f32(v24, v10[9], v20.f32[0]);
      v26.i64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
      float v27 = &v104 + 2 * v18;
      float32x4_t v28 = vmulq_laneq_f32(v21, v20, 2);
      v28.i32[3] = 0;
      float32x4_t v29 = vmlaq_lane_f32(v28, v23, *(float32x2_t *)v20.f32, 1);
      v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
      float32x4_t v30 = vmlaq_n_f32(v29, v25, v20.f32[0]);
      v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
      float32x4_t v31 = vsubq_f32(*v27, v26);
      float32x4_t v32 = vsubq_f32(v27[1], v30);
      *float v27 = v31;
      v27[1] = v32;
    }
    while ((unint64_t)(v9-- & 0xFFFFFFFE));
    LODWORD(v8) = *a1;
  }
  float32x4_t v34 = vmulq_n_f32(*v7, v104.f32[0]);
  v34.i32[3] = 0;
  float32x4_t v35 = vmulq_lane_f32(v7[1], *(float32x2_t *)v104.f32, 1);
  v35.i32[3] = 0;
  float32x4_t v36 = v7[3];
  float32x4_t v37 = vmulq_laneq_f32(v7[2], v104, 2);
  v37.i32[3] = 0;
  float32x4_t v38 = vaddq_f32(v34, v35);
  float32x4_t v39 = vmulq_n_f32(v36, v105.f32[0]);
  v39.i32[3] = 0;
  float32x4_t v40 = v7[4];
  float32x4_t v41 = v7[5];
  float32x4_t v42 = vmulq_lane_f32(v40, *(float32x2_t *)v105.f32, 1);
  v42.i32[3] = 0;
  float32x4_t v43 = vmulq_laneq_f32(v41, v105, 2);
  v43.i32[3] = 0;
  float32x4_t result = vaddq_f32(vaddq_f32(v38, v37), vaddq_f32(vaddq_f32(v39, v42), v43));
  float32x4_t v45 = vmulq_f32(v104, v36);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  float32x4_t v46 = vmulq_f32(v104, v40);
  v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
  float32x4_t v47 = vmulq_f32(v104, v41);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), 4uLL);
  v45.i64[1] = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32).u32[0];
  float32x4_t v48 = vmulq_n_f32(v7[6], v105.f32[0]);
  v48.i32[3] = 0;
  float32x4_t v49 = vmulq_lane_f32(v7[7], *(float32x2_t *)v105.f32, 1);
  v49.i32[3] = 0;
  float32x4_t v50 = vmulq_laneq_f32(v7[8], v105, 2);
  v50.i32[3] = 0;
  float32x4_t v104 = result;
  float32x4_t v105 = vaddq_f32(vaddq_f32(vaddq_f32(v48, v49), v50), v45);
  if (v8 >= 2)
  {
    uint64_t v51 = v8 - 1;
    uint64_t v52 = (uint64_t)a1 + v6 + 400;
    unsigned int v53 = (unsigned __int8 *)a1 + 65;
    float v54 = a3 + 1;
    float v55 = (float32x2_t *)v106;
    do
    {
      unsigned int v57 = *v53++;
      uint64_t v56 = v57;
      float32x4_t v58 = *v54++;
      float32x4_t v59 = vmulq_n_f32(*(float32x4_t *)(v52 + 336), v58.f32[0]);
      v59.i32[3] = 0;
      float32x4_t v60 = vmulq_lane_f32(*(float32x4_t *)(v52 + 352), *(float32x2_t *)v58.f32, 1);
      v60.i32[3] = 0;
      float32x4_t v61 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 368), v58, 2);
      v61.i32[3] = 0;
      float v62 = &v104 + 2 * v56;
      float32x4_t v63 = v62[1];
      float32x4_t v64 = vmulq_f32(*(float32x4_t *)(v52 + 144), *v62);
      v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
      float32x4_t v65 = vaddq_f32(v59, v60);
      *(float32x2_t *)v60.f32 = vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32);
      float32x4_t v66 = vmulq_f32(*(float32x4_t *)(v52 + 160), v63);
      v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
      float32x4_t v67 = vmulq_f32(*v62, *(float32x4_t *)(v52 + 176));
      v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
      float32x4_t v68 = vmulq_f32(v63, *(float32x4_t *)(v52 + 192));
      v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
      float32x4_t v69 = vmulq_f32(*v62, *(float32x4_t *)(v52 + 208));
      v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
      float32x4_t v70 = vmulq_f32(v63, *(float32x4_t *)(v52 + 224));
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v60.f32, vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32)), (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32), vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32)), 4uLL);
      v60.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32)).u32[0];
      float32x4_t v71 = *(float32x4_t *)v55[-2].f32;
      float32x4_t v72 = vmulq_n_f32(*(float32x4_t *)v52, v71.f32[0]);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_lane_f32(*(float32x4_t *)(v52 + 16), *(float32x2_t *)v71.f32, 1);
      float32x4_t v74 = *(float32x4_t *)(v52 + 48);
      float32x4_t v75 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 32), v71, 2);
      v73.i32[3] = 0;
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_n_f32(v74, COERCE_FLOAT(*(_OWORD *)v55->f32));
      v76.i32[3] = 0;
      float32x4_t v77 = vaddq_f32(v65, v61);
      float32x4_t v78 = *(float32x4_t *)(v52 + 64);
      float32x4_t v79 = *(float32x4_t *)(v52 + 80);
      float32x4_t v80 = vmulq_lane_f32(v78, *v55, 1);
      v80.i32[3] = 0;
      float32x4_t v81 = vaddq_f32(v72, v73);
      float32x4_t v82 = vmulq_laneq_f32(v79, *(float32x4_t *)v55->f32, 2);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_f32(v71, v74);
      v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
      float32x4_t v84 = vmulq_f32(v71, v78);
      v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
      float32x4_t v85 = vaddq_f32(v81, v75);
      float32x4_t v86 = vmulq_f32(v71, v79);
      v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
      float32x4_t v87 = vmulq_n_f32(*(float32x4_t *)(v52 + 96), COERCE_FLOAT(*(_OWORD *)v55->f32));
      v87.i32[3] = 0;
      float32x4_t v88 = vaddq_f32(v85, vaddq_f32(vaddq_f32(v76, v80), v82));
      *(int8x8_t *)v84.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32), 4uLL);
      float32x4_t v89 = vmulq_lane_f32(*(float32x4_t *)(v52 + 112), *v55, 1);
      v89.i32[3] = 0;
      float32x4_t v90 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 128), *(float32x4_t *)v55->f32, 2);
      float32x4_t v91 = vsubq_f32(v77, v60);
      v90.i32[3] = 0;
      float32x4_t v92 = vaddq_f32(v87, v89);
      v84.i64[1] = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32).u32[0];
      float32x4_t v93 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 304), v91, 2);
      v93.i32[3] = 0;
      float32x4_t v94 = vmlaq_lane_f32(v93, *(float32x4_t *)(v52 + 272), *(float32x2_t *)v91.f32, 1);
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      float32x4_t v95 = vmlaq_n_f32(v94, *(float32x4_t *)(v52 + 240), v91.f32[0]);
      float32x4_t v96 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 320), v91, 2);
      v96.i32[3] = 0;
      float32x4_t v97 = vmlaq_lane_f32(v96, *(float32x4_t *)(v52 + 288), *(float32x2_t *)v91.f32, 1);
      v97.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u32[0];
      float32x4_t v98 = vmlaq_n_f32(v97, *(float32x4_t *)(v52 + 256), v91.f32[0]);
      v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
      v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
      float32x4_t result = vsubq_f32(v88, v95);
      *(float32x4_t *)v55[-2].f32 = result;
      *(float32x4_t *)v55->f32 = vsubq_f32(vaddq_f32(vaddq_f32(v92, v90), v84), v98);
      v52 += 400;
      v55 += 4;
      --v51;
    }
    while (v51);
  }
  if (v8)
  {
    unint64_t v99 = 0;
    int8x8_t v100 = &v105;
    float32x4_t v101 = a2 + 1;
    do
    {
      float32x4_t v102 = vsubq_f32(v101[-1], v100[-1]);
      float32x4_t v103 = *v100;
      v100 += 2;
      float32x4_t result = vsubq_f32(*v101, v103);
      v101[-1] = v102;
      *float32x4_t v101 = result;
      ++v99;
      v101 += 2;
    }
    while (v99 < *a1);
  }
  return result;
}

void physx::Dy::PxcFsComputeJointLoadsSimd(unsigned __int16 *a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t *a7)
{
  uint64_t v600 = *MEMORY[0x263EF8340];
  if (a6)
  {
    unsigned int v7 = a5;
    uint64_t v8 = a3;
    unint64_t v545 = a5;
    if (a5 >= 2)
    {
      uint64_t v9 = a5 - 1;
      float32x2_t v10 = (float32x2_t *)&v582;
      int8x8_t v11 = (const float *)(a4 + 4);
      do
      {
        float32x2_t v12 = vld1_dup_f32(v11++);
        *v10++ = v12;
        --v9;
      }
      while (v9);
    }
    uint64_t v13 = *a7;
    uint64_t v14 = a7[2];
    float32x4_t v15 = (char *)(*a7 + v14);
    uint64_t v16 = v14 + 144 * a5;
    a7[2] = v16 + 144 * a5;
    uint64_t v17 = *a1;
    uint64_t v18 = (uint64_t)&a1[200 * v17] + a1[8];
    float32x4_t v19 = (char *)a1 + a1[1];
    if (a5)
    {
      float32x4_t v20 = (unsigned __int8 *)(a1 + 32);
      float32x4_t v21 = v581;
      uint64_t v22 = a5;
      do
      {
        unsigned int v23 = *v20++;
        *v21++ = v23;
        --v22;
      }
      while (v22);
    }
    uint64_t v24 = v13 + v16;
    uint64_t v25 = v18 + 32 * v17;
    size_t __n = 144 * a5;
    __asm { FMOV            V9.2S, #1.0 }
    v543 = v19;
    uint64_t v541 = v25;
    uint64_t v542 = v13 + v16;
    do
    {
      int v540 = a6;
      memcpy(v15, a2, __n);
      if (v7 >= 2)
      {
        unint64_t v31 = v545;
        do
        {
          uint64_t v32 = (v31-- - 2);
          _X9 = v8 + 48 * v32;
          __asm { PRFM            #0, [X9] }
          _X8 = &v19[32 * v32];
          __asm { PRFM            #0, [X8] }
          float32x4_t v37 = (float32x4_t *)&v15[144 * v31];
          int32x2_t v576 = (int32x2_t)v581[v31 + 64];
          float32x4_t v38 = (float32x4_t *)(v8 + 48 * v31);
          *(int8x8_t *)v39.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v37, (float32x2_t *)(v25 + 96 * v31), &v583);
          float32x4_t v42 = (float32x4_t)vdupq_lane_s32(v576, 0);
          float32x4_t v43 = vmlaq_n_f32(v39, *v38, *(float *)v576.i32);
          float32x2_t v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0);
          float32x2_t v45 = vrecpe_f32(v44);
          int v46 = 4;
          do
          {
            float32x2_t v45 = vmul_f32(v45, vrecps_f32(v44, v45));
            --v46;
          }
          while (v46);
          int32x4_t v47 = (int32x4_t)vmlaq_f32(v40, v42, v38[1]);
          float32x2_t v48 = vmax_f32(v45, 0);
          float32x2_t v49 = vrsqrte_f32(v48);
          int v50 = 4;
          do
          {
            float32x2_t v49 = vmul_f32(v49, vrsqrts_f32(vmul_f32(v49, v49), v48));
            --v50;
          }
          while (v50);
          float32x2_t v51 = vmul_f32(v48, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v48), 0), _D9, (int8x8_t)v49));
          float32x4_t v52 = vmulq_n_f32(v43, v51.f32[0]);
          float32x2_t v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1);
          float32x2_t v54 = vneg_f32(v53);
          float32x2_t v55 = vmls_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), v53, *(float32x2_t *)v52.f32, 1);
          float32x2_t v56 = vrecpe_f32(v55);
          int v57 = 4;
          do
          {
            float32x2_t v56 = vmul_f32(v56, vrecps_f32(v55, v56));
            --v57;
          }
          while (v57);
          int32x4_t v58 = (int32x4_t)vmlaq_f32(v41, v42, v38[2]);
          float32x2_t v59 = vmax_f32(v56, 0);
          float32x2_t v60 = vrsqrte_f32(v59);
          int v61 = 4;
          do
          {
            float32x2_t v60 = vmul_f32(v60, vrsqrts_f32(vmul_f32(v60, v60), v59));
            --v61;
          }
          while (v61);
          float32x2_t v62 = (float32x2_t)vdup_laneq_s32(v58, 2);
          float32x2_t v63 = vmul_f32(v59, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v59), 0), _D9, (int8x8_t)v60));
          float32x2_t v64 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
          float32x2_t v65 = vmul_f32(vmla_laneq_f32((float32x2_t)vdup_laneq_s32(v47, 2), v54, v52, 2), v63);
          float32x2_t v66 = vneg_f32(v65);
          float32x2_t v67 = vneg_f32(v64);
          float32x2_t v68 = vmls_laneq_f32(vmls_f32(v62, v65, v65), v64, v52, 2);
          float32x2_t v69 = vrecpe_f32(v68);
          int v70 = 4;
          do
          {
            float32x2_t v69 = vmul_f32(v69, vrecps_f32(v68, v69));
            --v70;
          }
          while (v70);
          float32x2_t v71 = vmax_f32(v69, 0);
          float32x2_t v72 = vrsqrte_f32(v71);
          int v73 = 4;
          do
          {
            float32x2_t v72 = vmul_f32(v72, vrsqrts_f32(vmul_f32(v72, v72), v71));
            --v73;
          }
          while (v73);
          float32x2_t v74 = vmul_f32(v71, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v71), 0), _D9, (int8x8_t)v72));
          float32x2_t v75 = vmul_f32(vmul_lane_f32(v51, *(float32x2_t *)v52.f32, 1), v63);
          float32x2_t v76 = (float32x2_t)vext_s8((int8x8_t)vneg_f32(v75), (int8x8_t)v63, 4uLL);
          *(int8x8_t *)v77.f32 = vext_s8((int8x8_t)vmul_f32(vmla_f32(vmul_f32(v65, v75), v51, v67), v74), (int8x8_t)vmul_f32(vmul_f32(v63, v74), v66), 4uLL);
          v77.i64[1] = v74.u32[0];
          float32x4_t v78 = vmulq_lane_f32(v583, v51, 1);
          float32x4_t v79 = v78;
          v79.i32[3] = 0;
          float32x4_t v80 = vmulq_lane_f32(v584, v51, 1);
          float32x4_t v81 = v80;
          v81.i32[3] = 0;
          float32x4_t v82 = vmulq_lane_f32(v585, v76, 1);
          v82.i32[3] = 0;
          float32x4_t v83 = vmlaq_n_f32(v82, v583, v76.f32[0]);
          v84.i64[0] = v83.i64[0];
          v84.i64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u32[0];
          float32x4_t v85 = vmulq_lane_f32(v586, v76, 1);
          v85.i32[3] = 0;
          float32x4_t v86 = vmlaq_n_f32(v85, v584, v76.f32[0]);
          v87.i64[0] = v86.i64[0];
          v87.i64[1] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u32[0];
          float32x4_t v88 = vmulq_laneq_f32(v587, v77, 2);
          v88.i32[3] = 0;
          float32x4_t v89 = vmlaq_lane_f32(v88, v585, *(float32x2_t *)v77.f32, 1);
          v89.i64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u32[0];
          float32x4_t v90 = vmlaq_n_f32(v89, v583, v77.f32[0]);
          v91.i64[0] = v90.i64[0];
          v91.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
          float32x4_t v92 = vmulq_laneq_f32(v588, v77, 2);
          v92.i32[3] = 0;
          float32x4_t v93 = vmlaq_lane_f32(v92, v586, *(float32x2_t *)v77.f32, 1);
          v93.i64[1] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u32[0];
          float32x4_t v94 = vmlaq_n_f32(v93, v584, v77.f32[0]);
          v95.i64[0] = v94.i64[0];
          v95.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
          float32x4_t v96 = (float32x4_t *)&v15[144 * v31];
          float32x4_t v97 = vmlsq_lane_f32(*v37, v79, *(float32x2_t *)v78.f32, 0);
          v97.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u32[0];
          float32x4_t v98 = vmlsq_lane_f32(v96[3], v79, *(float32x2_t *)v80.f32, 0);
          v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
          float32x4_t v99 = vmlsq_lane_f32(v96[6], v81, *(float32x2_t *)v80.f32, 0);
          v99.i64[1] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u32[0];
          float32x4_t v100 = vmlsq_lane_f32(v37[1], v79, *(float32x2_t *)v78.f32, 1);
          v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
          float32x4_t v101 = vmlsq_lane_f32(v96[4], v79, *(float32x2_t *)v80.f32, 1);
          v101.i64[1] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u32[0];
          float32x4_t v102 = vmlsq_lane_f32(v96[7], v81, *(float32x2_t *)v80.f32, 1);
          v102.i64[1] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u32[0];
          float32x4_t v103 = vmlsq_laneq_f32(v37[2], v79, v78, 2);
          v103.i64[1] = vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL).u32[0];
          float32x4_t v104 = vmlsq_laneq_f32(v96[5], v79, v80, 2);
          v104.i64[1] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u32[0];
          float32x4_t v105 = vmlsq_laneq_f32(v96[8], v81, v80, 2);
          v105.i64[1] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u32[0];
          float32x4_t v106 = vmlsq_lane_f32(v97, v84, *(float32x2_t *)v83.f32, 0);
          v106.i64[1] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u32[0];
          float32x4_t v107 = vmlsq_lane_f32(v98, v84, *(float32x2_t *)v86.f32, 0);
          v107.i64[1] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u32[0];
          float32x4_t v108 = vmlsq_lane_f32(v99, v87, *(float32x2_t *)v86.f32, 0);
          v108.i64[1] = vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL).u32[0];
          float32x4_t v109 = vmlsq_lane_f32(v100, v84, *(float32x2_t *)v83.f32, 1);
          v109.i64[1] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u32[0];
          float32x4_t v110 = vmlsq_lane_f32(v101, v84, *(float32x2_t *)v86.f32, 1);
          v110.i64[1] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u32[0];
          float32x4_t v111 = vmlsq_lane_f32(v102, v87, *(float32x2_t *)v86.f32, 1);
          v111.i64[1] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
          float32x4_t v112 = vmlsq_laneq_f32(v103, v84, v83, 2);
          v112.i64[1] = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u32[0];
          float32x4_t v113 = vmlsq_laneq_f32(v104, v84, v86, 2);
          v113.i64[1] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u32[0];
          float32x4_t v114 = vmlsq_laneq_f32(v105, v87, v86, 2);
          v114.i64[1] = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u32[0];
          float32x4_t v115 = vmlsq_lane_f32(v106, v91, *(float32x2_t *)v90.f32, 0);
          v115.i64[1] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u32[0];
          float32x4_t v116 = vmlsq_lane_f32(v107, v91, *(float32x2_t *)v94.f32, 0);
          float32x4_t v117 = *(float32x4_t *)&v19[32 * v31];
          float32x4_t v118 = vnegq_f32(v117);
          float32x4_t v119 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.f32, 1);
          *(int8x8_t *)v80.f32 = vext_s8(0, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL), 4uLL);
          v80.i64[1] = v119.u32[0];
          *(int8x8_t *)v81.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v118, 2), 0, 4uLL);
          v81.i64[1] = vdupq_lane_s32(*(int32x2_t *)v117.f32, 0).u32[0];
          *(int8x8_t *)v119.f32 = vext_s8(*(int8x8_t *)v117.f32, *(int8x8_t *)v118.f32, 4uLL);
          float32x4_t v120 = vmulq_laneq_f32(v119, v116, 2);
          v120.i32[3] = 0;
          float32x4_t v121 = vmlaq_lane_f32(v120, v81, *(float32x2_t *)v116.f32, 1);
          v121.i64[1] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u32[0];
          float32x4_t v122 = vmlaq_n_f32(v121, v80, v116.f32[0]);
          v116.i64[1] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u32[0];
          float32x4_t v123 = vmlsq_lane_f32(v108, v95, *(float32x2_t *)v94.f32, 0);
          v123.i64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u32[0];
          float32x4_t v124 = vmlsq_lane_f32(v109, v91, *(float32x2_t *)v90.f32, 1);
          v124.i64[1] = vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).u32[0];
          float32x4_t v125 = vmlsq_lane_f32(v110, v91, *(float32x2_t *)v94.f32, 1);
          v86.i64[0] = v125.i64[0];
          v86.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
          float32x4_t v126 = vmlsq_lane_f32(v111, v95, *(float32x2_t *)v94.f32, 1);
          v126.i64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u32[0];
          float32x4_t v127 = vmlsq_laneq_f32(v112, v91, v90, 2);
          v127.i64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u32[0];
          float32x4_t v128 = vmulq_laneq_f32(v119, v125, 2);
          float32x4_t v129 = vmlsq_laneq_f32(v113, v91, v94, 2);
          v90.i64[0] = v129.i64[0];
          v90.i64[1] = vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL).u32[0];
          float32x4_t v130 = vmlsq_laneq_f32(v114, v95, v94, 2);
          v130.i64[1] = vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u32[0];
          v128.i32[3] = 0;
          float32x4_t v131 = vmlaq_lane_f32(v128, v81, *(float32x2_t *)v125.f32, 1);
          v131.i64[1] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
          float32x4_t v132 = vmlaq_n_f32(v131, v80, v125.f32[0]);
          v122.i64[1] = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u32[0];
          float32x4_t v133 = vmulq_laneq_f32(v119, v129, 2);
          v133.i32[3] = 0;
          float32x4_t v134 = vmlaq_lane_f32(v133, v81, *(float32x2_t *)v129.f32, 1);
          v134.i64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u32[0];
          float32x4_t v135 = vmlaq_n_f32(v134, v80, v129.f32[0]);
          v132.i64[1] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u32[0];
          v135.i64[1] = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u32[0];
          float32x4_t v136 = vmulq_laneq_f32(v124, v118, 2);
          v136.i32[3] = 0;
          float32x4_t v137 = vmlaq_lane_f32(v136, v127, *(float32x2_t *)v117.f32, 1);
          v129.i64[0] = v137.i64[0];
          v129.i64[1] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u32[0];
          float32x4_t v138 = vmulq_n_f32(v80, v137.f32[0]);
          float32x4_t v139 = vmulq_n_f32(v127, v118.f32[0]);
          v139.i32[3] = 0;
          v138.i32[3] = 0;
          float32x4_t v140 = vmlaq_lane_f32(v138, v81, *(float32x2_t *)v137.f32, 1);
          v140.i64[1] = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u32[0];
          float32x4_t v141 = vmlaq_laneq_f32(v140, v119, v137, 2);
          float32x4_t v142 = vmlaq_laneq_f32(v139, v115, v117, 2);
          float32x4_t v143 = vmulq_n_f32(v80, v142.f32[0]);
          v137.i64[0] = v142.i64[0];
          v137.i64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u32[0];
          float32x4_t v144 = vmulq_lane_f32(v115, *(float32x2_t *)v118.f32, 1);
          v144.i32[3] = 0;
          float32x4_t v145 = vmlaq_n_f32(v144, v124, v117.f32[0]);
          v143.i32[3] = 0;
          float32x4_t v146 = vmlaq_lane_f32(v143, v81, *(float32x2_t *)v142.f32, 1);
          v146.i64[1] = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u32[0];
          float32x4_t v147 = vmlaq_laneq_f32(v146, v119, v142, 2);
          float32x4_t v148 = vmulq_n_f32(v80, v145.f32[0]);
          v142.i64[0] = v145.i64[0];
          v142.i64[1] = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u32[0];
          v141.i64[1] = vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u32[0];
          v148.i32[3] = 0;
          float32x4_t v149 = vmlaq_lane_f32(v148, v81, *(float32x2_t *)v145.f32, 1);
          v149.i64[1] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u32[0];
          float32x4_t v150 = vmlaq_laneq_f32(v149, v119, v145, 2);
          v147.i64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u32[0];
          v150.i64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u32[0];
          v151.i64[0] = 0x3F0000003F000000;
          v151.i64[1] = 0x3F0000003F000000;
          float32x4_t v152 = vmlaq_f32(v122, v151, v141);
          float32x4_t v153 = vmlaq_f32(v132, v151, v147);
          *(int8x8_t *)v81.f32 = vext_s8(*(int8x8_t *)v152.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v153.f32, 1), 4uLL);
          *(int32x2_t *)v117.f32 = vdup_laneq_s32((int32x4_t)v152, 2);
          v152.i64[1] = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
          v119.i64[0] = vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u64[0];
          *(int8x8_t *)v80.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v152.f32, 0), *(int8x8_t *)v153.f32, 4uLL);
          v153.i64[1] = v119.u32[0];
          float32x4_t v154 = vmlaq_f32(v135, v151, v150);
          *(int8x8_t *)v119.f32 = vext_s8(*(int8x8_t *)v117.f32, *(int8x8_t *)v119.f32, 4uLL);
          v117.i32[0] = vdup_laneq_s32((int32x4_t)v154, 2).u32[0];
          v154.i64[1] = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u32[0];
          v80.i64[1] = vdup_lane_s32(*(int32x2_t *)v154.f32, 0).u32[0];
          v81.i64[1] = vdup_lane_s32(*(int32x2_t *)v154.f32, 1).u32[0];
          v119.i64[1] = v117.u32[0];
          float32x4_t v155 = (float32x4_t *)&v15[144 * v581[v31]];
          float32x4_t v156 = vaddq_f32(v152, v80);
          float32x4_t v157 = vaddq_f32(v155[3], vaddq_f32(v116, v129));
          float32x4_t v158 = v155[8];
          float32x4_t v159 = vaddq_f32(v126, vaddq_f32(v153, v81));
          float32x4_t v160 = vaddq_f32(v155[1], v124);
          float32x4_t v161 = vaddq_f32(v155[2], v127);
          float32x4_t v162 = vaddq_f32(v155[4], vaddq_f32(v86, v137));
          float32x4_t v163 = vaddq_f32(v155[5], vaddq_f32(v90, v142));
          float32x4_t v164 = vaddq_f32(v155[6], vaddq_f32(v123, v156));
          float32x4_t v165 = vaddq_f32(v155[7], v159);
          *float32x4_t v155 = vaddq_f32(*v155, v115);
          v155[1] = v160;
          v155[2] = v161;
          v155[3] = v157;
          v155[4] = v162;
          v155[5] = v163;
          v155[6] = v164;
          v155[7] = v165;
          v155[8] = vaddq_f32(v158, vaddq_f32(v130, vaddq_f32(v154, v119)));
          float32x4_t v166 = (float32x4_t *)(v24 + 144 * v31);
          float32x4_t *v166 = v115;
          v166[1] = v124;
          v166[2] = v127;
          v166[3] = v116;
          v166[4] = v86;
          v166[5] = v90;
          v166[6] = v123;
          v166[7] = v126;
          v166[8] = v130;
        }
        while (v31 > 1);
        uint64_t v167 = 1;
        do
        {
          float32x4_t v168 = *(float32x4_t *)&v19[32 * v167];
          int8x16_t v169 = (int8x16_t)vnegq_f32(v168);
          float32x4_t v170 = (float32x4_t)v169;
          v170.i32[3] = 0;
          float32x4_t v171 = (float32x4_t *)&v15[144 * v581[v167]];
          float32x4_t v172 = vnegq_f32(v170);
          float32x4_t v173 = v171[4];
          float32x4_t v174 = v171[5];
          float32x4_t v175 = *v171;
          float32x4_t v176 = v171[1];
          *(int8x8_t *)v177.f32 = vext_s8(0, (int8x8_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL), 4uLL);
          v177.i64[1] = vdupq_lane_s32(*(int32x2_t *)v172.f32, 1).u32[0];
          *(int8x8_t *)v178.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v172, 2), 0, 4uLL);
          v178.i64[1] = vdupq_lane_s32(*(int32x2_t *)v169.i8, 0).u32[0];
          float32x4_t v179 = v171[2];
          float32x4_t v180 = v171[3];
          int8x8_t v181 = vext_s8(*(int8x8_t *)v169.i8, *(int8x8_t *)v172.f32, 4uLL);
          float32x4_t v182 = vmulq_laneq_f32((float32x4_t)(unint64_t)v181, v180, 2);
          v182.i32[3] = 0;
          float32x4_t v183 = vmlaq_lane_f32(v182, v178, *(float32x2_t *)v180.f32, 1);
          v183.i64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u32[0];
          float32x4_t v184 = vmlaq_n_f32(v183, v177, v180.f32[0]);
          v184.i64[1] = vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL).u32[0];
          float32x4_t v185 = vmulq_laneq_f32((float32x4_t)(unint64_t)v181, v173, 2);
          v185.i32[3] = 0;
          float32x4_t v186 = vmlaq_lane_f32(v185, v178, *(float32x2_t *)v173.f32, 1);
          v186.i64[1] = vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u32[0];
          float32x4_t v187 = vmlaq_n_f32(v186, v177, v173.f32[0]);
          v187.i64[1] = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u32[0];
          float32x4_t v188 = vmulq_laneq_f32((float32x4_t)(unint64_t)v181, v174, 2);
          v188.i32[3] = 0;
          float32x4_t v189 = vmlaq_lane_f32(v188, v178, *(float32x2_t *)v174.f32, 1);
          v189.i64[1] = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u32[0];
          float32x4_t v190 = vmlaq_n_f32(v189, v177, v174.f32[0]);
          v190.i64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u32[0];
          float32x4_t v191 = vmulq_laneq_f32(v176, v172, 2);
          v191.i32[3] = 0;
          float32x4_t v192 = vmlsq_lane_f32(v191, v179, *(float32x2_t *)v168.f32, 1);
          float32x4_t v193 = vmulq_n_f32(v177, v192.f32[0]);
          v194.i64[0] = v192.i64[0];
          v194.i64[1] = vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL).u32[0];
          v193.i32[3] = 0;
          float32x4_t v195 = vmlaq_lane_f32(v193, v178, *(float32x2_t *)v192.f32, 1);
          v195.i64[1] = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u32[0];
          float32x4_t v196 = vmlaq_laneq_f32(v195, (float32x4_t)(unint64_t)v181, v192, 2);
          float32x4_t v197 = vmulq_n_f32(v179, v172.f32[0]);
          v197.i32[3] = 0;
          float32x4_t v198 = vmlsq_laneq_f32(v197, *v171, v168, 2);
          v192.i64[0] = v198.i64[0];
          v192.i64[1] = vextq_s8((int8x16_t)v198, (int8x16_t)v198, 8uLL).u32[0];
          float32x4_t v199 = vmulq_lane_f32(*v171, *(float32x2_t *)v172.f32, 1);
          v199.i32[3] = 0;
          float32x4_t v200 = vmlsq_lane_f32(v199, v176, *(float32x2_t *)v168.f32, 0);
          float32x4_t v201 = vmulq_n_f32(v177, v198.f32[0]);
          v168.i64[0] = v200.i64[0];
          v168.i64[1] = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u32[0];
          v201.i32[3] = 0;
          float32x4_t v202 = vmlaq_lane_f32(v201, v178, *(float32x2_t *)v198.f32, 1);
          v202.i64[1] = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u32[0];
          float32x4_t v203 = vmlaq_laneq_f32(v202, (float32x4_t)(unint64_t)v181, v198, 2);
          v196.i64[1] = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u32[0];
          float32x4_t v204 = vmulq_n_f32(v177, v200.f32[0]);
          v204.i32[3] = 0;
          float32x4_t v205 = vmlaq_lane_f32(v204, v178, *(float32x2_t *)v200.f32, 1);
          v205.i64[1] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u32[0];
          float32x4_t v206 = vmlaq_laneq_f32(v205, (float32x4_t)(unint64_t)v181, v200, 2);
          v203.i64[1] = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u32[0];
          v206.i64[1] = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u32[0];
          v200.i64[0] = 0x3F0000003F000000;
          v200.i64[1] = 0x3F0000003F000000;
          float32x4_t v207 = vmlaq_f32(v184, v200, v196);
          float32x4_t v208 = vmlaq_f32(v187, v200, v203);
          *(int8x8_t *)v203.f32 = vext_s8(*(int8x8_t *)v207.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v208.f32, 1), 4uLL);
          *(int32x2_t *)v196.f32 = vdup_laneq_s32((int32x4_t)v207, 2);
          v207.i64[1] = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u32[0];
          int8x8_t v209 = (int8x8_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u64[0];
          *(int8x8_t *)v178.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v207.f32, 0), *(int8x8_t *)v208.f32, 4uLL);
          v208.i64[1] = v209.u32[0];
          float32x4_t v210 = vmlaq_f32(v190, v200, v206);
          *(int8x8_t *)v211.f32 = vext_s8(*(int8x8_t *)v196.f32, v209, 4uLL);
          unsigned __int32 v212 = vdup_laneq_s32((int32x4_t)v210, 2).u32[0];
          v210.i64[1] = vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL).u32[0];
          float32x4_t v213 = v171[8];
          v178.i64[1] = vdup_lane_s32(*(int32x2_t *)v210.f32, 0).u32[0];
          v203.i64[1] = vdup_lane_s32(*(int32x2_t *)v210.f32, 1).u32[0];
          v211.i64[1] = v212;
          float32x4_t v214 = vaddq_f32(v174, v168);
          float32x4_t v215 = vaddq_f32(v171[6], vaddq_f32(v207, v178));
          float32x4_t v216 = vaddq_f32(v171[7], vaddq_f32(v208, v203));
          float32x4_t v217 = (float32x4_t *)(v24 + 144 * v167);
          float32x4_t v218 = vaddq_f32(v213, vaddq_f32(v210, v211));
          float32x4_t v219 = vsubq_f32(v175, *v217);
          float32x4_t v220 = vsubq_f32(v176, v217[1]);
          float32x4_t v221 = vsubq_f32(v179, v217[2]);
          float32x4_t v222 = vsubq_f32(vaddq_f32(v180, v194), v217[3]);
          float32x4_t v223 = vsubq_f32(vaddq_f32(v173, v192), v217[4]);
          float32x4_t v224 = vsubq_f32(v214, v217[5]);
          float32x4_t v225 = vsubq_f32(v215, v217[6]);
          float32x4_t v226 = vsubq_f32(v216, v217[7]);
          float32x4_t v227 = vsubq_f32(v218, v217[8]);
          float32x4_t v556 = v220;
          float32x4_t v557 = v219;
          v580[0] = v219;
          v580[1] = v220;
          float32x4_t v558 = v221;
          float32x4_t v559 = v222;
          v580[2] = v221;
          v580[3] = v222;
          float32x4_t v560 = v223;
          float32x4_t v561 = v224;
          v580[4] = v223;
          v580[5] = v224;
          float32x4_t v562 = v225;
          float32x4_t v563 = v226;
          v580[6] = v225;
          v580[7] = v226;
          float32x4_t v564 = v227;
          v580[8] = v227;
          int32x2_t v577 = (int32x2_t)v581[v167 + 64];
          float32x4_t v228 = (float32x2_t *)(v25 + 96 * v167);
          int8x16_t v229 = (float32x4_t *)(v8 + 48 * v167);
          *(int8x8_t *)v230.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v580, v228, &v583);
          float32x4_t v233 = (float32x4_t)vdupq_lane_s32(v577, 0);
          float32x4_t v234 = vmlaq_n_f32(v230, *v229, *(float *)v577.i32);
          float32x2_t v235 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v234.f32, 0);
          float32x2_t v236 = vrecpe_f32(v235);
          int v237 = 4;
          do
          {
            float32x2_t v236 = vmul_f32(v236, vrecps_f32(v235, v236));
            --v237;
          }
          while (v237);
          int32x4_t v238 = (int32x4_t)vmlaq_f32(v231, v233, v229[1]);
          float32x2_t v239 = vmax_f32(v236, 0);
          float32x2_t v240 = vrsqrte_f32(v239);
          int v241 = 4;
          do
          {
            float32x2_t v240 = vmul_f32(v240, vrsqrts_f32(vmul_f32(v240, v240), v239));
            --v241;
          }
          while (v241);
          float32x2_t v242 = vmul_f32(v239, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v239), 0), _D9, (int8x8_t)v240));
          float32x4_t v243 = vmulq_n_f32(v234, v242.f32[0]);
          float32x2_t v244 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v243.f32, 1);
          float32x2_t v245 = vneg_f32(v244);
          float32x2_t v246 = vmls_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v238.i8, 1), v244, *(float32x2_t *)v243.f32, 1);
          float32x2_t v247 = vrecpe_f32(v246);
          int v248 = 4;
          do
          {
            float32x2_t v247 = vmul_f32(v247, vrecps_f32(v246, v247));
            --v248;
          }
          while (v248);
          int32x4_t v249 = (int32x4_t)vmlaq_f32(v232, v233, v229[2]);
          float32x2_t v250 = vmax_f32(v247, 0);
          float32x2_t v251 = vrsqrte_f32(v250);
          int v252 = 4;
          do
          {
            float32x2_t v251 = vmul_f32(v251, vrsqrts_f32(vmul_f32(v251, v251), v250));
            --v252;
          }
          while (v252);
          float32x2_t v253 = (float32x2_t)vdup_laneq_s32(v249, 2);
          float32x2_t v254 = vmul_f32(v250, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v250), 0), _D9, (int8x8_t)v251));
          float32x2_t v255 = (float32x2_t)vdup_laneq_s32((int32x4_t)v243, 2);
          float32x2_t v256 = vmul_f32(vmla_laneq_f32((float32x2_t)vdup_laneq_s32(v238, 2), v245, v243, 2), v254);
          float32x2_t v257 = vneg_f32(v256);
          float32x2_t v258 = vneg_f32(v255);
          float32x2_t v259 = vmls_laneq_f32(vmls_f32(v253, v256, v256), v255, v243, 2);
          float32x2_t v260 = vrecpe_f32(v259);
          int v261 = 4;
          do
          {
            float32x2_t v260 = vmul_f32(v260, vrecps_f32(v259, v260));
            --v261;
          }
          while (v261);
          float32x2_t v262 = vmax_f32(v260, 0);
          float32x2_t v263 = vrsqrte_f32(v262);
          int v264 = 4;
          do
          {
            float32x2_t v263 = vmul_f32(v263, vrsqrts_f32(vmul_f32(v263, v263), v262));
            --v264;
          }
          while (v264);
          float32x2_t v265 = vmul_f32(v262, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v262), 0), _D9, (int8x8_t)v263));
          float32x2_t v266 = vmul_f32(vmul_lane_f32(v242, *(float32x2_t *)v243.f32, 1), v254);
          int8x8_t v267 = (int8x8_t)vmul_f32(vmla_f32(vmul_f32(v256, v266), v242, v258), v265);
          float32x2_t v268 = (float32x2_t)vext_s8((int8x8_t)vneg_f32(v266), (int8x8_t)v254, 4uLL);
          *(int8x8_t *)v269.f32 = vext_s8(v267, (int8x8_t)vmul_f32(vmul_f32(v254, v265), v257), 4uLL);
          v269.i64[1] = v265.u32[0];
          float32x4_t v270 = vmulq_lane_f32(v583, v242, 1);
          float32x4_t v271 = v270;
          v271.i32[3] = 0;
          float32x4_t v272 = vmulq_lane_f32(v584, v242, 1);
          float32x4_t v273 = v272;
          v273.i32[3] = 0;
          float32x4_t v274 = vmulq_lane_f32(v585, v268, 1);
          v274.i32[3] = 0;
          float32x4_t v275 = vmlaq_n_f32(v274, v583, v268.f32[0]);
          v276.i64[0] = v275.i64[0];
          v276.i64[1] = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u32[0];
          float32x4_t v277 = vmulq_lane_f32(v586, v268, 1);
          v277.i32[3] = 0;
          float32x4_t v278 = vmlaq_n_f32(v277, v584, v268.f32[0]);
          v279.i64[0] = v278.i64[0];
          v279.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          float32x4_t v280 = vmulq_laneq_f32(v587, v269, 2);
          v280.i32[3] = 0;
          float32x4_t v281 = vmlaq_lane_f32(v280, v585, *(float32x2_t *)v269.f32, 1);
          v281.i64[1] = vextq_s8((int8x16_t)v281, (int8x16_t)v281, 8uLL).u32[0];
          float32x4_t v282 = vmlaq_n_f32(v281, v583, v269.f32[0]);
          v283.i64[0] = v282.i64[0];
          v283.i64[1] = vextq_s8((int8x16_t)v282, (int8x16_t)v282, 8uLL).u32[0];
          float32x4_t v284 = vmulq_laneq_f32(v588, v269, 2);
          v284.i32[3] = 0;
          float32x4_t v285 = vmlaq_lane_f32(v284, v586, *(float32x2_t *)v269.f32, 1);
          v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
          float32x4_t v286 = vmlaq_n_f32(v285, v584, v269.f32[0]);
          v269.i64[0] = v286.i64[0];
          v269.i64[1] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u32[0];
          float32x4_t v287 = vmlsq_lane_f32(v557, v271, *(float32x2_t *)v270.f32, 0);
          v287.i64[1] = vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL).u32[0];
          float32x4_t v288 = vmlsq_lane_f32(v559, v271, *(float32x2_t *)v272.f32, 0);
          v288.i64[1] = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u32[0];
          float32x4_t v289 = vmlsq_lane_f32(v562, v273, *(float32x2_t *)v272.f32, 0);
          v289.i64[1] = vextq_s8((int8x16_t)v289, (int8x16_t)v289, 8uLL).u32[0];
          float32x4_t v290 = vmlsq_lane_f32(v556, v271, *(float32x2_t *)v270.f32, 1);
          v290.i64[1] = vextq_s8((int8x16_t)v290, (int8x16_t)v290, 8uLL).u32[0];
          float32x4_t v291 = vmlsq_lane_f32(v560, v271, *(float32x2_t *)v272.f32, 1);
          v291.i64[1] = vextq_s8((int8x16_t)v291, (int8x16_t)v291, 8uLL).u32[0];
          float32x4_t v292 = vmlsq_lane_f32(v563, v273, *(float32x2_t *)v272.f32, 1);
          v292.i64[1] = vextq_s8((int8x16_t)v292, (int8x16_t)v292, 8uLL).u32[0];
          float32x4_t v293 = vmlsq_laneq_f32(v558, v271, v270, 2);
          v293.i64[1] = vextq_s8((int8x16_t)v293, (int8x16_t)v293, 8uLL).u32[0];
          float32x4_t v294 = vmlsq_laneq_f32(v561, v271, v272, 2);
          v294.i64[1] = vextq_s8((int8x16_t)v294, (int8x16_t)v294, 8uLL).u32[0];
          float32x4_t v295 = vmlsq_laneq_f32(v564, v273, v272, 2);
          v295.i64[1] = vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL).u32[0];
          float32x4_t v296 = vmlsq_lane_f32(v287, v276, *(float32x2_t *)v275.f32, 0);
          v296.i64[1] = vextq_s8((int8x16_t)v296, (int8x16_t)v296, 8uLL).u32[0];
          float32x4_t v297 = vmlsq_lane_f32(v288, v276, *(float32x2_t *)v278.f32, 0);
          v297.i64[1] = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u32[0];
          float32x4_t v298 = vmlsq_lane_f32(v289, v279, *(float32x2_t *)v278.f32, 0);
          v298.i64[1] = vextq_s8((int8x16_t)v298, (int8x16_t)v298, 8uLL).u32[0];
          float32x4_t v299 = vmlsq_lane_f32(v290, v276, *(float32x2_t *)v275.f32, 1);
          v299.i64[1] = vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL).u32[0];
          float32x4_t v300 = vmlsq_lane_f32(v291, v276, *(float32x2_t *)v278.f32, 1);
          v300.i64[1] = vextq_s8((int8x16_t)v300, (int8x16_t)v300, 8uLL).u32[0];
          float32x4_t v301 = vmlsq_lane_f32(v292, v279, *(float32x2_t *)v278.f32, 1);
          v301.i64[1] = vextq_s8((int8x16_t)v301, (int8x16_t)v301, 8uLL).u32[0];
          float32x4_t v302 = vmlsq_laneq_f32(v293, v276, v275, 2);
          v302.i64[1] = vextq_s8((int8x16_t)v302, (int8x16_t)v302, 8uLL).u32[0];
          float32x4_t v303 = vmlsq_laneq_f32(v294, v276, v278, 2);
          v303.i64[1] = vextq_s8((int8x16_t)v303, (int8x16_t)v303, 8uLL).u32[0];
          float32x4_t v304 = vmlsq_laneq_f32(v295, v279, v278, 2);
          v304.i64[1] = vextq_s8((int8x16_t)v304, (int8x16_t)v304, 8uLL).u32[0];
          int8x16_t v574 = (int8x16_t)vmlsq_lane_f32(v297, v283, *(float32x2_t *)v286.f32, 0);
          int8x16_t v578 = (int8x16_t)vmlsq_lane_f32(v296, v283, *(float32x2_t *)v282.f32, 0);
          int8x16_t v305 = (int8x16_t)vmlsq_lane_f32(v298, v269, *(float32x2_t *)v286.f32, 0);
          unsigned __int32 v548 = vextq_s8(v578, v578, 8uLL).u32[0];
          unsigned __int32 v549 = vextq_s8(v305, v305, 8uLL).u32[0];
          int8x16_t v570 = (int8x16_t)vmlsq_lane_f32(v300, v283, *(float32x2_t *)v286.f32, 1);
          uint64_t v572 = v305.i64[0];
          int8x16_t v554 = (int8x16_t)vmlsq_lane_f32(v301, v269, *(float32x2_t *)v286.f32, 1);
          int8x16_t v555 = (int8x16_t)vmlsq_lane_f32(v299, v283, *(float32x2_t *)v282.f32, 1);
          unsigned __int32 v566 = vextq_s8(v554, v554, 8uLL).u32[0];
          unsigned __int32 v567 = vextq_s8(v555, v555, 8uLL).u32[0];
          int8x16_t v306 = (int8x16_t)vmlsq_laneq_f32(v302, v283, v282, 2);
          unsigned __int32 v550 = vextq_s8(v574, v574, 8uLL).u32[0];
          unsigned __int32 v551 = vextq_s8(v306, v306, 8uLL).u32[0];
          int8x16_t v552 = (int8x16_t)vmlsq_laneq_f32(v303, v283, v286, 2);
          uint64_t v553 = v306.i64[0];
          unsigned __int32 v565 = vextq_s8(v552, v552, 8uLL).u32[0];
          int8x16_t v568 = (int8x16_t)vmlsq_laneq_f32(v304, v269, v286, 2);
          unsigned __int32 v546 = vextq_s8(v568, v568, 8uLL).u32[0];
          unsigned __int32 v547 = vextq_s8(v570, v570, 8uLL).u32[0];
          float32x2_t v307 = (float32x4_t *)&v15[144 * v167];
          *(int8x8_t *)v308.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v307, v228, &v594);
          float32x2_t v310 = (float32x2_t)vextq_s8(v309, v309, 8uLL).u64[0];
          float32x2_t v312 = (float32x2_t)vextq_s8(v311, v311, 8uLL).u64[0];
          float32x2_t v313 = (float32x2_t)vext_s8(*(int8x8_t *)v311.i8, (int8x8_t)v312, 4uLL);
          float32x2_t v314 = (float32x2_t)vext_s8(*(int8x8_t *)v309.i8, (int8x8_t)v310, 4uLL);
          int8x8_t v315 = (int8x8_t)vmls_f32(vmul_f32(v310, *(float32x2_t *)v311.i8), *(float32x2_t *)v309.i8, v312);
          int32x2_t v316 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v309.i8, v313), v314, *(float32x2_t *)v311.i8);
          *(int8x8_t *)v317.f32 = vext_s8((int8x8_t)v316, v315, 4uLL);
          v316.i32[1] = 0;
          v317.i64[1] = v316.u32[0];
          float32x2_t v318 = (float32x2_t)vextq_s8((int8x16_t)v308, (int8x16_t)v308, 8uLL).u64[0];
          float32x2_t v319 = (float32x2_t)vext_s8(*(int8x8_t *)v308.f32, (int8x8_t)v318, 4uLL);
          float32x2_t v320 = vmul_f32(v312, *(float32x2_t *)v308.f32);
          unsigned __int32 v321 = vmls_f32(vmul_f32(*(float32x2_t *)v311.i8, v319), v313, *(float32x2_t *)v308.f32).u32[0];
          *(int32x2_t *)v322.f32 = vdup_lane_s32((int32x2_t)vmls_f32(v320, *(float32x2_t *)v311.i8, v318), 0);
          v322.i64[1] = v321;
          float32x4_t v323 = vmulq_f32(v308, v317);
          v323.i64[0] = vpaddq_f32(v323, v323).u64[0];
          float32x2_t v324 = vpadd_f32(*(float32x2_t *)v323.f32, *(float32x2_t *)v323.f32);
          float32x2_t v325 = vrecpe_f32(v324);
          int v326 = 4;
          do
          {
            float32x2_t v325 = vmul_f32(v325, vrecps_f32(v324, v325));
            --v326;
          }
          while (v326);
          float32x2_t v327 = vmls_f32(vmul_f32(*(float32x2_t *)v308.f32, v314), v319, *(float32x2_t *)v309.i8);
          v322.i32[0] = v315.i32[0];
          *(int8x8_t *)v328.f32 = vext_s8((int8x8_t)vdup_lane_s32(v316, 0), (int8x8_t)v321, 4uLL);
          *(float32x2_t *)&v328.u32[2] = v327;
          float32x4_t v329 = vmulq_n_f32(v317, v325.f32[0]);
          float32x4_t v330 = vmulq_n_f32(v322, v325.f32[0]);
          float32x4_t v331 = vmulq_n_f32(v328, v325.f32[0]);
          float32x4_t v332 = (float32x4_t *)&v15[144 * v167];
          float32x4_t v334 = v332[4];
          float32x4_t v333 = v332 + 4;
          float32x4_t v335 = v333 - 1;
          float32x4_t v336 = v333 + 1;
          float32x4_t v337 = v333 + 2;
          float32x4_t v338 = v333 + 3;
          unsigned int v339 = v333 + 4;
          float32x4_t v340 = vmulq_laneq_f32(v598, v329, 2);
          v340.i32[3] = 0;
          float32x4_t v341 = vmlaq_lane_f32(v340, v596, *(float32x2_t *)v329.f32, 1);
          v341.i64[1] = vextq_s8((int8x16_t)v341, (int8x16_t)v341, 8uLL).u32[0];
          float32x4_t v342 = vmlaq_n_f32(v341, v594, v329.f32[0]);
          v342.i64[1] = vextq_s8((int8x16_t)v342, (int8x16_t)v342, 8uLL).u32[0];
          float32x4_t v343 = vmulq_laneq_f32(v598, v330, 2);
          v343.i32[3] = 0;
          float32x4_t v344 = vmlaq_lane_f32(v343, v596, *(float32x2_t *)v330.f32, 1);
          v344.i64[1] = vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u32[0];
          float32x4_t v345 = vmlaq_n_f32(v344, v594, v330.f32[0]);
          v345.i64[1] = vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u32[0];
          float32x4_t v346 = vmulq_laneq_f32(v598, v331, 2);
          v346.i32[3] = 0;
          float32x4_t v347 = vmlaq_lane_f32(v346, v596, *(float32x2_t *)v331.f32, 1);
          v347.i64[1] = vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).u32[0];
          float32x4_t v348 = vmlaq_n_f32(v347, v594, v331.f32[0]);
          v348.i64[1] = vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u32[0];
          float32x4_t v349 = vmulq_laneq_f32(v599, v329, 2);
          v349.i32[3] = 0;
          float32x4_t v350 = vmlaq_lane_f32(v349, v597, *(float32x2_t *)v329.f32, 1);
          v350.i64[1] = vextq_s8((int8x16_t)v350, (int8x16_t)v350, 8uLL).u32[0];
          float32x4_t v351 = vmlaq_n_f32(v350, v595, v329.f32[0]);
          v351.i64[1] = vextq_s8((int8x16_t)v351, (int8x16_t)v351, 8uLL).u32[0];
          float32x4_t v352 = vmulq_laneq_f32(v599, v330, 2);
          v352.i32[3] = 0;
          float32x4_t v353 = vmlaq_lane_f32(v352, v597, *(float32x2_t *)v330.f32, 1);
          v353.i64[1] = vextq_s8((int8x16_t)v353, (int8x16_t)v353, 8uLL).u32[0];
          float32x4_t v354 = vmlaq_n_f32(v353, v595, v330.f32[0]);
          v354.i64[1] = vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u32[0];
          float32x4_t v355 = vmulq_laneq_f32(v599, v331, 2);
          v355.i32[3] = 0;
          float32x4_t v356 = vmlaq_lane_f32(v355, v597, *(float32x2_t *)v331.f32, 1);
          v356.i64[1] = vextq_s8((int8x16_t)v356, (int8x16_t)v356, 8uLL).u32[0];
          float32x4_t v357 = vmlaq_n_f32(v356, v595, v331.f32[0]);
          v357.i64[1] = vextq_s8((int8x16_t)v357, (int8x16_t)v357, 8uLL).u32[0];
          float32x4_t v358 = vmlsq_lane_f32(vaddq_f32(v557, *v307), v342, *(float32x2_t *)v594.f32, 0);
          v358.i64[1] = vextq_s8((int8x16_t)v358, (int8x16_t)v358, 8uLL).u32[0];
          float32x4_t v359 = vmlsq_lane_f32(vaddq_f32(v559, v333[-1]), v342, *(float32x2_t *)v595.f32, 0);
          v359.i64[1] = vextq_s8((int8x16_t)v359, (int8x16_t)v359, 8uLL).u32[0];
          float32x4_t v360 = vmlsq_lane_f32(vaddq_f32(v562, v333[2]), v351, *(float32x2_t *)v595.f32, 0);
          v360.i64[1] = vextq_s8((int8x16_t)v360, (int8x16_t)v360, 8uLL).u32[0];
          float32x4_t v361 = vmlsq_lane_f32(vaddq_f32(v556, v307[1]), v342, *(float32x2_t *)v594.f32, 1);
          v361.i64[1] = vextq_s8((int8x16_t)v361, (int8x16_t)v361, 8uLL).u32[0];
          float32x4_t v362 = vmlsq_lane_f32(vaddq_f32(v560, v334), v342, *(float32x2_t *)v595.f32, 1);
          v362.i64[1] = vextq_s8((int8x16_t)v362, (int8x16_t)v362, 8uLL).u32[0];
          float32x4_t v363 = vmlsq_lane_f32(vaddq_f32(v563, v333[3]), v351, *(float32x2_t *)v595.f32, 1);
          v363.i64[1] = vextq_s8((int8x16_t)v363, (int8x16_t)v363, 8uLL).u32[0];
          float32x4_t v364 = vmlsq_laneq_f32(vaddq_f32(v558, v307[2]), v342, v594, 2);
          v364.i64[1] = vextq_s8((int8x16_t)v364, (int8x16_t)v364, 8uLL).u32[0];
          float32x4_t v365 = vmlsq_laneq_f32(vaddq_f32(v561, v333[1]), v342, v595, 2);
          v365.i64[1] = vextq_s8((int8x16_t)v365, (int8x16_t)v365, 8uLL).u32[0];
          float32x4_t v366 = vmlsq_laneq_f32(vaddq_f32(v564, v333[4]), v351, v595, 2);
          v366.i64[1] = vextq_s8((int8x16_t)v366, (int8x16_t)v366, 8uLL).u32[0];
          float32x4_t v367 = vmlsq_lane_f32(v358, v345, *(float32x2_t *)v596.f32, 0);
          v367.i64[1] = vextq_s8((int8x16_t)v367, (int8x16_t)v367, 8uLL).u32[0];
          float32x4_t v368 = vmlsq_lane_f32(v359, v345, *(float32x2_t *)v597.f32, 0);
          v368.i64[1] = vextq_s8((int8x16_t)v368, (int8x16_t)v368, 8uLL).u32[0];
          float32x4_t v369 = vmlsq_lane_f32(v360, v354, *(float32x2_t *)v597.f32, 0);
          v369.i64[1] = vextq_s8((int8x16_t)v369, (int8x16_t)v369, 8uLL).u32[0];
          float32x4_t v370 = vmlsq_lane_f32(v361, v345, *(float32x2_t *)v596.f32, 1);
          v370.i64[1] = vextq_s8((int8x16_t)v370, (int8x16_t)v370, 8uLL).u32[0];
          float32x4_t v371 = vmlsq_lane_f32(v362, v345, *(float32x2_t *)v597.f32, 1);
          v371.i64[1] = vextq_s8((int8x16_t)v371, (int8x16_t)v371, 8uLL).u32[0];
          float32x4_t v372 = vmlsq_lane_f32(v363, v354, *(float32x2_t *)v597.f32, 1);
          v372.i64[1] = vextq_s8((int8x16_t)v372, (int8x16_t)v372, 8uLL).u32[0];
          float32x4_t v373 = vmlsq_laneq_f32(v364, v345, v596, 2);
          v373.i64[1] = vextq_s8((int8x16_t)v373, (int8x16_t)v373, 8uLL).u32[0];
          float32x4_t v374 = vmlsq_laneq_f32(v365, v345, v597, 2);
          v374.i64[1] = vextq_s8((int8x16_t)v374, (int8x16_t)v374, 8uLL).u32[0];
          float32x4_t v375 = vmlsq_laneq_f32(v366, v354, v597, 2);
          v375.i64[1] = vextq_s8((int8x16_t)v375, (int8x16_t)v375, 8uLL).u32[0];
          float32x4_t v376 = vmlsq_lane_f32(v367, v348, *(float32x2_t *)v598.f32, 0);
          int8x16_t v377 = (int8x16_t)vmlsq_lane_f32(v368, v348, *(float32x2_t *)v599.f32, 0);
          unsigned __int32 v378 = vextq_s8(v377, v377, 8uLL).u32[0];
          float32x4_t v379 = vmlsq_lane_f32(v369, v357, *(float32x2_t *)v599.f32, 0);
          float32x4_t v380 = vmlsq_lane_f32(v370, v348, *(float32x2_t *)v598.f32, 1);
          int8x16_t v381 = (int8x16_t)vmlsq_lane_f32(v371, v348, *(float32x2_t *)v599.f32, 1);
          int8x8_t v382 = (int8x8_t)vextq_s8(v381, v381, 8uLL).u64[0];
          float32x4_t v383 = vmlsq_lane_f32(v372, v357, *(float32x2_t *)v599.f32, 1);
          float32x4_t v384 = vmlsq_laneq_f32(v373, v348, v598, 2);
          int8x16_t v385 = (int8x16_t)vmlsq_laneq_f32(v374, v348, v599, 2);
          unsigned __int32 v386 = vextq_s8(v385, v385, 8uLL).u32[0];
          float32x4_t v387 = vmlsq_laneq_f32(v375, v357, v599, 2);
          int8x8_t v388 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v379.f32, 0), *(int8x8_t *)v383.f32, 4uLL);
          v396.i64[1] = v387.i64[0];
          v593[0] = v342;
          v593[1] = v351;
          v593[2] = v345;
          v593[3] = v354;
          *(int8x8_t *)v342.f32 = vext_s8(*(int8x8_t *)v379.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v383.f32, 1), 4uLL);
          *(int32x2_t *)&v342.u32[2] = vdup_lane_s32(*(int32x2_t *)v387.f32, 1);
          *(int8x8_t *)v345.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v379, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v383, (int8x16_t)v383, 8uLL), 4uLL);
          v345.i64[1] = vextq_s8((int8x16_t)v387, (int8x16_t)v387, 8uLL).u64[0];
          v593[4] = v348;
          v593[5] = v357;
          v389.i64[0] = 0x3F0000003F000000;
          v389.i64[1] = 0x3F0000003F000000;
          float32x4_t v390 = vmulq_f32(vaddq_f32(v379, v396), v389);
          float32x4_t v391 = v390;
          v391.i32[3] = 0;
          float32x4_t v392 = vmulq_f32(vaddq_f32(v383, v342), v389);
          int8x16_t v393 = (int8x16_t)v392;
          v393.i32[3] = 0;
          float32x4_t v394 = vmulq_f32(vaddq_f32(v387, v345), v389);
          int8x16_t v395 = (int8x16_t)v394;
          v395.i32[3] = 0;
          *(int8x8_t *)v396.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v376.f32, 0), *(int8x8_t *)v380.f32, 4uLL);
          *(int8x8_t *)v345.f32 = vext_s8(*(int8x8_t *)v376.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v380.f32, 1), 4uLL);
          *(int32x2_t *)&v345.u32[2] = vdup_lane_s32(*(int32x2_t *)v384.f32, 1);
          *(int8x8_t *)v354.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v376, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v380, (int8x16_t)v380, 8uLL), 4uLL);
          v354.i64[1] = vextq_s8((int8x16_t)v384, (int8x16_t)v384, 8uLL).u64[0];
          float32x4_t v397 = vaddq_f32(v380, v345);
          float32x4_t v398 = vaddq_f32(v384, v354);
          v380.i64[0] = vextq_s8(v393, v393, 8uLL).u64[0];
          v387.i64[0] = vextq_s8(v395, v395, 8uLL).u64[0];
          float32x2_t v399 = (float32x2_t)vext_s8(*(int8x8_t *)v394.f32, *(int8x8_t *)v387.f32, 4uLL);
          float32x2_t v400 = (float32x2_t)vext_s8(*(int8x8_t *)v392.f32, *(int8x8_t *)v380.f32, 4uLL);
          int8x8_t v401 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v394.f32, *(float32x2_t *)v380.f32), *(float32x2_t *)v392.f32, *(float32x2_t *)v387.f32);
          int32x2_t v402 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v392.f32, v399), v400, *(float32x2_t *)v394.f32);
          *(int8x8_t *)v403.f32 = vext_s8((int8x8_t)v402, v401, 4uLL);
          v402.i32[1] = 0;
          v403.i64[1] = v402.u32[0];
          float32x2_t v404 = (float32x2_t)vextq_s8((int8x16_t)v391, (int8x16_t)v391, 8uLL).u64[0];
          float32x2_t v405 = (float32x2_t)vext_s8(*(int8x8_t *)v390.f32, (int8x8_t)v404, 4uLL);
          *(int32x2_t *)v407.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v390.f32, *(float32x2_t *)v387.f32), *(float32x2_t *)v394.f32, v404), 0);
          unsigned __int32 v406 = vmls_f32(vmul_f32(*(float32x2_t *)v394.f32, v405), v399, *(float32x2_t *)v390.f32).u32[0];
          v407.i64[1] = v406;
          float32x4_t v408 = vmulq_f32(v397, v389);
          float32x4_t v409 = vmulq_f32(v391, v403);
          v409.i64[0] = vpaddq_f32(v409, v409).u64[0];
          float32x2_t v410 = vpadd_f32(*(float32x2_t *)v409.f32, *(float32x2_t *)v409.f32);
          float32x2_t v411 = vrecpe_f32(v410);
          int v412 = 4;
          do
          {
            float32x2_t v411 = vmul_f32(v411, vrecps_f32(v410, v411));
            --v412;
          }
          while (v412);
          v396.i64[1] = v384.i64[0];
          v413.i64[0] = 0x3F0000003F000000;
          v413.i64[1] = 0x3F0000003F000000;
          float32x4_t v414 = vmulq_f32(vaddq_f32(v376, v396), v413);
          v415.i64[0] = v578.i64[0];
          v415.i64[1] = v548;
          float32x4_t v579 = v415;
          float32x4_t v416 = vmulq_f32(v398, v413);
          v415.i64[0] = v570.i64[0];
          v415.i64[1] = v547;
          float32x4_t v571 = v415;
          v415.i64[0] = v568.i64[0];
          v415.i64[1] = v546;
          float32x4_t v569 = v415;
          v417.i64[0] = v377.i64[0];
          v417.i64[1] = v378;
          v418.i64[0] = v381.i64[0];
          v418.i64[1] = v382.u32[0];
          v419.i64[0] = v385.i64[0];
          v419.i64[1] = v386;
          v414.i32[3] = 0;
          v408.i32[3] = 0;
          v416.i32[3] = 0;
          *(float32x2_t *)v415.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v390.f32, v400), v405, *(float32x2_t *)v392.f32);
          v407.i32[0] = v401.i32[0];
          *(int8x8_t *)v420.f32 = vext_s8((int8x8_t)vdup_lane_s32(v402, 0), (int8x8_t)v406, 4uLL);
          v420.i64[1] = v415.i64[0];
          float32x4_t v421 = vmulq_n_f32(v403, v411.f32[0]);
          float32x4_t v422 = vmulq_n_f32(v407, v411.f32[0]);
          float32x4_t v423 = vmulq_n_f32(v420, v411.f32[0]);
          float32x4_t v424 = vnegq_f32(v417);
          v424.i32[3] = 0;
          float32x4_t v425 = vnegq_f32(v418);
          v425.i32[3] = 0;
          float32x4_t v426 = vnegq_f32(v419);
          v426.i32[3] = 0;
          float32x4_t v427 = vmulq_n_f32(v424, v421.f32[0]);
          v427.i32[3] = 0;
          float32x4_t v428 = vmulq_lane_f32(v425, *(float32x2_t *)v421.f32, 1);
          v428.i32[3] = 0;
          float32x4_t v429 = vmulq_laneq_f32(v426, v421, 2);
          v429.i32[3] = 0;
          float32x4_t v430 = vaddq_f32(v427, v428);
          float32x4_t v431 = vmulq_n_f32(v424, v422.f32[0]);
          v431.i32[3] = 0;
          float32x4_t v432 = vmulq_lane_f32(v425, *(float32x2_t *)v422.f32, 1);
          v432.i32[3] = 0;
          float32x4_t v433 = vmulq_laneq_f32(v426, v422, 2);
          v433.i32[3] = 0;
          float32x4_t v434 = vaddq_f32(v429, v430);
          float32x4_t v435 = vaddq_f32(v433, vaddq_f32(v431, v432));
          float32x4_t v436 = vmulq_n_f32(v424, v423.f32[0]);
          v436.i32[3] = 0;
          float32x4_t v437 = vmulq_lane_f32(v425, *(float32x2_t *)v423.f32, 1);
          v437.i32[3] = 0;
          float32x4_t v438 = vmulq_laneq_f32(v426, v423, 2);
          v438.i32[3] = 0;
          float32x4_t v439 = vaddq_f32(v436, v437);
          *(int8x8_t *)v437.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v377.i8, 0), *(int8x8_t *)v381.i8, 4uLL);
          v437.i64[1] = vdup_lane_s32(*(int32x2_t *)v385.i8, 0).u32[0];
          *(int32x2_t *)v429.f32 = vdup_lane_s32(*(int32x2_t *)v381.i8, 1);
          float32x4_t v440 = vaddq_f32(v438, v439);
          *(int8x8_t *)v438.f32 = vext_s8(*(int8x8_t *)v377.i8, *(int8x8_t *)v429.f32, 4uLL);
          v438.i64[1] = vdup_lane_s32(*(int32x2_t *)v385.i8, 1).u32[0];
          *(int8x8_t *)v441.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v377, 2), v382, 4uLL);
          v441.i64[1] = vdup_laneq_s32((int32x4_t)v385, 2).u32[0];
          float32x4_t v442 = vmulq_n_f32(v434, v437.f32[0]);
          v442.i32[3] = 0;
          float32x4_t v443 = vmulq_lane_f32(v435, *(float32x2_t *)v437.f32, 1);
          v443.i32[3] = 0;
          float32x4_t v444 = vmulq_laneq_f32(v440, v437, 2);
          v444.i32[3] = 0;
          float32x4_t v445 = vaddq_f32(v442, v443);
          float32x4_t v446 = vmulq_n_f32(v434, v438.f32[0]);
          v446.i32[3] = 0;
          float32x4_t v447 = vmulq_lane_f32(v435, *(float32x2_t *)v438.f32, 1);
          v447.i32[3] = 0;
          float32x4_t v448 = vmulq_laneq_f32(v440, v438, 2);
          v448.i32[3] = 0;
          float32x4_t v449 = vaddq_f32(v444, v445);
          float32x4_t v450 = vaddq_f32(v448, vaddq_f32(v446, v447));
          float32x4_t v451 = vmulq_n_f32(v434, v441.f32[0]);
          v451.i32[3] = 0;
          float32x4_t v452 = vmulq_lane_f32(v435, *(float32x2_t *)v441.f32, 1);
          v452.i32[3] = 0;
          float32x4_t v453 = vmulq_laneq_f32(v440, v441, 2);
          v453.i32[3] = 0;
          float32x4_t v454 = vaddq_f32(v414, v449);
          int8x16_t v455 = (int8x16_t)vaddq_f32(v408, v450);
          int8x16_t v456 = (int8x16_t)vaddq_f32(v416, vaddq_f32(v453, vaddq_f32(v451, v452)));
          v448.i64[0] = vextq_s8(v456, v456, 8uLL).u64[0];
          v432.i64[0] = vextq_s8(v456, v456, 4uLL).u64[0];
          float32x2_t v457 = (float32x2_t)vextq_s8(v455, v455, 4uLL).u64[0];
          int8x8_t v458 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v455, v455, 8uLL), *(float32x2_t *)v456.i8), *(float32x2_t *)v455.i8, *(float32x2_t *)v448.f32);
          int32x2_t v459 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v455.i8, *(float32x2_t *)v432.f32), v457, *(float32x2_t *)v456.i8);
          *(int8x8_t *)v460.f32 = vext_s8((int8x8_t)v459, v458, 4uLL);
          v459.i32[1] = 0;
          v460.i64[1] = v459.u32[0];
          float32x2_t v461 = (float32x2_t)vextq_s8((int8x16_t)v454, (int8x16_t)v454, 4uLL).u64[0];
          *(float32x2_t *)v433.f32 = vmul_f32(*(float32x2_t *)v448.f32, *(float32x2_t *)v454.f32);
          unsigned __int32 v462 = vmls_f32(vmul_f32(*(float32x2_t *)v456.i8, v461), *(float32x2_t *)v432.f32, *(float32x2_t *)v454.f32).u32[0];
          *(int32x2_t *)v463.f32 = vdup_lane_s32((int32x2_t)vmls_f32(*(float32x2_t *)v433.f32, *(float32x2_t *)v456.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v454, (int8x16_t)v454, 8uLL)), 0);
          v463.i64[1] = v462;
          float32x4_t v464 = vmulq_f32(v454, v460);
          v464.i64[0] = vpaddq_f32(v464, v464).u64[0];
          float32x2_t v465 = vpadd_f32(*(float32x2_t *)v464.f32, *(float32x2_t *)v464.f32);
          float32x2_t v466 = vrecpe_f32(v465);
          int v467 = 4;
          do
          {
            float32x2_t v466 = vmul_f32(v466, vrecps_f32(v465, v466));
            --v467;
          }
          while (v467);
          v468.i64[0] = v572;
          v468.i64[1] = v549;
          float32x4_t v573 = v468;
          v330.i32[3] = 0;
          v468.i64[0] = v574.i64[0];
          v468.i64[1] = v550;
          float32x4_t v575 = v468;
          v329.i32[3] = 0;
          v331.i32[3] = 0;
          v421.i32[3] = 0;
          v422.i32[3] = 0;
          v423.i32[3] = 0;
          v463.i32[0] = v458.i32[0];
          *(int8x8_t *)v469.f32 = vext_s8((int8x8_t)vdup_lane_s32(v459, 0), (int8x8_t)v462, 4uLL);
          *(float32x2_t *)&v469.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v454.f32, v457), v461, *(float32x2_t *)v455.i8);
          float32x4_t v470 = vmulq_n_f32(v460, v466.f32[0]);
          float32x4_t v471 = vmulq_n_f32(v470, v434.f32[0]);
          float32x4_t v472 = vmulq_n_f32(v470, v435.f32[0]);
          float32x4_t v473 = vmulq_n_f32(v470, v440.f32[0]);
          v470.i32[3] = 0;
          float32x4_t v474 = vmulq_n_f32(v463, v466.f32[0]);
          float32x4_t v475 = vmulq_lane_f32(v474, *(float32x2_t *)v434.f32, 1);
          float32x4_t v476 = vmulq_lane_f32(v474, *(float32x2_t *)v435.f32, 1);
          float32x4_t v477 = vmulq_lane_f32(v474, *(float32x2_t *)v440.f32, 1);
          v474.i32[3] = 0;
          float32x4_t v478 = vmulq_n_f32(v469, v466.f32[0]);
          float32x4_t v479 = vmulq_laneq_f32(v478, v434, 2);
          float32x4_t v480 = vmulq_laneq_f32(v478, v435, 2);
          float32x4_t v481 = v478;
          v481.i32[3] = 0;
          int8x8_t v482 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v434, 2).u64[0];
          v471.i32[3] = 0;
          v475.i32[3] = 0;
          float32x4_t v483 = vmulq_laneq_f32(v478, v440, 2);
          v479.i32[3] = 0;
          float32x4_t v484 = vaddq_f32(v471, v475);
          v475.i64[0] = vdupq_lane_s32(*(int32x2_t *)v435.f32, 1).u64[0];
          float32x4_t v485 = vaddq_f32(v479, v484);
          v479.i64[0] = vextq_s8((int8x16_t)v435, (int8x16_t)v435, 8uLL).u64[0];
          v472.i32[3] = 0;
          v476.i32[3] = 0;
          v480.i32[3] = 0;
          float32x4_t v486 = vaddq_f32(v480, vaddq_f32(v472, v476));
          v473.i32[3] = 0;
          v477.i32[3] = 0;
          v483.i32[3] = 0;
          *(int8x8_t *)v487.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v434.f32, 0), *(int8x8_t *)v435.f32, 4uLL);
          v487.i64[1] = vdupq_lane_s32(*(int32x2_t *)v440.f32, 0).u32[0];
          float32x4_t v488 = vaddq_f32(v483, vaddq_f32(v473, v477));
          *(int8x8_t *)v489.f32 = vext_s8(*(int8x8_t *)v434.f32, *(int8x8_t *)v475.f32, 4uLL);
          v489.i64[1] = vdupq_lane_s32(*(int32x2_t *)v440.f32, 1).u32[0];
          *(int8x8_t *)v473.f32 = vext_s8(v482, *(int8x8_t *)v479.f32, 4uLL);
          v473.i64[1] = vdupq_laneq_s32((int32x4_t)v440, 2).u32[0];
          float32x4_t v490 = vmulq_n_f32(v487, v485.f32[0]);
          v490.i32[3] = 0;
          float32x4_t v491 = vmulq_lane_f32(v489, *(float32x2_t *)v485.f32, 1);
          v491.i32[3] = 0;
          float32x4_t v492 = vmulq_laneq_f32(v473, v485, 2);
          v492.i32[3] = 0;
          float32x4_t v493 = vaddq_f32(v492, vaddq_f32(v490, v491));
          float32x4_t v494 = vmulq_n_f32(v487, v486.f32[0]);
          v494.i32[3] = 0;
          float32x4_t v495 = vmulq_lane_f32(v489, *(float32x2_t *)v486.f32, 1);
          v495.i32[3] = 0;
          float32x4_t v496 = vmulq_laneq_f32(v473, v486, 2);
          v496.i32[3] = 0;
          float32x4_t v497 = vmulq_n_f32(v487, v488.f32[0]);
          v497.i32[3] = 0;
          float32x4_t v498 = vmulq_lane_f32(v489, *(float32x2_t *)v488.f32, 1);
          v498.i32[3] = 0;
          float32x4_t v499 = vmulq_laneq_f32(v473, v488, 2);
          v499.i32[3] = 0;
          float32x4_t v583 = v470;
          float32x4_t v584 = v474;
          float32x4_t v585 = v481;
          float32x4_t v586 = v485;
          float32x4_t v587 = v486;
          float32x4_t v588 = v488;
          float32x4_t v589 = vaddq_f32(v421, v493);
          float32x4_t v590 = vaddq_f32(v422, vaddq_f32(v496, vaddq_f32(v494, v495)));
          float32x4_t v591 = vaddq_f32(v423, vaddq_f32(v499, vaddq_f32(v497, v498)));
          *(int8x8_t *)v500.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(&v583, (float32x2_t *)v593, v592);
          float32x4_t v501 = vaddq_f32(v329, v500);
          int8x16_t v503 = (int8x16_t)vaddq_f32(v330, v502);
          int8x16_t v505 = (int8x16_t)vaddq_f32(v331, v504);
          float32x2_t v506 = (float32x2_t)vextq_s8(v505, v505, 8uLL).u64[0];
          float32x2_t v507 = (float32x2_t)vextq_s8(v505, v505, 4uLL).u64[0];
          float32x2_t v508 = (float32x2_t)vextq_s8(v503, v503, 4uLL).u64[0];
          int8x8_t v509 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v503, v503, 8uLL), *(float32x2_t *)v505.i8), *(float32x2_t *)v503.i8, v506);
          int32x2_t v510 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v503.i8, v507), v508, *(float32x2_t *)v505.i8);
          *(int8x8_t *)v511.f32 = vext_s8((int8x8_t)v510, v509, 4uLL);
          v510.i32[1] = 0;
          v511.i64[1] = v510.u32[0];
          float32x2_t v512 = (float32x2_t)vextq_s8((int8x16_t)v501, (int8x16_t)v501, 4uLL).u64[0];
          float32x2_t v513 = vmul_f32(v506, *(float32x2_t *)v501.f32);
          unsigned __int32 v514 = vmls_f32(vmul_f32(*(float32x2_t *)v505.i8, v512), v507, *(float32x2_t *)v501.f32).u32[0];
          *(int32x2_t *)v515.f32 = vdup_lane_s32((int32x2_t)vmls_f32(v513, *(float32x2_t *)v505.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v501, (int8x16_t)v501, 8uLL)), 0);
          v515.i64[1] = v514;
          float32x4_t v516 = vmulq_f32(v501, v511);
          v516.i64[0] = vpaddq_f32(v516, v516).u64[0];
          float32x2_t v517 = vpadd_f32(*(float32x2_t *)v516.f32, *(float32x2_t *)v516.f32);
          float32x2_t v518 = vrecpe_f32(v517);
          int v519 = 4;
          do
          {
            float32x2_t v518 = vmul_f32(v518, vrecps_f32(v517, v518));
            --v519;
          }
          while (v519);
          v521.i64[0] = v553;
          v520.i64[0] = v554.i64[0];
          v521.i64[1] = v551;
          v520.i64[1] = v566;
          v522.i64[0] = v555.i64[0];
          v522.i64[1] = v567;
          v523.i64[0] = v552.i64[0];
          v523.i64[1] = v565;
          v515.i32[0] = v509.i32[0];
          float32x2_t v524 = vmls_f32(vmul_f32(*(float32x2_t *)v501.f32, v508), v512, *(float32x2_t *)v503.i8);
          *(int8x8_t *)v525.f32 = vext_s8((int8x8_t)vdup_lane_s32(v510, 0), (int8x8_t)v514, 4uLL);
          *(float32x2_t *)&v525.u32[2] = v524;
          float32x4_t v526 = vmulq_n_f32(v511, v518.f32[0]);
          v526.i32[3] = 0;
          float32x4_t v527 = vmulq_n_f32(v515, v518.f32[0]);
          v527.i32[3] = 0;
          float32x4_t v528 = vmulq_n_f32(v525, v518.f32[0]);
          v528.i32[3] = 0;
          *int8x16_t v229 = v526;
          v229[1] = v527;
          v229[2] = v528;
          float32x4_t v529 = vaddq_f32(v522, v307[1]);
          float32x4_t v530 = vaddq_f32(v521, v307[2]);
          float32x4_t v531 = vaddq_f32(v575, *v335);
          float32x4_t v532 = vaddq_f32(v571, *v333);
          float32x4_t v533 = vaddq_f32(v523, *v336);
          float32x4_t v534 = vaddq_f32(v573, *v337);
          float32x4_t v535 = vaddq_f32(v520, *v338);
          float32x4_t v536 = vaddq_f32(v569, *v339);
          *float32x2_t v307 = vaddq_f32(v579, *v307);
          v307[1] = v529;
          v307[2] = v530;
          *float32x4_t v335 = v531;
          float32x4_t *v333 = v532;
          *float32x4_t v336 = v533;
          *float32x4_t v337 = v534;
          float32x4_t *v338 = v535;
          *unsigned int v339 = v536;
          ++v167;
          uint64_t v8 = a3;
          uint64_t v24 = v542;
          float32x4_t v19 = v543;
          uint64_t v25 = v541;
        }
        while (v167 != v545);
      }
      a6 = v540 - 1;
      unsigned int v7 = a5;
    }
    while (v540 != 1);
  }
}

void physx::Dy::PxcFsPropagateDrivenInertiaSimd(unsigned __int16 *a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v275 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[9];
  uint64_t v9 = a1[8];
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a5[2];
  uint64_t v13 = *a5 + v12;
  a5[2] = v12 + 144 * v10;
  memcpy((void *)v13, a2, 144 * v10);
  int v14 = *a1;
  uint64_t v15 = (v14 - 1);
  if (v14 != 1)
  {
    uint64_t v16 = (uint64_t)a1 + v8 + 144;
    uint64_t v17 = (uint64_t)&a1[200 * v10 + 16 * v10] + v9;
    uint64_t v18 = (char *)a1 + v11;
    do
    {
      float32x4_t v19 = (float32x4_t *)(v13 + 144 * v15);
      *(int8x8_t *)v20.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v19, (float32x2_t *)(v17 + 96 * v15), &v269);
      float v21 = *(float *)(a3 + 4 * v15);
      uint64_t v22 = (float32x4_t *)(a4 + 48 * v15);
      int8x16_t v23 = (int8x16_t)vmlaq_n_f32(v20, *v22, v21);
      unsigned __int32 v24 = vextq_s8(v23, v23, 8uLL).u32[0];
      int8x16_t v26 = (int8x16_t)vmlaq_n_f32(v25, v22[1], v21);
      int8x16_t v28 = (int8x16_t)vmlaq_n_f32(v27, v22[2], v21);
      unsigned __int32 v29 = vextq_s8(v28, v28, 8uLL).u32[0];
      float32x2_t v30 = (float32x2_t)vextq_s8(v28, v28, 4uLL).u64[0];
      float32x2_t v31 = (float32x2_t)vextq_s8(v26, v26, 4uLL).u64[0];
      int8x8_t v32 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vextq_s8(v26, v26, 8uLL).u32[0], *(float32x2_t *)v28.i8), *(float32x2_t *)v26.i8, (float32x2_t)v29);
      int32x2_t v34 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.i8, v30), v31, *(float32x2_t *)v28.i8);
      float32x2_t v33 = (float32x2_t)vext_s8((int8x8_t)v34, v32, 4uLL);
      v34.i32[1] = 0;
      *(float32x2_t *)v35.f32 = v33;
      v35.i64[1] = v34.u32[0];
      float32x2_t v36 = (float32x2_t)vextq_s8(v23, v23, 4uLL).u64[0];
      *(int32x2_t *)v38.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.i8, (float32x2_t)v29), *(float32x2_t *)v28.i8, (float32x2_t)v24), 0);
      unsigned __int32 v37 = vmls_f32(vmul_f32(v36, *(float32x2_t *)v28.i8), v30, *(float32x2_t *)v23.i8).u32[0];
      v38.i64[1] = v37;
      *(float32x2_t *)v28.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v23.i8, v33), vmul_f32((float32x2_t)v24, (float32x2_t)v34.u32[0]));
      float32x2_t v39 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
      float32x2_t v40 = vrecpe_f32(v39);
      int v41 = 4;
      do
      {
        float32x2_t v40 = vmul_f32(v40, vrecps_f32(v39, v40));
        --v41;
      }
      while (v41);
      float32x4_t v42 = (float32x4_t *)(v16 + 160 * v15);
      float32x2_t v43 = vmls_f32(vmul_f32(*(float32x2_t *)v23.i8, v31), v36, *(float32x2_t *)v26.i8);
      v38.i32[0] = v32.i32[0];
      *(int8x8_t *)v44.f32 = vext_s8((int8x8_t)vdup_lane_s32(v34, 0), (int8x8_t)v37, 4uLL);
      *(float32x2_t *)&v44.u32[2] = v43;
      float32x4_t v45 = vmulq_n_f32(v35, v40.f32[0]);
      float32x4_t v47 = v269;
      float32x4_t v46 = v270;
      float32x4_t v49 = v271;
      float32x4_t v48 = v272;
      float32x4_t v51 = v273;
      float32x4_t v50 = v274;
      float32x4_t v52 = vmulq_laneq_f32(v273, v45, 2);
      v52.i32[3] = 0;
      float32x4_t v53 = vmlaq_lane_f32(v52, v271, *(float32x2_t *)v45.f32, 1);
      v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
      float32x4_t v54 = vmlaq_n_f32(v53, v269, v45.f32[0]);
      float32x4_t v55 = vmulq_laneq_f32(v274, v45, 2);
      v55.i32[3] = 0;
      float32x4_t v56 = vmlaq_lane_f32(v55, v272, *(float32x2_t *)v45.f32, 1);
      v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
      float32x4_t v57 = vmlaq_n_f32(v56, v270, v45.f32[0]);
      v45.i32[3] = 0;
      float32x4_t v58 = vmulq_n_f32(v38, v40.f32[0]);
      float32x4_t v59 = vmulq_laneq_f32(v273, v58, 2);
      v59.i32[3] = 0;
      float32x4_t v60 = vmlaq_lane_f32(v59, v271, *(float32x2_t *)v58.f32, 1);
      v60.i64[1] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u32[0];
      float32x4_t v61 = vmlaq_n_f32(v60, v269, v58.f32[0]);
      float32x4_t v62 = vmulq_laneq_f32(v274, v58, 2);
      v62.i32[3] = 0;
      float32x4_t v63 = vmlaq_lane_f32(v62, v272, *(float32x2_t *)v58.f32, 1);
      v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
      float32x4_t v64 = vmlaq_n_f32(v63, v270, v58.f32[0]);
      float32x4_t v65 = v58;
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_n_f32(v44, v40.f32[0]);
      float32x4_t v67 = vmulq_laneq_f32(v273, v66, 2);
      v67.i32[3] = 0;
      float32x4_t v68 = vmlaq_lane_f32(v67, v271, *(float32x2_t *)v66.f32, 1);
      v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
      float32x4_t v69 = vmlaq_n_f32(v68, v269, v66.f32[0]);
      float32x4_t v70 = vmulq_laneq_f32(v274, v66, 2);
      float32x4_t v71 = v66;
      v71.i32[3] = 0;
      v42[6] = v45;
      v42[7] = v65;
      v42[8] = v71;
      float32x4_t v72 = *(float32x4_t *)&v18[32 * v15];
      v54.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
      v70.i32[3] = 0;
      float32x4_t v73 = vmlaq_lane_f32(v70, v48, *(float32x2_t *)v66.f32, 1);
      v73.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0];
      float32x4_t v74 = vmlaq_n_f32(v73, v46, v66.f32[0]);
      v61.i64[1] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
      v69.i64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u32[0];
      v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
      v64.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u32[0];
      v74.i64[1] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u32[0];
      float32x2_t v75 = (float32x4_t *)(v13 + 144 * v15);
      float32x4_t v76 = vmlsq_lane_f32(*v19, v54, *(float32x2_t *)v47.f32, 0);
      v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
      float32x4_t v77 = vmlsq_lane_f32(v75[3], v54, *(float32x2_t *)v46.f32, 0);
      v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
      float32x4_t v78 = vmlsq_lane_f32(v75[6], v57, *(float32x2_t *)v46.f32, 0);
      v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
      float32x4_t v79 = vmlsq_lane_f32(v19[1], v54, *(float32x2_t *)v47.f32, 1);
      v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
      float32x4_t v80 = vmlsq_lane_f32(v75[4], v54, *(float32x2_t *)v46.f32, 1);
      v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
      float32x4_t v81 = vmlsq_lane_f32(v75[7], v57, *(float32x2_t *)v46.f32, 1);
      v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
      float32x4_t v82 = vmlsq_laneq_f32(v19[2], v54, v47, 2);
      v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
      float32x4_t v83 = vmlsq_laneq_f32(v75[5], v54, v46, 2);
      v83.i64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u32[0];
      float32x4_t v84 = vmlsq_laneq_f32(v75[8], v57, v46, 2);
      v84.i64[1] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u32[0];
      float32x4_t v85 = vmlsq_lane_f32(v76, v61, *(float32x2_t *)v49.f32, 0);
      v85.i64[1] = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u32[0];
      float32x4_t v86 = vmlsq_lane_f32(v77, v61, *(float32x2_t *)v48.f32, 0);
      v86.i64[1] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u32[0];
      float32x4_t v87 = vmlsq_lane_f32(v78, v64, *(float32x2_t *)v48.f32, 0);
      v87.i64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u32[0];
      float32x4_t v88 = vmlsq_lane_f32(v79, v61, *(float32x2_t *)v49.f32, 1);
      v88.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u32[0];
      float32x4_t v89 = vmlsq_lane_f32(v80, v61, *(float32x2_t *)v48.f32, 1);
      v89.i64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u32[0];
      float32x4_t v90 = vmlsq_lane_f32(v81, v64, *(float32x2_t *)v48.f32, 1);
      v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
      float32x4_t v91 = vmlsq_laneq_f32(v82, v61, v49, 2);
      v91.i64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u32[0];
      float32x4_t v92 = vmlsq_laneq_f32(v83, v61, v48, 2);
      v92.i64[1] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u32[0];
      float32x4_t v93 = vmlsq_laneq_f32(v84, v64, v48, 2);
      v93.i64[1] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u32[0];
      float32x4_t v94 = vmlsq_lane_f32(v85, v69, *(float32x2_t *)v51.f32, 0);
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      float32x4_t v95 = vmlsq_lane_f32(v86, v69, *(float32x2_t *)v50.f32, 0);
      v48.i32[0] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
      float32x4_t v96 = vmlsq_lane_f32(v87, v74, *(float32x2_t *)v50.f32, 0);
      v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
      float32x4_t v97 = vmlsq_lane_f32(v88, v69, *(float32x2_t *)v51.f32, 1);
      v97.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u32[0];
      float32x4_t v98 = vmlsq_lane_f32(v89, v69, *(float32x2_t *)v50.f32, 1);
      v49.i32[0] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
      float32x4_t v99 = vmlsq_lane_f32(v90, v74, *(float32x2_t *)v50.f32, 1);
      v99.i64[1] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u32[0];
      float32x4_t v100 = vmlsq_laneq_f32(v91, v69, v51, 2);
      v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
      float32x4_t v101 = vmlsq_laneq_f32(v92, v69, v50, 2);
      v51.i32[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u32[0];
      float32x4_t v102 = vmlsq_laneq_f32(v93, v74, v50, 2);
      float32x4_t v103 = (float32x4_t *)(v13 + 144 * *((unsigned __int8 *)a1 + v15 + 64));
      v102.i64[1] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u32[0];
      *float32x4_t v42 = v54;
      v42[1] = v57;
      float32x4_t v104 = vnegq_f32(v72);
      float32x4_t v105 = (float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
      *(int8x8_t *)v106.f32 = vext_s8(0, *(int8x8_t *)v105.f32, 4uLL);
      v106.i64[1] = vdupq_lane_s32(*(int32x2_t *)v104.f32, 1).u32[0];
      *(int8x8_t *)v107.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v104, 2), 0, 4uLL);
      v107.i64[1] = vdupq_lane_s32(*(int32x2_t *)v72.f32, 0).u32[0];
      v42[2] = v61;
      v42[3] = v64;
      *(int8x8_t *)v105.f32 = vext_s8(*(int8x8_t *)v72.f32, *(int8x8_t *)v104.f32, 4uLL);
      float32x4_t v108 = vmulq_laneq_f32(v105, v95, 2);
      v108.i32[3] = 0;
      float32x4_t v109 = vmlaq_lane_f32(v108, v107, *(float32x2_t *)v95.f32, 1);
      v109.i64[1] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u32[0];
      float32x4_t v110 = vmlaq_n_f32(v109, v106, v95.f32[0]);
      v110.i64[1] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u32[0];
      float32x4_t v111 = vmulq_laneq_f32(v105, v98, 2);
      v111.i32[3] = 0;
      float32x4_t v112 = vmlaq_lane_f32(v111, v107, *(float32x2_t *)v98.f32, 1);
      v112.i64[1] = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u32[0];
      float32x4_t v113 = vmlaq_n_f32(v112, v106, v98.f32[0]);
      v113.i64[1] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u32[0];
      float32x4_t v114 = vmulq_laneq_f32(v105, v101, 2);
      v114.i32[3] = 0;
      float32x4_t v115 = vmlaq_lane_f32(v114, v107, *(float32x2_t *)v101.f32, 1);
      v115.i64[1] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u32[0];
      float32x4_t v116 = vmlaq_n_f32(v115, v106, v101.f32[0]);
      v116.i64[1] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u32[0];
      float32x4_t v117 = vmulq_laneq_f32(v97, v104, 2);
      v117.i32[3] = 0;
      float32x4_t v118 = vmlaq_lane_f32(v117, v100, *(float32x2_t *)v72.f32, 1);
      float32x4_t v119 = vmulq_n_f32(v100, v104.f32[0]);
      v119.i32[3] = 0;
      float32x4_t v120 = vmulq_lane_f32(v94, *(float32x2_t *)v104.f32, 1);
      v120.i32[3] = 0;
      float32x4_t v121 = vmlaq_laneq_f32(v119, v94, v72, 2);
      float32x4_t v122 = vmlaq_n_f32(v120, v97, v72.f32[0]);
      float32x4_t v123 = vmulq_n_f32(v106, v118.f32[0]);
      v123.i32[3] = 0;
      float32x4_t v124 = vmlaq_lane_f32(v123, v107, *(float32x2_t *)v118.f32, 1);
      v124.i64[1] = vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).u32[0];
      float32x4_t v125 = vmlaq_laneq_f32(v124, v105, v118, 2);
      v125.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
      float32x4_t v126 = vmulq_n_f32(v106, v121.f32[0]);
      v126.i32[3] = 0;
      float32x4_t v127 = vmlaq_lane_f32(v126, v107, *(float32x2_t *)v121.f32, 1);
      v127.i64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u32[0];
      float32x4_t v128 = vmlaq_laneq_f32(v127, v105, v121, 2);
      v128.i64[1] = vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL).u32[0];
      float32x4_t v129 = vmulq_n_f32(v106, v122.f32[0]);
      v129.i32[3] = 0;
      float32x4_t v130 = vmlaq_lane_f32(v129, v107, *(float32x2_t *)v122.f32, 1);
      v130.i64[1] = vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u32[0];
      float32x4_t v131 = vmlaq_laneq_f32(v130, v105, v122, 2);
      v131.i64[1] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
      v132.i64[0] = 0x3F0000003F000000;
      v132.i64[1] = 0x3F0000003F000000;
      float32x4_t v133 = vmlaq_f32(v110, v132, v125);
      float32x4_t v134 = vmlaq_f32(v113, v132, v128);
      *(int8x8_t *)v125.f32 = vext_s8(*(int8x8_t *)v133.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v134.f32, 1), 4uLL);
      *(int32x2_t *)v128.f32 = vdup_laneq_s32((int32x4_t)v133, 2);
      v133.i64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u32[0];
      v42[4] = v69;
      v42[5] = v74;
      v69.i64[0] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
      *(int8x8_t *)v74.f32 = vext_s8(*(int8x8_t *)v128.f32, *(int8x8_t *)v69.f32, 4uLL);
      *(int8x8_t *)v105.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v133.f32, 0), *(int8x8_t *)v134.f32, 4uLL);
      v134.i64[1] = v69.u32[0];
      float32x4_t v135 = vmlaq_f32(v116, v132, v131);
      v128.i32[0] = vdup_laneq_s32((int32x4_t)v135, 2).u32[0];
      v135.i64[1] = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u32[0];
      v105.i64[1] = vdup_lane_s32(*(int32x2_t *)v135.f32, 0).u32[0];
      v125.i64[1] = vdup_lane_s32(*(int32x2_t *)v135.f32, 1).u32[0];
      v74.i64[1] = v128.u32[0];
      *(float32x2_t *)v95.f32 = vadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v118.f32);
      *(float32x2_t *)&v95.u32[2] = vadd_f32((float32x2_t)v48.u32[0], (float32x2_t)vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0]);
      *(float32x2_t *)v98.f32 = vadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v121.f32);
      *(float32x2_t *)&v98.u32[2] = vadd_f32((float32x2_t)v49.u32[0], (float32x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u32[0]);
      *(float32x2_t *)v101.f32 = vadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v122.f32);
      *(float32x2_t *)&v101.u32[2] = vadd_f32((float32x2_t)v51.u32[0], (float32x2_t)vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u32[0]);
      float32x4_t v136 = vaddq_f32(v135, v74);
      float32x4_t v137 = vaddq_f32(v96, vaddq_f32(v133, v105));
      float32x4_t v138 = vaddq_f32(v99, vaddq_f32(v134, v125));
      float32x4_t v139 = vaddq_f32(v102, v136);
      float32x4_t v140 = vaddq_f32(v103[1], v97);
      float32x4_t v141 = vaddq_f32(v103[2], v100);
      float32x4_t v142 = vaddq_f32(v103[3], v95);
      float32x4_t v143 = vaddq_f32(v103[4], v98);
      float32x4_t v144 = vaddq_f32(v103[5], v101);
      float32x4_t v145 = vaddq_f32(v103[6], v137);
      float32x4_t v146 = vaddq_f32(v103[7], v138);
      float32x4_t v147 = v103[8];
      float32x4_t *v103 = vaddq_f32(*v103, v94);
      v103[1] = v140;
      v103[2] = v141;
      v103[3] = v142;
      v103[4] = v143;
      v103[5] = v144;
      v103[6] = v145;
      v103[7] = v146;
      v103[8] = vaddq_f32(v147, v139);
      --v15;
    }
    while (v15);
  }
  float32x4_t v148 = *(float32x4_t *)(v13 + 96);
  float32x4_t v149 = *(float32x4_t *)(v13 + 112);
  float32x4_t v150 = *(float32x4_t *)(v13 + 128);
  *(int8x8_t *)v151.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v148.f32, 0), *(int8x8_t *)v149.f32, 4uLL);
  v151.i64[1] = v150.i64[0];
  int8x8_t v152 = vext_s8(*(int8x8_t *)v148.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v149.f32, 1), 4uLL);
  *(int32x2_t *)&v164.u32[2] = vdup_lane_s32(*(int32x2_t *)v150.f32, 1);
  *(int8x8_t *)v153.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v148, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL), 4uLL);
  v153.i64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u64[0];
  float32x4_t v154 = vaddq_f32(v148, v151);
  float32x4_t v155 = vaddq_f32(v150, v153);
  v153.i64[0] = 0x3F0000003F000000;
  v153.i64[1] = 0x3F0000003F000000;
  float32x4_t v156 = vmulq_f32(v154, v153);
  float32x4_t v157 = v156;
  v157.i32[3] = 0;
  float32x4_t v158 = vmulq_f32(vaddq_f32(v149, v164), v153);
  int8x16_t v159 = (int8x16_t)v158;
  v159.i32[3] = 0;
  float32x4_t v160 = vmulq_f32(v155, v153);
  int8x16_t v161 = (int8x16_t)v160;
  v161.i32[3] = 0;
  float32x4_t v162 = *(float32x4_t *)(v13 + 16);
  float32x4_t v163 = *(float32x4_t *)(v13 + 32);
  *(int8x8_t *)v164.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v13, 0), *(int8x8_t *)v162.f32, 4uLL);
  *(int8x8_t *)v165.f32 = vext_s8(*(int8x8_t *)v13, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v162.f32, 1), 4uLL);
  *(int32x2_t *)&v165.u32[2] = vdup_lane_s32(*(int32x2_t *)v163.f32, 1);
  *(int8x8_t *)v166.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)v13, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL), 4uLL);
  v166.i64[1] = vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL).u64[0];
  float32x4_t v167 = vaddq_f32(v162, v165);
  float32x4_t v168 = vaddq_f32(v163, v166);
  v159.i64[0] = vextq_s8(v159, v159, 8uLL).u64[0];
  float32x2_t v169 = (float32x2_t)vextq_s8(v161, v161, 8uLL).u64[0];
  float32x2_t v170 = (float32x2_t)vext_s8(*(int8x8_t *)v160.f32, (int8x8_t)v169, 4uLL);
  float32x2_t v171 = (float32x2_t)vext_s8(*(int8x8_t *)v158.f32, *(int8x8_t *)v159.i8, 4uLL);
  int8x8_t v172 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v159.i8), *(float32x2_t *)v158.f32, v169);
  int32x2_t v173 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v158.f32, v170), v171, *(float32x2_t *)v160.f32);
  *(int8x8_t *)v174.f32 = vext_s8((int8x8_t)v173, v172, 4uLL);
  v173.i32[1] = 0;
  v174.i64[1] = v173.u32[0];
  v159.i64[0] = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
  float32x2_t v175 = (float32x2_t)vext_s8(*(int8x8_t *)v156.f32, *(int8x8_t *)v159.i8, 4uLL);
  int32x2_t v176 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v156.f32, v169), *(float32x2_t *)v160.f32, *(float32x2_t *)v159.i8);
  unsigned __int32 v177 = vmls_f32(vmul_f32(*(float32x2_t *)v160.f32, v175), v170, *(float32x2_t *)v156.f32).u32[0];
  *(int32x2_t *)v178.f32 = vdup_lane_s32(v176, 0);
  v178.i64[1] = v177;
  float32x4_t v179 = vmulq_f32(v167, v153);
  float32x4_t v180 = vmulq_f32(v157, v174);
  v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
  float32x2_t v181 = vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32);
  float32x2_t v182 = vrecpe_f32(v181);
  int v183 = 4;
  do
  {
    float32x2_t v182 = vmul_f32(v182, vrecps_f32(v181, v182));
    --v183;
  }
  while (v183);
  v164.i64[1] = *(void *)(v13 + 32);
  v184.i64[0] = 0x3F0000003F000000;
  v184.i64[1] = 0x3F0000003F000000;
  float32x4_t v185 = vmulq_f32(vaddq_f32(*(float32x4_t *)v13, v164), v184);
  v185.i32[3] = 0;
  float32x4_t v186 = vmulq_f32(v168, v184);
  v179.i32[3] = 0;
  v186.i32[3] = 0;
  v178.i32[0] = v172.i32[0];
  *(int8x8_t *)v187.f32 = vext_s8((int8x8_t)vdup_lane_s32(v173, 0), (int8x8_t)v177, 4uLL);
  *(float32x2_t *)&v187.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v156.f32, v171), v175, *(float32x2_t *)v158.f32);
  float32x4_t v188 = vmulq_n_f32(v174, v182.f32[0]);
  float32x4_t v189 = vmulq_n_f32(v178, v182.f32[0]);
  float32x4_t v190 = *(float32x4_t *)(v13 + 48);
  float32x4_t v191 = *(float32x4_t *)(v13 + 64);
  float32x4_t v192 = vnegq_f32(v190);
  v192.i32[3] = 0;
  float32x4_t v193 = vnegq_f32(v191);
  v193.i32[3] = 0;
  float32x4_t v194 = vmulq_n_f32(v187, v182.f32[0]);
  float32x4_t v195 = *(float32x4_t *)(v13 + 80);
  float32x4_t v196 = vnegq_f32(v195);
  v196.i32[3] = 0;
  float32x4_t v197 = vmulq_n_f32(v192, v188.f32[0]);
  v197.i32[3] = 0;
  float32x4_t v198 = vmulq_lane_f32(v193, *(float32x2_t *)v188.f32, 1);
  v198.i32[3] = 0;
  float32x4_t v199 = vmulq_laneq_f32(v196, v188, 2);
  v199.i32[3] = 0;
  float32x4_t v200 = vaddq_f32(v197, v198);
  float32x4_t v201 = vmulq_n_f32(v192, v189.f32[0]);
  v201.i32[3] = 0;
  float32x4_t v202 = vmulq_lane_f32(v193, *(float32x2_t *)v189.f32, 1);
  v202.i32[3] = 0;
  float32x4_t v203 = vmulq_laneq_f32(v196, v189, 2);
  v203.i32[3] = 0;
  float32x4_t v204 = vaddq_f32(v200, v199);
  float32x4_t v205 = vaddq_f32(vaddq_f32(v201, v202), v203);
  float32x4_t v206 = vmulq_n_f32(v192, v194.f32[0]);
  v206.i32[3] = 0;
  float32x4_t v207 = vmulq_lane_f32(v193, *(float32x2_t *)v194.f32, 1);
  v207.i32[3] = 0;
  float32x4_t v208 = vmulq_laneq_f32(v196, v194, 2);
  v208.i32[3] = 0;
  float32x4_t v209 = vaddq_f32(v206, v207);
  *(int8x8_t *)v207.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v190.f32, 0), *(int8x8_t *)v191.f32, 4uLL);
  v207.i64[1] = vdup_lane_s32(*(int32x2_t *)v195.f32, 0).u32[0];
  float32x4_t v210 = vaddq_f32(v209, v208);
  *(int8x8_t *)v199.f32 = vext_s8(*(int8x8_t *)v190.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v191.f32, 1), 4uLL);
  v199.i64[1] = vdup_lane_s32(*(int32x2_t *)v195.f32, 1).u32[0];
  *(int8x8_t *)v190.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v190, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL), 4uLL);
  v190.i64[1] = vdup_laneq_s32((int32x4_t)v195, 2).u32[0];
  float32x4_t v211 = vmulq_n_f32(v204, v207.f32[0]);
  v211.i32[3] = 0;
  float32x4_t v212 = vmulq_lane_f32(v205, *(float32x2_t *)v207.f32, 1);
  v212.i32[3] = 0;
  float32x4_t v213 = vmulq_laneq_f32(v210, v207, 2);
  v213.i32[3] = 0;
  float32x4_t v214 = vaddq_f32(v213, vaddq_f32(v211, v212));
  float32x4_t v215 = vmulq_n_f32(v204, v199.f32[0]);
  v215.i32[3] = 0;
  float32x4_t v216 = vmulq_lane_f32(v205, *(float32x2_t *)v199.f32, 1);
  v216.i32[3] = 0;
  float32x4_t v217 = vmulq_laneq_f32(v210, v199, 2);
  v217.i32[3] = 0;
  float32x4_t v218 = vaddq_f32(v215, v216);
  float32x4_t v219 = vmulq_n_f32(v204, v190.f32[0]);
  v219.i32[3] = 0;
  float32x4_t v220 = vmulq_lane_f32(v205, *(float32x2_t *)v190.f32, 1);
  v220.i32[3] = 0;
  float32x4_t v221 = vmulq_laneq_f32(v210, v190, 2);
  v221.i32[3] = 0;
  int8x16_t v222 = (int8x16_t)vaddq_f32(v179, vaddq_f32(v217, v218));
  int8x16_t v223 = (int8x16_t)vaddq_f32(v186, vaddq_f32(v221, vaddq_f32(v219, v220)));
  float32x2_t v224 = (float32x2_t)vextq_s8(v223, v223, 8uLL).u64[0];
  float32x2_t v225 = (float32x2_t)vextq_s8(v223, v223, 4uLL).u64[0];
  float32x2_t v226 = (float32x2_t)vextq_s8(v222, v222, 4uLL).u64[0];
  int8x8_t v227 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL), *(float32x2_t *)v223.i8), *(float32x2_t *)v222.i8, v224);
  int32x2_t v228 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v222.i8, v225), v226, *(float32x2_t *)v223.i8);
  *(int8x8_t *)v229.f32 = vext_s8((int8x8_t)v228, v227, 4uLL);
  v228.i32[1] = 0;
  v229.i64[1] = v228.u32[0];
  float32x4_t v230 = vaddq_f32(v185, v214);
  float32x4_t v231 = vmulq_f32(v230, v229);
  v231.i64[0] = vpaddq_f32(v231, v231).u64[0];
  float32x2_t v232 = vpadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32);
  float32x2_t v233 = vrecpe_f32(v232);
  int v234 = 4;
  do
  {
    float32x2_t v233 = vmul_f32(v233, vrecps_f32(v232, v233));
    --v234;
  }
  while (v234);
  float32x2_t v235 = (float32x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 4uLL).u64[0];
  float32x2_t v236 = vmls_f32(vmul_f32(*(float32x2_t *)v230.f32, v226), v235, *(float32x2_t *)v222.i8);
  int8x8_t v237 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v223.i8, v235), v225, *(float32x2_t *)v230.f32);
  *(int32x2_t *)v238.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(v224, *(float32x2_t *)v230.f32), *(float32x2_t *)v223.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL)), 0);
  *(int8x8_t *)&v238.u32[2] = v237;
  v194.i32[3] = 0;
  v189.i32[3] = 0;
  v188.i32[3] = 0;
  v238.i32[0] = v227.i32[0];
  *(int8x8_t *)v239.f32 = vext_s8((int8x8_t)vdup_lane_s32(v228, 0), v237, 4uLL);
  *(float32x2_t *)&v239.u32[2] = v236;
  float32x4_t v240 = vmulq_n_f32(v229, v233.f32[0]);
  float32x4_t v241 = vmulq_n_f32(v240, v204.f32[0]);
  float32x4_t v242 = vmulq_n_f32(v240, v205.f32[0]);
  float32x4_t v243 = vmulq_n_f32(v240, v210.f32[0]);
  v240.i32[3] = 0;
  float32x4_t v244 = vmulq_n_f32(v238, v233.f32[0]);
  float32x4_t v245 = vmulq_lane_f32(v244, *(float32x2_t *)v204.f32, 1);
  float32x4_t v246 = vmulq_lane_f32(v244, *(float32x2_t *)v205.f32, 1);
  float32x4_t v247 = vmulq_lane_f32(v244, *(float32x2_t *)v210.f32, 1);
  v244.i32[3] = 0;
  float32x4_t v248 = vmulq_n_f32(v239, v233.f32[0]);
  float32x4_t v249 = vmulq_laneq_f32(v248, v204, 2);
  float32x4_t v250 = vmulq_laneq_f32(v248, v205, 2);
  float32x4_t v251 = vmulq_laneq_f32(v248, v210, 2);
  v248.i32[3] = 0;
  int8x8_t v252 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v204, 2).u64[0];
  v241.i32[3] = 0;
  v245.i32[3] = 0;
  v249.i32[3] = 0;
  float32x4_t v253 = vaddq_f32(v249, vaddq_f32(v241, v245));
  v249.i64[0] = vdupq_lane_s32(*(int32x2_t *)v205.f32, 1).u64[0];
  v242.i32[3] = 0;
  v246.i32[3] = 0;
  v245.i64[0] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
  v250.i32[3] = 0;
  v243.i32[3] = 0;
  v247.i32[3] = 0;
  v251.i32[3] = 0;
  float32x4_t v254 = vaddq_f32(v250, vaddq_f32(v242, v246));
  *(int8x8_t *)v255.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v204.f32, 0), *(int8x8_t *)v205.f32, 4uLL);
  v255.i64[1] = vdupq_lane_s32(*(int32x2_t *)v210.f32, 0).u32[0];
  *(int8x8_t *)v256.f32 = vext_s8(*(int8x8_t *)v204.f32, *(int8x8_t *)v249.f32, 4uLL);
  v256.i64[1] = vdupq_lane_s32(*(int32x2_t *)v210.f32, 1).u32[0];
  *(int8x8_t *)v249.f32 = vext_s8(v252, *(int8x8_t *)v245.f32, 4uLL);
  v249.i64[1] = vdupq_laneq_s32((int32x4_t)v210, 2).u32[0];
  float32x4_t v257 = vmulq_n_f32(v255, v253.f32[0]);
  v257.i32[3] = 0;
  float32x4_t v258 = vmulq_lane_f32(v256, *(float32x2_t *)v253.f32, 1);
  v258.i32[3] = 0;
  float32x4_t v259 = vmulq_laneq_f32(v249, v253, 2);
  v259.i32[3] = 0;
  float32x4_t v260 = vaddq_f32(v251, vaddq_f32(v243, v247));
  float32x4_t v261 = vaddq_f32(v259, vaddq_f32(v257, v258));
  float32x4_t v262 = vmulq_n_f32(v255, v254.f32[0]);
  v262.i32[3] = 0;
  float32x4_t v263 = vmulq_lane_f32(v256, *(float32x2_t *)v254.f32, 1);
  v263.i32[3] = 0;
  float32x4_t v264 = vmulq_laneq_f32(v249, v254, 2);
  v264.i32[3] = 0;
  float32x4_t v265 = vmulq_n_f32(v255, v260.f32[0]);
  v265.i32[3] = 0;
  float32x4_t v266 = vmulq_lane_f32(v256, *(float32x2_t *)v260.f32, 1);
  v266.i32[3] = 0;
  float32x4_t v267 = vmulq_laneq_f32(v249, v260, 2);
  v267.i32[3] = 0;
  float32x2_t v268 = (float32x4_t *)((char *)a1 + a1[9]);
  float32x4_t *v268 = v240;
  v268[1] = v244;
  v268[2] = v248;
  v268[3] = v253;
  v268[4] = v254;
  v268[5] = v260;
  v268[6] = vaddq_f32(v188, v261);
  v268[7] = vaddq_f32(v189, vaddq_f32(v264, vaddq_f32(v262, v263)));
  v268[8] = vaddq_f32(v194, vaddq_f32(v267, vaddq_f32(v265, v266)));
}

float32x4_t physx::Dy::Articulation::applyImpulses(unsigned __int16 *a1, float32x4_t *a2, float32x4_t *a3)
{
  v84[251] = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[9];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = v3;
  if (v4 >= 2)
  {
    uint64_t v7 = v4 - 1;
    do
    {
      uint64_t v8 = (uint64_t)&a1[80 * v7 + 72] + v3;
      uint64_t v9 = (_OWORD *)((char *)&a1[16 * v7] + v5);
      uint64_t v10 = &a2[2 * v7];
      float32x4_t v12 = *v10;
      float32x4_t v11 = v10[1];
      float32x2_t v13 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
      int8x16_t v15 = *(int8x16_t *)v9;
      float32x4_t v14 = *((float32x4_t *)v9 + 1);
      float32x2_t v16 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      int8x8_t v17 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v10->f32, (float32x2_t)vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)v16, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v10->f32, (int8x8_t)v13, 4uLL), *(float32x2_t *)v14.f32);
      *(int8x8_t *)v14.f32 = vext_s8(v17, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v14.f32), *(float32x2_t *)v10->f32, v16), 4uLL);
      v14.i64[1] = v17.u32[0];
      float32x4_t v18 = vaddq_f32(v11, v14);
      float32x4_t v19 = vmulq_laneq_f32(*(float32x4_t *)(v8 + 64), v18, 2);
      v19.i32[3] = 0;
      float32x4_t v20 = vmlaq_lane_f32(v19, *(float32x4_t *)(v8 + 32), *(float32x2_t *)v18.f32, 1);
      v20.i64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u32[0];
      float32x4_t v21 = *(float32x4_t *)(v8 + 16);
      float32x4_t v22 = vmlaq_n_f32(v20, *(float32x4_t *)v8, v18.f32[0]);
      v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
      float32x4_t v23 = vmulq_laneq_f32(*(float32x4_t *)(v8 + 80), v18, 2);
      v23.i32[3] = 0;
      float32x4_t v24 = vmlaq_lane_f32(v23, *(float32x4_t *)(v8 + 48), *(float32x2_t *)v18.f32, 1);
      v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
      *(float32x4_t *)&v81[16 * v7] = v18;
      float32x4_t v25 = vmlaq_n_f32(v24, v21, v18.f32[0]);
      v25.i64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u32[0];
      float32x4_t v26 = vsubq_f32(v12, v22);
      float32x4_t v27 = vsubq_f32(v11, v25);
      v18.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
      *(float32x2_t *)v25.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)v18.f32, 4uLL), *(float32x2_t *)v26.f32);
      *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v26.f32), *(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), 4uLL);
      v18.i64[1] = v25.u32[0];
      int8x16_t v28 = &a2[2 * *((unsigned __int8 *)a1 + v7 + 64)];
      float32x4_t v29 = vaddq_f32(v28[1], vaddq_f32(v27, v18));
      *int8x16_t v28 = vaddq_f32(*v28, v26);
      v28[1] = v29;
    }
    while ((unint64_t)(v7-- & 0xFFFFFFFE));
    uint64_t v6 = a1[9];
    LODWORD(v4) = *a1;
  }
  float32x2_t v31 = (float32x4_t *)((char *)a1 + v6);
  float32x4_t v32 = vnegq_f32(*a2);
  float32x4_t v33 = vmulq_n_f32(*v31, v32.f32[0]);
  float32x4_t v34 = vmulq_lane_f32(v31[1], *(float32x2_t *)v32.f32, 1);
  float32x4_t v35 = v31[3];
  float32x4_t v36 = vmulq_laneq_f32(v31[2], v32, 2);
  v32.i32[3] = 0;
  float32x4_t v37 = vnegq_f32(a2[1]);
  v33.i32[3] = 0;
  v34.i32[3] = 0;
  v36.i32[3] = 0;
  float32x4_t v38 = vaddq_f32(v33, v34);
  float32x4_t v39 = vmulq_n_f32(v35, v37.f32[0]);
  v39.i32[3] = 0;
  float32x4_t v40 = v31[4];
  float32x4_t v41 = v31[5];
  float32x4_t v42 = vmulq_lane_f32(v40, *(float32x2_t *)v37.f32, 1);
  v42.i32[3] = 0;
  float32x4_t v43 = vmulq_laneq_f32(v41, v37, 2);
  v43.i32[3] = 0;
  float32x4_t v44 = vaddq_f32(vaddq_f32(v38, v36), vaddq_f32(vaddq_f32(v39, v42), v43));
  float32x4_t v45 = vmulq_f32(v32, v35);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  float32x4_t v46 = vmulq_f32(v32, v40);
  v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
  float32x4_t v47 = vmulq_f32(v32, v41);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), 4uLL);
  v45.i64[1] = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32).u32[0];
  float32x4_t v48 = vmulq_n_f32(v31[6], v37.f32[0]);
  v48.i32[3] = 0;
  float32x4_t v49 = vmulq_lane_f32(v31[7], *(float32x2_t *)v37.f32, 1);
  v49.i32[3] = 0;
  float32x4_t v50 = vmulq_laneq_f32(v31[8], v37, 2);
  v50.i32[3] = 0;
  float32x4_t result = vaddq_f32(vaddq_f32(vaddq_f32(v48, v49), v50), v45);
  float32x4_t v82 = v44;
  float32x4_t v83 = result;
  if (v4 >= 2)
  {
    uint64_t v52 = 0;
    float32x4_t v53 = (float32x4_t *)v84;
    uint64_t v54 = v5 + 32;
    uint64_t v55 = v3 + 432;
    do
    {
      float32x4_t v56 = *(float32x4_t *)((char *)a1 + v54 + 16);
      float32x4_t v57 = vnegq_f32(*(float32x4_t *)((char *)a1 + v54));
      int8x16_t v58 = (int8x16_t)v57;
      v58.i32[3] = 0;
      float32x4_t v59 = &v82 + 2 * *((unsigned __int8 *)a1 + v52 + 65);
      float32x4_t v60 = v59[1];
      float32x2_t v61 = (float32x2_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
      v58.i64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
      int8x8_t v62 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v57.f32, (float32x2_t)vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)v61, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v58.i8, 4uLL), *(float32x2_t *)v60.f32);
      *(int8x8_t *)v57.f32 = vext_s8(v62, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v60.f32), *(float32x2_t *)v57.f32, v61), 4uLL);
      v57.i64[1] = v62.u32[0];
      float32x4_t v63 = *(float32x4_t *)&v81[16 * v52 + 16];
      float32x4_t v64 = vmulq_n_f32(*(float32x4_t *)((char *)a1 + v55 - 32), v63.f32[0]);
      v64.i32[3] = 0;
      float32x4_t v65 = vmulq_lane_f32(*(float32x4_t *)((char *)a1 + v55 - 16), *(float32x2_t *)v63.f32, 1);
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_laneq_f32(*(float32x4_t *)((char *)a1 + v55), v63, 2);
      float32x4_t v67 = vaddq_f32(*v59, v57);
      v66.i32[3] = 0;
      float32x4_t v68 = vaddq_f32(v64, v65);
      float32x4_t v69 = vmulq_f32(*(float32x4_t *)((char *)a1 + v55 - 128), v67);
      v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
      float32x4_t v70 = vmulq_f32(v60, *(float32x4_t *)((char *)a1 + v55 - 112));
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      float32x4_t v71 = vmulq_f32(v67, *(float32x4_t *)((char *)a1 + v55 - 96));
      float32x4_t v72 = vmulq_f32(v67, *(float32x4_t *)((char *)a1 + v55 - 64));
      *(float32x2_t *)v69.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32));
      v70.i64[0] = vpaddq_f32(v72, v72).u64[0];
      float32x4_t v73 = vmulq_f32(v60, *(float32x4_t *)((char *)a1 + v55 - 48));
      v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      float32x4_t v74 = vmulq_f32(v60, *(float32x4_t *)((char *)a1 + v55 - 80));
      v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
      *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v69.f32, (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32)), 4uLL);
      v69.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32)).u32[0];
      float32x4_t v75 = vaddq_f32(vaddq_f32(v68, v66), v69);
      v68.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
      *(float32x2_t *)v70.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v56.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v56.f32, *(int8x8_t *)v68.f32, 4uLL), *(float32x2_t *)v75.f32);
      *(int8x8_t *)v56.f32 = vext_s8(*(int8x8_t *)v70.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v75.f32), *(float32x2_t *)v56.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), 4uLL);
      v56.i64[1] = v70.u32[0];
      float32x4_t result = vsubq_f32(v67, v56);
      ++v52;
      v53[-1] = result;
      float32x4_t *v53 = vsubq_f32(v60, v75);
      v53 += 2;
      v54 += 32;
      v55 += 160;
    }
    while (v4 - 1 != v52);
    LODWORD(v4) = *a1;
  }
  if (v4)
  {
    unint64_t v76 = 0;
    float32x4_t v77 = &v83;
    float32x4_t v78 = a3 + 1;
    do
    {
      float32x4_t v79 = vaddq_f32(v78[-1], v77[-1]);
      float32x4_t v80 = *v77;
      v77 += 2;
      float32x4_t result = vaddq_f32(*v78, v80);
      v78[-1] = v79;
      *float32x4_t v78 = result;
      ++v76;
      v78 += 2;
    }
    while (v76 < *a1);
  }
  return result;
}

void *physx::Dy::Articulation::computeUnconstrainedVelocitiesInternal(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v5 = (uint64_t)v4;
  uint64_t v7 = v6;
  uint64_t v225 = v8;
  float v232 = v9;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  uint64_t v253 = *MEMORY[0x263EF8340];
  uint64_t v13 = *(unsigned __int8 *)(v10 + 92);
  float32x4_t v14 = *(void **)(v10 + 8);
  int8x16_t v15 = *(int8x16_t **)(*(void *)v10 + 168);
  float32x2_t v16 = *(float32x2_t **)(v10 + 32);
  physx::Dy::Articulation::prepareDataBlock(v15, (uint64_t)v14, v13, v16, *(void *)(v10 + 40), v6, v4);
  bzero(&v15->i8[v15[1].u16[0]], 400 * v13);
  physx::Dy::Articulation::prepareLtbMatrix((unsigned __int16 *)v15, v7, (uint64_t)v16, v5, 1.0 / v232);
  physx::Dy::PxcLtbFactor((unsigned __int16 *)v15);
  int32x2_t v228 = (float32x4_t *)&v15[8];
  physx::Dy::PxcLtbComputeJv((uint64_t)&v251, (unsigned __int16 *)v15, v15 + 8);
  if (v13 >= 2)
  {
    uint64_t v17 = v13 - 1;
    float32x4_t v18 = (float32x4_t *)&v15[49].i8[v15[1].u16[0]];
    float32x4_t v19 = v252;
    do
    {
      float32x4_t *v19 = vaddq_f32(*v19, *v18);
      ++v19;
      v18 += 25;
      --v17;
    }
    while (v17);
  }
  physx::Dy::PxcLtbProject((unsigned __int16 *)v15, v228, &v251);
  bzero(&v15->i8[v15[1].u16[1]], 160 * v13 + 144);
  physx::Dy::Articulation::prepareFsData((unsigned __int16 *)v15, v14);
  float32x4_t v20 = *(int **)(v11 + 64);
  if ((v20[1] & 0x80000000) == 0)
  {
    bzero(*(void **)(v11 + 48), 48 * v13);
    float32x4_t v20 = *(int **)(v11 + 64);
  }
  int v21 = *v20;
  if ((*v20 & 0x80000000) == 0)
  {
    bzero(*(void **)(v11 + 56), 48 * v13);
    float32x4_t v20 = *(int **)(v11 + 64);
    int v21 = *v20;
  }
  int v22 = (unsigned __int16)v21;
  char v23 = *((unsigned __int16 *)v20 + 2) == (unsigned __int16)v21;
  if (v13 >= 2)
  {
    uint64_t v24 = v13 - 1;
    float32x4_t v25 = (float *)&v244;
    float32x4_t v26 = (float *)v246;
    float32x4_t v27 = (float **)(v14 + 8);
    do
    {
      int8x16_t v28 = *v27;
      v27 += 5;
      float v29 = (float)((float)(v28[76] * v232) + 1.0) + (float)((float)(v28[75] * v232) * v232);
      float v30 = v28[77];
      *v26++ = v29 * (float)(1.0 / v30);
      float v31 = v28[78];
      *v25++ = v29 * (float)(1.0 / v31);
      v23 &= v30 == v31;
      --v24;
    }
    while (v24);
  }
  uint64_t v32 = *(void *)(v11 + 56);
  long long v239 = *v3;
  uint64_t v240 = *((void *)v3 + 2);
  physx::Dy::PxcFsComputeJointLoadsSimd((unsigned __int16 *)v15, v7, v32, (uint64_t)v245, v13, v22, (uint64_t *)&v239);
  uint64_t v33 = *(void *)(v11 + 56);
  long long v237 = *v3;
  float32x2_t v226 = v3;
  int8x8_t v227 = (float32x4_t *)v7;
  uint64_t v238 = *((void *)v3 + 2);
  physx::Dy::PxcFsPropagateDrivenInertiaSimd((unsigned __int16 *)v15, v7, (uint64_t)v245, v33, &v237);
  uint64_t v34 = v15->u16[0];
  if (v34 <= 1)
  {
    float32x4_t v106 = (float32x4_t *)&v15->i8[v15[1].u16[1]];
    float32x4_t v107 = v106 + 9;
    float32x4_t v108 = (float32x4_t *)&v15->i8[v15->u16[1]];
    bzero(&v251, 32 * v34);
  }
  else
  {
    uint64_t v221 = v13;
    int8x16_t v222 = v15;
    uint64_t v223 = v11;
    uint64_t v224 = v12;
    uint64_t v35 = v34 - 1;
    float32x4_t v36 = (float32x4_t *)&v242;
    float32x4_t v37 = (unsigned int *)(v14 + 9);
    float32x4_t v38 = (float32x4_t *)(*(void *)(v11 + 56) + 80);
    float32x4_t v39 = (float *)(v5 + 152);
    float32x4_t v40 = (float *)&v15[11].i32[2];
    float v41 = -0.5;
    float v42 = 1.0;
    uint64_t v43 = v34 - 1;
    float v44 = v232;
    float32x4_t v45 = v228;
    do
    {
      uint64_t v46 = *((void *)v37 - 1);
      float v47 = *(v40 - 1);
      float v48 = *v40;
      float v49 = *(v40 - 2);
      f32 = v45[2 * *v37].f32;
      float v51 = f32[5];
      float v52 = f32[6];
      float v53 = f32[4];
      if (*(unsigned char *)(v46 + 330) == 1)
      {
        float v54 = *(float *)(v46 + 272);
        float v55 = *(float *)(v46 + 276);
        float v56 = *(float *)(v46 + 280);
      }
      else
      {
        float v58 = *(v39 - 3);
        float v57 = *(v39 - 2);
        float v59 = *(v39 - 1);
        float v60 = *(float *)(v46 + 284);
        float v61 = *(float *)(v46 + 272);
        float v62 = *(float *)(v46 + 276);
        float v63 = *(float *)(v46 + 280);
        float v64 = (float)((float)((float)(*v39 * v61) - (float)(v60 * v58)) - (float)(v62 * v59)) + (float)(v57 * v63);
        float v65 = (float)((float)((float)(*v39 * v62) - (float)(v60 * v57)) - (float)(v63 * v58)) + (float)(v59 * v61);
        float v66 = (float)((float)((float)(*v39 * v63) - (float)(v60 * v59)) - (float)(v61 * v57)) + (float)(v58 * v62);
        float v67 = (float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66);
        float v68 = sqrtf(v67);
        float v54 = 0.0;
        float v55 = 0.0;
        float v56 = 0.0;
        if (v68 >= 1.0e-12)
        {
          float v229 = (float)((float)((float)(*v39 * v62) - (float)(v60 * v57)) - (float)(v63 * v58)) + (float)(v59 * v61);
          float v230 = (float)((float)((float)(*v39 * v61) - (float)(v60 * v58)) - (float)(v62 * v59)) + (float)(v57 * v63);
          float v231 = *v40;
          float v69 = (float)((float)((float)(v58 * v61) + (float)(v60 * *v39)) + (float)(v62 * v57)) + (float)(v63 * v59);
          if (v69 >= 0.0)
          {
            float v70 = v68;
          }
          else
          {
            float v70 = -v68;
            float v69 = -v69;
          }
          float v71 = atan2f(v70, v69);
          float v72 = 0.0;
          float v73 = 0.0;
          float v74 = 0.0;
          float v44 = v232;
          float32x4_t v45 = v228;
          float v41 = -0.5;
          float v42 = 1.0;
          float v48 = v231;
          if (v67 > 0.0)
          {
            float v72 = (float)(v230 * (float)(1.0 / v68)) + (float)(v230 * (float)(1.0 / v68));
            float v73 = (float)(v229 * (float)(1.0 / v68)) + (float)(v229 * (float)(1.0 / v68));
            float v74 = (float)(v66 * (float)(1.0 / v68)) + (float)(v66 * (float)(1.0 / v68));
          }
          float v54 = v71 * v72;
          float v55 = v71 * v73;
          float v56 = v71 * v74;
        }
      }
      float v75 = v48 - v52;
      v37 += 10;
      float v76 = v54 + v54;
      float v77 = v55 + v55;
      float v78 = v56 + v56;
      float v80 = *(v39 - 15);
      float v79 = *(v39 - 14);
      float v81 = v41 + (float)(v79 * v79);
      float v82 = *(v39 - 17);
      float v83 = *(v39 - 16);
      float v84 = (float)((float)(v77 * v83) + (float)(v82 * v76)) + (float)(v80 * v78);
      float v85 = (float)((float)(v79 * (float)((float)(v83 * v78) - (float)(v80 * v77))) + (float)(v76 * v81))
          + (float)(v82 * v84);
      float v86 = (float)((float)(v79 * (float)((float)(v80 * v76) - (float)(v82 * v78))) + (float)(v77 * v81))
          + (float)(v83 * v84);
      float v87 = (float)((float)(v79 * (float)((float)(v82 * v77) - (float)(v83 * v76))) + (float)(v78 * v81))
          + (float)(v80 * v84);
      float v88 = *(float *)(v46 + 288) + *(float *)(v46 + 288);
      float v89 = *(float *)(v46 + 292) + *(float *)(v46 + 292);
      float v90 = *(float *)(v46 + 296) + *(float *)(v46 + 296);
      float v91 = (float)((float)(v83 * v89) + (float)(v82 * v88)) + (float)(v80 * v90);
      float v92 = (float)((float)(v79 * (float)((float)(v83 * v90) - (float)(v80 * v89))) + (float)(v88 * v81))
          + (float)(v82 * v91);
      float v93 = (float)((float)(v79 * (float)((float)(v80 * v88) - (float)(v82 * v90))) + (float)(v89 * v81))
          + (float)(v83 * v91);
      float v94 = (float)((float)((float)(v79 * (float)((float)(v82 * v89) - (float)(v83 * v88))) + (float)(v90 * v81))
                  + (float)(v80 * v91))
          - v75;
      float v95 = *(float *)(v46 + 300);
      float v96 = v95 * v85;
      float v97 = v86 * v95;
      float v98 = v87 * v95;
      float v99 = *(float *)(v46 + 304);
      float v100 = (float)(v98 + (float)(v99 * v94)) * v44;
      float v101 = v42 / *(float *)(v46 + 308);
      float32x4_t v102 = vmulq_n_f32(v38[-2], v101 * (float)((float)(v96 + (float)(v99 * (float)(v92 - (float)(v49 - v53)))) * v44));
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_n_f32(v38[-1], v101 * (float)((float)(v97 + (float)(v99 * (float)(v93 - (float)(v47 - v51)))) * v44));
      v103.i32[3] = 0;
      float32x4_t v104 = *v38;
      v38 += 3;
      float32x4_t v105 = vmulq_n_f32(v104, v101 * v100);
      v105.i32[3] = 0;
      *v36++ = vaddq_f32(v105, vaddq_f32(v102, v103));
      v39 += 21;
      v40 += 8;
      --v43;
    }
    while (v43);
    int8x16_t v15 = v222;
    float32x4_t v106 = (float32x4_t *)&v222->i8[v222[1].u16[1]];
    float32x4_t v107 = v106 + 9;
    float32x4_t v108 = (float32x4_t *)&v222->i8[v222->u16[1]];
    bzero(&v251, 32 * v34);
    do
    {
      float32x4_t v109 = (char *)&v108[2 * v35];
      float32x4_t v110 = &v251 + 2 * v35;
      float32x4_t v112 = *v110;
      float32x4_t v111 = v110[1];
      float32x2_t v113 = (float32x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
      int8x16_t v115 = *(int8x16_t *)v109;
      float32x4_t v114 = *((float32x4_t *)v109 + 1);
      float32x2_t v116 = (float32x2_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
      int8x8_t v117 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v110->f32, (float32x2_t)vext_s8(*(int8x8_t *)v114.f32, (int8x8_t)v116, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v110->f32, (int8x8_t)v113, 4uLL), *(float32x2_t *)v114.f32);
      *(int8x8_t *)v114.f32 = vext_s8(v117, (int8x8_t)vmls_f32(vmul_f32(v113, *(float32x2_t *)v114.f32), *(float32x2_t *)v110->f32, v116), 4uLL);
      v114.i64[1] = v117.u32[0];
      float32x4_t v118 = &v107[10 * v35];
      float32x4_t v119 = vsubq_f32(vaddq_f32(v111, v114), v241[v35]);
      float32x4_t v120 = vmulq_laneq_f32(v118[4], v119, 2);
      v120.i32[3] = 0;
      float32x4_t v121 = vmlaq_lane_f32(v120, v118[2], *(float32x2_t *)v119.f32, 1);
      v121.i64[1] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u32[0];
      float32x4_t v122 = v118[1];
      float32x4_t v123 = vmlaq_n_f32(v121, *v118, v119.f32[0]);
      v123.i64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u32[0];
      float32x4_t v124 = vmulq_laneq_f32(v118[5], v119, 2);
      v124.i32[3] = 0;
      float32x4_t v125 = vmlaq_lane_f32(v124, v118[3], *(float32x2_t *)v119.f32, 1);
      v125.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
      *(float32x4_t *)&v246[16 * v35 + 252] = v119;
      float32x4_t v126 = vmlaq_n_f32(v125, v122, v119.f32[0]);
      v126.i64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u32[0];
      float32x4_t v127 = vsubq_f32(v112, v123);
      float32x4_t v128 = vsubq_f32(v111, v126);
      v119.i64[0] = vextq_s8(v115, v115, 8uLL).u64[0];
      *(float32x2_t *)v126.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v115.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v115.i8, *(int8x8_t *)v119.f32, 4uLL), *(float32x2_t *)v127.f32);
      *(int8x8_t *)v119.f32 = vext_s8(*(int8x8_t *)v126.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v127.f32), *(float32x2_t *)v115.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL)), 4uLL);
      v119.i64[1] = v126.u32[0];
      float32x4_t v129 = &v251 + 2 * v222[4].u8[v35];
      float32x4_t v130 = vaddq_f32(v129[1], vaddq_f32(v128, v119));
      float32x4_t *v129 = vaddq_f32(*v129, v127);
      v129[1] = v130;
    }
    while ((unint64_t)(v35-- & 0xFFFFFFFE));
    uint64_t v11 = v223;
    uint64_t v12 = v224;
    uint64_t v13 = v221;
  }
  float v132 = v232;
  float32x4_t v133 = vnegq_f32(v251);
  float32x4_t v134 = vmulq_n_f32(*v106, v133.f32[0]);
  float32x4_t v135 = vmulq_lane_f32(v106[1], *(float32x2_t *)v133.f32, 1);
  float32x4_t v136 = v106[3];
  float32x4_t v137 = vmulq_laneq_f32(v106[2], v133, 2);
  v133.i32[3] = 0;
  float32x4_t v138 = vnegq_f32(v252[0]);
  v134.i32[3] = 0;
  v135.i32[3] = 0;
  v137.i32[3] = 0;
  float32x4_t v139 = vaddq_f32(v134, v135);
  float32x4_t v140 = vmulq_n_f32(v136, v138.f32[0]);
  v140.i32[3] = 0;
  float32x4_t v141 = v106[4];
  float32x4_t v142 = v106[5];
  float32x4_t v143 = vmulq_lane_f32(v141, *(float32x2_t *)v138.f32, 1);
  v143.i32[3] = 0;
  float32x4_t v144 = vmulq_laneq_f32(v142, v138, 2);
  v144.i32[3] = 0;
  float32x4_t v145 = vaddq_f32(vaddq_f32(v139, v137), vaddq_f32(vaddq_f32(v140, v143), v144));
  float32x4_t v146 = vmulq_f32(v133, v136);
  v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
  float32x4_t v147 = vmulq_f32(v133, v141);
  v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
  float32x4_t v148 = vmulq_f32(v133, v142);
  v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
  *(int8x8_t *)v149.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32), 4uLL);
  v149.i64[1] = vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32).u32[0];
  float32x4_t v150 = vmulq_n_f32(v106[6], v138.f32[0]);
  v150.i32[3] = 0;
  float32x4_t v151 = vmulq_lane_f32(v106[7], *(float32x2_t *)v138.f32, 1);
  v151.i32[3] = 0;
  float32x4_t v152 = v106[8];
  float32x4_t v153 = vmulq_laneq_f32(v152, v138, 2);
  v153.i32[3] = 0;
  float32x4_t v248 = v145;
  float32x4_t v249 = vaddq_f32(vaddq_f32(vaddq_f32(v150, v151), v153), v149);
  if (v34 >= 2)
  {
    uint64_t v154 = v34 - 1;
    float32x4_t v155 = (float32x4_t *)&v247;
    float32x4_t v156 = (float32x4_t *)&v250;
    float32x4_t v157 = v108 + 3;
    float32x4_t v158 = v107 + 18;
    int8x16_t v159 = &v15[4].u8[1];
    do
    {
      unsigned int v160 = *v159++;
      float32x4_t v161 = vnegq_f32(v157[-1]);
      float32x4_t v162 = &v248 + 2 * v160;
      int8x16_t v163 = (int8x16_t)v161;
      v163.i32[3] = 0;
      float32x4_t v164 = v162[1];
      float32x2_t v165 = (float32x2_t)vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u64[0];
      v163.i64[0] = vextq_s8(v163, v163, 8uLL).u64[0];
      int8x8_t v166 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v161.f32, (float32x2_t)vext_s8(*(int8x8_t *)v164.f32, (int8x8_t)v165, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v161.f32, *(int8x8_t *)v163.i8, 4uLL), *(float32x2_t *)v164.f32);
      *(int8x8_t *)v161.f32 = vext_s8(v166, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v163.i8, *(float32x2_t *)v164.f32), *(float32x2_t *)v161.f32, v165), 4uLL);
      float32x4_t v167 = *v155++;
      float32x4_t v168 = vmulq_n_f32(v158[-2], v167.f32[0]);
      v168.i32[3] = 0;
      v161.i64[1] = v166.u32[0];
      float32x4_t v169 = vmulq_lane_f32(v158[-1], *(float32x2_t *)v167.f32, 1);
      float32x4_t v170 = vmulq_laneq_f32(*v158, v167, 2);
      v169.i32[3] = 0;
      v170.i32[3] = 0;
      float32x4_t v171 = vaddq_f32(v168, v169);
      float32x4_t v172 = vaddq_f32(*v162, v161);
      float32x4_t v173 = vmulq_f32(v158[-8], v172);
      v173.i64[0] = vpaddq_f32(v173, v173).u64[0];
      float32x4_t v174 = vmulq_f32(v164, v158[-7]);
      v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
      float32x4_t v175 = vmulq_f32(v172, v158[-6]);
      v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
      float32x4_t v176 = vmulq_f32(v164, v158[-5]);
      v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
      float32x4_t v177 = vmulq_f32(v172, v158[-4]);
      *(float32x2_t *)v173.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32));
      v174.i64[0] = vpaddq_f32(v177, v177).u64[0];
      float32x4_t v178 = vmulq_f32(v164, v158[-3]);
      v178.i64[0] = vpaddq_f32(v178, v178).u64[0];
      *(int8x8_t *)v173.f32 = vext_s8(*(int8x8_t *)v173.f32, (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32), vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32)), 4uLL);
      v173.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32), vpadd_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32)).u32[0];
      float32x4_t v179 = vaddq_f32(vaddq_f32(v171, v170), v173);
      int8x16_t v180 = *(int8x16_t *)v157;
      v157 += 2;
      v173.i64[0] = vextq_s8(v180, v180, 8uLL).u64[0];
      float32x4_t v152 = (float32x4_t)vextq_s8((int8x16_t)v179, (int8x16_t)v179, 4uLL);
      *(float32x2_t *)v152.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v180.i8, *(float32x2_t *)v152.f32), (float32x2_t)vext_s8(*(int8x8_t *)v180.i8, *(int8x8_t *)v173.f32, 4uLL), *(float32x2_t *)v179.f32);
      *(int8x8_t *)v149.f32 = vext_s8(*(int8x8_t *)v152.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v179.f32), *(float32x2_t *)v180.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL)), 4uLL);
      v152.i32[1] = 0;
      v149.i64[1] = v152.u32[0];
      v156[-1] = vsubq_f32(v172, v149);
      *float32x4_t v156 = vsubq_f32(v164, v179);
      v156 += 2;
      v158 += 10;
      --v154;
    }
    while (v154);
  }
  if (v34)
  {
    float32x2_t v181 = &v249;
    float32x2_t v182 = (float32x4_t *)&v15[9];
    do
    {
      float32x4_t v183 = vaddq_f32(v182[-1], v181[-1]);
      float32x4_t v184 = *v181;
      v181 += 2;
      float32x4_t v185 = vaddq_f32(*v182, v184);
      v182[-1] = v183;
      float32x4_t *v182 = v185;
      v182 += 2;
      --v34;
    }
    while (v34);
  }
  if ((v23 & 1) == 0)
  {
    uint64_t v186 = *(void *)(v11 + 48);
    int v187 = *(unsigned __int16 *)(*(void *)(v11 + 64) + 4);
    long long v235 = *v226;
    uint64_t v236 = *((void *)v226 + 2);
    physx::Dy::PxcFsComputeJointLoadsSimd((unsigned __int16 *)v15, v227, v186, (uint64_t)v243, v13, v187, (uint64_t *)&v235);
    uint64_t v188 = *(void *)(v11 + 48);
    long long v233 = *v226;
    uint64_t v234 = *((void *)v226 + 2);
    physx::Dy::PxcFsPropagateDrivenInertiaSimd((unsigned __int16 *)v15, v227, (uint64_t)v243, v188, &v233);
    float v132 = v232;
  }
  if (v13)
  {
    v189.i64[0] = *(void *)v225;
    v189.i64[1] = *(unsigned int *)(v225 + 8);
    uint64_t v190 = *(void *)(v11 + 24) + 16;
    float32x4_t v191 = v252;
    float32x4_t v192 = (uint64_t *)(*(void *)(v11 + 8) + 16);
    float32x4_t v193 = v227 + 4;
    v194.i64[0] = 0x8000000080000000;
    v194.i64[1] = 0x8000000080000000;
    uint64_t v195 = v13;
    do
    {
      v149.i32[0] = 0;
      v196.i64[0] = *(void *)(v190 - 16);
      uint64_t v197 = *v192;
      v192 += 5;
      v152.i8[0] = *(unsigned char *)(v197 + 157);
      v196.i64[1] = *(unsigned int *)(v190 - 8);
      float32x4_t v198 = (float32x4_t)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v152, (int8x16_t)v149), 0), v189, v194);
      float32x4_t v199 = (const float *)v190;
      float32x4_t v200 = vld1q_dup_f32(v199++);
      float32x4_t v201 = vaddq_f32(v196, v198);
      float v202 = *(float *)(v190 + 8);
      float32x4_t v203 = vmulq_n_f32(v193[-4], v201.f32[0]);
      float32x4_t v204 = vmulq_lane_f32(v193[-3], *(float32x2_t *)v201.f32, 1);
      float32x4_t v205 = v193[-1];
      float32x4_t v206 = vmulq_laneq_f32(v193[-2], v201, 2);
      float32x4_t v207 = vmulq_f32(v200, v205);
      v203.i32[3] = 0;
      v207.i32[3] = 0;
      float32x4_t v208 = v193[1];
      v204.i32[3] = 0;
      float32x4_t v209 = vmulq_n_f32(*v193, *v199);
      v209.i32[3] = 0;
      float32x4_t v210 = vaddq_f32(v207, v209);
      v206.i32[3] = 0;
      float32x4_t v211 = vmulq_n_f32(v208, v202);
      v211.i32[3] = 0;
      float32x4_t v212 = vmulq_f32(v201, v205);
      v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
      float32x4_t v213 = vmulq_f32(v201, *v193);
      v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
      float32x4_t v214 = vmulq_f32(v201, v208);
      float32x4_t v215 = vaddq_f32(v203, v204);
      v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
      *(int8x8_t *)v204.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32), 4uLL);
      float32x4_t v152 = vmulq_f32(v200, v193[2]);
      v152.i32[3] = 0;
      float32x4_t v216 = vmulq_n_f32(v193[3], *v199);
      v216.i32[3] = 0;
      v204.i64[1] = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32).u32[0];
      float32x4_t v217 = vmulq_n_f32(v193[4], v202);
      v217.i32[3] = 0;
      float32x4_t v218 = vaddq_f32(vaddq_f32(vaddq_f32(v152, v216), v217), v204);
      float32x4_t v219 = vmulq_n_f32(vnegq_f32(vaddq_f32(vaddq_f32(v215, v206), vaddq_f32(v210, v211))), v132);
      float32x4_t v149 = vmulq_n_f32(vnegq_f32(v218), v132);
      v219.i32[3] = 0;
      v149.i32[3] = 0;
      v191[-1] = v219;
      *float32x4_t v191 = v149;
      *(void *)uint64_t v190 = 0;
      *(_DWORD *)(v190 + 8) = 0;
      *(void *)(v190 - 1re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = 0;
      *(_DWORD *)(v190 - 8) = 0;
      v190 += 32;
      v191 += 2;
      v193 += 9;
      --v195;
    }
    while (v195);
  }
  physx::Dy::Articulation::applyImpulses((unsigned __int16 *)v15, &v251, v228);
  float32x4_t result = memcpy(*(void **)(v11 + 16), v228, 32 * v13);
  v15->i64[1] = 0;
  *(void *)(v12 + 8) = 0;
  return result;
}

float32x4_t *physx::Dy::PxcFsFlushVelocity(float32x4_t *result)
{
  uint64_t v1 = (float32x4_t *)((char *)result + result[1].u16[1]);
  uint64_t v2 = result->u16[0];
  uint64_t v3 = 16 * v2;
  uint64_t v4 = result->u16[1];
  float32x4_t v5 = vnegq_f32(result[2]);
  float32x4_t v6 = vmulq_n_f32(*v1, v5.f32[0]);
  float32x4_t v7 = vmulq_lane_f32(v1[1], *(float32x2_t *)v5.f32, 1);
  float32x4_t v8 = v1[3];
  float32x4_t v9 = vmulq_laneq_f32(v1[2], v5, 2);
  float32x4_t v10 = v5;
  v10.i32[3] = 0;
  v6.i32[3] = 0;
  v7.i32[3] = 0;
  float32x4_t v11 = vnegq_f32(result[3]);
  v9.i32[3] = 0;
  float32x4_t v12 = vmulq_n_f32(v8, v11.f32[0]);
  v12.i32[3] = 0;
  float32x4_t v13 = vaddq_f32(v6, v7);
  float32x4_t v14 = v1[4];
  float32x4_t v15 = v1[5];
  float32x4_t v16 = vmulq_lane_f32(v14, *(float32x2_t *)v11.f32, 1);
  v16.i32[3] = 0;
  float32x4_t v17 = vaddq_f32(v13, v9);
  float32x4_t v18 = vmulq_laneq_f32(v15, v11, 2);
  v18.i32[3] = 0;
  float32x4_t v19 = vaddq_f32(v17, vaddq_f32(vaddq_f32(v12, v16), v18));
  float32x4_t v20 = vmulq_f32(v10, v8);
  v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
  float32x4_t v21 = vmulq_f32(v10, v14);
  v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
  float32x4_t v22 = vmulq_f32(v10, v15);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32), 4uLL);
  v20.i64[1] = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32).u32[0];
  float32x4_t v23 = vmulq_n_f32(v1[6], v11.f32[0]);
  v23.i32[3] = 0;
  float32x4_t v24 = vmulq_lane_f32(v1[7], *(float32x2_t *)v11.f32, 1);
  v24.i32[3] = 0;
  float32x4_t v25 = vmulq_laneq_f32(v1[8], v11, 2);
  v25.i32[3] = 0;
  float32x4_t v26 = vaddq_f32(vaddq_f32(vaddq_f32(v23, v24), v25), v20);
  float32x4_t v27 = (unsigned __int16 *)&result[8];
  float32x4_t v28 = result[8];
  result[2] = 0u;
  result[3] = 0u;
  result[8] = vaddq_f32(v19, v28);
  result[9] = vaddq_f32(v26, result[9]);
  for (uint64_t i = v1[18].i64[0]; i; i &= i - 1)
  {
    unsigned int v30 = __clz(__rbit32(i));
    LODWORD(v31) = __clz(__rbit32(HIDWORD(i))) + 32;
    if (i) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = v31;
    }
    uint64_t v32 = (float32x4_t *)&v27[16 * v31 + v3];
    float32x4_t v33 = vaddq_f32(v26, v32[1]);
    *uint64_t v32 = vaddq_f32(v19, *v32);
    v32[1] = v33;
  }
  if (v2 >= 2)
  {
    uint64_t v34 = v1 + 9;
    uint64_t v35 = (char *)result + v4;
    float32x4_t v36 = &v27[v3];
    for (uint64_t j = 1; j != v2; ++j)
    {
      float32x4_t v38 = &v34[10 * j];
      float32x4_t v39 = (int8x16_t *)&v35[32 * j];
      float32x4_t v40 = (float32x2_t *)&v27[32 * v2 + 16 * v2 + 8 * j];
      float v41 = (float32x4_t *)&v36[16 * j];
      float32x4_t v42 = v41[1];
      float32x2_t v43 = (float32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
      int8x16_t v44 = v39[1];
      float32x2_t v45 = (float32x2_t)vextq_s8(*v39, *v39, 8uLL).u64[0];
      int8x8_t v46 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v42.f32, (float32x2_t)vext_s8(*(int8x8_t *)v39->i8, (int8x8_t)v45, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v43, 4uLL), *(float32x2_t *)v39->i8);
      *(int8x8_t *)v47.f32 = vext_s8(v46, (int8x8_t)vmls_f32(vmul_f32(v43, *(float32x2_t *)v39->i8), *(float32x2_t *)v42.f32, v45), 4uLL);
      v47.i64[1] = v46.u32[0];
      float32x4_t v48 = vmulq_n_f32(v38[6], COERCE_FLOAT(*(_OWORD *)v40->f32));
      v48.i32[3] = 0;
      float32x4_t v49 = vaddq_f32(*v41, v47);
      float32x4_t v50 = vmulq_lane_f32(v38[7], *v40, 1);
      v50.i32[3] = 0;
      float32x4_t v51 = vmulq_laneq_f32(v38[8], *(float32x4_t *)v40->f32, 2);
      v51.i32[3] = 0;
      float32x4_t v52 = vaddq_f32(vaddq_f32(v48, v50), v51);
      float32x4_t v53 = vmulq_f32(*v38, v49);
      v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
      float32x4_t v54 = vmulq_f32(v42, v38[1]);
      v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
      *(float32x2_t *)v53.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32));
      float32x4_t v55 = vmulq_f32(v49, v38[2]);
      v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
      float32x4_t v56 = vmulq_f32(v42, v38[3]);
      v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
      *(float32x2_t *)v55.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32));
      float32x4_t v57 = vmulq_f32(v49, v38[4]);
      v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
      float32x4_t v58 = vmulq_f32(v42, v38[5]);
      v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
      *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v53.f32, *(int8x8_t *)v55.f32, 4uLL);
      v53.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)).u32[0];
      float32x4_t v59 = vaddq_f32(v52, v53);
      v53.i64[0] = vextq_s8(v44, v44, 8uLL).u64[0];
      *(float32x2_t *)v57.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v44.i8, *(int8x8_t *)v53.f32, 4uLL), *(float32x2_t *)v59.f32);
      *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v59.f32), *(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL)), 4uLL);
      v53.i64[1] = v57.u32[0];
      float32x4_t v60 = vsubq_f32(v49, v53);
      float32x4_t v61 = vsubq_f32(v42, v59);
      float32x4_t *v41 = 0uLL;
      v41[1] = 0uLL;
      *float32x4_t v40 = 0;
      v40[1] = 0;
      float v62 = (float32x4_t *)&v27[16 * j];
      float32x4_t v63 = vaddq_f32(v62[1], v61);
      *float v62 = vaddq_f32(*v62, v60);
      v62[1] = v63;
      for (uint64_t k = v38[9].i64[0]; k; k &= k - 1)
      {
        unsigned int v65 = __clz(__rbit32(k));
        LODWORD(v6re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 6) = __clz(__rbit32(HIDWORD(k))) + 32;
        if (k) {
          uint64_t v66 = v65;
        }
        else {
          uint64_t v66 = v66;
        }
        float v67 = (float32x4_t *)&v36[16 * v66];
        float32x4_t v68 = vaddq_f32(v61, v67[1]);
        *float v67 = vaddq_f32(v60, *v67);
        v67[1] = v68;
      }
    }
  }
  result->i64[1] = 0;
  return result;
}

float32x4_t physx::Dy::Articulation::pxcFsApplyImpulse(uint64_t a1, unsigned int a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v4 = *(float32x4_t **)(a1 + 168);
  float32x4_t v5 = vnegq_f32(a3);
  v5.i32[3] = 0;
  float32x4_t v6 = vnegq_f32(a4);
  v6.i32[3] = 0;
  uint64_t v7 = (uint64_t)&v4[9] + v4[1].u16[1];
  if (a2)
  {
    float32x4_t v8 = (char *)v4 + v4->u16[1];
    uint64_t v9 = (uint64_t)&v4[2 * v4->u16[0] + 8 + 2 * v4->u16[0] + 2 * v4->u16[0]];
    unsigned int v10 = a2;
    do
    {
      float32x4_t v11 = (float32x4_t *)(v7 + 160 * v10);
      float32x4_t v12 = &v8[32 * v10];
      float32x4_t v13 = *((float32x4_t *)v12 + 1);
      float32x2_t v14 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      int8x8_t v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v5.f32, (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v14, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL), *(float32x2_t *)v13.f32);
      *(int8x8_t *)v13.f32 = vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), *(float32x2_t *)v13.f32), *(float32x2_t *)v5.f32, v14), 4uLL);
      v13.i64[1] = v15.u32[0];
      float32x4_t v16 = vaddq_f32(v6, v13);
      float32x4_t v17 = vmulq_laneq_f32(v11[4], v16, 2);
      v17.i32[3] = 0;
      float32x4_t v18 = vmlaq_lane_f32(v17, v11[2], *(float32x2_t *)v16.f32, 1);
      v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
      float32x4_t v19 = vmlaq_n_f32(v18, *v11, v16.f32[0]);
      v19.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
      float32x4_t v5 = vsubq_f32(v5, v19);
      float32x4_t v20 = vmulq_laneq_f32(v11[5], v16, 2);
      v20.i32[3] = 0;
      float32x4_t v21 = vmlaq_lane_f32(v20, v11[3], *(float32x2_t *)v16.f32, 1);
      v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
      float32x4_t v22 = vmlaq_n_f32(v21, v11[1], v16.f32[0]);
      v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
      float32x4_t v23 = vsubq_f32(v6, v22);
      v22.i64[0] = vextq_s8(*(int8x16_t *)v12, *(int8x16_t *)v12, 8uLL).u64[0];
      int8x8_t v24 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v12, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v12, *(int8x8_t *)v22.f32, 4uLL), *(float32x2_t *)v5.f32);
      *(int8x8_t *)v22.f32 = vext_s8(v24, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v5.f32), *(float32x2_t *)v12, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL)), 4uLL);
      v22.i64[1] = v24.u32[0];
      float32x4_t v6 = vaddq_f32(v23, v22);
      *(float32x4_t *)(v9 + 16 * v10) = vaddq_f32(*(float32x4_t *)(v9 + 16 * v10), v16);
      unsigned int v10 = v4[4].u8[v10];
    }
    while (v10);
  }
  float32x4_t result = vaddq_f32(v5, v4[2]);
  float32x4_t v26 = vaddq_f32(v6, v4[3]);
  v4[2] = result;
  v4[3] = v26;
  v4->i64[1] |= *(void *)(v7 + 160 * a2 + 152);
  return result;
}

double physx::Dy::Articulation::pxcFsGetVelocities(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 312))(&v12);
  long long v9 = v13;
  *a4 = v12;
  a4[1] = v9;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 312))(&v12, a1, a3);
  double result = *(double *)&v12;
  long long v11 = v13;
  *a5 = v12;
  a5[1] = v11;
  return result;
}

uint64_t physx::Dy::Articulation::pxcFsApplyImpulses(uint64_t a1, uint64_t a2, __n128 *a3, __n128 *a4, uint64_t a5, __n128 *a6, __n128 *a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)a1 + 256))(a1, a2, a8, a9, *a3, *a4);
  __n128 v14 = *a6;
  __n128 v15 = *a7;
  float32x4_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(void *)a1 + 256);
  return v16(a1, a5, a8, a9, v14, v15);
}

__n128 physx::Dy::Articulation::pxcFsGetVelocity@<Q0>(physx::Dy::Articulation *this@<X0>, unsigned int a2@<W1>, float32x4_t *a3@<X8>)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = (float32x4_t *)*((void *)this + 21);
  uint64_t v4 = (float32x4_t *)((char *)v3 + v3[1].u16[1]);
  float32x4_t v5 = v4 + 9;
  float32x4_t v6 = v3 + 8;
  uint64_t v7 = a2;
  uint64_t v8 = v4[10 * a2 + 18].i64[1];
  uint64_t v9 = v3->i64[1];
  if ((v9 & v8) != 0)
  {
    uint64_t v10 = (v9 & v8 | -(v9 & v8)) & v8;
    uint64_t v11 = v3->u16[0];
    if (v10)
    {
      float32x4_t v17 = vnegq_f32(v3[2]);
      float32x4_t v18 = vmulq_n_f32(*v4, v17.f32[0]);
      float32x4_t v19 = vmulq_lane_f32(v4[1], *(float32x2_t *)v17.f32, 1);
      float32x4_t v20 = v4[3];
      float32x4_t v21 = vmulq_laneq_f32(v4[2], v17, 2);
      v17.i32[3] = 0;
      float32x4_t v22 = vnegq_f32(v3[3]);
      v18.i32[3] = 0;
      v19.i32[3] = 0;
      v21.i32[3] = 0;
      float32x4_t v23 = vaddq_f32(v18, v19);
      float32x4_t v24 = vmulq_n_f32(v20, v22.f32[0]);
      v24.i32[3] = 0;
      float32x4_t v25 = v4[4];
      float32x4_t v26 = v4[5];
      float32x4_t v27 = vmulq_lane_f32(v25, *(float32x2_t *)v22.f32, 1);
      v27.i32[3] = 0;
      float32x4_t v28 = vmulq_laneq_f32(v26, v22, 2);
      v28.i32[3] = 0;
      float32x4_t v15 = vaddq_f32(vaddq_f32(v23, v21), vaddq_f32(vaddq_f32(v24, v27), v28));
      float32x4_t v29 = vmulq_f32(v17, v20);
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      float32x4_t v30 = vmulq_f32(v17, v25);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      float32x4_t v31 = vmulq_f32(v17, v26);
      v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
      *(int8x8_t *)v29.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), 4uLL);
      v29.i64[1] = vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).u32[0];
      float32x4_t v32 = vmulq_n_f32(v4[6], v22.f32[0]);
      v32.i32[3] = 0;
      float32x4_t v33 = vmulq_lane_f32(v4[7], *(float32x2_t *)v22.f32, 1);
      v33.i32[3] = 0;
      float32x4_t v34 = vmulq_laneq_f32(v4[8], v22, 2);
      v34.i32[3] = 0;
      float32x4_t v14 = vaddq_f32(vaddq_f32(vaddq_f32(v32, v33), v34), v29);
      float32x4_t v35 = vaddq_f32(v3[9], v14);
      v3[8] = vaddq_f32(v15, v3[8]);
      v3[9] = v35;
      v3[2] = 0u;
      v3[3] = 0u;
      v78[0] = 0;
      v77[0] = v15;
      v77[1] = v14;
      uint64_t v12 = v4[18].i64[0];
      uint64_t v16 = v10 - 1;
      unsigned int v13 = 1;
    }
    else
    {
      uint64_t v12 = 0;
      unsigned int v13 = 0;
      float32x4_t v14 = 0uLL;
      float32x4_t v15 = 0uLL;
      uint64_t v16 = v10;
    }
    float32x4_t v36 = &v6[2 * v11];
    if (v16)
    {
      float32x4_t v37 = (char *)v3 + v3->u16[1];
      uint64_t v38 = (uint64_t)&v36[2 * v11 + 2 * v11];
      do
      {
        unsigned int v39 = __clz(__rbit32(v16));
        LODWORD(v40) = __clz(__rbit32(HIDWORD(v16))) + 32;
        if (v16) {
          uint64_t v40 = v39;
        }
        else {
          uint64_t v40 = v40;
        }
        float v41 = (int8x16_t *)&v37[32 * v40];
        float32x4_t v42 = &v5[10 * v40];
        float32x2_t v43 = &v36[2 * v40];
        int8x16_t v44 = (float32x2_t *)(v38 + 16 * v40);
        float32x4_t v45 = vmulq_n_f32(v42[6], COERCE_FLOAT(*(_OWORD *)v44->f32));
        v45.i32[3] = 0;
        float32x4_t v46 = vmulq_lane_f32(v42[7], *v44, 1);
        v46.i32[3] = 0;
        float32x4_t v47 = vmulq_laneq_f32(v42[8], *(float32x4_t *)v44->f32, 2);
        v47.i32[3] = 0;
        float32x4_t v48 = vaddq_f32(v14, v43[1]);
        float32x4_t v49 = vaddq_f32(vaddq_f32(v45, v46), v47);
        int8x16_t v50 = v41[1];
        float32x2_t v51 = (float32x2_t)vextq_s8(*v41, *v41, 8uLL).u64[0];
        int8x8_t v52 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v48.f32, (float32x2_t)vext_s8(*(int8x8_t *)v41->i8, (int8x8_t)v51, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL), *(float32x2_t *)v41->i8);
        *(int8x8_t *)v53.f32 = vext_s8(v52, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), *(float32x2_t *)v41->i8), *(float32x2_t *)v48.f32, v51), 4uLL);
        v53.i64[1] = v52.u32[0];
        float32x4_t v54 = vaddq_f32(vaddq_f32(v15, *v43), v53);
        float32x4_t v55 = vmulq_f32(*v42, v54);
        v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
        float32x4_t v56 = vmulq_f32(v42[2], v54);
        v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
        float32x4_t v57 = vmulq_f32(v42[4], v54);
        v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
        *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), 4uLL);
        v55.i64[1] = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).u32[0];
        float32x4_t v58 = vmulq_f32(v48, v42[1]);
        v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
        float32x4_t v59 = vmulq_f32(v48, v42[3]);
        v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
        float32x4_t v60 = vmulq_f32(v48, v42[5]);
        v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
        *(int8x8_t *)v58.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), 4uLL);
        v58.i64[1] = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32).u32[0];
        float32x4_t v61 = vaddq_f32(v49, vaddq_f32(v55, v58));
        v55.i64[0] = vextq_s8(v50, v50, 8uLL).u64[0];
        *(float32x2_t *)v59.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)v55.f32, 4uLL), *(float32x2_t *)v61.f32);
        *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)v59.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v61.f32), *(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)), 4uLL);
        v55.i64[1] = v59.u32[0];
        float32x4_t v15 = vsubq_f32(v54, v55);
        float32x4_t v14 = vsubq_f32(v48, v61);
        float v62 = &v6[2 * v40];
        float32x4_t v63 = vaddq_f32(v62[1], v14);
        *float v62 = vaddq_f32(*v62, v15);
        v62[1] = v63;
        *float32x2_t v43 = 0uLL;
        v43[1] = 0uLL;
        *int8x16_t v44 = 0;
        v44[1] = 0;
        v78[v40] = v13;
        uint64_t v64 = v13++;
        unsigned int v65 = (float32x4_t *)&v77[2 * v64];
        v12 |= v42[9].u64[0];
        float32x4_t *v65 = v15;
        v65[1] = v14;
        v16 &= v16 - 1;
      }
      while (v16);
    }
    uint64_t v66 = ~v10;
    for (uint64_t i = v12 & ~v10; i; i &= i - 1)
    {
      unsigned int v68 = __clz(__rbit32(i));
      LODWORD(v69) = __clz(__rbit32(HIDWORD(i))) + 32;
      if (i) {
        uint64_t v69 = v68;
      }
      else {
        uint64_t v69 = v69;
      }
      uint64_t v70 = v78[v3[4].u8[v69]];
      float v71 = &v36[2 * v69];
      float v72 = (float32x4_t *)&v77[2 * v70];
      float32x4_t v73 = vaddq_f32(v71[1], v72[1]);
      *float v71 = vaddq_f32(*v71, *v72);
      v71[1] = v73;
    }
    v3->i64[1] = (v12 | v9) & v66;
  }
  float v74 = &v6[2 * v7];
  __n128 result = *(__n128 *)v74;
  float32x4_t v76 = v74[1];
  *a3 = *v74;
  a3[1] = v76;
  return result;
}

void physx::Dy::PxvArticulationDriveCache::initialize(unsigned __int16 *a1, unsigned int a2, void *a3, unsigned __int16 a4, char *a5, unsigned int a6, float a7)
{
  *(void *)&v20[252] = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  physx::Dy::Articulation::prepareDataBlock(a1, (uint64_t)a3, a2, (float32x2_t *)&a5[240 * a2], (uint64_t)&a5[272 * a2], a5, (float *)&a5[144 * a2]);
  bzero((char *)a1 + a1[9], 160 * a2 + 144);
  physx::Dy::Articulation::prepareFsData(a1, a3);
  int v19 = 0;
  if (a2 >= 2)
  {
    uint64_t v15 = v14 - 1;
    uint64_t v16 = (float *)v20;
    do
    {
      *v16++ = 1.0 / a7;
      --v15;
    }
    while (v15);
  }
  bzero(&a5[288 * v14], 48 * a2);
  v18[0] = (uint64_t)a5;
  v18[1] = a6;
  v18[2] = 336 * v14;
  physx::Dy::PxcFsComputeJointLoadsSimd(a1, a5, (uint64_t)&a5[288 * v14], (uint64_t)&v19, a2, a4, v18);
  v17[0] = a5;
  v17[1] = a6;
  uint64_t v17[2] = 336 * v14;
  physx::Dy::PxcFsPropagateDrivenInertiaSimd(a1, a5, (uint64_t)&v19, (uint64_t)&a5[288 * v14], v17);
}

float physx::Dy::SolverExtBody::projectVelocity(uint64_t a1, float *a2, float *a3)
{
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
  {
    uint64_t v9 = *(float **)(a1 + 8);
    return (float)((float)((float)(v9[1] * a2[1]) + (float)(*v9 * *a2)) + (float)(v9[2] * a2[2]))
         + (float)((float)((float)(v9[5] * a3[1]) + (float)(v9[4] * *a3)) + (float)(v9[6] * a3[2]));
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)a1 + 232))(v10);
    v5.i64[0] = *(void *)a2;
    v5.i64[1] = *((unsigned int *)a2 + 2);
    v6.i64[0] = *(void *)a3;
    v6.i64[1] = *((unsigned int *)a3 + 2);
    float32x4_t v7 = vaddq_f32(vmulq_f32(v5, v10[0]), vmulq_f32(v6, v10[1]));
    v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
    LODWORD(result) = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32).u32[0];
  }
  return result;
}

float32x2_t physx::Dy::SolverExtBody::projectVelocity(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    v8.i64[0] = *(void *)v7;
    v8.i64[1] = *(unsigned int *)(v7 + 8);
    float32x4_t v5 = vmulq_f32(v8, *a2);
    v9.i64[0] = *(void *)(v7 + 16);
    v9.i64[1] = *(unsigned int *)(v7 + 24);
    float32x4_t v6 = vmulq_f32(v9, *a3);
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(void **)a1 + 232))(v12);
    float32x4_t v5 = vmulq_f32(*a2, v12[0]);
    float32x4_t v6 = vmulq_f32(*a3, v12[1]);
  }
  float32x4_t v10 = vaddq_f32(v5, v6);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  return vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32);
}

void *physx::Dy::SolverExtBody::getLinVel(void *this, uint64_t a2)
{
  uint64_t v2 = (uint64_t)this;
  if (*(unsigned __int16 *)(a2 + 16) == 0xFFFF)
  {
    float32x4_t v5 = *(uint64_t **)(a2 + 8);
    uint64_t v3 = *v5;
    int v4 = *((_DWORD *)v5 + 2);
  }
  else
  {
    this = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a2 + 232))(&v6);
    uint64_t v3 = v6;
    int v4 = v7;
  }
  *(void *)uint64_t v2 = v3;
  *(_DWORD *)(v2 + 8) = v4;
  return this;
}

float physx::Dy::SolverExtBody::getVelocity(physx::Dy::SolverExtBody *this, void *a2)
{
  if (*((unsigned __int16 *)a2 + 8) == 0xFFFF)
  {
    uint64_t v3 = a2[1];
    *(void *)&long long v2 = *(void *)v3;
    *((void *)&v2 + 1) = *(unsigned int *)(v3 + 8);
    *(void *)&long long v4 = *(void *)(v3 + 16);
    *((void *)&v4 + 1) = *(unsigned int *)(v3 + 24);
    *(_OWORD *)this = v2;
    *((_OWORD *)this + 1) = v4;
  }
  else
  {
    (*(void (**)(void))(*(void *)*a2 + 232))(*a2);
  }
  return *(float *)&v2;
}

float32x2_t *physx::Dy::createImpulseResponseVector@<X0>(float32x2_t *result@<X0>, float *a2@<X1>, uint64_t a3@<X2>, float32x2_t *a4@<X8>)
{
  if (*(__int16 *)(a3 + 16) == -1)
  {
    uint64_t v6 = *(void *)(a3 + 8);
    float v7 = a2[1];
    float v8 = a2[2];
    float v9 = v8 * *(float *)(v6 + 64);
    float32x2_t v4 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v6 + 32), *a2), vmul_n_f32(*(float32x2_t *)(v6 + 44), v7)), vmul_n_f32(*(float32x2_t *)(v6 + 56), v8));
    float v5 = (float)((float)(*a2 * *(float *)(v6 + 40)) + (float)(v7 * *(float *)(v6 + 52))) + v9;
  }
  else
  {
    float32x2_t v4 = *(float32x2_t *)a2;
    float v5 = a2[2];
  }
  __int32 v10 = result[1].i32[0];
  *a4 = *result;
  a4[1].i32[0] = v10;
  a4[1].i32[1] = 0;
  a4[2] = v4;
  a4[3].f32[0] = v5;
  a4[3].i32[1] = 0;
  return result;
}

float physx::Dy::getImpulseResponse(uint64_t *a1, float32x2_t *a2, float32x2_t *a3, uint64_t *a4, float32x2_t *a5, float32x2_t *a6, uint64_t a7, float a8, float a9, float a10, float a11)
{
  uint64_t v17 = *((unsigned __int16 *)a1 + 8);
  if (v17 == 0xFFFF)
  {
    float v27 = *(float *)(a1[1] + 12);
    float v23 = (float)(v27 * a2[1].f32[0]) * a8;
    float32x2_t v22 = vmul_n_f32(vmul_n_f32(*a2, v27), a8);
    *a3 = v22;
    a3[1].f32[0] = v23;
    float v24 = a2[2].f32[0] * a9;
    float v25 = a2[2].f32[1] * a9;
    float v26 = a2[3].f32[0] * a9;
    a3[2].f32[0] = v24;
    a3[2].f32[1] = v25;
    a3[3].f32[0] = v26;
    float v21 = v22.f32[1];
  }
  else
  {
    uint64_t v18 = *a1;
    float v19 = a2[1].f32[0] * a8;
    float v48 = a10;
    float v20 = a2[3].f32[0] * a9;
    float32x2_t v52 = vmul_n_f32(*a2, a8);
    float v53 = v19;
    int v54 = 0;
    float32x2_t v55 = vmul_n_f32(a2[2], a9);
    float v56 = v20;
    int v57 = 0;
    float v50 = a11;
    (*(void (**)(uint64_t, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(void *)v18 + 208))(v18, v17, a7, &v52, a3);
    a10 = v48;
    a11 = v50;
    v22.i32[0] = a3->i32[0];
    float v21 = a3->f32[1];
    float v23 = a3[1].f32[0];
    float v24 = a3[2].f32[0];
    float v25 = a3[2].f32[1];
    float v26 = a3[3].f32[0];
  }
  float v29 = a2->f32[0];
  float v28 = a2->f32[1];
  float v30 = a2[1].f32[0];
  float v31 = a2[2].f32[0];
  float v32 = a2[2].f32[1];
  float v33 = a2[3].f32[0];
  uint64_t v34 = *((unsigned __int16 *)a4 + 8);
  if (v34 == 0xFFFF)
  {
    float v44 = *(float *)(a4[1] + 12);
    float v40 = (float)(v44 * a5[1].f32[0]) * a10;
    float32x2_t v38 = vmul_n_f32(vmul_n_f32(*a5, v44), a10);
    *a6 = v38;
    a6[1].f32[0] = v40;
    float v41 = a5[2].f32[0] * a11;
    float v42 = a5[2].f32[1] * a11;
    float v43 = a5[3].f32[0] * a11;
    a6[2].f32[0] = v41;
    a6[2].f32[1] = v42;
    a6[3].f32[0] = v43;
    float v39 = v38.f32[1];
  }
  else
  {
    uint64_t v35 = *a4;
    float v36 = a5[1].f32[0] * a10;
    float v37 = a5[3].f32[0] * a11;
    float32x2_t v52 = vmul_n_f32(*a5, a10);
    float v53 = v36;
    int v54 = 0;
    float32x2_t v55 = vmul_n_f32(a5[2], a11);
    float v56 = v37;
    int v57 = 0;
    __int32 v51 = v22.i32[0];
    float v47 = v31;
    float v49 = v33;
    float v46 = v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(void *)v35 + 208))(v35, v34, a7, &v52, a6);
    float v32 = v46;
    float v31 = v47;
    float v33 = v49;
    v22.i32[0] = v51;
    v38.i32[0] = a6->i32[0];
    float v39 = a6->f32[1];
    float v40 = a6[1].f32[0];
    float v41 = a6[2].f32[0];
    float v42 = a6[2].f32[1];
    float v43 = a6[3].f32[0];
  }
  return (float)((float)((float)((float)(v21 * v28) + (float)(v29 * v22.f32[0])) + (float)(v30 * v23))
               + (float)((float)((float)(v25 * v32) + (float)(v31 * v24)) + (float)(v33 * v26)))
       + (float)((float)((float)((float)(v39 * a5->f32[1]) + (float)(a5->f32[0] * v38.f32[0]))
                       + (float)(a5[1].f32[0] * v40))
               + (float)((float)((float)(v42 * a5[2].f32[1]) + (float)(a5[2].f32[0] * v41)) + (float)(a5[3].f32[0] * v43)));
}

float32x2_t physx::Dy::getImpulseResponse(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, float32x2_t *a4, float32x2_t *a5, uint64_t *a6, float32x4_t *a7, float32x4_t *a8, double a9, float32x2_t a10, float32x2_t *a11, void *a12, uint64_t a13)
{
  uint64_t v18 = *((unsigned __int16 *)a1 + 8);
  if (v18 == 0xFFFF)
  {
    a10.i32[0] = *(_DWORD *)(a1[1] + 12);
    float32x4_t v23 = vmulq_n_f32(*a2, vmul_f32(a10, *a4).f32[0]);
    v23.i32[3] = 0;
    *a3 = v23;
    float32x2_t v22 = *a5;
    float32x4_t v24 = vmulq_n_f32(a2[1], COERCE_FLOAT(*a5));
    v24.i32[3] = 0;
    a3[1] = v24;
  }
  else
  {
    uint64_t v19 = *a1;
    float32x4_t v20 = vmulq_n_f32(*a2, COERCE_FLOAT(*a4));
    v20.i32[3] = 0;
    float32x4_t v21 = vmulq_n_f32(a2[1], COERCE_FLOAT(*a5));
    v21.i32[3] = 0;
    float32x4_t v39 = v20;
    float32x4_t v40 = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, float32x4_t *))(*(void *)v19 + 216))(v19, v18, a13, &v39, a3);
    float32x4_t v23 = *a3;
    float32x4_t v24 = a3[1];
  }
  float32x4_t v25 = *a2;
  float32x4_t v26 = a2[1];
  uint64_t v27 = *((unsigned __int16 *)a6 + 8);
  if (v27 == 0xFFFF)
  {
    v22.i32[0] = *(_DWORD *)(a6[1] + 12);
    float32x4_t v31 = vmulq_n_f32(*a7, vmul_f32(v22, *a11).f32[0]);
    v31.i32[3] = 0;
    *a8 = v31;
    float32x4_t v32 = vmulq_n_f32(a7[1], COERCE_FLOAT(*a12));
    v32.i32[3] = 0;
    a8[1] = v32;
  }
  else
  {
    uint64_t v28 = *a6;
    float32x4_t v29 = vmulq_n_f32(*a7, COERCE_FLOAT(*a11));
    v29.i32[3] = 0;
    float32x4_t v30 = vmulq_n_f32(a7[1], COERCE_FLOAT(*a12));
    v30.i32[3] = 0;
    float32x4_t v39 = v29;
    float32x4_t v40 = v30;
    float32x4_t v37 = v24;
    float32x4_t v38 = v23;
    float32x4_t v35 = v26;
    float32x4_t v36 = v25;
    (*(void (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, float32x4_t *))(*(void *)v28 + 216))(v28, v27, a13, &v39, a8);
    float32x4_t v26 = v35;
    float32x4_t v25 = v36;
    float32x4_t v24 = v37;
    float32x4_t v23 = v38;
    float32x4_t v31 = *a8;
    float32x4_t v32 = a8[1];
  }
  float32x4_t v33 = vaddq_f32(vaddq_f32(vmulq_f32(v23, v25), vmulq_f32(v24, v26)), vaddq_f32(vmulq_f32(v31, *a7), vmulq_f32(v32, a7[1])));
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  return vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
}

void physx::Dy::setupFinalizeExtSolverContacts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int32x2_t a10, int32x2_t a11, int32x2_t a12, int32x2_t a13, int32x2_t a14, int32x2_t a15, int32x2_t a16, uint64_t a17)
{
  _X25 = a5;
  int32x2_t v23 = vdup_lane_s32(a16, 0);
  v255[0] = (float32x2_t)v23;
  if (*(unsigned __int16 *)(a6 + 16) == 0xFFFF) {
    float v24 = *(float *)(*(void *)(a6 + 8) + 68);
  }
  else {
    float v24 = (*(float (**)(void))(**(void **)a6 + 248))();
  }
  if (*(unsigned __int16 *)(a7 + 16) == 0xFFFF) {
    v23.i32[0] = *(_DWORD *)(*(void *)(a7 + 8) + 68);
  }
  else {
    (*(void (**)(void))(**(void **)a7 + 248))();
  }
  if (v24 > *(float *)v23.i32) {
    *(float *)v23.i32 = v24;
  }
  int32x2_t v254 = vdup_lane_s32(v23, 0);
  v25.i64[0] = *(void *)(a3 + 16);
  v25.i64[1] = *(unsigned int *)(a3 + 24);
  float32x4_t v253 = v25;
  v25.i64[0] = *(void *)(a4 + 16);
  v25.i64[1] = *(unsigned int *)(a4 + 24);
  float32x4_t v252 = v25;
  physx::Dy::SolverExtBody::getVelocity((physx::Dy::SolverExtBody *)v251, (void *)a6);
  physx::Dy::SolverExtBody::getVelocity((physx::Dy::SolverExtBody *)v250, (void *)a7);
  int32x2_t v249 = vdup_lane_s32(a11, 0);
  int32x2_t v248 = vdup_lane_s32(a13, 0);
  int32x2_t v247 = vdup_lane_s32(a12, 0);
  int32x2_t v246 = vdup_lane_s32(a14, 0);
  int32x2_t v245 = vdup_lane_s32(a15, 0);
  _X8 = a2 + 7556;
  __asm { PRFM            #0, [X8] }
  _X8 = a2 + 7684;
  __asm { PRFM            #0, [X8] }
  float32x2_t v244 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  int32x2_t v243 = vdup_lane_s32(a10, 0);
  float32x2_t v34 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
  float32x2_t v242 = vmul_n_f32(v34, *(float *)&a9);
  unint64_t v35 = *(unsigned int *)(a2 + 7688);
  if (v35)
  {
    unint64_t v36 = 0;
    unsigned int v194 = 0;
    v37.i64[0] = 0;
    v37.i32[2] = 0;
    v37.i32[3] = vdupq_lane_s32(a13, 0).i32[3];
    v38.i64[0] = 0;
    v38.i64[1] = a11.u32[0];
    float32x2_t v187 = (float32x2_t)vdup_n_s32(0x38D1B717u);
    float32x2_t v188 = (float32x2_t)vdup_n_s32(0x3F3504F3u);
    float32x4_t v39 = (float32x4_t)vorrq_s8((int8x16_t)v37, v38);
    uint64_t v193 = v39.i64[1];
    uint64_t v190 = (float *)a3;
    uint64_t v205 = a2;
    float32x2_t v195 = v34;
    do
    {
      uint64_t v40 = a2 + 4 * v36;
      unsigned int v41 = *(_DWORD *)(v40 + 7296);
      if (v41)
      {
        uint64_t v42 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *(unsigned int *)(v40 + 7424)) << 6);
        char v43 = *(unsigned char *)(v42 + 48);
        v37.i32[0] = 1.0;
        if ((v43 & 4) != 0)
        {
          v37.i32[0] = 0.5;
          if (*(_WORD *)(a2 + 104 * v36 + 2818) != 2) {
            v37.f32[0] = 1.0;
          }
        }
        float v44 = *(float *)(v42 + 44);
        float v45 = *(float *)(v42 + 56);
        v39.i32[0] = *(_DWORD *)(v42 + 60);
        __asm
        {
          PRFM            #0, [X25,#0xD0]
          PRFM            #0, [X25,#0x150]
          PRFM            #0, [X25,#0x1D0]
        }
        _X25[2] = v41;
        if (v43) {
          char v49 = 0;
        }
        else {
          char v49 = 2 * *(unsigned char *)(a2 + 104 * v36 + 2818);
        }
        char v211 = v43;
        unsigned int v221 = v41;
        unint64_t v202 = v36;
        float v50 = v37.f32[0] * v44;
        v37.f32[0] = v37.f32[0] * v45;
        *((void *)&v51 + 1) = v193;
        *(float *)&long long v51 = v50;
        DWORD1(v51) = vdupq_lane_s32(*(int32x2_t *)&v37, 0).i32[1];
        _X25[3] = v49;
        *(_WORD *)_X25 = 3;
        int32x2_t v241 = vdup_lane_s32(*(int32x2_t *)v39.f32, 0);
        *((_OWORD *)_X25 + 1) = v51;
        *((_DWORD *)_X25 + 1) = a12.i32[0];
        *((_DWORD *)_X25 + 2) = a14.i32[0];
        float32x4_t v219 = (unsigned int *)(v40 + 7424);
        unsigned int v52 = *(_DWORD *)(v40 + 7424);
        uint64_t v53 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * v52) << 6);
        v55.i64[0] = *(void *)v53;
        v55.i32[2] = *(_DWORD *)(v53 + 8);
        float32x4_t v215 = _X25;
        uint64_t v54 = (uint64_t)(_X25 + 80);
        v55.i64[1] = v55.u32[2];
        int32x4_t v240 = v55;
        float32x2_t v56 = 0;
        if (v52 == 0xFFFF)
        {
          int v57 = _X25 + 80;
        }
        else
        {
          do
          {
            float32x4_t v58 = (unsigned __int16 *)(a2 + 44 * v52);
            uint64_t v59 = *((unsigned __int8 *)v58 + 5);
            unsigned int v225 = v52;
            if (*((unsigned char *)v58 + 5))
            {
              uint64_t v60 = a1 + ((unint64_t)*v58 << 6);
              do
              {
                int v57 = (char *)(v54 + 112);
                *(float32x2_t *)v55.i8 = physx::Dy::setupExtSolverContact(a6, a7, (float32x2_t *)&v249, (float32x2_t *)&v248, (float32x2_t *)&v247, &v246, &v253, &v252, (int8x8_t *)&v240, &v244, &v242, (float32x2_t *)&v245, (float32x2_t *)&v254, (float32x2_t *)&v241, (float32x2_t *)&v243, v60, v54, v255, a17,
                                           v251,
                                           v250);
                float32x2_t v56 = vadd_f32(v56, *(float32x2_t *)v55.i8);
                v60 += 64;
                uint64_t v54 = (uint64_t)v57;
                --v59;
              }
              while (v59);
            }
            else
            {
              int v57 = (char *)v54;
            }
            a2 = v205;
            unsigned int v52 = *(unsigned __int16 *)(v205 + 44 * v225 + 2);
            uint64_t v54 = (uint64_t)v57;
          }
          while (v52 != 0xFFFF);
        }
        *(float *)v55.i32 = (float)v221;
        float32x2_t v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 0);
        float32x2_t v62 = vrecpe_f32(v61);
        int v63 = 4;
        do
        {
          float32x2_t v62 = vmul_f32(v62, vrecps_f32(v61, v62));
          --v63;
        }
        while (v63);
        int32x4_t v64 = v240;
        v64.i32[3] = vmul_f32(v56, v62).i32[1];
        *((int32x4_t *)_X25 + 2) = v64;
        bzero(v57, 4 * v221);
        _X25 = &v57[4 * ((v221 + 3) & 0xFFFFFFFC)];
        *((_DWORD *)v215 + internalABP::SplitBoxes::reset((void *)this + 13) = 0;
        if (v211)
        {
          unint64_t v36 = v202;
        }
        else
        {
          *(int32x2_t *)v65.i8 = vdup_lane_s32(*(int32x2_t *)v240.i8, 1);
          float32x4_t v66 = vsubq_f32(v251[0], v250[0]);
          *(int8x8_t *)v67.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32(v240, 2)), 4uLL);
          v67.i64[1] = v65.u32[0];
          *(int8x8_t *)v65.i8 = vext_s8((int8x8_t)vneg_f32(*(float32x2_t *)v65.i8), *(int8x8_t *)v240.i8, 4uLL);
          float32x4_t v68 = vmulq_f32((float32x4_t)v240, v66);
          v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
          float32x4_t v69 = vmulq_n_f32((float32x4_t)v240, vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32).f32[0]);
          v69.i32[3] = 0;
          float32x4_t v70 = vsubq_f32(v66, v69);
          float32x4_t v71 = vmulq_f32(v70, v70);
          v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
          float32x4_t v37 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), v187), 0), (int8x16_t)v70, vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(v188, vabs_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v240.i8, 0))), 0), 0x1FuLL)), v67, v65));
          float32x4_t v72 = vmulq_f32(v37, v37);
          v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
          float32x2_t v73 = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32);
          float32x2_t v74 = vrsqrte_f32(v73);
          int v75 = 4;
          unint64_t v36 = v202;
          do
          {
            float32x2_t v74 = vmul_f32(v74, vrsqrts_f32(vmul_f32(v74, v74), v73));
            --v75;
          }
          while (v75);
          __asm { FMOV            V5.2S, #1.0 }
          float32x2_t v77 = vmul_f32(v73, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v73), 0), _D5, (int8x8_t)v74));
          float32x2_t v78 = vrecpe_f32(v77);
          int v79 = 4;
          do
          {
            float32x2_t v78 = vmul_f32(v78, vrecps_f32(v77, v78));
            --v79;
          }
          while (v79);
          float32x4_t v80 = vmulq_n_f32(v37, v78.f32[0]);
          int8x16_t v81 = (int8x16_t)v80;
          v81.i32[3] = 0;
          v37.i64[0] = vextq_s8(v81, v81, 8uLL).u64[0];
          float32x2_t v201 = (float32x2_t)vext_s8(*(int8x8_t *)v80.f32, *(int8x8_t *)v37.f32, 4uLL);
          *(float32x2_t *)v39.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v240.i8, v201), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v240, (int8x16_t)v240, 4uLL), *(float32x2_t *)v80.f32);
          float32x2_t v82 = (float32x2_t)vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL), *(float32x2_t *)v80.f32), *(float32x2_t *)v240.i8, *(float32x2_t *)v37.f32), 4uLL);
          v39.i32[1] = 0;
          *(float32x2_t *)v83.f32 = v82;
          v83.i64[1] = v39.u32[0];
          float32x4_t v238 = v83;
          float32x4_t v239 = (float32x4_t)v81;
          *((void *)v215 + 7) = a8 + 104 * v194;
          uint64_t v84 = a2 + 104 * v202;
          if (*(_WORD *)(v84 + 2818))
          {
            unint64_t v85 = 0;
            float32x2_t v198 = vneg_f32(*(float32x2_t *)v80.f32);
            float32x2_t v199 = vneg_f32(*(float32x2_t *)v37.f32);
            uint64_t v197 = (unsigned __int16 *)(v84 + 2818);
            float32x2_t v86 = (float32x2_t)vext_s8((int8x8_t)v82, *(int8x8_t *)v39.f32, 4uLL);
            float32x2_t v87 = vneg_f32(*(float32x2_t *)v39.f32);
            float32x2_t v200 = v82;
            float32x2_t v88 = vneg_f32(v82);
            uint64_t v196 = v80.i64[0];
            do
            {
              float v89 = (float *)(a2 + 104 * v36 + 12 * v85);
              float v90 = v89[714] + v89[714];
              float v91 = v89[715] + v89[715];
              float v92 = v89[716] + v89[716];
              float v94 = v190[2];
              float v93 = v190[3];
              float v95 = (float)(v93 * v93) + -0.5;
              float v96 = v190[1];
              float v97 = (float)((float)(v91 * v96) + (float)(*v190 * v90)) + (float)(v94 * v92);
              *(float *)&unsigned int v98 = (float)((float)(v93 * (float)((float)(v96 * v92) - (float)(v94 * v91)))
                                     + (float)(v90 * v95))
                             + (float)(*v190 * v97);
              *(float *)&unsigned int v99 = (float)((float)(v93 * (float)((float)(v94 * v90) - (float)(*v190 * v92)))
                                     + (float)(v91 * v95))
                             + (float)(v96 * v97);
              float32_t v100 = (float)((float)(v93 * (float)((float)(*v190 * v91) - (float)(v96 * v90))) + (float)(v92 * v95))
                   + (float)(v94 * v97);
              float32x2_t v101 = (float32x2_t)__PAIR64__(v99, v98);
              float32x4_t v102 = (float32x4_t)__PAIR64__(v99, v98);
              v102.f32[2] = v100;
              float v103 = v89[720] + v89[720];
              float v104 = v89[721] + v89[721];
              float v105 = v89[722] + v89[722];
              float v107 = *(float *)(a4 + 8);
              float v106 = *(float *)(a4 + 12);
              float v108 = (float)(v106 * v106) + -0.5;
              float v109 = *(float *)(a4 + 4);
              float v110 = (float)((float)(v104 * v109) + (float)(*(float *)a4 * v103)) + (float)(v107 * v105);
              float32_t v111 = (float)((float)(v106 * (float)((float)(v107 * v103) - (float)(*(float *)a4 * v105)))
                           + (float)(v104 * v108))
                   + (float)(v109 * v110);
              v113.f32[0] = (float)((float)(v106 * (float)((float)(v109 * v105) - (float)(v107 * v104)))
                                  + (float)(v103 * v108))
                          + (float)(*(float *)a4 * v110);
              float32_t v112 = (float)((float)(v106 * (float)((float)(*(float *)a4 * v104) - (float)(v109 * v103)))
                           + (float)(v105 * v108))
                   + (float)(v107 * v110);
              v113.f32[1] = v111;
              float32x4_t v114 = (float32x4_t)(unint64_t)v113;
              v114.f32[2] = v112;
              int8x16_t v115 = (float32x4_t *)_X25;
              float32x2_t v116 = (float32x2_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
              float32x2_t v117 = (float32x2_t)vext_s8((int8x8_t)v101, (int8x8_t)v116, 4uLL);
              int8x8_t v118 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v80.f32, v116), v101, v199);
              float32x2_t v119 = vmla_f32(vmul_f32(v201, v101), v117, v198);
              float v120 = v119.f32[0];
              *(int8x8_t *)v121.f32 = vext_s8((int8x8_t)v119, v118, 4uLL);
              v121.i64[1] = v119.u32[0];
              float32x2_t v122 = (float32x2_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
              float32x2_t v123 = (float32x2_t)vext_s8((int8x8_t)v113, (int8x8_t)v122, 4uLL);
              int8x8_t v124 = (int8x8_t)vmla_f32(vmul_f32(v201, v113), v123, v198);
              *(int8x8_t *)v125.f32 = vext_s8(v124, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v80.f32, v122), v113, v199), 4uLL);
              v125.i64[1] = v124.u32[0];
              float32x4_t v236 = v125;
              float32x4_t v237 = v121;
              if (*(__int16 *)(a6 + 16) == -1)
              {
                uint64_t v126 = *(void *)(a6 + 8);
                float32x4_t v127 = *(float32x4_t *)(v126 + 44);
                float32x4_t v128 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 3);
                v128.i32[1] = *(_DWORD *)(v126 + 60);
                v128.i32[2] = *(_DWORD *)(v126 + 64);
                float32x4_t v129 = vmulq_lane_f32(*(float32x4_t *)(v126 + 32), v119, 1);
                v129.i32[3] = 0;
                float32x4_t v130 = vmulq_n_f32(v127, *(float *)v118.i32);
                v130.i32[3] = 0;
                float32x4_t v131 = vmulq_n_f32(v128, v120);
                v131.i32[3] = 0;
                float32x4_t v121 = vaddq_f32(vaddq_f32(v129, v130), v131);
              }
              float32x4_t v230 = v239;
              float32x4_t v231 = v121;
              float32x4_t v132 = vnegq_f32(v125);
              float32x2_t v212 = v113;
              float32x2_t v216 = v101;
              float32x2_t v206 = v122;
              float32x2_t v207 = v116;
              if (*(__int16 *)(a7 + 16) == -1)
              {
                uint64_t v133 = *(void *)(a7 + 8);
                float32x4_t v134 = *(float32x4_t *)(v133 + 44);
                float32x4_t v135 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 3);
                v135.i32[1] = *(_DWORD *)(v133 + 60);
                v135.i32[2] = *(_DWORD *)(v133 + 64);
                float32x4_t v136 = vmulq_n_f32(*(float32x4_t *)(v133 + 32), v132.f32[0]);
                v136.i32[3] = 0;
                float32x4_t v137 = vmulq_lane_f32(v134, *(float32x2_t *)v132.f32, 1);
                v137.i32[3] = 0;
                float32x4_t v138 = vmulq_laneq_f32(v135, v132, 2);
                v138.i32[3] = 0;
                float32x4_t v132 = vaddq_f32(vaddq_f32(v136, v137), v138);
              }
              else
              {
                v132.i32[3] = 0;
              }
              _X25 += 256;
              float32x4_t v139 = vaddq_f32(v252, v114);
              float32x4_t v140 = vnegq_f32(v239);
              v140.i32[3] = 0;
              float32x4_t v222 = v239;
              float32x4_t v226 = vsubq_f32(vaddq_f32(v102, v253), v139);
              float32x4_t v228 = v140;
              float32x4_t v229 = v132;
              float32x2_t ImpulseResponse = physx::Dy::getImpulseResponse((uint64_t *)a6, &v230, &v234, (float32x2_t *)&v249, (float32x2_t *)&v247, (uint64_t *)a7, &v228, &v232, *(double *)v226.i64, *(float32x2_t *)v139.f32, (float32x2_t *)&v248, &v246, a17);
              float32x2_t v142 = vrecpe_f32(ImpulseResponse);
              int v143 = 4;
              do
              {
                float32x2_t v142 = vmul_f32(v142, vrecps_f32(ImpulseResponse, v142));
                --v143;
              }
              while (v143);
              uint64_t v144 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *v219) << 6);
              v145.i64[0] = *(void *)(v144 + 32);
              v145.i64[1] = *(unsigned int *)(v144 + 40);
              float32x4_t v146 = v222;
              float32x4_t v147 = vmulq_f32(v222, v145);
              v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
              float32x2_t v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
              if (*(__int16 *)(a6 + 16) == -1)
              {
                float32x2_t v204 = v148;
                float32x2_t v150 = physx::Dy::SolverExtBody::projectVelocity(a6, &v239, &v237);
                float32x4_t v146 = v222;
                v148.i32[0] = vsub_f32(v204, v150).u32[0];
              }
              else if (*(__int16 *)(a7 + 16) == -1)
              {
                float32x2_t v203 = v148;
                float32x2_t v149 = physx::Dy::SolverExtBody::projectVelocity(a7, &v239, &v236);
                float32x4_t v146 = v222;
                v148.i32[0] = vadd_f32(v203, v149).u32[0];
              }
              float32x2_t v151 = (float32x2_t)vdup_n_s32(0x3727C5ACu);
              v146.i32[3] = 0;
              float32x4_t *v115 = v146;
              float32x4_t v152 = v231;
              v152.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(ImpulseResponse, v151), 0), (int8x8_t)vmul_f32(v142, v195)).i32[1];
              v115[1] = v152;
              float32x4_t v153 = vnegq_f32(v229);
              float32x4_t v154 = vmulq_f32(v226, v239);
              v154.i64[0] = vpaddq_f32(v154, v154).u64[0];
              v153.i32[3] = vmul_f32(vpadd_f32(*(float32x2_t *)&v154, *(float32x2_t *)&v154), v244).i32[1];
              v115[2] = v153;
              float32x4_t v155 = v235;
              v115[4] = v234;
              v115[5] = v155;
              float32x4_t v158 = v233;
              v115[6] = v232;
              v115[7] = v158;
              v115[3].i32[0] = v148.i32[0];
              int8x8_t v156 = (int8x8_t)vmla_f32(vmul_f32(v200, v207), v216, v87);
              float32x2_t v157 = vmla_f32(vmul_f32(v86, v216), v117, v88);
              *(int8x8_t *)v159.f32 = vext_s8((int8x8_t)v157, v156, 4uLL);
              v158.i64[0] = v157.u32[0];
              v159.i64[1] = v157.u32[0];
              int8x8_t v160 = (int8x8_t)vmla_f32(vmul_f32(v86, v212), v123, v88);
              *(int8x8_t *)v161.f32 = vext_s8(v160, (int8x8_t)vmla_f32(vmul_f32(v200, v206), v212, v87), 4uLL);
              v161.i64[1] = v160.u32[0];
              float32x4_t v236 = v161;
              float32x4_t v237 = v159;
              if (*(__int16 *)(a6 + 16) == -1)
              {
                uint64_t v162 = *(void *)(a6 + 8);
                float32x4_t v163 = *(float32x4_t *)(v162 + 44);
                float32x4_t v164 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v163, 3);
                v164.i32[1] = *(_DWORD *)(v162 + 60);
                v164.i32[2] = *(_DWORD *)(v162 + 64);
                float32x4_t v165 = vmulq_lane_f32(*(float32x4_t *)(v162 + 32), v157, 1);
                v165.i32[3] = 0;
                float32x4_t v166 = vmulq_n_f32(v163, *(float *)v156.i32);
                v166.i32[3] = 0;
                float32x4_t v158 = vmulq_n_f32(v164, v158.f32[0]);
                v158.i32[3] = 0;
                float32x4_t v159 = vaddq_f32(vaddq_f32(v165, v166), v158);
              }
              float32x4_t v230 = v238;
              float32x4_t v231 = v159;
              float32x4_t v167 = vnegq_f32(v161);
              float32x4_t v217 = v159;
              if (*(__int16 *)(a7 + 16) == -1)
              {
                uint64_t v168 = *(void *)(a7 + 8);
                float32x4_t v169 = *(float32x4_t *)(v168 + 44);
                float32x4_t v170 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v169, 3);
                v170.i32[1] = *(_DWORD *)(v168 + 60);
                v170.i32[2] = *(_DWORD *)(v168 + 64);
                float32x4_t v171 = vmulq_n_f32(*(float32x4_t *)(v168 + 32), v167.f32[0]);
                v171.i32[3] = 0;
                float32x4_t v158 = vmulq_lane_f32(v169, *(float32x2_t *)v167.f32, 1);
                v158.i32[3] = 0;
                float32x4_t v172 = vmulq_laneq_f32(v170, v167, 2);
                v172.i32[3] = 0;
                float32x4_t v167 = vaddq_f32(vaddq_f32(v171, v158), v172);
              }
              else
              {
                v167.i32[3] = 0;
              }
              float32x4_t v223 = v238;
              float32x4_t v173 = vnegq_f32(v238);
              v173.i32[3] = 0;
              float32x4_t v228 = v173;
              float32x4_t v229 = v167;
              float32x4_t v213 = v167;
              float32x2_t v174 = physx::Dy::getImpulseResponse((uint64_t *)a6, &v230, &v234, (float32x2_t *)&v249, (float32x2_t *)&v247, (uint64_t *)a7, &v228, &v232, *(double *)v173.i64, *(float32x2_t *)v158.f32, (float32x2_t *)&v248, &v246, a17);
              float32x2_t v175 = vrecpe_f32(v174);
              int v176 = 4;
              do
              {
                float32x2_t v175 = vmul_f32(v175, vrecps_f32(v174, v175));
                --v176;
              }
              while (v176);
              uint64_t v177 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *v219) << 6);
              v178.i64[0] = *(void *)(v177 + 32);
              v178.i64[1] = *(unsigned int *)(v177 + 40);
              float32x4_t v179 = v223;
              float32x4_t v180 = vmulq_f32(v223, v178);
              v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
              float32x2_t v181 = vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32);
              if (*(__int16 *)(a6 + 16) == -1)
              {
                float32x2_t v209 = v181;
                float32x2_t v183 = physx::Dy::SolverExtBody::projectVelocity(a6, &v238, &v237);
                float32x4_t v179 = v223;
                v181.i32[0] = vsub_f32(v209, v183).u32[0];
              }
              else if (*(__int16 *)(a7 + 16) == -1)
              {
                float32x2_t v208 = v181;
                float32x2_t v182 = physx::Dy::SolverExtBody::projectVelocity(a7, &v238, &v236);
                float32x4_t v179 = v223;
                v181.i32[0] = vadd_f32(v208, v182).u32[0];
              }
              v80.i64[0] = v196;
              float32x4_t v184 = v217;
              float32x4_t v185 = vmulq_f32(v226, v179);
              v179.i32[3] = 0;
              v184.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v174, v151), 0), (int8x8_t)vmul_f32(v175, v195)).i32[1];
              v115[8] = v179;
              v115[9] = v184;
              float32x4_t v39 = vnegq_f32(v213);
              v185.i64[0] = vpaddq_f32(v185, v185).u64[0];
              v39.i32[3] = vmul_f32(vpadd_f32(*(float32x2_t *)&v185, *(float32x2_t *)&v185), v244).i32[1];
              v115[10] = v39;
              float32x4_t v186 = v235;
              v115[12] = v234;
              v115[13] = v186;
              v39.i32[1] = v232.i32[1];
              float32x4_t v37 = v233;
              v115[14] = v232;
              v115[15] = v37;
              v115[11].i32[0] = v181.i32[0];
              ++v85;
              unint64_t v36 = v202;
            }
            while (v85 < *v197);
          }
        }
        ++v194;
        unint64_t v35 = *(unsigned int *)(a2 + 7688);
      }
      ++v36;
    }
    while (v36 < v35);
  }
}

uint64_t physx::Dy::setupFinalizeExtSolverContactsCoulomb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7, int a8, double a9, int32x2_t a10, int32x2_t a11, int32x2_t a12, int32x2_t a13, int32x2_t a14, int32x2_t a15, int32x2_t a16, uint64_t a17)
{
  _X24 = a5;
  uint64_t v195 = *MEMORY[0x263EF8340];
  int32x2_t v23 = vdup_lane_s32(a16, 0);
  float32x2_t v193 = (float32x2_t)v23;
  if (*(unsigned __int16 *)(a6 + 16) == 0xFFFF) {
    float v24 = *(float *)(*(void *)(a6 + 8) + 68);
  }
  else {
    float v24 = (*(float (**)(void))(**(void **)a6 + 248))();
  }
  if (*(unsigned __int16 *)(a7 + 16) == 0xFFFF) {
    v23.i32[0] = *(_DWORD *)(*(void *)(a7 + 8) + 68);
  }
  else {
    (*(void (**)(void))(**(void **)a7 + 248))();
  }
  if (v24 > *(float *)v23.i32) {
    *(float *)v23.i32 = v24;
  }
  *(float *)v23.i32 = *(float *)v23.i32 / *(float *)&a9;
  int32x2_t v191 = vdup_lane_s32(a15, 0);
  int32x2_t v192 = vdup_lane_s32(v23, 0);
  int32x2_t v190 = vdup_lane_s32(a10, 0);
  physx::Dy::SolverExtBody::getVelocity((physx::Dy::SolverExtBody *)&v188, (void *)a6);
  physx::Dy::SolverExtBody::getVelocity((physx::Dy::SolverExtBody *)&v186, (void *)a7);
  int32x2_t v185 = vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v25.i64[0] = *(void *)(a3 + 16);
  v25.i32[2] = *(_DWORD *)(a3 + 24);
  float32x2_t v184 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3F4CCCCDu), *(float *)&a9);
  v25.i64[1] = v25.u32[2];
  v26.i64[0] = *(void *)(a4 + 16);
  v26.i64[1] = *(unsigned int *)(a4 + 24);
  float32x4_t v182 = v26;
  float32x4_t v183 = v25;
  _X8 = a2 + 7556;
  __asm { PRFM            #0, [X8] }
  _X8 = a2 + 7684;
  __asm { PRFM            #0, [X8] }
  uint64_t v35 = *(unsigned int *)(a2 + 7688);
  int32x2_t v181 = vdup_lane_s32(a11, 0);
  int32x2_t v180 = vdup_lane_s32(a13, 0);
  int32x2_t v179 = vdup_lane_s32(a12, 0);
  int32x2_t v178 = vdup_lane_s32(a14, 0);
  uint64_t v150 = v35;
  if (v35)
  {
    uint64_t v36 = 0;
    float32x2_t v142 = _X24;
    uint64_t v37 = a2;
    do
    {
      uint64_t v38 = v37 + 4 * v36;
      int v39 = *(_DWORD *)(v38 + 7296);
      if (v39)
      {
        uint64_t v167 = v36;
        unsigned int v40 = *(_DWORD *)(v38 + 7424);
        uint64_t v41 = a1 + ((unint64_t)*(unsigned __int16 *)(v37 + 44 * v40) << 6);
        unsigned __int32 v42 = *(_DWORD *)(v41 + 8);
        char v43 = (const float *)(v41 + 60);
        float32x2_t v44 = vld1_dup_f32(v43);
        uint64_t v45 = *(void *)v41;
        v46.i64[0] = *(void *)v41;
        v46.i64[1] = v42;
        uint64_t v47 = (uint64_t)&_X24[6];
        v177[0] = v46;
        __asm
        {
          PRFM            #0, [X24,#0xB0]
          PRFM            #0, [X24,#0x130]
          PRFM            #0, [X24,#0x1B0]
        }
        *(float32x2_t *)v176[0].f32 = v44;
        _X24->i8[1] = v39;
        _X24->i8[0] = 3;
        int32x2_t v51 = vzip1_s32(v181, v180);
        _X24->i32[1] = a12.i32[0];
        _X24[5].i8[0] = 0;
        _X24[1] = v51;
        _X24[2] = (int32x2_t)v45;
        _X24[3].i32[0] = v42;
        _X24[3].i32[1] = a14.i32[0];
        while (v40 != 0xFFFF)
        {
          unsigned int v170 = v40;
          unsigned int v52 = (unsigned __int16 *)(v37 + 44 * v40);
          uint64_t v53 = *((unsigned __int8 *)v52 + 5);
          if (*((unsigned char *)v52 + 5))
          {
            uint64_t v54 = a1 + ((unint64_t)*v52 << 6);
            do
            {
              uint64_t v55 = v47 + 112;
              physx::Dy::setupExtSolverContact(a6, a7, (float32x2_t *)&v181, (float32x2_t *)&v180, (float32x2_t *)&v179, &v178, &v183, &v182, (int8x8_t *)v177, (float32x2_t *)&v185, &v184, (float32x2_t *)&v191, (float32x2_t *)&v192, (float32x2_t *)v176, (float32x2_t *)&v190, v54, v47, &v193, a17,
                &v188,
                &v186);
              v54 += 64;
              uint64_t v47 = v55;
              --v53;
            }
            while (v53);
          }
          else
          {
            uint64_t v55 = v47;
          }
          uint64_t v37 = a2;
          unsigned int v40 = *(unsigned __int16 *)(a2 + 44 * v170 + 2);
          uint64_t v47 = v55;
        }
        _X24 = (int32x2_t *)v47;
        uint64_t v36 = v167;
      }
      ++v36;
    }
    while (v36 != v150);
    uint64_t v56 = 0;
    char v171 = 0;
    int v57 = v142;
    while (1)
    {
      uint64_t v58 = v37 + 4 * v56;
      int v59 = *(_DWORD *)(v58 + 7296);
      if (v59) {
        break;
      }
LABEL_75:
      if (++v56 == v150) {
        return v171 & 1;
      }
    }
    uint64_t v149 = v56;
    v57->i16[1] = (_WORD)_X24 - (_WORD)v57;
    unsigned int v148 = v57->u8[1];
    uint64_t v60 = a1 + ((unint64_t)*(unsigned __int16 *)(v37 + 44 * *(unsigned int *)(v58 + 7424)) << 6);
    float v62 = *(float *)v60;
    float v61 = *(float *)(v60 + 4);
    float v63 = *(float *)(v60 + 8);
    __int32 v64 = *(_DWORD *)(v60 + 44);
    char v65 = *(unsigned char *)(v60 + 48);
    _X24->i8[1] = v59;
    __int8 v66 = v59 * a8;
    if (v65) {
      __int8 v66 = 0;
    }
    _X24->i8[2] = v66;
    _X24->i8[3] = 0;
    int8x16_t v67 = _X24;
    float32x4_t v68 = _X24 + 4;
    size_t v69 = (4 * v59);
    _X24 = (int32x2_t *)((char *)_X24 + ((v69 + 12) & 0xFFFFFFF0) + 32);
    bzero(v68, v69);
    __asm
    {
      PRFM            #0, [X24,#0x80]
      PRFM            #0, [X24,#0x100]
      PRFM            #0, [X24,#0x180]
    }
    float v73 = fabsf(v62);
    float v74 = 0.0;
    if (v73 >= 0.70711) {
      float v75 = -v61;
    }
    else {
      float v75 = 0.0;
    }
    if (v73 >= 0.70711) {
      float v76 = v62;
    }
    else {
      float v76 = -v63;
    }
    if (v73 >= 0.70711) {
      float v77 = 0.0;
    }
    else {
      float v77 = v61;
    }
    physx::Dy::SolverExtBody::getLinVel(v177, a6);
    physx::Dy::SolverExtBody::getLinVel(v176, a7);
    float v78 = (float)((float)(v61 * (float)(v177[0].f32[1] - v176[0].f32[1]))
                + (float)(v62 * (float)(v177[0].f32[0] - v176[0].f32[0])))
        + (float)(v63 * (float)(v177[0].f32[2] - v176[0].f32[2]));
    float v79 = (float)(v177[0].f32[2] - v176[0].f32[2]) - (float)(v63 * v78);
    float v80 = (float)((float)((float)((float)(v177[0].f32[1] - v176[0].f32[1]) - (float)(v61 * v78))
                        * (float)((float)(v177[0].f32[1] - v176[0].f32[1]) - (float)(v61 * v78)))
                + (float)((float)((float)(v177[0].f32[0] - v176[0].f32[0]) - (float)(v62 * v78))
                        * (float)((float)(v177[0].f32[0] - v176[0].f32[0]) - (float)(v62 * v78))))
        + (float)(v79 * v79);
    BOOL v81 = v80 <= 0.00001;
    if (v80 <= 0.00001) {
      float v82 = v75;
    }
    else {
      float v82 = (float)(v177[0].f32[0] - v176[0].f32[0]) - (float)(v62 * v78);
    }
    if (v81) {
      float v83 = v76;
    }
    else {
      float v83 = (float)(v177[0].f32[1] - v176[0].f32[1]) - (float)(v61 * v78);
    }
    if (v81) {
      float v79 = v77;
    }
    float v84 = (float)((float)(v83 * v83) + (float)(v82 * v82)) + (float)(v79 * v79);
    float v85 = 0.0;
    float v86 = 0.0;
    if (v84 > 0.0)
    {
      float v87 = 1.0 / sqrtf(v84);
      float v86 = v82 * v87;
      float v85 = v83 * v87;
      float v74 = v79 * v87;
    }
    *(float *)unsigned int v194 = v86;
    *(float *)&v194[1] = v85;
    *(float *)&v194[2] = v74;
    *(float *)&v194[3] = (float)(v85 * v63) - (float)(v74 * v61);
    *(float *)&v194[4] = (float)(v74 * v62) - (float)(v86 * v63);
    *(float *)&v194[5] = (float)(v86 * v61) - (float)(v85 * v62);
    if ((v65 & 1) == 0)
    {
      v67->i32[1] = v64;
      v67[1].i32[0] = a11.i32[0];
      v67[1].i32[1] = a13.i32[0];
      v67[2].i32[0] = a12.i32[0];
      v67[2].i32[1] = a14.i32[0];
      v67->i8[0] = 12;
      unsigned int v88 = *(_DWORD *)(v58 + 7424);
      if (v88 != 0xFFFF)
      {
        int v143 = v57;
        uint64_t v89 = 0;
        uint64_t v37 = a2;
        do
        {
          unsigned int v151 = v88;
          float v90 = (unsigned __int16 *)(v37 + 44 * v88);
          uint64_t v155 = *((unsigned __int8 *)v90 + 5);
          if (*((unsigned char *)v90 + 5))
          {
            uint64_t v91 = 0;
            uint64_t v154 = a1 + ((unint64_t)*v90 << 6);
            float v92 = _X24;
            do
            {
              if (a8)
              {
                int v93 = 0;
                uint64_t v94 = v154 + (v91 << 6);
                v95.i64[0] = *(void *)(v94 + 16);
                v95.i64[1] = *(unsigned int *)(v94 + 24);
                v96.i64[0] = *(void *)(v94 + 32);
                v96.i64[1] = *(unsigned int *)(v94 + 40);
                float32x4_t v163 = v96;
                int8x16_t v165 = (int8x16_t)vsubq_f32(v95, v183);
                float32x2_t v97 = (float32x2_t)vextq_s8(v189, v189, 8uLL).u64[0];
                float32x2_t v161 = (float32x2_t)vextq_s8(v165, v165, 4uLL).u64[0];
                float32x2_t v162 = (float32x2_t)vextq_s8(v165, v165, 8uLL).u64[0];
                int8x8_t v98 = (int8x8_t)vmls_f32(vmul_f32(v161, *(float32x2_t *)v189.i8), (float32x2_t)vext_s8(*(int8x8_t *)v189.i8, (int8x8_t)v97, 4uLL), *(float32x2_t *)v165.i8);
                *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v165.i8, v97), *(float32x2_t *)v189.i8, v162), 4uLL);
                v99.i64[1] = v98.u32[0];
                int8x16_t v100 = (int8x16_t)vsubq_f32(v95, v182);
                float32x4_t v156 = vaddq_f32(v188, v99);
                v96.i64[0] = vextq_s8(v187, v187, 8uLL).u64[0];
                float32x2_t v158 = (float32x2_t)vextq_s8(v100, v100, 4uLL).u64[0];
                float32x2_t v159 = (float32x2_t)vextq_s8(v100, v100, 8uLL).u64[0];
                float32x2_t v160 = *(float32x2_t *)v100.i8;
                int8x8_t v101 = (int8x8_t)vmls_f32(vmul_f32(v158, *(float32x2_t *)v187.i8), (float32x2_t)vext_s8(*(int8x8_t *)v187.i8, *(int8x8_t *)v96.f32, 4uLL), *(float32x2_t *)v100.i8);
                *(int8x8_t *)v102.f32 = vext_s8(v101, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v96.f32), *(float32x2_t *)v187.i8, v159), 4uLL);
                v102.i64[1] = v101.u32[0];
                float32x4_t v157 = vaddq_f32(v186, v102);
                do
                {
                  float v103 = (int8x8_t *)&v194[3 * v89];
                  float32x2_t v104 = (float32x2_t)*v103;
                  *(int8x8_t *)v105.f32 = *v103;
                  v105.i64[1] = v103[1].u32[0];
                  float32x2_t v106 = (float32x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
                  float32x2_t v107 = (float32x2_t)vext_s8(*v103, (int8x8_t)v106, 4uLL);
                  int8x8_t v108 = (int8x8_t)vmls_f32(vmul_f32(v162, (float32x2_t)*v103), *(float32x2_t *)v165.i8, v106);
                  float32x2_t v109 = vmls_f32(vmul_f32(*(float32x2_t *)v165.i8, v107), v161, (float32x2_t)*v103);
                  uint64_t v110 = v109.u32[0];
                  if (*(__int16 *)(a6 + 16) == -1)
                  {
                    uint64_t v112 = *(void *)(a6 + 8);
                    float32x4_t v113 = *(float32x4_t *)(v112 + 44);
                    float32x4_t v114 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 3);
                    v114.i32[1] = *(_DWORD *)(v112 + 60);
                    v114.i32[2] = *(_DWORD *)(v112 + 64);
                    float32x4_t v115 = vmulq_lane_f32(*(float32x4_t *)(v112 + 32), v109, 1);
                    v115.i32[3] = 0;
                    float32x4_t v116 = vmulq_n_f32(v113, *(float *)v108.i32);
                    v116.i32[3] = 0;
                    float32x4_t v117 = vmulq_n_f32(v114, *(float *)&v110);
                    v117.i32[3] = 0;
                    float32x4_t v111 = vaddq_f32(vaddq_f32(v115, v116), v117);
                  }
                  else
                  {
                    *(int8x8_t *)v111.f32 = vext_s8((int8x8_t)v109, v108, 4uLL);
                    v111.i64[1] = v110;
                  }
                  int8x8_t v118 = (int8x8_t)vmls_f32(vmul_f32(v160, v107), v158, v104);
                  *(int8x8_t *)v119.f32 = vext_s8(v118, (int8x8_t)vmls_f32(vmul_f32(v159, v104), v160, v106), 4uLL);
                  v119.i64[1] = v118.u32[0];
                  v175[0] = v105;
                  v175[1] = v111;
                  float32x4_t v120 = vnegq_f32(v119);
                  float32x4_t v168 = v111;
                  if (*(__int16 *)(a7 + 16) == -1)
                  {
                    uint64_t v121 = *(void *)(a7 + 8);
                    float32x4_t v122 = *(float32x4_t *)(v121 + 44);
                    float32x4_t v123 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 3);
                    v123.i32[1] = *(_DWORD *)(v121 + 60);
                    v123.i32[2] = *(_DWORD *)(v121 + 64);
                    float32x4_t v124 = vmulq_n_f32(*(float32x4_t *)(v121 + 32), v120.f32[0]);
                    v124.i32[3] = 0;
                    float32x4_t v125 = vmulq_lane_f32(v122, *(float32x2_t *)v120.f32, 1);
                    v125.i32[3] = 0;
                    float32x4_t v126 = vmulq_laneq_f32(v123, v120, 2);
                    v126.i32[3] = 0;
                    float32x4_t v120 = vaddq_f32(vaddq_f32(v124, v125), v126);
                  }
                  else
                  {
                    v120.i32[3] = 0;
                  }
                  float32x4_t v127 = vnegq_f32(v105);
                  v127.i32[3] = 0;
                  float32x4_t v173 = v127;
                  float32x4_t v174 = v120;
                  float32x4_t v172 = v105;
                  float32x2_t ImpulseResponse = physx::Dy::getImpulseResponse((uint64_t *)a6, v175, v177, (float32x2_t *)&v181, (float32x2_t *)&v179, (uint64_t *)a7, &v173, v176, *(double *)v120.i64, *(float32x2_t *)v127.f32, (float32x2_t *)&v180, &v178, a17);
                  float32x4_t v129 = v172;
                  float32x4_t v130 = vmulq_f32(v163, v172);
                  v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
                  double v131 = COERCE_DOUBLE(vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32));
                  if (*(__int16 *)(a6 + 16) == -1)
                  {
                    float32x4_t v134 = vmulq_f32(v156, v172);
                    v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
                    LODWORD(v131) = vadd_f32(*(float32x2_t *)&v131, vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32)).u32[0];
                  }
                  else
                  {
                    float32x4_t v132 = vmulq_f32(v157, v172);
                    v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
                    double v133 = COERCE_DOUBLE(vsub_f32(*(float32x2_t *)&v131, vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32)));
                    if (*(__int16 *)(a7 + 16) == -1) {
                      double v131 = v133;
                    }
                  }
                  float32x4_t v135 = v168;
                  _X24 = v92 + 16;
                  uint64_t v89 = 1 - v89;
                  float32x2_t v136 = vrecpe_f32(ImpulseResponse);
                  int v137 = 4;
                  do
                  {
                    float32x2_t v136 = vmul_f32(v136, vrecps_f32(ImpulseResponse, v136));
                    --v137;
                  }
                  while (v137);
                  v135.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(ImpulseResponse), 0), *(int8x8_t *)&v136).i32[1];
                  *(float32x4_t *)v92[2].i8 = v135;
                  float32x4_t v138 = vnegq_f32(v174);
                  v138.i32[3] = 0;
                  *(float32x4_t *)v92[4].i8 = v138;
                  v129.i32[3] = 0;
                  *(float32x4_t *)v92->i8 = v129;
                  v92[6].i32[0] = LODWORD(v131);
                  float32x4_t v139 = v177[1];
                  *(float32x4_t *)v92[8].i8 = v177[0];
                  *(float32x4_t *)v92[10].i8 = v139;
                  float32x4_t v140 = v176[1];
                  *(float32x4_t *)v92[12].i8 = v176[0];
                  *(float32x4_t *)v92[14].i8 = v140;
                  ++v93;
                  v92 += 16;
                }
                while (v93 != a8);
              }
              else
              {
                _X24 = v92;
              }
              ++v91;
              float v92 = _X24;
            }
            while (v91 != v155);
          }
          uint64_t v37 = a2;
          unsigned int v88 = *(unsigned __int16 *)(a2 + 44 * v151 + 2);
        }
        while (v88 != 0xFFFF);
        char v171 = 1;
        int v57 = v143;
        goto LABEL_74;
      }
      char v171 = 1;
    }
    uint64_t v37 = a2;
LABEL_74:
    v57 += 14 * v148 + 6;
    uint64_t v56 = v149;
    goto LABEL_75;
  }
  char v171 = 0;
  return v171 & 1;
}

float32_t physx::Dy::ArticulationHelper::createHardLimit(uint64_t a1, uint64_t a2, unsigned int a3, float32x4_t *a4, uint64_t a5, float a6, float a7, float32x4_t a8)
{
  a4->i64[0] = 0;
  a4->i32[2] = 0;
  a4[1].i64[0] = 0;
  a4[1].i32[2] = 0;
  a4[2].i64[0] = *(void *)a5;
  a4[2].i32[2] = *(_DWORD *)(a5 + 8);
  a4[3].i64[0] = *(void *)a5;
  a4[3].i32[2] = *(_DWORD *)(a5 + 8);
  a4[5].i64[0] = 0x7F7FFFFF00000000;
  a4[5].i64[1] = 0;
  unsigned int v12 = *(_DWORD *)(a2 + 40 * a3 + 32);
  a8.i64[0] = *(void *)a5;
  v13.i64[0] = vnegq_f32(a8).u64[0];
  a8.i64[1] = *(unsigned int *)(a5 + 8);
  v13.f32[2] = -a8.f32[2];
  v22[0] = 0u;
  v22[1] = a8;
  v13.i32[3] = 0;
  v21[0] = 0u;
  v21[1] = v13;
  physx::Dy::ArticulationHelper::getImpulseSelfResponse(a1, v12, v22, a4 + 6, a3, v21, a4 + 8);
  float v17 = (float)((float)((float)(*(float *)(a5 + 4) * a4[7].f32[1]) + (float)(*(float *)a5 * a4[7].f32[0]))
              + (float)(*(float *)(a5 + 8) * a4[7].f32[2]))
      - (float)((float)((float)(*(float *)(a5 + 4) * a4[9].f32[1]) + (float)(*(float *)a5 * a4[9].f32[0]))
              + (float)(*(float *)(a5 + 8) * a4[9].f32[2]));
  if (v17 < 0.0) {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyArticulationHelper.cpp", 345, "Warning: articulation ill-conditioned or under severe stress, joint limit ignored", v14, v15, v16, v21[0].i8[0]);
  }
  float v18 = 1.0 / v17;
  float v19 = 0.0;
  if (v17 <= 0.0) {
    float v18 = 0.0;
  }
  a4->f32[3] = (float)-(float)(a6 * v18) * a7;
  if (a6 > 0.0) {
    float v19 = (float)-(float)(a6 * v18) * a7;
  }
  a4[1].f32[3] = v19;
  float32_t result = -v18;
  a4[2].f32[3] = result;
  a4[3].i32[3] = 1065353216;
  return result;
}