uint64_t physx::Gu::generateOrProcessContactsConvexConvex(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t *a4, float32x4_t *a5, int a6, uint64_t a7, uint64_t a8, float32x2_t a9, float32x2_t a10, double a11, float32x4_t *a12, unsigned int a13, char a14, char a15)
{
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int v33;
  float32x2_t v34;
  float32x2_t v35;
  int v36;
  float32x4_t v37;
  BOOL v38;
  int v39;
  float32x4_t v40;
  float32x4_t v41;
  char v44;
  float32x4_t *v45;
  float32x4_t *v46;
  char v47;
  void *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  int8x8_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  int v63;
  float32x2_t v64;
  float32x2_t v65;
  int v66;
  float32x4_t v67;
  char v68;
  void *v69;
  uint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  float32x4_t v73;
  unint64_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x2_t v84;
  int8x8_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int v94;
  float32x2_t v95;
  float32x2_t v96;
  int v97;
  uint64_t v98;
  int8x16_t v99;
  unint64_t v100;
  float32x4_t v101;
  unint64_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x2_t v108;
  float32x4_t v109;
  float32x2_t v110;
  float32x2_t v111;
  int8x8_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x2_t v118;
  float32x2_t v119;
  int v120;
  float32x2_t v121;
  int v122;
  float32x4_t v123;
  float32x4_t v126;
  float32x2_t v127;
  float32x4_t v128;
  unsigned int v129;
  unsigned char v130[104];
  _OWORD v131[7];
  void v132[7];
  char v133;
  float32x4_t *v134;
  void v135[7];
  char v136;
  float32x4_t *v137;
  uint64_t v138;

  v138 = *MEMORY[0x263EF8340];
  v127 = a10;
  if (!a6) {
    return 0;
  }
  __asm { FMOV            V8.2S, #1.0 }
  v24 = *(unsigned __int8 *)(a8 + 64);
  if (*(unsigned char *)(a8 + 64))
  {
    v25 = *(float32x4_t **)(a8 + 80);
    v26 = v25[2];
    if (v24 != 1)
    {
      v27 = v24 - 1;
      v28 = v25 + 5;
      do
      {
        v29 = *v28;
        v28 += 3;
        v26 = vaddq_f32(v26, v29);
        --v27;
      }
      while (v27);
    }
    v26.i32[3] = 0;
    v30 = vmulq_f32(v26, v26);
    v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
    v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
    v32 = vrsqrte_f32(v31);
    v33 = 4;
    do
    {
      v32 = vmul_f32(v32, vrsqrts_f32(vmul_f32(v32, v32), v31));
      --v33;
    }
    while (v33);
    v34 = vmul_f32(v31, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v31), 0), _D8, (int8x8_t)v32));
    v35 = vrecpe_f32(v34);
    v36 = 4;
    do
    {
      v35 = vmul_f32(v35, vrecps_f32(v34, v35));
      --v36;
    }
    while (v36);
    v37 = vmulq_n_f32(v26, v35.f32[0]);
    v37.i32[3] = 0;
  }
  else
  {
    v37 = 0uLL;
  }
  v126 = v37;
  v39 = physx::Gu::addGJKEPAContacts(a1, a2, a5, a6, a12, (float32x4_t *)a7, a8, vmul_f32(a9, (float32x2_t)vdup_n_s32(0x3D4CCCCDu)));
  v40 = *(float32x4_t *)(a7 + 32);
  v41 = vmulq_f32(v126, v40);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  if (vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0] >= 0.70711
    && *(unsigned __int8 *)(a8 + 64) >= a13
    && v39 == 0)
  {
    v49 = vaddq_f32(v126, v40);
    v50 = *(float32x4_t *)a4;
    v50.i32[3] = 0;
    v51 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
    v52 = vmulq_n_f32(v49, vmla_f32((float32x2_t)0xBF000000BF000000, v51, v51).f32[0]);
    v52.i32[3] = 0;
    v53 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
    v54 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL), *(float32x2_t *)a4->i8), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v53, 4uLL), *(float32x2_t *)v49.f32);
    *(int8x8_t *)v55.f32 = vext_s8(v54, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v49.f32, v53), *(float32x2_t *)a4->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL)), 4uLL);
    v55.i64[1] = v54.u32[0];
    v56 = vmlaq_laneq_f32(v52, v55, *(float32x4_t *)a4, 3);
    v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
    v57 = vmulq_f32(v49, v50);
    v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
    v58 = vmlaq_n_f32(v56, v50, vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).f32[0]);
    v59 = vaddq_f32(v58, v58);
    v59.i32[3] = 0;
    v60 = vmulq_f32(v59, v59);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
    v62 = vrsqrte_f32(v61);
    v63 = 4;
    do
    {
      v62 = vmul_f32(v62, vrsqrts_f32(vmul_f32(v62, v62), v61));
      --v63;
    }
    while (v63);
    v64 = vmul_f32(v61, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v61), 0), _D8, (int8x8_t)v62));
    v65 = vrecpe_f32(v64);
    v66 = 4;
    do
    {
      v65 = vmul_f32(v65, vrecps_f32(v64, v65));
      --v66;
    }
    while (v66);
    v67 = vmulq_n_f32(v59, v65.f32[0]);
    v67.i32[3] = 0;
    v131[0] = v67;
    physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a8, (uint64_t)a12, v131, (float32x4_t *)a4, (uint64_t *)&v127);
    return 1;
  }
  else
  {
    v44 = v39;
    v45 = *(float32x4_t **)(a1 + 8);
    v46 = *(float32x4_t **)(a2 + 8);
    physx::Gu::getPCMConvexData(v45, a14, (uint64_t)v131);
    physx::Gu::getPCMConvexData(v46, a15, (uint64_t)v130);
    v135[4] = a3;
    v135[5] = v45 + 3;
    v135[6] = v45 + 6;
    if (a14)
    {
      v47 = 1;
      v48 = &unk_26E728728;
    }
    else
    {
      v47 = 0;
      v48 = &unk_26E728778;
    }
    v136 = v47;
    v135[0] = v48;
    v137 = v45;
    v132[4] = a4;
    v132[5] = v46 + 3;
    v132[6] = v46 + 6;
    if (a15)
    {
      v68 = 1;
      v69 = &unk_26E728728;
    }
    else
    {
      v68 = 0;
      v69 = &unk_26E728778;
    }
    v133 = v68;
    v132[0] = v69;
    v134 = v46;
    v129 = 0;
    v38 = physx::Gu::generateFullContactManifold((uint64_t)v131, (uint64_t)v130, v135, v132, (uint64_t)a12, &v129, &v127, (float32x4_t *)(a7 + 32), v45[1].f32[0], v46[1].f32[0], *(float *)&a11, (float32x4_t *)a7, (float32x2_t *)(a7 + 16), v44);
    if (v38)
    {
      if (v129)
      {
        physx::Gu::PersistentContactManifold::addBatchManifoldContacts(a8, (int32x4_t *)a12, v129, a11);
        v70 = *(void *)(a8 + 80);
        v71 = *(int8x16_t *)(v70 + 32);
        v72 = *(unsigned __int8 *)(a8 + 64);
        v73 = (float32x4_t)v71;
        if (v72 >= 2)
        {
          v74 = v72 - 1;
          v75 = (float32x4_t *)(v70 + 80);
          v73 = (float32x4_t)v71;
          do
          {
            v76 = *v75;
            v75 += 3;
            v73 = vaddq_f32(v73, v76);
            --v74;
          }
          while (v74);
        }
        v73.i32[3] = 0;
        v77 = vmulq_f32(v73, v73);
        v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
        v71.i32[3] = 0;
        v78 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v73, v71);
        v79 = (float32x4_t *)a4;
        v80 = *(float32x4_t *)a4;
        v80.i32[3] = 0;
        v81 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
        v82 = vmulq_n_f32(v78, vmla_f32((float32x2_t)0xBF000000BF000000, v81, v81).f32[0]);
        v82.i32[3] = 0;
        v83 = (float32x2_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
        v84 = (float32x2_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
        v85 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v78.f32, (int8x8_t)v84, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v83, 4uLL), *(float32x2_t *)v78.f32);
        *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(v83, *(float32x2_t *)v78.f32), *(float32x2_t *)a4->i8, v84), 4uLL);
        v86.i64[1] = v85.u32[0];
        v87 = vmlaq_laneq_f32(v82, v86, *(float32x4_t *)a4, 3);
        v87.i64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u32[0];
        v88 = vmulq_f32(v80, v78);
        v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
        v89 = vmlaq_n_f32(v87, v80, vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).f32[0]);
        v90 = vaddq_f32(v89, v89);
        v90.i32[3] = 0;
        v91 = vmulq_f32(v90, v90);
        v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
        v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
        v93 = vrsqrte_f32(v92);
        v94 = 4;
        do
        {
          v93 = vmul_f32(v93, vrsqrts_f32(vmul_f32(v93, v93), v92));
          --v94;
        }
        while (v94);
        v95 = vmul_f32(v92, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v92), 0), _D8, (int8x8_t)v93));
        v96 = vrecpe_f32(v95);
        v97 = 4;
        do
        {
          v96 = vmul_f32(v96, vrecps_f32(v95, v96));
          --v97;
        }
        while (v97);
LABEL_49:
        v123 = vmulq_n_f32(v90, v96.f32[0]);
        v123.i32[3] = 0;
        v128 = v123;
        physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a8, (uint64_t)a12, &v128, v79, (uint64_t *)&v127);
        return v38;
      }
      if ((v44 & 1) == 0)
      {
        v98 = *(void *)(a8 + 80);
        v99 = *(int8x16_t *)(v98 + 32);
        v100 = *(unsigned __int8 *)(a8 + 64);
        v101 = (float32x4_t)v99;
        if (v100 >= 2)
        {
          v102 = v100 - 1;
          v103 = (float32x4_t *)(v98 + 80);
          v101 = (float32x4_t)v99;
          do
          {
            v104 = *v103;
            v103 += 3;
            v101 = vaddq_f32(v101, v104);
            --v102;
          }
          while (v102);
        }
        v101.i32[3] = 0;
        v105 = vmulq_f32(v101, v101);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        v99.i32[3] = 0;
        v106 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v101, v99);
        v79 = (float32x4_t *)a4;
        v107 = *(float32x4_t *)a4;
        v107.i32[3] = 0;
        v108 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
        v109 = vmulq_n_f32(v106, vmla_f32((float32x2_t)0xBF000000BF000000, v108, v108).f32[0]);
        v109.i32[3] = 0;
        v110 = (float32x2_t)vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
        v111 = (float32x2_t)vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
        v112 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v106.f32, (int8x8_t)v111, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v110, 4uLL), *(float32x2_t *)v106.f32);
        *(int8x8_t *)v113.f32 = vext_s8(v112, (int8x8_t)vmls_f32(vmul_f32(v110, *(float32x2_t *)v106.f32), *(float32x2_t *)a4->i8, v111), 4uLL);
        v113.i64[1] = v112.u32[0];
        v114 = vmlaq_laneq_f32(v109, v113, *(float32x4_t *)a4, 3);
        v114.i64[1] = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u32[0];
        v115 = vmulq_f32(v107, v106);
        v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
        v116 = vmlaq_n_f32(v114, v107, vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32).f32[0]);
        v90 = vaddq_f32(v116, v116);
        v90.i32[3] = 0;
        v117 = vmulq_f32(v90, v90);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        v119 = vrsqrte_f32(v118);
        v120 = 4;
        do
        {
          v119 = vmul_f32(v119, vrsqrts_f32(vmul_f32(v119, v119), v118));
          --v120;
        }
        while (v120);
        v121 = vmul_f32(v118, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v118), 0), _D8, (int8x8_t)v119));
        v96 = vrecpe_f32(v121);
        v122 = 4;
        do
        {
          v96 = vmul_f32(v96, vrecps_f32(v121, v96));
          --v122;
        }
        while (v122);
        goto LABEL_49;
      }
    }
  }
  return v38;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, float32x4_t *a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10, int8x8_t a11)
{
  v11 = a4;
  uint64_t v334 = *MEMORY[0x263EF8340];
  uint64_t v16 = a1->i64[1];
  v17 = (const float *)(v16 + 20);
  float32x2_t v18 = vld1_dup_f32(v17);
  v19 = *(float32x4_t **)(a2 + 8);
  v20 = &v19[1].f32[1];
  float32x2_t v21 = vld1_dup_f32(v20);
  float32x2_t v22 = vmin_f32(v18, v21);
  float32x2_t v23 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v24 = vmul_f32(v22, v23);
  v22.i32[0] = *(_DWORD *)(v16 + 16);
  v23.i32[0] = v19[1].i32[0];
  a10.i32[0] = -*(char *)(v16 + 32);
  a11.i32[0] = -v19[2].i8[0];
  float32x2_t v25 = vadd_f32((float32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v22), (float32x2_t)vand_s8(a11, (int8x8_t)v23));
  float32x4_t v319 = 0uLL;
  unsigned int v318 = 0;
  uint64_t v26 = *a5;
  __asm { FMOV            V10.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v59 = vmulq_f32(a7, a7);
    v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
    float32x4_t v51 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v319 = v51;
    float32x4_t v60 = vmulq_f32(v51, v51);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    float32x2_t v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
    float32x2_t v62 = vrsqrte_f32(v61);
    int v63 = 4;
    do
    {
      float32x2_t v62 = vmul_f32(v62, vrsqrts_f32(vmul_f32(v62, v62), v61));
      --v63;
    }
    while (v63);
    float32x2_t v64 = vmul_f32(v61, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v61), 0), (int8x8_t)_D10, (int8x8_t)v62));
    float32x2_t v65 = vrecpe_f32(v64);
    int v66 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v64, v65);
      float32x2_t v65 = vmul_f32(v65, *(float32x2_t *)a10.f32);
      --v66;
    }
    while (v66);
    float32x4_t v67 = vmulq_n_f32(v51, v65.f32[0]);
    v67.i32[3] = 0;
    float32x4_t v314 = v67;
    float32x2_t v68 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v69.i64[0] = -1;
    v69.i64[1] = -1;
    float32x4_t v70 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v32 = 0;
  v33 = (float32x4_t *)a1[1].i64[0];
  uint64_t v34 = *(void *)(v16 + 160);
  uint64_t v35 = v19[10].i64[0];
  float32x4_t v36 = v19[3];
  float32x4_t v37 = v19[4];
  a10 = v19[5];
  do
  {
    unsigned int v38 = a3[v32];
    *(&v323 + v32) = v38;
    unsigned int v39 = a4[v32];
    *(&v321 + v32) = v39;
    float32x4_t v40 = *(float32x4_t *)(v34 + 12 * v38);
    float32x4_t v41 = vmulq_n_f32(*v33, v40.f32[0]);
    v41.i32[3] = 0;
    float32x4_t v42 = vmulq_lane_f32(v33[1], *(float32x2_t *)v40.f32, 1);
    v42.i32[3] = 0;
    float32x4_t v43 = vmulq_laneq_f32(v33[2], v40, 2);
    v43.i32[3] = 0;
    float32x4_t v44 = vaddq_f32(vaddq_f32(v41, v42), v43);
    float32x4_t v45 = *(float32x4_t *)(v35 + 12 * v39);
    float32x4_t v46 = vmulq_n_f32(v36, v45.f32[0]);
    v46.i32[3] = 0;
    float32x4_t v47 = vmulq_lane_f32(v37, *(float32x2_t *)v45.f32, 1);
    v47.i32[3] = 0;
    float32x4_t v48 = vmulq_laneq_f32(a10, v45, 2);
    v48.i32[3] = 0;
    float32x4_t v49 = vaddq_f32(v33[3], v44);
    float32x4_t v50 = vaddq_f32(v48, vaddq_f32(v46, v47));
    float32x4_t v51 = vsubq_f32(v49, v50);
    *(&v328 + v32) = (int8x16_t)v49;
    *(&v325 + v32) = (int8x16_t)v50;
    *(&v331 + v32++) = v51;
  }
  while (v26 != v32);
  unsigned int v318 = v26;
  switch(v32)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v331, &v328, &v325, &v323, &v321, (int *)&v318);
      goto LABEL_49;
    case 3:
      unsigned int v318 = 3;
      float32x4_t v51 = v331;
      a10 = vsubq_f32(v332, v331);
      float32x4_t v71 = vsubq_f32(v333[0], v331);
      int8x8_t v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v71.f32);
      *(int8x8_t *)v72.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v71.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL)), 4uLL);
      v73.i32[1] = 0;
      float32x2_t v74 = vpadd_f32(vmul_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32), vmul_f32((float32x2_t)v73.u32[0], (float32x2_t)v73.u32[0]));
      float32x2_t v75 = vpadd_f32(v74, v74);
      if (v75.f32[0] > 0.00000011921)
      {
        if (v75.f32[0] == 0.0)
        {
          float32x4_t v51 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v72.u32[2] = v73;
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v332, 8uLL).u64[0];
          float32x2_t v77 = (float32x2_t)vextq_s8((int8x16_t)v333[0], (int8x16_t)v333[0], 8uLL).u64[0];
          float32x2_t v78 = (float32x2_t)vextq_s8((int8x16_t)v333[0], (int8x16_t)v333[0], 4uLL).u64[0];
          float32x2_t v79 = (float32x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v332, 4uLL).u64[0];
          int8x8_t v80 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v332.f32, v78), v79, *(float32x2_t *)v333[0].f32);
          *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v333[0].f32), *(float32x2_t *)v332.f32, v77), 4uLL);
          v81.i64[1] = v80.u32[0];
          float32x2_t v82 = (float32x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 8uLL).u64[0];
          float32x2_t v83 = (float32x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 4uLL).u64[0];
          int8x8_t v84 = (int8x8_t)vmls_f32(vmul_f32(v83, *(float32x2_t *)v333[0].f32), v78, *(float32x2_t *)v331.f32);
          *(int8x8_t *)v85.f32 = vext_s8(v84, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v331.f32, v77), *(float32x2_t *)v333[0].f32, v82), 4uLL);
          v85.i64[1] = v84.u32[0];
          int8x8_t v86 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v331.f32, v79), v83, *(float32x2_t *)v332.f32);
          *(int8x8_t *)v87.f32 = vext_s8(v86, (int8x8_t)vmls_f32(vmul_f32(v82, *(float32x2_t *)v332.f32), *(float32x2_t *)v331.f32, v76), 4uLL);
          v87.i64[1] = v86.u32[0];
          float32x4_t v88 = vmulq_f32(v81, v72);
          v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
          float32x2_t v89 = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
          float32x4_t v90 = vmulq_f32(v85, v72);
          v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
          float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
          float32x4_t v92 = vmulq_f32(v87, v72);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v91), (int8x8_t)vcgez_f32(v89)), (int8x8_t)vcgez_f32(v93)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
          {
            int8x16_t v119 = (int8x16_t)vmulq_f32(v331, v72);
            float32x2_t v120 = (float32x2_t)vextq_s8(v119, v119, 8uLL).u64[0];
            float32x2_t v121 = vrecpe_f32(v75);
            int v122 = 4;
            do
            {
              float32x2_t v121 = vmul_f32(v121, vrecps_f32(v75, v121));
              --v122;
            }
            while (v122);
            float32x2_t v123 = vpadd_f32(*(float32x2_t *)v119.i8, v120);
            float32x4_t v51 = vmulq_n_f32(v72, vmul_f32(v121, vpadd_f32(v123, v123)).f32[0]);
            v51.i32[3] = 0;
          }
          else
          {
            float32x4_t v94 = vnegq_f32(v331);
            v94.i32[3] = 0;
            float32x4_t v95 = vnegq_f32(v332);
            v95.i32[3] = 0;
            float32x4_t v96 = vmulq_f32(v94, a10);
            v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
            float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
            float32x4_t v98 = vmulq_f32(a10, v95);
            v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
            float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v97), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v93)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
            {
              float32x2_t v124 = vsub_f32(v97, v99);
              float32x2_t v125 = vrecpe_f32(v124);
              int v126 = 4;
              do
              {
                float32x2_t v125 = vmul_f32(v125, vrecps_f32(v124, v125));
                --v126;
              }
              while (v126);
              uint64_t v111 = 0;
              float32x4_t v51 = vmlaq_n_f32(v331, a10, vmul_f32(v97, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v124), (float32x2_t)0x3400000034000000), (int8x8_t)v125, 0)).f32[0]);
              v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
              unsigned int v127 = 2;
              uint64_t v110 = 1;
            }
            else
            {
              float32x4_t v100 = vnegq_f32(v333[0]);
              v100.i32[3] = 0;
              float32x4_t v101 = vmulq_f32(v95, v71);
              v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
              float32x2_t v102 = vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32);
              float32x4_t v103 = vmulq_f32(a10, v100);
              v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
              float32x2_t v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
              float32x4_t v105 = vmulq_f32(v71, v100);
              v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
              float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v102, v99), (int8x8_t)vcge_f32(v104, v106)), (int8x8_t)vclez_f32(v89)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
              {
                float32x2_t v128 = vsub_f32(v102, v99);
                float32x2_t v129 = vadd_f32(v128, vsub_f32(v104, v106));
                float32x2_t v130 = vrecpe_f32(v129);
                int v131 = 4;
                do
                {
                  float32x2_t v130 = vmul_f32(v130, vrecps_f32(v129, v130));
                  --v131;
                }
                while (v131);
                int8x16_t v132 = (int8x16_t)vmlaq_n_f32(v332, vsubq_f32(v333[0], v332), vmul_f32(v128, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v129), (float32x2_t)0x3400000034000000), (int8x8_t)v130, 0)).f32[0]);
                v132.i64[1] = vextq_s8(v132, v132, 8uLL).u32[0];
                unsigned int v127 = 2;
                uint64_t v111 = 1;
                uint64_t v110 = 2;
                float32x4_t v51 = (float32x4_t)v132;
              }
              else
              {
                float32x4_t v107 = vmulq_f32(v94, v71);
                int32x4_t v108 = (int32x4_t)vpaddq_f32(v107, v107);
                *(float32x2_t *)v108.i8 = vpadd_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v108.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v108.i8), (int8x8_t)vclez_f32(v106)), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
                {
                  float32x2_t v133 = vsub_f32(*(float32x2_t *)v108.i8, v106);
                  float32x2_t v134 = vrecpe_f32(v133);
                  int v135 = 4;
                  do
                  {
                    float32x2_t v134 = vmul_f32(v134, vrecps_f32(v133, v134));
                    --v135;
                  }
                  while (v135);
                  uint64_t v111 = 0;
                  float32x4_t v51 = vmlaq_n_f32(v331, v71, vmul_f32(*(float32x2_t *)v108.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v133), (float32x2_t)0x3400000034000000), (int8x8_t)v134, 0)).f32[0]);
                  v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
                  uint64_t v110 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v108.i8), (int8x8_t)vclez_f32(v97)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
                {
                  uint64_t v111 = 0;
                  uint64_t v110 = 1;
                }
                else
                {
                  *(int32x2_t *)v108.i8 = vcge_f32(v99, v102);
                  *(int16x4_t *)v51.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v108.i8, (int8x8_t)vcgez_f32(v99)), 0);
                  *(int8x8_t *)v51.f32 = vuzp1_s8(*(int8x8_t *)v51.f32, *(int8x8_t *)v51.f32);
                  v108.i32[0] = -1;
                  __int32 v109 = v51.i32[0];
                  float32x4_t v51 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v51, v108), 0), (int8x16_t)v332, (int8x16_t)v333[0]);
                  uint64_t v110 = 1;
                  if (v109 == -1) {
                    uint64_t v111 = 1;
                  }
                  else {
                    uint64_t v111 = 2;
                  }
                }
                unsigned int v127 = v110;
              }
            }
            float32x4_t v136 = *(&v331 + v111);
            float32x4_t v137 = *(&v331 + v110);
            a10 = *((float32x4_t *)&v328 + v111);
            float32x4_t v138 = *((float32x4_t *)&v328 + v110);
            float32x4_t v139 = *((float32x4_t *)&v325 + v111);
            float32x4_t v140 = *((float32x4_t *)&v325 + v110);
            int v141 = *(&v323 + v111);
            int v142 = *(&v323 + v110);
            int v143 = *(&v321 + v111);
            int v144 = *(&v321 + v110);
            float32x4_t v331 = v136;
            float32x4_t v332 = v137;
            int8x16_t v328 = (int8x16_t)a10;
            float32x4_t v329 = v138;
            int8x16_t v325 = (int8x16_t)v139;
            float32x4_t v326 = v140;
            int v323 = v141;
            int v324 = v142;
            int v321 = v143;
            int v322 = v144;
            unsigned int v318 = v127;
          }
        }
        goto LABEL_49;
      }
      unsigned int v318 = 2;
      float32x4_t v112 = vmulq_f32(a10, a10);
      v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
      float32x2_t v113 = vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v113), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
      {
        float32x4_t v114 = vnegq_f32(v331);
        v114.i32[3] = 0;
        float32x4_t v115 = vmulq_f32(v114, a10);
        v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
        float32x2_t v116 = vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32);
        float32x2_t v117 = vrecpe_f32(v113);
        int v118 = 4;
        do
        {
          float32x2_t v117 = vmul_f32(v117, vrecps_f32(v113, v117));
          --v118;
        }
        while (v118);
        float32x4_t v51 = vmlaq_n_f32(v331, a10, vmax_f32(vmin_f32(vmul_f32(v116, v117), _D10), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v51 = v331;
      float32x4_t v52 = vsubq_f32(v332, v331);
      float32x4_t v53 = vmulq_f32(v52, v52);
      v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
      float32x2_t v54 = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v54), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
      {
        float32x4_t v55 = vnegq_f32(v331);
        v55.i32[3] = 0;
        float32x4_t v56 = vmulq_f32(v55, v52);
        a10 = vpaddq_f32(v56, v56);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        float32x2_t v57 = vrecpe_f32(v54);
        int v58 = 4;
        do
        {
          float32x2_t v57 = vmul_f32(v57, vrecps_f32(v54, v57));
          --v58;
        }
        while (v58);
        float32x4_t v51 = vmlaq_n_f32(v331, v52, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v57), _D10), 0).f32[0]);
LABEL_31:
        v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v318 = 1;
LABEL_49:
  float32x4_t v319 = v51;
  float32x4_t v145 = vmulq_f32(v51, v51);
  v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
  float32x2_t v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32);
  float32x2_t v147 = vrsqrte_f32(v146);
  int v148 = 4;
  do
  {
    float32x2_t v147 = vmul_f32(v147, vrsqrts_f32(vmul_f32(v147, v147), v146));
    --v148;
  }
  while (v148);
  float32x2_t v68 = vmul_f32(v146, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v146), 0), (int8x8_t)_D10, (int8x8_t)v147));
  float32x2_t v149 = vrecpe_f32(v68);
  int v150 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v68, v149);
    float32x2_t v149 = vmul_f32(v149, *(float32x2_t *)a10.f32);
    --v150;
  }
  while (v150);
  float32x4_t v151 = vmulq_n_f32(v51, v149.f32[0]);
  v151.i32[3] = 0;
  float32x4_t v314 = v151;
  int32x4_t v69 = vdupq_lane_s32(vcgt_f32(v68, v24), 0);
  float32x4_t v70 = v51;
LABEL_54:
  float32x2_t v152 = vadd_f32(v25, a8);
  a10.i32[0] = -1;
  int32x4_t v309 = (int32x4_t)a10;
  v153.i64[0] = -1;
  v153.i64[1] = -1;
  for (float32x2_t i = v68; ; float32x2_t i = v163)
  {
    float32x4_t v155 = v51;
    v156.i64[0] = -1;
    v156.i64[1] = -1;
    *(int16x4_t *)v156.i8 = vmovn_s32(vceqq_s32(v69, v156));
    if (vuzp1_s8(*(int8x8_t *)v156.i8, *(int8x8_t *)v156.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v312 = v155;
    float32x4_t v157 = vnegq_f32(v155);
    v157.i32[3] = 0;
    float32x2_t v315 = v68;
    float32x4_t v317 = v157;
    *(double *)v158.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::support(a1, (float32x2_t *)&v317, &v323 + v318);
    float32x4_t v313 = v158;
    *(double *)v159.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v319, &v321 + v318);
    float32x4_t v160 = v159;
    float32x4_t v51 = vsubq_f32(v313, v159);
    float32x4_t v161 = vmulq_f32(v314, v51);
    v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
    float32x2_t v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v162, v152)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        uint64_t v263 = v318;
        *a5 = v318;
        if (v263)
        {
          v264 = &v321;
          v265 = &v323;
          do
          {
            int v266 = *v265++;
            *a3++ = v266;
            int v267 = *v264++;
            *v11++ = v267;
            --v263;
          }
          while (v263);
        }
      }
      return 0;
    }
    float32x2_t v163 = v315;
    uint64_t v164 = v318;
    if (v162.f32[0] > (float)(0.99977 * v315.f32[0]))
    {
      if (!a3) {
        goto LABEL_121;
      }
      *a5 = v318;
      if (v164)
      {
        v268 = &v321;
        v269 = &v323;
        uint64_t v270 = v164;
        do
        {
          int v271 = *v269++;
          *a3++ = v271;
          int v272 = *v268++;
          *v11++ = v272;
          --v270;
        }
        while (v270);
LABEL_121:
        v273 = a6;
        a6[2] = v314;
        switch(v164)
        {
          case 3:
            v317.i64[0] = 0;
            float32x2_t v320 = 0;
            physx::Gu::barycentricCoordinates(&v319, &v331, &v332, v333, (float32x2_t *)&v317, &v320);
            float32x2_t v163 = v315;
            float32x4_t v281 = vmulq_n_f32(vsubq_f32(v329, (float32x4_t)v328), v317.f32[0]);
            v281.i32[3] = 0;
            float32x4_t v282 = vmulq_n_f32(vsubq_f32(v330, (float32x4_t)v328), v320.f32[0]);
            v282.i32[3] = 0;
            int8x16_t v274 = (int8x16_t)vaddq_f32((float32x4_t)v328, vaddq_f32(v281, v282));
            float32x4_t v283 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v325), v317.f32[0]);
            v283.i32[3] = 0;
            float32x4_t v284 = vmulq_n_f32(vsubq_f32(v327, (float32x4_t)v325), v320.f32[0]);
            v284.i32[3] = 0;
            int8x16_t v275 = (int8x16_t)vaddq_f32((float32x4_t)v325, vaddq_f32(v283, v284));
            break;
          case 2:
            float32x4_t v285 = vsubq_f32(v331, v319);
            float32x4_t v286 = vsubq_f32(vsubq_f32(v332, v319), v285);
            float32x4_t v287 = vmulq_f32(v286, v286);
            v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
            float32x2_t v288 = vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32);
            float32x2_t v289 = vrecpe_f32(v288);
            int v290 = 4;
            do
            {
              float32x2_t v289 = vmul_f32(v289, vrecps_f32(v288, v289));
              --v290;
            }
            while (v290);
            float32x4_t v291 = vnegq_f32(v285);
            v291.i32[3] = 0;
            float32x4_t v292 = vmulq_f32(v291, v286);
            v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
            v291.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v288), (int8x8_t)v289, 0), vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32)).u32[0];
            int8x16_t v274 = (int8x16_t)vmlaq_n_f32((float32x4_t)v328, vsubq_f32(v329, (float32x4_t)v328), v291.f32[0]);
            v274.i64[1] = vextq_s8(v274, v274, 8uLL).u32[0];
            int8x16_t v275 = (int8x16_t)vmlaq_n_f32((float32x4_t)v325, vsubq_f32(v326, (float32x4_t)v325), v291.f32[0]);
            v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
            break;
          case 1:
            int8x16_t v274 = v328;
            uint64_t result = 2;
            int8x16_t v275 = v325;
LABEL_147:
            float32x4_t *v273 = (float32x4_t)v274;
            v273[1] = (float32x4_t)v275;
            *(float32x2_t *)v273[4].f32 = v163;
            return result;
          default:
LABEL_134:
            uint64_t result = 2;
            int8x16_t v274 = 0uLL;
            int8x16_t v275 = 0uLL;
            goto LABEL_147;
        }
        uint64_t result = 2;
        goto LABEL_147;
      }
      v273 = a6;
      a6[2] = v314;
      goto LABEL_134;
    }
    *(&v328 + v318) = (int8x16_t)v313;
    *(&v325 + v164) = (int8x16_t)v160;
    unsigned int v318 = v164 + 1;
    *(&v331 + v164) = v51;
    if (v164 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v331, &v328, &v325, &v323, &v321, (int *)&v318);
      float32x2_t v163 = v315;
LABEL_66:
      float32x4_t v70 = v312;
      goto LABEL_101;
    }
    if (v164 == 2)
    {
      float32x4_t v51 = v331;
      float32x4_t v173 = vsubq_f32(v332, v331);
      float32x4_t v174 = vsubq_f32(v333[0], v331);
      int8x8_t v176 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v173, (int8x16_t)v173, 4uLL), *(float32x2_t *)v174.f32);
      *(int8x8_t *)v175.f32 = vext_s8(v176, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL), *(float32x2_t *)v174.f32), *(float32x2_t *)v173.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL)), 4uLL);
      v176.i32[1] = 0;
      unsigned int v318 = 3;
      float32x2_t v177 = vpadd_f32(vmul_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32), vmul_f32((float32x2_t)v176.u32[0], (float32x2_t)v176.u32[0]));
      float32x2_t v178 = vpadd_f32(v177, v177);
      if (v178.f32[0] <= 0.00000011921)
      {
        unsigned int v318 = 2;
        float32x4_t v215 = vmulq_f32(v173, v173);
        v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
        float32x2_t v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v216), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
        {
          float32x4_t v217 = vnegq_f32(v331);
          v217.i32[3] = 0;
          float32x4_t v218 = vmulq_f32(v217, v173);
          v218.i64[0] = vpaddq_f32(v218, v218).u64[0];
          float32x2_t v219 = vpadd_f32(*(float32x2_t *)v218.f32, *(float32x2_t *)v218.f32);
          float32x2_t v220 = vrecpe_f32(v216);
          int v221 = 4;
          float32x4_t v70 = v312;
          do
          {
            float32x2_t v220 = vmul_f32(v220, vrecps_f32(v216, v220));
            --v221;
          }
          while (v221);
          float32x4_t v51 = vmlaq_n_f32(v331, v173, vmax_f32(vmin_f32(vmul_f32(v219, v220), _D10), 0).f32[0]);
LABEL_81:
          v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v318 = 1;
        goto LABEL_66;
      }
      if (v178.f32[0] == 0.0)
      {
        float32x4_t v51 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v175.u32[2] = v176;
      float32x2_t v179 = (float32x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v332, 8uLL).u64[0];
      float32x2_t v180 = (float32x2_t)vextq_s8((int8x16_t)v333[0], (int8x16_t)v333[0], 8uLL).u64[0];
      float32x2_t v181 = (float32x2_t)vextq_s8((int8x16_t)v333[0], (int8x16_t)v333[0], 4uLL).u64[0];
      float32x2_t v182 = (float32x2_t)vextq_s8((int8x16_t)v332, (int8x16_t)v332, 4uLL).u64[0];
      int8x8_t v183 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v332.f32, v181), v182, *(float32x2_t *)v333[0].f32);
      *(int8x8_t *)v184.f32 = vext_s8(v183, (int8x8_t)vmls_f32(vmul_f32(v179, *(float32x2_t *)v333[0].f32), *(float32x2_t *)v332.f32, v180), 4uLL);
      v184.i64[1] = v183.u32[0];
      float32x2_t v185 = (float32x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 8uLL).u64[0];
      float32x2_t v186 = (float32x2_t)vextq_s8((int8x16_t)v331, (int8x16_t)v331, 4uLL).u64[0];
      int8x8_t v187 = (int8x8_t)vmls_f32(vmul_f32(v186, *(float32x2_t *)v333[0].f32), v181, *(float32x2_t *)v331.f32);
      *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v331.f32, v180), *(float32x2_t *)v333[0].f32, v185), 4uLL);
      v188.i64[1] = v187.u32[0];
      int8x8_t v189 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v331.f32, v182), v186, *(float32x2_t *)v332.f32);
      *(int8x8_t *)v190.f32 = vext_s8(v189, (int8x8_t)vmls_f32(vmul_f32(v185, *(float32x2_t *)v332.f32), *(float32x2_t *)v331.f32, v179), 4uLL);
      v190.i64[1] = v189.u32[0];
      float32x4_t v191 = vmulq_f32(v184, v175);
      v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
      float32x2_t v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
      float32x4_t v193 = vmulq_f32(v188, v175);
      v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
      float32x2_t v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
      float32x4_t v195 = vmulq_f32(v190, v175);
      v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
      float32x2_t v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v194), (int8x8_t)vcgez_f32(v192)), (int8x8_t)vcgez_f32(v196)), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
      {
        float32x4_t v197 = vnegq_f32(v331);
        v197.i32[3] = 0;
        float32x4_t v198 = vnegq_f32(v332);
        v198.i32[3] = 0;
        float32x4_t v199 = vmulq_f32(v197, v173);
        v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
        float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
        float32x4_t v201 = vmulq_f32(v173, v198);
        v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
        float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v200), (int8x8_t)vclez_f32(v202)), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
        {
          float32x2_t v227 = vsub_f32(v200, v202);
          float32x2_t v228 = vrecpe_f32(v227);
          int v229 = 4;
          do
          {
            float32x2_t v228 = vmul_f32(v228, vrecps_f32(v227, v228));
            --v229;
          }
          while (v229);
          uint64_t v214 = 0;
          float32x4_t v51 = vmlaq_n_f32(v331, v173, vmul_f32(v200, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v227), (float32x2_t)0x3400000034000000), (int8x8_t)v228, 0)).f32[0]);
          v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
          unsigned int v230 = 2;
          uint64_t v213 = 1;
        }
        else
        {
          float32x4_t v203 = vnegq_f32(v333[0]);
          v203.i32[3] = 0;
          float32x4_t v204 = vmulq_f32(v198, v174);
          v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
          float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
          float32x4_t v206 = vmulq_f32(v173, v203);
          v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
          float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
          float32x4_t v208 = vmulq_f32(v174, v203);
          v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
          float32x2_t v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v205, v202), (int8x8_t)vcge_f32(v207, v209)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v331.f32).u32[0] != -1)
          {
            float32x4_t v210 = vmulq_f32(v197, v174);
            v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
            float32x2_t v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v211), (int8x8_t)vclez_f32(v209)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
            {
              float32x2_t v236 = vsub_f32(v211, v209);
              float32x2_t v237 = vrecpe_f32(v236);
              int v238 = 4;
              float32x4_t v70 = v312;
              do
              {
                float32x2_t v237 = vmul_f32(v237, vrecps_f32(v236, v237));
                --v238;
              }
              while (v238);
              uint64_t v214 = 0;
              float32x4_t v51 = vmlaq_n_f32(v331, v174, vmul_f32(v211, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v236), (float32x2_t)0x3400000034000000), (int8x8_t)v237, 0)).f32[0]);
              v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
              uint64_t v213 = 2;
              unsigned int v230 = 2;
            }
            else
            {
              float32x4_t v70 = v312;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v211), (int8x8_t)vclez_f32(v200)), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
              {
                uint64_t v214 = 0;
                uint64_t v213 = 1;
              }
              else
              {
                *(int16x4_t *)v51.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v202, v205), (int8x8_t)vcgez_f32(v202)), 0);
                *(int8x8_t *)v51.f32 = vuzp1_s8(*(int8x8_t *)v51.f32, *(int8x8_t *)v51.f32);
                __int32 v212 = v51.i32[0];
                float32x4_t v51 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v51, v309), 0), (int8x16_t)v332, (int8x16_t)v333[0]);
                uint64_t v213 = 1;
                if (v212 == -1) {
                  uint64_t v214 = 1;
                }
                else {
                  uint64_t v214 = 2;
                }
              }
              unsigned int v230 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v231 = vsub_f32(v205, v202);
          float32x2_t v232 = vadd_f32(v231, vsub_f32(v207, v209));
          float32x2_t v233 = vrecpe_f32(v232);
          int v234 = 4;
          do
          {
            float32x2_t v233 = vmul_f32(v233, vrecps_f32(v232, v233));
            --v234;
          }
          while (v234);
          int8x16_t v235 = (int8x16_t)vmlaq_n_f32(v332, vsubq_f32(v333[0], v332), vmul_f32(v231, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
          v235.i64[1] = vextq_s8(v235, v235, 8uLL).u32[0];
          uint64_t v213 = 2;
          float32x4_t v51 = (float32x4_t)v235;
          uint64_t v214 = 1;
          unsigned int v230 = 2;
        }
        float32x4_t v70 = v312;
LABEL_100:
        float32x4_t v239 = *(&v331 + v214);
        float32x4_t v240 = *(&v331 + v213);
        float32x4_t v241 = *((float32x4_t *)&v328 + v214);
        float32x4_t v242 = *((float32x4_t *)&v328 + v213);
        float32x4_t v243 = *((float32x4_t *)&v325 + v214);
        float32x4_t v244 = *((float32x4_t *)&v325 + v213);
        int v245 = *(&v323 + v214);
        int v246 = *(&v323 + v213);
        int v247 = *(&v321 + v214);
        int v248 = *(&v321 + v213);
        float32x4_t v331 = v239;
        float32x4_t v332 = v240;
        int8x16_t v328 = (int8x16_t)v241;
        float32x4_t v329 = v242;
        int8x16_t v325 = (int8x16_t)v243;
        float32x4_t v326 = v244;
        int v323 = v245;
        int v324 = v246;
        int v321 = v247;
        int v322 = v248;
        unsigned int v318 = v230;
        goto LABEL_101;
      }
      int8x16_t v222 = (int8x16_t)vmulq_f32(v331, v175);
      float32x2_t v223 = (float32x2_t)vextq_s8(v222, v222, 8uLL).u64[0];
      float32x2_t v224 = vrecpe_f32(v178);
      int v225 = 4;
      float32x4_t v70 = v312;
      do
      {
        float32x2_t v224 = vmul_f32(v224, vrecps_f32(v178, v224));
        --v225;
      }
      while (v225);
      float32x2_t v226 = vpadd_f32(*(float32x2_t *)v222.i8, v223);
      float32x4_t v51 = vmulq_n_f32(v175, vmul_f32(v224, vpadd_f32(v226, v226)).f32[0]);
      v51.i32[3] = 0;
    }
    else
    {
      float32x4_t v70 = v312;
      if (v164 == 1)
      {
        float32x4_t v51 = v331;
        float32x4_t v165 = vsubq_f32(v332, v331);
        float32x4_t v166 = vmulq_f32(v165, v165);
        v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
        float32x2_t v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v167), 0), *(int8x8_t *)v331.f32).u32[0] == -1)
        {
          unsigned int v318 = 1;
          goto LABEL_101;
        }
        float32x4_t v168 = vnegq_f32(v331);
        v168.i32[3] = 0;
        float32x4_t v169 = vmulq_f32(v168, v165);
        v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
        float32x2_t v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
        float32x2_t v171 = vrecpe_f32(v167);
        int v172 = 4;
        do
        {
          float32x2_t v171 = vmul_f32(v171, vrecps_f32(v167, v171));
          --v172;
        }
        while (v172);
        float32x4_t v51 = vmlaq_n_f32(v331, v165, vmax_f32(vmin_f32(vmul_f32(v170, v171), _D10), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v319 = v51;
    float32x4_t v249 = vmulq_f32(v51, v51);
    v249.i64[0] = vpaddq_f32(v249, v249).u64[0];
    float32x2_t v250 = vpadd_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v249.f32);
    float32x2_t v251 = vrsqrte_f32(v250);
    int v252 = 4;
    do
    {
      float32x2_t v251 = vmul_f32(v251, vrsqrts_f32(vmul_f32(v251, v251), v250));
      --v252;
    }
    while (v252);
    float32x2_t v68 = vmul_f32(v250, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v250), 0), (int8x8_t)_D10, (int8x8_t)v251));
    float32x2_t v253 = vrecpe_f32(v68);
    int v254 = 4;
    do
    {
      float32x2_t v253 = vmul_f32(v253, vrecps_f32(v68, v253));
      --v254;
    }
    while (v254);
    float32x4_t v255 = vmulq_n_f32(v51, v253.f32[0]);
    v255.i32[3] = 0;
    float32x4_t v314 = v255;
    *(int32x2_t *)v255.f32 = vcgt_f32(v163, v68);
    int32x4_t v153 = vdupq_lane_s32(*(int32x2_t *)v255.f32, 0);
    int32x4_t v69 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v68, v24), *(int8x8_t *)v255.f32), 0);
  }
  int8x8_t v256 = (int8x8_t)vmovn_s32(vceqzq_s32(v153));
  uint64_t v257 = v318;
  if (vuzp1_s8(v256, v256).u32[0] == -1)
  {
    if (a3)
    {
      uint64_t v276 = v318 - 1;
      *a5 = v318 - 1;
      if (v257 == 1)
      {
LABEL_132:
        int8x16_t v274 = v328;
        int8x16_t v275 = v325;
        goto LABEL_144;
      }
      v277 = &v321;
      v278 = &v323;
      do
      {
        int v279 = *v278++;
        *a3++ = v279;
        int v280 = *v277++;
        *v11++ = v280;
        --v276;
      }
      while (v276);
    }
    float32x4_t v319 = v70;
    if (v257 == 3)
    {
      v317.i64[0] = 0;
      float32x2_t v320 = 0;
      float32x4_t v316 = v70;
      physx::Gu::barycentricCoordinates(&v319, &v331, &v332, v333, (float32x2_t *)&v317, &v320);
      float32x4_t v293 = vmulq_n_f32(vsubq_f32(v329, (float32x4_t)v328), v317.f32[0]);
      v293.i32[3] = 0;
      float32x4_t v294 = vmulq_n_f32(vsubq_f32(v330, (float32x4_t)v328), v320.f32[0]);
      v294.i32[3] = 0;
      float32x4_t v295 = vaddq_f32(v293, v294);
      float32x4_t v296 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v325), v317.f32[0]);
      v296.i32[3] = 0;
      int8x16_t v274 = (int8x16_t)vaddq_f32((float32x4_t)v328, v295);
      float32x4_t v297 = vmulq_n_f32(vsubq_f32(v327, (float32x4_t)v325), v320.f32[0]);
      float32x4_t v70 = v316;
      v297.i32[3] = 0;
      int8x16_t v275 = (int8x16_t)vaddq_f32((float32x4_t)v325, vaddq_f32(v296, v297));
    }
    else
    {
      if (v257 == 2)
      {
        float32x4_t v298 = vsubq_f32(v331, v70);
        float32x4_t v299 = vsubq_f32(vsubq_f32(v332, v70), v298);
        float32x4_t v300 = vmulq_f32(v299, v299);
        v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
        float32x2_t v301 = vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32);
        float32x2_t v302 = vrecpe_f32(v301);
        int v303 = 4;
        do
        {
          float32x2_t v302 = vmul_f32(v302, vrecps_f32(v301, v302));
          --v303;
        }
        while (v303);
        float32x4_t v304 = vnegq_f32(v298);
        v304.i32[3] = 0;
        float32x4_t v305 = vmulq_f32(v304, v299);
        v305.i64[0] = vpaddq_f32(v305, v305).u64[0];
        v304.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v301), (int8x8_t)v302, 0), vpadd_f32(*(float32x2_t *)v305.f32, *(float32x2_t *)v305.f32)).u32[0];
        int8x16_t v274 = (int8x16_t)vmlaq_n_f32((float32x4_t)v328, vsubq_f32(v329, (float32x4_t)v328), v304.f32[0]);
        v274.i64[1] = vextq_s8(v274, v274, 8uLL).u32[0];
        int8x16_t v275 = (int8x16_t)vmlaq_n_f32((float32x4_t)v325, vsubq_f32(v326, (float32x4_t)v325), v304.f32[0]);
        v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
        goto LABEL_144;
      }
      int8x16_t v274 = 0uLL;
      int8x16_t v275 = 0uLL;
      if (v257 == 1) {
        goto LABEL_132;
      }
    }
LABEL_144:
    float32x2_t v306 = vrecpe_f32(i);
    int v307 = 4;
    do
    {
      float32x2_t v306 = vmul_f32(v306, vrecps_f32(i, v306));
      --v307;
    }
    while (v307);
    float32x4_t v308 = vmulq_n_f32(v70, v306.f32[0]);
    v308.i32[3] = 0;
    v273 = a6;
    a6[2] = v308;
    a6[3] = v314;
    uint64_t result = 4;
    float32x2_t v163 = i;
    goto LABEL_147;
  }
  if (a3)
  {
    *a5 = v318;
    if (v257)
    {
      v258 = &v321;
      v259 = &v323;
      do
      {
        int v260 = *v259++;
        *a3++ = v260;
        int v261 = *v258++;
        *v11++ = v261;
        --v257;
      }
      while (v257);
    }
  }
  return 5;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t v2 = *(float32x4_t *)(*(void *)(*(void *)(a1 + 8) + 160) + 12 * a2);
  v3 = *(float32x4_t **)(a1 + 16);
  float32x4_t v4 = vmulq_n_f32(*v3, v2.f32[0]);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_lane_f32(v3[1], *(float32x2_t *)v2.f32, 1);
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_laneq_f32(v3[2], v2, 2);
  v6.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v3[3], vaddq_f32(vaddq_f32(v4, v5), v6)).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::support(float32x4_t *a1, float32x2_t *a2)
{
  uint64_t v2 = a1->i64[1];
  v3 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v4 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_lane_f32(a1[3], *a2, 1);
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v6.i32[3] = 0;
  float32x4_t v12 = vaddq_f32(vaddq_f32(v4, v5), v6);
  float32x4_t v7 = *(float32x4_t *)(*(void *)(v2 + 160) + 12
                                              * physx::Gu::ConvexHullV::supportVertexIndex(v2, &v12));
  float32x4_t v8 = vmulq_n_f32(*v3, v7.f32[0]);
  v8.i32[3] = 0;
  float32x4_t v9 = vmulq_lane_f32(v3[1], *(float32x2_t *)v7.f32, 1);
  v9.i32[3] = 0;
  float32x4_t v10 = vmulq_laneq_f32(v3[2], v7, 2);
  v10.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v3[3], vaddq_f32(vaddq_f32(v8, v9), v10)).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::support(float32x4_t *a1, float32x2_t *a2, _DWORD *a3)
{
  uint64_t v4 = a1->i64[1];
  float32x4_t v5 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v6 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v6.i32[3] = 0;
  float32x4_t v7 = vmulq_lane_f32(a1[3], *a2, 1);
  v7.i32[3] = 0;
  float32x4_t v8 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v8.i32[3] = 0;
  float32x4_t v15 = vaddq_f32(vaddq_f32(v6, v7), v8);
  int v9 = physx::Gu::ConvexHullV::supportVertexIndex(v4, &v15);
  *a3 = v9;
  float32x4_t v10 = *(float32x4_t *)(*(void *)(v4 + 160) + 12 * v9);
  float32x4_t v11 = vmulq_n_f32(*v5, v10.f32[0]);
  v11.i32[3] = 0;
  float32x4_t v12 = vmulq_lane_f32(v5[1], *(float32x2_t *)v10.f32, 1);
  v12.i32[3] = 0;
  float32x4_t v13 = vmulq_laneq_f32(v5[2], v10, 2);
  v13.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v5[3], vaddq_f32(vaddq_f32(v11, v12), v13)).u64[0];
  return result;
}

float32x2_t physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::getSweepMargin(uint64_t a1)
{
  v1 = (const float *)(*(void *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

double physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::getCenter(uint64_t a1)
{
  uint64_t v2 = *(float32x2_t **)(a1 + 8);
  v1 = *(float32x4_t **)(a1 + 16);
  float32x4_t v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  float32x4_t v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::~RelativeConvex()
{
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, float32x4_t *a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10, int8x8_t a11)
{
  float32x4_t v11 = a4;
  uint64_t v336 = *MEMORY[0x263EF8340];
  float32x4_t v15 = (float32x4_t *)a1->i64[1];
  uint64_t v16 = &v15[1].f32[1];
  float32x2_t v17 = vld1_dup_f32(v16);
  uint64_t v18 = *(void *)(a2 + 8);
  v19 = (const float *)(v18 + 20);
  float32x2_t v20 = vld1_dup_f32(v19);
  float32x2_t v21 = vmin_f32(v17, v20);
  float32x2_t v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v23 = vmul_f32(v21, v22);
  v21.i32[0] = v15[1].i32[0];
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a10.i32[0] = -v15[2].i8[0];
  a11.i32[0] = -*(char *)(v18 + 32);
  float32x2_t v24 = vadd_f32((float32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v21), (float32x2_t)vand_s8(a11, (int8x8_t)v22));
  float32x4_t v321 = 0uLL;
  unsigned int v320 = 0;
  uint64_t v25 = *a5;
  __asm { FMOV            V10.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v58 = vmulq_f32(a7, a7);
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v321 = v50;
    float32x4_t v59 = vmulq_f32(v50, v50);
    v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
    float32x2_t v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
    float32x2_t v61 = vrsqrte_f32(v60);
    int v62 = 4;
    do
    {
      float32x2_t v61 = vmul_f32(v61, vrsqrts_f32(vmul_f32(v61, v61), v60));
      --v62;
    }
    while (v62);
    float32x2_t v63 = vmul_f32(v60, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v60), 0), (int8x8_t)_D10, (int8x8_t)v61));
    float32x2_t v64 = vrecpe_f32(v63);
    int v65 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v63, v64);
      float32x2_t v64 = vmul_f32(v64, *(float32x2_t *)a10.f32);
      --v65;
    }
    while (v65);
    float32x4_t v66 = vmulq_n_f32(v50, v64.f32[0]);
    v66.i32[3] = 0;
    float32x4_t v316 = v66;
    float32x2_t v67 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v68.i64[0] = -1;
    v68.i64[1] = -1;
    float32x4_t v69 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v31 = 0;
  uint64_t v32 = (float32x4_t *)a1[1].i64[0];
  uint64_t v33 = v15[10].i64[0];
  float32x4_t v34 = v15[3];
  float32x4_t v35 = v15[4];
  a10 = v15[5];
  uint64_t v36 = *(void *)(v18 + 160);
  do
  {
    unsigned int v37 = a3[v31];
    *(&v325 + v31) = v37;
    unsigned int v38 = a4[v31];
    *(&v323 + v31) = v38;
    float32x4_t v39 = *(float32x4_t *)(v33 + 12 * v37);
    float32x4_t v40 = vmulq_n_f32(v34, v39.f32[0]);
    v40.i32[3] = 0;
    float32x4_t v41 = vmulq_lane_f32(v35, *(float32x2_t *)v39.f32, 1);
    v41.i32[3] = 0;
    float32x4_t v42 = vmulq_laneq_f32(a10, v39, 2);
    v42.i32[3] = 0;
    float32x4_t v43 = vaddq_f32(v42, vaddq_f32(v40, v41));
    float32x4_t v44 = vmulq_n_f32(*v32, v43.f32[0]);
    v44.i32[3] = 0;
    float32x4_t v45 = vmulq_lane_f32(v32[1], *(float32x2_t *)v43.f32, 1);
    v45.i32[3] = 0;
    float32x4_t v46 = vmulq_laneq_f32(v32[2], v43, 2);
    v46.i32[3] = 0;
    float32x4_t v47 = vaddq_f32(v46, vaddq_f32(v44, v45));
    float32x4_t v48 = *(float32x4_t *)(v36 + 12 * v38);
    float32x4_t v49 = vaddq_f32(v32[3], v47);
    v48.i32[3] = 0;
    float32x4_t v50 = vsubq_f32(v49, v48);
    *(&v330 + v31) = (int8x16_t)v49;
    *(&v327 + v31) = (int8x16_t)v48;
    *(&v333 + v31++) = v50;
  }
  while (v25 != v31);
  unsigned int v320 = v25;
  switch(v31)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v333, &v330, &v327, &v325, &v323, (int *)&v320);
      goto LABEL_49;
    case 3:
      unsigned int v320 = 3;
      float32x4_t v50 = v333;
      a10 = vsubq_f32(v334, v333);
      float32x4_t v70 = vsubq_f32(v335[0], v333);
      int8x8_t v72 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v70.f32);
      *(int8x8_t *)v71.f32 = vext_s8(v72, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v70.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL)), 4uLL);
      v72.i32[1] = 0;
      float32x2_t v73 = vpadd_f32(vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), vmul_f32((float32x2_t)v72.u32[0], (float32x2_t)v72.u32[0]));
      float32x2_t v74 = vpadd_f32(v73, v73);
      if (v74.f32[0] > 0.00000011921)
      {
        if (v74.f32[0] == 0.0)
        {
          float32x4_t v50 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v71.u32[2] = v72;
          float32x2_t v75 = (float32x2_t)vextq_s8((int8x16_t)v334, (int8x16_t)v334, 8uLL).u64[0];
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v335[0], 8uLL).u64[0];
          float32x2_t v77 = (float32x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v335[0], 4uLL).u64[0];
          float32x2_t v78 = (float32x2_t)vextq_s8((int8x16_t)v334, (int8x16_t)v334, 4uLL).u64[0];
          int8x8_t v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v334.f32, v77), v78, *(float32x2_t *)v335[0].f32);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v335[0].f32), *(float32x2_t *)v334.f32, v76), 4uLL);
          v80.i64[1] = v79.u32[0];
          float32x2_t v81 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 8uLL).u64[0];
          float32x2_t v82 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 4uLL).u64[0];
          int8x8_t v83 = (int8x8_t)vmls_f32(vmul_f32(v82, *(float32x2_t *)v335[0].f32), v77, *(float32x2_t *)v333.f32);
          *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v333.f32, v76), *(float32x2_t *)v335[0].f32, v81), 4uLL);
          v84.i64[1] = v83.u32[0];
          int8x8_t v85 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v333.f32, v78), v82, *(float32x2_t *)v334.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(v81, *(float32x2_t *)v334.f32), *(float32x2_t *)v333.f32, v75), 4uLL);
          v86.i64[1] = v85.u32[0];
          float32x4_t v87 = vmulq_f32(v80, v71);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          float32x2_t v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
          float32x4_t v89 = vmulq_f32(v84, v71);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          float32x4_t v91 = vmulq_f32(v86, v71);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vcgez_f32(v88)), (int8x8_t)vcgez_f32(v92)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
          {
            int8x16_t v118 = (int8x16_t)vmulq_f32(v333, v71);
            float32x2_t v119 = (float32x2_t)vextq_s8(v118, v118, 8uLL).u64[0];
            float32x2_t v120 = vrecpe_f32(v74);
            int v121 = 4;
            do
            {
              float32x2_t v120 = vmul_f32(v120, vrecps_f32(v74, v120));
              --v121;
            }
            while (v121);
            float32x2_t v122 = vpadd_f32(*(float32x2_t *)v118.i8, v119);
            float32x4_t v50 = vmulq_n_f32(v71, vmul_f32(v120, vpadd_f32(v122, v122)).f32[0]);
            v50.i32[3] = 0;
          }
          else
          {
            float32x4_t v93 = vnegq_f32(v333);
            v93.i32[3] = 0;
            float32x4_t v94 = vnegq_f32(v334);
            v94.i32[3] = 0;
            float32x4_t v95 = vmulq_f32(v93, a10);
            v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
            float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
            float32x4_t v97 = vmulq_f32(a10, v94);
            v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
            float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v96), (int8x8_t)vclez_f32(v98)), (int8x8_t)vclez_f32(v92)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
            {
              float32x2_t v123 = vsub_f32(v96, v98);
              float32x2_t v124 = vrecpe_f32(v123);
              int v125 = 4;
              do
              {
                float32x2_t v124 = vmul_f32(v124, vrecps_f32(v123, v124));
                --v125;
              }
              while (v125);
              uint64_t v110 = 0;
              float32x4_t v50 = vmlaq_n_f32(v333, a10, vmul_f32(v96, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v123), (float32x2_t)0x3400000034000000), (int8x8_t)v124, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              unsigned int v126 = 2;
              uint64_t v109 = 1;
            }
            else
            {
              float32x4_t v99 = vnegq_f32(v335[0]);
              v99.i32[3] = 0;
              float32x4_t v100 = vmulq_f32(v94, v70);
              v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
              float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
              float32x4_t v102 = vmulq_f32(a10, v99);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              float32x4_t v104 = vmulq_f32(v70, v99);
              v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
              float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v101, v98), (int8x8_t)vcge_f32(v103, v105)), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
              {
                float32x2_t v127 = vsub_f32(v101, v98);
                float32x2_t v128 = vadd_f32(v127, vsub_f32(v103, v105));
                float32x2_t v129 = vrecpe_f32(v128);
                int v130 = 4;
                do
                {
                  float32x2_t v129 = vmul_f32(v129, vrecps_f32(v128, v129));
                  --v130;
                }
                while (v130);
                int8x16_t v131 = (int8x16_t)vmlaq_n_f32(v334, vsubq_f32(v335[0], v334), vmul_f32(v127, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v128), (float32x2_t)0x3400000034000000), (int8x8_t)v129, 0)).f32[0]);
                v131.i64[1] = vextq_s8(v131, v131, 8uLL).u32[0];
                unsigned int v126 = 2;
                uint64_t v110 = 1;
                uint64_t v109 = 2;
                float32x4_t v50 = (float32x4_t)v131;
              }
              else
              {
                float32x4_t v106 = vmulq_f32(v93, v70);
                int32x4_t v107 = (int32x4_t)vpaddq_f32(v106, v106);
                *(float32x2_t *)v107.i8 = vpadd_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v107.i8), (int8x8_t)vclez_f32(v105)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
                {
                  float32x2_t v132 = vsub_f32(*(float32x2_t *)v107.i8, v105);
                  float32x2_t v133 = vrecpe_f32(v132);
                  int v134 = 4;
                  do
                  {
                    float32x2_t v133 = vmul_f32(v133, vrecps_f32(v132, v133));
                    --v134;
                  }
                  while (v134);
                  uint64_t v110 = 0;
                  float32x4_t v50 = vmlaq_n_f32(v333, v70, vmul_f32(*(float32x2_t *)v107.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v132), (float32x2_t)0x3400000034000000), (int8x8_t)v133, 0)).f32[0]);
                  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
                  uint64_t v109 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v107.i8), (int8x8_t)vclez_f32(v96)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
                {
                  uint64_t v110 = 0;
                  uint64_t v109 = 1;
                }
                else
                {
                  *(int32x2_t *)v107.i8 = vcge_f32(v98, v101);
                  *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v107.i8, (int8x8_t)vcgez_f32(v98)), 0);
                  *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                  v107.i32[0] = -1;
                  __int32 v108 = v50.i32[0];
                  float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v107), 0), (int8x16_t)v334, (int8x16_t)v335[0]);
                  uint64_t v109 = 1;
                  if (v108 == -1) {
                    uint64_t v110 = 1;
                  }
                  else {
                    uint64_t v110 = 2;
                  }
                }
                unsigned int v126 = v109;
              }
            }
            float32x4_t v135 = *(&v333 + v110);
            float32x4_t v136 = *(&v333 + v109);
            a10 = *((float32x4_t *)&v330 + v110);
            float32x4_t v137 = *((float32x4_t *)&v330 + v109);
            float32x4_t v138 = *((float32x4_t *)&v327 + v110);
            float32x4_t v139 = *((float32x4_t *)&v327 + v109);
            int v140 = *(&v325 + v110);
            int v141 = *(&v325 + v109);
            int v142 = *(&v323 + v110);
            int v143 = *(&v323 + v109);
            float32x4_t v333 = v135;
            float32x4_t v334 = v136;
            int8x16_t v330 = (int8x16_t)a10;
            float32x4_t v331 = v137;
            int8x16_t v327 = (int8x16_t)v138;
            float32x4_t v328 = v139;
            int v325 = v140;
            int v326 = v141;
            int v323 = v142;
            int v324 = v143;
            unsigned int v320 = v126;
          }
        }
        goto LABEL_49;
      }
      unsigned int v320 = 2;
      float32x4_t v111 = vmulq_f32(a10, a10);
      v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
      float32x2_t v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v112), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
      {
        float32x4_t v113 = vnegq_f32(v333);
        v113.i32[3] = 0;
        float32x4_t v114 = vmulq_f32(v113, a10);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        float32x2_t v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
        float32x2_t v116 = vrecpe_f32(v112);
        int v117 = 4;
        do
        {
          float32x2_t v116 = vmul_f32(v116, vrecps_f32(v112, v116));
          --v117;
        }
        while (v117);
        float32x4_t v50 = vmlaq_n_f32(v333, a10, vmax_f32(vmin_f32(vmul_f32(v115, v116), _D10), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v50 = v333;
      float32x4_t v51 = vsubq_f32(v334, v333);
      float32x4_t v52 = vmulq_f32(v51, v51);
      v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
      float32x2_t v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v53), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
      {
        float32x4_t v54 = vnegq_f32(v333);
        v54.i32[3] = 0;
        float32x4_t v55 = vmulq_f32(v54, v51);
        a10 = vpaddq_f32(v55, v55);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        float32x2_t v56 = vrecpe_f32(v53);
        int v57 = 4;
        do
        {
          float32x2_t v56 = vmul_f32(v56, vrecps_f32(v53, v56));
          --v57;
        }
        while (v57);
        float32x4_t v50 = vmlaq_n_f32(v333, v51, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v56), _D10), 0).f32[0]);
LABEL_31:
        v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v320 = 1;
LABEL_49:
  float32x4_t v321 = v50;
  float32x4_t v144 = vmulq_f32(v50, v50);
  v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
  float32x2_t v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
  float32x2_t v146 = vrsqrte_f32(v145);
  int v147 = 4;
  do
  {
    float32x2_t v146 = vmul_f32(v146, vrsqrts_f32(vmul_f32(v146, v146), v145));
    --v147;
  }
  while (v147);
  float32x2_t v67 = vmul_f32(v145, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v145), 0), (int8x8_t)_D10, (int8x8_t)v146));
  float32x2_t v148 = vrecpe_f32(v67);
  int v149 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v67, v148);
    float32x2_t v148 = vmul_f32(v148, *(float32x2_t *)a10.f32);
    --v149;
  }
  while (v149);
  float32x4_t v150 = vmulq_n_f32(v50, v148.f32[0]);
  v150.i32[3] = 0;
  float32x4_t v316 = v150;
  int32x4_t v68 = vdupq_lane_s32(vcgt_f32(v67, v23), 0);
  float32x4_t v69 = v50;
LABEL_54:
  float32x2_t v151 = vadd_f32(v24, a8);
  a10.i32[0] = -1;
  int32x4_t v310 = (int32x4_t)a10;
  v152.i64[0] = -1;
  v152.i64[1] = -1;
  for (float32x2_t i = v67; ; float32x2_t i = v164)
  {
    float32x4_t v154 = v50;
    v155.i64[0] = -1;
    v155.i64[1] = -1;
    *(int16x4_t *)v155.i8 = vmovn_s32(vceqq_s32(v68, v155));
    if (vuzp1_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v314 = v154;
    float32x4_t v156 = vnegq_f32(v154);
    v156.i32[3] = 0;
    float32x2_t v317 = v67;
    float32x4_t v319 = v156;
    *(double *)v157.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>::support(a1, (float32x2_t *)&v319, &v325 + v320);
    float32x4_t v315 = v157;
    uint64_t v158 = v320;
    uint64_t v159 = *(void *)(a2 + 8);
    int v160 = physx::Gu::ConvexHullV::supportVertexIndex(v159, &v321);
    *(&v323 + v158) = v160;
    float32x4_t v161 = *(float32x4_t *)(*(void *)(v159 + 160) + 12 * v160);
    v161.i32[3] = 0;
    float32x4_t v50 = vsubq_f32(v315, v161);
    float32x4_t v162 = vmulq_f32(v316, v50);
    v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
    float32x2_t v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v163, v151)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        uint64_t v264 = v320;
        *a5 = v320;
        if (v264)
        {
          v265 = &v323;
          int v266 = &v325;
          do
          {
            int v267 = *v266++;
            *a3++ = v267;
            int v268 = *v265++;
            *v11++ = v268;
            --v264;
          }
          while (v264);
        }
      }
      return 0;
    }
    float32x2_t v164 = v317;
    uint64_t v165 = v320;
    if (v163.f32[0] > (float)(0.99977 * v317.f32[0]))
    {
      if (!a3) {
        goto LABEL_121;
      }
      *a5 = v320;
      if (v165)
      {
        v269 = &v323;
        uint64_t v270 = &v325;
        uint64_t v271 = v165;
        do
        {
          int v272 = *v270++;
          *a3++ = v272;
          int v273 = *v269++;
          *v11++ = v273;
          --v271;
        }
        while (v271);
LABEL_121:
        int8x16_t v274 = a6;
        a6[2] = v316;
        switch(v165)
        {
          case 3:
            v319.i64[0] = 0;
            float32x2_t v322 = 0;
            physx::Gu::barycentricCoordinates(&v321, &v333, &v334, v335, (float32x2_t *)&v319, &v322);
            float32x2_t v164 = v317;
            float32x4_t v282 = vmulq_n_f32(vsubq_f32(v331, (float32x4_t)v330), v319.f32[0]);
            v282.i32[3] = 0;
            float32x4_t v283 = vmulq_n_f32(vsubq_f32(v332, (float32x4_t)v330), v322.f32[0]);
            v283.i32[3] = 0;
            int8x16_t v275 = (int8x16_t)vaddq_f32((float32x4_t)v330, vaddq_f32(v282, v283));
            float32x4_t v284 = vmulq_n_f32(vsubq_f32(v328, (float32x4_t)v327), v319.f32[0]);
            v284.i32[3] = 0;
            float32x4_t v285 = vmulq_n_f32(vsubq_f32(v329, (float32x4_t)v327), v322.f32[0]);
            v285.i32[3] = 0;
            int8x16_t v276 = (int8x16_t)vaddq_f32((float32x4_t)v327, vaddq_f32(v284, v285));
            break;
          case 2:
            float32x4_t v286 = vsubq_f32(v333, v321);
            float32x4_t v287 = vsubq_f32(vsubq_f32(v334, v321), v286);
            float32x4_t v288 = vmulq_f32(v287, v287);
            v288.i64[0] = vpaddq_f32(v288, v288).u64[0];
            float32x2_t v289 = vpadd_f32(*(float32x2_t *)v288.f32, *(float32x2_t *)v288.f32);
            float32x2_t v290 = vrecpe_f32(v289);
            int v291 = 4;
            do
            {
              float32x2_t v290 = vmul_f32(v290, vrecps_f32(v289, v290));
              --v291;
            }
            while (v291);
            float32x4_t v292 = vnegq_f32(v286);
            v292.i32[3] = 0;
            float32x4_t v293 = vmulq_f32(v292, v287);
            v293.i64[0] = vpaddq_f32(v293, v293).u64[0];
            v292.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v289), (int8x8_t)v290, 0), vpadd_f32(*(float32x2_t *)v293.f32, *(float32x2_t *)v293.f32)).u32[0];
            int8x16_t v275 = (int8x16_t)vmlaq_n_f32((float32x4_t)v330, vsubq_f32(v331, (float32x4_t)v330), v292.f32[0]);
            v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
            int8x16_t v276 = (int8x16_t)vmlaq_n_f32((float32x4_t)v327, vsubq_f32(v328, (float32x4_t)v327), v292.f32[0]);
            v276.i64[1] = vextq_s8(v276, v276, 8uLL).u32[0];
            break;
          case 1:
            int8x16_t v275 = v330;
            uint64_t result = 2;
            int8x16_t v276 = v327;
LABEL_147:
            *int8x16_t v274 = (float32x4_t)v275;
            v274[1] = (float32x4_t)v276;
            *(float32x2_t *)v274[4].f32 = v164;
            return result;
          default:
LABEL_134:
            uint64_t result = 2;
            int8x16_t v275 = 0uLL;
            int8x16_t v276 = 0uLL;
            goto LABEL_147;
        }
        uint64_t result = 2;
        goto LABEL_147;
      }
      int8x16_t v274 = a6;
      a6[2] = v316;
      goto LABEL_134;
    }
    *(&v330 + v320) = (int8x16_t)v315;
    *(&v327 + v165) = (int8x16_t)v161;
    unsigned int v320 = v165 + 1;
    *(&v333 + v165) = v50;
    if (v165 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v333, &v330, &v327, &v325, &v323, (int *)&v320);
      float32x2_t v164 = v317;
LABEL_66:
      float32x4_t v69 = v314;
      goto LABEL_101;
    }
    if (v165 == 2)
    {
      float32x4_t v50 = v333;
      float32x4_t v174 = vsubq_f32(v334, v333);
      float32x4_t v175 = vsubq_f32(v335[0], v333);
      int8x8_t v177 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v174.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v175, (int8x16_t)v175, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 4uLL), *(float32x2_t *)v175.f32);
      *(int8x8_t *)v176.f32 = vext_s8(v177, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL), *(float32x2_t *)v175.f32), *(float32x2_t *)v174.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL)), 4uLL);
      v177.i32[1] = 0;
      unsigned int v320 = 3;
      float32x2_t v178 = vpadd_f32(vmul_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32), vmul_f32((float32x2_t)v177.u32[0], (float32x2_t)v177.u32[0]));
      float32x2_t v179 = vpadd_f32(v178, v178);
      if (v179.f32[0] <= 0.00000011921)
      {
        unsigned int v320 = 2;
        float32x4_t v216 = vmulq_f32(v174, v174);
        v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
        float32x2_t v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v217), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
        {
          float32x4_t v218 = vnegq_f32(v333);
          v218.i32[3] = 0;
          float32x4_t v219 = vmulq_f32(v218, v174);
          v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
          float32x2_t v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
          float32x2_t v221 = vrecpe_f32(v217);
          int v222 = 4;
          float32x4_t v69 = v314;
          do
          {
            float32x2_t v221 = vmul_f32(v221, vrecps_f32(v217, v221));
            --v222;
          }
          while (v222);
          float32x4_t v50 = vmlaq_n_f32(v333, v174, vmax_f32(vmin_f32(vmul_f32(v220, v221), _D10), 0).f32[0]);
LABEL_81:
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v320 = 1;
        goto LABEL_66;
      }
      if (v179.f32[0] == 0.0)
      {
        float32x4_t v50 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v176.u32[2] = v177;
      float32x2_t v180 = (float32x2_t)vextq_s8((int8x16_t)v334, (int8x16_t)v334, 8uLL).u64[0];
      float32x2_t v181 = (float32x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v335[0], 8uLL).u64[0];
      float32x2_t v182 = (float32x2_t)vextq_s8((int8x16_t)v335[0], (int8x16_t)v335[0], 4uLL).u64[0];
      float32x2_t v183 = (float32x2_t)vextq_s8((int8x16_t)v334, (int8x16_t)v334, 4uLL).u64[0];
      int8x8_t v184 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v334.f32, v182), v183, *(float32x2_t *)v335[0].f32);
      *(int8x8_t *)v185.f32 = vext_s8(v184, (int8x8_t)vmls_f32(vmul_f32(v180, *(float32x2_t *)v335[0].f32), *(float32x2_t *)v334.f32, v181), 4uLL);
      v185.i64[1] = v184.u32[0];
      float32x2_t v186 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 8uLL).u64[0];
      float32x2_t v187 = (float32x2_t)vextq_s8((int8x16_t)v333, (int8x16_t)v333, 4uLL).u64[0];
      int8x8_t v188 = (int8x8_t)vmls_f32(vmul_f32(v187, *(float32x2_t *)v335[0].f32), v182, *(float32x2_t *)v333.f32);
      *(int8x8_t *)v189.f32 = vext_s8(v188, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v333.f32, v181), *(float32x2_t *)v335[0].f32, v186), 4uLL);
      v189.i64[1] = v188.u32[0];
      int8x8_t v190 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v333.f32, v183), v187, *(float32x2_t *)v334.f32);
      *(int8x8_t *)v191.f32 = vext_s8(v190, (int8x8_t)vmls_f32(vmul_f32(v186, *(float32x2_t *)v334.f32), *(float32x2_t *)v333.f32, v180), 4uLL);
      v191.i64[1] = v190.u32[0];
      float32x4_t v192 = vmulq_f32(v185, v176);
      v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
      float32x2_t v193 = vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32);
      float32x4_t v194 = vmulq_f32(v189, v176);
      v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
      float32x2_t v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
      float32x4_t v196 = vmulq_f32(v191, v176);
      v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
      float32x2_t v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v195), (int8x8_t)vcgez_f32(v193)), (int8x8_t)vcgez_f32(v197)), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
      {
        float32x4_t v198 = vnegq_f32(v333);
        v198.i32[3] = 0;
        float32x4_t v199 = vnegq_f32(v334);
        v199.i32[3] = 0;
        float32x4_t v200 = vmulq_f32(v198, v174);
        v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
        float32x2_t v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
        float32x4_t v202 = vmulq_f32(v174, v199);
        v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
        float32x2_t v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v201), (int8x8_t)vclez_f32(v203)), (int8x8_t)vclez_f32(v197)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
        {
          float32x2_t v228 = vsub_f32(v201, v203);
          float32x2_t v229 = vrecpe_f32(v228);
          int v230 = 4;
          do
          {
            float32x2_t v229 = vmul_f32(v229, vrecps_f32(v228, v229));
            --v230;
          }
          while (v230);
          uint64_t v215 = 0;
          float32x4_t v50 = vmlaq_n_f32(v333, v174, vmul_f32(v201, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v228), (float32x2_t)0x3400000034000000), (int8x8_t)v229, 0)).f32[0]);
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          unsigned int v231 = 2;
          uint64_t v214 = 1;
        }
        else
        {
          float32x4_t v204 = vnegq_f32(v335[0]);
          v204.i32[3] = 0;
          float32x4_t v205 = vmulq_f32(v199, v175);
          v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
          float32x2_t v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
          float32x4_t v207 = vmulq_f32(v174, v204);
          v207.i64[0] = vpaddq_f32(v207, v207).u64[0];
          float32x2_t v208 = vpadd_f32(*(float32x2_t *)v207.f32, *(float32x2_t *)v207.f32);
          float32x4_t v209 = vmulq_f32(v175, v204);
          v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
          float32x2_t v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v206, v203), (int8x8_t)vcge_f32(v208, v210)), (int8x8_t)vclez_f32(v193)), 0), *(int8x8_t *)v333.f32).u32[0] != -1)
          {
            float32x4_t v211 = vmulq_f32(v198, v175);
            v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
            float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v212), (int8x8_t)vclez_f32(v210)), (int8x8_t)vclez_f32(v195)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
            {
              float32x2_t v237 = vsub_f32(v212, v210);
              float32x2_t v238 = vrecpe_f32(v237);
              int v239 = 4;
              float32x4_t v69 = v314;
              do
              {
                float32x2_t v238 = vmul_f32(v238, vrecps_f32(v237, v238));
                --v239;
              }
              while (v239);
              uint64_t v215 = 0;
              float32x4_t v50 = vmlaq_n_f32(v333, v175, vmul_f32(v212, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v237), (float32x2_t)0x3400000034000000), (int8x8_t)v238, 0)).f32[0]);
              v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
              uint64_t v214 = 2;
              unsigned int v231 = 2;
            }
            else
            {
              float32x4_t v69 = v314;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v212), (int8x8_t)vclez_f32(v201)), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
              {
                uint64_t v215 = 0;
                uint64_t v214 = 1;
              }
              else
              {
                *(int16x4_t *)v50.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v203, v206), (int8x8_t)vcgez_f32(v203)), 0);
                *(int8x8_t *)v50.f32 = vuzp1_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v50.f32);
                __int32 v213 = v50.i32[0];
                float32x4_t v50 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v50, v310), 0), (int8x16_t)v334, (int8x16_t)v335[0]);
                uint64_t v214 = 1;
                if (v213 == -1) {
                  uint64_t v215 = 1;
                }
                else {
                  uint64_t v215 = 2;
                }
              }
              unsigned int v231 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v232 = vsub_f32(v206, v203);
          float32x2_t v233 = vadd_f32(v232, vsub_f32(v208, v210));
          float32x2_t v234 = vrecpe_f32(v233);
          int v235 = 4;
          do
          {
            float32x2_t v234 = vmul_f32(v234, vrecps_f32(v233, v234));
            --v235;
          }
          while (v235);
          int8x16_t v236 = (int8x16_t)vmlaq_n_f32(v334, vsubq_f32(v335[0], v334), vmul_f32(v232, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v233), (float32x2_t)0x3400000034000000), (int8x8_t)v234, 0)).f32[0]);
          v236.i64[1] = vextq_s8(v236, v236, 8uLL).u32[0];
          uint64_t v214 = 2;
          float32x4_t v50 = (float32x4_t)v236;
          uint64_t v215 = 1;
          unsigned int v231 = 2;
        }
        float32x4_t v69 = v314;
LABEL_100:
        float32x4_t v240 = *(&v333 + v215);
        float32x4_t v241 = *(&v333 + v214);
        float32x4_t v242 = *((float32x4_t *)&v330 + v215);
        float32x4_t v243 = *((float32x4_t *)&v330 + v214);
        float32x4_t v244 = *((float32x4_t *)&v327 + v215);
        float32x4_t v245 = *((float32x4_t *)&v327 + v214);
        int v246 = *(&v325 + v215);
        int v247 = *(&v325 + v214);
        int v248 = *(&v323 + v215);
        int v249 = *(&v323 + v214);
        float32x4_t v333 = v240;
        float32x4_t v334 = v241;
        int8x16_t v330 = (int8x16_t)v242;
        float32x4_t v331 = v243;
        int8x16_t v327 = (int8x16_t)v244;
        float32x4_t v328 = v245;
        int v325 = v246;
        int v326 = v247;
        int v323 = v248;
        int v324 = v249;
        unsigned int v320 = v231;
        goto LABEL_101;
      }
      int8x16_t v223 = (int8x16_t)vmulq_f32(v333, v176);
      float32x2_t v224 = (float32x2_t)vextq_s8(v223, v223, 8uLL).u64[0];
      float32x2_t v225 = vrecpe_f32(v179);
      int v226 = 4;
      float32x4_t v69 = v314;
      do
      {
        float32x2_t v225 = vmul_f32(v225, vrecps_f32(v179, v225));
        --v226;
      }
      while (v226);
      float32x2_t v227 = vpadd_f32(*(float32x2_t *)v223.i8, v224);
      float32x4_t v50 = vmulq_n_f32(v176, vmul_f32(v225, vpadd_f32(v227, v227)).f32[0]);
      v50.i32[3] = 0;
    }
    else
    {
      float32x4_t v69 = v314;
      if (v165 == 1)
      {
        float32x4_t v50 = v333;
        float32x4_t v166 = vsubq_f32(v334, v333);
        float32x4_t v167 = vmulq_f32(v166, v166);
        v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
        float32x2_t v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v168), 0), *(int8x8_t *)v333.f32).u32[0] == -1)
        {
          unsigned int v320 = 1;
          goto LABEL_101;
        }
        float32x4_t v169 = vnegq_f32(v333);
        v169.i32[3] = 0;
        float32x4_t v170 = vmulq_f32(v169, v166);
        v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
        float32x2_t v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
        float32x2_t v172 = vrecpe_f32(v168);
        int v173 = 4;
        do
        {
          float32x2_t v172 = vmul_f32(v172, vrecps_f32(v168, v172));
          --v173;
        }
        while (v173);
        float32x4_t v50 = vmlaq_n_f32(v333, v166, vmax_f32(vmin_f32(vmul_f32(v171, v172), _D10), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v321 = v50;
    float32x4_t v250 = vmulq_f32(v50, v50);
    v250.i64[0] = vpaddq_f32(v250, v250).u64[0];
    float32x2_t v251 = vpadd_f32(*(float32x2_t *)v250.f32, *(float32x2_t *)v250.f32);
    float32x2_t v252 = vrsqrte_f32(v251);
    int v253 = 4;
    do
    {
      float32x2_t v252 = vmul_f32(v252, vrsqrts_f32(vmul_f32(v252, v252), v251));
      --v253;
    }
    while (v253);
    float32x2_t v67 = vmul_f32(v251, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v251), 0), (int8x8_t)_D10, (int8x8_t)v252));
    float32x2_t v254 = vrecpe_f32(v67);
    int v255 = 4;
    do
    {
      float32x2_t v254 = vmul_f32(v254, vrecps_f32(v67, v254));
      --v255;
    }
    while (v255);
    float32x4_t v256 = vmulq_n_f32(v50, v254.f32[0]);
    v256.i32[3] = 0;
    float32x4_t v316 = v256;
    *(int32x2_t *)v256.f32 = vcgt_f32(v164, v67);
    int32x4_t v152 = vdupq_lane_s32(*(int32x2_t *)v256.f32, 0);
    int32x4_t v68 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v67, v23), *(int8x8_t *)v256.f32), 0);
  }
  int8x8_t v257 = (int8x8_t)vmovn_s32(vceqzq_s32(v152));
  uint64_t v258 = v320;
  if (vuzp1_s8(v257, v257).u32[0] == -1)
  {
    if (a3)
    {
      uint64_t v277 = v320 - 1;
      *a5 = v320 - 1;
      if (v258 == 1)
      {
LABEL_132:
        int8x16_t v275 = v330;
        int8x16_t v276 = v327;
        goto LABEL_144;
      }
      v278 = &v323;
      int v279 = &v325;
      do
      {
        int v280 = *v279++;
        *a3++ = v280;
        int v281 = *v278++;
        *v11++ = v281;
        --v277;
      }
      while (v277);
    }
    float32x4_t v321 = v69;
    if (v258 == 3)
    {
      v319.i64[0] = 0;
      float32x2_t v322 = 0;
      float32x4_t v318 = v69;
      physx::Gu::barycentricCoordinates(&v321, &v333, &v334, v335, (float32x2_t *)&v319, &v322);
      float32x4_t v294 = vmulq_n_f32(vsubq_f32(v331, (float32x4_t)v330), v319.f32[0]);
      v294.i32[3] = 0;
      float32x4_t v295 = vmulq_n_f32(vsubq_f32(v332, (float32x4_t)v330), v322.f32[0]);
      v295.i32[3] = 0;
      float32x4_t v296 = vaddq_f32(v294, v295);
      float32x4_t v297 = vmulq_n_f32(vsubq_f32(v328, (float32x4_t)v327), v319.f32[0]);
      v297.i32[3] = 0;
      int8x16_t v275 = (int8x16_t)vaddq_f32((float32x4_t)v330, v296);
      float32x4_t v298 = vmulq_n_f32(vsubq_f32(v329, (float32x4_t)v327), v322.f32[0]);
      float32x4_t v69 = v318;
      v298.i32[3] = 0;
      int8x16_t v276 = (int8x16_t)vaddq_f32((float32x4_t)v327, vaddq_f32(v297, v298));
    }
    else
    {
      if (v258 == 2)
      {
        float32x4_t v299 = vsubq_f32(v333, v69);
        float32x4_t v300 = vsubq_f32(vsubq_f32(v334, v69), v299);
        float32x4_t v301 = vmulq_f32(v300, v300);
        v301.i64[0] = vpaddq_f32(v301, v301).u64[0];
        float32x2_t v302 = vpadd_f32(*(float32x2_t *)v301.f32, *(float32x2_t *)v301.f32);
        float32x2_t v303 = vrecpe_f32(v302);
        int v304 = 4;
        do
        {
          float32x2_t v303 = vmul_f32(v303, vrecps_f32(v302, v303));
          --v304;
        }
        while (v304);
        float32x4_t v305 = vnegq_f32(v299);
        v305.i32[3] = 0;
        float32x4_t v306 = vmulq_f32(v305, v300);
        v306.i64[0] = vpaddq_f32(v306, v306).u64[0];
        v305.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v302), (int8x8_t)v303, 0), vpadd_f32(*(float32x2_t *)v306.f32, *(float32x2_t *)v306.f32)).u32[0];
        int8x16_t v275 = (int8x16_t)vmlaq_n_f32((float32x4_t)v330, vsubq_f32(v331, (float32x4_t)v330), v305.f32[0]);
        v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
        int8x16_t v276 = (int8x16_t)vmlaq_n_f32((float32x4_t)v327, vsubq_f32(v328, (float32x4_t)v327), v305.f32[0]);
        v276.i64[1] = vextq_s8(v276, v276, 8uLL).u32[0];
        goto LABEL_144;
      }
      int8x16_t v275 = 0uLL;
      int8x16_t v276 = 0uLL;
      if (v258 == 1) {
        goto LABEL_132;
      }
    }
LABEL_144:
    float32x2_t v307 = vrecpe_f32(i);
    int v308 = 4;
    do
    {
      float32x2_t v307 = vmul_f32(v307, vrecps_f32(i, v307));
      --v308;
    }
    while (v308);
    float32x4_t v309 = vmulq_n_f32(v69, v307.f32[0]);
    v309.i32[3] = 0;
    int8x16_t v274 = a6;
    a6[2] = v309;
    a6[3] = v316;
    uint64_t result = 4;
    float32x2_t v164 = i;
    goto LABEL_147;
  }
  if (a3)
  {
    *a5 = v320;
    if (v258)
    {
      v259 = &v323;
      int v260 = &v325;
      do
      {
        int v261 = *v260++;
        *a3++ = v261;
        int v262 = *v259++;
        *v11++ = v262;
        --v258;
      }
      while (v258);
    }
  }
  return 5;
}

void physx::PCMConvexVsHeightfieldContactGenerationCallback::~PCMConvexVsHeightfieldContactGenerationCallback(physx::PCMConvexVsHeightfieldContactGenerationCallback *this)
{
}

uint64_t physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMConvexVsHeightfieldContactGenerationCallback>::onEvent(uint64_t a1, unsigned int a2, unsigned int *a3, double a4, double a5, __n128 a6, double a7, double a8, __n128 a9)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  if (a2 + 15 >= 0x10)
  {
    unsigned int v10 = a2;
    int v12 = 0;
    unsigned int v33 = (a2 + 15) >> 4;
    uint64_t v32 = a1 + 32;
    do
    {
      int v61 = 0;
      int v35 = v12;
      unsigned int v36 = v10;
      if (v10 >= 0x10) {
        int v13 = 16;
      }
      else {
        int v13 = v10;
      }
      int v34 = v13;
      if (v13)
      {
        int v38 = v13;
        do
        {
          int v14 = *a3;
          physx::Gu::HeightFieldUtil::getTriangle(*(void *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v48, (uint64_t)v59, (uint64_t)v58, *a3, 0, 0);
          float v15 = (float)((float)(v52 - v49) * (float)(v56 - v50)) - (float)((float)(v53 - v50) * (float)(v55 - v49));
          float v16 = (float)((float)(v53 - v50) * (float)(v54 - v48)) - (float)((float)(v51 - v48) * (float)(v56 - v50));
          float v17 = (float)((float)(v51 - v48) * (float)(v55 - v49)) - (float)((float)(v52 - v49) * (float)(v54 - v48));
          float v18 = sqrtf((float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17));
          unsigned int v37 = a3 + 1;
          if (v18 > 0.0)
          {
            float v19 = 1.0 / v18;
            float v15 = v15 * v19;
            float v16 = v16 * v19;
            float v17 = v17 * v19;
          }
          uint64_t v20 = 0;
          int v21 = 0;
          --v38;
          do
          {
            unsigned int v22 = v58[v20];
            if (v22 == -1)
            {
              if (*(unsigned char *)(a1 + 24)) {
                int v30 = 8 << v20;
              }
              else {
                int v30 = 1 << v20;
              }
              v21 |= v30;
            }
            else
            {
              physx::Gu::HeightFieldUtil::getTriangle(*(void *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v39, (uint64_t)v57, 0, v22, 0, 0);
              float v23 = (float)((float)(v43 - v40) * (float)(v47 - v41)) - (float)((float)(v44 - v41) * (float)(v46 - v40));
              float v24 = (float)((float)(v44 - v41) * (float)(v45 - v39)) - (float)((float)(v42 - v39) * (float)(v47 - v41));
              float v25 = (float)((float)(v42 - v39) * (float)(v46 - v40)) - (float)((float)(v43 - v40) * (float)(v45 - v39));
              uint64_t v26 = &v48 + 3 * byte_234423248[v20];
              if ((float)((float)((float)(v24 * (float)(v26[1] - v40)) + (float)(v23 * (float)(*v26 - v39)))
                         + (float)(v25 * (float)(v26[2] - v41))) < 0.0)
              {
                float v27 = sqrtf((float)((float)(v24 * v24) + (float)(v23 * v23)) + (float)(v25 * v25));
                if (v27 > 0.0)
                {
                  float v28 = 1.0 / v27;
                  float v23 = v23 * v28;
                  float v24 = v24 * v28;
                  float v25 = v25 * v28;
                }
                int v29 = 8 << v20;
                if ((float)((float)((float)(v16 * v24) + (float)(v23 * v15)) + (float)(v25 * v17)) >= 0.997) {
                  int v29 = 0;
                }
                v21 |= v29;
              }
            }
            ++v20;
          }
          while (v20 != 3);
          *(float *)&a4 = physx::Gu::TriangleCache<16u>::addTriangle((uint64_t)v60, (uint64_t)&v48, v59, v14, v21);
          a3 = v37;
        }
        while (v38);
      }
      unsigned int v10 = v36 - v34;
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMConvexVsMeshContactGeneration>(v32, (uint64_t)v60, a4, a5, a6, a7, a8, a9);
      int v12 = v35 + 1;
    }
    while (v35 + 1 != v33);
  }
  return 1;
}

void physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMConvexVsHeightfieldContactGenerationCallback>::~PCMHeightfieldContactGenerationCallback()
{
}

float physx::Gu::PCMConvexVsMeshContactGeneration::PCMConvexVsMeshContactGeneration(unint64_t a1, void *a2, float32x2_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6, uint64_t a7, float32x4_t *a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  float v15 = (unsigned char *)(a1 + 4568);
  physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration(a1, a2, a3, a4, a5, a6, a7, a10, a14);
  *(_DWORD *)(v16 + 4520) = 0;
  *(void *)&long long v17 = -1;
  *((void *)&v17 + 1) = -1;
  *(_OWORD *)(v16 + 4488) = v17;
  *(_OWORD *)(v16 + 4504) = v17;
  *(_OWORD *)(v16 + 4456) = v17;
  *(_OWORD *)(v16 + 4472) = v17;
  *(_OWORD *)(v16 + 4424) = v17;
  *(_OWORD *)(v16 + 4440) = v17;
  *(_OWORD *)(v16 + 4392) = v17;
  *(_OWORD *)(v16 + 4408) = v17;
  *(void *)(v16 + 4544) = a8;
  *(void *)(v16 + 4552) = a9;
  *(void *)(v16 + 4560) = a11;
  *float v15 = a12;
  v15[1] = a13;
  float32x4_t v18 = *a8;
  v18.i64[1] = a8->u32[2];
  float32x4_t v19 = vsubq_f32(v18, *(float32x4_t *)(v16 + 2416));
  float32x4_t v20 = vmulq_f32(*(float32x4_t *)(v16 + 2368), v19);
  v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
  float32x4_t v21 = vmulq_f32(v19, *(float32x4_t *)(v16 + 2384));
  v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
  float32x4_t v22 = vmulq_f32(v19, *(float32x4_t *)(v16 + 2400));
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  LODWORD(result) = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32).u32[0];
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32), 4uLL);
  v20.i64[1] = LODWORD(result);
  *(float32x4_t *)(v16 + 4528) = v20;
  return result;
}

uint64_t physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMConvexVsMeshContactGeneration>(uint64_t a1, uint64_t a2, double a3, double a4, __n128 a5, double a6, double a7, __n128 a8)
{
  int v8 = *(_DWORD *)(a2 + 848);
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 576;
    do
    {
      physx::Gu::PCMConvexVsMeshContactGeneration::processTriangle(a1, (float *)(a2 + v11), *(_DWORD *)(a2 + 4 * v12 + 768), *(unsigned char *)(a2 + v12 + 832), (int *)(a2 + v13), a3, a4, a5, a6, a7, a8);
      ++v12;
      v13 += 12;
      v11 += 36;
    }
    while (v8 != v12);
  }
  return 1;
}

void physx::Gu::SupportLocalImpl<physx::Gu::TriangleV>::~SupportLocalImpl()
{
}

double physx::Gu::SupportLocalImpl<physx::Gu::TriangleV>::doSupport(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = *(float32x4_t **)(a1 + 64);
  float32x4_t v3 = v2[3];
  float32x4_t v4 = v2[4];
  float32x4_t v5 = v2[5];
  float32x4_t v6 = vmulq_f32(v3, *a2);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(float32x2_t *)v6.f32 = vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  float32x4_t v7 = vmulq_f32(v4, *a2);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
  float32x4_t v8 = vmulq_f32(v5, *a2);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  *(float32x2_t *)v8.f32 = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  *(void *)&double result = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v8.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32)), 0), (int8x16_t)v3, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32), 0), (int8x16_t)v4, (int8x16_t)v5)).u64[0];
  return result;
}

float32x2_t physx::Gu::SupportLocalImpl<physx::Gu::TriangleV>::doSupport(uint64_t a1, float32x4_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x4_t v4 = *(float32x4_t **)(a1 + 64);
  float32x4_t v5 = vmulq_f32(v4[3], *a2);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  *(float32x2_t *)v5.f32 = vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32);
  float32x4_t v6 = vmulq_f32(v4[4], *a2);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(float32x2_t *)v6.f32 = vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  float32x4_t v7 = vmulq_f32(v4[5], *a2);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
  *a4 = vmax_f32(*(float32x2_t *)v5.f32, vmax_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32));
  float32x2_t result = vmin_f32(*(float32x2_t *)v5.f32, vmin_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32));
  *a3 = result;
  return result;
}

float physx::Gu::SupportLocalImpl<physx::Gu::TriangleV>::populateVerts(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, _OWORD *a5)
{
  if (a3)
  {
    uint64_t v5 = a3;
    do
    {
      unsigned int v6 = *a2++;
      uint64_t v7 = a4 + 12 * v6;
      *(void *)&long long v8 = *(void *)v7;
      *((void *)&v8 + 1) = *(unsigned int *)(v7 + 8);
      *a5++ = v8;
      --v5;
    }
    while (v5);
  }
  return *(float *)&v8;
}

uint64_t physx::shdfnd::Array<physx::Gu::SortedTriangle,physx::shdfnd::InlineAllocator<1024u,physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 1044);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    float32x2_t result = (16 * v5);
    if (result <= 0x400 && *(unsigned char *)(v3 + 1024) == 0)
    {
      *(unsigned char *)(v3 + 1024) = 1;
      uint64_t v7 = (_OWORD *)v3;
    }
    else
    {
      float32x2_t result = physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v7 = (_OWORD *)result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 1040);
  if (v8)
  {
    unint64_t v9 = (unint64_t)&v7[v8];
    unsigned int v10 = *(long long **)(v3 + 1032);
    uint64_t v11 = v7;
    do
    {
      long long v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
    uint64_t v13 = *(unsigned int *)(v3 + 1040);
  }
  else
  {
    uint64_t v13 = 0;
  }
  v7[v13] = *a2;
  if ((*(_DWORD *)(v3 + 1044) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(v3 + 1032);
    if (v14 == v3)
    {
      *(unsigned char *)(v3 + 1024) = 0;
    }
    else if (v14)
    {
      float32x2_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 1032) = v7;
  *(_DWORD *)(v3 + 1044) = v5;
  ++*(_DWORD *)(v3 + 1040);
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>::getName() [T = physx::Gu::SortedTriangle]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  float32x2_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    float32x2_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

BOOL physx::Gu::PCMContactConvexMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, float32x4_t *a12, uint64_t a13)
{
  double v20 = MEMORY[0x270FA5388](a1);
  uint64_t v23 = v22;
  uint64_t v191 = *MEMORY[0x263EF8340];
  float32x4_t v24 = *v17;
  v25.i64[0] = v17[1].i64[0];
  v25.i64[1] = v17[1].u32[2];
  v26.i64[0] = v18[1].i64[0];
  v26.i64[1] = v18[1].u32[2];
  float32x4_t v27 = *v18;
  int32x2_t v174 = vdup_lane_s32(v21, 0);
  v173[0] = v24;
  v173[1] = v25;
  v172[0] = v27;
  v172[1] = v26;
  float32x4_t v28 = vnegq_f32(v27);
  float32x4_t v29 = v28;
  v29.i32[3] = 0;
  float32x4_t v30 = vsubq_f32(v25, v26);
  float32x2_t v31 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v27, 3).u64[0];
  float32x4_t v32 = vmulq_n_f32(v30, vmla_f32((float32x2_t)0xBF000000BF000000, v31, v31).f32[0]);
  v32.i32[3] = 0;
  float32x2_t v33 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  float32x2_t v34 = (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, (int8x8_t)v33, 4uLL);
  int8x8_t v35 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL)), v34, *(float32x2_t *)v30.f32);
  *(int8x8_t *)v36.f32 = vext_s8(v35, (int8x8_t)vmls_f32(vmul_f32(v33, *(float32x2_t *)v30.f32), *(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL)), 4uLL);
  v36.i64[1] = v35.u32[0];
  float32x4_t v37 = vmlaq_laneq_f32(v32, v36, v27, 3);
  v37.i64[1] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u32[0];
  float32x4_t v38 = vmulq_f32(v29, v30);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  float32x4_t v39 = vmlaq_n_f32(v37, v29, vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32).f32[0]);
  float32x4_t v40 = vaddq_f32(v39, v39);
  v40.i32[3] = 0;
  float32x4_t v41 = v24;
  v41.i32[3] = 0;
  float32x4_t v42 = vmulq_f32(v41, v29);
  v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
  float32x2_t v43 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32));
  float32x4_t v44 = vmulq_laneq_f32(v29, v24, 3);
  v42.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  int8x8_t v45 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v24.f32, *(int8x8_t *)v42.f32, 4uLL), *(float32x2_t *)v28.f32), v34, *(float32x2_t *)v24.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v45, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, v33), *(float32x2_t *)v28.f32, *(float32x2_t *)v42.f32), 4uLL);
  *(int8x8_t *)&v24.u32[2] = v45;
  float32x4_t v46 = vaddq_f32(vaddq_f32(v44, vmulq_laneq_f32(v41, v27, 3)), v24);
  float32x4_t v47 = v46;
  v47.i32[3] = v43.i32[1];
  int8x16_t v48 = (int8x16_t)vabdq_f32(v40, a12[1]);
  *(float32x2_t *)v48.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(float32x2_t *)v48.i8);
  float32x4_t v49 = vmulq_f32(v47, *a12);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v48.i8), vmul_f32(*(float32x2_t *)&v20, (float32x2_t)vdup_n_s32(0x3E4CCCCDu)))), 0), *(int8x8_t *)&v20).u32[0] == -1)
  {
    float32x2_t v171 = vmul_f32(*(float32x2_t *)&v20, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
    a12[3].i8[14] = 0;
    *a12 = v47;
    a12[1] = v40;
    uint64_t v83 = *(void *)(v16 + 48);
    float v84 = v17->f32[0];
    float v85 = v17->f32[1];
    float v86 = v17->f32[2];
    float v87 = v17->f32[3];
    float v88 = v85 + v85;
    float v89 = v86 + v86;
    float v90 = v85 * (float)(v85 + v85);
    float v91 = v86 * (float)(v86 + v86);
    float v92 = (float)(v84 + v84) * v85;
    float v93 = (float)(v84 + v84) * v86;
    float v94 = (float)(v84 + v84) * v87;
    float v95 = v88 * v86;
    float v96 = v88 * v87;
    float v97 = v89 * v87;
    v168[0] = (float)(1.0 - v90) - v91;
    v168[1] = v92 + v97;
    float v98 = 1.0 - (float)(v84 * (float)(v84 + v84));
    v168[2] = v93 - v96;
    v168[3] = v92 - v97;
    v168[4] = v98 - v91;
    v168[5] = v95 + v94;
    v168[6] = v93 + v96;
    v168[7] = v95 - v94;
    uint64_t v169 = v17[1].i64[0];
    __int32 v99 = v17[1].i32[2];
    v168[8] = v98 - v90;
    __int32 v170 = v99;
    float v100 = v18->f32[0];
    float v101 = v18->f32[1];
    float v102 = v18->f32[2];
    float v103 = v18->f32[3];
    float v104 = v101 + v101;
    float v105 = v102 + v102;
    float v106 = v101 * (float)(v101 + v101);
    float v107 = v102 * (float)(v102 + v102);
    float v108 = (float)(v100 + v100) * v101;
    float v109 = (float)(v100 + v100) * v102;
    float v110 = (float)(v100 + v100) * v103;
    float v111 = v104 * v102;
    float v112 = v104 * v103;
    float v113 = v105 * v103;
    v165[0] = (float)(1.0 - v106) - v107;
    v165[1] = v108 + v113;
    float v114 = 1.0 - (float)(v100 * (float)(v100 + v100));
    v165[2] = v109 - v112;
    v165[3] = v108 - v113;
    v165[4] = v114 - v107;
    v165[5] = v111 + v110;
    v165[6] = v109 + v112;
    v165[7] = v111 - v110;
    v165[8] = v114 - v106;
    uint64_t v166 = v18[1].i64[0];
    __int32 v167 = v18[1].i32[2];
    float32x2_t v115 = v13;
    uint64_t v116 = v14;
    uint64_t v117 = v19;
    physx::Gu::computeHullOBB(v164, v15, v168, v165, a9, a11, COERCE_DOUBLE(__PAIR64__(HIDWORD(v166), v21.u32[0])));
    uint64_t v190 = 0x44000000000;
    char v188 = 1;
    float32x4_t v189 = v187;
    uint64_t v118 = *(void *)(v83 + 80);
    v175.i32[2] = 2;
    *(void *)&long long v176 = a9;
    *((void *)&v176 + 1) = v118;
    LOBYTE(v177[0]) = a11;
    int v178 = 0;
    v175.i64[0] = (uint64_t)&unk_26E729F00;
    float v119 = physx::Gu::PCMConvexVsMeshContactGeneration::PCMConvexVsMeshContactGeneration((unint64_t)v179, &v174, &v171, v173, v172, (uint64_t)a12, v23, v115, v116, (uint64_t)v187, v117, a10, 1, a13);
    float32x2_t v186 = v164;
    ((void (*)(uint64_t, float *, float32x4_t *, uint64_t, uint64_t, float))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v83 + 8) - 3])(v83, v164, &v175, 1, 1, v119);
    if (v178)
    {
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMConvexVsMeshContactGeneration>((uint64_t)v179, (uint64_t)v177 + 4, v120, v121, v122, v123, v124, v125);
      int v178 = 0;
    }
    physx::Gu::PCMConvexVsMeshContactGeneration::generateLastContacts(v179);
    unsigned int v126 = v184;
    if (v184)
    {
      uint64_t v127 = v185;
      if (v185 >= 2)
      {
        int v128 = 0;
        unsigned int v129 = -1;
        uint64_t v130 = 1;
        do
        {
          int8x16_t v131 = (char *)v179 + 8 * v130;
          uint64_t v132 = *((void *)v131 + 255);
          uint64_t v133 = *((void *)v131 + 256);
          if (COERCE_FLOAT(*(void *)(v132 + 40)) > COERCE_FLOAT(*(void *)(v133 + 40)))
          {
            *((void *)v131 + 255) = v133;
            *((void *)v131 + 256) = v132;
            if ((int)v130 - 2 >= 0)
            {
              int v134 = &v180[v129 + 1];
              int v135 = v128;
              do
              {
                uint64_t v137 = *(v134 - 1);
                uint64_t v136 = *v134;
                if (COERCE_FLOAT(*(void *)(*v134 + 40)) >= COERCE_FLOAT(*(void *)(v137 + 40))) {
                  break;
                }
                *int v134 = v137;
                *--int v134 = v136;
                --v135;
              }
              while (v135 > 0);
            }
          }
          ++v130;
          ++v129;
          ++v128;
        }
        while (v130 != v127);
      }
      if (v127)
      {
        uint64_t v138 = 0;
        for (uint64_t i = 0; i != v127; ++i)
        {
          int v140 = (float32x4_t *)v180[i];
          v140[1].i64[1] = (uint64_t)v140;
          v140[2].i64[0] = (uint64_t)v140;
          int v141 = v140[3].i32[1] - v140[3].i32[0];
          v140[3].i32[2] = v141;
          v140[1].i64[0] = 0;
          uint64_t v142 = v138;
          while (v142)
          {
            uint64_t v143 = *(uint64_t *)((char *)&v179[127].i64[1] + v142);
            float32x4_t v144 = *(float32x4_t **)(v143 + 32);
            float32x4_t v145 = vmulq_f32(*v140, *v144);
            v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
            v142 -= 8;
            if (vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32).f32[0] >= *(float *)&v181)
            {
              *(void *)(v143 + 16) = v140;
              v144[1].i64[1] = (uint64_t)v140;
              v140[2].i64[0] = (uint64_t)v144;
              *(_DWORD *)(*(void *)(v143 + 32) + 56) += v141;
              break;
            }
          }
          v138 += 8;
        }
        uint64_t v146 = 0;
        uint64_t v147 = v183;
        do
        {
          uint64_t v148 = v180[v146];
          if (v148) {
            _ZF = *(void *)(v148 + 32) == v148;
          }
          else {
            _ZF = 0;
          }
          if (_ZF)
          {
            while (*(void *)(v148 + 16))
            {
              uint64_t v150 = v148;
              uint64_t v148 = *(void *)(v148 + 16);
              unint64_t v151 = *(unsigned int *)(v150 + 48);
              unint64_t v152 = *(unsigned int *)(v150 + 52);
              if (v151 < v152)
              {
                unsigned int v153 = *(_DWORD *)(v148 + 52);
                do
                {
                  unsigned int v154 = *(_DWORD *)(v148 + 48);
                  if (v154 < v153)
                  {
                    do
                    {
                      unint64_t v155 = v147 + ((unint64_t)v154 << 6);
                      float32x4_t v156 = vsubq_f32(*(float32x4_t *)(v155 + 16), *(float32x4_t *)(v147 + (v151 << 6) + 16));
                      float32x4_t v157 = vmulq_f32(v156, v156);
                      v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
                      if (*(float *)v182 > vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32).f32[0])
                      {
                        uint64_t v158 = (long long *)(v147 + ((unint64_t)(v153 - 1) << 6));
                        long long v159 = *v158;
                        long long v160 = v158[1];
                        long long v161 = v158[2];
                        *(_DWORD *)(v155 + 48) = *((_DWORD *)v158 + 12);
                        *(_OWORD *)(v155 + 16) = v160;
                        *(_OWORD *)(v155 + 32) = v161;
                        *(_OWORD *)unint64_t v155 = v159;
                        unsigned int v153 = *(_DWORD *)(v148 + 52) - 1;
                        *(_DWORD *)(v148 + 52) = v153;
                        --v154;
                      }
                      ++v154;
                    }
                    while (v154 < v153);
                    unint64_t v152 = *(unsigned int *)(v150 + 52);
                  }
                  ++v151;
                }
                while (v151 < v152);
              }
            }
          }
          ++v146;
        }
        while (v146 != v127);
        uint64_t v162 = v183;
        unsigned int v126 = v184;
        unsigned int v163 = v185;
      }
      else
      {
        unsigned int v163 = 0;
        uint64_t v162 = v183;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v180[36], v162, v126, v180, v163, (uint64_t)v182, &v181, 6);
    }
    if ((v190 & 0x8000000000000000) == 0 && (v190 & 0x7FFFFFFF00000000) != 0 && v189 != v187 && v189) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  else
  {
    float32x2_t v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 1);
    float32x2_t v51 = (float32x2_t)vdup_laneq_s32((int32x4_t)v46, 2);
    float32x4_t v52 = vaddq_f32(v46, v46);
    float32x2_t v53 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
    v177[1] = v40;
    float32x2_t v54 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v52.f32), 0);
    float32x2_t v55 = vmul_lane_f32(v50, *(float32x2_t *)v52.f32, 1);
    float32x2_t v56 = vmul_laneq_f32(v51, v52, 2);
    float32x2_t v57 = vmul_n_f32(v50, v52.f32[0]);
    float32x2_t v58 = vmul_n_f32(v51, v52.f32[0]);
    float32x2_t v59 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0), v43, 1);
    float32x2_t v60 = vmul_lane_f32(v51, *(float32x2_t *)v52.f32, 1);
    *(float32x2_t *)v52.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1), v43, 1);
    float32x2_t v61 = vmul_lane_f32(v53, v43, 1);
    __asm { FMOV            V16.2S, #1.0 }
    float32x2_t v66 = vsub_f32(_D16, v54);
    *(int8x8_t *)v67.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D16, v55), v56), (int8x8_t)vadd_f32(v57, v61), 4uLL);
    v67.i64[1] = vsub_f32(v58, *(float32x2_t *)v52.f32).u32[0];
    float32x4_t v175 = v67;
    *(int8x8_t *)&long long v68 = vext_s8((int8x8_t)vsub_f32(v57, v61), (int8x8_t)vsub_f32(v66, v56), 4uLL);
    *((void *)&v68 + 1) = vadd_f32(v60, v59).u32[0];
    long long v176 = v68;
    *(int8x8_t *)&long long v68 = vext_s8((int8x8_t)vadd_f32(v58, *(float32x2_t *)v52.f32), (int8x8_t)vsub_f32(v60, v59), 4uLL);
    *((void *)&v68 + 1) = vsub_f32(v66, v55).u32[0];
    v177[0] = v68;
    v187[0] = vmul_f32(*(float32x2_t *)&v20, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    unsigned int v69 = a12[3].u8[14];
    if (a12[3].i8[14])
    {
      unsigned int v70 = 0;
      do
      {
        float32x4_t v71 = &a12[3].i8[v70 + 8];
        uint64_t v72 = *v71;
        unsigned int v73 = v69 - 2;
        if (v70 < v73) {
          unsigned int v73 = v70;
        }
        _X8 = (uint64_t)&a12[25 * a12[3].u8[v73 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        unsigned __int32 v78 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&a12[25 * *v71 + 4], &v175, v187).u32[0];
        if (a12[25 * v72 + 28].i32[0])
        {
          a12[2].i32[v72] = v78;
        }
        else
        {
          unsigned __int8 v79 = a12[3].i8[14] - 1;
          a12[3].i8[14] = v79;
          float32x4_t v80 = (char *)a12 + v79;
          __int8 v81 = v80[56];
          v80[56] = v72;
          *float32x4_t v71 = v81;
          --v70;
        }
        ++v70;
        unsigned int v69 = a12[3].u8[14];
      }
      while (v70 < v69);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)a12, v23, v172);
}

BOOL physx::Gu::pcmContactConvexMesh(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a6;
  if (!*a6) {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 48);
  *(void *)&long long v17 = *(void *)(a3 + 16);
  *((void *)&v17 + 1) = *(unsigned int *)(a3 + 24);
  v108[0] = *(_OWORD *)a3;
  v108[1] = v17;
  float v19 = a2[1];
  float v20 = a2[2];
  float32x4_t v18 = a2 + 1;
  char v22 = v19 == 1.0 && v20 == 1.0 && a2[3] == 1.0;
  long long v24 = xmmword_23435FD50;
  v105[0] = xmmword_23435FD50;
  v105[1] = xmmword_23435FD50;
  long long v25 = xmmword_234376D80;
  long long v26 = xmmword_23435FD60;
  v105[2] = xmmword_234376D80;
  v105[3] = xmmword_23435FD60;
  uint64_t v106 = 0x3F80000000000000;
  char v107 = 0;
  if ((v22 & 1) == 0)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v105, v18, a2 + 4);
    long long v25 = xmmword_234376D80;
    long long v26 = xmmword_23435FD60;
    long long v24 = xmmword_23435FD50;
  }
  v102[0] = v24;
  v102[1] = v24;
  v102[2] = v25;
  v102[3] = v26;
  uint64_t v103 = 0x3F80000000000000;
  char v104 = 0;
  BOOL PCMConvexData = physx::Gu::getPCMConvexData(a1, (uint64_t)v102, (uint64_t)v101, (uint64_t)v100);
  float32x4_t v28 = *(float32x4_t *)(a1 + 16);
  float32x4_t v29 = *(float32x4_t *)(a1 + 4);
  float32x4_t v30 = v29;
  v30.i32[3] = 0;
  v31.i64[0] = *(void *)(v16 + 60);
  v31.i64[1] = *(unsigned int *)(v16 + 68);
  int32x4_t v32 = (int32x4_t)vmulq_f32(v30, v31);
  *(float32x2_t *)v32.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v32, 2), *(float32x2_t *)v32.i8);
  *(float32x2_t *)v32.i8 = vpmin_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8);
  *(float *)v33.i32 = *(float *)(a5 + 8) * 0.05;
  __asm { FMOV            V5.2S, #0.25 }
  int8x8_t v38 = (int8x8_t)vmin_f32(vmul_f32(*(float32x2_t *)v32.i8, _D5), (float32x2_t)vdup_lane_s32(v33, 0));
  char v117 = 0;
  float32x4_t v115 = 0u;
  long long v116 = 0u;
  uint64_t v124 = v16;
  uint64_t v126 = *(void *)(v16 + 40) + 20 * *(unsigned __int8 *)(v16 + 39);
  char v127 = *(unsigned char *)(v16 + 38);
  *(float32x2_t *)&long long v116 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v32.i32);
  *((float *)&v116 + 2) = 0.025 * *(float *)v32.i32;
  if (PCMConvexData)
  {
    long long v118 = xmmword_23435FD50;
    long long v119 = xmmword_23435FD60;
    long long v120 = xmmword_23435FD80;
    long long v121 = xmmword_23435FD50;
    long long v122 = xmmword_23435FD60;
    long long v123 = xmmword_23435FD80;
    uint64_t v125 = *(void *)(v16 + 48);
    float v110 = v108;
    float v111 = &v118;
    float v112 = &v121;
    char v113 = 1;
    v109[0] = &unk_26E728728;
    float v114 = &v115;
    return physx::Gu::PCMContactConvexMesh((uint64_t)v100, (uint64_t)v109, (uint64_t)v101, (uint64_t)a2, a3, a4, a7, (uint64_t)v102, (uint64_t)v105, 1, v22, v8, a8);
  }
  else
  {
    float32x4_t v39 = vrecpeq_f32(v30);
    int v40 = 4;
    do
    {
      float32x4_t v39 = vmulq_f32(v39, vrecpsq_f32(v39, v30));
      --v40;
    }
    while (v40);
    *(int32x2_t *)v41.f32 = vdup_lane_s32(*(int32x2_t *)v29.f32, 0);
    v41.i64[1] = v41.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v41, v30)), v38).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v48 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.f32, 1);
      float32x2_t v49 = (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 2);
      float32x2_t v50 = (float32x2_t)vdup_laneq_s32((int32x4_t)v28, 3);
      _Q7 = vaddq_f32(v28, v28);
      float32x2_t v52 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)_Q7.f32), 0);
      float32x2_t v53 = vmul_lane_f32(v48, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v54 = vmul_laneq_f32(v49, _Q7, 2);
      float32x2_t v55 = vmul_n_f32(v48, _Q7.f32[0]);
      float32x2_t v56 = vmul_n_f32(v49, _Q7.f32[0]);
      float32x2_t v57 = vmul_n_f32(v50, _Q7.f32[0]);
      float32x2_t v58 = vmul_lane_f32(v49, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v59 = vmul_lane_f32(v50, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v60 = vmul_laneq_f32(v50, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      float32x2_t v61 = vsub_f32(*(float32x2_t *)_Q7.f32, v52);
      *(int8x8_t *)_Q7.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q7.f32, v53), v54), (int8x8_t)vadd_f32(v55, v60), 4uLL);
      int8x8_t v62 = (int8x8_t)vsub_f32(v55, v60);
      v63.i64[0] = _Q7.i64[0];
      v63.i64[1] = vsub_f32(v56, v59).u32[0];
      int32x2_t v64 = (int32x2_t)vext_s8(v62, (int8x8_t)vsub_f32(v61, v54), 4uLL);
      int8x8_t v65 = (int8x8_t)vadd_f32(v56, v59);
      *(int8x8_t *)v66.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0), (int8x8_t)v64, 4uLL);
      int8x8_t v67 = (int8x8_t)vdup_lane_s32(v64, 1);
      *(int32x2_t *)v68.f32 = v64;
      v68.i64[1] = vadd_f32(v58, v57).u32[0];
      v64.i32[0] = vsub_f32(v61, v53).u32[0];
      *(int8x8_t *)v69.f32 = vext_s8(v65, (int8x8_t)vsub_f32(v58, v57), 4uLL);
      *(int8x8_t *)v70.f32 = vext_s8(*(int8x8_t *)_Q7.f32, v67, 4uLL);
      v69.i64[1] = v64.u32[0];
      v66.i64[1] = vdup_lane_s32(*(int32x2_t *)v69.f32, 0).u32[0];
      v70.i64[1] = vdup_lane_s32(*(int32x2_t *)v69.f32, 1).u32[0];
      *(int8x8_t *)v71.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v63.u32[2], 0), *(int8x8_t *)&v68.u32[2], 4uLL);
      v71.i64[1] = vdup_lane_s32((int32x2_t)v64.u32[0], 0).u32[0];
      float32x4_t v72 = vmulq_n_f32(v66, v29.f32[0]);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_lane_f32(v70, *(float32x2_t *)v29.f32, 1);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_laneq_f32(v71, v29, 2);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_n_f32(v72, v63.f32[0]);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_lane_f32(v73, *(float32x2_t *)v63.f32, 1);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_laneq_f32(v74, v63, 2);
      v77.i32[3] = 0;
      float32x4_t v42 = vaddq_f32(v77, vaddq_f32(v75, v76));
      float32x4_t v78 = vmulq_n_f32(v72, v68.f32[0]);
      v78.i32[3] = 0;
      float32x4_t v79 = vmulq_lane_f32(v73, *(float32x2_t *)v68.f32, 1);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_laneq_f32(v74, v68, 2);
      v80.i32[3] = 0;
      float32x4_t v81 = vaddq_f32(v78, v79);
      float32x4_t v82 = vmulq_n_f32(v72, v69.f32[0]);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_lane_f32(v73, *(float32x2_t *)v69.f32, 1);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_laneq_f32(v74, v69, 2);
      v84.i32[3] = 0;
      float32x4_t v43 = vaddq_f32(v80, v81);
      float32x4_t v44 = vaddq_f32(v84, vaddq_f32(v82, v83));
      long long v118 = (__int128)v42;
      long long v119 = (__int128)v43;
      long long v120 = (__int128)v44;
      float32x4_t v85 = vmulq_n_f32(v66, v39.f32[0]);
      v85.i32[3] = 0;
      float32x4_t v86 = vmulq_lane_f32(v70, *(float32x2_t *)v39.f32, 1);
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_laneq_f32(v71, v39, 2);
      v87.i32[3] = 0;
      float32x4_t v88 = vmulq_n_f32(v85, v63.f32[0]);
      v88.i32[3] = 0;
      float32x4_t v89 = vmulq_lane_f32(v86, *(float32x2_t *)v63.f32, 1);
      v89.i32[3] = 0;
      float32x4_t v90 = vmulq_laneq_f32(v87, v63, 2);
      v90.i32[3] = 0;
      float32x4_t v45 = vaddq_f32(v90, vaddq_f32(v88, v89));
      float32x4_t v91 = vmulq_n_f32(v85, v68.f32[0]);
      v91.i32[3] = 0;
      float32x4_t v92 = vmulq_lane_f32(v86, *(float32x2_t *)v68.f32, 1);
      v92.i32[3] = 0;
      float32x4_t v93 = vmulq_laneq_f32(v87, v68, 2);
      v93.i32[3] = 0;
      float32x4_t v94 = vmulq_n_f32(v85, v69.f32[0]);
      v94.i32[3] = 0;
      float32x4_t v95 = vmulq_lane_f32(v86, *(float32x2_t *)v69.f32, 1);
      v95.i32[3] = 0;
      float32x4_t v46 = vaddq_f32(v93, vaddq_f32(v91, v92));
      float32x4_t v96 = vmulq_laneq_f32(v87, v69, 2);
      v96.i32[3] = 0;
      float32x4_t v47 = vaddq_f32(v96, vaddq_f32(v94, v95));
    }
    else
    {
      v39.i32[3] = 0;
      float32x4_t v42 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD50);
      float32x4_t v43 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD60);
      float32x4_t v44 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD80);
      long long v118 = (__int128)v42;
      long long v119 = (__int128)v43;
      long long v120 = (__int128)v44;
      float32x4_t v45 = vmulq_f32(v39, (float32x4_t)xmmword_23435FD50);
      float32x4_t v46 = vmulq_f32(v39, (float32x4_t)xmmword_23435FD60);
      float32x4_t v47 = vmulq_f32(v39, (float32x4_t)xmmword_23435FD80);
    }
    long long v122 = (__int128)v46;
    long long v123 = (__int128)v47;
    float32x4_t v97 = vmulq_f32(v42, (float32x4_t)0);
    v97.i32[3] = 0;
    float32x4_t v98 = vmulq_f32(v43, (float32x4_t)0);
    v98.i32[3] = 0;
    float32x4_t v99 = vmulq_f32(v44, (float32x4_t)0);
    v99.i32[3] = 0;
    long long v121 = (__int128)v45;
    float32x4_t v115 = vaddq_f32(v99, vaddq_f32(v98, v97));
    uint64_t v125 = *(void *)(v16 + 48);
    float v110 = v108;
    float v111 = &v118;
    float v112 = &v121;
    char v113 = 0;
    v109[0] = &unk_26E728778;
    float v114 = &v115;
    return physx::Gu::PCMContactConvexMesh((uint64_t)v100, (uint64_t)v109, (uint64_t)v101, (uint64_t)a2, a3, a4, a7, (uint64_t)v102, (uint64_t)v105, 0, v22, v8, a8);
  }
}

BOOL physx::Gu::pcmContactBoxMesh(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a6;
  if (!*a6) {
    return 0;
  }
  uint64_t v14 = a1 + 4;
  unsigned int v15 = *(_DWORD *)(a1 + 4);
  int32x2_t v16 = *(int32x2_t *)(a1 + 8);
  float32x2_t v55 = vneg_f32(*(float32x2_t *)(a1 + 4));
  float v56 = -*(float *)&v16.i32[1];
  unsigned int v57 = v15;
  int32x2_t v58 = v16;
  float v18 = a2[1];
  float v19 = a2[2];
  long long v17 = a2 + 1;
  char v21 = v18 == 1.0 && v19 == 1.0 && a2[3] == 1.0;
  v52[0] = xmmword_23435FD50;
  v52[1] = xmmword_23435FD50;
  long long v23 = xmmword_234376D80;
  v52[2] = xmmword_234376D80;
  v52[3] = xmmword_23435FD60;
  uint64_t v53 = 0x3F80000000000000;
  char v54 = 0;
  if ((v21 & 1) == 0)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v52, v17, a2 + 4);
    long long v23 = xmmword_234376D80;
    unsigned int v15 = *(_DWORD *)(a1 + 4);
    int32x2_t v16 = *(int32x2_t *)(a1 + 8);
  }
  v49[0] = xmmword_23435FD50;
  v49[1] = xmmword_23435FD50;
  v49[2] = v23;
  v49[3] = xmmword_23435FD60;
  uint64_t v50 = 0x3F80000000000000;
  char v51 = 0;
  *(void *)&long long v24 = __PAIR64__(v16.u32[0], v15);
  float32x2_t v25 = vpmin_f32((float32x2_t)vdup_lane_s32(v16, 1), (float32x2_t)__PAIR64__(v16.u32[0], v15));
  *((void *)&v24 + 1) = v16.u32[1];
  v25.f32[0] = vpmin_f32(v25, v25).f32[0];
  int v46 = 3;
  char v47 = 0;
  v42[1] = 0;
  v42[0] = 0;
  long long v48 = v24;
  float v43 = 0.15 * v25.f32[0];
  float v44 = 0.05 * v25.f32[0];
  float v45 = 0.05 * v25.f32[0];
  v26.i64[0] = *(void *)(a3 + 16);
  v26.i64[1] = *(unsigned int *)(a3 + 24);
  v41[0] = *(_OWORD *)a3;
  v41[1] = v26;
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v29, v14, *(double *)v41, v26);
  uint64_t v32 = 0;
  uint64_t v34 = 0x600000008;
  int v33 = 0;
  int v35 = 0;
  float32x4_t v36 = &v31;
  float32x4_t v37 = &v30;
  int8x8_t v38 = &physx::Gu::gPCMBoxPolygonData;
  long long v39 = 0u;
  long long v40 = 0u;
  v28[0] = xmmword_23435FD50;
  v28[1] = xmmword_23435FD60;
  v28[2] = xmmword_23435FD80;
  v59[4] = v41;
  v59[5] = v28;
  v59[6] = v28;
  char v60 = 1;
  v59[0] = &unk_26E7286C8;
  float32x2_t v61 = v42;
  return physx::Gu::PCMContactConvexMesh((uint64_t)&v32, (uint64_t)v59, (uint64_t)&v55, (uint64_t)a2, a3, a4, a7, (uint64_t)v49, (uint64_t)v52, 1, v21, v8, a8);
}

uint64_t physx::Gu::buildPartialHull(uint64_t result, uint64_t a2, _DWORD *a3, float32x4_t *a4, float32x4_t a5)
{
  uint64_t v8 = result;
  float32x4_t v9 = vmulq_f32(a5, a5);
  v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
  float32x2_t v10 = vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32);
  float32x2_t v11 = vrsqrte_f32(v10);
  int v12 = 4;
  do
  {
    float32x2_t v11 = vmul_f32(v11, vrsqrts_f32(vmul_f32(v11, v11), v10));
    --v12;
  }
  while (v12);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v18 = vmul_f32(v10, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v10), 0), _D4, (int8x8_t)v11));
  float32x2_t v19 = vrecpe_f32(v18);
  int v20 = 4;
  do
  {
    float32x2_t v19 = vmul_f32(v19, vrecps_f32(v18, v19));
    --v20;
  }
  while (v20);
  unint64_t v21 = *(unsigned int *)(result + 16);
  if (v21)
  {
    unint64_t v22 = 0;
    float32x4_t v23 = vmulq_n_f32(a5, v19.f32[0]);
    v23.i32[3] = 0;
    float32x4_t v51 = v23;
    do
    {
      uint64_t v24 = *(void *)(v8 + 24) + 20 * v22;
      int v27 = *(unsigned __int8 *)(v24 + 18);
      int32x4_t v26 = (unsigned char *)(v24 + 18);
      int v25 = v27;
      if (v27)
      {
        unsigned int v28 = 0;
        float32x4_t v29 = (unsigned __int8 *)(*(void *)(v8 + 40) + *((unsigned __int16 *)v26 - 1));
        float32x4_t v30 = *(float32x4_t *)(*(void *)(v8 + 32) + 12 * *v29);
        uint64_t v31 = *(float32x4_t **)(a2 + 40);
        float32x4_t v32 = vmulq_n_f32(*v31, v30.f32[0]);
        v32.i32[3] = 0;
        float32x4_t v33 = vmulq_lane_f32(v31[1], *(float32x2_t *)v30.f32, 1);
        v33.i32[3] = 0;
        unsigned int v34 = v25 - 1;
        float32x4_t v35 = vmulq_laneq_f32(v31[2], v30, 2);
        v35.i32[3] = 0;
        float32x4_t v36 = vaddq_f32(vaddq_f32(v32, v33), v35);
        float32x4_t v37 = vmulq_f32(v23, vsubq_f32(v36, *a4));
        v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
        float32x2_t v38 = vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
        do
        {
          long long v39 = *(float32x4_t **)(a2 + 40);
          float32x4_t v40 = *(float32x4_t *)(*(void *)(v8 + 32) + 12 * v29[v34]);
          float32x4_t v41 = vmulq_n_f32(*v39, v40.f32[0]);
          v41.i32[3] = 0;
          float32x4_t v42 = vmulq_lane_f32(v39[1], *(float32x2_t *)v40.f32, 1);
          v42.i32[3] = 0;
          float32x4_t v43 = vmulq_laneq_f32(v39[2], v40, 2);
          v43.i32[3] = 0;
          float32x4_t v44 = vaddq_f32(vaddq_f32(v41, v42), v43);
          float32x4_t v45 = vmulq_f32(v23, vsubq_f32(v44, *a4));
          v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
          *(int32x2_t *)v41.f32 = vcgtz_f32(v38);
          float32x2_t v38 = vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgtz_f32(v38), *(int8x8_t *)v41.f32), 0), *(int8x8_t *)v36.f32).u32[0] == -1)
          {
            _Q0 = vsubq_f32(v36, v44);
            _S1 = _Q0.i32[2];
            __asm { FMLA            S2, S1, V0.S[2] }
            float32x4_t v52 = v44;
            if (_S2 <= 0.0)
            {
              _Q0.i64[0] = 0;
              float v50 = 0.0;
            }
            else
            {
              float v49 = 1.0 / sqrtf(_S2);
              *(float32x2_t *)_Q0.f32 = vmul_n_f32(*(float32x2_t *)_Q0.f32, v49);
              float v50 = _Q0.f32[2] * v49;
            }
            uint64_t v53 = _Q0.i64[0];
            float v54 = v50;
            float32x2_t result = physx::Gu::SeparatingAxes::addAxis(a3, (float *)&v53);
            LOBYTE(v25) = *v26;
            float32x4_t v23 = v51;
            float32x4_t v44 = v52;
          }
          unsigned int v34 = v28++;
          float32x4_t v36 = v44;
        }
        while (v28 < v25);
        unint64_t v21 = *(unsigned int *)(v8 + 16);
      }
      ++v22;
    }
    while (v22 < v21);
  }
  return result;
}

uint64_t physx::Gu::generatedContacts(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, void *a5, uint64_t a6, float32x4_t *a7, uint64_t a8, _DWORD *a9, void *a10)
{
  uint64_t v246 = *MEMORY[0x263EF8340];
  uint64_t v241 = a1;
  uint64_t v15 = *(void *)(a1 + 40);
  float32x4_t v16 = *a3;
  v16.i64[1] = a3->u32[2];
  long long v17 = (float32x4_t *)a5[6];
  float32x4_t v18 = vmulq_f32(*v17, v16);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  float32x4_t v19 = vmulq_f32(v16, v17[1]);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  float32x4_t v20 = vmulq_f32(v16, v17[2]);
  v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
  unsigned __int32 v21 = vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32).u32[0];
  *(int8x8_t *)v22.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), 4uLL);
  v22.i64[1] = v21;
  uint64_t v23 = a3[1].u16[0];
  float32x4_t v24 = vmulq_f32(v22, v22);
  v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
  float32x2_t v25 = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
  float32x2_t v26 = vrsqrte_f32(v25);
  int v27 = 4;
  do
  {
    float32x2_t v26 = vmul_f32(v26, vrsqrts_f32(vmul_f32(v26, v26), v25));
    --v27;
  }
  while (v27);
  uint64_t v242 = a6;
  float32x4_t v243 = a10;
  uint64_t v244 = a8;
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v32 = vmul_f32(v25, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v25), 0), _D8, (int8x8_t)v26));
  float32x2_t v33 = vrecpe_f32(v32);
  int v34 = 4;
  do
  {
    float32x2_t v33 = vmul_f32(v33, vrecps_f32(v32, v33));
    --v34;
  }
  while (v34);
  uint64_t v237 = v15 + v23;
  float32x4_t v35 = vmulq_n_f32(v22, v33.f32[0]);
  v35.i32[3] = 0;
  float32x4_t v245 = v35;
  *(int8x8_t *)v36.f32 = physx::Gu::findRotationMatrixFromZAxis((int32x4_t *)&v245);
  float32x4_t v239 = v37;
  float32x4_t v240 = v36;
  float32x4_t v238 = v38;
  uint64_t v236 = *(void *)(a2 + 40) + a4[1].u16[0];
  uint64_t v39 = a3[1].u8[2];
  MEMORY[0x270FA5388](v40);
  uint64_t v235 = a2;
  float32x4_t v42 = (char *)&v234 - v41;
  bzero((char *)&v234 - v41, v41);
  float32x4_t v43 = (float32x4_t *)((unint64_t)(v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v44 = a4[1].u8[2];
  MEMORY[0x270FA5388](v45);
  char v47 = (char *)&v234 - v46;
  bzero((char *)&v234 - v46, v46);
  long long v48 = (float32x4_t *)((unint64_t)(v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v49);
  float32x4_t v51 = (char *)&v234 - v50;
  bzero((char *)&v234 - v50, v44);
  MEMORY[0x270FA5388](v52);
  float v54 = (char *)&v234 - v53;
  bzero((char *)&v234 - v53, v55);
  unint64_t v56 = (unint64_t)(v54 + 15);
  (*(void (**)(void *, uint64_t, uint64_t, void, float32x4_t *))(*a5 + 32))(a5, v237, v39, *(void *)(v241 + 32), v43);
  uint64_t v57 = v242;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, float32x4_t *))(*(void *)v242 + 32))(v242, v236, a4[1].u8[2], *(void *)(v235 + 32), v48);
  float32x4_t v59 = v238;
  float32x4_t v60 = v239;
  float32x4_t v61 = v240;
  float32x4_t v62 = *v48;
  float32x4_t v63 = (float32x4_t)xmmword_234422E70;
  float32x4_t v64 = (float32x4_t)xmmword_23441F6C0;
  float32x4_t v65 = (float32x4_t)xmmword_23441F6C0;
  float32x4_t v66 = (float32x4_t)xmmword_234422E70;
  if (a3[1].i8[2])
  {
    unint64_t v67 = 0;
    float32x4_t v68 = (float32x4_t)xmmword_23441F6C0;
    float32x4_t v69 = (float32x4_t)xmmword_234422E70;
    do
    {
      float32x4_t v70 = v43[v67];
      float32x4_t v71 = vmulq_n_f32(v61, v70.f32[0]);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_lane_f32(v60, *(float32x2_t *)v70.f32, 1);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_laneq_f32(v59, v70, 2);
      v73.i32[3] = 0;
      float32x4_t v74 = vaddq_f32(v73, vaddq_f32(v71, v72));
      v43[v67] = v74;
      float32x4_t v68 = vminq_f32(v68, v74);
      float32x4_t v69 = vmaxq_f32(v69, v74);
      ++v67;
    }
    while (v67 < a3[1].u8[2]);
    float32x4_t v65 = vaddq_f32(v68, (float32x4_t)xmmword_234423280);
    float32x4_t v66 = vaddq_f32(v69, (float32x4_t)xmmword_234423290);
  }
  int v75 = 0;
  unint64_t v76 = v56 & 0xFFFFFFFFFFFFFFF0;
  float32x4_t v77 = *v43;
  LODWORD(v78) = a4[1].u8[2];
  unint64_t v79 = *a9;
  float32x4_t v80 = v243;
  if (a4[1].i8[2])
  {
    uint64_t v81 = v244;
    if (v79 <= 0x3F)
    {
      unint64_t v82 = 0;
      int v75 = 0;
      float v83 = v77.f32[2] + COERCE_FLOAT(*v243);
      float32x4_t v84 = (float32x4_t)xmmword_23441F6C0;
      float32x4_t v85 = (float32x4_t)xmmword_234422E70;
      float32x2_t v86 = (float32x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u64[0];
      v87.i64[0] = -1;
      v87.i64[1] = -1;
      do
      {
        float32x4_t v88 = v48[v82];
        float32x4_t v89 = vsubq_f32(v88, a7[3]);
        float32x4_t v90 = vmulq_f32(*a7, v89);
        v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
        float32x4_t v91 = vmulq_f32(v89, a7[1]);
        v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
        float32x4_t v92 = vmulq_f32(v89, a7[2]);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        *(int8x8_t *)v93.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32), 4uLL);
        v93.i64[1] = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32).u32[0];
        float32x4_t v94 = vmulq_n_f32(v61, v93.f32[0]);
        v94.i32[3] = 0;
        float32x4_t v95 = vmulq_lane_f32(v60, *(float32x2_t *)v93.f32, 1);
        v95.i32[3] = 0;
        float32x4_t v96 = vmulq_laneq_f32(v59, v93, 2);
        v96.i32[3] = 0;
        int8x16_t v97 = (int8x16_t)vaddq_f32(v96, vaddq_f32(v94, v95));
        v48[v82] = (float32x4_t)v97;
        *(int32x2_t *)(v76 + 8 * v82) = vdup_lane_s32((int32x2_t)vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v97, v97, 8uLL), v86), 0);
        float32x4_t v98 = v48[v82];
        float32x4_t v99 = v98;
        v99.i32[2] = v77.i32[2];
        v48[v82] = v99;
        if (v83 > *(float *)&v97.i32[2])
        {
          v51[v82] = 1;
          uint64_t v100 = a3[1].u8[2];
          int32x2_t v101 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v65, v99), (int8x16_t)vcgtq_f32(v99, v66)).u64[0];
          if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v101, 0), (int8x16_t)vdupq_lane_s32(v101, 1)), v87)), *(int8x8_t *)v77.f32).u32[0] != -1&& v100 != 0)
          {
            uint64_t v103 = 0;
            float32x2_t v104 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.f32, 0);
            float32x2_t v105 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.f32, 1);
            LODWORD(v106) = v100 - 1;
            uint64_t result = 1;
            while (1)
            {
              float32x4_t v107 = v43[v106];
              uint64_t v106 = v103;
              float32x2_t v108 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.f32, 1);
              float32x4_t v109 = v43[v103];
              float32x2_t v110 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.f32, 1);
              float32x2_t v111 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.f32, 0);
              float32x2_t v112 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.f32, 0);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v104, v112), (int8x8_t)vceq_f32(v105, v110)), vand_s8((int8x8_t)vceq_f32(v104, v111), (int8x8_t)vceq_f32(v105, v108))), 0), *(int8x8_t *)v77.f32).u32[0] == -1)break; {
              if ((veor_s8((int8x8_t)vcgt_f32(v108, v105), (int8x8_t)vcgt_f32(v110, v105)).u8[0] & 1) != 0
              }
                && (float32x2_t v113 = vsub_f32(v110, v108),
                    float32x2_t v114 = vmul_f32(vsub_f32(v105, v108), vsub_f32(v112, v111)),
                    int8x8_t v115 = (int8x8_t)vmul_n_f32(v113, v98.f32[0]),
                    int8x8_t v116 = (int8x8_t)vadd_f32(v114, vmul_f32(vadd_f32(v111, (float32x2_t)0x3400000034000000), v113)),
                    int8x8_t v117 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v113), 0),
                    (vcge_f32((float32x2_t)vbsl_s8(v117, v116, v115), (float32x2_t)vbsl_s8(v117, v115, v116)).u8[0] & 1) != 0))
              {
                if ((result & 1) == 0) {
                  goto LABEL_29;
                }
                uint64_t result = 0;
                ++v103;
                if (v100 - 1 == v106) {
                  break;
                }
              }
              else
              {
                ++v103;
                if (v100 == v106 + 1)
                {
                  if (result) {
                    goto LABEL_29;
                  }
                  break;
                }
              }
            }
            ++v75;
            float32x4_t v118 = v245;
            v118.i32[3] = HIDWORD(*(void *)(v76 + 8 * v82));
            *(float32x4_t *)(v81 + 48 * *a9) = v88;
            float32x4_t v119 = v48[v82];
            float32x4_t v120 = vmulq_f32(v61, v119);
            v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
            float32x4_t v121 = vmulq_f32(v60, v119);
            v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
            float32x4_t v122 = vmulq_f32(v59, v119);
            v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
            *(int8x8_t *)v120.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32), 4uLL);
            v120.i64[1] = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32).u32[0];
            *(float32x4_t *)(v81 + 48 * *a9 + 16) = v120;
            unsigned int v123 = (*a9)++;
            *(float32x4_t *)(v81 + 48 * v123 + 32) = v118;
          }
        }
        else
        {
          v51[v82] = 0;
        }
LABEL_29:
        float32x4_t v84 = vminq_f32(v84, v99);
        float32x4_t v85 = vmaxq_f32(v85, v99);
        ++v82;
        unint64_t v78 = a4[1].u8[2];
        unint64_t v79 = *a9;
      }
      while (v82 < v78 && v79 < 0x40);
      float32x4_t v64 = vaddq_f32(v84, (float32x4_t)xmmword_234423280);
      float32x4_t v63 = vaddq_f32(v85, (float32x4_t)xmmword_234423290);
    }
  }
  else
  {
    uint64_t v81 = v244;
  }
  if (v75 != v78)
  {
    float32x2_t v124 = (float32x2_t)vdup_laneq_s32((int32x4_t)v77, 2);
    float32x4_t v125 = *a4;
    v125.i64[1] = a4->u32[2];
    uint64_t v126 = *(float32x4_t **)(v57 + 48);
    float32x4_t v127 = vmulq_f32(*v126, v125);
    v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
    float32x4_t v128 = vmulq_f32(v125, v126[1]);
    v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
    float32x4_t v129 = vmulq_f32(v125, v126[2]);
    v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
    *(int8x8_t *)v130.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32), 4uLL);
    v130.i64[1] = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32).u32[0];
    float32x4_t v131 = vmulq_f32(v130, v130);
    v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
    float32x2_t v132 = vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32);
    float32x2_t v133 = vrsqrte_f32(v132);
    int v134 = 4;
    do
    {
      float32x2_t v133 = vmul_f32(v133, vrsqrts_f32(vmul_f32(v133, v133), v132));
      --v134;
    }
    while (v134);
    float32x2_t v135 = vmul_f32(v132, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v132), 0), _D8, (int8x8_t)v133));
    float32x2_t v136 = vrecpe_f32(v135);
    int v137 = 4;
    do
    {
      float32x2_t v136 = vmul_f32(v136, vrecps_f32(v135, v136));
      --v137;
    }
    while (v137);
    int v138 = 0;
    float32x4_t v139 = v245;
    unsigned int v140 = a3[1].u8[2];
    if (a3[1].i8[2] && v79 <= 0x3F)
    {
      unint64_t v141 = 0;
      int v138 = 0;
      float32x4_t v142 = vmulq_n_f32(v130, v136.f32[0]);
      v142.i32[3] = 0;
      float32x4_t v143 = vmulq_n_f32(*a7, v245.f32[0]);
      v143.i32[3] = 0;
      float32x4_t v144 = vmulq_lane_f32(a7[1], *(float32x2_t *)v245.f32, 1);
      v144.i32[3] = 0;
      float32x4_t v145 = vmulq_laneq_f32(a7[2], v245, 2);
      v145.i32[3] = 0;
      float32x4_t v146 = vaddq_f32(vaddq_f32(v143, v144), v145);
      int8x16_t v147 = (int8x16_t)vmulq_f32(v142, v146);
      v148.i64[0] = -1;
      v148.i64[1] = -1;
      *(float32x2_t *)v147.i8 = vpadd_f32(*(float32x2_t *)v147.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
      float32x2_t v149 = vpadd_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)v147.i8);
      float32x2_t v150 = vrecpe_f32(v149);
      do
      {
        uint64_t v151 = a4[1].u8[2];
        float32x4_t v152 = v43[v141];
        int32x2_t v153 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v64, v152), (int8x16_t)vcgtq_f32(v152, v63)).u64[0];
        if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v153, 0), (int8x16_t)vdupq_lane_s32(v153, 1)), v148)), *(int8x8_t *)v77.f32).u32[0] != -1&& v151 != 0)
        {
          uint64_t v155 = 0;
          float32x2_t v156 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v152.f32, 0);
          float32x2_t v157 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v152.f32, 1);
          LODWORD(result) = v151 - 1;
          char v158 = 1;
          while (1)
          {
            float32x4_t v159 = v48[result];
            uint64_t result = v155;
            float32x2_t v160 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v159.f32, 1);
            float32x4_t v161 = v48[v155];
            float32x2_t v162 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v161.f32, 1);
            float32x2_t v163 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v159.f32, 0);
            float32x2_t v164 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v161.f32, 0);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v156, v164), (int8x8_t)vceq_f32(v157, v162)), vand_s8((int8x8_t)vceq_f32(v156, v163), (int8x8_t)vceq_f32(v157, v160))), 0), *(int8x8_t *)v77.f32).u32[0] == -1)break; {
            if ((veor_s8((int8x8_t)vcgt_f32(v160, v157), (int8x8_t)vcgt_f32(v162, v157)).u8[0] & 1) != 0
            }
              && (float32x2_t v165 = vsub_f32(v162, v160),
                  float32x2_t v166 = vmul_f32(vsub_f32(v157, v160), vsub_f32(v164, v163)),
                  int8x8_t v167 = (int8x8_t)vmul_n_f32(v165, v152.f32[0]),
                  int8x8_t v168 = (int8x8_t)vadd_f32(v166, vmul_f32(vadd_f32(v163, (float32x2_t)0x3400000034000000), v165)),
                  int8x8_t v169 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v165), 0),
                  (vcge_f32((float32x2_t)vbsl_s8(v169, v168, v167), (float32x2_t)vbsl_s8(v169, v167, v168)).u8[0] & 1) != 0))
            {
              if ((v158 & 1) == 0) {
                goto LABEL_46;
              }
              char v158 = 0;
              ++v155;
              if (v151 - 1 == result) {
                break;
              }
            }
            else
            {
              ++v155;
              if (v151 == result + 1)
              {
                if (v158) {
                  goto LABEL_46;
                }
                break;
              }
            }
          }
          float32x4_t v170 = vmulq_f32(v61, v152);
          v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
          float32x4_t v171 = vmulq_f32(v60, v152);
          v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
          float32x4_t v172 = vmulq_f32(v59, v152);
          v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
          unsigned __int32 v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32).u32[0];
          *(int8x8_t *)v174.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32), 4uLL);
          v174.i64[1] = v173;
          float32x4_t v175 = vmulq_n_f32(*a7, v174.f32[0]);
          v175.i32[3] = 0;
          float32x4_t v176 = vmulq_lane_f32(a7[1], *(float32x2_t *)v174.f32, 1);
          v176.i32[3] = 0;
          float32x4_t v177 = vmulq_laneq_f32(a7[2], v174, 2);
          v177.i32[3] = 0;
          float32x4_t v178 = vaddq_f32(a7[3], vaddq_f32(v177, vaddq_f32(v175, v176)));
          int8x16_t v179 = (int8x16_t)vmulq_f32(v142, vsubq_f32(v62, v178));
          float32x2_t v180 = (float32x2_t)vextq_s8(v179, v179, 8uLL).u64[0];
          int v181 = 4;
          float32x2_t v182 = v150;
          do
          {
            float32x2_t v182 = vmul_f32(v182, vrecps_f32(v149, v182));
            --v181;
          }
          while (v181);
          float32x2_t v183 = vpadd_f32(*(float32x2_t *)v179.i8, v180);
          float32x2_t v184 = vmul_f32(v182, vpadd_f32(v183, v183));
          if (v184.f32[0] <= COERCE_FLOAT(*v80))
          {
            ++v138;
            int8x16_t v185 = (int8x16_t)vmlaq_n_f32(v178, v146, v184.f32[0]);
            v185.i64[1] = vextq_s8(v185, v185, 8uLL).u32[0];
            float32x4_t v186 = v139;
            v186.i32[3] = v184.i32[1];
            *(int8x16_t *)(v81 + 48 * v79) = v185;
            *(float32x4_t *)(v81 + 48 * *a9 + 16) = v174;
            unsigned int v187 = (*a9)++;
            *(float32x4_t *)(v81 + 48 * v187 + 32) = v186;
            unsigned int v140 = a3[1].u8[2];
            unint64_t v79 = *a9;
          }
        }
LABEL_46:
        ++v141;
      }
      while (v141 < v140 && v79 < 0x40);
    }
    if (v138 != v140)
    {
      unsigned int v188 = a4[1].u8[2];
      if (a4[1].i8[2])
      {
        uint64_t v189 = 0;
        LODWORD(v190) = v188 - 1;
        v191.i64[0] = -1;
        v191.i64[1] = -1;
        do
        {
          uint64_t v192 = v190;
          uint64_t v190 = v189;
          if ((v51[v189] || v51[v192]) && v140 && v79 <= 0x3F)
          {
            uint64_t v193 = 0;
            float32x4_t v194 = v48[v190];
            float32x4_t v195 = v48[v192];
            float32x4_t v196 = v194;
            v196.i32[2] = vadd_f32(v124, *(float32x2_t *)(v76 + 8 * v190)).u32[0];
            float32x4_t v197 = vminq_f32(v194, v195);
            float32x4_t v198 = vmaxq_f32(v194, v195);
            LODWORD(v199) = v140 - 1;
            float32x4_t v200 = v195;
            v200.i32[2] = vadd_f32(v124, *(float32x2_t *)(v76 + 8 * v192)).u32[0];
            float32x4_t v201 = vnegq_f32(vsubq_f32(v200, v196));
            do
            {
              float32x4_t v202 = v43[v199];
              uint64_t v199 = v193;
              float32x4_t v203 = v43[v193];
              int32x2_t v204 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v197, vmaxq_f32(v203, v202)), (int8x16_t)vcgtq_f32(vminq_f32(v203, v202), v198)).u64[0];
              if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v204, 0), (int8x16_t)vdupq_lane_s32(v204, 1)), v191)), *(int8x8_t *)v77.f32).u32[0] != -1)
              {
                int32x2_t v205 = (int32x2_t)vsub_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v194.f32);
                float32x2_t v206 = vsub_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v194.f32);
                float32x2_t v207 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v205, 0), v206, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v205, 1), v206.f32[0]));
                int32x2_t v208 = (int32x2_t)vsub_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v195.f32);
                float32x2_t v209 = vsub_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v195.f32);
                float32x2_t v210 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v208, 0), v209, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v208, 1), v209.f32[0]));
                if (vmul_f32(v207, v210).f32[0] < 0.0)
                {
                  float32x2_t v211 = vsub_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v203.f32);
                  float32x2_t v212 = vsub_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v203.f32);
                  float32x2_t v213 = vsub_f32(vmul_lane_f32(v211, v212, 1), vmul_lane_f32(v212, v211, 1));
                  float32x2_t v214 = vsub_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v202.f32);
                  float32x2_t v215 = vsub_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v202.f32);
                  if (vmul_f32(v213, vsub_f32(vmul_lane_f32(v214, v215, 1), vmul_lane_f32(v215, v214, 1))).f32[0] < 0.0)
                  {
                    float32x2_t v216 = vsub_f32(v210, v207);
                    float32x2_t v217 = vrecpe_f32(v216);
                    int v218 = 4;
                    do
                    {
                      float32x2_t v217 = vmul_f32(v217, vrecps_f32(v216, v217));
                      --v218;
                    }
                    while (v218);
                    float32x4_t v219 = vmlaq_n_f32(v196, v201, vmul_f32(v207, v217).f32[0]);
                    int32x4_t v220 = (int32x4_t)vsubq_f32(v219, v77);
                    if (*(float *)&v220.i32[2] <= COERCE_FLOAT(*v80))
                    {
                      v219.i64[1] = vextq_s8((int8x16_t)v219, (int8x16_t)v219, 8uLL).u32[0];
                      float32x4_t v221 = v219;
                      v221.i32[2] = v77.i32[2];
                      float32x4_t v222 = vmulq_f32(v61, v219);
                      v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
                      float32x4_t v223 = vmulq_f32(v60, v219);
                      v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
                      *(int8x8_t *)v222.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32), 4uLL);
                      float32x4_t v224 = vmulq_f32(v59, v219);
                      v224.i64[0] = vpaddq_f32(v224, v224).u64[0];
                      v222.i64[1] = vpadd_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v224.f32).u32[0];
                      float32x4_t v225 = vmulq_n_f32(*a7, v222.f32[0]);
                      v225.i32[3] = 0;
                      float32x4_t v226 = vmulq_lane_f32(a7[1], *(float32x2_t *)v222.f32, 1);
                      v226.i32[3] = 0;
                      float32x4_t v227 = vmulq_laneq_f32(a7[2], v222, 2);
                      v227.i32[3] = 0;
                      float32x4_t v228 = vaddq_f32(a7[3], vaddq_f32(v227, vaddq_f32(v225, v226)));
                      float32x4_t v229 = vmulq_f32(v61, v221);
                      v229.i64[0] = vpaddq_f32(v229, v229).u64[0];
                      float32x4_t v230 = vmulq_f32(v60, v221);
                      v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
                      *(int8x8_t *)v229.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v230.f32, *(float32x2_t *)v230.f32), 4uLL);
                      float32x4_t v231 = vmulq_f32(v59, v221);
                      v231.i64[0] = vpaddq_f32(v231, v231).u64[0];
                      v229.i64[1] = vpadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32).u32[0];
                      float32x4_t v232 = v139;
                      v232.i32[3] = vdupq_laneq_s32(v220, 2).i32[3];
                      *(float32x4_t *)(v81 + 48 * v79) = v228;
                      *(float32x4_t *)(v81 + 48 * *a9 + 16) = v229;
                      unsigned int v233 = (*a9)++;
                      *(float32x4_t *)(v81 + 48 * v233 + 32) = v232;
                      unsigned int v140 = a3[1].u8[2];
                      unint64_t v79 = *a9;
                    }
                  }
                }
              }
              uint64_t v193 = v199 + 1;
            }
            while (v199 + 1 < (unint64_t)v140 && v79 < 0x40);
            unsigned int v188 = a4[1].u8[2];
          }
          uint64_t v189 = v190 + 1;
        }
        while (v190 + 1 < (unint64_t)v188);
      }
    }
  }
  return result;
}

BOOL physx::Gu::generateFullContactManifold(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, _DWORD *a6, float32x2_t *a7, float32x4_t *a8, float a9, float a10, float a11, float32x4_t *a12, float32x2_t *a13, char a14)
{
  uint64_t v455 = *MEMORY[0x263EF8340];
  unsigned __int32 v21 = (float32x4_t *)a3[4];
  float32x4_t v22 = (float32x4_t *)a4[4];
  float32x4_t v23 = *v21;
  float32x4_t v24 = v21[1];
  float32x4_t v25 = vnegq_f32(*v21);
  float32x4_t v26 = v25;
  v26.i32[3] = 0;
  float32x4_t v27 = *v22;
  float32x4_t v28 = v22[1];
  float32x4_t v29 = vsubq_f32(v28, v24);
  float32x2_t v30 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)v21, 3).u64[0];
  float32x4_t v31 = vmulq_n_f32(v29, vmla_f32((float32x2_t)0xBF000000BF000000, v30, v30).f32[0]);
  v31.i32[3] = 0;
  float32x2_t v32 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  float32x2_t v33 = (float32x2_t)vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)v32, 4uLL);
  int8x8_t v34 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL)), v33, *(float32x2_t *)v29.f32);
  *(int8x8_t *)v35.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32(v32, *(float32x2_t *)v29.f32), *(float32x2_t *)v25.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)), 4uLL);
  v35.i64[1] = v34.u32[0];
  float32x4_t v36 = vmlaq_laneq_f32(v31, v35, *v21, 3);
  v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
  float32x4_t v37 = vmulq_f32(v26, v29);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  float32x4_t v38 = vmlaq_n_f32(v36, v26, vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32).f32[0]);
  float32x4_t v39 = vaddq_f32(v38, v38);
  v39.i32[3] = 0;
  float32x4_t v40 = *v22;
  v40.i32[3] = 0;
  *(float32x2_t *)v37.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL));
  float32x4_t v41 = vmulq_f32(v26, v40);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  int32x2_t v42 = (int32x2_t)vsub_f32(*(float32x2_t *)v37.f32, vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32));
  v41.i64[0] = vdupq_laneq_s32(*(int32x4_t *)v22, 3).u64[0];
  float32x4_t v43 = vmulq_laneq_f32(v40, *v21, 3);
  v40.i64[0] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
  int8x8_t v44 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)vext_s8(*(int8x8_t *)v22->f32, *(int8x8_t *)v40.f32, 4uLL)), v33, *(float32x2_t *)v22->f32);
  *(int8x8_t *)v25.f32 = vext_s8(v44, (int8x8_t)vmls_f32(vmul_f32(v32, *(float32x2_t *)v22->f32), *(float32x2_t *)v25.f32, *(float32x2_t *)v40.f32), 4uLL);
  *(int8x8_t *)&v25.u32[2] = v44;
  float32x4_t v45 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, *v22, 3), v43), v25);
  *(int32x2_t *)v26.f32 = vdup_lane_s32(*(int32x2_t *)v45.f32, 1);
  float32x2_t v46 = (float32x2_t)vdup_laneq_s32((int32x4_t)v45, 2);
  *(int32x2_t *)v40.f32 = vdup_lane_s32(v42, 1);
  v453[3] = v39;
  float32x4_t v47 = vaddq_f32(v45, v45);
  float32x2_t v48 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v47.f32), 0);
  float32x2_t v49 = vmul_lane_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v47.f32, 1);
  *(float32x2_t *)v43.f32 = vmul_laneq_f32(v46, v47, 2);
  *(float32x2_t *)v26.f32 = vmul_n_f32(*(float32x2_t *)v26.f32, v47.f32[0]);
  float32x2_t v50 = vmul_n_f32(v46, v47.f32[0]);
  float32x2_t v51 = vmul_n_f32(*(float32x2_t *)v40.f32, v47.f32[0]);
  float32x2_t v52 = vmul_lane_f32(v46, *(float32x2_t *)v47.f32, 1);
  float32x2_t v53 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v47.f32, 1);
  *(float32x2_t *)v47.f32 = vmul_laneq_f32(*(float32x2_t *)v40.f32, v47, 2);
  __asm { FMOV            V3.2S, #1.0 }
  *(float32x2_t *)v40.f32 = vsub_f32(_D3, v48);
  *(int8x8_t *)v59.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, v49), *(float32x2_t *)v43.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v47.f32), 4uLL);
  v59.i64[1] = vsub_f32(v50, v53).u32[0];
  *(int8x8_t *)v26.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v47.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v43.f32), 4uLL);
  v26.i64[1] = vadd_f32(v52, v51).u32[0];
  float32x4_t v442 = v26;
  float32x4_t v443 = v59;
  v453[0] = v59;
  v453[1] = v26;
  *(int8x8_t *)v26.f32 = vext_s8((int8x8_t)vadd_f32(v50, v53), (int8x8_t)vsub_f32(v52, v51), 4uLL);
  v26.i64[1] = vsub_f32(*(float32x2_t *)v40.f32, v49).u32[0];
  float32x4_t v441 = v26;
  v453[2] = v26;
  float32x4_t v60 = vnegq_f32(v27);
  float32x4_t v61 = vsubq_f32(v24, v28);
  float32x4_t v62 = v60;
  v62.i32[3] = 0;
  float32x4_t v63 = vmulq_n_f32(v61, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0]);
  v63.i32[3] = 0;
  float32x2_t v64 = (float32x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
  *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)v64, 4uLL);
  int8x8_t v65 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL), *(float32x2_t *)v60.f32), *(float32x2_t *)v40.f32, *(float32x2_t *)v61.f32);
  *(int8x8_t *)v41.f32 = vext_s8(v65, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v61.f32, v64), *(float32x2_t *)v60.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)), 4uLL);
  v41.i64[1] = v65.u32[0];
  float32x4_t v66 = vmlaq_laneq_f32(v63, v41, v27, 3);
  v66.i64[1] = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u32[0];
  float32x4_t v67 = vmulq_f32(v61, v62);
  v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
  float32x4_t v68 = vmlaq_n_f32(v66, v62, vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32).f32[0]);
  float32x4_t v69 = vaddq_f32(v68, v68);
  v69.i32[3] = 0;
  float32x4_t v70 = v23;
  v70.i32[3] = 0;
  float32x4_t v71 = vmulq_f32(v70, v62);
  v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
  float32x4_t v72 = vmulq_laneq_f32(v62, v23, 3);
  float32x4_t v73 = vmulq_laneq_f32(v70, v27, 3);
  v70.i64[0] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u64[0];
  int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v23.f32, *(int8x8_t *)v70.f32, 4uLL), *(float32x2_t *)v60.f32), *(float32x2_t *)v40.f32, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v23.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, v64), *(float32x2_t *)v60.f32, *(float32x2_t *)v70.f32), 4uLL);
  *(int8x8_t *)&v23.u32[2] = v74;
  float32x4_t v75 = vaddq_f32(vaddq_f32(v72, v73), v23);
  *(int32x2_t *)v73.f32 = vdup_lane_s32(*(int32x2_t *)v75.f32, 1);
  *(int32x2_t *)v70.f32 = vdup_laneq_s32((int32x4_t)v75, 2);
  float32x4_t v76 = vaddq_f32(v75, v75);
  float32x2_t v77 = (float32x2_t)vdup_laneq_s32((int32x4_t)v76, 2);
  *(float32x2_t *)v37.f32 = vsub_f32(*(float32x2_t *)v37.f32, vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32));
  *(int32x2_t *)v75.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v76.f32), 0);
  *(float32x2_t *)v71.f32 = vmul_lane_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v76.f32, 1);
  *(float32x2_t *)v40.f32 = vmul_laneq_f32(*(float32x2_t *)v70.f32, v76, 2);
  *(float32x2_t *)v73.f32 = vmul_n_f32(*(float32x2_t *)v73.f32, v76.f32[0]);
  float32x2_t v78 = vmul_n_f32(*(float32x2_t *)v70.f32, v76.f32[0]);
  *(float32x2_t *)v60.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 0), *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v70.f32 = vmul_lane_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v76.f32, 1);
  *(float32x2_t *)v76.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.f32, 1), *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v37.f32 = vmul_lane_f32(v77, *(float32x2_t *)v37.f32, 1);
  *(float32x2_t *)v75.f32 = vsub_f32(_D3, *(float32x2_t *)v75.f32);
  *(int8x8_t *)v79.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, *(float32x2_t *)v71.f32), *(float32x2_t *)v40.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v37.f32), 4uLL);
  v79.i64[1] = vsub_f32(v78, *(float32x2_t *)v76.f32).u32[0];
  *(int8x8_t *)v80.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v40.f32), 4uLL);
  v80.i64[1] = vadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v60.f32).u32[0];
  v452[0] = v79;
  v452[1] = v80;
  *(int8x8_t *)v81.f32 = vext_s8((int8x8_t)vadd_f32(v78, *(float32x2_t *)v76.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v60.f32), 4uLL);
  v81.i64[1] = vsub_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v71.f32).u32[0];
  v452[2] = v81;
  v452[3] = v69;
  float32x4_t v446 = v80;
  float32x4_t v447 = v79;
  float32x4_t v445 = v81;
  if (a14)
  {
    int v451 = 0;
    int32x2_t v450 = vdup_n_s32(0x7F7FFFFFu);
    v454[0] = 0uLL;
    unsigned int v449 = 0;
    if (physx::Gu::testFaceNormal(a1, a2, (uint64_t)a3, (uint64_t)a4, v452, v453, a7, &v450, &v449, (int8x16_t *)v454, 0, &v451))
    {
      unsigned int v448 = 0;
      int v82 = physx::Gu::testFaceNormal(a2, a1, (uint64_t)a4, (uint64_t)a3, v453, v452, a7, &v450, &v448, (int8x16_t *)v454, 1, &v451);
      BOOL result = 0;
      float32x4_t v84 = v447;
      if (v82)
      {
        char v85 = 0;
        unsigned int v439 = v448;
        unsigned int v438 = v449;
        while ((v85 & 1) == 0)
        {
          if (v451 == 1)
          {
            float32x4_t v199 = vmulq_n_f32(v443, v454[0].f32[0]);
            v199.i32[3] = 0;
            float32x4_t v200 = vmulq_lane_f32(v442, *(float32x2_t *)v454[0].f32, 1);
            v200.i32[3] = 0;
            float32x4_t v201 = vmulq_laneq_f32(v441, v454[0], 2);
            v201.i32[3] = 0;
            float32x4_t v202 = *(_OWORD **)(a1 + 24);
            float32x4_t v203 = vaddq_f32(v201, vaddq_f32(v199, v200));
            int32x2_t v204 = (float32x4_t *)a3[5];
            float32x4_t v205 = vmulq_f32(*v204, v203);
            v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
            float32x4_t v206 = vmulq_f32(v204[1], v203);
            v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
            float32x4_t v207 = vmulq_f32(v203, v204[2]);
            v207.i64[0] = vpaddq_f32(v207, v207).u64[0];
            unsigned __int32 v208 = vpadd_f32(*(float32x2_t *)v207.f32, *(float32x2_t *)v207.f32).u32[0];
            *(int8x8_t *)v209.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32), 4uLL);
            v209.i64[1] = v208;
            float32x4_t v210 = *(float32x4_t *)v202;
            v210.i32[3] = 0;
            float32x4_t v211 = vmulq_f32(v210, v209);
            v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
            float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
            uint64_t v213 = *(unsigned int *)(a1 + 16);
            if (v213 < 2)
            {
              unsigned int v214 = 0;
            }
            else
            {
              unsigned int v214 = 0;
              float32x2_t v215 = (_OWORD *)((char *)v202 + 20);
              for (uint64_t i = 1; i != v213; ++i)
              {
                float32x4_t v217 = *(float32x4_t *)v215;
                float32x2_t v215 = (_OWORD *)((char *)v215 + 20);
                float32x4_t v218 = v217;
                v218.i32[3] = 0;
                float32x4_t v219 = vmulq_f32(v218, v209);
                v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
                float32x2_t v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
                if (vcgt_f32(v212, v220).u8[0])
                {
                  unsigned int v214 = i;
                  unsigned int v221 = -1;
                }
                else
                {
                  unsigned int v221 = 0;
                }
                float32x2_t v212 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v221), (int8x8_t)v220, (int8x8_t)v212);
              }
            }
            uint64_t v251 = *(unsigned int *)(a1 + 20);
            if (v251)
            {
              uint64_t v252 = 0;
              float32x4_t v253 = vnegq_f32(v209);
              v253.i32[3] = 0;
              uint64_t v254 = *(void *)(a1 + 48);
              float32x2_t v255 = vmul_f32(v212, v212);
              int v256 = -1;
              do
              {
                int8x8_t v257 = (unsigned __int8 *)(v254 + (2 * v252));
                float32x4_t v258 = *(float32x4_t *)((char *)v202 + 20 * *v257);
                v258.i32[3] = 0;
                float32x4_t v259 = *(float32x4_t *)((char *)v202 + 20 * v257[1]);
                v259.i32[3] = 0;
                float32x4_t v260 = vaddq_f32(v258, v259);
                float32x4_t v261 = vmulq_f32(v260, v260);
                v261.i64[0] = vpaddq_f32(v261, v261).u64[0];
                float32x2_t v262 = vpadd_f32(*(float32x2_t *)v261.f32, *(float32x2_t *)v261.f32);
                float32x4_t v263 = vmulq_f32(v253, v260);
                v263.i64[0] = vpaddq_f32(v263, v263).u64[0];
                float32x2_t v264 = vpadd_f32(*(float32x2_t *)v263.f32, *(float32x2_t *)v263.f32);
                float32x2_t v265 = vmul_f32(v264, v264);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v265, vmul_f32(v255, v262)), (int8x8_t)vcgez_f32(v264)), 0), *(int8x8_t *)v253.f32).u32[0] == -1)
                {
                  float32x2_t v266 = vrecpe_f32(v262);
                  int v267 = 4;
                  do
                  {
                    float32x2_t v266 = vmul_f32(v266, vrecps_f32(v262, v266));
                    --v267;
                  }
                  while (v267);
                  float32x2_t v255 = vmul_f32(v265, v266);
                  int v256 = v252;
                }
                ++v252;
              }
              while (v252 != v251);
              if (v256 != -1)
              {
                int v268 = (unsigned __int8 *)(v254 + (2 * v256));
                unsigned int v269 = *v268;
                float32x4_t v270 = *(float32x4_t *)((char *)v202 + 20 * *v268);
                unsigned int v214 = v268[1];
                v270.i32[3] = 0;
                float32x4_t v271 = *(float32x4_t *)((char *)v202 + 20 * v214);
                v271.i32[3] = 0;
                float32x4_t v272 = vmulq_f32(v253, v270);
                v272.i64[0] = vpaddq_f32(v272, v272).u64[0];
                float32x4_t v273 = vmulq_f32(v253, v271);
                v273.i64[0] = vpaddq_f32(v273, v273).u64[0];
                if (vcgt_f32(vpadd_f32(*(float32x2_t *)v272.f32, *(float32x2_t *)v272.f32), vpadd_f32(*(float32x2_t *)v273.f32, *(float32x2_t *)v273.f32)).u8[0])unsigned int v214 = v269; {
              }
                }
            }
            float32x4_t v198 = (float32x4_t *)(*(void *)(a2 + 24) + 20 * v439);
            float32x4_t v197 = (float32x4_t *)((char *)v202 + 20 * (int)v214);
            goto LABEL_89;
          }
          if (v451) {
            goto LABEL_18;
          }
          float32x4_t v86 = vmulq_n_f32(v84, v454[0].f32[0]);
          v86.i32[3] = 0;
          float32x4_t v87 = vmulq_lane_f32(v446, *(float32x2_t *)v454[0].f32, 1);
          v87.i32[3] = 0;
          float32x4_t v88 = vmulq_laneq_f32(v445, v454[0], 2);
          v88.i32[3] = 0;
          float32x4_t v89 = vaddq_f32(v88, vaddq_f32(v86, v87));
          float32x4_t v90 = *(_OWORD **)(a2 + 24);
          float32x4_t v91 = (float32x4_t *)a4[5];
          float32x4_t v92 = vmulq_f32(*v91, v89);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          float32x4_t v93 = vmulq_f32(v89, v91[1]);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          float32x4_t v94 = vmulq_f32(v89, v91[2]);
          v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
          *(int8x8_t *)v95.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32), 4uLL);
          v95.i64[1] = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32).u32[0];
          float32x4_t v96 = *(float32x4_t *)v90;
          v96.i32[3] = 0;
          float32x4_t v97 = vmulq_f32(v96, v95);
          v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
          float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
          uint64_t v99 = *(unsigned int *)(a2 + 16);
          if (v99 < 2)
          {
            unsigned int v100 = 0;
          }
          else
          {
            unsigned int v100 = 0;
            int32x2_t v101 = (_OWORD *)((char *)v90 + 20);
            for (uint64_t j = 1; j != v99; ++j)
            {
              float32x4_t v103 = *(float32x4_t *)v101;
              int32x2_t v101 = (_OWORD *)((char *)v101 + 20);
              float32x4_t v104 = v103;
              v104.i32[3] = 0;
              float32x4_t v105 = vmulq_f32(v104, v95);
              v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
              float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
              if (vcgt_f32(v98, v106).u8[0])
              {
                unsigned int v100 = j;
                unsigned int v107 = -1;
              }
              else
              {
                unsigned int v107 = 0;
              }
              float32x2_t v98 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v107), (int8x8_t)v106, (int8x8_t)v98);
            }
          }
          uint64_t v222 = *(unsigned int *)(a2 + 20);
          float32x4_t v440 = v89;
          if (v222)
          {
            uint64_t v223 = 0;
            float32x4_t v224 = vnegq_f32(v95);
            v224.i32[3] = 0;
            uint64_t v225 = *(void *)(a2 + 48);
            float32x2_t v226 = vmul_f32(v98, v98);
            int v227 = -1;
            do
            {
              float32x4_t v228 = (unsigned __int8 *)(v225 + (2 * v223));
              float32x4_t v229 = *(float32x4_t *)((char *)v90 + 20 * *v228);
              v229.i32[3] = 0;
              float32x4_t v230 = *(float32x4_t *)((char *)v90 + 20 * v228[1]);
              v230.i32[3] = 0;
              float32x4_t v231 = vaddq_f32(v229, v230);
              float32x4_t v232 = vmulq_f32(v231, v231);
              v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
              float32x2_t v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
              float32x4_t v234 = vmulq_f32(v224, v231);
              v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
              float32x2_t v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
              float32x2_t v236 = vmul_f32(v235, v235);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v236, vmul_f32(v226, v233)), (int8x8_t)vcgez_f32(v235)), 0), *(int8x8_t *)v224.f32).u32[0] == -1)
              {
                float32x2_t v237 = vrecpe_f32(v233);
                int v238 = 4;
                do
                {
                  float32x2_t v237 = vmul_f32(v237, vrecps_f32(v233, v237));
                  --v238;
                }
                while (v238);
                float32x2_t v226 = vmul_f32(v236, v237);
                int v227 = v223;
              }
              ++v223;
            }
            while (v223 != v222);
            if (v227 != -1)
            {
              float32x4_t v239 = (unsigned __int8 *)(v225 + (2 * v227));
              unsigned int v240 = *v239;
              float32x4_t v241 = *(float32x4_t *)((char *)v90 + 20 * *v239);
              unsigned int v100 = v239[1];
              v241.i32[3] = 0;
              float32x4_t v242 = *(float32x4_t *)((char *)v90 + 20 * v100);
              v242.i32[3] = 0;
              float32x4_t v243 = vmulq_f32(v224, v241);
              v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
              float32x4_t v244 = vmulq_f32(v224, v242);
              v244.i64[0] = vpaddq_f32(v244, v244).u64[0];
              if (vcgt_f32(vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32), vpadd_f32(*(float32x2_t *)v244.f32, *(float32x2_t *)v244.f32)).u8[0])unsigned int v100 = v240; {
            }
              }
          }
          physx::Gu::generatedContacts(a1, a2, (float32x4_t *)(*(void *)(a1 + 24) + 20 * v438), (float32x4_t *)((char *)v90 + 20 * (int)v100), a3, (uint64_t)a4, v452, a5, a6, a7);
          if (*a6)
          {
            unint64_t v245 = 0;
            float32x4_t v246 = vnegq_f32(v440);
            uint64_t v247 = a5 + 32;
            float32x4_t v84 = v447;
            do
            {
              long long v248 = *(_OWORD *)(v247 - 32);
              float32x4_t v249 = v246;
              v249.i32[3] = *(_DWORD *)(v247 + 12);
              *(_OWORD *)(v247 - 32) = *(_OWORD *)(v247 - 16);
              *(_OWORD *)(v247 - 16) = v248;
              *(float32x4_t *)uint64_t v247 = v249;
              v247 += 48;
              ++v245;
              unint64_t v250 = *a6;
            }
            while (v245 < v250);
            goto LABEL_91;
          }
          LODWORD(v250) = 0;
LABEL_90:
          float32x4_t v84 = v447;
LABEL_91:
          char v274 = v85 | (v250 != 0);
          char v85 = 1;
          if (v274) {
            return 1;
          }
        }
        BOOL result = physx::Gu::testEdgeNormal(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)v452, (uint64_t)v453, (uint64_t)a7, (uint64_t)&v450, v454, &v451);
        if (!result) {
          return result;
        }
        float32x4_t v84 = v447;
        if (v451 != 2) {
          return result;
        }
LABEL_18:
        float32x2_t v108 = *(_OWORD **)(a1 + 24);
        float32x4_t v109 = vnegq_f32(v454[0]);
        v109.i32[3] = 0;
        float32x2_t v110 = (float32x4_t *)a3[5];
        float32x4_t v111 = vmulq_f32(v109, *v110);
        v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
        float32x4_t v112 = vmulq_f32(v109, v110[1]);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        float32x4_t v113 = vmulq_f32(v109, v110[2]);
        v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
        unsigned __int32 v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32).u32[0];
        *(int8x8_t *)v115.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32), 4uLL);
        v115.i64[1] = v114;
        float32x4_t v116 = *(float32x4_t *)v108;
        v116.i32[3] = 0;
        float32x4_t v117 = vmulq_f32(v116, v115);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        float32x2_t v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        uint64_t v119 = *(unsigned int *)(a1 + 16);
        if (v119 < 2)
        {
          unsigned int v120 = 0;
        }
        else
        {
          unsigned int v120 = 0;
          float32x4_t v121 = (_OWORD *)((char *)v108 + 20);
          for (uint64_t k = 1; k != v119; ++k)
          {
            float32x4_t v123 = *(float32x4_t *)v121;
            float32x4_t v121 = (_OWORD *)((char *)v121 + 20);
            float32x4_t v124 = v123;
            v124.i32[3] = 0;
            float32x4_t v125 = vmulq_f32(v124, v115);
            v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
            float32x2_t v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
            if (vcgt_f32(v118, v126).u8[0])
            {
              unsigned int v120 = k;
              unsigned int v127 = -1;
            }
            else
            {
              unsigned int v127 = 0;
            }
            float32x2_t v118 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v127), (int8x8_t)v126, (int8x8_t)v118);
          }
        }
        uint64_t v128 = *(unsigned int *)(a1 + 20);
        if (v128)
        {
          uint64_t v129 = 0;
          float32x4_t v130 = vnegq_f32(v115);
          v130.i32[3] = 0;
          uint64_t v131 = *(void *)(a1 + 48);
          float32x2_t v132 = vmul_f32(v118, v118);
          int v133 = -1;
          do
          {
            int v134 = (unsigned __int8 *)(v131 + (2 * v129));
            float32x4_t v135 = *(float32x4_t *)((char *)v108 + 20 * *v134);
            v135.i32[3] = 0;
            float32x4_t v136 = *(float32x4_t *)((char *)v108 + 20 * v134[1]);
            v136.i32[3] = 0;
            float32x4_t v137 = vaddq_f32(v135, v136);
            float32x4_t v138 = vmulq_f32(v137, v137);
            v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
            float32x2_t v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
            float32x4_t v140 = vmulq_f32(v130, v137);
            v140.i64[0] = vpaddq_f32(v140, v140).u64[0];
            float32x2_t v141 = vpadd_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v140.f32);
            float32x2_t v142 = vmul_f32(v141, v141);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v142, vmul_f32(v132, v139)), (int8x8_t)vcgez_f32(v141)), 0), *(int8x8_t *)v454[0].f32).u32[0] == -1)
            {
              float32x2_t v143 = vrecpe_f32(v139);
              int v144 = 4;
              do
              {
                float32x2_t v143 = vmul_f32(v143, vrecps_f32(v139, v143));
                --v144;
              }
              while (v144);
              float32x2_t v132 = vmul_f32(v142, v143);
              int v133 = v129;
            }
            ++v129;
          }
          while (v129 != v128);
          if (v133 != -1)
          {
            float32x4_t v145 = (unsigned __int8 *)(v131 + (2 * v133));
            unsigned int v146 = *v145;
            float32x4_t v147 = *(float32x4_t *)((char *)v108 + 20 * *v145);
            unsigned int v120 = v145[1];
            v147.i32[3] = 0;
            float32x4_t v148 = *(float32x4_t *)((char *)v108 + 20 * v120);
            v148.i32[3] = 0;
            float32x4_t v149 = vmulq_f32(v130, v147);
            v149.i64[0] = vpaddq_f32(v149, v149).u64[0];
            float32x4_t v150 = vmulq_f32(v130, v148);
            v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
            if (vcgt_f32(vpadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v149.f32), vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32)).u8[0])unsigned int v120 = v146; {
          }
            }
        }
        float32x4_t v151 = vmulq_n_f32(v84, v454[0].f32[0]);
        v151.i32[3] = 0;
        float32x4_t v152 = vmulq_lane_f32(v446, *(float32x2_t *)v454[0].f32, 1);
        v152.i32[3] = 0;
        float32x4_t v153 = vmulq_laneq_f32(v445, v454[0], 2);
        v153.i32[3] = 0;
        unsigned int v154 = *(_OWORD **)(a2 + 24);
        float32x4_t v155 = vaddq_f32(v153, vaddq_f32(v151, v152));
        float32x2_t v156 = (float32x4_t *)a4[5];
        float32x4_t v157 = vmulq_f32(v155, *v156);
        v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
        float32x4_t v158 = vmulq_f32(v155, v156[1]);
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        float32x4_t v159 = vmulq_f32(v155, v156[2]);
        v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
        unsigned __int32 v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32).u32[0];
        *(int8x8_t *)v161.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v158.f32, *(float32x2_t *)v158.f32), 4uLL);
        v161.i64[1] = v160;
        float32x4_t v162 = *(float32x4_t *)v154;
        v162.i32[3] = 0;
        float32x4_t v163 = vmulq_f32(v162, v161);
        v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
        float32x2_t v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32);
        uint64_t v165 = *(unsigned int *)(a2 + 16);
        if (v165 < 2)
        {
          unsigned int v166 = 0;
        }
        else
        {
          unsigned int v166 = 0;
          int8x8_t v167 = (_OWORD *)((char *)v154 + 20);
          for (uint64_t m = 1; m != v165; ++m)
          {
            float32x4_t v169 = *(float32x4_t *)v167;
            int8x8_t v167 = (_OWORD *)((char *)v167 + 20);
            float32x4_t v170 = v169;
            v170.i32[3] = 0;
            float32x4_t v171 = vmulq_f32(v170, v161);
            v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
            float32x2_t v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
            if (vcgt_f32(v164, v172).u8[0])
            {
              unsigned int v166 = m;
              unsigned int v173 = -1;
            }
            else
            {
              unsigned int v173 = 0;
            }
            float32x2_t v164 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v173), (int8x8_t)v172, (int8x8_t)v164);
          }
        }
        uint64_t v174 = *(unsigned int *)(a2 + 20);
        if (v174)
        {
          uint64_t v175 = 0;
          float32x4_t v176 = vnegq_f32(v161);
          v176.i32[3] = 0;
          uint64_t v177 = *(void *)(a2 + 48);
          float32x2_t v178 = vmul_f32(v164, v164);
          int v179 = -1;
          do
          {
            float32x2_t v180 = (unsigned __int8 *)(v177 + (2 * v175));
            float32x4_t v181 = *(float32x4_t *)((char *)v154 + 20 * *v180);
            v181.i32[3] = 0;
            float32x4_t v182 = *(float32x4_t *)((char *)v154 + 20 * v180[1]);
            v182.i32[3] = 0;
            float32x4_t v183 = vaddq_f32(v181, v182);
            float32x4_t v184 = vmulq_f32(v183, v183);
            v184.i64[0] = vpaddq_f32(v184, v184).u64[0];
            float32x2_t v185 = vpadd_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32);
            float32x4_t v186 = vmulq_f32(v176, v183);
            v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
            float32x2_t v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
            float32x2_t v188 = vmul_f32(v187, v187);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v188, vmul_f32(v178, v185)), (int8x8_t)vcgez_f32(v187)), 0), *(int8x8_t *)v176.f32).u32[0] == -1)
            {
              float32x2_t v189 = vrecpe_f32(v185);
              int v190 = 4;
              do
              {
                float32x2_t v189 = vmul_f32(v189, vrecps_f32(v185, v189));
                --v190;
              }
              while (v190);
              float32x2_t v178 = vmul_f32(v188, v189);
              int v179 = v175;
            }
            ++v175;
          }
          while (v175 != v174);
          if (v179 != -1)
          {
            int32x4_t v191 = (unsigned __int8 *)(v177 + (2 * v179));
            unsigned int v192 = *v191;
            float32x4_t v193 = *(float32x4_t *)((char *)v154 + 20 * *v191);
            unsigned int v166 = v191[1];
            v193.i32[3] = 0;
            float32x4_t v194 = *(float32x4_t *)((char *)v154 + 20 * v166);
            v194.i32[3] = 0;
            float32x4_t v195 = vmulq_f32(v176, v193);
            v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
            float32x4_t v196 = vmulq_f32(v176, v194);
            v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
            if (vcgt_f32(vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32), vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32)).u8[0])unsigned int v166 = v192; {
          }
            }
        }
        float32x4_t v197 = (float32x4_t *)((char *)v108 + 20 * (int)v120);
        float32x4_t v198 = (float32x4_t *)((char *)v154 + 20 * (int)v166);
LABEL_89:
        physx::Gu::generatedContacts(a2, a1, v198, v197, a4, (uint64_t)a3, v453, a5, a6, a7);
        LODWORD(v250) = *a6;
        goto LABEL_90;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    float v275 = a11 * 0.01;
    float v276 = a11 * 0.05;
    if ((float)(a11 * 0.01) > a9) {
      a9 = a11 * 0.01;
    }
    if (v276 >= a9) {
      float v277 = a9;
    }
    else {
      float v277 = a11 * 0.05;
    }
    if (v275 <= a10) {
      float v278 = a10;
    }
    else {
      float v278 = v275;
    }
    if (v276 >= v278) {
      float v279 = v278;
    }
    else {
      float v279 = v276;
    }
    float32x4_t v280 = vnegq_f32(*a8);
    float32x4_t v281 = vmulq_f32(*a8, v79);
    v281.i64[0] = vpaddq_f32(v281, v281).u64[0];
    int8x8_t v282 = (int8x8_t)vpadd_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32);
    float32x4_t v283 = vmulq_f32(*a8, v80);
    v283.i64[0] = vpaddq_f32(v283, v283).u64[0];
    int8x8_t v284 = (int8x8_t)vpadd_f32(*(float32x2_t *)v283.f32, *(float32x2_t *)v283.f32);
    float32x4_t v285 = vmulq_f32(*a8, v81);
    v285.i64[0] = vpaddq_f32(v285, v285).u64[0];
    unsigned __int32 v286 = vpadd_f32(*(float32x2_t *)v285.f32, *(float32x2_t *)v285.f32).u32[0];
    float32x4_t v287 = (float32x4_t *)a4[6];
    float32x4_t v289 = *v287;
    float32x4_t v288 = v287[1];
    float32x4_t v290 = v287[2];
    _Q20 = vaddq_f32(vaddq_f32(vmulq_n_f32(*v287, COERCE_FLOAT(*(_OWORD *)a13->f32)), vmulq_lane_f32(v288, *a13, 1)), vmulq_laneq_f32(v290, *(float32x4_t *)a13->f32, 2));
    uint64_t v292 = *(void *)(a2 + 24);
    _S23 = *(_DWORD *)(v292 + 8);
    __asm { FMLA            S22, S23, V20.S[2] }
    float v295 = *(float *)(v292 + 12) + _S22;
    float v296 = fabsf(v295);
    if (v295 < (float)-v279) {
      float v296 = 3.4028e38;
    }
    v454[0].f32[0] = v296;
    uint64_t v297 = *(unsigned int *)(a2 + 16);
    if (v297 < 2)
    {
      unsigned int v299 = 0;
      unsigned int v298 = 0;
    }
    else
    {
      unsigned int v298 = 0;
      unsigned int v299 = 0;
      float32x4_t v300 = (float *)(v292 + 32);
      for (uint64_t n = 1; n != v297; ++n)
      {
        float v302 = *v300
             + (float)((float)((float)(_Q20.f32[1] * *(v300 - 2)) + (float)(_Q20.f32[0] * *(v300 - 3)))
                     + (float)(_Q20.f32[2] * *(v300 - 1)));
        float v303 = fabsf(v302);
        if (v302 < (float)-v279) {
          float v303 = 3.4028e38;
        }
        v454[0].f32[n] = v303;
        if (v296 > v303)
        {
          unsigned int v299 = n;
          float v296 = v303;
        }
        if (v302 > v295)
        {
          float v295 = v302;
          unsigned int v298 = n;
        }
        v300 += 5;
      }
    }
    *(int8x8_t *)v304.f32 = vext_s8(v282, v284, 4uLL);
    v280.i32[3] = 0;
    if (v296 != 3.4028e38)
    {
      float32x4_t v305 = *(float32x4_t *)(v292 + 20 * v299);
      v305.i32[3] = 0;
      float32x4_t v306 = vmulq_f32(v289, v305);
      v306.i64[0] = vpaddq_f32(v306, v306).u64[0];
      float32x4_t v307 = vmulq_f32(v288, v305);
      v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
      float32x4_t v308 = vmulq_f32(v290, v305);
      v308.i64[0] = vpaddq_f32(v308, v308).u64[0];
      unsigned __int32 v309 = vpadd_f32(*(float32x2_t *)v308.f32, *(float32x2_t *)v308.f32).u32[0];
      *(int8x8_t *)v310.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v306.f32, *(float32x2_t *)v306.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32), 4uLL);
      v310.i64[1] = v309;
      uint64_t v311 = v299;
      float32x4_t v312 = vmulq_f32(v310, v310);
      v312.i64[0] = vpaddq_f32(v312, v312).u64[0];
      float32x2_t v313 = vpadd_f32(*(float32x2_t *)v312.f32, *(float32x2_t *)v312.f32);
      float32x2_t v314 = vrsqrte_f32(v313);
      int v315 = 4;
      do
      {
        float32x2_t v314 = vmul_f32(v314, vrsqrts_f32(vmul_f32(v314, v314), v313));
        --v315;
      }
      while (v315);
      float32x2_t v316 = vmul_f32(v313, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v313), 0), (int8x8_t)_D3, (int8x8_t)v314));
      float32x2_t v317 = vrecpe_f32(v316);
      int v318 = 4;
      do
      {
        float32x2_t v317 = vmul_f32(v317, vrecps_f32(v316, v317));
        --v318;
      }
      while (v318);
      if (v297)
      {
        uint64_t v319 = 0;
        float32x4_t v320 = vmulq_n_f32(v310, v317.f32[0]);
        v320.i32[3] = 0;
        float32x4_t v321 = vmulq_f32(v280, v320);
        v321.i64[0] = vpaddq_f32(v321, v321).u64[0];
        float32x2_t v322 = vpadd_f32(*(float32x2_t *)v321.f32, *(float32x2_t *)v321.f32);
        unsigned int v298 = v299;
        do
        {
          if (v319 != v311 && (float)(v454[0].f32[v319] - v296) < v279)
          {
            float32x4_t v323 = *(float32x4_t *)(v292 + 20 * v319);
            v323.i32[3] = 0;
            float32x4_t v324 = vmulq_f32(v289, v323);
            v324.i64[0] = vpaddq_f32(v324, v324).u64[0];
            float32x4_t v325 = vmulq_f32(v288, v323);
            v325.i64[0] = vpaddq_f32(v325, v325).u64[0];
            float32x4_t v326 = vmulq_f32(v290, v323);
            v326.i64[0] = vpaddq_f32(v326, v326).u64[0];
            unsigned __int32 v327 = vpadd_f32(*(float32x2_t *)v326.f32, *(float32x2_t *)v326.f32).u32[0];
            *(int8x8_t *)v328.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v324.f32, *(float32x2_t *)v324.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v325.f32, *(float32x2_t *)v325.f32), 4uLL);
            v328.i64[1] = v327;
            float32x4_t v329 = vmulq_f32(v328, v328);
            v329.i64[0] = vpaddq_f32(v329, v329).u64[0];
            float32x2_t v330 = vpadd_f32(*(float32x2_t *)v329.f32, *(float32x2_t *)v329.f32);
            float32x2_t v331 = vrsqrte_f32(v330);
            int v332 = 4;
            do
            {
              float32x2_t v331 = vmul_f32(v331, vrsqrts_f32(vmul_f32(v331, v331), v330));
              --v332;
            }
            while (v332);
            float32x2_t v333 = vmul_f32(v330, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v330), 0), (int8x8_t)_D3, (int8x8_t)v331));
            float32x2_t v334 = vrecpe_f32(v333);
            int v335 = 4;
            do
            {
              float32x2_t v334 = vmul_f32(v334, vrecps_f32(v333, v334));
              --v335;
            }
            while (v335);
            float32x4_t v336 = vmulq_n_f32(v328, v334.f32[0]);
            v336.i32[3] = 0;
            float32x4_t v337 = vmulq_f32(v280, v336);
            v337.i64[0] = vpaddq_f32(v337, v337).u64[0];
            float32x2_t v338 = vpadd_f32(*(float32x2_t *)v337.f32, *(float32x2_t *)v337.f32);
            if (vcgt_f32(v322, v338).u8[0])
            {
              unsigned int v298 = v319;
              unsigned int v339 = -1;
            }
            else
            {
              unsigned int v339 = 0;
            }
            float32x2_t v322 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v339), (int8x8_t)v338, (int8x8_t)v322);
          }
          ++v319;
        }
        while (v319 != v297);
      }
      else
      {
        unsigned int v298 = v299;
      }
    }
    float32x4_t v340 = vsubq_f32(*a12, v69);
    float32x4_t v341 = vmulq_f32(v340, v79);
    v341.i64[0] = vpaddq_f32(v341, v341).u64[0];
    float32x4_t v342 = vmulq_f32(v340, v446);
    v342.i64[0] = vpaddq_f32(v342, v342).u64[0];
    float32x4_t v343 = vmulq_f32(v340, v445);
    v343.i64[0] = vpaddq_f32(v343, v343).u64[0];
    *(int8x8_t *)v344.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v341.f32, *(float32x2_t *)v341.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v342.f32, *(float32x2_t *)v342.f32), 4uLL);
    v344.i64[1] = vpadd_f32(*(float32x2_t *)v343.f32, *(float32x2_t *)v343.f32).u32[0];
    v345 = (float32x4_t *)a3[6];
    float32x4_t v347 = *v345;
    float32x4_t v346 = v345[1];
    float32x4_t v348 = v345[2];
    _Q20 = vaddq_f32(vmulq_laneq_f32(v348, v344, 2), vaddq_f32(vmulq_n_f32(*v345, v344.f32[0]), vmulq_lane_f32(v346, *(float32x2_t *)v344.f32, 1)));
    uint64_t v350 = *(void *)(a1 + 24);
    _S23 = *(_DWORD *)(v350 + 8);
    __asm { FMLA            S22, S23, V20.S[2] }
    float v353 = *(float *)(v350 + 12) + _S22;
    float v354 = fabsf(v353);
    if (v353 < (float)-v277) {
      float v354 = 3.4028e38;
    }
    v454[0].f32[0] = v354;
    uint64_t v355 = *(unsigned int *)(a1 + 16);
    if (v355 < 2)
    {
      unsigned int v357 = 0;
      unsigned int v356 = 0;
    }
    else
    {
      unsigned int v356 = 0;
      unsigned int v357 = 0;
      v358 = (float *)(v350 + 32);
      for (iuint64_t i = 1; ii != v355; ++ii)
      {
        float v360 = *v358
             + (float)((float)((float)(_Q20.f32[1] * *(v358 - 2)) + (float)(_Q20.f32[0] * *(v358 - 3)))
                     + (float)(_Q20.f32[2] * *(v358 - 1)));
        float v361 = fabsf(v360);
        if (v360 < (float)-v277) {
          float v361 = 3.4028e38;
        }
        v454[0].f32[ii] = v361;
        if (v354 > v361)
        {
          unsigned int v357 = ii;
          float v354 = v361;
        }
        if (v360 > v353)
        {
          float v353 = v360;
          unsigned int v356 = ii;
        }
        v358 += 5;
      }
    }
    v304.i64[1] = v286;
    if (v354 != 3.4028e38)
    {
      float32x4_t v362 = *(float32x4_t *)(v350 + 20 * v357);
      v362.i32[3] = 0;
      float32x4_t v363 = vmulq_f32(v347, v362);
      v363.i64[0] = vpaddq_f32(v363, v363).u64[0];
      float32x4_t v364 = vmulq_f32(v346, v362);
      v364.i64[0] = vpaddq_f32(v364, v364).u64[0];
      float32x4_t v365 = vmulq_f32(v348, v362);
      v365.i64[0] = vpaddq_f32(v365, v365).u64[0];
      unsigned __int32 v366 = vpadd_f32(*(float32x2_t *)v365.f32, *(float32x2_t *)v365.f32).u32[0];
      *(int8x8_t *)v367.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v363.f32, *(float32x2_t *)v363.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v364.f32, *(float32x2_t *)v364.f32), 4uLL);
      v367.i64[1] = v366;
      uint64_t v368 = v357;
      float32x4_t v369 = vmulq_f32(v367, v367);
      v369.i64[0] = vpaddq_f32(v369, v369).u64[0];
      float32x2_t v370 = vpadd_f32(*(float32x2_t *)v369.f32, *(float32x2_t *)v369.f32);
      float32x2_t v371 = vrsqrte_f32(v370);
      int v372 = 4;
      do
      {
        float32x2_t v371 = vmul_f32(v371, vrsqrts_f32(vmul_f32(v371, v371), v370));
        --v372;
      }
      while (v372);
      float32x2_t v373 = vmul_f32(v370, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v370), 0), (int8x8_t)_D3, (int8x8_t)v371));
      float32x2_t v374 = vrecpe_f32(v373);
      int v375 = 4;
      do
      {
        float32x2_t v374 = vmul_f32(v374, vrecps_f32(v373, v374));
        --v375;
      }
      while (v375);
      if (v355)
      {
        uint64_t v376 = 0;
        float32x4_t v377 = vmulq_n_f32(v367, v374.f32[0]);
        v377.i32[3] = 0;
        float32x4_t v378 = vmulq_f32(v377, v304);
        v378.i64[0] = vpaddq_f32(v378, v378).u64[0];
        float32x2_t v379 = vpadd_f32(*(float32x2_t *)v378.f32, *(float32x2_t *)v378.f32);
        unsigned int v356 = v357;
        do
        {
          if (v376 != v368 && (float)(v454[0].f32[v376] - v354) < v277)
          {
            float32x4_t v380 = *(float32x4_t *)(v350 + 20 * v376);
            v380.i32[3] = 0;
            float32x4_t v381 = vmulq_f32(v347, v380);
            v381.i64[0] = vpaddq_f32(v381, v381).u64[0];
            float32x4_t v382 = vmulq_f32(v346, v380);
            v382.i64[0] = vpaddq_f32(v382, v382).u64[0];
            float32x4_t v383 = vmulq_f32(v348, v380);
            v383.i64[0] = vpaddq_f32(v383, v383).u64[0];
            unsigned __int32 v384 = vpadd_f32(*(float32x2_t *)v383.f32, *(float32x2_t *)v383.f32).u32[0];
            *(int8x8_t *)v385.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v381.f32, *(float32x2_t *)v381.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v382.f32, *(float32x2_t *)v382.f32), 4uLL);
            v385.i64[1] = v384;
            float32x4_t v386 = vmulq_f32(v385, v385);
            v386.i64[0] = vpaddq_f32(v386, v386).u64[0];
            float32x2_t v387 = vpadd_f32(*(float32x2_t *)v386.f32, *(float32x2_t *)v386.f32);
            float32x2_t v388 = vrsqrte_f32(v387);
            int v389 = 4;
            do
            {
              float32x2_t v388 = vmul_f32(v388, vrsqrts_f32(vmul_f32(v388, v388), v387));
              --v389;
            }
            while (v389);
            float32x2_t v390 = vmul_f32(v387, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v387), 0), (int8x8_t)_D3, (int8x8_t)v388));
            float32x2_t v391 = vrecpe_f32(v390);
            int v392 = 4;
            do
            {
              float32x2_t v391 = vmul_f32(v391, vrecps_f32(v390, v391));
              --v392;
            }
            while (v392);
            float32x4_t v393 = vmulq_n_f32(v385, v391.f32[0]);
            v393.i32[3] = 0;
            float32x4_t v394 = vmulq_f32(v393, v304);
            v394.i64[0] = vpaddq_f32(v394, v394).u64[0];
            float32x2_t v395 = vpadd_f32(*(float32x2_t *)v394.f32, *(float32x2_t *)v394.f32);
            if (vcgt_f32(v379, v395).u8[0])
            {
              unsigned int v356 = v376;
              unsigned int v396 = -1;
            }
            else
            {
              unsigned int v396 = 0;
            }
            float32x2_t v379 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v396), (int8x8_t)v395, (int8x8_t)v379);
          }
          ++v376;
        }
        while (v376 != v355);
      }
      else
      {
        unsigned int v356 = v357;
      }
    }
    v397 = (float32x4_t *)(v292 + 20 * v298);
    v398.i64[0] = v397->i64[0];
    v398.i64[1] = v397->u32[2];
    float32x4_t v399 = vmulq_f32(v289, v398);
    v399.i64[0] = vpaddq_f32(v399, v399).u64[0];
    float32x4_t v400 = vmulq_f32(v288, v398);
    v400.i64[0] = vpaddq_f32(v400, v400).u64[0];
    float32x4_t v401 = vmulq_f32(v290, v398);
    v401.i64[0] = vpaddq_f32(v401, v401).u64[0];
    unsigned __int32 v402 = vpadd_f32(*(float32x2_t *)v401.f32, *(float32x2_t *)v401.f32).u32[0];
    *(int8x8_t *)v403.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v399.f32, *(float32x2_t *)v399.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v400.f32, *(float32x2_t *)v400.f32), 4uLL);
    v403.i64[1] = v402;
    float32x4_t v404 = vmulq_f32(v403, v403);
    v404.i64[0] = vpaddq_f32(v404, v404).u64[0];
    float32x2_t v405 = vpadd_f32(*(float32x2_t *)v404.f32, *(float32x2_t *)v404.f32);
    float32x2_t v406 = vrsqrte_f32(v405);
    int v407 = 4;
    do
    {
      float32x2_t v406 = vmul_f32(v406, vrsqrts_f32(vmul_f32(v406, v406), v405));
      --v407;
    }
    while (v407);
    float32x2_t v408 = vmul_f32(v405, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v405), 0), (int8x8_t)_D3, (int8x8_t)v406));
    float32x2_t v409 = vrecpe_f32(v408);
    int v410 = 4;
    do
    {
      float32x2_t v409 = vmul_f32(v409, vrecps_f32(v408, v409));
      --v410;
    }
    while (v410);
    uint64_t v411 = v350 + 20 * v356;
    v412.i64[0] = *(void *)v411;
    v412.i64[1] = *(unsigned int *)(v411 + 8);
    float32x4_t v413 = vmulq_f32(v347, v412);
    v413.i64[0] = vpaddq_f32(v413, v413).u64[0];
    float32x4_t v414 = vmulq_f32(v346, v412);
    v414.i64[0] = vpaddq_f32(v414, v414).u64[0];
    float32x4_t v415 = vmulq_f32(v348, v412);
    v415.i64[0] = vpaddq_f32(v415, v415).u64[0];
    unsigned __int32 v416 = vpadd_f32(*(float32x2_t *)v415.f32, *(float32x2_t *)v415.f32).u32[0];
    *(int8x8_t *)v417.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v413.f32, *(float32x2_t *)v413.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v414.f32, *(float32x2_t *)v414.f32), 4uLL);
    v417.i64[1] = v416;
    float32x4_t v418 = vmulq_f32(v417, v417);
    v418.i64[0] = vpaddq_f32(v418, v418).u64[0];
    float32x2_t v419 = vpadd_f32(*(float32x2_t *)v418.f32, *(float32x2_t *)v418.f32);
    float32x2_t v420 = vrsqrte_f32(v419);
    int v421 = 4;
    do
    {
      float32x2_t v420 = vmul_f32(v420, vrsqrts_f32(vmul_f32(v420, v420), v419));
      --v421;
    }
    while (v421);
    float32x2_t v422 = vmul_f32(v419, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v419), 0), (int8x8_t)_D3, (int8x8_t)v420));
    float32x2_t v423 = vrecpe_f32(v422);
    int v424 = 4;
    do
    {
      float32x2_t v423 = vmul_f32(v423, vrecps_f32(v422, v423));
      --v424;
    }
    while (v424);
    float32x4_t v425 = vmulq_n_f32(v403, v409.f32[0]);
    v425.i32[3] = 0;
    float32x4_t v426 = vmulq_n_f32(v417, v423.f32[0]);
    float32x4_t v427 = v426;
    v427.i32[3] = 0;
    float32x4_t v428 = vmulq_f32(v280, v425);
    v428.i64[0] = vpaddq_f32(v428, v428).u64[0];
    float32x4_t v429 = vmulq_f32(v427, v304);
    v429.i64[0] = vpaddq_f32(v429, v429).u64[0];
    if (vcage_f32(vpadd_f32(*(float32x2_t *)v428.f32, *(float32x2_t *)v428.f32), vpadd_f32(*(float32x2_t *)v429.f32, *(float32x2_t *)v429.f32)).u8[0])
    {
      physx::Gu::generatedContacts(a2, a1, v397, (float32x4_t *)(v350 + 20 * v356), a4, (uint64_t)a3, v453, a5, a6, a7);
    }
    else
    {
      float32x4_t v444 = v426;
      physx::Gu::generatedContacts(a1, a2, (float32x4_t *)(v350 + 20 * v356), v397, a3, (uint64_t)a4, v452, a5, a6, a7);
      if (*a6)
      {
        unint64_t v430 = 0;
        float32x4_t v431 = vmulq_n_f32(v447, v444.f32[0]);
        v431.i32[3] = 0;
        float32x4_t v432 = vmulq_lane_f32(v446, *(float32x2_t *)v444.f32, 1);
        v432.i32[3] = 0;
        float32x4_t v433 = vmulq_laneq_f32(v445, v444, 2);
        v433.i32[3] = 0;
        float32x4_t v434 = vnegq_f32(vaddq_f32(v433, vaddq_f32(v431, v432)));
        uint64_t v435 = a5 + 32;
        do
        {
          long long v436 = *(_OWORD *)(v435 - 32);
          float32x4_t v437 = v434;
          v437.i32[3] = *(_DWORD *)(v435 + 12);
          *(_OWORD *)(v435 - 32) = *(_OWORD *)(v435 - 16);
          *(_OWORD *)(v435 - 16) = v436;
          *(float32x4_t *)uint64_t v435 = v437;
          v435 += 48;
          ++v430;
        }
        while (v430 < *a6);
      }
    }
    return 1;
  }
  return result;
}

uint64_t physx::Gu::testFaceNormal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x2_t *a7, void *a8, _DWORD *a9, int8x16_t *a10, int a11, _DWORD *a12)
{
  int8x16_t v13 = *a10;
  unint64_t v14 = *(unsigned int *)(a1 + 16);
  if (v14)
  {
    uint64_t v20 = 0;
    int v21 = 0;
    v26.i32[0] = HIDWORD(*(void *)(a2 + 64));
    v26.i32[1] = *(_DWORD *)(a2 + 72);
    float32x4_t v22 = vmulq_n_f32(*a6, COERCE_FLOAT(*(void *)a2));
    float32x4_t v23 = vmulq_n_f32(a6[1], COERCE_FLOAT(*(void *)(a2 + 4)));
    v22.i32[3] = 0;
    v23.i32[3] = 0;
    float32x4_t v24 = vmulq_n_f32(a6[2], COERCE_FLOAT(*(void *)(a2 + 8)));
    v24.i32[3] = 0;
    float32x2_t v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 64), 0);
    v26.i64[1] = *(unsigned int *)(a2 + 76);
    float32x4_t v73 = v26;
    float32x4_t v74 = a6[3];
    float32x4_t v27 = vaddq_f32(v74, vaddq_f32(vaddq_f32(v22, v23), v24));
    int8x16_t v28 = (int8x16_t)vnegq_f32(v26);
    v28.i32[3] = 0;
    v80[0] = 0;
    float32x2_t v79 = 0;
    *(int32x2_t *)&long long v12 = vdup_n_s32(0x7F7FFFFFu);
    __asm { FMOV            V9.2S, #1.0 }
    int8x16_t v71 = v28;
    float32x4_t v72 = v27;
    while (1)
    {
      uint64_t v33 = *(void *)(a1 + 24) + 20 * v20;
      uint64_t v34 = *(void *)(a1 + 32) + 12 * *(unsigned __int8 *)(v33 + 19);
      v35.i64[0] = *(void *)v34;
      unsigned int v36 = *(_DWORD *)(v34 + 8);
      v37.i64[0] = *(void *)v33;
      v37.i64[1] = *(unsigned int *)(v33 + 8);
      float32x4_t v38 = *(float32x4_t **)(a3 + 48);
      float32x4_t v39 = vmulq_f32(v37, *v38);
      v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
      float32x4_t v40 = vmulq_f32(v37, v38[1]);
      v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
      int32x2_t v43 = (int32x2_t)vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
      float32x4_t v41 = vmulq_f32(v37, v38[2]);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      *(int8x8_t *)v42.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32), (int8x8_t)v43, 4uLL);
      v42.i64[1] = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).u32[0];
      v43.i32[0] = *(_DWORD *)(v33 + 12);
      float32x4_t v44 = vmulq_f32(v42, v42);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      float32x2_t v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
      float32x2_t v46 = vrsqrte_f32(v45);
      int v47 = 4;
      do
      {
        float32x2_t v46 = vmul_f32(v46, vrsqrts_f32(vmul_f32(v46, v46), v45));
        --v47;
      }
      while (v47);
      float32x2_t v48 = vmul_f32(v45, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v45), 0), _D9, (int8x8_t)v46));
      float32x2_t v49 = vrecpe_f32(v48);
      int v50 = 4;
      do
      {
        float32x2_t v49 = vmul_f32(v49, vrecps_f32(v48, v49));
        --v50;
      }
      while (v50);
      v35.i64[1] = v36;
      float32x4_t v51 = vmulq_f32(v35, v37);
      v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
      float32x2_t v52 = vmul_f32(v49, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32));
      *(float32x2_t *)v51.f32 = vneg_f32((float32x2_t)vdup_lane_s32(v43, 0));
      float32x4_t v53 = vmulq_n_f32(v42, v49.f32[0]);
      float32x4_t v54 = vmulq_n_f32(*a5, v53.f32[0]);
      float32x4_t v55 = vmulq_lane_f32(a5[1], *(float32x2_t *)v53.f32, 1);
      float32x4_t v56 = vmulq_laneq_f32(a5[2], v53, 2);
      float32x4_t v57 = v53;
      v57.i32[3] = 0;
      v54.i32[3] = 0;
      float32x2_t v58 = vmul_f32(v49, *(float32x2_t *)v51.f32);
      v55.i32[3] = 0;
      v56.i32[3] = 0;
      float32x4_t v78 = vaddq_f32(vaddq_f32(v54, v55), v56);
      float32x4_t v59 = vmulq_f32(v78, (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v78), (int8x16_t)v26, v28));
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      *(float32x2_t *)v59.f32 = vmax_f32(vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), v25);
      float32x4_t v60 = vmulq_f32(v27, v57);
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      *(float32x2_t *)v60.f32 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
      if ((vcgt_f32(vsub_f32(vmin_f32(v58, vadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v60.f32)), vmax_f32(v52, vsub_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v59.f32))), *(float32x2_t *)&v12).u8[0] & 1) == 0)
      {
        long long v76 = v12;
        int8x16_t v77 = v13;
        int8x16_t v75 = (int8x16_t)v57;
        float32x4_t v61 = vmulq_f32(v74, v57);
        v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
        float32x2_t v62 = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
        (*(void (**)(uint64_t, float32x4_t *, float32x2_t *, float32x2_t *))(*(void *)a4 + 24))(a4, &v78, v80, &v79);
        float32x2_t v63 = vadd_f32(v62, v80[0]);
        v80[0] = v63;
        float32x2_t v79 = vadd_f32(v62, v79);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v63, vadd_f32(v58, *a7)), (int8x8_t)vcgt_f32(v52, vadd_f32(v79, *a7))), 0), (int8x8_t)v63).u32[0] == -1)return 0; {
        float32x2_t v64 = vsub_f32(v58, v63);
        }
        *((void *)&v12 + 1) = *((void *)&v76 + 1);
        unsigned __int8 v65 = vcgt_f32(*(float32x2_t *)&v76, v64).u8[0];
        _ZF = (v65 & 1) == 0;
        if (v65) {
          unsigned int v67 = -1;
        }
        else {
          unsigned int v67 = 0;
        }
        int8x16_t v68 = (int8x16_t)vdupq_n_s32(v67);
        int8x16_t v13 = vbslq_s8(v68, v75, v77);
        if (!_ZF) {
          int v21 = v20;
        }
        *(int8x8_t *)&long long v12 = vbsl_s8(*(int8x8_t *)v68.i8, (int8x8_t)v64, *(int8x8_t *)&v76);
        unint64_t v14 = *(unsigned int *)(a1 + 16);
        float32x4_t v27 = v72;
        float32x4_t v26 = v73;
        int8x16_t v28 = v71;
      }
      if (++v20 >= v14) {
        goto LABEL_18;
      }
    }
  }
  int v21 = 0;
  *(int32x2_t *)&long long v12 = vdup_n_s32(0x7F7FFFFFu);
LABEL_18:
  if (COERCE_FLOAT(*a8) > *(float *)&v12)
  {
    *a10 = v13;
    *a8 = v12;
    *a12 = a11;
  }
  *a9 = v21;
  return 1;
}

BOOL physx::Gu::testEdgeNormal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t *a9, _DWORD *a10)
{
  MEMORY[0x270FA5388](a1);
  float32x4_t v86 = v11;
  int8x16_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  float32x2_t v100 = 0;
  v101[0] = 0;
  float32x2_t v98 = 0;
  float32x2_t v99 = 0;
  float32x4_t v24 = *(float32x4_t *)v22;
  v24.i64[1] = *(unsigned int *)(v22 + 8);
  float32x4_t v25 = vmulq_n_f32(*v12, COERCE_FLOAT(*(void *)v20));
  v25.i32[3] = 0;
  float32x4_t v26 = vmulq_n_f32(v12[1], COERCE_FLOAT(*(void *)(v20 + 4)));
  v26.i32[3] = 0;
  float32x4_t v27 = vmulq_n_f32(v12[2], COERCE_FLOAT(*(void *)(v20 + 8)));
  v27.i32[3] = 0;
  float32x4_t v85 = v12[3];
  float32x4_t v28 = vsubq_f32(vaddq_f32(v85, vaddq_f32(vaddq_f32(v25, v26), v27)), v24);
  int32x2_t v81 = *(int32x2_t *)(v20 + 64);
  v25.i32[0] = v81.i32[1];
  v25.i32[1] = *(_DWORD *)(v20 + 72);
  v25.i64[1] = *(unsigned int *)(v20 + 76);
  float32x4_t v88 = v25;
  float32x4_t v89 = v28;
  int32x2_t v79 = *(int32x2_t *)(v22 + 64);
  v26.i32[0] = v79.i32[1];
  v26.i32[1] = *(_DWORD *)(v22 + 72);
  v26.i64[1] = *(unsigned int *)(v22 + 76);
  float32x4_t v87 = v26;
  float32x4_t v78 = v29;
  float32x2_t v30 = *v29;
  float32x4_t v97 = v28;
  *(double *)v31.i64 = (*(double (**)(uint64_t, float32x4_t *))(*(void *)v18 + 16))(v18, &v97);
  float32x4_t v83 = v31;
  float32x4_t v32 = vnegq_f32(v97);
  float32x4_t v33 = vmulq_n_f32(*v15, v32.f32[0]);
  v33.i32[3] = 0;
  float32x4_t v34 = vmulq_lane_f32(v15[1], *(float32x2_t *)v32.f32, 1);
  v34.i32[3] = 0;
  float32x4_t v35 = vmulq_laneq_f32(v15[2], v32, 2);
  v35.i32[3] = 0;
  float32x4_t v96 = vaddq_f32(vaddq_f32(v33, v34), v35);
  *(double *)v36.i64 = (*(double (**)(uint64_t, float32x4_t *))(*(void *)v17 + 16))(v17, &v96);
  float32x4_t v37 = vmulq_n_f32(*v15, v83.f32[0]);
  v37.i32[3] = 0;
  float32x4_t v38 = vmulq_lane_f32(v15[1], *(float32x2_t *)v83.f32, 1);
  v38.i32[3] = 0;
  float32x4_t v39 = vmulq_laneq_f32(v15[2], v83, 2);
  v39.i32[3] = 0;
  float32x4_t v40 = vaddq_f32(v15[3], vaddq_f32(vaddq_f32(v37, v38), v39));
  float32x4_t v41 = vmulq_n_f32(*v13, v36.f32[0]);
  v41.i32[3] = 0;
  float32x4_t v42 = vmulq_lane_f32(v13[1], *(float32x2_t *)v36.f32, 1);
  v42.i32[3] = 0;
  float32x4_t v43 = vmulq_laneq_f32(v13[2], v36, 2);
  v43.i32[3] = 0;
  float32x4_t v94 = vaddq_f32(v13[3], vaddq_f32(vaddq_f32(v41, v42), v43));
  float32x4_t v95 = v40;
  v93[0] = 0;
  v92[0] = 0;
  physx::Gu::buildPartialHull(v23, v19, v93, &v94, v97);
  physx::Gu::buildPartialHull(v21, v17, v92, &v95, v96);
  unint64_t v80 = v93[0];
  if (v93[0])
  {
    uint64_t v44 = 0;
    BOOL v45 = 0;
    float32x2_t v46 = (float32x2_t)vdup_lane_s32(v81, 0);
    int8x16_t v48 = (int8x16_t)v87;
    int8x16_t v47 = (int8x16_t)v88;
    int8x16_t v49 = (int8x16_t)vnegq_f32(v88);
    v49.i32[3] = 0;
    float32x2_t v50 = (float32x2_t)vdup_lane_s32(v79, 0);
    int8x16_t v51 = (int8x16_t)vnegq_f32(v87);
    v51.i32[3] = 0;
    uint64_t v52 = v92[0];
    int8x16_t v82 = v51;
    int8x16_t v84 = v49;
    do
    {
      if (v52)
      {
        uint64_t v53 = 0;
        float32x4_t v54 = (int8x8_t *)&v93[3 * v44 + 1];
        float32x2_t v55 = (float32x2_t)*v54;
        v10.i32[0] = v54[1].i32[0];
        float32x2_t v56 = (float32x2_t)vext_s8(*v54, (int8x8_t)v10, 4uLL);
        do
        {
          float32x4_t v57 = (float *)&v92[3 * v53 + 1];
          float32x4_t v58 = vmulq_n_f32(*v13, *v57);
          v58.i32[3] = 0;
          float32x4_t v59 = vmulq_n_f32(v13[1], v57[1]);
          v59.i32[3] = 0;
          float32x4_t v60 = vmulq_n_f32(v13[2], v57[2]);
          v60.i32[3] = 0;
          float32x4_t v61 = vaddq_f32(vaddq_f32(v58, v59), v60);
          int8x8_t v62 = (int8x8_t)vmls_f32(vmul_f32(v55, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL)), v56, *(float32x2_t *)v61.f32);
          *(int8x8_t *)v61.f32 = vext_s8(v62, (int8x8_t)vmls_f32(vmul_f32(v10, *(float32x2_t *)v61.f32), v55, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)), 4uLL);
          v62.i32[1] = 0;
          *(float32x2_t *)v59.f32 = vpadd_f32(vmul_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32), vmul_f32((float32x2_t)v62.u32[0], (float32x2_t)v62.u32[0]));
          float32x2_t v63 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
          if (v63.f32[0] >= 0.00000011921)
          {
            *(int8x8_t *)&v61.u32[2] = v62;
            float32x2_t v64 = vrsqrte_f32(v63);
            int v65 = 4;
            do
            {
              float32x2_t v64 = vmul_f32(v64, vrsqrts_f32(vmul_f32(v64, v64), v63));
              --v65;
            }
            while (v65);
            float32x4_t v66 = vmulq_n_f32(v61, v64.f32[0]);
            float32x4_t v67 = vmulq_n_f32(*v15, v66.f32[0]);
            float32x4_t v68 = vmulq_lane_f32(v15[1], *(float32x2_t *)v66.f32, 1);
            float32x4_t v69 = vmulq_laneq_f32(v15[2], v66, 2);
            v66.i32[3] = 0;
            v67.i32[3] = 0;
            v68.i32[3] = 0;
            v69.i32[3] = 0;
            float32x4_t v90 = vaddq_f32(vaddq_f32(v67, v68), v69);
            float32x4_t v91 = v66;
            float32x4_t v70 = vmulq_f32(v90, (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v90), v47, v49));
            v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
            *(float32x2_t *)v70.f32 = vmax_f32(vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), v46);
            float32x4_t v71 = vmulq_f32(v89, v66);
            v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
            *(float32x2_t *)v71.f32 = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32);
            float32x4_t v72 = vmulq_f32(v66, (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v66), v48, v51));
            v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
            *(float32x2_t *)v72.f32 = vmax_f32(vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32), v50);
            if ((vcgt_f32(vsub_f32(vmin_f32(*(float32x2_t *)v72.f32, vadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v71.f32)), vmax_f32(vneg_f32(*(float32x2_t *)v72.f32), vsub_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v70.f32))), v30).u32[0] & 1) == 0)
            {
              (*(void (**)(uint64_t, float32x4_t *, float32x2_t *, float32x2_t *))(*(void *)v19 + 24))(v19, &v91, v101, &v100);
              float32x4_t v73 = vmulq_f32(v85, v91);
              v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
              float32x2_t v74 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
              (*(void (**)(uint64_t, float32x4_t *, float32x2_t *, float32x2_t *))(*(void *)v17 + 24))(v17, &v90, &v99, &v98);
              float32x2_t v75 = vadd_f32(v74, v99);
              float32x2_t v98 = vadd_f32(v74, v98);
              float32x2_t v99 = v75;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v75, vadd_f32(v100, *v86)), (int8x8_t)vcgt_f32(v101[0], vadd_f32(v98, *v86))), 0), (int8x8_t)v75).u32[0] == -1)return v45; {
              float32x2_t v76 = vsub_f32(v100, v75);
              }
              int8x16_t v48 = (int8x16_t)v87;
              int8x16_t v47 = (int8x16_t)v88;
              int8x16_t v51 = v82;
              int8x16_t v49 = v84;
              if (vcgt_f32(v30, v76).u8[0])
              {
                *a9 = v91;
                *a10 = 2;
                float32x2_t v30 = v76;
              }
            }
          }
          ++v53;
        }
        while (v53 != v52);
      }
      BOOL v45 = ++v44 >= v80;
    }
    while (v44 != v80);
  }
  *float32x4_t v78 = v30;
  return 1;
}

uint64_t physx::Gu::addGJKEPAContacts(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, float32x4_t *a5, float32x4_t *a6, uint64_t a7, float32x2_t a8)
{
  if (a4 == 2) {
    goto LABEL_11;
  }
  if (a4 != 4)
  {
    uint64_t v32 = 1;
    if (physx::Gu::epaPenetration(a1) != 5) {
      return v32;
    }
LABEL_11:
    physx::Gu::addManifoldPoint(a5, a7, (uint64_t)a6, a3, a8);
    return 0;
  }
  float32x4_t v14 = vmulq_f32(a6[2], a6[3]);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  if (vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32).f32[0] > 0.9999)
  {
    float32x4_t v35 = a6[2];
    *(double *)v15.i64 = (*(double (**)(uint64_t))(*(void *)a1 + 32))(a1);
    float32x4_t v34 = v15;
    *(double *)v16.i64 = (*(double (**)(uint64_t))(*(void *)a2 + 32))(a2);
    float32x4_t v17 = vsubq_f32(v34, v16);
    float32x4_t v18 = vmulq_f32(v17, v17);
    v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
    float32x2_t v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
    float32x2_t v20 = vrsqrte_f32(v19);
    int v21 = 4;
    do
    {
      float32x2_t v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
      --v21;
    }
    while (v21);
    __asm { FMOV            V4.2S, #1.0 }
    float32x2_t v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), _D4, (int8x8_t)v20));
    float32x2_t v28 = vrecpe_f32(v27);
    int v29 = 4;
    do
    {
      float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
      --v29;
    }
    while (v29);
    float32x4_t v30 = vmulq_n_f32(v17, v28.f32[0]);
    v30.i32[3] = 0;
    float32x4_t v31 = vmulq_f32(v35, v30);
    v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
    if (vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0] > 0.707) {
      goto LABEL_11;
    }
  }
  return 1;
}

uint64_t physx::Gu::computeMTD(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, float32x4_t *a6)
{
  long long v12 = *(float32x4_t **)(a3 + 32);
  int8x16_t v13 = *(float32x4_t **)(a4 + 32);
  float32x4_t v14 = *v12;
  float32x4_t v15 = v12[1];
  float32x4_t v16 = vnegq_f32(*v12);
  float32x4_t v17 = *v13;
  float32x4_t v18 = v13[1];
  float32x4_t v19 = vsubq_f32(v18, v15);
  float32x4_t v20 = v16;
  v20.i32[3] = 0;
  float32x2_t v21 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)v12, 3).u64[0];
  float32x4_t v22 = vmulq_n_f32(v19, vmla_f32((float32x2_t)0xBF000000BF000000, v21, v21).f32[0]);
  v22.i32[3] = 0;
  float32x2_t v23 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
  float32x2_t v24 = (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v23, 4uLL);
  int8x8_t v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL)), v24, *(float32x2_t *)v19.f32);
  *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(v23, *(float32x2_t *)v19.f32), *(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), 4uLL);
  v26.i64[1] = v25.u32[0];
  float32x4_t v27 = vmlaq_laneq_f32(v22, v26, *v12, 3);
  v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
  float32x4_t v28 = vmulq_f32(v20, v19);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  float32x4_t v29 = vmlaq_n_f32(v27, v20, vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
  float32x4_t v30 = vaddq_f32(v29, v29);
  v30.i32[3] = 0;
  float32x4_t v31 = *v13;
  v31.i32[3] = 0;
  float32x2_t v32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL));
  float32x4_t v33 = vmulq_f32(v20, v31);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  int32x2_t v34 = (int32x2_t)vsub_f32(v32, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32));
  v33.i64[0] = vdupq_laneq_s32(*(int32x4_t *)v13, 3).u64[0];
  float32x4_t v35 = vmulq_laneq_f32(v31, *v12, 3);
  v31.i64[0] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
  int8x8_t v36 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)vext_s8(*(int8x8_t *)v13->f32, *(int8x8_t *)v31.f32, 4uLL)), v24, *(float32x2_t *)v13->f32);
  *(int8x8_t *)v16.f32 = vext_s8(v36, (int8x8_t)vmls_f32(vmul_f32(v23, *(float32x2_t *)v13->f32), *(float32x2_t *)v16.f32, *(float32x2_t *)v31.f32), 4uLL);
  *(int8x8_t *)&v16.u32[2] = v36;
  _Q5 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v20, *v13, 3), v35), v16);
  *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)_Q5.f32, 1);
  float32x2_t v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)_Q5, 2);
  *(int32x2_t *)v31.f32 = vdup_lane_s32(v34, 1);
  float32x4_t v39 = vaddq_f32(_Q5, _Q5);
  *(int32x2_t *)v35.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v39.f32), 0);
  float32x2_t v40 = vmul_lane_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v39.f32, 1);
  float32x2_t v41 = vmul_laneq_f32(v38, v39, 2);
  *(float32x2_t *)v20.f32 = vmul_n_f32(*(float32x2_t *)v20.f32, v39.f32[0]);
  float32x2_t v42 = vmul_n_f32(v38, v39.f32[0]);
  float32x2_t v43 = vmul_n_f32(*(float32x2_t *)v31.f32, v39.f32[0]);
  float32x2_t v44 = vmul_lane_f32(v38, *(float32x2_t *)v39.f32, 1);
  float32x2_t v45 = vmul_lane_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v31.f32 = vmul_laneq_f32(*(float32x2_t *)v31.f32, v39, 2);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v39.f32 = vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v35.f32);
  *(int8x8_t *)v35.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q5.f32, v40), v41), (int8x8_t)vadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v31.f32), 4uLL);
  v35.i64[1] = vsub_f32(v42, v45).u32[0];
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v31.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v39.f32, v41), 4uLL);
  v20.i64[1] = vadd_f32(v44, v43).u32[0];
  v103[0] = v35;
  v103[1] = v20;
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vadd_f32(v42, v45), (int8x8_t)vsub_f32(v44, v43), 4uLL);
  v20.i64[1] = vsub_f32(*(float32x2_t *)v39.f32, v40).u32[0];
  float32x4_t v50 = vnegq_f32(v17);
  float32x4_t v51 = vsubq_f32(v15, v18);
  float32x4_t v52 = v50;
  v52.i32[3] = 0;
  float32x4_t v53 = vmulq_n_f32(v51, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  v53.i32[3] = 0;
  v31.i64[0] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  *(int8x8_t *)v35.f32 = vext_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v31.f32, 4uLL);
  *(float32x2_t *)v39.f32 = vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL), *(float32x2_t *)v50.f32), *(float32x2_t *)v35.f32, *(float32x2_t *)v51.f32);
  *(int8x8_t *)v54.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v31.f32), *(float32x2_t *)v50.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), 4uLL);
  v54.i64[1] = v39.u32[0];
  float32x4_t v55 = vmlaq_laneq_f32(v53, v54, v17, 3);
  v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
  float32x4_t v56 = vmulq_f32(v51, v52);
  v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
  float32x4_t v57 = vmlaq_n_f32(v55, v52, vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32).f32[0]);
  float32x4_t v58 = vaddq_f32(v57, v57);
  v58.i32[3] = 0;
  float32x4_t v59 = v14;
  v59.i32[3] = 0;
  float32x4_t v60 = vmulq_f32(v59, v52);
  v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
  float32x2_t v61 = vsub_f32(v32, vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32));
  float32x4_t v62 = vmulq_laneq_f32(v52, v14, 3);
  float32x4_t v63 = vmulq_laneq_f32(v59, v17, 3);
  v59.i64[0] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  *(float32x2_t *)v60.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v14.f32, *(int8x8_t *)v59.f32, 4uLL), *(float32x2_t *)v50.f32), *(float32x2_t *)v35.f32, *(float32x2_t *)v14.f32);
  *(int8x8_t *)v14.f32 = vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v31.f32), *(float32x2_t *)v50.f32, *(float32x2_t *)v59.f32), 4uLL);
  v14.i64[1] = v60.i64[0];
  float32x4_t v64 = vaddq_f32(vaddq_f32(v62, v63), v14);
  *(int32x2_t *)v63.f32 = vdup_lane_s32(*(int32x2_t *)v64.f32, 1);
  *(int32x2_t *)v62.f32 = vdup_laneq_s32((int32x4_t)v64, 2);
  float32x4_t v65 = vaddq_f32(v64, v64);
  *(int32x2_t *)v60.f32 = vdup_laneq_s32((int32x4_t)v65, 2);
  *(int32x2_t *)v64.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v65.f32), 0);
  *(float32x2_t *)v39.f32 = vmul_lane_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v65.f32, 1);
  *(float32x2_t *)v35.f32 = vmul_laneq_f32(*(float32x2_t *)v62.f32, v65, 2);
  *(float32x2_t *)v63.f32 = vmul_n_f32(*(float32x2_t *)v63.f32, v65.f32[0]);
  float32x2_t v66 = vmul_n_f32(*(float32x2_t *)v62.f32, v65.f32[0]);
  *(float32x2_t *)v50.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0), v61, 1);
  *(float32x2_t *)v62.f32 = vmul_lane_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v65.f32, 1);
  *(float32x2_t *)v65.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1), v61, 1);
  float32x2_t v67 = vmul_lane_f32(*(float32x2_t *)v60.f32, v61, 1);
  *(float32x2_t *)v64.f32 = vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v64.f32);
  *(int8x8_t *)_Q5.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v39.f32), *(float32x2_t *)v35.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v63.f32, v67), 4uLL);
  _Q5.i64[1] = vsub_f32(v66, *(float32x2_t *)v65.f32).u32[0];
  *(int8x8_t *)v63.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v63.f32, v67), (int8x8_t)vsub_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v35.f32), 4uLL);
  v63.i64[1] = vadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v50.f32).u32[0];
  v103[2] = v20;
  v103[3] = v30;
  v102[0] = _Q5;
  v102[1] = v63;
  *(int8x8_t *)v30.f32 = vext_s8((int8x8_t)vadd_f32(v66, *(float32x2_t *)v65.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v50.f32), 4uLL);
  v30.i64[1] = vsub_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v39.f32).u32[0];
  v102[2] = v30;
  v102[3] = v58;
  int v101 = 0;
  int32x2_t v100 = vdup_n_s32(0x7F7FFFFFu);
  int8x16_t v99 = 0uLL;
  float32x2_t v98 = 0;
  int v68 = physx::Gu::testFaceNormal(a1, a2, a3, a4, v102, v103, &v98, &v100, &v97, &v99, 0, &v101);
  uint64_t result = 0;
  if (v68)
  {
    uint64_t result = physx::Gu::testFaceNormal(a2, a1, a4, a3, v103, v102, &v98, &v100, &v96, &v99, 1, &v101);
    if (result)
    {
      uint64_t result = physx::Gu::testEdgeNormal(a1, a2, a3, a4, (uint64_t)v102, (uint64_t)v103, (uint64_t)&v98, (uint64_t)&v100, (float32x4_t *)&v99, &v101);
      if (result)
      {
        *a5 = v100;
        float32x2_t v70 = (float32x2_t)vextq_s8(v99, v99, 8uLL).u64[0];
        float32x2_t v71 = (float32x2_t)vext_s8(*(int8x8_t *)v99.i8, (int8x8_t)v70, 4uLL);
        float32x2_t v72 = vneg_f32(v70);
        float32x2_t v73 = vneg_f32(*(float32x2_t *)v99.i8);
        if (v101 == 1)
        {
          float32x4_t v74 = *(float32x4_t *)*(void *)(a4 + 32);
          float32x4_t v75 = v74;
          v75.i32[3] = 0;
          float32x2_t v76 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v74, 3).u64[0];
          float32x4_t v77 = vmulq_n_f32((float32x4_t)v99, vmla_f32((float32x2_t)0xBF000000BF000000, v76, v76).f32[0]);
          v77.i32[3] = 0;
          float32x2_t v78 = (float32x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
          int8x8_t v79 = (int8x8_t)vmla_f32(vmul_f32(v71, *(float32x2_t *)v74.f32), (float32x2_t)vext_s8(*(int8x8_t *)v74.f32, (int8x8_t)v78, 4uLL), v73);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v99.i8, v78), *(float32x2_t *)v74.f32, v72), 4uLL);
          v80.i64[1] = v79.u32[0];
          float32x4_t v81 = vmlaq_laneq_f32(v77, v80, v74, 3);
          v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
          float32x4_t v82 = vmulq_f32((float32x4_t)v99, v75);
          v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
          float32x4_t v83 = vmlaq_n_f32(v81, v75, vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32).f32[0]);
          float32x4_t v84 = vaddq_f32(v83, v83);
        }
        else
        {
          float32x4_t v85 = *(float32x4_t *)*(void *)(a3 + 32);
          float32x4_t v86 = v85;
          v86.i32[3] = 0;
          float32x2_t v87 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v85, 3).u64[0];
          float32x4_t v88 = vmulq_n_f32((float32x4_t)v99, vmla_f32((float32x2_t)0xBF000000BF000000, v87, v87).f32[0]);
          v88.i32[3] = 0;
          float32x2_t v89 = (float32x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
          int8x8_t v90 = (int8x8_t)vmla_f32(vmul_f32(v71, *(float32x2_t *)v85.f32), (float32x2_t)vext_s8(*(int8x8_t *)v85.f32, (int8x8_t)v89, 4uLL), v73);
          *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v99.i8, v89), *(float32x2_t *)v85.f32, v72), 4uLL);
          v91.i64[1] = v90.u32[0];
          float32x4_t v92 = vmlaq_laneq_f32(v88, v91, v85, 3);
          v92.i64[1] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u32[0];
          float32x4_t v93 = vmulq_f32((float32x4_t)v99, v86);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          float32x4_t v94 = vmlaq_n_f32(v92, v86, vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32).f32[0]);
          float32x4_t v95 = vaddq_f32(v94, v94);
          v95.i32[3] = 0;
          float32x4_t v84 = vnegq_f32(v95);
        }
        v84.i32[3] = 0;
        *a6 = v84;
        return 1;
      }
    }
  }
  return result;
}

float32x4_t physx::Gu::generatedCapsuleBoxFaceContacts(float32x4_t *a1, uint64_t a2, float32x4_t *a3, void *a4, float32x4_t *a5, uint64_t a6, _DWORD *a7, float32x4_t *a8, float32x4_t result)
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  float32x4_t v13 = *a3;
  v13.i64[1] = a3->u32[2];
  float32x4_t v14 = (float32x4_t *)a4[6];
  float32x4_t v15 = vmulq_f32(*v14, v13);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  float32x4_t v16 = vmulq_f32(v13, v14[1]);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  float32x4_t v17 = vmulq_f32(v13, v14[2]);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  *(int8x8_t *)v18.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), 4uLL);
  v18.i64[1] = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32).u32[0];
  float32x2_t v19 = *(float32x2_t *)a1[5].f32;
  float32x4_t v20 = vmulq_f32(v18, v18);
  v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
  float32x2_t v21 = vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32);
  float32x2_t v22 = vrsqrte_f32(v21);
  int v23 = 4;
  do
  {
    float32x2_t v22 = vmul_f32(v22, vrsqrts_f32(vmul_f32(v22, v22), v21));
    --v23;
  }
  while (v23);
  __asm { FMOV            V6.2S, #1.0 }
  float32x2_t v28 = vmul_f32(v21, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v21), 0), _D6, (int8x8_t)v22));
  float32x2_t v29 = vrecpe_f32(v28);
  int v30 = 4;
  do
  {
    float32x2_t v29 = vmul_f32(v29, vrecps_f32(v28, v29));
    --v30;
  }
  while (v30);
  float32x4_t v31 = vmulq_n_f32(v18, v29.f32[0]);
  v31.i32[3] = 0;
  int32x4_t v150 = (int32x4_t)v31;
  float32x2_t v32 = (unsigned __int8 *)(*(void *)(a2 + 40) + a3[1].u16[0]);
  float32x4_t v33 = *(float32x4_t *)(*(void *)(a2 + 32) + 12 * *v32);
  int32x2_t v34 = (float32x4_t *)a4[5];
  float32x4_t v35 = vmulq_n_f32(*v34, v33.f32[0]);
  v35.i32[3] = 0;
  float32x4_t v36 = vmulq_lane_f32(v34[1], *(float32x2_t *)v33.f32, 1);
  v36.i32[3] = 0;
  float32x4_t v37 = vmulq_laneq_f32(v34[2], v33, 2);
  v37.i32[3] = 0;
  float32x4_t v38 = vaddq_f32(vaddq_f32(v35, v36), v37);
  int8x16_t v39 = (int8x16_t)vmulq_f32(v31, vsubq_f32(a1[3], v38));
  float32x2_t v40 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
  int8x16_t v41 = (int8x16_t)vmulq_f32(v31, vsubq_f32(a1[4], v38));
  int8x16_t v42 = vextq_s8(v41, v41, 8uLL);
  float32x4_t v43 = vmulq_f32(v31, *a8);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  float32x2_t v44 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
  float32x2_t v45 = vrecpe_f32(v44);
  int v46 = 4;
  do
  {
    float32x2_t v45 = vmul_f32(v45, vrecps_f32(v44, v45));
    --v46;
  }
  while (v46);
  float32x2_t v47 = vpadd_f32(*(float32x2_t *)v39.i8, v40);
  float32x2_t v48 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v42.i8);
  float32x2_t v49 = vadd_f32(v19, *(float32x2_t *)result.f32);
  float32x2_t v50 = vpadd_f32(v47, v47);
  float32x2_t v51 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v44), 0), (int8x8_t)v45);
  *(float32x2_t *)v42.i8 = vmul_f32(v50, v51);
  *(float32x2_t *)v41.i8 = vmul_f32(vpadd_f32(v48, v48), v51);
  int8x16_t v52 = (int8x16_t)vdupq_lane_s32(vcge_f32(v49, *(float32x2_t *)v42.i8), 0);
  int8x16_t v53 = (int8x16_t)vdupq_lane_s32(vcge_f32(v49, *(float32x2_t *)v41.i8), 0);
  v54.i64[0] = -1;
  v54.i64[1] = -1;
  int8x8_t v55 = (int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8(v53, v52), v54));
  *(int8x8_t *)result.f32 = vuzp1_s8(v55, v55);
  if (result.i32[0] == -1)
  {
    int8x16_t v142 = v42;
    int32x4_t v143 = (int32x4_t)v52;
    int32x4_t v146 = (int32x4_t)v53;
    int8x16_t v148 = v41;
    float32x4_t v149 = a8;
    *(int8x8_t *)v59.f32 = physx::Gu::findRotationMatrixFromZAxis(&v150);
    float32x4_t v144 = v59;
    float32x4_t v145 = v60;
    float32x4_t v147 = v61;
    uint64_t v62 = a3[1].u8[2];
    MEMORY[0x270FA5388](v63);
    float32x4_t v65 = &v142.i8[-v64];
    bzero((char *)&v142 - v64, v64);
    unint64_t v66 = (unint64_t)(v65 + 15) & 0xFFFFFFFFFFFFFFF0;
    (*(void (**)(void *, unsigned __int8 *, uint64_t, void, unint64_t))(*a4 + 32))(a4, v32, v62, *(void *)(a2 + 32), v66);
    if (a3[1].i8[2])
    {
      unint64_t v67 = 0;
      float32x4_t v68 = (float32x4_t)xmmword_23441F6C0;
      uint64_t result = (float32x4_t)xmmword_234422E70;
      float32x4_t v69 = v147;
      float32x4_t v71 = v144;
      float32x4_t v70 = v145;
      do
      {
        float32x4_t v72 = *(float32x4_t *)(v66 + 16 * v67);
        float32x4_t v73 = vmulq_n_f32(v71, v72.f32[0]);
        v73.i32[3] = 0;
        float32x4_t v74 = vmulq_lane_f32(v70, *(float32x2_t *)v72.f32, 1);
        v74.i32[3] = 0;
        float32x4_t v75 = vmulq_laneq_f32(v69, v72, 2);
        v75.i32[3] = 0;
        float32x4_t v76 = vaddq_f32(v75, vaddq_f32(v73, v74));
        *(float32x4_t *)(v66 + 16 * v67) = v76;
        float32x4_t v68 = vminq_f32(v68, v76);
        uint64_t result = vmaxq_f32(result, v76);
        ++v67;
        unint64_t v77 = a3[1].u8[2];
      }
      while (v67 < v77);
      float32x2_t v78 = v149;
    }
    else
    {
      LODWORD(v77) = 0;
      uint64_t result = (float32x4_t)xmmword_234422E70;
      float32x4_t v68 = (float32x4_t)xmmword_23441F6C0;
      float32x2_t v78 = v149;
      float32x4_t v69 = v147;
      float32x4_t v71 = v144;
      float32x4_t v70 = v145;
    }
    v79.i64[0] = -1;
    v79.i64[1] = -1;
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v143, v79)), *(int8x8_t *)result.f32).u32[0] == -1)
    {
      uint64_t v80 = v77;
      float32x4_t v81 = vmlsq_lane_f32(a1[3], *v78, *(float32x2_t *)v142.i8, 0);
      float32x4_t v82 = vmulq_n_f32(v71, v81.f32[0]);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_lane_f32(v70, *(float32x2_t *)v81.f32, 1);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_laneq_f32(v69, v81, 2);
      v84.i32[3] = 0;
      float32x4_t v85 = vaddq_f32(v84, vaddq_f32(v82, v83));
      v83.i64[0] = vorrq_s8((int8x16_t)vcgtq_f32(v68, v85), (int8x16_t)vcgtq_f32(v85, result)).u64[0];
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1)), v79)), *(int8x8_t *)result.f32).u32[0] != -1&& v77 != 0)
      {
        uint64_t v87 = 0;
        v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
        float32x2_t v88 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.f32, 0);
        float32x2_t v89 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.f32, 1);
        LODWORD(v90) = v77 - 1;
        uint64_t v91 = v77 - 1;
        char v92 = 1;
        while (1)
        {
          long long v93 = *(_OWORD *)(v66 + 16 * v90);
          uint64_t v90 = v87;
          float32x2_t v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v93, 1);
          long long v95 = *(_OWORD *)(v66 + 16 * v87);
          float32x2_t v96 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v95, 1);
          float32x2_t v97 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v93, 0);
          float32x2_t v98 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v95, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v88, v98), (int8x8_t)vceq_f32(v89, v96)), vand_s8((int8x8_t)vceq_f32(v88, v97), (int8x8_t)vceq_f32(v89, v94))), 0), *(int8x8_t *)result.f32).u32[0] == -1)break; {
          if ((veor_s8((int8x8_t)vcgt_f32(v94, v89), (int8x8_t)vcgt_f32(v96, v89)).u8[0] & 1) != 0
          }
            && (float32x2_t v99 = vsub_f32(v96, v94),
                float32x2_t v100 = vmul_f32(vsub_f32(v89, v94), vsub_f32(v98, v97)),
                int8x8_t v101 = (int8x8_t)vmul_n_f32(v99, v85.f32[0]),
                int8x8_t v102 = (int8x8_t)vadd_f32(v100, vmul_f32(vadd_f32(v97, (float32x2_t)0x3400000034000000), v99)),
                int8x8_t v103 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v99), 0),
                (vcge_f32((float32x2_t)vbsl_s8(v103, v102, v101), (float32x2_t)vbsl_s8(v103, v101, v102)).u8[0] & 1) != 0))
          {
            if ((v92 & 1) == 0) {
              goto LABEL_29;
            }
            char v92 = 0;
            ++v87;
            if (v91 == v90) {
              break;
            }
          }
          else
          {
            ++v87;
            if (v80 == v90 + 1)
            {
              if (v92) {
                goto LABEL_29;
              }
              break;
            }
          }
        }
        float32x4_t v104 = vsubq_f32(a1[3], a5[3]);
        float32x4_t v105 = vmulq_f32(*a5, v104);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        float32x4_t v106 = vmulq_f32(v104, a5[1]);
        v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
        float32x4_t v107 = vmulq_f32(v104, a5[2]);
        v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
        *(int8x8_t *)v105.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), 4uLL);
        v105.i64[1] = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32).u32[0];
        *(float32x4_t *)(a6 + 48 * *a7) = v105;
        *(float32x4_t *)(a6 + 48 * *a7 + 16) = v81;
        float32x4_t v108 = *v78;
        v108.i32[3] = v142.i32[1];
        unsigned int v109 = (*a7)++;
        *(float32x4_t *)(a6 + 48 * v109 + 32) = v108;
      }
    }
LABEL_29:
    unsigned __int32 v110 = v148.u32[1];
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v146, v79)), *(int8x8_t *)result.f32).u32[0] == -1)
    {
      float32x4_t v111 = vmlsq_lane_f32(a1[4], *v78, *(float32x2_t *)v148.i8, 0);
      float32x4_t v112 = vmulq_n_f32(v71, v111.f32[0]);
      v112.i32[3] = 0;
      float32x4_t v113 = vmulq_lane_f32(v70, *(float32x2_t *)v111.f32, 1);
      v113.i32[3] = 0;
      float32x4_t v114 = vmulq_laneq_f32(v69, v111, 2);
      v114.i32[3] = 0;
      float32x4_t v115 = vaddq_f32(v114, vaddq_f32(v112, v113));
      uint64_t v116 = a3[1].u8[2];
      int32x2_t v117 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v68, v115), (int8x16_t)vcgtq_f32(v115, result)).u64[0];
      v118.i64[0] = -1;
      v118.i64[1] = -1;
      int8x8_t v119 = (int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v117, 0), (int8x16_t)vdupq_lane_s32(v117, 1)), v118));
      *(int8x8_t *)result.f32 = vuzp1_s8(v119, v119);
      if (result.i32[0] != -1 && v116 != 0)
      {
        uint64_t v121 = 0;
        v111.i64[1] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
        *(int32x2_t *)result.f32 = vdup_lane_s32(*(int32x2_t *)v115.f32, 0);
        float32x2_t v122 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 1);
        LODWORD(v123) = v116 - 1;
        char v124 = 1;
        while (1)
        {
          long long v125 = *(_OWORD *)(v66 + 16 * v123);
          uint64_t v123 = v121;
          float32x2_t v126 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v125, 1);
          long long v127 = *(_OWORD *)(v66 + 16 * v121);
          float32x2_t v128 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v127, 1);
          float32x2_t v129 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v125, 0);
          float32x2_t v130 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v127, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(*(float32x2_t *)result.f32, v130), (int8x8_t)vceq_f32(v122, v128)), vand_s8((int8x8_t)vceq_f32(*(float32x2_t *)result.f32, v129), (int8x8_t)vceq_f32(v122, v126))), 0), *(int8x8_t *)result.f32).u32[0] == -1)break; {
          if ((veor_s8((int8x8_t)vcgt_f32(v126, v122), (int8x8_t)vcgt_f32(v128, v122)).u8[0] & 1) != 0
          }
            && (float32x2_t v131 = vsub_f32(v128, v126),
                float32x2_t v132 = vmul_f32(vsub_f32(v122, v126), vsub_f32(v130, v129)),
                int8x8_t v133 = (int8x8_t)vmul_n_f32(v131, v115.f32[0]),
                int8x8_t v134 = (int8x8_t)vadd_f32(v132, vmul_f32(vadd_f32(v129, (float32x2_t)0x3400000034000000), v131)),
                int8x8_t v135 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v131), 0),
                (vcge_f32((float32x2_t)vbsl_s8(v135, v134, v133), (float32x2_t)vbsl_s8(v135, v133, v134)).u8[0] & 1) != 0))
          {
            if ((v124 & 1) == 0) {
              return result;
            }
            char v124 = 0;
            ++v121;
            if (v116 - 1 == v123) {
              break;
            }
          }
          else
          {
            ++v121;
            if (v116 == v123 + 1)
            {
              if (v124) {
                return result;
              }
              break;
            }
          }
        }
        float32x4_t v136 = vsubq_f32(a1[4], a5[3]);
        float32x4_t v137 = vmulq_f32(*a5, v136);
        v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
        float32x4_t v138 = vmulq_f32(v136, a5[1]);
        v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
        float32x4_t v139 = vmulq_f32(v136, a5[2]);
        v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
        *(int8x8_t *)&long long v140 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32), 4uLL);
        *((void *)&v140 + 1) = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32).u32[0];
        *(_OWORD *)(a6 + 48 * *a7) = v140;
        *(float32x4_t *)(a6 + 48 * *a7 + 16) = v111;
        uint64_t result = *v78;
        result.i32[3] = v110;
        unsigned int v141 = (*a7)++;
        *(float32x4_t *)(a6 + 48 * v141 + 32) = result;
      }
    }
  }
  return result;
}

uint64_t physx::Gu::generatedContactsEEContacts(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t *a6, uint64_t a7, _DWORD *a8, void *a9, int8x8_t *a10)
{
  v68[1] = *MEMORY[0x263EF8340];
  uint64_t v17 = a3 + *(unsigned __int16 *)(a4 + 16);
  uint64_t v18 = *(unsigned __int8 *)(a4 + 18);
  MEMORY[0x270FA5388](a1);
  float32x4_t v20 = (char *)v68 - v19;
  bzero((char *)v68 - v19, v19);
  unint64_t v21 = (unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)a5 + 32))(a5, v17, v18, a2, v21);
  unsigned int v23 = *(unsigned __int8 *)(a4 + 18);
  if (*(unsigned char *)(a4 + 18))
  {
    uint64_t v24 = 0;
    LODWORD(v25) = v23 - 1;
    float v26 = COERCE_FLOAT(*a9) + COERCE_FLOAT(a1[5].i64[0]);
    do
    {
      float32x4_t v27 = *(float32x4_t *)(v21 + 16 * v25);
      uint64_t v25 = v24;
      float32x4_t v28 = *(float32x4_t *)(v21 + 16 * v24);
      float32x4_t v29 = vsubq_f32(v27, v28);
      float32x4_t v30 = *(float32x4_t *)a10->i8;
      float32x2_t v31 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
      float32x2_t v32 = (float32x2_t)vext_s8(*a10, (int8x8_t)v31, 4uLL);
      int8x8_t v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v29.f32, v32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL), (float32x2_t)*a10);
      *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), (float32x2_t)*a10), *(float32x2_t *)v29.f32, v31), 4uLL);
      v34.i64[1] = v33.u32[0];
      float32x4_t v35 = vmulq_f32(v28, v34);
      v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
      float32x2_t v36 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
      float32x4_t v37 = a1[3];
      float32x4_t v38 = a1[4];
      float32x4_t v39 = vmulq_f32(v37, v34);
      v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
      float32x2_t v40 = vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32);
      float32x4_t v41 = vmulq_f32(v38, v34);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      if (vmul_f32(vsub_f32(v40, v36), vsub_f32(vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), v36)).f32[0] <= 0.0)
      {
        float32x4_t v42 = vsubq_f32(v38, v37);
        float32x4_t v43 = vmulq_f32(v34, v42);
        v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
        float32x2_t v44 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
        if (v44.f32[0] != 0.0)
        {
          float32x2_t v45 = vrecpe_f32(v44);
          int v46 = 4;
          do
          {
            float32x2_t v45 = vmul_f32(v45, vrecps_f32(v44, v45));
            --v46;
          }
          while (v46);
          float32x4_t v47 = vmlaq_n_f32(v37, v42, vmul_f32(vsub_f32(v36, v40), v45).f32[0]);
          v47.i64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
          int8x8_t v48 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL)), v32, *(float32x2_t *)v42.f32);
          *(int8x8_t *)v49.f32 = vext_s8(v48, (int8x8_t)vmls_f32(vmul_f32(v31, *(float32x2_t *)v42.f32), *(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL)), 4uLL);
          v49.i64[1] = v48.u32[0];
          float32x4_t v50 = vsubq_f32(v47, v28);
          float32x4_t v51 = vmulq_f32(v49, v50);
          float32x4_t v52 = vmulq_f32(v29, v49);
          v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
          float32x2_t v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
          float32x2_t v54 = vrecpe_f32(v53);
          int v55 = 4;
          do
          {
            float32x2_t v54 = vmul_f32(v54, vrecps_f32(v53, v54));
            --v55;
          }
          while (v55);
          float32x2_t v56 = (float32x2_t)vpaddq_f32(v51, v51).u64[0];
          float32x2_t v57 = vmul_f32(v54, vpadd_f32(v56, v56));
          if (v57.f32[0] <= 1.005 && v57.f32[0] >= -0.005)
          {
            float32x4_t v58 = vmlsq_lane_f32(v50, v29, v57, 0);
            v58.i64[1] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u32[0];
            float32x4_t v59 = vmulq_f32(v30, v58);
            v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
            float32x2_t v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
            if (v26 >= v60.f32[0])
            {
              float32x4_t v61 = vsubq_f32(v47, v58);
              float32x4_t v62 = vsubq_f32(v47, a6[3]);
              float32x4_t v63 = vmulq_f32(*a6, v62);
              v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
              float32x4_t v64 = vmulq_f32(v62, a6[1]);
              v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
              float32x4_t v65 = vmulq_f32(v62, a6[2]);
              v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
              *(int8x8_t *)v63.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32), 4uLL);
              v63.i64[1] = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32).u32[0];
              *(float32x4_t *)(a7 + 48 * *a8) = v63;
              *(float32x4_t *)(a7 + 48 * *a8 + 16) = v61;
              long long v66 = *(_OWORD *)a10->i8;
              HIDWORD(v66) = v60.i32[1];
              unsigned int v67 = (*a8)++;
              *(_OWORD *)(a7 + 48 * v67 + 32) = v66;
              unsigned int v23 = *(unsigned __int8 *)(a4 + 18);
            }
          }
        }
      }
      uint64_t v24 = v25 + 1;
    }
    while (v25 + 1 < (unint64_t)v23);
  }
  return result;
}

uint64_t physx::Gu::generateCapsuleBoxFullContactManifold(float32x4_t *a1, uint64_t a2, void *a3, float32x4_t *a4, uint64_t a5, int *a6, float32x2_t *a7, int8x16_t *a8, float32x4_t a9, float a10, float32x2_t *a11, char a12)
{
  v124[128] = *(float32x2_t *)MEMORY[0x263EF8340];
  int v20 = *a6;
  if (a12)
  {
    if ((physx::Gu::testSATCapsulePoly(a1, a2, a3, a7, v124, a8) & 1) == 0) {
      return 0;
    }
    unint64_t v21 = *(_OWORD **)(a2 + 24);
    float32x4_t v22 = vnegq_f32(*(float32x4_t *)a8);
    v22.i32[3] = 0;
    unsigned int v23 = (float32x4_t *)a3[5];
    float32x4_t v24 = vmulq_f32(v22, *v23);
    v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
    float32x4_t v25 = vmulq_f32(v22, v23[1]);
    v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
    float32x4_t v26 = vmulq_f32(v22, v23[2]);
    v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
    unsigned __int32 v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32).u32[0];
    *(int8x8_t *)a9.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32), 4uLL);
    a9.i64[1] = v27;
    float32x4_t v28 = *(float32x4_t *)v21;
    v28.i32[3] = 0;
    float32x4_t v29 = vmulq_f32(v28, a9);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    float32x2_t v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
    uint64_t v31 = *(unsigned int *)(a2 + 16);
    if (v31 < 2)
    {
      unsigned int v32 = 0;
    }
    else
    {
      unsigned int v32 = 0;
      int8x8_t v33 = (_OWORD *)((char *)v21 + 20);
      for (uint64_t i = 1; i != v31; ++i)
      {
        float32x4_t v35 = *(float32x4_t *)v33;
        int8x8_t v33 = (_OWORD *)((char *)v33 + 20);
        float32x4_t v36 = v35;
        v36.i32[3] = 0;
        float32x4_t v37 = vmulq_f32(v36, a9);
        v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
        float32x2_t v38 = vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
        if (vcgt_f32(v30, v38).u8[0])
        {
          unsigned int v32 = i;
          unsigned int v39 = -1;
        }
        else
        {
          unsigned int v39 = 0;
        }
        float32x2_t v30 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v39), (int8x8_t)v38, (int8x8_t)v30);
      }
    }
    uint64_t v101 = *(unsigned int *)(a2 + 20);
    if (v101)
    {
      uint64_t v102 = 0;
      a9 = vnegq_f32(a9);
      a9.i32[3] = 0;
      uint64_t v103 = *(void *)(a2 + 48);
      float32x2_t v104 = vmul_f32(v30, v30);
      int v105 = -1;
      do
      {
        float32x4_t v106 = (unsigned __int8 *)(v103 + (2 * v102));
        float32x4_t v107 = *(float32x4_t *)((char *)v21 + 20 * *v106);
        v107.i32[3] = 0;
        float32x4_t v108 = *(float32x4_t *)((char *)v21 + 20 * v106[1]);
        v108.i32[3] = 0;
        float32x4_t v109 = vaddq_f32(v107, v108);
        float32x4_t v110 = vmulq_f32(v109, v109);
        v110.i64[0] = vpaddq_f32(v110, v110).u64[0];
        float32x2_t v111 = vpadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v110.f32);
        float32x4_t v112 = vmulq_f32(a9, v109);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        float32x2_t v113 = vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32);
        float32x2_t v114 = vmul_f32(v113, v113);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v114, vmul_f32(v104, v111)), (int8x8_t)vcgez_f32(v113)), 0), *(int8x8_t *)a9.f32).u32[0] == -1)
        {
          float32x2_t v115 = vrecpe_f32(v111);
          int v116 = 4;
          do
          {
            float32x2_t v115 = vmul_f32(v115, vrecps_f32(v111, v115));
            --v116;
          }
          while (v116);
          float32x2_t v104 = vmul_f32(v114, v115);
          int v105 = v102;
        }
        ++v102;
      }
      while (v102 != v101);
      if (v105 != -1)
      {
        int32x2_t v117 = (unsigned __int8 *)(v103 + (2 * v105));
        unsigned int v118 = *v117;
        float32x4_t v119 = *(float32x4_t *)((char *)v21 + 20 * *v117);
        unsigned int v32 = v117[1];
        v119.i32[3] = 0;
        float32x4_t v120 = *(float32x4_t *)((char *)v21 + 20 * v32);
        v120.i32[3] = 0;
        float32x4_t v121 = vmulq_f32(a9, v119);
        v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
        float32x4_t v122 = vmulq_f32(a9, v120);
        a9 = vpaddq_f32(v122, v122);
        if (vcgt_f32(vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32), vpadd_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)a9.f32)).u8[0])unsigned int v32 = v118; {
      }
        }
    }
    uint64_t v123 = (float32x4_t *)((char *)v21 + 20 * (int)v32);
  }
  else
  {
    float v40 = a10 * 0.01;
    float v41 = a10 * 0.05;
    if (v40 > a9.f32[0]) {
      a9.f32[0] = v40;
    }
    if (v41 < a9.f32[0]) {
      a9.f32[0] = v41;
    }
    float32x4_t v42 = *(float32x4_t *)a8;
    float32x4_t v43 = (float32x4_t *)a3[6];
    float32x4_t v44 = *v43;
    float32x4_t v45 = v43[1];
    float32x4_t v46 = v43[2];
    _Q6 = vaddq_f32(vaddq_f32(vmulq_n_f32(*v43, COERCE_FLOAT(*(_OWORD *)a11->f32)), vmulq_lane_f32(v45, *a11, 1)), vmulq_laneq_f32(v46, *(float32x4_t *)a11->f32, 2));
    uint64_t v48 = *(void *)(a2 + 24);
    _S17 = *(_DWORD *)(v48 + 8);
    __asm { FMLA            S16, S17, V6.S[2] }
    float v55 = *(float *)(v48 + 12) + _S16;
    float v56 = fabsf(v55);
    if (v55 < (float)-a9.f32[0]) {
      float v56 = 3.4028e38;
    }
    v124[0].f32[0] = v56;
    uint64_t v57 = *(unsigned int *)(a2 + 16);
    if (v57 < 2)
    {
      unsigned int v59 = 0;
      unsigned int v58 = 0;
    }
    else
    {
      unsigned int v58 = 0;
      unsigned int v59 = 0;
      float32x2_t v60 = (float *)(v48 + 32);
      for (uint64_t j = 1; j != v57; ++j)
      {
        float v62 = *v60
            + (float)((float)((float)(_Q6.f32[1] * *(v60 - 2)) + (float)(_Q6.f32[0] * *(v60 - 3)))
                    + (float)(_Q6.f32[2] * *(v60 - 1)));
        float v63 = fabsf(v62);
        if (v62 < (float)-a9.f32[0]) {
          float v63 = 3.4028e38;
        }
        v124[0].f32[j] = v63;
        if (v56 > v63)
        {
          unsigned int v59 = j;
          float v56 = v63;
        }
        if (v62 > v55)
        {
          float v55 = v62;
          unsigned int v58 = j;
        }
        v60 += 5;
      }
    }
    if (v56 != 3.4028e38)
    {
      float32x4_t v65 = vnegq_f32(v42);
      v65.i32[3] = 0;
      float32x4_t v66 = *(float32x4_t *)(v48 + 20 * v59);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_f32(v44, v66);
      v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
      float32x4_t v68 = vmulq_f32(v45, v66);
      v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
      float32x4_t v69 = vmulq_f32(v46, v66);
      v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
      *(int8x8_t *)v70.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32), 4uLL);
      v70.i64[1] = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32).u32[0];
      uint64_t v71 = v59;
      float32x4_t v72 = vmulq_f32(v70, v70);
      v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
      float32x2_t v73 = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32);
      float32x2_t v74 = vrsqrte_f32(v73);
      int v75 = 4;
      do
      {
        float32x2_t v74 = vmul_f32(v74, vrsqrts_f32(vmul_f32(v74, v74), v73));
        --v75;
      }
      while (v75);
      __asm { FMOV            V6.2S, #1.0 }
      float32x2_t v77 = vmul_f32(v73, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v73), 0), _D6, (int8x8_t)v74));
      float32x2_t v78 = vrecpe_f32(v77);
      int v79 = 4;
      do
      {
        float32x2_t v78 = vmul_f32(v78, vrecps_f32(v77, v78));
        --v79;
      }
      while (v79);
      if (v57)
      {
        uint64_t v80 = 0;
        float32x4_t v81 = vmulq_n_f32(v70, v78.f32[0]);
        v81.i32[3] = 0;
        float32x4_t v82 = vmulq_f32(v65, v81);
        v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
        float32x2_t v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
        unsigned int v58 = v59;
        do
        {
          if (v80 != v71 && (float)(v124[0].f32[v80] - v56) < a9.f32[0])
          {
            float32x4_t v84 = *(float32x4_t *)(v48 + 20 * v80);
            v84.i32[3] = 0;
            float32x4_t v85 = vmulq_f32(v44, v84);
            v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
            float32x4_t v86 = vmulq_f32(v45, v84);
            v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
            float32x4_t v87 = vmulq_f32(v46, v84);
            v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
            unsigned __int32 v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32).u32[0];
            *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32), 4uLL);
            v89.i64[1] = v88;
            float32x4_t v90 = vmulq_f32(v89, v89);
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
            float32x2_t v92 = vrsqrte_f32(v91);
            int v93 = 4;
            do
            {
              float32x2_t v92 = vmul_f32(v92, vrsqrts_f32(vmul_f32(v92, v92), v91));
              --v93;
            }
            while (v93);
            float32x2_t v94 = vmul_f32(v91, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v91), 0), _D6, (int8x8_t)v92));
            float32x2_t v95 = vrecpe_f32(v94);
            int v96 = 4;
            do
            {
              float32x2_t v95 = vmul_f32(v95, vrecps_f32(v94, v95));
              --v96;
            }
            while (v96);
            float32x4_t v97 = vmulq_n_f32(v89, v95.f32[0]);
            v97.i32[3] = 0;
            float32x4_t v98 = vmulq_f32(v65, v97);
            v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
            float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
            if (vcgt_f32(v83, v99).u8[0])
            {
              unsigned int v58 = v80;
              unsigned int v100 = -1;
            }
            else
            {
              unsigned int v100 = 0;
            }
            float32x2_t v83 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v100), (int8x8_t)v99, (int8x8_t)v83);
          }
          ++v80;
        }
        while (v80 != v57);
      }
      else
      {
        unsigned int v58 = v59;
      }
    }
    uint64_t v123 = (float32x4_t *)(v48 + 20 * v58);
  }
  *(float32x2_t *)a9.f32 = *a7;
  physx::Gu::generatedCapsuleBoxFaceContacts(a1, a2, v123, a3, a4, a5, a6, (float32x4_t *)a8, a9);
  if ((*a6 - v20) <= 1) {
    physx::Gu::generatedContactsEEContacts(a1, *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)v123, (uint64_t)a3, a4, a5, a6, a7, (int8x8_t *)a8);
  }
  return 1;
}

uint64_t physx::Gu::testSATCapsulePoly(float32x4_t *a1, uint64_t a2, void *a3, float32x2_t *a4, float32x2_t *a5, int8x16_t *a6)
{
  unint64_t v6 = *(unsigned int *)(a2 + 16);
  if (v6)
  {
    uint64_t v11 = 0;
    float32x2_t v95 = 0;
    float32x2_t v96 = 0;
    long long v12 = (float32x4_t *)a3[6];
    float32x4_t v13 = *v12;
    float32x4_t v14 = a1[3];
    float32x4_t v15 = a1[4];
    float32x2_t v16 = *(float32x2_t *)a1[5].f32;
    int8x16_t v17 = (int8x16_t)xmmword_23435FD60;
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    __asm { FMOV            V9.2S, #1.0 }
    do
    {
      uint64_t v24 = *(void *)(a2 + 24) + 20 * v11;
      float32x4_t v25 = *(float32x4_t *)(*(void *)(a2 + 32) + 12 * *(unsigned __int8 *)(v24 + 19));
      float32x4_t v26 = *(float32x4_t *)v24;
      v26.i32[3] = 0;
      float32x4_t v27 = vmulq_f32(v13, v26);
      v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
      float32x4_t v28 = vmulq_f32(v12[1], v26);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      int32x2_t v31 = (int32x2_t)vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
      float32x4_t v29 = vmulq_f32(v12[2], v26);
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      *(int8x8_t *)v30.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (int8x8_t)v31, 4uLL);
      v30.i64[1] = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).u32[0];
      v31.i32[0] = *(_DWORD *)(v24 + 12);
      float32x4_t v32 = vmulq_f32(v30, v30);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      float32x2_t v33 = vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32);
      float32x2_t v34 = vrsqrte_f32(v33);
      int v35 = 4;
      do
      {
        float32x2_t v34 = vmul_f32(v34, vrsqrts_f32(vmul_f32(v34, v34), v33));
        --v35;
      }
      while (v35);
      float32x2_t v36 = vmul_f32(v33, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v33), 0), _D9, (int8x8_t)v34));
      float32x2_t v37 = vrecpe_f32(v36);
      int v38 = 4;
      do
      {
        float32x2_t v37 = vmul_f32(v37, vrecps_f32(v36, v37));
        --v38;
      }
      while (v38);
      v25.i32[3] = 0;
      float32x4_t v39 = vmulq_n_f32(v30, v37.f32[0]);
      v39.i32[3] = 0;
      float32x4_t v40 = vmulq_f32(v25, v26);
      v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
      float32x2_t v41 = vmul_f32(v37, vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32));
      float32x2_t v42 = vmul_f32(v37, vneg_f32((float32x2_t)vdup_lane_s32(v31, 0)));
      float32x4_t v43 = vmulq_f32(v14, v39);
      v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
      *(float32x2_t *)v43.f32 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
      float32x4_t v44 = vmulq_f32(v15, v39);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      *(float32x2_t *)v44.f32 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
      float32x2_t v45 = vmin_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.f32);
      *(float32x2_t *)v44.f32 = vmax_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.f32);
      float32x2_t v46 = vsub_f32(v45, v16);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v41, vadd_f32(*a4, vadd_f32(v16, *(float32x2_t *)v44.f32))), (int8x8_t)vcgt_f32(v46, vadd_f32(*a4, v42))), 0), *(int8x8_t *)v13.f32).u32[0] == -1)return 0; {
      float32x2_t v47 = vsub_f32(v42, v46);
      }
      if (vcgt_f32(v18, v47).u8[0]) {
        unsigned int v48 = -1;
      }
      else {
        unsigned int v48 = 0;
      }
      int8x16_t v49 = (int8x16_t)vdupq_n_s32(v48);
      int8x16_t v17 = vbslq_s8(v49, (int8x16_t)v39, v17);
      float32x2_t v18 = (float32x2_t)vbsl_s8(*(int8x8_t *)v49.i8, (int8x8_t)v47, (int8x8_t)v18);
      ++v11;
    }
    while (v11 != v6);
    float32x4_t v50 = a6;
    float32x4_t v89 = a5;
    unint64_t v51 = 0;
    int8x16_t v52 = (int8x16_t)vsubq_f32(v15, v14);
    float32x2_t v53 = (float32x2_t)vextq_s8(v52, v52, 8uLL).u64[0];
    float32x2_t v54 = (float32x2_t)vextq_s8(v52, v52, 4uLL).u64[0];
    float32x2_t v91 = v53;
    uint64_t v92 = v52.i64[0];
    float32x2_t v90 = v54;
    do
    {
      uint64_t v55 = *(void *)(a2 + 24) + 20 * v51;
      int v58 = *(unsigned __int8 *)(v55 + 18);
      uint64_t v57 = (unsigned __int8 *)(v55 + 18);
      int v56 = v58;
      if (v58)
      {
        uint64_t v59 = 0;
        uint64_t v60 = *(void *)(a2 + 40) + *((unsigned __int16 *)v57 - 1);
        LODWORD(v61) = v56 - 1;
        unsigned __int8 v62 = v56;
        do
        {
          unsigned int v63 = *(unsigned __int8 *)(v60 + v61);
          uint64_t v61 = v59;
          uint64_t v64 = *(void *)(a2 + 32);
          float32x4_t v65 = *(float32x4_t *)(v64 + 12 * *(unsigned __int8 *)(v60 + v59));
          v65.i32[3] = 0;
          float32x4_t v66 = *(float32x4_t *)(v64 + 12 * v63);
          v66.i32[3] = 0;
          float32x4_t v67 = vsubq_f32(v66, v65);
          float32x4_t v68 = (float32x4_t *)a3[6];
          float32x4_t v69 = vmulq_f32(*v68, v67);
          v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
          float32x4_t v70 = vmulq_f32(v67, v68[1]);
          v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
          float32x4_t v71 = vmulq_f32(v67, v68[2]);
          v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
          v71.i32[0] = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).u32[0];
          *(int8x8_t *)v69.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), 4uLL);
          int8x8_t v72 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v52.i8, (float32x2_t)vext_s8(*(int8x8_t *)v69.f32, (int8x8_t)v71.u32[0], 4uLL)), v54, *(float32x2_t *)v69.f32);
          *(int8x8_t *)v71.f32 = vext_s8(v72, (int8x8_t)vmls_f32(vmul_f32(v53, *(float32x2_t *)v69.f32), *(float32x2_t *)v52.i8, (float32x2_t)v71.u32[0]), 4uLL);
          v72.i32[1] = 0;
          *(float32x2_t *)v69.f32 = vpadd_f32(vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), vmul_f32((float32x2_t)v72.u32[0], (float32x2_t)v72.u32[0]));
          float32x2_t v73 = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32);
          if (v73.f32[0] >= 0.00000011921)
          {
            *(int8x8_t *)&v71.u32[2] = v72;
            float32x2_t v74 = vrsqrte_f32(v73);
            int v75 = 4;
            do
            {
              float32x2_t v74 = vmul_f32(v74, vrsqrts_f32(vmul_f32(v74, v74), v73));
              --v75;
            }
            while (v75);
            int8x16_t v93 = v17;
            float32x2_t v76 = vmul_f32(v73, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v73), 0), _D9, (int8x8_t)v74));
            float32x2_t v77 = vrecpe_f32(v76);
            int v78 = 4;
            do
            {
              float32x2_t v77 = vmul_f32(v77, vrecps_f32(v76, v77));
              --v78;
            }
            while (v78);
            float32x4_t v79 = vmulq_n_f32(v71, v77.f32[0]);
            v79.i32[3] = 0;
            float32x4_t v94 = v79;
            (*(void (**)(void *, float32x4_t *, float32x2_t *, float32x2_t *))(*a3 + 24))(a3, &v94, &v96, &v95);
            float32x4_t v80 = vmulq_f32(a1[3], v94);
            v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
            *(float32x2_t *)v80.f32 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
            float32x4_t v81 = vmulq_f32(v94, a1[4]);
            v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
            *(float32x2_t *)v81.f32 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
            float32x2_t v82 = vmin_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v81.f32);
            *(float32x2_t *)v81.f32 = vmax_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v81.f32);
            float32x2_t v83 = *(float32x2_t *)a1[5].f32;
            float32x2_t v84 = vsub_f32(v82, v83);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v84, vadd_f32(v95, *a4)), (int8x8_t)vcgt_f32(v96, vadd_f32(vadd_f32(*(float32x2_t *)v81.f32, v83), *a4))), 0), *(int8x8_t *)v94.f32).u32[0] == -1)return 0; {
            float32x2_t v85 = vsub_f32(v95, v84);
            }
            if (vcgt_f32(v18, v85).u8[0]) {
              unsigned int v86 = -1;
            }
            else {
              unsigned int v86 = 0;
            }
            int8x16_t v87 = (int8x16_t)vdupq_n_s32(v86);
            float32x2_t v18 = (float32x2_t)vbsl_s8(*(int8x8_t *)v87.i8, (int8x8_t)v85, (int8x8_t)v18);
            v52.i64[0] = v92;
            int8x16_t v17 = vbslq_s8(v87, (int8x16_t)v94, v93);
            unsigned __int8 v62 = *v57;
            float32x2_t v54 = v90;
            float32x2_t v53 = v91;
          }
          uint64_t v59 = v61 + 1;
        }
        while (v61 + 1 < (unint64_t)v62);
        unint64_t v6 = *(unsigned int *)(a2 + 16);
      }
      ++v51;
    }
    while (v51 < v6);
  }
  else
  {
    float32x4_t v50 = a6;
    float32x4_t v89 = a5;
    int8x16_t v17 = (int8x16_t)xmmword_23435FD60;
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  }
  *float32x4_t v50 = v17;
  *float32x4_t v89 = v18;
  return 1;
}

uint64_t physx::Gu::generateFullContactManifold(float32x4_t *a1, uint64_t a2, void *a3, float32x4_t *a4, uint64_t a5, int *a6, float32x2_t *a7, float32x4_t *a8, float a9, float a10, float32x2_t *a11, char a12)
{
  v130[128] = *(float32x2_t *)MEMORY[0x263EF8340];
  int v21 = *a6;
  float32x4_t v22 = *a8;
  float32x4_t v129 = *a8;
  if (!a12)
  {
    float32x4_t v128 = v22;
    physx::Gu::generatedFaceContacts((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, &v129, *a7);
    if ((*a6 - v21) > 1)
    {
LABEL_64:
      float32x4_t v67 = v128;
      goto LABEL_65;
    }
    float v45 = a10 * 0.01;
    if ((float)(a10 * 0.01) <= a9) {
      float v45 = a9;
    }
    if ((float)(a10 * 0.05) < v45) {
      float v45 = a10 * 0.05;
    }
    float32x2_t v46 = (float32x4_t *)a3[6];
    float32x4_t v47 = *v46;
    float32x4_t v48 = v46[1];
    float32x4_t v49 = v46[2];
    _Q5 = vaddq_f32(vaddq_f32(vmulq_n_f32(*v46, COERCE_FLOAT(*(_OWORD *)a11->f32)), vmulq_lane_f32(v48, *a11, 1)), vmulq_laneq_f32(v49, *(float32x4_t *)a11->f32, 2));
    uint64_t v51 = *(void *)(a2 + 24);
    _S16 = *(_DWORD *)(v51 + 8);
    __asm { FMLA            S7, S16, V5.S[2] }
    float v58 = *(float *)(v51 + 12) + _S7;
    float v59 = fabsf(v58);
    if (v58 < (float)-v45) {
      float v59 = 3.4028e38;
    }
    v130[0].f32[0] = v59;
    uint64_t v60 = *(unsigned int *)(a2 + 16);
    if (v60 < 2)
    {
      unsigned int v62 = 0;
      unsigned int v61 = 0;
    }
    else
    {
      unsigned int v61 = 0;
      unsigned int v62 = 0;
      unsigned int v63 = (float *)(v51 + 32);
      for (uint64_t i = 1; i != v60; ++i)
      {
        float v65 = *v63
            + (float)((float)((float)(_Q5.f32[1] * *(v63 - 2)) + (float)(_Q5.f32[0] * *(v63 - 3)))
                    + (float)(_Q5.f32[2] * *(v63 - 1)));
        float v66 = fabsf(v65);
        if (v65 < (float)-v45) {
          float v66 = 3.4028e38;
        }
        v130[0].f32[i] = v66;
        if (v59 > v66)
        {
          unsigned int v62 = i;
          float v59 = v66;
        }
        if (v65 > v58)
        {
          float v58 = v65;
          unsigned int v61 = i;
        }
        v63 += 5;
      }
    }
    if (v59 != 3.4028e38)
    {
      float32x4_t v68 = vnegq_f32(v128);
      v68.i32[3] = 0;
      float32x4_t v69 = *(float32x4_t *)(v51 + 20 * v62);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_f32(v47, v69);
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      float32x4_t v71 = vmulq_f32(v48, v69);
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      float32x4_t v72 = vmulq_f32(v49, v69);
      v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
      *(int8x8_t *)v73.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), 4uLL);
      v73.i64[1] = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32).u32[0];
      uint64_t v74 = v62;
      float32x4_t v75 = vmulq_f32(v73, v73);
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      float32x2_t v76 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
      float32x2_t v77 = vrsqrte_f32(v76);
      int v78 = 4;
      do
      {
        float32x2_t v77 = vmul_f32(v77, vrsqrts_f32(vmul_f32(v77, v77), v76));
        --v78;
      }
      while (v78);
      __asm { FMOV            V6.2S, #1.0 }
      float32x2_t v80 = vmul_f32(v76, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v76), 0), _D6, (int8x8_t)v77));
      float32x2_t v81 = vrecpe_f32(v80);
      int v82 = 4;
      do
      {
        float32x2_t v81 = vmul_f32(v81, vrecps_f32(v80, v81));
        --v82;
      }
      while (v82);
      if (v60)
      {
        uint64_t v83 = 0;
        float32x4_t v84 = vmulq_n_f32(v73, v81.f32[0]);
        v84.i32[3] = 0;
        float32x4_t v85 = vmulq_f32(v68, v84);
        v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
        float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
        unsigned int v61 = v62;
        do
        {
          if (v83 != v74 && (float)(v130[0].f32[v83] - v59) < v45)
          {
            float32x4_t v87 = *(float32x4_t *)(v51 + 20 * v83);
            v87.i32[3] = 0;
            float32x4_t v88 = vmulq_f32(v47, v87);
            v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
            float32x4_t v89 = vmulq_f32(v48, v87);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            float32x4_t v90 = vmulq_f32(v49, v87);
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            unsigned __int32 v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32).u32[0];
            *(int8x8_t *)v92.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32), 4uLL);
            v92.i64[1] = v91;
            float32x4_t v93 = vmulq_f32(v92, v92);
            v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
            float32x2_t v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
            float32x2_t v95 = vrsqrte_f32(v94);
            int v96 = 4;
            do
            {
              float32x2_t v95 = vmul_f32(v95, vrsqrts_f32(vmul_f32(v95, v95), v94));
              --v96;
            }
            while (v96);
            float32x2_t v97 = vmul_f32(v94, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v94), 0), _D6, (int8x8_t)v95));
            float32x2_t v98 = vrecpe_f32(v97);
            int v99 = 4;
            do
            {
              float32x2_t v98 = vmul_f32(v98, vrecps_f32(v97, v98));
              --v99;
            }
            while (v99);
            float32x4_t v100 = vmulq_n_f32(v92, v98.f32[0]);
            v100.i32[3] = 0;
            float32x4_t v101 = vmulq_f32(v68, v100);
            v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
            float32x2_t v102 = vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32);
            if (vcgt_f32(v86, v102).u8[0])
            {
              unsigned int v61 = v83;
              unsigned int v103 = -1;
            }
            else
            {
              unsigned int v103 = 0;
            }
            float32x2_t v86 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v103), (int8x8_t)v102, (int8x8_t)v86);
          }
          ++v83;
        }
        while (v83 != v60);
      }
      else
      {
        unsigned int v61 = v62;
      }
    }
    uint64_t v127 = v51 + 20 * v61;
LABEL_63:
    physx::Gu::generatedContactsEEContacts(a1, *(void *)(a2 + 32), *(void *)(a2 + 40), v127, (uint64_t)a3, a4, a5, a6, a7, (int8x8_t *)&v129);
    goto LABEL_64;
  }
  uint64_t result = physx::Gu::testSATCapsulePoly(a1, a2, a3, a7, v130, (int8x16_t *)&v129);
  if (!result) {
    return result;
  }
  physx::Gu::generatedFaceContacts((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, &v129, *a7);
  if ((*a6 - v21) < 2)
  {
    uint64_t v24 = *(_OWORD **)(a2 + 24);
    float32x4_t v128 = v129;
    float32x4_t v25 = vnegq_f32(v129);
    v25.i32[3] = 0;
    float32x4_t v26 = (float32x4_t *)a3[5];
    float32x4_t v27 = vmulq_f32(v25, *v26);
    v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
    float32x4_t v28 = vmulq_f32(v25, v26[1]);
    v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
    float32x4_t v29 = vmulq_f32(v25, v26[2]);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    unsigned __int32 v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).u32[0];
    *(int8x8_t *)v31.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32), 4uLL);
    v31.i64[1] = v30;
    float32x4_t v32 = *(float32x4_t *)v24;
    v32.i32[3] = 0;
    float32x4_t v33 = vmulq_f32(v32, v31);
    v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
    float32x2_t v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
    uint64_t v35 = *(unsigned int *)(a2 + 16);
    if (v35 < 2)
    {
      unsigned int v36 = 0;
    }
    else
    {
      unsigned int v36 = 0;
      float32x2_t v37 = (_OWORD *)((char *)v24 + 20);
      for (uint64_t j = 1; j != v35; ++j)
      {
        float32x4_t v39 = *(float32x4_t *)v37;
        float32x2_t v37 = (_OWORD *)((char *)v37 + 20);
        float32x4_t v40 = v39;
        v40.i32[3] = 0;
        float32x4_t v41 = vmulq_f32(v40, v31);
        v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
        float32x2_t v42 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
        if (vcgt_f32(v34, v42).u8[0])
        {
          unsigned int v36 = j;
          unsigned int v43 = -1;
        }
        else
        {
          unsigned int v43 = 0;
        }
        float32x2_t v34 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v43), (int8x8_t)v42, (int8x8_t)v34);
      }
    }
    uint64_t v104 = *(unsigned int *)(a2 + 20);
    if (v104)
    {
      uint64_t v105 = 0;
      float32x4_t v106 = vnegq_f32(v31);
      v106.i32[3] = 0;
      uint64_t v107 = *(void *)(a2 + 48);
      float32x2_t v108 = vmul_f32(v34, v34);
      int v109 = -1;
      do
      {
        float32x4_t v110 = (unsigned __int8 *)(v107 + (2 * v105));
        float32x4_t v111 = *(float32x4_t *)((char *)v24 + 20 * *v110);
        v111.i32[3] = 0;
        float32x4_t v112 = *(float32x4_t *)((char *)v24 + 20 * v110[1]);
        v112.i32[3] = 0;
        float32x4_t v113 = vaddq_f32(v111, v112);
        float32x4_t v114 = vmulq_f32(v113, v113);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        float32x2_t v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
        float32x4_t v116 = vmulq_f32(v106, v113);
        v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
        float32x2_t v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
        float32x2_t v118 = vmul_f32(v117, v117);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v118, vmul_f32(v108, v115)), (int8x8_t)vcgez_f32(v117)), 0), *(int8x8_t *)v106.f32).u32[0] == -1)
        {
          float32x2_t v119 = vrecpe_f32(v115);
          int v120 = 4;
          do
          {
            float32x2_t v119 = vmul_f32(v119, vrecps_f32(v115, v119));
            --v120;
          }
          while (v120);
          float32x2_t v108 = vmul_f32(v118, v119);
          int v109 = v105;
        }
        ++v105;
      }
      while (v105 != v104);
      if (v109 != -1)
      {
        float32x4_t v121 = (unsigned __int8 *)(v107 + (2 * v109));
        unsigned int v122 = *v121;
        float32x4_t v123 = *(float32x4_t *)((char *)v24 + 20 * *v121);
        unsigned int v36 = v121[1];
        v123.i32[3] = 0;
        float32x4_t v124 = *(float32x4_t *)((char *)v24 + 20 * v36);
        v124.i32[3] = 0;
        float32x4_t v125 = vmulq_f32(v106, v123);
        v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
        float32x4_t v126 = vmulq_f32(v106, v124);
        v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
        if (vcgt_f32(vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32), vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32)).u8[0])unsigned int v36 = v122; {
      }
        }
    }
    uint64_t v127 = (uint64_t)v24 + 20 * (int)v36;
    goto LABEL_63;
  }
  float32x4_t v67 = v129;
LABEL_65:
  *a8 = v67;
  return 1;
}

__n128 physx::Gu::generatedFaceContacts(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, _DWORD *a6, float32x4_t *a7, float32x2_t a8)
{
  float32x4_t v15 = vnegq_f32(*a7);
  uint64_t v8 = *(float32x4_t **)(a3 + 48);
  float32x4_t v9 = *v8;
  float32x4_t v10 = v8[1];
  float32x4_t v11 = vmulq_n_f32(*v8, v15.f32[0]);
  float32x4_t v12 = vmulq_lane_f32(v10, *(float32x2_t *)v15.f32, 1);
  float32x4_t v13 = v8[2];
  float32x4_t v14 = vmulq_laneq_f32(v13, v15, 2);
  v15.i32[3] = 0;
  v11.i32[3] = 0;
  v12.i32[3] = 0;
  v14.i32[3] = 0;
  result.n128_u64[0] = (unint64_t)vadd_f32(*(float32x2_t *)(a1 + 80), a8);
  float32x4_t v17 = vaddq_f32(vaddq_f32(v11, v12), v14);
  float32x4_t v18 = *(float32x4_t *)(a1 + 48);
  size_t v19 = (float32x4_t *)*(unsigned int *)(a2 + 16);
  if (v19)
  {
    uint64_t v20 = 0;
    float32x4_t v21 = vmulq_n_f32(v9, v18.f32[0]);
    v21.i32[3] = 0;
    float32x4_t v22 = vmulq_lane_f32(v10, *(float32x2_t *)v18.f32, 1);
    v22.i32[3] = 0;
    float32x4_t v23 = vmulq_laneq_f32(v13, v18, 2);
    v23.i32[3] = 0;
    float32x4_t v24 = vaddq_f32(v23, vaddq_f32(v21, v22));
    __asm { FMOV            V17.2S, #1.0 }
    float32x2_t v30 = 0;
    while (1)
    {
      float32x4_t v31 = *(float32x4_t *)(*(void *)(a2 + 24) + 20 * v20);
      float32x2_t v32 = (float32x2_t)vdup_laneq_s32((int32x4_t)v31, 3);
      v31.i32[3] = 0;
      float32x4_t v33 = vmulq_f32(v17, v31);
      v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
      float32x2_t v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
      float32x4_t v35 = vmulq_f32(v24, v31);
      v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
      float32x2_t v36 = vadd_f32(v32, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32));
      if (vabs_f32(v34).f32[0] < 0.0000001)
      {
        if (v36.f32[0] > 0.0) {
          break;
        }
      }
      else
      {
        float32x2_t v37 = vrecpe_f32(v34);
        int v38 = 4;
        do
        {
          float32x2_t v37 = vmul_f32(v37, vrecps_f32(v34, v37));
          --v38;
        }
        while (v38);
        float32x2_t v39 = vmul_f32(v37, vneg_f32(v36));
        int8x8_t v40 = (int8x8_t)vcltz_f32(v34);
        float32x2_t v30 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v39, v30), v40), 0), (int8x8_t)v39, (int8x8_t)v30);
        _D17 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vbic_s8((int8x8_t)vcgt_f32(_D17, v39), v40), 0), (int8x8_t)v39, (int8x8_t)_D17);
      }
      if (vcgt_f32(v30, _D17).u8[0]) {
        break;
      }
      if ((float32x4_t *)++v20 == v19) {
        goto LABEL_12;
      }
    }
  }
  else
  {
    float32x2_t v30 = 0;
LABEL_12:
    if (vcge_f32((float32x2_t)result.n128_u64[0], v30).u8[0])
    {
      float32x4_t v41 = vsubq_f32(v18, a4[3]);
      float32x4_t v42 = vmulq_f32(*a4, v41);
      v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
      float32x4_t v43 = vmulq_f32(v41, a4[1]);
      v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
      float32x4_t v44 = vmulq_f32(v41, a4[2]);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      *(int8x8_t *)&long long v45 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), 4uLL);
      *((void *)&v45 + 1) = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).u32[0];
      *(_OWORD *)(a5 + 48 * *a6) = v45;
      int8x16_t v46 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 48), v15, v30.f32[0]);
      v46.i64[1] = vextq_s8(v46, v46, 8uLL).u32[0];
      *(int8x16_t *)(a5 + 48 * *a6 + 16) = v46;
      float32x4_t v47 = *a7;
      v47.i32[3] = v30.i32[1];
      unsigned int v48 = (*a6)++;
      *(float32x4_t *)(a5 + 48 * v48 + 32) = v47;
      size_t v19 = *(float32x4_t **)(a3 + 48);
      float32x4_t v9 = *v19;
      float32x4_t v10 = v19[1];
      float32x4_t v13 = v19[2];
      LODWORD(v19) = *(_DWORD *)(a2 + 16);
    }
  }
  float32x4_t v49 = *(float32x4_t *)(a1 + 64);
  if (v19)
  {
    uint64_t v50 = 0;
    float32x4_t v51 = vmulq_n_f32(v9, v49.f32[0]);
    v51.i32[3] = 0;
    float32x4_t v52 = vmulq_lane_f32(v10, *(float32x2_t *)v49.f32, 1);
    v52.i32[3] = 0;
    float32x4_t v53 = vmulq_laneq_f32(v13, v49, 2);
    v53.i32[3] = 0;
    float32x4_t v54 = vaddq_f32(v53, vaddq_f32(v51, v52));
    __asm { FMOV            V5.2S, #1.0 }
    float32x2_t v56 = 0;
    while (1)
    {
      float32x4_t v57 = *(float32x4_t *)(*(void *)(a2 + 24) + 20 * v50);
      float32x2_t v58 = (float32x2_t)vdup_laneq_s32((int32x4_t)v57, 3);
      v57.i32[3] = 0;
      float32x4_t v59 = vmulq_f32(v17, v57);
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      float32x2_t v60 = vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32);
      float32x4_t v61 = vmulq_f32(v54, v57);
      v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
      float32x2_t v62 = vadd_f32(v58, vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32));
      if (vabs_f32(v60).f32[0] < 0.0000001)
      {
        if (v62.f32[0] > 0.0) {
          return result;
        }
      }
      else
      {
        float32x2_t v63 = vrecpe_f32(v60);
        int v64 = 4;
        do
        {
          float32x2_t v63 = vmul_f32(v63, vrecps_f32(v60, v63));
          --v64;
        }
        while (v64);
        float32x2_t v65 = vmul_f32(v63, vneg_f32(v62));
        int8x8_t v66 = (int8x8_t)vcltz_f32(v60);
        float32x2_t v56 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v65, v56), v66), 0), (int8x8_t)v65, (int8x8_t)v56);
        _D5 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vbic_s8((int8x8_t)vcgt_f32(_D5, v65), v66), 0), (int8x8_t)v65, (int8x8_t)_D5);
      }
      if (vcgt_f32(v56, _D5).u8[0]) {
        break;
      }
      if (++v50 == v19) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    float32x2_t v56 = 0;
LABEL_25:
    result.n128_u64[0] = (unint64_t)vcge_f32((float32x2_t)result.n128_u64[0], v56);
    if (result.n128_u8[0])
    {
      float32x4_t v67 = vsubq_f32(v49, a4[3]);
      float32x4_t v68 = vmulq_f32(*a4, v67);
      v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
      float32x4_t v69 = vmulq_f32(v67, a4[1]);
      v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
      float32x4_t v70 = vmulq_f32(v67, a4[2]);
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      *(int8x8_t *)&long long v71 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), 4uLL);
      *((void *)&v71 + 1) = vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32).u32[0];
      *(_OWORD *)(a5 + 48 * *a6) = v71;
      int8x16_t v72 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 64), v15, v56.f32[0]);
      v72.i64[1] = vextq_s8(v72, v72, 8uLL).u32[0];
      *(int8x16_t *)(a5 + 48 * *a6 + 16) = v72;
      __n128 result = *(__n128 *)a7;
      result.n128_u32[3] = v56.u32[1];
      unsigned int v73 = (*a6)++;
      *(__n128 *)(a5 + 48 * v73 + 32) = result;
    }
  }
  return result;
}

uint64_t physx::Gu::generateSphereFullContactManifold(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, float32x2_t *a6, float32x4_t *a7, char a8)
{
  if ((a8 & 1) == 0)
  {
    float32x4_t v12 = *a7;
LABEL_17:
    float32x4_t v45 = vnegq_f32(v12);
    uint64_t v46 = *(unsigned int *)(a2 + 16);
    if (v46)
    {
      uint64_t v47 = 0;
      unsigned int v48 = *(float32x4_t **)(a3 + 48);
      float32x4_t v49 = v48[1];
      float32x4_t v50 = vmulq_n_f32(*v48, v45.f32[0]);
      v50.i32[3] = 0;
      float32x4_t v51 = vmulq_lane_f32(v49, *(float32x2_t *)v45.f32, 1);
      v51.i32[3] = 0;
      float32x4_t v52 = v48[2];
      float32x4_t v53 = vmulq_laneq_f32(v52, v45, 2);
      v53.i32[3] = 0;
      float32x4_t v54 = vaddq_f32(v50, v51);
      float32x4_t v55 = a1[3];
      float32x4_t v56 = vmulq_n_f32(*v48, v55.f32[0]);
      v56.i32[3] = 0;
      float32x4_t v57 = vmulq_lane_f32(v49, *(float32x2_t *)v55.f32, 1);
      v57.i32[3] = 0;
      float32x4_t v58 = vaddq_f32(v54, v53);
      float32x4_t v59 = vmulq_laneq_f32(v52, v55, 2);
      v59.i32[3] = 0;
      float32x4_t v60 = vaddq_f32(v59, vaddq_f32(v56, v57));
      __asm { FMOV            V6.2S, #1.0 }
      float32x2_t v62 = 0;
      while (1)
      {
        float32x4_t v63 = *(float32x4_t *)(*(void *)(a2 + 24) + 20 * v47);
        float32x2_t v64 = (float32x2_t)vdup_laneq_s32((int32x4_t)v63, 3);
        v63.i32[3] = 0;
        float32x4_t v65 = vmulq_f32(v58, v63);
        v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
        float32x2_t v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
        float32x4_t v67 = vmulq_f32(v60, v63);
        v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
        float32x2_t v68 = vadd_f32(v64, vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32));
        if (vabs_f32(v66).f32[0] < 0.0000001)
        {
          if (v68.f32[0] > 0.0) {
            return 1;
          }
        }
        else
        {
          float32x2_t v69 = vrecpe_f32(v66);
          int v70 = 4;
          do
          {
            float32x2_t v69 = vmul_f32(v69, vrecps_f32(v66, v69));
            --v70;
          }
          while (v70);
          float32x2_t v71 = vmul_f32(v69, vneg_f32(v68));
          int8x8_t v72 = (int8x8_t)vcltz_f32(v66);
          float32x2_t v62 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v71, v62), v72), 0), (int8x8_t)v71, (int8x8_t)v62);
          _D6 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)vbic_s8((int8x8_t)vcgt_f32(_D6, v71), v72), 0), (int8x8_t)v71, (int8x8_t)_D6);
        }
        if (vcgt_f32(v62, _D6).u8[0]) {
          break;
        }
        if (++v47 == v46) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      float32x2_t v62 = 0;
LABEL_28:
      if ((float)(COERCE_FLOAT(a1[5].i64[0]) + COERCE_FLOAT(*a6)) >= v62.f32[0])
      {
        v45.i32[3] = 0;
        unsigned int v73 = (void *)(a4 + 48 * *a5);
        *unsigned int v73 = 0;
        v73[1] = 0;
        int8x16_t v74 = (int8x16_t)vmlaq_n_f32(a1[3], v45, v62.f32[0]);
        v74.i64[1] = vextq_s8(v74, v74, 8uLL).u32[0];
        *(int8x16_t *)(a4 + 48 * *a5 + 16) = v74;
        float32x4_t v75 = *a7;
        v75.i32[3] = v62.i32[1];
        LODWORD(v73) = (*a5)++;
        *(float32x4_t *)(a4 + 48 * v73 + 32) = v75;
      }
    }
    return 1;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 16);
  if (!v8)
  {
    float32x4_t v12 = (float32x4_t)xmmword_23435FD60;
LABEL_16:
    *a7 = v12;
    goto LABEL_17;
  }
  uint64_t v9 = 0;
  float32x4_t v10 = *(float32x4_t **)(a3 + 48);
  float32x2_t v11 = *(float32x2_t *)a1[5].f32;
  float32x4_t v12 = (float32x4_t)xmmword_23435FD60;
  float32x2_t v13 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  __asm { FMOV            V16.2S, #1.0 }
  while (1)
  {
    uint64_t v19 = *(void *)(a2 + 24) + 20 * v9;
    float32x4_t v20 = *(float32x4_t *)(*(void *)(a2 + 32) + 12 * *(unsigned __int8 *)(v19 + 19));
    float32x4_t v21 = *(float32x4_t *)v19;
    v21.i32[3] = 0;
    float32x4_t v22 = vmulq_f32(*v10, v21);
    v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
    float32x4_t v23 = vmulq_f32(v10[1], v21);
    v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
    int32x2_t v26 = (int32x2_t)vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
    float32x4_t v24 = vmulq_f32(v10[2], v21);
    v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
    *(int8x8_t *)v25.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), (int8x8_t)v26, 4uLL);
    v25.i64[1] = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).u32[0];
    v26.i32[0] = *(_DWORD *)(v19 + 12);
    float32x4_t v27 = vmulq_f32(v25, v25);
    v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
    float32x2_t v28 = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32);
    float32x2_t v29 = vrsqrte_f32(v28);
    int v30 = 4;
    do
    {
      float32x2_t v29 = vmul_f32(v29, vrsqrts_f32(vmul_f32(v29, v29), v28));
      --v30;
    }
    while (v30);
    float32x2_t v31 = vmul_f32(v28, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v28), 0), _D16, (int8x8_t)v29));
    float32x2_t v32 = vrecpe_f32(v31);
    int v33 = 4;
    do
    {
      float32x2_t v32 = vmul_f32(v32, vrecps_f32(v31, v32));
      --v33;
    }
    while (v33);
    v20.i32[3] = 0;
    float32x4_t v34 = vmulq_n_f32(v25, v32.f32[0]);
    v34.i32[3] = 0;
    float32x4_t v35 = vmulq_f32(v20, v21);
    v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
    float32x2_t v36 = vmul_f32(v32, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32));
    float32x2_t v37 = vmul_f32(v32, vneg_f32((float32x2_t)vdup_lane_s32(v26, 0)));
    float32x4_t v38 = vmulq_f32(a1[3], v34);
    v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
    *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
    float32x4_t v39 = vmulq_f32(a1[4], v34);
    v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
    *(float32x2_t *)v39.f32 = vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32);
    float32x2_t v40 = vmin_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32);
    *(float32x2_t *)v39.f32 = vmax_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32);
    float32x2_t v41 = vsub_f32(v40, v11);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v36, vadd_f32(*a6, vadd_f32(v11, *(float32x2_t *)v39.f32))), (int8x8_t)vcgt_f32(v41, vadd_f32(*a6, v37))), 0), *(int8x8_t *)v12.f32).u32[0] == -1)return 0; {
    float32x2_t v42 = vsub_f32(v37, v41);
    }
    if (vcgt_f32(v13, v42).u8[0]) {
      unsigned int v43 = -1;
    }
    else {
      unsigned int v43 = 0;
    }
    int8x16_t v44 = (int8x16_t)vdupq_n_s32(v43);
    float32x4_t v12 = (float32x4_t)vbslq_s8(v44, (int8x16_t)v34, (int8x16_t)v12);
    float32x2_t v13 = (float32x2_t)vbsl_s8(*(int8x8_t *)v44.i8, (int8x8_t)v42, (int8x8_t)v13);
    if (++v9 == v8) {
      goto LABEL_16;
    }
  }
}

double physx::Gu::computeMTD(float32x4_t *a1, uint64_t a2, void *a3, float32x2_t *a4, float32x4_t *a5)
{
  float32x2_t v23 = 0;
  int8x16_t v22 = 0uLL;
  double v21 = 0.0;
  if (physx::Gu::testSATCapsulePoly(a1, a2, a3, &v23, (float32x2_t *)&v21, &v22))
  {
    uint64_t v9 = (int32x4_t *)a3[4];
    float32x4_t v10 = *(float32x4_t *)v9;
    v10.i32[3] = 0;
    float32x2_t v11 = (float32x2_t)vdupq_laneq_s32(*v9, 3).u64[0];
    float32x4_t v12 = vmulq_n_f32((float32x4_t)v22, vmla_f32((float32x2_t)0xBF000000BF000000, v11, v11).f32[0]);
    v12.i32[3] = 0;
    float32x2_t v13 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    float32x2_t v14 = (float32x2_t)vextq_s8(v22, v22, 8uLL).u64[0];
    int8x8_t v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9->i8, (float32x2_t)vext_s8(*(int8x8_t *)v22.i8, (int8x8_t)v14, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v9->i8, (int8x8_t)v13, 4uLL), *(float32x2_t *)v22.i8);
    *(int8x8_t *)v16.f32 = vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v22.i8), *(float32x2_t *)v9->i8, v14), 4uLL);
    v16.i64[1] = v15.u32[0];
    float32x4_t v17 = vmlaq_laneq_f32(v12, v16, *(float32x4_t *)v9, 3);
    v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
    float32x4_t v18 = vmulq_f32(v10, (float32x4_t)v22);
    v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
    float32x4_t v19 = vmlaq_n_f32(v17, v10, vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32).f32[0]);
    float32x4_t v20 = vaddq_f32(v19, v19);
    v20.i32[3] = 0;
    *a5 = v20;
    double result = v21;
    *(double *)a4 = v21;
  }
  return result;
}

BOOL physx::Gu::pcmContactPlaneBox(uint64_t a1, _DWORD *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, float32x4_t **a6, uint64_t a7)
{
  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  float32x4_t v14 = *a4;
  v15.i64[0] = a4[1].i64[0];
  v15.i64[1] = a4[1].u32[2];
  v16.i64[0] = a3[1].i64[0];
  v16.i64[1] = a3[1].u32[2];
  v202[0] = *a3;
  v202[1] = v16;
  float32x4_t v17 = vnegq_f32(v202[0]);
  float32x2_t v18 = (float32x2_t)vextq_s8((int8x16_t)v202[0], (int8x16_t)v202[0], 8uLL).u64[0];
  float32x2_t v19 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v202[0], 3).u64[0];
  float32x4_t v20 = vsubq_f32(v15, v16);
  float32x4_t v21 = v17;
  v21.i32[3] = 0;
  float32x4_t v22 = vmulq_n_f32(v20, vmla_f32((float32x2_t)0xBF000000BF000000, v19, v19).f32[0]);
  v22.i32[3] = 0;
  float32x2_t v23 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  float32x2_t v24 = (float32x2_t)vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)v23, 4uLL);
  int8x8_t v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL)), v24, *(float32x2_t *)v20.f32);
  *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(v23, *(float32x2_t *)v20.f32), *(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
  v26.i64[1] = v25.u32[0];
  float32x4_t v27 = vmlaq_laneq_f32(v22, v26, v202[0], 3);
  v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
  float32x4_t v28 = vmulq_f32(v21, v20);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  float32x4_t v29 = vmlaq_n_f32(v27, v21, vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
  float32x4_t v30 = v14;
  v30.i32[3] = 0;
  int8x16_t v31 = (int8x16_t)vmulq_f32(v14, v202[0]);
  float32x4_t v32 = vmulq_f32(v30, v21);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  float32x2_t v33 = vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32);
  float32x4_t v34 = vmulq_laneq_f32(v30, v202[0], 3);
  float32x4_t v35 = vmulq_n_f32(v202[0], vadd_f32(*(float32x2_t *)v202[0].f32, *(float32x2_t *)v202[0].f32).f32[0]);
  int8x16_t v39 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL);
  *(int8x8_t *)_Q17.f32 = vext_s8((int8x8_t)v19, (int8x8_t)v18, 4uLL);
  _Q17.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v202[0].f32, 1)).u32[0];
  float32x2_t v37 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v14.f32, *(int8x8_t *)v39.i8, 4uLL), *(float32x2_t *)v17.f32);
  v35.i32[3] = 0;
  float32x4_t v38 = vmlaq_n_f32(v35, _Q17, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(v18, v18), 1).i32);
  __asm { FMOV            V17.2S, #-1.0 }
  *(float32x2_t *)v39.i8 = vneg_f32(*(float32x2_t *)v39.i8);
  v38.i64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
  int8x8_t v40 = (int8x8_t)vmls_f32(v37, v24, *(float32x2_t *)v14.f32);
  v38.i32[0] = vadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)_Q17.f32).u32[0];
  float32x4_t v41 = vnegq_f32(v38);
  v41.i32[3] = 0;
  float32x4_t v42 = vaddq_f32(vmulq_laneq_f32(v21, v14, 3), v34);
  float32x4_t v43 = vmulq_f32(v41, v41);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  float32x2_t v44 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
  float32x2_t v45 = vrsqrte_f32(v44);
  int v46 = 4;
  do
  {
    float32x2_t v45 = vmul_f32(v45, vrsqrts_f32(vmul_f32(v45, v45), v44));
    --v46;
  }
  while (v46);
  *(int8x8_t *)v47.f32 = vext_s8(v40, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v14.f32, v23), *(float32x2_t *)v17.f32, *(float32x2_t *)v39.i8), 4uLL);
  *(int8x8_t *)&v47.u32[2] = v40;
  float32x2_t v48 = (float32x2_t)vextq_s8(v31, v31, 8uLL).u64[0];
  __asm { FMOV            V1.2S, #1.0 }
  float32x2_t v50 = vmul_f32(v44, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v44), 0), (int8x8_t)_D1, (int8x8_t)v45));
  float32x2_t v51 = vrecpe_f32(v50);
  int v52 = 4;
  do
  {
    float32x2_t v51 = vmul_f32(v51, vrecps_f32(v50, v51));
    --v52;
  }
  while (v52);
  float32x4_t v53 = vaddq_f32(v29, v29);
  float32x2_t v54 = vsub_f32(v48, v33);
  float32x4_t v55 = vaddq_f32(v42, v47);
  float32x4_t v56 = v53;
  v56.i32[3] = 0;
  float32x4_t v57 = vmulq_n_f32(v41, v51.f32[0]);
  v57.i32[3] = 0;
  float32x4_t v201 = v57;
  v57.i64[0] = *(void *)a5;
  float32x2_t v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5, 0);
  float32x2_t v200 = v58;
  v39.i32[0] = a2[1];
  float32x4_t v59 = (float32x4_t)v39;
  v59.i32[1] = a2[2];
  float32x4_t v60 = v59;
  v60.i32[2] = a2[3];
  float32x2_t v61 = (float32x2_t)vdup_laneq_s32((int32x4_t)v60, 2);
  float32x2_t v62 = vpmin_f32(v61, *(float32x2_t *)v59.f32);
  v57.f32[0] = *(float *)(a5 + 8) * 0.15;
  float32x2_t v63 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 1);
  float32x2_t v64 = vmul_f32(vmin_f32(vmul_f32(vpmin_f32(v62, v62), (float32x2_t)vdup_n_s32(0x3E19999Au)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0)), (float32x2_t)vdup_n_s32(0x3E4CCCCDu));
  *(int32x2_t *)v57.f32 = vdup_laneq_s32((int32x4_t)v55, 2);
  float32x4_t v65 = vaddq_f32(v55, v55);
  int v66 = _X20[4].u8[0];
  float32x2_t v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
  float32x2_t v68 = (float32x2_t)vdup_laneq_s32((int32x4_t)v65, 2);
  float32x2_t v69 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v65.f32), 0);
  float32x2_t v70 = vmul_lane_f32(v63, *(float32x2_t *)v65.f32, 1);
  float32x2_t v71 = vmul_laneq_f32(*(float32x2_t *)v57.f32, v65, 2);
  float32x2_t v72 = vmul_n_f32(v63, v65.f32[0]);
  float32x2_t v73 = vmul_n_f32(*(float32x2_t *)v57.f32, v65.f32[0]);
  float32x2_t v74 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0), v54, 1);
  *(float32x2_t *)v65.f32 = vmul_lane_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v65.f32, 1);
  float32x2_t v75 = vmul_lane_f32(v67, v54, 1);
  *(float32x2_t *)v57.f32 = vmul_lane_f32(v68, v54, 1);
  float32x2_t v76 = vsub_f32(_D1, v69);
  *(int8x8_t *)v77.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v70), v71), (int8x8_t)vadd_f32(v72, *(float32x2_t *)v57.f32), 4uLL);
  v77.i64[1] = vsub_f32(v73, v75).u32[0];
  *(int8x8_t *)v78.f32 = vext_s8((int8x8_t)vsub_f32(v72, *(float32x2_t *)v57.f32), (int8x8_t)vsub_f32(v76, v71), 4uLL);
  v78.i64[1] = vadd_f32(*(float32x2_t *)v65.f32, v74).u32[0];
  *(int8x8_t *)v79.f32 = vext_s8((int8x8_t)vadd_f32(v73, v75), (int8x8_t)vsub_f32(*(float32x2_t *)v65.f32, v74), 4uLL);
  v79.i64[1] = vsub_f32(v76, v70).u32[0];
  if (_X20[4].i8[0])
  {
    float32x2_t v80 = vmul_f32(v64, v64);
    unsigned int v81 = v66 - 1;
    do
    {
      uint64_t v82 = _X20[5].i64[0];
      uint64_t v83 = v81;
      float32x4_t v84 = (float32x4_t *)(v82 + 48 * v81);
      float32x4_t v85 = v84[1];
      float32x4_t v86 = vmulq_n_f32(v77, COERCE_FLOAT(*v84));
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_lane_f32(v78, *(float32x2_t *)v84->f32, 1);
      v87.i32[3] = 0;
      float32x4_t v88 = vmulq_laneq_f32(v79, *v84, 2);
      v88.i32[3] = 0;
      float32x4_t v89 = vaddq_f32(v56, vaddq_f32(v88, vaddq_f32(v86, v87)));
      float32x4_t v90 = v84[2];
      float32x4_t v91 = v90;
      v91.i32[3] = 0;
      float32x4_t v92 = vmulq_f32(v91, vsubq_f32(v89, v85));
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
      float32x4_t v94 = vmlsq_lane_f32(v89, v91, v93, 0);
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      float32x4_t v95 = vsubq_f32(v85, v94);
      float32x4_t v96 = vmulq_f32(v95, v95);
      v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32), v80), 0), *(int8x8_t *)v56.f32).u32[0] == -1)
      {
        unsigned __int8 v97 = _X20[4].i8[0] - 1;
        _X20[4].i8[0] = v97;
        float32x2_t v98 = (float32x4_t *)(v82 + 48 * v97);
        float32x4_t v99 = *v98;
        float32x4_t v100 = v98[2];
        v84[1] = v98[1];
        v84[2] = v100;
        *float32x4_t v84 = v99;
      }
      else
      {
        v90.i32[3] = v93.i32[1];
        v84[2] = v90;
      }
      --v81;
    }
    while (v83);
    int v101 = _X20[4].u8[0];
  }
  else
  {
    int v101 = 0;
  }
  v55.i32[3] = v54.i32[1];
  if (v101 != v66
    || (int8x16_t v102 = (int8x16_t)vabdq_f32(v56, _X20[1]),
        *(float32x2_t *)v102.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL), *(float32x2_t *)v102.i8), float32x4_t v103 = vmulq_f32(v55, *_X20), v103.i64[0] = vpaddq_f32(v103, v103).u64[0], vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8), v64)), 0), *(int8x8_t *)v56.f32).u32[0] == -1))
  {
    unsigned int v104 = 0;
    float32x2_t v105 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 0).u64[0];
    float32x2_t v106 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1).u64[0];
    float32x4_t v107 = vmulq_n_f32(v77, *(float *)v39.i32);
    float32x4_t v108 = vmulq_lane_f32(v78, *(float32x2_t *)v59.f32, 1);
    float32x2_t v109 = vsub_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v108.f32);
    v107.i32[3] = 0;
    float32x4_t v110 = v108;
    v110.i32[3] = 0;
    _X20[4].i8[0] = 0;
    float32x4_t v111 = vmulq_laneq_f32(v79, v60, 2);
    float32x4_t v112 = v111;
    v112.i32[3] = 0;
    *_X20 = v55;
    _X20[1] = v56;
    float32x2_t v113 = (float32x2_t)vnegq_f32(v112).u64[0];
    float32x2_t v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 0);
    float32x4_t v115 = vaddq_f32(v107, v110);
    float32x4_t v116 = vaddq_f32(v112, v115);
    float32x2_t v117 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 0);
    float32x2_t v118 = (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v115.f32, v113), 0);
    int32x2_t v119 = (int32x2_t)vadd_f32(*(float32x2_t *)v111.f32, v109);
    int32x2_t v120 = (int32x2_t)vsub_f32(v109, *(float32x2_t *)v111.f32);
    float32x2_t v121 = vsub_f32(v58, v114);
    if (vcgt_f32(v121, v117).u8[0])
    {
      float32x2_t v122 = vadd_f32(v114, v117);
      int8x16_t v123 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, v116), (float32x4_t)xmmword_2344232A0, v122.f32[0]);
      v123.i64[1] = vextq_s8(v123, v123, 8uLL).u32[0];
      *(float32x4_t *)a7 = v60;
      *(int8x16_t *)(a7 + 16) = v123;
      __int32 v124 = v122.i32[1];
      v125.i64[0] = 0;
      v125.i32[2] = 0;
      v125.i32[3] = v124;
      *(int8x16_t *)(a7 + 32) = vorrq_s8(v125, (int8x16_t)xmmword_23435FD50);
      unsigned int v104 = 1;
    }
    int32x2_t v126 = (int32x2_t)vsub_f32(*(float32x2_t *)v111.f32, v109);
    int8x8_t v127 = (int8x8_t)vneg_f32(v106);
    unsigned __int32 v128 = vneg_f32(v61).u32[0];
    float32x2_t v129 = (float32x2_t)vdup_lane_s32(v119, 0);
    if (vcgt_f32(v121, v118).u8[0])
    {
      float32x2_t v130 = vadd_f32(v114, v118);
      *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)v105, (int8x8_t)v106, 4uLL);
      v131.i64[1] = v128;
      float32x4_t v132 = vmulq_n_f32(v77, v131.f32[0]);
      v132.i32[3] = 0;
      float32x4_t v133 = vmulq_lane_f32(v78, *(float32x2_t *)v131.f32, 1);
      v133.i32[3] = 0;
      uint64_t v134 = a7 + 48 * v104;
      float32x4_t v135 = vaddq_f32(v132, v133);
      float32x4_t v136 = vmulq_laneq_f32(v79, v131, 2);
      v136.i32[3] = 0;
      int8x16_t v137 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v136, v135)), (float32x4_t)xmmword_2344232A0, v130.f32[0]);
      v137.i64[1] = vextq_s8(v137, v137, 8uLL).u32[0];
      *(float32x4_t *)uint64_t v134 = v131;
      *(int8x16_t *)(v134 + 16) = v137;
      v137.i64[0] = 0;
      v137.i32[2] = 0;
      v137.i32[3] = v130.i32[1];
      ++v104;
      *(int8x16_t *)(v134 + 32) = vorrq_s8(v137, (int8x16_t)xmmword_23435FD50);
    }
    int32x2_t v138 = (int32x2_t)vsub_f32(v113, v109);
    float32x2_t v139 = (float32x2_t)vdup_lane_s32(v120, 0);
    *(int8x8_t *)v140.f32 = vext_s8((int8x8_t)v105, v127, 4uLL);
    if (vcgt_f32(v121, v129).u32[0])
    {
      float32x2_t v141 = vadd_f32(v114, v129);
      v142.i64[0] = v140.i64[0];
      v142.i64[1] = v61.u32[0];
      float32x4_t v143 = vmulq_n_f32(v77, v140.f32[0]);
      v143.i32[3] = 0;
      float32x4_t v144 = vmulq_lane_f32(v78, *(float32x2_t *)v140.f32, 1);
      v144.i32[3] = 0;
      uint64_t v145 = a7 + 48 * v104;
      float32x4_t v146 = vaddq_f32(v143, v144);
      float32x4_t v147 = vmulq_laneq_f32(v79, v142, 2);
      v147.i32[3] = 0;
      int8x16_t v148 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v147, v146)), (float32x4_t)xmmword_2344232A0, v141.f32[0]);
      v148.i64[1] = vextq_s8(v148, v148, 8uLL).u32[0];
      *(float32x4_t *)uint64_t v145 = v142;
      *(int8x16_t *)(v145 + 16) = v148;
      v148.i64[0] = 0;
      v148.i32[2] = 0;
      v148.i32[3] = v141.i32[1];
      ++v104;
      *(int8x16_t *)(v145 + 32) = vorrq_s8(v148, (int8x16_t)xmmword_23435FD50);
    }
    int32x2_t v149 = (int32x2_t)vsub_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v115.f32);
    int8x8_t v150 = (int8x8_t)vneg_f32(v105);
    float32x2_t v151 = (float32x2_t)vdup_lane_s32(v126, 0);
    if (vcgt_f32(v121, v139).u8[0])
    {
      float32x2_t v152 = vadd_f32(v114, v139);
      v140.i64[1] = v128;
      float32x4_t v153 = vmulq_n_f32(v77, v140.f32[0]);
      v153.i32[3] = 0;
      float32x4_t v154 = vmulq_lane_f32(v78, *(float32x2_t *)v140.f32, 1);
      v154.i32[3] = 0;
      uint64_t v155 = a7 + 48 * v104;
      float32x4_t v156 = vaddq_f32(v153, v154);
      float32x4_t v157 = vmulq_laneq_f32(v79, v140, 2);
      v157.i32[3] = 0;
      int8x16_t v158 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v157, v156)), (float32x4_t)xmmword_2344232A0, v152.f32[0]);
      v158.i64[1] = vextq_s8(v158, v158, 8uLL).u32[0];
      *(float32x4_t *)uint64_t v155 = v140;
      *(int8x16_t *)(v155 + 16) = v158;
      __int32 v159 = v152.i32[1];
      v160.i64[0] = 0;
      v160.i32[2] = 0;
      v160.i32[3] = v159;
      ++v104;
      *(int8x16_t *)(v155 + 32) = vorrq_s8(v160, (int8x16_t)xmmword_23435FD50);
    }
    int32x2_t v161 = (int32x2_t)vsub_f32(v113, *(float32x2_t *)v115.f32);
    float32x2_t v162 = (float32x2_t)vdup_lane_s32(v138, 0);
    *(int8x8_t *)v163.f32 = vext_s8(v150, (int8x8_t)v106, 4uLL);
    if (vcgt_f32(v121, v151).u8[0])
    {
      float32x2_t v164 = vadd_f32(v114, v151);
      v165.i64[0] = v163.i64[0];
      v165.i64[1] = v61.u32[0];
      float32x4_t v166 = vmulq_n_f32(v77, v163.f32[0]);
      v166.i32[3] = 0;
      float32x4_t v167 = vmulq_lane_f32(v78, *(float32x2_t *)v163.f32, 1);
      v167.i32[3] = 0;
      uint64_t v168 = a7 + 48 * v104;
      float32x4_t v169 = vaddq_f32(v166, v167);
      float32x4_t v170 = vmulq_laneq_f32(v79, v165, 2);
      v170.i32[3] = 0;
      int8x16_t v171 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v170, v169)), (float32x4_t)xmmword_2344232A0, v164.f32[0]);
      v171.i64[1] = vextq_s8(v171, v171, 8uLL).u32[0];
      *(float32x4_t *)uint64_t v168 = v165;
      *(int8x16_t *)(v168 + 16) = v171;
      v171.i64[0] = 0;
      v171.i32[2] = 0;
      v171.i32[3] = v164.i32[1];
      ++v104;
      *(int8x16_t *)(v168 + 32) = vorrq_s8(v171, (int8x16_t)xmmword_23435FD50);
    }
    float32x2_t v172 = (float32x2_t)vdup_lane_s32(v149, 0);
    if (vcgt_f32(v121, v162).u8[0])
    {
      float32x2_t v173 = vadd_f32(v114, v162);
      v163.i64[1] = v128;
      float32x4_t v174 = vmulq_n_f32(v77, v163.f32[0]);
      v174.i32[3] = 0;
      float32x4_t v175 = vmulq_lane_f32(v78, *(float32x2_t *)v163.f32, 1);
      v175.i32[3] = 0;
      uint64_t v176 = a7 + 48 * v104;
      float32x4_t v177 = vaddq_f32(v174, v175);
      float32x4_t v178 = vmulq_laneq_f32(v79, v163, 2);
      v178.i32[3] = 0;
      int8x16_t v179 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v178, v177)), (float32x4_t)xmmword_2344232A0, v173.f32[0]);
      v179.i64[1] = vextq_s8(v179, v179, 8uLL).u32[0];
      *(float32x4_t *)uint64_t v176 = v163;
      *(int8x16_t *)(v176 + 16) = v179;
      __int32 v180 = v173.i32[1];
      v181.i64[0] = 0;
      v181.i32[2] = 0;
      v181.i32[3] = v180;
      ++v104;
      *(int8x16_t *)(v176 + 32) = vorrq_s8(v181, (int8x16_t)xmmword_23435FD50);
    }
    float32x2_t v182 = (float32x2_t)vdup_lane_s32(v161, 0);
    *(int8x8_t *)v183.f32 = vext_s8(v150, v127, 4uLL);
    if (vcgt_f32(v121, v172).u8[0])
    {
      float32x2_t v184 = vadd_f32(v114, v172);
      v185.i64[0] = v183.i64[0];
      v185.i64[1] = v61.u32[0];
      float32x4_t v186 = vmulq_n_f32(v77, v183.f32[0]);
      v186.i32[3] = 0;
      float32x4_t v187 = vmulq_lane_f32(v78, *(float32x2_t *)v183.f32, 1);
      v187.i32[3] = 0;
      uint64_t v188 = a7 + 48 * v104;
      float32x4_t v189 = vaddq_f32(v186, v187);
      float32x4_t v190 = vmulq_laneq_f32(v79, v185, 2);
      v190.i32[3] = 0;
      int8x16_t v191 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v190, v189)), (float32x4_t)xmmword_2344232A0, v184.f32[0]);
      v191.i64[1] = vextq_s8(v191, v191, 8uLL).u32[0];
      *(float32x4_t *)uint64_t v188 = v185;
      *(int8x16_t *)(v188 + 16) = v191;
      v191.i32[0] = v184.i32[1];
      v192.i64[0] = 0;
      v192.i32[2] = 0;
      v192.i32[3] = v191.i32[0];
      ++v104;
      *(int8x16_t *)(v188 + 32) = vorrq_s8(v192, (int8x16_t)xmmword_23435FD50);
    }
    if (vcgt_f32(v121, v182).u8[0])
    {
      float32x2_t v193 = vadd_f32(v114, v182);
      v183.i64[1] = v128;
      float32x4_t v194 = vmulq_n_f32(v77, v183.f32[0]);
      v194.i32[3] = 0;
      float32x4_t v195 = vmulq_lane_f32(v78, *(float32x2_t *)v183.f32, 1);
      v195.i32[3] = 0;
      uint64_t v196 = a7 + 48 * v104;
      float32x4_t v197 = vmulq_laneq_f32(v79, v183, 2);
      v197.i32[3] = 0;
      int8x16_t v198 = (int8x16_t)vmlaq_n_f32(vaddq_f32(v56, vaddq_f32(v197, vaddq_f32(v194, v195))), (float32x4_t)xmmword_2344232A0, v193.f32[0]);
      v198.i64[1] = vextq_s8(v198, v198, 8uLL).u32[0];
      *(float32x4_t *)uint64_t v196 = v183;
      *(int8x16_t *)(v196 + 16) = v198;
      v194.i64[0] = 0;
      v194.i32[2] = 0;
      v194.i32[3] = v193.i32[1];
      ++v104;
      *(int8x16_t *)(v196 + 32) = vorrq_s8((int8x16_t)v194, (int8x16_t)xmmword_23435FD50);
    }
    physx::Gu::PersistentContactManifold::addBatchManifoldContactsCluster((uint64_t)_X20, (float32x4_t *)a7, v104);
  }
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)_X20, a7, &v201, v202, (uint64_t *)&v200);
  return _X20[4].i8[0] != 0;
}

BOOL physx::Gu::pcmContactPlaneCapsule(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, int32x2_t *a5, float32x4_t **a6, uint64_t a7)
{
  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  v14.i64[0] = a4[1].i64[0];
  v14.i64[1] = a4[1].u32[2];
  v151[0] = *a4;
  v151[1] = v14;
  int8x16_t v15 = *(int8x16_t *)a3;
  v16.i64[0] = a3[1].i64[0];
  v16.i64[1] = a3[1].u32[2];
  float32x4_t v17 = vnegq_f32(*a3);
  float32x2_t v18 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a3, 3).u64[0];
  float32x4_t v19 = vsubq_f32(v14, v16);
  float32x4_t v20 = v17;
  v20.i32[3] = 0;
  float32x4_t v21 = vmulq_n_f32(v19, vmla_f32((float32x2_t)0xBF000000BF000000, v18, v18).f32[0]);
  v21.i32[3] = 0;
  float32x2_t v22 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
  float32x2_t v23 = (float32x2_t)vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)v22, 4uLL);
  int8x8_t v24 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL)), v23, *(float32x2_t *)v19.f32);
  *(int8x8_t *)v25.f32 = vext_s8(v24, (int8x8_t)vmls_f32(vmul_f32(v22, *(float32x2_t *)v19.f32), *(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), 4uLL);
  v25.i64[1] = v24.u32[0];
  float32x4_t v26 = vmlaq_laneq_f32(v21, v25, *a3, 3);
  v26.i64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
  v25.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
  float32x4_t v27 = vmulq_f32(v20, v19);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  float32x4_t v28 = vmlaq_n_f32(v26, v20, vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32).f32[0]);
  float32x4_t v29 = v151[0];
  v29.i32[3] = 0;
  float32x2_t v30 = (float32x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  float32x4_t v31 = vmulq_n_f32(*a3, vadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).f32[0]);
  v31.i32[3] = 0;
  int8x8_t v32 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v151[0].f32, (int8x8_t)v30, 4uLL), *(float32x2_t *)v17.f32), v23, *(float32x2_t *)v151[0].f32);
  *(int8x8_t *)v33.f32 = vext_s8((int8x8_t)v18, *(int8x8_t *)v25.f32, 4uLL);
  v33.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a3->f32, 1)).u32[0];
  int8x16_t v34 = (int8x16_t)vmlaq_n_f32(v31, v33, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32), 1).i32);
  v42.i32[1] = v34.i32[1];
  __asm { FMOV            V0.2S, #-1.0 }
  int8x16_t v36 = (int8x16_t)vmulq_f32(v151[0], *a3);
  float32x4_t v37 = vmulq_laneq_f32(v29, *a3, 3);
  float32x4_t v38 = vmulq_f32(v29, v20);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  float32x2_t v39 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  float32x4_t v40 = vmulq_laneq_f32(v20, v151[0], 3);
  float32x2_t v41 = vneg_f32(v30);
  v42.i64[1] = vextq_s8(v34, v34, 8uLL).u32[0];
  v42.i32[0] = vadd_f32(*(float32x2_t *)v34.i8, _D0).u32[0];
  float32x4_t v43 = vaddq_f32(v40, v37);
  float32x4_t v44 = vmulq_f32(v42, v42);
  v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
  float32x2_t v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
  float32x2_t v46 = vrsqrte_f32(v45);
  int v47 = 4;
  do
  {
    float32x2_t v46 = vmul_f32(v46, vrsqrts_f32(vmul_f32(v46, v46), v45));
    --v47;
  }
  while (v47);
  *(int8x8_t *)v48.f32 = vext_s8(v32, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v151[0].f32, v22), *(float32x2_t *)v17.f32, v41), 4uLL);
  *(int8x8_t *)&v48.u32[2] = v32;
  float32x2_t v49 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
  __asm { FMOV            V6.2S, #1.0 }
  float32x2_t v51 = vmul_f32(v45, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v45), 0), (int8x8_t)_D6, (int8x8_t)v46));
  float32x2_t v52 = vrecpe_f32(v51);
  int v53 = 4;
  do
  {
    float32x2_t v52 = vmul_f32(v52, vrecps_f32(v51, v52));
    --v53;
  }
  while (v53);
  float32x4_t v56 = vaddq_f32(v28, v28);
  float32x2_t v54 = vsub_f32(v49, v39);
  float32x4_t v55 = vaddq_f32(v43, v48);
  v56.i32[3] = 0;
  float32x4_t v57 = vmulq_n_f32(v42, v52.f32[0]);
  v57.i32[3] = 0;
  float32x4_t v150 = v57;
  float32x4_t v58 = vnegq_f32(v57);
  v58.i32[3] = 0;
  float32x4_t v149 = v58;
  float32x2_t v59 = (float32x2_t)vdup_lane_s32(*a5, 0);
  float32x2_t v148 = v59;
  int32x2_t v60 = *(int32x2_t *)(a2 + 4);
  float32x2_t v61 = (float32x2_t)vdup_lane_s32(v60, 0);
  uint64_t v62 = *(void *)(a2 + 8);
  float32x2_t v63 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 1);
  float32x2_t v146 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)v60.i32);
  float32x2_t v147 = v61;
  int v64 = _X20[4].u8[0];
  if (_X20[4].i8[0])
  {
    float32x2_t v65 = (float32x2_t)vdup_laneq_s32((int32x4_t)v55, 2);
    float32x2_t v66 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)v60.i32);
    float32x4_t v67 = vaddq_f32(v55, v55);
    float32x2_t v68 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v67.f32), 0);
    float32x2_t v69 = vmul_lane_f32(v63, *(float32x2_t *)v67.f32, 1);
    float32x2_t v70 = vmul_laneq_f32(v65, v67, 2);
    float32x2_t v71 = vmul_n_f32(v63, v67.f32[0]);
    float32x2_t v72 = vmul_n_f32(v65, v67.f32[0]);
    float32x2_t v73 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 0), v54, 1);
    float32x2_t v74 = vmul_lane_f32(v65, *(float32x2_t *)v67.f32, 1);
    float32x2_t v75 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 1), v54, 1);
    *(float32x2_t *)v67.f32 = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v67, 2), v54, 1);
    float32x2_t v76 = vsub_f32(_D6, v68);
    *(int8x8_t *)v77.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D6, v69), v70), (int8x8_t)vadd_f32(v71, *(float32x2_t *)v67.f32), 4uLL);
    *(float32x2_t *)&v77.u32[2] = vsub_f32(v72, v75);
    *(int8x8_t *)v78.f32 = vext_s8((int8x8_t)vsub_f32(v71, *(float32x2_t *)v67.f32), (int8x8_t)vsub_f32(v76, v70), 4uLL);
    *(float32x2_t *)&v78.u32[2] = vadd_f32(v74, v73);
    *(int8x8_t *)v79.f32 = vext_s8((int8x8_t)vadd_f32(v72, v75), (int8x8_t)vsub_f32(v74, v73), 4uLL);
    *(float32x2_t *)&v79.u32[2] = vsub_f32(v76, v69);
    float32x2_t v80 = vmul_f32(v66, v66);
    unsigned int v81 = v64 - 1;
    do
    {
      uint64_t v82 = _X20[5].i64[0];
      uint64_t v83 = v81;
      float32x4_t v84 = (float32x4_t *)(v82 + 48 * v81);
      float32x4_t v85 = v84[1];
      float32x4_t v86 = vmulq_n_f32(v77, COERCE_FLOAT(*v84));
      v86.i32[3] = 0;
      float32x4_t v87 = vmulq_lane_f32(v78, *(float32x2_t *)v84->f32, 1);
      v87.i32[3] = 0;
      float32x4_t v88 = vmulq_laneq_f32(v79, *v84, 2);
      v88.i32[3] = 0;
      float32x4_t v89 = vaddq_f32(v56, vaddq_f32(v88, vaddq_f32(v86, v87)));
      float32x4_t v90 = v84[2];
      float32x4_t v91 = v90;
      v91.i32[3] = 0;
      float32x4_t v92 = vmulq_f32(v91, vsubq_f32(v89, v85));
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
      float32x4_t v94 = vmlsq_lane_f32(v89, v91, v93, 0);
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      float32x4_t v95 = vsubq_f32(v85, v94);
      float32x4_t v96 = vmulq_f32(v95, v95);
      v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32), v80), 0), (int8x8_t)_D0).u32[0] == -1)
      {
        unsigned __int8 v97 = _X20[4].i8[0] - 1;
        _X20[4].i8[0] = v97;
        float32x2_t v98 = (float32x4_t *)(v82 + 48 * v97);
        float32x4_t v99 = *v98;
        float32x4_t v100 = v98[2];
        v84[1] = v98[1];
        v84[2] = v100;
        *float32x4_t v84 = v99;
      }
      else
      {
        v90.i32[3] = v93.i32[1];
        v84[2] = v90;
      }
      --v81;
    }
    while (v83);
    int v101 = _X20[4].u8[0];
  }
  else
  {
    int v101 = 0;
  }
  float32x4_t v102 = v55;
  v102.i32[3] = v54.i32[1];
  if (v101 != v64
    || (int8x16_t v103 = (int8x16_t)vabdq_f32(v56, _X20[1]),
        *(float32x2_t *)v103.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL), *(float32x2_t *)v103.i8), float32x4_t v104 = vmulq_f32(v102, *_X20), v104.i64[0] = vpaddq_f32(v104, v104).u64[0], vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v103.i8, *(float32x2_t *)v103.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)v60.i32))), 0), (int8x8_t)_D0).u32[0] == -1))
  {
    float32x4_t v105 = v102;
    v105.i32[3] = 0;
    *(int8x8_t *)v106.f32 = vext_s8((int8x8_t)v54, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), 4uLL);
    float32x4_t v107 = vmulq_n_f32(v105, vadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32).f32[0]);
    v107.i32[3] = 0;
    v106.i64[1] = vneg_f32(v63).u32[0];
    float32x4_t v108 = vmlaq_n_f32(v107, v106, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(v54, v54), 1).i32);
    v108.i32[0] = vadd_f32(*(float32x2_t *)v108.f32, _D0).u32[0];
    float32x4_t v109 = vmulq_n_f32(v108, *(float *)&v62);
    float32x2_t v110 = (float32x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
    v109.i32[3] = 0;
    float32x2_t v111 = (float32x2_t)vdup_lane_s32((int32x2_t)v54, 1);
    float32x4_t v112 = vaddq_f32(v56, v109);
    float32x4_t v113 = vsubq_f32(v56, v109);
    float32x2_t v114 = vadd_f32(v59, v61);
    _X20[4].i8[0] = 0;
    *_X20 = v102;
    _X20[1] = v56;
    float32x2_t v115 = (float32x2_t)vext_s8(*(int8x8_t *)v55.f32, (int8x8_t)v110, 4uLL);
    if (vcgt_f32(v114, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.f32, 0)).u8[0])
    {
      float32x4_t v116 = vsubq_f32(v112, v56);
      float32x4_t v117 = vmulq_n_f32(v116, vmla_f32((float32x2_t)0xBF000000BF000000, v111, v111).f32[0]);
      v117.i32[3] = 0;
      float32x4_t v138 = v113;
      int8x8_t v118 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 4uLL)), v115, *(float32x2_t *)v116.f32);
      *(int8x8_t *)v119.f32 = vext_s8(v118, (int8x8_t)vmls_f32(vmul_f32(v110, *(float32x2_t *)v116.f32), *(float32x2_t *)v55.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL)), 4uLL);
      v119.i64[1] = v118.u32[0];
      float32x4_t v120 = vmlsq_lane_f32(v117, v119, v54, 1);
      v120.i64[1] = vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL).u32[0];
      float32x4_t v121 = vmulq_f32(v105, v116);
      v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
      float32x4_t v122 = vmlaq_n_f32(v120, v105, vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32).f32[0]);
      float32x4_t v123 = vaddq_f32(v122, v122);
      v123.i32[3] = 0;
      float32x4_t v145 = v123;
      int32x4_t v124 = vdupq_lane_s32(*(int32x2_t *)v112.f32, 0);
      int8x16_t v125 = (int8x16_t)vmlaq_n_f32(v112, (float32x4_t)xmmword_2344232A0, v112.f32[0]);
      v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
      float32x4_t v144 = (float32x4_t)v125;
      v125.i64[0] = 0;
      v125.i32[2] = 0;
      v125.i32[3] = v124.i32[3];
      float32x2_t v142 = v54;
      int8x16_t v143 = vorrq_s8(v125, (int8x16_t)xmmword_23435FD50);
      float32x4_t v140 = v56;
      uint64_t v141 = v55.i64[0];
      float32x4_t v139 = v105;
      float32x2_t v137 = v110;
      physx::Gu::PersistentContactManifold::addManifoldPoint2((uint64_t)_X20, &v145, &v144, (long long *)v143.i8, &v146);
      float32x2_t v110 = v137;
      float32x4_t v113 = v138;
      float32x4_t v105 = v139;
      float32x4_t v56 = v140;
      v55.i64[0] = v141;
      float32x2_t v54 = v142;
    }
    if (vcgt_f32(v114, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v113.f32, 0)).u8[0])
    {
      float32x4_t v126 = vsubq_f32(v113, v56);
      float32x4_t v127 = vmulq_n_f32(v126, vmla_f32((float32x2_t)0xBF000000BF000000, v111, v111).f32[0]);
      v127.i32[3] = 0;
      int8x8_t v128 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 4uLL)), v115, *(float32x2_t *)v126.f32);
      *(int8x8_t *)v129.f32 = vext_s8(v128, (int8x8_t)vmls_f32(vmul_f32(v110, *(float32x2_t *)v126.f32), *(float32x2_t *)v55.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL)), 4uLL);
      v129.i64[1] = v128.u32[0];
      float32x4_t v130 = vmlsq_lane_f32(v127, v129, v54, 1);
      v130.i64[1] = vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u32[0];
      float32x4_t v131 = vmulq_f32(v105, v126);
      v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
      float32x4_t v132 = vmlaq_n_f32(v130, v105, vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32).f32[0]);
      int8x16_t v133 = (int8x16_t)vaddq_f32(v132, v132);
      v133.i32[3] = 0;
      float32x4_t v145 = (float32x4_t)v133;
      int32x4_t v134 = vdupq_lane_s32(*(int32x2_t *)v113.f32, 0);
      int8x16_t v135 = (int8x16_t)vmlaq_n_f32(v113, (float32x4_t)xmmword_2344232A0, v113.f32[0]);
      v135.i64[1] = vextq_s8(v135, v135, 8uLL).u32[0];
      v133.i64[0] = 0;
      v133.i32[2] = 0;
      v133.i32[3] = v134.i32[3];
      int8x16_t v143 = vorrq_s8(v133, (int8x16_t)xmmword_23435FD50);
      float32x4_t v144 = (float32x4_t)v135;
      physx::Gu::PersistentContactManifold::addManifoldPoint2((uint64_t)_X20, &v145, &v144, (long long *)v143.i8, &v146);
    }
  }
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)_X20, a7, &v149, &v150, v151, &v147, &v148);
  return _X20[4].i8[0] != 0;
}

BOOL physx::Gu::pcmContactPlaneConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, float32x4_t **a6, int32x4_t *a7)
{
  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  v14.i64[0] = a4[1].i64[0];
  v14.i64[1] = a4[1].u32[2];
  float32x4_t v15 = *a4;
  v17.i64[0] = a3[1].i64[0];
  v17.i64[1] = a3[1].u32[2];
  v185[0] = *a3;
  int8x16_t v16 = (int8x16_t)v185[0];
  v185[1] = v17;
  float32x4_t v18 = vnegq_f32(v185[0]);
  float32x2_t v19 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
  float32x2_t v20 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v185[0], 3).u64[0];
  float32x4_t v21 = vsubq_f32(v14, v17);
  float32x4_t v22 = v18;
  v22.i32[3] = 0;
  float32x4_t v23 = vmulq_n_f32(v21, vmla_f32((float32x2_t)0xBF000000BF000000, v20, v20).f32[0]);
  v23.i32[3] = 0;
  float32x2_t v24 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  float32x2_t v25 = (float32x2_t)vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)v24, 4uLL);
  int8x8_t v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL)), v25, *(float32x2_t *)v21.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(v24, *(float32x2_t *)v21.f32), *(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), 4uLL);
  v27.i64[1] = v26.u32[0];
  float32x4_t v28 = vmlaq_laneq_f32(v23, v27, v185[0], 3);
  v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
  float32x4_t v29 = vmulq_f32(v22, v21);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  float32x4_t v30 = v15;
  v30.i32[3] = 0;
  float32x4_t v31 = vmlaq_n_f32(v28, v22, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32).f32[0]);
  int8x16_t v32 = (int8x16_t)vmulq_f32(v15, v185[0]);
  float32x4_t v33 = vmulq_f32(v30, v22);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  float32x2_t v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
  float32x4_t v35 = vmulq_laneq_f32(v22, v15, 3);
  float32x4_t v36 = vmulq_laneq_f32(v30, v185[0], 3);
  float32x2_t v37 = (float32x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
  *(float32x2_t *)v30.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v37, 4uLL), *(float32x2_t *)v18.f32);
  float32x2_t v38 = vneg_f32(v37);
  int8x8_t v39 = (int8x8_t)vmls_f32(*(float32x2_t *)v30.f32, v25, *(float32x2_t *)v15.f32);
  float32x4_t v40 = vaddq_f32(v35, v36);
  float32x4_t v41 = *(float32x4_t *)(a2 + 4);
  float32x4_t v42 = v41;
  v42.i32[3] = 0;
  uint64_t v43 = *(void *)(a2 + 48);
  v44.i64[0] = *(void *)(v43 + 60);
  v44.i64[1] = *(unsigned int *)(v43 + 68);
  float v45 = *(float *)(a5 + 8);
  int32x4_t v46 = (int32x4_t)vmulq_f32(v42, v44);
  float32x2_t v47 = vpmin_f32((float32x2_t)vdup_laneq_s32(v46, 2), *(float32x2_t *)v46.i8);
  LODWORD(v48) = vdup_lane_s32((int32x2_t)vadd_f32(v19, v19), 1).u32[0];
  float32x4_t v49 = vmulq_n_f32(v185[0], vadd_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8).f32[0]);
  v49.i32[3] = 0;
  *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)v20, (int8x8_t)v19, 4uLL);
  v50.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v185[0].f32, 1)).u32[0];
  int8x16_t v51 = (int8x16_t)vmlaq_n_f32(v49, v50, v48);
  __asm { FMOV            V16.2S, #-1.0 }
  int32x2_t v53 = (int32x2_t)vadd_f32(*(float32x2_t *)v51.i8, _D16);
  v54.i64[1] = vextq_s8(v51, v51, 8uLL).u32[0];
  v54.i64[0] = __PAIR64__(v51.u32[1], v53.u32[0]);
  float32x4_t v55 = vmulq_f32(v54, v54);
  v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
  float32x2_t v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
  float32x2_t v57 = vrsqrte_f32(v56);
  int v58 = 4;
  do
  {
    float32x2_t v57 = vmul_f32(v57, vrsqrts_f32(vmul_f32(v57, v57), v56));
    --v58;
  }
  while (v58);
  float32x2_t v59 = (float32x2_t)vextq_s8(v32, v32, 8uLL).u64[0];
  *(int8x8_t *)v60.f32 = vext_s8(v39, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v15.f32, v24), *(float32x2_t *)v18.f32, v38), 4uLL);
  float32x2_t v61 = vpmin_f32(v47, v47);
  *(int8x8_t *)&v60.u32[2] = v39;
  float32x4_t v62 = vaddq_f32(v40, v60);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v64 = vmul_f32(v56, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v56), 0), (int8x8_t)_D4, (int8x8_t)v57));
  float32x2_t v65 = vrecpe_f32(v64);
  int v66 = 4;
  do
  {
    float32x2_t v65 = vmul_f32(v65, vrecps_f32(v64, v65));
    --v66;
  }
  while (v66);
  float32x4_t v69 = vaddq_f32(v31, v31);
  float32x2_t v67 = vsub_f32(v59, v34);
  __asm { FMOV            V1.2S, #0.25 }
  *(float *)v53.i32 = v45 * 0.05;
  v69.i32[3] = 0;
  float32x2_t v70 = vmin_f32(vmul_f32(v61, _D1), (float32x2_t)vdup_lane_s32(v53, 0));
  float32x4_t v71 = vmulq_n_f32(v54, v65.f32[0]);
  v71.i32[3] = 0;
  float32x4_t v72 = vnegq_f32(v71);
  v72.i32[3] = 0;
  float32x4_t v184 = v72;
  int32x2_t v73 = *(int32x2_t *)a5;
  int32x2_t v183 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  float32x2_t v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.f32, 1);
  float32x2_t v75 = vmul_f32(v70, (float32x2_t)vdup_n_s32(0x3E4CCCCDu));
  float32x2_t v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v62, 2);
  float32x4_t v77 = vaddq_f32(v62, v62);
  int v78 = _X20[4].u8[0];
  float32x2_t v79 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v77.f32), 0);
  float32x2_t v80 = vmul_lane_f32(v74, *(float32x2_t *)v77.f32, 1);
  float32x2_t v81 = vmul_laneq_f32(v76, v77, 2);
  float32x2_t v82 = vmul_n_f32(v74, v77.f32[0]);
  float32x2_t v83 = vmul_n_f32(v76, v77.f32[0]);
  float32x2_t v84 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.f32, 0), v67, 1);
  float32x2_t v85 = vmul_lane_f32(v76, *(float32x2_t *)v77.f32, 1);
  float32x2_t v86 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.f32, 1), v67, 1);
  *(float32x2_t *)v77.f32 = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v77, 2), v67, 1);
  float32x2_t v87 = vsub_f32(_D4, v79);
  *(int8x8_t *)v88.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D4, v80), v81), (int8x8_t)vadd_f32(v82, *(float32x2_t *)v77.f32), 4uLL);
  v88.i64[1] = vsub_f32(v83, v86).u32[0];
  *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vsub_f32(v82, *(float32x2_t *)v77.f32), (int8x8_t)vsub_f32(v87, v81), 4uLL);
  v89.i64[1] = vadd_f32(v85, v84).u32[0];
  *(int8x8_t *)v90.f32 = vext_s8((int8x8_t)vadd_f32(v83, v86), (int8x8_t)vsub_f32(v85, v84), 4uLL);
  v90.i64[1] = vsub_f32(v87, v80).u32[0];
  if (_X20[4].i8[0])
  {
    float32x2_t v91 = vmul_f32(v75, v75);
    unsigned int v92 = v78 - 1;
    do
    {
      uint64_t v93 = _X20[5].i64[0];
      uint64_t v94 = v92;
      float32x4_t v95 = (float32x4_t *)(v93 + 48 * v92);
      float32x4_t v96 = v95[1];
      float32x4_t v97 = vmulq_n_f32(v88, COERCE_FLOAT(*v95));
      v97.i32[3] = 0;
      float32x4_t v98 = vmulq_lane_f32(v89, *(float32x2_t *)v95->f32, 1);
      v98.i32[3] = 0;
      float32x4_t v99 = vmulq_laneq_f32(v90, *v95, 2);
      v99.i32[3] = 0;
      float32x4_t v100 = vaddq_f32(v69, vaddq_f32(v99, vaddq_f32(v97, v98)));
      float32x4_t v101 = v95[2];
      float32x4_t v102 = v101;
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_f32(v102, vsubq_f32(v100, v96));
      v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
      float32x2_t v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
      float32x4_t v105 = vmlsq_lane_f32(v100, v102, v104, 0);
      v105.i64[1] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u32[0];
      float32x4_t v106 = vsubq_f32(v96, v105);
      float32x4_t v107 = vmulq_f32(v106, v106);
      v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32), v91), 0), *(int8x8_t *)v41.f32).u32[0] == -1)
      {
        unsigned __int8 v108 = _X20[4].i8[0] - 1;
        _X20[4].i8[0] = v108;
        float32x4_t v109 = (float32x4_t *)(v93 + 48 * v108);
        float32x4_t v110 = *v109;
        float32x4_t v111 = v109[2];
        v95[1] = v109[1];
        v95[2] = v111;
        *float32x4_t v95 = v110;
      }
      else
      {
        v101.i32[3] = v104.i32[1];
        v95[2] = v101;
      }
      --v92;
    }
    while (v94);
    int v112 = _X20[4].u8[0];
  }
  else
  {
    int v112 = 0;
  }
  v62.i32[3] = v67.i32[1];
  if (v112 != v78
    || (int8x16_t v113 = (int8x16_t)vabdq_f32(v69, _X20[1]),
        *(float32x2_t *)v113.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL), *(float32x2_t *)v113.i8), float32x4_t v114 = vmulq_f32(v62, *_X20), v114.i64[0] = vpaddq_f32(v114, v114).u64[0], vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8), v75)), 0), *(int8x8_t *)v41.f32).u32[0] == -1))
  {
    float32x4_t v115 = *(float32x4_t *)(a2 + 16);
    _X20[4].i8[0] = 0;
    *_X20 = v62;
    _X20[1] = v69;
    uint64_t v116 = *(unsigned __int8 *)(v43 + 38);
    if (*(unsigned char *)(v43 + 38))
    {
      uint64_t v117 = 0;
      unsigned int v118 = 0;
      float32x2_t v119 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 1);
      float32x2_t v120 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 2);
      float32x2_t v121 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 3);
      float32x4_t v122 = vaddq_f32(v115, v115);
      float32x2_t v123 = vmul_lane_f32(v119, *(float32x2_t *)v122.f32, 1);
      float32x2_t v124 = vmul_laneq_f32(v120, v122, 2);
      float32x2_t v125 = vmul_n_f32(v119, v122.f32[0]);
      float32x2_t v126 = vmul_n_f32(v120, v122.f32[0]);
      float32x2_t v127 = vmul_n_f32(v121, v122.f32[0]);
      float32x2_t v128 = vmul_lane_f32(v120, *(float32x2_t *)v122.f32, 1);
      float32x2_t v129 = vmul_lane_f32(v121, *(float32x2_t *)v122.f32, 1);
      float32x2_t v130 = vmul_laneq_f32(v121, v122, 2);
      float32x2_t v131 = vsub_f32(_D4, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v122.f32), 0));
      *(int8x8_t *)v122.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D4, v123), v124), (int8x8_t)vadd_f32(v125, v130), 4uLL);
      v122.i64[1] = vsub_f32(v126, v129).u32[0];
      *(int8x8_t *)v132.f32 = vext_s8((int8x8_t)vsub_f32(v125, v130), (int8x8_t)vsub_f32(v131, v124), 4uLL);
      *(int8x8_t *)v133.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v122.f32, 0), *(int8x8_t *)v132.f32, 4uLL);
      v132.i64[1] = vadd_f32(v128, v127).u32[0];
      *(int8x8_t *)v134.f32 = vext_s8((int8x8_t)vadd_f32(v126, v129), (int8x8_t)vsub_f32(v128, v127), 4uLL);
      v133.i64[1] = v134.i64[0];
      *(int8x8_t *)v135.f32 = vext_s8(*(int8x8_t *)v122.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v132.f32, 1), 4uLL);
      v134.i64[1] = vsub_f32(v131, v123).u32[0];
      *(int32x2_t *)&v135.u32[2] = vdup_lane_s32(*(int32x2_t *)v134.f32, 1);
      *(int8x8_t *)v136.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v122.u32[2], 0), *(int8x8_t *)&v132.u32[2], 4uLL);
      v136.i64[1] = v134.i64[1];
      float32x4_t v137 = vmulq_n_f32(v133, v41.f32[0]);
      float32x4_t v138 = vmulq_lane_f32(v135, *(float32x2_t *)v41.f32, 1);
      float32x4_t v139 = vmulq_laneq_f32(v136, v41, 2);
      float32x4_t v140 = vmulq_n_f32(v137, v122.f32[0]);
      v140.i32[3] = 0;
      float32x4_t v141 = vmulq_lane_f32(v138, *(float32x2_t *)v122.f32, 1);
      v141.i32[3] = 0;
      float32x4_t v142 = vmulq_laneq_f32(v139, v122, 2);
      v142.i32[3] = 0;
      float32x4_t v143 = vaddq_f32(v142, vaddq_f32(v140, v141));
      float32x4_t v144 = vmulq_n_f32(v137, v132.f32[0]);
      v144.i32[3] = 0;
      float32x4_t v145 = vmulq_lane_f32(v138, *(float32x2_t *)v132.f32, 1);
      v145.i32[3] = 0;
      float32x4_t v146 = vmulq_laneq_f32(v139, v132, 2);
      v146.i32[3] = 0;
      float32x4_t v147 = vaddq_f32(v146, vaddq_f32(v144, v145));
      float32x4_t v148 = vmulq_n_f32(v137, v134.f32[0]);
      v148.i32[3] = 0;
      float32x4_t v149 = vmulq_lane_f32(v138, *(float32x2_t *)v134.f32, 1);
      v149.i32[3] = 0;
      float32x4_t v150 = vmulq_laneq_f32(v139, v134, 2);
      v150.i32[3] = 0;
      float32x4_t v151 = vaddq_f32(v150, vaddq_f32(v148, v149));
      uint64_t v152 = *(void *)(v43 + 40) + 20 * *(unsigned __int8 *)(v43 + 39);
      float32x4_t v153 = vaddq_f32(vmulq_laneq_f32(v90, v143, 2), vaddq_f32(vmulq_n_f32(v88, v143.f32[0]), vmulq_lane_f32(v89, *(float32x2_t *)v143.f32, 1)));
      float32x4_t v154 = vaddq_f32(vmulq_laneq_f32(v90, v147, 2), vaddq_f32(vmulq_n_f32(v88, v147.f32[0]), vmulq_lane_f32(v89, *(float32x2_t *)v147.f32, 1)));
      float32x4_t v155 = vaddq_f32(vmulq_laneq_f32(v90, v151, 2), vaddq_f32(vmulq_n_f32(v88, v151.f32[0]), vmulq_lane_f32(v89, *(float32x2_t *)v151.f32, 1)));
      __int32 v181 = v73.i32[0];
      float32x4_t v182 = v69;
      float32x4_t v179 = v147;
      float32x4_t v180 = v143;
      float32x4_t v177 = v153;
      float32x4_t v178 = v151;
      float32x4_t v175 = v155;
      float32x4_t v176 = v154;
      do
      {
        float32x4_t v156 = (const float *)(v152 + 12 * v117);
        float32x4_t v158 = vld1q_dup_f32(v156);
        float32x4_t v157 = (float *)(v156 + 1);
        float v159 = *(float *)(v152 + 12 * v117 + 8);
        float32x4_t v160 = vmulq_f32(v153, v158);
        v160.i32[3] = 0;
        float32x4_t v161 = vmulq_n_f32(v154, *v157);
        v161.i32[3] = 0;
        float32x4_t v162 = vmulq_n_f32(v155, v159);
        v162.i32[3] = 0;
        float32x4_t v41 = vaddq_f32(v69, vaddq_f32(vaddq_f32(v160, v161), v162));
        if (*(float *)v73.i32 > v41.f32[0])
        {
          float32x4_t v163 = vmulq_f32(v143, v158);
          v163.i32[3] = 0;
          float32x4_t v164 = vmulq_n_f32(v147, *v157);
          v164.i32[3] = 0;
          float32x4_t v165 = vmulq_n_f32(v151, v159);
          v165.i32[3] = 0;
          float32x4_t v166 = vaddq_f32(vaddq_f32(v163, v164), v165);
          i8 = a7[3 * v118].i8;
          int32x4_t v168 = vdupq_lane_s32(*(int32x2_t *)v41.f32, 0);
          int8x16_t v169 = (int8x16_t)vmlaq_n_f32(v41, (float32x4_t)xmmword_2344232A0, v41.f32[0]);
          v169.i64[1] = vextq_s8(v169, v169, 8uLL).u32[0];
          v164.i64[0] = 0;
          v164.i32[2] = 0;
          v164.i32[3] = v168.i32[3];
          _OWORD *i8 = v166;
          i8[1] = v169;
          float32x4_t v41 = (float32x4_t)vorrq_s8((int8x16_t)v164, (int8x16_t)xmmword_23435FD50);
          ++v118;
          i8[2] = v41;
          if (v118 >= 0x40)
          {
            v41.f32[0] = v45;
            physx::Gu::PersistentContactManifold::reduceBatchContacts((uint64_t)_X20, a7, v118, *(double *)v41.i64);
            for (uint64_t i = 0; i != 12; i += 3)
            {
              int8x16_t v171 = (float32x4_t *)(_X20[5].i64[0] + i * 16);
              float32x2_t v172 = a7[i].i8;
              float32x4_t v41 = *v171;
              float32x4_t v173 = v171[2];
              v172[1] = v171[1];
              float32x4_t v172[2] = v173;
              *float32x2_t v172 = v41;
            }
            unsigned int v118 = 4;
            v73.i32[0] = v181;
            float32x4_t v69 = v182;
            float32x4_t v147 = v179;
            float32x4_t v143 = v180;
            float32x4_t v153 = v177;
            float32x4_t v151 = v178;
            float32x4_t v155 = v175;
            float32x4_t v154 = v176;
          }
        }
        ++v117;
      }
      while (v117 != v116);
    }
    else
    {
      unsigned int v118 = 0;
    }
    v41.f32[0] = v45;
    physx::Gu::PersistentContactManifold::addBatchManifoldContacts((uint64_t)_X20, a7, v118, *(double *)v41.i64);
  }
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)_X20, (uint64_t)a7, &v184, v185, (uint64_t *)&v183);
  return _X20[4].i8[0] != 0;
}

uint64_t physx::Gu::pcmContactSphereBox(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t *a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  v7.i64[0] = *(void *)(a3 + 16);
  v7.i64[1] = *(unsigned int *)(a3 + 24);
  int32x4_t v8 = *a4;
  v9.i64[0] = a4[1].i64[0];
  v9.i64[1] = a4[1].u32[2];
  float32x4_t v10 = *(float32x4_t *)(a2 + 4);
  v10.i64[1] = *(unsigned int *)(a2 + 12);
  float32x2_t v11 = *(float32x2_t *)(a1 + 4);
  float32x4_t v12 = *(float32x4_t *)a4;
  v12.i32[3] = 0;
  float32x4_t v13 = (float32x4_t)vdupq_laneq_s32(*a4, 3);
  float32x4_t v14 = vsubq_f32(v7, v9);
  int32x2_t v15 = (int32x2_t)vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32);
  float32x4_t v16 = vmulq_n_f32(v14, *(float *)v15.i32);
  v16.i32[3] = 0;
  float32x2_t v17 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
  float32x2_t v18 = (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v17, 4uLL);
  int8x8_t v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL)), v18, *(float32x2_t *)v14.f32);
  *(int8x8_t *)v20.f32 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v14.f32), *(float32x2_t *)a4->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL)), 4uLL);
  v20.i64[1] = v19.u32[0];
  float32x4_t v21 = vmlsq_laneq_f32(v16, v20, *(float32x4_t *)a4, 3);
  v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
  float32x4_t v22 = vmulq_f32(v12, v14);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  float32x4_t v23 = vmlaq_n_f32(v21, v12, vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32).f32[0]);
  float32x4_t v24 = vaddq_f32(v23, v23);
  v24.i32[3] = 0;
  float32x4_t v25 = vnegq_f32(v10);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(v11, *a5);
  float32x2_t v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), 0);
  float32x4_t v27 = vmaxq_f32(vminq_f32(v24, v10), v25);
  float32x4_t v28 = vsubq_f32(v24, v27);
  float32x4_t v29 = vmulq_f32(v28, v28);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  float32x2_t v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
  unsigned __int8 v31 = vcgt_f32(v26, v30).u8[0];
  if (v31)
  {
    int16x8_t v32 = (int16x8_t)vcgeq_f32(v10, vabsq_f32(v24));
    unint64_t v33 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    *(int16x4_t *)v32.i8 = vmovn_s32((int32x4_t)v32);
    v32.i64[1] = v33;
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vceq_s32((int32x2_t)(*(void *)&vmovn_s16(v32) & 0xFFFFFF00FFFFFFLL), (int32x2_t)0xFFFFFF00FFFFFFLL), 0), (int8x8_t)v11).u32[0] == -1)
    {
      float32x4_t v55 = vsubq_f32(v10, vabsq_f32(v27));
      int8x8_t v56 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 0);
      int8x8_t v57 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v55.f32, 1);
      int8x8_t v58 = (int8x8_t)vdup_laneq_s32((int32x4_t)v55, 2);
      *(int8x8_t *)v59.f32 = v56;
      v59.i64[1] = v56.u32[0];
      *(int8x8_t *)v60.f32 = v58;
      v60.i64[1] = v58.u32[0];
      int16x8_t v61 = (int16x8_t)vcgeq_f32(v55, v60);
      v60.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
      *(int16x4_t *)v61.i8 = vmovn_s32((int32x4_t)v61);
      v61.i64[1] = v60.i64[0];
      int32x4_t v62 = vdupq_lane_s32(vceq_s32((int32x2_t)(*(void *)&vmovn_s16(v61) & 0xFFFFFF00FFFFFFLL), (int32x2_t)0xFFFFFF00FFFFFFLL), 0);
      int16x8_t v63 = (int16x8_t)vcgeq_f32(v55, v59);
      v59.i64[0] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
      *(int16x4_t *)v63.i8 = vmovn_s32((int32x4_t)v63);
      v63.i64[1] = v59.i64[0];
      int16x4_t v64 = (int16x4_t)vceq_s32((int32x2_t)(*(void *)&vmovn_s16(v63) & 0xFFFFFF00FFFFFFLL), (int32x2_t)0xFFFFFF00FFFFFFLL);
      float32x4_t v65 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(v27), (int8x16_t)xmmword_2343679C0, (int8x16_t)xmmword_2343E1E60), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v62, 0x1FuLL)), (int8x16_t)xmmword_23435FD80, vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_lane_s16(v64, 0)), 0x1FuLL)), (int8x16_t)xmmword_23435FD50, (int8x16_t)xmmword_23435FD60)));
      float32x4_t v66 = vmulq_n_f32(v65, *(float *)v15.i32);
      v66.i32[3] = 0;
      float32x2_t v67 = (float32x2_t)vbsl_s8(*(int8x8_t *)v62.i8, v58, vbsl_s8((int8x8_t)vdup_lane_s32((int32x2_t)v64, 0), v56, v57));
      int8x8_t v68 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL)), v18, *(float32x2_t *)v65.f32);
      *(int8x8_t *)v69.f32 = vext_s8(v68, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v65.f32), *(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), 4uLL);
      v69.i64[1] = v68.u32[0];
      float32x4_t v70 = vmlaq_f32(v66, v13, v69);
      v70.i64[1] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u32[0];
      float32x2_t v37 = vneg_f32(v67);
      float32x4_t v71 = vmulq_f32(v12, v65);
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      float32x4_t v72 = vmlaq_n_f32(v70, v12, vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).f32[0]);
      float32x4_t v47 = vaddq_f32(v72, v72);
      v47.i32[3] = 0;
      float32x4_t v73 = vmulq_n_f32(v47, v37.f32[0]);
      v73.i32[3] = 0;
      int8x16_t v54 = (int8x16_t)vsubq_f32(v7, v73);
    }
    else
    {
      float32x4_t v34 = (float32x4_t)vdupq_lane_s32(v15, 0);
      float32x2_t v35 = vrsqrte_f32(v30);
      int v36 = 4;
      do
      {
        float32x2_t v35 = vmul_f32(v35, vrsqrts_f32(vmul_f32(v35, v35), v30));
        --v36;
      }
      while (v36);
      float32x2_t v37 = vrecpe_f32(v35);
      int v38 = 4;
      do
      {
        float32x2_t v37 = vmul_f32(v37, vrecps_f32(v35, v37));
        --v38;
      }
      while (v38);
      float32x4_t v39 = vmulq_n_f32(v28, v35.f32[0]);
      float32x4_t v40 = v39;
      v40.i32[3] = 0;
      float32x4_t v41 = vmulq_n_f32(v40, *(float *)v15.i32);
      v41.i32[3] = 0;
      float32x2_t v42 = (float32x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
      int8x8_t v43 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v8.i8, (float32x2_t)vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)v42, 4uLL)), v18, *(float32x2_t *)v39.f32);
      *(int8x8_t *)v39.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v39.f32), *(float32x2_t *)v8.i8, v42), 4uLL);
      v39.i64[1] = v43.u32[0];
      float32x4_t v44 = vmlaq_f32(v41, v13, v39);
      v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
      float32x4_t v45 = vmulq_f32(v12, v40);
      v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
      float32x4_t v46 = vmlaq_n_f32(v44, v12, vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32).f32[0]);
      float32x4_t v47 = vaddq_f32(v46, v46);
      v47.i32[3] = 0;
      float32x4_t v48 = vmulq_f32(v34, v27);
      v48.i32[3] = 0;
      *(float32x2_t *)v40.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL)), v18, *(float32x2_t *)v27.f32);
      *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v27.f32), *(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), 4uLL);
      v49.i64[1] = v40.u32[0];
      float32x4_t v50 = vmlaq_f32(v48, v13, v49);
      v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
      float32x4_t v51 = vmulq_f32(v12, v27);
      v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
      float32x4_t v52 = vmlaq_n_f32(v50, v12, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0]);
      v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
      v53.i64[0] = 0x4000000040000000;
      v53.i64[1] = 0x4000000040000000;
      int8x16_t v54 = (int8x16_t)vmlaq_f32(v9, v53, v52);
      v54.i64[1] = vextq_s8(v54, v54, 8uLL).u32[0];
    }
    uint64_t v74 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v74 + 1;
    uint64_t v75 = a7 + (v74 << 6);
    *(float32x4_t *)uint64_t v75 = v47;
    *(int8x16_t *)(v75 + 16) = v54;
    *(_DWORD *)(v75 + 12) = vsub_f32(v37, v11).u32[0];
    *(_DWORD *)(v75 + 52) = -1;
  }
  return v31 & 1;
}

uint64_t physx::Gu::pcmContactSphereCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  v7.i64[0] = *(void *)(a3 + 16);
  v7.i64[1] = *(unsigned int *)(a3 + 24);
  v8.i64[0] = a4[1].i64[0];
  v8.i64[1] = a4[1].u32[2];
  _Q3 = *(int8x16_t *)a4;
  float32x2_t v10 = *(float32x2_t *)(a1 + 4);
  float32x2_t v11 = (float32x2_t)vextq_s8(_Q3, _Q3, 8uLL).u64[0];
  float32x4_t v12 = vmulq_n_f32(*a4, vadd_f32(*(float32x2_t *)_Q3.i8, *(float32x2_t *)_Q3.i8).f32[0]);
  v12.i32[3] = 0;
  *(int8x8_t *)v13.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)a4, 3), (int8x8_t)v11, 4uLL);
  v13.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a4->f32, 1)).u32[0];
  float32x4_t v14 = vmlaq_n_f32(v12, v13, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(v11, v11), 1).i32);
  __asm { FMOV            V3.2S, #-1.0 }
  v14.i32[0] = vadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)_Q3.i8).u32[0];
  float32x4_t v19 = vmulq_n_f32(v14, COERCE_FLOAT(*(void *)(a2 + 8)));
  v19.i32[3] = 0;
  float32x4_t v20 = vaddq_f32(v8, v19);
  float32x4_t v21 = vsubq_f32(v8, v19);
  float32x4_t v22 = vsubq_f32(v7, v20);
  float32x4_t v23 = vsubq_f32(v21, v20);
  int8x16_t v24 = (int8x16_t)vmulq_f32(v22, v23);
  float32x2_t v25 = (float32x2_t)vextq_s8(v24, v24, 8uLL).u64[0];
  float32x4_t v26 = vmulq_f32(v23, v23);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  float32x2_t v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  float32x2_t v28 = vrecpe_f32(v27);
  int v29 = 4;
  do
  {
    float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  float32x2_t v30 = vadd_f32(v10, *(float32x2_t *)(a2 + 4));
  float32x2_t v31 = vpadd_f32(*(float32x2_t *)v24.i8, v25);
  float32x2_t v32 = vadd_f32(v30, *a5);
  __asm { FMOV            V3.2S, #1.0 }
  float32x2_t v34 = (float32x2_t)vbic_s8((int8x8_t)vmax_f32(vmin_f32(vmul_f32(v28, vpadd_f32(v31, v31)), _D3), 0), (int8x8_t)vceqz_f32(v27));
  int8x16_t v35 = (int8x16_t)vmlsq_lane_f32(v22, v23, v34, 0);
  v31.i32[0] = vextq_s8(v35, v35, 8uLL).u32[0];
  *(float32x2_t *)v35.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), vmul_f32((float32x2_t)v31.u32[0], (float32x2_t)v31.u32[0]));
  float32x2_t v36 = vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8);
  unsigned __int8 v37 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v32, v32), 0), v36).u8[0];
  if (v37)
  {
    float32x4_t v38 = vmlaq_f32(v20, (float32x4_t)vdupq_lane_s32((int32x2_t)v34, 0), v23);
    v38.i64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
    float32x4_t v39 = vsubq_f32(v7, v38);
    float32x4_t v40 = vmulq_f32(v39, v39);
    v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
    float32x2_t v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
    float32x2_t v42 = vrsqrte_f32(v41);
    int v43 = 4;
    do
    {
      float32x2_t v42 = vmul_f32(v42, vrsqrts_f32(vmul_f32(v42, v42), v41));
      --v43;
    }
    while (v43);
    float32x2_t v44 = vmul_f32(v41, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v41), 0), (int8x8_t)_D3, (int8x8_t)v42));
    float32x2_t v45 = vrecpe_f32(v44);
    int v46 = 4;
    do
    {
      float32x2_t v45 = vmul_f32(v45, vrecps_f32(v44, v45));
      --v46;
    }
    while (v46);
    int8x16_t v47 = (int8x16_t)vmulq_n_f32(v39, v45.f32[0]);
    v47.i32[3] = 0;
    float32x4_t v48 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgtz_f32(v44), 0), 0x1FuLL)), v47, (int8x16_t)xmmword_23435FD50);
    int8x16_t v49 = (int8x16_t)vmlsq_lane_f32(v7, v48, v10, 0);
    uint64_t v50 = vextq_s8(v49, v49, 8uLL).u32[0];
    float32x2_t v51 = vrsqrte_f32(v36);
    int v52 = 4;
    do
    {
      float32x2_t v51 = vmul_f32(v51, vrsqrts_f32(vmul_f32(v51, v51), v36));
      --v52;
    }
    while (v52);
    v49.i64[1] = v50;
    uint64_t v53 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v53 + 1;
    uint64_t v54 = a7 + (v53 << 6);
    *(float32x4_t *)uint64_t v54 = v48;
    *(int8x16_t *)(v54 + 16) = v49;
    *(_DWORD *)(v54 + 12) = vsub_f32(vmul_f32(v36, (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(v36), (int8x8_t)_D3, (int8x8_t)v51)), v30).u32[0];
    *(_DWORD *)(v54 + 52) = -1;
  }
  return v37 & 1;
}

uint64_t physx::Gu::PCMMeshContactGenerationCallback<physx::PCMConvexVsMeshContactGenerationCallback>::processHit(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, double a6, float32x4_t a7, float32x4_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (physx::Gu::intersectTriangleBox(*(float32x4_t **)(a1 + 5472), (float *)a3, a4, (float *)a5, a6, a7, a8))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      double v16 = *(double *)a3;
      float32x2_t v45 = *(float32x2_t *)a3;
      LODWORD(v16) = *(_DWORD *)(a3 + 8);
      float v47 = *a4;
      *(void *)&long long v17 = *(void *)(a4 + 1);
      v18.n128_u64[0] = *(void *)a5;
      *((void *)&v17 + 1) = *(void *)a5;
      long long v48 = v17;
      LODWORD(v17) = *(_DWORD *)(a5 + 8);
      uint64_t v22 = 2;
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 16);
      float v24 = *(float *)(v23 + 8);
      float v25 = *(float *)a3;
      float v26 = *(float *)(a3 + 4);
      float v27 = *(float *)(v23 + 20);
      v21.n128_u32[0] = *(_DWORD *)(a3 + 8);
      float v28 = *(float *)(v23 + 32);
      *(float *)&double v16 = (float)((float)(*(float *)a3 * v24) + (float)(v26 * v27)) + (float)(v21.n128_f32[0] * v28);
      float v29 = *a4;
      float v30 = a4[1];
      float v31 = a4[2];
      BOOL v32 = *(unsigned char *)(v23 + 72) == 0;
      uint64_t v33 = 24;
      if (!*(unsigned char *)(v23 + 72)) {
        uint64_t v33 = 12;
      }
      float32x2_t v34 = (float32x2_t *)((char *)&v45 + v33);
      *(float *)((char *)&v45 + v33 + 8) = (float)((float)(v24 * *a4) + (float)(v27 * v30)) + (float)(v28 * v31);
      float v35 = *(float *)a5;
      float v36 = *(float *)(a5 + 4);
      float v37 = (float)(v24 * *(float *)a5) + (float)(v27 * v36);
      LODWORD(v20) = *(_DWORD *)(a5 + 8);
      *(float *)&long long v17 = v37 + (float)(v28 * *(float *)&v20);
      uint64_t v22 = 1;
      if (v32) {
        uint64_t v22 = 2;
      }
      float32x2_t v38 = *(float32x2_t *)v23;
      float32x2_t v39 = *(float32x2_t *)(v23 + 12);
      float32x2_t v40 = *(float32x2_t *)(v23 + 24);
      float32x2_t v45 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v23, v25), vmul_n_f32(v39, v26)), vmul_n_f32(v40, v21.n128_f32[0]));
      *float32x2_t v34 = vadd_f32(vadd_f32(vmul_n_f32(v38, v29), vmul_n_f32(v39, v30)), vmul_n_f32(v40, v31));
      float32x2_t v19 = vmul_n_f32(v40, *(float *)&v20);
      v18.n128_u64[0] = (unint64_t)vadd_f32(vadd_f32(vmul_n_f32(v38, v35), vmul_n_f32(v39, v36)), v19);
      *(unint64_t *)((char *)&v45 + 12 * v22) = v18.n128_u64[0];
    }
    int v46 = LODWORD(v16);
    *((_DWORD *)&v45 + 3 * v22 + 2) = v17;
    uint64_t v41 = *(unsigned int *)(a2 + 16);
    uint64_t v42 = *(void *)(a1 + 24);
    if (v42) {
      char v43 = *(unsigned char *)(v42 + v41);
    }
    else {
      char v43 = 56;
    }
    if (*(_DWORD *)(a1 + 884) == 16)
    {
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMConvexVsMeshContactGeneration>(a1 + 896, a1 + 36, v16, *(double *)&v17, v18, *(double *)&v19, v20, v21);
      *(_DWORD *)(a1 + 884) = 0;
    }
    physx::Gu::TriangleCache<16u>::addTriangle(a1 + 36, (uint64_t)&v45, a10, v41, v43);
  }
  return 1;
}

void physx::PCMConvexVsMeshContactGenerationCallback::~PCMConvexVsMeshContactGenerationCallback(physx::PCMConvexVsMeshContactGenerationCallback *this)
{
}

double physx::Gu::pcmContactSphereConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x4_t *a4, uint64_t a5, float32x4_t **a6, uint64_t a7)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  float32x4_t v9 = *a6;
  _X8 = *(void *)(a2 + 48);
  __asm { PRFM            #0, [X8] }
  float32x4_t v16 = *(float32x4_t *)(a2 + 4);
  float32x4_t v17 = v16;
  v17.i32[3] = 0;
  v7.i32[0] = *(_DWORD *)(a1 + 4);
  *(int32x2_t *)v18.f32 = vdup_lane_s32((int32x2_t)v7, 0);
  int32x2_t v199 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  v19.i64[0] = a3[1].i64[0];
  v19.i64[1] = a3[1].u32[2];
  float32x4_t v197 = *a3;
  float32x4_t v198 = v19;
  v20.i64[0] = a4[1].i64[0];
  v20.i64[1] = a4[1].u32[2];
  v196[0] = *a4;
  v196[1] = (int32x4_t)v20;
  float32x4_t v21 = vnegq_f32((float32x4_t)v196[0]);
  float32x4_t v22 = v21;
  v22.i32[3] = 0;
  float32x2_t v23 = (float32x2_t)vdupq_laneq_s32(v196[0], 3).u64[0];
  float32x4_t v24 = vsubq_f32(v19, v20);
  float32x4_t v25 = vmulq_n_f32(v24, vmla_f32((float32x2_t)0xBF000000BF000000, v23, v23).f32[0]);
  v25.i32[3] = 0;
  float32x2_t v26 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  float32x2_t v27 = (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v26, 4uLL);
  int8x8_t v28 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL)), v27, *(float32x2_t *)v24.f32);
  *(int8x8_t *)v29.f32 = vext_s8(v28, (int8x8_t)vmls_f32(vmul_f32(v26, *(float32x2_t *)v24.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)), 4uLL);
  v29.i64[1] = v28.u32[0];
  float32x4_t v30 = vmlaq_laneq_f32(v25, v29, (float32x4_t)v196[0], 3);
  v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
  float32x4_t v31 = vmulq_f32(v22, v24);
  v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
  float32x4_t v32 = vmlaq_n_f32(v30, v22, vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0]);
  float32x4_t v33 = vaddq_f32(v32, v32);
  v33.i32[3] = 0;
  float32x4_t v34 = v197;
  v34.i32[3] = 0;
  int8x16_t v36 = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL);
  _Q18 = vmulq_f32(v34, v22);
  _Q18.i64[0] = vpaddq_f32(_Q18, _Q18).u64[0];
  *(float32x2_t *)v36.i8 = vsub_f32(vmul_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v196[0], (int8x16_t)v196[0], 8uLL)), vpadd_f32(*(float32x2_t *)_Q18.f32, *(float32x2_t *)_Q18.f32));
  float32x4_t v37 = vmulq_laneq_f32(v34, (float32x4_t)v196[0], 3);
  _Q18.i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
  *(float32x2_t *)v34.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v197.f32, *(int8x8_t *)_Q18.f32, 4uLL), *(float32x2_t *)v21.f32), v27, *(float32x2_t *)v197.f32);
  *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v34.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v197.f32, v26), *(float32x2_t *)v21.f32, *(float32x2_t *)_Q18.f32), 4uLL);
  v38.i64[1] = v34.i64[0];
  float32x4_t v39 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v22, v197, 3), v37), v38);
  __asm { FMOV            V5.2S, #1.0 }
  v21.i64[0] = *(void *)(_X8 + 60);
  v21.i64[1] = *(unsigned int *)(_X8 + 68);
  int32x4_t v41 = (int32x4_t)vmulq_f32(v17, v21);
  *(int32x2_t *)v22.f32 = vdup_laneq_s32(v41, 2);
  *(float32x2_t *)v41.i8 = vpmin_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v41.i8);
  v22.f32[0] = *(float *)(a5 + 8) * 0.05;
  __asm { FMOV            V18.2S, #0.25 }
  uint64_t v42 = v9[4].u8[0];
  float32x2_t v43 = vmin_f32(vmin_f32(vmul_f32(vpmin_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), *(float32x2_t *)_Q18.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.f32, 0)), *(float32x2_t *)v18.f32);
  if (v9[4].i8[0])
  {
    float32x2_t v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1);
    float32x2_t v45 = (float32x2_t)vdup_laneq_s32((int32x4_t)v39, 2);
    float32x4_t v46 = vaddq_f32(v39, v39);
    float32x2_t v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 1);
    float32x2_t v48 = (float32x2_t)vdup_laneq_s32((int32x4_t)v46, 2);
    float32x2_t v49 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v46.f32), 0);
    float32x2_t v50 = vmul_lane_f32(v44, *(float32x2_t *)v46.f32, 1);
    float32x2_t v51 = vmul_laneq_f32(v45, v46, 2);
    float32x2_t v52 = vmul_n_f32(v44, v46.f32[0]);
    float32x2_t v53 = vmul_n_f32(v45, v46.f32[0]);
    float32x2_t v54 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 0), *(float32x2_t *)v36.i8, 1);
    *(float32x2_t *)v46.f32 = vmul_lane_f32(v45, *(float32x2_t *)v46.f32, 1);
    float32x2_t v55 = vmul_lane_f32(v47, *(float32x2_t *)v36.i8, 1);
    float32x2_t v56 = vmul_lane_f32(v48, *(float32x2_t *)v36.i8, 1);
    float32x2_t v57 = vsub_f32(_D5, v49);
    *(int8x8_t *)v58.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, v50), v51), (int8x8_t)vadd_f32(v52, v56), 4uLL);
    *(float32x2_t *)&v58.u32[2] = vsub_f32(v53, v55);
    *(int8x8_t *)v59.f32 = vext_s8((int8x8_t)vsub_f32(v52, v56), (int8x8_t)vsub_f32(v57, v51), 4uLL);
    *(float32x2_t *)&v59.u32[2] = vadd_f32(*(float32x2_t *)v46.f32, v54);
    *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)vadd_f32(v53, v55), (int8x8_t)vsub_f32(*(float32x2_t *)v46.f32, v54), 4uLL);
    *(float32x2_t *)&v60.u32[2] = vsub_f32(v57, v50);
    float32x2_t v61 = vmul_f32(v43, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
    float32x2_t v62 = vmul_f32(v61, v61);
    unsigned int v63 = v42 - 1;
    do
    {
      uint64_t v64 = v9[5].i64[0];
      uint64_t v65 = v63;
      float32x4_t v66 = (float32x4_t *)(v64 + 48 * v63);
      float32x4_t v67 = v66[1];
      float32x4_t v68 = vmulq_n_f32(v58, COERCE_FLOAT(*v66));
      v68.i32[3] = 0;
      float32x4_t v69 = vmulq_lane_f32(v59, *(float32x2_t *)v66->f32, 1);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_laneq_f32(v60, *v66, 2);
      v70.i32[3] = 0;
      float32x4_t v71 = vaddq_f32(v33, vaddq_f32(v70, vaddq_f32(v68, v69)));
      float32x4_t v72 = v66[2];
      float32x4_t v73 = v72;
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_f32(v73, vsubq_f32(v71, v67));
      v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
      float32x2_t v75 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
      float32x4_t v76 = vmlsq_lane_f32(v71, v73, v75, 0);
      v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
      float32x4_t v77 = vsubq_f32(v67, v76);
      float32x4_t v78 = vmulq_f32(v77, v77);
      v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), v62), 0), *(int8x8_t *)v18.f32).u32[0] == -1)
      {
        unsigned __int8 v79 = v9[4].i8[0] - 1;
        v9[4].i8[0] = v79;
        float32x2_t v80 = (float32x4_t *)(v64 + 48 * v79);
        float32x4_t v81 = *v80;
        float32x4_t v82 = v80[2];
        v66[1] = v80[1];
        v66[2] = v82;
        *float32x4_t v66 = v81;
      }
      else
      {
        v72.i32[3] = v75.i32[1];
        v66[2] = v72;
      }
      --v63;
    }
    while (v65);
    int v83 = v9[4].u8[0];
  }
  else
  {
    int v83 = 0;
  }
  v39.i32[3] = v36.i32[1];
  if (v83 != v42) {
    goto LABEL_13;
  }
  float32x2_t v84 = vmul_n_f32(v43, physx::Gu::invalidateThresholds2[v42]);
  int8x16_t v85 = (int8x16_t)vabdq_f32(v33, v9[1]);
  *(float32x2_t *)v85.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL), *(float32x2_t *)v85.i8);
  float32x2_t v86 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds2 + 4 * v42);
  float32x2_t v87 = vld1_dup_f32(v86);
  float32x4_t v88 = vmulq_f32(v39, *v9);
  v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
  *(int8x8_t *)v36.i8 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v87, vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v85.i8, *(float32x2_t *)v85.i8), v84)), 0), *(int8x8_t *)v18.f32);
  if (v36.i32[0] == -1)
  {
LABEL_13:
    BOOL v105 = 0;
    *float32x4_t v9 = v39;
    v9[1] = v33;
    if (*(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0) {
      BOOL v105 = *(float *)(a2 + 12) == 1.0;
    }
    float32x4_t v106 = *(float32x4_t *)(a2 + 16);
    v36.i32[0] = *(_DWORD *)(_X8 + 24);
    float32x4_t v107 = (float32x4_t)v36;
    v107.i32[1] = *(_DWORD *)(_X8 + 28);
    float32x4_t v108 = v107;
    v108.i32[2] = *(_DWORD *)(_X8 + 32);
    int v216 = 0;
    char v217 = 0;
    float32x4_t v213 = v108;
    uint64_t v224 = _X8;
    uint64_t v226 = *(void *)(_X8 + 40) + 20 * *(unsigned __int8 *)(_X8 + 39);
    char v227 = *(unsigned char *)(_X8 + 38);
    v109.i64[0] = *(void *)(_X8 + 60);
    v109.i64[1] = *(unsigned int *)(_X8 + 68);
    int32x4_t v110 = (int32x4_t)vmulq_f32(v17, v109);
    *(float32x2_t *)v110.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v110, 2), *(float32x2_t *)v110.i8);
    *(float *)v110.i32 = vpmin_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v110.i8).f32[0];
    float32x2_t v214 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v110.i32);
    float v215 = 0.025 * *(float *)v110.i32;
    if (v105)
    {
      v111.i64[0] = 1065353216;
      float32x4_t v112 = (float32x4_t)xmmword_23435FD60;
      long long v218 = xmmword_23435FD50;
      long long v219 = xmmword_23435FD60;
      long long v220 = xmmword_23435FD80;
      long long v221 = xmmword_23435FD50;
      long long v222 = xmmword_23435FD60;
      long long v223 = xmmword_23435FD80;
    }
    else
    {
      float32x4_t v113 = vrecpeq_f32(v17);
      int v114 = 4;
      do
      {
        float32x4_t v113 = vmulq_f32(v113, vrecpsq_f32(v113, v17));
        --v114;
      }
      while (v114);
      *(int32x2_t *)v115.f32 = vdup_lane_s32(*(int32x2_t *)v16.f32, 0);
      v115.i64[1] = v115.u32[0];
      if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v115, v17)), *(int8x8_t *)v18.f32).u32[0] & 0xFFFFFF) != 0)
      {
        float32x2_t v122 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 1);
        float32x2_t v123 = (float32x2_t)vdup_laneq_s32((int32x4_t)v106, 2);
        float32x2_t v124 = (float32x2_t)vdup_laneq_s32((int32x4_t)v106, 3);
        float32x4_t v125 = vaddq_f32(v106, v106);
        float32x2_t v126 = vmul_lane_f32(v122, *(float32x2_t *)v125.f32, 1);
        float32x2_t v127 = vmul_laneq_f32(v123, v125, 2);
        float32x2_t v128 = vmul_n_f32(v122, v125.f32[0]);
        float32x2_t v129 = vmul_n_f32(v123, v125.f32[0]);
        float32x2_t v130 = vmul_n_f32(v124, v125.f32[0]);
        float32x2_t v131 = vmul_lane_f32(v123, *(float32x2_t *)v125.f32, 1);
        float32x2_t v132 = vmul_lane_f32(v124, *(float32x2_t *)v125.f32, 1);
        float32x2_t v133 = vmul_laneq_f32(v124, v125, 2);
        float32x2_t v134 = vsub_f32(_D5, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v125.f32), 0));
        *(int8x8_t *)v135.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, v126), v127), (int8x8_t)vadd_f32(v128, v133), 4uLL);
        v135.i64[1] = vsub_f32(v129, v132).u32[0];
        int32x2_t v136 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v128, v133), (int8x8_t)vsub_f32(v134, v127), 4uLL);
        int8x8_t v137 = (int8x8_t)vadd_f32(v129, v132);
        *(int8x8_t *)v125.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v135.f32, 0), (int8x8_t)v136, 4uLL);
        int8x8_t v138 = (int8x8_t)vdup_lane_s32(v136, 1);
        *(int32x2_t *)v139.f32 = v136;
        v139.i64[1] = vadd_f32(v131, v130).u32[0];
        *(int8x8_t *)v140.f32 = vext_s8(v137, (int8x8_t)vsub_f32(v131, v130), 4uLL);
        *(int8x8_t *)v141.f32 = vext_s8(*(int8x8_t *)v135.f32, v138, 4uLL);
        v140.i64[1] = vsub_f32(v134, v126).u32[0];
        v125.i64[1] = vdup_lane_s32(*(int32x2_t *)v140.f32, 0).u32[0];
        v141.i64[1] = vdup_lane_s32(*(int32x2_t *)v140.f32, 1).u32[0];
        *(int8x8_t *)v142.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v135.u32[2], 0), *(int8x8_t *)&v139.u32[2], 4uLL);
        v142.i64[1] = vdup_lane_s32(*(int32x2_t *)&v140.u32[2], 0).u32[0];
        float32x4_t v143 = vmulq_n_f32(v125, v16.f32[0]);
        v143.i32[3] = 0;
        float32x4_t v144 = vmulq_lane_f32(v141, *(float32x2_t *)v16.f32, 1);
        v144.i32[3] = 0;
        float32x4_t v145 = vmulq_laneq_f32(v142, v16, 2);
        v145.i32[3] = 0;
        float32x4_t v146 = vmulq_n_f32(v143, v135.f32[0]);
        v146.i32[3] = 0;
        float32x4_t v147 = vmulq_lane_f32(v144, *(float32x2_t *)v135.f32, 1);
        v147.i32[3] = 0;
        float32x4_t v148 = vmulq_laneq_f32(v145, v135, 2);
        v148.i32[3] = 0;
        float32x4_t v116 = vaddq_f32(v148, vaddq_f32(v146, v147));
        float32x4_t v149 = vmulq_n_f32(v143, v139.f32[0]);
        v149.i32[3] = 0;
        float32x4_t v150 = vmulq_lane_f32(v144, *(float32x2_t *)v139.f32, 1);
        v150.i32[3] = 0;
        float32x4_t v151 = vmulq_laneq_f32(v145, v139, 2);
        v151.i32[3] = 0;
        float32x4_t v152 = vaddq_f32(v149, v150);
        float32x4_t v153 = vmulq_n_f32(v143, v140.f32[0]);
        v153.i32[3] = 0;
        float32x4_t v154 = vmulq_lane_f32(v144, *(float32x2_t *)v140.f32, 1);
        v154.i32[3] = 0;
        float32x4_t v155 = vmulq_laneq_f32(v145, v140, 2);
        v155.i32[3] = 0;
        float32x4_t v117 = vaddq_f32(v151, v152);
        float32x4_t v118 = vaddq_f32(v155, vaddq_f32(v153, v154));
        long long v218 = (__int128)v116;
        long long v219 = (__int128)v117;
        long long v220 = (__int128)v118;
        float32x4_t v156 = vmulq_n_f32(v125, v113.f32[0]);
        v156.i32[3] = 0;
        float32x4_t v157 = vmulq_lane_f32(v141, *(float32x2_t *)v113.f32, 1);
        v157.i32[3] = 0;
        float32x4_t v158 = vmulq_laneq_f32(v142, v113, 2);
        v158.i32[3] = 0;
        float32x4_t v159 = vmulq_n_f32(v156, v135.f32[0]);
        v159.i32[3] = 0;
        float32x4_t v160 = vmulq_lane_f32(v157, *(float32x2_t *)v135.f32, 1);
        v160.i32[3] = 0;
        float32x4_t v161 = vmulq_laneq_f32(v158, v135, 2);
        v161.i32[3] = 0;
        float32x4_t v119 = vaddq_f32(v161, vaddq_f32(v159, v160));
        float32x4_t v162 = vmulq_n_f32(v156, v139.f32[0]);
        v162.i32[3] = 0;
        float32x4_t v163 = vmulq_lane_f32(v157, *(float32x2_t *)v139.f32, 1);
        v163.i32[3] = 0;
        float32x4_t v164 = vmulq_laneq_f32(v158, v139, 2);
        v164.i32[3] = 0;
        float32x4_t v165 = vmulq_n_f32(v156, v140.f32[0]);
        v165.i32[3] = 0;
        float32x4_t v166 = vmulq_lane_f32(v157, *(float32x2_t *)v140.f32, 1);
        v166.i32[3] = 0;
        float32x4_t v120 = vaddq_f32(v164, vaddq_f32(v162, v163));
        float32x4_t v167 = vmulq_laneq_f32(v158, v140, 2);
        v167.i32[3] = 0;
        float32x4_t v121 = vaddq_f32(v167, vaddq_f32(v165, v166));
      }
      else
      {
        v113.i32[3] = 0;
        float32x4_t v116 = vmulq_f32(v17, (float32x4_t)xmmword_23435FD50);
        float32x4_t v117 = vmulq_f32(v17, (float32x4_t)xmmword_23435FD60);
        float32x4_t v118 = vmulq_f32(v17, (float32x4_t)xmmword_23435FD80);
        long long v218 = (__int128)v116;
        long long v219 = (__int128)v117;
        long long v220 = (__int128)v118;
        float32x4_t v119 = vmulq_f32(v113, (float32x4_t)xmmword_23435FD50);
        float32x4_t v120 = vmulq_f32(v113, (float32x4_t)xmmword_23435FD60);
        float32x4_t v121 = vmulq_f32(v113, (float32x4_t)xmmword_23435FD80);
      }
      long long v222 = (__int128)v120;
      long long v223 = (__int128)v121;
      float32x4_t v168 = vmulq_n_f32(v116, *(float *)v36.i32);
      v168.i32[3] = 0;
      float32x4_t v112 = vmulq_lane_f32(v117, *(float32x2_t *)v107.f32, 1);
      v112.i32[3] = 0;
      float32x4_t v169 = vmulq_laneq_f32(v118, v108, 2);
      v169.i32[3] = 0;
      float32x4_t v111 = vaddq_f32(v112, v168);
      float32x4_t v108 = vaddq_f32(v169, v111);
      long long v221 = (__int128)v119;
      float32x4_t v213 = v108;
    }
    uint64_t v225 = *(void *)(_X8 + 48);
    int v208 = 4;
    float32x4_t v204 = v33;
    uint64_t v212 = v18.i64[0];
    float32x4_t v210 = v33;
    float32x4_t v211 = v33;
    __int32 v205 = v7.i32[0];
    __int32 v206 = v7.i32[0];
    float32x2_t v191 = v7;
    __int32 v207 = v7.i32[0];
    char v209 = 1;
    uint64_t v203 = 0;
    long long v200 = 0u;
    long long v201 = 0u;
    v202[0] = 0u;
    float32x4_t v170 = vsubq_f32(v33, v108);
    v195[0] = &unk_26E7287F0;
    v195[1] = &v204;
    float32x4_t v194 = v170;
    float32x2_t v193 = &v213;
    if (v105)
    {
      int8x16_t v192 = &unk_26E729C88;
      int v171 = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>((uint64_t)v195, (uint64_t)&v192, &v194, (uint64_t *)&v199, 1, &v9[4].i8[3], &v9[4].i8[7], &v9[4].i8[2], *(double *)v170.i64, *(double *)v33.i64, *(int8x8_t *)v111.f32, v112, (uint64_t)&v200);
    }
    else
    {
      int8x16_t v192 = &unk_26E728850;
      int v171 = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v195, (uint64_t)&v192, &v194, (uint64_t *)&v199, 1, &v9[4].i8[3], &v9[4].i8[7], &v9[4].i8[2], *(double *)v170.i64, *(double *)v33.i64, *(int8x8_t *)v111.f32, v112, (uint64_t)&v200);
    }
    float32x2_t v172 = v191;
    switch(v171)
    {
      case 2:
        goto LABEL_33;
      case 4:
        goto LABEL_34;
      case 5:
        float32x2_t v193 = &v213;
        if (v105) {
          float32x4_t v173 = &unk_26E729C88;
        }
        else {
          float32x4_t v173 = &unk_26E728850;
        }
        int8x16_t v192 = v173;
        int v174 = physx::Gu::epaPenetration((uint64_t)v195);
        float32x2_t v172 = v191;
        if (v174 == 5)
        {
LABEL_33:
          uint64_t v175 = v9[5].i64[0];
          *(void *)uint64_t v175 = 0;
          *(void *)(v175 + 8) = 0;
          *(_OWORD *)(v175 + 16) = v201;
          float32x4_t v176 = (float32x4_t)v202[0];
          v176.i32[3] = HIDWORD(v203);
          *(float32x4_t *)(v175 + 32) = v176;
          float32x4_t v177 = (float32x4_t)v196[0];
          v177.i32[3] = 0;
          float32x2_t v178 = (float32x2_t)vdupq_laneq_s32(v196[0], 3).u64[0];
          float32x4_t v179 = vmulq_n_f32((float32x4_t)v202[0], vmla_f32((float32x2_t)0xBF000000BF000000, v178, v178).f32[0]);
          v179.i32[3] = 0;
          float32x2_t v180 = (float32x2_t)vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u64[0];
          float32x2_t v181 = (float32x2_t)vextq_s8(v202[0], v202[0], 8uLL).u64[0];
          int8x8_t v182 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v196[0].i8, (float32x2_t)vext_s8(*(int8x8_t *)v202[0].i8, (int8x8_t)v181, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v196[0].i8, (int8x8_t)v180, 4uLL), *(float32x2_t *)v202[0].i8);
          *(int8x8_t *)v183.f32 = vext_s8(v182, (int8x8_t)vmls_f32(vmul_f32(v180, *(float32x2_t *)v202[0].i8), *(float32x2_t *)v196[0].i8, v181), 4uLL);
          v183.i64[1] = v182.u32[0];
          float32x4_t v184 = vmlaq_laneq_f32(v179, v183, (float32x4_t)v196[0], 3);
          v184.i64[1] = vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL).u32[0];
          float32x4_t v185 = vmulq_f32(v177, (float32x4_t)v202[0]);
          v185.i64[0] = vpaddq_f32(v185, v185).u64[0];
          float32x4_t v186 = vmlaq_n_f32(v184, v177, vpadd_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32).f32[0]);
          float32x4_t v18 = vaddq_f32(v186, v186);
          v18.i32[3] = 0;
          int8x16_t v187 = (int8x16_t)vmlsq_lane_f32(v198, v18, v172, 0);
          v187.i64[1] = vextq_s8(v187, v187, 8uLL).u32[0];
          v9[4].i8[0] = 1;
          v177.i32[0] = v203;
          uint64_t v188 = *(unsigned int *)(a7 + 4096);
          *(_DWORD *)(a7 + 4096) = v188 + 1;
          uint64_t v189 = a7 + (v188 << 6);
          *(float32x4_t *)uint64_t v189 = v18;
          *(int8x16_t *)(v189 + 16) = v187;
          v18.f32[0] = v177.f32[0] - v172.f32[0];
          *(float *)(v189 + 12) = v177.f32[0] - v172.f32[0];
          *(_DWORD *)(v189 + 52) = -1;
        }
        else
        {
LABEL_34:
          v18.i64[0] = physx::Gu::fullContactsGenerationSphereConvex(&v204, &v213, &v197, v196, a7, a7, v105, (uint64_t)v9, (float32x4_t *)v202, (float32x2_t *)&v199).u64[0];
        }
        break;
      default:
        return *(double *)v18.i64;
    }
  }
  else if (v42)
  {
    int32x4_t v89 = *(int32x4_t *)(v9[5].i64[0] + 32);
    float32x4_t v90 = (float32x4_t)v89;
    v90.i32[3] = 0;
    float32x4_t v91 = (float32x4_t)v196[0];
    v91.i32[3] = 0;
    float32x2_t v92 = (float32x2_t)vdupq_laneq_s32(v196[0], 3).u64[0];
    float32x4_t v93 = vmulq_n_f32(v90, vmla_f32((float32x2_t)0xBF000000BF000000, v92, v92).f32[0]);
    v93.i32[3] = 0;
    float32x2_t v94 = (float32x2_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
    float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u64[0];
    int8x8_t v96 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v196[0].i8, (float32x2_t)vext_s8(*(int8x8_t *)v89.i8, (int8x8_t)v95, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v196[0].i8, (int8x8_t)v94, 4uLL), *(float32x2_t *)v89.i8);
    *(int8x8_t *)v97.f32 = vext_s8(v96, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v89.i8, v94), *(float32x2_t *)v196[0].i8, v95), 4uLL);
    v97.i64[1] = v96.u32[0];
    float32x4_t v98 = vmlaq_laneq_f32(v93, v97, (float32x4_t)v196[0], 3);
    v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
    float32x4_t v99 = vmulq_f32(v90, v91);
    v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
    float32x4_t v100 = vmlaq_n_f32(v98, v91, vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32).f32[0]);
    float32x4_t v101 = vaddq_f32(v100, v100);
    v101.i32[3] = 0;
    int8x16_t v102 = (int8x16_t)vmlsq_lane_f32(v19, v101, v7, 0);
    v102.i64[1] = vextq_s8(v102, v102, 8uLL).u32[0];
    *(float32x2_t *)v18.f32 = vsub_f32((float32x2_t)vdup_laneq_s32(v89, 3), *(float32x2_t *)v18.f32);
    uint64_t v103 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v103 + 1;
    uint64_t v104 = a7 + (v103 << 6);
    *(float32x4_t *)uint64_t v104 = v101;
    *(int8x16_t *)(v104 + 16) = v102;
    *(_DWORD *)(v104 + 12) = v18.i32[0];
    *(_DWORD *)(v104 + 52) = -1;
  }
  return *(double *)v18.i64;
}

float32x4_t physx::Gu::fullContactsGenerationSphereConvex(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int32x4_t *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, float32x4_t *a9, float32x2_t *a10)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  physx::Gu::getPCMConvexData(a2, a7, (uint64_t)v37);
  v38[4] = a4;
  v38[5] = a2 + 3;
  v38[6] = a2 + 6;
  if (a7)
  {
    char v17 = 1;
    float32x4_t v18 = &unk_26E728728;
  }
  else
  {
    char v17 = 0;
    float32x4_t v18 = &unk_26E728778;
  }
  char v39 = v17;
  v38[0] = v18;
  float32x2_t v40 = a2;
  int v36 = 0;
  int v19 = physx::Gu::generateSphereFullContactManifold(a1, (uint64_t)v37, (uint64_t)v38, a5, &v36, a10, a9, 1);
  if (!v36) {
    int v19 = 0;
  }
  if (v19 == 1)
  {
    float32x4_t v21 = *(_OWORD **)(a8 + 80);
    *float32x4_t v21 = *(_OWORD *)a5;
    v21[1] = *(_OWORD *)(a5 + 16);
    v21[2] = *(_OWORD *)(a5 + 32);
    *(unsigned char *)(a8 + 64) = 1;
    float32x4_t v22 = *(float32x4_t *)a4;
    v22.i32[3] = 0;
    float32x2_t v23 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
    float32x4_t v24 = vmulq_n_f32(*a9, vmla_f32((float32x2_t)0xBF000000BF000000, v23, v23).f32[0]);
    v24.i32[3] = 0;
    float32x2_t v25 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    float32x2_t v26 = (float32x2_t)vextq_s8(*(int8x16_t *)a9, *(int8x16_t *)a9, 8uLL).u64[0];
    int8x8_t v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)a9->f32, (int8x8_t)v26, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v25, 4uLL), *(float32x2_t *)a9->f32);
    *(int8x8_t *)v28.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(v25, *(float32x2_t *)a9->f32), *(float32x2_t *)a4->i8, v26), 4uLL);
    v28.i64[1] = v27.u32[0];
    float32x4_t v29 = vmlaq_laneq_f32(v24, v28, *(float32x4_t *)a4, 3);
    v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
    float32x4_t v30 = vmulq_f32(v22, *a9);
    v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
    float32x4_t v31 = vmlaq_n_f32(v29, v22, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
    float32x4_t result = vaddq_f32(v31, v31);
    result.i32[3] = 0;
    v22.i64[0] = a1[5].i64[0];
    int8x16_t v32 = (int8x16_t)vmlsq_lane_f32(a3[1], result, *(float32x2_t *)v22.f32, 0);
    v32.i64[1] = vextq_s8(v32, v32, 8uLL).u32[0];
    v22.i32[0] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)(a5 + 32), 3), *(float32x2_t *)v22.f32).u32[0];
    uint64_t v33 = *(unsigned int *)(a6 + 4096);
    *(_DWORD *)(a6 + 4096) = v33 + 1;
    uint64_t v34 = a6 + (v33 << 6);
    *(float32x4_t *)uint64_t v34 = result;
    *(int8x16_t *)(v34 + 16) = v32;
    *(_DWORD *)(v34 + 12) = v22.i32[0];
    *(_DWORD *)(v34 + 52) = -1;
  }
  return result;
}

BOOL physx::Gu::pcmContactSphereHeightField(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = v6;
  uint64_t v158 = *MEMORY[0x263EF8340];
  float32x4_t v9 = *v8;
  float32x4_t v10 = *v3;
  v11.i64[0] = v3[1].i64[0];
  v11.i64[1] = v3[1].u32[2];
  v12.i64[0] = v4[1].i64[0];
  v12.i64[1] = v4[1].u32[2];
  float32x4_t v13 = *v4;
  int32x2_t v14 = *(int32x2_t *)(v1 + 4);
  float32x2_t v15 = (float32x2_t)vdup_lane_s32(v14, 0);
  float32x2_t v137 = (float32x2_t)vdup_lane_s32(*v5, 0);
  float32x2_t v138 = v15;
  v136[0] = v10;
  v136[1] = v11;
  float32x4_t v16 = vnegq_f32(v13);
  float32x4_t v17 = vsubq_f32(v11, v12);
  float32x4_t v18 = v16;
  v18.i32[3] = 0;
  float32x2_t v19 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v13, 3).u64[0];
  float32x4_t v20 = vmulq_n_f32(v17, vmla_f32((float32x2_t)0xBF000000BF000000, v19, v19).f32[0]);
  v20.i32[3] = 0;
  v135[0] = v13;
  v135[1] = v12;
  float32x2_t v21 = (float32x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
  float32x2_t v22 = (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v21, 4uLL);
  int8x8_t v23 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL)), v22, *(float32x2_t *)v17.f32);
  *(int8x8_t *)v12.f32 = vext_s8(v23, (int8x8_t)vmls_f32(vmul_f32(v21, *(float32x2_t *)v17.f32), *(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)), 4uLL);
  v12.i64[1] = v23.u32[0];
  float32x4_t v24 = vmlaq_laneq_f32(v20, v12, v13, 3);
  v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
  float32x4_t v25 = vmulq_f32(v18, v17);
  v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
  float32x4_t v26 = vmlaq_n_f32(v24, v18, vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0]);
  float32x4_t v27 = vaddq_f32(v26, v26);
  v27.i32[3] = 0;
  float32x4_t v28 = v10;
  v28.i32[3] = 0;
  float32x4_t v29 = vmulq_f32(v28, v18);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  float32x2_t v30 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL)), vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32));
  float32x4_t v31 = vmulq_laneq_f32(v18, v10, 3);
  float32x4_t v32 = vmulq_laneq_f32(v28, v13, 3);
  v28.i64[0] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  *(float32x2_t *)v29.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v10.f32, *(int8x8_t *)v28.f32, 4uLL), *(float32x2_t *)v16.f32), v22, *(float32x2_t *)v10.f32);
  *(int8x8_t *)v10.f32 = vext_s8(*(int8x8_t *)v29.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v10.f32, v21), *(float32x2_t *)v16.f32, *(float32x2_t *)v28.f32), 4uLL);
  v10.i64[1] = v29.i64[0];
  float32x4_t v33 = vaddq_f32(vaddq_f32(v31, v32), v10);
  float32x4_t v34 = v33;
  v34.i32[3] = v30.i32[1];
  int8x16_t v35 = (int8x16_t)vabdq_f32(v27, v9[1]);
  *(float32x2_t *)v35.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(float32x2_t *)v35.i8);
  float32x4_t v36 = vmulq_f32(v34, *v9);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  __asm { FMOV            V3.2S, #1.0 }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)v14.i32))), 0), (int8x8_t)v14).u32[0] == -1)
  {
    float32x4_t v71 = (float *)v4;
    v9[3].i8[14] = 0;
    *float32x4_t v9 = v34;
    v9[1] = v27;
    float32x2_t v134 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)v14.i32);
    float32x2_t v132 = v2[1];
    float32x2_t v133 = v2;
    float v72 = v2[3].f32[0];
    int32x2_t v130 = vrev64_s32((int32x2_t)vdiv_f32(_D3, v2[2]));
    float v131 = 1.0 / v72;
    float v73 = v3[1].f32[0] - v4[1].f32[0];
    float v74 = v3[1].f32[1] - v4[1].f32[1];
    float v75 = v3[1].f32[2] - v4[1].f32[2];
    float v76 = v73 + v73;
    float v77 = v74 + v74;
    float v78 = v75 + v75;
    float v80 = v4->f32[2];
    float v79 = v4->f32[3];
    float v81 = (float)(v79 * v79) + -0.5;
    float v82 = v4->f32[1];
    float v83 = (float)((float)(v77 * v82) + (float)(v4->f32[0] * v76)) + (float)(v80 * v78);
    *(float *)&unsigned int v84 = (float)((float)(v76 * v81) - (float)((float)((float)(v82 * v78) - (float)(v80 * v77)) * v79))
                   + (float)(v4->f32[0] * v83);
    *(float *)&unsigned int v85 = (float)((float)(v77 * v81) - (float)((float)((float)(v80 * v76) - (float)(v4->f32[0] * v78)) * v79))
                   + (float)(v82 * v83);
    *(float *)&unsigned int v86 = (float)((float)(v78 * v81) - (float)((float)((float)(v4->f32[0] * v77) - (float)(v82 * v76)) * v79))
                   + (float)(v80 * v83);
    *(void *)&long long v87 = __PAIR64__(v85, v84);
    *((void *)&v87 + 1) = v86;
    long long v128 = v87;
    *(float *)&long long v87 = *(float *)(v1 + 4) + *(float *)v5->i32;
    v129[0] = *(float *)&v84 - *(float *)&v87;
    v129[1] = *(float *)&v85 - *(float *)&v87;
    v129[2] = *(float *)&v86 - *(float *)&v87;
    v129[3] = *(float *)&v87 + *(float *)&v84;
    v129[4] = *(float *)&v87 + *(float *)&v85;
    v129[5] = *(float *)&v87 + *(float *)&v86;
    uint64_t v157 = 0x44000000000;
    char v155 = 1;
    float32x4_t v156 = v154;
    v140.i64[0] = (uint64_t)&unk_26E729FC0;
    v140.i64[1] = (uint64_t)&v130;
    *(void *)&long long v141 = v4;
    (*(void (**)(__int16 *__return_ptr, float32x2_t))(**(void **)&v132 + 104))(&v139, v132);
    BYTE8(v141) = (v139 & 1) == 0;
    v140.i64[0] = (uint64_t)&unk_26E729F68;
    physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration((unint64_t)v142, &v137, &v134, v136, v135, (uint64_t)v9, v7, (uint64_t)v154, 0);
    long long v148 = v128;
    float32x2_t v149 = v15;
    uint64_t v153 = 0x4000000000;
    v151[1024] = 1;
    float32x4_t v152 = v151;
    float32x2_t v88 = vadd_f32(v15, v137);
    float32x2_t v150 = vmul_f32(v88, v88);
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v130, v71, v129, 0, (uint64_t)&v140);
    physx::Gu::PCMSphereVsMeshContactGeneration::generateLastContacts((physx::Gu::PCMSphereVsMeshContactGeneration *)v142);
    unsigned int v90 = v147;
    if (v147)
    {
      uint64_t v91 = HIDWORD(v147);
      if (HIDWORD(v147) >= 2)
      {
        int v92 = 0;
        unsigned int v93 = -1;
        uint64_t v94 = 1;
        do
        {
          float32x2_t v95 = (char *)v142 + 8 * v94;
          uint64_t v96 = *((void *)v95 + 255);
          uint64_t v97 = *((void *)v95 + 256);
          if (COERCE_FLOAT(*(void *)(v96 + 40)) > COERCE_FLOAT(*(void *)(v97 + 40)))
          {
            *((void *)v95 + 255) = v97;
            *((void *)v95 + 256) = v96;
            if ((int)v94 - 2 >= 0)
            {
              float32x4_t v98 = &v143[v93 + 1];
              int v99 = v92;
              do
              {
                uint64_t v101 = *(v98 - 1);
                uint64_t v100 = *v98;
                if (COERCE_FLOAT(*(void *)(*v98 + 40)) >= COERCE_FLOAT(*(void *)(v101 + 40))) {
                  break;
                }
                *float32x4_t v98 = v101;
                *--float32x4_t v98 = v100;
                --v99;
              }
              while (v99 > 0);
            }
          }
          ++v94;
          ++v93;
          ++v92;
        }
        while (v94 != v91);
      }
      if (v91)
      {
        uint64_t v102 = 0;
        for (uint64_t i = 0; i != v91; ++i)
        {
          uint64_t v104 = (float32x4_t *)v143[i];
          v104[1].i64[1] = (uint64_t)v104;
          v104[2].i64[0] = (uint64_t)v104;
          int v105 = v104[3].i32[1] - v104[3].i32[0];
          v104[3].i32[2] = v105;
          v104[1].i64[0] = 0;
          uint64_t v106 = v102;
          while (v106)
          {
            uint64_t v107 = *(void *)((char *)&v142[127] + v106 + 8);
            float32x4_t v108 = *(float32x4_t **)(v107 + 32);
            float32x4_t v109 = vmulq_f32(*v104, *v108);
            v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
            v106 -= 8;
            if (vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32).f32[0] >= *(float *)&v144)
            {
              *(void *)(v107 + 16) = v104;
              v108[1].i64[1] = (uint64_t)v104;
              v104[2].i64[0] = (uint64_t)v108;
              *(_DWORD *)(*(void *)(v107 + 32) + 56) += v105;
              break;
            }
          }
          v102 += 8;
        }
        uint64_t v110 = 0;
        uint64_t v111 = v146;
        do
        {
          uint64_t v112 = v143[v110];
          if (v112) {
            _ZF = *(void *)(v112 + 32) == v112;
          }
          else {
            _ZF = 0;
          }
          if (_ZF)
          {
            while (*(void *)(v112 + 16))
            {
              uint64_t v114 = v112;
              uint64_t v112 = *(void *)(v112 + 16);
              unint64_t v115 = *(unsigned int *)(v114 + 48);
              unint64_t v116 = *(unsigned int *)(v114 + 52);
              if (v115 < v116)
              {
                unsigned int v117 = *(_DWORD *)(v112 + 52);
                do
                {
                  unsigned int v118 = *(_DWORD *)(v112 + 48);
                  if (v118 < v117)
                  {
                    do
                    {
                      unint64_t v119 = v111 + ((unint64_t)v118 << 6);
                      float32x4_t v120 = vsubq_f32(*(float32x4_t *)(v119 + 16), *(float32x4_t *)(v111 + (v115 << 6) + 16));
                      float32x4_t v121 = vmulq_f32(v120, v120);
                      v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
                      if (*(float *)&v145 > vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32).f32[0])
                      {
                        float32x2_t v122 = (long long *)(v111 + ((unint64_t)(v117 - 1) << 6));
                        long long v123 = *v122;
                        long long v124 = v122[1];
                        long long v125 = v122[2];
                        *(_DWORD *)(v119 + 48) = *((_DWORD *)v122 + 12);
                        *(_OWORD *)(v119 + 16) = v124;
                        *(_OWORD *)(v119 + 32) = v125;
                        *(_OWORD *)unint64_t v119 = v123;
                        unsigned int v117 = *(_DWORD *)(v112 + 52) - 1;
                        *(_DWORD *)(v112 + 52) = v117;
                        --v118;
                      }
                      ++v118;
                    }
                    while (v118 < v117);
                    unint64_t v116 = *(unsigned int *)(v114 + 52);
                  }
                  ++v115;
                }
                while (v115 < v116);
              }
            }
          }
          ++v110;
        }
        while (v110 != v91);
        uint64_t v126 = v146;
        unsigned int v90 = v147;
        unsigned int v127 = HIDWORD(v147);
      }
      else
      {
        unsigned int v127 = 0;
        uint64_t v126 = v146;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v143[36], v126, v90, v143, v127, v89, &v144, 1);
      uint64_t v147 = 0;
    }
    v140.i64[0] = (uint64_t)&unk_26E729F68;
    if ((v153 & 0x8000000000000000) == 0 && (v153 & 0x7FFFFFFF00000000) != 0 && v152 != v151 && v152) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    if ((v157 & 0x8000000000000000) == 0 && (v157 & 0x7FFFFFFF00000000) != 0 && v156 != v154 && v156) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  else
  {
    float32x2_t v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.f32, 1);
    float32x2_t v42 = (float32x2_t)vdup_laneq_s32((int32x4_t)v33, 2);
    float32x4_t v43 = vaddq_f32(v33, v33);
    float32x2_t v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 1);
    float32x2_t v45 = (float32x2_t)vdup_laneq_s32((int32x4_t)v43, 2);
    float32x2_t v46 = vmul_lane_f32(v41, *(float32x2_t *)v43.f32, 1);
    float32x2_t v47 = vmul_laneq_f32(v42, v43, 2);
    float32x2_t v48 = vmul_n_f32(v41, v43.f32[0]);
    float32x2_t v49 = vmul_n_f32(v42, v43.f32[0]);
    float32x2_t v50 = vmul_lane_f32(v42, *(float32x2_t *)v43.f32, 1);
    float32x2_t v51 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v43.f32), 0);
    *(float32x2_t *)v43.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0), v30, 1);
    float32x2_t v52 = vmul_lane_f32(v44, v30, 1);
    float32x2_t v53 = vmul_lane_f32(v45, v30, 1);
    float32x2_t v54 = vsub_f32(_D3, v51);
    *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, v46), v47), (int8x8_t)vadd_f32(v48, v53), 4uLL);
    v55.i64[1] = vsub_f32(v49, v52).u32[0];
    *(int8x8_t *)&long long v56 = vext_s8((int8x8_t)vsub_f32(v48, v53), (int8x8_t)vsub_f32(v54, v47), 4uLL);
    *((void *)&v56 + 1) = vadd_f32(v50, *(float32x2_t *)v43.f32).u32[0];
    float32x4_t v140 = v55;
    long long v141 = v56;
    *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vadd_f32(v49, v52), (int8x8_t)vsub_f32(v50, *(float32x2_t *)v43.f32), 4uLL);
    v55.i64[1] = vsub_f32(v54, v46).u32[0];
    v142[0] = v55;
    v142[1] = v27;
    v154[0] = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)v14.i32);
    unsigned int v57 = v9[3].u8[14];
    if (v9[3].i8[14])
    {
      unsigned int v58 = 0;
      do
      {
        float32x4_t v59 = &v9[3].i8[v58 + 8];
        uint64_t v60 = *v59;
        unsigned int v61 = v57 - 2;
        if (v58 < v61) {
          unsigned int v61 = v58;
        }
        _X8 = (uint64_t)&v9[25 * v9[3].u8[v61 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        unsigned __int32 v66 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&v9[25 * *v59 + 4], &v140, v154).u32[0];
        if (v9[25 * v60 + 28].i32[0])
        {
          v9[2].i32[v60] = v66;
        }
        else
        {
          unsigned __int8 v67 = v9[3].i8[14] - 1;
          v9[3].i8[14] = v67;
          float32x4_t v68 = (char *)v9 + v67;
          __int8 v69 = v68[56];
          v68[56] = v60;
          *float32x4_t v59 = v69;
          --v58;
        }
        ++v58;
        unsigned int v57 = v9[3].u8[14];
      }
      while (v58 < v57);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v9, v7, v136, (int32x4_t *)v135, &v138);
}

void physx::PCMSphereVsHeightfieldContactGenerationCallback::~PCMSphereVsHeightfieldContactGenerationCallback(physx::PCMSphereVsHeightfieldContactGenerationCallback *this)
{
  *(void *)this = &unk_26E729F68;
  int v1 = *((_DWORD *)this + 1217);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    unsigned int v2 = (physx::PCMSphereVsHeightfieldContactGenerationCallback *)*((void *)this + 607);
    if (v2 == (physx::PCMSphereVsHeightfieldContactGenerationCallback *)((char *)this + 3824))
    {
      *((unsigned char *)this + 4848) = 0;
    }
    else if (v2)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
}

{
  int v1;
  physx::PCMSphereVsHeightfieldContactGenerationCallback *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E729F68;
  int v1 = *((_DWORD *)this + 1217);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    unsigned int v2 = (physx::PCMSphereVsHeightfieldContactGenerationCallback *)*((void *)this + 607);
    if (v2 == (physx::PCMSphereVsHeightfieldContactGenerationCallback *)((char *)this + 3824))
    {
      *((unsigned char *)this + 4848) = 0;
    }
    else if (v2)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  JUMPOUT(0x237DBCBD0);
}

BOOL physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x4_t *a4, float32x2_t *a5)
{
  *(unsigned char *)(a1 + 63) = 0;
  unsigned int v5 = *(unsigned __int8 *)(a1 + 62);
  if (*(unsigned char *)(a1 + 62))
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v13.i64[0] = 0x4000000040000000;
    v13.i64[1] = 0x4000000040000000;
    do
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + v6 + 56);
      float32x2_t v15 = (float32x4_t *)(a1 + 400 * *(unsigned __int8 *)(a1 + v6 + 56));
      unint64_t v16 = v15[28].u32[0];
      *(unsigned char *)(a1 + 63) += v16;
      float32x4_t v17 = v15[6];
      if (v16 >= 2)
      {
        unint64_t v18 = v16 - 1;
        float32x2_t v19 = (float32x4_t *)(a1 + 160 + 400 * v14);
        do
        {
          float32x4_t v20 = *v19;
          v19 += 4;
          float32x4_t v17 = vaddq_f32(v17, v20);
          --v18;
        }
        while (v18);
      }
      float32x4_t v21 = v17;
      v21.i32[3] = 0;
      float32x4_t v22 = *(float32x4_t *)a4;
      v22.i32[3] = 0;
      float32x2_t v23 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
      float32x4_t v24 = vmulq_n_f32(v21, vmla_f32((float32x2_t)0xBF000000BF000000, v23, v23).f32[0]);
      v24.i32[3] = 0;
      float32x2_t v25 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
      float32x2_t v26 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
      int8x8_t v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)v26, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v25, 4uLL), *(float32x2_t *)v17.f32);
      *(int8x8_t *)v28.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, v25), *(float32x2_t *)a4->i8, v26), 4uLL);
      v28.i64[1] = v27.u32[0];
      float32x4_t v29 = vmlaq_laneq_f32(v24, v28, *(float32x4_t *)a4, 3);
      v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
      float32x4_t v30 = vmulq_f32(v21, v22);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      float32x4_t v31 = vmlaq_n_f32(v29, v22, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
      float32x4_t v32 = vaddq_f32(v31, v31);
      v32.i32[3] = 0;
      float32x4_t v33 = vmulq_f32(v32, v32);
      v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
      float32x2_t v34 = vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
      float32x2_t v35 = vrsqrte_f32(v34);
      int v36 = 4;
      do
      {
        float32x2_t v35 = vmul_f32(v35, vrsqrts_f32(vmul_f32(v35, v35), v34));
        --v36;
      }
      while (v36);
      float32x2_t v37 = vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v34), 0), _D0, (int8x8_t)v35));
      float32x2_t v38 = vrecpe_f32(v37);
      int v39 = 4;
      do
      {
        float32x2_t v38 = vmul_f32(v38, vrecps_f32(v37, v38));
        --v39;
      }
      while (v39);
      if (v7 <= 0x3F && v16)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        float32x4_t v42 = vmulq_n_f32(v32, v38.f32[0]);
        v42.i32[3] = 0;
        float32x4_t v43 = vnegq_f32(v42);
        uint64_t v44 = a1 + 400 * v14;
        do
        {
          float32x4_t v45 = *a3;
          v45.i32[3] = 0;
          float32x2_t v46 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a3, 3).u64[0];
          float32x4_t v47 = *(float32x4_t *)(v44 + v40 + 64);
          float32x4_t v48 = vmulq_n_f32(v47, vmla_f32((float32x2_t)0xBF000000BF000000, v46, v46).f32[0]);
          v48.i32[3] = 0;
          float32x2_t v49 = (float32x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
          float32x2_t v50 = (float32x2_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
          int8x8_t v51 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->f32, (float32x2_t)vext_s8(*(int8x8_t *)v47.f32, (int8x8_t)v50, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a3->f32, (int8x8_t)v49, 4uLL), *(float32x2_t *)v47.f32);
          *(int8x8_t *)v52.f32 = vext_s8(v51, (int8x8_t)vmls_f32(vmul_f32(v49, *(float32x2_t *)v47.f32), *(float32x2_t *)a3->f32, v50), 4uLL);
          v52.i64[1] = v51.u32[0];
          float32x4_t v53 = vmlaq_laneq_f32(v48, v52, *a3, 3);
          v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
          float32x4_t v54 = vmulq_f32(v45, v47);
          v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
          float32x4_t v55 = vmlaq_n_f32(v53, v45, vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32).f32[0]);
          v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
          float32x4_t v56 = vmlaq_f32(a3[1], v13, v55);
          v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
          int8x16_t v57 = (int8x16_t)vmlaq_n_f32(v56, v43, COERCE_FLOAT(*a5));
          v57.i64[1] = vextq_s8(v57, v57, 8uLL).u32[0];
          v54.i32[0] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)(v44 + v40 + 96), 3), *a5).u32[0];
          uint64_t v58 = a2 + (v7 << 6) + v40;
          *(float32x4_t *)uint64_t v58 = v42;
          *(int8x16_t *)(v58 + 16) = v57;
          *(_DWORD *)(v58 + 12) = v54.i32[0];
          *(_DWORD *)(v58 + 52) = *(_DWORD *)(v44 + v40 + 112);
          int v59 = v41 + 1;
          if (v41 + 1 >= v16) {
            break;
          }
          unint64_t v60 = v7 + v41;
          v40 += 64;
          ++v41;
        }
        while (v60 < 0x3F);
        unint64_t v7 = (v7 + v59);
        unsigned int v5 = *(unsigned __int8 *)(a1 + 62);
      }
      ++v6;
    }
    while (v6 < v5);
  }
  else
  {
    unint64_t v7 = 0;
  }
  *(_DWORD *)(a2 + 4096) = v7;
  return v7 != 0;
}

BOOL physx::Gu::pcmContactSphereMesh(uint64_t a1)
{
  double v19 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = v4;
  uint64_t v185 = *MEMORY[0x263EF8340];
  unint64_t v7 = *v6;
  float32x4_t v9 = *(float32x4_t *)v8;
  float v10 = *(float *)(v8 + 16);
  HIDWORD(v11) = 0;
  v12.i32[3] = 0;
  v12.f32[0] = v10;
  float32x4_t v13 = *(float32x4_t *)v2;
  float v14 = *(float *)(v2 + 16);
  float32x2_t v15 = *(float32x2_t *)(v8 + 20);
  *(float32x2_t *)&v12.i32[1] = v15;
  float32x2_t v16 = *(float32x2_t *)(v2 + 20);
  v17.i32[3] = 0;
  v17.f32[0] = v14;
  *(float32x2_t *)&v17.i32[1] = v16;
  LODWORD(v19) = *(_DWORD *)(v18 + 4);
  float32x2_t v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v19, 0);
  v22.i32[0] = *v21;
  float32x2_t v163 = (float32x2_t)vdup_lane_s32(v22, 0);
  float32x2_t v164 = v20;
  v162[0] = v9;
  v162[1] = v12;
  v161[0] = v13;
  v161[1] = v17;
  float32x4_t v23 = vnegq_f32(v13);
  float32x4_t v24 = v23;
  v24.i32[3] = 0;
  float32x4_t v25 = vsubq_f32(v12, v17);
  float32x2_t v26 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v13, 3).u64[0];
  float32x4_t v27 = vmulq_n_f32(v25, vmla_f32((float32x2_t)0xBF000000BF000000, v26, v26).f32[0]);
  v27.i32[3] = 0;
  float32x2_t v28 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  float32x2_t v29 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v28, 4uLL);
  int8x8_t v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), v29, *(float32x2_t *)v25.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)v25.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  float32x4_t v32 = vmlaq_laneq_f32(v27, v31, v13, 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  float32x4_t v33 = vmulq_f32(v24, v25);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  float32x4_t v34 = vmlaq_n_f32(v32, v24, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  float32x4_t v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  float32x4_t v36 = v9;
  v36.i32[3] = 0;
  float32x4_t v37 = vmulq_f32(v36, v24);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  float32x2_t v38 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL)), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32));
  float32x4_t v39 = vmulq_laneq_f32(v24, v9, 3);
  v37.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  *(float32x2_t *)v31.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v9.f32, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v23.f32), v29, *(float32x2_t *)v9.f32);
  *(int8x8_t *)v9.f32 = vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v28), *(float32x2_t *)v23.f32, *(float32x2_t *)v37.f32), 4uLL);
  v9.i64[1] = v31.i64[0];
  float32x4_t v40 = vaddq_f32(vaddq_f32(v39, vmulq_laneq_f32(v36, v13, 3)), v9);
  float32x4_t v41 = v40;
  v41.i32[3] = v38.i32[1];
  int8x16_t v42 = (int8x16_t)vabdq_f32(v35, v7[1]);
  *(float32x2_t *)v42.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), *(float32x2_t *)v42.i8);
  float32x4_t v43 = vmulq_f32(v41, *v7);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)&v19))), 0), *(int8x8_t *)&v19).u32[0] == -1)
  {
    uint64_t v77 = v3;
    float32x2_t v160 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)&v19);
    float32x2_t v78 = vsub_f32(v15, v16);
    *(float *)&unsigned int v79 = (float)(v10 - v14) + (float)(v10 - v14);
    float v80 = *(float *)(v2 + 12);
    float v81 = (float)(v80 * v80) + -0.5;
    float32x2_t v82 = vadd_f32(v78, v78);
    _D7 = *(float32x2_t *)(v2 + 4);
    _D18 = (float32x2_t)__PAIR64__(_D7.u32[1], v82.u32[1]);
    __asm { FMLA            S16, S18, V7.S[1] }
    v86.i32[0] = _D7.i32[0];
    v86.i32[1] = *(_DWORD *)v2;
    _D18.i32[0] = *(_DWORD *)v2;
    float32x2_t v141 = vmla_n_f32(vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(vneg_f32(vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v82.u32[1], v79), vneg_f32(v86)), (float32x2_t)__PAIR64__(v79, v82.u32[0]), _D18)), v80)), v82, v81), _D7, _S16);
    float v142 = (float)((float)(*(float *)&v79 * v81)
                 - (float)(vmlas_n_f32((float)-_D7.f32[1] * v82.f32[0], v82.f32[1], _D7.f32[0]) * v80))
         + (float)(*(float *)v2 * _S16);
    *(void *)&long long v11 = __PAIR64__(v141.u32[0], LODWORD(v142));
    *(float *)&double v19 = *(float *)&v19 + *(float *)v22.i32;
    int32x2_t v140 = *(int32x2_t *)&v19;
    DWORD2(v11) = v141.i32[1];
    long long v143 = v11;
    uint64_t v87 = *(void *)(v1 + 48);
    v157[0] = xmmword_23435FD50;
    v157[1] = xmmword_23435FD50;
    v157[2] = xmmword_234376D80;
    v157[3] = xmmword_23435FD60;
    uint64_t v158 = 0x3F80000000000000;
    char v159 = 0;
    float v88 = 1.0;
    BOOL v89 = *(float *)(v1 + 4) == 1.0;
    if (*(float *)(v1 + 8) != 1.0) {
      BOOL v89 = 0;
    }
    BOOL v90 = *(float *)(v1 + 12) == 1.0 && v89;
    if (!v90)
    {
      float32x4_t v138 = v41;
      float32x4_t v139 = v35;
      physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v157, (float *)(v1 + 4), (float *)(v1 + 16));
      float32x4_t v41 = v138;
      float32x4_t v35 = v139;
    }
    v7[3].i8[14] = 0;
    *unint64_t v7 = v41;
    v7[1] = v35;
    uint64_t v184 = 0x44000000000;
    char v182 = 1;
    float32x4_t v183 = v181;
    uint64_t v91 = *(void *)(v87 + 80);
    v165.i32[2] = 2;
    *(void *)&long long v166 = v157;
    *((void *)&v166 + 1) = v91;
    LOBYTE(v167[0]) = v90;
    int v168 = 0;
    v165.i64[0] = (uint64_t)&unk_26E729FE8;
    physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration((unint64_t)v169, &v163, &v160, v162, v161, (uint64_t)v7, v5, (uint64_t)v181, v77);
    float v92 = v142;
    long long v175 = v143;
    float32x2_t v176 = v20;
    uint64_t v180 = 0x4000000000;
    v178[1024] = 1;
    float32x4_t v179 = v178;
    float32x2_t v93 = vadd_f32(v20, v163);
    float32x2_t v177 = vmul_f32(v93, v93);
    __int32 v95 = v140.i32[0];
    float32x2_t v94 = v141;
    float32x2_t v156 = v141;
    v153.i32[0] = v140.i32[0];
    v153.i32[1] = v140.i32[0];
    __int32 v154 = v140.i32[0];
    float v155 = v142;
    long long v96 = xmmword_23435FD50;
    long long v150 = xmmword_23435FD50;
    long long v151 = xmmword_23435FD50;
    *(float *)&int v152 = 1.0;
    if (v90)
    {
      int32x2_t v97 = vdup_lane_s32(v140, 0);
      long long v98 = xmmword_23435FD50;
    }
    else
    {
      physx::Cm::FastVertex2ShapeScaling::transformQueryBounds((uint64_t)v157, &v155, (float *)&v153, (float *)&v150);
      long long v96 = v150;
      long long v98 = v151;
      float v88 = *(float *)&v152;
      __int32 v95 = v154;
      float v92 = v155;
      float32x2_t v94 = v156;
      int32x2_t v97 = v153;
    }
    v144[0] = v96;
    v144[1] = v98;
    float v145 = v88;
    float v146 = v92;
    float32x2_t v147 = v94;
    int32x2_t v148 = v97;
    __int32 v149 = v95;
    ((void (*)(uint64_t, _OWORD *, float32x4_t *, uint64_t, uint64_t))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v87 + 8) - 3])(v87, v144, &v165, 1, 1);
    if (v168)
    {
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMSphereVsMeshContactGeneration>((BOOL)v169, (uint64_t)v167 + 4);
      int v168 = 0;
    }
    physx::Gu::PCMSphereVsMeshContactGeneration::generateLastContacts((physx::Gu::PCMSphereVsMeshContactGeneration *)v169);
    unsigned int v100 = v174;
    if (v174)
    {
      uint64_t v101 = HIDWORD(v174);
      if (HIDWORD(v174) >= 2)
      {
        int v102 = 0;
        unsigned int v103 = -1;
        uint64_t v104 = 1;
        do
        {
          int v105 = &v169[v104];
          uint64_t v106 = v105[255];
          uint64_t v107 = v105[256];
          if (COERCE_FLOAT(*(void *)(v106 + 40)) > COERCE_FLOAT(*(void *)(v107 + 40)))
          {
            v105[255] = v107;
            v105[256] = v106;
            if ((int)v104 - 2 >= 0)
            {
              float32x4_t v108 = &v170[v103 + 1];
              int v109 = v102;
              do
              {
                uint64_t v111 = *(v108 - 1);
                uint64_t v110 = *v108;
                if (COERCE_FLOAT(*(void *)(*v108 + 40)) >= COERCE_FLOAT(*(void *)(v111 + 40))) {
                  break;
                }
                *float32x4_t v108 = v111;
                *--float32x4_t v108 = v110;
                --v109;
              }
              while (v109 > 0);
            }
          }
          ++v104;
          ++v103;
          ++v102;
        }
        while (v104 != v101);
      }
      if (v101)
      {
        uint64_t v112 = 0;
        for (uint64_t i = 0; i != v101; ++i)
        {
          uint64_t v114 = (float32x4_t *)v170[i];
          v114[1].i64[1] = (uint64_t)v114;
          v114[2].i64[0] = (uint64_t)v114;
          int v115 = v114[3].i32[1] - v114[3].i32[0];
          v114[3].i32[2] = v115;
          v114[1].i64[0] = 0;
          uint64_t v116 = v112;
          while (v116)
          {
            uint64_t v117 = *(void *)((char *)&v169[255] + v116);
            unsigned int v118 = *(float32x4_t **)(v117 + 32);
            float32x4_t v119 = vmulq_f32(*v114, *v118);
            v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
            v116 -= 8;
            if (vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32).f32[0] >= *(float *)&v171)
            {
              *(void *)(v117 + 16) = v114;
              v118[1].i64[1] = (uint64_t)v114;
              v114[2].i64[0] = (uint64_t)v118;
              *(_DWORD *)(*(void *)(v117 + 32) + 56) += v115;
              break;
            }
          }
          v112 += 8;
        }
        uint64_t v120 = 0;
        uint64_t v121 = v173;
        do
        {
          uint64_t v122 = v170[v120];
          if (v122) {
            _ZF = *(void *)(v122 + 32) == v122;
          }
          else {
            _ZF = 0;
          }
          if (_ZF)
          {
            while (*(void *)(v122 + 16))
            {
              uint64_t v124 = v122;
              uint64_t v122 = *(void *)(v122 + 16);
              unint64_t v125 = *(unsigned int *)(v124 + 48);
              unint64_t v126 = *(unsigned int *)(v124 + 52);
              if (v125 < v126)
              {
                unsigned int v127 = *(_DWORD *)(v122 + 52);
                do
                {
                  unsigned int v128 = *(_DWORD *)(v122 + 48);
                  if (v128 < v127)
                  {
                    do
                    {
                      unint64_t v129 = v121 + ((unint64_t)v128 << 6);
                      float32x4_t v130 = vsubq_f32(*(float32x4_t *)(v129 + 16), *(float32x4_t *)(v121 + (v125 << 6) + 16));
                      float32x4_t v131 = vmulq_f32(v130, v130);
                      v131.i64[0] = vpaddq_f32(v131, v131).u64[0];
                      if (*(float *)&v172 > vpadd_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32).f32[0])
                      {
                        float32x2_t v132 = (long long *)(v121 + ((unint64_t)(v127 - 1) << 6));
                        long long v133 = *v132;
                        long long v134 = v132[1];
                        long long v135 = v132[2];
                        *(_DWORD *)(v129 + 48) = *((_DWORD *)v132 + 12);
                        *(_OWORD *)(v129 + 16) = v134;
                        *(_OWORD *)(v129 + 32) = v135;
                        *(_OWORD *)unint64_t v129 = v133;
                        unsigned int v127 = *(_DWORD *)(v122 + 52) - 1;
                        *(_DWORD *)(v122 + 52) = v127;
                        --v128;
                      }
                      ++v128;
                    }
                    while (v128 < v127);
                    unint64_t v126 = *(unsigned int *)(v124 + 52);
                  }
                  ++v125;
                }
                while (v125 < v126);
              }
            }
          }
          ++v120;
        }
        while (v120 != v101);
        uint64_t v136 = v173;
        unsigned int v100 = v174;
        unsigned int v137 = HIDWORD(v174);
      }
      else
      {
        unsigned int v137 = 0;
        uint64_t v136 = v173;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v170[36], v136, v100, v170, v137, v99, &v171, 1);
      uint64_t v174 = 0;
    }
    v165.i64[0] = (uint64_t)&unk_26E729FE8;
    if ((v180 & 0x8000000000000000) == 0 && (v180 & 0x7FFFFFFF00000000) != 0 && v179 != v178 && v179) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    if ((v184 & 0x8000000000000000) == 0 && (v184 & 0x7FFFFFFF00000000) != 0 && v183 != v181 && v183) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  else
  {
    float32x2_t v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
    float32x2_t v45 = (float32x2_t)vdup_laneq_s32((int32x4_t)v40, 2);
    float32x4_t v46 = vaddq_f32(v40, v40);
    float32x2_t v47 = (float32x2_t)vdup_laneq_s32((int32x4_t)v46, 2);
    float32x2_t v48 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v46.f32), 0);
    float32x2_t v49 = vmul_lane_f32(v44, *(float32x2_t *)v46.f32, 1);
    float32x2_t v50 = vmul_laneq_f32(v45, v46, 2);
    float32x2_t v51 = vmul_n_f32(v44, v46.f32[0]);
    float32x2_t v52 = vmul_n_f32(v45, v46.f32[0]);
    float32x2_t v53 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 0), v38, 1);
    float32x2_t v54 = vmul_lane_f32(v45, *(float32x2_t *)v46.f32, 1);
    *(float32x2_t *)v46.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 1), v38, 1);
    float32x2_t v55 = vmul_lane_f32(v47, v38, 1);
    __asm { FMOV            V7.2S, #1.0 }
    float32x2_t v60 = vsub_f32(_D7, v48);
    *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D7, v49), v50), (int8x8_t)vadd_f32(v51, v55), 4uLL);
    v61.i64[1] = vsub_f32(v52, *(float32x2_t *)v46.f32).u32[0];
    *(int8x8_t *)&long long v62 = vext_s8((int8x8_t)vsub_f32(v51, v55), (int8x8_t)vsub_f32(v60, v50), 4uLL);
    *((void *)&v62 + 1) = vadd_f32(v54, v53).u32[0];
    float32x4_t v165 = v61;
    long long v166 = v62;
    *(int8x8_t *)&long long v62 = vext_s8((int8x8_t)vadd_f32(v52, *(float32x2_t *)v46.f32), (int8x8_t)vsub_f32(v54, v53), 4uLL);
    *((void *)&v62 + 1) = vsub_f32(v60, v49).u32[0];
    v167[0] = v62;
    v167[1] = v35;
    v181[0] = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)&v19);
    unsigned int v63 = v7[3].u8[14];
    if (v7[3].i8[14])
    {
      unsigned int v64 = 0;
      do
      {
        uint64_t v65 = &v7[3].i8[v64 + 8];
        uint64_t v66 = *v65;
        unsigned int v67 = v63 - 2;
        if (v64 < v67) {
          unsigned int v67 = v64;
        }
        _X8 = (uint64_t)&v7[25 * v7[3].u8[v67 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        unsigned __int32 v72 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&v7[25 * *v65 + 4], &v165, v181).u32[0];
        if (v7[25 * v66 + 28].i32[0])
        {
          v7[2].i32[v66] = v72;
        }
        else
        {
          unsigned __int8 v73 = v7[3].i8[14] - 1;
          v7[3].i8[14] = v73;
          float v74 = (char *)v7 + v73;
          __int8 v75 = v74[56];
          v74[56] = v66;
          *uint64_t v65 = v75;
          --v64;
        }
        ++v64;
        unsigned int v63 = v7[3].u8[14];
      }
      while (v64 < v63);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v7, v5, v162, (int32x4_t *)v161, &v164);
}

void physx::PCMSphereVsMeshContactGenerationCallback::~PCMSphereVsMeshContactGenerationCallback(physx::PCMSphereVsMeshContactGenerationCallback *this)
{
  *(void *)this = &unk_26E729FE8;
  int v1 = *((_DWORD *)this + 1433);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    uint64_t v2 = (physx::PCMSphereVsMeshContactGenerationCallback *)*((void *)this + 715);
    if (v2 == (physx::PCMSphereVsMeshContactGenerationCallback *)((char *)this + 4688))
    {
      *((unsigned char *)this + 5712) = 0;
    }
    else if (v2)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
}

{
  int v1;
  physx::PCMSphereVsMeshContactGenerationCallback *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E729FE8;
  int v1 = *((_DWORD *)this + 1433);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    uint64_t v2 = (physx::PCMSphereVsMeshContactGenerationCallback *)*((void *)this + 715);
    if (v2 == (physx::PCMSphereVsMeshContactGenerationCallback *)((char *)this + 4688))
    {
      *((unsigned char *)this + 5712) = 0;
    }
    else if (v2)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::Gu::pcmContactSpherePlane(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v7 = a3[1];
  v7.i32[3] = 0;
  int8x16_t v9 = *(int8x16_t *)a4;
  float32x4_t v8 = *(float32x4_t *)(a4 + 16);
  v8.i32[3] = 0;
  float32x4_t v10 = *(float32x4_t *)a4;
  v10.i32[3] = 0;
  float32x2_t v11 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  float32x4_t v12 = vsubq_f32(v7, v8);
  float32x4_t v13 = vmulq_n_f32(v12, vmla_f32((float32x2_t)0xBF000000BF000000, v11, v11).f32[0]);
  v13.i32[3] = 0;
  float32x2_t v14 = *(float32x2_t *)(a1 + 4);
  float32x2_t v15 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  int8x8_t v16 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4, (int8x8_t)v15, 4uLL), *(float32x2_t *)v12.f32);
  *(int8x8_t *)v17.f32 = vext_s8(v16, (int8x8_t)vmls_f32(vmul_f32(v15, *(float32x2_t *)v12.f32), *(float32x2_t *)a4, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), 4uLL);
  v17.i64[1] = v16.u32[0];
  float32x4_t v18 = vmlsq_laneq_f32(v13, v17, *(float32x4_t *)a4, 3);
  v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
  float32x4_t v19 = vmulq_f32(v10, v12);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  v18.i64[0] = vmlaq_n_f32(v18, v10, vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32).f32[0]).u64[0];
  float32x2_t v20 = (float32x2_t)vdup_lane_s32((int32x2_t)vsub_f32(vadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), v14), 0);
  unsigned __int8 v21 = vcge_f32((float32x2_t)vdup_lane_s32(*a5, 0), v20).u8[0];
  if (v21)
  {
    LODWORD(v22) = vadd_f32(v11, v11).u32[0];
    float32x4_t v23 = vmulq_n_f32(v10, vadd_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8).f32[0]);
    v23.i32[3] = 0;
    *(int8x8_t *)_Q3.f32 = vext_s8((int8x8_t)v11, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), 4uLL);
    _Q3.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.i8, 1)).u32[0];
    float32x4_t v25 = vmlaq_n_f32(v23, _Q3, v22);
    __asm { FMOV            V3.2S, #-1.0 }
    v25.i64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u32[0];
    v25.i32[0] = vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)_Q3.f32).u32[0];
    int8x16_t v30 = (int8x16_t)vmlsq_lane_f32(v7, v25, v14, 0);
    v30.i64[1] = vextq_s8(v30, v30, 8uLL).u32[0];
    uint64_t v31 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v31 + 1;
    uint64_t v32 = a7 + (v31 << 6);
    *(float32x4_t *)uint64_t v32 = v25;
    *(int8x16_t *)(v32 + 16) = v30;
    *(_DWORD *)(v32 + 12) = v20.i32[0];
    *(_DWORD *)(v32 + 52) = -1;
  }
  return v21 & 1;
}

uint64_t physx::Gu::pcmContactSphereSphere(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  v7.i64[0] = *(void *)(a3 + 16);
  v7.i64[1] = *(unsigned int *)(a3 + 24);
  v8.i64[0] = *(void *)(a4 + 16);
  v8.i64[1] = *(unsigned int *)(a4 + 24);
  float32x2_t v9 = *(float32x2_t *)(a2 + 4);
  float32x4_t v10 = vsubq_f32(v7, v8);
  float32x4_t v11 = vmulq_f32(v10, v10);
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  float32x2_t v12 = vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  float32x2_t v13 = vadd_f32(*(float32x2_t *)(a1 + 4), v9);
  float32x2_t v14 = vadd_f32(*a5, v13);
  unsigned __int8 v15 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v14, v14), 0), v12).u8[0];
  if (v15)
  {
    float32x2_t v16 = vrsqrte_f32(v12);
    int v17 = 4;
    do
    {
      float32x2_t v16 = vmul_f32(v16, vrsqrts_f32(vmul_f32(v16, v16), v12));
      --v17;
    }
    while (v17);
    __asm { FMOV            V7.2S, #1.0 }
    float32x2_t v23 = vmul_f32(v12, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v12), 0), _D7, (int8x8_t)v16));
    float32x2_t v24 = vrecpe_f32(v23);
    int v25 = 4;
    do
    {
      float32x2_t v24 = vmul_f32(v24, vrecps_f32(v23, v24));
      --v25;
    }
    while (v25);
    int8x16_t v26 = (int8x16_t)vmulq_n_f32(v10, v24.f32[0]);
    v26.i32[3] = 0;
    float32x4_t v27 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcge_f32((float32x2_t)vdup_n_s32(0x3727C5ACu), v23), 0), 0x1FuLL)), (int8x16_t)xmmword_23435FD50, v26);
    int8x16_t v28 = (int8x16_t)vmlaq_n_f32(v8, v27, v9.f32[0]);
    v28.i64[1] = vextq_s8(v28, v28, 8uLL).u32[0];
    uint64_t v29 = *(unsigned int *)(a7 + 4096);
    *(_DWORD *)(a7 + 4096) = v29 + 1;
    uint64_t v30 = a7 + (v29 << 6);
    *(float32x4_t *)uint64_t v30 = v27;
    *(int8x16_t *)(v30 + 16) = v28;
    *(_DWORD *)(v30 + 12) = vsub_f32(v23, v13).u32[0];
    *(_DWORD *)(v30 + 52) = -1;
  }
  return v15 & 1;
}

float32x4_t *physx::Gu::getPCMConvexData(float32x4_t *result, char a2, uint64_t a3)
{
  uint64_t v3 = result[9].i64[0];
  float32x4_t v4 = vaddq_f32(vaddq_f32(vmulq_n_f32(result[3], *(float *)(v3 + 24)), vmulq_n_f32(result[4], *(float *)(v3 + 28))), vmulq_n_f32(result[5], *(float *)(v3 + 32)));
  *(void *)a3 = v4.i64[0];
  *(_DWORD *)(a3 + 8) = v4.i32[2];
  uint64_t v5 = *(unsigned __int8 *)(v3 + 38);
  unsigned int v6 = *(unsigned __int8 *)(v3 + 39);
  *(_DWORD *)(a3 + 12) = v5;
  *(_DWORD *)(a3 + 16) = v6;
  __int16 v7 = *(_WORD *)(v3 + 36);
  int v8 = v7;
  uint64_t v9 = v7 & 0x7FFF;
  *(_DWORD *)(a3 + 20) = v9;
  uint64_t v10 = *(void *)(v3 + 40);
  uint64_t v11 = v10 + 20 * v6;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = v11;
  uint64_t v12 = v11 + 12 * v5;
  uint64_t v13 = v12 + 2 * v9 + 3 * v5;
  uint64_t v14 = 4 * v9;
  if (v8 >= 0) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v13 + v14;
  if (v8 >= 0) {
    uint64_t v13 = 0;
  }
  *(void *)(a3 + 40) = v15;
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = v13;
  *(void *)(a3 + 80) = *(void *)(v3 + 48);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v3 + 56);
  if ((a2 & 1) == 0)
  {
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
  }
  return result;
}

BOOL physx::Gu::getPCMConvexData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = *(float *)(a1 + 4) == 1.0;
  if (*(float *)(a1 + 8) != 1.0) {
    BOOL v8 = 0;
  }
  BOOL v9 = *(float *)(a1 + 12) == 1.0 && v8;
  if (!v9) {
    physx::Cm::FastVertex2ShapeScaling::init(a2, (float *)(a1 + 4), (float *)(a1 + 16));
  }
  uint64_t v10 = *(void *)(a1 + 48);
  float v11 = *(float *)(a2 + 8);
  float v12 = *(float *)(v10 + 4);
  float v13 = *(float *)(a2 + 20);
  float v14 = *(float *)(a2 + 32);
  float v15 = *(float *)(v10 + 8);
  float v16 = *(float *)(v10 + 12);
  float v17 = (float)((float)(*(float *)v10 * v11) + (float)(v12 * v13)) + (float)(v15 * v14);
  float v18 = *(float *)(v10 + 16);
  float v19 = *(float *)(v10 + 20);
  float v20 = (float)(fabsf(v11 * v16) + fabsf(v13 * v18)) + fabsf(v14 * v19);
  float32x2_t v21 = *(float32x2_t *)(a2 + 12);
  float32x2_t v22 = vadd_f32(vmul_n_f32(*(float32x2_t *)a2, *(float *)v10), vmul_n_f32(v21, v12));
  float32x2_t v23 = *(float32x2_t *)(a2 + 24);
  float32x2_t v24 = vadd_f32(v22, vmul_n_f32(v23, v15));
  float32x2_t v25 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)a2, v16)), vabs_f32(vmul_n_f32(v21, v18))), vabs_f32(vmul_n_f32(v23, v19)));
  *(float32x2_t *)a3 = vsub_f32(v24, v25);
  *(float *)(a3 + 8) = v17 - v20;
  *(float32x2_t *)(a3 + 12) = vadd_f32(v24, v25);
  *(float *)(a3 + 20) = v17 + v20;
  v24.i32[0] = *(_DWORD *)(v10 + 24);
  v25.i32[0] = *(_DWORD *)(v10 + 28);
  float v26 = *(float *)(v10 + 32);
  float v27 = (float)((float)(v24.f32[0] * *(float *)(a2 + 8)) + (float)(v25.f32[0] * *(float *)(a2 + 20)))
      + (float)(v26 * *(float *)(a2 + 32));
  *(float32x2_t *)a4 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a2, v24.f32[0]), vmul_n_f32(*(float32x2_t *)(a2 + 12), v25.f32[0])), vmul_n_f32(*(float32x2_t *)(a2 + 24), v26));
  *(float *)(a4 + 8) = v27;
  uint64_t v28 = *(unsigned __int8 *)(v10 + 38);
  unsigned int v29 = *(unsigned __int8 *)(v10 + 39);
  *(_DWORD *)(a4 + 12) = v28;
  *(_DWORD *)(a4 + 16) = v29;
  __int16 v30 = *(_WORD *)(v10 + 36);
  int v31 = v30;
  uint64_t v32 = v30 & 0x7FFF;
  *(_DWORD *)(a4 + 20) = v32;
  uint64_t v33 = *(void *)(v10 + 40);
  uint64_t v34 = v33 + 20 * v29;
  *(void *)(a4 + 24) = v33;
  *(void *)(a4 + 32) = v34;
  uint64_t v35 = v34 + 12 * v28;
  uint64_t v36 = v35 + 2 * v32 + 3 * v28;
  uint64_t v37 = 4 * v32;
  if (v31 >= 0) {
    uint64_t v37 = 0;
  }
  uint64_t v38 = v36 + v37;
  if (v31 >= 0) {
    uint64_t v36 = 0;
  }
  *(void *)(a4 + 40) = v38;
  *(void *)(a4 + 48) = v35;
  *(void *)(a4 + 56) = v36;
  *(void *)(a4 + 80) = *(void *)(v10 + 48);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(v10 + 56);
  return v9;
}

uint64_t physx::Gu::PCMConvexVsMeshContactGeneration::generateTriangleFullContactManifold(uint64_t a1, uint64_t a2, __int32 a3, _DWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, _DWORD *a10, float32x2_t *a11, float32x4_t *a12)
{
  int v163 = 0;
  int32x2_t v162 = vdup_n_s32(0x7F7FFFFFu);
  float32x4_t v161 = 0uLL;
  if (!physx::testTriangleFaceNormal((float32x4_t *)a2, (uint64_t)a8, a11, (float32x2_t *)&v162, &v160, &v161, &v163)
    || (unsigned int v159 = 0,
        !physx::testPolyFaceNormal(a6, a7, (uint64_t)a8, a11, &v162, &v159, (int8x16_t *)&v161, &v163, v20, v21, v22, v23, v24))|| !physx::testPolyEdgeNormal((float32x4_t *)a2, a5, a6, a7, a8,
                        a11,
                        (float32x2_t *)&v162,
                        &v161,
                        &v163))
  {
    unsigned int v61 = 0;
    int v62 = 1;
    goto LABEL_18;
  }
  float32x4_t v25 = *(float32x4_t *)(a2 + 48);
  int8x16_t v26 = (int8x16_t)vsubq_f32(*(float32x4_t *)(a2 + 64), v25);
  int8x16_t v27 = (int8x16_t)vsubq_f32(*(float32x4_t *)(a2 + 80), v25);
  int8x8_t v28 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 4uLL), *(float32x2_t *)v27.i8);
  *(int8x8_t *)v29.f32 = vext_s8(v28, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(float32x2_t *)v27.i8), *(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 4uLL);
  v29.i64[1] = v28.u32[0];
  *(float32x2_t *)v26.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), vmul_f32((float32x2_t)v28.u32[0], (float32x2_t)v28.u32[0]));
  float32x2_t v30 = vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8);
  float32x2_t v31 = vrsqrte_f32(v30);
  int v32 = 4;
  do
  {
    float32x2_t v31 = vmul_f32(v31, vrsqrts_f32(vmul_f32(v31, v31), v30));
    --v32;
  }
  while (v32);
  __asm { FMOV            V0.2S, #1.0 }
  float32x2_t v38 = vmul_f32(v30, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v30), 0), _D0, (int8x8_t)v31));
  float32x2_t v39 = vrecpe_f32(v38);
  int v40 = 4;
  do
  {
    float32x2_t v39 = vmul_f32(v39, vrecps_f32(v38, v39));
    --v40;
  }
  while (v40);
  float32x4_t v41 = vmulq_n_f32(v29, v39.f32[0]);
  v41.i32[3] = 0;
  int32x4_t v158 = (int32x4_t)v41;
  if (v163 == 1)
  {
    unsigned int v64 = v159;
    float32x4_t v65 = vnegq_f32(v161);
    v65.i32[3] = 0;
    float32x4_t v66 = vmulq_f32(v41, v65);
    v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
    if (vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32).f32[0] <= 0.70711)
    {
      if ((a5 & 7) == 0 || *(unsigned char *)(a1 + 4569))
      {
        uint64_t v67 = *(void *)(a1 + 3736);
        unsigned int v68 = *(_DWORD *)(v67 + 4368);
        unsigned int v69 = v68 + 15;
        if ((*(_DWORD *)(v67 + 4372) & 0x7FFFFFFFu) < v68 + 15)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<4352u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(v67, v68 + 15);
          uint64_t v67 = *(void *)(a1 + 3736);
          unsigned int v68 = *(_DWORD *)(v67 + 4368);
        }
        uint64_t v70 = *(void *)(v67 + 4360) + 4 * v68;
        *(_DWORD *)(v67 + 4368) = v69;
        *(_DWORD *)(v70 + 48) = a3;
        *(_DWORD *)(v70 + 52) = v64;
        *(unsigned char *)(v70 + 56) = a5;
        *(_DWORD *)(v70 + 36) = *a4;
        *(_DWORD *)(v70 + 40) = a4[1];
        *(_DWORD *)(v70 + 44) = a4[2];
        int v71 = *(_DWORD *)(a2 + 56);
        *(void *)uint64_t v70 = *(void *)(a2 + 48);
        *(_DWORD *)(v70 + 8) = v71;
        int v72 = *(_DWORD *)(a2 + 72);
        *(void *)(v70 + 12) = *(void *)(a2 + 64);
        *(_DWORD *)(v70 + 20) = v72;
        int v73 = *(_DWORD *)(a2 + 88);
        *(void *)(v70 + 24) = *(void *)(a2 + 80);
        *(_DWORD *)(v70 + 32) = v73;
      }
      int v62 = 1;
      goto LABEL_66;
    }
    uint64_t v116 = (float32x4_t *)(*(void *)(a6 + 24) + 20 * v159);
  }
  else
  {
    if (v163)
    {
      float v74 = (float32x4_t *)a8[5];
      float32x4_t v75 = vmulq_f32(v161, *v74);
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      float32x4_t v76 = vmulq_f32(v161, v74[1]);
      v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
      float32x4_t v77 = vmulq_f32(v161, v74[2]);
      v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
      unsigned __int32 v78 = vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32).u32[0];
      *(int8x8_t *)v79.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32), 4uLL);
      v79.i64[1] = v78;
      float v80 = *(_OWORD **)(a6 + 24);
      float32x4_t v81 = *(float32x4_t *)v80;
      v81.i32[3] = 0;
      float32x4_t v82 = vmulq_f32(v81, v79);
      v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
      float32x2_t v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
      uint64_t v84 = *(unsigned int *)(a6 + 16);
      if (v84 < 2)
      {
        unsigned int v85 = 0;
      }
      else
      {
        unsigned int v85 = 0;
        float32x2_t v86 = (_OWORD *)((char *)v80 + 20);
        for (uint64_t i = 1; i != v84; ++i)
        {
          float32x4_t v88 = *(float32x4_t *)v86;
          float32x2_t v86 = (_OWORD *)((char *)v86 + 20);
          float32x4_t v89 = v88;
          v89.i32[3] = 0;
          float32x4_t v90 = vmulq_f32(v89, v79);
          v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
          float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
          if (vcgt_f32(v83, v91).u8[0])
          {
            unsigned int v85 = i;
            unsigned int v92 = -1;
          }
          else
          {
            unsigned int v92 = 0;
          }
          float32x2_t v83 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v92), (int8x8_t)v91, (int8x8_t)v83);
        }
      }
      uint64_t v117 = *(unsigned int *)(a6 + 20);
      if (v117)
      {
        uint64_t v118 = 0;
        float32x4_t v119 = vnegq_f32(v79);
        v119.i32[3] = 0;
        uint64_t v120 = *(void *)(a6 + 48);
        float32x2_t v121 = vmul_f32(v83, v83);
        int v122 = -1;
        do
        {
          long long v123 = (unsigned __int8 *)(v120 + (2 * v118));
          float32x4_t v124 = *(float32x4_t *)((char *)v80 + 20 * *v123);
          v124.i32[3] = 0;
          float32x4_t v125 = *(float32x4_t *)((char *)v80 + 20 * v123[1]);
          v125.i32[3] = 0;
          float32x4_t v126 = vaddq_f32(v124, v125);
          float32x4_t v127 = vmulq_f32(v126, v126);
          v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
          float32x2_t v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
          float32x4_t v129 = vmulq_f32(v119, v126);
          v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
          float32x2_t v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
          float32x2_t v131 = vmul_f32(v130, v130);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v131, vmul_f32(v121, v128)), (int8x8_t)vcgez_f32(v130)), 0), _D0).u32[0] == -1)
          {
            float32x2_t v132 = vrecpe_f32(v128);
            int v133 = 4;
            do
            {
              float32x2_t v132 = vmul_f32(v132, vrecps_f32(v128, v132));
              --v133;
            }
            while (v133);
            float32x2_t v121 = vmul_f32(v131, v132);
            int v122 = v118;
          }
          ++v118;
        }
        while (v118 != v117);
        if (v122 != -1)
        {
          long long v134 = (unsigned __int8 *)(v120 + (2 * v122));
          unsigned int v135 = *v134;
          float32x4_t v136 = *(float32x4_t *)((char *)v80 + 20 * *v134);
          unsigned int v85 = v134[1];
          v136.i32[3] = 0;
          float32x4_t v137 = *(float32x4_t *)((char *)v80 + 20 * v85);
          v137.i32[3] = 0;
          float32x4_t v138 = vmulq_f32(v119, v136);
          v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
          float32x4_t v139 = vmulq_f32(v119, v137);
          v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
          if (vcgt_f32(vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32), vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32)).u8[0])unsigned int v85 = v135; {
        }
          }
      }
      uint64_t v140 = (uint64_t)v80 + 20 * v85;
      v141.i64[0] = *(void *)v140;
      v141.i64[1] = *(unsigned int *)(v140 + 8);
      float v142 = (float32x4_t *)a8[6];
      float32x4_t v143 = vmulq_f32(*v142, v141);
      v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
      float32x4_t v144 = vmulq_f32(v141, v142[1]);
      v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
      float32x4_t v145 = vmulq_f32(v141, v142[2]);
      v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
      unsigned __int32 v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32).u32[0];
      *(int8x8_t *)v147.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32), 4uLL);
      v147.i64[1] = v146;
      float32x4_t v148 = vmulq_f32(v147, v147);
      v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
      float32x2_t v149 = vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32);
      float32x2_t v150 = vrsqrte_f32(v149);
      int v151 = 4;
      do
      {
        float32x2_t v150 = vmul_f32(v150, vrsqrts_f32(vmul_f32(v150, v150), v149));
        --v151;
      }
      while (v151);
      float32x2_t v152 = vmul_f32(v149, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v149), 0), _D0, (int8x8_t)v150));
      float32x2_t v153 = vrecpe_f32(v152);
      int v154 = 4;
      do
      {
        float32x2_t v153 = vmul_f32(v153, vrecps_f32(v152, v153));
        --v154;
      }
      while (v154);
      float32x4_t v155 = vmulq_n_f32(v147, v153.f32[0]);
      v155.i32[3] = 0;
      int32x4_t v157 = (int32x4_t)v155;
      float32x4_t v156 = vnegq_f32(v155);
      v156.i32[3] = 0;
      *a12 = v156;
      physx::generatedPolyContacts(a6, v140, a2, a3, (uint64_t)a8, a9, a10, a11, &v157);
      goto LABEL_65;
    }
    int8x16_t v42 = *(_OWORD **)(a6 + 24);
    float32x4_t v43 = (float32x4_t *)a8[5];
    float32x4_t v44 = vmulq_f32(v161, *v43);
    v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
    float32x4_t v45 = vmulq_f32(v161, v43[1]);
    v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
    float32x4_t v46 = vmulq_f32(v161, v43[2]);
    v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
    unsigned __int32 v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32).u32[0];
    *(int8x8_t *)v48.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), 4uLL);
    v48.i64[1] = v47;
    float32x4_t v49 = *(float32x4_t *)v42;
    v49.i32[3] = 0;
    float32x4_t v50 = vmulq_f32(v49, v48);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    float32x2_t v51 = vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32);
    uint64_t v52 = *(unsigned int *)(a6 + 16);
    if (v52 < 2)
    {
      unsigned int v53 = 0;
    }
    else
    {
      unsigned int v53 = 0;
      float32x2_t v54 = (_OWORD *)((char *)v42 + 20);
      for (uint64_t j = 1; j != v52; ++j)
      {
        float32x4_t v56 = *(float32x4_t *)v54;
        float32x2_t v54 = (_OWORD *)((char *)v54 + 20);
        float32x4_t v57 = v56;
        v57.i32[3] = 0;
        float32x4_t v58 = vmulq_f32(v57, v48);
        v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
        float32x2_t v59 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
        if (vcgt_f32(v51, v59).u8[0])
        {
          unsigned int v53 = j;
          unsigned int v60 = -1;
        }
        else
        {
          unsigned int v60 = 0;
        }
        float32x2_t v51 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v60), (int8x8_t)v59, (int8x8_t)v51);
      }
    }
    uint64_t v93 = *(unsigned int *)(a6 + 20);
    if (v93)
    {
      uint64_t v94 = 0;
      float32x4_t v95 = vnegq_f32(v48);
      v95.i32[3] = 0;
      uint64_t v96 = *(void *)(a6 + 48);
      float32x2_t v97 = vmul_f32(v51, v51);
      int v98 = -1;
      do
      {
        uint64_t v99 = (unsigned __int8 *)(v96 + (2 * v94));
        float32x4_t v100 = *(float32x4_t *)((char *)v42 + 20 * *v99);
        v100.i32[3] = 0;
        float32x4_t v101 = *(float32x4_t *)((char *)v42 + 20 * v99[1]);
        v101.i32[3] = 0;
        float32x4_t v102 = vaddq_f32(v100, v101);
        float32x4_t v103 = vmulq_f32(v102, v102);
        v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
        float32x2_t v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
        float32x4_t v105 = vmulq_f32(v95, v102);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
        float32x2_t v107 = vmul_f32(v106, v106);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v107, vmul_f32(v97, v104)), (int8x8_t)vcgez_f32(v106)), 0), *(int8x8_t *)v95.f32).u32[0] == -1)
        {
          float32x2_t v108 = vrecpe_f32(v104);
          int v109 = 4;
          do
          {
            float32x2_t v108 = vmul_f32(v108, vrecps_f32(v104, v108));
            --v109;
          }
          while (v109);
          float32x2_t v97 = vmul_f32(v107, v108);
          int v98 = v94;
        }
        ++v94;
      }
      while (v94 != v93);
      if (v98 != -1)
      {
        uint64_t v110 = (unsigned __int8 *)(v96 + (2 * v98));
        unsigned int v111 = *v110;
        float32x4_t v112 = *(float32x4_t *)((char *)v42 + 20 * *v110);
        unsigned int v53 = v110[1];
        v112.i32[3] = 0;
        float32x4_t v113 = *(float32x4_t *)((char *)v42 + 20 * v53);
        v113.i32[3] = 0;
        float32x4_t v114 = vmulq_f32(v95, v112);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        float32x4_t v115 = vmulq_f32(v95, v113);
        v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
        if (vcgt_f32(vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32), vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32)).u8[0])unsigned int v53 = v111; {
      }
        }
    }
    uint64_t v116 = (float32x4_t *)((char *)v42 + 20 * (int)v53);
  }
  *a12 = v41;
  physx::generatedTriangleContacts(a2, a3, a6, v116, (uint64_t)a8, a9, a10, a11, &v158);
LABEL_65:
  int v62 = 0;
LABEL_66:
  unsigned int v61 = 1;
LABEL_18:
  if (v62) {
    return v61;
  }
  else {
    return 1;
  }
}

BOOL physx::testTriangleFaceNormal(float32x4_t *a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, _DWORD *a5, float32x4_t *a6, _DWORD *a7)
{
  float32x4_t v12 = a1[3];
  int8x16_t v13 = (int8x16_t)vsubq_f32(a1[4], v12);
  int8x16_t v14 = (int8x16_t)vsubq_f32(a1[5], v12);
  int8x8_t v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 4uLL), *(float32x2_t *)v14.i8);
  *(int8x8_t *)v16.f32 = vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), *(float32x2_t *)v14.i8), *(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), 4uLL);
  v16.i64[1] = v15.u32[0];
  *(float32x2_t *)v14.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), vmul_f32((float32x2_t)v15.u32[0], (float32x2_t)v15.u32[0]));
  float32x2_t v17 = vpadd_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8);
  float32x2_t v18 = vrsqrte_f32(v17);
  int v19 = 4;
  do
  {
    float32x2_t v18 = vmul_f32(v18, vrsqrts_f32(vmul_f32(v18, v18), v17));
    --v19;
  }
  while (v19);
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v25 = vmul_f32(v17, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v17), 0), _D5, (int8x8_t)v18));
  float32x2_t v26 = vrecpe_f32(v25);
  int v27 = 4;
  do
  {
    float32x2_t v26 = vmul_f32(v26, vrecps_f32(v25, v26));
    --v27;
  }
  while (v27);
  float32x2_t v34 = 0;
  float32x2_t v35 = 0;
  float32x4_t v28 = vmulq_n_f32(v16, v26.f32[0]);
  v28.i32[3] = 0;
  float32x4_t v33 = v28;
  float32x4_t v29 = vmulq_f32(v12, v28);
  v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
  float32x2_t v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
  (*(void (**)(uint64_t, float32x4_t *, float32x2_t *, float32x2_t *))(*(void *)a2 + 24))(a2, &v33, &v35, &v34);
  unsigned __int32 v31 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v30, vadd_f32(*a3, v34)), (int8x8_t)vcgt_f32(v35, vadd_f32(v30, *a3))), 0), (int8x8_t)v35).u32[0];
  if (v31 != -1)
  {
    *a4 = vadd_f32(vsub_f32(v30, v35), (float32x2_t)0xB4000000B4000000);
    *a7 = 0;
    *a5 = 0;
    *a6 = v33;
  }
  return v31 != -1;
}

uint64_t physx::testPolyFaceNormal(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, void *a5, _DWORD *a6, int8x16_t *a7, _DWORD *a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  int8x16_t v18 = *a7;
  float32x2_t v65 = 0;
  float32x2_t v66 = 0;
  int v19 = *(_DWORD *)(a1 + 16);
  if (*(unsigned char *)(a3 + 56))
  {
    if (v19)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      int v22 = 0;
      a13.n128_u64[0] = (unint64_t)vdup_n_s32(0x7F7FFFFFu);
      while (1)
      {
        __n128 v60 = a13;
        int8x16_t v62 = v18;
        double v23 = (float32x4_t *)(*(void *)(a1 + 24) + v20);
        float32x4_t v24 = *(float32x4_t *)(*(void *)(a1 + 32) + 12 * v23[1].u8[3]);
        v24.i32[3] = 0;
        float32x2_t v25 = &v23->f32[3];
        float32x2_t v26 = vld1_dup_f32(v25);
        int8x16_t v64 = 0uLL;
        float32x4_t v27 = *v23;
        v27.i32[3] = 0;
        int8x16_t v64 = (int8x16_t)v27;
        float32x4_t v28 = vmulq_f32(v24, v27);
        v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
        float32x2_t v29 = vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
        (*(void (**)(uint64_t, int8x16_t *, float32x2_t *, float32x2_t *))(*(void *)a2 + 24))(a2, &v64, &v66, &v65);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v29, vadd_f32(*a4, v65)), (int8x8_t)vcgt_f32(v66, vsub_f32(*a4, v26))), 0), (int8x8_t)v66).u32[0] == -1)return 0; {
        float32x2_t v30 = vsub_f32(vneg_f32(v26), v66);
        }
        a13.n128_u64[1] = v60.n128_u64[1];
        unsigned __int8 v31 = vcgt_f32((float32x2_t)v60.n128_u64[0], v30).u8[0];
        BOOL v32 = (v31 & 1) == 0;
        if (v31) {
          unsigned int v33 = -1;
        }
        else {
          unsigned int v33 = 0;
        }
        int8x16_t v34 = (int8x16_t)vdupq_n_s32(v33);
        int8x16_t v18 = vbslq_s8(v34, v64, v62);
        if (!v32) {
          int v22 = v21;
        }
        a13.n128_u64[0] = (unint64_t)vbsl_s8(*(int8x8_t *)v34.i8, (int8x8_t)v30, (int8x8_t)v60.n128_u64[0]);
        ++v21;
        v20 += 20;
        if (v21 >= *(unsigned int *)(a1 + 16)) {
          goto LABEL_23;
        }
      }
    }
  }
  else if (v19)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    int v22 = 0;
    a13.n128_u64[0] = (unint64_t)vdup_n_s32(0x7F7FFFFFu);
    while (1)
    {
      __n128 v61 = a13;
      int8x16_t v63 = v18;
      float32x2_t v38 = (float32x4_t *)(*(void *)(a1 + 24) + v36);
      float32x4_t v39 = *(float32x4_t *)(*(void *)(a1 + 32) + 12 * v38[1].u8[3]);
      v39.i32[3] = 0;
      int v40 = &v38->f32[3];
      float32x2_t v41 = vld1_dup_f32(v40);
      float32x4_t v42 = *v38;
      v42.i32[3] = 0;
      float32x4_t v43 = *(float32x4_t **)(a3 + 48);
      float32x4_t v44 = vmulq_f32(v42, *v43);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      float32x4_t v45 = vmulq_f32(v42, v43[1]);
      v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
      float32x4_t v46 = vmulq_f32(v42, v43[2]);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      *(int8x8_t *)v44.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), 4uLL);
      v44.i64[1] = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32).u32[0];
      float32x4_t v47 = vmulq_f32(v44, v44);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      *(float32x2_t *)v47.f32 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
      *(float32x2_t *)v46.f32 = vrsqrte_f32(*(float32x2_t *)v47.f32);
      *(float32x2_t *)v47.f32 = vmul_f32(*(float32x2_t *)v46.f32, vrsqrts_f32(vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), *(float32x2_t *)v47.f32));
      float32x4_t v48 = vmulq_f32(v39, v42);
      v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
      float32x2_t v49 = vmul_f32(*(float32x2_t *)v47.f32, vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32));
      *(float32x2_t *)v48.f32 = vneg_f32(v41);
      float32x4_t v50 = vmulq_n_f32(v44, v47.f32[0]);
      v50.i32[3] = 0;
      float32x2_t v51 = vmul_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v48.f32);
      int8x16_t v64 = (int8x16_t)v50;
      (*(void (**)(uint64_t, int8x16_t *, float32x2_t *, float32x2_t *))(*(void *)a2 + 24))(a2, &v64, &v66, &v65);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v49, vadd_f32(*a4, v65)), (int8x8_t)vcgt_f32(v66, vadd_f32(v51, *a4))), 0), (int8x8_t)v66).u32[0] == -1)return 0; {
      float32x2_t v52 = vsub_f32(v51, v66);
      }
      a13.n128_u64[1] = v61.n128_u64[1];
      unsigned __int8 v53 = vcgt_f32((float32x2_t)v61.n128_u64[0], v52).u8[0];
      BOOL v54 = (v53 & 1) == 0;
      if (v53) {
        unsigned int v55 = -1;
      }
      else {
        unsigned int v55 = 0;
      }
      int8x16_t v56 = (int8x16_t)vdupq_n_s32(v55);
      int8x16_t v18 = vbslq_s8(v56, v64, v63);
      if (!v54) {
        int v22 = v37;
      }
      a13.n128_u64[0] = (unint64_t)vbsl_s8(*(int8x8_t *)v56.i8, (int8x8_t)v52, (int8x8_t)v61.n128_u64[0]);
      ++v37;
      v36 += 20;
      if (v37 >= *(unsigned int *)(a1 + 16)) {
        goto LABEL_23;
      }
    }
  }
  int v22 = 0;
  a13.n128_u64[0] = (unint64_t)vdup_n_s32(0x7F7FFFFFu);
LABEL_23:
  if (COERCE_FLOAT(*a5) > (float)(a13.n128_f32[0] + 0.00000011921))
  {
    *a7 = v18;
    *a5 = a13.n128_u64[0];
    *a8 = 1;
  }
  *a6 = v22;
  return 1;
}

uint64_t physx::testPolyEdgeNormal(float32x4_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, float32x2_t *a6, float32x2_t *a7, _OWORD *a8, _DWORD *a9)
{
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  v105[7] = *(float32x2_t *)MEMORY[0x263EF8340];
  int8x16_t v14 = (float32x4_t *)a5[6];
  float32x4_t v15 = v14[1];
  float32x4_t v16 = a1[3];
  float32x4_t v17 = a1[4];
  float32x4_t v18 = vmulq_n_f32(*v14, v16.f32[0]);
  v18.i32[3] = 0;
  float32x4_t v19 = vmulq_lane_f32(v15, *(float32x2_t *)v16.f32, 1);
  v19.i32[3] = 0;
  float32x4_t v20 = v14[2];
  float32x4_t v21 = vmulq_laneq_f32(v20, v16, 2);
  v21.i32[3] = 0;
  float32x4_t v22 = vaddq_f32(vaddq_f32(v18, v19), v21);
  float32x4_t v23 = vmulq_n_f32(*v14, v17.f32[0]);
  v23.i32[3] = 0;
  float32x4_t v24 = vmulq_lane_f32(v15, *(float32x2_t *)v17.f32, 1);
  v24.i32[3] = 0;
  float32x2_t v25 = *a7;
  float32x4_t v26 = vmulq_laneq_f32(v20, v17, 2);
  v26.i32[3] = 0;
  float32x4_t v27 = vaddq_f32(v23, v24);
  float32x4_t v28 = a1[5];
  float32x4_t v29 = vmulq_n_f32(*v14, v28.f32[0]);
  v29.i32[3] = 0;
  float32x4_t v30 = vmulq_lane_f32(v15, *(float32x2_t *)v28.f32, 1);
  v30.i32[3] = 0;
  float32x4_t v31 = vaddq_f32(v26, v27);
  float32x4_t v32 = vmulq_laneq_f32(v20, v28, 2);
  v32.i32[3] = 0;
  float32x4_t v33 = vaddq_f32(v32, vaddq_f32(v29, v30));
  v101[4] = v22;
  v101[5] = v31;
  v101[6] = v33;
  uint64_t v34 = 2;
  do
  {
    if ((a2 >> (v34 + 3))) {
      *(float32x4_t *)v105[2 * v13++ + 1].f32 = vsubq_f32((float32x4_t)v101[v34 + 4], (float32x4_t)v101[v12 + 4]);
    }
    uint64_t v34 = v12++;
  }
  while (v12 != 3);
  if (v13)
  {
    int8x16_t v35 = (int8x16_t)vsubq_f32(v31, v22);
    int8x16_t v36 = (int8x16_t)vsubq_f32(v33, v22);
    int8x8_t v37 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), *(float32x2_t *)v36.i8);
    *(int8x8_t *)v38.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(float32x2_t *)v36.i8), *(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 4uLL);
    v38.i64[1] = v37.u32[0];
    *(float32x2_t *)v35.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32), vmul_f32((float32x2_t)v37.u32[0], (float32x2_t)v37.u32[0]));
    float32x2_t v39 = vpadd_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8);
    float32x2_t v40 = vrsqrte_f32(v39);
    int v41 = 4;
    do
    {
      float32x2_t v40 = vmul_f32(v40, vrsqrts_f32(vmul_f32(v40, v40), v39));
      --v41;
    }
    while (v41);
    __asm { FMOV            V9.2S, #1.0 }
    float32x2_t v47 = vmul_f32(v39, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v39), 0), _D9, (int8x8_t)v40));
    float32x2_t v48 = vrecpe_f32(v47);
    int v49 = 4;
    do
    {
      float32x2_t v48 = vmul_f32(v48, vrecps_f32(v47, v48));
      --v49;
    }
    while (v49);
    unint64_t v50 = *(unsigned int *)(a3 + 16);
    if (v50)
    {
      unint64_t v51 = 0;
      float32x4_t v52 = vmulq_n_f32(v38, v48.f32[0]);
      v52.i32[3] = 0;
      float32x2_t v104 = 0;
      v105[0] = 0;
      float32x2_t v102 = 0;
      float32x2_t v103 = 0;
      uint64_t v53 = v13;
      float32x4_t v54 = (float32x4_t)xmmword_234421B30;
      uint64_t v93 = a7;
      uint64_t v95 = a3;
      float32x4_t v97 = v52;
      do
      {
        uint64_t v55 = *(void *)(a3 + 24);
        uint64_t v56 = v55 + 20 * v51;
        v57.i64[0] = *(void *)v56;
        v57.i64[1] = *(unsigned int *)(v56 + 8);
        float32x4_t v58 = vmulq_f32(v52, v57);
        v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
        if (vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).f32[0] <= 0.0)
        {
          uint64_t v59 = v55 + 20 * v51;
          int v60 = *(unsigned __int8 *)(v59 + 18);
          uint64_t v94 = (unsigned __int8 *)(v59 + 18);
          if (*(unsigned char *)(v59 + 18))
          {
            uint64_t v61 = 0;
            uint64_t v62 = *(void *)(a3 + 40) + *(unsigned __int16 *)(v56 + 16);
            LODWORD(v63) = v60 - 1;
            while (2)
            {
              uint64_t v64 = 0;
              unsigned int v65 = *(unsigned __int8 *)(v62 + v63);
              uint64_t v63 = v61;
              uint64_t v66 = *(void *)(v95 + 32);
              float32x4_t v67 = *(float32x4_t *)(v66 + 12 * *(unsigned __int8 *)(v62 + v63));
              v67.i32[3] = 0;
              float32x4_t v68 = *(float32x4_t *)(v66 + 12 * v65);
              v68.i32[3] = 0;
              int8x16_t v69 = (int8x16_t)vsubq_f32(v68, v67);
              float32x2_t v70 = (float32x2_t)vextq_s8(v69, v69, 8uLL).u64[0];
              float32x2_t v71 = (float32x2_t)vextq_s8(v69, v69, 4uLL).u64[0];
              float32x2_t v99 = v70;
              uint64_t v100 = v69.i64[0];
              float32x2_t v98 = v71;
              do
              {
                int8x16_t v72 = *(int8x16_t *)v105[2 * v64 + 1].f32;
                float32x2_t v73 = (float32x2_t)vextq_s8(v72, v72, 8uLL).u64[0];
                int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v69.i8, (float32x2_t)vext_s8(*(int8x8_t *)v72.i8, (int8x8_t)v73, 4uLL)), v71, *(float32x2_t *)v72.i8);
                *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v72.i8), *(float32x2_t *)v69.i8, v73), 4uLL);
                v75.i64[1] = v74.u32[0];
                if ((~vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(v54, vabsq_f32(v75))), *(int8x8_t *)v75.f32).u32[0] & 0xFFFFFF) != 0)
                {
                  float32x4_t v76 = vmulq_f32(v52, v75);
                  v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
                  if (vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32).f32[0] > 0.0)
                  {
                    float32x4_t v77 = (float32x4_t *)a5[6];
                    float32x4_t v78 = vmulq_f32(v75, *v77);
                    v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
                    float32x4_t v79 = vmulq_f32(v75, v77[1]);
                    v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
                    float32x4_t v80 = vmulq_f32(v75, v77[2]);
                    v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
                    unsigned __int32 v81 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32).u32[0];
                    *(int8x8_t *)v82.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32), 4uLL);
                    v82.i64[1] = v81;
                    float32x4_t v83 = vmulq_f32(v82, v82);
                    v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
                    float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
                    float32x2_t v85 = vrsqrte_f32(v84);
                    int v86 = 4;
                    do
                    {
                      float32x2_t v85 = vmul_f32(v85, vrsqrts_f32(vmul_f32(v85, v85), v84));
                      --v86;
                    }
                    while (v86);
                    float32x2_t v87 = vmul_f32(v84, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v84), 0), _D9, (int8x8_t)v85));
                    float32x2_t v88 = vrecpe_f32(v87);
                    int v89 = 4;
                    do
                    {
                      float32x2_t v88 = vmul_f32(v88, vrecps_f32(v87, v88));
                      --v89;
                    }
                    while (v89);
                    float32x4_t v90 = vmulq_n_f32(v82, v88.f32[0]);
                    v90.i32[3] = 0;
                    v101[0] = v90;
                    (*(void (**)(uint64_t, _OWORD *, float32x2_t *, float32x2_t *))(*(void *)a4 + 24))(a4, v101, v105, &v104);
                    (*(void (**)(void *, _OWORD *, float32x2_t *, float32x2_t *))(*a5 + 24))(a5, v101, &v103, &v102);
                    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v105[0], vadd_f32(*a6, v102)), (int8x8_t)vcgt_f32(v103, vadd_f32(v104, *a6))), 0), (int8x8_t)v103).u32[0] == -1)return 0; {
                    float32x2_t v91 = vsub_f32(v104, v103);
                    }
                    float32x4_t v52 = v97;
                    if (vcgt_f32(v25, v91).u8[0])
                    {
                      *a8 = v101[0];
                      *a9 = 2;
                      float32x2_t v25 = v91;
                    }
                    float32x4_t v54 = (float32x4_t)xmmword_234421B30;
                    float32x2_t v70 = v99;
                    v69.i64[0] = v100;
                    float32x2_t v71 = v98;
                  }
                }
                ++v64;
              }
              while (v64 != v53);
              uint64_t v61 = v63 + 1;
              if (v63 + 1 < (unint64_t)*v94) {
                continue;
              }
              break;
            }
            a3 = v95;
            unint64_t v50 = *(unsigned int *)(v95 + 16);
            a7 = v93;
          }
        }
        ++v51;
      }
      while (v51 < v50);
    }
    *a7 = v25;
  }
  return 1;
}

void physx::generatedTriangleContacts(uint64_t a1, __int32 a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, void *a8, int32x4_t *a9)
{
  uint64_t v218 = a6;
  __int32 v216 = a2;
  uint64_t v221 = *MEMORY[0x263EF8340];
  uint64_t v217 = *a7;
  float v215 = (float32x4_t *)a9;
  *(int8x8_t *)v15.f32 = physx::Gu::findRotationMatrixFromZAxis(a9);
  float32x4_t v213 = v16;
  float32x4_t v214 = v15;
  float32x4_t v212 = v17;
  float32x4_t v18 = (unsigned __int8 *)(*(void *)(a3 + 40) + a4[1].u16[0]);
  size_t v19 = a4[1].u8[2];
  MEMORY[0x270FA5388](v20);
  float32x4_t v22 = (char *)&v198 - v21;
  bzero((char *)&v198 - v21, v21);
  unint64_t v23 = (unint64_t)(v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v24);
  float32x4_t v26 = (char *)&v198 - v25;
  bzero((char *)&v198 - v25, v27);
  v211.i64[0] = (uint64_t)(v26 + 15);
  MEMORY[0x270FA5388](v28);
  float32x4_t v30 = (char *)&v198 - v29;
  int32x4_t v31 = *(int32x4_t *)(a1 + 64);
  v219[0] = *(int32x4_t *)(a1 + 48);
  v219[1] = v31;
  float32x4_t v220 = *(float32x4_t *)(a1 + 80);
  uint64_t v32 = *(void *)(a3 + 32);
  float32x4_t v33 = *(void (**)(uint64_t, unsigned __int8 *, size_t, uint64_t, unint64_t))(*(void *)a5 + 32);
  float32x4_t v202 = v18;
  v33(a5, v18, v19, v32, v23);
  float32x4_t v35 = v212;
  float32x4_t v34 = v213;
  float32x4_t v36 = v214;
  uint64_t v37 = 0;
  float32x4_t v38 = (float32x4_t)xmmword_234422E70;
  float32x4_t v39 = (float32x4_t)xmmword_23441F6C0;
  do
  {
    float32x4_t v40 = (float32x4_t)v219[v37];
    float32x4_t v41 = vmulq_n_f32(v36, v40.f32[0]);
    v41.i32[3] = 0;
    float32x4_t v42 = vmulq_lane_f32(v34, *(float32x2_t *)v40.f32, 1);
    v42.i32[3] = 0;
    float32x4_t v43 = vmulq_laneq_f32(v35, v40, 2);
    v43.i32[3] = 0;
    float32x4_t v44 = vaddq_f32(v43, vaddq_f32(v41, v42));
    v219[v37] = (int32x4_t)v44;
    float32x4_t v39 = vminq_f32(v39, v44);
    float32x4_t v38 = vmaxq_f32(v38, v44);
    ++v37;
  }
  while (v37 != 3);
  float32x4_t v209 = v39;
  float32x4_t v210 = v38;
  bzero(v30, v19);
  float32x4_t v46 = v212;
  float32x4_t v45 = v213;
  float32x4_t v47 = v214;
  if (a4[1].i8[2])
  {
    uint64_t v200 = a3;
    uint64_t v201 = a5;
    unint64_t v48 = 0;
    int v49 = 0;
    unint64_t v50 = v211.i64[0] & 0xFFFFFFFFFFFFFFF0;
    float32x4_t v198 = (float32x4_t)xmmword_234423280;
    float32x4_t v51 = vaddq_f32(v209, (float32x4_t)xmmword_234423280);
    float32x4_t v52 = (float32x4_t)v219[0];
    float32x2_t v53 = (float32x2_t)vdup_laneq_s32(v219[0], 2);
    float32x4_t v199 = (float32x4_t)xmmword_234423290;
    float32x4_t v54 = vaddq_f32(v210, (float32x4_t)xmmword_234423290);
    float v55 = *(float *)&v219[0].i32[2] + COERCE_FLOAT(*a8);
    v210.i64[0] = v218 + (v217 << 6);
    float32x4_t v56 = (float32x4_t)xmmword_234422E70;
    float32x4_t v57 = (float32x4_t)xmmword_23441F6C0;
    v209.i32[0] = v217 + 5;
    int8x16_t v58 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
    v59.i64[0] = -1;
    v59.i64[1] = -1;
    int32x4_t v211 = v219[0];
    float32x4_t v205 = v51;
    float32x4_t v204 = v54;
    int8x16_t v203 = v58;
    do
    {
      float32x4_t v60 = *(float32x4_t *)(v23 + 16 * v48);
      float32x4_t v61 = vmulq_n_f32(v47, v60.f32[0]);
      v61.i32[3] = 0;
      float32x4_t v62 = vmulq_lane_f32(v45, *(float32x2_t *)v60.f32, 1);
      v62.i32[3] = 0;
      float32x4_t v63 = vmulq_laneq_f32(v46, v60, 2);
      v63.i32[3] = 0;
      int8x16_t v64 = (int8x16_t)vaddq_f32(v63, vaddq_f32(v61, v62));
      *(int8x16_t *)(v23 + 16 * v48) = v64;
      *(int32x2_t *)(v50 + 8 * v48) = vdup_lane_s32((int32x2_t)vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(float32x2_t *)v58.i8), 0);
      float32x4_t v65 = *(float32x4_t *)(v23 + 16 * v48);
      float32x4_t v66 = v65;
      v66.i32[2] = v52.i32[2];
      *(float32x4_t *)(v23 + 16 * v48) = v66;
      float v67 = *(float *)&v64.i32[2];
      v64.i64[0] = vorrq_s8((int8x16_t)vcgtq_f32(v51, v66), (int8x16_t)vcgtq_f32(v66, v54)).u64[0];
      unsigned __int32 v68 = vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1)), v59)), *(int8x8_t *)v60.f32).u32[0];
      if (v55 > *(float *)&v64.i32[2] && v68 != -1)
      {
        uint64_t v71 = 0;
        float32x2_t v72 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0);
        float32x2_t v73 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
        char v74 = 1;
        LODWORD(v75) = 2;
        while (1)
        {
          int32x4_t v76 = v219[v75];
          uint64_t v75 = v71;
          float32x2_t v77 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 1);
          int32x4_t v78 = v219[v71];
          float32x2_t v79 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1);
          float32x2_t v80 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.i8, 0);
          float32x2_t v81 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v72, v81), (int8x8_t)vceq_f32(v73, v79)), vand_s8((int8x8_t)vceq_f32(v72, v80), (int8x8_t)vceq_f32(v73, v77))), 0), *(int8x8_t *)v60.f32).u32[0] == -1)break; {
          if ((veor_s8((int8x8_t)vcgt_f32(v77, v73), (int8x8_t)vcgt_f32(v79, v73)).u8[0] & 1) != 0
          }
            && (float32x2_t v82 = vsub_f32(v79, v77),
                float32x2_t v83 = vmul_f32(vsub_f32(v73, v77), vsub_f32(v81, v80)),
                int8x8_t v84 = (int8x8_t)vmul_n_f32(v82, v65.f32[0]),
                int8x8_t v85 = (int8x8_t)vadd_f32(v83, vmul_f32(vadd_f32(v80, (float32x2_t)0x3400000034000000), v82)),
                int8x8_t v86 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v82), 0),
                (vcge_f32((float32x2_t)vbsl_s8(v86, v85, v84), (float32x2_t)vbsl_s8(v86, v84, v85)).u8[0] & 1) != 0))
          {
            if ((v74 & 1) == 0) {
              goto LABEL_10;
            }
            char v74 = 0;
            ++v71;
            if (v75 == 2) {
              break;
            }
          }
          else
          {
            ++v71;
            if (v75 == 2)
            {
              if (v74) {
                goto LABEL_10;
              }
              break;
            }
          }
        }
        float32x4_t v87 = *v215;
        float32x4_t v88 = vmulq_f32(*v215, vsubq_f32(*(float32x4_t *)(a1 + 48), v60));
        v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
        *(float32x2_t *)v88.f32 = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
        int8x16_t v89 = (int8x16_t)vmlaq_n_f32(v60, *v215, v88.f32[0]);
        ++v49;
        v89.i64[1] = vextq_s8(v89, v89, 8uLL).u32[0];
        v88.i64[1] = v88.i64[0];
        v87.i32[3] = vnegq_f32(v88).i32[3];
        uint64_t v90 = *a7;
        uint64_t v91 = v218 + (v90 << 6);
        *(float32x4_t *)uint64_t v91 = v60;
        *(int8x16_t *)(v91 + 16) = v89;
        *(float32x4_t *)(v91 + 32) = v87;
        *(_DWORD *)(v91 + 48) = v216;
        int v92 = v90 + 1;
        *a7 = v92;
        if ((v92 - v217) >= 0x10)
        {
          float32x4_t v208 = v56;
          float32x4_t v207 = v57;
          float32x4_t v206 = v66;
          physx::Gu::SinglePersistentContactManifold::reduceContacts(v210.i64[0], v92 - v217);
          float32x4_t v66 = v206;
          v59.i64[0] = -1;
          v59.i64[1] = -1;
          v58.i64[0] = v203.i64[0];
          float32x4_t v57 = v207;
          float32x4_t v54 = v204;
          float32x4_t v51 = v205;
          float32x4_t v56 = v208;
          float32x4_t v52 = (float32x4_t)v211;
          float32x4_t v46 = v212;
          float32x4_t v45 = v213;
          float32x4_t v47 = v214;
          *a7 = v209.i32[0];
        }
      }
LABEL_10:
      float32x4_t v57 = vminq_f32(v57, v66);
      float32x4_t v56 = vmaxq_f32(v56, v66);
      v30[v48++] = v55 > v67;
      unint64_t v70 = a4[1].u8[2];
    }
    while (v48 < v70);
    if (v49 != v70)
    {
      float32x4_t v93 = vaddq_f32(v57, v198);
      float32x4_t v94 = *a4;
      v94.i64[1] = a4->u32[2];
      uint64_t v95 = *(float32x4_t **)(v201 + 48);
      float32x4_t v96 = vmulq_f32(*v95, v94);
      float32x4_t v97 = vmulq_f32(v94, v95[1]);
      float32x4_t v98 = vmulq_f32(v94, v95[2]);
      v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
      v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
      v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
      unsigned __int32 v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32).u32[0];
      *(int8x8_t *)v100.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32), 4uLL);
      v100.i64[1] = v99;
      float32x4_t v101 = vaddq_f32(v56, v199);
      float32x4_t v102 = vmulq_f32(v100, v100);
      v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
      float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
      float32x2_t v104 = vrsqrte_f32(v103);
      int v105 = 4;
      do
      {
        float32x2_t v104 = vmul_f32(v104, vrsqrts_f32(vmul_f32(v104, v104), v103));
        --v105;
      }
      while (v105);
      __asm { FMOV            V4.2S, #1.0 }
      float32x2_t v110 = vmul_f32(v103, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v103), 0), _D4, (int8x8_t)v104));
      float32x2_t v111 = vrecpe_f32(v110);
      int v112 = 4;
      do
      {
        float32x2_t v111 = vmul_f32(v111, vrecps_f32(v110, v111));
        --v112;
      }
      while (v112);
      uint64_t v113 = 0;
      int v114 = 0;
      float32x4_t v115 = (float *)(*(void *)(v200 + 32) + 12 * *v202);
      float32x4_t v116 = vmulq_n_f32(v100, v111.f32[0]);
      v116.i32[3] = 0;
      uint64_t v117 = *(float32x4_t **)(v201 + 40);
      float32x4_t v118 = vmulq_n_f32(*v117, *v115);
      v118.i32[3] = 0;
      float32x4_t v119 = vmulq_n_f32(v117[1], v115[1]);
      v119.i32[3] = 0;
      float32x4_t v120 = vmulq_n_f32(v117[2], v115[2]);
      v120.i32[3] = 0;
      float32x4_t v121 = vmulq_f32(v116, vaddq_f32(vaddq_f32(v118, v119), v120));
      v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
      float32x2_t v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
      float32x4_t v123 = vnegq_f32(v116);
      v124.i64[0] = -1;
      v124.i64[1] = -1;
      float32x4_t v208 = v93;
      float32x4_t v207 = v101;
      float32x4_t v206 = v116;
      float32x4_t v205 = v123;
      do
      {
        uint64_t v125 = a4[1].u8[2];
        float32x4_t v126 = (float32x4_t)v219[v113];
        int32x2_t v127 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v93, v126), (int8x16_t)vcgtq_f32(v126, v101)).u64[0];
        if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v127, 0), (int8x16_t)vdupq_lane_s32(v127, 1)), v124)), *(int8x8_t *)v126.f32).u32[0] != -1&& v125 != 0)
        {
          uint64_t v129 = 0;
          float32x2_t v130 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.f32, 0);
          float32x2_t v131 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.f32, 1);
          LODWORD(v132) = v125 - 1;
          char v133 = 1;
          while (1)
          {
            long long v134 = *(_OWORD *)(v23 + 16 * v132);
            uint64_t v132 = v129;
            float32x2_t v135 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v134, 1);
            long long v136 = *(_OWORD *)(v23 + 16 * v129);
            float32x2_t v137 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v136, 1);
            float32x2_t v138 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v134, 0);
            float32x2_t v139 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v136, 0);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v130, v139), (int8x8_t)vceq_f32(v131, v137)), vand_s8((int8x8_t)vceq_f32(v130, v138), (int8x8_t)vceq_f32(v131, v135))), 0), *(int8x8_t *)v126.f32).u32[0] == -1)break; {
            if ((veor_s8((int8x8_t)vcgt_f32(v135, v131), (int8x8_t)vcgt_f32(v137, v131)).u8[0] & 1) != 0
            }
              && (float32x2_t v140 = vsub_f32(v137, v135),
                  float32x2_t v141 = vmul_f32(vsub_f32(v131, v135), vsub_f32(v139, v138)),
                  int8x8_t v142 = (int8x8_t)vmul_n_f32(v140, v126.f32[0]),
                  int8x8_t v143 = (int8x8_t)vadd_f32(v141, vmul_f32(vadd_f32(v138, (float32x2_t)0x3400000034000000), v140)),
                  int8x8_t v144 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v140), 0),
                  (vcge_f32((float32x2_t)vbsl_s8(v144, v143, v142), (float32x2_t)vbsl_s8(v144, v142, v143)).u8[0] & 1) != 0))
            {
              if ((v133 & 1) == 0) {
                goto LABEL_34;
              }
              char v133 = 0;
              ++v129;
              if (v125 - 1 == v132) {
                break;
              }
            }
            else
            {
              ++v129;
              if (v125 == v132 + 1)
              {
                if (v133) {
                  goto LABEL_34;
                }
                break;
              }
            }
          }
          ++v114;
          float32x4_t v145 = vmulq_f32(v47, v126);
          v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
          float32x4_t v146 = vmulq_f32(v45, v126);
          v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
          float32x4_t v147 = vmulq_f32(v46, v126);
          v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
          unsigned __int32 v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32).u32[0];
          *(int8x8_t *)v149.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32), 4uLL);
          v149.i64[1] = v148;
          float32x4_t v150 = vmulq_f32(v116, v149);
          v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
          float v151 = vsub_f32(vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32), v122).f32[0];
          if (v151 <= COERCE_FLOAT(*a8))
          {
            float32x4_t v152 = vmlaq_n_f32(v149, v123, v151);
            v152.i64[1] = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
            float32x4_t v153 = *v215;
            float32x4_t v154 = vmulq_f32(vsubq_f32(v152, v149), *v215);
            v154.i64[0] = vpaddq_f32(v154, v154).u64[0];
            v153.i32[3] = vpadd_f32(*(float32x2_t *)&v154, *(float32x2_t *)&v154).i32[1];
            uint64_t v155 = *a7;
            float32x4_t v156 = (float32x4_t *)(v218 + (v155 << 6));
            *float32x4_t v156 = v152;
            v156[1] = v149;
            v156[2] = v153;
            v156[3].i32[0] = v216;
            int v157 = v155 + 1;
            *a7 = v157;
            if ((v157 - v217) >= 0x10)
            {
              physx::Gu::SinglePersistentContactManifold::reduceContacts(v210.i64[0], v157 - v217);
              v124.i64[0] = -1;
              v124.i64[1] = -1;
              float32x4_t v123 = v205;
              float32x4_t v116 = v206;
              float32x4_t v101 = v207;
              float32x4_t v93 = v208;
              float32x4_t v52 = (float32x4_t)v211;
              float32x4_t v46 = v212;
              float32x4_t v45 = v213;
              float32x4_t v47 = v214;
              *a7 = v209.i32[0];
            }
          }
        }
LABEL_34:
        ++v113;
      }
      while (v113 != 3);
      if (v114 != 3)
      {
        uint64_t v158 = 0;
        LODWORD(v159) = a4[1].u8[2];
        float32x4_t v160 = v220;
        v161.i64[0] = -1;
        v161.i64[1] = -1;
        do
        {
          float32x4_t v162 = (float32x4_t)v219[v158];
          if (v159)
          {
            uint64_t v163 = 0;
            float32x4_t v164 = vminq_f32(v162, v160);
            float32x4_t v165 = vmaxq_f32(v162, v160);
            LODWORD(v166) = v159 - 1;
            float32x4_t v208 = v160;
            float32x4_t v207 = v162;
            float32x4_t v206 = v164;
            float32x4_t v205 = v165;
            do
            {
              uint64_t v167 = v166;
              uint64_t v166 = v163;
              if (v30[v163] || v30[v167])
              {
                float32x4_t v168 = *(float32x4_t *)(v23 + 16 * v163);
                float32x4_t v169 = *(float32x4_t *)(v23 + 16 * v167);
                int32x2_t v170 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v164, vmaxq_f32(v168, v169)), (int8x16_t)vcgtq_f32(vminq_f32(v168, v169), v165)).u64[0];
                if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v170, 0), (int8x16_t)vdupq_lane_s32(v170, 1)), v161)), *(int8x8_t *)v168.f32).u32[0] != -1)
                {
                  int32x2_t v171 = (int32x2_t)vsub_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v168.f32);
                  float32x2_t v172 = vsub_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v168.f32);
                  float32x2_t v173 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v171, 0), v172, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v171, 1), v172.f32[0]));
                  int32x2_t v174 = (int32x2_t)vsub_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v169.f32);
                  float32x2_t v175 = vsub_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v169.f32);
                  float32x2_t v176 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v174, 0), v175, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v174, 1), v175.f32[0]));
                  if (vmul_f32(v173, v176).f32[0] < 0.0)
                  {
                    float32x2_t v177 = vsub_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v162.f32);
                    float32x2_t v178 = vsub_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v162.f32);
                    float32x2_t v179 = vsub_f32(vmul_lane_f32(v177, v178, 1), vmul_lane_f32(v178, v177, 1));
                    float32x2_t v180 = vsub_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v160.f32);
                    float32x2_t v181 = vsub_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v160.f32);
                    if (vmul_f32(v179, vsub_f32(vmul_lane_f32(v180, v181, 1), vmul_lane_f32(v181, v180, 1))).f32[0] < 0.0)
                    {
                      float32x2_t v182 = vsub_f32(v176, v173);
                      float32x2_t v183 = vrecpe_f32(v182);
                      int v184 = 4;
                      do
                      {
                        float32x2_t v183 = vmul_f32(v183, vrecps_f32(v182, v183));
                        --v184;
                      }
                      while (v184);
                      v168.i32[2] = vadd_f32(v53, *(float32x2_t *)(v50 + 8 * v166)).u32[0];
                      v169.i32[2] = vadd_f32(v53, *(float32x2_t *)(v50 + 8 * v167)).u32[0];
                      float32x4_t v185 = vmlsq_lane_f32(v168, vsubq_f32(v169, v168), vmul_f32(v173, v183), 0);
                      int32x4_t v186 = (int32x4_t)vsubq_f32(v185, v52);
                      if (*(float *)&v186.i32[2] <= COERCE_FLOAT(*a8))
                      {
                        v185.i64[1] = vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL).u32[0];
                        float32x4_t v187 = v185;
                        v187.i32[2] = v52.i32[2];
                        float32x4_t v188 = vmulq_f32(v47, v185);
                        v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
                        float32x4_t v189 = vmulq_f32(v45, v185);
                        v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
                        *(int8x8_t *)v188.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32), 4uLL);
                        float32x4_t v190 = vmulq_f32(v46, v185);
                        v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
                        v188.i64[1] = vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32).u32[0];
                        float32x4_t v191 = vmulq_f32(v47, v187);
                        v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
                        float32x4_t v192 = vmulq_f32(v45, v187);
                        v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
                        float32x4_t v193 = vmulq_f32(v46, v187);
                        v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
                        *(int8x8_t *)v191.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32), 4uLL);
                        v191.i64[1] = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32).u32[0];
                        float32x4_t v194 = *v215;
                        v194.i32[3] = vdupq_laneq_s32(v186, 2).i32[3];
                        uint64_t v195 = *a7;
                        uint64_t v196 = (float32x4_t *)(v218 + (v195 << 6));
                        *uint64_t v196 = v188;
                        v196[1] = v191;
                        int32x4_t v196[2] = v194;
                        v196[3].i32[0] = v216;
                        int v197 = v195 + 1;
                        *a7 = v197;
                        if ((v197 - v217) >= 0x10)
                        {
                          physx::Gu::SinglePersistentContactManifold::reduceContacts(v210.i64[0], v197 - v217);
                          float32x4_t v165 = v205;
                          float32x4_t v164 = v206;
                          float32x4_t v162 = v207;
                          v160.i64[0] = v208.i64[0];
                          v161.i64[0] = -1;
                          v161.i64[1] = -1;
                          float32x4_t v52 = (float32x4_t)v211;
                          float32x4_t v46 = v212;
                          float32x4_t v45 = v213;
                          float32x4_t v47 = v214;
                          *a7 = v209.i32[0];
                        }
                      }
                    }
                  }
                }
              }
              uint64_t v163 = v166 + 1;
              unint64_t v159 = a4[1].u8[2];
            }
            while (v166 + 1 < v159);
          }
          ++v158;
          float32x4_t v160 = v162;
        }
        while (v158 != 3);
      }
    }
  }
}

void physx::generatedPolyContacts(uint64_t a1, uint64_t a2, uint64_t a3, __int32 a4, uint64_t a5, uint64_t a6, _DWORD *a7, void *a8, int32x4_t *a9)
{
  __int32 v208 = a4;
  uint64_t v214 = *MEMORY[0x263EF8340];
  uint64_t v209 = *a7;
  uint64_t v16 = *(void *)(a1 + 40) + *(unsigned __int16 *)(a2 + 16);
  float32x4_t v207 = *(float32x4_t *)a9;
  v203.i64[0] = (uint64_t)a9;
  *(int8x8_t *)v17.f32 = physx::Gu::findRotationMatrixFromZAxis(a9);
  float32x4_t v206 = v17;
  float32x4_t v205 = v18;
  float32x4_t v204 = v19;
  uint64_t v20 = *(unsigned __int8 *)(a2 + 18);
  MEMORY[0x270FA5388](v21);
  unint64_t v23 = (char *)&v188 - v22;
  bzero((char *)&v188 - v22, v22);
  uint64_t v24 = (float32x4_t *)((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, float32x4_t *))(*(void *)a5 + 32))(a5, v16, v20, *(void *)(a1 + 32), v24);
  float32x4_t v25 = v204;
  float32x4_t v26 = v205;
  float32x4_t v27 = v206;
  long long v28 = *(_OWORD *)(a3 + 64);
  a3 += 64;
  uint64_t v29 = (float32x4_t *)(a3 - 16);
  v213[0] = *(_OWORD *)(a3 - 16);
  v213[1] = v28;
  float32x4_t v191 = (float32x4_t *)a3;
  long long v31 = *(_OWORD *)(a3 + 16);
  float32x4_t v30 = (float32x4_t *)(a3 + 16);
  v213[2] = v31;
  float32x4_t v32 = *v24;
  float32x4_t v33 = (float32x4_t)xmmword_23441F6C0;
  float32x4_t v34 = (float32x4_t)xmmword_234422E70;
  int8x16_t v35 = *(int8x16_t *)v24;
  float32x4_t v36 = (float32x4_t)xmmword_234422E70;
  float32x4_t v37 = (float32x4_t)xmmword_23441F6C0;
  if (*(unsigned char *)(a2 + 18))
  {
    unint64_t v38 = 0;
    float32x4_t v39 = (float32x4_t)xmmword_234422E70;
    float32x4_t v40 = (float32x4_t)xmmword_23441F6C0;
    do
    {
      float32x4_t v41 = v24[v38];
      float32x4_t v42 = vmulq_n_f32(v27, v41.f32[0]);
      v42.i32[3] = 0;
      float32x4_t v43 = vmulq_lane_f32(v26, *(float32x2_t *)v41.f32, 1);
      v43.i32[3] = 0;
      float32x4_t v44 = vmulq_laneq_f32(v25, v41, 2);
      v44.i32[3] = 0;
      float32x4_t v45 = vaddq_f32(v44, vaddq_f32(v42, v43));
      v24[v38] = v45;
      float32x4_t v40 = vminq_f32(v40, v45);
      float32x4_t v39 = vmaxq_f32(v39, v45);
      ++v38;
    }
    while (v38 < *(unsigned __int8 *)(a2 + 18));
    int8x16_t v35 = *(int8x16_t *)v24;
    float32x4_t v37 = vaddq_f32(v40, (float32x4_t)xmmword_234423280);
    float32x4_t v36 = vaddq_f32(v39, (float32x4_t)xmmword_234423290);
  }
  float32x4_t v189 = v30;
  float32x4_t v190 = v29;
  uint64_t v46 = 0;
  int v47 = 0;
  float32x4_t v207 = vnegq_f32(v207);
  float v48 = *(float *)&v35.i32[2] + COERCE_FLOAT(*a8);
  uint64_t v196 = a6;
  uint64_t v198 = a6 + (v209 << 6);
  int v197 = v209 + 5;
  int8x16_t v49 = vextq_s8(v35, v35, 8uLL);
  v50.i64[0] = -1;
  v50.i64[1] = -1;
  int8x16_t v199 = v35;
  float32x4_t v195 = v32;
  float32x4_t v194 = v37;
  float32x4_t v193 = v36;
  int8x16_t v192 = v49;
  do
  {
    float32x4_t v51 = (float32x4_t)v213[v46];
    float32x4_t v52 = vmulq_n_f32(v27, v51.f32[0]);
    v52.i32[3] = 0;
    float32x4_t v53 = vmulq_lane_f32(v26, *(float32x2_t *)v51.f32, 1);
    v53.i32[3] = 0;
    float32x4_t v54 = vmulq_laneq_f32(v25, v51, 2);
    v54.i32[3] = 0;
    int8x16_t v55 = (int8x16_t)vaddq_f32(v54, vaddq_f32(v52, v53));
    *(int32x2_t *)&v212[1].u32[2 * v46 + 2] = vdup_lane_s32((int32x2_t)vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), *(float32x2_t *)v49.i8), 0);
    float32x4_t v56 = (float32x4_t)v55;
    v56.i32[2] = v35.i32[2];
    v213[v46] = v56;
    if (v48 > *(float *)&v55.i32[2])
    {
      v212[1].i8[v46 + 5] = 1;
      uint64_t v57 = *(unsigned __int8 *)(a2 + 18);
      int32x2_t v58 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v37, v56), (int8x16_t)vcgtq_f32(v56, v36)).u64[0];
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v58, 0), (int8x16_t)vdupq_lane_s32(v58, 1)), v50)), *(int8x8_t *)v51.f32).u32[0] != -1&& v57 != 0)
      {
        uint64_t v60 = 0;
        float32x2_t v61 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 0);
        float32x2_t v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1);
        LODWORD(v63) = v57 - 1;
        char v64 = 1;
        while (1)
        {
          float32x4_t v65 = v24[v63];
          uint64_t v63 = v60;
          float32x2_t v66 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
          float32x4_t v67 = v24[v60];
          float32x2_t v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 1);
          float32x2_t v69 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0);
          float32x2_t v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v61, v70), (int8x8_t)vceq_f32(v62, v68)), vand_s8((int8x8_t)vceq_f32(v61, v69), (int8x8_t)vceq_f32(v62, v66))), 0), *(int8x8_t *)v51.f32).u32[0] == -1)break; {
          if ((veor_s8((int8x8_t)vcgt_f32(v66, v62), (int8x8_t)vcgt_f32(v68, v62)).u8[0] & 1) != 0
          }
            && (float32x2_t v71 = vsub_f32(v68, v66),
                float32x2_t v72 = vmul_f32(vsub_f32(v62, v66), vsub_f32(v70, v69)),
                int8x8_t v73 = (int8x8_t)vmul_n_f32(v71, *(float *)v55.i32),
                int8x8_t v74 = (int8x8_t)vadd_f32(v72, vmul_f32(vadd_f32(v69, (float32x2_t)0x3400000034000000), v71)),
                int8x8_t v75 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v71), 0),
                (vcge_f32((float32x2_t)vbsl_s8(v75, v74, v73), (float32x2_t)vbsl_s8(v75, v73, v74)).u8[0] & 1) != 0))
          {
            if ((v64 & 1) == 0) {
              goto LABEL_12;
            }
            char v64 = 0;
            ++v60;
            if (v57 - 1 == v63) {
              break;
            }
          }
          else
          {
            ++v60;
            if (v57 == v63 + 1)
            {
              if (v64) {
                goto LABEL_12;
              }
              break;
            }
          }
        }
        ++v47;
        float32x4_t v76 = vmulq_f32(vsubq_f32(v51, v32), *(float32x4_t *)v203.i64[0]);
        v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
        *(float32x2_t *)v76.f32 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
        int8x16_t v77 = (int8x16_t)vmlsq_lane_f32(v51, *(float32x4_t *)v203.i64[0], *(float32x2_t *)v76.f32, 0);
        v77.i64[1] = vextq_s8(v77, v77, 8uLL).u32[0];
        float32x4_t v78 = v207;
        v78.i32[3] = v76.i32[1];
        uint64_t v79 = *a7;
        uint64_t v80 = v196 + (v79 << 6);
        *(int8x16_t *)uint64_t v80 = v77;
        *(float32x4_t *)(v80 + 16) = v51;
        *(float32x4_t *)(v80 + 32) = v78;
        *(_DWORD *)(v80 + 48) = v208;
        int v81 = v79 + 1;
        *a7 = v81;
        if ((v81 - v209) >= 0x10)
        {
          float32x4_t v202 = v33;
          float32x4_t v201 = v34;
          float32x4_t v200 = v56;
          physx::Gu::SinglePersistentContactManifold::reduceContacts(v198, v81 - v209);
          float32x4_t v56 = v200;
          v50.i64[0] = -1;
          v50.i64[1] = -1;
          v49.i64[0] = v192.i64[0];
          float32x4_t v36 = v193;
          float32x4_t v37 = v194;
          float32x4_t v32 = v195;
          float32x4_t v34 = v201;
          float32x4_t v33 = v202;
          int8x16_t v35 = v199;
          float32x4_t v25 = v204;
          float32x4_t v26 = v205;
          float32x4_t v27 = v206;
          *a7 = v197;
        }
      }
    }
LABEL_12:
    float32x4_t v33 = vminq_f32(v33, v56);
    float32x4_t v34 = vmaxq_f32(v34, v56);
    ++v46;
  }
  while (v46 != 3);
  uint64_t v82 = v196;
  if (v47 != 3)
  {
    float32x2_t v83 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 2);
    int8x8_t v84 = v191;
    int8x8_t v85 = v190;
    float32x4_t v86 = *v190;
    int8x16_t v87 = (int8x16_t)vsubq_f32(*v191, *v190);
    float32x4_t v88 = v189;
    int8x16_t v89 = (int8x16_t)vsubq_f32(*v189, *v190);
    int8x8_t v90 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 4uLL), *(float32x2_t *)v89.i8);
    *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), *(float32x2_t *)v89.i8), *(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)), 4uLL);
    v91.i64[1] = v90.u32[0];
    *(float32x2_t *)v89.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32), vmul_f32((float32x2_t)v90.u32[0], (float32x2_t)v90.u32[0]));
    float32x2_t v92 = vpadd_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8);
    float32x2_t v93 = vrsqrte_f32(v92);
    int v94 = 4;
    do
    {
      float32x2_t v93 = vmul_f32(v93, vrsqrts_f32(vmul_f32(v93, v93), v92));
      --v94;
    }
    while (v94);
    __asm { FMOV            V9.2S, #1.0 }
    float32x2_t v99 = vmul_f32(v92, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v92), 0), (int8x8_t)_D9, (int8x8_t)v93));
    float32x2_t v100 = vrecpe_f32(v99);
    int v101 = 4;
    do
    {
      float32x2_t v100 = vmul_f32(v100, vrecps_f32(v99, v100));
      --v101;
    }
    while (v101);
    LODWORD(v102) = *(unsigned __int8 *)(a2 + 18);
    if (*(unsigned char *)(a2 + 18))
    {
      unint64_t v103 = 0;
      v201.i32[0] = 0;
      float32x4_t v104 = vaddq_f32(v33, (float32x4_t)xmmword_234423280);
      float32x4_t v105 = vaddq_f32(v34, (float32x4_t)xmmword_234423290);
      float32x4_t v106 = vmulq_n_f32(v91, v100.f32[0]);
      v106.i32[3] = 0;
      float32x4_t v107 = vmulq_f32(v86, v106);
      v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
      float32x2_t v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
      float32x4_t v200 = vnegq_f32(v106);
      v109.i64[0] = -1;
      v109.i64[1] = -1;
      float32x4_t v195 = v104;
      float32x4_t v194 = v105;
      float32x4_t v193 = v106;
      do
      {
        float32x4_t v110 = v24[v103];
        int32x2_t v111 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v104, v110), (int8x16_t)vcgtq_f32(v110, v105)).u64[0];
        if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v111, 0), (int8x16_t)vdupq_lane_s32(v111, 1)), v109)), *(int8x8_t *)v110.f32).u32[0] != -1)
        {
          uint64_t v112 = 0;
          float32x2_t v113 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v110.f32, 0);
          float32x2_t v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v110.f32, 1);
          char v115 = 1;
          LODWORD(v116) = 2;
          while (1)
          {
            long long v117 = v213[v116];
            uint64_t v116 = v112;
            float32x2_t v118 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v117, 1);
            long long v119 = v213[v112];
            float32x2_t v120 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v119, 1);
            float32x2_t v121 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v117, 0);
            float32x2_t v122 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v119, 0);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v113, v122), (int8x8_t)vceq_f32(v114, v120)), vand_s8((int8x8_t)vceq_f32(v113, v121), (int8x8_t)vceq_f32(v114, v118))), 0), *(int8x8_t *)v110.f32).u32[0] == -1)break; {
            if ((veor_s8((int8x8_t)vcgt_f32(v118, v114), (int8x8_t)vcgt_f32(v120, v114)).u8[0] & 1) != 0
            }
              && (float32x2_t v123 = vsub_f32(v120, v118),
                  float32x2_t v124 = vmul_f32(vsub_f32(v114, v118), vsub_f32(v122, v121)),
                  int8x8_t v125 = (int8x8_t)vmul_n_f32(v123, v110.f32[0]),
                  int8x8_t v126 = (int8x8_t)vadd_f32(v124, vmul_f32(vadd_f32(v121, (float32x2_t)0x3400000034000000), v123)),
                  int8x8_t v127 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v123), 0),
                  (vcge_f32((float32x2_t)vbsl_s8(v127, v126, v125), (float32x2_t)vbsl_s8(v127, v125, v126)).u8[0] & 1) != 0))
            {
              if ((v115 & 1) == 0) {
                goto LABEL_48;
              }
              char v115 = 0;
              ++v112;
              if (v116 == 2) {
                break;
              }
            }
            else
            {
              ++v112;
              if (v116 == 2)
              {
                if (v115) {
                  goto LABEL_48;
                }
                break;
              }
            }
          }
          float32x4_t v128 = vmulq_f32(v27, v110);
          v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
          float32x4_t v129 = vmulq_f32(v26, v110);
          v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
          float32x4_t v130 = vmulq_f32(v25, v110);
          v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
          *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32), 4uLL);
          v131.i64[1] = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32).u32[0];
          float32x4_t v132 = vmulq_f32(v106, v131);
          v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
          float v133 = vsub_f32(vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32), v108).f32[0];
          if (v133 <= COERCE_FLOAT(*a8))
          {
            float32x4_t v202 = v131;
            int8x16_t v134 = (int8x16_t)vmlaq_n_f32(v131, v200, v133);
            v134.i64[1] = vextq_s8(v134, v134, 8uLL).u32[0];
            v212[0] = (float32x4_t)v134;
            float32x2_t v210 = 0;
            float32x2_t v211 = 0;
            physx::Gu::barycentricCoordinates(v212, v85, v84, v88, &v211, &v210);
            int8x8_t v135 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v210), (int8x8_t)vcgez_f32(v211)), (int8x8_t)vcge_f32(_D9, vadd_f32(v211, v210))), 0);
            if (vuzp1_s8(v135, v135).u32[0] == -1)
            {
              ++v201.i32[0];
              float32x4_t v136 = v212[0];
              float32x4_t v137 = vmulq_f32(vsubq_f32(v212[0], v202), *(float32x4_t *)v203.i64[0]);
              v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
              float32x4_t v138 = v207;
              v138.i32[3] = vpadd_f32(*(float32x2_t *)&v137, *(float32x2_t *)&v137).i32[1];
              uint64_t v139 = *a7;
              float32x2_t v140 = (float32x4_t *)(v82 + (v139 << 6));
              *float32x2_t v140 = v202;
              v140[1] = v136;
              v140[2] = v138;
              v140[3].i32[0] = v208;
              int v141 = v139 + 1;
              *a7 = v141;
              if ((v141 - v209) >= 0x10)
              {
                physx::Gu::SinglePersistentContactManifold::reduceContacts(v198, v141 - v209);
                *a7 = v197;
              }
            }
            float32x4_t v27 = v206;
            float32x4_t v26 = v205;
            float32x4_t v25 = v204;
            float32x4_t v104 = v195;
            float32x4_t v105 = v194;
            float32x4_t v106 = v193;
            v109.i64[0] = -1;
            v109.i64[1] = -1;
            LODWORD(v102) = *(unsigned __int8 *)(a2 + 18);
          }
        }
LABEL_48:
        ++v103;
      }
      while (v103 < v102);
    }
    else
    {
      v201.i32[0] = 0;
    }
    float32x4_t v142 = (float32x4_t)v199;
    if (v201.i32[0] != v102)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 2;
      v145.i64[0] = -1;
      v145.i64[1] = -1;
      int v146 = v102;
      do
      {
        uint64_t v147 = v144;
        uint64_t v144 = v143;
        if ((v212[1].i8[v143 + 5] || v212[1].i8[v147 + 5]) && v146)
        {
          uint64_t v148 = 0;
          float32x4_t v149 = (float32x4_t)v213[v143];
          float32x4_t v150 = (float32x4_t)v213[v147];
          float32x4_t v151 = vminq_f32(v149, v150);
          float32x4_t v152 = vmaxq_f32(v149, v150);
          LODWORD(v153) = v102 - 1;
          float32x4_t v203 = v149;
          float32x4_t v202 = v150;
          float32x4_t v201 = v151;
          float32x4_t v200 = v152;
          do
          {
            float32x4_t v154 = v24[v153];
            uint64_t v153 = v148;
            float32x4_t v155 = v24[v148];
            int32x2_t v156 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v151, vmaxq_f32(v155, v154)), (int8x16_t)vcgtq_f32(vminq_f32(v155, v154), v152)).u64[0];
            int8x8_t v157 = (int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v156, 0), (int8x16_t)vdupq_lane_s32(v156, 1)), v145));
            if (vuzp1_s8(v157, v157).u32[0] != -1)
            {
              int32x2_t v158 = (int32x2_t)vsub_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v149.f32);
              float32x2_t v159 = vsub_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v149.f32);
              float32x2_t v160 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v158, 0), v159, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v158, 1), v159.f32[0]));
              int32x2_t v161 = (int32x2_t)vsub_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v150.f32);
              float32x2_t v162 = vsub_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v150.f32);
              float32x2_t v163 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(v161, 0), v162, 1), vmul_n_f32((float32x2_t)vdup_lane_s32(v161, 1), v162.f32[0]));
              if (vmul_f32(v160, v163).f32[0] < 0.0)
              {
                float32x2_t v164 = vsub_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v155.f32);
                float32x2_t v165 = vsub_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v155.f32);
                float32x2_t v166 = vsub_f32(vmul_lane_f32(v164, v165, 1), vmul_lane_f32(v165, v164, 1));
                float32x2_t v167 = vsub_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v154.f32);
                float32x2_t v168 = vsub_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v154.f32);
                if (vmul_f32(v166, vsub_f32(vmul_lane_f32(v167, v168, 1), vmul_lane_f32(v168, v167, 1))).f32[0] < 0.0)
                {
                  float32x2_t v169 = vsub_f32(v163, v160);
                  float32x2_t v170 = vrecpe_f32(v169);
                  int v171 = 4;
                  do
                  {
                    float32x2_t v170 = vmul_f32(v170, vrecps_f32(v169, v170));
                    --v171;
                  }
                  while (v171);
                  float32x2_t v172 = vmul_f32(v160, v170);
                  float32x4_t v173 = v149;
                  v173.i32[2] = vadd_f32(v83, *(float32x2_t *)&v212[1].u32[2 * v144 + 2]).u32[0];
                  float32x4_t v174 = v150;
                  v174.i32[2] = vadd_f32(v83, *(float32x2_t *)&v212[1].u32[2 * v147 + 2]).u32[0];
                  float32x4_t v175 = vmlsq_lane_f32(v173, vsubq_f32(v174, v173), v172, 0);
                  int32x4_t v176 = (int32x4_t)vsubq_f32(v175, v142);
                  if (*(float *)&v176.i32[2] <= COERCE_FLOAT(*a8))
                  {
                    v175.i64[1] = vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL).u32[0];
                    float32x4_t v177 = v175;
                    v177.i32[2] = v142.i32[2];
                    float32x4_t v178 = vmulq_f32(v27, v175);
                    v178.i64[0] = vpaddq_f32(v178, v178).u64[0];
                    float32x4_t v179 = vmulq_f32(v26, v175);
                    v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
                    *(int8x8_t *)v178.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32), 4uLL);
                    float32x4_t v180 = vmulq_f32(v25, v175);
                    v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
                    v178.i64[1] = vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32).u32[0];
                    float32x4_t v181 = vmulq_f32(v27, v177);
                    v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
                    float32x4_t v182 = vmulq_f32(v26, v177);
                    v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
                    float32x4_t v183 = vmulq_f32(v25, v177);
                    v183.i64[0] = vpaddq_f32(v183, v183).u64[0];
                    *(int8x8_t *)v181.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32), 4uLL);
                    v181.i64[1] = vpadd_f32(*(float32x2_t *)v183.f32, *(float32x2_t *)v183.f32).u32[0];
                    float32x4_t v184 = v207;
                    v184.i32[3] = vdupq_laneq_s32(v176, 2).i32[3];
                    uint64_t v185 = *a7;
                    int32x4_t v186 = (float32x4_t *)(v82 + (v185 << 6));
                    *int32x4_t v186 = v181;
                    v186[1] = v178;
                    v186[2] = v184;
                    v186[3].i32[0] = v208;
                    int v187 = v185 + 1;
                    *a7 = v187;
                    if ((v187 - v209) >= 0x10)
                    {
                      physx::Gu::SinglePersistentContactManifold::reduceContacts(v198, v187 - v209);
                      float32x4_t v152 = v200;
                      float32x4_t v151 = v201;
                      float32x4_t v150 = v202;
                      float32x4_t v149 = v203;
                      v145.i64[0] = -1;
                      v145.i64[1] = -1;
                      float32x4_t v142 = (float32x4_t)v199;
                      float32x4_t v25 = v204;
                      float32x4_t v26 = v205;
                      float32x4_t v27 = v206;
                      *a7 = v197;
                    }
                  }
                }
              }
            }
            uint64_t v148 = v153 + 1;
            unint64_t v102 = *(unsigned __int8 *)(a2 + 18);
          }
          while (v153 + 1 < v102);
          int v146 = *(unsigned __int8 *)(a2 + 18);
        }
        uint64_t v143 = v144 + 1;
      }
      while (v144 != 2);
    }
  }
}

BOOL physx::Gu::PCMConvexVsMeshContactGeneration::generateTriangleFullContactManifold(uint64_t a1, __int32 a2, unsigned int a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, _DWORD *a8, float32x2_t *a9, float32x4_t *a10)
{
  int32x2_t v86 = vdup_n_s32(0x7F7FFFFFu);
  float32x4_t v85 = 0uLL;
  if (physx::testTriangleFaceNormal((float32x4_t *)a1, (uint64_t)a6, a9, (float32x2_t *)&v86, &v84, &v85, &v87)
    && physx::testPolyFaceNormal(a4, a5, (uint64_t)a6, a9, &v86, &v83, (int8x16_t *)&v85, &v87, v18, v19, v20, v21, v22)&& physx::testPolyEdgeNormal((float32x4_t *)a1, a3, a4, a5, a6, a9, (float32x2_t *)&v86, &v85, &v87))
  {
    float32x4_t v23 = *(float32x4_t *)(a1 + 48);
    int8x16_t v24 = (int8x16_t)vsubq_f32(*(float32x4_t *)(a1 + 64), v23);
    int8x16_t v25 = (int8x16_t)vsubq_f32(*(float32x4_t *)(a1 + 80), v23);
    int8x8_t v26 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), *(float32x2_t *)v25.i8);
    *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), *(float32x2_t *)v25.i8), *(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 4uLL);
    v27.i64[1] = v26.u32[0];
    *(float32x2_t *)v25.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), vmul_f32((float32x2_t)v26.u32[0], (float32x2_t)v26.u32[0]));
    float32x2_t v28 = vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8);
    float32x2_t v29 = vrsqrte_f32(v28);
    int v30 = 4;
    do
    {
      float32x2_t v29 = vmul_f32(v29, vrsqrts_f32(vmul_f32(v29, v29), v28));
      --v30;
    }
    while (v30);
    __asm { FMOV            V4.2S, #1.0 }
    float32x2_t v36 = vmul_f32(v28, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v28), 0), _D4, (int8x8_t)v29));
    float32x2_t v37 = vrecpe_f32(v36);
    int v38 = 4;
    do
    {
      float32x2_t v37 = vmul_f32(v37, vrecps_f32(v36, v37));
      --v38;
    }
    while (v38);
    float32x4_t v39 = vmulq_n_f32(v27, v37.f32[0]);
    v39.i32[3] = 0;
    *a10 = v39;
    float32x4_t v40 = *(_OWORD **)(a4 + 24);
    float32x4_t v41 = (float32x4_t *)a6[5];
    float32x4_t v42 = vmulq_f32(v39, *v41);
    v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
    float32x4_t v43 = vmulq_f32(v39, v41[1]);
    v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
    float32x4_t v44 = vmulq_f32(v39, v41[2]);
    v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
    *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), 4uLL);
    v45.i64[1] = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).u32[0];
    float32x4_t v46 = *(float32x4_t *)v40;
    v46.i32[3] = 0;
    int32x4_t v82 = (int32x4_t)v39;
    float32x4_t v47 = vmulq_f32(v46, v45);
    v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
    float32x2_t v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
    uint64_t v49 = *(unsigned int *)(a4 + 16);
    if (v49 >= 2)
    {
      int v38 = 0;
      int32x4_t v50 = (_OWORD *)((char *)v40 + 20);
      for (uint64_t i = 1; i != v49; ++i)
      {
        float32x4_t v52 = *(float32x4_t *)v50;
        int32x4_t v50 = (_OWORD *)((char *)v50 + 20);
        float32x4_t v53 = v52;
        v53.i32[3] = 0;
        float32x4_t v54 = vmulq_f32(v53, v45);
        v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
        float32x2_t v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
        if (vcgt_f32(v48, v55).u8[0])
        {
          int v38 = i;
          unsigned int v56 = -1;
        }
        else
        {
          unsigned int v56 = 0;
        }
        float32x2_t v48 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v56), (int8x8_t)v55, (int8x8_t)v48);
      }
    }
    uint64_t v57 = *(unsigned int *)(a4 + 20);
    if (v57)
    {
      uint64_t v58 = 0;
      float32x4_t v59 = vnegq_f32(v45);
      v59.i32[3] = 0;
      uint64_t v60 = *(void *)(a4 + 48);
      float32x2_t v61 = vmul_f32(v48, v48);
      int v62 = -1;
      do
      {
        uint64_t v63 = (unsigned __int8 *)(v60 + (2 * v58));
        float32x4_t v64 = *(float32x4_t *)((char *)v40 + 20 * *v63);
        v64.i32[3] = 0;
        float32x4_t v65 = *(float32x4_t *)((char *)v40 + 20 * v63[1]);
        v65.i32[3] = 0;
        float32x4_t v66 = vaddq_f32(v64, v65);
        float32x4_t v67 = vmulq_f32(v66, v66);
        v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
        float32x2_t v68 = vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32);
        float32x4_t v69 = vmulq_f32(v59, v66);
        v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
        float32x2_t v70 = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32);
        float32x2_t v71 = vmul_f32(v70, v70);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v71, vmul_f32(v61, v68)), (int8x8_t)vcgez_f32(v70)), 0), *(int8x8_t *)v59.f32).u32[0] == -1)
        {
          float32x2_t v72 = vrecpe_f32(v68);
          int v73 = 4;
          do
          {
            float32x2_t v72 = vmul_f32(v72, vrecps_f32(v68, v72));
            --v73;
          }
          while (v73);
          float32x2_t v61 = vmul_f32(v71, v72);
          int v62 = v58;
        }
        ++v58;
      }
      while (v58 != v57);
      if (v62 != -1)
      {
        int8x8_t v74 = (unsigned __int8 *)(v60 + (2 * v62));
        int v75 = *v74;
        float32x4_t v76 = *(float32x4_t *)((char *)v40 + 20 * *v74);
        int v38 = v74[1];
        v76.i32[3] = 0;
        float32x4_t v77 = *(float32x4_t *)((char *)v40 + 20 * v38);
        v77.i32[3] = 0;
        float32x4_t v78 = vmulq_f32(v59, v76);
        v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
        float32x4_t v79 = vmulq_f32(v59, v77);
        v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
        if (vcgt_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32), vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32)).u8[0])int v38 = v75; {
      }
        }
    }
    physx::generatedTriangleContacts(a1, a2, a4, (float32x4_t *)((char *)v40 + 20 * v38), (uint64_t)a6, a7, a8, a9, &v82);
    int v80 = 0;
  }
  else
  {
    int v80 = 1;
  }
  return v80 == 0;
}

uint64_t physx::Gu::PCMConvexVsMeshContactGeneration::generatePolyDataContactManifold(uint64_t a1, uint64_t a2, unsigned int a3, __int32 a4, uint64_t a5, uint64_t a6, _DWORD *a7, void *a8, float32x4_t *a9)
{
  uint64_t v10 = *(void *)(*(void *)(a1 + 4544) + 24) + 20 * a3;
  v11.i64[0] = *(void *)v10;
  v11.i64[1] = *(unsigned int *)(v10 + 8);
  uint64_t v12 = *(float32x4_t **)(*(void *)(a1 + 4552) + 48);
  float32x4_t v13 = vmulq_f32(*v12, v11);
  v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
  float32x4_t v14 = vmulq_f32(v11, v12[1]);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  float32x4_t v15 = vmulq_f32(v11, v12[2]);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  unsigned __int32 v16 = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).u32[0];
  *(int8x8_t *)v17.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32), 4uLL);
  v17.i64[1] = v16;
  float32x4_t v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  float32x2_t v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  float32x2_t v20 = vrsqrte_f32(v19);
  int v21 = 4;
  do
  {
    float32x2_t v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), _D4, (int8x8_t)v20));
  float32x2_t v28 = vrecpe_f32(v27);
  int v29 = 4;
  do
  {
    float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  float32x4_t v30 = vmulq_n_f32(v17, v28.f32[0]);
  v30.i32[3] = 0;
  int32x4_t v33 = (int32x4_t)v30;
  float32x4_t v31 = vnegq_f32(v30);
  v31.i32[3] = 0;
  *a9 = v31;
  physx::generatedPolyContacts(*(void *)(a1 + 4544), v10, a2, a4, *(void *)(a1 + 4552), a6, a7, a8, &v33);
  return 1;
}

int8x8_t physx::Gu::findRotationMatrixFromZAxis(int32x4_t *a1)
{
  float32x4_t v1 = *(float32x4_t *)a1;
  float32x2_t v2 = (float32x2_t)vdup_laneq_s32(*a1, 2);
  if (vabs_f32(v2).f32[0] < 0.9999)
  {
    float32x2_t v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.f32, 1);
    __asm { FMOV            V0.2S, #1.0 }
    float32x2_t v30 = vadd_f32(v2, _D0);
    float32x2_t v31 = vrecpe_f32(v30);
    int v32 = 4;
    do
    {
      float32x2_t v31 = vmul_f32(v31, vrecps_f32(v30, v31));
      --v32;
    }
    while (v32);
    float32x2_t v33 = vmul_f32(v31, vneg_f32(v28));
    return vext_s8((int8x8_t)vmls_f32(v2, v33, v28), (int8x8_t)vmul_n_f32(v33, v1.f32[0]), 4uLL);
  }
  else
  {
    float32x4_t v3 = vsubq_f32((float32x4_t)xmmword_23435FD60, v1);
    float32x2_t v4 = vpadd_f32((float32x2_t)0x3F80000000000000, (float32x2_t)1065353216);
    float32x2_t v5 = vpadd_f32(v4, v4);
    int8x16_t v6 = (int8x16_t)vmulq_f32(v3, v3);
    float32x2_t v7 = (float32x2_t)vextq_s8(v6, v6, 8uLL).u64[0];
    int8x16_t v8 = (int8x16_t)vmulq_f32(v3, (float32x4_t)xmmword_234423350);
    float32x2_t v9 = (float32x2_t)vextq_s8(v8, v8, 8uLL).u64[0];
    float32x2_t v10 = vrecpe_f32(v5);
    int v11 = 4;
    do
    {
      float32x2_t v10 = vmul_f32(v10, vrecps_f32(v5, v10));
      --v11;
    }
    while (v11);
    float32x2_t v12 = vpadd_f32(*(float32x2_t *)v6.i8, v7);
    float32x2_t v13 = vpadd_f32(v12, v12);
    float32x2_t v14 = vrecpe_f32(v13);
    int v15 = 4;
    do
    {
      float32x2_t v14 = vmul_f32(v14, vrecps_f32(v13, v14));
      --v15;
    }
    while (v15);
    float32x2_t v16 = vpadd_f32(*(float32x2_t *)v8.i8, v9);
    float32x2_t v17 = vmul_f32(v10, (float32x2_t)0xC0000000C0000000);
    float32x2_t v18 = vmul_f32(v14, (float32x2_t)0xC0000000C0000000);
    LODWORD(v19) = vmulq_n_f32((float32x4_t)xmmword_234423350, v17.f32[0]).u32[0];
    float32x4_t v20 = vmulq_n_f32((float32x4_t)xmmword_234423350, vmulq_n_f32(v3, vmul_f32(v17, vmul_f32(vpadd_f32(v16, v16), v18)).f32[0]).f32[0]);
    v20.i32[3] = 0;
    float32x4_t v21 = vmlaq_n_f32(v20, v3, vmulq_n_f32(v3, v18.f32[0]).f32[0]);
    v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
    v21.i64[0] = vmlaq_n_f32(v21, (float32x4_t)xmmword_234423350, v19).u64[0];
    result.i32[1] = v21.i32[1];
    __asm { FMOV            V16.2S, #1.0 }
    result.i32[0] = vadd_f32(*(float32x2_t *)v21.f32, _D16).u32[0];
  }
  return result;
}

BOOL physx::Gu::PersistentContactManifold::replaceManifoldPoint(uint64_t a1, float32x4_t *a2, float32x4_t *a3, _OWORD *a4, float32x2_t *a5)
{
  unint64_t v5 = *(unsigned __int8 *)(a1 + 64);
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v6 = 0;
    float32x2_t v7 = vmul_f32(*a5, *a5);
    uint64_t v8 = *(void *)(a1 + 80);
    float32x4_t v9 = *a2;
    unint64_t v10 = 1;
    BOOL v11 = 1;
    while (1)
    {
      float32x4_t v12 = vsubq_f32(*(float32x4_t *)(v8 + v6 + 16), *a3);
      float32x4_t v13 = vmulq_f32(v12, v12);
      v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
      float32x4_t v14 = vsubq_f32(*(float32x4_t *)(v8 + v6), v9);
      float32x4_t v15 = vmulq_f32(v14, v14);
      v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
      if (vcgt_f32(v7, vmin_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32))).u8[0])break; {
      BOOL v11 = v10 < v5;
      }
      v6 += 48;
      ++v10;
      if (48 * v5 == v6) {
        return 0;
      }
    }
    *(float32x4_t *)(v8 + v6) = v9;
    *(float32x4_t *)(*(void *)(a1 + 80) + v6 + 16) = *a3;
    *(_OWORD *)(*(void *)(a1 + 80) + v6 + 32) = *a4;
  }
  else
  {
    return 0;
  }
  return v11;
}

uint64_t physx::Gu::PersistentContactManifold::reduceContactsForPCM(uint64_t a1, _OWORD *a2, long long *a3, int32x4_t *a4)
{
  uint64_t v4 = 0;
  uint64_t v141 = *MEMORY[0x263EF8340];
  char v136 = 0;
  int v135 = 0;
  unint64_t v5 = *(float32x4_t **)(a1 + 80);
  float32x4_t v6 = v5[9];
  v139[6] = v5[8];
  v139[7] = v6;
  float32x4_t v7 = v5[11];
  v139[8] = v5[10];
  v139[9] = v7;
  float32x4_t v8 = v5[5];
  v139[2] = v5[4];
  v139[3] = v8;
  float32x4_t v9 = v5[7];
  v139[4] = v5[6];
  v139[5] = v9;
  float32x4_t v10 = v5[1];
  float32x4_t v137 = *v5;
  float32x4_t v138 = v10;
  float32x4_t v11 = v5[3];
  v139[0] = v5[2];
  v139[1] = v11;
  float32x4_t v12 = (int32x2_t *)v139;
  long long v13 = *a3;
  v139[10] = *a2;
  v139[11] = v13;
  int32x4_t v140 = *a4;
  int v14 = 4;
  float32x2_t v15 = (float32x2_t)vdup_laneq_s32(v140, 3);
  do
  {
    float32x2_t v16 = (float32x2_t)vdup_lane_s32(v12[1], 1);
    unsigned __int8 v17 = vcgt_f32(v15, v16).u8[0];
    if (v17) {
      unsigned int v18 = -1;
    }
    else {
      unsigned int v18 = 0;
    }
    float32x2_t v15 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)v16, (int8x8_t)v15);
    if (v17) {
      int v14 = v4;
    }
    ++v4;
    v12 += 6;
  }
  while (v4 != 4);
  int v19 = 0;
  uint64_t v20 = 1;
  *((unsigned char *)&v135 + v14) = 1;
  float32x4_t v21 = &v137 + 3 * v14;
  float32x4_t v22 = v21[1];
  *unint64_t v5 = *v21;
  v5[1] = v22;
  v5[2] = v21[2];
  float32x4_t v23 = *(float32x4_t **)(a1 + 80);
  float32x4_t v24 = v23[1];
  float32x4_t v25 = vsubq_f32(v138, v24);
  float32x4_t v26 = vmulq_f32(v25, v25);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  float32x2_t v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  uint64_t v28 = 64;
  do
  {
    if (!*((unsigned char *)&v135 + v20))
    {
      float32x4_t v29 = vsubq_f32(*(float32x4_t *)((char *)&v137 + v28), v24);
      float32x4_t v30 = vmulq_f32(v29, v29);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      float32x2_t v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
      unsigned __int8 v32 = vcgt_f32(v31, v27).u8[0];
      unsigned int v33 = (v32 & 1) != 0 ? -1 : 0;
      float32x2_t v27 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v33), (int8x8_t)v31, (int8x8_t)v27);
      if (v32) {
        int v19 = v20;
      }
    }
    ++v20;
    v28 += 48;
  }
  while (v20 != 5);
  uint64_t v34 = 0;
  *((unsigned char *)&v135 + v19) = 1;
  int8x16_t v35 = &v137 + 3 * v19;
  float32x4_t v36 = v35[1];
  float32x4_t v37 = v35[2];
  v23[3] = *v35;
  v23[4] = v36;
  v23[5] = v37;
  float32x2_t v38 = (float32x2_t)0x80000000800000;
  __asm { FMOV            V1.2S, #1.0 }
  do
  {
    if (!*((unsigned char *)&v135 + v34))
    {
      float32x4_t v44 = *(float32x4_t **)(a1 + 80);
      float32x4_t v45 = v44[1];
      float32x4_t v46 = vsubq_f32(v44[4], v45);
      float32x4_t v47 = vmulq_f32(v46, v46);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      float32x2_t v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
      float32x2_t v49 = vrecpe_f32(v48);
      int v50 = 4;
      do
      {
        float32x2_t v49 = vmul_f32(v49, vrecps_f32(v48, v49));
        --v50;
      }
      while (v50);
      float32x4_t v51 = vsubq_f32(*(&v137 + 3 * v34 + 1), v45);
      float32x4_t v52 = vmulq_f32(v51, v46);
      v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
      int8x16_t v53 = (int8x16_t)vmlsq_lane_f32(v51, v46, (float32x2_t)vbic_s8((int8x8_t)vmax_f32(vmin_f32(vmul_f32(v49, vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), _D1), 0), (int8x8_t)vceqz_f32(v48)), 0);
      unsigned __int32 v54 = vextq_s8(v53, v53, 8uLL).u32[0];
      float32x2_t v55 = vpadd_f32(vmul_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), vmul_f32((float32x2_t)v54, (float32x2_t)v54));
      float32x2_t v56 = vpadd_f32(v55, v55);
      unsigned __int8 v57 = vcgt_f32(v56, v38).u8[0];
      unsigned int v58 = (v57 & 1) != 0 ? -1 : 0;
      float32x2_t v38 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v58), (int8x8_t)v56, (int8x8_t)v38);
      if (v57) {
        int v19 = v34;
      }
    }
    ++v34;
  }
  while (v34 != 5);
  uint64_t v59 = 0;
  *((unsigned char *)&v135 + v19) = 1;
  uint64_t v60 = (long long *)(&v137 + 3 * v19);
  float32x2_t v61 = *(_OWORD **)(a1 + 80);
  long long v62 = v60[2];
  long long v63 = *v60;
  v61[7] = v60[1];
  v61[8] = v62;
  v61[6] = v63;
  float32x2_t v64 = (float32x2_t)0x80000000800000;
  do
  {
    if (*((unsigned char *)&v135 + v59)) {
      goto LABEL_57;
    }
    float32x4_t v65 = *(float32x4_t **)(a1 + 80);
    float32x4_t v66 = v65[4];
    float32x4_t v67 = v65[1];
    float32x4_t v68 = vsubq_f32(v66, v67);
    float32x4_t v69 = v65[7];
    float32x4_t v70 = vsubq_f32(v69, v67);
    float32x4_t v71 = *(&v137 + 3 * v59 + 1);
    float32x4_t v72 = vsubq_f32(v71, v67);
    float32x4_t v73 = vmulq_f32(v68, v72);
    v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
    float32x2_t v74 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
    float32x4_t v75 = vmulq_f32(v70, v72);
    v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
    float32x2_t v76 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcltz_f32(v76), (int8x8_t)vcltz_f32(v74)), 0), (int8x8_t)v64).u32[0] == -1)
    {
      float32x4_t v97 = vmulq_f32(v72, v72);
      goto LABEL_52;
    }
    float32x4_t v77 = vsubq_f32(v71, v66);
    float32x4_t v78 = vmulq_f32(v68, v77);
    v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
    float32x2_t v79 = vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32);
    float32x4_t v80 = vmulq_f32(v70, v77);
    v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
    float32x2_t v81 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v79, v81), (int8x8_t)vcgez_f32(v79)), 0), (int8x8_t)v64).u32[0] == -1)
    {
      float32x4_t v97 = vmulq_f32(v77, v77);
      goto LABEL_52;
    }
    float32x4_t v82 = vsubq_f32(v71, v69);
    float32x4_t v83 = vmulq_f32(v68, v82);
    v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
    float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
    float32x4_t v85 = vmulq_f32(v70, v82);
    v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
    float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgez_f32(v86), (int8x8_t)vcge_f32(v86, v84)), 0), (int8x8_t)v64).u32[0] == -1)
    {
      float32x4_t v97 = vmulq_f32(v82, v82);
      goto LABEL_52;
    }
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v79), (int8x8_t)vcgez_f32(v74)), (int8x8_t)vcltz_f32(vsub_f32(vmul_f32(v74, v81), vmul_f32(v76, v79)))), 0), (int8x8_t)v64).u32[0] == -1)
    {
      float32x2_t v98 = vsub_f32(v74, v79);
      float32x2_t v99 = vrecpe_f32(v98);
      int v100 = 4;
      do
      {
        float32x2_t v99 = vmul_f32(v99, vrecps_f32(v98, v99));
        --v100;
      }
      while (v100);
      float32x4_t v96 = vmlaq_n_f32(v67, v68, vmul_f32(v74, v99).f32[0]);
    }
    else
    {
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v84, v86), (int8x8_t)vcge_f32(v81, v79)), (int8x8_t)vcltz_f32(vsub_f32(vmul_f32(v79, v86), vmul_f32(v81, v84)))), 0), (int8x8_t)v64).u32[0] == -1)
      {
        float32x4_t v101 = vsubq_f32(v69, v66);
        float32x2_t v102 = vsub_f32(v81, v79);
        float32x2_t v103 = vadd_f32(v102, vsub_f32(v84, v86));
        float32x2_t v104 = vrecpe_f32(v103);
        int v105 = 4;
        do
        {
          float32x2_t v104 = vmul_f32(v104, vrecps_f32(v103, v104));
          --v105;
        }
        while (v105);
        float32x4_t v106 = vmlaq_n_f32(v66, v101, vmul_f32(v102, v104).f32[0]);
        v106.i64[1] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u32[0];
        float32x4_t v107 = vsubq_f32(v71, v106);
        goto LABEL_51;
      }
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v86), (int8x8_t)vcgez_f32(v76)), (int8x8_t)vcltz_f32(vsub_f32(vmul_f32(v76, v84), vmul_f32(v74, v86)))), 0), (int8x8_t)v64).u32[0] != -1)
      {
        int8x8_t v87 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v68.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL), *(float32x2_t *)v70.f32);
        *(int8x8_t *)v88.f32 = vext_s8(v87, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), *(float32x2_t *)v70.f32), *(float32x2_t *)v68.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL)), 4uLL);
        v88.i64[1] = v87.u32[0];
        float32x2_t v89 = vpadd_f32(vmul_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32), vmul_f32((float32x2_t)v87.u32[0], (float32x2_t)v87.u32[0]));
        float32x2_t v90 = vpadd_f32(v89, v89);
        float32x4_t v91 = vmulq_f32(vsubq_f32(v67, v71), v88);
        float32x2_t v92 = vrecpe_f32(v90);
        int v93 = 4;
        do
        {
          float32x2_t v92 = vmul_f32(v92, vrecps_f32(v90, v92));
          --v93;
        }
        while (v93);
        float32x2_t v94 = (float32x2_t)vpaddq_f32(v91, v91).u64[0];
        float32x4_t v95 = vmulq_n_f32(v88, *(float *)vand_s8((int8x8_t)vmul_f32(v92, vpadd_f32(v94, v94)), (int8x8_t)vcgtz_f32(v90)).i32);
        v95.i32[3] = 0;
        float32x4_t v96 = vaddq_f32(v71, v95);
        goto LABEL_50;
      }
      float32x2_t v108 = vsub_f32(v76, v86);
      float32x2_t v109 = vrecpe_f32(v108);
      int v110 = 4;
      do
      {
        float32x2_t v109 = vmul_f32(v109, vrecps_f32(v108, v109));
        --v110;
      }
      while (v110);
      float32x4_t v96 = vmlaq_n_f32(v67, v70, vmul_f32(v76, v109).f32[0]);
    }
    v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
LABEL_50:
    float32x4_t v107 = vsubq_f32(v71, v96);
LABEL_51:
    float32x4_t v97 = vmulq_f32(v107, v107);
LABEL_52:
    float32x2_t v111 = (float32x2_t)vpaddq_f32(v97, v97).u64[0];
    float32x2_t v112 = vpadd_f32(v111, v111);
    unsigned __int8 v113 = vcgt_f32(v112, v64).u8[0];
    if (v113) {
      unsigned int v114 = -1;
    }
    else {
      unsigned int v114 = 0;
    }
    float32x2_t v64 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v114), (int8x8_t)v112, (int8x8_t)v64);
    if (v113) {
      int v19 = v59;
    }
LABEL_57:
    ++v59;
  }
  while (v59 != 5);
  if (*((unsigned char *)&v135 + v19))
  {
    *(unsigned char *)(a1 + 64) = 3;
  }
  else
  {
    uint64_t v115 = 0;
    *((unsigned char *)&v135 + v19) = 1;
    uint64_t v116 = (long long *)(&v137 + 3 * v19);
    long long v117 = *(_OWORD **)(a1 + 80);
    long long v118 = v116[2];
    long long v119 = *v116;
    v117[10] = v116[1];
    v117[11] = v118;
    v117[9] = v119;
    while (*((unsigned char *)&v135 + v115))
    {
      if (++v115 == 5)
      {
        LODWORD(v115) = 0;
        break;
      }
    }
    uint64_t v120 = 0;
    int v121 = 0;
    float32x2_t v122 = *(float32x4_t **)(a1 + 80);
    unsigned int v123 = v115;
    float32x2_t v124 = &v137 + 3 * v115;
    float32x2_t v125 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    int8x8_t v126 = v122;
    do
    {
      float32x4_t v127 = *v126;
      v126 += 3;
      float32x4_t v128 = vsubq_f32(v127, *v124);
      float32x4_t v129 = vmulq_f32(v128, v128);
      v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
      float32x2_t v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
      if (vcgt_f32(v125, v130).u8[0])
      {
        int v121 = v120;
        unsigned int v131 = -1;
      }
      else
      {
        unsigned int v131 = 0;
      }
      float32x2_t v125 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v131), (int8x8_t)v130, (int8x8_t)v125);
      ++v120;
    }
    while (v120 != 4);
    if (v122[3 * v121 + 2].f32[3] > *((float *)&v139[3 * v123] + 3))
    {
      float32x4_t v132 = &v122[3 * v121];
      float32x4_t v133 = v124[1];
      *float32x4_t v132 = *v124;
      v132[1] = v133;
      v132[2] = v124[2];
    }
  }
  return 0;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t result, uint64_t a2, _OWORD *a3, float32x4_t *a4, uint64_t *a5)
{
  unsigned int v5 = *(unsigned __int8 *)(result + 64);
  if (*(unsigned char *)(result + 64))
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = *a5;
    unint64_t v9 = 1;
    v10.i64[0] = 0x4000000040000000;
    v10.i64[1] = 0x4000000040000000;
    do
    {
      float32x4_t v11 = (float32x4_t *)(*(void *)(result + 80) + v6);
      float v12 = v11[2].f32[3];
      if (*(float *)&v8 >= v12)
      {
        float32x4_t v13 = v11[1];
        float32x4_t v14 = *a4;
        v14.i32[3] = 0;
        float32x2_t v15 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
        float32x4_t v16 = vmulq_n_f32(v13, vmla_f32((float32x2_t)0xBF000000BF000000, v15, v15).f32[0]);
        v16.i32[3] = 0;
        float32x2_t v17 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
        float32x2_t v18 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
        int8x8_t v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->f32, (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v18, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->f32, (int8x8_t)v17, 4uLL), *(float32x2_t *)v13.f32);
        *(int8x8_t *)v20.f32 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v13.f32), *(float32x2_t *)a4->f32, v18), 4uLL);
        v20.i64[1] = v19.u32[0];
        float32x4_t v21 = vmlaq_laneq_f32(v16, v20, *a4, 3);
        v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
        float32x4_t v22 = vmulq_f32(v14, v13);
        v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
        float32x4_t v23 = vmlaq_n_f32(v21, v14, vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32).f32[0]);
        v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
        int8x16_t v24 = (int8x16_t)vmlaq_f32(a4[1], v10, v23);
        v24.i64[1] = vextq_s8(v24, v24, 8uLL).u32[0];
        uint64_t v25 = a2 + (v7++ << 6);
        *(_OWORD *)uint64_t v25 = *a3;
        *(int8x16_t *)(v25 + 16) = v24;
        *(float *)(v25 + 12) = v12;
        *(_DWORD *)(v25 + 52) = -1;
        unsigned int v5 = *(unsigned __int8 *)(result + 64);
        uint64_t v8 = *a5;
      }
      if (v7 > 0x3F) {
        break;
      }
      v6 += 48;
    }
    while (v9++ < v5);
  }
  else
  {
    LODWORD(v7) = 0;
  }
  *(_DWORD *)(a2 + 4096) = v7;
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t result, uint64_t a2, _OWORD *a3, float32x4_t *a4)
{
  LODWORD(v4) = *(unsigned __int8 *)(result + 64);
  if (*(unsigned char *)(result + 64))
  {
    uint64_t v5 = 0;
    unint64_t v4 = 0;
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = (float32x4_t *)(*(void *)(result + 80) + v5);
      float32x4_t v8 = v7[1];
      float32x4_t v9 = vmulq_n_f32(*a4, v8.f32[0]);
      v9.i32[3] = 0;
      float32x4_t v10 = vmulq_lane_f32(a4[1], *(float32x2_t *)v8.f32, 1);
      v10.i32[3] = 0;
      float32x4_t v11 = vmulq_laneq_f32(a4[2], v8, 2);
      v11.i32[3] = 0;
      unint64_t v12 = v4;
      float32x4_t v13 = vaddq_f32(a4[3], vaddq_f32(vaddq_f32(v9, v10), v11));
      ++v4;
      v10.i32[0] = v7[2].i32[3];
      *(_OWORD *)uint64_t v6 = *a3;
      *(float32x4_t *)(v6 + 16) = v13;
      *(_DWORD *)(v6 + 12) = v10.i32[0];
      *(_DWORD *)(v6 + 52) = -1;
      if (v12 > 0x3E) {
        break;
      }
      v6 += 64;
      v5 += 48;
    }
    while (v4 < *(unsigned __int8 *)(result + 64));
  }
  *(_DWORD *)(a2 + 4096) = v4;
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t result, uint64_t a2, _OWORD *a3, float32x4_t *a4, float32x4_t *a5, float32x2_t *a6, float32x2_t *a7)
{
  unsigned int v7 = *(unsigned __int8 *)(result + 64);
  if (*(unsigned char *)(result + 64))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float32x2_t v10 = *a6;
    float32x2_t v11 = *a7;
    unint64_t v12 = 1;
    v13.i64[0] = 0x4000000040000000;
    v13.i64[1] = 0x4000000040000000;
    do
    {
      uint64_t v14 = *(void *)(result + 80);
      float32x2_t v15 = vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)(v14 + v8 + 40), 1), v10);
      if ((vmvn_s8((int8x8_t)vcge_f32(v11, v15)).u8[0] & 1) == 0)
      {
        float32x4_t v16 = *(float32x4_t *)(v14 + v8);
        float32x4_t v17 = *a5;
        v17.i32[3] = 0;
        float32x2_t v18 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a5, 3).u64[0];
        float32x4_t v19 = vmulq_n_f32(v16, vmla_f32((float32x2_t)0xBF000000BF000000, v18, v18).f32[0]);
        v19.i32[3] = 0;
        float32x2_t v20 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
        float32x2_t v21 = (float32x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
        int8x8_t v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a5->f32, (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v21, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a5->f32, (int8x8_t)v20, 4uLL), *(float32x2_t *)v16.f32);
        *(int8x8_t *)v23.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32(v20, *(float32x2_t *)v16.f32), *(float32x2_t *)a5->f32, v21), 4uLL);
        v23.i64[1] = v22.u32[0];
        float32x4_t v24 = vmlaq_laneq_f32(v19, v23, *a5, 3);
        v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
        float32x4_t v25 = vmulq_f32(v17, v16);
        v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
        float32x4_t v26 = vmlaq_n_f32(v24, v17, vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0]);
        v26.i64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
        float32x4_t v27 = vmlaq_f32(a5[1], v13, v26);
        v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
        int8x16_t v28 = (int8x16_t)vmlsq_lane_f32(v27, *a4, v10, 0);
        v28.i64[1] = vextq_s8(v28, v28, 8uLL).u32[0];
        uint64_t v29 = a2 + (v9++ << 6);
        *(_OWORD *)uint64_t v29 = *a3;
        *(int8x16_t *)(v29 + 16) = v28;
        *(_DWORD *)(v29 + 12) = v15.i32[0];
        *(_DWORD *)(v29 + 52) = -1;
        unsigned int v7 = *(unsigned __int8 *)(result + 64);
        float32x2_t v10 = *a6;
        float32x2_t v11 = *a7;
      }
      if (v9 > 0x3F) {
        break;
      }
      v8 += 48;
    }
    while (v12++ < v7);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  *(_DWORD *)(a2 + 4096) = v9;
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::addBatchManifoldContacts(uint64_t result, int32x4_t *a2, unsigned int a3, double a4)
{
  uint64_t v4 = result;
  if (a3 > 4)
  {
    int8x8_t result = physx::Gu::PersistentContactManifold::reduceBatchContacts(result, a2, a3, a4);
    LOBYTE(a3) = 4;
  }
  else if (a3)
  {
    uint64_t v5 = 0;
    do
    {
      *(int32x4_t *)(*(void *)(result + 80) + v5 * 16) = a2[v5];
      *(int32x4_t *)(*(void *)(result + 80) + v5 * 16 + 16) = a2[v5 + 1];
      *(int32x4_t *)(*(void *)(result + 80) + v5 * 16 + 32) = a2[v5 + 2];
      v5 += 3;
    }
    while (3 * a3 != v5);
  }
  *(unsigned char *)(v4 + 64) = a3;
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::reduceBatchContacts(uint64_t result, int32x4_t *a2, unsigned int a3, double a4)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  if (a3 >= 0x40) {
    uint64_t v4 = 64;
  }
  else {
    uint64_t v4 = a3;
  }
  float32x2_t v5 = (float32x2_t)vdup_laneq_s32(a2[2], 3);
  v91[0] = 0;
  uint64_t v6 = (v4 - 2);
  if (v4 < 2)
  {
    unsigned __int8 v8 = 0;
    uint64_t v7 = 0;
    float32x2_t v10 = (float32x2_t)0x80000000800000;
  }
  else
  {
    LODWORD(v7) = 0;
    unsigned __int8 v8 = 0;
    unint64_t v9 = (int32x2_t *)&a2[5];
    float32x2_t v10 = (float32x2_t)0x80000000800000;
    for (uint64_t i = 1; i != v4; ++i)
    {
      v91[i] = i;
      float32x2_t v12 = (float32x2_t)vdup_lane_s32(v9[1], 1);
      float32x2_t v10 = vmax_f32(v10, v12);
      unsigned __int8 v13 = vcgt_f32(v5, v12).u8[0];
      if (v13)
      {
        unsigned __int8 v8 = i;
        uint64_t v7 = i;
      }
      else
      {
        uint64_t v7 = v7;
      }
      if (v13) {
        unsigned int v14 = -1;
      }
      else {
        unsigned int v14 = 0;
      }
      float32x2_t v5 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v14), (int8x8_t)v12, (int8x8_t)v5);
      v9 += 6;
    }
  }
  v90[0] = v8;
  uint64_t v15 = (v4 - 1);
  v91[v7] = v91[v15];
  unsigned __int8 v16 = v91[0];
  float32x4_t v17 = (float32x4_t)a2[3 * v8 + 1];
  if (v15 < 2)
  {
    uint64_t v18 = 0;
  }
  else
  {
    LODWORD(v18) = 0;
    float32x4_t v19 = vsubq_f32((float32x4_t)a2[3 * v91[0] + 1], v17);
    float32x4_t v20 = vmulq_f32(v19, v19);
    v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
    float32x2_t v21 = vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32);
    for (uint64_t j = 1; j != v15; ++j)
    {
      float32x4_t v23 = vsubq_f32((float32x4_t)a2[3 * v91[j] + 1], v17);
      float32x4_t v24 = vmulq_f32(v23, v23);
      v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
      float32x2_t v25 = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
      unsigned __int8 v26 = vcgt_f32(v25, v21).u8[0];
      if (v26)
      {
        unsigned __int8 v16 = v91[j];
        uint64_t v18 = j;
      }
      else
      {
        uint64_t v18 = v18;
      }
      if (v26) {
        unsigned int v27 = -1;
      }
      else {
        unsigned int v27 = 0;
      }
      float32x2_t v21 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v27), (int8x8_t)v25, (int8x8_t)v21);
    }
  }
  v90[1] = v16;
  v91[v18] = v91[v6];
  int8x16_t v28 = (int8x16_t)a2[3 * v8 + 2];
  int8x16_t v29 = v28;
  v29.i32[3] = 0;
  int8x16_t v30 = (int8x16_t)vsubq_f32((float32x4_t)a2[3 * v16 + 1], v17);
  float32x2_t v31 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
  int8x8_t v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v30.i8, (float32x2_t)vext_s8(*(int8x8_t *)v28.i8, (int8x8_t)v31, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL), *(float32x2_t *)v28.i8);
  *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), *(float32x2_t *)v28.i8), *(float32x2_t *)v30.i8, v31), 4uLL);
  v33.i64[1] = v32.u32[0];
  *(float32x2_t *)v28.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32), vmul_f32((float32x2_t)v32.u32[0], (float32x2_t)v32.u32[0]));
  float32x2_t v34 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
  int32x2_t v35 = (int32x2_t)vand_s8((int8x8_t)vcgtz_f32(v34), (int8x8_t)0x100000001);
  float32x2_t v36 = vrsqrte_f32(v34);
  int v37 = 4;
  do
  {
    float32x2_t v36 = vmul_f32(v36, vrsqrts_f32(vmul_f32(v36, v36), v34));
    --v37;
  }
  while (v37);
  __asm { FMOV            V18.2S, #1.0 }
  float32x2_t v43 = vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v34), 0), _D18, (int8x8_t)v36));
  float32x2_t v44 = vrecpe_f32(v43);
  int v45 = 4;
  do
  {
    float32x2_t v44 = vmul_f32(v44, vrecps_f32(v43, v44));
    --v45;
  }
  while (v45);
  int8x16_t v46 = (int8x16_t)vmulq_n_f32(v33, v44.f32[0]);
  v46.i32[3] = 0;
  float32x4_t v47 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(v35, 0), 0x1FuLL)), v46, v29);
  if (v4 == 2)
  {
    unsigned __int32 v61 = 127;
    int v53 = -1;
    char v54 = -1;
    char v52 = -1;
    int v50 = -1;
  }
  else
  {
    uint64_t v48 = 0;
    float32x2_t v49 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    int v50 = -1;
    float32x2_t v51 = (float32x2_t)0x80000000800000;
    char v52 = -1;
    int v53 = -1;
    char v54 = -1;
    do
    {
      float32x4_t v55 = vmulq_f32(v47, vsubq_f32((float32x4_t)a2[3 * v91[v48] + 1], v17));
      v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
      float32x2_t v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
      if (vcgt_f32(v56, v51).u8[0])
      {
        char v54 = v91[v48];
        int v53 = v48;
        unsigned int v57 = -1;
      }
      else
      {
        unsigned int v57 = 0;
      }
      int8x8_t v58 = (int8x8_t)vdup_n_s32(v57);
      unsigned __int8 v59 = vcgt_f32(v49, v56).u8[0];
      if (v59) {
        unsigned int v60 = -1;
      }
      else {
        unsigned int v60 = 0;
      }
      float32x2_t v51 = (float32x2_t)vbsl_s8(v58, (int8x8_t)v56, (int8x8_t)v51);
      float32x2_t v49 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v60), (int8x8_t)v56, (int8x8_t)v49);
      if (v59)
      {
        char v52 = v91[v48];
        int v50 = v48;
      }
      ++v48;
    }
    while (v6 != v48);
    unsigned __int32 v61 = vmul_f32(v51, v49).u32[0];
  }
  v90[2] = v54;
  uint64_t v62 = (v4 - 3);
  v91[v53] = v91[v62];
  if (v62 == v50) {
    int v50 = v53;
  }
  if (v4 != 3 && *(float *)&v61 > 0.0)
  {
    uint64_t v63 = 0;
    float32x2_t v64 = (float32x2_t)0x80000000800000;
    do
    {
      float32x4_t v65 = vmulq_f32(v47, vsubq_f32((float32x4_t)a2[3 * v91[v63] + 1], v17));
      v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
      float32x2_t v66 = vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32);
      unsigned __int8 v67 = vcgt_f32(v66, v64).u8[0];
      if (v67) {
        unsigned int v68 = -1;
      }
      else {
        unsigned int v68 = 0;
      }
      float32x2_t v64 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v68), (int8x8_t)v66, (int8x8_t)v64);
      if (v67)
      {
        char v52 = v91[v63];
        int v50 = v63;
      }
      ++v63;
    }
    while (v62 != v63);
  }
  v90[3] = v52;
  uint64_t v69 = (v4 - 4);
  v91[v50] = v91[v69];
  *(float *)&a4 = *(float *)&a4 * 0.02;
  float32x2_t v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v70, v5), (int8x8_t)vcgt_f32(v10, v70)), 0), (int8x8_t)v70).u32[0] == -1)
  {
    for (uint64_t k = 0; k != 4; ++k)
    {
      unsigned int v79 = v90[k];
      if (v69)
      {
        float32x2_t v80 = (float32x2_t)vdup_lane_s32((int32x2_t)a2[3 * v90[k] + 2].u64[1], 1);
        if (vcgt_f32(v80, v70).u8[0])
        {
          uint64_t v81 = 0;
          unsigned int v82 = -1;
          do
          {
            float32x2_t v83 = (float32x2_t)vdup_lane_s32((int32x2_t)a2[3 * v91[v81] + 2].u64[1], 1);
            if (vcgt_f32(v80, v83).u8[0])
            {
              if (vcgt_f32(v70, v83).u8[0])
              {
                unsigned int v82 = v81;
                unsigned int v84 = -1;
              }
              else
              {
                unsigned int v84 = 0;
              }
              float32x2_t v80 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v84), (int8x8_t)v83, (int8x8_t)v80);
            }
            ++v81;
          }
          while (v69 != v81);
          if (v82 < v69)
          {
            unsigned int v85 = v91[v82];
            v90[k] = v85;
            v91[v82] = v79;
            unsigned int v79 = v85;
          }
        }
      }
      float32x2_t v86 = &a2[3 * v79];
      int8x8_t v87 = (int32x4_t *)(*(void *)(result + 80) + 48 * k);
      int32x4_t v88 = *v86;
      int32x4_t v89 = v86[2];
      v87[1] = v86[1];
      v87[2] = v89;
      *int8x8_t v87 = v88;
    }
  }
  else
  {
    uint64_t v71 = 0;
    float32x4_t v72 = v90;
    do
    {
      unsigned int v73 = *v72++;
      float32x2_t v74 = &a2[3 * v73];
      float32x4_t v75 = (int32x4_t *)(*(void *)(result + 80) + v71);
      int32x4_t v77 = v74[1];
      int32x4_t v76 = v74[2];
      *float32x4_t v75 = *v74;
      v75[1] = v77;
      v75[2] = v76;
      v71 += 48;
    }
    while (v71 != 192);
  }
  return result;
}

void physx::Gu::PersistentContactManifold::addBatchManifoldContactsCluster(uint64_t a1, float32x4_t *a2, unsigned int a3)
{
  if (a3 > 4)
  {
    physx::Gu::PersistentContactManifold::reduceBatchContactsCluster(a1, a2, a3);
    LOBYTE(a3) = 4;
  }
  else if (a3)
  {
    uint64_t v4 = 0;
    do
    {
      *(float32x4_t *)(*(void *)(a1 + 80) + v4 * 16) = a2[v4];
      *(float32x4_t *)(*(void *)(a1 + 80) + v4 * 16 + 16) = a2[v4 + 1];
      *(float32x4_t *)(*(void *)(a1 + 80) + v4 * 16 + 32) = a2[v4 + 2];
      v4 += 3;
    }
    while (3 * a3 != v4);
  }
  *(unsigned char *)(a1 + 64) = a3;
}

__n128 physx::Gu::PersistentContactManifold::reduceBatchContactsCluster(uint64_t a1, float32x4_t *a2, unsigned int a3)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  if (a3 >= 0x40) {
    size_t v5 = 64;
  }
  else {
    size_t v5 = a3;
  }
  bzero(v120, v5);
  if (v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    unsigned __int8 v8 = a2 + 1;
    float32x2_t v9 = (float32x2_t)0x80000000800000;
    do
    {
      float32x4_t v10 = *v8;
      v8 += 3;
      float32x4_t v11 = vmulq_f32(v10, v10);
      v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
      float32x2_t v12 = vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
      if (vcgt_f32(v12, v9).u8[0])
      {
        unsigned int v7 = v6;
        unsigned int v13 = -1;
      }
      else
      {
        unsigned int v13 = 0;
      }
      float32x2_t v9 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v13), (int8x8_t)v12, (int8x8_t)v9);
      ++v6;
    }
    while (v5 != v6);
  }
  else
  {
    unsigned int v7 = 0;
  }
  unsigned int v14 = v7;
  uint64_t v15 = (long long *)&a2[3 * v7];
  unsigned __int8 v16 = *(_OWORD **)(a1 + 80);
  long long v17 = *v15;
  long long v18 = v15[2];
  v16[1] = v15[1];
  v16[2] = v18;
  *unsigned __int8 v16 = v17;
  v120[v7] = 1;
  unsigned int v116 = v7;
  float32x4_t v19 = *(float32x4_t **)(a1 + 80);
  if (v5 < 2)
  {
    unsigned int v20 = 0;
  }
  else
  {
    unsigned int v20 = 0;
    float32x4_t v21 = v19[1];
    float32x4_t v22 = vsubq_f32(a2[1], v21);
    float32x4_t v23 = vmulq_f32(v22, v22);
    v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
    float32x2_t v24 = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
    float32x2_t v25 = a2 + 4;
    for (uint64_t i = 1; i != v5; ++i)
    {
      float32x4_t v27 = *v25;
      v25 += 3;
      float32x4_t v28 = vsubq_f32(v27, v21);
      float32x4_t v29 = vmulq_f32(v28, v28);
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      float32x2_t v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
      if (vcgt_f32(v30, v24).u8[0])
      {
        unsigned int v20 = i;
        unsigned int v31 = -1;
      }
      else
      {
        unsigned int v31 = 0;
      }
      float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v31), (int8x8_t)v30, (int8x8_t)v24);
    }
  }
  unsigned int v32 = v20;
  float32x4_t v33 = &a2[3 * v20];
  float32x4_t v34 = *v33;
  float32x4_t v35 = v33[2];
  v19[4] = v33[1];
  v19[5] = v35;
  v19[3] = v34;
  v120[v20] = 1;
  unsigned int v117 = v20;
  uint64_t v36 = *(void *)(a1 + 80);
  float32x4_t v37 = *(float32x4_t *)(v36 + 16);
  int8x16_t v38 = *(int8x16_t *)(v36 + 32);
  int8x16_t v39 = v38;
  v39.i32[3] = 0;
  int8x16_t v40 = (int8x16_t)vsubq_f32(*(float32x4_t *)(v36 + 64), v37);
  float32x2_t v41 = (float32x2_t)vextq_s8(v39, v39, 8uLL).u64[0];
  int8x8_t v42 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v40.i8, (float32x2_t)vext_s8(*(int8x8_t *)v38.i8, (int8x8_t)v41, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 4uLL), *(float32x2_t *)v38.i8);
  *(int8x8_t *)v43.f32 = vext_s8(v42, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), *(float32x2_t *)v38.i8), *(float32x2_t *)v40.i8, v41), 4uLL);
  v43.i64[1] = v42.u32[0];
  *(float32x2_t *)v38.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), vmul_f32((float32x2_t)v42.u32[0], (float32x2_t)v42.u32[0]));
  float32x2_t v44 = vpadd_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v38.i8);
  int32x2_t v45 = (int32x2_t)vand_s8((int8x8_t)vcgtz_f32(v44), (int8x8_t)0x100000001);
  float32x2_t v46 = vrsqrte_f32(v44);
  int v47 = 4;
  do
  {
    float32x2_t v46 = vmul_f32(v46, vrsqrts_f32(vmul_f32(v46, v46), v44));
    --v47;
  }
  while (v47);
  __asm { FMOV            V7.2S, #1.0 }
  float32x2_t v53 = vmul_f32(v44, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v44), 0), _D7, (int8x8_t)v46));
  float32x2_t v54 = vrecpe_f32(v53);
  int v55 = 4;
  do
  {
    float32x2_t v54 = vmul_f32(v54, vrecps_f32(v53, v54));
    --v55;
  }
  while (v55);
  int8x16_t v56 = (int8x16_t)vmulq_n_f32(v43, v54.f32[0]);
  v56.i32[3] = 0;
  float32x4_t v57 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(v45, 0), 0x1FuLL)), v56, v39);
  if (v5)
  {
    uint64_t v58 = 0;
    float32x2_t v59 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    unsigned int v60 = a2 + 1;
    float32x2_t v61 = (float32x2_t)0x80000000800000;
    unsigned int v62 = -1;
    unsigned int v63 = -1;
    do
    {
      if (!v120[v58])
      {
        float32x4_t v64 = vmulq_f32(v57, vsubq_f32(*v60, v37));
        v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
        float32x2_t v65 = vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32);
        if (vcgt_f32(v65, v61).u8[0])
        {
          unsigned int v63 = v58;
          unsigned int v66 = -1;
        }
        else
        {
          unsigned int v66 = 0;
        }
        float32x2_t v61 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v66), (int8x8_t)v65, (int8x8_t)v61);
        unsigned __int8 v67 = vcgt_f32(v59, v65).u8[0];
        unsigned int v68 = (v67 & 1) != 0 ? -1 : 0;
        float32x2_t v59 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v68), (int8x8_t)v65, (int8x8_t)v59);
        if (v67) {
          unsigned int v62 = v58;
        }
      }
      ++v58;
      v60 += 3;
    }
    while (v5 != v58);
    unsigned __int32 v69 = vmul_f32(v61, v59).u32[0];
  }
  else
  {
    unsigned __int32 v69 = 127;
    unsigned int v63 = -1;
    unsigned int v62 = -1;
  }
  float32x2_t v70 = (long long *)&a2[3 * v63];
  long long v71 = *v70;
  long long v72 = v70[2];
  *(_OWORD *)(v36 + 112) = v70[1];
  *(_OWORD *)(v36 + 128) = v72;
  *(_OWORD *)(v36 + 96) = v71;
  v120[v63] = 1;
  unsigned int v118 = v63;
  if (v5 && *(float *)&v69 > 0.0)
  {
    uint64_t v73 = 0;
    float32x2_t v74 = a2 + 1;
    float32x2_t v75 = (float32x2_t)0x80000000800000;
    do
    {
      if (!v120[v73])
      {
        float32x4_t v76 = vmulq_f32(v57, vsubq_f32(*v74, *(float32x4_t *)(*(void *)(a1 + 80) + 16)));
        v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
        float32x2_t v77 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
        unsigned __int8 v78 = vcgt_f32(v77, v75).u8[0];
        unsigned int v79 = (v78 & 1) != 0 ? -1 : 0;
        float32x2_t v75 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v79), (int8x8_t)v77, (int8x8_t)v75);
        if (v78) {
          unsigned int v62 = v73;
        }
      }
      ++v73;
      v74 += 3;
    }
    while (v5 != v73);
  }
  float32x2_t v80 = (long long *)&a2[3 * v62];
  uint64_t v81 = *(_OWORD **)(a1 + 80);
  long long v82 = *v80;
  long long v83 = v80[2];
  v81[10] = v80[1];
  v81[11] = v83;
  v81[9] = v82;
  v120[v62] = 1;
  unsigned int v119 = v62;
  if (v5)
  {
    uint64_t v84 = 0;
    int32x2_t v85 = vdup_n_s32(0x7F7FFFFFu);
    do
    {
      LODWORD(v86) = v120[v84];
      if (!v120[v84])
      {
        uint64_t v87 = 0;
        int32x4_t v88 = &a2[3 * v84];
        float32x4_t v90 = v88[1];
        float32x4_t v89 = v88[2];
        float32x4_t v91 = (float32x4_t *)(*(void *)(a1 + 80) + 16);
        float32x2_t v92 = (float32x2_t)v85;
        do
        {
          float32x4_t v93 = *v91;
          v91 += 3;
          float32x4_t v94 = vsubq_f32(v90, v93);
          float32x4_t v95 = vmulq_f32(v94, v94);
          v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
          float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
          unsigned __int8 v97 = vcgt_f32(v92, v96).u8[0];
          if (v97) {
            uint64_t v86 = v87;
          }
          else {
            uint64_t v86 = v86;
          }
          if (v97) {
            unsigned int v98 = -1;
          }
          else {
            unsigned int v98 = 0;
          }
          float32x2_t v92 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v98), (int8x8_t)v96, (int8x8_t)v92);
          ++v87;
        }
        while (v87 != 4);
        if (a2[3 * *(&v116 + v86) + 2].f32[3] > v89.f32[3]) {
          *(&v116 + v86) = v84;
        }
      }
      ++v84;
    }
    while (v84 != v5);
    unsigned int v14 = v116;
    unsigned int v32 = v117;
    unsigned int v63 = v118;
    unsigned int v99 = v119;
  }
  else
  {
    unsigned int v99 = v62;
  }
  int v100 = (long long *)&a2[3 * v14];
  float32x4_t v101 = *(_OWORD **)(a1 + 80);
  long long v102 = *v100;
  long long v103 = v100[2];
  v101[1] = v100[1];
  float32x2_t v101[2] = v103;
  *float32x4_t v101 = v102;
  float32x2_t v104 = (long long *)&a2[3 * v32];
  int v105 = *(_OWORD **)(a1 + 80);
  long long v106 = *v104;
  long long v107 = v104[2];
  _OWORD v105[4] = v104[1];
  v105[5] = v107;
  v105[3] = v106;
  float32x2_t v108 = (long long *)&a2[3 * v63];
  float32x2_t v109 = *(_OWORD **)(a1 + 80);
  long long v110 = *v108;
  long long v111 = v108[2];
  v109[7] = v108[1];
  v109[8] = v111;
  v109[6] = v110;
  float32x2_t v112 = &a2[3 * v99];
  uint64_t v113 = *(void *)(a1 + 80);
  __n128 result = *(__n128 *)v112;
  float32x4_t v115 = v112[2];
  *(float32x4_t *)(v113 + 160) = v112[1];
  *(float32x4_t *)(v113 + 176) = v115;
  *(__n128 *)(v113 + 144) = result;
  return result;
}

__n128 physx::Gu::PersistentContactManifold::reduceBatchContacts2(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (a3 >= 0x40) {
    size_t v5 = 64;
  }
  else {
    size_t v5 = a3;
  }
  bzero(v44, v5);
  if (v5 < 2)
  {
    uint64_t v6 = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    float32x2_t v7 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 40), 1);
    unsigned __int8 v8 = (int32x2_t *)(a2 + 80);
    for (uint64_t i = 1; i != v5; ++i)
    {
      float32x2_t v10 = (float32x2_t)vdup_lane_s32(v8[1], 1);
      if (vcgt_f32(v7, v10).u8[0])
      {
        LODWORD(v6) = i;
        unsigned int v11 = -1;
      }
      else
      {
        unsigned int v11 = 0;
      }
      float32x2_t v7 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v11), (int8x8_t)v10, (int8x8_t)v7);
      v8 += 6;
    }
    uint64_t v6 = (int)v6;
  }
  float32x2_t v12 = (long long *)(a2 + 48 * (int)v6);
  unsigned int v13 = *(_OWORD **)(a1 + 80);
  long long v14 = *v12;
  long long v15 = v12[2];
  v13[1] = v12[1];
  v13[2] = v15;
  *unsigned int v13 = v14;
  v44[v6] = 1;
  uint64_t v16 = *(void *)(a1 + 80);
  if (v5 < 2)
  {
    int v17 = 0;
  }
  else
  {
    int v17 = 0;
    float32x4_t v18 = *(float32x4_t *)(v16 + 16);
    float32x4_t v19 = vsubq_f32(*(float32x4_t *)(a2 + 16), v18);
    float32x4_t v20 = vmulq_f32(v19, v19);
    v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
    float32x2_t v21 = vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32);
    float32x4_t v22 = (float32x4_t *)(a2 + 64);
    for (uint64_t j = 1; j != v5; ++j)
    {
      float32x4_t v24 = *v22;
      v22 += 3;
      float32x4_t v25 = vsubq_f32(v24, v18);
      float32x4_t v26 = vmulq_f32(v25, v25);
      v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
      float32x2_t v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
      if (vcgt_f32(v27, v21).u8[0])
      {
        int v17 = j;
        unsigned int v28 = -1;
      }
      else
      {
        unsigned int v28 = 0;
      }
      float32x2_t v21 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v28), (int8x8_t)v27, (int8x8_t)v21);
    }
  }
  uint64_t v29 = a2 + 48 * v17;
  __n128 result = *(__n128 *)v29;
  long long v31 = *(_OWORD *)(v29 + 32);
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(v29 + 16);
  *(_OWORD *)(v16 + 80) = v31;
  *(__n128 *)(v16 + 48) = result;
  v44[v17] = 1;
  if (v5)
  {
    uint64_t v32 = 0;
    result.n128_u32[0] = *(_DWORD *)(a2 + 48 * v17 + 44);
    float32x4_t v33 = (float *)(a2 + 44);
    int v34 = v17;
    do
    {
      if (!v44[v32])
      {
        float32x4_t v35 = *(float32x4_t **)(a1 + 80);
        float32x4_t v36 = *(float32x4_t *)(v33 - 7);
        float32x4_t v37 = vsubq_f32(v35[1], v36);
        float32x4_t v38 = vsubq_f32(v35[4], v36);
        float32x4_t v39 = vmulq_f32(v37, v37);
        v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
        float32x4_t v40 = vmulq_f32(v38, v38);
        v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
        if ((vcgt_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32), vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32)).u8[0] & 1) != 0&& result.n128_f32[0] > *v33)
        {
          int v34 = v32;
        }
      }
      ++v32;
      v33 += 12;
    }
    while (v5 != v32);
    if (v34 != v17)
    {
      uint64_t v41 = a2 + 48 * v34;
      uint64_t v42 = *(void *)(a1 + 80);
      __n128 result = *(__n128 *)v41;
      long long v43 = *(_OWORD *)(v41 + 32);
      *(_OWORD *)(v42 + 64) = *(_OWORD *)(v41 + 16);
      *(_OWORD *)(v42 + 80) = v43;
      *(__n128 *)(v42 + 48) = result;
    }
  }
  return result;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldPoint(uint64_t a1, float32x4_t *a2, long long *a3, int32x4_t *a4, float32x2_t *a5)
{
  if (!physx::Gu::PersistentContactManifold::replaceManifoldPoint(a1, a2, (float32x4_t *)a3, a4, a5))
  {
    if (*(unsigned __int8 *)(a1 + 64) <= 3uLL)
    {
      *(float32x4_t *)(*(void *)(a1 + 80) + 48 * *(unsigned __int8 *)(a1 + 64)) = *a2;
      *(_OWORD *)(*(void *)(a1 + 80) + 48 * *(unsigned __int8 *)(a1 + 64) + 16) = *a3;
      int32x4_t v9 = *a4;
      uint64_t v10 = *(void *)(a1 + 80);
      unsigned int v11 = *(unsigned __int8 *)(a1 + 64);
      *(unsigned char *)(a1 + 64) = v11 + 1;
      *(int32x4_t *)(v10 + 48 * v11 + 32) = v9;
      return 1;
    }
    physx::Gu::PersistentContactManifold::reduceContactsForPCM(a1, a2, a3, a4);
  }
  return 0;
}

uint64_t physx::Gu::PersistentContactManifold::addManifoldPoint2(uint64_t a1, float32x4_t *a2, float32x4_t *a3, long long *a4, float32x2_t *a5)
{
  if (physx::Gu::PersistentContactManifold::replaceManifoldPoint(a1, a2, a3, a4, a5)) {
    return 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + 64);
  if (v9 < 2)
  {
    *(float32x4_t *)(*(void *)(a1 + 80) + 48 * *(unsigned __int8 *)(a1 + 64)) = *a2;
    *(float32x4_t *)(*(void *)(a1 + 80) + 48 * *(unsigned __int8 *)(a1 + 64) + 16) = *a3;
    long long v10 = *a4;
    uint64_t v11 = *(void *)(a1 + 80);
    unsigned int v12 = *(unsigned __int8 *)(a1 + 64);
    *(unsigned char *)(a1 + 64) = v12 + 1;
    *(_OWORD *)(v11 + 48 * v12 + 32) = v10;
    return 1;
  }
  if (v9 != 2) {
    return 0;
  }
  uint64_t result = 0;
  long long v14 = *(float32x4_t **)(a1 + 80);
  float32x4_t v15 = vsubq_f32(v14[1], *a3);
  float32x4_t v16 = vsubq_f32(v14[4], *a3);
  float32x4_t v17 = vmulq_f32(v15, v15);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x4_t v18 = vmulq_f32(v16, v16);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  v18.i8[0] = vcgt_f32(vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32)).u8[0];
  uint64_t v19 = (16 * (v18.i8[0] & 1)) & 0xDF | (32 * (v18.i8[0] & 1));
  *(float32x4_t *)((char *)v14 + v19) = *a2;
  *(float32x4_t *)(*(void *)(a1 + 80) + v19 + 16) = *a3;
  *(_OWORD *)(*(void *)(a1 + 80) + v19 + 32) = *a4;
  return result;
}

void physx::Gu::PersistentContactManifold::addBatchManifoldContacts2(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 > 2)
  {
    physx::Gu::PersistentContactManifold::reduceBatchContacts2(a1, a2, a3);
    LOBYTE(a3) = 2;
  }
  else if (a3)
  {
    uint64_t v4 = 0;
    do
    {
      *(_OWORD *)(*(void *)(a1 + 80) + v4) = *(_OWORD *)(a2 + v4);
      *(_OWORD *)(*(void *)(a1 + 80) + v4 + 16) = *(_OWORD *)(a2 + v4 + 16);
      *(_OWORD *)(*(void *)(a1 + 80) + v4 + 32) = *(_OWORD *)(a2 + v4 + 32);
      v4 += 48;
    }
    while (48 * a3 != v4);
  }
  *(unsigned char *)(a1 + 64) = a3;
}

void physx::Gu::SinglePersistentContactManifold::reduceBatchContactsConvex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v118[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  unsigned __int8 v8 = &v115.i8[-((v7 + 15) & 0x1FFFFFFF0)];
  bzero(v8, v7);
  unsigned int v9 = -1;
  float32x2_t v10 = (float32x2_t)0x80000000800000;
  uint64_t v11 = a4;
  do
  {
    uint64_t v12 = *(unsigned int *)(v11 + 48);
    uint64_t v13 = *(unsigned int *)(v11 + 52);
    if (v12 < v13)
    {
      long long v14 = (float32x4_t *)(a2 + 16 + (v12 << 6));
      do
      {
        float32x4_t v15 = *v14;
        v14 += 4;
        float32x4_t v16 = vmulq_f32(v15, v15);
        v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
        float32x2_t v17 = vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
        if (vcgt_f32(v17, v10).u8[0])
        {
          unsigned int v9 = v12;
          unsigned int v18 = -1;
        }
        else
        {
          unsigned int v18 = 0;
        }
        float32x2_t v10 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v18), (int8x8_t)v17, (int8x8_t)v10);
        ++v12;
      }
      while (v13 != v12);
    }
    uint64_t v11 = *(void *)(v11 + 16);
  }
  while (v11);
  v8[v9] = 1;
  uint64_t v19 = a2 + ((unint64_t)v9 << 6);
  int v20 = *(_DWORD *)(v19 + 48);
  float32x4_t v22 = *(float32x4_t *)(v19 + 16);
  long long v21 = *(_OWORD *)(v19 + 32);
  float32x4_t v23 = v22;
  *(_OWORD *)a1 = *(_OWORD *)v19;
  *(float32x4_t *)(a1 + 16) = v22;
  *(_OWORD *)(a1 + 32) = v21;
  *(_DWORD *)(a1 + 48) = v20;
  int32x4_t v24 = *(int32x4_t *)(v19 + 32);
  uint64_t v25 = *(unsigned int *)(a4 + 48);
  float32x4_t v26 = vsubq_f32(*(float32x4_t *)(a2 + (v25 << 6) + 16), v22);
  float32x4_t v27 = vmulq_f32(v26, v26);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  float32x2_t v28 = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32);
  uint64_t v29 = a4;
  do
  {
    uint64_t v30 = *(unsigned int *)(v29 + 48);
    uint64_t v31 = *(unsigned int *)(v29 + 52);
    if (v30 < v31)
    {
      uint64_t v32 = (float32x4_t *)(a2 + 16 + (v30 << 6));
      do
      {
        float32x4_t v33 = *v32;
        v32 += 4;
        float32x4_t v34 = vsubq_f32(v33, v23);
        float32x4_t v35 = vmulq_f32(v34, v34);
        v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
        float32x2_t v36 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
        if (vcgt_f32(v36, v28).u8[0])
        {
          LODWORD(v25) = v30;
          unsigned int v37 = -1;
        }
        else
        {
          unsigned int v37 = 0;
        }
        float32x2_t v28 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v37), (int8x8_t)v36, (int8x8_t)v28);
        ++v30;
      }
      while (v31 != v30);
    }
    uint64_t v29 = *(void *)(v29 + 16);
  }
  while (v29);
  v8[v25] = 1;
  uint64_t v38 = a2 + ((unint64_t)v25 << 6);
  int v39 = *(_DWORD *)(v38 + 48);
  float32x4_t v41 = *(float32x4_t *)(v38 + 16);
  long long v40 = *(_OWORD *)(v38 + 32);
  float32x4_t v42 = v41;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v38;
  *(float32x4_t *)(a1 + 80) = v41;
  *(_OWORD *)(a1 + 96) = v40;
  *(_DWORD *)(a1 + 112) = v39;
  int32x4_t v43 = *(int32x4_t *)(v38 + 32);
  int8x16_t v44 = *(int8x16_t *)(a1 + 32);
  int8x16_t v45 = v44;
  v45.i32[3] = 0;
  int8x16_t v46 = (int8x16_t)vsubq_f32(v42, v23);
  float32x2_t v47 = (float32x2_t)vextq_s8(v45, v45, 8uLL).u64[0];
  int8x8_t v48 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v46.i8, (float32x2_t)vext_s8(*(int8x8_t *)v44.i8, (int8x8_t)v47, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), *(float32x2_t *)v44.i8);
  *(int8x8_t *)v49.f32 = vext_s8(v48, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), *(float32x2_t *)v44.i8), *(float32x2_t *)v46.i8, v47), 4uLL);
  v49.i64[1] = v48.u32[0];
  *(float32x2_t *)v44.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32), vmul_f32((float32x2_t)v48.u32[0], (float32x2_t)v48.u32[0]));
  float32x2_t v50 = vpadd_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8);
  int32x2_t v51 = (int32x2_t)vand_s8((int8x8_t)vcgtz_f32(v50), (int8x8_t)0x100000001);
  float32x2_t v52 = vrsqrte_f32(v50);
  int v53 = 4;
  do
  {
    float32x2_t v52 = vmul_f32(v52, vrsqrts_f32(vmul_f32(v52, v52), v50));
    --v53;
  }
  while (v53);
  int32x4_t v54 = vdupq_lane_s32(v51, 0);
  __asm { FMOV            V17.2S, #1.0 }
  float32x2_t v60 = vmul_f32(v50, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v50), 0), _D17, (int8x8_t)v52));
  float32x2_t v61 = vrecpe_f32(v60);
  int v62 = 4;
  do
  {
    float32x2_t v61 = vmul_f32(v61, vrecps_f32(v60, v61));
    --v62;
  }
  while (v62);
  float32x2_t v63 = (float32x2_t)vdup_laneq_s32(v43, 3);
  int8x16_t v64 = (int8x16_t)vmulq_n_f32(v49, v61.f32[0]);
  v64.i32[3] = 0;
  float32x2_t v65 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  float32x4_t v66 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v54, 0x1FuLL)), v64, v45);
  float32x2_t v67 = (float32x2_t)0x80000000800000;
  unsigned int v68 = -1;
  unsigned int v69 = -1;
  uint64_t v70 = a4;
  do
  {
    uint64_t v71 = *(unsigned int *)(v70 + 48);
    uint64_t v72 = *(unsigned int *)(v70 + 52);
    if (v71 < v72)
    {
      uint64_t v73 = (float32x4_t *)(a2 + 16 + (v71 << 6));
      do
      {
        if (!v8[v71])
        {
          float32x4_t v74 = vmulq_f32(v66, vsubq_f32(*v73, v23));
          v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
          float32x2_t v75 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
          if (vcgt_f32(v75, v67).u8[0])
          {
            unsigned int v69 = v71;
            unsigned int v76 = -1;
          }
          else
          {
            unsigned int v76 = 0;
          }
          float32x2_t v67 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v76), (int8x8_t)v75, (int8x8_t)v67);
          unsigned __int8 v77 = vcgt_f32(v65, v75).u8[0];
          unsigned int v78 = (v77 & 1) != 0 ? -1 : 0;
          float32x2_t v65 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v78), (int8x8_t)v75, (int8x8_t)v65);
          if (v77) {
            unsigned int v68 = v71;
          }
        }
        ++v71;
        v73 += 4;
      }
      while (v72 != v71);
    }
    uint64_t v70 = *(void *)(v70 + 16);
  }
  while (v70);
  float32x2_t v79 = vmin_f32((float32x2_t)vdup_laneq_s32(v24, 3), v63);
  v8[v69] = 1;
  float32x2_t v80 = (long long *)(a2 + ((unint64_t)v69 << 6));
  long long v82 = v80[1];
  long long v81 = v80[2];
  long long v83 = *v80;
  *(_DWORD *)(a1 + 176) = *((_DWORD *)v80 + 12);
  *(_OWORD *)(a1 + 144) = v82;
  *(_OWORD *)(a1 + 160) = v81;
  *(_OWORD *)(a1 + 128) = v83;
  float32x2_t v84 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)((char *)v80 + 40), 1);
  if (vmul_f32(v67, v65).f32[0] > 0.0)
  {
    float32x2_t v85 = (float32x2_t)0x80000000800000;
    uint64_t v86 = a4;
    do
    {
      uint64_t v87 = *(unsigned int *)(v86 + 48);
      uint64_t v88 = *(unsigned int *)(v86 + 52);
      if (v87 < v88)
      {
        float32x4_t v89 = (float32x4_t *)(a2 + 16 + (v87 << 6));
        do
        {
          if (!v8[v87])
          {
            float32x4_t v90 = vmulq_f32(v66, vsubq_f32(*v89, v23));
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
            unsigned __int8 v92 = vcgt_f32(v91, v85).u8[0];
            if (v92) {
              unsigned int v93 = -1;
            }
            else {
              unsigned int v93 = 0;
            }
            float32x2_t v85 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v93), (int8x8_t)v91, (int8x8_t)v85);
            if (v92) {
              unsigned int v68 = v87;
            }
          }
          ++v87;
          v89 += 4;
        }
        while (v88 != v87);
      }
      uint64_t v86 = *(void *)(v86 + 16);
    }
    while (v86);
  }
  float32x2_t v94 = vmin_f32(v79, v84);
  v8[v68] = 1;
  float32x4_t v95 = (long long *)(a2 + ((unint64_t)v68 << 6));
  long long v97 = v95[1];
  long long v96 = v95[2];
  long long v98 = *v95;
  *(_DWORD *)(a1 + 240) = *((_DWORD *)v95 + 12);
  *(_OWORD *)(a1 + 208) = v97;
  *(_OWORD *)(a1 + 224) = v96;
  *(_OWORD *)(a1 + 192) = v98;
  int32x4_t v115 = (int32x4_t)v95[2];
  uint64_t v116 = 0;
  memset_pattern16(&__b, &unk_23441FF20, 0x10uLL);
  do
  {
    uint64_t v99 = *(unsigned int *)(a4 + 48);
    uint64_t v100 = *(unsigned int *)(a4 + 52);
    if (v99 < v100)
    {
      float32x4_t v101 = (int32x4_t *)(a2 + 32 + (v99 << 6));
      do
      {
        if (!v8[v99])
        {
          int32x4_t v102 = *v101;
          LODWORD(v103) = HIDWORD(*(unsigned long long *)v101);
          if (*(float *)&__b > v103)
          {
            uint64_t v104 = 0;
            v118[0] = __b;
            HIDWORD(v116) = v116;
            p_b = (int32x2_t *)&__b;
LABEL_55:
            int32x2_t *p_b = vdup_laneq_s32(v102, 3);
            *(_DWORD *)((unint64_t)&v116 | (4 * v104)) = v99;
            goto LABEL_56;
          }
          if (*(float *)v118 > v103)
          {
            p_b = (int32x2_t *)v118;
            uint64_t v104 = 1;
            goto LABEL_55;
          }
        }
LABEL_56:
        ++v99;
        v101 += 4;
      }
      while (v100 != v99);
    }
    a4 = *(void *)(a4 + 16);
  }
  while (a4);
  uint64_t v106 = 0;
  float32x2_t v107 = vmin_f32(v94, (float32x2_t)vdup_laneq_s32(v115, 3));
  char v108 = 1;
  do
  {
    char v109 = v108;
    long long v110 = (long long *)(a2 + ((unint64_t)*((unsigned int *)&v116 + v106) << 6));
    uint64_t v111 = a1 + ((v106 << 6) | 0x100);
    long long v113 = v110[1];
    long long v112 = v110[2];
    long long v114 = *v110;
    *(_DWORD *)(v111 + 48) = *((_DWORD *)v110 + 12);
    *(_OWORD *)(v111 + 16) = v113;
    *(_OWORD *)(v111 + 32) = v112;
    *(_OWORD *)uint64_t v111 = v114;
    float32x2_t v107 = vmin_f32(v107, (float32x2_t)v118[v106 - 1]);
    uint64_t v106 = 1;
    char v108 = 0;
  }
  while ((v109 & 1) != 0);
}

float32x2_t physx::Gu::SinglePersistentContactManifold::reduceBatchContactsCapsule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v55[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  unsigned __int8 v8 = (char *)v55 - ((v7 + 15) & 0x1FFFFFFF0);
  bzero(v8, v7);
  float32x2_t v9 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  int v10 = -1;
  uint64_t v11 = a4;
  do
  {
    uint64_t v12 = *(unsigned int *)(v11 + 48);
    uint64_t v13 = *(unsigned int *)(v11 + 52);
    if (v12 < v13)
    {
      long long v14 = (int32x2_t *)(a2 + 32 + (v12 << 6));
      do
      {
        float32x2_t v15 = (float32x2_t)vdup_lane_s32(v14[1], 1);
        unsigned __int8 v16 = vcgt_f32(v9, v15).u8[0];
        if (v16) {
          unsigned int v17 = -1;
        }
        else {
          unsigned int v17 = 0;
        }
        float32x2_t v9 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v17), (int8x8_t)v15, (int8x8_t)v9);
        if (v16) {
          int v10 = v12;
        }
        ++v12;
        v14 += 8;
      }
      while (v13 != v12);
    }
    uint64_t v11 = *(void *)(v11 + 16);
  }
  while (v11);
  v8[v10] = 1;
  unsigned int v18 = (long long *)(a2 + ((uint64_t)v10 << 6));
  long long v19 = *v18;
  int v20 = *((_DWORD *)v18 + 12);
  long long v21 = v18[2];
  *(_OWORD *)(a1 + 16) = v18[1];
  *(_OWORD *)(a1 + 32) = v21;
  *(_DWORD *)(a1 + 48) = v20;
  *(_OWORD *)a1 = v19;
  int32x4_t v22 = (int32x4_t)v18[2];
  uint64_t v23 = *(unsigned int *)(a4 + 48);
  float32x4_t v24 = *(float32x4_t *)(a1 + 16);
  float32x4_t v25 = vsubq_f32(*(float32x4_t *)(a2 + (v23 << 6) + 16), v24);
  float32x4_t v26 = vmulq_f32(v25, v25);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  float32x2_t v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  uint64_t v28 = a4;
  do
  {
    uint64_t v29 = *(unsigned int *)(v28 + 48);
    uint64_t v30 = *(unsigned int *)(v28 + 52);
    if (v29 < v30)
    {
      uint64_t v31 = (float32x4_t *)(a2 + 16 + (v29 << 6));
      do
      {
        float32x4_t v32 = *v31;
        v31 += 4;
        float32x4_t v33 = vsubq_f32(v32, v24);
        float32x4_t v34 = vmulq_f32(v33, v33);
        v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
        float32x2_t v35 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
        unsigned __int8 v36 = vcgt_f32(v35, v27).u8[0];
        if (v36) {
          unsigned int v37 = -1;
        }
        else {
          unsigned int v37 = 0;
        }
        float32x2_t v27 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v37), (int8x8_t)v35, (int8x8_t)v27);
        if (v36) {
          LODWORD(v23) = v29;
        }
        ++v29;
      }
      while (v30 != v29);
    }
    uint64_t v28 = *(void *)(v28 + 16);
  }
  while (v28);
  v8[(int)v23] = 1;
  uint64_t v38 = (long long *)(a2 + ((uint64_t)(int)v23 << 6));
  long long v40 = v38[1];
  long long v39 = v38[2];
  long long v41 = *v38;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)v38 + 12);
  *(_OWORD *)(a1 + 80) = v40;
  *(_OWORD *)(a1 + 96) = v39;
  *(_OWORD *)(a1 + 64) = v41;
  int32x4_t v42 = (int32x4_t)v38[2];
  float32x2_t v43 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  do
  {
    uint64_t v44 = *(unsigned int *)(a4 + 48);
    uint64_t v45 = *(unsigned int *)(a4 + 52);
    if (v44 < v45)
    {
      int8x16_t v46 = (int32x2_t *)(a2 + 32 + (v44 << 6));
      do
      {
        if (!v8[v44])
        {
          float32x2_t v47 = (float32x2_t)vdup_lane_s32(v46[1], 1);
          unsigned __int8 v48 = vcgt_f32(v43, v47).u8[0];
          if (v48) {
            unsigned int v49 = -1;
          }
          else {
            unsigned int v49 = 0;
          }
          float32x2_t v43 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v49), (int8x8_t)v47, (int8x8_t)v43);
          if (v48) {
            LODWORD(v23) = v44;
          }
        }
        ++v44;
        v46 += 8;
      }
      while (v45 != v44);
    }
    a4 = *(void *)(a4 + 16);
  }
  while (a4);
  float32x2_t v50 = (long long *)(a2 + ((uint64_t)(int)v23 << 6));
  long long v51 = *v50;
  long long v52 = v50[1];
  long long v53 = v50[2];
  *(_DWORD *)(a1 + 176) = *((_DWORD *)v50 + 12);
  *(_OWORD *)(a1 + 144) = v52;
  *(_OWORD *)(a1 + 160) = v53;
  *(_OWORD *)(a1 + 128) = v51;
  return vmin_f32(vmin_f32(vmin_f32((float32x2_t)vdup_laneq_s32(v22, 3), (float32x2_t)vdup_n_s32(0x7F7FFFFFu)), (float32x2_t)vdup_laneq_s32(v42, 3)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)((char *)v50 + 40), 1));
}

uint64_t physx::Gu::SinglePersistentContactManifold::reduceContacts(uint64_t a1, unsigned int a2)
{
  uint64_t v114 = *MEMORY[0x263EF8340];
  size_t v4 = a2;
  MEMORY[0x270FA5388](a1);
  size_t v5 = (char *)v95 - ((v4 + 15) & 0x1FFFFFFF0);
  bzero(v5, v4);
  int32x4_t v6 = *(int32x4_t *)(a1 + 32);
  *size_t v5 = 0;
  uint64_t v7 = a2 - 2;
  if (a2 < 2)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    LODWORD(v8) = 0;
    LOBYTE(v9) = 0;
    float32x2_t v10 = (float32x2_t)vdup_laneq_s32(v6, 3);
    uint64_t v11 = (int32x2_t *)(a1 + 96);
    uint64_t v12 = 1;
    do
    {
      v5[v12] = v12;
      float32x2_t v13 = (float32x2_t)vdup_lane_s32(v11[1], 1);
      unsigned __int8 v14 = vcgt_f32(v10, v13).u8[0];
      if (v14) {
        unsigned int v15 = -1;
      }
      else {
        unsigned int v15 = 0;
      }
      float32x2_t v10 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v15), (int8x8_t)v13, (int8x8_t)v10);
      if (v14)
      {
        LOBYTE(v9) = v12;
        uint64_t v8 = v12;
      }
      else
      {
        uint64_t v8 = v8;
      }
      ++v12;
      v11 += 8;
    }
    while (v4 != v12);
    uint64_t v9 = v9;
  }
  uint64_t v16 = a2 - 1;
  v5[v8] = v5[v16];
  uint64_t v17 = a1 + (v9 << 6);
  float32x4_t v18 = *(float32x4_t *)(v17 + 16);
  v95[0] = *(_OWORD *)v17;
  v95[1] = v18;
  int8x16_t v96 = *(int8x16_t *)(v17 + 32);
  v97[0] = *(_DWORD *)(v17 + 48);
  uint64_t v19 = *v5;
  if (v16 < 2)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    LODWORD(v20) = 0;
    float32x4_t v21 = vsubq_f32(*(float32x4_t *)(a1 + (v19 << 6) + 16), v18);
    float32x4_t v22 = vmulq_f32(v21, v21);
    v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
    float32x2_t v23 = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
    float32x4_t v24 = *(float32x4_t *)(v17 + 16);
    for (uint64_t i = 1; i != v16; ++i)
    {
      float32x4_t v26 = vsubq_f32(*(float32x4_t *)(a1 + ((unint64_t)v5[i] << 6) + 16), v24);
      float32x4_t v27 = vmulq_f32(v26, v26);
      v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
      float32x2_t v28 = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32);
      unsigned __int8 v29 = vcgt_f32(v28, v23).u8[0];
      if (v29) {
        unsigned int v30 = -1;
      }
      else {
        unsigned int v30 = 0;
      }
      float32x2_t v23 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v30), (int8x8_t)v28, (int8x8_t)v23);
      if (v29)
      {
        LOBYTE(v19) = v5[i];
        LODWORD(v20) = i;
      }
    }
  }
  uint64_t v31 = v20;
  v5[v20] = v5[v7];
  float32x4_t v32 = (long long *)(a1 + ((unint64_t)v19 << 6));
  float32x4_t v33 = (float32x4_t)v32[1];
  long long v98 = *v32;
  float32x4_t v99 = v33;
  long long v100 = v32[2];
  int v101 = *((_DWORD *)v32 + 12);
  int8x16_t v34 = v96;
  v34.i32[3] = 0;
  int8x16_t v35 = (int8x16_t)vsubq_f32(v99, v18);
  float32x2_t v36 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
  int8x8_t v37 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.i8, (float32x2_t)vext_s8(*(int8x8_t *)v96.i8, (int8x8_t)v36, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), *(float32x2_t *)v96.i8);
  *(int8x8_t *)v38.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(float32x2_t *)v96.i8), *(float32x2_t *)v35.i8, v36), 4uLL);
  v38.i64[1] = v37.u32[0];
  float32x2_t v39 = vpadd_f32(vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32), vmul_f32((float32x2_t)v37.u32[0], (float32x2_t)v37.u32[0]));
  float32x2_t v40 = vpadd_f32(v39, v39);
  int32x2_t v41 = (int32x2_t)vand_s8((int8x8_t)vcgtz_f32(v40), (int8x8_t)0x100000001);
  float32x2_t v42 = vrsqrte_f32(v40);
  int v43 = 4;
  do
  {
    float32x2_t v42 = vmul_f32(v42, vrsqrts_f32(vmul_f32(v42, v42), v40));
    --v43;
  }
  while (v43);
  __asm { FMOV            V7.2S, #1.0 }
  float32x2_t v49 = vmul_f32(v40, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v40), 0), _D7, (int8x8_t)v42));
  float32x2_t v50 = vrecpe_f32(v49);
  int v51 = 4;
  do
  {
    float32x2_t v50 = vmul_f32(v50, vrecps_f32(v49, v50));
    --v51;
  }
  while (v51);
  int8x16_t v52 = (int8x16_t)vmulq_n_f32(v38, v50.f32[0]);
  v52.i32[3] = 0;
  float32x4_t v53 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(v41, 0), 0x1FuLL)), v52, v34);
  if (a2 == 2)
  {
    unsigned __int32 v68 = 127;
    unsigned __int8 v58 = -1;
    uint64_t v67 = 255;
    int v57 = -1;
  }
  else
  {
    uint64_t v54 = 0;
    float32x2_t v55 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    float32x2_t v56 = (float32x2_t)0x80000000800000;
    int v57 = -1;
    unsigned __int8 v58 = -1;
    unsigned __int8 v59 = -1;
    do
    {
      float32x4_t v60 = vmulq_f32(v53, vsubq_f32(*(float32x4_t *)(a1 + ((unint64_t)v5[v54] << 6) + 16), v18));
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      float32x2_t v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
      unsigned __int8 v62 = vcgt_f32(v61, v56).u8[0];
      if (v62)
      {
        unsigned __int8 v59 = v5[v54];
        uint64_t v20 = v54;
      }
      else
      {
        uint64_t v20 = v20;
      }
      if (v62) {
        unsigned int v63 = -1;
      }
      else {
        unsigned int v63 = 0;
      }
      int8x8_t v64 = (int8x8_t)vdup_n_s32(v63);
      unsigned __int8 v65 = vcgt_f32(v55, v61).u8[0];
      if (v65) {
        unsigned int v66 = -1;
      }
      else {
        unsigned int v66 = 0;
      }
      float32x2_t v56 = (float32x2_t)vbsl_s8(v64, (int8x8_t)v61, (int8x8_t)v56);
      float32x2_t v55 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v66), (int8x8_t)v61, (int8x8_t)v55);
      if (v65)
      {
        unsigned __int8 v58 = v5[v54];
        int v57 = v54;
      }
      ++v54;
    }
    while (v7 != v54);
    uint64_t v67 = v59;
    unsigned __int32 v68 = vmul_f32(v56, v55).u32[0];
    uint64_t v31 = v20;
  }
  unsigned int v69 = (long long *)(a1 + (v67 << 6));
  long long v70 = v69[1];
  long long v102 = *v69;
  long long v103 = v70;
  long long v104 = v69[2];
  int v105 = *((_DWORD *)v69 + 12);
  uint64_t v71 = a2 - 3;
  v5[v31] = v5[v71];
  if (v71 == v57) {
    int v72 = v20;
  }
  else {
    int v72 = v57;
  }
  if (a2 != 3 && *(float *)&v68 > 0.0)
  {
    uint64_t v73 = 0;
    float32x2_t v74 = (float32x2_t)0x80000000800000;
    do
    {
      float32x4_t v75 = vmulq_f32(v53, vsubq_f32(*(float32x4_t *)(a1 + ((unint64_t)v5[v73] << 6) + 16), v18));
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      float32x2_t v76 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
      unsigned __int8 v77 = vcgt_f32(v76, v74).u8[0];
      if (v77) {
        unsigned int v78 = -1;
      }
      else {
        unsigned int v78 = 0;
      }
      float32x2_t v74 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v78), (int8x8_t)v76, (int8x8_t)v74);
      if (v77)
      {
        unsigned __int8 v58 = v5[v73];
        int v72 = v73;
      }
      ++v73;
    }
    while (v71 != v73);
  }
  float32x2_t v79 = (long long *)(a1 + ((unint64_t)v58 << 6));
  long long v80 = v79[1];
  long long v106 = *v79;
  long long v107 = v80;
  long long v108 = v79[2];
  int v109 = *((_DWORD *)v79 + 12);
  uint64_t v81 = a2 - 4;
  v5[v72] = v5[v81];
  if (a2 == 4)
  {
    uint64_t v88 = 255;
  }
  else
  {
    float32x2_t v82 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    unsigned __int8 v83 = -1;
    do
    {
      unsigned int v85 = *v5++;
      unsigned __int8 v84 = v85;
      float32x2_t v86 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a1 + ((unint64_t)v85 << 6) + 40), 1);
      if (vcgt_f32(v82, v86).u8[0])
      {
        unsigned __int8 v83 = v84;
        unsigned int v87 = -1;
      }
      else
      {
        unsigned int v87 = 0;
      }
      float32x2_t v82 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v87), (int8x8_t)v86, (int8x8_t)v82);
      --v81;
    }
    while (v81);
    uint64_t v88 = v83;
  }
  unint64_t v89 = 0;
  float32x4_t v90 = (long long *)(a1 + (v88 << 6));
  long long v91 = v90[1];
  long long v110 = *v90;
  long long v111 = v91;
  long long v112 = v90[2];
  int v113 = *((_DWORD *)v90 + 12);
  do
  {
    uint64_t v92 = a1 + v89 * 4;
    long long v93 = v95[v89 / 4 + 1];
    *(_OWORD *)uint64_t v92 = v95[v89 / 4];
    *(_OWORD *)(v92 + 16) = v93;
    *(_OWORD *)(v92 + 32) = v95[v89 / 4 + 2];
    *(_DWORD *)(v92 + 48) = v97[v89];
    v89 += 16;
  }
  while (v89 != 80);
  return 5;
}

float32x2_t physx::Gu::SinglePersistentContactManifold::refreshContactPoints(uint64_t a1, float32x4_t *a2, float32x2_t *a3)
{
  int v3 = *(_DWORD *)(a1 + 384);
  if (v3)
  {
    float32x2_t v4 = vmul_f32(*a3, *a3);
    unsigned int v5 = v3 - 1;
    float32x2_t result = 0;
    do
    {
      uint64_t v7 = v5;
      uint64_t v8 = (float32x4_t *)(a1 + ((unint64_t)v5 << 6));
      float32x4_t v9 = v8[1];
      float32x4_t v10 = vmulq_n_f32(*a2, COERCE_FLOAT(*v8));
      v10.i32[3] = 0;
      float32x4_t v11 = vmulq_lane_f32(a2[1], *(float32x2_t *)v8->f32, 1);
      v11.i32[3] = 0;
      float32x4_t v12 = vmulq_laneq_f32(a2[2], *v8, 2);
      v12.i32[3] = 0;
      float32x4_t v13 = vaddq_f32(a2[3], vaddq_f32(vaddq_f32(v10, v11), v12));
      float32x4_t v14 = v8[2];
      float32x4_t v15 = v14;
      v15.i32[3] = 0;
      float32x4_t v16 = vmulq_f32(v15, vsubq_f32(v13, v9));
      v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
      float32x2_t v17 = vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
      float32x4_t v18 = vmlsq_lane_f32(v13, v15, v17, 0);
      v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
      float32x4_t v19 = vsubq_f32(v9, v18);
      float32x4_t v20 = vmulq_f32(v19, v19);
      v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), v4), 0), (int8x8_t)result).u32[0] == -1)
      {
        uint64_t v21 = (*(_DWORD *)(a1 + 384) - 1);
        *(_DWORD *)(a1 + 384) = v21;
        float32x4_t v22 = (float32x4_t *)(a1 + (v21 << 6));
        float32x4_t v23 = *v22;
        float32x4_t v24 = v22[1];
        float32x4_t v25 = v22[2];
        v8[3].i32[0] = v22[3].i32[0];
        v8[1] = v24;
        v8[2] = v25;
        *uint64_t v8 = v23;
      }
      else
      {
        v14.i32[3] = v17.i32[1];
        v8[2] = v14;
        float32x2_t result = vmin_f32(result, v17);
      }
      --v5;
    }
    while (v7);
  }
  else
  {
    return 0;
  }
  return result;
}

void physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4, unsigned int a5, uint64_t a6, void *a7, int a8)
{
  int v8 = a8;
  if (*(unsigned char *)(a1 + 62))
  {
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    float32x4_t v75 = &v72;
    int32x2_t v76 = vdup_n_s32(0x7F7FFFFFu);
    if (!a5) {
      return;
    }
    float32x4_t v12 = a7;
    uint64_t v13 = 0;
    uint64_t v67 = a1 + 64;
    __asm { FMOV            V8.2S, #1.0 }
    uint64_t v19 = a5;
    uint64_t v70 = a5;
    while (1)
    {
      uint64_t v20 = a4[v13];
      if (*(void *)(v20 + 32) == v20)
      {
        uint64_t v21 = *(unsigned __int8 *)(a1 + 62);
        if (*(unsigned char *)(a1 + 62))
        {
          uint64_t v22 = 0;
          do
          {
            float32x4_t v23 = (unsigned __int8 *)(a1 + v22 + 56);
            float32x4_t v24 = (float32x4_t *)(a1 + 400 * *v23);
            float32x4_t v25 = v24[6];
            uint64_t v26 = v24[28].u32[0];
            if (v26 >= 2)
            {
              uint64_t v27 = v26 - 1;
              float32x2_t v28 = (float32x4_t *)(a1 + 160 + 400 * *(unsigned __int8 *)(a1 + v22 + 56));
              do
              {
                float32x4_t v29 = *v28;
                v28 += 4;
                float32x4_t v25 = vaddq_f32(v25, v29);
                --v27;
              }
              while (v27);
            }
            uint64_t v30 = (uint64_t)&v24[4];
            v25.i32[3] = 0;
            uint64_t v31 = v24 + 28;
            float32x4_t v32 = vmulq_f32(v25, v25);
            v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
            float32x2_t v33 = vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32);
            float32x2_t v34 = vrsqrte_f32(v33);
            int v35 = 4;
            do
            {
              float32x2_t v34 = vmul_f32(v34, vrsqrts_f32(vmul_f32(v34, v34), v33));
              --v35;
            }
            while (v35);
            float32x2_t v36 = vmul_f32(v33, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v33), 0), _D8, (int8x8_t)v34));
            float32x2_t v37 = vrecpe_f32(v36);
            int v38 = 4;
            do
            {
              float32x2_t v37 = vmul_f32(v37, vrecps_f32(v36, v37));
              --v38;
            }
            while (v38);
            float32x4_t v39 = vmulq_n_f32(v25, v37.f32[0]);
            v39.i32[3] = 0;
            float32x4_t v40 = vmulq_f32(*(float32x4_t *)v20, v39);
            v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
            if (vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32).f32[0] >= COERCE_FLOAT(*v12))
            {
              if (v26)
              {
                unint64_t v43 = 0;
                uint64_t v44 = (long long *)(v67 + 400 * *(unsigned __int8 *)(a1 + v22 + 56));
                do
                {
                  unint64_t v45 = a2 + ((unint64_t)(a3 + v43) << 6);
                  long long v46 = *v44;
                  long long v47 = v44[1];
                  long long v48 = v44[2];
                  *(_DWORD *)(v45 + 48) = *((_DWORD *)v44 + 12);
                  *(_OWORD *)(v45 + 16) = v47;
                  *(_OWORD *)(v45 + 32) = v48;
                  *(_OWORD *)unint64_t v45 = v46;
                  ++v43;
                  unint64_t v49 = v31->u32[0];
                  v44 += 4;
                }
                while (v43 < v49);
              }
              else
              {
                LODWORD(v49) = 0;
              }
              unsigned int v77 = a3;
              int v78 = v49 + a3;
              float32x4_t v72 = v39;
              float32x4_t v75 = (_OWORD *)v20;
              uint64_t v73 = 0;
              *(void *)(*(void *)(v20 + 24) + 16) = &v72;
              *(_DWORD *)(v20 + 56) += v49;
              float32x2_t v50 = (const float *)(a1 + 32 + 4 * *v23);
              float32x2_t v51 = vld1_dup_f32(v50);
              *(float32x2_t *)(v20 + 40) = vmin_f32(*(float32x2_t *)(v20 + 40), v51);
              int v8 = a8;
              addBatchManifoldContactsToSingleManifold(v30, a2, v31->i32[0] + a3, v20, a8);
              *(_DWORD *)(a1 + 32 + 4 * *v23) = v52;
              float32x4_t v12 = a7;
              uint64_t v19 = v70;
              goto LABEL_26;
            }
            ++v22;
          }
          while (v22 != v21);
          if (v21 < 6) {
            goto LABEL_19;
          }
          uint64_t v57 = 0;
          unsigned int v58 = 0;
          uint64_t v59 = v21 - 1;
          do
          {
            float v60 = *(float *)(a1 + 32 + 4 * *(unsigned __int8 *)(a1 + 57 + v57++));
            if (v60 > *(float *)(a1 + 32 + 4 * *(unsigned __int8 *)(a1 + v58 + 56))) {
              unsigned int v58 = v57;
            }
          }
          while (v59 != v57);
          uint64_t v61 = a1 + v58;
          unsigned int v64 = *(unsigned __int8 *)(v61 + 56);
          unsigned int v63 = (unsigned __int8 *)(v61 + 56);
          unsigned int v62 = v64;
          if (*(float *)(a1 + 4 * v64 + 32) > COERCE_FLOAT(*(void *)(v20 + 40)))
          {
            uint64_t v65 = a1 + 400 * v62;
            *(_DWORD *)(v65 + 448) = 0;
            addBatchManifoldContactsToSingleManifold(v65 + 64, a2, a3, v20, v8);
            *(_DWORD *)(a1 + 4 * *v63 + 32) = v66;
          }
          return;
        }
        uint64_t v21 = 0;
LABEL_19:
        addBatchManifoldContactsToSingleManifold(a1 + 400 * *(unsigned __int8 *)(a1 + 56 + v21) + 64, a2, a3, v20, v8);
        uint64_t v19 = v70;
        uint64_t v41 = *(unsigned __int8 *)(a1 + 62);
        *(_DWORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 56 + v41) + 32) = v42;
        *(unsigned char *)(a1 + 62) = v41 + 1;
      }
LABEL_26:
      if (++v13 == v19) {
        return;
      }
    }
  }
  if (!a5) {
    return;
  }
  unsigned __int8 v53 = 0;
  uint64_t v54 = a5;
  do
  {
    if (*(void *)(*a4 + 32) == *a4)
    {
      if (v53 > 5u) {
        return;
      }
      addBatchManifoldContactsToSingleManifold(a1 + 400 * *(unsigned __int8 *)(a1 + 56 + v53) + 64, a2, a3, *a4, v8);
      uint64_t v55 = *(unsigned __int8 *)(a1 + 62);
      *(_DWORD *)(a1 + 4 * *(unsigned __int8 *)(a1 + 56 + v55) + 32) = v56;
      unsigned __int8 v53 = v55 + 1;
      *(unsigned char *)(a1 + 62) = v53;
    }
    ++a4;
    --v54;
  }
  while (v54);
}

void addBatchManifoldContactsToSingleManifold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 == 3)
  {
    if (*(_DWORD *)(a4 + 56) <= 3u)
    {
      unsigned int v19 = 0;
      uint64_t v20 = a4;
      do
      {
        unint64_t v21 = *(unsigned int *)(v20 + 48);
        if (v21 < *(_DWORD *)(v20 + 52))
        {
          unint64_t v22 = a2 + (v21 << 6);
          unsigned int v23 = v19;
          do
          {
            unsigned int v19 = v23 + 1;
            unint64_t v24 = a1 + ((unint64_t)v23 << 6);
            long long v25 = *(_OWORD *)v22;
            long long v26 = *(_OWORD *)(v22 + 16);
            long long v27 = *(_OWORD *)(v22 + 32);
            *(_DWORD *)(v24 + 48) = *(_DWORD *)(v22 + 48);
            *(_OWORD *)(v24 + 16) = v26;
            *(_OWORD *)(v24 + 32) = v27;
            *(_OWORD *)unint64_t v24 = v25;
            ++v21;
            v22 += 64;
            unsigned int v23 = v19;
          }
          while (v21 < *(unsigned int *)(v20 + 52));
        }
        uint64_t v20 = *(void *)(v20 + 16);
      }
      while (v20);
      goto LABEL_27;
    }
    physx::Gu::SinglePersistentContactManifold::reduceBatchContactsCapsule(a1, a2, a3, a4);
    int v18 = 3;
  }
  else
  {
    if (a5 == 1)
    {
      float32x2_t v6 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      int v7 = -1;
      do
      {
        uint64_t v8 = *(unsigned int *)(a4 + 48);
        uint64_t v9 = *(unsigned int *)(a4 + 52);
        if (v8 < v9)
        {
          float32x4_t v10 = (int32x2_t *)(a2 + 32 + (v8 << 6));
          do
          {
            float32x2_t v11 = (float32x2_t)vdup_lane_s32(v10[1], 1);
            unsigned __int8 v12 = vcgt_f32(v6, v11).u8[0];
            if (v12) {
              unsigned int v13 = -1;
            }
            else {
              unsigned int v13 = 0;
            }
            float32x2_t v6 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v13), (int8x8_t)v11, (int8x8_t)v6);
            if (v12) {
              int v7 = v8;
            }
            ++v8;
            v10 += 8;
          }
          while (v9 != v8);
        }
        a4 = *(void *)(a4 + 16);
      }
      while (a4);
      uint64_t v14 = a2 + ((uint64_t)v7 << 6);
      long long v15 = *(_OWORD *)v14;
      long long v16 = *(_OWORD *)(v14 + 16);
      long long v17 = *(_OWORD *)(v14 + 32);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(v14 + 48);
      *(_OWORD *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)a1 = v15;
      int v18 = 1;
      goto LABEL_30;
    }
    if (*(_DWORD *)(a4 + 56) <= 6u)
    {
      unsigned int v19 = 0;
      uint64_t v28 = a4;
      do
      {
        unint64_t v29 = *(unsigned int *)(v28 + 48);
        if (v29 < *(_DWORD *)(v28 + 52))
        {
          unint64_t v30 = a2 + (v29 << 6);
          unsigned int v31 = v19;
          do
          {
            unsigned int v19 = v31 + 1;
            unint64_t v32 = a1 + ((unint64_t)v31 << 6);
            long long v33 = *(_OWORD *)v30;
            long long v34 = *(_OWORD *)(v30 + 16);
            long long v35 = *(_OWORD *)(v30 + 32);
            *(_DWORD *)(v32 + 48) = *(_DWORD *)(v30 + 48);
            *(_OWORD *)(v32 + 16) = v34;
            *(_OWORD *)(v32 + 32) = v35;
            *(_OWORD *)unint64_t v32 = v33;
            ++v29;
            v30 += 64;
            unsigned int v31 = v19;
          }
          while (v29 < *(unsigned int *)(v28 + 52));
        }
        uint64_t v28 = *(void *)(v28 + 16);
      }
      while (v28);
LABEL_27:
      *(_DWORD *)(a1 + 384) = v19;
      return;
    }
    physx::Gu::SinglePersistentContactManifold::reduceBatchContactsConvex(a1, a2, a3, a4);
    int v18 = 6;
  }
LABEL_30:
  *(_DWORD *)(a1 + 384) = v18;
}

BOOL physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  *(unsigned char *)(a1 + 63) = 0;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 62);
  if (*(unsigned char *)(a1 + 62))
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v11.i64[0] = 0x4000000040000000;
    v11.i64[1] = 0x4000000040000000;
    do
    {
      unsigned int v12 = *(unsigned __int8 *)(a1 + v4 + 56);
      unsigned int v13 = (float32x4_t *)(a1 + 400 * *(unsigned __int8 *)(a1 + v4 + 56));
      unint64_t v14 = v13[28].u32[0];
      *(unsigned char *)(a1 + 63) += v14;
      float32x4_t v15 = v13[6];
      if (v14 >= 2)
      {
        unint64_t v16 = v14 - 1;
        long long v17 = (float32x4_t *)(a1 + 160 + 400 * v12);
        do
        {
          float32x4_t v18 = *v17;
          v17 += 4;
          float32x4_t v15 = vaddq_f32(v15, v18);
          --v16;
        }
        while (v16);
      }
      float32x4_t v19 = v15;
      v19.i32[3] = 0;
      float32x4_t v20 = *a3;
      v20.i32[3] = 0;
      float32x2_t v21 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a3, 3).u64[0];
      float32x4_t v22 = vmulq_n_f32(v19, vmla_f32((float32x2_t)0xBF000000BF000000, v21, v21).f32[0]);
      v22.i32[3] = 0;
      float32x2_t v23 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
      float32x2_t v24 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      int8x8_t v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->f32, (float32x2_t)vext_s8(*(int8x8_t *)v15.f32, (int8x8_t)v24, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a3->f32, (int8x8_t)v23, 4uLL), *(float32x2_t *)v15.f32);
      *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15.f32, v23), *(float32x2_t *)a3->f32, v24), 4uLL);
      v26.i64[1] = v25.u32[0];
      float32x4_t v27 = vmlaq_laneq_f32(v22, v26, *a3, 3);
      v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
      float32x4_t v28 = vmulq_f32(v19, v20);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      float32x4_t v29 = vmlaq_n_f32(v27, v20, vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
      float32x4_t v30 = vaddq_f32(v29, v29);
      v30.i32[3] = 0;
      float32x4_t v31 = vmulq_f32(v30, v30);
      v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
      float32x2_t v32 = vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32);
      float32x2_t v33 = vrsqrte_f32(v32);
      int v34 = 4;
      do
      {
        float32x2_t v33 = vmul_f32(v33, vrsqrts_f32(vmul_f32(v33, v33), v32));
        --v34;
      }
      while (v34);
      float32x2_t v35 = vmul_f32(v32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v32), 0), _D0, (int8x8_t)v33));
      float32x2_t v36 = vrecpe_f32(v35);
      int v37 = 4;
      do
      {
        float32x2_t v36 = vmul_f32(v36, vrecps_f32(v35, v36));
        --v37;
      }
      while (v37);
      if (v5 <= 0x3F && v14)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        float32x4_t v40 = vmulq_n_f32(v30, v36.f32[0]);
        v40.i32[3] = 0;
        uint64_t v41 = a1 + 400 * v12;
        do
        {
          float32x4_t v42 = *(float32x4_t *)(v41 + v38 + 80);
          float32x4_t v43 = *a3;
          v43.i32[3] = 0;
          float32x2_t v44 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a3, 3).u64[0];
          float32x4_t v45 = vmulq_n_f32(v42, vmla_f32((float32x2_t)0xBF000000BF000000, v44, v44).f32[0]);
          v45.i32[3] = 0;
          float32x2_t v46 = (float32x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
          float32x2_t v47 = (float32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
          int8x8_t v48 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->f32, (float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v47, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a3->f32, (int8x8_t)v46, 4uLL), *(float32x2_t *)v42.f32);
          *(int8x8_t *)v49.f32 = vext_s8(v48, (int8x8_t)vmls_f32(vmul_f32(v46, *(float32x2_t *)v42.f32), *(float32x2_t *)a3->f32, v47), 4uLL);
          v49.i64[1] = v48.u32[0];
          float32x4_t v50 = vmlaq_laneq_f32(v45, v49, *a3, 3);
          v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
          float32x4_t v51 = vmulq_f32(v43, v42);
          v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
          float32x4_t v52 = vmlaq_n_f32(v50, v43, vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0]);
          v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
          int8x16_t v53 = (int8x16_t)vmlaq_f32(a3[1], v11, v52);
          v53.i64[1] = vextq_s8(v53, v53, 8uLL).u32[0];
          uint64_t v54 = a2 + (v5 << 6) + v38;
          v51.i32[0] = *(_DWORD *)(v41 + v38 + 108);
          *(float32x4_t *)uint64_t v54 = v40;
          *(int8x16_t *)(v54 + 16) = v53;
          *(_DWORD *)(v54 + 12) = v51.i32[0];
          *(_DWORD *)(v54 + 52) = *(_DWORD *)(v41 + v38 + 112);
          int v55 = v39 + 1;
          if (v39 + 1 >= v14) {
            break;
          }
          unint64_t v56 = v5 + v39;
          v38 += 64;
          ++v39;
        }
        while (v56 < 0x3F);
        unint64_t v5 = (v5 + v55);
        unsigned int v3 = *(unsigned __int8 *)(a1 + 62);
      }
      ++v4;
    }
    while (v4 < v3);
  }
  else
  {
    unint64_t v5 = 0;
  }
  *(_DWORD *)(a2 + 4096) = v5;
  return v5 != 0;
}

uint64_t physx::Gu::MultiplePersistentContactManifold::fromBuffer(uint64_t this, unsigned __int8 *a2)
{
  if (!a2)
  {
    *(_OWORD *)this = xmmword_23435FBB0;
    *(_OWORD *)(this + 16) = xmmword_23441F6C0;
    goto LABEL_11;
  }
  uint64_t v2 = *((unsigned int *)a2 + 8);
  long long v3 = *((_OWORD *)a2 + 1);
  *(_OWORD *)this = *(_OWORD *)a2;
  *(_OWORD *)(this + 16) = v3;
  if (!v2)
  {
LABEL_11:
    LODWORD(v2) = 0;
    *(unsigned char *)(this + 62) = 0;
LABEL_12:
    uint64_t v2 = v2;
    do
    {
      *(unsigned char *)(this + 56 + v2) = v2;
      ++v2;
    }
    while (v2 != 6);
    return this;
  }
  uint64_t v4 = 0;
  unint64_t v5 = a2 + 48;
  float32x2_t v6 = (_DWORD *)(this + 112);
  do
  {
    *(unsigned char *)(this + v4 + 56) = v4;
    int v7 = v5 + 16;
    int v8 = *(_DWORD *)v5;
    uint64_t v9 = this + 400 * v4;
    *(_DWORD *)(v9 + 448) = *(_DWORD *)v5;
    if (v8)
    {
      unint64_t v10 = 0;
      float32x4_t v11 = (unsigned int *)(v9 + 448);
      unsigned int v12 = v5 + 28;
      unsigned int v13 = v6;
      do
      {
        long long v14 = *(_OWORD *)(v12 - 12);
        HIDWORD(v14) = 0;
        *((_OWORD *)v13 - 3) = v14;
        long long v15 = *(_OWORD *)(v12 + 4);
        HIDWORD(v15) = 0;
        *((_OWORD *)v13 - 2) = v15;
        *((_OWORD *)v13 - 1) = *(_OWORD *)(v12 + 20);
        int v16 = *(_DWORD *)v12;
        v12 += 48;
        *unsigned int v13 = v16;
        v13 += 16;
        ++v10;
      }
      while (v10 < *v11);
    }
    unint64_t v5 = &v7[48 * v8];
    ++v4;
    v6 += 100;
  }
  while (v4 != v2);
  *(unsigned char *)(this + 62) = v2;
  if (v2 <= 5) {
    goto LABEL_12;
  }
  return this;
}

uint64_t physx::Gu::addManifoldPoint(float32x4_t *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x2_t a5)
{
  float32x4_t v5 = vsubq_f32(*(float32x4_t *)a3, a4[3]);
  float32x4_t v6 = vmulq_f32(*a4, v5);
  float32x4_t v7 = vmulq_f32(v5, a4[1]);
  float32x4_t v8 = vmulq_f32(v5, a4[2]);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  float32x2_t v9 = (float32x2_t)vpaddq_f32(v7, v7).u64[0];
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  *(int8x8_t *)v6.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32), (int8x8_t)vpadd_f32(v9, v9), 4uLL);
  v6.i64[1] = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32).u32[0];
  float32x2_t v14 = a5;
  int32x4_t v10 = *(int32x4_t *)(a3 + 32);
  v10.i32[3] = HIDWORD(*(void *)(a3 + 64));
  int32x4_t v12 = v10;
  float32x4_t v13 = v6;
  *a1 = v6;
  a1[1] = *(float32x4_t *)(a3 + 16);
  a1[2] = (float32x4_t)v10;
  return physx::Gu::PersistentContactManifold::addManifoldPoint(a2, &v13, (long long *)(a3 + 16), &v12, &v14);
}

uint64_t physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMSphereVsHeightfieldContactGenerationCallback>::onEvent(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (a2 + 15 >= 0x10)
  {
    unsigned int v4 = a2;
    int v6 = 0;
    unsigned int v27 = (a2 + 15) >> 4;
    uint64_t v26 = a1 + 32;
    do
    {
      int v55 = 0;
      int v29 = v6;
      unsigned int v30 = v4;
      if (v4 >= 0x10) {
        int v7 = 16;
      }
      else {
        int v7 = v4;
      }
      int v28 = v7;
      if (v7)
      {
        int v32 = v7;
        do
        {
          int v8 = *a3;
          physx::Gu::HeightFieldUtil::getTriangle(*(void *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v42, (uint64_t)v53, (uint64_t)v52, *a3, 0, 0);
          float v9 = (float)((float)(v46 - v43) * (float)(v50 - v44)) - (float)((float)(v47 - v44) * (float)(v49 - v43));
          float v10 = (float)((float)(v47 - v44) * (float)(v48 - v42)) - (float)((float)(v45 - v42) * (float)(v50 - v44));
          float v11 = (float)((float)(v45 - v42) * (float)(v49 - v43)) - (float)((float)(v46 - v43) * (float)(v48 - v42));
          float v12 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
          float32x4_t v31 = a3 + 1;
          if (v12 > 0.0)
          {
            float v13 = 1.0 / v12;
            float v9 = v9 * v13;
            float v10 = v10 * v13;
            float v11 = v11 * v13;
          }
          uint64_t v14 = 0;
          int v15 = 0;
          --v32;
          do
          {
            unsigned int v16 = v52[v14];
            if (v16 == -1)
            {
              if (*(unsigned char *)(a1 + 24)) {
                int v24 = 8 << v14;
              }
              else {
                int v24 = 1 << v14;
              }
              v15 |= v24;
            }
            else
            {
              physx::Gu::HeightFieldUtil::getTriangle(*(void *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v33, (uint64_t)v51, 0, v16, 0, 0);
              float v17 = (float)((float)(v37 - v34) * (float)(v41 - v35)) - (float)((float)(v38 - v35) * (float)(v40 - v34));
              float v18 = (float)((float)(v38 - v35) * (float)(v39 - v33)) - (float)((float)(v36 - v33) * (float)(v41 - v35));
              float v19 = (float)((float)(v36 - v33) * (float)(v40 - v34)) - (float)((float)(v37 - v34) * (float)(v39 - v33));
              float32x4_t v20 = &v42 + 3 * byte_23442345E[v14];
              if ((float)((float)((float)(v18 * (float)(v20[1] - v34)) + (float)(v17 * (float)(*v20 - v33)))
                         + (float)(v19 * (float)(v20[2] - v35))) < 0.0)
              {
                float v21 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19));
                if (v21 > 0.0)
                {
                  float v22 = 1.0 / v21;
                  float v17 = v17 * v22;
                  float v18 = v18 * v22;
                  float v19 = v19 * v22;
                }
                int v23 = 8 << v14;
                if ((float)((float)((float)(v10 * v18) + (float)(v17 * v9)) + (float)(v19 * v11)) >= 0.997) {
                  int v23 = 0;
                }
                v15 |= v23;
              }
            }
            ++v14;
          }
          while (v14 != 3);
          physx::Gu::TriangleCache<16u>::addTriangle((uint64_t)v54, (uint64_t)&v42, v53, v8, v15);
          a3 = v31;
        }
        while (v32);
      }
      unsigned int v4 = v30 - v28;
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMSphereVsMeshContactGeneration>(v26, (uint64_t)v54);
      int v6 = v29 + 1;
    }
    while (v29 + 1 != v27);
  }
  return 1;
}

void physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMSphereVsHeightfieldContactGenerationCallback>::~PCMHeightfieldContactGenerationCallback()
{
}

BOOL physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMSphereVsMeshContactGeneration>(BOOL result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 848);
  if (v2)
  {
    unint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 576;
    do
    {
      float32x2_t result = physx::Gu::PCMSphereVsMeshContactGeneration::processTriangle(v4, a2 + v5, *(_DWORD *)(a2 + 4 * v6 + 768), *(unsigned __int8 *)(a2 + v6 + 832), (unsigned int *)(a2 + v7));
      ++v6;
      v7 += 12;
      v5 += 36;
    }
    while (v2 != v6);
  }
  return result;
}

uint64_t physx::Gu::PCMMeshContactGenerationCallback<physx::PCMSphereVsMeshContactGenerationCallback>::processHit(uint64_t a1, uint64_t a2, float32x2_t *a3, float *a4, float *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 32))
  {
    float32x2_t v37 = *a3;
    float v9 = a3[1].f32[0];
    float v39 = *a4;
    *(void *)&long long v10 = *(void *)(a4 + 1);
    *((void *)&v10 + 1) = *(void *)a5;
    long long v40 = v10;
    float v11 = a5[2];
    uint64_t v12 = 2;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    float v14 = *(float *)(v13 + 8);
    float v15 = a3->f32[0];
    float v16 = a3->f32[1];
    float v17 = *(float *)(v13 + 20);
    float v18 = a3[1].f32[0];
    float v19 = *(float *)(v13 + 32);
    float v9 = (float)((float)(a3->f32[0] * v14) + (float)(v16 * v17)) + (float)(v18 * v19);
    float v20 = *a4;
    float v21 = a4[1];
    float v22 = a4[2];
    BOOL v23 = *(unsigned char *)(v13 + 72) == 0;
    uint64_t v24 = 24;
    if (!*(unsigned char *)(v13 + 72)) {
      uint64_t v24 = 12;
    }
    int8x8_t v25 = (float32x2_t *)((char *)&v37 + v24);
    *(float *)((char *)&v37 + v24 + 8) = (float)((float)(v14 * *a4) + (float)(v17 * v21)) + (float)(v19 * v22);
    float v26 = *a5;
    float v27 = a5[1];
    float v28 = (float)(v14 * *a5) + (float)(v17 * v27);
    float v29 = a5[2];
    float v11 = v28 + (float)(v19 * v29);
    uint64_t v12 = 1;
    if (v23) {
      uint64_t v12 = 2;
    }
    float32x2_t v30 = *(float32x2_t *)v13;
    float32x2_t v31 = *(float32x2_t *)(v13 + 12);
    float32x2_t v32 = *(float32x2_t *)(v13 + 24);
    float32x2_t v37 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v13, v15), vmul_n_f32(v31, v16)), vmul_n_f32(v32, v18));
    *int8x8_t v25 = vadd_f32(vadd_f32(vmul_n_f32(v30, v20), vmul_n_f32(v31, v21)), vmul_n_f32(v32, v22));
    *(float32x2_t *)((char *)&v37 + 12 * v12) = vadd_f32(vadd_f32(vmul_n_f32(v30, v26), vmul_n_f32(v31, v27)), vmul_n_f32(v32, v29));
  }
  float v38 = v9;
  *((float *)&v37 + 3 * v12 + 2) = v11;
  uint64_t v33 = *(unsigned int *)(a2 + 16);
  uint64_t v34 = *(void *)(a1 + 24);
  if (v34) {
    char v35 = *(unsigned char *)(v34 + v33);
  }
  else {
    char v35 = 56;
  }
  if (*(_DWORD *)(a1 + 884) == 16)
  {
    physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMSphereVsMeshContactGeneration>(a1 + 896, a1 + 36);
    *(_DWORD *)(a1 + 884) = 0;
  }
  physx::Gu::TriangleCache<16u>::addTriangle(a1 + 36, (uint64_t)&v37, a7, v33, v35);
  return 1;
}

BOOL physx::Gu::sweepBoxTriangle(uint64_t a1, uint64_t a2, float32x2_t *a3, float *a4, float32x2_t *a5, float32x2_t *a6, unsigned __int32 *a7, char a8, double a9, double a10, double a11, __n128 a12, double a13, double a14, double a15, __n128 a16)
{
  uint64_t v227 = *MEMORY[0x263EF8340];
  float v19 = *(float *)(a1 + 20);
  float v20 = *(float *)(a1 + 8);
  float32x2_t v21 = *(float32x2_t *)(a1 + 12);
  float32x2_t v22 = *(float32x2_t *)a1;
  _D17 = vsub_f32(v21, *(float32x2_t *)a1);
  a16.n128_u64[0] = *(void *)(a1 + 24);
  float32x2_t v24 = vsub_f32((float32x2_t)a16.n128_u64[0], *(float32x2_t *)a1);
  float v25 = *(float *)(a1 + 32);
  _S1 = v25 - v20;
  __asm { FMLA            S0, S1, V17.S[1] }
  float v30 = vmlas_n_f32(-(float)(_D17.f32[0] * (float)(v25 - v20)), v19 - v20, v24.f32[0]);
  float v31 = vmlas_n_f32((float)-_D17.f32[1] * v24.f32[0], v24.f32[1], _D17.f32[0]);
  if ((a8 & 1) == 0
    && (float)((float)((float)(v30 * a3->f32[1]) + (float)(_S0 * a3->f32[0])) + (float)(v31 * a3[1].f32[0])) >= 0.0)
  {
    return 0;
  }
  uint64_t v32 = 0;
  *(void *)&long long v33 = *(void *)a2;
  int v223 = HIDWORD(*(void *)a2);
  uint64_t v213 = v33;
  unsigned int v34 = *(_DWORD *)(a2 + 8);
  __int32 v35 = *(_DWORD *)(a2 + 12);
  v16.i64[0] = *(void *)(a2 + 16);
  int32x2_t v36 = vzip1_s32(*(int32x2_t *)&v33, *(int32x2_t *)v16.i8);
  uint64_t v220 = v33;
  int v225 = v33;
  LODWORD(v33) = v35;
  *((void *)&v33 + 1) = __PAIR64__(v35, v34);
  unsigned int v214 = v34;
  long long v215 = v33;
  int32x2_t v218 = v36;
  unsigned int v219 = v34;
  __int32 v222 = v35;
  __int32 v216 = v16.i32[0];
  unsigned int v217 = v34;
  __int32 v221 = v16.i32[1];
  int32x4_t v37 = vuzp2q_s32(v16, vzip1q_s32(v16, v16));
  int32x4_t v38 = v37;
  v38.i32[1] = v35;
  v38.i32[3] = v37.i32[0];
  int32x4_t v224 = v38;
  uint64_t v226 = v16.i64[0];
  float32x2_t v207 = v22;
  float v208 = v20;
  float32x2_t v209 = v21;
  float v210 = v19;
  unint64_t v211 = a16.n128_u64[0];
  float v212 = v25;
  float v39 = v19 + v20;
  float32x2_t v40 = vadd_f32(vadd_f32(v21, v22), (float32x2_t)a16.n128_u64[0]);
  float v41 = v39 + v25;
  a12.n128_u64[0] = (unint64_t)vmul_f32(v40, (float32x2_t)vdup_n_s32(0x3EAAAAABu));
  float32x2_t v42 = (float32x2_t)vdup_n_s32(0x3CA3D70Au);
  do
  {
    float v43 = (float32x2_t *)((char *)&v207 + v32);
    float v44 = *(float *)((char *)&v207 + v32 + 8);
    *float v43 = vadd_f32(*(float32x2_t *)((char *)&v207 + v32), vmul_f32(vsub_f32(*(float32x2_t *)((char *)&v207 + v32), (float32x2_t)a12.n128_u64[0]), v42));
    v43[1].f32[0] = v44 + (float)((float)(v44 - (float)(v41 * 0.33333)) * 0.02);
    v32 += 12;
  }
  while (v32 != 36);
  a12.n128_u32[0] = *a7;
  __n128 v200 = a12;
  float v45 = v209.f32[0] - v207.f32[0];
  float v46 = v209.f32[1] - v207.f32[1];
  float v47 = v210 - v208;
  float v48 = *(float *)&v211 - v207.f32[0];
  float v49 = *((float *)&v211 + 1) - v207.f32[1];
  _S24 = v212 - v208;
  float v51 = a3[1].f32[0];
  float v52 = -v51;
  _D19 = *a3;
  __asm { FMLA            S25, S24, V19.S[1] }
  float v55 = -COERCE_FLOAT(*a3);
  float v56 = (float)(v51 * (float)(*(float *)&v211 - v207.f32[0])) - (float)(COERCE_FLOAT(*a3) * (float)(v212 - v208));
  float v57 = -COERCE_FLOAT(HIDWORD(*(unint64_t *)a3));
  float v58 = vmlas_n_f32(-(float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)a3)) * (float)(*(float *)&v211 - v207.f32[0])), *((float *)&v211 + 1) - v207.f32[1], COERCE_FLOAT(*a3));
  float v59 = (float)((float)((float)(v209.f32[1] - v207.f32[1]) * v56) + (float)((float)(v209.f32[0] - v207.f32[0]) * _S25))
      + (float)((float)(v210 - v208) * v58);
  float v60 = 1.0 / v59;
  v17.n128_u32[1] = 0;
  if (v59 == 0.0) {
    float v60 = 0.0;
  }
  if (a8)
  {
    if (v59 > -0.00001 && v59 < 0.00001) {
      goto LABEL_50;
    }
    uint64_t v61 = 0;
    unsigned int v62 = 0;
    unsigned int v63 = (float *)&v214;
    int v64 = -1;
    do
    {
      float v65 = *(v63 - 2) - v207.f32[0];
      float v66 = *(v63 - 1) - v207.f32[1];
      float v67 = *v63 - v208;
      float v68 = v60 * (float)((float)((float)(v56 * v66) + (float)(v65 * _S25)) + (float)(v67 * v58));
      if (v68 >= 0.0 && v68 <= 1.0)
      {
        float v70 = (float)(v66 * v47) - (float)(v67 * v46);
        float v71 = (float)(v67 * v45) - (float)(v65 * v47);
        float v72 = (float)(v65 * v46) - (float)(v66 * v45);
        float v73 = v60 * (float)((float)((float)(_D19.f32[1] * v71) + (float)(_D19.f32[0] * v70)) + (float)(v51 * v72));
        float v74 = v68 + v73;
        if (v73 >= 0.0 && v74 <= 1.0)
        {
          v17.n128_f32[0] = v60 * (float)((float)((float)(v49 * v71) + (float)(v48 * v70)) + (float)(_S24 * v72));
          if (v17.n128_f32[0] >= 0.0 && v17.n128_f32[0] <= v200.n128_f32[0])
          {
            int v64 = 0;
            unsigned int v62 = v61;
            __n128 v200 = v17;
          }
        }
      }
      ++v61;
      v63 += 3;
    }
    while (v61 != 8);
  }
  else
  {
    if (v59 < 0.00001) {
      goto LABEL_50;
    }
    uint64_t v77 = 0;
    unsigned int v62 = 0;
    int v78 = (float *)&v214;
    int v64 = -1;
    float32x2_t v79 = (float *)&dword_234423544;
    do
    {
      if ((float)((float)((float)(v30 * *(v79 - 1)) + (float)(*(v79 - 2) * _S0)) + (float)(*v79 * v31)) < 0.0)
      {
        float v80 = *(v78 - 2) - v207.f32[0];
        float v81 = *(v78 - 1) - v207.f32[1];
        float v82 = *v78 - v208;
        float v83 = (float)((float)(v56 * v81) + (float)(v80 * _S25)) + (float)(v82 * v58);
        if (v83 >= 0.0 && v83 <= v59)
        {
          float v85 = (float)(v81 * v47) - (float)(v82 * v46);
          float v86 = (float)(v82 * v45) - (float)(v80 * v47);
          float v87 = (float)(v80 * v46) - (float)(v81 * v45);
          float v88 = (float)((float)(_D19.f32[1] * v86) + (float)(_D19.f32[0] * v85)) + (float)(v51 * v87);
          float v89 = v83 + v88;
          if (v88 >= 0.0 && v89 <= v59)
          {
            v17.n128_f32[0] = v60 * (float)((float)((float)(v49 * v86) + (float)(v48 * v85)) + (float)(_S24 * v87));
            if (v17.n128_f32[0] >= 0.0 && v17.n128_f32[0] <= v200.n128_f32[0])
            {
              int v64 = 0;
              unsigned int v62 = v77;
              __n128 v200 = v17;
            }
          }
        }
      }
      ++v77;
      v79 += 3;
      v78 += 3;
    }
    while (v77 != 8);
  }
  if (!v64)
  {
    int v197 = (float32x2_t *)((char *)&v213 + 12 * v62);
    float32_t v198 = (float)(v51 * v200.n128_f32[0]) + v197[1].f32[0];
    *a5 = vadd_f32(vmul_n_f32(_D19, v200.n128_f32[0]), *v197);
    a5[1].f32[0] = v198;
    a6->f32[0] = _S0;
    a6->f32[1] = v30;
    a6[1].f32[0] = v31;
    float v55 = -a3->f32[0];
    float v57 = -a3->f32[1];
    float v52 = -a3[1].f32[0];
    goto LABEL_51;
  }
LABEL_50:
  int v64 = -1;
LABEL_51:
  uint64_t v92 = 0;
  float v93 = -*a4;
  float v94 = -a4[1];
  float v95 = -a4[2];
  float v96 = fabsf(v55);
  float v97 = fabsf(v57);
  float v98 = fabsf(v52);
  int v99 = 872415232;
  do
  {
    if (v96 >= 0.00000011921
      || ((a16.n128_u32[0] = *(_DWORD *)(a1 + v92), a16.n128_f32[0] >= *(float *)a2)
        ? (BOOL v100 = a16.n128_f32[0] <= *(float *)(a2 + 12))
        : (BOOL v100 = 0),
          v100))
    {
      if (v97 >= 0.00000011921
        || ((a16.n128_u32[0] = *(_DWORD *)(a1 + v92 + 4), a16.n128_f32[0] >= *(float *)(a2 + 4))
          ? (BOOL v101 = a16.n128_f32[0] <= *(float *)(a2 + 16))
          : (BOOL v101 = 0),
            v101))
      {
        a16.n128_u32[0] = *(_DWORD *)(a2 + 8);
        float v102 = *(float *)(a1 + v92 + 8);
        if (v98 >= 0.00000011921)
        {
          float v103 = *(float *)(a2 + 20);
        }
        else
        {
          float v103 = *(float *)(a2 + 20);
          if (v102 < a16.n128_f32[0] || v102 > v103) {
            goto LABEL_128;
          }
        }
        float v105 = *(float *)(a1 + v92);
        float v106 = (float)(*(float *)a2 - v105) * v93;
        float v107 = (float)(*(float *)(a2 + 12) - v105) * v93;
        float v108 = (float)(a16.n128_f32[0] - v102) * v95;
        float v109 = (float)(v103 - v102) * v95;
        if (v106 <= v107) {
          int v110 = 0;
        }
        else {
          int v110 = 3;
        }
        if (v106 <= v107) {
          float v111 = v107;
        }
        else {
          float v111 = v106;
        }
        if (v106 > v107) {
          float v106 = v107;
        }
        BOOL v112 = v108 <= v109;
        if (v108 <= v109) {
          float v113 = v108;
        }
        else {
          float v113 = v109;
        }
        if (v108 <= v109) {
          float v108 = v109;
        }
        if (v112) {
          unsigned int v114 = 2;
        }
        else {
          unsigned int v114 = 5;
        }
        float v115 = -3.4028e38;
        if (v96 >= 0.00000011921) {
          float v115 = v106;
        }
        float v116 = 3.4028e38;
        if (v96 < 0.00000011921) {
          int v110 = -1;
        }
        else {
          float v116 = v111;
        }
        if (v97 >= 0.00000011921)
        {
          float v117 = *(float *)(a1 + v92 + 4);
          float v118 = (float)(*(float *)(a2 + 4) - v117) * v94;
          float v119 = (float)(*(float *)(a2 + 16) - v117) * v94;
          if (v118 <= v119) {
            int v120 = 1;
          }
          else {
            int v120 = 4;
          }
          if (v118 <= v119) {
            float v121 = v119;
          }
          else {
            float v121 = v118;
          }
          if (v118 > v119) {
            float v118 = v119;
          }
          if (v118 > v115)
          {
            float v115 = v118;
            int v110 = v120;
          }
          if (v116 >= v121) {
            float v116 = v121;
          }
        }
        if (v113 <= v115)
        {
          float v113 = v115;
          unsigned int v114 = v110;
        }
        if (v116 < v108) {
          float v108 = v116;
        }
        if (v98 < 0.00000011921)
        {
          a16.n128_f32[0] = v115;
        }
        else
        {
          float v116 = v108;
          a16.n128_f32[0] = v113;
        }
        if (v98 < 0.00000011921) {
          unsigned int v114 = v110;
        }
        if (a16.n128_f32[0] > v116 || v116 < 0.00000011921) {
          unsigned int v114 = -1;
        }
        if (a16.n128_f32[0] >= 0.0 && v114 != -1 && a16.n128_f32[0] <= v200.n128_f32[0])
        {
          *a6 = *(float32x2_t *)v125;
          a6[1].i32[0] = *((_DWORD *)v125 + 2);
          *a5 = *(float32x2_t *)(a1 + v92);
          a5[1].i32[0] = *(_DWORD *)(a1 + v92 + 8);
          int v64 = 1;
          __n128 v200 = a16;
        }
      }
    }
LABEL_128:
    v92 += 12;
  }
  while (v92 != 36);
  uint64_t v126 = 0;
  unsigned int v127 = -1;
  float32x4_t v128 = physx::Gu::getBoxEdges(void)::Indices;
  unsigned int v129 = -1;
  do
  {
    float32x2_t v130 = (float *)&v213 + 3 * *v128;
    float v131 = *v130;
    float v132 = v130[1];
    unint64_t v205 = __PAIR64__(LODWORD(v132), LODWORD(v131));
    float v133 = v130[2];
    unsigned __int32 v206 = LODWORD(v133);
    int8x16_t v134 = (float *)&v213 + 3 * v128[1];
    float v135 = *v134;
    float v136 = v134[1];
    float v137 = v134[2];
    float v138 = *v134 - v131;
    float v139 = v136 - v132;
    float v140 = v137 - v133;
    float v141 = sqrtf((float)((float)(v139 * v139) + (float)(v138 * v138)) + (float)(v140 * v140));
    if (v141 > 0.0)
    {
      float v142 = 0.01 / v141;
      float v143 = v138 * v142;
      float v144 = v139 * v142;
      float v145 = v140 * v142;
      float v131 = v131 - v143;
      float v132 = v132 - v144;
      unint64_t v205 = __PAIR64__(LODWORD(v132), LODWORD(v131));
      float v133 = v133 - v145;
      unsigned __int32 v206 = LODWORD(v133);
      float v135 = v135 + v143;
      float v136 = v136 + v144;
      float v137 = v137 + v145;
    }
    float v147 = a3->f32[0];
    float v146 = a3->f32[1];
    float v148 = a3[1].f32[0];
    {
      *(float *)&unint64_t v203 = v135 - v131;
      *((float *)&v203 + 1) = v136 - v132;
      float v204 = v137 - v133;
      float v149 = (float)((float)(v136 - v132) * v148) - (float)((float)(v137 - v133) * v146);
      float v150 = (float)((float)(v137 - v133) * v147) - (float)((float)(v135 - v131) * v148);
      float v151 = (float)((float)(v135 - v131) * v146) - (float)((float)(v136 - v132) * v147);
      float v152 = fabsf(v149);
      float v153 = fabsf(v150);
      float v154 = fabsf(v151);
      if (v153 <= v152 || v153 <= v154)
      {
        uint64_t v157 = v154 <= v152;
        if (v154 > v152) {
          uint64_t v156 = 1;
        }
        else {
          uint64_t v156 = 2;
        }
      }
      else
      {
        uint64_t v156 = 0;
        uint64_t v157 = 2;
      }
      uint64_t v158 = 0;
      float v159 = *((float *)&v203 + v157);
      float v160 = *((float *)&v203 + v156);
      float v161 = (float)((float)(v132 * v150) + (float)(v149 * v131)) + (float)(v151 * v133);
      float v162 = -v160;
      float v163 = 1.0 / (float)((float)(v159 * a3->f32[v156]) - (float)(v160 * a3->f32[v157]));
      float32x2_t v164 = (float *)(a1 + 8);
      do
      {
        float32x2_t v165 = (float *)(a1 + 12 * (((_BYTE)v158 + (v158 >> 1) + 1) & 3));
        float v166 = *(v164 - 2);
        float v167 = *(v164 - 1);
        float v168 = *v164;
        float v169 = (float)((float)((float)(v150 * v167) + (float)(v166 * v149)) + (float)(*v164 * v151)) - v161;
        float v170 = v165[1];
        float v171 = v165[2];
        if ((float)(v169
                   * (float)((float)((float)((float)(v150 * v170) + (float)(*v165 * v149)) + (float)(v171 * v151)) - v161)) <= 0.0)
        {
          float v172 = *v165 - v166;
          float v173 = v170 - v167;
          float v174 = v171 - v168;
          float v175 = (float)((float)(v150 * v173) + (float)(v149 * v172)) + (float)(v151 * v174);
          if (v175 != 0.0)
          {
            float v176 = v169 / v175;
            float v177 = v172 * v176;
            float v178 = v173 * v176;
            float v179 = v174 * v176;
            float v180 = v166 - v177;
            float v181 = v167 - v178;
            float v182 = v168 - v179;
            v201.f32[0] = v166 - v177;
            v201.f32[1] = v167 - v178;
            float v202 = v182;
            float v183 = v163
                 * (float)((float)((float)(v201.f32[v157] - *((float *)&v205 + v157)) * v162)
                         + (float)(v159 * (float)(v201.f32[v156] - *((float *)&v205 + v156))));
            if (v183 >= 0.0)
            {
              float v184 = v183 * a3->f32[0];
              float v185 = v183 * a3->f32[1];
              float v186 = v183 * a3[1].f32[0];
              float v187 = v180 - v184;
              float v188 = v181 - v185;
              float v189 = v182 - v186;
              __n128 v190 = v200;
              if ((float)((float)((float)((float)(v132 - v188) * (float)(v136 - v188))
                                 + (float)((float)(v131 - v187) * (float)(v135 - v187)))
                         + (float)((float)(v133 - v189) * (float)(v137 - v189))) < 0.0
                && v183 <= v200.n128_f32[0])
              {
                int v64 = 2;
                float v199 = v137 - v133;
                a5->f32[0] = v184 + v187;
                a5->f32[1] = v185 + v188;
                float v96 = v136 - v132;
                a16.n128_f32[0] = v133;
                int v99 = LODWORD(v132);
                float v98 = v135 - v131;
                a5[1].f32[0] = v186 + v189;
                float v97 = v131;
                v190.n128_f32[0] = v183;
                __n128 v200 = v190;
                unsigned int v129 = v158;
                unsigned int v127 = ((_BYTE)v158 + (v158 >> 1) + 1) & 3;
              }
            }
          }
        }
        ++v158;
        v164 += 3;
      }
      while (v158 != 3);
    }
    v128 += 2;
    ++v126;
  }
  while (v126 != 12);
  unsigned __int32 v206 = a16.n128_u32[0];
  float v204 = v199;
  unint64_t v205 = __PAIR64__(v99, LODWORD(v97));
  unint64_t v203 = __PAIR64__(LODWORD(v96), LODWORD(v98));
  BOOL v192 = v64 != -1;
  if (v64 != -1)
  {
    if (v64 == 2)
    {
      float32x4_t v193 = (float32x2_t *)(a1 + 12 * v129);
      float32x4_t v194 = (float32x2_t *)(a1 + 12 * v127);
      float v195 = v194[1].f32[0] - v193[1].f32[0];
      float32x2_t v201 = vsub_f32(*v194, *v193);
      float v202 = v195;
      physx::Gu::computeEdgeEdgeNormal(a6, (float32x2_t *)&v205, (float32x2_t *)&v203, v193, &v201, a3, v200.n128_f32[0]);
    }
    *a7 = v200.n128_u32[0];
  }
  return v192;
}

uint64_t physx::Gu::sweepBoxBox(uint64_t a1, uint64_t a2, float32x2_t *a3, _WORD *a4, uint64_t a5, float a6)
{
  uint64_t v177 = *MEMORY[0x263EF8340];
  if ((*a4 & 0x10) != 0
    || !physx::Gu::intersectOBBOBB((float *)(a1 + 48), (float *)(a1 + 36), (float *)a1, (float *)(a2 + 48), (float *)(a2 + 36), a2, 1))
  {
    physx::Gu::computeOBBPoints(v176, (float *)(a1 + 36), (float *)(a1 + 48), (float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
    physx::Gu::computeOBBPoints(v175, (float *)(a2 + 36), (float *)(a2 + 48), (float *)a2, (float *)(a2 + 12), (float *)(a2 + 24));
    uint64_t v15 = 0;
    float v16 = *(float *)(a1 + 48);
    float v17 = *(float *)(a1 + 52);
    float v18 = *(float *)(a1 + 56);
    v173.f32[0] = -v16;
    v173.f32[1] = -v17;
    float v174 = -v18;
    unint64_t v171 = __PAIR64__(LODWORD(v17), LODWORD(v16));
    float v172 = v18;
    float v19 = *(float *)(a1 + 4);
    float v20 = *(float *)(a1 + 8);
    float v21 = *(float *)(a1 + 12);
    float v22 = *(float *)(a1 + 16);
    float v23 = *(float *)(a1 + 20);
    float v24 = *(float *)(a1 + 24);
    float v25 = *(float *)(a1 + 28);
    float v27 = *(float *)(a1 + 32);
    float v26 = *(float *)(a1 + 36);
    float v28 = *(float *)(a1 + 40);
    float v29 = *(float *)(a1 + 44);
    float v140 = (float)((float)-(float)(v28 * v19) - (float)(*(float *)a1 * v26)) - (float)(v20 * v29);
    float v138 = (float)((float)-(float)(v28 * v25) - (float)(v24 * v26)) - (float)(v27 * v29);
    float v139 = (float)((float)-(float)(v28 * v22) - (float)(v21 * v26)) - (float)(v23 * v29);
    float v30 = a3->f32[1];
    float v154 = *(float *)a1;
    float v150 = v21;
    float v153 = v19;
    float v142 = v25;
    float v144 = v24;
    float v149 = v22;
    float v31 = (float)(*(float *)a1 * a3->f32[0]) + (float)(v19 * v30);
    float v32 = (float)(v21 * a3->f32[0]) + (float)(v22 * v30);
    float v33 = (float)(v24 * a3->f32[0]) + (float)(v25 * v30);
    float v34 = a3[1].f32[0];
    float v146 = v20;
    float v141 = v23;
    float v35 = v27;
    float v36 = -(float)(v31 + (float)(v20 * v34));
    float v37 = -(float)(v32 + (float)(v23 * v34));
    float v38 = -(float)(v33 + (float)(v27 * v34));
    int v39 = -1;
    do
    {
      LODWORD(v165) = 0;
      LODWORD(v163) = 0;
      float v41 = v175[v15];
      float v40 = v175[v15 + 1];
      float v42 = v175[v15 + 2];
      *(float *)&unint64_t v169 = v140 + (float)((float)((float)(v154 * v41) + (float)(v153 * v40)) + (float)(v146 * v42));
      *((float *)&v169 + 1) = v139 + (float)((float)((float)(v150 * v41) + (float)(v149 * v40)) + (float)(v141 * v42));
      float v170 = v138 + (float)((float)((float)(v144 * v41) + (float)(v142 * v40)) + (float)(v35 * v42));
      unint64_t v167 = __PAIR64__(LODWORD(v37), LODWORD(v36));
      float v168 = v38;
      int v43 = physx::Gu::intersectRayAABB((uint64_t)&v173, (uint64_t)&v171, (uint64_t)&v169, (uint64_t)&v167, (float *)&v165, (float *)&v163);
      if (v43 != -1)
      {
        float v44 = *(float *)&v165;
        if (*(float *)&v165 >= 0.0 && *(float *)&v165 <= a6)
        {
          int v39 = 0;
          float v47 = v46[1];
          float v48 = v46[2];
          float v49 = (float)((float)(*v46 * *(float *)(a1 + 8)) + (float)(v47 * *(float *)(a1 + 20)))
              + (float)(v48 * *(float *)(a1 + 32));
          *(float32x2_t *)(a5 + 36) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *v46), vmul_n_f32(*(float32x2_t *)(a1 + 12), v47)), vmul_n_f32(*(float32x2_t *)(a1 + 24), v48));
          *(float *)(a5 + 44) = v49;
          *(float *)(a5 + 24) = v41;
          *(float *)(a5 + 28) = v40;
          *(float *)(a5 + 32) = v42;
          a6 = v44;
        }
      }
      v15 += 3;
    }
    while (v15 != 24);
    uint64_t v50 = 0;
    float v51 = *(float *)(a2 + 48);
    float v52 = *(float *)(a2 + 52);
    float v53 = *(float *)(a2 + 56);
    v173.f32[0] = -v51;
    v173.f32[1] = -v52;
    float v174 = -v53;
    unint64_t v171 = __PAIR64__(LODWORD(v52), LODWORD(v51));
    float v172 = v53;
    float v54 = *(float *)(a2 + 4);
    float v55 = *(float *)(a2 + 8);
    float v56 = *(float *)(a2 + 12);
    float v57 = *(float *)(a2 + 16);
    float v58 = *(float *)(a2 + 20);
    float v59 = *(float *)(a2 + 24);
    float v60 = *(float *)(a2 + 28);
    float v62 = *(float *)(a2 + 32);
    float v61 = *(float *)(a2 + 36);
    float v63 = *(float *)(a2 + 40);
    float v64 = *(float *)(a2 + 44);
    float v147 = (float)((float)-(float)(v63 * v54) - (float)(*(float *)a2 * v61)) - (float)(v55 * v64);
    float v143 = (float)((float)-(float)(v63 * v60) - (float)(v59 * v61)) - (float)(v62 * v64);
    float v145 = (float)((float)-(float)(v63 * v57) - (float)(v56 * v61)) - (float)(v58 * v64);
    float v65 = a3->f32[1];
    float v151 = v56;
    v152.i32[0] = *(_DWORD *)a2;
    v148.f32[0] = v59;
    v7.f32[0] = v54;
    float v66 = v57;
    float v67 = v60;
    float v68 = (float)(*(float *)a2 * a3->f32[0]) + (float)(v54 * v65);
    float v69 = (float)(v56 * a3->f32[0]) + (float)(v57 * v65);
    float v70 = (float)(v59 * a3->f32[0]) + (float)(v60 * v65);
    float v71 = a3[1].f32[0];
    v6.f32[0] = v55;
    float v72 = v58;
    float v73 = v62;
    *(float *)&unint64_t v169 = v68 + (float)(v55 * v71);
    *((float *)&v169 + 1) = v69 + (float)(v58 * v71);
    float v170 = v70 + (float)(v62 * v71);
    do
    {
      LODWORD(v165) = 0;
      LODWORD(v163) = 0;
      float32x2_t v155 = *(float32x2_t *)&v176[v50];
      float v74 = v176[v50 + 2];
      *(float *)&unint64_t v167 = v147
                      + (float)((float)((float)(v152.f32[0] * v155.f32[0]) + vmuls_lane_f32(v7.f32[0], v155, 1))
                              + (float)(v6.f32[0] * v74));
      *((float *)&v167 + 1) = v145
                            + (float)((float)((float)(v151 * v155.f32[0]) + vmuls_lane_f32(v66, v155, 1))
                                    + (float)(v72 * v74));
      float v168 = v143
           + (float)((float)((float)(v148.f32[0] * v155.f32[0]) + vmuls_lane_f32(v67, v155, 1)) + (float)(v73 * v74));
      int v75 = physx::Gu::intersectRayAABB((uint64_t)&v173, (uint64_t)&v171, (uint64_t)&v167, (uint64_t)&v169, (float *)&v165, (float *)&v163);
      if (v75 != -1)
      {
        float v76 = *(float *)&v165;
        if (*(float *)&v165 >= 0.0 && *(float *)&v165 <= a6)
        {
          float v79 = v78[1];
          float v80 = -v79;
          float v81 = v78[2];
          float v82 = (float)((float)-(float)(v79 * *(float *)(a2 + 20)) - (float)(*v78 * *(float *)(a2 + 8)))
              - (float)(v81 * *(float *)(a2 + 32));
          *(float32x2_t *)(a5 + 36) = vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a2 + 12), v80), vmul_n_f32(*(float32x2_t *)a2, *v78)), vmul_n_f32(*(float32x2_t *)(a2 + 24), v81));
          *(float *)(a5 + 44) = v82;
          float v83 = v74 + (float)(v76 * a3[1].f32[0]);
          *(float32x2_t *)(a5 + 24) = vadd_f32(v155, vmul_n_f32(*a3, v76));
          *(float *)(a5 + 32) = v83;
          int v39 = 1;
          a6 = v76;
        }
      }
      v50 += 3;
    }
    while (v50 != 24);
    uint64_t v84 = 0;
    float v85 = &v173;
    do
    {
      float v85 = (float32x2_t *)((char *)v85 + 12);
    }
    while (v84 != 12);
    uint64_t v86 = 0;
    float v87 = (float32x2_t *)&v171;
    do
    {
      float v87 = (float32x2_t *)((char *)v87 + 12);
    }
    while (v86 != 12);
    for (uint64_t i = 0; i != 12; ++i)
    {
      float v89 = (float *)&v173 + 3 * i;
      float v90 = *v89;
      float v91 = v89[1];
      float v92 = v89[2];
      if ((float)((float)((float)(v91 * a3->f32[1]) + (float)(*v89 * a3->f32[0])) + (float)(v92 * a3[1].f32[0])) >= 0.0)
      {
        float v93 = &physx::Gu::getBoxEdges(void)::Indices[2 * i];
        float v94 = &v176[3 * *v93];
        float v95 = *v94;
        float v96 = v94[1];
        unint64_t v165 = __PAIR64__(LODWORD(v96), LODWORD(v95));
        float v97 = v94[2];
        float v166 = v97;
        float v98 = &v176[3 * v93[1]];
        float v99 = *v98;
        float v100 = v98[1];
        unint64_t v163 = __PAIR64__(LODWORD(v100), LODWORD(v99));
        float v101 = v98[2];
        float v164 = v101;
        float v102 = v99 - v95;
        float v103 = v100 - v96;
        float v104 = v101 - v97;
        float v105 = sqrtf((float)((float)(v103 * v103) + (float)(v102 * v102)) + (float)(v104 * v104));
        if (v105 > 0.0)
        {
          float v106 = 0.01 / v105;
          float v107 = v102 * v106;
          float v108 = v103 * v106;
          float v109 = v104 * v106;
          *(float *)&unint64_t v165 = v95 - v107;
          *((float *)&v165 + 1) = v96 - v108;
          float v166 = v97 - v109;
          *(float *)&unint64_t v163 = v99 + v107;
          *((float *)&v163 + 1) = v100 + v108;
          float v164 = v101 + v109;
        }
        uint64_t v110 = 0;
        float v111 = &v172;
        do
        {
          float v112 = *(v111 - 2);
          float v113 = *(v111 - 1);
          if ((float)((float)((float)(v113 * a3->f32[1]) + (float)(v112 * a3->f32[0])) + (float)(*v111 * a3[1].f32[0])) < 0.0
            && (float)((float)((float)(v91 * v113) + (float)(v90 * v112)) + (float)(v92 * *v111)) < 0.0)
          {
            unsigned int v114 = &v175[3 * physx::Gu::getBoxEdges(void)::Indices[v110]];
            float v115 = *v114;
            float v116 = v114[1];
            unint64_t v161 = __PAIR64__(LODWORD(v116), LODWORD(v115));
            float v117 = v114[2];
            float v162 = v117;
            float v118 = &v175[3 * physx::Gu::getBoxEdges(void)::Indices[v110 + 1]];
            float v119 = *v118;
            float v120 = v118[1];
            unint64_t v159 = __PAIR64__(LODWORD(v120), LODWORD(v119));
            float v121 = v118[2];
            float v160 = v121;
            float v122 = v119 - v115;
            float v123 = v120 - v116;
            float v124 = v121 - v117;
            float v125 = sqrtf((float)((float)(v123 * v123) + (float)(v122 * v122)) + (float)(v124 * v124));
            if (v125 > 0.0)
            {
              float v126 = 0.01 / v125;
              float v127 = v122 * v126;
              float v128 = v123 * v126;
              float v129 = v124 * v126;
              *(float *)&unint64_t v161 = v115 - v127;
              *((float *)&v161 + 1) = v116 - v128;
              float v162 = v117 - v129;
              *(float *)&unint64_t v159 = v119 + v127;
              *((float *)&v159 + 1) = v120 + v128;
              float v160 = v121 + v129;
            }
            float v158 = 0.0;
            if (physx::Gu::intersectEdgeEdge((float *)&v165, (float *)&v163, a3, (float *)&v161, (float *)&v159, &v158, &v156))
            {
              float v130 = v158;
              if (v158 <= a6)
              {
                float v67 = v166;
                float v170 = v166;
                float32x2_t v6 = (float32x2_t)v165;
                unint64_t v169 = v165;
                float32x2_t v152 = (float32x2_t)v163;
                v155.f32[0] = v164;
                float v66 = v162;
                float v168 = v162;
                float32x2_t v7 = (float32x2_t)v161;
                unint64_t v167 = v161;
                float32x2_t v148 = (float32x2_t)v159;
                float v151 = v160;
                float v131 = (float)(v158 * a3[1].f32[0]) + v157;
                *(float32x2_t *)(a5 + 24) = vadd_f32(vmul_n_f32(*a3, v158), v156);
                *(float *)(a5 + 32) = v131;
                int v39 = 2;
                a6 = v130;
              }
            }
          }
          v110 += 2;
          v111 += 3;
        }
        while (v110 != 24);
      }
    }
    BOOL v14 = v39 != -1;
    if (v39 != -1)
    {
      if (v39 == 2)
      {
        float32x2_t v173 = vsub_f32(v152, v6);
        float v174 = v155.f32[0] - v67;
        unint64_t v171 = (unint64_t)vsub_f32(v148, v7);
        float v172 = v151 - v66;
        physx::Gu::computeEdgeEdgeNormal((float32x2_t *)(a5 + 36), (float32x2_t *)&v169, &v173, (float32x2_t *)&v167, (float32x2_t *)&v171, a3, a6);
        float v133 = *(float *)(a5 + 36);
        float v132 = *(float *)(a5 + 40);
        float v134 = *(float *)(a5 + 44);
        float v135 = sqrtf((float)((float)(v132 * v132) + (float)(v133 * v133)) + (float)(v134 * v134));
        if (v135 > 0.0)
        {
          float v136 = 1.0 / v135;
          *(float *)(a5 + 36) = v133 * v136;
          *(float *)(a5 + 40) = v132 * v136;
          *(float *)(a5 + 44) = v134 * v136;
        }
      }
      *(_WORD *)(a5 + 20) = 3;
      *(float *)(a5 + 48) = a6;
    }
  }
  else
  {
    *(_WORD *)(a5 + 20) = 2;
    *(_DWORD *)(a5 + 48) = 0;
    float v13 = -a3[1].f32[0];
    *(float32x2_t *)(a5 + 36) = vneg_f32(*a3);
    *(float *)(a5 + 44) = v13;
    return 1;
  }
  return v14;
}

float32_t anonymous namespace'::computeBoxWorldEdgeNormal(uint64_t a1, unsigned int a2, float32x2_t *a3)
{
  float v4 = v3[1];
  float v5 = v3[2];
  float32_t result = (float)((float)(*v3 * *(float *)(a1 + 8)) + (float)(v4 * *(float *)(a1 + 20)))
         + (float)(v5 * *(float *)(a1 + 32));
  *a3 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *v3), vmul_n_f32(*(float32x2_t *)(a1 + 12), v4)), vmul_n_f32(*(float32x2_t *)(a1 + 24), v5));
  a3[1].f32[0] = result;
  return result;
}

uint64_t physx::Gu::sweepBoxSphere(Sphere *a1, void *a2, float32x2_t *a3, float *a4, float *a5, _WORD *a6, float a7, float a8)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  if ((*a6 & 0x10) != 0
    || (int32x2_t v114 = *(int32x2_t *)a2,
        int v115 = *((_DWORD *)a2 + 2),
        float v116 = a7,
        !physx::Gu::intersectSphereBox((physx::Gu *)&v114, a1, (const physx::Gu::Box *)a3)))
  {
    physx::Gu::computeOBBPoints((float *)&v114, (float *)a1 + 9, (float *)a1 + 12, (float *)a1, (float *)a1 + 3, (float *)a1 + 6);
    uint64_t v17 = 0;
    char v16 = 0;
    do
    {
      float v18 = (char *)&v114 + 12 * physx::Gu::getBoxEdges(void)::Indices[v17];
      float v19 = (float *)&v114 + 3 * physx::Gu::getBoxEdges(void)::Indices[v17 + 1];
      *(void *)&long long v20 = *(void *)(v18 + 4);
      *((void *)&v20 + 1) = *(void *)v19;
      float v105 = *(float *)v18;
      long long v106 = v20;
      float v107 = v19[2];
      float v108 = a7;
      float v21 = *((float *)&v20 + 2) - v105;
      float v22 = v107 - *((float *)&v20 + 1);
      float v23 = COERCE_FLOAT(*a2) - v105;
      float32x2_t v24 = vsub_f32((float32x2_t)vzip2_s32(*(int32x2_t *)((char *)&v20 + 8), *(int32x2_t *)a2), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v20, 0));
      float v25 = *((float *)a2 + 2);
      float v26 = v25 - *((float *)&v20 + 1);
      float v27 = v24.f32[1];
      float v28 = (float)(vmuls_lane_f32(v24.f32[0], v24, 1) + (float)(v23 * (float)(*((float *)&v20 + 2) - v105)))
          + (float)((float)(v25 - *((float *)&v20 + 1)) * (float)(v107 - *((float *)&v20 + 1)));
      if (v28 > 0.0)
      {
        float v29 = (float)(vmul_f32(v24, v24).f32[0] + (float)(v21 * v21)) + (float)(v22 * v22);
        if (v28 >= v29)
        {
          float v23 = v23 - v21;
          float v27 = v24.f32[1] - v24.f32[0];
        }
        else
        {
          float v30 = v28 / v29;
          float v22 = v22 * v30;
          float v23 = v23 - (float)(v21 * v30);
          float v27 = v24.f32[1] - (float)(v24.f32[0] * v30);
        }
        float v26 = v26 - v22;
      }
      float v31 = sqrtf((float)((float)(v27 * v27) + (float)(v23 * v23)) + (float)(v26 * v26)) - a7;
      if (v31 <= 0.0)
      {
        BOOL v36 = 1;
        float v33 = 0.0;
      }
      else
      {
        float v32 = v31 + -10.0;
        float v33 = 0.0;
        if (v31 <= 10.0) {
          float v32 = 0.0;
        }
        float v34 = v25 + (float)(v32 * a3[1].f32[0]);
        float v98 = v32;
        float32x2_t v109 = vadd_f32(*(float32x2_t *)a2, vmul_n_f32(*a3, v32));
        float v110 = v34;
        physx::Gu::intersectRayCapsuleInternal(&v109, a3, &v105, (float *)&v106 + 2, &v111, a7);
        BOOL v36 = v35 != 0;
        if (v35)
        {
          float v37 = v111;
          if (v111 >= v112 && v35 != 1) {
            float v37 = v112;
          }
          float v33 = v98 + v37;
        }
      }
      if (v36 && v33 >= 0.0 && v33 <= a8)
      {
        float v39 = (float)(v33 * a3->f32[0]) + *(float *)a2;
        float v40 = (float)(v33 * a3->f32[1]) + *((float *)a2 + 1);
        float v41 = (float)(v33 * a3[1].f32[0]) + *((float *)a2 + 2);
        float v42 = *((float *)&v106 + 2) - v105;
        float v43 = *((float *)&v106 + 3) - *(float *)&v106;
        float v44 = v107 - *((float *)&v106 + 1);
        float v45 = (float)((float)((float)(*((float *)&v106 + 3) - *(float *)&v106) * (float)(v40 - *(float *)&v106))
                    + (float)((float)(v39 - v105) * (float)(*((float *)&v106 + 2) - v105)))
            + (float)((float)(v41 - *((float *)&v106 + 1)) * (float)(v107 - *((float *)&v106 + 1)));
        float v46 = 0.0;
        if (v45 > 0.0)
        {
          float v47 = (float)((float)(v43 * v43) + (float)(v42 * v42)) + (float)(v44 * v44);
          float v46 = 1.0;
          if (v45 < v47) {
            float v46 = v45 / v47;
          }
        }
        float v48 = (float)(v105 + (float)(v42 * v46)) - v39;
        float v49 = (float)(*(float *)&v106 + (float)(v43 * v46)) - v40;
        float v50 = (float)(*((float *)&v106 + 1) + (float)(v44 * v46)) - v41;
        *a5 = v48;
        a5[1] = v49;
        a5[2] = v50;
        float v51 = sqrtf((float)((float)(v49 * v49) + (float)(v48 * v48)) + (float)(v50 * v50));
        if (v51 > 0.0)
        {
          float v52 = 1.0 / v51;
          *a5 = v48 * v52;
          a5[1] = v49 * v52;
          a5[2] = v50 * v52;
        }
        char v16 = 1;
        a8 = v33;
      }
      v17 += 2;
    }
    while (v17 != 24);
    float v53 = *(float *)a1;
    float v54 = *((float *)a1 + 1);
    float v55 = *((float *)a1 + 2);
    float v56 = *((float *)a1 + 3);
    float v57 = *((float *)a1 + 4);
    float v58 = *((float *)a1 + 5);
    float v59 = *((float *)a1 + 6);
    float v60 = *((float *)a1 + 7);
    float v61 = *((float *)a1 + 8);
    float v62 = *(float *)a2 - *((float *)a1 + 9);
    float v63 = *((float *)a2 + 1) - *((float *)a1 + 10);
    float v64 = *((float *)a2 + 2) - *((float *)a1 + 11);
    float v105 = (float)((float)(v54 * v63) + (float)(*(float *)a1 * v62)) + (float)(v55 * v64);
    *(float *)&long long v106 = (float)((float)(v57 * v63) + (float)(v56 * v62)) + (float)(v58 * v64);
    *((float *)&v106 + 1) = (float)((float)(v60 * v63) + (float)(v59 * v62)) + (float)(v61 * v64);
    float v65 = a3->f32[0];
    float v66 = a3->f32[1];
    float v94 = v54;
    float v95 = v53;
    float v67 = a3[1].f32[0];
    float v92 = v56;
    float v93 = v55;
    float v96 = v61;
    float v97 = v60;
    float v99 = v59;
    v109.f32[0] = (float)((float)(v54 * v66) + (float)(v53 * a3->f32[0])) + (float)(v55 * v67);
    v109.f32[1] = (float)((float)(v57 * v66) + (float)(v56 * v65)) + (float)(v58 * v67);
    int v103 = 0;
    float v104 = 0.0;
    float v69 = *((float *)a1 + 12);
    float v68 = *((float *)a1 + 13);
    float v70 = *((float *)a1 + 14);
    float v112 = v68;
    float v113 = v70;
    float v110 = (float)((float)(v60 * v66) + (float)(v59 * v65)) + (float)(v61 * v67);
    float v111 = v69 + a7;
    float v71 = -v70;
    float v100 = -(float)(v69 + a7);
    float v101 = -v68;
    float v102 = -v70;
    int v72 = physx::Gu::intersectRayAABB((uint64_t)&v100, (uint64_t)&v111, (uint64_t)&v105, (uint64_t)&v109, &v104, (float *)&v103);
    if (v72 != -1 && v104 >= -0.00001 && v104 <= a8)
    {
      a8 = fmaxf(v104, 0.0);
      float v74 = v73[1];
      float v75 = (float)(v95 * *v73) + (float)(v92 * v74);
      float v76 = (float)(v94 * *v73) + (float)(v57 * v74);
      float v77 = (float)(v93 * *v73) + (float)(v58 * v74);
      float v78 = v73[2];
      *a5 = v75 + (float)(v99 * v78);
      a5[1] = v76 + (float)(v97 * v78);
      a5[2] = v77 + (float)(v96 * v78);
      float v69 = *((float *)a1 + 12);
      float v68 = *((float *)a1 + 13);
      float v70 = *((float *)a1 + 14);
      float v71 = -v70;
      char v16 = 1;
    }
    float v111 = v69;
    float v112 = v68 + a7;
    float v113 = v70;
    float v79 = -v69;
    float v100 = -v69;
    float v101 = -(float)(v68 + a7);
    float v102 = v71;
    int v80 = physx::Gu::intersectRayAABB((uint64_t)&v100, (uint64_t)&v111, (uint64_t)&v105, (uint64_t)&v109, &v104, (float *)&v103);
    if (v80 != -1 && v104 >= -0.00001 && v104 <= a8)
    {
      a8 = fmaxf(v104, 0.0);
      float v82 = v81[1];
      float v83 = v81[2];
      float v84 = (float)((float)(*v81 * *((float *)a1 + 2)) + (float)(v82 * *((float *)a1 + 5)))
          + (float)(v83 * *((float *)a1 + 8));
      *(float32x2_t *)a5 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *v81), vmul_n_f32(*(float32x2_t *)((char *)a1 + 12), v82)), vmul_n_f32(*(float32x2_t *)((char *)a1 + 24), v83));
      a5[2] = v84;
      float v69 = *((float *)a1 + 12);
      float v68 = *((float *)a1 + 13);
      float v70 = *((float *)a1 + 14);
      float v79 = -v69;
      char v16 = 1;
    }
    float v111 = v69;
    float v112 = v68;
    float v113 = v70 + a7;
    float v100 = v79;
    float v101 = -v68;
    float v102 = -(float)(v70 + a7);
    int v85 = physx::Gu::intersectRayAABB((uint64_t)&v100, (uint64_t)&v111, (uint64_t)&v105, (uint64_t)&v109, &v104, (float *)&v103);
    if (v85 == -1 || v104 < -0.00001)
    {
      uint64_t v86 = a4;
    }
    else
    {
      uint64_t v86 = a4;
      if (v104 <= a8)
      {
        a8 = fmaxf(v104, 0.0);
        float v88 = v87[1];
        float v89 = v87[2];
        float v90 = (float)((float)(*v87 * *((float *)a1 + 2)) + (float)(v88 * *((float *)a1 + 5)))
            + (float)(v89 * *((float *)a1 + 8));
        *(float32x2_t *)a5 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a1, *v87), vmul_n_f32(*(float32x2_t *)((char *)a1 + 12), v88)), vmul_n_f32(*(float32x2_t *)((char *)a1 + 24), v89));
        a5[2] = v90;
        char v16 = 1;
      }
    }
    *uint64_t v86 = a8;
  }
  else
  {
    *a4 = 0.0;
    float v15 = -a3[1].f32[0];
    *(float32x2_t *)a5 = vneg_f32(*a3);
    a5[2] = v15;
    char v16 = 1;
  }
  return v16 & 1;
}

uint64_t physx::Gu::triBoxSweepTestBoxSpace(float *a1, float *a2, float *a3, float *a4, float *a5, char a6, float a7)
{
  float v7 = *a1;
  float v8 = a1[1];
  float v10 = a1[2];
  float v9 = a1[3];
  float v11 = v9 - *a1;
  float v12 = a1[4];
  float v13 = a1[5];
  float v14 = a1[6];
  float v15 = a1[7];
  float v16 = v14 - *a1;
  float v17 = a1[8];
  float v18 = (float)((float)(v12 - v8) * (float)(v17 - v10)) - (float)((float)(v13 - v10) * (float)(v15 - v8));
  float v19 = (float)((float)(v13 - v10) * v16) - (float)(v11 * (float)(v17 - v10));
  float v20 = (float)(v11 * (float)(v15 - v8)) - (float)((float)(v12 - v8) * v16);
  float v21 = *a3;
  float v22 = a3[1];
  if (a6)
  {
    float v23 = a3[2];
    float v24 = (float)((float)(v22 * v19) + (float)(v18 * v21)) + (float)(v20 * v23);
    if (v24 >= 0.0) {
      return 0;
    }
  }
  else
  {
    float v23 = a3[2];
    float v24 = (float)((float)(v22 * v19) + (float)(v21 * v18)) + (float)(v23 * v20);
  }
  float v25 = (float)((float)(v8 * v19) + (float)(v7 * v18)) + (float)(v10 * v20);
  float v26 = (float)((float)(v12 * v19) + (float)(v9 * v18)) + (float)(v13 * v20);
  float v27 = (float)((float)(v15 * v19) + (float)(v14 * v18)) + (float)(v17 * v20);
  if (v25 >= v26) {
    float v28 = (float)((float)(v12 * v19) + (float)(v9 * v18)) + (float)(v13 * v20);
  }
  else {
    float v28 = (float)((float)(v8 * v19) + (float)(v7 * v18)) + (float)(v10 * v20);
  }
  if (v25 <= v26) {
    float v25 = (float)((float)(v12 * v19) + (float)(v9 * v18)) + (float)(v13 * v20);
  }
  if (v28 >= v27) {
    float v28 = (float)((float)(v15 * v19) + (float)(v14 * v18)) + (float)(v17 * v20);
  }
  if (v25 <= v27) {
    float v25 = (float)((float)(v15 * v19) + (float)(v14 * v18)) + (float)(v17 * v20);
  }
  float v29 = fabsf(v18);
  float v30 = fabsf(v19);
  float v31 = *a2;
  float v32 = a2[1];
  float v33 = (float)(v30 * v32) + (float)(v29 * *a2);
  float v34 = fabsf(v20);
  float v35 = a2[2];
  float v36 = v33 + (float)(v34 * v35);
  float v37 = (float)-v36 - v25;
  BOOL v38 = v37 <= 0.0;
  if ((float)(v36 - v28) < 0.0) {
    BOOL v38 = 0;
  }
  if (fabsf(v24) >= 0.000001)
  {
    float v41 = -1.0 / v24;
    float v42 = v41 * v37;
    float v43 = v41 * (float)(v36 - v28);
    if (v42 >= v43) {
      float v44 = v41 * (float)(v36 - v28);
    }
    else {
      float v44 = v42;
    }
    if (v42 <= v43) {
      float v42 = v43;
    }
    if (v44 > 3.4028e38 || v42 < -3.4028e38) {
      return 0;
    }
    float v39 = fminf(v42, 3.4028e38);
    float v40 = fmaxf(v44, -3.4028e38);
  }
  else
  {
    if (!v38) {
      return 0;
    }
    float v39 = 3.4028e38;
    float v40 = -3.4028e38;
  }
  if (v7 >= v9) {
    float v46 = a1[3];
  }
  else {
    float v46 = *a1;
  }
  if (v7 <= v9) {
    float v47 = a1[3];
  }
  else {
    float v47 = *a1;
  }
  if (v46 >= v14) {
    float v48 = a1[6];
  }
  else {
    float v48 = v46;
  }
  if (v47 <= v14) {
    float v49 = a1[6];
  }
  else {
    float v49 = v47;
  }
  float v50 = (float)-v31 - v49;
  BOOL v51 = v50 <= 0.0;
  if ((float)(v31 - v48) < 0.0) {
    BOOL v51 = 0;
  }
  if (fabsf(v21) >= 0.000001)
  {
    float v52 = -(float)(*a4 * v50);
    float v53 = -(float)(*a4 * (float)(v31 - v48));
    if (v52 >= v53) {
      float v54 = -(float)(*a4 * (float)(v31 - v48));
    }
    else {
      float v54 = -(float)(*a4 * v50);
    }
    if (v52 > v53) {
      float v53 = v52;
    }
    if (v54 > v39 || v53 < v40) {
      return 0;
    }
    if (v53 < v39) {
      float v39 = v53;
    }
    if (v54 > v40) {
      float v40 = v54;
    }
  }
  else if (!v51)
  {
    return 0;
  }
  if (v8 >= v12) {
    float v56 = a1[4];
  }
  else {
    float v56 = a1[1];
  }
  if (v8 <= v12) {
    float v57 = a1[4];
  }
  else {
    float v57 = a1[1];
  }
  if (v56 >= v15) {
    float v58 = a1[7];
  }
  else {
    float v58 = v56;
  }
  if (v57 <= v15) {
    float v59 = a1[7];
  }
  else {
    float v59 = v57;
  }
  float v60 = (float)-v32 - v59;
  float v61 = v32 - v58;
  BOOL v62 = v60 <= 0.0;
  if ((float)(v32 - v58) < 0.0) {
    BOOL v62 = 0;
  }
  if (fabsf(v22) >= 0.000001)
  {
    float v63 = a4[1];
    float v64 = -(float)(v63 * v60);
    float v65 = -(float)(v63 * v61);
    if (v64 >= v65) {
      float v66 = v65;
    }
    else {
      float v66 = -(float)(v63 * v60);
    }
    if (v64 > v65) {
      float v65 = v64;
    }
    if (v66 > v39 || v65 < v40) {
      return 0;
    }
    if (v65 < v39) {
      float v39 = v65;
    }
    if (v66 > v40) {
      float v40 = v66;
    }
  }
  else if (!v62)
  {
    return 0;
  }
  if (v10 >= v13) {
    float v68 = a1[5];
  }
  else {
    float v68 = a1[2];
  }
  if (v10 <= v13) {
    float v69 = a1[5];
  }
  else {
    float v69 = a1[2];
  }
  if (v68 >= v17) {
    float v70 = a1[8];
  }
  else {
    float v70 = v68;
  }
  if (v69 <= v17) {
    float v71 = a1[8];
  }
  else {
    float v71 = v69;
  }
  float v72 = (float)-v35 - v71;
  float v73 = v35 - v70;
  BOOL v74 = v72 <= 0.0;
  if ((float)(v35 - v70) < 0.0) {
    BOOL v74 = 0;
  }
  if (fabsf(v23) < 0.000001)
  {
    if (v74) {
      goto LABEL_122;
    }
    return 0;
  }
  float v75 = a4[2];
  float v76 = -(float)(v75 * v72);
  float v77 = -(float)(v75 * v73);
  if (v76 >= v77) {
    float v78 = v77;
  }
  else {
    float v78 = -(float)(v75 * v72);
  }
  if (v76 > v77) {
    float v77 = v76;
  }
  if (v78 > v39 || v77 < v40) {
    return 0;
  }
  if (v77 < v39) {
    float v39 = v77;
  }
  if (v78 > v40) {
    float v40 = v78;
  }
LABEL_122:
  int v81 = v74 && v62 && v51 && v38;
  float v136 = v12 * 0.0;
  float v137 = v8 * 0.0;
  float v83 = a1 + 2;
  uint64_t v84 = -3;
  do
  {
    uint64_t v85 = v84 + 4;
    if (v84 == -1) {
      uint64_t v85 = 0;
    }
    uint64_t v86 = &a1[3 * v85];
    float v87 = *v86;
    float v88 = v86[1] - *(v83 - 1);
    float v89 = v86[2] - *v83;
    if ((float)((float)(v89 * v89) + (float)(v88 * v88)) >= 0.000001)
    {
      float v90 = (float)((float)(v7 * 0.0) - (float)(v89 * v8)) + (float)(v10 * v88);
      float v91 = (float)((float)(v9 * 0.0) - (float)(v89 * v12)) + (float)(v13 * v88);
      float v92 = (float)((float)(v14 * 0.0) - (float)(v89 * v15)) + (float)(v17 * v88);
      if (v90 >= v91) {
        float v93 = (float)((float)(v9 * 0.0) - (float)(v89 * v12)) + (float)(v13 * v88);
      }
      else {
        float v93 = (float)((float)(v7 * 0.0) - (float)(v89 * v8)) + (float)(v10 * v88);
      }
      if (v90 <= v91) {
        float v90 = (float)((float)(v9 * 0.0) - (float)(v89 * v12)) + (float)(v13 * v88);
      }
      if (v93 >= v92) {
        float v93 = (float)((float)(v14 * 0.0) - (float)(v89 * v15)) + (float)(v17 * v88);
      }
      if (v90 <= v92) {
        float v90 = (float)((float)(v14 * 0.0) - (float)(v89 * v15)) + (float)(v17 * v88);
      }
      float v94 = (float)((float)(v32 * fabsf(v89)) + (float)(v31 * 0.0)) + (float)(fabsf(v88) * v35);
      float v95 = (float)-v94 - v90;
      float v96 = v94 - v93;
      BOOL v97 = v95 <= 0.0;
      if ((float)(v94 - v93) < 0.0) {
        BOOL v97 = 0;
      }
      v81 &= v97;
      float v98 = (float)((float)(v21 * 0.0) - (float)(v89 * v22)) + (float)(v23 * v88);
      if (fabsf(v98) >= 0.000001)
      {
        float v99 = (float)(-1.0 / v98) * v95;
        float v100 = (float)(-1.0 / v98) * v96;
        if (v99 >= v100) {
          float v101 = (float)(-1.0 / v98) * v96;
        }
        else {
          float v101 = (float)(-1.0 / v98) * v95;
        }
        if (v99 <= v100) {
          float v102 = (float)(-1.0 / v98) * v96;
        }
        else {
          float v102 = v99;
        }
        if (v101 > v39 || v102 < v40) {
          return 0;
        }
        if (v102 < v39) {
          float v39 = v102;
        }
        if (v101 > v40) {
          float v40 = v101;
        }
      }
      else if (!v97)
      {
        return 0;
      }
    }
    float v104 = v87 - *(v83 - 2);
    if ((float)((float)((float)(v89 * v89) + 0.0) + (float)(v104 * v104)) >= 0.000001)
    {
      float v105 = (float)(v137 + (float)(v7 * v89)) - (float)(v10 * v104);
      float v106 = (float)(v136 + (float)(v9 * v89)) - (float)(v13 * v104);
      float v82 = v15 * 0.0;
      float v107 = (float)((float)(v15 * 0.0) + (float)(v14 * v89)) - (float)(v17 * v104);
      if (v105 >= v106) {
        float v108 = (float)(v136 + (float)(v9 * v89)) - (float)(v13 * v104);
      }
      else {
        float v108 = (float)(v137 + (float)(v7 * v89)) - (float)(v10 * v104);
      }
      if (v105 <= v106) {
        float v105 = (float)(v136 + (float)(v9 * v89)) - (float)(v13 * v104);
      }
      if (v108 >= v107) {
        float v109 = (float)(v82 + (float)(v14 * v89)) - (float)(v17 * v104);
      }
      else {
        float v109 = v108;
      }
      if (v105 <= v107) {
        float v105 = (float)(v82 + (float)(v14 * v89)) - (float)(v17 * v104);
      }
      float v110 = (float)((float)(v32 * 0.0) + (float)(fabsf(v89) * v31)) + (float)(fabsf(v104) * v35);
      float v111 = (float)-v110 - v105;
      float v112 = v110 - v109;
      BOOL v113 = v111 <= 0.0;
      if (v112 < 0.0) {
        BOOL v113 = 0;
      }
      v81 &= v113;
      float v114 = (float)((float)(v22 * 0.0) + (float)(v21 * v89)) - (float)(v23 * v104);
      if (fabsf(v114) >= 0.000001)
      {
        float v115 = (float)(-1.0 / v114) * v111;
        float v116 = (float)(-1.0 / v114) * v112;
        if (v115 >= v116) {
          float v117 = (float)(-1.0 / v114) * v112;
        }
        else {
          float v117 = (float)(-1.0 / v114) * v111;
        }
        if (v115 <= v116) {
          float v118 = (float)(-1.0 / v114) * v112;
        }
        else {
          float v118 = (float)(-1.0 / v114) * v111;
        }
        if (v117 > v39 || v118 < v40) {
          return 0;
        }
        if (v118 < v39) {
          float v39 = v118;
        }
        if (v117 > v40) {
          float v40 = v117;
        }
      }
      else if (!v113)
      {
        return 0;
      }
    }
    if ((float)((float)(v104 * v104) + (float)(v88 * v88)) >= 0.000001)
    {
      float v120 = (float)((float)(v8 * v104) - (float)(v7 * v88)) + (float)(v10 * 0.0);
      float v121 = (float)((float)(v12 * v104) - (float)(v9 * v88)) + (float)(v13 * 0.0);
      float v122 = (float)((float)(v15 * v104) - (float)(v14 * v88)) + (float)(v17 * 0.0);
      if (v120 >= v121) {
        float v123 = (float)((float)(v12 * v104) - (float)(v9 * v88)) + (float)(v13 * 0.0);
      }
      else {
        float v123 = (float)((float)(v8 * v104) - (float)(v7 * v88)) + (float)(v10 * 0.0);
      }
      if (v120 <= v121) {
        float v120 = (float)((float)(v12 * v104) - (float)(v9 * v88)) + (float)(v13 * 0.0);
      }
      if (v123 >= v122) {
        float v124 = (float)((float)(v15 * v104) - (float)(v14 * v88)) + (float)(v17 * 0.0);
      }
      else {
        float v124 = v123;
      }
      if (v120 <= v122) {
        float v120 = (float)((float)(v15 * v104) - (float)(v14 * v88)) + (float)(v17 * 0.0);
      }
      float v125 = (float)((float)(v32 * fabsf(v104)) + (float)(fabsf(v88) * v31)) + (float)(v35 * 0.0);
      float v126 = (float)-v125 - v120;
      float v127 = v125 - v124;
      BOOL v128 = v126 <= 0.0;
      if (v127 < 0.0) {
        BOOL v128 = 0;
      }
      v81 &= v128;
      float v129 = (float)((float)(v22 * v104) - (float)(v21 * v88)) + (float)(v23 * 0.0);
      if (fabsf(v129) >= 0.000001)
      {
        float v130 = (float)(-1.0 / v129) * v126;
        float v131 = (float)(-1.0 / v129) * v127;
        if (v130 >= v131) {
          float v132 = (float)(-1.0 / v129) * v127;
        }
        else {
          float v132 = (float)(-1.0 / v129) * v126;
        }
        if (v130 <= v131) {
          float v133 = (float)(-1.0 / v129) * v127;
        }
        else {
          float v133 = (float)(-1.0 / v129) * v126;
        }
        if (v132 > v39 || v133 < v40) {
          return 0;
        }
        if (v133 < v39) {
          float v39 = v133;
        }
        if (v132 > v40) {
          float v40 = v132;
        }
      }
      else if (!v128)
      {
        return 0;
      }
    }
    v83 += 3;
  }
  while (!__CFADD__(v84++, 1));
  uint64_t result = 0;
  if (v40 <= a7 && v39 >= 0.0)
  {
    if (v40 > 0.0 || (float v40 = 0.0, (_BYTE)v81))
    {
      *a5 = v40;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t physx::Gu::sweepCapsuleBox(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, float *a6, uint64_t a7, _WORD *a8, int32x4_t a9)
{
  unsigned __int32 v12 = a9.u32[0];
  uint64_t v176 = *MEMORY[0x263EF8340];
  if ((*a8 & 0x10) != 0) {
    goto LABEL_4;
  }
  float32x2_t v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
  float32x2_t v18 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  float32x2_t v19 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  float32x2_t v21 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v22 = vmul_lane_f32(v17, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v23 = vmul_laneq_f32(v18, _Q4, 2);
  float32x2_t v24 = vmul_n_f32(v17, _Q4.f32[0]);
  float32x2_t v25 = vmul_n_f32(v18, _Q4.f32[0]);
  float32x2_t v26 = vmul_n_f32(v19, _Q4.f32[0]);
  float32x2_t v27 = vmul_lane_f32(v18, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v28 = vmul_lane_f32(v19, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v29 = vmul_laneq_f32(v19, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v34 = vsub_f32(*(float32x2_t *)_Q4.f32, v21);
  LODWORD(v35) = vsub_f32(v25, v28).u32[0];
  int32x2_t v36 = (int32x2_t)vadd_f32(v27, v26);
  *(int8x8_t *)&long long v37 = vext_s8((int8x8_t)vadd_f32(v25, v28), (int8x8_t)vsub_f32(v27, v26), 4uLL);
  *((void *)&v37 + 1) = vsub_f32(v34, v22).u32[0];
  *(float *)&uint64_t v172 = (float)(1.0 - v22.f32[1]) - v23.f32[1];
  HIDWORD(v172) = vadd_f32(v24, v29).u32[0];
  HIDWORD(v35) = vsub_f32(v24, v29).i32[1];
  uint64_t v173 = v35;
  v174[0] = vzip1_s32((int32x2_t)vsub_f32(v34, v23), v36);
  *(_OWORD *)&v174[1] = v37;
  physx::Gu::distanceSegmentBoxSquared((float *)a1, (float *)(a1 + 12), (float *)(a2 + 16), (float32x2_t *)a3, (float *)&v172, 0, 0);
  if (*(float *)a9.i32 >= (float)(*(float *)(a1 + 24) * *(float *)(a1 + 24)))
  {
LABEL_4:
    float v149 = *(float *)&v12;
    float v40 = *(float *)a1;
    float v41 = *(float *)(a1 + 4);
    float v42 = *(float *)(a1 + 16);
    float v43 = *(float *)(a1 + 12);
    float v44 = *(float *)(a1 + 20) - *(float *)(a1 + 8);
    __int32 v148 = *(_DWORD *)a3;
    *(float *)&unsigned int v45 = -*(float *)a3;
    char v151 = 1;
    a9.i64[0] = *(void *)(a3 + 4);
    int32x4_t v147 = a9;
    *(float *)&unsigned int v46 = -*(float *)a9.i32;
    float v47 = -*(float *)&a9.i32[1];
    float v48 = (float *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v172, 3024, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/sweep/GuSweepCapsuleBox.cpp", 198);
    float v150 = v48;
    unint64_t v153 = __PAIR64__(v46, v45);
    float v154 = v47;
    __int32 v155 = v148;
    unsigned int v156 = v46;
    float v157 = v47;
    __int32 v158 = v148;
    __int32 v159 = v147.i32[0];
    float v160 = v47;
    unsigned int v161 = v45;
    __int32 v162 = v147.i32[0];
    float v163 = v47;
    __int32 v166 = v147.i32[1];
    unsigned int v164 = v45;
    unsigned int v165 = v46;
    __int32 v167 = v148;
    unsigned int v168 = v46;
    int32x4_t v49 = vuzp2q_s32(v147, vzip1q_s32(v147, v147));
    int32x4_t v50 = v49;
    v50.i32[1] = v148;
    v50.i32[3] = v49.i32[0];
    int32x4_t v169 = v50;
    unsigned int v170 = v45;
    uint64_t v171 = v147.i64[0];
    float v52 = *(float *)(a2 + 8);
    float v51 = *(float *)(a2 + 12);
    float v53 = (float)(v51 * v51) + -0.5;
    float v54 = *(float *)a2;
    float v55 = *(float *)(a2 + 4);
    float v56 = -v52;
    float v57 = -*(float *)a2;
    float v58 = -v55;
    float v59 = *(float *)(a2 + 16);
    float v60 = *(float *)(a2 + 20);
    float v61 = *(float *)(a2 + 24);
    BOOL v62 = (float *)v174;
    uint64_t v63 = 2u;
    do
    {
      float v65 = *v64;
      float v66 = v64[1];
      float v67 = v64[2];
      float v70 = v65 + v65;
      float v71 = v66 + v66;
      float v72 = v67 + v67;
      float v73 = (float)((float)(v55 * v71) + (float)(v54 * v70)) + (float)(v52 * v72);
      float v74 = (float)(v51 * (float)((float)(v71 * v56) + (float)(v55 * v72))) + (float)(v70 * v53);
      float v75 = (float)(v51 * (float)((float)(v72 * v57) + (float)(v52 * v70))) + (float)(v71 * v53);
      float v76 = v51 * (float)((float)(v70 * v58) + (float)(v54 * v71));
      float v77 = v74 + (float)(v54 * v73);
      float v78 = v76 + (float)(v72 * v53);
      float v79 = *v68 + *v68;
      float v80 = v68[1] + v68[1];
      float v81 = v68[2] + v68[2];
      float v82 = v75 + (float)(v55 * v73);
      float v83 = (float)((float)(v55 * v80) + (float)(v54 * v79)) + (float)(v52 * v81);
      float v84 = v78 + (float)(v52 * v73);
      float v85 = (float)((float)(v51 * (float)((float)(v80 * v56) + (float)(v55 * v81))) + (float)(v79 * v53))
          + (float)(v54 * v83);
      float v86 = (float)((float)(v51 * (float)((float)(v81 * v57) + (float)(v52 * v79))) + (float)(v80 * v53))
          + (float)(v55 * v83);
      float v87 = (float)((float)(v51 * (float)((float)(v79 * v58) + (float)(v54 * v80))) + (float)(v81 * v53))
          + (float)(v52 * v83);
      float v88 = *v69 + *v69;
      float v89 = v69[1] + v69[1];
      float v90 = v69[2] + v69[2];
      float v91 = (float)((float)(v55 * v89) + (float)(v54 * v88)) + (float)(v52 * v90);
      *(v62 - 4) = v59 + v77;
      *(v62 - 3) = v60 + v82;
      *(v62 - 2) = v61 + v84;
      *(v62 - 1) = v59 + v85;
      *BOOL v62 = v60 + v86;
      v62[1] = v61 + v87;
      v62[2] = v59
             + (float)((float)((float)(v51 * (float)((float)(v89 * v56) + (float)(v55 * v90))) + (float)(v88 * v53))
                     + (float)(v54 * v91));
      v62[3] = v60
             + (float)((float)((float)(v51 * (float)((float)(v90 * v57) + (float)(v52 * v88))) + (float)(v89 * v53))
                     + (float)(v55 * v91));
      v62[4] = v61
             + (float)((float)((float)(v51 * (float)((float)(v88 * v58) + (float)(v54 * v89))) + (float)(v90 * v53))
                     + (float)(v52 * v91));
      v63 += 3;
      v62 += 9;
    }
    while (v63 != 38);
    uint64_t v92 = 0;
    float v93 = (float)(v42 - v41) * 0.5;
    float v94 = (float)(v43 - v40) * 0.5;
    float v95 = v44 * 0.5;
    float v96 = (float *)v174;
    BOOL v97 = v152;
    float v98 = v149;
    do
    {
      float v99 = *(v96 - 4);
      float v100 = *(v96 - 3);
      float v101 = *(v96 - 2);
      float v102 = *(v96 - 1);
      float v103 = *v96;
      float v104 = v96[1];
      float v105 = *v96 - v100;
      float v106 = v96[2];
      float v107 = v96[3];
      float v108 = v96[4];
      float v109 = (float)(v105 * (float)(v108 - v101)) - (float)((float)(v104 - v101) * (float)(v107 - v100));
      float v110 = (float)((float)(v104 - v101) * (float)(v106 - v99)) - (float)((float)(v102 - v99) * (float)(v108 - v101));
      float v111 = (float)((float)(v102 - v99) * (float)(v107 - v100)) - (float)(v105 * (float)(v106 - v99));
      if ((float)((float)((float)(a4->f32[1] * v110) + (float)(v109 * a4->f32[0])) + (float)(v111 * a4[1].f32[0])) <= 0.0)
      {
        float v112 = v94 + v99;
        float v113 = v93 + v100;
        float v114 = v95 + v101;
        float v115 = v94 + v102;
        float v116 = v93 + v103;
        float v117 = v95 + v104;
        float v118 = v94 + v106;
        float v119 = v93 + v107;
        float v120 = v95 + v108;
        float v121 = v99 - v94;
        float v122 = v100 - v93;
        float v123 = v101 - v95;
        float v124 = v102 - v94;
        float v125 = v103 - v93;
        float v126 = v104 - v95;
        float v127 = v106 - v94;
        float v128 = v107 - v93;
        float v129 = v108 - v95;
        float v130 = (float)((float)(v93 * v110) + (float)(v109 * v94)) + (float)(v111 * v95);
        BOOL v131 = v130 < 0.0;
        if (v130 < 0.0) {
          float v132 = v121;
        }
        else {
          float v132 = v112;
        }
        if (v131) {
          float v133 = v122;
        }
        else {
          float v133 = v113;
        }
        if (v131) {
          float v134 = v123;
        }
        else {
          float v134 = v114;
        }
        if (v131) {
          float v135 = v124;
        }
        else {
          float v135 = v115;
        }
        if (v131) {
          float v136 = v125;
        }
        else {
          float v136 = v116;
        }
        if (v131) {
          float v137 = v126;
        }
        else {
          float v137 = v117;
        }
        if (v131) {
          float v138 = v127;
        }
        else {
          float v138 = v118;
        }
        if (v131) {
          float v139 = v128;
        }
        else {
          float v139 = v119;
        }
        if (v131) {
          float v140 = v129;
        }
        else {
          float v140 = v120;
        }
        *float v48 = v132;
        v48[1] = v133;
        v48[2] = v134;
        v48[3] = v135;
        v48[4] = v136;
        v48[5] = v137;
        v48[6] = v138;
        v48[7] = v139;
        v48[8] = v140;
        *(_DWORD *)BOOL v97 = v92;
        v48[9] = v124;
        v48[10] = v125;
        v48[11] = v126;
        v48[12] = v115;
        v48[13] = v116;
        v48[14] = v117;
        v48[15] = v118;
        v48[16] = v119;
        v48[17] = v120;
        if ((float)((float)((float)((float)((float)((float)(v117 - v126) * (float)(v118 - v124))
                                           - (float)((float)(v115 - v124) * (float)(v120 - v126)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v116 - v125) * (float)(v120 - v126))
                                           - (float)((float)(v117 - v126) * (float)(v119 - v125)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v115 - v124) * (float)(v119 - v125))
                                   - (float)((float)(v116 - v125) * (float)(v118 - v124)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[12] = v118;
          v48[13] = v119;
          v48[14] = v120;
          v48[15] = v115;
          v48[16] = v116;
          v48[17] = v117;
        }
        *((_DWORD *)v97 + 1) = v92;
        v48[18] = v124;
        v48[19] = v125;
        v48[20] = v126;
        v48[21] = v118;
        v48[22] = v119;
        v48[23] = v120;
        v48[24] = v127;
        v48[25] = v128;
        v48[26] = v129;
        if ((float)((float)((float)((float)((float)((float)(v120 - v126) * (float)(v127 - v124))
                                           - (float)((float)(v118 - v124) * (float)(v129 - v126)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v119 - v125) * (float)(v129 - v126))
                                           - (float)((float)(v120 - v126) * (float)(v128 - v125)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v118 - v124) * (float)(v128 - v125))
                                   - (float)((float)(v119 - v125) * (float)(v127 - v124)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[21] = v127;
          v48[22] = v128;
          v48[23] = v129;
          v48[24] = v118;
          v48[25] = v119;
          v48[26] = v120;
        }
        *((_DWORD *)v97 + 2) = v92;
        v48[27] = v121;
        v48[28] = v122;
        v48[29] = v123;
        v48[30] = v127;
        v48[31] = v128;
        v48[32] = v129;
        v48[33] = v118;
        v48[34] = v119;
        v48[35] = v120;
        if ((float)((float)((float)((float)((float)((float)(v129 - v123) * (float)(v118 - v121))
                                           - (float)((float)(v127 - v121) * (float)(v120 - v123)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v128 - v122) * (float)(v120 - v123))
                                           - (float)((float)(v129 - v123) * (float)(v119 - v122)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v127 - v121) * (float)(v119 - v122))
                                   - (float)((float)(v128 - v122) * (float)(v118 - v121)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[30] = v118;
          v48[31] = v119;
          v48[32] = v120;
          v48[33] = v127;
          v48[34] = v128;
          v48[35] = v129;
        }
        *((_DWORD *)v97 + 3) = v92;
        v48[36] = v121;
        v48[37] = v122;
        v48[38] = v123;
        v48[39] = v118;
        v48[40] = v119;
        v48[41] = v120;
        v48[42] = v112;
        v48[43] = v113;
        v48[44] = v114;
        if ((float)((float)((float)((float)((float)((float)(v120 - v123) * (float)(v112 - v121))
                                           - (float)((float)(v118 - v121) * (float)(v114 - v123)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v119 - v122) * (float)(v114 - v123))
                                           - (float)((float)(v120 - v123) * (float)(v113 - v122)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v118 - v121) * (float)(v113 - v122))
                                   - (float)((float)(v119 - v122) * (float)(v112 - v121)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[39] = v112;
          v48[40] = v113;
          v48[41] = v114;
          v48[42] = v118;
          v48[43] = v119;
          v48[44] = v120;
        }
        *((_DWORD *)v97 + 4) = v92;
        v48[45] = v112;
        v48[46] = v113;
        v48[47] = v114;
        v48[48] = v115;
        v48[49] = v116;
        v48[50] = v117;
        v48[51] = v124;
        v48[52] = v125;
        v48[53] = v126;
        if ((float)((float)((float)((float)((float)((float)(v117 - v114) * (float)(v124 - v112))
                                           - (float)((float)(v115 - v112) * (float)(v126 - v114)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v116 - v113) * (float)(v126 - v114))
                                           - (float)((float)(v117 - v114) * (float)(v125 - v113)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v115 - v112) * (float)(v125 - v113))
                                   - (float)((float)(v116 - v113) * (float)(v124 - v112)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[48] = v124;
          v48[49] = v125;
          v48[50] = v126;
          v48[51] = v115;
          v48[52] = v116;
          v48[53] = v117;
        }
        *((_DWORD *)v97 + 5) = v92;
        v48[54] = v112;
        v48[55] = v113;
        v48[56] = v114;
        v48[57] = v124;
        v48[58] = v125;
        v48[59] = v126;
        v48[60] = v121;
        v48[61] = v122;
        v48[62] = v123;
        if ((float)((float)((float)((float)((float)((float)(v126 - v114) * (float)(v121 - v112))
                                           - (float)((float)(v124 - v112) * (float)(v123 - v114)))
                                   * a4->f32[1])
                           + (float)((float)((float)((float)(v125 - v113) * (float)(v123 - v114))
                                           - (float)((float)(v126 - v114) * (float)(v122 - v113)))
                                   * a4->f32[0]))
                   + (float)((float)((float)((float)(v124 - v112) * (float)(v122 - v113))
                                   - (float)((float)(v125 - v113) * (float)(v121 - v112)))
                           * a4[1].f32[0])) > 0.0)
        {
          v48[57] = v121;
          v48[58] = v122;
          v48[59] = v123;
          v48[60] = v124;
          v48[61] = v125;
          v48[62] = v126;
        }
        v48 += 63;
        *((_DWORD *)v97 + 6) = v92;
        v97 += 7;
      }
      ++v92;
      v96 += 9;
    }
    while (v92 != 12);
    float v141 = *(float *)(a1 + 24);
    float v142 = (float)(*(float *)(a1 + 8) + *(float *)(a1 + 20)) * 0.5;
    float32x2_t v143 = vmul_f32(vadd_f32(*(float32x2_t *)a1, *(float32x2_t *)(a1 + 12)), (float32x2_t)0x3F0000003F000000);
    uint64_t v172 = 0;
    uint64_t v173 = 0;
    LODWORD(v174[0]) = -1;
    WORD2(v174[0]) = 0;
    memset(&v174[1], 0, 24);
    int v175 = 2139095039;
    float v144 = v150;
    unint64_t v153 = (unint64_t)v143;
    float v154 = v142;
    uint64_t v39 = physx::Gu::sweepSphereTriangles((unint64_t)((char *)v97 - (char *)v152) >> 2, (uint64_t)v150, (float32x2_t *)&v153, a4, 0, (uint64_t)&v172, v152, 0, v141, v149, 0, 0, 0);
    if (v39)
    {
      *(void *)a5 = v174[1];
      int v145 = HIDWORD(v174[3]);
      *(_DWORD *)(a5 + 8) = v174[2];
      float v98 = *(float *)&v175;
      *(void *)a7 = *(void *)((char *)&v174[2] + 4);
      *(_DWORD *)(a7 + 8) = v145;
    }
    if (v151) {
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v150, v144);
    }
    *a6 = v98;
  }
  else
  {
    *a6 = 0.0;
    float v38 = -a4[1].f32[0];
    *(float32x2_t *)a7 = vneg_f32(*a4);
    *(float *)(a7 + 8) = v38;
    return 1;
  }
  return v39;
}

uint64_t physx::Gu::sweepCapsuleCapsule(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float *a4, float32x2_t *a5, float32x2_t *a6, char a7, __int16 *a8, float a9)
{
  uint64_t v195 = *MEMORY[0x263EF8340];
  float v18 = *(float *)(a1 + 24) + a2[3].f32[0];
  float v19 = *(float *)a1;
  if ((a7 & 0x10) != 0) {
    goto LABEL_22;
  }
  float v20 = *(float *)(a1 + 12);
  if (v19 == v20)
  {
    float v21 = *(float *)(a1 + 4);
    if (v21 == *(float *)(a1 + 16))
    {
      float v22 = *(float *)(a1 + 8);
      if (v22 == *(float *)(a1 + 20))
      {
        float v23 = a2->f32[1];
        float v24 = a2[1].f32[0];
        float v25 = a2[1].f32[1] - a2->f32[0];
        float v26 = a2[2].f32[1];
        float v27 = a2[2].f32[0] - v23;
        float v28 = v26 - v24;
        float v29 = v19 - a2->f32[0];
        float v30 = v21 - v23;
        float v31 = v22 - v24;
        float v32 = (float)((float)(v27 * v30) + (float)(v29 * v25)) + (float)((float)(v22 - v24) * (float)(v26 - v24));
        if (v32 > 0.0)
        {
          float v33 = (float)((float)(v27 * v27) + (float)(v25 * v25)) + (float)(v28 * v28);
          if (v32 < v33)
          {
            float v34 = v32 / v33;
            float v25 = v25 * v34;
            float v27 = v27 * v34;
            float v28 = v28 * v34;
          }
          float v29 = v29 - v25;
          float v30 = v30 - v27;
          float v31 = v31 - v28;
        }
        goto LABEL_16;
      }
    }
  }
  float v35 = a2->f32[0];
  float v36 = a2[1].f32[1];
  if (a2->f32[0] == v36)
  {
    float v37 = a2->f32[1];
    float v38 = a2[2].f32[0];
    if (v37 == v38)
    {
      float v39 = a2[1].f32[0];
      if (v39 == a2[2].f32[1])
      {
        float v40 = v20 - v19;
        float v41 = *(float *)(a1 + 4);
        float v42 = *(float *)(a1 + 8);
        float v43 = *(float *)(a1 + 16) - v41;
        float v44 = *(float *)(a1 + 20) - v42;
        float v29 = v35 - v19;
        float v30 = v37 - v41;
        float v31 = v39 - v42;
        float v45 = (float)((float)(v43 * v30) + (float)(v29 * v40)) + (float)((float)(v39 - v42) * v44);
        if (v45 > 0.0)
        {
          float v46 = (float)((float)(v43 * v43) + (float)(v40 * v40)) + (float)(v44 * v44);
          if (v45 < v46)
          {
            float v47 = v45 / v46;
            float v40 = v40 * v47;
            float v43 = v43 * v47;
            float v44 = v44 * v47;
          }
          float v29 = v29 - v40;
          float v30 = v30 - v43;
          float v31 = v31 - v44;
        }
LABEL_16:
        if ((float)((float)((float)(v30 * v30) + (float)(v29 * v29)) + (float)(v31 * v31)) >= (float)(v18 * v18)) {
          goto LABEL_22;
        }
LABEL_20:
        *a4 = 0.0;
        float32_t v50 = -a3[1].f32[0];
        *a6 = vneg_f32(*a3);
        a6[1].f32[0] = v50;
        *a8 = 2;
        return 1;
      }
    }
  }
  else
  {
    float v38 = a2[2].f32[0];
    float v37 = a2->f32[1];
  }
  *(float *)float32x4_t v191 = v20 - v19;
  *(float32x2_t *)&v191[4] = vsub_f32(*(float32x2_t *)(a1 + 16), *(float32x2_t *)(a1 + 4));
  float32_t v48 = v36 - v35;
  float v49 = a2[2].f32[1] - a2[1].f32[0];
  v187.f32[0] = v48;
  v187.f32[1] = v38 - v37;
  float v188 = v49;
  if (physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)v191, (float *)a2, (float *)&v187, 0, 0) < (float)(v18 * v18)) {
    goto LABEL_20;
  }
  float v19 = *(float *)a1;
LABEL_22:
  float v52 = a2[1].f32[0];
  float v51 = a2[1].f32[1];
  float v54 = a2[2].f32[0];
  float v53 = a2[2].f32[1];
  float v178 = a2->f32[1];
  float v174 = v54 - v178;
  float v175 = v51 - a2->f32[0];
  float v55 = (float)(v54 - v178) * 0.5;
  float v56 = (float)(v53 - v52) * 0.5;
  float v57 = *(float *)(a1 + 4);
  float v58 = *(float *)(a1 + 8);
  float v60 = *(float *)(a1 + 12);
  float v59 = *(float *)(a1 + 16);
  float v61 = *(float *)(a1 + 20);
  float v62 = v19 + (float)(v175 * 0.5);
  float v63 = v55 + v59;
  float v64 = v60 - (float)(v175 * 0.5);
  float v65 = v59 - v55;
  float v66 = v61 - v56;
  float v67 = v55 + v57;
  float v68 = (float)(v175 * 0.5) + v60;
  float v69 = v56 + v61;
  float v70 = v63 - (float)(v55 + v57);
  float v71 = (float)(v56 + v61) - (float)(v56 + v58);
  float v72 = v65 - (float)(v55 + v57);
  float v176 = v56 + v58;
  float v73 = (float)(v61 - v56) - (float)(v56 + v58);
  float v74 = (float)(v70 * v73) - (float)(v71 * v72);
  float v75 = (float)(v71 * (float)(v64 - v62)) - (float)((float)(v68 - v62) * v73);
  float v76 = (float)((float)(v68 - v62) * v72) - (float)(v70 * (float)(v64 - v62));
  float v77 = sqrtf((float)((float)(v75 * v75) + (float)(v74 * v74)) + (float)(v76 * v76));
  if (v77 > 0.0)
  {
    float v78 = 1.0 / v77;
    float v74 = v74 * v78;
    float v75 = v75 * v78;
    float v76 = v76 * v78;
  }
  float v173 = v53 - v52;
  float v79 = v19 - (float)(v175 * 0.5);
  float v80 = v57 - v55;
  float v81 = v58 - v56;
  float v82 = a3->f32[0];
  float v83 = a3->f32[1];
  float v84 = a3[1].f32[0];
  float v85 = v18 * v74;
  float v86 = v18 * v75;
  float v177 = v18;
  float v87 = v18 * v76;
  if ((float)((float)((float)(v75 * v83) + (float)(v74 * a3->f32[0])) + (float)(v76 * v84)) >= 0.0)
  {
    float v94 = v79 - v85;
    float v95 = v80 - v86;
    float v96 = v81 - v87;
    float v91 = v64 - v85;
    float v92 = v65 - v86;
    float v93 = v66 - v87;
    float v88 = v68 - v85;
    float v89 = v63 - v86;
    float v90 = v69 - v87;
  }
  else
  {
    float v88 = v79 + v85;
    float v89 = v80 + v86;
    float v90 = v81 + v87;
    float v91 = v64 + v85;
    float v92 = v65 + v86;
    float v93 = v66 + v87;
    float v94 = v68 + v85;
    float v95 = v63 + v86;
    float v96 = v69 + v87;
  }
  float v97 = (float)(v51 + a2->f32[0]) * 0.5;
  float v98 = (float)(v54 + v178) * 0.5;
  float v99 = (float)(v53 + v52) * 0.5;
  float v100 = v88 - v91;
  float v101 = v89 - v92;
  float v102 = v90 - v93;
  float v103 = v94 - v91;
  float v104 = v95 - v92;
  float v105 = v96 - v93;
  float v106 = (float)(v83 * (float)(v96 - v93)) - (float)(v84 * (float)(v95 - v92));
  float v107 = (float)(v84 * v103) - (float)(v82 * (float)(v96 - v93));
  float v108 = (float)(v82 * v104) - (float)(v83 * v103);
  float v109 = (float)((float)(v101 * v107) + (float)(v100 * v106)) + (float)(v102 * v108);
  if (v109 < 0.00001) {
    goto LABEL_86;
  }
  float v110 = v97 - v91;
  float v111 = v98 - v92;
  float v112 = v99 - v93;
  float v113 = (float)((float)(v111 * v107) + (float)(v110 * v106)) + (float)(v112 * v108);
  BOOL v114 = v113 >= 0.0 && v113 <= v109;
  if (!v114
    || ((float v115 = (float)(v111 * v102) - (float)(v112 * v101),
         float v116 = (float)(v112 * v100) - (float)(v110 * v102),
         float v117 = (float)(v110 * v101) - (float)(v111 * v100),
         float v118 = (float)((float)(v83 * v116) + (float)(v82 * v115)) + (float)(v84 * v117),
         v118 >= 0.0)
      ? (BOOL v119 = v118 <= v109)
      : (BOOL v119 = 0),
        !v119
     || ((float v120 = (float)((float)((float)(v104 * v116) + (float)(v103 * v115)) + (float)(v105 * v117))
               * (float)(1.0 / v109),
          v120 >= 0.0)
       ? (_NF = v120 < a9)
       : (_NF = 0),
         !_NF)))
  {
LABEL_86:
    unint64_t v122 = 0;
    char v123 = 0;
    *(float *)float32x4_t v191 = v79;
    *(float *)&v191[4] = v80;
    *(float *)&v191[8] = v81;
    float v192 = v64;
    float v193 = v65;
    *(float *)float32x4_t v194 = v66;
    *(float *)&v194[1] = v177;
    *(float *)&v194[2] = v64;
    *(float *)&v194[3] = v65;
    *(float *)&v194[4] = v66;
    *(float *)&v194[5] = v68;
    *(float *)&v194[6] = v63;
    *(float *)&v194[7] = v69;
    *(float *)&v194[8] = v177;
    *(float *)&v194[9] = v68;
    *(float *)&v194[10] = v63;
    *(float *)&v194[11] = v69;
    *(float *)&v194[12] = v62;
    *(float *)&v194[13] = v67;
    *(float *)&v194[14] = v176;
    *(float *)&v194[15] = v177;
    *(float *)&v194[16] = v79;
    *(float *)&v194[17] = v80;
    *(float *)&v194[18] = v81;
    *(float *)&v194[19] = v62;
    *(float *)&v194[20] = v67;
    *(float *)&v194[21] = v176;
    *(float *)&v194[22] = v177;
    do
    {
      float v124 = (float *)&v191[v122];
      float v125 = *(float *)&v191[v122];
      float v126 = *(float *)&v191[v122 + 4];
      float v127 = *(float *)&v191[v122 + 12] - v125;
      float v128 = *(float *)&v194[v122 / 4 - 1] - v126;
      float v129 = *(float *)&v191[v122 + 8];
      float v130 = *(float *)&v194[v122 / 4] - v129;
      float v131 = v97 - v125;
      float v132 = v98 - v126;
      float v133 = v99 - v129;
      float v134 = (float)((float)(v132 * v128) + (float)(v131 * v127)) + (float)((float)(v99 - v129) * v130);
      if (v134 > 0.0)
      {
        float v135 = (float)((float)(v128 * v128) + (float)(v127 * v127)) + (float)(v130 * v130);
        if (v134 < v135)
        {
          float v136 = v134 / v135;
          float v127 = v127 * v136;
          float v128 = v128 * v136;
          float v130 = v130 * v136;
        }
        float v131 = v131 - v127;
        float v132 = v132 - v128;
        float v133 = v133 - v130;
      }
      float v137 = v124[6];
      float v138 = sqrtf((float)((float)(v132 * v132) + (float)(v131 * v131)) + (float)(v133 * v133)) - v137;
      if (v138 <= 0.0)
      {
        BOOL v144 = 1;
        float v139 = 0.0;
      }
      else
      {
        float v139 = 0.0;
        if (v138 <= 10.0) {
          float v140 = 0.0;
        }
        else {
          float v140 = v138 + -10.0;
        }
        float32_t v141 = v98 + (float)(v140 * a3->f32[1]);
        float v142 = v99 + (float)(v140 * a3[1].f32[0]);
        v187.f32[0] = v97 + (float)(v140 * a3->f32[0]);
        v187.f32[1] = v141;
        float v188 = v142;
        physx::Gu::intersectRayCapsuleInternal(&v187, a3, v124, (float *)&v191[v122 + 12], (float *)&v189, v137);
        BOOL v144 = v143 != 0;
        if (v143)
        {
          float v145 = *(float *)&v189;
          if (*(float *)&v189 >= *((float *)&v189 + 1) && v143 != 1) {
            float v145 = *((float *)&v189 + 1);
          }
          float v139 = v140 + v145;
        }
      }
      int v147 = !v144;
      if (v139 < 0.0) {
        int v147 = 1;
      }
      if (v139 > a9) {
        int v147 = 1;
      }
      if (!v147) {
        a9 = v139;
      }
      v123 |= v147 ^ 1;
      v122 += 28;
    }
    while (v122 != 112);
    float v120 = a9;
    if ((v123 & 1) == 0) {
      return 0;
    }
  }
  *a8 = 0;
  if ((a7 & 3) != 0)
  {
    float v148 = v120 * a3[1].f32[0];
    *(float *)&v191[8] = *(float *)(a1 + 8) - v148;
    float v149 = (float)(*(float *)(a1 + 20) - v148) - *(float *)&v191[8];
    float32x2_t v150 = vmul_n_f32(*a3, v120);
    *(float32x2_t *)float32x4_t v191 = vsub_f32(*(float32x2_t *)a1, v150);
    float32x2_t v179 = vsub_f32(vsub_f32(*(float32x2_t *)(a1 + 12), v150), *(float32x2_t *)v191);
    float v180 = v120;
    float32x2_t v187 = v179;
    _S9 = v175;
    float v188 = v149;
    unint64_t v189 = __PAIR64__(LODWORD(v174), LODWORD(v175));
    float v190 = v173;
    edgeEdgeDist((float *)&v185, &v183, (float *)v191, (float *)&v187, a2, (float32x2_t *)&v189);
    if ((a7 & 2) != 0)
    {
      float32x2_t v154 = vsub_f32(v185, v183);
      float v155 = v186 - v184;
      *a6 = v154;
      a6[1].f32[0] = v155;
      float v156 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v154, v154).i32[1]), v154.f32[0], v154.f32[0]) + (float)(v155 * v155));
      if (v156 > 0.0)
      {
        *a6 = vmul_n_f32(v154, 1.0 / v156);
        a6[1].f32[0] = v155 * (float)(1.0 / v156);
      }
      if (v156 < 0.001)
      {
        _V4.S[1] = v179.i32[1];
        float v158 = vmuls_lane_f32(-v173, v179, 1) + (float)(v174 * v149);
        float v159 = vmlas_n_f32(-(float)(v175 * v149), v173, v179.f32[0]);
        __asm { FMLA            S3, S9, V4.S[1] }
        a6->f32[0] = v158;
        a6->f32[1] = v159;
        a6[1].f32[0] = _S3;
        float v163 = sqrtf((float)((float)(v159 * v159) + (float)(v158 * v158)) + (float)(_S3 * _S3));
        if (v163 > 0.0)
        {
          a6->f32[0] = v158 * (float)(1.0 / v163);
          a6->f32[1] = v159 * (float)(1.0 / v163);
          a6[1].f32[0] = _S3 * (float)(1.0 / v163);
        }
        if (v163 < 0.001)
        {
          float v164 = *(float *)(a1 + 20) - *(float *)(a1 + 8);
          float32x2_t v181 = vsub_f32(*(float32x2_t *)(a1 + 12), *(float32x2_t *)a1);
          float v182 = v164;
          edgeEdgeDist((float *)&v185, &v183, (float *)a1, (float *)&v181, a2, (float32x2_t *)&v189);
          float32x2_t v165 = vsub_f32(v185, v183);
          float v166 = v186 - v184;
          *a6 = v165;
          a6[1].f32[0] = v166;
          float v167 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v165, v165).i32[1]), v165.f32[0], v165.f32[0])+ (float)(v166 * v166));
          if (v167 > 0.0)
          {
            float v168 = 1.0 / v167;
            *a6 = vmul_n_f32(v165, v168);
            a6[1].f32[0] = v166 * v168;
          }
        }
      }
      *a8 = 2;
      __int16 v152 = 3;
    }
    else
    {
      __int16 v152 = 1;
    }
    float v120 = v180;
    if (a7)
    {
      float v169 = a2[3].f32[0];
      float v170 = *(float *)(a1 + 24);
      float v171 = (float)(v169 * v186) + (float)(v170 * v184);
      float v172 = 1.0 / (float)(v169 + v170);
      *a5 = vmul_n_f32(vadd_f32(vmul_n_f32(v185, v169), vmul_n_f32(v183, v170)), v172);
      a5[1].f32[0] = v172 * v171;
      *a8 = v152;
    }
  }
  *a4 = v120;
  return 1;
}

float32_t edgeEdgeDist(float *a1, float32x2_t *a2, float *a3, float *a4, float32x2_t *a5, float32x2_t *a6)
{
  float v6 = a3[1];
  float v7 = a5->f32[0] - *a3;
  float v8 = a5->f32[1] - v6;
  float v9 = a3[2];
  float v10 = a5[1].f32[0] - v9;
  float v11 = *a4;
  float v12 = a4[1];
  float v13 = a4[2];
  float v14 = (float)((float)(v12 * v12) + (float)(v11 * v11)) + (float)(v13 * v13);
  float v15 = a6->f32[1];
  float v16 = a6[1].f32[0];
  float v17 = (float)((float)(v15 * v15) + (float)(a6->f32[0] * a6->f32[0])) + (float)(v16 * v16);
  float v18 = (float)((float)(v12 * v15) + (float)(*a4 * a6->f32[0])) + (float)(v13 * v16);
  float v19 = (float)((float)(v8 * v12) + (float)(*a4 * v7)) + (float)(v13 * v10);
  float v20 = (float)((float)(v8 * v15) + (float)(a6->f32[0] * v7)) + (float)(v16 * v10);
  float v21 = (float)(v14 * v17) - (float)(v18 * v18);
  float v22 = 0.0;
  if (v21 != 0.0)
  {
    float v23 = (float)((float)(v19 * v17) - (float)(v20 * v18)) / v21;
    if (v23 >= 0.0)
    {
      float v22 = v23;
      if (v23 > 1.0) {
        float v22 = 1.0;
      }
    }
  }
  if (v17 != 0.0)
  {
    float v24 = (float)-(float)(v20 - (float)(v22 * v18)) / v17;
    if (v24 >= 0.0)
    {
      if (v24 <= 1.0) {
        goto LABEL_18;
      }
      float v22 = 0.0;
      if (v14 != 0.0)
      {
        float v26 = (float)(v19 + v18) / v14;
        float v24 = 1.0;
        if (v26 < 0.0) {
          goto LABEL_18;
        }
        float v24 = 1.0;
        float v22 = v26;
        if (v26 <= 1.0) {
          goto LABEL_18;
        }
        float v22 = 1.0;
      }
      float v24 = 1.0;
      goto LABEL_18;
    }
  }
  float v24 = 0.0;
  if (v14 == 0.0 || (float v25 = v19 / v14, v25 < 0.0))
  {
    float v22 = 0.0;
  }
  else
  {
    float v22 = 1.0;
    if (v25 <= 1.0) {
      float v22 = v25;
    }
  }
LABEL_18:
  *a1 = *a3 + (float)(v11 * v22);
  a1[1] = v6 + (float)(v12 * v22);
  a1[2] = v9 + (float)(v13 * v22);
  float32_t result = (float)(v24 * a6[1].f32[0]) + a5[1].f32[0];
  *a2 = vadd_f32(vmul_n_f32(*a6, v24), *a5);
  a2[1].f32[0] = result;
  return result;
}

uint64_t physx::Gu::sweepCapsuleTriangles_Precise(uint64_t result, uint64_t a2, uint64_t a3, float32x2_t *a4, unsigned int *a5, uint64_t a6, float *a7, __int16 *a8, float a9, float32x4_t a10, float32x4_t a11, unsigned __int8 a12, float32x4_t *a13)
{
  uint64_t v370 = *MEMORY[0x263EF8340];
  int v270 = result;
  if (!result) {
    return result;
  }
  __int16 v14 = *a8;
  float v15 = *(float *)a3;
  float v16 = *(float *)(a3 + 4);
  float v17 = *(float *)(a3 + 8);
  float v18 = *(float *)(a3 + 12);
  float v20 = *(float *)(a3 + 16);
  float v19 = *(float *)(a3 + 20);
  float v21 = (float)(*(float *)a3 - v18) * 0.5;
  float v22 = (float)(v16 - v20) * 0.5;
  float v23 = (float)(v17 - v19) * 0.5;
  float v24 = sqrtf((float)((float)(v22 * v22) + (float)(v21 * v21)) + (float)(v23 * v23));
  if (v24 == 0.0)
  {
    float v32 = *(float *)(a3 + 24);
    return physx::Gu::sweepSphereTriangles(result, a2, (float32x2_t *)a3, a4, a5, a6, a7, a12, v32, a9, (v14 & 0x80) != 0, (v14 & 0x40) != 0, (v14 & 0x10) == 0);
  }
  int v25 = a12 | ((v14 & 0x80) >> 7);
  float v26 = a4->f32[0];
  float v27 = a4->f32[1];
  a10.i32[0] = a4[1].i32[0];
  float v28 = fabsf((float)((float)((float)(v22 * (float)(1.0 / v24)) * v27)+ (float)((float)(v21 * (float)(1.0 / v24)) * a4->f32[0]))+ (float)((float)(v23 * (float)(1.0 / v24)) * a10.f32[0]));
  float v29 = (float)(v15 + v18) * 0.5;
  float v30 = (float)(v16 + v20) * 0.5;
  float v31 = (float)(v17 + v19) * 0.5;
  v285.f32[0] = v29;
  v285.f32[1] = v30;
  float v286 = v31;
  char v266 = v14;
  if (v28 >= 0.99999)
  {
    float v307 = v18 - v15;
    float v308 = v20 - v16;
    float v309 = v19 - v17;
    float v310 = (float)((float)(v308 * v308) + (float)(v307 * v307)) + (float)(v309 * v309);
    float v33 = 1.0 / v310;
    if (v310 == 0.0) {
      float v33 = 0.0;
    }
    float v311 = v33;
    v279.f32[0] = v29 + (float)(v24 * v26);
    v279.f32[1] = v30 + (float)(v24 * v27);
    float v280 = v31 + (float)(v24 * a10.f32[0]);
    if (a5) {
      unsigned int v35 = *a5;
    }
    else {
      unsigned int v35 = 0;
    }
    unsigned int v178 = 0;
    float v179 = (float)((float)(v27 * (float)(v30 + (float)(v24 * v27))) + (float)((float)(v29 + (float)(v24 * v26)) * v26))
         + (float)((float)(v31 + (float)(v24 * a10.f32[0])) * a10.f32[0]);
    float v269 = 2.0;
    unsigned int v180 = -1;
    float v181 = a9;
    float v182 = 0.0;
    float v183 = 0.0;
    float v184 = 0.0;
    while (1)
    {
      if (v35 == v178) {
        unsigned int v185 = 0;
      }
      else {
        unsigned int v185 = v178;
      }
      if (v178) {
        unsigned int v186 = v185;
      }
      else {
        unsigned int v186 = v35;
      }
      float32x2_t v187 = (float *)(a2 + 36 * v186);
      float v188 = *(float *)(a3 + 24);
      float v189 = v187[3];
      float v190 = *v187;
      float v191 = v187[1];
      float v192 = v187[4];
      float v193 = v187[5];
      float v194 = v187[2];
      float v195 = v187[6];
      float v196 = v187[7];
      float v197 = v187[8];
      float v198 = (float)((float)(*v187 + v189) + v195) * 0.33333;
      float v199 = (float)((float)(v191 + v192) + v196) * 0.33333;
      float v200 = (float)((float)(v194 + v193) + v197) * 0.33333;
      float v201 = a4->f32[0];
      float v202 = a4->f32[1];
      float v203 = a4[1].f32[0];
      float v204 = fmaxf((float)((float)((float)(v199 - v279.f32[1]) * v202) + (float)((float)(v198 - v279.f32[0]) * a4->f32[0]))+ (float)((float)(v200 - v280) * v203), 0.0);
      if (v204 >= v181) {
        float v204 = v181;
      }
      float v205 = (float)(sqrtf((float)((float)((float)((float)(v199 - v279.f32[1]) - (float)(v202 * v204))* (float)((float)(v199 - v279.f32[1]) - (float)(v202 * v204)))+ (float)((float)((float)(v198 - v279.f32[0]) - (float)(v201 * v204))* (float)((float)(v198 - v279.f32[0]) - (float)(v201 * v204))))+ (float)((float)((float)(v200 - v280) - (float)(v203 * v204))* (float)((float)(v200 - v280) - (float)(v203 * v204))))- v188)+ -0.0001;
      BOOL v163 = v205 < 0.0;
      float v206 = v205 * v205;
      BOOL v208 = !v163
          && v206 > (float)((float)((float)((float)(v199 - v191) * (float)(v199 - v191))
                                  + (float)((float)(v198 - v190) * (float)(v198 - v190)))
                          + (float)((float)(v200 - v194) * (float)(v200 - v194)))
          && v206 > (float)((float)((float)((float)(v199 - v192) * (float)(v199 - v192))
                                  + (float)((float)(v198 - v189) * (float)(v198 - v189)))
                          + (float)((float)(v200 - v193) * (float)(v200 - v193)));
      float v209 = (float)((float)((float)(v199 - v196) * (float)(v199 - v196))
                   + (float)((float)(v198 - v195) * (float)(v198 - v195)))
           + (float)((float)(v200 - v197) * (float)(v200 - v197));
      if (!v208 || v206 <= v209)
      {
        float v211 = (float)((float)(v191 * v202) + (float)(v190 * v201)) + (float)(v194 * v203);
        float v212 = (float)((float)(v192 * v202) + (float)(v189 * v201)) + (float)(v193 * v203);
        float v213 = (float)((float)(v196 * v202) + (float)(v195 * v201)) + (float)(v197 * v203);
        if (v211 >= v212) {
          float v214 = (float)((float)(v192 * v202) + (float)(v189 * v201)) + (float)(v193 * v203);
        }
        else {
          float v214 = (float)((float)(v191 * v202) + (float)(v190 * v201)) + (float)(v194 * v203);
        }
        if (v214 >= v213) {
          float v214 = (float)((float)(v196 * v202) + (float)(v195 * v201)) + (float)(v197 * v203);
        }
        float v215 = v188 + 0.002;
        if (v214 <= (float)((float)(v179 + v181) + v215))
        {
          float v216 = v179 - v215;
          BOOL v217 = v212 < v216 && v211 < v216;
          if (!v217 || v213 >= v216)
          {
            float v219 = v189 - v190;
            float v220 = v192 - v191;
            float v221 = v193 - v194;
            float v222 = v195 - v190;
            float v223 = v196 - v191;
            float v224 = (float)(v220 * (float)(v197 - v194)) - (float)(v221 * v223);
            float v225 = (float)(v221 * v222) - (float)(v219 * (float)(v197 - v194));
            float v226 = (float)(v219 * v223) - (float)(v220 * v222);
            *(float *)&unint64_t v287 = v224;
            *((float *)&v287 + 1) = v225;
            float v288 = v226;
            if ((v25 & 1) != 0
              || (float)((float)((float)(v225 * v202) + (float)(v224 * v201)) + (float)(v226 * v203)) <= 0.0)
            {
              if ((v14 & 0x10) == 0)
              {
                if (physx::Gu::intersectCapsuleTriangle((float *)&v287, (float *)(a2 + 36 * v186), v187 + 3, v187 + 6, (float *)a3, &v307))
                {
                  float v250 = -a4[1].f32[0];
                  *(float32x2_t *)a7 = vneg_f32(*a4);
                  a7[2] = v250;
                  *(_DWORD *)(a6 + 16) = v186;
                  *(_WORD *)(a6 + 20) = 1026;
                  float v251 = -a4[1].f32[0];
                  *(float32x2_t *)(a6 + 36) = vneg_f32(*a4);
                  *(float *)(a6 + 44) = v251;
                  *(_DWORD *)(a6 + 48) = 0;
                  return 1;
                }
                float v225 = *((float *)&v287 + 1);
                float v224 = *(float *)&v287;
                float v226 = v288;
                LOBYTE(v14) = v266;
              }
              float v227 = sqrtf((float)((float)(v225 * v225) + (float)(v224 * v224)) + (float)(v226 * v226));
              if (v227 != 0.0)
              {
                float v228 = 1.0 / v227;
                *(float *)&unint64_t v287 = v224 * v228;
                *((float *)&v287 + 1) = v225 * v228;
                float v288 = v226 * v228;
                LODWORD(v283[0]) = 0;
                v278.i8[0] = 0;
                if (physx::Gu::sweepSphereVSTri(v187, (float *)&v287, &v279, a4, (float *)v283, &v278, 0, *(float *)(a3 + 24))&& *(float *)v283 <= a9)
                {
                  float v229 = -fabsf((float)((float)(*((float *)&v287 + 1) * a4->f32[1]) + (float)(*(float *)&v287 * a4->f32[0]))+ (float)(v288 * a4[1].f32[0]));
                  if (*(float *)v283 <= v181) {
                    float v230 = v181;
                  }
                  else {
                    float v230 = *(float *)v283;
                  }
                  if (v230 >= 1.0) {
                    float v231 = v230 * 0.001;
                  }
                  else {
                    float v231 = 0.001;
                  }
                  LOBYTE(v14) = v266;
                  if ((float)(v181 - v231) > *(float *)v283 || v269 > v229 && (float)(v181 + v231) > *(float *)v283) {
                    goto LABEL_153;
                  }
                  BOOL v232 = *(float *)v283 < v181;
                  if (v269 != v229) {
                    BOOL v232 = 0;
                  }
                  if (*(float *)v283 == 0.0 || v232)
                  {
LABEL_153:
                    float v183 = *((float *)&v287 + 1);
                    float v184 = *(float *)&v287;
                    float v182 = v288;
                    if ((v266 & 0x40) != 0)
                    {
                      float v181 = *(float *)v283;
                      unsigned int v180 = v186;
LABEL_156:
                      if (v180 != -1)
                      {
                        char v233 = v14;
                        physx::Gu::computeSphereTriImpactData((float *)&v287, (float *)v283, &v279, a4, a2 + 36 * v180, v181);
                        if ((v233 & 0x80) == 0 || a12)
                        {
                          float v234 = *(float *)v283;
                          uint64_t v235 = a6;
                          float32x2_t v236 = a7;
                        }
                        else
                        {
                          float v234 = *(float *)v283;
                          uint64_t v235 = a6;
                          float32x2_t v236 = a7;
                          if ((float)((float)((float)(v183 * a4->f32[1]) + (float)(v184 * a4->f32[0]))
                                     + (float)(v182 * a4[1].f32[0])) > 0.0)
                          {
                            float v234 = -*(float *)v283;
                            *(float32x2_t *)((char *)v283 + 4) = vneg_f32(*(float32x2_t *)((char *)v283 + 4));
                          }
                        }
                        *(void *)(v235 + 24) = v287;
                        *(float *)(v235 + 32) = v288;
                        *(float *)(v235 + 36) = v234;
                        *(void *)(v235 + 40) = *(void *)((char *)v283 + 4);
                        *(float *)(v235 + 48) = v181;
                        *(_DWORD *)(v235 + 16) = v180;
                        *(_WORD *)(v235 + 20) = 3;
                        *float32x2_t v236 = v184;
                        v236[1] = v183;
                        float32_t result = 1;
                        v236[2] = v182;
                        return result;
                      }
                      return 0;
                    }
                    float v269 = v229;
                    float v181 = *(float *)v283;
                    unsigned int v180 = v186;
                  }
                }
                else
                {
                  LOBYTE(v14) = v266;
                }
              }
            }
          }
        }
      }
      if (v270 == ++v178) {
        goto LABEL_156;
      }
    }
  }
  *(_DWORD *)(a6 + 16) = -1;
  float v262 = (float)(v17 - v19) * 0.5;
  if (a5) {
    unsigned int v264 = *a5;
  }
  else {
    unsigned int v264 = 0;
  }
  int v36 = 0;
  float v37 = *(float *)(a3 + 24);
  float v38 = (float)((float)(v30 * v27) + (float)(v29 * v26)) + (float)(v31 * a10.f32[0]);
  v279.f32[0] = v18 - v15;
  v279.f32[1] = v20 - v16;
  float v280 = v19 - v17;
  float v281 = (float)((float)((float)(v20 - v16) * (float)(v20 - v16)) + (float)(v279.f32[0] * v279.f32[0]))
       + (float)((float)(v19 - v17) * (float)(v19 - v17));
  float v39 = 1.0 / v281;
  a10.i32[1] = 0;
  if (v281 == 0.0) {
    float v39 = 0.0;
  }
  float v282 = v39;
  float v40 = v38 - (float)(v37 + 0.002);
  float v258 = 2.0;
  float v259 = (float)(v16 - v20) * 0.5;
  float v41 = a9;
  HIDWORD(v42) = 0;
  *(float *)&__int32 v253 = 0.0;
  float v254 = 0.0;
  float v255 = 0.0;
  float v260 = v21;
  float v261 = v38;
  while (1)
  {
    unsigned int v43 = v36 == v264 ? 0 : v36;
    unsigned int v44 = v36 ? v43 : v264;
    float v45 = (float *)(a2 + 36 * v44);
    float v46 = v45 + 3;
    float v47 = v45[1];
    float v48 = v45[3] - *v45;
    float v49 = v45[4] - v47;
    float32_t v50 = v45 + 6;
    float v51 = v45[6] - *v45;
    float v52 = v45[7] - v47;
    float v53 = v45[2];
    float v54 = v45[5] - v53;
    float v55 = v45[8] - v53;
    *(float *)&double v42 = (float)(v49 * v55) - (float)(v54 * v52);
    a11.f32[0] = (float)(v54 * v51) - (float)(v48 * v55);
    a10.f32[0] = (float)(v48 * v52) - (float)(v49 * v51);
    v278.i64[0] = __PAIR64__(a11.u32[0], LODWORD(v42));
    v278.i32[2] = a10.i32[0];
    if ((v25 & 1) != 0
      || (float v56 = (float)(a11.f32[0] * a4->f32[1]) + (float)(*(float *)&v42 * a4->f32[0]),
          a11.i32[0] = a4[1].i32[0],
          *(float *)&double v42 = v56 + (float)(a10.f32[0] * a11.f32[0]),
          *(float *)&v42 <= 0.0))
    {
      if (!a13 || physx::Gu::intersectTriangleBox(a13, (float *)(a2 + 36 * v44), v46, v50, v42, a10, a11)) {
        break;
      }
    }
LABEL_96:
    if (++v36 == v270)
    {
      uint64_t v177 = a6;
      unsigned int v44 = *(_DWORD *)(a6 + 16);
      float v171 = v41;
      char v175 = v266;
      float v174 = *(float *)&v253;
      goto LABEL_165;
    }
  }
  if ((v266 & 0x10) == 0 && physx::Gu::intersectCapsuleTriangle(v278.f32, v45, v46, v50, (float *)a3, (float *)&v279))
  {
    float v237 = -a4[1].f32[0];
    *(float32x2_t *)a7 = vneg_f32(*a4);
    a7[2] = v237;
    *(_DWORD *)(a6 + 16) = v44;
    *(_WORD *)(a6 + 20) = 1026;
    float v238 = -a4[1].f32[0];
    *(float32x2_t *)(a6 + 36) = vneg_f32(*a4);
    *(float *)(a6 + 44) = v238;
    *(_DWORD *)(a6 + 48) = 0;
    return 1;
  }
  float v57 = v45[1];
  float v58 = *v45 - v21;
  float v59 = v57 - v22;
  float v60 = v45[2];
  float v61 = v45[3];
  float v62 = v60 - v262;
  float v63 = v61 - v21;
  float v64 = v45[4];
  float v65 = v45[5];
  float v66 = v64 - v22;
  float v67 = v65 - v262;
  float v68 = v45[6];
  float v69 = v45[7];
  float v70 = v68 - v21;
  float v71 = v69 - v22;
  float v72 = v45[8];
  float v73 = v72 - v262;
  float v74 = v21 + *v45;
  float v75 = v22 + v57;
  float v76 = v262 + v60;
  float v77 = v21 + v61;
  float v78 = v22 + v64;
  float v79 = v262 + v65;
  float v80 = v21 + v68;
  float v81 = v22 + v69;
  float v82 = v262 + v72;
  float v83 = (float)(v68 - v21) - v58;
  float v267 = v58;
  float v265 = v83;
  if ((float)((float)((float)(v22 * v278.f32[1]) + (float)(v278.f32[0] * v21)) + (float)(v278.f32[2] * v262)) >= 0.0)
  {
    float v84 = (float)((float)(v78 - v75) * (float)(v82 - v76)) - (float)((float)(v79 - v76) * (float)(v81 - v75));
    float v85 = (float)((float)(v79 - v76) * (float)(v80 - v74)) - (float)((float)(v77 - v74) * (float)(v82 - v76));
    float v87 = v21 + *v45;
    float v88 = v75;
    float v89 = v262 + v60;
    float v90 = v77;
    float v91 = v22 + v64;
    float v92 = (float)((float)(v77 - v74) * (float)(v81 - v75)) - (float)((float)(v78 - v75) * (float)(v80 - v74));
    float v93 = v79;
    float v94 = v80;
    float v95 = v81;
    float v96 = v82;
  }
  else
  {
    float v84 = (float)((float)(v66 - v59) * (float)(v73 - v62)) - (float)((float)(v67 - v62) * (float)(v71 - v59));
    float v85 = (float)((float)(v67 - v62) * v83) - (float)((float)(v63 - v58) * (float)(v73 - v62));
    float v86 = -(float)((float)(v66 - v59) * v83);
    float v87 = *v45 - v21;
    float v88 = v59;
    float v89 = v60 - v262;
    float v90 = v63;
    float v91 = v64 - v22;
    float v92 = v86 + (float)((float)(v63 - v58) * (float)(v71 - v59));
    float v93 = v67;
    float v94 = v70;
    float v95 = v71;
    float v96 = v73;
  }
  float v307 = v87;
  float v308 = v88;
  float v309 = v89;
  float v310 = v90;
  float v311 = v91;
  float v312 = v93;
  float v313 = v94;
  float v314 = v95;
  unint64_t v287 = __PAIR64__(LODWORD(v85), LODWORD(v84));
  float v288 = v92;
  float v315 = v96;
  float v316 = v63;
  float v317 = v66;
  float v318 = v67;
  float v319 = v77;
  float v320 = v78;
  float v321 = v79;
  float v322 = v80;
  float v323 = v81;
  float v324 = v82;
  float v97 = v80 - v63;
  float v98 = v81 - v66;
  float v99 = v82 - v67;
  float v100 = (float)((float)(v78 - v66) * (float)(v82 - v67)) - (float)((float)(v79 - v67) * (float)(v81 - v66));
  float v101 = (float)((float)(v79 - v67) * (float)(v80 - v63)) - (float)((float)(v77 - v63) * (float)(v82 - v67));
  float v102 = (float)((float)(v77 - v63) * (float)(v81 - v66)) - (float)((float)(v78 - v66) * (float)(v80 - v63));
  float v103 = a4->f32[0];
  float v104 = a4->f32[1];
  float v105 = a4[1].f32[0];
  if ((float)((float)((float)(v101 * v104) + (float)(v100 * a4->f32[0])) + (float)(v102 * v105)) > 0.0)
  {
    float v319 = v80;
    float v320 = v81;
    float v321 = v82;
    float v322 = v77;
    float v100 = -v100;
    float v101 = -v101;
    float v102 = -v102;
    float v323 = v78;
    float v324 = v79;
  }
  float v289 = v100;
  float v290 = v101;
  float v291 = v102;
  float v325 = v63;
  float v326 = v66;
  float v327 = v67;
  float v328 = v80;
  float v329 = v81;
  float v330 = v82;
  float v331 = v70;
  float v332 = v71;
  float v333 = v73;
  float v106 = (float)(v98 * (float)(v73 - v67)) - (float)(v99 * (float)(v71 - v66));
  float v107 = (float)(v99 * (float)(v70 - v63)) - (float)(v97 * (float)(v73 - v67));
  float v108 = (float)(v97 * (float)(v71 - v66)) - (float)(v98 * (float)(v70 - v63));
  if ((float)((float)((float)(v107 * v104) + (float)(v106 * v103)) + (float)(v108 * v105)) > 0.0)
  {
    float v328 = v70;
    float v329 = v71;
    float v330 = v73;
    float v331 = v80;
    float v106 = -v106;
    float v107 = -v107;
    float v108 = -v108;
    float v332 = v81;
    float v333 = v82;
  }
  float v292 = v106;
  float v293 = v107;
  float v294 = v108;
  float v334 = v267;
  float v335 = v59;
  float v336 = v62;
  float v337 = v70;
  float v338 = v71;
  float v339 = v73;
  float v340 = v80;
  float v341 = v81;
  float v342 = v82;
  float v109 = v80 - v267;
  float v110 = v81 - v59;
  float v111 = v82 - v62;
  float v112 = (float)((float)(v71 - v59) * (float)(v82 - v62)) - (float)((float)(v73 - v62) * (float)(v81 - v59));
  float v113 = (float)((float)(v73 - v62) * (float)(v80 - v267)) - (float)(v265 * (float)(v82 - v62));
  float v114 = (float)(v265 * (float)(v81 - v59)) - (float)((float)(v71 - v59) * (float)(v80 - v267));
  if ((float)((float)((float)(v113 * v104) + (float)(v112 * v103)) + (float)(v114 * v105)) > 0.0)
  {
    float v337 = v80;
    float v338 = v81;
    float v339 = v82;
    float v340 = v70;
    float v112 = -v112;
    float v113 = -v113;
    float v114 = -v114;
    float v341 = v71;
    float v342 = v73;
  }
  float v295 = v112;
  float v296 = v113;
  float v297 = v114;
  float v343 = v267;
  float v344 = v59;
  float v345 = v62;
  float v346 = v80;
  float v347 = v81;
  float v348 = v82;
  float v349 = v74;
  float v350 = v75;
  float v351 = v76;
  float v115 = (float)(v110 * (float)(v76 - v62)) - (float)(v111 * (float)(v75 - v59));
  float v116 = (float)(v111 * (float)(v74 - v267)) - (float)(v109 * (float)(v76 - v62));
  float v117 = (float)(v109 * (float)(v75 - v59)) - (float)(v110 * (float)(v74 - v267));
  float v22 = v259;
  if ((float)((float)((float)(v116 * v104) + (float)(v115 * v103)) + (float)(v117 * v105)) > 0.0)
  {
    float v346 = v74;
    float v347 = v75;
    float v348 = v76;
    float v349 = v80;
    float v115 = -v115;
    float v116 = -v116;
    float v117 = -v117;
    float v350 = v81;
    float v351 = v82;
  }
  float v21 = v260;
  float v298 = v115;
  float v299 = v116;
  float v300 = v117;
  float v352 = v74;
  float v353 = v75;
  float v354 = v76;
  float v355 = v77;
  float v356 = v78;
  float v357 = v79;
  float v358 = v63;
  float v359 = v66;
  float v360 = v67;
  float v118 = v63 - v74;
  float v119 = v66 - v75;
  float v120 = v67 - v76;
  float v121 = (float)((float)(v78 - v75) * (float)(v67 - v76)) - (float)((float)(v79 - v76) * (float)(v66 - v75));
  float v122 = (float)((float)(v79 - v76) * (float)(v63 - v74)) - (float)((float)(v77 - v74) * (float)(v67 - v76));
  float v123 = (float)((float)(v77 - v74) * (float)(v66 - v75)) - (float)((float)(v78 - v75) * (float)(v63 - v74));
  if ((float)((float)((float)(v122 * v104) + (float)(v121 * v103)) + (float)(v123 * v105)) > 0.0)
  {
    float v355 = v63;
    float v356 = v66;
    float v357 = v67;
    float v358 = v77;
    float v121 = -v121;
    float v122 = -v122;
    float v123 = -v123;
    float v359 = v78;
    float v360 = v79;
  }
  float v301 = v121;
  float v302 = v122;
  float v303 = v123;
  float v361 = v74;
  float v362 = v75;
  float v363 = v76;
  float v364 = v63;
  float v365 = v66;
  float v366 = v67;
  float v367 = v267;
  float v368 = v59;
  float v369 = v62;
  float v124 = v267 - v74;
  float v125 = v59 - v75;
  float v126 = (float)(v119 * (float)(v62 - v76)) - (float)(v120 * v125);
  float v127 = (float)(v120 * v124) - (float)(v118 * (float)(v62 - v76));
  float v128 = (float)(v118 * v125) - (float)(v119 * v124);
  if ((float)((float)((float)(v127 * v104) + (float)(v126 * v103)) + (float)(v128 * v105)) > 0.0)
  {
    float v364 = v267;
    float v365 = v59;
    float v366 = v62;
    float v367 = v63;
    float v126 = -v126;
    float v127 = -v127;
    float v128 = -v128;
    float v368 = v66;
    float v369 = v67;
  }
  float v130 = v278.f32[1];
  float v129 = v278.f32[0];
  float v131 = v278.f32[2];
  float v304 = v126;
  float v305 = v127;
  float v306 = v128;
  float v132 = sqrtf((float)((float)(v130 * v130) + (float)(v129 * v129)) + (float)(v131 * v131));
  if (v132 > 0.0)
  {
    float v133 = 1.0 / v132;
    float v129 = v278.f32[0] * v133;
    float v130 = v278.f32[1] * v133;
    v278.f32[0] = v278.f32[0] * v133;
    v278.f32[1] = v278.f32[1] * v133;
    float v131 = v278.f32[2] * v133;
    v278.f32[2] = v278.f32[2] * v133;
  }
  uint64_t v134 = 0;
  float v268 = -fabsf((float)((float)(v104 * v130) + (float)(v129 * v103)) + (float)(v131 * v105));
  float v135 = &v307;
  while (1)
  {
    float v136 = (float *)((char *)&v287 + v134);
    float v137 = a4->f32[0];
    float v138 = a4->f32[1];
    float v139 = a4[1].f32[0];
    if ((v25 & 1) == 0
      && (float)((float)((float)(v138 * v136[1]) + (float)(*v136 * v137)) + (float)(v136[2] * v139)) > 0.0)
    {
      goto LABEL_89;
    }
    float v140 = *v135;
    float v141 = v135[1];
    float v143 = v135[2];
    float v142 = v135[3];
    float v145 = v135[4];
    float v144 = v135[5];
    float v146 = v135[6];
    float v147 = v135[7];
    float v148 = v135[8];
    float v149 = (float)((float)(*v135 + v142) + v146) * 0.33333;
    float v150 = (float)((float)(v141 + v145) + v147) * 0.33333;
    float v151 = (float)((float)(v143 + v144) + v148) * 0.33333;
    float v152 = fmaxf((float)((float)(v138 * (float)(v150 - v285.f32[1])) + (float)((float)(v149 - v285.f32[0]) * v137))+ (float)((float)(v151 - v286) * v139), 0.0);
    if (v152 >= v41) {
      float v152 = v41;
    }
    float v153 = (float)(sqrtf((float)((float)((float)((float)(v150 - v285.f32[1]) - (float)(v138 * v152))* (float)((float)(v150 - v285.f32[1]) - (float)(v138 * v152)))+ (float)((float)((float)(v149 - v285.f32[0]) - (float)(v137 * v152))* (float)((float)(v149 - v285.f32[0]) - (float)(v137 * v152))))+ (float)((float)((float)(v151 - v286) - (float)(v139 * v152))* (float)((float)(v151 - v286) - (float)(v139 * v152))))- v37)+ -0.0001;
    BOOL v163 = v153 < 0.0;
    float v154 = v153 * v153;
    BOOL v155 = !v163
        && v154 > (float)((float)((float)((float)(v150 - v141) * (float)(v150 - v141))
                                + (float)((float)(v149 - v140) * (float)(v149 - v140)))
                        + (float)((float)(v151 - v143) * (float)(v151 - v143)));
    BOOL v156 = v155
        && v154 > (float)((float)((float)((float)(v150 - v145) * (float)(v150 - v145))
                                + (float)((float)(v149 - v142) * (float)(v149 - v142)))
                        + (float)((float)(v151 - v144) * (float)(v151 - v144)));
    float v157 = (float)((float)((float)(v150 - v147) * (float)(v150 - v147))
                 + (float)((float)(v149 - v146) * (float)(v149 - v146)))
         + (float)((float)(v151 - v148) * (float)(v151 - v148));
    if (v156 && v154 > v157) {
      goto LABEL_89;
    }
    float v159 = (float)((float)(v138 * v141) + (float)(v140 * v137)) + (float)(v143 * v139);
    float v160 = (float)((float)(v138 * v145) + (float)(v142 * v137)) + (float)(v144 * v139);
    float v161 = (float)((float)(v138 * v147) + (float)(v146 * v137)) + (float)(v148 * v139);
    if (v159 >= v160) {
      float v162 = v160;
    }
    else {
      float v162 = v159;
    }
    if (v162 >= v161) {
      float v162 = v161;
    }
    if (v162 > (float)((float)(v37 + 0.002) + (float)(v261 + v41))) {
      goto LABEL_89;
    }
    BOOL v163 = v161 < v40 && v160 < v40;
    if (v163 && v159 < v40) {
      goto LABEL_89;
    }
    float32x2_t v165 = (float *)((char *)&v287 + v134);
    float v167 = *(float *)((char *)&v287 + v134);
    float v166 = *(float *)((char *)&v287 + v134 + 4);
    float v168 = *(float *)((char *)&v287 + v134 + 8);
    float v169 = sqrtf((float)((float)(v166 * v166) + (float)(v167 * v167)) + (float)(v168 * v168));
    if (v169 == 0.0) {
      goto LABEL_89;
    }
    float v170 = 1.0 / v169;
    *float v136 = v167 * v170;
    v165[1] = v166 * v170;
    v165[2] = v168 * v170;
    v277.i32[0] = 0;
    v276.i8[0] = 0;
    if (!physx::Gu::sweepSphereVSTri(v135, v136, &v285, a4, v277.f32, &v276, 0, v37)) {
      goto LABEL_89;
    }
    float v171 = v277.f32[0];
    if (v277.f32[0] > a9) {
      goto LABEL_89;
    }
    float v172 = v277.f32[0] <= v41 ? v41 : v277.f32[0];
    float v173 = v172 >= 1.0 ? v172 * 0.001 : 0.001;
    if ((float)(v41 - v173) <= v277.f32[0] && (v258 <= v268 || (float)(v41 + v173) <= v277.f32[0]))
    {
      BOOL v176 = v258 == v268;
      if (v277.f32[0] >= v41) {
        BOOL v176 = 0;
      }
      if (v277.f32[0] != 0.0 && !v176) {
        goto LABEL_89;
      }
    }
    *(_DWORD *)(a6 + 16) = v44;
    a10 = *(float32x4_t *)v135;
    a11 = *(float32x4_t *)(v135 + 4);
    v283[0] = *(_OWORD *)v135;
    v283[1] = a11;
    int v284 = *((_DWORD *)v135 + 8);
    float v174 = v278.f32[2];
    float v254 = v278.f32[1];
    float v255 = v278.f32[0];
    char v175 = v266;
    if ((v266 & 0x40) != 0) {
      break;
    }
    __int32 v253 = v278.i32[2];
    float v41 = v171;
    float v258 = v268;
LABEL_89:
    v134 += 12;
    v135 += 9;
    if (v134 == 84) {
      goto LABEL_96;
    }
  }
  uint64_t v177 = a6;
LABEL_165:
  if (v44 == -1) {
    return 0;
  }
  *(float *)(v177 + 48) = v171;
  *a7 = v255;
  a7[1] = v254;
  char v239 = v175;
  a7[2] = v174;
  physx::Gu::computeSphereTriImpactData((float *)(v177 + 24), (float *)(v177 + 36), &v285, a4, (uint64_t)v283, v171);
  if (v239 < 0
    && (a12 & 1) == 0
    && (float)((float)((float)(v254 * a4->f32[1]) + (float)(v255 * a4->f32[0])) + (float)(v174 * a4[1].f32[0])) > 0.0)
  {
    float v240 = -*(float *)(v177 + 44);
    *(float32x2_t *)(v177 + 36) = vneg_f32(*(float32x2_t *)(v177 + 36));
    *(float *)(v177 + 44) = v240;
  }
  unsigned int v241 = *(_DWORD *)(v177 + 16);
  if (v241 != -1)
  {
    uint64_t v242 = a2 + 36 * v241;
    float v243 = *(float *)(v177 + 48);
    float v244 = v243 * a4[1].f32[0];
    v245.i32[3] = 0;
    float32x4_t v277 = 0u;
    float32x4_t v278 = 0u;
    float32x2_t v246 = vmul_n_f32(*a4, v243);
    *(float32x2_t *)v245.f32 = vadd_f32(v246, *(float32x2_t *)a3);
    v245.f32[2] = v244 + *(float *)(a3 + 8);
    float32x4_t v276 = v245;
    *(float32x2_t *)v247.f32 = vadd_f32(v246, *(float32x2_t *)(a3 + 12));
    v247.f32[2] = v244 + *(float *)(a3 + 20);
    v247.i32[3] = 0;
    v248.i64[0] = *(void *)v242;
    v248.i64[1] = *(unsigned int *)(v242 + 8);
    float32x4_t v274 = v248;
    float32x4_t v275 = v247;
    v247.i64[0] = *(void *)(v242 + 12);
    v247.i64[1] = *(unsigned int *)(v242 + 20);
    float32x4_t v273 = v247;
    v247.i64[0] = *(void *)(v242 + 24);
    v247.i64[1] = *(unsigned int *)(v242 + 32);
    float32x4_t v272 = v247;
    physx::Gu::distanceSegmentTriangleSquared(&v276, &v275, &v274, &v273, &v272, &v278, &v277);
    __int32 v249 = v277.i32[2];
    *(void *)(v177 + 24) = v277.i64[0];
    *(_DWORD *)(v177 + 32) = v249;
    *(_WORD *)(v177 + 20) = 3;
  }
  return 1;
}

uint64_t physx::Gu::sweepSphereCapsule(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float *a4, float32x2_t *a5, float32x2_t *a6, _WORD *a7, float a8)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  float v15 = a2[3].f32[0];
  float v16 = a1[1].f32[1];
  float v17 = v15 + v16;
  float v18 = a2->f32[0];
  float v19 = a2[1].f32[1];
  if ((*a7 & 0x10) != 0)
  {
    float v22 = a2->f32[1];
    float v21 = a2[2].f32[0];
  }
  else
  {
    float v20 = v19 - v18;
    float v21 = a2[2].f32[0];
    float v22 = a2->f32[1];
    float v23 = a2[1].f32[0];
    float v24 = v21 - v22;
    float v25 = a2[2].f32[1] - v23;
    float v26 = a1->f32[0] - v18;
    float v27 = a1->f32[1] - v22;
    float v28 = a1[1].f32[0] - v23;
    float v29 = (float)((float)((float)(v21 - v22) * v27) + (float)(v26 * (float)(v19 - v18))) + (float)(v28 * v25);
    if (v29 > 0.0)
    {
      float v30 = (float)((float)(v24 * v24) + (float)(v20 * v20)) + (float)(v25 * v25);
      if (v29 < v30)
      {
        float v31 = v29 / v30;
        float v20 = v20 * v31;
        float v24 = v24 * v31;
        float v25 = v25 * v31;
      }
      float v26 = v26 - v20;
      float v27 = v27 - v24;
      float v28 = v28 - v25;
    }
    if ((float)((float)((float)(v27 * v27) + (float)(v26 * v26)) + (float)(v28 * v28)) < (float)(v17 * v17))
    {
      *a4 = 0.0;
      float32_t v32 = -a3[1].f32[0];
      *a6 = vneg_f32(*a3);
      a6[1].f32[0] = v32;
      return 1;
    }
  }
  float v33 = a2[1].f32[0];
  float v34 = a2[2].f32[1];
  if (v18 == v19 && v22 == v21 && v33 == v34)
  {
    float v55 = -(float)(a3[1].f32[0] * a8);
    float32x2_t v79 = vmul_n_f32(vneg_f32(*a3), a8);
    float v80 = v55;
    float v78 = a8;
    uint64_t result = physx::Gu::sweepSphereSphere(a1, a2, &v79, a4, a6, v16, v15);
    if (!result) {
      return result;
    }
    *a4 = *a4 * v78;
    float v57 = a1[1].f32[1];
    float32_t v58 = (float)(v57 * a6[1].f32[0]) + a1[1].f32[0];
    *a5 = vadd_f32(vmul_n_f32(*a6, v57), *a1);
    a5[1].f32[0] = v58;
    return 1;
  }
  v79.i32[0] = a2->i32[0];
  v79.f32[1] = v22;
  float v80 = v33;
  float32x2_t v81 = (float32x2_t)__PAIR64__(LODWORD(v21), LODWORD(v19));
  float v82 = v34;
  float v83 = v15 + v16;
  float v37 = v19 - v18;
  float v38 = v21 - v22;
  float v39 = v34 - v33;
  float v40 = COERCE_FLOAT(*a1) - v18;
  float v41 = COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)) - v22;
  float v42 = a1[1].f32[0];
  float v43 = v42 - v33;
  float v44 = (float)((float)(v38 * v41) + (float)(v40 * v37)) + (float)((float)(v42 - v33) * (float)(v34 - v33));
  if (v44 > 0.0)
  {
    float v45 = (float)((float)(v38 * v38) + (float)(v37 * v37)) + (float)(v39 * v39);
    if (v44 < v45)
    {
      float v46 = v44 / v45;
      float v37 = v37 * v46;
      float v38 = v38 * v46;
      float v39 = v39 * v46;
    }
    float v40 = v40 - v37;
    float v41 = v41 - v38;
    float v43 = v43 - v39;
  }
  float v47 = sqrtf((float)((float)(v41 * v41) + (float)(v40 * v40)) + (float)(v43 * v43)) - v17;
  if (v47 <= 0.0)
  {
    BOOL v52 = 0;
    float v51 = 0.0;
  }
  else
  {
    float v48 = v47 + -10.0;
    if (v47 <= 10.0) {
      float v48 = 0.0;
    }
    float v49 = v42 + (float)(v48 * a3[1].f32[0]);
    float v76 = v48;
    float v77 = a8;
    float32x2_t v84 = vadd_f32(*a1, vmul_n_f32(*a3, v48));
    float v85 = v49;
    physx::Gu::intersectRayCapsuleInternal(&v84, a3, (float *)&v79, (float *)&v81, &v86, v17);
    float v51 = 0.0;
    BOOL v52 = v50 == 0;
    if (v50)
    {
      float v53 = v86;
      if (v86 >= v87 && v50 != 1) {
        float v53 = v87;
      }
      float v51 = v76 + v53;
    }
    a8 = v77;
  }
  if (v51 < 0.0) {
    BOOL v52 = 1;
  }
  if (v51 > a8) {
    BOOL v52 = 1;
  }
  if (!v52)
  {
    *a4 = v51;
    float v59 = v51 * a3[1].f32[0];
    float v60 = v80 - v59;
    float v61 = v82 - v59;
    float32x2_t v62 = vmul_n_f32(*a3, v51);
    float32x2_t v63 = vsub_f32(v79, v62);
    float32x2_t v64 = vsub_f32(vsub_f32(v81, v62), v63);
    float v65 = v61 - v60;
    float v66 = vmlas_n_f32(vmuls_lane_f32(a1->f32[1] - v63.f32[1], v64, 1), a1->f32[0] - v63.f32[0], v64.f32[0])
        + (float)((float)(a1[1].f32[0] - v60) * v65);
    float v67 = 0.0;
    if (v66 > 0.0)
    {
      float v68 = (float)((float)(v64.f32[1] * v64.f32[1]) + (float)(v64.f32[0] * v64.f32[0])) + (float)(v65 * v65);
      float v67 = 1.0;
      if (v66 < v68) {
        float v67 = v66 / v68;
      }
    }
    float32_t v69 = v60 + (float)(v65 * v67);
    a5[1].f32[0] = v69;
    float32x2_t v70 = vadd_f32(v63, vmul_n_f32(v64, v67));
    *a5 = v70;
    float32x2_t v71 = vsub_f32(v70, *a1);
    float v72 = v69 - a1[1].f32[0];
    *a6 = v71;
    a6[1].f32[0] = v72;
    float v73 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v71, v71).i32[1]), v71.f32[0], v71.f32[0]) + (float)(v72 * v72));
    if (v73 > 0.0)
    {
      float v74 = 1.0 / v73;
      float32x2_t v71 = vmul_n_f32(v71, v74);
      *a6 = v71;
      float v72 = v72 * v74;
      a6[1].f32[0] = v72;
    }
    float v75 = a2[3].f32[0];
    *a5 = vsub_f32(*a5, vmul_n_f32(v71, v75));
    a5[1].f32[0] = a5[1].f32[0] - (float)(v72 * v75);
  }
  return !v52;
}

uint64_t physx::Adjacencies::ComputeNbBoundaryEdges(physx::Adjacencies *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)this;
  if (!v2) {
    return 0;
  }
  LODWORD(result) = 0;
  float v4 = (int *)(v1 + 8);
  do
  {
    BOOL v5 = (*(v4 - 2) & 0x1FFFFFFF) == 0x1FFFFFFF;
    if ((*(v4 - 2) & 0x1FFFFFFF) == 0x1FFFFFFF) {
      int v6 = 2;
    }
    else {
      int v6 = 1;
    }
    if ((~*(v4 - 1) & 0x1FFFFFFF) == 0) {
      BOOL v5 = v6;
    }
    int v7 = *v4;
    v4 += 3;
    unsigned int v8 = v5 + result;
    if ((~v7 & 0x1FFFFFFF) != 0) {
      uint64_t result = v8;
    }
    else {
      uint64_t result = v8 + 1;
    }
    --v2;
  }
  while (v2);
  return result;
}

uint64_t physx::AdjacenciesBuilder::Init(unsigned int *a1, unsigned int *a2)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  if (!v2) {
    return 0;
  }
  long long v3 = a2;
  *a1 = v2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::AdjTriangle>::getName() [T = physx::AdjTriangle]";
  }
  else {
    int v6 = "<allocation names disabled>";
  }
  int v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24)
                                                                                                  + 16))(v5 + 24, 12 * v2 + 16, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 625);
  *int v7 = 12;
  v7[1] = v2;
  *((void *)a1 + 1) = v7 + 2;
  uint64_t v8 = 3 * *a1;
  uint64_t v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v10 = "static const char *physx::shdfnd::ReflectionAllocator<AdjEdge>::getName() [T = AdjEdge]";
  }
  else {
    float v10 = "<allocation names disabled>";
  }
  float v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v9 + 24) + 16))(v9 + 24, 12 * v8 + 16, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 627);
  void *v11 = 12;
  v11[1] = v8;
  float v12 = v11 + 2;
  uint64_t v13 = *((void *)a1 + 1);
  if (*a1)
  {
    unint64_t v14 = 0;
    uint64_t v15 = *((void *)v3 + 1);
    uint64_t v16 = *((void *)v3 + 2);
    uint64_t v17 = 2;
    float v18 = (void *)*((void *)a1 + 1);
    do
    {
      if (v15)
      {
        unsigned int v19 = *(_DWORD *)(v15 + 4 * (v17 - 2));
        unsigned int v20 = *(_DWORD *)(v15 + 4 * (v17 - 1));
        unsigned int v21 = *(_DWORD *)(v15 + 4 * v17);
      }
      else if (v16)
      {
        unsigned int v19 = *(unsigned __int16 *)(v16 + 2 * (v17 - 2));
        unsigned int v20 = *(unsigned __int16 *)(v16 + 2 * (v17 - 1));
        unsigned int v21 = *(unsigned __int16 *)(v16 + 2 * v17);
      }
      else
      {
        unsigned int v19 = 0;
        unsigned int v21 = 2;
        unsigned int v20 = 1;
      }
      *float v18 = -1;
      float v18 = (void *)((char *)v18 + 12);
      *(_DWORD *)(v13 + 4 * v17) = -1;
      float v22 = (unsigned int *)v12 + 3 * (v17 - 2);
      if (v19 >= v20) {
        unsigned int v23 = v20;
      }
      else {
        unsigned int v23 = v19;
      }
      if (v19 <= v20) {
        unsigned int v24 = v20;
      }
      else {
        unsigned int v24 = v19;
      }
      *float v22 = v23;
      v22[1] = v24;
      v22[2] = v14;
      if (v19 >= v21) {
        unsigned int v25 = v21;
      }
      else {
        unsigned int v25 = v19;
      }
      if (v19 <= v21) {
        unsigned int v19 = v21;
      }
      float v26 = (unsigned int *)v12 + 3 * (v17 - 1);
      *float v26 = v25;
      v26[1] = v19;
      v26[2] = v14;
      if (v20 >= v21) {
        unsigned int v27 = v21;
      }
      else {
        unsigned int v27 = v20;
      }
      if (v20 <= v21) {
        unsigned int v20 = v21;
      }
      float v28 = (unsigned int *)v12 + 3 * v17;
      *float v28 = v27;
      v28[1] = v20;
      v28[2] = v14++;
      v17 += 3;
    }
    while (v14 < *a1);
    unsigned int v29 = v17 - 2;
  }
  else
  {
    unsigned int v29 = 0;
  }
  uint64_t v79 = 0;
  *(_OWORD *)&v77[8] = 0u;
  long long v78 = 0u;
  char v80 = 1;
  *(_DWORD *)float v77 = 0x80000000;
  float v30 = &unk_26E728438;
  float v76 = &unk_26E728438;
  uint64_t v31 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v75, 4 * v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 536);
  uint64_t v32 = v31;
  if (v29)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 4 * v29;
    unsigned int v35 = (int *)(v11 + 2);
    do
    {
      int v36 = *v35;
      v35 += 3;
      *(_DWORD *)(v31 + v33) = v36;
      v33 += 4;
    }
    while (v34 != v33);
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v76);
    uint64_t v37 = 0;
    float v38 = (int *)v11 + 5;
    do
    {
      int v39 = *v38;
      v38 += 3;
      *(_DWORD *)(v32 + v37) = v39;
      v37 += 4;
    }
    while (v34 != v37);
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v76);
  }
  else if (!v31)
  {
LABEL_57:
    LOBYTE(v43) = 1;
    goto LABEL_65;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v32);
  if (!v29) {
    goto LABEL_57;
  }
  uint64_t v43 = 0;
  uint64_t v44 = *(void *)&v77[8];
  float v45 = (int *)v12 + 3 * **(_DWORD **)&v77[8];
  int v46 = *v45;
  int v47 = v45[1];
  float v73 = v11;
  float v74 = v3;
  float v72 = &unk_26E728438;
LABEL_43:
  uint64_t v48 = 0;
  uint64_t v49 = 2 - v43;
  uint64_t v50 = -4;
  uint64_t v51 = v43;
  BOOL v52 = &v81 + v43;
  do
  {
    float v53 = (int *)v12 + 3 * *(unsigned int *)(v44 + 4 * v48);
    int v54 = v53[1];
    unsigned int v55 = v53[2];
    int v56 = *v53;
    BOOL v57 = *v53 == v46 && v54 == v47;
    if (!v57)
    {
      if (2 - v51 == v48 && (UpdateLink(v81, v82, v46, v47, v13, *((void *)v74 + 1), *((void *)v74 + 2)) & 1) == 0) {
        goto LABEL_59;
      }
      unsigned int v58 = v29 - 1;
      unsigned int v29 = v29 - 1 - v48;
      v44 -= v50;
      unsigned int v81 = v55;
      int v47 = v54;
      uint64_t v43 = 1;
      int v46 = v56;
      BOOL v57 = v58 == v48;
      float v11 = v73;
      long long v3 = v74;
      float v30 = &unk_26E728438;
      if (v57) {
        goto LABEL_65;
      }
      goto LABEL_43;
    }
    v52[v48] = v55;
    if (v49 == v48)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 570, "Adjacencies::CreateDatabase: can't work on non-manifold meshes.", v40, v41, v42, (char)&unk_26E728438);
LABEL_59:
      LOBYTE(v43) = 0;
      goto LABEL_63;
    }
    ++v48;
    v50 -= 4;
  }
  while (v29 != v48);
  if (2 - v51 == v48)
  {
    long long v3 = v74;
    LOBYTE(v43) = UpdateLink(v81, v82, v46, v47, v13, *((void *)v74 + 1), *((void *)v74 + 2));
    goto LABEL_64;
  }
  LOBYTE(v43) = 1;
LABEL_63:
  long long v3 = v74;
LABEL_64:
  float v30 = v72;
  float v11 = v73;
LABEL_65:
  float v76 = v30;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v76);
  (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v11);
  if ((v43 & 1) == 0) {
    return 0;
  }
  uint64_t v65 = *((void *)v3 + 3);
  uint64_t result = 1;
  if (v65)
  {
    *(_WORD *)&v77[16] = 1;
    LODWORD(v76) = *v3;
    *(_OWORD *)float v77 = *(_OWORD *)(v3 + 2);
    *(void *)&long long v78 = v65;
    DWORD2(v78) = v3[8];
    unsigned int v81 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    if (physx::Gu::EdgeListBuilder::init((physx::Gu::EdgeListBuilder *)&v81, (unsigned int *)&v76, v59, v60, v61, v62, v63, v64)&& *a1)
    {
      unint64_t v67 = 0;
      float v68 = (unsigned int *)(*((void *)a1 + 1) + 8);
      float32_t v69 = (unsigned int *)(v84 + 4);
      do
      {
        int v70 = *(v68 - 1);
        *(v68 - 2) = *(v68 - 2) & 0xDFFFFFFF | (*(v69 - 1) >> 31 << 29);
        *(v68 - 1) = v70 & 0xDFFFFFFF | (v69[1] >> 31 << 29);
        unsigned int v71 = *v69;
        v69 += 3;
        *float v68 = *v68 & 0xDFFFFFFF | (v71 >> 31 << 29);
        v68 += 3;
        ++v67;
      }
      while (v67 < *a1);
    }
    physx::Gu::EdgeList::~EdgeList((physx::Gu::EdgeList *)&v81);
    return 1;
  }
  return result;
}

uint64_t physx::Gu::EdgeListBuilder::init(physx::Gu::EdgeListBuilder *this, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = this;
  uint64_t v312 = *MEMORY[0x263EF8340];
  uint64_t v10 = *((void *)a2 + 4);
  if (v10) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = *((unsigned char *)a2 + 25) == 0;
  }
  int v12 = !v11;
  if (v10) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = *((unsigned char *)a2 + 24) == 0;
  }
  if (!v13)
  {
    uint64_t result = physx::Gu::EdgeListBuilder::createFacesToEdges(this, *a2, *((void *)a2 + 1), *((void *)a2 + 2), a5, a6, a7, a8);
    if (!result) {
      return result;
    }
  }
  if (v12)
  {
    uint64_t v15 = *a2;
    uint64_t result = physx::Gu::EdgeListBuilder::createFacesToEdges(v9, *a2, *((void *)a2 + 1), *((void *)a2 + 2), a5, a6, a7, a8);
    if (!result) {
      return result;
    }
    uint64_t v16 = *(unsigned int *)v9;
    if (v16)
    {
      uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 246);
      size_t v18 = (8 * *(_DWORD *)v9);
    }
    else
    {
      size_t v18 = 0;
      uint64_t v17 = 0;
    }
    *((void *)v9 + 4) = v17;
    bzero(v17, v18);
    uint64_t v19 = *((void *)v9 + 4);
    if (v15)
    {
      unsigned int v20 = (unsigned int *)(*((void *)v9 + 3) + 8);
      uint64_t v21 = v15;
      do
      {
        uint64_t v22 = v19 + 8 * *(v20 - 2);
        ++*(_WORD *)(v22 + 2);
        uint64_t v23 = v19 + 8 * *(v20 - 1);
        ++*(_WORD *)(v23 + 2);
        unsigned int v24 = *v20;
        v20 += 3;
        ++*(_WORD *)(v19 + 8 * v24 + 2);
        --v21;
      }
      while (v21);
    }
    *(_DWORD *)(v19 + 4) = 0;
    uint64_t v25 = *(unsigned int *)v9;
    if (v25 >= 2)
    {
      int v26 = 0;
      uint64_t v27 = v25 - 1;
      float v28 = (_DWORD *)(v19 + 12);
      do
      {
        v26 += *((unsigned __int16 *)v28 - 5);
        *float v28 = v26;
        v28 += 2;
        --v27;
      }
      while (v27);
    }
    unsigned int v29 = *(_DWORD *)(v19 + 8 * (v25 - 1) + 4)
        + *(unsigned __int16 *)(v19 + 8 * (v25 - 1) + 2);
    if (v29)
    {
      uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v29, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 265);
      uint64_t v19 = *((void *)v9 + 4);
    }
    else
    {
      uint64_t v30 = 0;
    }
    *((void *)v9 + 5) = v30;
    if (v15)
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unsigned int *)(*((void *)v9 + 3) + 8);
      do
      {
        uint64_t v33 = v19 + 8 * *(v32 - 2);
        uint64_t v34 = *(unsigned int *)(v33 + 4);
        *(_DWORD *)(v33 + 4) = v34 + 1;
        *(_DWORD *)(v30 + 4 * v34) = v31;
        uint64_t v35 = v19 + 8 * *(v32 - 1);
        uint64_t v36 = *(unsigned int *)(v35 + 4);
        *(_DWORD *)(v35 + 4) = v36 + 1;
        *(_DWORD *)(v30 + 4 * v36) = v31;
        unsigned int v37 = *v32;
        v32 += 3;
        uint64_t v38 = v19 + 8 * v37;
        uint64_t v39 = *(unsigned int *)(v38 + 4);
        *(_DWORD *)(v38 + 4) = v39 + 1;
        *(_DWORD *)(v30 + 4 * v39) = v31++;
      }
      while (v15 != v31);
    }
    *(_DWORD *)(v19 + 4) = 0;
    uint64_t v40 = *(unsigned int *)v9;
    if (v40 >= 2)
    {
      int v41 = 0;
      uint64_t v42 = v40 - 1;
      uint64_t v43 = (_DWORD *)(v19 + 12);
      do
      {
        v41 += *((unsigned __int16 *)v43 - 5);
        *uint64_t v43 = v41;
        v43 += 2;
        --v42;
      }
      while (v42);
    }
  }
  uint64_t v44 = *((void *)a2 + 4);
  if (!v44) {
    goto LABEL_239;
  }
  uint64_t v45 = *((void *)a2 + 1);
  uint64_t v46 = *((void *)a2 + 2);
  if (*(_OWORD *)(a2 + 2) == 0)
  {
    uint64_t v264 = physx::shdfnd::Foundation::mInstance;
    float v265 = "EdgeList::ComputeActiveEdges: NULL parameter!";
    uint64_t v266 = 310;
LABEL_191:
    physx::shdfnd::Foundation::error(v264, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", v266, v265, a6, a7, a8, v299);
    return 0;
  }
  uint64_t v47 = *(unsigned int *)v9;
  if (!v47)
  {
    uint64_t v264 = physx::shdfnd::Foundation::mInstance;
    float v265 = "ActiveEdges::ComputeConvexEdges: no edges in edge list!";
    uint64_t v266 = 317;
    goto LABEL_191;
  }
  uint64_t v48 = (unsigned int *)*((void *)v9 + 1);
  if (!v48)
  {
    uint64_t v264 = physx::shdfnd::Foundation::mInstance;
    float v265 = "ActiveEdges::ComputeConvexEdges: no edge data in edge list!";
    uint64_t v266 = 324;
    goto LABEL_191;
  }
  uint64_t v49 = v9;
  uint64_t v50 = *((void *)v9 + 4);
  if (!v50)
  {
    uint64_t v264 = physx::shdfnd::Foundation::mInstance;
    float v265 = "ActiveEdges::ComputeConvexEdges: no edge-to-triangle in edge list!";
    uint64_t v266 = 331;
    goto LABEL_191;
  }
  float v301 = v49;
  uint64_t v308 = *((void *)v49 + 5);
  if (!v308)
  {
    uint64_t v264 = physx::shdfnd::Foundation::mInstance;
    float v265 = "ActiveEdges::ComputeConvexEdges: no faces-by-edges in edge list!";
    uint64_t v266 = 338;
    goto LABEL_191;
  }
  uint64_t v300 = *a2;
  float v51 = *((float *)a2 + 10);
  uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, v47, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 343);
  unsigned int v55 = "exINS0_18ConvexHullNoScaleVEEE";
  int v56 = (BOOL *)v54;
  do
  {
    uint64_t v57 = *(unsigned __int16 *)(v50 + 2);
    if (v57 == 1)
    {
LABEL_128:
      BOOL v159 = 1;
      goto LABEL_147;
    }
    if (v57 == 2)
    {
      uint64_t v58 = *(unsigned int *)(v50 + 4);
      uint64_t v59 = (3 * *(_DWORD *)(v308 + 4 * v58));
      unsigned int v60 = 3 * *(_DWORD *)(v308 + 4 * (v58 + 1));
      if (v45)
      {
        uint64_t v61 = *(unsigned int *)(v45 + 4 * v59);
        uint64_t v62 = *(unsigned int *)(v45 + 4 * (v59 + 1));
        uint64_t v63 = *(unsigned int *)(v45 + 4 * (v59 + 2));
        unsigned int v64 = *(_DWORD *)(v45 + 4 * v60);
        unsigned int v65 = *(_DWORD *)(v45 + 4 * (v60 + 1));
        unsigned int v66 = *(_DWORD *)(v45 + 4 * (v60 + 2));
      }
      else
      {
        uint64_t v61 = *(unsigned __int16 *)(v46 + 2 * v59);
        uint64_t v62 = *(unsigned __int16 *)(v46 + 2 * (v59 + 1));
        uint64_t v63 = *(unsigned __int16 *)(v46 + 2 * (v59 + 2));
        unsigned int v64 = *(unsigned __int16 *)(v46 + 2 * v60);
        unsigned int v65 = *(unsigned __int16 *)(v46 + 2 * (v60 + 1));
        unsigned int v66 = *(unsigned __int16 *)(v46 + 2 * (v60 + 2));
      }
      uint64_t v72 = *v48;
      uint64_t v73 = v48[1];
      if (v72 == v61)
      {
        unsigned int v74 = v63;
        if (v73 != v62)
        {
          unsigned int v74 = v62;
          goto LABEL_52;
        }
      }
      else
      {
        if (v72 != v62)
        {
          if (v72 == v63)
          {
            unsigned int v74 = v61;
            if (v73 == v62) {
              goto LABEL_133;
            }
            unsigned int v74 = v62;
            if (v73 == v61) {
              goto LABEL_133;
            }
          }
LABEL_132:
          unsigned int v74 = -1;
          goto LABEL_133;
        }
        unsigned int v74 = v63;
        if (v73 != v61)
        {
          unsigned int v74 = v61;
LABEL_52:
          if (v73 == v63) {
            goto LABEL_133;
          }
          goto LABEL_132;
        }
      }
LABEL_133:
      float v191 = (float *)(v44 + 12 * v64);
      float v192 = (float *)(v44 + 12 * v65);
      float v193 = (float *)(v44 + 12 * v66);
      float v194 = v191[1];
      float v195 = *v192 - *v191;
      float v196 = v192[1] - v194;
      float v197 = v191[2];
      float v198 = v192[2] - v197;
      float v199 = *v193 - *v191;
      float v200 = v193[1] - v194;
      float v201 = v193[2] - v197;
      float v202 = (float)(v196 * v201) - (float)(v198 * v200);
      float v203 = (float)(v198 * v199) - (float)(v195 * v201);
      float v204 = (float)(v195 * v200) - (float)(v196 * v199);
      float v205 = (float)((float)(v203 * v203) + (float)(v202 * v202)) + (float)(v204 * v204);
      float v206 = 0.0;
      BOOL v207 = v205 <= 0.0;
      float v208 = sqrtf(v205);
      float v209 = 0.0;
      float v210 = 0.0;
      if (!v207)
      {
        float v206 = v202 * (float)(1.0 / v208);
        float v209 = v203 * (float)(1.0 / v208);
        float v210 = v204 * (float)(1.0 / v208);
      }
      float v211 = (float)((float)((float)(v209 * *(float *)(v44 + 12 * v74 + 4))
                           + (float)(*(float *)(v44 + 12 * v74) * v206))
                   + (float)(*(float *)(v44 + 12 * v74 + 8) * v210))
           - (float)((float)((float)(v194 * v209) + (float)(*v191 * v206)) + (float)(v197 * v210));
      float v212 = (float *)(v44 + 12 * v61);
      float v213 = (float *)(v44 + 12 * v62);
      float v214 = (float *)(v44 + 12 * v63);
      float v215 = v212[1];
      float v216 = v212[2];
      float v217 = v214[2];
      float v218 = *v213 - *v212;
      float v219 = v213[1] - v215;
      float v220 = v213[2] - v216;
      float v221 = *v214 - *v212;
      float v222 = v214[1] - v215;
      float v223 = (float)(v219 * (float)(v217 - v216)) - (float)(v220 * v222);
      float v224 = (float)(v220 * v221) - (float)(v218 * (float)(v217 - v216));
      float v225 = (float)(v218 * v222) - (float)(v219 * v221);
      float v226 = sqrtf((float)((float)(v224 * v224) + (float)(v223 * v223)) + (float)(v225 * v225));
      if (v211 < 0.0)
      {
        if (v226 > 0.0)
        {
          float v227 = 1.0 / v226;
          float v223 = v223 * v227;
          float v224 = v224 * v227;
          float v225 = v225 * v227;
        }
        if (v208 > 0.0)
        {
          float v228 = 1.0 / v208;
          float v202 = v202 * v228;
          float v203 = v203 * v228;
          float v204 = v204 * v228;
        }
        BOOL v159 = fabsf(atan2f(sqrtf((float)((float)((float)((float)(v225 * v202) - (float)(v223 * v204))* (float)((float)(v225 * v202) - (float)(v223 * v204)))+ (float)((float)((float)(v224 * v204) - (float)(v225 * v203))* (float)((float)(v224 * v204) - (float)(v225 * v203))))+ (float)((float)((float)(v223 * v203) - (float)(v224 * v202))* (float)((float)(v223 * v203) - (float)(v224 * v202)))), (float)((float)(v224 * v203) + (float)(v223 * v202)) + (float)(v225 * v204))) > v51;
        goto LABEL_141;
      }
      if (v226 > 0.0)
      {
        float v229 = 1.0 / v226;
        float v223 = v223 * v229;
        float v224 = v224 * v229;
        float v225 = v225 * v229;
      }
      if (v208 > 0.0)
      {
        float v230 = 1.0 / v208;
        float v202 = v202 * v230;
        float v203 = v203 * v230;
        float v204 = v204 * v230;
      }
      BOOL v159 = (float)((float)((float)(v224 * v203) + (float)(v223 * v202)) + (float)(v225 * v204)) < *((float *)v55 + 404);
      goto LABEL_147;
    }
    uint64_t v67 = *(unsigned int *)(v50 + 4);
    uint64_t v68 = (3 * *(_DWORD *)(v308 + 4 * v67));
    if (v45)
    {
      uint64_t v69 = *(unsigned int *)(v45 + 4 * v68);
      uint64_t v70 = *(unsigned int *)(v45 + 4 * (v68 + 1));
      uint64_t v71 = *(unsigned int *)(v45 + 4 * (v68 + 2));
    }
    else
    {
      uint64_t v69 = *(unsigned __int16 *)(v46 + 2 * v68);
      uint64_t v70 = *(unsigned __int16 *)(v46 + 2 * (v68 + 1));
      uint64_t v71 = *(unsigned __int16 *)(v46 + 2 * (v68 + 2));
    }
    if (v57 < 2) {
      goto LABEL_128;
    }
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    long long v78 = (float *)(v44 + 12 * v69);
    uint64_t v79 = (float *)(v44 + 12 * v70);
    char v80 = (float *)(v44 + 12 * v71);
    float v303 = v78 + 1;
    float v302 = v78 + 2;
    float v305 = v79 + 1;
    float v304 = v79 + 2;
    float v307 = v80 + 1;
    float v306 = v80 + 2;
    uint64_t v81 = v57 - 1;
    unsigned int v82 = v67 + 1;
    int v83 = 1;
    do
    {
      uint64_t v84 = (3 * *(_DWORD *)(v308 + 4 * v82));
      if (v45)
      {
        uint64_t v85 = *(unsigned int *)(v45 + 4 * v84);
        uint64_t v86 = *(unsigned int *)(v45 + 4 * (v84 + 1));
        uint64_t v87 = *(unsigned int *)(v45 + 4 * (v84 + 2));
      }
      else
      {
        uint64_t v85 = *(unsigned __int16 *)(v46 + 2 * v84);
        uint64_t v86 = *(unsigned __int16 *)(v46 + 2 * (v84 + 1));
        uint64_t v87 = *(unsigned __int16 *)(v46 + 2 * (v84 + 2));
      }
      BOOL v89 = v85 == v69 || v85 == v70 || v85 == v71;
      if (v89
        && (v86 != v69 ? (BOOL v90 = v86 == v70) : (BOOL v90 = 1),
            !v90 ? (BOOL v91 = v86 == v71) : (BOOL v91 = 1),
            v91 && (v87 != v69 ? (BOOL v92 = v87 == v70) : (BOOL v92 = 1), !v92 ? (v93 = v87 == v71) : (v93 = 1), v93)))
      {
        float v94 = *v79 - *v78;
        float v95 = *v305 - *v303;
        float v96 = *v304 - *v302;
        float v97 = *v80 - *v78;
        float v98 = *v307 - *v303;
        float v99 = *v306 - *v302;
        float v100 = (float)(v95 * v99) - (float)(v96 * v98);
        float v101 = (float)(v96 * v97) - (float)(v94 * v99);
        float v102 = (float)(v94 * v98) - (float)(v95 * v97);
        float v103 = sqrtf((float)((float)(v101 * v101) + (float)(v100 * v100)) + (float)(v102 * v102));
        if (v103 > 0.0)
        {
          float v104 = 1.0 / v103;
          float v100 = v100 * v104;
          float v101 = v101 * v104;
          float v102 = v102 * v104;
        }
        float v105 = (float *)(v44 + 12 * v85);
        float v106 = (float *)(v44 + 12 * v86);
        float v107 = (float *)(v44 + 12 * v87);
        float v108 = v105[1];
        float v109 = v105[2];
        float v110 = v107[2];
        float v111 = *v106 - *v105;
        float v112 = v106[1] - v108;
        float v113 = v106[2] - v109;
        float v114 = *v107 - *v105;
        float v115 = v107[1] - v108;
        float v116 = (float)(v112 * (float)(v110 - v109)) - (float)(v113 * v115);
        float v117 = (float)(v113 * v114) - (float)(v111 * (float)(v110 - v109));
        float v118 = (float)(v111 * v115) - (float)(v112 * v114);
        float v119 = sqrtf((float)((float)(v117 * v117) + (float)(v116 * v116)) + (float)(v118 * v118));
        if (v119 > 0.0)
        {
          float v120 = 1.0 / v119;
          float v116 = v116 * v120;
          float v117 = v117 * v120;
          float v118 = v118 * v120;
        }
        unsigned int v55 = "exINS0_18ConvexHullNoScaleVEEE";
        uint64_t v53 = ((float)((float)((float)(v101 * v117) + (float)(v100 * v116)) + (float)(v102 * v118)) < -0.999) | v53;
      }
      else if (v83 == 2)
      {
        if (v85 != v77 && v85 != v76 && v85 != v75) {
          goto LABEL_128;
        }
        BOOL v123 = v86 == v77 || v86 == v76;
        if (!v123 && v86 != v75) {
          goto LABEL_128;
        }
        BOOL v125 = v87 == v77 || v87 == v76;
        if (!v125 && v87 != v75) {
          goto LABEL_128;
        }
        float v127 = (float *)(v44 + 12 * v77);
        float v128 = (float *)(v44 + 12 * v76);
        float v129 = (float *)(v44 + 12 * v75);
        float v130 = v127[1];
        float v131 = v127[2];
        float v132 = v129[2];
        float v133 = *v128 - *v127;
        float v134 = v128[1] - v130;
        float v135 = v128[2] - v131;
        float v136 = *v129 - *v127;
        float v137 = v129[1] - v130;
        float v138 = (float)(v134 * (float)(v132 - v131)) - (float)(v135 * v137);
        float v139 = (float)(v135 * v136) - (float)(v133 * (float)(v132 - v131));
        float v140 = (float)(v133 * v137) - (float)(v134 * v136);
        float v141 = sqrtf((float)((float)(v139 * v139) + (float)(v138 * v138)) + (float)(v140 * v140));
        if (v141 > 0.0)
        {
          float v142 = 1.0 / v141;
          float v138 = v138 * v142;
          float v139 = v139 * v142;
          float v140 = v140 * v142;
        }
        float v143 = (float *)(v44 + 12 * v85);
        float v144 = (float *)(v44 + 12 * v86);
        float v145 = (float *)(v44 + 12 * v87);
        float v146 = v143[1];
        float v147 = v143[2];
        float v148 = v145[2];
        float v149 = *v144 - *v143;
        float v150 = v144[1] - v146;
        float v151 = v144[2] - v147;
        float v152 = *v145 - *v143;
        float v153 = v145[1] - v146;
        float v154 = (float)(v150 * (float)(v148 - v147)) - (float)(v151 * v153);
        float v155 = (float)(v151 * v152) - (float)(v149 * (float)(v148 - v147));
        float v156 = (float)(v149 * v153) - (float)(v150 * v152);
        float v157 = sqrtf((float)((float)(v155 * v155) + (float)(v154 * v154)) + (float)(v156 * v156));
        if (v157 > 0.0)
        {
          float v158 = 1.0 / v157;
          float v154 = v154 * v158;
          float v155 = v155 * v158;
          float v156 = v156 * v158;
        }
        uint64_t v52 = ((float)((float)((float)(v139 * v155) + (float)(v138 * v154)) + (float)(v140 * v156)) < *((float *)v55 + 404)) | v52;
        int v83 = 2;
      }
      else
      {
        int v83 = 2;
        uint64_t v77 = v85;
        uint64_t v76 = v86;
        uint64_t v75 = v87;
      }
      ++v82;
      --v81;
    }
    while (v81);
    BOOL v159 = v83 == 1;
    if (v83 != 2) {
      goto LABEL_128;
    }
    if ((v53 | v52))
    {
      float v160 = *v79 - *v78;
      float v161 = *v305 - *v303;
      float v162 = *v304 - *v302;
      float v163 = *v80 - *v78;
      float v164 = *v307 - *v303;
      float v165 = *v306 - *v302;
      float v166 = (float)(v161 * v165) - (float)(v162 * v164);
      float v167 = (float)(v162 * v163) - (float)(v160 * v165);
      float v168 = (float)(v160 * v164) - (float)(v161 * v163);
      float v169 = sqrtf((float)((float)(v167 * v167) + (float)(v166 * v166)) + (float)(v168 * v168));
      if (v169 > 0.0)
      {
        float v170 = 1.0 / v169;
        float v166 = v166 * v170;
        float v167 = v167 * v170;
        float v168 = v168 * v170;
      }
      float v171 = (float *)(v44 + 12 * v77);
      float v172 = (float *)(v44 + 12 * v76);
      float v173 = (float *)(v44 + 12 * v75);
      float v174 = v171[1];
      float v175 = *v172 - *v171;
      float v176 = v172[1] - v174;
      float v177 = *v173 - *v171;
      float v178 = v171[2];
      float v179 = v172[2] - v178;
      float v180 = v173[1] - v174;
      float v181 = v173[2] - v178;
      float v182 = (float)(v176 * v181) - (float)(v179 * v180);
      float v183 = (float)(v179 * v177) - (float)(v175 * v181);
      float v184 = (float)(v175 * v180) - (float)(v176 * v177);
      float v185 = sqrtf((float)((float)(v183 * v183) + (float)(v182 * v182)) + (float)(v184 * v184));
      if (v185 > 0.0)
      {
        float v186 = 1.0 / v185;
        float v182 = v182 * v186;
        float v183 = v183 * v186;
        float v184 = v184 * v186;
      }
      float v187 = (float)((float)(v167 * v183) + (float)(v166 * v182)) + (float)(v168 * v184);
      float v188 = (float)(v167 * v184) - (float)(v168 * v183);
      float v189 = (float)(v168 * v182) - (float)(v166 * v184);
      float v190 = (float)(v166 * v183) - (float)(v167 * v182);
      goto LABEL_169;
    }
    uint64_t v232 = *v48;
    uint64_t v231 = v48[1];
    if (v232 == v69)
    {
      if (v231 == v70) {
        goto LABEL_154;
      }
      goto LABEL_159;
    }
    if (v232 == v70)
    {
      if (v231 == v69)
      {
LABEL_154:
        LODWORD(v70) = v71;
        goto LABEL_161;
      }
      LODWORD(v70) = v69;
LABEL_159:
      if (v231 == v71) {
        goto LABEL_161;
      }
LABEL_160:
      LODWORD(v70) = -1;
      goto LABEL_161;
    }
    if (v232 != v71) {
      goto LABEL_160;
    }
    if (v231 == v70)
    {
      LODWORD(v70) = v69;
      goto LABEL_161;
    }
    if (v231 != v69) {
      goto LABEL_160;
    }
LABEL_161:
    char v233 = (float *)(v44 + 12 * v77);
    float v234 = (float *)(v44 + 12 * v76);
    uint64_t v235 = (float *)(v44 + 12 * v75);
    float v236 = v233[1];
    float v237 = *v234 - *v233;
    float v238 = v234[1] - v236;
    float v239 = v233[2];
    float v240 = v234[2] - v239;
    float v241 = *v235 - *v233;
    float v242 = v235[1] - v236;
    float v243 = v235[2] - v239;
    float v244 = (float)(v238 * v243) - (float)(v240 * v242);
    float v245 = (float)(v240 * v241) - (float)(v237 * v243);
    float v246 = (float)(v237 * v242) - (float)(v238 * v241);
    float v247 = (float)((float)(v245 * v245) + (float)(v244 * v244)) + (float)(v246 * v246);
    float v248 = 0.0;
    BOOL v207 = v247 <= 0.0;
    float v249 = sqrtf(v247);
    float v250 = 0.0;
    float v251 = 0.0;
    if (!v207)
    {
      float v248 = v244 * (float)(1.0 / v249);
      float v250 = v245 * (float)(1.0 / v249);
      float v251 = v246 * (float)(1.0 / v249);
    }
    if ((float)((float)((float)((float)(v250 * *(float *)(v44 + 12 * v70 + 4))
                               + (float)(*(float *)(v44 + 12 * v70) * v248))
                       + (float)(*(float *)(v44 + 12 * v70 + 8) * v251))
               - (float)((float)((float)(v236 * v250) + (float)(*v233 * v248)) + (float)(v239 * v251))) < 0.0)
    {
      float v252 = *v79 - *v78;
      float v253 = *v305 - *v303;
      float v254 = *v304 - *v302;
      float v255 = *v80 - *v78;
      float v256 = *v307 - *v303;
      float v257 = *v306 - *v302;
      float v258 = (float)(v253 * v257) - (float)(v254 * v256);
      float v259 = (float)(v254 * v255) - (float)(v252 * v257);
      float v260 = (float)(v252 * v256) - (float)(v253 * v255);
      float v261 = sqrtf((float)((float)(v259 * v259) + (float)(v258 * v258)) + (float)(v260 * v260));
      if (v261 > 0.0)
      {
        float v262 = 1.0 / v261;
        float v258 = v258 * v262;
        float v259 = v259 * v262;
        float v260 = v260 * v262;
      }
      if (v249 > 0.0)
      {
        float v263 = 1.0 / v249;
        float v244 = v244 * v263;
        float v245 = v245 * v263;
        float v246 = v246 * v263;
      }
      float v187 = (float)((float)(v259 * v245) + (float)(v258 * v244)) + (float)(v260 * v246);
      float v188 = (float)(v259 * v246) - (float)(v260 * v245);
      float v189 = (float)(v260 * v244) - (float)(v258 * v246);
      float v190 = (float)(v258 * v245) - (float)(v259 * v244);
LABEL_169:
      BOOL v159 = fabsf(atan2f(sqrtf((float)((float)(v189 * v189) + (float)(v188 * v188)) + (float)(v190 * v190)), v187)) > v51;
LABEL_141:
      unsigned int v55 = "N5physx2Gu11LocalConvexINS0_18ConvexHullNoScaleVEEE" + 21;
    }
LABEL_147:
    *v56++ = v159;
    v50 += 8;
    v48 += 2;
    LODWORD(v47) = v47 - 1;
  }
  while (v47);
  uint64_t v9 = v301;
  if (*((_DWORD *)v301 + 4))
  {
    unint64_t v267 = 0;
    uint64_t v268 = *((void *)v301 + 3);
    do
    {
      for (uint64_t i = 0; i != 12; i += 4)
      {
        int v270 = *(_DWORD *)(v268 + i);
        if ((v270 & 0x80000000) == 0 && *(unsigned char *)(v54 + (v270 & 0xFFFFFFF))) {
          *(_DWORD *)(v268 + i) = v270 | 0x80000000;
        }
      }
      ++v267;
      v268 += 12;
    }
    while (v267 < *((unsigned int *)v301 + 4));
  }
  uint64_t v271 = *(unsigned int *)v301;
  if (v271)
  {
    uint64_t v272 = 0;
    uint64_t v273 = 8 * v271;
    float32x4_t v274 = (unsigned __int8 *)v54;
    do
    {
      if (*v274++) {
        *(_WORD *)(*((void *)v301 + 4) + v272) |= 1u;
      }
      v272 += 8;
    }
    while (v273 != v272);
LABEL_193:
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v54);
  }
  else if (v54)
  {
    goto LABEL_193;
  }
  if (v300)
  {
    uint64_t v276 = 0;
    unsigned int v277 = 0;
    do
    {
      if (v45)
      {
        unsigned int v278 = *(_DWORD *)(v45 + 4 * v276);
        unsigned int v279 = *(_DWORD *)(v45 + 4 * (v276 + 1));
        unsigned int v280 = *(_DWORD *)(v45 + 4 * (v276 + 2));
      }
      else
      {
        unsigned int v278 = *(unsigned __int16 *)(v46 + 2 * v276);
        unsigned int v279 = *(unsigned __int16 *)(v46 + 2 * (v276 + 1));
        unsigned int v280 = *(unsigned __int16 *)(v46 + 2 * (v276 + 2));
      }
      if (v278 > v277) {
        unsigned int v277 = v278;
      }
      if (v279 > v277) {
        unsigned int v277 = v279;
      }
      if (v280 > v277) {
        unsigned int v277 = v280;
      }
      v276 += 3;
    }
    while (3 * v300 != v276);
    size_t v281 = v277 + 1;
    if (v277 == -1)
    {
      size_t v281 = 0;
      float v282 = 0;
      goto LABEL_210;
    }
  }
  else
  {
    size_t v281 = 1;
  }
  float v282 = (void *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t, uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v281, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 643, v52, v53);
LABEL_210:
  bzero(v282, v281);
  uint64_t v283 = *((unsigned int *)v301 + 4);
  if (v283)
  {
    uint64_t v284 = 0;
    uint64_t v285 = *((void *)v301 + 3);
    uint64_t v286 = v285;
    while (1)
    {
      if (v45)
      {
        int v287 = *(_DWORD *)(v45 + 4 * (3 * v284 + 1));
        int v309 = *(_DWORD *)(v45 + 4 * (3 * v284));
        int v310 = v287;
        int v288 = *(_DWORD *)(v45 + 4 * (3 * v284 + 2));
      }
      else
      {
        if (!v46) {
          goto LABEL_217;
        }
        int v289 = *(unsigned __int16 *)(v46 + 2 * (3 * v284 + 1));
        int v309 = *(unsigned __int16 *)(v46 + 2 * (3 * v284));
        int v310 = v289;
        int v288 = *(unsigned __int16 *)(v46 + 2 * (3 * v284 + 2));
      }
      int v311 = v288;
LABEL_217:
      for (uint64_t j = 0; j != 3; ++j)
      {
        if ((*(_DWORD *)(v286 + 4 * j) & 0x80000000) != 0)
        {
          uint64_t v291 = j;
          if (j)
          {
            uint64_t v291 = j == 1;
            uint64_t v292 = 2;
          }
          else
          {
            uint64_t v292 = 1;
          }
          *((unsigned char *)v282 + *(&v309 + v292)) = 1;
          *((unsigned char *)v282 + *(&v309 + v291)) = 1;
        }
      }
      ++v284;
      v286 += 12;
      if (v284 == v283)
      {
        unint64_t v293 = 0;
        while (1)
        {
          if (v45)
          {
            int v294 = *(_DWORD *)(v45 + 4 * (3 * v293 + 1));
            int v309 = *(_DWORD *)(v45 + 4 * (3 * v293));
            int v310 = v294;
            int v295 = *(_DWORD *)(v45 + 4 * (3 * v293 + 2));
          }
          else
          {
            if (!v46) {
              goto LABEL_231;
            }
            int v296 = *(unsigned __int16 *)(v46 + 2 * (3 * v293 + 1));
            int v309 = *(unsigned __int16 *)(v46 + 2 * (3 * v293));
            int v310 = v296;
            int v295 = *(unsigned __int16 *)(v46 + 2 * (3 * v293 + 2));
          }
          int v311 = v295;
LABEL_231:
          for (uint64_t k = 0; k != 12; k += 4)
          {
            int v298 = *(_DWORD *)(v285 + k);
            if ((v298 & 0x40000000) == 0 && *((unsigned char *)v282 + *(unsigned int *)((char *)&v309 + k))) {
              *(_DWORD *)(v285 + k) = v298 | 0x40000000;
            }
          }
          ++v293;
          v285 += 12;
          if (v293 >= *((unsigned int *)v301 + 4)) {
            goto LABEL_237;
          }
        }
      }
    }
  }
LABEL_237:
  if (v282) {
    (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v282);
  }
LABEL_239:
  if (!*((unsigned char *)a2 + 24))
  {
    if (*((void *)v9 + 3)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *((void *)v9 + 3) = 0;
  }
  if (!*((unsigned char *)a2 + 25))
  {
    if (*((void *)v9 + 4)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *((void *)v9 + 4) = 0;
    if (*((void *)v9 + 5)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *((void *)v9 + 5) = 0;
  }
  return 1;
}

__n128 physx::Cooking::setParams(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 6);
  __n128 result = *(__n128 *)((char *)a2 + 28);
  *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 11);
  *(__n128 *)(a1 + 36) = result;
  return result;
}

uint64_t physx::Cooking::getParams(physx::Cooking *this)
{
  return (uint64_t)this + 8;
}

uint64_t physx::Cooking::platformMismatch(physx::Cooking *this)
{
  return 0;
}

uint64_t physx::Cooking::release(physx::Cooking *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (this)
  {
    this = (physx::Cooking *)(*(uint64_t (**)(physx::Cooking *))(*(void *)this + 128))(this);
    uint64_t v9 = vars8;
  }
  return physx::shdfnd::Foundation::decRefCount(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Cooking::validateTriangleMesh(uint64_t a1, uint64_t a2)
{
  fegetenv(&v20);
  fesetenv(MEMORY[0x263EF8320]);
  unsigned int v7 = *(_DWORD *)(a2 + 16);
  if (v7 < 3
    || ((uint64_t v8 = *(void *)(a2 + 32), -1431655765 * v7 >= 0x55555556) ? (v9 = v8 == 0) : (v9 = 0),
        v9
     || *(void *)(a2 + 64) && *(_DWORD *)(a2 + 56) < 2u
     || v7 >= 0x10000 && (*(_WORD *)(a2 + 48) & 2) != 0
     || !*(void *)(a2 + 8)
     || *(_DWORD *)a2 < 0xCu
     || v8 && ((*(_WORD *)(a2 + 48) & 2) != 0 ? (unsigned int v10 = 6) : (unsigned int v10 = 12), *(_DWORD *)(a2 + 24) < v10)))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 102, "Cooking::validateTriangleMesh: user-provided triangle mesh descriptor is invalid!", v4, v5, v6, v17);
    uint64_t v11 = 0;
  }
  else
  {
    physx::BV4TriangleMeshBuilder::BV4TriangleMeshBuilder((uint64_t)v18, a1 + 8);
    uint64_t v11 = physx::TriangleMeshBuilder::loadFromDesc((uint64_t)v18, (long long *)a2, 0, 1, v13, v14, v15, v16);
    v18[0] = &unk_26E72A1F8;
    physx::Gu::BV4TriangleData::~BV4TriangleData((physx::Gu::BV4TriangleData *)&v19);
    v18[0] = &unk_26E72A1B8;
    physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)v18);
  }
  fesetenv(&v20);
  return v11;
}

uint64_t physx::Cooking::cookTriangleMesh(uint64_t a1, void *a2, long long *a3, void (***a4)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), _DWORD *a5)
{
  fegetenv(v17);
  fesetenv(MEMORY[0x263EF8320]);
  if (a5) {
    *a5 = 0;
  }
  uint64_t v14 = physx::TriangleMeshBuilder::loadFromDesc((uint64_t)a2, a3, a5, 0, v10, v11, v12, v13);
  if (v14)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    physx::TriangleMeshBuilder::save(a2, a4, v15, a1 + 8);
  }
  fesetenv(v17);
  return v14;
}

uint64_t physx::Cooking::cookTriangleMesh(uint64_t a1, long long *a2, void (***a3)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), _DWORD *a4)
{
  uint64_t v8 = a1 + 8;
  if (*(_DWORD *)(a1 + 48))
  {
    physx::BV4TriangleMeshBuilder::BV4TriangleMeshBuilder((uint64_t)v11, v8);
    uint64_t v9 = physx::Cooking::cookTriangleMesh(a1, v11, a2, a3, a4);
    v11[0] = &unk_26E72A1F8;
    physx::Gu::BV4TriangleData::~BV4TriangleData((physx::Gu::BV4TriangleData *)&v12);
    v11[0] = &unk_26E72A1B8;
    physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)v11);
  }
  else
  {
    physx::RTreeTriangleMeshBuilder::RTreeTriangleMeshBuilder((uint64_t)v11, v8);
    uint64_t v9 = physx::Cooking::cookTriangleMesh(a1, v11, a2, a3, a4);
    physx::RTreeTriangleMeshBuilder::~RTreeTriangleMeshBuilder((physx::RTreeTriangleMeshBuilder *)v11);
  }
  return v9;
}

uint64_t physx::Cooking::createTriangleMesh(uint64_t a1, void *a2, long long *a3, uint64_t (***a4)(void, uint64_t, void), _DWORD *a5)
{
  fegetenv(v17);
  fesetenv(MEMORY[0x263EF8320]);
  if (a5) {
    *a5 = 0;
  }
  if (physx::TriangleMeshBuilder::loadFromDesc((uint64_t)a2, a3, a5, 0, v10, v11, v12, v13))
  {
    if ((*(unsigned char *)(a1 + 32) & 8) == 0) {
      physx::TriangleMeshBuilder::checkMeshIndicesSize((uint64_t)a2);
    }
    if ((*(unsigned int (**)(void *))(*a2 + 16))(a2)) {
      uint64_t v14 = 4;
    }
    else {
      uint64_t v14 = 3;
    }
    uint64_t v15 = (**a4)(a4, v14, a2[3]);
  }
  else
  {
    uint64_t v15 = 0;
  }
  fesetenv(v17);
  return v15;
}

uint64_t physx::Cooking::createTriangleMesh(uint64_t a1, long long *a2, uint64_t (***a3)(void, uint64_t, void), _DWORD *a4)
{
  uint64_t v8 = a1 + 8;
  if (*(_DWORD *)(a1 + 48))
  {
    physx::BV4TriangleMeshBuilder::BV4TriangleMeshBuilder((uint64_t)v11, v8);
    uint64_t TriangleMesh = physx::Cooking::createTriangleMesh(a1, v11, a2, a3, a4);
    v11[0] = &unk_26E72A1F8;
    physx::Gu::BV4TriangleData::~BV4TriangleData((physx::Gu::BV4TriangleData *)&v12);
    v11[0] = &unk_26E72A1B8;
    physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)v11);
  }
  else
  {
    physx::RTreeTriangleMeshBuilder::RTreeTriangleMeshBuilder((uint64_t)v11, v8);
    uint64_t TriangleMesh = physx::Cooking::createTriangleMesh(a1, v11, a2, a3, a4);
    physx::RTreeTriangleMeshBuilder::~RTreeTriangleMeshBuilder((physx::RTreeTriangleMeshBuilder *)v11);
  }
  return TriangleMesh;
}

uint64_t physx::Cooking::cookConvexMeshInternal(uint64_t a1, long long *a2, float32x4_t *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a5) {
    *a5 = 3;
  }
  unsigned int v12 = *((_DWORD *)a2 + 4);
  if (v12 < 3
    || v12 >= 0x10000 && (*((_WORD *)a2 + 36) & 1) != 0
    || !*((void *)a2 + 1)
    || *(_DWORD *)a2 < 0xCu
    || *((unsigned __int16 *)a2 + 38) < 4u)
  {
    goto LABEL_21;
  }
  if (*((void *)a2 + 4))
  {
    if (*((_DWORD *)a2 + 10) < 4u || !*((void *)a2 + 7)) {
      goto LABEL_21;
    }
    __int16 v13 = *((_WORD *)a2 + 36);
    unsigned int v14 = (v13 & 1) != 0 ? 2 : 4;
    if (*((_DWORD *)a2 + 12) < v14 || *((_DWORD *)a2 + 6) <= 0x13u) {
      goto LABEL_21;
    }
  }
  else
  {
    __int16 v13 = *((_WORD *)a2 + 36);
    if ((v13 & 2) == 0)
    {
LABEL_21:
      uint64_t v16 = physx::shdfnd::Foundation::mInstance;
      char v17 = "Cooking::cookConvexMesh: user-provided convex mesh descriptor is invalid!";
      uint64_t v18 = 4;
      uint64_t v19 = 193;
LABEL_22:
      physx::shdfnd::Foundation::error(v16, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", v19, v17, a6, a7, a8, v27);
      return 0;
    }
  }
  int v15 = *((unsigned __int16 *)a2 + 37);
  if ((v13 & 0x20) != 0)
  {
    if ((v15 - 4) >= 0xFD) {
      goto LABEL_21;
    }
  }
  else if ((v15 - 8) >= 0xF9)
  {
    goto LABEL_21;
  }
  if (*(float *)(a1 + 8) <= 0.0)
  {
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    char v17 = "Cooking::cookConvexMesh: provided cooking parameter areaTestEpsilon is invalid!";
    uint64_t v18 = 4;
    uint64_t v19 = 199;
    goto LABEL_22;
  }
  if (*(float *)(a1 + 12) < 0.0)
  {
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    char v17 = "Cooking::cookConvexMesh: provided cooking parameter planeTolerance is invalid!";
    uint64_t v18 = 4;
    uint64_t v19 = 205;
    goto LABEL_22;
  }
  long long v21 = a2[3];
  long long v29 = a2[2];
  long long v30 = v21;
  int v31 = *((_DWORD *)a2 + 16);
  long long v22 = a2[1];
  long long v27 = *a2;
  long long v28 = v22;
  __int16 v32 = v13;
  int v33 = *(_DWORD *)((char *)a2 + 74);
  if ((v13 & 2) != 0)
  {
    __int16 v32 = v13 & 0xFFFE;
    int v31 = 0;
    *((void *)&v30 + 1) = 0;
    LODWORD(v30) = 0;
    DWORD2(v29) = 0;
    *(void *)&long long v29 = 0;
    DWORD2(v28) = 0;
    int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    int v25 = v24;
    if (v24 == 2) {
      goto LABEL_35;
    }
    if (v24 == 1)
    {
      uint64_t result = 0;
      *a5 = 1;
      return result;
    }
    BOOL v23 = 0;
    if (!v24)
    {
LABEL_35:
      BOOL v23 = v24 == 2;
      (*(void (**)(uint64_t, long long *))(*(void *)a4 + 24))(a4, &v27);
    }
    if ((v25 | 2) != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v23 = 0;
  }
  if (v28 >= 0x100)
  {
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    char v17 = "Cooking::cookConvexMesh: user-provided hull must have less than 256 vertices!";
    uint64_t v18 = 32;
    uint64_t v19 = 247;
    goto LABEL_22;
  }
  uint64_t result = physx::ConvexMeshBuilder::build(a3, (uint64_t)&v27, *(_DWORD *)(a1 + 52), 0, a4, a6, a7, a8);
  if (a5 && result)
  {
    if (v23) {
      int v26 = 2;
    }
    else {
      int v26 = 0;
    }
    *a5 = v26;
    return 1;
  }
  return result;
}

uint64_t physx::Cooking::cookConvexMesh(unsigned char *a1, uint64_t a2, void (***a3)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), int *a4)
{
  fegetenv(&v37);
  fesetenv(MEMORY[0x263EF8320]);
  long long v11 = *(_OWORD *)(a2 + 48);
  v33[2] = *(_OWORD *)(a2 + 32);
  v33[3] = v11;
  int v34 = *(_DWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 16);
  v33[0] = *(_OWORD *)a2;
  v33[1] = v12;
  __int16 v35 = *(_WORD *)(a2 + 72);
  int v13 = *(_DWORD *)(a2 + 74);
  int v36 = v13;
  if ((v35 & 2) != 0)
  {
    if ((v35 & 0x80) != 0)
    {
      if ((v13 & 0xFFC0) != 0) {
        LOWORD(v13) = 64;
      }
      LOWORD(v36) = v13;
    }
    uint64_t v15 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::QuickHullConvexHullLib>::getName() [T = physx::"
    }
            "QuickHullConvexHullLib]";
    else {
      uint64_t v16 = "<allocation names disabled>";
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v15 + 24) + 16))(v15 + 24, 88, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 283);
    physx::QuickHullConvexHullLib::QuickHullConvexHullLib(v14, (uint64_t)v33, (uint64_t)(a1 + 8));
  }
  else
  {
    uint64_t v14 = 0;
  }
  char v17 = a1[22];
  memset(v22, 0, sizeof(v22));
  uint64_t v23 = 0;
  int v24 = v28;
  char v25 = v17;
  int v26 = 0;
  uint64_t v27 = 0;
  v28[18] = 0;
  uint64_t v29 = 0;
  long long v30 = xmmword_23435FD60;
  long long v31 = xmmword_23435FD60;
  uint64_t v32 = 0x3F80000000000000;
  if (physx::Cooking::cookConvexMeshInternal((uint64_t)a1, v33, v22, v14, a4, v8, v9, v10))
  {
    int v18 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 24))(a1);
    if (physx::ConvexMeshBuilder::save((uint64_t)v22, a3, v18))
    {
      uint64_t v19 = 1;
      uint64_t v20 = 1;
      if (!v14) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    if (a4) {
      *a4 = 3;
    }
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (v14)
  {
LABEL_18:
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    uint64_t v20 = v19;
  }
LABEL_19:
  physx::ConvexMeshBuilder::~ConvexMeshBuilder((physx::ConvexMeshBuilder *)v22);
  fesetenv(&v37);
  return v20;
}

uint64_t physx::Cooking::createConvexMesh(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, uint64_t, _WORD *), int *a4)
{
  fegetenv(&v36);
  fesetenv(MEMORY[0x263EF8320]);
  long long v11 = *(_OWORD *)(a2 + 48);
  v32[2] = *(_OWORD *)(a2 + 32);
  v32[3] = v11;
  int v33 = *(_DWORD *)(a2 + 64);
  long long v12 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v12;
  __int16 v34 = *(_WORD *)(a2 + 72);
  int v13 = *(_DWORD *)(a2 + 74);
  int v35 = v13;
  if ((v34 & 2) != 0)
  {
    if ((v34 & 0x80) != 0)
    {
      if ((v13 & 0xFFC0) != 0) {
        LOWORD(v13) = 64;
      }
      LOWORD(v35) = v13;
    }
    uint64_t v15 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::QuickHullConvexHullLib>::getName() [T = physx::"
    }
            "QuickHullConvexHullLib]";
    else {
      uint64_t v16 = "<allocation names disabled>";
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v15 + 24) + 16))(v15 + 24, 88, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 331);
    physx::QuickHullConvexHullLib::QuickHullConvexHullLib(v14, (uint64_t)v32, a1 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  char v17 = *(unsigned char *)(a1 + 22);
  memset(v21, 0, sizeof(v21));
  uint64_t v22 = 0;
  uint64_t v23 = v27;
  char v24 = v17;
  int v25 = 0;
  uint64_t v26 = 0;
  v27[18] = 0;
  uint64_t v28 = 0;
  long long v29 = xmmword_23435FD60;
  long long v30 = xmmword_23435FD60;
  uint64_t v31 = 0x3F80000000000000;
  if (physx::Cooking::cookConvexMeshInternal(a1, v32, v21, v14, a4, v8, v9, v10))
  {
    v20[18] = 0;
    physx::ConvexMeshBuilder::copy((uint64_t)v21, (uint64_t)v20);
    uint64_t v18 = (**a3)(a3, 2, v20);
    if (!v18 && a4) {
      *a4 = 3;
    }
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  else
  {
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    uint64_t v18 = 0;
  }
  physx::ConvexMeshBuilder::~ConvexMeshBuilder((physx::ConvexMeshBuilder *)v21);
  fesetenv(&v36);
  return v18;
}

uint64_t physx::Cooking::validateConvexMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = *(unsigned char *)(a1 + 22);
  memset(v11, 0, sizeof(v11));
  uint64_t v12 = 0;
  int v13 = v17;
  char v14 = v8;
  int v15 = 0;
  uint64_t v16 = 0;
  v17[18] = 0;
  uint64_t v18 = 0;
  long long v19 = xmmword_23435FD60;
  long long v20 = xmmword_23435FD60;
  uint64_t v21 = 0x3F80000000000000;
  uint64_t v9 = physx::ConvexMeshBuilder::build(v11, a2, *(_DWORD *)(a1 + 52), 1, 0, a6, a7, a8);
  physx::ConvexMeshBuilder::~ConvexMeshBuilder((physx::ConvexMeshBuilder *)v11);
  return v9;
}

uint64_t physx::Cooking::computeHullPolygons(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4, void *a5, unsigned int *a6, uint64_t *a7, _DWORD *a8, uint64_t *a9)
{
  int v35 = a7;
  uint64_t v38 = a5;
  fenv_t v37 = a4;
  uint64_t v36 = a3;
  uint64_t v50 = *MEMORY[0x263EF8340];
  char v14 = a2 + 4;
  unsigned int v13 = a2[4];
  MEMORY[0x270FA5388](a1);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0x1FFFFFFFF0);
  bzero(v16, v15);
  if (v13)
  {
    uint64_t v18 = *a2;
    long long v19 = (uint64_t *)*((void *)a2 + 1);
    long long v20 = v16;
    do
    {
      uint64_t v21 = *v19;
      *((_DWORD *)v20 + 2) = *((_DWORD *)v19 + 2);
      *(void *)long long v20 = v21;
      v20 += 12;
      long long v19 = (uint64_t *)((char *)v19 + v18);
      --v13;
    }
    while (v13);
  }
  unsigned int v22 = a2[10];
  MEMORY[0x270FA5388](v17);
  char v24 = (char *)&v35 - ((v23 + 15) & 0x1FFFFFFFF0);
  bzero(v24, v23);
  if ((a2[12] & 2) != 0)
  {
    if (v22)
    {
      uint64_t v29 = a2[6];
      long long v30 = (unsigned __int16 *)(*((void *)a2 + 4) + 4);
      uint64_t v31 = v24;
      do
      {
        *(_DWORD *)uint64_t v31 = *(v30 - 2);
        *((_DWORD *)v31 + 1) = *(v30 - 1);
        *((_DWORD *)v31 + 2) = *v30;
        long long v30 = (unsigned __int16 *)((char *)v30 + v29);
        v31 += 12;
      }
      while (v31 < &v24[12 * v22]);
    }
  }
  else if (v22)
  {
    uint64_t v25 = a2[6];
    uint64_t v26 = (uint64_t *)*((void *)a2 + 4);
    uint64_t v27 = v24;
    do
    {
      uint64_t v28 = *v26;
      *((_DWORD *)v27 + 2) = *((_DWORD *)v26 + 2);
      *(void *)uint64_t v27 = v28;
      v27 += 12;
      uint64_t v26 = (uint64_t *)((char *)v26 + v25);
      --v22;
    }
    while (v22);
  }
  char v32 = *(unsigned char *)(a1 + 22);
  memset(v39, 0, sizeof(v39));
  uint64_t v40 = 0;
  int v41 = v45;
  char v42 = v32;
  int v43 = 0;
  uint64_t v44 = 0;
  v45[18] = 0;
  uint64_t v46 = 0;
  long long v47 = xmmword_23435FD60;
  long long v48 = xmmword_23435FD60;
  uint64_t v49 = 0x3F80000000000000;
  uint64_t v33 = physx::ConvexMeshBuilder::computeHullPolygons((uint64_t)v39, v14, v16, a2 + 10, (uint64_t)v24, v36, v37, v38, a6, v35, a8, a9);
  physx::ConvexMeshBuilder::~ConvexMeshBuilder((physx::ConvexMeshBuilder *)v39);
  return v33;
}

uint64_t physx::Cooking::cookHeightField(uint64_t a1, uint64_t a2, void (***a3)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t))
{
  fegetenv(&v26);
  fesetenv(MEMORY[0x263EF8320]);
  uint64_t v6 = 0;
  if (*(_DWORD *)(a2 + 4) >= 2u
    && *(_DWORD *)a2 >= 2u
    && *(_DWORD *)(a2 + 8) == 1
    && *(_DWORD *)(a2 + 16) >= 4u
    && *(float *)(a2 + 32) >= 0.0
    && *(unsigned __int16 *)(a2 + 36) <= 1u)
  {
    int v14 = 196609;
    int v16 = 1;
    unsigned int v13 = &unk_26E729030;
    size_t v15 = &unk_26E729100;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    int v21 = 1;
    uint64_t v17 = 0;
    int v19 = 0;
    __int16 v20 = 0;
    uint64_t v18 = 0;
    if (physx::Gu::HeightField::loadFromDesc((uint64_t)&v13, (int32x2_t *)a2))
    {
      int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v6 = physx::saveHeightField((uint64_t)&v13, a3, v11);
      if ((v14 & 0x10000) != 0)
      {
        if (v18) {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
LABEL_25:
        uint64_t v18 = 0;
      }
    }
    else
    {
      if ((v14 & 0x10000) != 0)
      {
        if (v18) {
          (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
        }
        uint64_t v6 = 0;
        goto LABEL_25;
      }
      uint64_t v6 = 0;
    }
    unsigned int v13 = &unk_26E729030;
    size_t v15 = &unk_26E729100;
    if ((v14 & 0x10000) != 0 && v18) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  fesetenv(&v26);
  return v6;
}

uint64_t physx::Cooking::createHeightField(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, uint64_t, uint64_t))
{
  fegetenv(v15);
  fesetenv(MEMORY[0x263EF8320]);
  uint64_t v5 = 0;
  if (*(_DWORD *)(a2 + 4) >= 2u
    && *(_DWORD *)a2 >= 2u
    && *(_DWORD *)(a2 + 8) == 1
    && *(_DWORD *)(a2 + 16) >= 4u
    && *(float *)(a2 + 32) >= 0.0
    && *(unsigned __int16 *)(a2 + 36) <= 1u)
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::HeightField>::getName() [T = physx::Gu::HeightField]";
    }
    else {
      int v11 = "<allocation names disabled>";
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v10 + 24) + 16))(v10 + 24, 136, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 456);
    *(_DWORD *)(v12 + 8) = 196609;
    *(_DWORD *)(v12 + 24) = 1;
    *(void *)uint64_t v12 = &unk_26E729030;
    *(void *)(v12 + 16) = &unk_26E729100;
    *(void *)(v12 + 104) = 0;
    *(void *)(v12 + 112) = 0;
    *(_DWORD *)(v12 + 120) = 0;
    *(void *)(v12 + 128) = 0;
    *(_DWORD *)(v12 + 96) = 1;
    *(void *)(v12 + 56) = 0;
    *(_DWORD *)(v12 + 88) = 0;
    *(_WORD *)(v12 + 92) = 0;
    *(void *)(v12 + 80) = 0;
    uint64_t v5 = 0;
    if (physx::Gu::HeightField::loadFromDesc(v12, (int32x2_t *)a2))
    {
      uint64_t v13 = (**a3)(a3, 1, v12 + 32);
      uint64_t v5 = v13;
      if (v13)
      {
        *(void *)(v13 + 104) = *(void *)(v12 + 104);
        *(void *)(v13 + 112) = *(void *)(v12 + 112);
        *(_DWORD *)(v13 + 120) = *(_DWORD *)(v12 + 120);
      }
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
  }
  fesetenv(v15);
  return v5;
}

uint64_t physx::Cooking::cookBVHStructure(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, unsigned int *, uint64_t))
{
  fegetenv(&v24);
  fesetenv(MEMORY[0x263EF8320]);
  if (*(void *)(a2 + 8)) {
    BOOL v6 = *(_DWORD *)a2 > 0x17u;
  }
  else {
    BOOL v6 = 0;
  }
  BOOL v7 = !v6 || *(_DWORD *)(a2 + 16) == 0;
  uint64_t v8 = !v7;
  if (!v7)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    physx::BVHStructureBuilder::loadFromDesc((uint64_t)&v22, (unsigned int *)a2);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (physx::writeHeader(66, 86, 72, 83, 1u, v9, (void (***)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t))a3))
    {
      unint64_t v10 = DWORD2(v22);
      physx::writeDword(DWORD2(v22), v9, a3);
      int v11 = HIDWORD(v22);
      physx::writeDword(HIDWORD(v22), v9, a3);
      if (v10)
      {
        unint64_t v12 = 0;
        uint64_t v13 = *((void *)&v23 + 1);
        do
          physx::writeDword(*(_DWORD *)(v13 + 4 * v12++), v9, a3);
        while (v12 < v10);
        unint64_t v14 = 0;
        uint64_t v15 = v22;
        uint64_t v16 = 12;
        do
        {
          physx::writeFloatBuffer(v15 + v16 - 12, 3, v9, a3);
          uint64_t v15 = v22;
          physx::writeFloatBuffer(v22 + v16, 3, v9, a3);
          ++v14;
          v16 += 24;
        }
        while (v14 < DWORD2(v22));
        int v11 = HIDWORD(v22);
      }
      if (v11)
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        uint64_t v19 = v23;
        do
        {
          uint64_t v20 = v19 + v17;
          physx::writeDword(*(_DWORD *)(v20 + 24), v9, a3);
          physx::writeFloatBuffer(v20, 3, v9, a3);
          uint64_t v19 = v23;
          physx::writeFloatBuffer(v23 + v17 + 12, 3, v9, a3);
          ++v18;
          v17 += 28;
        }
        while (v18 < HIDWORD(v22));
      }
    }
    physx::BVHStructureBuilder::~BVHStructureBuilder((physx::BVHStructureBuilder *)&v22);
  }
  fesetenv(&v24);
  return v8;
}

void physx::BVHStructureBuilder::loadFromDesc(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = a2[4];
  if (v4 == -1)
  {
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    goto LABEL_4;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (v4 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/BVHStructureBuilder.cpp", 128);
  *(void *)a1 = v5;
  if (v4)
  {
LABEL_4:
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)a2 + 1);
    uint64_t v8 = *a2;
    float32x4_t v9 = (float32x4_t)vdupq_n_s32(0x3BA3D70Au);
    do
    {
      unint64_t v10 = (float32x4_t *)(v5 + v6);
      float32x4_t v11 = *(float32x4_t *)(v7 + 12);
      float32x4_t v12 = vmulq_f32(vsubq_f32(v11, *(float32x4_t *)v7), v9);
      float32x4_t v13 = vsubq_f32(*(float32x4_t *)v7, v12);
      int8x16_t v14 = (int8x16_t)vaddq_f32(v11, v12);
      v13.i32[3] = v14.i32[0];
      *unint64_t v10 = v13;
      v10[1].i64[0] = vextq_s8(v14, v14, 4uLL).u64[0];
      v7 += v8;
      v6 += 24;
    }
    while (24 * v4 != v6);
  }
  *(_DWORD *)(a1 + 8) = v4;
  unsigned int v15 = a2[4];
  uint64_t v44 = v5;
  uint64_t v45 = 0;
  LODWORD(v43) = 4;
  HIDWORD(v43) = v15;
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  physx::Gu::buildAABBTree((uint64_t)&v43, (physx::Gu::NodeAllocator *)&v40, &v42, (uint64_t *)(a1 + 24));
  uint64_t v16 = v42;
  *(_DWORD *)(a1 + 12) = v42;
  if (v16) {
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 28 * v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/BVHStructureBuilder.cpp", 154);
  else {
    uint64_t v17 = 0;
  }
  *(void *)(a1 + 16) = v17;
  uint64_t v18 = v41;
  if (v41)
  {
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = *((void *)&v40 + 1);
    uint64_t v22 = *((void *)&v40 + 1) + 8;
    do
    {
      long long v23 = (uint64_t *)(v21 + 16 * v19);
      uint64_t v24 = *((unsigned int *)v23 + 2);
      if (v24)
      {
        uint64_t v25 = 0;
        uint64_t v26 = *v23;
        do
        {
          uint64_t v27 = (void *)(v26 + 40 * v25);
          uint64_t v28 = (void *)(v17 + 28 * v20);
          *uint64_t v28 = *v27;
          v28[1] = v27[1];
          v28[2] = v27[2];
          unint64_t v29 = v27[3];
          if (v29)
          {
            int v30 = 0;
            uint64_t v31 = (unsigned int *)v22;
            uint64_t v32 = v18;
            do
            {
              unint64_t v33 = *((void *)v31 - 1);
              int v34 = *v31;
              unint64_t v35 = v33 + 40 * *v31;
              BOOL v37 = v29 >= v33;
              unint64_t v36 = v29 - v33;
              BOOL v37 = !v37 || v29 >= v35;
              if (!v37)
              {
                int v39 = -858993459 * (v36 >> 3);
                goto LABEL_23;
              }
              v31 += 4;
              v30 += v34;
              --v32;
            }
            while (v32);
            int v39 = -1;
LABEL_23:
            int v38 = 2 * (v39 + v30);
          }
          else
          {
            int v38 = (32 * *(_DWORD *)(v26 + 40 * v25 + 32)) | (2 * (*(_DWORD *)(v26 + 40 * v25 + 36) & 0xF)) | 1;
          }
          *(_DWORD *)(v17 + 28 * v20++ + 24) = v38;
          ++v25;
        }
        while (v25 != v24);
      }
      ++v19;
    }
    while (v19 != v18);
  }
  physx::Gu::NodeAllocator::release((physx::Gu::NodeAllocator *)&v40);
  physx::Gu::NodeAllocator::~NodeAllocator((physx::Gu::NodeAllocator *)&v40);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::Cooking::createBVHStructure(uint64_t a1, uint64_t a2, uint64_t (***a3)(void, uint64_t, void *))
{
  fegetenv(&v13);
  fesetenv(MEMORY[0x263EF8320]);
  if (*(void *)(a2 + 8)) {
    BOOL v5 = *(_DWORD *)a2 >= 0x18u;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5 || *(_DWORD *)(a2 + 16) == 0)
  {
    uint64_t v7 = 0;
  }
  else
  {
    long long v11 = 0u;
    int8x16_t v12 = 0u;
    physx::BVHStructureBuilder::loadFromDesc((uint64_t)&v11, (unsigned int *)a2);
    v9[0] = *((void *)&v11 + 1);
    v9[1] = v11;
    int8x16_t v10 = vextq_s8(v12, v12, 8uLL);
    long long v11 = 0u;
    int8x16_t v12 = 0u;
    uint64_t v7 = (**a3)(a3, 17, v9);
    physx::BVHStructureBuilder::~BVHStructureBuilder((physx::BVHStructureBuilder *)&v11);
  }
  fesetenv(&v13);
  return v7;
}

__n128 PxCreateCooking(physx::shdfnd::Foundation *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::shdfnd::Foundation::incRefCount(a1, a2, a3, a4, a5, a6, a7, a8, v14);
  uint64_t v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int8x16_t v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cooking>::getName() [T = physx::Cooking]";
  }
  else {
    int8x16_t v10 = "<allocation names disabled>";
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v9 + 24) + 16))(v9 + 24, 56, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Cooking.cpp", 543);
  *(void *)uint64_t v11 = &unk_26E72A050;
  long long v12 = *(_OWORD *)a3;
  *(void *)(v11 + 24) = *(void *)(a3 + 16);
  *(_OWORD *)(v11 + 8) = v12;
  *(_DWORD *)(v11 + 32) = *(_DWORD *)(a3 + 24);
  __n128 result = *(__n128 *)(a3 + 28);
  *(_DWORD *)(v11 + 52) = *(_DWORD *)(a3 + 44);
  *(__n128 *)(v11 + 36) = result;
  return result;
}

physx::ReducedVertexCloud *physx::ReducedVertexCloud::Clean(physx::ReducedVertexCloud *this)
{
  if (*((void *)this + 4)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 4) = 0;
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 3) = 0;
  return this;
}

uint64_t physx::ReducedVertexCloud::Reduce(physx::ReducedVertexCloud *a1, uint64_t a2)
{
  uint64_t v4 = physx::ReducedVertexCloud::Clean(a1);
  *((void *)a1 + 4) = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v42, 4 * *(unsigned int *)v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/CookingUtils.cpp", 75);
  uint64_t v5 = physx::shdfnd::ReflectionAllocator<float>::allocate((uint64_t)&v41, 4 * *(unsigned int *)a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/CookingUtils.cpp", 77);
  uint64_t v6 = (_DWORD *)v5;
  if (*(_DWORD *)a1)
  {
    uint64_t v7 = (int *)*((void *)a1 + 1);
    uint64_t v8 = (_DWORD *)v5;
    uint64_t v9 = *(unsigned int *)a1;
    do
    {
      int v10 = *v7;
      v7 += 3;
      *v8++ = v10;
      --v9;
    }
    while (v9);
  }
  uint64_t v39 = 0;
  long long v38 = 0u;
  long long v37 = 0u;
  char v40 = 1;
  unsigned int v36 = 0x80000000;
  unint64_t v35 = &unk_26E728438;
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v35);
  if (*(_DWORD *)a1)
  {
    uint64_t v11 = (int *)(*((void *)a1 + 1) + 4);
    long long v12 = v6;
    uint64_t v13 = *(unsigned int *)a1;
    do
    {
      int v14 = *v11;
      v11 += 3;
      *v12++ = v14;
      --v13;
    }
    while (v13);
  }
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v35);
  uint64_t v15 = *(unsigned int *)a1;
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (int *)(*((void *)a1 + 1) + 8);
    do
    {
      int v18 = *v17;
      v17 += 3;
      v6[v16++] = v18;
    }
    while (v15 != v16);
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v35);
  }
  else if (!v6)
  {
    *((_DWORD *)a1 + 4) = 0;
LABEL_26:
    uint64_t v21 = 0;
    *((void *)a1 + 3) = 0;
    if (!a2) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v19 = (unsigned int *)v37;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  uint64_t v20 = *(unsigned int *)a1;
  *((_DWORD *)a1 + 4) = 0;
  if (!v20) {
    goto LABEL_26;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v20, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/CookingUtils.cpp", 98);
  int v22 = *(_DWORD *)a1;
  *((void *)a1 + 3) = v21;
  if (v22)
  {
    uint64_t v23 = *((void *)a1 + 1);
    uint64_t v24 = *((void *)a1 + 4);
    uint64_t v25 = &dword_234423658;
    while (1)
    {
      unsigned int v27 = *v19++;
      uint64_t v26 = v27;
      uint64_t v28 = (int *)(v23 + 12 * v27);
      int v29 = *v28;
      if (*v28 != *v25) {
        break;
      }
      int v30 = v28[1];
      if (v30 != v25[1] || v28[2] != v25[2]) {
        goto LABEL_20;
      }
      unsigned int v31 = *((_DWORD *)a1 + 4);
LABEL_21:
      *(_DWORD *)(v24 + 4 * v26) = v31 - 1;
      uint64_t v25 = v28;
      if (!--v22) {
        goto LABEL_22;
      }
    }
    int v30 = *(_DWORD *)(v23 + 12 * v26 + 4);
LABEL_20:
    unsigned int v32 = *((_DWORD *)a1 + 4);
    unsigned int v31 = v32 + 1;
    *((_DWORD *)a1 + 4) = v32 + 1;
    unint64_t v33 = (int *)(v21 + 12 * v32);
    int *v33 = v29;
    v33[1] = v30;
    v33[2] = *(_DWORD *)(v23 + 12 * v26 + 8);
    goto LABEL_21;
  }
LABEL_22:
  if (a2)
  {
LABEL_23:
    *(void *)(a2 + 16) = *((void *)a1 + 4);
    *(_DWORD *)(a2 + 8) = *((_DWORD *)a1 + 4);
    *(void *)a2 = v21;
  }
LABEL_24:
  unint64_t v35 = &unk_26E728438;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v35);
  return 1;
}

void physx::Gu::EdgeList::~EdgeList(physx::Gu::EdgeList *this)
{
  if (*((void *)this + 5)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 5) = 0;
  if (*((void *)this + 4)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 4) = 0;
  if (*((void *)this + 1)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 1) = 0;
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 3) = 0;
}

uint64_t physx::Gu::EdgeListBuilder::createFacesToEdges(physx::Gu::EdgeListBuilder *this, unsigned int a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2 || !(a3 | a4))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 147, "EdgeList::CreateFacesToEdges: NULL parameter!", a6, a7, a8, v47);
    return 0;
  }
  if (*((void *)this + 3)) {
    return 1;
  }
  uint64_t v12 = 3 * a2;
  uint64_t v13 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v14 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::EdgeTriangleData>::getName() [T = physx::Gu::"
  }
          "EdgeTriangleData]";
  else {
    int v14 = "<allocation names disabled>";
  }
  *((void *)this + 3) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v13 + 24) + 16))(v13 + 24, 4 * v12, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 155);
  uint64_t v15 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v56, 12 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 156);
  uint64_t v16 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v55, 12 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 157);
  unsigned int v48 = 3 * a2;
  uint64_t v17 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::EdgeData>::getName() [T = physx::Gu::EdgeData]";
  }
  else {
    int v18 = "<allocation names disabled>";
  }
  uint64_t v19 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v17 + 24)
                                                                                                 + 16))(v17 + 24, 24 * a2, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 158);
  uint64_t v20 = 0;
  do
  {
    if (a3)
    {
      unsigned int v21 = *(_DWORD *)(a3 + 4 * v20);
      unsigned int v22 = *(_DWORD *)(a3 + 4 * (v20 + 1));
      unsigned int v23 = *(_DWORD *)(a3 + 4 * (v20 + 2));
    }
    else
    {
      if (!a4)
      {
        unsigned int v24 = 0;
        unsigned int v21 = 0;
        unsigned int v23 = 2;
        int v25 = 1;
        unsigned int v22 = 1;
        goto LABEL_21;
      }
      unsigned int v21 = *(unsigned __int16 *)(a4 + 2 * v20);
      unsigned int v22 = *(unsigned __int16 *)(a4 + 2 * (v20 + 1));
      unsigned int v23 = *(unsigned __int16 *)(a4 + 2 * (v20 + 2));
    }
    if (v21 >= v22) {
      unsigned int v24 = v22;
    }
    else {
      unsigned int v24 = v21;
    }
    if (v21 <= v22) {
      int v25 = v22;
    }
    else {
      int v25 = v21;
    }
LABEL_21:
    uint64_t v26 = 4 * v20;
    *(_DWORD *)(v15 + v26) = v24;
    *(_DWORD *)(v16 + v26) = v25;
    if (v22 >= v23) {
      unsigned int v27 = v23;
    }
    else {
      unsigned int v27 = v22;
    }
    if (v22 <= v23) {
      unsigned int v22 = v23;
    }
    unsigned int v28 = v20 + 1;
    *(_DWORD *)(v15 + 4 * v28) = v27;
    *(_DWORD *)(v16 + 4 * v28) = v22;
    if (v23 >= v21) {
      unsigned int v29 = v21;
    }
    else {
      unsigned int v29 = v23;
    }
    if (v23 > v21) {
      unsigned int v21 = v23;
    }
    unsigned int v30 = v20 + 2;
    *(_DWORD *)(v15 + 4 * v30) = v29;
    *(_DWORD *)(v16 + 4 * v30) = v21;
    v20 += 3;
  }
  while (v12 != v20);
  uint64_t v53 = 0;
  long long v52 = 0u;
  long long v51 = 0u;
  char v54 = 1;
  unsigned int v50 = 0x80000000;
  uint64_t v49 = &unk_26E728438;
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v49);
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v49);
  unsigned int v32 = (unsigned int *)v51;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 4) = a2;
  if (v48 <= 1) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = v48;
  }
  uint64_t v34 = *((void *)this + 3);
  int v35 = -1;
  int v36 = -1;
  do
  {
    int v37 = v36;
    unsigned int v39 = *v32++;
    unsigned int v38 = v39;
    int v36 = *(_DWORD *)(v15 + 4 * v39);
    int v40 = v35;
    int v35 = *(_DWORD *)(v16 + 4 * v39);
    uint64_t v41 = *(unsigned int *)this;
    if (v36 != v37 || v35 != v40)
    {
      uint64_t v43 = (int *)&v19[8 * v41];
      *uint64_t v43 = v36;
      v43[1] = v35;
      LODWORD(v41) = v41 + 1;
      *(_DWORD *)this = v41;
    }
    *(_DWORD *)(v34 + 12 * (v38 / 3) + 4 * (v38 % 3)) = v41 - 1;
    --v33;
  }
  while (v33);
  uint64_t v44 = *(unsigned int *)this;
  if (v44)
  {
    uint64_t v45 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v44, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/EdgeList.cpp", 212);
    size_t v46 = (8 * *(_DWORD *)this);
  }
  else
  {
    size_t v46 = 0;
    uint64_t v45 = 0;
  }
  *((void *)this + 1) = v45;
  memcpy(v45, v19, v46);
  if (v19) {
    (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v19);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v15);
  uint64_t v49 = &unk_26E728438;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v49);
  return 1;
}

uint64_t physx::MeshCleaner::MeshCleaner(uint64_t a1, unsigned int a2, float *a3, unsigned int a4, unsigned int *a5, float a6)
{
  uint64_t v10 = a2;
  int v11 = 12 * a2;
  unsigned int v97 = a4;
  if (a2)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/MeshCleaner.cpp", 79);
    a4 = v97;
    uint64_t v13 = (float *)v12;
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v94 = a1;
  if (a4)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * a4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/MeshCleaner.cpp", 82);
    uint64_t v98 = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))();
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v98 = 0;
  }
  if (a6 == 0.0)
  {
    memcpy(v13, a3, v11 & 0xFFFFFFFC);
  }
  else if (a2)
  {
    __n128 v17 = ((__n128 (*)(void))*(void *)(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))();
    uint64_t v16 = 0;
    v17.n128_f32[0] = 1.0 / a6;
    float32x2_t v18 = (float32x2_t)vdup_lane_s32((int32x2_t)v17.n128_u64[0], 0);
    uint64_t v19 = v13 + 2;
    uint64_t v20 = a3 + 2;
    do
    {
      v15[v16] = v16;
      float v21 = floorf((float)(*v20 * v17.n128_f32[0]) + 0.5);
      *((float32x2_t *)v19 - 1) = vrndm_f32(vmla_f32((float32x2_t)0x3F0000003F000000, v18, *(float32x2_t *)(v20 - 2)));
      float *v19 = v21;
      v19 += 3;
      ++v16;
      v20 += 3;
    }
    while (v10 != v16);
    goto LABEL_14;
  }
  uint64_t v15 = 0;
LABEL_14:
  float v96 = v15;
  if (v97 <= a2) {
    unsigned int v22 = a2;
  }
  else {
    unsigned int v22 = v97;
  }
  unsigned int v23 = v22 | (v22 >> 1) | ((v22 | (v22 >> 1)) >> 2);
  unsigned int v24 = v23 | (v23 >> 4) | ((v23 | (v23 >> 4)) >> 8);
  int v25 = v24 | HIWORD(v24);
  if (v25 + 1 + v22) {
    uint64_t v26 = (char *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))();
  }
  else {
    uint64_t v26 = 0;
  }
  memset(v26, 255, 4 * (v25 + 1));
  if (a2)
  {
    size_t v27 = 4 * v10;
    unsigned int v28 = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))();
  }
  else
  {
    unsigned int v28 = 0;
    size_t v27 = 4 * v10;
  }
  memset(v28, 255, v27);
  if (v97)
  {
    LODWORD(v29) = 3 * v97;
    if (3 * v97 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v29;
    }
    unsigned int v30 = a5;
    do
    {
      unsigned int v32 = *v30++;
      uint64_t v31 = v32;
      if (v32 < a2) {
        *((_DWORD *)v28 + v31) = 0;
      }
      --v29;
    }
    while (v29);
  }
  uint64_t v33 = &v26[4 * (v25 + 1)];
  if (a2)
  {
    uint64_t v34 = 0;
    unsigned int v35 = 0;
    do
    {
      if (*((_DWORD *)v28 + v34) != -1)
      {
        int v36 = &v13[3 * v34];
        float v37 = *v36;
        float v38 = v36[1];
        float v39 = v36[2];
        uint64_t v40 = (((LODWORD(v37) + 11 * LODWORD(v38) + 2147483631 * LODWORD(v39)) >> 22) & 0x1FF ^ (((LODWORD(v37) + 11 * LODWORD(v38) + 2147483631 * LODWORD(v39)) & 0x7FFFFFFFu) >> 12) ^ (LODWORD(v37) + 11 * LODWORD(v38) + 2147483631 * LODWORD(v39)) & 0x7FFFFFFF) & v25;
        uint64_t v41 = *(unsigned int *)&v26[4 * v40];
        if (v41 == -1)
        {
LABEL_39:
          *((_DWORD *)v28 + v34) = v35;
          char v42 = &v13[3 * v35];
          *char v42 = v37;
          v42[1] = v38;
          void v42[2] = v39;
          if (v96) {
            v96[v35] = v34;
          }
          *(_DWORD *)&v33[4 * v35] = *(_DWORD *)&v26[4 * v40];
          *(_DWORD *)&v26[4 * v40] = v35++;
        }
        else
        {
          while (v13[3 * v41] != v37 || v13[3 * v41 + 1] != v38 || v13[3 * v41 + 2] != v39)
          {
            uint64_t v41 = *(unsigned int *)&v33[4 * v41];
            if (v41 == -1) {
              goto LABEL_39;
            }
          }
          *((_DWORD *)v28 + v34) = v41;
        }
      }
      ++v34;
    }
    while (v34 != v10);
  }
  else
  {
    unsigned int v35 = 0;
  }
  if (v97)
  {
    int v43 = 0;
    unsigned int v44 = 0;
    do
    {
      uint64_t v45 = *a5;
      uint64_t v46 = a5[1];
      uint64_t v47 = a5[2];
      if (v45 < a2 && v46 < a2 && v47 < a2)
      {
        unsigned int v50 = &a3[3 * v45];
        long long v51 = &a3[3 * v46];
        long long v52 = &a3[3 * v47];
        float v53 = v50[1];
        float v54 = *v50 - *v51;
        float v55 = v53 - v51[1];
        float v56 = v50[2];
        float v57 = *v50 - *v52;
        float v58 = v56 - v51[2];
        float v59 = v53 - v52[1];
        float v60 = v56 - v52[2];
        if ((float)((float)((float)((float)((float)(v58 * v57) - (float)(v54 * v60))
                                   * (float)((float)(v58 * v57) - (float)(v54 * v60)))
                           + (float)((float)((float)(v55 * v60) - (float)(v58 * v59))
                                   * (float)((float)(v55 * v60) - (float)(v58 * v59))))
                   + (float)((float)((float)(v54 * v59) - (float)(v55 * v57))
                           * (float)((float)(v54 * v59) - (float)(v55 * v57)))) != 0.0)
        {
          int v61 = *((_DWORD *)v28 + v45);
          int v62 = *((_DWORD *)v28 + v46);
          int v63 = *((_DWORD *)v28 + v47);
          BOOL v64 = v61 == v62 || v62 == v63;
          if (!v64 && v63 != v61)
          {
            unsigned int v66 = 3 * v44;
            *(_DWORD *)(v14 + 4 * v66) = v61;
            *(_DWORD *)(v14 + 4 * (v66 + 1)) = v62;
            *(_DWORD *)(v14 + 4 * (v66 + 2)) = v63;
            *(_DWORD *)(v98 + 4 * v44++) = v43;
          }
        }
      }
      ++v43;
      a5 += 3;
    }
    while (v97 != v43);
    if (v28) {
      goto LABEL_66;
    }
  }
  else
  {
    unsigned int v44 = 0;
    if (v28) {
LABEL_66:
    }
      (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v28);
  }
  memset(v26, 255, 4 * (v25 + 1));
  uint64_t v67 = v98;
  if (v44)
  {
    uint64_t v68 = 0;
    unsigned int v69 = v44;
    unsigned int v44 = 0;
    char v70 = 1;
    do
    {
      uint64_t v71 = (_DWORD *)(v14 + 12 * v68);
      int v72 = v71[1];
      unsigned int v73 = v71[2];
      int v74 = (*v71 - (v72 + v73)) ^ (v73 >> 13);
      unsigned int v75 = (v72 - v73 - v74) ^ (v74 << 8);
      unsigned int v76 = (v73 - v74 - v75) ^ (v75 >> 13);
      int v77 = (v74 - v75 - v76) ^ (v76 >> 12);
      unsigned int v78 = (v75 - v76 - v77) ^ (v77 << 16);
      unsigned int v79 = (v76 - v77 - v78) ^ (v78 >> 5);
      int v80 = (v77 - v78 - v79) ^ (v79 >> 3);
      uint64_t v81 = ((v79 - v80 - ((v78 - v79 - v80) ^ (v80 << 10))) ^ (((v78 - v79 - v80) ^ (v80 << 10)) >> 15)) & v25;
      for (uint64_t i = *(unsigned int *)&v26[4 * v81]; i != -1; uint64_t i = *(unsigned int *)&v33[4 * i])
      {
        int v83 = (_DWORD *)(v14 + 12 * i);
        if (*v83 == *v71 && v83[1] == v72 && v83[2] == v73) {
          goto LABEL_76;
        }
      }
      int v84 = *(_DWORD *)(v98 + 4 * v68);
      *(_DWORD *)(v98 + 4 * v44) = v84;
      v70 &= v84 == v44;
      uint64_t v85 = v14 + 12 * v44;
      uint64_t v86 = *(void *)v71;
      *(_DWORD *)(v85 + 8) = v71[2];
      *(void *)uint64_t v85 = v86;
      *(_DWORD *)&v33[4 * v44] = *(_DWORD *)&v26[4 * v81];
      *(_DWORD *)&v26[4 * v81] = v44++;
LABEL_76:
      ++v68;
    }
    while (v68 != v69);
  }
  else
  {
    unsigned int v87 = 0;
    char v70 = 1;
    if (!v26) {
      goto LABEL_82;
    }
  }
  (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v26);
  unsigned int v87 = v44;
LABEL_82:
  if (v96)
  {
    if (v35)
    {
      uint64_t v88 = v13 + 2;
      BOOL v89 = v96;
      uint64_t v90 = v35;
      do
      {
        int v91 = *v89++;
        BOOL v92 = &a3[3 * v91];
        *((void *)v88 - 1) = *(void *)v92;
        *uint64_t v88 = *((_DWORD *)v92 + 2);
        v88 += 3;
        --v90;
      }
      while (v90);
    }
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(_DWORD *)uint64_t v94 = v35;
  *(_DWORD *)(v94 + 4) = v87;
  *(void *)(v94 + 8) = v13;
  *(void *)(v94 + 16) = v14;
  if ((v70 & 1) != 0 && v98)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v98);
    uint64_t v67 = 0;
  }
  *(void *)(v94 + 24) = v67;
  return v94;
}

void physx::MeshCleaner::~MeshCleaner(physx::MeshCleaner *this)
{
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 3) = 0;
  if (*((void *)this + 2)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 2) = 0;
  if (*((void *)this + 1)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 1) = 0;
}

double physx::createQuantizer(physx *this)
{
  uint64_t v1 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    long long v2 = "static const char *physx::shdfnd::ReflectionAllocator<QuantizerImpl>::getName() [T = QuantizerImpl]";
  }
  else {
    long long v2 = "<allocation names disabled>";
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v1 + 24) + 16))(v1 + 24, 64, v2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 336);
  *(void *)uint64_t v3 = &unk_26E72A130;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  double result = 0.00781250185;
  *(_OWORD *)(v3 + 8) = xmmword_2343679C0;
  *(void *)(v3 + 24) = 0;
  return result;
}

void physx::BVHStructureBuilder::~BVHStructureBuilder(physx::BVHStructureBuilder *this)
{
  if (*(void *)this) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)this = 0;
  if (*((void *)this + 2)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 2) = 0;
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 3) = 0;
}

uint64_t physx::BigConvexDataBuilder::save(uint64_t a1, void (***a2)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), int a3)
{
  if (!physx::Gu::WriteHeader(83, 85, 80, 77, 0, a3, a2)
    || !physx::Gu::WriteHeader(71, 65, 85, 83, 0, a3, a2))
  {
    return 0;
  }
  physx::writeDword(**(unsigned __int16 **)(a1 + 8), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
  physx::writeDword(*(unsigned __int16 *)(*(void *)(a1 + 8) + 2), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
  (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, *(unsigned int **)(*(void *)(a1 + 8) + 8), 2 * *(unsigned __int16 *)(*(void *)(a1 + 8) + 2));
  return physx::BigConvexDataBuilder::saveValencies(a1, a2, a3);
}

uint64_t physx::BigConvexDataBuilder::saveValencies(uint64_t a1, void (***a2)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), int a3)
{
  uint64_t v6 = physx::Gu::WriteHeader(86, 65, 76, 69, 2u, a3, a2);
  if (v6)
  {
    physx::writeDword(*(_DWORD *)(*(void *)(a1 + 8) + 16), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeDword(*(_DWORD *)(*(void *)(a1 + 8) + 20), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    uint64_t v7 = physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v20, 2 * *(unsigned int *)(*(void *)(a1 + 8) + 16), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/BigConvexDataBuilder.cpp", 345);
    uint64_t v8 = (char *)v7;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(unsigned int *)(v9 + 16);
    if (v10)
    {
      int v11 = *(__int16 **)(v9 + 24);
      uint64_t v12 = (_WORD *)v7;
      uint64_t v13 = v10;
      do
      {
        __int16 v14 = *v11;
        v11 += 2;
        *v12++ = v14;
        --v13;
      }
      while (v13);
      LOWORD(v15) = 0;
      uint64_t v16 = (unsigned __int16 *)v7;
      do
      {
        unsigned int v18 = *v16++;
        unsigned int v17 = v18;
        if (v18 <= (unsigned __int16)v15) {
          uint64_t v15 = (unsigned __int16)v15;
        }
        else {
          uint64_t v15 = v17;
        }
        LODWORD(v10) = v10 - 1;
      }
      while (v10);
    }
    else
    {
      uint64_t v15 = 0;
    }
    physx::writeDword(v15, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::Gu::StoreIndices(v15, *(_DWORD *)(*(void *)(a1 + 8) + 16), v8, (uint64_t (***)(void, __int16 *, uint64_t))a2, a3);
    if (v8) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
    }
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, *(unsigned int **)(*(void *)(a1 + 8) + 32), *(unsigned int *)(*(void *)(a1 + 8) + 20));
  }
  return v6;
}

uint64_t physx::BigConvexDataBuilder::computeValencies(physx::BigConvexDataBuilder *this, const physx::ConvexHullBuilder *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a2 + 7);
  size_t v5 = *(unsigned __int8 *)(v4 + 38);
  uint64_t v6 = *((void *)this + 1);
  *(_DWORD *)(v6 + 16) = v5;
  __int16 v7 = 4 * v5 + 12;
  uint64_t v8 = v7 & 0x7F0;
  int v9 = 2 * (*(_WORD *)(v4 + 36) & 0x7FFF);
  if ((v7 & 0x7F0) + v9)
  {
    uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, (v7 & 0x7F0u) + v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/BigConvexDataBuilder.cpp", 118);
    uint64_t v6 = *((void *)this + 1);
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)(v6 + 24) = v10;
  *(void *)(v6 + 32) = &v10[v8];
  *(void *)(v6 + 40) = v10;
  bzero(v10, (4 * v5));
  bzero(v62, v5);
  uint64_t v11 = *((void *)a2 + 7);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 39);
  if (*(unsigned char *)(v11 + 39))
  {
    uint64_t v13 = 0;
    uint64_t v14 = *((void *)a2 + 1);
    uint64_t v15 = *((void *)a2 + 2);
    do
    {
      uint64_t v16 = v14 + 20 * v13;
      uint64_t v17 = *(unsigned __int8 *)(v16 + 18);
      if (*(unsigned char *)(v16 + 18))
      {
        unsigned int v18 = (unsigned __int8 *)(v15 + *(unsigned __int16 *)(v16 + 16));
        uint64_t v19 = *(void *)(*((void *)this + 1) + 24);
        do
        {
          unsigned int v20 = *v18++;
          ++*(_WORD *)(v19 + 4 * v20);
          --v17;
        }
        while (v17);
      }
      ++v13;
    }
    while (v13 != v12);
  }
  uint64_t v21 = *((void *)this + 1);
  unsigned int v22 = *(unsigned __int16 **)(v21 + 24);
  v22[1] = 0;
  uint64_t v23 = *(unsigned int *)(v21 + 16);
  if (v23 >= 2)
  {
    int v24 = 0;
    uint64_t v25 = v23 - 1;
    uint64_t v26 = v22;
    do
    {
      v24 += *v26;
      v26[3] = v24;
      v26 += 2;
      --v25;
    }
    while (v25);
  }
  *(_DWORD *)(v21 + 20) = v22[2 * (v23 - 1)] + v22[2 * (v23 - 1) + 1];
  if (v12)
  {
    unint64_t v27 = 0;
    uint64_t v28 = *((void *)a2 + 1);
    do
    {
      uint64_t v29 = v28 + 20 * v27;
      uint64_t v30 = *(unsigned __int8 *)(v29 + 18);
      if (*(unsigned char *)(v29 + 18))
      {
        uint64_t v31 = 0;
        uint64_t v32 = *((void *)a2 + 2) + *(unsigned __int16 *)(v29 + 16);
        do
        {
          uint64_t v33 = *(unsigned __int8 *)(v32 + v31);
          uint64_t v34 = v31 + 1;
          if (!v62[v33])
          {
            if (v34 == v30) {
              uint64_t v35 = 0;
            }
            else {
              uint64_t v35 = v31 + 1;
            }
            unsigned __int8 v36 = *(unsigned char *)(v32 + v35);
            uint64_t v37 = *(void *)(*((void *)this + 1) + 32);
            uint64_t v38 = *(void *)(*((void *)this + 1) + 24) + 4 * v33;
            uint64_t v39 = *(unsigned __int16 *)(v38 + 2);
            *(_WORD *)(v38 + 2) = v39 + 1;
            *(unsigned char *)(v37 + v39) = v36;
            uint64_t v40 = *((void *)a2 + 5);
            uint64_t v28 = *((void *)a2 + 1);
            uint64_t v41 = *((void *)a2 + 3);
            char v42 = (unsigned __int8 *)(v41
                                    + 2
                                    * (*(_WORD *)(v40 + 2 * (v31 + *(unsigned __int16 *)(v28 + 20 * v27 + 16))) & 0x7FFF));
            uint64_t v43 = *v42;
            unsigned __int8 v44 = v42[1];
            if (v27 == v43) {
              LOBYTE(v43) = v44;
            }
            char v45 = 1;
            while (v27 != v43)
            {
              uint64_t v46 = v28 + 20 * v43;
              uint64_t v47 = *(unsigned __int8 *)(v46 + 18);
              uint64_t v48 = *(unsigned __int16 *)(v46 + 16);
              if (*(unsigned char *)(v46 + 18))
              {
                uint64_t v49 = 0;
                uint64_t v50 = *((void *)a2 + 2) + v48;
                while (*(unsigned __int8 *)(v50 + v49) != v33)
                {
                  if (v47 == ++v49) {
                    goto LABEL_28;
                  }
                }
                if (*(unsigned __int8 *)(v50 + ((int)v49 + 1) % v47) == v36)
                {
                  if (v49) {
                    int v51 = v49;
                  }
                  else {
                    int v51 = v47;
                  }
                  LODWORD(v49) = v51 - 1;
                  unsigned __int8 v36 = *(unsigned char *)(v50 + (v51 - 1));
                }
                else
                {
                  unsigned __int8 v36 = *(unsigned char *)(v50 + ((int)v49 + 1) % v47);
                }
                uint64_t v52 = *(void *)(*((void *)this + 1) + 32);
                uint64_t v53 = *(void *)(*((void *)this + 1) + 24) + 4 * v33;
                uint64_t v54 = *(unsigned __int16 *)(v53 + 2);
                *(_WORD *)(v53 + 2) = v54 + 1;
                *(unsigned char *)(v52 + v54) = v36;
                ++v45;
                uint64_t v40 = *((void *)a2 + 5);
                uint64_t v28 = *((void *)a2 + 1);
                uint64_t v41 = *((void *)a2 + 3);
                LODWORD(v48) = *(unsigned __int16 *)(v28 + 20 * v43 + 16);
              }
              else
              {
LABEL_28:
                LODWORD(v49) = 0;
              }
              float v55 = (unsigned __int8 *)(v41 + 2 * (*(_WORD *)(v40 + 2 * (v49 + v48)) & 0x7FFF));
              int v56 = *v55;
              unsigned __int8 v57 = v55[1];
              if (v56 == v43) {
                LOBYTE(v43) = v57;
              }
              else {
                LOBYTE(v43) = v56;
              }
            }
            v62[v33] = v45;
          }
          uint64_t v31 = v34;
        }
        while (v34 != v30);
        uint64_t v11 = *((void *)a2 + 7);
      }
      ++v27;
    }
    while (v27 < *(unsigned __int8 *)(v11 + 39));
    uint64_t v58 = *((void *)this + 1);
    unsigned int v22 = *(unsigned __int16 **)(v58 + 24);
    LODWORD(v23) = *(_DWORD *)(v58 + 16);
  }
  v22[1] = 0;
  if (v23 >= 2)
  {
    int v59 = 0;
    uint64_t v60 = v23 - 1;
    do
    {
      v59 += *v22;
      float32x4_t v22[3] = v59;
      v22 += 2;
      --v60;
    }
    while (v60);
  }
  return 1;
}

uint64_t physx::BigConvexDataBuilder::precompute(physx::BigConvexDataBuilder *this, unsigned int a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v4 = (_WORD *)*((void *)this + 1);
  *uint64_t v4 = a2;
  int v5 = a2 * a2;
  v4[1] = 6 * a2 * a2;
  *(void *)(*((void *)this + 1) + 8) = physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)v50, 4 * ((3 * a2 * a2) & 0x7FFF), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/BigConvexDataBuilder.cpp", 69);
  int v54 = 0;
  uint64_t v53 = 0;
  int v52 = 0;
  uint64_t v51 = 0;
  if (a2)
  {
    int v6 = 0;
    unsigned int v7 = 0;
    float v8 = (float)(a2 - 1) * 0.5;
    do
    {
      float v9 = 1.0 - (float)((float)v7 / v8);
      int v10 = v6;
      int v11 = v6;
      unsigned int v12 = v7;
      do
      {
        float v13 = 1.0;
        float v14 = 1.0 - (float)((float)v12 / v8);
        float v15 = sqrtf((float)((float)(v14 * v14) + 1.0) + (float)(v9 * v9));
        if (v15 <= 0.0)
        {
          float v16 = 1.0 - (float)((float)v7 / v8);
        }
        else
        {
          float v13 = 1.0 / v15;
          float v14 = v14 * (float)(1.0 / v15);
          float v16 = v9 * (float)(1.0 / v15);
        }
        uint64_t v17 = 0;
        v50[0] = -v13;
        v50[1] = v14;
        v50[2] = v16;
        v50[3] = v13;
        v50[4] = v14;
        v50[5] = v16;
        v50[6] = v16;
        v50[7] = -v13;
        v50[8] = v14;
        v50[9] = v16;
        v50[10] = v13;
        v50[11] = v14;
        v50[12] = v14;
        v50[13] = v16;
        v50[14] = -v13;
        v50[15] = v14;
        v50[16] = v16;
        v50[17] = v13;
        v50[18] = -v13;
        v50[19] = v16;
        v50[20] = v14;
        v50[21] = v13;
        v50[22] = v16;
        v50[23] = v14;
        v50[24] = v14;
        v50[25] = -v13;
        v50[26] = v16;
        v50[27] = v14;
        v50[28] = v13;
        v50[29] = v16;
        v50[30] = v16;
        v50[31] = v14;
        v50[32] = -v13;
        v50[33] = v16;
        v50[34] = v14;
        v50[35] = v13;
        uint64_t v19 = *((void *)this + 1);
        uint64_t v18 = *((void *)this + 2);
        uint64_t v20 = *(void *)(v19 + 24);
        uint64_t v21 = *(void *)(v19 + 32);
        do
        {
          unsigned int v22 = &v50[3 * v17];
          uint64_t v23 = *((unsigned __int8 *)&v53 + v17);
          long long v55 = 0uLL;
          long long v56 = 0uLL;
          float v24 = *v22;
          float v25 = v22[1];
          float v26 = v22[2];
          float v27 = (float)((float)(*(float *)(v18 + 12 * v23 + 4) * v25)
                      + (float)(*(float *)(v18 + 12 * v23) * *v22))
              + (float)(*(float *)(v18 + 12 * v23 + 8) * v26);
          do
          {
            uint64_t v28 = v23;
            uint64_t v29 = 4 * v23;
            uint64_t v30 = *(unsigned __int16 *)(v20 + v29);
            if (!*(_WORD *)(v20 + v29)) {
              break;
            }
            uint64_t v31 = (unsigned __int8 *)(v21 + *(unsigned __int16 *)(v20 + 4 * v28 + 2));
            uint64_t v23 = v28;
            do
            {
              unsigned int v33 = *v31++;
              uint64_t v32 = v33;
              float v34 = (float)((float)(v25 * *(float *)(v18 + 12 * v33 + 4)) + (float)(*(float *)(v18 + 12 * v33) * v24))
                  + (float)(*(float *)(v18 + 12 * v33 + 8) * v26);
              if (v34 < v27)
              {
                int v35 = *((_DWORD *)&v55 + (v32 >> 5));
                if ((v35 & (1 << v32)) == 0)
                {
                  *((_DWORD *)&v55 + (v32 >> 5)) = v35 | (1 << v32);
                  uint64_t v23 = v32;
                  float v27 = v34;
                }
              }
              --v30;
            }
            while (v30);
          }
          while (v23 != v28);
          *((unsigned char *)&v53 + v17) = v28;
          uint64_t v36 = *((unsigned __int8 *)&v51 + v17);
          long long v55 = 0uLL;
          long long v56 = 0uLL;
          float v37 = -(float)((float)((float)(v25 * *(float *)(v18 + 12 * v36 + 4))
                               + (float)(*(float *)(v18 + 12 * v36) * v24))
                       + (float)(*(float *)(v18 + 12 * v36 + 8) * v26));
          do
          {
            uint64_t v38 = v36;
            uint64_t v39 = 4 * v36;
            uint64_t v40 = *(unsigned __int16 *)(v20 + v39);
            if (!*(_WORD *)(v20 + v39)) {
              break;
            }
            uint64_t v41 = (unsigned __int8 *)(v21 + *(unsigned __int16 *)(v20 + 4 * v38 + 2));
            uint64_t v36 = v38;
            do
            {
              unsigned int v43 = *v41++;
              uint64_t v42 = v43;
              float v44 = -(float)((float)((float)(v25 * *(float *)(v18 + 12 * v43 + 4))
                                   + (float)(*(float *)(v18 + 12 * v43) * v24))
                           + (float)(*(float *)(v18 + 12 * v43 + 8) * v26));
              if (v37 > v44)
              {
                int v45 = *((_DWORD *)&v55 + (v42 >> 5));
                if ((v45 & (1 << v42)) == 0)
                {
                  *((_DWORD *)&v55 + (v42 >> 5)) = v45 | (1 << v42);
                  uint64_t v36 = v42;
                  float v37 = v44;
                }
              }
              --v40;
            }
            while (v40);
          }
          while (v36 != v38);
          *((unsigned char *)&v51 + v17++) = v38;
        }
        while (v17 != 12);
        int v46 = 0;
        for (uint64_t i = 0; i != 6; ++i)
        {
          *(unsigned char *)(*(void *)(*((void *)this + 1) + 8) + (v10 + v46)) = *((unsigned char *)&v53 + i);
          *(unsigned char *)(*(void *)(*((void *)this + 1) + 8)
                   + v10
                   + v46
                   + *(unsigned __int16 *)(*((void *)this + 1) + 2)) = *((unsigned char *)&v51 + i);
          unsigned int v48 = v11 + v46;
          *(unsigned char *)(*(void *)(*((void *)this + 1) + 8) + v48) = *((unsigned char *)&v53 + i + 6);
          *(unsigned char *)(*(void *)(*((void *)this + 1) + 8) + v48 + *(unsigned __int16 *)(*((void *)this + 1) + 2)) = *((unsigned char *)&v51 + i + 6);
          v46 += v5;
        }
        ++v12;
        ++v11;
        v10 += a2;
      }
      while (v12 < a2);
      ++v7;
      v6 += a2 + 1;
    }
    while (v7 != a2);
  }
  return 1;
}

void physx::Cooking::~Cooking(physx::Cooking *this)
{
  if (this) {
    (*(void (**)(uint64_t, physx::Cooking *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
  }
}

uint64_t UpdateLink(unsigned int a1, unsigned int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6)
  {
    int v12 = *(_DWORD *)(a6 + 4 * (3 * a1 + 1));
    int v28 = *(_DWORD *)(a6 + 12 * a1);
    int v29 = v12;
    int v30 = *(_DWORD *)(a6 + 4 * (3 * a1 + 2));
    int v13 = *(_DWORD *)(a6 + 4 * (3 * a2 + 1));
    int v25 = *(_DWORD *)(a6 + 12 * a2);
    int v26 = v13;
    int v27 = *(_DWORD *)(a6 + 4 * (3 * a2 + 2));
  }
  if (a7)
  {
    int v14 = *(unsigned __int16 *)(a7 + 2 * (3 * a1 + 1));
    int v28 = *(unsigned __int16 *)(a7 + 6 * a1);
    int v29 = v14;
    int v30 = *(unsigned __int16 *)(a7 + 2 * (3 * a1 + 2));
    int v15 = *(unsigned __int16 *)(a7 + 2 * (3 * a2 + 1));
    int v25 = *(unsigned __int16 *)(a7 + 6 * a2);
    int v26 = v15;
    int v27 = *(unsigned __int16 *)(a7 + 2 * (3 * a2 + 2));
  }
  unsigned int Edge = physx::Gu::TriangleT<unsigned int>::findEdge(&v28, a3, a4);
  unsigned int v17 = physx::Gu::TriangleT<unsigned int>::findEdge(&v25, a3, a4);
  BOOL v21 = Edge == 255 || v17 == 255;
  uint64_t v22 = !v21;
  if (v21)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Adjacencies.cpp", 509, "Adjacencies::UpdateLink: invalid edge reference", v18, v19, v20, v24);
  }
  else
  {
    *(_DWORD *)(a5 + 12 * a1 + 4 * Edge) = a2 | (v17 << 30);
    *(_DWORD *)(a5 + 12 * a2 + 4 * v17) = a1 | (Edge << 30);
  }
  return v22;
}

uint64_t physx::Gu::TriangleT<unsigned int>::findEdge(int *a1, int a2, int a3)
{
  int v3 = *a1;
  if (*a1 == a2 && a1[1] == a3 || v3 == a3 && a1[1] == a2) {
    return 0;
  }
  if (v3 == a2 && a1[2] == a3 || v3 == a3 && a1[2] == a2) {
    return 1;
  }
  int v5 = a1[1];
  if (v5 == a2 && a1[2] == a3 || v5 == a3 && a1[2] == a2) {
    return 2;
  }
  else {
    return 255;
  }
}

uint64_t QuantizerImpl::kmeansQuantize3D(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, char a5, unsigned int a6, unsigned int *a7)
{
  *a7 = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  if (!a2) {
    return 0;
  }
  float32x2_t v11 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
  float32x2_t v12 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
  int v13 = (uint64_t *)(a1 + 48);
  int v14 = (float *)(a3 + 8);
  float v15 = 8.5071e37;
  float v16 = -8.5071e37;
  unsigned int v17 = a2;
  uint64_t v18 = a4;
  do
  {
    if (v15 >= *v14) {
      float v15 = *v14;
    }
    float32x2_t v19 = *(float32x2_t *)(v14 - 2);
    float32x2_t v11 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v11), (int8x8_t)v11, (int8x8_t)v19);
    float32x2_t v12 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v12, v19), (int8x8_t)v12, (int8x8_t)v19);
    if (v16 <= *v14) {
      float v16 = *v14;
    }
    int v14 = (float *)((char *)v14 + a4);
    --v17;
  }
  while (v17);
  uint64_t v20 = 0;
  float32x2_t v21 = (float32x2_t)vrev64_s32((int32x2_t)v11);
  v22.i32[1] = v21.i32[1];
  v23.i32[0] = 1065361605;
  v23.i32[1] = v12.i32[0];
  float32x2_t v24 = vadd_f32(v21, v23);
  v21.f32[1] = v15;
  v25.i32[0] = vdup_lane_s32((int32x2_t)v12, 1).u32[0];
  v25.f32[1] = v16;
  *(float32x2_t *)(a1 + 24) = vmul_f32(vadd_f32(v21, v25), (float32x2_t)0x3F0000003F000000);
  float32x2_t v26 = vmul_f32(vsub_f32(v12, v11), (float32x2_t)vdup_n_s32(0x3F8020C5u));
  float32x2_t v27 = vmul_f32(v26, (float32x2_t)0x3F0000003F000000);
  float32x2_t v113 = v26;
  v22.f32[0] = v16 - v15;
  v26.i32[0] = vmul_f32(v22, v23).u32[0];
  __int32 v114 = v26.i32[0];
  v26.i32[1] = v24.i32[1];
  *(float32x2_t *)(a1 + 8) = v27;
  *(float32x2_t *)(a1 + 16) = vmul_f32(v26, (float32x2_t)0x3F0000003F000000);
  do
  {
    if (v113.f32[v20] == 0.0) {
      *(_DWORD *)(a1 + 8 + v20 * 4) = 1065353216;
    }
    ++v20;
  }
  while (v20 != 3);
  int v28 = (uint64_t *)(a1 + 32);
  __asm { FMOV            V1.2S, #1.0 }
  float32x2_t v34 = vdiv_f32(_D1, *(float32x2_t *)(a1 + 8));
  int v35 = (float *)(a3 + 8);
  unsigned int v36 = a2;
  float v37 = 1.0 / *(float *)(a1 + 16);
  do
  {
    float32x2_t v38 = vmul_f32(v34, vsub_f32(*(float32x2_t *)(v35 - 2), *(float32x2_t *)(a1 + 20)));
    float v39 = v37 * (float)(*v35 - *(float *)(a1 + 28));
    float32x2_t v111 = v38;
    float v112 = v39;
    unsigned int v40 = *(_DWORD *)(a1 + 40);
    if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= v40)
    {
      physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(a1 + 32, (uint64_t)&v111);
    }
    else
    {
      uint64_t v41 = *(void *)(a1 + 32) + 12 * v40;
      *(float32x2_t *)uint64_t v41 = v38;
      *(float *)(v41 + 8) = v39;
      *(_DWORD *)(a1 + 40) = v40 + 1;
    }
    int v35 = (float *)((char *)v35 + v18);
    --v36;
  }
  while (v36);
  uint64_t v42 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 229);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 230);
  uint64_t v47 = *v28;
  if (a6)
  {
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * a6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 61);
    if (a2 <= a6)
    {
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      uint64_t v81 = a2;
      do
      {
        if (v43) {
          *(_DWORD *)(v43 + 4 * v99) = v99;
        }
        float v100 = &v42[v98];
        v44.n128_u64[0] = *(void *)(v47 + v98 * 4);
        *(void *)float v100 = v44.n128_u64[0];
        v44.n128_u32[0] = *(_DWORD *)(v47 + v98 * 4 + 8);
        v100[2] = v44.n128_f32[0];
        *(_DWORD *)(v48 + 4 * v99++) = 1;
        v98 += 3;
      }
      while (3 * a2 != v98);
      a6 = a2;
      goto LABEL_50;
    }
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * a6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/Quantizer.cpp", 78);
    unsigned int v50 = 0;
    uint64_t v51 = v42 + 2;
    uint64_t v52 = a6;
    do
    {
      uint64_t v53 = v47 + 12 * (v50 / a6);
      v44.n128_u64[0] = *(void *)v53;
      *((void *)v51 - 1) = *(void *)v53;
      *uint64_t v51 = *(_DWORD *)(v53 + 8);
      v51 += 3;
      v50 += a2;
      --v52;
    }
    while (v52);
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v48 = 0;
  }
  if (a2 <= 1) {
    uint64_t v55 = 1;
  }
  else {
    uint64_t v55 = a2;
  }
  int v56 = 64;
  v44.n128_u32[0] = 2139095039;
  v45.n128_u32[0] = 1008981770;
  v46.n128_u32[0] = 1.0;
  do
  {
    uint64_t v57 = (_DWORD *)v48;
    uint64_t v58 = (_DWORD *)(v49 + 8);
    uint64_t v59 = a6;
    if (a6)
    {
      do
      {
        *v57++ = 0;
        *((void *)v58 - 1) = 0;
        *uint64_t v58 = 0;
        v58 += 3;
        --v59;
      }
      while (v59);
    }
    uint64_t v60 = 0;
    float v61 = 0.0;
    do
    {
      int v62 = (float32x2_t *)(v47 + 12 * v60);
      float32x2_t v63 = *v62;
      float v64 = v62[1].f32[0];
      if (a6)
      {
        uint64_t v65 = 0;
        float v66 = 3.4028e38;
        uint64_t v67 = v42 + 2;
        do
        {
          float v68 = (float)((float)((float)(v63.f32[1] - *(v67 - 1)) * (float)(v63.f32[1] - *(v67 - 1)))
                      + (float)((float)(v63.f32[0] - *(v67 - 2)) * (float)(v63.f32[0] - *(v67 - 2))))
              + (float)((float)(v64 - *v67) * (float)(v64 - *v67));
          if (v68 < v66)
          {
            *(_DWORD *)(v43 + 4 * v60) = v65;
            float v66 = v68;
          }
          ++v65;
          v67 += 3;
        }
        while (a6 != v65);
      }
      else
      {
        float v66 = 3.4028e38;
      }
      uint64_t v69 = *(unsigned int *)(v43 + 4 * v60);
      char v70 = (float32x2_t *)(v49 + 12 * v69);
      *char v70 = vadd_f32(v63, *v70);
      v70[1].f32[0] = v64 + v70[1].f32[0];
      ++*(_DWORD *)(v48 + 4 * v69);
      float v61 = v61 + v66;
      ++v60;
    }
    while (v60 != v55);
    uint64_t v71 = (float *)(v49 + 8);
    int v72 = (unsigned int *)v48;
    unsigned int v73 = v42 + 2;
    uint64_t v74 = a6;
    if (a6)
    {
      do
      {
        unsigned int v76 = *v72++;
        unsigned int v75 = v76;
        if (v76)
        {
          float v77 = 1.0 / (float)v75;
          float v78 = v77 * *v71;
          *uint64_t v71 = v78;
          float32x2_t v79 = vmul_n_f32(*(float32x2_t *)(v71 - 2), v77);
          *((float32x2_t *)v71 - 1) = v79;
          *((float32x2_t *)v73 - 1) = v79;
          *unsigned int v73 = v78;
        }
        v73 += 3;
        v71 += 3;
        --v74;
      }
      while (v74);
    }
    if (!--v56) {
      break;
    }
    if (v61 < 0.01) {
      break;
    }
    BOOL v80 = vabds_f32(v61, v44.n128_f32[0]) <= 0.01;
    v44.n128_f32[0] = v61;
  }
  while (!v80);
  if (v49) {
    (*(void (**)(uint64_t, __n128, __n128, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, v44, v45, v46);
  uint64_t v81 = a2;
  if (!a6)
  {
    unsigned int v83 = 0;
LABEL_81:
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, v48, v44, v45, v46);
    goto LABEL_82;
  }
LABEL_50:
  uint64_t v82 = 0;
  unsigned int v83 = 0;
  v44.n128_u32[0] = 841731190;
  do
  {
    if (*(_DWORD *)(v48 + 4 * v82))
    {
      if (v83)
      {
        int v84 = &v42[3 * v82];
        v45.n128_f32[0] = *v84;
        v46.n128_f32[0] = v84[1];
        float v85 = v84[2];
        uint64_t v86 = v83;
        unint64_t v87 = 0;
        if ((float)((float)((float)((float)(v46.n128_f32[0] - v42[1]) * (float)(v46.n128_f32[0] - v42[1]))
                           + (float)((float)(v45.n128_f32[0] - *v42) * (float)(v45.n128_f32[0] - *v42)))
                   + (float)((float)(v85 - v42[2]) * (float)(v85 - v42[2]))) < 0.00000001)
        {
          BOOL v92 = 1;
        }
        else
        {
          uint64_t v88 = v42 + 5;
          while (v83 - 1 != v87)
          {
            float v89 = v45.n128_f32[0] - *(v88 - 2);
            float v90 = v46.n128_f32[0] - *(v88 - 1);
            float v91 = *v88;
            v88 += 3;
            ++v87;
            if ((float)((float)((float)(v90 * v90) + (float)(v89 * v89))
                       + (float)((float)(v85 - v91) * (float)(v85 - v91))) < 0.00000001)
            {
              BOOL v92 = v87 < v83;
              goto LABEL_61;
            }
          }
          BOOL v92 = 0;
          LODWORD(v87) = v83;
        }
      }
      else
      {
        uint64_t v86 = 0;
        BOOL v92 = 0;
        LODWORD(v87) = 0;
      }
LABEL_61:
      int v93 = v86 != v82 || v92;
      if (v43 && v93)
      {
        uint64_t v94 = (_DWORD *)v43;
        uint64_t v95 = v81;
        do
        {
          if (v82 == *v94) {
            *uint64_t v94 = v87;
          }
          ++v94;
          --v95;
        }
        while (v95);
      }
      if (!v92)
      {
        float v96 = &v42[3 * v82];
        unsigned int v97 = &v42[3 * v86];
        v45.n128_u64[0] = *(void *)v96;
        *(void *)unsigned int v97 = *(void *)v96;
        v45.n128_f32[0] = v96[2];
        v97[2] = v45.n128_f32[0];
        ++v83;
      }
    }
    ++v82;
  }
  while (v82 != a6);
  if (v48) {
    goto LABEL_81;
  }
LABEL_82:
  *a7 = v83;
  if (v83)
  {
    if (a5)
    {
      unint64_t v101 = 0;
      float v102 = v42 + 2;
      do
      {
        v46.n128_u64[0] = *(void *)(a1 + 20);
        v44.n128_u64[0] = (unint64_t)vadd_f32(vmul_f32(*(float32x2_t *)(v102 - 2), *(float32x2_t *)(a1 + 8)), (float32x2_t)v46.n128_u64[0]);
        v46.n128_u32[0] = *(_DWORD *)(a1 + 28);
        v45.n128_f32[0] = (float)(*v102 * *(float *)(a1 + 16)) + v46.n128_f32[0];
        float32x2_t v113 = (float32x2_t)v44.n128_u64[0];
        __int32 v114 = v45.n128_u32[0];
        unsigned int v103 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 60) & 0x7FFFFFFFu) <= v103)
        {
          physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t)v13, (uint64_t)&v113);
        }
        else
        {
          uint64_t v104 = *(void *)(a1 + 48) + 12 * v103;
          *(void *)uint64_t v104 = v44.n128_u64[0];
          *(_DWORD *)(v104 + 8) = v45.n128_u32[0];
          *(_DWORD *)(a1 + 56) = v103 + 1;
        }
        ++v101;
        v102 += 3;
      }
      while (v101 < *a7);
    }
    else
    {
      unint64_t v105 = 0;
      uint64_t v106 = (uint64_t)v42;
      do
      {
        unsigned int v107 = *(_DWORD *)(a1 + 56);
        if ((*(_DWORD *)(a1 + 60) & 0x7FFFFFFFu) <= v107)
        {
          physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t)v13, v106);
        }
        else
        {
          uint64_t v108 = *(void *)(a1 + 48) + 12 * v107;
          v44.n128_u64[0] = *(void *)v106;
          *(void *)uint64_t v108 = *(void *)v106;
          v44.n128_u32[0] = *(_DWORD *)(v106 + 8);
          *(_DWORD *)(v108 + 8) = v44.n128_u32[0];
          *(_DWORD *)(a1 + 56) = v107 + 1;
        }
        ++v105;
        v106 += 12;
      }
      while (v105 < *a7);
    }
    uint64_t v54 = *v13;
    if (!v42) {
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  uint64_t v54 = 0;
  if (v42) {
LABEL_98:
  }
    (*(void (**)(uint64_t, float *, __n128, __n128, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, v42, v44, v45, v46);
LABEL_99:
  if (v43) {
    (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance
  }
                                                                                 + 24)
                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, v43, v44, v45, v46);
  return v54;
}

uint64_t QuantizerImpl::getDenormalizeScale(QuantizerImpl *this)
{
  return (uint64_t)this + 8;
}

uint64_t QuantizerImpl::getDenormalizeCenter(QuantizerImpl *this)
{
  return (uint64_t)this + 20;
}

uint64_t QuantizerImpl::release(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 40))();
  }
  return this;
}

void QuantizerImpl::~QuantizerImpl(QuantizerImpl *this)
{
  QuantizerImpl::~QuantizerImpl(this);
  if (v1)
  {
    long long v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

{
  int v2;
  int v4;

  *(void *)this = &unk_26E72A130;
  long long v2 = *((_DWORD *)this + 15);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 6) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v4 = *((_DWORD *)this + 11);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 4) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5) {
    uint64_t v6 = physx::shdfnd::ReflectionAllocator<physx::PxVec3>::allocate(a1, 12 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else {
    uint64_t v6 = 0;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  float v8 = (void *)(v6 + 12 * v7);
  uint64_t v9 = *(void *)a1;
  if (v7)
  {
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = v6;
    do
    {
      *(void *)unint64_t v11 = *(void *)v10;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v10 + 8);
      v11 += 12;
      v10 += 12;
    }
    while (v11 < (unint64_t)v8);
  }
  *float v8 = *(void *)a2;
  *(_DWORD *)(v6 + 12 * v7 + 8) = *(_DWORD *)(a2 + 8);
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v9)
  {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    unsigned int v7 = *(_DWORD *)(a1 + 8);
  }
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v6 + 12 * v7;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxVec3>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxVec3>::getName() [T = physx::PxVec3]";
  }
  else {
    float v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::saveHeightField(uint64_t a1, void (***a2)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), int a3)
{
  uint64_t v6 = physx::writeHeader(72, 70, 72, 70, 1u, a3, a2);
  if (v6)
  {
    physx::writeDword(*(_DWORD *)(a1 + 56), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeDword(*(_DWORD *)(a1 + 60), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 64));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 68));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 72));
    int v14 = 0;
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v14, 4);
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 88));
    unsigned int v7 = *(unsigned __int16 *)(a1 + 92);
    __int16 v15 = *(_WORD *)(a1 + 92);
    if (a3) {
      __int16 v15 = __rev16(v7);
    }
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v15, 2);
    physx::writeDword(*(_DWORD *)(a1 + 96), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 32) - *(float *)(a1 + 44));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 36) - *(float *)(a1 + 48));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 40) - *(float *)(a1 + 52));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 32) + *(float *)(a1 + 44));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 36) + *(float *)(a1 + 48));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 40) + *(float *)(a1 + 52));
    physx::writeDword(*(_DWORD *)(a1 + 104), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeDword(*(_DWORD *)(a1 + 108), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 112));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 116));
    if (*(_DWORD *)(a1 + 108))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void *)(a1 + 80);
        unsigned int v11 = *(unsigned __int16 *)(v10 + v8);
        __int16 v16 = *(_WORD *)(v10 + v8);
        if (a3) {
          __int16 v16 = __rev16(v11);
        }
        (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v16, 2);
        uint64_t v12 = v10 + v8;
        (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)(v12 + 2), 1);
        (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)(v12 + 3), 1);
        ++v9;
        v8 += 4;
      }
      while (v9 < *(unsigned int *)(a1 + 108));
    }
  }
  return v6;
}

float physx::MeshBulider::computeLocalBounds(physx::MeshBulider *this, physx::Gu::MeshDataBase *a2)
{
  physx::Gu::computeBoundsAroundVertices((uint64_t)this + 32, *((_DWORD *)this + 4), *((_OWORD **)this + 3));
  uint64_t v3 = 0;
  float v4 = 0.0;
  do
  {
    float v5 = fabsf(*(float *)((char *)this + v3 + 44));
    float v6 = fabsf(*(float *)((char *)this + v3 + 32));
    if (v5 <= v6) {
      float v5 = v6;
    }
    if (v4 <= v5) {
      float v4 = v5;
    }
    v3 += 4;
  }
  while (v3 != 12);
  float result = v4 * 0.00000023842;
  *((float *)this + 14) = result;
  return result;
}

uint64_t physx::TriangleMeshBuilder::releaseEdgeList(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 8);
  if (v2)
  {
    physx::Gu::EdgeList::~EdgeList(*(physx::Gu::EdgeList **)(this + 8));
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  *(void *)(v1 + 8) = 0;
  return this;
}

uint64_t physx::TriangleMeshBuilder::createSharedEdgeData(uint64_t this, int a2, int a3)
{
  uint64_t v42 = this;
  if ((a2 & 1) != 0 || a3)
  {
    size_t v4 = *(unsigned int *)(*(void *)(this + 24) + 104);
    float v5 = (void *)physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v44, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 254);
    *(void *)(*(void *)(v42 + 24) + 120) = v5;
    bzero(v5, v4);
    if (v4 >> 30)
    {
      return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 261, "TriangleMesh: mesh is too big for this algo!", v6, v7, v8, v40);
    }
    else
    {
      uint64_t v9 = *(void *)(v42 + 24);
      uint64_t v10 = *(void *)(v9 + 112);
      int v50 = 1036831949;
      unsigned int v45 = *(_DWORD *)(v9 + 104);
      if ((*(unsigned char *)(v9 + 12) & 2) != 0) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v41 = v10;
      if ((*(unsigned char *)(v9 + 12) & 2) == 0) {
        uint64_t v10 = 0;
      }
      uint64_t v46 = v11;
      uint64_t v47 = v10;
      __int16 v48 = 257;
      uint64_t v49 = *(void *)(v9 + 24);
      uint64_t v12 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        int v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::EdgeListBuilder>::getName() [T = physx::G"
      }
              "u::EdgeListBuilder]";
      else {
        int v13 = "<allocation names disabled>";
      }
      int v14 = (physx::Gu::EdgeListBuilder *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v12 + 24) + 16))(v12 + 24, 48, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 752);
      *(_DWORD *)int v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 4) = 0;
      *((void *)v14 + 5) = 0;
      *((void *)v14 + 3) = 0;
      *(void *)(v42 + 8) = v14;
      this = physx::Gu::EdgeListBuilder::init(v14, &v45, v15, v16, v17, v18, v19, v20);
      uint64_t v21 = *(void *)(v42 + 8);
      if (this)
      {
        if (v21)
        {
          int v22 = *(_DWORD *)(v21 + 16);
          if (v22)
          {
            if (v22 == *(_DWORD *)(*(void *)(v42 + 24) + 104))
            {
              uint64_t v23 = 0;
              unint64_t v24 = 0;
              do
              {
                uint64_t v25 = *(void *)(v21 + 24);
                if ((*(_DWORD *)(v25 + v23) & 0x80000000) != 0) {
                  *(unsigned char *)(*(void *)(*(void *)(v42 + 24) + 120) + v24) |= 8u;
                }
                uint64_t v26 = v25 + v23;
                if ((*(_DWORD *)(v26 + 4) & 0x80000000) != 0) {
                  *(unsigned char *)(*(void *)(*(void *)(v42 + 24) + 120) + v24) |= 0x10u;
                }
                if ((*(_DWORD *)(v26 + 8) & 0x80000000) != 0) {
                  *(unsigned char *)(*(void *)(*(void *)(v42 + 24) + 120) + v24) |= 0x20u;
                }
                ++v24;
                uint64_t v21 = *(void *)(v42 + 8);
                v23 += 12;
              }
              while (v24 < *(unsigned int *)(v21 + 16));
            }
          }
        }
      }
      else
      {
        if (v21)
        {
          physx::Gu::EdgeList::~EdgeList(*(physx::Gu::EdgeList **)(v42 + 8));
          this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v21);
        }
        *(void *)(v42 + 8) = 0;
      }
      if (a2)
      {
        float32x2_t v27 = (void *)physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v43, 4 * (3 * v4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 285);
        *(void *)(*(void *)(v42 + 24) + 72) = v27;
        this = (uint64_t)memset(v27, 255, 12 * v4);
        int v28 = *(int **)(v42 + 8);
        int v29 = *v28;
        if (*v28)
        {
          uint64_t v30 = *((void *)v28 + 5);
          uint64_t v31 = (unsigned int *)(*((void *)v28 + 4) + 4);
          uint64_t v32 = (int *)(*((void *)v28 + 1) + 4);
          do
          {
            if (*((unsigned __int16 *)v31 - 1) >= 2u)
            {
              uint64_t v33 = *v31;
              unsigned int v34 = *(_DWORD *)(v30 + 4 * v33);
              unsigned int v35 = *(_DWORD *)(v30 + 4 * (v33 + 1));
              int v36 = *(v32 - 1);
              int v37 = *v32;
              int EdgeCCW = physx::Gu::TriangleT<unsigned int>::findEdgeCCW((int *)(v41 + 12 * v34), v36, *v32);
              this = physx::Gu::TriangleT<unsigned int>::findEdgeCCW((int *)(v41 + 12 * v35), v36, v37);
              uint64_t v39 = *(void *)(*(void *)(v42 + 24) + 72);
              *(_DWORD *)(v39 + 4 * (3 * v34 + EdgeCCW)) = v35;
              *(_DWORD *)(v39 + 4 * (3 * v35 + this)) = v34;
            }
            v31 += 2;
            v32 += 2;
            --v29;
          }
          while (v29);
        }
      }
    }
  }
  return this;
}

uint64_t physx::Gu::TriangleT<unsigned int>::findEdgeCCW(int *a1, int a2, int a3)
{
  int v3 = *a1;
  if (*a1 == a2 && a1[1] == a3 || v3 == a3 && a1[1] == a2) {
    return 0;
  }
  if (v3 == a2 && a1[2] == a3 || v3 == a3 && a1[2] == a2) {
    return 2;
  }
  int v5 = a1[1];
  if (v5 == a2 && a1[2] == a3 || v5 == a3 && a1[2] == a2) {
    return 1;
  }
  else {
    return 255;
  }
}

void *physx::TriangleMeshBuilder::recordTriangleIndices(void *this)
{
  if (*(unsigned char *)(this[2] + 14))
  {
    uint64_t v1 = this;
    this = memcpy(*(void **)(this[3] + 80), *(const void **)(this[3] + 112), (12 * *(_DWORD *)(this[3] + 104)));
    uint64_t v2 = v1[3];
    if (*(void *)(v2 + 64))
    {
      int v3 = (void *)physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v5, 4 * *(unsigned int *)(v2 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 643);
      uint64_t v4 = v1[3];
      *(void *)(v4 + 96) = v3;
      return memcpy(v3, *(const void **)(v4 + 64), (4 * *(_DWORD *)(v4 + 104)));
    }
  }
  return this;
}

uint64_t physx::TriangleMeshBuilder::createGRBMidPhaseAndData(uint64_t this, unsigned int a2)
{
  uint64_t v155 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(*(void *)(this + 16) + 14)) {
    return this;
  }
  uint64_t v3 = this;
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    char v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV32Tree>::getName() [T = physx::Gu::BV32Tree]";
  }
  else {
    char v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (float32x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 64, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 687);
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  v6[7].i8[0] = 0;
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = 0;
  v6[3].i32[0] = 0;
  uint64_t v7 = *(void *)(v3 + 24);
  *(void *)(v7 + 136) = v6;
  uint64_t v8 = *(void *)(v3 + 16);
  *(void *)&long long v148 = 0;
  LODWORD(v147) = *(_DWORD *)(v7 + 16);
  DWORD2(v148) = *(_DWORD *)(v7 + 104);
  uint64_t v9 = *(void *)(v7 + 24);
  long long v149 = *(unint64_t *)(v7 + 80);
  *((void *)&v147 + 1) = v9;
  if (!physx::Gu::BuildBV32Ex(v6, (physx::Gu::BV32Tree *)&v147, (physx::Gu::SourceMesh *)0x20, 0.0002))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1249, "BV32 tree failed to build.", v10, v11, v12, v135);
    if (!(void)v148) {
      goto LABEL_21;
    }
    uint64_t v19 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    goto LABEL_20;
  }
  int v13 = (unsigned int *)v148;
  if (!*(unsigned char *)(v8 + 12) || *(unsigned char *)(v8 + 14))
  {
    uint64_t v14 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)v143, 4 * *(unsigned int *)(v7 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1257);
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(v7 + 96);
    if (*(_DWORD *)(v7 + 104))
    {
      unint64_t v17 = 0;
      do
      {
        uint64_t v18 = v13;
        if (v16) {
          uint64_t v18 = (_DWORD *)(v16 + 4 * *v13);
        }
        *(_DWORD *)(v14 + 4 * v17++) = *v18;
        ++v13;
      }
      while (v17 < *(unsigned int *)(v7 + 104));
    }
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v7 + 96) = v15;
    int v13 = (unsigned int *)v148;
  }
  if (v13)
  {
    uint64_t v19 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
LABEL_20:
    v19();
  }
LABEL_21:
  uint64_t v20 = *(void *)(v3 + 24);
  uint64_t v21 = *(unsigned int *)(v20 + 104);
  if (!v21)
  {
    uint64_t v22 = 0;
LABEL_96:
    *(void *)(v20 + 88) = 0;
LABEL_97:
    if (!v22) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v21, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 662);
  uint64_t v23 = *(unsigned int *)(v20 + 104);
  if (!v23)
  {
    uint64_t v20 = *(void *)(v3 + 24);
    goto LABEL_96;
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v23, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 664);
  uint64_t v25 = *(unsigned int *)(v20 + 104);
  uint64_t v26 = *(void **)(v3 + 24);
  v26[11] = v24;
  if (!v25) {
    goto LABEL_97;
  }
  uint64_t v27 = v24;
  unsigned int v136 = a2;
  uint64_t v137 = v3;
  uint64_t v28 = v26[3];
  uint64_t v29 = v26[10];
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 36 * v25, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/GrbTriangleMeshCooking.h", 147);
  uint64_t v31 = v30;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unsigned int v34 = 2;
  do
  {
    unsigned int v35 = *(_DWORD *)(v29 + v32);
    unsigned int v36 = *(_DWORD *)(v29 + v32 + 4);
    unsigned int v37 = *(_DWORD *)(v29 + v32 + 8);
    float32x2_t v38 = (float *)(v28 + 12 * v36);
    uint64_t v39 = (float *)(v28 + 12 * v35);
    float v40 = v39[1];
    float v41 = *v38 - *v39;
    float v42 = v38[1] - v40;
    float v43 = v38[2];
    char v44 = (float *)(v28 + 12 * v37);
    float v45 = *v44 - *v39;
    float v46 = v39[2];
    float v47 = v43 - v46;
    float v48 = v44[1] - v40;
    float v49 = v44[2] - v46;
    float v50 = (float)(v42 * v49) - (float)(v47 * v48);
    float v51 = (float)(v47 * v45) - (float)(v41 * v49);
    float v52 = (float)(v41 * v48) - (float)(v42 * v45);
    float v53 = (float)((float)(v51 * v51) + (float)(v50 * v50)) + (float)(v52 * v52);
    float v54 = 0.0;
    float v55 = 0.0;
    float v56 = 0.0;
    if (v53 > 0.0)
    {
      float v57 = 1.0 / sqrtf(v53);
      float v54 = v50 * v57;
      float v55 = v51 * v57;
      float v56 = v52 * v57;
    }
    uint64_t v58 = (float *)(v22 + v32);
    *uint64_t v58 = v54;
    v58[1] = v55;
    v58[2] = v56;
    if (v35 >= v36) {
      unsigned int v59 = v36;
    }
    else {
      unsigned int v59 = v35;
    }
    uint64_t v60 = (unsigned int *)(v30 + 12 * (v34 - 2));
    if (v35 <= v36) {
      unsigned int v61 = v36;
    }
    else {
      unsigned int v61 = v35;
    }
    *uint64_t v60 = v59;
    v60[1] = v61;
    v60[2] = v33;
    if (v36 >= v37) {
      unsigned int v62 = v37;
    }
    else {
      unsigned int v62 = v36;
    }
    float32x2_t v63 = (unsigned int *)(v30 + 12 * (v34 - 1));
    if (v36 <= v37) {
      unsigned int v36 = v37;
    }
    *float32x2_t v63 = v62;
    v63[1] = v36;
    v63[2] = v33;
    if (v35 >= v37) {
      unsigned int v64 = v37;
    }
    else {
      unsigned int v64 = v35;
    }
    uint64_t v65 = (unsigned int *)(v30 + 12 * v34);
    if (v35 <= v37) {
      unsigned int v35 = v37;
    }
    *uint64_t v65 = v64;
    v65[1] = v35;
    v65[2] = v33++;
    v34 += 3;
    v32 += 12;
  }
  while (v25 != v33);
  uint64_t v138 = v29;
  uint64_t v66 = v25;
  uint64_t v144 = 0x2000000000;
  float v145 = &v147;
  char v146 = 0;
  int v67 = 3 * v25 - 1;
  if (v67 >= 1)
  {
    unsigned int v68 = 0;
    int v69 = 0;
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    uint64_t v140 = v30 + 16;
    char v70 = &v147;
    long long v147 = 0u;
    long long v148 = 0u;
    while (1)
    {
      if (v67 > v69)
      {
        if ((v67 - v69) < 5)
        {
LABEL_82:
          uint64_t v105 = v69;
          int v106 = v69 + 1;
          unsigned int v107 = (_DWORD *)(v140 + 12 * v69);
          do
          {
            uint64_t v108 = 0;
            uint64_t v109 = v105++;
            float v110 = v107;
            int v111 = v109;
            do
            {
              unsigned int v112 = *(v110 - 1);
              unsigned int v113 = *(_DWORD *)(v31 + 12 * v111);
              if (v112 < v113 || v112 == v113 && *v110 < *(_DWORD *)(v31 + 12 * v111 + 4)) {
                int v111 = v106 + v108;
              }
              v110 += 3;
              ++v108;
            }
            while (v109 + v108 < v67);
            if (v111 != v109)
            {
              uint64_t v114 = v31 + 12 * v111;
              uint64_t v115 = v31 + 12 * v109;
              int v116 = *(_DWORD *)(v114 + 8);
              uint64_t v117 = *(void *)v114;
              int v118 = *(_DWORD *)(v115 + 8);
              *(void *)uint64_t v114 = *(void *)v115;
              *(_DWORD *)(v114 + 8) = v118;
              *(void *)uint64_t v115 = v117;
              *(_DWORD *)(v115 + 8) = v116;
            }
            ++v106;
            v107 += 3;
          }
          while (v105 != v67);
        }
        else
        {
          while (1)
          {
            uint64_t v71 = v31 + 12 * ((v67 + v69) / 2);
            int v72 = (unsigned int *)(v31 + 12 * v69);
            unsigned int v73 = *v72;
            if (*(_DWORD *)v71 < *v72
              || *(_DWORD *)v71 == v73
              && (unsigned int v73 = *(_DWORD *)v71,
                  *(_DWORD *)(v31 + 12 * ((v67 + v69) / 2) + 4) < *(_DWORD *)(v31 + 12 * v69 + 4)))
            {
              unsigned int v74 = v72[2];
              uint64_t v75 = *(void *)v72;
              unsigned int v76 = *(_DWORD *)(v71 + 8);
              *(void *)int v72 = *(void *)v71;
              v72[2] = v76;
              *(void *)uint64_t v71 = v75;
              *(_DWORD *)(v71 + 8) = v74;
              unsigned int v73 = *v72;
            }
            float v77 = (unsigned int *)(v31 + 12 * v67);
            unsigned int v78 = *v77;
            if (*v77 < v73
              || v78 == v73 && (unsigned int v78 = v73, *(_DWORD *)(v31 + 12 * v67 + 4) < *(_DWORD *)(v31 + 12 * v69 + 4)))
            {
              unsigned int v79 = v72[2];
              uint64_t v80 = *(void *)v72;
              unsigned int v81 = v77[2];
              *(void *)int v72 = *(void *)v77;
              v72[2] = v81;
              *(void *)float v77 = v80;
              v77[2] = v79;
              unsigned int v78 = v80;
            }
            if (v78 < *(_DWORD *)v71
              || v78 == *(_DWORD *)v71
              && *(_DWORD *)(v31 + 12 * v67 + 4) < *(_DWORD *)(v31 + 12 * ((v67 + v69) / 2) + 4))
            {
              unsigned int v82 = *(_DWORD *)(v71 + 8);
              uint64_t v83 = *(void *)v71;
              unsigned int v84 = v77[2];
              *(void *)uint64_t v71 = *(void *)v77;
              *(_DWORD *)(v71 + 8) = v84;
              *(void *)float v77 = v83;
              v77[2] = v82;
            }
            uint64_t v85 = v31 + 12 * (v67 - 1);
            int v86 = *(_DWORD *)(v71 + 8);
            uint64_t v87 = *(void *)v71;
            int v88 = *(_DWORD *)(v85 + 8);
            *(void *)uint64_t v71 = *(void *)v85;
            *(_DWORD *)(v71 + 8) = v88;
            *(void *)uint64_t v85 = v87;
            *(_DWORD *)(v85 + 8) = v86;
            float v89 = (_DWORD *)(v85 + 4);
            int v90 = v69;
            int v91 = v67 - 1;
            while (1)
            {
              unsigned int v92 = *(_DWORD *)v85;
              int v93 = (unsigned int *)(v31 + 12 + 12 * v90);
              int v94 = v90;
              while (*v93 < v92 || *v93 == v92 && v93[1] < *v89)
              {
                ++v94;
                v93 += 3;
              }
              int v90 = v94 + 1;
              for (uint64_t i = (unsigned int *)(v31 - 12 + 12 * v91--); v92 < *i || v92 == *i && *v89 < i[1]; i -= 3)
                --v91;
              if (v90 >= v91) {
                break;
              }
              unsigned int v96 = v93[2];
              uint64_t v97 = *(void *)v93;
              unsigned int v98 = i[2];
              *(void *)int v93 = *(void *)i;
              v93[2] = v98;
              *(void *)uint64_t i = v97;
              i[2] = v96;
            }
            unsigned int v99 = v93[2];
            uint64_t v100 = *(void *)v93;
            unsigned int v101 = *(_DWORD *)(v85 + 8);
            *(void *)int v93 = *(void *)v85;
            v93[2] = v101;
            *(void *)uint64_t v85 = v100;
            *(_DWORD *)(v85 + 8) = v99;
            unsigned int v102 = HIDWORD(v144) - 1;
            if (v94 - v69 + 1 >= v67 - 1 - v94)
            {
              if (v68 >= v102)
              {
                physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::EdgeTriLookup>>::grow((uint64_t)v143);
                unsigned int v68 = v144;
                char v70 = v145;
              }
              *((_DWORD *)v70 + v68) = v94 + 2;
              unsigned int v104 = v68 + 1;
              v68 += 2;
              LODWORD(v144) = v68;
              *((_DWORD *)v70 + v104) = v67;
              int v67 = v94;
            }
            else
            {
              if (v68 >= v102)
              {
                physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::EdgeTriLookup>>::grow((uint64_t)v143);
                unsigned int v68 = v144;
                char v70 = v145;
              }
              *((_DWORD *)v70 + v68) = v69;
              unsigned int v103 = v68 + 1;
              v68 += 2;
              LODWORD(v144) = v68;
              *((_DWORD *)v70 + v103) = v94;
              int v69 = v94 + 2;
            }
            if (v67 <= v69) {
              break;
            }
            if ((v67 - v69) <= 4) {
              goto LABEL_82;
            }
          }
        }
      }
      if (!v68) {
        break;
      }
      LODWORD(v144) = v68 - 1;
      int v67 = *((_DWORD *)v70 + v68 - 1);
      v68 -= 2;
      LODWORD(v144) = v68;
      int v69 = *((_DWORD *)v70 + v68);
    }
    if (v146) {
      BOOL v119 = v70 == 0;
    }
    else {
      BOOL v119 = 1;
    }
    if (!v119) {
      (*(void (**)(uint64_t, long long *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v70);
    }
  }
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  float v122 = (_DWORD *)(v27 + 8);
  do
  {
    unsigned int v123 = *(_DWORD *)(v138 + v120 + 4);
    unsigned int v124 = *(_DWORD *)(v138 + v120 + 8);
    BOOL v125 = (float *)(v28 + 12 * *(unsigned int *)(v138 + v120));
    unsigned int v126 = *(_DWORD *)(v138 + v120);
    unsigned int v139 = v126;
    *(void *)&long long v147 = *(void *)(v22 + v120);
    DWORD2(v147) = *(_DWORD *)(v22 + v120 + 8);
    *((float *)&v147 + 3) = -(float)((float)((float)(*((float *)&v147 + 1) * v125[1]) + (float)(*v125 * *(float *)&v147))
                                   + (float)(v125[2] * *((float *)&v147 + 2)));
    int Adjacent = physx::findAdjacent(v28, v22, v138, v66, v126, v123, (float *)&v147, v31, v121);
    int v127 = physx::findAdjacent(v28, v22, v138, v66, v123, v124, (float *)&v147, v31, v121);
    int v128 = physx::findAdjacent(v28, v22, v138, v66, v124, v139, (float *)&v147, v31, v121);
    *(v122 - 2) = Adjacent;
    *(v122 - 1) = v127;
    *float v122 = v128;
    v122[1] = 0;
    v122 += 4;
    ++v121;
    v120 += 12;
  }
  while (v66 != v121);
  if (v31) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v31);
  }
  a2 = v136;
  uint64_t v3 = v137;
LABEL_109:
  (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v22);
LABEL_110:
  this = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v142, 4 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 695);
  uint64_t v129 = *(void *)(v3 + 24);
  if (*(_DWORD *)(v129 + 104))
  {
    unint64_t v130 = 0;
    uint64_t v131 = *(void *)(v129 + 64);
    do
    {
      *(_DWORD *)(this + 4 * *(unsigned int *)(v131 + 4 * v130)) = v130;
      ++v130;
      unint64_t v132 = *(unsigned int *)(v129 + 104);
    }
    while (v130 < v132);
    if (v132)
    {
      unint64_t v133 = 0;
      uint64_t v134 = *(void *)(v129 + 96);
      do
      {
        *(_DWORD *)(v134 + 4 * v133) = *(_DWORD *)(this + 4 * *(unsigned int *)(v134 + 4 * v133));
        ++v133;
      }
      while (v133 < *(unsigned int *)(v129 + 104));
    }
  }
  else if (!this)
  {
    return this;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::TriangleMeshBuilder::loadFromDesc(uint64_t a1, long long *a2, _DWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *((_DWORD *)a2 + 4);
  if (v8 >= 3)
  {
    uint64_t v9 = *((void *)a2 + 4);
    if ((-1431655765 * v8 < 0x55555556 || v9 != 0) && (!*((void *)a2 + 8) || *((_DWORD *)a2 + 14) >= 2u))
    {
      unsigned int v15 = *((_DWORD *)a2 + 10);
      if ((v8 < 0x10000 || (a2[3] & 2) == 0) && *((void *)a2 + 1) && *(_DWORD *)a2 >= 0xCu)
      {
        if (!v9 || ((a2[3] & 2) != 0 ? (unsigned int v16 = 6) : (unsigned int v16 = 12), *((_DWORD *)a2 + 6) >= v16))
        {
          uint64_t v21 = *(void *)(a1 + 16);
          int v22 = *(_DWORD *)(v21 + 40);
          if (v22 == 1)
          {
            if ((*(_DWORD *)(v21 + 32) - 4) >= 0xC)
            {
LABEL_35:
              uint64_t v17 = physx::shdfnd::Foundation::mInstance;
              uint64_t v18 = "TriangleMesh::loadFromDesc: mParams.midphaseDesc.isValid() failed!";
              uint64_t v19 = 783;
              goto LABEL_21;
            }
          }
          else
          {
            if (v22) {
              goto LABEL_35;
            }
            float v23 = *(float *)(v21 + 32);
            if (v23 < 0.0 || v23 > 1.0) {
              goto LABEL_35;
            }
          }
          *(_OWORD *)&v35[12] = *(long long *)((char *)a2 + 28);
          long long v25 = a2[1];
          long long v34 = *a2;
          *(_OWORD *)unsigned int v35 = v25;
          __int16 v26 = *((_WORD *)a2 + 24);
          __int16 v36 = v26;
          long long v37 = *(long long *)((char *)a2 + 56);
          if (*(void *)&v35[16])
          {
            if ((physx::TriangleMeshBuilder::importMesh(a1, (unsigned int *)&v34, (unsigned char *)v21, a3, a4) & 1) == 0) {
              return 0;
            }
          }
          else
          {
            __int16 v36 = v26 & 0xFFFD;
            uint64_t v27 = *(unsigned int *)v35;
            *(_DWORD *)&v35[8] = 12;
            *(_DWORD *)&v35[24] = *(_DWORD *)v35 / 3u;
            uint64_t v28 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v33, 4 * *(unsigned int *)v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 804);
            uint64_t v29 = v28;
            if (v27)
            {
              for (uint64_t i = 0; i != v27; ++i)
                *(_DWORD *)(v28 + 4 * i) = i;
            }
            *(void *)&v35[16] = v28;
            if ((physx::TriangleMeshBuilder::importMesh(a1, (unsigned int *)&v34, *(unsigned char **)(a1 + 16), a3, a4) & 1) == 0) {
              return 0;
            }
            if (v29) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v29);
            }
          }
          physx::TriangleMeshBuilder::recordTriangleIndices((void *)a1);
          (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
          physx::MeshBulider::computeLocalBounds(*(physx::MeshBulider **)(a1 + 24), v31);
          physx::TriangleMeshBuilder::createSharedEdgeData(a1, *(unsigned __int8 *)(*(void *)(a1 + 16) + 13), (*(_DWORD *)(*(void *)(a1 + 16) + 24) & 4) == 0);
          physx::TriangleMeshBuilder::createGRBMidPhaseAndData(a1, v15);
          return 1;
        }
      }
    }
  }
  uint64_t v17 = physx::shdfnd::Foundation::mInstance;
  uint64_t v18 = "TriangleMesh::loadFromDesc: desc.isValid() failed!";
  uint64_t v19 = 776;
LABEL_21:
  physx::shdfnd::Foundation::error(v17, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", v19, v18, a6, a7, a8, v32);
  return 0;
}

uint64_t physx::TriangleMeshBuilder::importMesh(uint64_t a1, unsigned int *a2, unsigned char *a3, _DWORD *a4, int a5)
{
  uint64_t Vertices = physx::Gu::MeshDataBase::allocateVertices(*(physx::Gu::MeshDataBase **)(a1 + 24), a2[4]);
  Triangles = (_DWORD *)physx::Gu::TriangleMeshData::allocateTriangles(*(physx::Gu::TriangleMeshData **)(a1 + 24), a2[10], 1, a3[14]);
  uint64_t v15 = *(void *)(a1 + 24);
  int v16 = *(_DWORD *)(v15 + 16);
  if (v16)
  {
    uint64_t v17 = *a2;
    uint64_t v18 = (uint64_t *)*((void *)a2 + 1);
    do
    {
      uint64_t v19 = *v18;
      *(_DWORD *)(Vertices + 8) = *((_DWORD *)v18 + 2);
      *(void *)uint64_t Vertices = v19;
      Vertices += 12;
      uint64_t v18 = (uint64_t *)((char *)v18 + v17);
      --v16;
    }
    while (v16);
    uint64_t v15 = *(void *)(a1 + 24);
  }
  int v20 = *(_DWORD *)(v15 + 104);
  uint64_t v21 = &Triangles[3 * v20];
  int v22 = (_DWORD *)*((void *)a2 + 4);
  __int16 v23 = *((_WORD *)a2 + 24);
  if ((v23 & 2) != 0)
  {
    if (v20)
    {
      BOOL v27 = (v23 & 1) == 0;
      uint64_t v28 = 1;
      if (v27) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = 2;
      }
      if (v27) {
        uint64_t v28 = 2;
      }
      do
      {
        _DWORD *Triangles = *(unsigned __int16 *)v22;
        Triangles[1] = *((unsigned __int16 *)v22 + v29);
        Triangles[2] = *((unsigned __int16 *)v22 + v28);
        int v22 = (_DWORD *)((char *)v22 + a2[6]);
        Triangles += 3;
      }
      while (Triangles < v21);
    }
  }
  else if (v20)
  {
    BOOL v24 = (v23 & 1) == 0;
    uint64_t v25 = 1;
    if (v24) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = 2;
    }
    if (v24) {
      uint64_t v25 = 2;
    }
    do
    {
      _DWORD *Triangles = *v22;
      Triangles[1] = v22[v26];
      Triangles[2] = v22[v25];
      int v22 = (_DWORD *)((char *)v22 + a2[6]);
      Triangles += 3;
    }
    while (Triangles < v21);
  }
  if (*((void *)a2 + 8))
  {
    uint64_t v30 = (_WORD *)physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v88, 2 * *(unsigned int *)(v15 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMeshData.h", 239);
    *(void *)(v15 + 128) = v30;
    int v31 = *(_DWORD *)(*(void *)(a1 + 24) + 104);
    if (v31)
    {
      uint64_t v32 = a2[14];
      char v33 = (_WORD *)*((void *)a2 + 8);
      do
      {
        *v30++ = *v33;
        char v33 = (_WORD *)((char *)v33 + v32);
        --v31;
      }
      while (v31);
    }
  }
  if ((a3[24] & 2) == 0 || a5)
  {
    uint64_t v38 = *(void *)(a1 + 16);
    float v39 = 0.0;
    if (*(unsigned char *)(v38 + 24))
    {
      float v39 = *(float *)(v38 + 28);
      if (v39 == 0.0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 144, "TriangleMesh: Enable mesh welding with 0 weld tolerance!", v12, v13, v14, v84);
        float v39 = 0.0;
      }
    }
    physx::MeshCleaner::MeshCleaner((uint64_t)&v88, *(_DWORD *)(*(void *)(a1 + 24) + 16), *(float **)(*(void *)(a1 + 24) + 24), *(_DWORD *)(*(void *)(a1 + 24) + 104), *(unsigned int **)(*(void *)(a1 + 24) + 112), v39);
    uint64_t v40 = v89;
    if (v89)
    {
      uint64_t v41 = *(void *)(a1 + 24);
      if (!a5 || v88 == *(_DWORD *)(v41 + 16) && v89 == *(_DWORD *)(v41 + 104))
      {
        if (__src)
        {
          if (*(void *)(v41 + 128))
          {
            uint64_t v42 = physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v87, 2 * v89, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 175);
            uint64_t v43 = v42;
            uint64_t v44 = 0;
            uint64_t v45 = *(void *)(*(void *)(a1 + 24) + 128);
            float v46 = (unsigned int *)__src;
            do
            {
              *(_WORD *)(v42 + 2 * v44) = *(_WORD *)(v45 + 2 * v46[v44]);
              ++v44;
            }
            while (v40 != v44);
            (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
            uint64_t v41 = *(void *)(a1 + 24);
            *(void *)(v41 + 128) = v43;
          }
          uint64_t v47 = *(void *)(a1 + 16);
          if (!*(unsigned char *)(v47 + 12) || *(unsigned char *)(v47 + 14))
          {
            float v48 = (void *)physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v86, 4 * v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 185);
            *(void *)(*(void *)(a1 + 24) + 64) = v48;
            memcpy(v48, __src, (4 * v40));
            uint64_t v41 = *(void *)(a1 + 24);
          }
        }
        int v49 = *(_DWORD *)(v41 + 16);
        unsigned int v50 = v88;
        if (v49 != v88)
        {
          uint64_t v51 = *(void *)(v41 + 24);
          if (v51)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v51);
            uint64_t v41 = *(void *)(a1 + 24);
            unsigned int v50 = v88;
          }
          *(void *)(v41 + 24) = 0;
          physx::Gu::MeshDataBase::allocateVertices((physx::Gu::MeshDataBase *)v41, v50);
          uint64_t v41 = *(void *)(a1 + 24);
          int v49 = *(_DWORD *)(v41 + 16);
        }
        memcpy(*(void **)(v41 + 24), v90, (12 * v49));
        uint64_t v55 = *(void *)(a1 + 24);
        int v56 = *(_DWORD *)(v55 + 104);
        unsigned int v57 = v89;
        if (v56 != v89)
        {
          uint64_t v58 = *(void *)(v55 + 112);
          if (v58)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v58);
            uint64_t v55 = *(void *)(a1 + 24);
            unsigned int v57 = v89;
          }
          *(void *)(v55 + 112) = 0;
          physx::Gu::TriangleMeshData::allocateTriangles((physx::Gu::TriangleMeshData *)v55, v57, 1, 0);
          uint64_t v55 = *(void *)(a1 + 24);
          int v56 = *(_DWORD *)(v55 + 104);
        }
        if (v56)
        {
          unint64_t v59 = 0;
          char v60 = 0;
          float v61 = *(float *)(*(void *)(a1 + 16) + 16) * (float)(*(float *)(*(void *)(a1 + 16) + 16) * 250000.0);
          uint64_t v62 = *(void *)(v55 + 24);
          uint64_t v63 = v91;
          uint64_t v64 = *(void *)(v55 + 112) + 4;
LABEL_57:
          unsigned int v65 = 3 * v59;
          uint64_t v66 = (unsigned int *)(v64 + 12 * v59);
          do
          {
            unsigned int v67 = *(_DWORD *)(v63 + 4 * v65);
            unsigned int v68 = *(_DWORD *)(v63 + 4 * (v65 + 1));
            unsigned int v69 = *(_DWORD *)(v63 + 4 * (v65 + 2));
            *(v66 - 1) = v67;
            *uint64_t v66 = v68;
            v66[1] = v69;
            char v70 = (float *)(v62 + 12 * v67);
            uint64_t v71 = (float *)(v62 + 12 * v68);
            float v72 = v70[1];
            float v73 = v71[1];
            float v74 = v70[2];
            float v75 = v71[2];
            if ((float)((float)((float)((float)(v72 - v73) * (float)(v72 - v73))
                               + (float)((float)(*v70 - *v71) * (float)(*v70 - *v71)))
                       + (float)((float)(v74 - v75) * (float)(v74 - v75))) >= v61
              || ((unsigned int v76 = (float *)(v62 + 12 * v69),
                   float v77 = v76[1],
                   float v78 = v76[2],
                   (float)((float)((float)((float)(v73 - v77) * (float)(v73 - v77))
                                 + (float)((float)(*v71 - *v76) * (float)(*v71 - *v76)))
                         + (float)((float)(v75 - v78) * (float)(v75 - v78))) < v61)
                ? (BOOL v79 = (float)((float)((float)((float)(v77 - v72) * (float)(v77 - v72))
                                       + (float)((float)(*v76 - *v70) * (float)(*v76 - *v70)))
                               + (float)((float)(v78 - v74) * (float)(v78 - v74))) < v61)
                : (BOOL v79 = 0),
                  !v79))
            {
              ++v59;
              char v60 = 1;
              if (v59 < *(unsigned int *)(v55 + 104)) {
                goto LABEL_57;
              }
              goto LABEL_73;
            }
            ++v59;
            v65 += 3;
            v66 += 3;
          }
          while (v59 < *(unsigned int *)(v55 + 104));
          if ((v60 & 1) == 0) {
            goto LABEL_76;
          }
LABEL_73:
          if (a4) {
            *a4 = 1;
          }
          physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 234, "TriangleMesh: triangles are too big, reduce their size to increase simulation stability!", v52, v53, v54, v84);
        }
LABEL_76:
        uint64_t v37 = 1;
      }
      else
      {
        uint64_t v37 = 0;
      }
      physx::MeshCleaner::~MeshCleaner((physx::MeshCleaner *)&v88);
    }
    else
    {
      physx::MeshCleaner::~MeshCleaner((physx::MeshCleaner *)&v88);
      if ((a5 & 1) == 0) {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1048, "cleaning the mesh failed", v80, v81, v82, v84);
      }
      return 0;
    }
  }
  else
  {
    if (!a3[12])
    {
      uint64_t v34 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v85, 4 * *(unsigned int *)(*(void *)(a1 + 24) + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1058);
      uint64_t v35 = *(void *)(a1 + 24);
      *(void *)(v35 + 64) = v34;
      if (*(_DWORD *)(v35 + 104))
      {
        unint64_t v36 = 0;
        do
        {
          *(_DWORD *)(v34 + 4 * v36) = v36;
          ++v36;
        }
        while (v36 < *(unsigned int *)(v35 + 104));
      }
    }
    return 1;
  }
  return v37;
}

uint64_t physx::TriangleMeshBuilder::save(void *a1, void (***a2)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8 = physx::writeHeader(77, 69, 83, 72, 0xFu, a3, a2);
  if (!v8) {
    return v8;
  }
  unsigned int v9 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  physx::writeDword(v9, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
  uint64_t v10 = a1[3];
  int v11 = *(void *)(v10 + 128) != 0;
  if (*(void *)(v10 + 64)) {
    v11 |= 2u;
  }
  if (*(void *)(v10 + 72)) {
    v11 |= 0x10u;
  }
  if (*(unsigned char *)(a4 + 14)) {
    v11 |= 0x20u;
  }
  uint64_t v12 = *(void *)(v10 + 112);
  uint64_t v13 = *(unsigned int *)(v10 + 104);
  if (!v13)
  {
    int v18 = (*(unsigned __int8 *)(a4 + 24) >> 3) & 1;
LABEL_20:
    int v19 = 4;
    goto LABEL_21;
  }
  unsigned int v14 = 0;
  uint64_t v15 = (unsigned int *)(v12 + 8);
  do
  {
    if (*(v15 - 2) > v14) {
      unsigned int v14 = *(v15 - 2);
    }
    if (*(v15 - 1) > v14) {
      unsigned int v14 = *(v15 - 1);
    }
    unsigned int v17 = *v15;
    v15 += 3;
    unsigned int v16 = v17;
    if (v17 > v14) {
      unsigned int v14 = v16;
    }
    --v13;
  }
  while (v13);
  int v18 = (*(_DWORD *)(a4 + 24) & 8 | HIWORD(v14)) != 0;
  if (v14 <= 0xFF) {
    goto LABEL_20;
  }
  int v19 = 8;
LABEL_21:
  if (v18) {
    int v20 = 0;
  }
  else {
    int v20 = v19;
  }
  char v21 = v20 | v11;
  physx::writeDword(v20 | v11, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
  physx::writeDword(*(_DWORD *)(a1[3] + 16), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
  physx::writeDword(*(_DWORD *)(a1[3] + 104), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
  physx::writeFloatBuffer(*(void *)(a1[3] + 24), 3 * *(_DWORD *)(a1[3] + 16), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
  if ((v21 & 4) != 0)
  {
    uint64_t v22 = a1[3];
    if (*(_DWORD *)(v22 + 104))
    {
      unint64_t v24 = 0;
      do
      {
        v50[3] = *(_DWORD *)(v12 + 4 * v24);
        (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[3], 1);
        ++v24;
        uint64_t v22 = a1[3];
      }
      while (v24 < (3 * *(_DWORD *)(v22 + 104)));
    }
  }
  else
  {
    uint64_t v22 = a1[3];
    int v23 = *(_DWORD *)(v22 + 104);
    if ((v21 & 8) != 0)
    {
      if (v23)
      {
        unint64_t v25 = 0;
        do
        {
          unsigned int v26 = *(_DWORD *)(v12 + 4 * v25);
          *(_WORD *)&v50[3] = v26;
          if (a3) {
            *(_WORD *)&v50[3] = bswap32(v26) >> 16;
          }
          (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[3], 2);
          ++v25;
          uint64_t v22 = a1[3];
        }
        while (v25 < (3 * *(_DWORD *)(v22 + 104)));
      }
    }
    else
    {
      physx::writeFloatBuffer(v12, 3 * v23, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
      uint64_t v22 = a1[3];
    }
  }
  uint64_t v27 = *(void *)(v22 + 128);
  if (v27)
  {
    physx::writeWordBuffer(v27, *(_DWORD *)(v22 + 104), a3, (uint64_t (***)(void, __int16 *, uint64_t))a2);
    uint64_t v22 = a1[3];
  }
  uint64_t v28 = *(unsigned int **)(v22 + 64);
  if (v28)
  {
    int v29 = *(_DWORD *)(v22 + 104);
    if (v29)
    {
      LODWORD(v30) = 0;
      do
      {
        unsigned int v32 = *v28++;
        unsigned int v31 = v32;
        if (v32 <= v30) {
          uint64_t v30 = v30;
        }
        else {
          uint64_t v30 = v31;
        }
        --v29;
      }
      while (v29);
    }
    else
    {
      uint64_t v30 = 0;
    }
    physx::writeDword(v30, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::storeIndices(v30, *(_DWORD *)(a1[3] + 104), *(void *)(a1[3] + 64), (uint64_t (***)(void, unsigned int *, uint64_t))a2, a3);
    uint64_t v22 = a1[3];
  }
  uint64_t v33 = *(void *)(v22 + 72);
  if (v33) {
    physx::writeFloatBuffer(v33, 3 * *(_DWORD *)(v22 + 104), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
  }
  (*(void (**)(void *, void, uint64_t))(*a1 + 32))(a1, a2, a3);
  physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1[3] + 56));
  physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1[3] + 32));
  physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1[3] + 36));
  physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1[3] + 40));
  physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1[3] + 44));
  physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1[3] + 48));
  physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1[3] + 52));
  uint64_t v34 = a1[3];
  if (*(void *)(v34 + 120))
  {
    physx::writeDword(*(_DWORD *)(v34 + 104), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, *(unsigned int **)(a1[3] + 120), *(unsigned int *)(a1[3] + 104));
  }
  else
  {
    *(_DWORD *)&v50[3] = 0;
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[3], 4);
  }
  if (*(unsigned char *)(a4 + 14))
  {
    uint64_t v35 = a1[3];
    uint64_t v36 = *(void *)(v35 + 80);
    if ((v21 & 4) != 0)
    {
      int v37 = *(_DWORD *)(v35 + 104);
      if (v37)
      {
        unint64_t v38 = 0;
        do
        {
          v50[3] = *(_DWORD *)(v36 + 4 * v38);
          (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[3], 1);
          ++v38;
          uint64_t v35 = a1[3];
          int v37 = *(_DWORD *)(v35 + 104);
        }
        while (v38 < (3 * v37));
      }
    }
    else
    {
      int v37 = *(_DWORD *)(v35 + 104);
      if ((v21 & 8) != 0)
      {
        if (v37)
        {
          unint64_t v39 = 0;
          do
          {
            unsigned int v40 = *(_DWORD *)(v36 + 4 * v39);
            *(_WORD *)&v50[3] = v40;
            if (a3) {
              *(_WORD *)&v50[3] = bswap32(v40) >> 16;
            }
            (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[3], 2);
            ++v39;
            uint64_t v35 = a1[3];
            int v37 = *(_DWORD *)(v35 + 104);
          }
          while (v39 < (3 * v37));
        }
      }
      else
      {
        physx::writeFloatBuffer(*(void *)(v35 + 80), 3 * v37, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
        uint64_t v35 = a1[3];
        int v37 = *(_DWORD *)(v35 + 104);
      }
    }
    physx::writeFloatBuffer(*(void *)(v35 + 88), 4 * v37, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeFloatBuffer(*(void *)(a1[3] + 96), *(_DWORD *)(a1[3] + 104), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    uint64_t v41 = *(void *)(a1[3] + 136);
    qmemcpy(v50, "23VB", 4);
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[3], 1);
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[2], 1);
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[1], 1);
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)v50, 1);
    if (a3) {
      unsigned int v43 = -1;
    }
    else {
      unsigned int v43 = 0;
    }
    *(int8x8_t *)v42.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v43), (int8x8_t)0x2000000000000, (int8x8_t)2);
    *(_DWORD *)&v50[3] = vmovn_s16(v42).u32[0];
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v50[3], 4);
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(v41 + 8));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(v41 + 12));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(v41 + 16));
    physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(v41 + 20));
    physx::writeDword(*(_DWORD *)(v41 + 52), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeDword(*(_DWORD *)(v41 + 48), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    if (*(_DWORD *)(v41 + 48))
    {
      uint64_t v44 = 0;
      unint64_t v45 = 0;
      do
      {
        uint64_t v46 = *(void *)(v41 + 40) + v44;
        unsigned int v47 = *(_DWORD *)(v46 + 1152);
        int v48 = 4 * v47;
        physx::writeDword(v47, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
        physx::writeFloatBuffer(v46 + 1024, *(_DWORD *)(v46 + 1152), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
        physx::writeFloatBuffer(v46, v48, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
        physx::writeFloatBuffer(v46 + 512, v48, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
        ++v45;
        v44 += 1168;
      }
      while (v45 < *(unsigned int *)(v41 + 48));
    }
  }
  return v8;
}

uint64_t physx::TriangleMeshBuilder::checkMeshIndicesSize(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (*(_WORD *)(v1 + 18) || (*(unsigned char *)(v1 + 12) & 2) != 0) {
    return this;
  }
  uint64_t v2 = this;
  unsigned int v3 = *(_DWORD *)(v1 + 104);
  uint64_t v4 = *(int **)(v1 + 112);
  char v5 = *(int **)(v1 + 80);
  *(void *)(v1 + 112) = 0;
  physx::Gu::TriangleMeshData::allocateTriangles((physx::Gu::TriangleMeshData *)v1, v3, 0, v5 != 0);
  unsigned int v6 = 3 * v3;
  if (v3)
  {
    uint64_t v7 = *(_WORD **)(v1 + 112);
    if (v6 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v6;
    }
    unsigned int v9 = v4;
    do
    {
      int v10 = *v9++;
      *v7++ = v10;
      --v8;
    }
    while (v8);
LABEL_12:
    (*(void (**)(uint64_t, int *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
    if (v5)
    {
      if (v3)
      {
        int v11 = *(_WORD **)(v1 + 80);
        if (v6 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v6;
        }
        uint64_t v13 = v5;
        do
        {
          int v14 = *v13++;
          *v11++ = v14;
          --v12;
        }
        while (v12);
      }
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if (v4) {
    goto LABEL_12;
  }
  if (v5) {
LABEL_21:
  }
    (*(void (**)(uint64_t, int *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v5);
LABEL_22:
  uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 40);
  return v15(v2);
}

double physx::BV4TriangleMeshBuilder::BV4TriangleMeshBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)a1 = &unk_26E72A1F8;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_23441FAD0;
  *(int32x2_t *)(a1 + 80) = vdup_n_s32(0xFE7FFFFF);
  *(_DWORD *)(a1 + 88) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(void *)(a1 + 32) = &unk_26E728690;
  *(_DWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 286) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

void physx::BV4TriangleMeshBuilder::~BV4TriangleMeshBuilder(physx::BV4TriangleMeshBuilder *this)
{
  *(void *)this = &unk_26E72A1F8;
  physx::Gu::BV4TriangleData::~BV4TriangleData((physx::BV4TriangleMeshBuilder *)((char *)this + 32));
  *(void *)this = &unk_26E72A1B8;
  physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E72A1F8;
  physx::Gu::BV4TriangleData::~BV4TriangleData((physx::BV4TriangleMeshBuilder *)((char *)this + 32));
  *(void *)this = &unk_26E72A1B8;
  physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

void *physx::BV4TriangleMeshBuilder::onMeshIndexFormatChange(void *this)
{
  uint64_t v1 = this[3];
  uint64_t v2 = *(void *)(v1 + 112);
  if ((*(unsigned char *)(v1 + 12) & 2) != 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(v1 + 112);
  }
  if ((*(unsigned char *)(v1 + 12) & 2) == 0) {
    uint64_t v2 = 0;
  }
  uint64_t v4 = *(void *)(v1 + 24);
  this[26] = v3;
  this[27] = v2;
  this[23] = v4;
  return this;
}

uint64_t physx::BV4TriangleMeshBuilder::createMidPhaseStructure(physx::BV4TriangleMeshBuilder *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = *((void *)this + 3);
  *((_DWORD *)this + 44) = *(_DWORD *)(v10 + 16);
  *((_DWORD *)this + 50) = *(_DWORD *)(v10 + 104);
  uint64_t v11 = *(void *)(v10 + 112);
  if ((*(unsigned char *)(v10 + 12) & 2) != 0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(v10 + 112);
  }
  if ((*(unsigned char *)(v10 + 12) & 2) == 0) {
    uint64_t v11 = 0;
  }
  uint64_t v13 = *(void *)(v10 + 24);
  *((void *)this + 26) = v12;
  *((void *)this + 27) = v11;
  *((void *)this + 23) = v13;
  *((void *)this + 24) = 0;
  uint64_t v14 = *((void *)this + 2);
  if (*(_DWORD *)(v14 + 40) == 1) {
    uint64_t v15 = *(unsigned int *)(v14 + 32);
  }
  else {
    uint64_t v15 = 4;
  }
  uint64_t result = physx::Gu::BuildBV4Ex((physx::BV4TriangleMeshBuilder *)((char *)this + 224), (physx::BV4TriangleMeshBuilder *)((char *)this + 176), (physx::Gu::SourceMesh *)v15, 0.0002);
  if (result)
  {
    int v20 = (unsigned int *)*((void *)this + 24);
    uint64_t v21 = *((void *)this + 3);
    if (!*(void *)(v21 + 128)) {
      goto LABEL_21;
    }
    uint64_t result = physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v36, 2 * *(unsigned int *)(v21 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1164);
    uint64_t v22 = result;
    uint64_t v21 = *((void *)this + 3);
    uint64_t v23 = *(unsigned int *)(v21 + 104);
    uint64_t v24 = *(void *)(v21 + 128);
    if (v23)
    {
      unint64_t v25 = v20;
      unsigned int v26 = (_WORD *)result;
      do
      {
        unsigned int v27 = *v25++;
        *v26++ = *(_WORD *)(v24 + 2 * v27);
        --v23;
      }
      while (v23);
    }
    else if (!v24)
    {
LABEL_20:
      *(void *)(v21 + 128) = v22;
LABEL_21:
      uint64_t v29 = *((void *)this + 2);
      if (!*(unsigned char *)(v29 + 12) || *(unsigned char *)(v29 + 14))
      {
        uint64_t result = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)&v35, 4 * *(unsigned int *)(v21 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1173);
        uint64_t v30 = result;
        uint64_t v31 = *((void *)this + 3);
        uint64_t v32 = *(void *)(v31 + 64);
        if (*(_DWORD *)(v31 + 104))
        {
          unint64_t v33 = 0;
          do
          {
            uint64_t v34 = v20;
            if (v32) {
              uint64_t v34 = (_DWORD *)(v32 + 4 * *v20);
            }
            *(_DWORD *)(result + 4 * v33++) = *v34;
            ++v20;
          }
          while (v33 < *(unsigned int *)(v31 + 104));
        }
        if (v32)
        {
          uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
          uint64_t v31 = *((void *)this + 3);
        }
        *(void *)(v31 + 64) = v30;
      }
      if (*((void *)this + 24)) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
      *((void *)this + 24) = 0;
      return result;
    }
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    uint64_t v21 = *((void *)this + 3);
    goto LABEL_20;
  }
  uint64_t v28 = physx::shdfnd::Foundation::mInstance;
  return physx::shdfnd::Foundation::error(v28, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 1155, "BV4 tree failed to build.", v17, v18, v19, a9);
}

uint64_t physx::BV4TriangleMeshBuilder::saveMidPhaseStructure(uint64_t a1, uint64_t (***a2)(void, unsigned int *, uint64_t), int a3)
{
  qmemcpy(v9, " 4VB", sizeof(v9));
  (**a2)(a2, (unsigned int *)&v9[3], 1);
  (**a2)(a2, (unsigned int *)&v9[2], 1);
  (**a2)(a2, (unsigned int *)&v9[1], 1);
  (**a2)(a2, (unsigned int *)v9, 1);
  if (a3) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 0;
  }
  *(int8x8_t *)v6.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v7), (int8x8_t)0x3000000000000, (int8x8_t)3);
  unsigned __int32 v10 = vmovn_s16(v6).u32[0];
  (**a2)(a2, &v10, 4);
  physx::writeFloat(a3, a2, *(float *)(a1 + 232));
  physx::writeFloat(a3, a2, *(float *)(a1 + 236));
  physx::writeFloat(a3, a2, *(float *)(a1 + 240));
  physx::writeFloat(a3, a2, *(float *)(a1 + 244));
  physx::writeDword(*(_DWORD *)(a1 + 264), a3, a2);
  physx::writeFloat(a3, a2, *(float *)(a1 + 268));
  physx::writeFloat(a3, a2, *(float *)(a1 + 272));
  physx::writeFloat(a3, a2, *(float *)(a1 + 276));
  physx::writeFloat(a3, a2, *(float *)(a1 + 280));
  physx::writeFloat(a3, a2, *(float *)(a1 + 284));
  physx::writeFloat(a3, a2, *(float *)(a1 + 288));
  physx::writeDword(*(unsigned __int8 *)(a1 + 293), a3, a2);
  physx::writeDword(*(_DWORD *)(a1 + 248), a3, a2);
  return (**a2)(a2, *(unsigned int **)(a1 + 256), (16 * *(_DWORD *)(a1 + 248)));
}

double physx::RTreeTriangleMeshBuilder::RTreeTriangleMeshBuilder(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)a1 = &unk_26E72A238;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_23441FAD0;
  *(int32x2_t *)(a1 + 80) = vdup_n_s32(0xFE7FFFFF);
  *(_DWORD *)(a1 + 88) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(void *)(a1 + 32) = &unk_26E7285E8;
  *(_DWORD *)(a1 + 260) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 240) = 4;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

void physx::RTreeTriangleMeshBuilder::~RTreeTriangleMeshBuilder(physx::RTreeTriangleMeshBuilder *this)
{
  *(void *)this = &unk_26E72A238;
  uint64_t v2 = (physx::RTreeTriangleMeshBuilder *)((char *)this + 32);
  *((void *)this + 4) = &unk_26E7285E8;
  physx::Gu::RTree::~RTree((physx::RTreeTriangleMeshBuilder *)((char *)this + 176));
  physx::Gu::TriangleMeshData::~TriangleMeshData(v2);
  *(void *)this = &unk_26E72A1B8;
  physx::TriangleMeshBuilder::releaseEdgeList((uint64_t)this);
}

{
  uint64_t vars8;

  physx::RTreeTriangleMeshBuilder::~RTreeTriangleMeshBuilder(this);
  JUMPOUT(0x237DBCBD0);
}

_WORD *physx::RTreeTriangleMeshBuilder::createMidPhaseStructure(float32x2_t *this)
{
  float32x2_t v2 = this[2];
  float32x2_t v3 = this[3];
  float v4 = *(float *)(*(void *)&v2 + 32);
  int v5 = *(_DWORD *)(*(void *)&v2 + 36);
  __src = 0;
  uint64_t v108 = 0;
  uint64_t v6 = *(unsigned int *)(*(void *)&v3 + 104);
  uint64_t v105 = (void (**)(void **, unsigned char *))&unk_26E72A2D0;
  int v106 = v6;
  uint64_t v7 = *(void *)(*(void *)&v3 + 24);
  char v8 = *(unsigned char *)(*(void *)&v3 + 12);
  uint64_t v9 = *(void *)(*(void *)&v3 + 112);
  if ((v8 & 2) != 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  if ((v8 & 2) != 0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v9;
  }
  unint64_t v109 = 0;
  uint64_t v110 = 0;
  if (v6)
  {
    physx::shdfnd::Array<physx::PxBounds3V,physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>>::recreate((uint64_t)&v109, v6);
    uint64_t v12 = 0;
    float32x4_t v13 = (float32x4_t)xmmword_234422E70;
    float32x4_t v14 = (float32x4_t)xmmword_23441F6C0;
    float32x4_t v15 = (float32x4_t)xmmword_2344236C0;
    float32x4_t v16 = (float32x4_t)xmmword_2344236D0;
    do
    {
      if (v10)
      {
        unsigned int v17 = *(unsigned __int16 *)(v10 + 2 * v12);
        unsigned int v18 = *(unsigned __int16 *)(v10 + 2 * (v12 + 1));
        unsigned int v19 = *(unsigned __int16 *)(v10 + 2 * (v12 + 2));
      }
      else
      {
        unsigned int v17 = *(_DWORD *)(v11 + 4 * v12);
        unsigned int v18 = *(_DWORD *)(v11 + 4 * (v12 + 1));
        unsigned int v19 = *(_DWORD *)(v11 + 4 * (v12 + 2));
      }
      int v20 = (int8x8_t *)(v7 + 12 * v17);
      uint64_t v21 = (int8x8_t *)(v7 + 12 * v18);
      *(int8x8_t *)v22.f32 = vand_s8(*v20, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v20), (int8x8_t)vcgez_f32((float32x2_t)*v20)));
      v22.i64[1] = v20[1].u32[0];
      uint64_t v23 = (int8x8_t *)(v7 + 12 * v19);
      *(int8x8_t *)v24.f32 = vand_s8(*v21, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v21), (int8x8_t)vcgez_f32((float32x2_t)*v21)));
      v24.i64[1] = v21[1].u32[0];
      *(int8x8_t *)v25.f32 = vand_s8(*v23, vorr_s8((int8x8_t)vcltz_f32((float32x2_t)*v23), (int8x8_t)vcgez_f32((float32x2_t)*v23)));
      v25.i64[1] = v23[1].u32[0];
      float32x4_t v26 = vaddq_f32(vminq_f32(vminq_f32(v22, v24), v25), v15);
      float32x4_t v27 = vaddq_f32(vmaxq_f32(vmaxq_f32(v22, v24), v25), v16);
      *(float32x4_t *)unsigned int v112 = v26;
      *(float32x4_t *)&v112[16] = v27;
      int v28 = v110;
      if ((HIDWORD(v110) & 0x7FFFFFFFu) <= v110)
      {
        float32x4_t v101 = v14;
        float32x4_t v103 = v13;
        float32x4_t v99 = v27;
        float32x4_t v100 = v26;
        physx::shdfnd::Array<physx::PxBounds3V,physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>>::growAndPushBack((uint64_t)&v109, v112);
        float32x4_t v27 = v99;
        float32x4_t v26 = v100;
        float32x4_t v16 = (float32x4_t)xmmword_2344236D0;
        float32x4_t v15 = (float32x4_t)xmmword_2344236C0;
        float32x4_t v14 = v101;
        float32x4_t v13 = v103;
      }
      else
      {
        uint64_t v29 = (_OWORD *)(v109 + 32 * v110);
        *uint64_t v29 = *(_OWORD *)v112;
        v29[1] = *(_OWORD *)&v112[16];
        LODWORD(v110) = v28 + 1;
      }
      float32x4_t v14 = vminq_f32(v14, v26);
      float32x4_t v13 = vmaxq_f32(v13, v27);
      v12 += 3;
    }
    while (3 * v6 != v12);
    long long v102 = (__int128)v14;
    long long v104 = (__int128)v13;
    unint64_t v30 = v109;
  }
  else
  {
    unint64_t v30 = 0;
    long long v102 = xmmword_23441F6C0;
    long long v104 = xmmword_234422E70;
  }
  *(_DWORD *)unsigned int v112 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&__src, 0, v112);
  if ((HIDWORD(v108) & 0x7FFFFFFFu) < (int)v6 + 1) {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&__src, v6 + 1);
  }
  *(_DWORD *)unsigned int v112 = 0;
  if (v6)
  {
    unsigned int v31 = 0;
    do
    {
      if ((HIDWORD(v108) & 0x7FFFFFFFu) <= v108)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&__src, v112);
      }
      else
      {
        *((_DWORD *)__src + v108) = v31;
        LODWORD(v108) = v108 + 1;
      }
      unsigned int v31 = *(_DWORD *)v112 + 1;
      *(_DWORD *)unsigned int v112 = v31;
    }
    while (v31 < v6);
  }
  int v136 = -1412567295;
  if ((HIDWORD(v108) & 0x7FFFFFFFu) <= v108)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&__src, &v136);
  }
  else
  {
    *((_DWORD *)__src + v108) = -1412567295;
    LODWORD(v108) = v108 + 1;
  }
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  if (2 * v6) {
    physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::recreate((uint64_t)&v134, 2 * v6);
  }
  int v133 = 0;
  if (v5)
  {
    uint64_t v32 = (unsigned int *)__src;
    uint64_t v113 = 0;
    *(void *)&v112[8] = __src;
    *(_OWORD *)&v112[16] = v30;
    *(void *)unsigned int v112 = (char *)__src + 4 * v6;
    if (v6)
    {
      physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::recreate((uint64_t)&v112[24], v6);
      uint64_t v33 = 0;
      uint64_t v34 = 32 * v6;
      do
      {
        float32x2_t v35 = vadd_f32(*(float32x2_t *)(*(void *)&v112[16] + v33), *(float32x2_t *)(*(void *)&v112[16] + v33 + 16));
        float v36 = *(float *)(*(void *)&v112[16] + v33 + 8) + *(float *)(*(void *)&v112[16] + v33 + 24);
        *(float32x2_t *)v111[0].f32 = v35;
        v111[0].f32[2] = v36;
        int v37 = v113;
        if ((HIDWORD(v113) & 0x7FFFFFFFu) <= v113)
        {
          physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t)&v112[24], (uint64_t)v111);
        }
        else
        {
          uint64_t v38 = *(void *)&v112[24] + 12 * v113;
          *(float32x2_t *)uint64_t v38 = v35;
          *(float *)(v38 + 8) = v36;
          LODWORD(v113) = v37 + 1;
        }
        v33 += 32;
      }
      while (v34 != v33);
      uint64_t v32 = (unsigned int *)__src;
    }
    float v39 = v4 * 9.0;
    if (v4 < 0.0) {
      float v39 = 0.0;
    }
    unsigned int v40 = v39;
    if (v39 >= 8) {
      unsigned int v40 = 8;
    }
    LODWORD(v114) = physx::SubSortQuick::stopAtTrisPerLeaf1[v40];
    physx::SubSortQuick::sort4((uint64_t)v112, v32, v108 - 1, (uint64_t)&v134, &v133, v111, 0);
    if ((v113 & 0x8000000000000000) == 0 && (v113 & 0x7FFFFFFF00000000) != 0 && *(void *)&v112[24])
    {
      uint64_t v41 = physx::shdfnd::Foundation::mInstance;
LABEL_99:
      (*(void (**)(void))(*(void *)(v41 + 24) + 24))();
    }
  }
  else
  {
    *(_DWORD *)unsigned int v112 = 0;
    v111[0] = 0uLL;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)v111, v6, v112);
    *(_DWORD *)unsigned int v112 = 0;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v131, v6, v112);
    *(_DWORD *)unsigned int v112 = 0;
    uint64_t v129 = 0;
    uint64_t v130 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v129, v6, v112);
    *(_DWORD *)unsigned int v112 = 0;
    int v127 = 0;
    uint64_t v128 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v127, v6, v112);
    *(_DWORD *)unsigned int v112 = 0;
    BOOL v125 = 0;
    uint64_t v126 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v125, v6, v112);
    *(_DWORD *)unsigned int v112 = 0;
    unsigned int v123 = 0;
    uint64_t v124 = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v123, v6, v112);
    memcpy(v127, __src, (4 * v6));
    memcpy(v125, __src, (4 * v6));
    memcpy(v123, __src, (4 * v6));
    *(_DWORD *)unsigned int v112 = 0;
    *(void *)&v112[8] = v30;
    physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>((char *)v127, v128, (unsigned int *)v112);
    if (v6)
    {
      uint64_t v42 = 0;
      unsigned int v43 = v127;
      uint64_t v44 = v111[0].i64[0];
      do
      {
        *(_DWORD *)(v44 + 4 * v43[v42]) = v42;
        ++v42;
      }
      while (v6 != v42);
      *(_DWORD *)unsigned int v112 = 1;
      *(void *)&v112[8] = v30;
      physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>((char *)v125, v126, (unsigned int *)v112);
      uint64_t v45 = 0;
      uint64_t v46 = v125;
      uint64_t v47 = v131;
      do
      {
        *(_DWORD *)(v47 + 4 * v46[v45]) = v45;
        ++v45;
      }
      while (v6 != v45);
    }
    else
    {
      *(_DWORD *)unsigned int v112 = 1;
      *(void *)&v112[8] = v30;
      physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>((char *)v125, v126, (unsigned int *)v112);
    }
    *(_DWORD *)unsigned int v112 = 2;
    *(void *)&v112[8] = v30;
    physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>((char *)v123, v124, (unsigned int *)v112);
    int v48 = v123;
    uint64_t v49 = v129;
    uint64_t v50 = 0;
    if (v6)
    {
      do
      {
        *(_DWORD *)(v49 + 4 * v48[v50]) = v50;
        ++v50;
      }
      while (v6 != v50);
      uint64_t v50 = v6;
    }
    *(void *)unsigned int v112 = __src;
    *(void *)&v112[16] = v30;
    uint64_t v114 = v127;
    uint64_t v115 = v125;
    int v116 = v48;
    uint64_t v117 = v111[0].i64[0];
    uint64_t v118 = v131;
    uint64_t v119 = v49;
    uint64_t v51 = 4 * v50;
    int v121 = v6;
    if (v6)
    {
      uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v50, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 378);
      uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, v51, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 379);
    }
    else
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
    }
    *(void *)&v112[24] = v52;
    uint64_t v113 = v53;
    uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * ((2 * v6) | 1u), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 380);
    *(void *)&v112[8] = v54;
    if (v6) {
      uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, v51, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 381);
    else {
      uint64_t v55 = 0;
    }
    float v56 = v4 * 15.0;
    if (v4 < 0.0) {
      float v56 = 0.0;
    }
    unsigned int v57 = v56;
    uint64_t v120 = v55;
    if (v56 >= 0xE) {
      unsigned int v57 = 14;
    }
    unsigned int v122 = v57;
    physx::SubSortSAH::sort4((uint64_t)v112);
    if (v52) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v52);
    }
    if (v53) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v53);
    }
    if (v54) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v54);
    }
    if (v55) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v55);
    }
    if ((v124 & 0x8000000000000000) == 0 && (v124 & 0x7FFFFFFF00000000) != 0 && v123) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if ((v126 & 0x8000000000000000) == 0 && (v126 & 0x7FFFFFFF00000000) != 0 && v125) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if ((v128 & 0x8000000000000000) == 0 && (v128 & 0x7FFFFFFF00000000) != 0 && v127) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if ((v130 & 0x8000000000000000) == 0 && (v130 & 0x7FFFFFFF00000000) != 0 && v129) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if ((v132 & 0x8000000000000000) == 0 && (v132 & 0x7FFFFFFF00000000) != 0 && v131) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    if ((v111[0].i32[3] & 0x80000000) == 0 && (v111[0].i32[3] & 0x7FFFFFFF) != 0 && v111[0].i64[0])
    {
      uint64_t v41 = physx::shdfnd::Foundation::mInstance;
      goto LABEL_99;
    }
  }
  LODWORD(v108) = v108 - 1;
  v111[0] = 0uLL;
  uint64_t v58 = v135;
  if (v135)
  {
    physx::shdfnd::Array<physx::Gu::RTreeNodeQ,physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>>::recreate((uint64_t)v111, v135);
    unint64_t v59 = (int *)(v134 + 28);
    __int32 v60 = -1;
    while (1)
    {
      int v61 = *(v59 - 1);
      if (v61 == -1) {
        break;
      }
      int v62 = *v59;
      *(_OWORD *)unsigned int v112 = *(_OWORD *)(v59 - 7);
      *(void *)&v112[16] = *(void *)(v59 - 3);
      if (v62 <= 0)
      {
        int v63 = 28 * v61;
LABEL_109:
        *(_DWORD *)&v112[24] = v63;
        goto LABEL_110;
      }
      *(_DWORD *)&v112[24] = v61;
      v105[2]((void **)&v105, &v112[24]);
LABEL_110:
      __int32 v64 = v111[0].i32[2];
      if ((v111[0].i32[3] & 0x7FFFFFFFu) <= v111[0].i32[2])
      {
        physx::shdfnd::Array<physx::Gu::RTreeNodeQ,physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>>::growAndPushBack((uint64_t)v111, (long long *)v112);
      }
      else
      {
        unsigned int v65 = (_OWORD *)(v111[0].i64[0] + 28 * v111[0].u32[2]);
        long long v66 = *(_OWORD *)&v112[12];
        *unsigned int v65 = *(_OWORD *)v112;
        *(_OWORD *)((char *)v65 + 12) = v66;
        v111[0].i32[2] = v64 + 1;
      }
      v59 += 8;
      if (!--v58)
      {
        unsigned __int32 v67 = v111[0].u32[2];
        uint64_t v68 = v111[0].i64[0];
        goto LABEL_116;
      }
    }
    if (v60 == -1) {
      __int32 v60 = v111[0].i32[2];
    }
    *(void *)&v112[16] = 0x80000000800000;
    *(_OWORD *)unsigned int v112 = xmmword_2344236E0;
    int v63 = (28 * v60) | 1;
    goto LABEL_109;
  }
  uint64_t v68 = 0;
  unsigned __int32 v67 = 0;
LABEL_116:
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)this[26].f32 = _Q0;
  this[31].i32[1] = v67;
  this[32].i32[0] = v67 >> 2;
  double result = (_WORD *)physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::NonTrackingAllocator>::allocate((uint64_t)v112, 112 * (v67 >> 2), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/RTreeCooking.cpp", 879);
  this[33] = (float32x2_t)result;
  this[22] = (float32x2_t)v102;
  this[23].i32[0] = DWORD2(v102);
  this[23].i32[1] = 0;
  this[24] = (float32x2_t)v104;
  this[25].i32[0] = DWORD2(v104);
  this[25].i32[1] = 0;
  this[28] = vmul_f32(vsub_f32(*(float32x2_t *)&v104, *(float32x2_t *)&v102), (float32x2_t)vdup_n_s32(0x37800080u));
  this[29].f32[0] = (float)(*((float *)&v104 + 2) - *((float *)&v102 + 2)) * 0.000015259;
  this[29].i32[1] = 0;
  this[31].i32[0] = v133;
  this[30] = (float32x2_t)0x100000004;
  if (this[32].i32[0])
  {
    unint64_t v75 = 0;
    do
    {
      uint64_t v76 = 0;
      float v77 = (_DWORD *)(v68 + 12 + 112 * (v75 & 0x3FFFFFFF));
      do
      {
        float v78 = &result[v76];
        v78[12] = *v77;
        v78[16] = v77[1];
        v78[20] = v77[2];
        *float v78 = *(v77 - 3);
        v78[4] = *(v77 - 2);
        v78[8] = *(v77 - 1);
        v78[24] = v77[3];
        v76 += 2;
        v77 += 7;
      }
      while (v76 != 8);
      ++v75;
      result += 56;
    }
    while (v75 < this[32].u32[0]);
  }
  if ((v111[0].i32[3] & 0x80000000) == 0 && (v111[0].i32[3] & 0x7FFFFFFF) != 0 && v68) {
    double result = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v68);
  if ((v135 & 0x8000000000000000) == 0 && (v135 & 0x7FFFFFFF00000000) != 0 && v134) {
    double result = (_WORD *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if ((v110 & 0x8000000000000000) == 0 && (v110 & 0x7FFFFFFF00000000) != 0 && v30) {
    double result = (_WORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance
  }
                                                                                       + 24)
                                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, v30);
  uint64_t v79 = *(unsigned int *)(*(void *)&this[3] + 104);
  if (v79)
  {
    uint64_t v80 = (unsigned int *)__src;
    double result = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v79, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 108);
    uint64_t v81 = (uint64_t)result;
    float32x2_t v82 = this[3];
    if (*(_DWORD *)(*(void *)&v82 + 104))
    {
      unint64_t v83 = 0;
      uint64_t v84 = (uint64_t)result;
      do
      {
        uint64_t v85 = *(void *)(*(void *)&v82 + 112) + 12 * v80[v83];
        uint64_t v86 = *(void *)v85;
        *(_DWORD *)(v84 + 8) = *(_DWORD *)(v85 + 8);
        *(void *)uint64_t v84 = v86;
        v84 += 12;
        ++v83;
        float32x2_t v82 = this[3];
      }
      while (v83 < *(unsigned int *)(*(void *)&v82 + 104));
    }
    if (*(void *)(*(void *)&v82 + 112))
    {
      double result = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24);
      float32x2_t v82 = this[3];
    }
    *(void *)(*(void *)&v82 + 112) = v81;
    if (!*(void *)(*(void *)&v82 + 128)) {
      goto LABEL_147;
    }
    double result = (_WORD *)physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)v112, 2 * *(unsigned int *)(*(void *)&v82 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 116);
    uint64_t v87 = (uint64_t)result;
    float32x2_t v82 = this[3];
    uint64_t v88 = *(unsigned int *)(*(void *)&v82 + 104);
    uint64_t v89 = *(void *)(*(void *)&v82 + 128);
    if (v88)
    {
      int v90 = v80;
      uint64_t v91 = result;
      do
      {
        unsigned int v92 = *v90++;
        *v91++ = *(_WORD *)(v89 + 2 * v92);
        --v88;
      }
      while (v88);
    }
    else if (!v89)
    {
LABEL_146:
      *(void *)(*(void *)&v82 + 128) = v87;
LABEL_147:
      float32x2_t v93 = this[2];
      if (!*(unsigned char *)(*(void *)&v93 + 12) || *(unsigned char *)(*(void *)&v93 + 14))
      {
        double result = (_WORD *)physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)v111, 4 * *(unsigned int *)(*(void *)&v82 + 104), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/mesh/TriangleMeshBuilder.cpp", 125);
        uint64_t v94 = (uint64_t)result;
        float32x2_t v95 = this[3];
        uint64_t v96 = *(void *)(*(void *)&v95 + 64);
        if (*(_DWORD *)(*(void *)&v95 + 104))
        {
          unint64_t v97 = 0;
          do
          {
            unsigned int v98 = v80;
            if (v96) {
              unsigned int v98 = (_DWORD *)(v96 + 4 * *v80);
            }
            *(_DWORD *)&result[2 * v97++] = *v98;
            ++v80;
          }
          while (v97 < *(unsigned int *)(*(void *)&v95 + 104));
        }
        if (v96)
        {
          double result = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
          float32x2_t v95 = this[3];
        }
        *(void *)(*(void *)&v95 + 64) = v94;
      }
      goto LABEL_157;
    }
    double result = (_WORD *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    float32x2_t v82 = this[3];
    goto LABEL_146;
  }
LABEL_157:
  if ((v108 & 0x8000000000000000) == 0 && (v108 & 0x7FFFFFFF00000000) != 0)
  {
    if (__src) {
      return (_WORD *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return result;
}

uint64_t physx::RTreeTriangleMeshBuilder::saveMidPhaseStructure(uint64_t a1, uint64_t (***a2)(void, unsigned int *, uint64_t), int a3)
{
  qmemcpy(v11, "ERTR", sizeof(v11));
  (**a2)(a2, (unsigned int *)&v11[3], 1);
  (**a2)(a2, (unsigned int *)&v11[2], 1);
  (**a2)(a2, (unsigned int *)&v11[1], 1);
  (**a2)(a2, (unsigned int *)v11, 1);
  if (a3) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 0;
  }
  *(int8x8_t *)v6.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v7), (int8x8_t)0x2000000000000, (int8x8_t)2);
  unsigned __int32 v12 = vmovn_s16(v6).u32[0];
  (**a2)(a2, &v12, 4);
  physx::writeFloatBuffer(a1 + 176, 4, a3, a2);
  physx::writeFloatBuffer(a1 + 192, 4, a3, a2);
  physx::writeFloatBuffer(a1 + 208, 4, a3, a2);
  physx::writeFloatBuffer(a1 + 224, 4, a3, a2);
  physx::writeDword(*(_DWORD *)(a1 + 240), a3, a2);
  physx::writeDword(*(_DWORD *)(a1 + 244), a3, a2);
  physx::writeDword(*(_DWORD *)(a1 + 248), a3, a2);
  physx::writeDword(*(_DWORD *)(a1 + 252), a3, a2);
  physx::writeDword(*(_DWORD *)(a1 + 256), a3, a2);
  int v13 = 0;
  uint64_t result = (**a2)(a2, (unsigned int *)&v13, 4);
  if (*(_DWORD *)(a1 + 256))
  {
    unint64_t v9 = 0;
    uint64_t v10 = 96;
    do
    {
      physx::writeFloatBuffer(*(void *)(a1 + 264) + v10 - 96, 4, a3, a2);
      physx::writeFloatBuffer(*(void *)(a1 + 264) + v10 - 80, 4, a3, a2);
      physx::writeFloatBuffer(*(void *)(a1 + 264) + v10 - 64, 4, a3, a2);
      physx::writeFloatBuffer(*(void *)(a1 + 264) + v10 - 48, 4, a3, a2);
      physx::writeFloatBuffer(*(void *)(a1 + 264) + v10 - 32, 4, a3, a2);
      physx::writeFloatBuffer(*(void *)(a1 + 264) + v10 - 16, 4, a3, a2);
      uint64_t result = physx::writeFloatBuffer(*(void *)(a1 + 264) + v10, 4, a3, a2);
      ++v9;
      v10 += 112;
    }
    while (v9 < *(unsigned int *)(a1 + 256));
  }
  return result;
}

uint64_t physx::BV4TriangleMeshBuilder::getMidphaseID(physx::BV4TriangleMeshBuilder *this)
{
  return 1;
}

uint64_t physx::RTreeTriangleMeshBuilder::getMidphaseID(physx::RTreeTriangleMeshBuilder *this)
{
  return 0;
}

void physx::SubSortSAH::sort4(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = v3;
  uint64_t v8 = v7;
  uint64_t v180 = *MEMORY[0x263EF8340];
  int v9 = *v4;
  unsigned int v153 = v5 + 1;
  if (*v4 <= (v5 + 1)) {
    int v9 = v5 + 1;
  }
  if (!v5) {
    int v9 = 1;
  }
  long long v154 = v4;
  *float v4 = v9;
  __n128 v10 = (__n128)xmmword_2344236F0;
  long long v171 = xmmword_2344236F0;
  uint64_t v163 = v1;
  unsigned int v151 = v2;
  if (v2 <= 3)
  {
    if (v2 != 3)
    {
      uint64_t v110 = v2;
      do
        *((_DWORD *)&v171 + v110++) = v2;
      while (v110 != 3);
    }
  }
  else
  {
    uint64_t v11 = 0;
    char v168 = 1;
    uint64_t v170 = 0x40000000001;
    float v169 = v166;
    *(void *)float v166 = v2 << 32;
    unsigned __int32 v12 = v166;
    unint64_t v13 = 1;
    uint64_t v152 = v3;
LABEL_7:
    unint64_t v14 = 0;
    unsigned int v15 = -1;
    v10.n128_u32[0] = -8388609;
    do
    {
      uint64_t v16 = *(unsigned int *)&v12[8 * v14 + 4];
      if (v16 != 1)
      {
        uint64_t v17 = *(unsigned int *)&v12[8 * v14];
        uint64_t v18 = *(void *)(v1 + 16);
        unsigned int v19 = (float32x4_t *)(v18 + 32 * *(unsigned int *)(v8 + 4 * v17));
        float32x4_t v20 = *v19;
        float32x4_t v21 = v19[1];
        if (v16)
        {
          uint64_t v22 = v16 - 1;
          unsigned int v23 = v17 + 1;
          do
          {
            float32x4_t v24 = (float32x4_t *)(v18 + 32 * *(unsigned int *)(v8 + 4 * v23));
            float32x4_t v20 = vminq_f32(v20, *v24);
            float32x4_t v21 = vmaxq_f32(v21, v24[1]);
            ++v23;
            --v22;
          }
          while (v22);
        }
        float32x4_t v25 = vsubq_f32(v21, v20);
        int8x8_t v26 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL));
        *(int8x8_t *)v27.f32 = vext_s8(v26, *(int8x8_t *)v25.f32, 4uLL);
        *(int8x8_t *)&v27.u32[2] = vext_s8(*(int8x8_t *)v25.f32, v26, 4uLL);
        float32x4_t v28 = vmulq_f32(v25, v27);
        v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
        float v29 = (float)v16 * vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0];
        if (v29 > v10.n128_f32[0])
        {
          unsigned int v15 = v14;
          v10.n128_f32[0] = v29;
        }
      }
      ++v14;
    }
    while (v14 < v13);
    while (1)
    {
      unint64_t v30 = (unsigned int *)&v12[8 * v15];
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      if (v31 >= 2)
      {
        if (v31 == 2)
        {
          int v33 = 1;
        }
        else
        {
          uint64_t v156 = v11;
          uint64_t v34 = 0;
          int v155 = *v30;
          float32x2_t v35 = (_DWORD *)(v8 + 4 * v32);
          int v36 = v31 <= 3 ? -2 : -4;
          int v37 = v31 <= 3 ? 1 : 2;
          int v38 = v31 - v37;
          long long v174 = *(_OWORD *)(v1 + 64);
          uint64_t v175 = *(void *)(v1 + 80);
          uint32x4_t v172 = *(uint32x4_t *)(v1 + 40);
          unsigned int v39 = v31 >> 1;
          uint64_t v40 = (int)v31 - 2;
          uint64_t v41 = 4 * v31;
          uint64_t v173 = *(void *)(v1 + 56);
          uint64_t v42 = (v31 - 1);
          int v43 = v31 - v37 - v37;
          uint64_t v44 = (v31 + v36 + 1);
          uint64_t v157 = (v31 - v37);
          unsigned int v45 = -(v31 >> 1);
          unsigned int v162 = v31 >> 1;
          uint64_t v160 = v42;
          uint64_t v161 = v40;
          int v159 = v43;
          uint64_t v158 = v44;
          do
          {
            uint64_t v46 = v172.i64[v34];
            if (*(_DWORD *)(v1 + 96) == v31)
            {
              unint64_t v47 = 0;
              int v48 = *(unsigned int **)(v1 + 8);
              do
              {
                v48[v47 / 4] = *(_DWORD *)(v46 + v47);
                v47 += 4;
              }
              while (v41 != v47);
            }
            else
            {
              unint64_t v49 = 0;
              uint64_t v50 = *((void *)&v174 + v34);
              uint64_t v51 = *(void *)(v1 + 88);
              do
              {
                *(_DWORD *)(v51 + v49) = *(_DWORD *)(v50 + 4 * v35[v49 / 4]);
                v49 += 4;
              }
              while (v41 != v49);
              uint64_t v52 = v31;
              physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(v51, v31, (uint64_t)&v165, (uint64_t)&v164, 32);
              unint64_t v53 = 0;
              uint64_t v1 = v163;
              uint64_t v54 = *(void *)(v163 + 88);
              int v48 = *(unsigned int **)(v163 + 8);
              do
              {
                v48[v53 / 4] = *(_DWORD *)(v46 + 4 * *(unsigned int *)(v54 + v53));
                v53 += 4;
              }
              while (v41 != v53);
              uint64_t v31 = v52;
              unsigned int v39 = v162;
              uint64_t v42 = v160;
              uint64_t v40 = v161;
              int v43 = v159;
              uint64_t v44 = v158;
            }
            uint64_t v55 = *(void *)(v1 + 16);
            float v56 = (float32x4_t *)(v55 + 32 * *v48);
            float32x4_t v57 = *v56;
            float32x4_t v58 = v56[1];
            if (v31 >= 4)
            {
              unint64_t v59 = (float32x4_t *)(v55 + 32 * v48[1]);
              float32x4_t v57 = vminq_f32(v57, *v59);
              float32x4_t v58 = vmaxq_f32(v58, v59[1]);
            }
            if (v38 >= v37)
            {
              __int32 v60 = *(_DWORD **)(v1 + 24);
              int v61 = &v48[v37];
              uint64_t v62 = v44;
              do
              {
                unsigned int v63 = *v61++;
                __int32 v64 = (float32x4_t *)(v55 + 32 * v63);
                float32x4_t v57 = vminq_f32(v57, *v64);
                float32x4_t v58 = vmaxq_f32(v58, v64[1]);
                float32x4_t v65 = vsubq_f32(v58, v57);
                int8x8_t v66 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL));
                *(int8x8_t *)v67.f32 = vext_s8(v66, *(int8x8_t *)v65.f32, 4uLL);
                *(int8x8_t *)&v67.u32[2] = vext_s8(*(int8x8_t *)v65.f32, v66, 4uLL);
                float32x4_t v68 = vmulq_f32(v65, v67);
                v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
                *v60++ = vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32).u32[0];
                --v62;
              }
              while (v62);
            }
            unsigned int v69 = (_OWORD *)(v55 + 32 * v48[v42]);
            __n128 v10 = *(__n128 *)v69;
            float32x4_t v70 = *((float32x4_t *)v69 + 1);
            uint64_t v71 = v40;
            if ((int)v40 > v38)
            {
              do
              {
                float v72 = (float32x4_t *)(v55 + 32 * v48[v71]);
                __n128 v10 = (__n128)vminq_f32((float32x4_t)v10, *v72);
                float32x4_t v70 = vmaxq_f32(v70, v72[1]);
                --v71;
              }
              while (v71 > v38);
            }
            if (v38 >= v37)
            {
              float v73 = *(_DWORD **)(v1 + 32);
              float v74 = &v48[v157];
              uint64_t v75 = v44;
              do
              {
                unsigned int v76 = *v74--;
                float v77 = (float32x4_t *)(v55 + 32 * v76);
                __n128 v10 = (__n128)vminq_f32((float32x4_t)v10, *v77);
                float32x4_t v70 = vmaxq_f32(v70, v77[1]);
                float32x4_t v78 = vsubq_f32(v70, (float32x4_t)v10);
                int8x8_t v79 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
                *(int8x8_t *)v80.f32 = vext_s8(v79, *(int8x8_t *)v78.f32, 4uLL);
                *(int8x8_t *)&v80.u32[2] = vext_s8(*(int8x8_t *)v78.f32, v79, 4uLL);
                float32x4_t v81 = vmulq_f32(v78, v80);
                v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
                *v73++ = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32).u32[0];
                --v75;
              }
              while (v75);
            }
            int v82 = 0;
            float v83 = 3.4028e38;
            if ((v43 & 0x80000000) == 0)
            {
              uint64_t v84 = *(float **)(v1 + 24);
              int v85 = v37;
              int v86 = v38;
              int v87 = v43;
              uint64_t v88 = v44;
              do
              {
                float v89 = *(float *)(*(void *)(v1 + 32) + 4 * v87) * (float)v86;
                float v90 = v89 + (float)((float)v85 * *v84);
                if (v90 < v83) {
                  goto LABEL_48;
                }
                if (v90 <= v83)
                {
                  unsigned int v91 = v45 + v85;
                  if ((int)(v45 + v85) < 0) {
                    unsigned int v91 = -v91;
                  }
                  unsigned int v92 = v82 - v39;
                  if ((int)(v82 - v39) < 0) {
                    unsigned int v92 = v39 - v82;
                  }
                  if (v91 < v92)
                  {
LABEL_48:
                    int v82 = v85;
                    float v83 = v89 + (float)((float)v85 * *v84);
                  }
                }
                ++v84;
                --v87;
                --v86;
                ++v85;
                --v88;
              }
              while (v88);
            }
            *(&v177 + v34) = v83;
            v176[v34++] = v82;
          }
          while (v34 != 3);
          v10.n128_f32[0] = v178;
          if (v177 > v178 || v177 > v179)
          {
            uint64_t v6 = v152;
            uint64_t v11 = v156;
            uint64_t v94 = v178 <= v179 ? 1 : 2;
          }
          else
          {
            uint64_t v94 = 0;
            uint64_t v6 = v152;
            uint64_t v11 = v156;
          }
          float32x2_t v95 = (int *)v172.i64[v94];
          if (*(_DWORD *)(v1 + 96) == v31)
          {
            uint64_t v96 = v31;
            do
            {
              int v97 = *v95++;
              *v35++ = v97;
              --v96;
            }
            while (v96);
          }
          else
          {
            uint64_t v98 = 0;
            uint64_t v99 = *((void *)&v174 + v94);
            uint64_t v100 = *(void *)(v1 + 88);
            uint64_t v101 = v31;
            do
            {
              *(_DWORD *)(v100 + v98 * 4) = *(_DWORD *)(v99 + 4 * v35[v98]);
              ++v98;
            }
            while (v31 != v98);
            int v102 = v31;
            physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(v100, v31, (uint64_t)&v165, (uint64_t)&v164, 32);
            LODWORD(v31) = v102;
            float32x4_t v103 = *(int **)(v163 + 88);
            do
            {
              int v104 = *v103++;
              *v35++ = v95[v104];
              --v101;
            }
            while (v101);
          }
          BOOL v105 = !v176[v94] && v31 == 3;
          int v33 = v105 ? 1 : v176[v94];
          unint64_t v13 = v170;
          LODWORD(v32) = v155;
        }
      }
      else
      {
        int v33 = 0;
      }
      *(void *)&long long v174 = __PAIR64__(v33, v32);
      if ((HIDWORD(v170) & 0x7FFFFFFFu) <= v13)
      {
        int v107 = v31;
        physx::shdfnd::Array<physx::Interval,physx::shdfnd::InlineAllocator<8192u,physx::shdfnd::ReflectionAllocator<physx::Interval>>>::growAndPushBack((uint64_t)v166, &v174);
        LODWORD(v31) = v107;
        unsigned int v106 = v170;
      }
      else
      {
        *(void *)&v169[8 * v13] = v174;
        unsigned int v106 = v170 + 1;
        LODWORD(v170) = v170 + 1;
      }
      int v108 = v33 + v32;
      LODWORD(v174) = v108;
      DWORD1(v174) = v31 - v33;
      if ((HIDWORD(v170) & 0x7FFFFFFFu) <= v106)
      {
        physx::shdfnd::Array<physx::Interval,physx::shdfnd::InlineAllocator<8192u,physx::shdfnd::ReflectionAllocator<physx::Interval>>>::growAndPushBack((uint64_t)v166, &v174);
        int v109 = v170;
      }
      else
      {
        *(void *)&v169[8 * v106] = v174;
        int v109 = v170 + 1;
      }
      uint64_t v1 = v163;
      LODWORD(v170) = v109 - 1;
      *(void *)&v169[8 * v15] = *(void *)&v169[8 * (v109 - 1)];
      *((_DWORD *)&v171 + v11++) = v108;
      if (v11 == 3) {
        break;
      }
      unint64_t v13 = v170;
      unsigned __int32 v12 = v169;
      if (v170) {
        goto LABEL_7;
      }
      unsigned int v15 = -1;
    }
    if ((v170 & 0x8000000000000000) == 0 && (v170 & 0x7FFFFFFF00000000) != 0 && v169 != v166 && v169) {
      (*(void (**)(__n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(v10);
    }
  }
  physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>((uint64_t)&v171, 3, (uint64_t)v166, (uint64_t)&v174, 32);
  HIDWORD(v171) = v151;
  LODWORD(v174) = 0;
  int v111 = v171;
  v172.i32[0] = v171;
  *(void *)((char *)&v174 + 4) = v171;
  HIDWORD(v174) = DWORD2(v171);
  for (uint64_t i = 1; i != 4; ++i)
  {
    int v113 = *(_DWORD *)((char *)&v171 + i * 4);
    v172.i32[i] = v113 - v111;
    int v111 = v113;
  }
  uint64_t v114 = 0;
  uint64_t v115 = v163;
  unsigned int v116 = *(_DWORD *)&physx::stopAtTrisPerPage[4 * *(unsigned int *)(v163 + 100)] >= v151;
  v117.i64[0] = 0x1100000011;
  v117.i64[1] = 0x1100000011;
  char v118 = v116 & ~vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16((int16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vcgeq_u32(v172, v117)), (int8x8_t)vdup_n_s16(v116)), 0xFuLL)));
  do
  {
    *(_DWORD *)float v166 = 2122317823;
    uint64_t v119 = v172.u32[v114];
    if (v119)
    {
      uint64_t v120 = *(void *)(v115 + 16);
      uint64_t v121 = *((unsigned int *)&v174 + v114);
      unsigned int v122 = (float32x4_t *)(v120 + 32 * *(unsigned int *)(v8 + 4 * v121));
      float32x4_t v123 = *v122;
      float32x4_t v124 = v122[1];
      float32x4_t v125 = vsubq_f32(v124, *v122);
      int8x8_t v126 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL));
      *(int8x8_t *)v127.f32 = vext_s8(v126, *(int8x8_t *)v125.f32, 4uLL);
      *(int8x8_t *)&v127.u32[2] = vext_s8(*(int8x8_t *)v125.f32, v126, 4uLL);
      float32x4_t v128 = vmulq_f32(v125, v127);
      v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
      LODWORD(v129) = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32).u32[0];
      if (v119 == 1)
      {
        float v130 = v129;
      }
      else
      {
        uint64_t v134 = v119 - 1;
        unsigned int v135 = v121 + 1;
        float v130 = v129;
        do
        {
          int v136 = (float32x4_t *)(v120 + 32 * *(unsigned int *)(v8 + 4 * v135));
          float32x4_t v137 = v136[1];
          float32x4_t v138 = vsubq_f32(v137, *v136);
          int8x8_t v139 = (int8x8_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL));
          *(int8x8_t *)v140.f32 = vext_s8(v139, *(int8x8_t *)v138.f32, 4uLL);
          *(int8x8_t *)&v140.u32[2] = vext_s8(*(int8x8_t *)v138.f32, v139, 4uLL);
          float32x4_t v141 = vmulq_f32(v138, v140);
          v141.i64[0] = vpaddq_f32(v141, v141).u64[0];
          float v142 = vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32).f32[0];
          if (v130 >= v142) {
            float v130 = v142;
          }
          if (v129 <= v142) {
            float v129 = v142;
          }
          float32x4_t v123 = vminq_f32(v123, *v136);
          float32x4_t v124 = vmaxq_f32(v124, v137);
          ++v135;
          --v134;
        }
        while (v134);
      }
      float v143 = v129 / v130;
      BOOL v144 = v119 == 3;
      BOOL v145 = v143 < 40.0;
      if (v143 >= 40.0) {
        BOOL v144 = 0;
      }
      v123.i32[3] = v124.i32[0];
      *(float32x4_t *)float v166 = v123;
      int v133 = v124.i32[1];
      *(void *)&v166[16] = vextq_s8((int8x16_t)v124, (int8x16_t)v124, 4uLL).u64[0];
      int v132 = v124.i32[2];
      v118 &= v145;
      if (v119 < 3
        || v144
        || (v118 & 1) != 0
        || v119 <= physx::stopAtTrisPerLeaf[*(unsigned int *)(v115 + 100)])
      {
        int v131 = v121 + ((unint64_t)(v8 - *(void *)v115) >> 2);
      }
      else
      {
        LODWORD(v119) = 0;
        char v118 = 0;
        int v131 = -1;
      }
    }
    else
    {
      *(_OWORD *)&v166[4] = xmmword_234423700;
      *(_DWORD *)&v166[20] = -25165825;
      int v131 = -1;
      int v132 = -25165825;
      int v133 = -25165825;
      LODWORD(v119) = -1;
      float32x4_t v123 = (float32x4_t)xmmword_23441FAD0;
    }
    unint64_t v167 = __PAIR64__(v119, v131);
    uint64_t v146 = *(unsigned int *)(v6 + 8);
    if ((*(_DWORD *)(v6 + 12) & 0x7FFFFFFFu) <= v146)
    {
      physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::growAndPushBack(v6, v166);
      uint64_t v115 = v163;
    }
    else
    {
      uint64_t v147 = *(void *)v6 + 32 * v146;
      *(float32x4_t *)uint64_t v147 = v123;
      *(_DWORD *)(v147 + 16) = v133;
      *(_DWORD *)(v147 + 20) = v132;
      *(void *)(v147 + 24) = v167;
      ++*(_DWORD *)(v6 + 8);
    }
    ++v114;
  }
  while (v114 != 4);
  if ((v118 & 1) == 0)
  {
    uint64_t v148 = 0;
    int v149 = *(_DWORD *)(v6 + 8) - 4;
    do
    {
      uint64_t v150 = *(void *)v6 + 32 * (v149 + v148);
      if (!*(_DWORD *)(v150 + 28))
      {
        *(_DWORD *)(v150 + 24) = *(_DWORD *)(v6 + 8);
        physx::SubSortSAH::sort4(v163, v8 + 4 * *((unsigned int *)&v174 + v148), v172.u32[v148], v6, v154, v153);
      }
      ++v148;
    }
    while (v148 != 4);
  }
}

uint64_t physx::SubSortQuick::sort4(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, int *a5, float32x4_t *a6, int a7)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  int v11 = *a5;
  if (*a5 <= (a7 + 1)) {
    int v11 = a7 + 1;
  }
  if (!a7) {
    int v11 = 1;
  }
  *a5 = v11;
  if (a3 >> 2 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = a3 >> 2;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = (float32x4_t *)(v13 + 32 * *a2);
  float32x4_t v16 = *v14;
  float32x4_t v15 = v14[1];
  if (a3 >= 2)
  {
    uint64_t v17 = a3 - 1;
    uint64_t v18 = a2 + 1;
    do
    {
      unsigned int v19 = *v18++;
      float32x4_t v20 = (float32x4_t *)(v13 + 32 * v19);
      float32x4_t v15 = vmaxq_f32(v15, v20[1]);
      float32x4_t v16 = vminq_f32(v16, *v20);
      --v17;
    }
    while (v17);
  }
  float32x4_t v21 = vsubq_f32(v15, v16);
  uint64_t v71 = v21.i64[0];
  float v72 = v21.f32[2];
  if (v21.f32[1] > v21.f32[2]) {
    int v22 = 1;
  }
  else {
    int v22 = 2;
  }
  if (v21.f32[0] > v21.f32[2] && v21.f32[0] > v21.f32[1]) {
    int v22 = 0;
  }
  unsigned int v66 = v22;
  uint64_t v65 = *(void *)(a1 + 24);
  int v68 = *(_DWORD *)(a4 + 8);
  physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::resizeUninitialized(a4, v68 + 4);
  uint64_t result = a1;
  uint64_t v25 = 0;
  unsigned int v26 = 0;
  uint64_t v27 = 1;
  int32x2_t v28 = vdup_n_s32(0xFE7FFFFF);
  do
  {
    unint64_t v29 = v25 * v12;
    if (v25 == 3)
    {
      unsigned int v30 = (-3 * v12 + a3) & ~((int)(-3 * v12 + a3) >> 31);
    }
    else
    {
      if (v29 <= a3 - 1)
      {
        unsigned int v31 = v12;
        unsigned int v32 = a3 - 1;
        unsigned int v33 = v25 * v12;
        uint64_t v34 = v65 + 4 * v66;
        while (1)
        {
          unsigned int v35 = (v33 + v32) >> 1;
          unsigned int v36 = a2[v35];
          uint64_t v37 = v32;
          unsigned int v38 = a2[v32];
          a2[v32] = v36;
          a2[v35] = v38;
          unsigned int v39 = v33;
          if (v33 < v32)
          {
            float v40 = *(float *)(v34 + 12 * v36);
            unint64_t v41 = v32 - (unint64_t)v33;
            uint64_t v42 = &a2[v33];
            unsigned int v39 = v33;
            do
            {
              if (*(float *)(v34 + 12 * *v42) <= v40)
              {
                unsigned int v43 = a2[v39];
                a2[v39] = *v42;
                *uint64_t v42 = v43;
                ++v39;
              }
              ++v42;
              --v41;
            }
            while (v41);
          }
          unsigned int v44 = a2[v37];
          a2[v37] = a2[v39];
          a2[v39] = v44;
          unsigned int v45 = v39 - v33 + 1;
          if (v45 == v31) {
            break;
          }
          BOOL v46 = v31 >= v45;
          if (v31 >= v45) {
            int v47 = v39 - v33 + 1;
          }
          else {
            int v47 = 0;
          }
          if (v31 >= v45) {
            unsigned int v32 = v37;
          }
          else {
            unsigned int v32 = v39 - 1;
          }
          if (v46) {
            unsigned int v33 = v39 + 1;
          }
          v31 -= v47;
        }
        *((float *)&v71 + v66) = physx::SubSortQuick::reductionFactors[v25] * *((float *)&v71 + v66);
        if (*((float *)&v71 + 1) > v72) {
          int v48 = 1;
        }
        else {
          int v48 = 2;
        }
        if (*(float *)&v71 > v72 && *(float *)&v71 > *((float *)&v71 + 1)) {
          int v48 = 0;
        }
        unsigned int v66 = v48;
      }
      unsigned int v30 = v12;
    }
    uint64_t v50 = (v68 + v25);
    uint64_t v51 = *(void *)a4;
    uint64_t v52 = *(void *)a4 + 32 * v50;
    v26 += v30;
    if (v30 <= *(_DWORD *)(result + 40))
    {
      if (v30 && v26 <= a3)
      {
        uint64_t v53 = v51 + 32 * v50;
        *(_DWORD *)(v53 + 28) = v30;
        *(_DWORD *)(v53 + 24) = (((unint64_t)a2 - *(void *)(result + 8)) >> 2) + v29;
        uint64_t v54 = *(void *)(result + 16);
        uint64_t v55 = (float32x4_t *)(v54 + 32 * a2[v29]);
        float32x4_t v69 = *v55;
        float32x4_t v70 = v55[1];
        if (v30 >= 2)
        {
          float32x4_t v57 = *v55;
          float32x4_t v56 = v55[1];
          uint64_t v58 = v30 - 1;
          uint64_t v59 = v27;
          do
          {
            __int32 v60 = (float32x4_t *)(v54 + 32 * a2[v59]);
            float32x4_t v57 = vminq_f32(v57, *v60);
            float32x4_t v56 = vmaxq_f32(v56, v60[1]);
            ++v59;
            --v58;
          }
          while (v58);
          float32x4_t v69 = v57;
          float32x4_t v70 = v56;
        }
        if (v25)
        {
LABEL_60:
          float32x4_t v62 = v69;
          float32x4_t v61 = vmaxq_f32(a6[1], v70);
          *a6 = vminq_f32(*a6, v69);
          a6[1] = v61;
          v62.i32[3] = v70.i32[0];
          int8x8_t v63 = vext_s8(*(int8x8_t *)v70.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), 4uLL);
          goto LABEL_63;
        }
      }
      else
      {
        float32x4_t v69 = 0u;
        float32x4_t v70 = 0u;
        *(_OWORD *)uint64_t v52 = xmmword_23441FAD0;
        *(int32x2_t *)(v52 + 16) = v28;
        *(void *)(v51 + 32 * v50 + 24) = -1;
        if (v25) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      *(void *)(v52 + 24) = *(unsigned int *)(a4 + 8);
      physx::SubSortQuick::sort4();
      uint64_t result = a1;
      if (v25) {
        goto LABEL_60;
      }
    }
    v62.i64[0] = v69.i64[0];
    *a6 = v69;
    a6[1] = v70;
    int8x8_t v63 = *(int8x8_t *)&v70.i32[1];
    v62.i64[1] = __PAIR64__(v70.u32[0], v69.u32[2]);
LABEL_63:
    uint64_t v64 = *(void *)a4 + 32 * v50;
    *(float32x4_t *)uint64_t v64 = v62;
    *(int8x8_t *)(v64 + 16) = v63;
    ++v25;
    v27 += v12;
  }
  while (v25 != 4);
  return result;
}

uint64_t physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 32 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>::getName() [T = physx::RTreeNodeNQ]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  __n128 v10 = *(void **)a1;
  if (v9)
  {
    unint64_t v11 = result + 32 * v9;
    uint64_t v12 = (void *)result;
    do
    {
      *uint64_t v12 = *v10;
      v12[1] = v10[1];
      v12[2] = v10[2];
      v12[3] = v10[3];
      v12 += 4;
      v10 += 4;
    }
    while ((unint64_t)v12 < v11);
    __n128 v10 = *(void **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

char *physx::shdfnd::sort<unsigned int,physx::SortBoundsPredicate,physx::shdfnd::ReflectionAllocator<unsigned int>>(char *result, int a2, unsigned int *a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v53 = 0x2000000000;
  uint64_t v54 = v56;
  char v55 = 0;
  int v3 = a2 - 1;
  if (a2 - 1 >= 1)
  {
    uint64_t v5 = result;
    int v6 = 0;
    uint64_t v7 = result + 4;
    uint64_t v8 = v56;
    memset(v56, 0, sizeof(v56));
    while (1)
    {
      if (v3 > v6)
      {
        if ((v3 - v6) < 5)
        {
LABEL_31:
          uint64_t v38 = *((void *)a3 + 1);
          uint64_t v39 = v6;
          int v40 = v6 + 1;
          unint64_t v41 = &v7[4 * v6];
          do
          {
            uint64_t v42 = 0;
            uint64_t v43 = v39++;
            uint64_t v44 = v38 + 4 * *a3;
            int v45 = v43;
            do
            {
              BOOL v46 = (float *)(v44 + 32 * *(unsigned int *)&v41[4 * v42]);
              float v47 = *v46 + v46[4];
              int v48 = (float *)(v44 + 32 * *(unsigned int *)&v5[4 * v45]);
              if (v47 < (float)(*v48 + v48[4])) {
                int v45 = v40 + v42;
              }
              ++v42;
            }
            while (v43 + v42 < v3);
            if (v45 != v43)
            {
              int v49 = *(_DWORD *)&v5[4 * v45];
              *(_DWORD *)&v5[4 * v45] = *(_DWORD *)&v5[4 * v43];
              *(_DWORD *)&v5[4 * v43] = v49;
            }
            ++v40;
            v41 += 4;
          }
          while (v39 != v3);
        }
        else
        {
          while (1)
          {
            int v9 = v6 + v3;
            if (v6 + v3 < 0 != __OFADD__(v6, v3)) {
              ++v9;
            }
            int v10 = v9 >> 1;
            uint64_t v11 = (uint64_t)v9 >> 1;
            uint64_t v12 = *((void *)a3 + 1);
            uint64_t v13 = *(unsigned int *)&v5[4 * v10];
            uint64_t v14 = *a3;
            uint64_t v15 = *(unsigned int *)&v5[4 * v6];
            float v16 = *(float *)(v12 + 32 * v15 + 4 * v14) + *(float *)(v12 + 32 * v15 + 4 * v14 + 16);
            if ((float)(*(float *)(v12 + 32 * v13 + 4 * v14) + *(float *)(v12 + 32 * v13 + 4 * v14 + 16)) >= v16)
            {
              uint64_t v17 = *(unsigned int *)&v5[4 * v6];
            }
            else
            {
              *(_DWORD *)&v5[4 * v6] = v13;
              *(_DWORD *)&v5[4 * v11] = v15;
              uint64_t v14 = *a3;
              uint64_t v17 = *(unsigned int *)&v5[4 * v6];
              float v16 = *(float *)(v12 + 32 * v17 + 4 * v14) + *(float *)(v12 + 32 * v17 + 4 * v14 + 16);
              uint64_t v13 = v15;
              LODWORD(v15) = *(_DWORD *)&v5[4 * v6];
            }
            uint64_t v18 = *(unsigned int *)&v5[4 * v3];
            float v19 = *(float *)(v12 + 32 * v18 + 4 * v14) + *(float *)(v12 + 32 * v18 + 4 * v14 + 16);
            if (v19 >= v16)
            {
              LODWORD(v15) = *(_DWORD *)&v5[4 * v3];
            }
            else
            {
              *(_DWORD *)&v5[4 * v6] = v18;
              *(_DWORD *)&v5[4 * v3] = v15;
              uint64_t v14 = *a3;
              float32x4_t v20 = (float *)(v12 + 32 * v17 + 4 * v14);
              float v21 = *v20;
              float v22 = v20[4];
              uint64_t v13 = *(unsigned int *)&v5[4 * v11];
              float v19 = v21 + v22;
            }
            if (v19 < (float)(*(float *)(v12 + 32 * v13 + 4 * v14) + *(float *)(v12 + 32 * v13 + 4 * v14 + 16)))
            {
              *(_DWORD *)&v5[4 * v11] = v15;
              *(_DWORD *)&v5[4 * v3] = v13;
              uint64_t v13 = *(unsigned int *)&v5[4 * v11];
            }
            uint64_t v23 = v3 - 1;
            *(_DWORD *)&v5[4 * v11] = *(_DWORD *)&v5[4 * v23];
            *(_DWORD *)&v5[4 * v23] = v13;
            int v24 = v6;
            int v25 = v3 - 1;
            while (1)
            {
              uint64_t v26 = v12 + 4 * *a3;
              float v27 = *(float *)(v26 + 32 * v13) + *(float *)(v26 + 32 * v13 + 16);
              int32x2_t v28 = &v5[4 * v24];
              do
              {
                unsigned int v30 = *((_DWORD *)v28 + 1);
                v28 += 4;
                unsigned int v29 = v30;
                ++v24;
              }
              while ((float)(*(float *)(v26 + 32 * v30) + *(float *)(v26 + 32 * v30 + 16)) < v27);
              unsigned int v31 = &v5[4 * v25];
              do
              {
                unsigned int v33 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                unsigned int v32 = v33;
                --v25;
              }
              while (v27 < (float)(*(float *)(v26 + 32 * v33) + *(float *)(v26 + 32 * v33 + 16)));
              if (v24 >= v25) {
                break;
              }
              *(_DWORD *)int32x2_t v28 = v32;
              *(_DWORD *)unsigned int v31 = v29;
              uint64_t v13 = *(unsigned int *)&v5[4 * v23];
            }
            *(_DWORD *)int32x2_t v28 = v13;
            *(_DWORD *)&v5[4 * v23] = v29;
            unsigned int v34 = v53;
            unsigned int v35 = HIDWORD(v53) - 1;
            if (v24 - v6 >= v3 - v24)
            {
              if (v53 >= v35)
              {
                uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v52);
                unsigned int v34 = v53;
                uint64_t v8 = v54;
              }
              LODWORD(v53) = v34 + 1;
              *((_DWORD *)v8 + v34) = v24 + 1;
              uint64_t v37 = v53;
              LODWORD(v53) = v53 + 1;
              *((_DWORD *)v8 + v37) = v3;
              int v3 = v24 - 1;
            }
            else
            {
              if (v53 >= v35)
              {
                uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v52);
                unsigned int v34 = v53;
                uint64_t v8 = v54;
              }
              LODWORD(v53) = v34 + 1;
              *((_DWORD *)v8 + v34) = v6;
              uint64_t v36 = v53;
              LODWORD(v53) = v53 + 1;
              *((_DWORD *)v8 + v36) = v24 - 1;
              int v6 = v24 + 1;
            }
            if (v3 <= v6) {
              break;
            }
            if ((v3 - v6) <= 4) {
              goto LABEL_31;
            }
          }
        }
      }
      int v50 = v53;
      if (!v53) {
        break;
      }
      LODWORD(v53) = v53 - 1;
      int v3 = *((_DWORD *)v8 + (v50 - 1));
      LODWORD(v53) = v50 - 2;
      int v6 = *((_DWORD *)v8 + (v50 - 2));
    }
    if (v55) {
      BOOL v51 = v8 == 0;
    }
    else {
      BOOL v51 = 1;
    }
    if (!v51) {
      return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Interval,physx::shdfnd::InlineAllocator<8192u,physx::shdfnd::ReflectionAllocator<physx::Interval>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 8212);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (!v5) {
    goto LABEL_14;
  }
  if ((8 * v5) <= 0x2000 && *(unsigned char *)(result + 0x2000) == 0)
  {
    *(unsigned char *)(result + 0x2000) = 1;
    int v9 = (void *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    int v9 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Interval>::getName() [T = physx::Interval]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  int v9 = (void *)result;
LABEL_16:
  uint64_t v10 = *(unsigned int *)(v3 + 8208);
  if (v10)
  {
    unint64_t v11 = (unint64_t)&v9[v10];
    uint64_t v12 = *(uint64_t **)(v3 + 8200);
    uint64_t v13 = v9;
    do
    {
      uint64_t v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    uint64_t v15 = *(unsigned int *)(v3 + 8208);
  }
  else
  {
    uint64_t v15 = 0;
  }
  v9[v15] = *a2;
  if ((*(_DWORD *)(v3 + 8212) & 0x80000000) == 0)
  {
    uint64_t v16 = *(void *)(v3 + 8200);
    if (v16 == v3)
    {
      *(unsigned char *)(v3 + 0x2000) = 0;
    }
    else if (v16)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 8200) = v9;
  *(_DWORD *)(v3 + 8212) = v5;
  ++*(_DWORD *)(v3 + 8208);
  return result;
}

uint64_t physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>::getName() [T = physx::RTreeNodeNQ]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[4 * v9];
    unint64_t v11 = *(void **)v3;
    uint64_t v12 = v8;
    do
    {
      *uint64_t v12 = *v11;
      v12[1] = v11[1];
      v12[2] = v11[2];
      v12[3] = v11[3];
      v12 += 4;
      v11 += 4;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v13 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v8[4 * v13];
  *uint64_t v14 = *a2;
  v14[1] = a2[1];
  v14[2] = a2[2];
  v14[3] = a2[3];
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxVec3>::allocate(result, 12 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(v3 + 8);
  uint64_t v6 = *(void *)v3;
  if (v5)
  {
    unint64_t v7 = v4 + 12 * v5;
    uint64_t v8 = *(void *)v3;
    unint64_t v9 = v4;
    do
    {
      *(void *)unint64_t v9 = *(void *)v8;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v8 + 8);
      v9 += 12;
      v8 += 12;
    }
    while (v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::RTreeNodeNQ,physx::shdfnd::ReflectionAllocator<physx::RTreeNodeNQ>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::RTreeNodeQ,physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>>::recreate(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 28 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>::getName() [T = physx::Gu::RTreeNodeQ]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unint64_t v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 28 * v9;
    uint64_t v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10;
      *(_OWORD *)((char *)v12 + 12) = *(long long *)((char *)v10 + 12);
      *uint64_t v12 = v13;
      uint64_t v12 = (_OWORD *)((char *)v12 + 28);
      unint64_t v10 = (long long *)((char *)v10 + 28);
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::RTreeNodeQ,physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>>::growAndPushBack(uint64_t result, long long *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::RTreeNodeQ>::getName() [T = physx::Gu::RTreeNodeQ]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 28 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)v8 + 28 * v9;
    unint64_t v11 = *(long long **)v3;
    uint64_t v12 = v8;
    do
    {
      long long v13 = *v11;
      *(_OWORD *)((char *)v12 + 12) = *(long long *)((char *)v11 + 12);
      *uint64_t v12 = v13;
      uint64_t v12 = (_OWORD *)((char *)v12 + 28);
      unint64_t v11 = (long long *)((char *)v11 + 28);
    }
    while ((unint64_t)v12 < v10);
    unsigned int v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v14 = 0;
  }
  uint64_t v15 = (_OWORD *)((char *)v8 + 28 * v14);
  long long v16 = *a2;
  *(_OWORD *)((char *)v15 + 12) = *(long long *)((char *)a2 + 12);
  *uint64_t v15 = v16;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::findAdjacent(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, float *a7, uint64_t a8, int a9)
{
  if (a5 >= a6) {
    unsigned int v9 = a6;
  }
  else {
    unsigned int v9 = a5;
  }
  if (a5 <= a6) {
    unsigned int v10 = a6;
  }
  else {
    unsigned int v10 = a5;
  }
  if ((3 * a4) < 2)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v12 = 3 * a4;
    do
    {
      uint64_t v13 = (v12 + v11) >> 1;
      unsigned int v14 = *(_DWORD *)(a8 + 12 * v13);
      if (v14 >= v9 && (v14 != v9 || *(_DWORD *)(a8 + 12 * v13 + 4) > v10))
      {
        unsigned int v12 = (v12 + v11) >> 1;
        uint64_t v13 = v11;
      }
      uint64_t v11 = v13;
    }
    while (v12 - v13 > 1);
  }
  uint64_t v15 = v13;
  long long v16 = (_DWORD *)(a8 + 12 * v13 - 12);
  do
  {
    unsigned int v17 = v15;
    if (!v15) {
      break;
    }
    if (*v16 != v9) {
      break;
    }
    int v18 = v16[1];
    v16 -= 3;
    --v15;
  }
  while (v18 == v10);
  if (3 * a4 <= v17) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v19 = -3 * a4 + v17;
  float v20 = *a7;
  float v21 = a7[1];
  float v22 = a7[2];
  uint64_t v23 = (unsigned int *)(a8 + 12 * v17 + 8);
  uint64_t v24 = 0xFFFFFFFFLL;
  float v25 = -3.4028e38;
  while (*(v23 - 2) == v9 && *(v23 - 1) == v10)
  {
    unsigned int v26 = *v23;
    if (*v23 != a9)
    {
      float v27 = (float *)(a1
                    + 12
                    * (*(_DWORD *)(a3 + 12 * v26)
                     - (a6
                      + a5)
                     + *(_DWORD *)(a3 + 12 * v26 + 4)
                     + *(_DWORD *)(a3 + 12 * v26 + 8)));
      if ((float)(a7[3] + (float)((float)((float)(v21 * v27[1]) + (float)(*v27 * v20)) + (float)(v27[2] * v22))) >= 0.0) {
        return v26 | 0x80000000;
      }
      if ((float)((float)((float)(v21 * *(float *)(a2 + 12 * v26 + 4)) + (float)(v20 * *(float *)(a2 + 12 * v26)))
                 + (float)(v22 * *(float *)(a2 + 12 * v26 + 8))) > v25)
      {
        float v25 = (float)((float)(v21 * *(float *)(a2 + 12 * v26 + 4)) + (float)(v20 * *(float *)(a2 + 12 * v26)))
            + (float)(v22 * *(float *)(a2 + 12 * v26 + 8));
        uint64_t v24 = *v23;
      }
    }
    v23 += 3;
    if (__CFADD__(v19++, 1)) {
      return v24;
    }
  }
  return v24;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::EdgeTriLookup>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    uint64_t v3 = 4 * v2;
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::EdgeTriLookup>::getName() [T = physx::EdgeTriLookup]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v6;
  return result;
}

void physx::RTreeCookerRemap::~RTreeCookerRemap(physx::RTreeCookerRemap *this)
{
}

void physx::RTreeCookerRemap::remap(physx::RTreeCookerRemap *this, unsigned int *a2, int a3, char a4)
{
  *a2 = (2 * a4 + 30) & 0x1E | (32 * a3) | 1;
}

uint64_t physx::shdfnd::Array<physx::PxBounds3V,physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 32 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>::getName() [T = physx::PxBounds3V]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unsigned int v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 32 * v9;
    unsigned int v12 = (_OWORD *)result;
    do
    {
      long long v13 = *v10;
      long long v14 = v10[1];
      v10 += 2;
      *unsigned int v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v11);
    unsigned int v10 = *(long long **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxBounds3V,physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxBounds3V>::getName() [T = physx::PxBounds3V]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[2 * v9];
    unint64_t v11 = *(long long **)v3;
    unsigned int v12 = v8;
    do
    {
      long long v13 = *v11;
      long long v14 = v11[1];
      v11 += 2;
      *unsigned int v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v15 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v15 = 0;
  }
  long long v16 = &v8[2 * v15];
  long long v17 = a2[1];
  *long long v16 = *a2;
  v16[1] = v17;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void physx::ConvexHullBuilder::~ConvexHullBuilder(physx::ConvexHullBuilder *this)
{
  if (*((void *)this + 5)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 5) = 0;
  if (*((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 6) = 0;
  if (*(void *)this) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)this = 0;
  if (*((void *)this + 1)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 1) = 0;
  if (*((void *)this + 2)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 2) = 0;
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 3) = 0;
  if (*((void *)this + 4)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 4) = 0;
}

uint64_t physx::ConvexHullBuilder::calculateVertexMapTable(physx::ConvexHullBuilder *this, int a2, char a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *((void *)this + 4) = physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v31, 3 * *(unsigned __int8 *)(*((void *)this + 7) + 38), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 486);
  unsigned int v6 = *(unsigned __int8 *)(*((void *)this + 7) + 38);
  bzero(v32, *(unsigned __int8 *)(*((void *)this + 7) + 38));
  if (a2)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *((void *)this + 1);
      uint64_t v12 = v11 + 20 * v10;
      int v15 = *(unsigned __int8 *)(v12 + 18);
      long long v13 = (unsigned __int8 *)(v12 + 18);
      unsigned __int8 v14 = v15;
      if (v15)
      {
        uint64_t v16 = 0;
        long long v17 = (unsigned __int16 *)(v11 + 20 * v10 + 16);
        do
        {
          uint64_t v18 = *(unsigned __int8 *)(*((void *)this + 2) + *v17 + v16);
          uint64_t v19 = v32[v18];
          if (v19 <= 2)
          {
            uint64_t v20 = *((void *)this + 4);
            v32[v18] = v19 + 1;
            *(unsigned char *)(v20 + 3 * v18 + v19) = v10;
            unsigned __int8 v14 = *v13;
          }
          ++v16;
        }
        while (v16 < v14);
      }
      ++v10;
    }
    while (v10 != a2);
    unsigned int v6 = *(unsigned __int8 *)(*((void *)this + 7) + 38);
  }
  if (!v6) {
    return 1;
  }
  char v21 = 0;
  uint64_t v22 = v6;
  uint64_t v23 = v32;
  do
  {
    int v24 = *v23++;
    v21 |= v24 != 3;
    --v22;
  }
  while (v22);
  if ((v21 & 1) == 0) {
    return 1;
  }
  if (a3)
  {
    float v25 = "ConvexHullBuilder: convex hull does not have vertex-to-face info! Some of the vertices have less than 3 neighb"
          "or polygons. The vertex is most likely inside a polygon or on an edge between 2 polygons, please remove those vertices.";
    uint64_t v26 = 517;
  }
  else
  {
    float v25 = "ConvexHullBuilder: convex hull does not have vertex-to-face info! Try to use different convex mesh cooking settings.";
    uint64_t v26 = 515;
  }
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", v26, v25, v7, v8, v9, v30);
  if (*(unsigned char *)(*((void *)this + 7) + 38))
  {
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    do
    {
      *(unsigned char *)(*((void *)this + 4) + v28) = -1;
      *(unsigned char *)(*((void *)this + 4) + v28 + 1) = -1;
      *(unsigned char *)(*((void *)this + 4) + v28 + 2) = -1;
      ++v29;
      v28 += 3;
    }
    while (v29 < *(unsigned __int8 *)(*((void *)this + 7) + 38));
  }
  return 0;
}

uint64_t physx::ConvexHullBuilder::checkHullPolygons(float **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  uint64_t v8 = *this;
  uint64_t v9 = this[1];
  if (*this) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = this[7];
    unint64_t v12 = *((unsigned __int8 *)v11 + 39);
    if (v12 >= 4)
    {
      float v14 = *v8;
      float v13 = v8[1];
      float v15 = v8[2];
      uint64_t v16 = *((unsigned __int8 *)v11 + 38);
      if (v16)
      {
        long long v17 = v8 + 2;
        float32x2_t v18 = (float32x2_t)0x80000000800000;
        float v19 = -3.4028e38;
        uint64_t v20 = v16;
        float v21 = v8[2];
        float v22 = v8[1];
        float v23 = *v8;
        do
        {
          float32x2_t v24 = *(float32x2_t *)(v17 - 2);
          float32x2_t v25 = vabs_f32(v24);
          float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v25, v18), (int8x8_t)v25, (int8x8_t)v18);
          float v26 = *v17;
          v17 += 3;
          float v27 = v26;
          float v28 = fabsf(v26);
          if (v28 > v19) {
            float v19 = v28;
          }
          if (v24.f32[0] < v14) {
            float v29 = v24.f32[0];
          }
          else {
            float v29 = v14;
          }
          if (v24.f32[0] > v23) {
            float v23 = v24.f32[0];
          }
          else {
            float v14 = v29;
          }
          if (v24.f32[1] < v13) {
            float v30 = v24.f32[1];
          }
          else {
            float v30 = v13;
          }
          if (v24.f32[1] > v22) {
            float v22 = v24.f32[1];
          }
          else {
            float v13 = v30;
          }
          if (v27 < v15) {
            float v31 = v27;
          }
          else {
            float v31 = v15;
          }
          if (v27 > v21) {
            float v21 = v27;
          }
          else {
            float v15 = v31;
          }
          --v20;
        }
        while (v20);
        float32x2_t v32 = vadd_f32(v18, (float32x2_t)vdup_n_s32(0x3CA3D70Au));
        float v33 = v19 + 0.02;
        uint64_t v34 = v16;
      }
      else
      {
        uint64_t v34 = 0;
        float32x2_t v32 = (float32x2_t)0x80000000800000;
        float v33 = -3.4028e38;
        float v23 = *v8;
        float v22 = v8[1];
        float v21 = v8[2];
      }
      uint64_t v35 = 0;
      uint64_t v36 = this[2];
      v58[0] = 0;
      v58[1] = v32;
      *(float *)uint64_t v59 = v33;
      v59[1] = v32.i32[0];
      *(float *)&v59[2] = -v32.f32[1];
      *(float *)&_DWORD v59[3] = -v33;
      float32x2_t v60 = v32;
      float v61 = -v33;
      __int32 v62 = v32.i32[0];
      float v63 = -v32.f32[1];
      float v64 = v33;
      __int32 v66 = v32.i32[1];
      float v65 = -v32.f32[0];
      float v67 = v33;
      float v68 = -v32.f32[0];
      float v69 = -v32.f32[1];
      float v70 = v33;
      float v71 = -v32.f32[0];
      __int32 v72 = v32.i32[1];
      float v73 = -v33;
      float v74 = -v32.f32[0];
      float v75 = -v32.f32[1];
      float v76 = -v33;
      float v37 = fabsf(v23);
      float v38 = fabsf(v14);
      if (v37 > v38) {
        float v38 = v37;
      }
      float v39 = fabsf(v22);
      float v40 = fabsf(v13);
      if (v39 > v40) {
        float v40 = v39;
      }
      float v41 = v38 + v40;
      float v42 = fabsf(v21);
      float v43 = fabsf(v15);
      if (v42 > v43) {
        float v43 = v42;
      }
      float v44 = fmaxf((float)(v41 + v43) * 0.02, 0.02);
      do
      {
        uint64_t v45 = 0;
        BOOL v46 = &v9[5 * v35];
        float v47 = (float *)v59;
        do
        {
          uint64_t v48 = *((unsigned __int8 *)v58 + v45);
          if (!*((unsigned char *)v58 + v45)
            && (float)((float)((float)((float)(*(v47 - 1) * v46[1]) + (float)(*(v47 - 2) * *v46))
                             + (float)(*v47 * v46[2]))
                     + v46[3]) >= 0.0)
          {
            *((unsigned char *)v58 + v45) = 1;
          }
          ++v45;
          v47 += 3;
        }
        while (v45 != 8);
        if (v16)
        {
          uint64_t v49 = 0;
          int v50 = &v9[5 * v35];
          uint64_t v51 = *((unsigned __int8 *)v50 + 18);
          uint64_t v48 = (uint64_t)(v50 + 4);
          do
          {
            if (v51)
            {
              a7 = (float *)((char *)v36 + *(unsigned __int16 *)v48);
              a8 = v51;
              while (1)
              {
                int v52 = *(unsigned __int8 *)a7;
                a7 = (float *)((char *)a7 + 1);
                if (v52 == v49) {
                  break;
                }
                if (!--a8) {
                  goto LABEL_49;
                }
              }
            }
            else
            {
LABEL_49:
              a7 = &v8[3 * v49];
              if ((float)((float)((float)((float)(a7[1] * v46[1]) + (float)(*a7 * *v46)) + (float)(a7[2] * v46[2]))
                         + v46[3]) > v44)
              {
                uint64_t v55 = physx::shdfnd::Foundation::mInstance;
                float32x4_t v56 = "Gu::ConvexMesh::checkHullPolygons: Some hull vertices seems to be too far from hull planes.";
                uint64_t v57 = 328;
                goto LABEL_57;
              }
            }
            ++v49;
          }
          while (v49 != v34);
        }
        ++v35;
      }
      while (v35 != v12);
      uint64_t v53 = 0;
      while (*((unsigned char *)v58 + v53))
      {
        if (++v53 == 8) {
          return 1;
        }
      }
      uint64_t v55 = physx::shdfnd::Foundation::mInstance;
      float32x4_t v56 = "Gu::ConvexMesh::checkHullPolygons: Hull seems to have opened volume or do (some) faces have reversed winding?";
      uint64_t v57 = 339;
LABEL_57:
      physx::shdfnd::Foundation::error(v55, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", v57, v56, v48, (uint64_t)a7, a8, v58[0]);
    }
  }
  return 0;
}

float physx::ConvexHullBuilder::computeGeomCenter(uint64_t a1, char a2, uint64_t a3, unsigned int a4, uint64_t a5, float result)
{
  if (a2 && a1)
  {
    float32x2_t v6 = 0;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
    if (a4)
    {
      uint64_t v7 = (unsigned int *)(a5 + 8);
      float v8 = 0.0;
      uint64_t v9 = a4;
      float32x2_t v10 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
      float v11 = 0.0;
      do
      {
        unsigned int v12 = *(v7 - 2);
        unsigned int v13 = *(v7 - 1);
        unsigned int v14 = *v7;
        v7 += 3;
        float v15 = (float32x2_t *)(a1 + 12 * v12);
        uint64_t v16 = (float32x2_t *)(a1 + 12 * v13);
        long long v17 = (float32x2_t *)(a1 + 12 * v14);
        float v18 = v15[1].f32[0];
        float v19 = v16[1].f32[0];
        float v20 = v17[1].f32[0];
        float v21 = v18 - v19;
        _S18 = v18 - v20;
        float v23 = (float)(v18 + v19) + v20;
        _D16 = vsub_f32(*v15, *v16);
        float32x2_t v25 = vsub_f32(*v15, *v17);
        __asm { FMLA            S19, S18, V16.S[1] }
        float v31 = vmlas_n_f32(-(float)(_D16.f32[0] * _S18), v21, v25.f32[0]);
        float v32 = vmlas_n_f32((float)-_D16.f32[1] * v25.f32[0], v25.f32[1], _D16.f32[0]);
        _D16.f32[0] = sqrtf((float)((float)(v31 * v31) + (float)(_S19 * _S19)) + (float)(v32 * v32)) * 0.5;
        float32x2_t v6 = vadd_f32(v6, vmul_n_f32(vmul_f32(vadd_f32(vadd_f32(*v15, *v16), *v17), v10), _D16.f32[0]));
        *(float32x2_t *)a3 = v6;
        float v8 = v8 + (float)((float)(v23 * 0.33333) * _D16.f32[0]);
        *(float *)(a3 + 8) = v8;
        float v11 = v11 + _D16.f32[0];
        --v9;
      }
      while (v9);
    }
    else
    {
      float v8 = 0.0;
      float v11 = 0.0;
    }
    float v33 = 1.0 / v11;
    *(float32x2_t *)a3 = vmul_n_f32(v6, v33);
    uint64_t result = v8 * v33;
    *(float *)(a3 + 8) = v8 * v33;
  }
  return result;
}

uint64_t physx::ConvexHullBuilder::save(uint64_t a1, void (***a2)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), int a3)
{
  uint64_t v6 = physx::Gu::WriteHeader(67, 76, 72, 76, 9u, a3, a2);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    unsigned int v8 = *(_WORD *)(v7 + 36) & 0x7FFF | (*(unsigned __int8 *)(a1 + 64) << 15);
    physx::writeDword(*(unsigned __int8 *)(v7 + 38), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeDword(v8, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeDword(*(unsigned __int8 *)(*(void *)(a1 + 56) + 39), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    uint64_t v9 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 39);
    if (*(unsigned char *)(*(void *)(a1 + 56) + 39))
    {
      unsigned int v10 = 0;
      float v11 = (unsigned __int8 *)(*(void *)(a1 + 8) + 18);
      do
      {
        int v12 = *v11;
        v11 += 20;
        v10 += v12;
        --v9;
      }
      while (v9);
    }
    else
    {
      unsigned int v10 = 0;
    }
    physx::writeDword(v10, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    physx::writeFloatBuffer(*(void *)a1, 3 * *(unsigned __int8 *)(*(void *)(a1 + 56) + 38), a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
    uint64_t v13 = *(void *)(a1 + 56);
    if (*(unsigned char *)(v13 + 39))
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = (int *)(*(void *)(a1 + 8) + v14);
        int v17 = *v16;
        int v24 = *v16;
        int v18 = v16[1];
        int v25 = v18;
        int v19 = v16[2];
        int v26 = v19;
        int v20 = v16[3];
        int v27 = v20;
        int v21 = v16[4];
        int v28 = v21;
        if (a3)
        {
          LOBYTE(v24) = HIBYTE(v17);
          HIBYTE(v24) = v17;
          BYTE1(v24) = BYTE2(v17);
          BYTE2(v24) = BYTE1(v17);
          LOBYTE(v25) = HIBYTE(v18);
          HIBYTE(v25) = v18;
          BYTE1(v25) = BYTE2(v18);
          BYTE2(v25) = BYTE1(v18);
          LOBYTE(v26) = HIBYTE(v19);
          HIBYTE(v26) = v19;
          BYTE1(v26) = BYTE2(v19);
          BYTE2(v26) = BYTE1(v19);
          LOBYTE(v27) = HIBYTE(v20);
          HIBYTE(v27) = v20;
          BYTE1(v27) = BYTE2(v20);
          BYTE2(v27) = BYTE1(v20);
          LOBYTE(v28) = BYTE1(v21);
          BYTE1(v28) = v21;
        }
        (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)&v24, 20);
        ++v15;
        uint64_t v13 = *(void *)(a1 + 56);
        v14 += 20;
      }
      while (v15 < *(unsigned __int8 *)(v13 + 39));
    }
    if (v10)
    {
      for (uint64_t i = 0;
            i != v10;
            (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)(*(void *)(a1 + 16) + i++), 1))
      {
        ;
      }
      uint64_t v13 = *(void *)(a1 + 56);
    }
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, *(unsigned int **)(a1 + 24), 2 * (*(_WORD *)(v13 + 36) & 0x7FFFu));
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, *(unsigned int **)(a1 + 32), 3 * *(unsigned __int8 *)(*(void *)(a1 + 56) + 38));
    if (*(unsigned char *)(a1 + 64)) {
      physx::writeWordBuffer(*(void *)(a1 + 48), 2 * (*(_WORD *)(*(void *)(a1 + 56) + 36) & 0x7FFF), a3, (uint64_t (***)(void, __int16 *, uint64_t))a2);
    }
  }
  return v6;
}

uint64_t physx::ConvexHullLib::cleanupVertices(physx *a1, uint64_t a2, float32x2_t *a3, uint64_t a4, unsigned int *a5, uint64_t a6, float32x2_t *a7, float32x2_t *a8)
{
  if (!a2) {
    return 0;
  }
  uint64_t v14 = a2;
  if ((*(_WORD *)(*((void *)a1 + 1) + 72) & 8) != 0)
  {
    double Quantizer = physx::createQuantizer(a1);
    uint64_t v16 = v18;
    int v52 = 0;
    uint64_t v19 = (**v18)(v18, v14, a3, a4, 1, *(unsigned __int16 *)(*((void *)a1 + 1) + 76), &v52, Quantizer);
    if (v19)
    {
      LODWORD(v14) = v52;
      a3 = (float32x2_t *)v19;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  float v20 = *(float *)(*((void *)a1 + 2) + 16);
  float v21 = v20 * 0.000001;
  float v22 = v20 * 0.01;
  *a5 = 0;
  __asm { FMOV            V10.2S, #1.0 }
  *a7 = _D10;
  a7[1].i32[0] = 1065353216;
  if (local::checkPointsAABBValidity(v14, (uint64_t)a3, a4, (float *)a8, (float *)a7, a5, a6, 0, v20 * 0.000001, v20 * 0.01))
  {
    if (v16) {
      ((void (*)(uint64_t (***)(void, void, float32x2_t *, void, uint64_t, void, _DWORD *, double)))(*v16)[3])(v16);
    }
    return 1;
  }
  float32x2_t v32 = vdiv_f32(_D10, *a7);
  float v33 = 1.0 / a7[1].f32[0];
  float32_t v34 = v33 * a8[1].f32[0];
  *a8 = vmul_f32(v32, *a8);
  a8[1].f32[0] = v34;
  unsigned int v35 = *a5;
  if (v14)
  {
    int v36 = 0;
    do
    {
      float32x2_t v37 = vmul_f32(v32, *a3);
      float v38 = v33 * a3[1].f32[0];
      if (v35)
      {
        uint64_t v39 = 0;
        unsigned int v40 = v35;
        float v41 = (float *)(a6 + 8);
        while (1)
        {
          float v42 = *(v41 - 2);
          if (vabds_f32(v37.f32[0], v42) < 0.0001)
          {
            float v43 = *(v41 - 1);
            if (vabds_f32(v37.f32[1], v43) < 0.0001 && vabds_f32(v38, *v41) < 0.0001) {
              break;
            }
          }
          ++v39;
          v41 += 3;
          if (v35 == v39) {
            goto LABEL_24;
          }
        }
        float v44 = a8->f32[1];
        float v45 = a8[1].f32[0];
        if ((float)((float)((float)((float)(v37.f32[1] - v44) * (float)(v37.f32[1] - v44))
                           + (float)((float)(v37.f32[0] - a8->f32[0]) * (float)(v37.f32[0] - a8->f32[0])))
                   + (float)((float)(v38 - v45) * (float)(v38 - v45))) > (float)((float)((float)((float)(v43 - v44)
                                                                                               * (float)(v43 - v44))
                                                                                       + (float)((float)(v42 - a8->f32[0])
                                                                                               * (float)(v42 - a8->f32[0])))
                                                                               + (float)((float)(*v41 - v45)
                                                                                       * (float)(*v41 - v45))))
        {
          *((float32x2_t *)v41 - 1) = v37;
          *float v41 = v38;
        }
      }
      else
      {
        LODWORD(v39) = 0;
      }
      if (v39 == v35)
      {
        unsigned int v40 = v35;
LABEL_24:
        BOOL v46 = (float32x2_t *)(a6 + 12 * v40);
        *BOOL v46 = v37;
        v46[1].f32[0] = v38;
        *a5 = ++v35;
      }
      a3 = (float32x2_t *)((char *)a3 + a4);
      ++v36;
    }
    while (v36 != v14);
  }
  if (v35 < 4)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullLib.cpp", 277, "ConvexHullLib::cleanupVertices: Less than four valid vertices were found. Provide at least four valid (e.g. each at a different position) vertices.", v28, v29, v30, v51);
    return 0;
  }
  uint64_t v47 = 0;
  do
  {
    uint64_t v48 = (float32x2_t *)(a6 + v47);
    float32_t v49 = *(float *)(a6 + v47 + 8) * a7[1].f32[0];
    *uint64_t v48 = vmul_f32(*(float32x2_t *)(a6 + v47), *a7);
    v48[1].f32[0] = v49;
    v47 += 12;
  }
  while (12 * v35 != v47);
  uint64_t v31 = 1;
  local::checkPointsAABBValidity(v35, a6, 0xCu, (float *)a8, (float *)a7, a5, a6, 1, v21, v22);
  if (v16) {
    ((void (*)(uint64_t (***)(void, void, float32x2_t *, void, uint64_t, void, _DWORD *, double)))(*v16)[3])(v16);
  }
  return v31;
}

uint64_t local::checkPointsAABBValidity(unsigned int a1, uint64_t a2, unsigned int a3, float *a4, float *a5, unsigned int *a6, uint64_t a7, int a8, float a9, float a10)
{
  if (a1)
  {
    unsigned int v10 = (float *)(a2 + 8);
    float v11 = 8.5071e37;
    float v12 = -8.5071e37;
    unsigned int v13 = a1;
    float v14 = -8.5071e37;
    float v15 = -8.5071e37;
    float v16 = 8.5071e37;
    float v17 = 8.5071e37;
    do
    {
      float v18 = *(v10 - 2);
      float v19 = *(v10 - 1);
      if (v17 >= v18) {
        float v17 = *(v10 - 2);
      }
      if (v16 >= v19) {
        float v16 = *(v10 - 1);
      }
      if (v11 >= *v10) {
        float v11 = *v10;
      }
      if (v15 <= v18) {
        float v15 = *(v10 - 2);
      }
      if (v14 <= v19) {
        float v14 = *(v10 - 1);
      }
      if (v12 <= *v10) {
        float v12 = *v10;
      }
      unsigned int v10 = (float *)((char *)v10 + a3);
      --v13;
    }
    while (v13);
  }
  else
  {
    float v15 = -8.5071e37;
    float v17 = 8.5071e37;
    float v16 = 8.5071e37;
    float v11 = 8.5071e37;
    float v14 = -8.5071e37;
    float v12 = -8.5071e37;
  }
  float v20 = v15 - v17;
  float v21 = v14 - v16;
  float v22 = v12 - v11;
  float v23 = v11 + v12;
  float v24 = (float)(v17 + v15) * 0.5;
  float v25 = (float)(v16 + v14) * 0.5;
  float v26 = v23 * 0.5;
  *a4 = v24;
  a4[1] = v25;
  a4[2] = v26;
  if (v20 < a9 || v21 < a9 || a1 < 3 || v22 < a9)
  {
    if (v20 >= 3.4028e38 || v20 <= a9) {
      float v31 = 3.4028e38;
    }
    else {
      float v31 = v20;
    }
    if (v21 < v31 && v21 > a9) {
      float v31 = v21;
    }
    if (v22 >= v31 || v22 <= a9) {
      float v34 = v31;
    }
    else {
      float v34 = v22;
    }
    float v35 = a10;
    float v36 = a10;
    if (v34 != 3.4028e38)
    {
      a10 = v20 * 0.5;
      float v36 = v34 * 0.05;
      if (v20 < a9) {
        a10 = v34 * 0.05;
      }
      float v35 = v21 * 0.5;
      if (v21 < a9) {
        float v35 = v34 * 0.05;
      }
      if (v22 >= a9) {
        float v36 = v22 * 0.5;
      }
    }
    float v37 = v24 - a10;
    unsigned int v38 = *a6;
    float v39 = v25 - v35;
    if (a8) {
      unsigned int v38 = 0;
    }
    unsigned int v40 = (float *)(a7 + 12 * v38);
    *unsigned int v40 = v37;
    v40[1] = v39;
    float v41 = v26 - v36;
    v40[2] = v26 - v36;
    float v42 = v24 + a10;
    float v43 = (float *)(a7 + 12 * (v38 + 1));
    *float v43 = v42;
    v43[1] = v39;
    float v44 = v26 + v36;
    v43[2] = v41;
    float v45 = (float *)(a7 + 12 * (v38 + 2));
    *float v45 = v42;
    v45[1] = v25 + v35;
    v45[2] = v41;
    BOOL v46 = (float *)(a7 + 12 * (v38 + 3));
    *BOOL v46 = v37;
    v46[1] = v25 + v35;
    v46[2] = v41;
    uint64_t v47 = (float *)(a7 + 12 * (v38 + 4));
    *uint64_t v47 = v37;
    v47[1] = v39;
    v47[2] = v44;
    uint64_t v48 = (float *)(a7 + 12 * (v38 + 5));
    *uint64_t v48 = v42;
    v48[1] = v39;
    v48[2] = v44;
    float32_t v49 = (float *)(a7 + 12 * (v38 + 6));
    *float32_t v49 = v42;
    v49[1] = v25 + v35;
    v49[2] = v44;
    *a6 = v38 + 8;
    int v50 = (float *)(a7 + 12 * (v38 + 7));
    *int v50 = v37;
    v50[1] = v25 + v35;
    uint64_t result = 1;
    v50[2] = v44;
  }
  else
  {
    uint64_t result = 0;
    *a5 = v20;
    a5[1] = v21;
    a5[2] = v22;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 4 * a2;
    unsigned int v8 = (_DWORD *)(*(void *)v5 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 16 * a2;
    unsigned int v8 = (_OWORD *)(*(void *)v5 + 16 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

double physx::computeVolumeIntegralsEberlySIMD(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9)
  {
    uint64_t v10 = 0;
    v11.i64[0] = *(void *)a3;
    v11.i64[1] = *(unsigned int *)(a3 + 8);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 56);
    float32x4_t v15 = 0uLL;
    float32x2_t v16 = 0;
    a9.i64[0] = 0;
    float32x4_t v17 = 0uLL;
    float32x4_t v18 = 0uLL;
    do
    {
      uint64_t v19 = v13 + 20 * v10;
      uint64_t v20 = *(unsigned __int8 *)(v19 + 18) - 2;
      if (*(unsigned char *)(v19 + 18) != 2)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(unsigned __int16 *)(v19 + 16);
        uint64_t v23 = v14 + v22;
        float32x4_t v27 = *(float32x4_t *)(v13 + 20 * v10);
        float32x4_t v24 = vsubq_f32(*(float32x4_t *)(v12 + 12 * *(unsigned __int8 *)(v14 + v22)), v11);
        int8x8_t v25 = (int8x8_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
        *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v24.f32, v25, 4uLL);
        v26.i64[1] = __PAIR64__(v25.u32[1], v24.u32[0]);
        v27.i32[3] = 0;
        float32x4_t v28 = vmulq_f32(v24, v24);
        float32x4_t v29 = vmulq_f32(v24, v28);
        uint64_t v30 = v14 + 1 + v22;
        do
        {
          float32x4_t v31 = vsubq_f32(*(float32x4_t *)(v12 + 12 * *(unsigned __int8 *)(v30 + v21)), v11);
          float32x4_t v32 = vsubq_f32(*(float32x4_t *)(v12 + 12 * *(unsigned __int8 *)(v23 + (v21 + 2))), v11);
          int8x8_t v33 = (int8x8_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
          *(int8x8_t *)v34.f32 = vext_s8(*(int8x8_t *)v31.f32, v33, 4uLL);
          float32x4_t v35 = vsubq_f32(v31, v24);
          int8x16_t v36 = (int8x16_t)vsubq_f32(v32, v24);
          int8x8_t v37 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), *(float32x2_t *)v36.i8);
          *(int8x8_t *)v35.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), *(float32x2_t *)v36.i8), *(float32x2_t *)v35.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 4uLL);
          v35.i64[1] = v37.u32[0];
          float32x4_t v38 = v35;
          v38.i32[3] = 0;
          float32x4_t v39 = vmulq_f32(v27, v38);
          float32x4_t v40 = vpaddq_f32(v39, v39);
          *(float32x2_t *)v40.f32 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
          int8x16_t v41 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgtq_f32(a9, v40)), 0);
          float32x4_t v42 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v32, (int8x16_t)v31);
          float32x4_t v43 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v31, (int8x16_t)v32);
          v31.i32[1] = v33.i32[1];
          v34.i64[1] = v31.i64[0];
          v31.i64[0] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
          *(int8x8_t *)v44.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v31.f32, 4uLL);
          v32.i32[1] = v31.i32[1];
          v44.i64[1] = v32.i64[0];
          float32x4_t v45 = (float32x4_t)vbslq_s8(v41, (int8x16_t)v35, (int8x16_t)vnegq_f32(v35));
          float32x4_t v46 = vaddq_f32(v24, v43);
          float32x4_t v47 = vaddq_f32(v42, v46);
          float32x4_t v48 = vmlaq_f32(v28, v46, v43);
          float32x4_t v49 = vmlaq_f32(v29, v48, v43);
          float32x4_t v50 = vmlaq_f32(v48, v47, v42);
          float32x2_t v16 = vmla_n_f32(v16, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.f32, 0), v45.f32[0]);
          float32x4_t v15 = vmlaq_f32(v15, v50, v45);
          float32x4_t v17 = vmlaq_f32(v17, vmlaq_f32(v49, v50, v42), v45);
          float32x4_t v18 = vmlaq_f32(v18, vmlaq_f32(vmlaq_f32(vmulq_f32(vmlaq_f32(v50, vaddq_f32(v24, v47), v24), v26), vmlaq_f32(v50, vaddq_f32(v43, v47), v43), v34), vmlaq_f32(v50, vaddq_f32(v42, v47), v42), v44), v45);
          ++v21;
        }
        while (v20 != v21);
      }
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    float32x2_t v16 = 0;
    float32x4_t v18 = 0uLL;
    float32x4_t v17 = 0uLL;
    float32x4_t v15 = 0uLL;
  }
  float32x2_t v51 = vmul_f32(v16, (float32x2_t)vdup_n_s32(0x3E2AAAABu));
  float32x2_t v52 = vrecpe_f32(v51);
  int v53 = 4;
  do
  {
    float32x2_t v52 = vmul_f32(v52, vrecps_f32(v51, v52));
    --v53;
  }
  while (v53);
  float32x4_t v54 = vmulq_f32(v17, (float32x4_t)vdupq_n_s32(0x3C888889u));
  int8x16_t v55 = (int8x16_t)vmulq_f32(v18, (float32x4_t)vdupq_n_s32(0x3C088889u));
  _Q0 = vmulq_n_f32(vmulq_f32(v15, (float32x4_t)vdupq_n_s32(0x3D2AAAABu)), v52.f32[0]);
  *(float32x4_t *)a2 = _Q0;
  double v57 = (float)(v54.f32[1] + v54.f32[2]);
  *(double *)(a2 + 16) = v51.f32[0];
  *(double *)(a2 + 24) = v57;
  double v58 = (float)(v54.f32[0] + v54.f32[2]);
  double v59 = vaddv_f32(*(float32x2_t *)v54.f32);
  double v60 = (float)-*(float *)&v55.i32[1];
  *(double *)(a2 + 80) = v60;
  *(double *)(a2 + 88) = v59;
  *(double *)(a2 + 64) = v60;
  _S1 = _Q0.i32[2];
  _S4 = _Q0.i32[1];
  __asm { FMLA            S16, S4, V0.S[1] }
  *(double *)(a2 + 96) = v57 - (float)(_S16 * v51.f32[0]);
  __asm { FMLA            S17, S1, V0.S[2] }
  float v69 = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[1], *(float32x2_t *)_Q0.f32, 1), _Q0.f32[0], _Q0.f32[0]);
  double v70 = v60 + vmuls_lane_f32(vmuls_lane_f32(v51.f32[0], *(float32x2_t *)_Q0.f32, 1), _Q0, 2);
  *(double *)(a2 + 152) = v70;
  *(double *)(a2 + 160) = v59 - (float)(v69 * v51.f32[0]);
  *(double *)(a2 + 128) = v58 - (float)(_S17 * v51.f32[0]);
  *(double *)(a2 + 136) = v70;
  float64x2_t v71 = vcvtq_f64_f32(vneg_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v55.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL))));
  *(float64_t *)(a2 + 48) = v71.f64[0];
  *(double *)(a2 + 56) = v58;
  *(float64x2_t *)(a2 + 32) = v71;
  *(float64_t *)(a2 + 72) = v71.f64[1];
  float64x2_t v72 = vaddq_f64(v71, vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q0.f32), vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)_Q0.f32, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL)), v51.f32[0]))));
  *(float64_t *)(a2 + 144) = v72.f64[1];
  *(float64_t *)(a2 + 120) = v72.f64[0];
  *(float64x2_t *)(a2 + 104) = v72;
  float v73 = *(float *)(a3 + 4);
  float v74 = *(float *)(a3 + 8);
  if (*(float *)a3 != 0.0 || v73 != 0.0 || v74 != 0.0)
  {
    float v75 = _Q0.f32[0] + *(float *)a3;
    float v76 = _Q0.f32[1] + v73;
    float v77 = _Q0.f32[2] + v74;
    *(double *)(a2 + 88) = v59 - (float)(v51.f32[0] * (float)(v69 - (float)((float)(v76 * v76) + (float)(v75 * v75))));
    float64_t v78 = v71.f64[0] + (float)(v51.f32[0] * (float)((float)(_Q0.f32[0] * _Q0.f32[1]) - (float)(v75 * v76)));
    *(double *)(a2 + 24) = v57 - (float)(v51.f32[0] * (float)(_S16 - (float)((float)(v77 * v77) + (float)(v76 * v76))));
    *(float64_t *)(a2 + 32) = v78;
    double v79 = v60 + (float)(v51.f32[0] * (float)((float)(_Q0.f32[1] * _Q0.f32[2]) - (float)(v76 * v77)));
    *(double *)(a2 + 56) = v58 - (float)(v51.f32[0] * (float)(_S17 - (float)((float)(v75 * v75) + (float)(v77 * v77))));
    *(double *)(a2 + 64) = v79;
    *(double *)_Q0.i64 = v71.f64[1]
                       + (float)(v51.f32[0] * (float)((float)(_Q0.f32[2] * _Q0.f32[0]) - (float)(v77 * v75)));
    *(void *)(a2 + 72) = _Q0.i64[0];
    *(double *)(a2 + 80) = v79;
    *(void *)(a2 + 40) = _Q0.i64[0];
    *(float64_t *)(a2 + 48) = v78;
    *(float *)a2 = v75;
    *(float *)(a2 + 4) = v76;
    *(float *)(a2 + 8) = v77;
  }
  return *(double *)_Q0.i64;
}

uint64_t physx::computeVolumeIntegralsEberly(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  double v109 = 0.0;
  long long v107 = 0u;
  long long v108 = 0u;
  float64x2_t v105 = 0u;
  long long v106 = 0u;
  uint64_t v3 = *(unsigned int *)(result + 40);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = *(void *)(result + 32);
    double v7 = 0.0;
    double v8 = 0.0;
    uint64_t v9 = *(void *)(result + 56);
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    float v102 = a3[1];
    float v103 = *a3;
    double v14 = 0.0;
    double v15 = 0.0;
    float v101 = a3[2];
    double v16 = 0.0;
    double v17 = 0.0;
    do
    {
      uint64_t v18 = v6 + 20 * v4;
      unsigned int v19 = *(unsigned __int8 *)(v18 + 18);
      if (v19 != 2)
      {
        uint64_t v20 = (unsigned __int8 *)(v9 + *(unsigned __int16 *)(v18 + 16));
        uint64_t v21 = (float *)(v6 + 20 * v4);
        uint64_t v22 = (float *)(v5 + 12 * *v20);
        float v23 = v22[1] - v102;
        float v24 = v22[2] - v101;
        float v98 = v21[1];
        float v99 = *v21;
        float v97 = v21[2];
        float v100 = *v22 - v103;
        double v25 = v100;
        double v26 = v23;
        double v27 = v24;
        double v28 = v25 * v25;
        double v29 = v26 * v26;
        double v30 = v27 * v27;
        for (unsigned int i = 2; i != v19; ++i)
        {
          float32x4_t v32 = (float *)(v5 + 12 * v20[(i - 1) % v19]);
          float v33 = *v32 - v103;
          float v34 = v32[1] - v102;
          float v35 = v32[2] - v101;
          uint64_t result = v5 + 12 * v20[i % v19];
          float v36 = *(float *)result - v103;
          float v37 = *(float *)(result + 4) - v102;
          float v38 = *(float *)(result + 8) - v101;
          float v39 = (float)((float)(v34 - v23) * (float)(v38 - v24)) - (float)((float)(v35 - v24) * (float)(v37 - v23));
          float v40 = (float)((float)(v35 - v24) * (float)(v36 - v100)) - (float)((float)(v33 - v100) * (float)(v38 - v24));
          float v41 = (float)((float)(v33 - v100) * (float)(v37 - v23)) - (float)((float)(v34 - v23) * (float)(v36 - v100));
          if ((float)((float)((float)(v98 * v40) + (float)(v39 * v99)) + (float)(v41 * v97)) >= 0.0)
          {
            float v42 = *(float *)result - v103;
            float v43 = *(float *)(result + 4) - v102;
            float v44 = *(float *)(result + 8) - v101;
            float v36 = v33;
            float v37 = v34;
            float v38 = v35;
          }
          else
          {
            float v39 = -v39;
            float v40 = -v40;
            float v41 = -v41;
            float v42 = v33;
            float v43 = v34;
            float v44 = v35;
          }
          double v45 = v36;
          double v46 = v42;
          double v47 = v39;
          double v48 = v25 + v45 + v46;
          double v49 = v28 + v45 * (v25 + v45);
          double v50 = v49 + v46 * v48;
          double v17 = v17 + v47 * v48;
          double v16 = v16 + v47 * v50;
          double v13 = v13 + v47 * (v49 * v45 + v25 * v28 + v46 * v50);
          double v51 = v37;
          double v52 = (v50 + v45 * (v48 + v45)) * v37 + v26 * (v50 + v25 * (v48 + v25));
          double v53 = v26 + v37;
          double v54 = v52 + v43 * (v50 + v46 * (v48 + v46));
          double v55 = v53 + v43;
          double v56 = v29 + v51 * v53;
          double v10 = v10 + v47 * v54;
          double v57 = v56 + v43 * v55;
          double v58 = v40;
          double v15 = v15 + v58 * v57;
          double v12 = v12 + v58 * (v56 * v51 + v26 * v29 + v43 * v57);
          double v59 = v44;
          double v60 = v27 + v38;
          double v61 = (v57 + v51 * (v55 + v51)) * v38 + v27 * (v57 + v26 * (v55 + v26)) + v59 * (v57 + v43 * (v55 + v43));
          double v62 = v60 + v59;
          double v63 = v30 + v38 * v60;
          double v8 = v8 + v58 * v61;
          double v64 = v63 + v59 * v62;
          double v14 = v14 + v41 * v64;
          double v11 = v11 + v41 * (v63 * v38 + v27 * v30 + v59 * v64);
          double v7 = v7
             + v41
             * ((v64 + v38 * (v62 + v38)) * v45 + v25 * (v64 + v27 * (v62 + v27)) + v46 * (v64 + v59 * (v62 + v59)));
        }
      }
      ++v4;
    }
    while (v4 != v3);
    v105.f64[0] = v16;
    v105.f64[1] = v15;
    *(double *)&long long v106 = v14;
    *((double *)&v106 + 1) = v13;
    *(double *)&long long v107 = v12;
    *((double *)&v107 + 1) = v11;
    *(double *)&long long v108 = v10;
    *((double *)&v108 + 1) = v8;
    double v109 = v7;
  }
  else
  {
    double v17 = 0.0;
  }
  uint64_t v65 = 0;
  double v104 = v17;
  do
  {
    *(float64x2_t *)((char *)&v104 + v65 * 16) = vmulq_f64((float64x2_t)xmmword_2344238E0[v65], *(float64x2_t *)((char *)&v104 + v65 * 16));
    ++v65;
  }
  while (v65 != 5);
  double v66 = v104;
  _D1 = vcvt_f32_f64(vdivq_f64(v105, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v104, 0)));
  *(float32x2_t *)a2 = _D1;
  double v68 = *((double *)&v106 + 1);
  float v69 = *(double *)&v106 / v66;
  *(float *)(a2 + 8) = v69;
  long long v70 = v107;
  double v71 = *(double *)&v107 + *((double *)&v107 + 1);
  *(double *)(a2 + 16) = v66;
  *(double *)(a2 + 24) = v71;
  double v72 = *((double *)&v70 + 1) + v68;
  double v73 = *(double *)&v70 + v68;
  long long v74 = v108;
  double v75 = -*(double *)&v108;
  *(double *)(a2 + 48) = -*(double *)&v108;
  *(double *)(a2 + 56) = *((double *)&v70 + 1) + v68;
  *(double *)(a2 + 80) = -*((double *)&v74 + 1);
  *(double *)(a2 + 88) = *(double *)&v70 + v68;
  double v76 = v109;
  double v77 = -v109;
  *(double *)(a2 + 64) = -*((double *)&v74 + 1);
  *(double *)(a2 + 72) = v77;
  *(double *)(a2 + 32) = v75;
  *(double *)(a2 + 40) = v77;
  _S7 = _D1.i32[1];
  __asm { FMLA            S18, S7, V1.S[1] }
  float v84 = vmul_f32(_D1, _D1).f32[0] + (float)(v69 * v69);
  float v85 = vmlas_n_f32(vmuls_lane_f32(_D1.f32[1], _D1, 1), _D1.f32[0], _D1.f32[0]);
  double v86 = -(*(double *)&v74 - v66 * vmuls_lane_f32(_D1.f32[0], _D1, 1));
  double v87 = -(*((double *)&v74 + 1) - v66 * vmuls_lane_f32(v69, _D1, 1));
  *(double *)(a2 + 96) = v71 - v66 * _S18;
  *(double *)(a2 + 104) = v86;
  *(double *)(a2 + 128) = v72 - v66 * v84;
  *(double *)(a2 + 136) = v87;
  double v88 = -(v76 - v66 * (float)(v69 * _D1.f32[0]));
  *(double *)(a2 + 152) = v87;
  *(double *)(a2 + 160) = v73 - v66 * v85;
  *(double *)(a2 + 144) = v88;
  *(double *)(a2 + 112) = v88;
  *(double *)(a2 + 120) = v86;
  float v89 = a3[1];
  float v90 = a3[2];
  if (*a3 != 0.0 || v89 != 0.0 || v90 != 0.0)
  {
    float v91 = *a3 + _D1.f32[0];
    float v92 = v89 + _D1.f32[1];
    float v93 = v90 + v69;
    *(double *)(a2 + 88) = v73 + -v66 * (float)(v85 - (float)((float)(v92 * v92) + (float)(v91 * v91)));
    double v94 = v75 + v66 * (float)((float)(_D1.f32[0] * _D1.f32[1]) - (float)(v91 * v92));
    *(double *)(a2 + 24) = v71 + -v66 * (float)(_S18 - (float)((float)(v93 * v93) + (float)(v92 * v92)));
    *(double *)(a2 + 32) = v94;
    double v95 = v66 * (float)((float)(_D1.f32[1] * v69) - (float)(v92 * v93)) - *((double *)&v74 + 1);
    *(double *)(a2 + 56) = v72 + -v66 * (float)(v84 - (float)((float)(v91 * v91) + (float)(v93 * v93)));
    *(double *)(a2 + 64) = v95;
    double v96 = v77 + v66 * (float)((float)(v69 * _D1.f32[0]) - (float)(v93 * v91));
    *(double *)(a2 + 72) = v96;
    *(double *)(a2 + 80) = v95;
    *(double *)(a2 + 40) = v96;
    *(double *)(a2 + 48) = v94;
    *(float *)a2 = v91;
    *(float *)(a2 + 4) = v92;
    *(float *)(a2 + 8) = v93;
  }
  return result;
}

void physx::ConvexMeshBuilder::~ConvexMeshBuilder(physx::ConvexMeshBuilder *this)
{
  uint64_t v2 = *((void *)this + 19);
  if (v2)
  {
    physx::BigConvexData::~BigConvexData(*((physx::BigConvexData **)this + 19));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  *((void *)this + 19) = 0;
  physx::ConvexPolygonsBuilder::~ConvexPolygonsBuilder(this);
}

uint64_t physx::ConvexMeshBuilder::build(float32x4_t *a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a2 + 16);
  if (v8 < 3 || v8 >= 0x10000 && (*(_WORD *)(a2 + 72) & 1) != 0) {
    goto LABEL_9;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_9;
  }
  if (*(_DWORD *)a2 < 0xCu || *(unsigned __int16 *)(a2 + 76) < 4u) {
    goto LABEL_9;
  }
  if (*(void *)(a2 + 32))
  {
    if (*(_DWORD *)(a2 + 40) < 4u || !*(void *)(a2 + 56)) {
      goto LABEL_9;
    }
    __int16 v14 = *(_WORD *)(a2 + 72);
    unsigned int v15 = (v14 & 1) != 0 ? 2 : 4;
    if (*(_DWORD *)(a2 + 48) < v15 || *(_DWORD *)(a2 + 24) <= 0x13u) {
      goto LABEL_9;
    }
  }
  else
  {
    __int16 v14 = *(_WORD *)(a2 + 72);
    if ((v14 & 2) == 0) {
      goto LABEL_9;
    }
  }
  int v16 = *(unsigned __int16 *)(a2 + 74);
  if ((v14 & 0x20) != 0)
  {
    if ((v16 - 4) < 0xFD) {
      goto LABEL_25;
    }
LABEL_9:
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 73, "Gu::ConvexMesh::loadFromDesc: desc.isValid() failed!", a6, a7, a8, v23.i8[0]);
    return 0;
  }
  if ((v16 - 8) >= 0xF9) {
    goto LABEL_9;
  }
LABEL_25:
  uint64_t result = physx::ConvexMeshBuilder::loadConvexHull((uint64_t *)a1, (unsigned int *)a2, a5);
  if (result)
  {
    unsigned int v17 = a1[7].u8[6];
    physx::Gu::computeBoundsAroundVertices((uint64_t)&v23, v17, a1->i64[0]);
    float32x4_t v18 = (float32x4_t)vextq_s8(v23, v23, 8uLL);
    float32x4_t v19 = (float32x4_t)vextq_s8(v23, (int8x16_t)v18, 0xCuLL);
    float32x4_t v20 = vsubq_f32((float32x4_t)v23, v19);
    *(float32x2_t *)&v19.i32[1] = v24;
    float32x4_t v21 = vaddq_f32((float32x4_t)v23, v19);
    v21.i32[3] = v20.i32[3];
    float32x2_t v22 = vsub_f32(v24, (float32x2_t)vext_s8(*(int8x8_t *)v23.i8, *(int8x8_t *)v18.f32, 4uLL));
    v18.i64[0] = 0x3F0000003F000000;
    v18.i64[1] = 0x3F0000003F000000;
    a1[5] = vmulq_f32(v21, v18);
    *(float32x2_t *)a1[6].f32 = vmul_f32(v22, (float32x2_t)0x3F0000003F000000);
    if (v17 > a3) {
      physx::ConvexMeshBuilder::computeGaussMaps((physx::ConvexMeshBuilder *)a1);
    }
    if ((a4 & 1) == 0) {
      physx::ConvexMeshBuilder::computeInternalObjects((physx::ConvexMeshBuilder *)a1);
    }
    return 1;
  }
  return result;
}

uint64_t physx::ConvexMeshBuilder::loadConvexHull(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v204 = *MEMORY[0x263EF8340];
  unsigned int v6 = a2[4];
  MEMORY[0x270FA5388](a1);
  unsigned int v8 = &v169[-v7];
  bzero(&v169[-v7], v9);
  if (v6)
  {
    uint64_t v11 = *a2;
    uint64_t v12 = *((void *)a2 + 1);
    double v13 = v8;
    unsigned int v14 = v6;
    do
    {
      *(void *)double v13 = *(void *)v12;
      *((_DWORD *)v13 + 2) = *(_DWORD *)(v12 + 8);
      v13 += 12;
      v12 += v11;
      --v14;
    }
    while (v14);
  }
  uint64_t v180 = a3;
  unsigned int v15 = (_DWORD *)*((void *)a2 + 7);
  if (v15)
  {
    uint64_t v16 = a2[16];
    MEMORY[0x270FA5388](v10);
    float32x4_t v18 = &v169[-((v17 + 15) & 0x7FFFFFFF0)];
    bzero(v18, v17);
    if (a2[18])
    {
      if (v16)
      {
        uint64_t v21 = a2[12];
        float32x2_t v22 = v18;
        do
        {
          *(_DWORD *)float32x2_t v22 = *(unsigned __int16 *)v15;
          v22 += 4;
          unsigned int v15 = (_DWORD *)((char *)v15 + v21);
        }
        while (v22 < &v18[4 * v16]);
      }
    }
    else if (v16)
    {
      uint64_t v19 = 0;
      uint64_t v20 = a2[12];
      do
      {
        *(_DWORD *)&v18[4 * v19] = *v15;
        unsigned int v15 = (_DWORD *)((char *)v15 + v20);
        ++v19;
      }
      while (v16 != v19);
    }
  }
  else
  {
    float32x4_t v18 = 0;
  }
  uint64_t v23 = *((void *)a2 + 4);
  uint64_t v24 = a2[10];
  if (v23)
  {
    MEMORY[0x270FA5388](v10);
    double v26 = &v169[-((v25 + 15) & 0x3FFFFFFFF0)];
    bzero(v26, v25);
    if (v24)
    {
      uint64_t v27 = a2[6];
      double v28 = v26;
      int v29 = v24;
      do
      {
        *(_OWORD *)double v28 = *(_OWORD *)v23;
        *((_DWORD *)v28 + 4) = *(_DWORD *)(v23 + 16);
        v28 += 20;
        v23 += v27;
        --v29;
      }
      while (v29);
      if (!v180 && v24 > 1)
      {
        int v30 = 0;
        uint64_t v31 = 1;
        uint64_t v32 = 36;
        do
        {
          if (*(unsigned __int16 *)&v26[v32] > *(unsigned __int16 *)&v26[20 * v30 + 16]) {
            int v30 = v31;
          }
          ++v31;
          v32 += 20;
        }
        while (v24 != v31);
        if (v30)
        {
          int v33 = *((_DWORD *)v26 + 4);
          long long v34 = *(_OWORD *)v26;
          float v35 = &v26[20 * v30];
          *(_OWORD *)double v26 = *(_OWORD *)v35;
          *((_DWORD *)v26 + 4) = *((_DWORD *)v35 + 4);
          *(_OWORD *)float v35 = v34;
          *((_DWORD *)v35 + 4) = v33;
        }
      }
    }
  }
  else
  {
    double v26 = 0;
  }
  int v177 = *((unsigned __int16 *)a2 + 36);
  uint64_t v36 = a2[16];
  a1[6] = 0;
  float v37 = a1 + 6;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1[7] + 38) = v6;
  float v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v6 + 12, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 119);
  *a1 = (uint64_t)v38;
  memcpy(v38, v8, 12 * *(unsigned __int8 *)(a1[7] + 38));
  *(unsigned char *)(a1[7] + 39) = 0;
  if (a1[2]) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  a1[2] = 0;
  if (a1[1]) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  a1[1] = 0;
  if (v24 >= 0x100)
  {
    uint64_t v42 = physx::shdfnd::Foundation::mInstance;
    float v43 = "ConvexHullBuilder::init: convex hull has more than 255 polygons!";
    uint64_t v44 = 129;
LABEL_33:
    physx::shdfnd::Foundation::error(v42, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", v44, v43, v39, (uint64_t)v40, v41, v169[0]);
LABEL_152:
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 312, "Gu::ConvexMesh::loadConvexHull: convex hull init failed!", v39, (uint64_t)v40, v41, v169[0]);
    return 0;
  }
  *(unsigned char *)(a1[7] + 39) = v24;
  if (v24)
  {
    a1[1] = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, (20 * v24), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 135);
    uint64_t v45 = physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v181, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 137);
    uint64_t v46 = 0;
    a1[2] = v45;
    uint64_t v47 = a1[1];
    do
    {
      double v48 = &v26[20 * v46];
      uint64_t v49 = v47 + 20 * v46;
      *(_WORD *)(v49 + 16) = v45 - *((_WORD *)a1 + 8);
      uint64_t v50 = *((unsigned __int16 *)v48 + 8);
      *(unsigned char *)(v49 + 18) = v50;
      if (v50)
      {
        double v51 = &v18[4 * *(unsigned __int16 *)&v26[20 * v46 + 18]];
        double v52 = (unsigned char *)v45;
        uint64_t v53 = v50;
        do
        {
          int v54 = *(_DWORD *)v51;
          v51 += 4;
          *v52++ = v54;
          --v53;
        }
        while (v53);
        uint64_t v47 = a1[1];
      }
      else
      {
        uint64_t v50 = 0;
      }
      *(_OWORD *)(v47 + 20 * v46) = *(_OWORD *)v48;
      v45 += v50;
      ++v46;
    }
    while (v46 != v24);
  }
  else
  {
    a1[1] = 0;
    a1[2] = physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v181, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 137);
  }
  uint64_t v55 = v180;
  if ((physx::ConvexHullBuilder::calculateVertexMapTable((physx::ConvexHullBuilder *)a1, v24, v180 == 0) & 1) == 0) {
    goto LABEL_152;
  }
  double v56 = a1 + 3;
  uint64_t v57 = (uint64_t)(a1 + 5);
  if (v55)
  {
    char v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v55 + 32))(v55, v36, a1[2], a1 + 3);
    uint64_t v57 = (uint64_t)(a1 + 5);
    double v56 = a1 + 3;
    if (v58)
    {
      *(_WORD *)(a1[7] + 36) = v36 >> 1;
      char v66 = v177;
      if (!v24) {
        goto LABEL_125;
      }
      goto LABEL_116;
    }
  }
  if (v36)
  {
    uint64_t v42 = physx::shdfnd::Foundation::mInstance;
    float v43 = "Cooking::cookConvexMesh: non-manifold mesh cannot be used, invalid mesh!";
    uint64_t v44 = 567;
    goto LABEL_33;
  }
  long long v174 = (uint64_t *)v57;
  uint64_t v67 = *(unsigned __int8 *)(a1[7] + 39);
  if (*v56)
  {
    double v68 = v56;
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    double v56 = v68;
  }
  *double v56 = 0;
  float v69 = v56;
  uint64_t v70 = physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v187, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 575);
  uint64_t v170 = v69;
  *float v69 = v70;
  uint64_t v176 = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate((uint64_t)v183, 4 * (8 * v36), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 577);
  uint64_t v180 = v176 + 4 * v36;
  uint64_t v179 = v180 + 4 * v36;
  uint64_t v178 = v179 + 4 * v36;
  uint64_t v173 = v178 + 4 * v36;
  uint64_t v172 = v173 + 4 * v36;
  uint64_t v71 = v172 + 4 * v36;
  double v72 = (int *)(v71 + 4 * v36);
  uint64_t v73 = physx::shdfnd::ReflectionAllocator<BOOL>::allocate((uint64_t)&v185, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 589);
  if (v67)
  {
    uint64_t v74 = 0;
    int v75 = 0;
    uint64_t v76 = v73;
    uint64_t v77 = a1[1];
    uint64_t v78 = a1[2];
    uint64_t v79 = v178;
    uint64_t v80 = v179;
    uint64_t v81 = v180;
    uint64_t v82 = v176;
    do
    {
      uint64_t v83 = v77 + 20 * v74;
      uint64_t v84 = *(unsigned __int8 *)(v83 + 18);
      if (*(unsigned char *)(v83 + 18))
      {
        uint64_t v85 = 0;
        uint64_t v86 = 0;
        uint64_t v87 = v78 + *(unsigned __int16 *)(v83 + 16);
        do
        {
          unsigned int v88 = *(unsigned __int8 *)(v87 + v86);
          if (v84 - 1 == v86) {
            uint64_t v89 = 0;
          }
          else {
            uint64_t v89 = v86 + 1;
          }
          unsigned int v90 = *(unsigned __int8 *)(v87 + v89);
          BOOL v91 = v88 > v90;
          if (v88 <= v90) {
            unsigned int v92 = v90;
          }
          else {
            unsigned int v92 = *(unsigned __int8 *)(v87 + v86);
          }
          if (v88 >= v90) {
            unsigned int v88 = v90;
          }
          *(_DWORD *)(v82 + 4 * v86) = v88;
          *(_DWORD *)(v81 + 4 * v86) = v92;
          *(_DWORD *)(v80 + 4 * v86) = v74;
          *(_DWORD *)(v79 + 4 * v86) = v86;
          *(unsigned char *)(v76 + v86) = v91;
          int v93 = v75 + v86++;
          v72[v93] = v93;
          v85 -= 4;
        }
        while (v84 != v86);
        v75 += v86;
        v76 += v86;
        v79 -= v85;
        v80 -= v85;
        v81 -= v85;
        v82 -= v85;
      }
      ++v74;
    }
    while (v74 != v67);
  }
  uint64_t v175 = v73;
  uint64_t v202 = 0;
  long long v201 = 0u;
  long long v200 = 0u;
  char v203 = 1;
  unsigned int v199 = 0x80000000;
  long long v171 = &unk_26E728438;
  float v198 = &unk_26E728438;
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v198);
  physx::Cm::RadixSortBuffered::Sort((uint64_t)&v198);
  uint64_t v94 = v200;
  if (*v37) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *float v37 = 0;
  *float v37 = physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v182 + 1, 2 * v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 635);
  if (*v174) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  a1[5] = 0;
  uint64_t v95 = physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v182, 2 * v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 639);
  a1[5] = v95;
  uint64_t v96 = a1[7];
  *(_WORD *)(v96 + 36) = 0;
  if (v36)
  {
    unint64_t v97 = 0;
    unsigned __int16 v98 = 0;
    int v99 = 0;
    float v100 = (_WORD *)*v37;
    char v101 = -1;
    int v102 = -1;
    int v103 = -1;
    char v66 = v177;
    uint64_t v105 = v175;
    uint64_t v104 = v176;
    long long v106 = v170;
    uint64_t v108 = v173;
    long long v107 = v174;
    uint64_t v109 = v172;
    while (1)
    {
      uint64_t v110 = *(unsigned int *)(v94 + 4 * v97);
      unsigned int v111 = *(_DWORD *)(v179 + 4 * v110);
      int v112 = *(_DWORD *)(v178 + 4 * v110);
      int v113 = *(_DWORD *)(v104 + 4 * v110);
      int v114 = *(_DWORD *)(v180 + 4 * v110);
      if (v113 == v103 && v114 == v102)
      {
        int v118 = v98;
        *(unsigned char *)(*v106 + 2 * v98 - 2) = v101;
        *(unsigned char *)(*v106 + 2 * v98 - 1) = v111;
        ++v99;
        uint64_t v95 = *v107;
      }
      else
      {
        if (v97 && v99 != 1)
        {
          uint64_t v128 = 675;
          goto LABEL_151;
        }
        int v99 = 0;
        if (*(unsigned char *)(v105 + v110)) {
          __int16 v116 = *(_DWORD *)(v104 + 4 * v110);
        }
        else {
          __int16 v116 = *(_DWORD *)(v180 + 4 * v110);
        }
        if (*(unsigned char *)(v105 + v110)) {
          __int16 v117 = *(_DWORD *)(v180 + 4 * v110);
        }
        else {
          __int16 v117 = *(_DWORD *)(v104 + 4 * v110);
        }
        *float v100 = v117;
        v100[1] = v116;
        v100 += 2;
        int v118 = ++v98;
        int v103 = v113;
        int v102 = v114;
        char v101 = v111;
      }
      *(_WORD *)(v95 + 2 * (v112 + *(unsigned __int16 *)(a1[1] + 20 * v111 + 16))) = v97 >> 1;
      *(_DWORD *)(v108 + 4 * v97) = v111;
      *(_DWORD *)(v109 + 4 * v97) = v112;
      *(_DWORD *)(v71 + 4 * v97++) = v118 - 1;
      if (v36 == v97)
      {
        uint64_t v96 = a1[7];
        goto LABEL_91;
      }
    }
  }
  unsigned __int16 v98 = 0;
  char v66 = v177;
  uint64_t v105 = v175;
  uint64_t v104 = v176;
LABEL_91:
  *(_WORD *)(v96 + 36) = v98;
  if ((v66 & 0x10) == 0)
  {
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v198);
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v198);
    if (v36)
    {
      uint64_t v119 = (unsigned int *)v200;
      uint64_t v120 = (_DWORD *)(v71 + 4 * v36);
      uint64_t v121 = v36;
      do
      {
        unsigned int v122 = *v119++;
        *v120++ = *(_DWORD *)(v71 + 4 * v122);
        --v121;
      }
      while (v121);
    }
    if ((*(_WORD *)(a1[7] + 36) & 0x7FFF) != 0)
    {
      uint64_t v123 = 8 * (*(_WORD *)(a1[7] + 36) & 0x7FFF);
      uint64_t v124 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        float32x4_t v125 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::EdgeDescData>::getName() [T = physx::Gu::EdgeDescData]";
      }
      else {
        float32x4_t v125 = "<allocation names disabled>";
      }
      int8x8_t v126 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v124 + 24) + 16))(v124 + 24, v123, v125, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 725);
      size_t v127 = 8 * (*(_WORD *)(a1[7] + 36) & 0x7FFF);
    }
    else
    {
      size_t v127 = 0;
      int8x8_t v126 = 0;
    }
    bzero(v126, v127);
    for (; v36; LODWORD(v36) = v36 - 1)
    {
      int v129 = *v72++;
      ++v126[4 * v129 + 1];
    }
    uint64_t v130 = *(_WORD *)(a1[7] + 36) & 0x7FFF;
    uint64_t v105 = v175;
    uint64_t v104 = v176;
    if ((*(_WORD *)(a1[7] + 36) & 0x7FFF) != 0)
    {
      int v131 = v126 + 1;
      while (1)
      {
        int v132 = *v131;
        v131 += 4;
        if (v132 != 2) {
          break;
        }
        if (!--v130) {
          goto LABEL_110;
        }
      }
      uint64_t v128 = 739;
LABEL_151:
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", v128, "Cooking::cookConvexMesh: non-manifold mesh cannot be used, invalid mesh!", v105, (uint64_t)v106, (uint64_t)v107, v169[0]);
      float v198 = v171;
      physx::Cm::RadixSortBuffered::reset((uint64_t)&v198);
      goto LABEL_152;
    }
    if (v126)
    {
LABEL_110:
      (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v126);
      uint64_t v105 = v175;
      uint64_t v104 = v176;
    }
  }
  if (v104)
  {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    uint64_t v105 = v175;
  }
  if (v105) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v105);
  }
  float v198 = v171;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v198);
  if (v24)
  {
LABEL_116:
    uint64_t v133 = 0;
    unsigned int v134 = *(unsigned __int8 *)(a1[7] + 38);
    uint64_t v135 = *a1;
    uint64_t v136 = a1[1];
    do
    {
      if (v134)
      {
        unsigned __int8 v137 = 0;
        float32x4_t v138 = (float *)(v136 + 20 * v133);
        float v139 = *v138;
        float v140 = v138[1];
        float v141 = v138[2];
        char v142 = -1;
        float v143 = 3.4028e38;
        uint64_t v144 = v135;
        do
        {
          v65.i32[0] = *(_DWORD *)(v144 + 8);
          *(float *)&double v64 = (float)((float)(v140 * *(float *)(v144 + 4)) + (float)(*(float *)v144 * v139))
                         + (float)(v65.f32[0] * v141);
          if (*(float *)&v64 < v143)
          {
            float v143 = (float)((float)(v140 * *(float *)(v144 + 4)) + (float)(*(float *)v144 * v139))
                 + (float)(v65.f32[0] * v141);
            char v142 = v137;
          }
          ++v137;
          v144 += 12;
        }
        while (v134 > v137);
      }
      else
      {
        char v142 = -1;
      }
      *(unsigned char *)(v136 + 20 * v133++ + 19) = v142;
    }
    while (v133 != v24);
  }
LABEL_125:
  if ((v66 & 0x10) == 0
    && (physx::ConvexHullBuilder::checkHullPolygons((float **)a1, v59, v60, v61, v57, v39, v40, v41) & 1) == 0)
  {
    goto LABEL_152;
  }
  if (*((float *)a1 + 40) <= 0.0)
  {
    __int16 v145 = *((_WORD *)a2 + 36);
    int v193 = 0;
    int v195 = 0;
    int v196 = 16711680;
    __int16 v197 = 255;
    uint64_t v146 = *((unsigned __int8 *)a1 + 118);
    int v187 = 12;
    uint64_t v147 = *a1;
    uint64_t v148 = a1[1];
    uint64_t v188 = *a1;
    uint64_t v191 = v148;
    int v189 = v146;
    int v190 = 20;
    int v192 = *(unsigned __int8 *)(a1[7] + 39);
    uint64_t v194 = a1[2];
    if (v146)
    {
      int v149 = (float *)(v147 + 8);
      float32x2_t v150 = 0;
      double v151 = 0.0;
      uint64_t v152 = v146;
      do
      {
        double v62 = *((double *)v149 - 1);
        float32x2_t v150 = vadd_f32(v150, *(float32x2_t *)&v62);
        float v153 = *v149;
        v149 += 3;
        *(float *)&double v151 = *(float *)&v151 + v153;
        --v152;
      }
      while (v152);
    }
    else
    {
      float32x2_t v150 = 0;
      double v151 = 0.0;
    }
    LODWORD(v63) = 1.0;
    *(float *)&double v62 = 1.0 / (float)v146;
    double v154 = COERCE_DOUBLE(vmul_n_f32(v150, *(float *)&v62));
    double v185 = v154;
    *(float *)&double v151 = *(float *)&v62 * *(float *)&v151;
    int v186 = LODWORD(v151);
    if ((v145 & 0x40) != 0) {
      physx::computeVolumeIntegralsEberlySIMD((uint64_t)&v187, (uint64_t)&v198, (uint64_t)&v185, v151, v154, v62, v63, v64, v65);
    }
    else {
      physx::computeVolumeIntegralsEberly((uint64_t)&v187, (uint64_t)&v198, (float *)&v185);
    }
    uint64_t v158 = 0;
    uint64_t v159 = 24;
    uint64_t v160 = (uint64_t)a1 + 164;
    do
    {
      uint64_t v161 = 0;
      uint64_t v162 = v159;
      do
      {
        float v163 = *(double *)((char *)&v198 + v162);
        *(float *)(v160 + v161) = v163;
        v161 += 4;
        v162 += 24;
      }
      while (v161 != 12);
      ++v158;
      v160 += 12;
      v159 += 8;
    }
    while (v158 != 3);
    char v164 = v198;
    a1[13] = (uint64_t)v198;
    unsigned int v165 = v199;
    *((_DWORD *)a1 + 28) = v199;
    if ((~*((_DWORD *)a1 + 41) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 42) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 43) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 44) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 45) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 46) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 47) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 48) & 0x7F800000) != 0
      && (~*((_DWORD *)a1 + 49) & 0x7F800000) != 0
      && (v164 & 0x7F800000) != 0x7F800000
      && (HIDWORD(v164) & 0x7F800000) != 0x7F800000
      && (v165 & 0x7F800000) != 0x7F800000
      && (float v167 = *(double *)&v200, (~LODWORD(v167) & 0x7F800000) != 0))
    {
      if (*(double *)&v200 < 0.0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 233, "Gu::ConvexMesh: Mesh has a negative volume! Is it open or do (some) faces have reversed winding? (Taking absolute value.)", v155, v156, v157, v169[0]);
        physx::PxMat33::operator-(v183, (float32x4_t *)((char *)a1 + 164));
        float32x4_t v168 = v183[1];
        *(float32x4_t *)((char *)a1 + 164) = v183[0];
        *(float32x4_t *)((char *)a1 + 180) = v168;
        *((_DWORD *)a1 + 49) = v184;
        float v167 = -v167;
      }
      *((float *)a1 + 40) = v167;
    }
    else
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 242, "Gu::ConvexMesh: Error computing mesh mass properties!\n", v155, v156, v157, v169[0]);
    }
  }
  return 1;
}

uint64_t physx::ConvexMeshBuilder::computeGaussMaps(physx::ConvexMeshBuilder *this)
{
  uint64_t v2 = *((void *)this + 19);
  if (v2)
  {
    physx::BigConvexData::~BigConvexData(*((physx::BigConvexData **)this + 19));
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  uint64_t v3 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::BigConvexData>::getName() [T = physx::BigConvexData]";
  }
  else {
    uint64_t v4 = "<allocation names disabled>";
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v3 + 24) + 16))(v3 + 24, 48, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 388);
  *(_DWORD *)uint64_t v5 = 0;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(void *)(v5 + 40) = 0;
  *((void *)this + 19) = v5;
  uint64_t v6 = *(void *)this;
  v8[1] = v5;
  v8[2] = v6;
  v8[0] = (char *)this + 80;
  physx::BigConvexDataBuilder::computeValencies((physx::BigConvexDataBuilder *)v8, this);
  return physx::BigConvexDataBuilder::precompute((physx::BigConvexDataBuilder *)v8, 0x10u);
}

float physx::ConvexMeshBuilder::computeInternalObjects(physx::ConvexMeshBuilder *this)
{
  uint64_t v1 = (float *)*((void *)this + 1);
  *((_DWORD *)this + 34) = 2139095039;
  uint64_t v2 = *((unsigned __int8 *)this + 119);
  if (*((unsigned char *)this + 119))
  {
    float v3 = *((float *)this + 26);
    float v4 = *((float *)this + 27);
    float v5 = *((float *)this + 28);
    uint64_t v6 = v1 + 2;
    float v7 = 3.4028e38;
    uint64_t v8 = *((unsigned __int8 *)this + 119);
    do
    {
      float v9 = fabsf(v6[1] + (float)((float)((float)(v4 * *(v6 - 1)) + (float)(v3 * *(v6 - 2))) + (float)(v5 * *v6)));
      if (v9 < v7)
      {
        *((float *)this + 34) = v9;
        float v7 = v9;
      }
      v6 += 5;
      --v8;
    }
    while (v8);
  }
  else
  {
    float v7 = 3.4028e38;
  }
  float v10 = (float)(*((float *)this + 22) + *((float *)this + 25)) - (float)(*((float *)this + 22) - *((float *)this + 25));
  float32x2_t v59 = vsub_f32(vadd_f32(*(float32x2_t *)((char *)this + 80), *(float32x2_t *)((char *)this + 92)), vsub_f32(*(float32x2_t *)((char *)this + 80), *(float32x2_t *)((char *)this + 92)));
  float v60 = v10;
  uint64_t v11 = *(void *)&vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v59, 1), v59) & 1;
  if (v10 <= *(float *)((unint64_t)&v59 & 0xFFFFFFFFFFFFFFFBLL | (4 * v11))) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 2;
  }
  float v13 = v59.f32[((_BYTE)v12 + (v12 >> 1) + 1) & 3];
  float v14 = v59.f32[((_BYTE)v12
               + (v12 >> 1)
               + 1
               + (((v12 + (v12 >> 1) + 1) & 3) >> 1)
               + 1) & 3];
  int32x2_t v15 = vdup_n_s32(0x7F7FFFFFu);
  if (v13 >= v14) {
    uint64_t v16 = ((_BYTE)v12 + (v12 >> 1) + 1) & 3;
  }
  else {
    uint64_t v16 = ((_BYTE)v12
  }
         + (v12 >> 1)
         + 1
         + (((v12 + (v12 >> 1) + 1) & 3) >> 1)
         + 1) & 3;
  if (v13 >= v14) {
    uint64_t v17 = ((_BYTE)v12
  }
         + (v12 >> 1)
         + 1
         + (((v12 + (v12 >> 1) + 1) & 3) >> 1)
         + 1) & 3;
  else {
    uint64_t v17 = ((_BYTE)v12 + (v12 >> 1) + 1) & 3;
  }
  *(int32x2_t *)((char *)this + 140) = v15;
  *((_DWORD *)this + 37) = 2139095039;
  if (v2)
  {
    float v18 = *((float *)this + 26);
    float v19 = *((float *)this + 27);
    float v20 = *((float *)this + 28);
    uint64_t v21 = (float *)((char *)this + 4 * v12 + 140);
    float v22 = v7 / 1.7321;
    uint64_t v23 = v1;
    uint64_t v24 = v2;
    do
    {
      float v25 = v23[v12];
      if (v25 <= -0.0000001 || v25 >= 0.0000001)
      {
        float v26 = (float)-v23[3] - (float)((float)((float)(v19 * v23[1]) + (float)(*v23 * v18)) + (float)(v23[2] * v20));
        float v27 = 1.0 / v25;
        float v28 = v22 * v23[v16];
        float v29 = v22 * v23[v17];
        float v30 = fabsf(v27 * (float)((float)(v26 - v28) - v29));
        if (v30 <= v22) {
          float v30 = v22;
        }
        if (v30 >= *v21) {
          float v31 = *v21;
        }
        else {
          float v31 = v30;
        }
        float v32 = fabsf(v27 * (float)(v29 + (float)(v26 - v28)));
        if (v32 <= v22) {
          float v32 = v22;
        }
        if (v32 >= v31) {
          float v33 = v31;
        }
        else {
          float v33 = v32;
        }
        float v34 = v28 + v26;
        float v35 = fabsf(v27 * (float)(v29 + v34));
        if (v35 <= v22) {
          float v36 = v22;
        }
        else {
          float v36 = v35;
        }
        if (v36 >= v33) {
          float v37 = v33;
        }
        else {
          float v37 = v36;
        }
        float v38 = fabsf(v27 * (float)(v34 - v29));
        if (v38 <= v22) {
          float v38 = v22;
        }
        if (v30 < *v21 || v32 < v31 || v36 < v33 || v38 < v37)
        {
          if (v38 < v37) {
            float v37 = v38;
          }
          *uint64_t v21 = v37;
        }
      }
      v23 += 5;
      --v24;
    }
    while (v24);
    uint64_t v42 = (float *)((char *)this + 4 * v16 + 140);
    do
    {
      float v43 = v1[v16];
      float v44 = v1[v17];
      float v45 = v43 + v44;
      float v46 = (float)-v1[3] - (float)((float)((float)(v19 * v1[1]) + (float)(*v1 * v18)) + (float)(v1[2] * v20));
      float v47 = *v21 * v1[v12];
      if ((float)(v43 + v44) <= -0.0000001 || v45 >= 0.0000001)
      {
        float v48 = fabsf((float)(v46 - v47) / v45);
        if (v48 <= v22) {
          float v48 = v22;
        }
        float v49 = *v42;
        float v50 = fabsf((float)(v46 + v47) / v45);
        if (v50 <= v22) {
          float v50 = v22;
        }
        if (v48 < v49)
        {
          BOOL v51 = 1;
        }
        else
        {
          float v48 = *v42;
          BOOL v51 = v50 < v49;
        }
        if (v51)
        {
          if (v50 >= v48) {
            float v50 = v48;
          }
          *uint64_t v42 = v50;
        }
      }
      float v52 = v43 - v44;
      if (v52 <= -0.0000001 || v52 >= 0.0000001)
      {
        float v53 = fabsf((float)(v46 - v47) / v52);
        if (v53 <= v22) {
          float v53 = v22;
        }
        float v54 = *v42;
        float v55 = fabsf((float)(v46 + v47) / v52);
        if (v55 <= v22) {
          float v55 = v22;
        }
        if (v53 >= v54) {
          float v56 = *v42;
        }
        else {
          float v56 = v53;
        }
        if (v53 < v54 || v55 < v56)
        {
          if (v55 >= v56) {
            float v55 = v56;
          }
          *uint64_t v42 = v55;
        }
      }
      v1 += 5;
      --v2;
    }
    while (v2);
  }
  float result = *((float *)this + v16 + 35);
  *((float *)this + v17 + 35) = result;
  return result;
}

uint64_t physx::ConvexMeshBuilder::save(uint64_t a1, void (***a2)(uint64_t (***)(void, unsigned int *, uint64_t), unsigned int *, uint64_t), int a3)
{
  uint64_t result = physx::writeHeader(67, 86, 88, 77, 0xDu, a3, a2);
  if (result)
  {
    LODWORD(v12[0]) = 0;
    (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)v12, 4);
    int v7 = physx::ConvexHullBuilder::save(a1, a2, a3);
    uint64_t result = 0;
    if (v7)
    {
      LODWORD(v12[0]) = 0;
      (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)v12, 4);
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 80) - *(float *)(a1 + 92));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 84) - *(float *)(a1 + 96));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 88) - *(float *)(a1 + 100));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 80) + *(float *)(a1 + 92));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 84) + *(float *)(a1 + 96));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 88) + *(float *)(a1 + 100));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 160));
      physx::writeFloatBuffer(a1 + 164, 9, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
      physx::writeFloatBuffer(a1 + 104, 3, a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2);
      if (*(void *)(a1 + 152))
      {
        if (a3) {
          unsigned int v9 = -1;
        }
        else {
          unsigned int v9 = 0;
        }
        *(int8x8_t *)v8.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v9), (int8x8_t)8388671, (int8x8_t)0x3F008000000000);
        LODWORD(v12[0]) = vmovn_s16(v8).u32[0];
        (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)v12, 4);
        uint64_t v10 = *(void *)a1;
        v12[1] = *(void *)(a1 + 152);
        v12[2] = v10;
        v12[0] = a1 + 80;
        physx::BigConvexDataBuilder::save((uint64_t)v12, a2, a3);
      }
      else
      {
        if (a3) {
          unsigned int v11 = -1;
        }
        else {
          unsigned int v11 = 0;
        }
        *(int8x8_t *)v8.i8 = vbsl_s8((int8x8_t)vdup_n_s16(v11), (int8x8_t)8388799, (int8x8_t)0xBF008000000000);
        LODWORD(v12[0]) = vmovn_s16(v8).u32[0];
        (**a2)((uint64_t (***)(void, unsigned int *, uint64_t))a2, (unsigned int *)v12, 4);
      }
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 136));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 140));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 144));
      physx::writeFloat(a3, (uint64_t (***)(void, unsigned int *, uint64_t))a2, *(float *)(a1 + 148));
      return 1;
    }
  }
  return result;
}

uint64_t physx::ConvexMeshBuilder::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(unsigned __int8 *)(v4 + 38);
  *(unsigned char *)(a2 + 38) = v5;
  int v6 = *(_WORD *)(v4 + 36) & 0x7FFF;
  __int16 v7 = *(_WORD *)(v4 + 36) & 0x7FFF | (*(unsigned __int8 *)(a1 + 64) << 15);
  int v8 = v7;
  *(_WORD *)(a2 + 36) = v7;
  unsigned int v9 = *(unsigned __int8 *)(v4 + 39);
  *(unsigned char *)(a2 + 39) = v9;
  uint64_t v10 = *(unsigned __int8 *)(v4 + 39);
  if (*(unsigned char *)(v4 + 39))
  {
    unsigned int v11 = 0;
    uint64_t v12 = (unsigned __int8 *)(*(void *)(a1 + 8) + 18);
    do
    {
      int v13 = *v12;
      v12 += 20;
      v11 += v13;
      --v10;
    }
    while (v10);
  }
  else
  {
    unsigned int v11 = 0;
  }
  int v14 = 4 * v6;
  if (v8 >= 0) {
    int v14 = 0;
  }
  int v15 = 15 * v5 + 2 * v6 + 20 * v9 + v14 + v11 + 3;
  if ((v15 & 0xFFFFFFFC) != 0)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v15 & 0xFFFFFFFC, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullBuilder.cpp", 449);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 39);
    int v5 = *(unsigned __int8 *)(a2 + 38);
    LOWORD(v8) = *(_WORD *)(a2 + 36);
    uint64_t v4 = *(void *)(a1 + 56);
  }
  else
  {
    uint64_t v16 = 0;
  }
  *(void *)(a2 + 40) = v16;
  uint64_t v17 = (char *)(v16 + 20 * v9);
  float v18 = &v17[12 * v5];
  int v19 = (__int16)v8;
  uint64_t v20 = v8 & 0x7FFF;
  uint64_t v21 = &v18[2 * v20];
  float v22 = &v21[3 * v5];
  uint64_t v23 = 4 * v20;
  if (v19 >= 0) {
    uint64_t v23 = 0;
  }
  uint64_t v24 = &v22[v23];
  memcpy(v17, *(const void **)a1, 12 * *(unsigned __int8 *)(v4 + 38));
  memcpy(*(void **)(a2 + 40), *(const void **)(a1 + 8), 20 * *(unsigned __int8 *)(a2 + 39));
  memcpy(v24, *(const void **)(a1 + 16), v11);
  memcpy(v18, *(const void **)(a1 + 24), 2 * (*(_WORD *)(*(void *)(a1 + 56) + 36) & 0x7FFF));
  if (*(unsigned char *)(a1 + 64)) {
    memcpy(v22, *(const void **)(a1 + 48), 4 * (*(_WORD *)(*(void *)(a1 + 56) + 36) & 0x7FFF));
  }
  memcpy(v21, *(const void **)(a1 + 32), 3 * *(unsigned __int8 *)(*(void *)(a1 + 56) + 38));
  *(_DWORD *)(a2 + 72) = v11;
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 160);
  *(void *)(a2 + 92) = *(void *)(a1 + 176);
  *(void *)(a2 + 100) = *(void *)(a1 + 184);
  *(void *)(a2 + 108) = *(void *)(a1 + 192);
  *(void *)a2 = *(void *)(a1 + 80);
  *(void *)(a2 + 8) = *(void *)(a1 + 88);
  *(void *)(a2 + 16) = *(void *)(a1 + 96);
  *(void *)(a2 + 24) = *(void *)(a1 + 104);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 112);
  uint64_t v25 = *(void *)(a1 + 152);
  if (v25) {
    *(void *)(a1 + 152) = 0;
  }
  *(void *)(a2 + 48) = v25;
  *(void *)(a2 + 120) = v25;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 148);
  return 1;
}

float32_t physx::PxMat33::operator-(float32x4_t *a1, float32x4_t *a2)
{
  float32_t result = -a2[2].f32[0];
  float32x4_t v3 = vnegq_f32(a2[1]);
  *a1 = vnegq_f32(*a2);
  a1[1] = v3;
  a1[2].f32[0] = result;
  return result;
}

uint64_t physx::ConvexMeshBuilder::computeHullPolygons(uint64_t a1, _DWORD *a2, const void *a3, _DWORD *a4, uint64_t a5, uint64_t a6, _DWORD *a7, void *a8, unsigned int *a9, uint64_t *a10, _DWORD *a11, uint64_t *a12)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 68) = *a4;
  float v18 = (unsigned int *)(a1 + 68);
  unsigned int v19 = *a2;
  *(unsigned char *)(*(void *)(a1 + 56) + 38) = *a2;
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v19 + 12, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 996);
  *(void *)a1 = v20;
  memcpy(v20, a3, 12 * *(unsigned __int8 *)(*(void *)(a1 + 56) + 38));
  uint64_t v21 = (unsigned int *)physx::shdfnd::ReflectionAllocator<physx::HullTriangleData>::allocate(12 * *v18, 999);
  uint64_t v22 = (uint64_t)v21;
  *(void *)(a1 + 72) = v21;
  float v246 = a8;
  float v247 = a7;
  if (*v18)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = &v21[v23];
      *uint64_t v25 = *(_DWORD *)(a5 + 4 * v23);
      v25[1] = *(_DWORD *)(a5 + 4 * (v23 + 1));
      v25[2] = *(_DWORD *)(a5 + 4 * (v23 + 2));
      ++v24;
      unint64_t v26 = *v18;
      v23 += 3;
    }
    while (v24 < v26);
  }
  else
  {
    LODWORD(v26) = 0;
  }
  LOBYTE(v27) = *(unsigned char *)(*(void *)(a1 + 56) + 38);
  float v28 = *(void **)a1;
  physx::MeshCleaner::MeshCleaner((uint64_t)&v248, v27, *(float **)a1, v26, v21, 0.0);
  uint64_t v29 = HIDWORD(v248);
  if (HIDWORD(v248))
  {
    int v27 = (int)v248;
    *float v18 = HIDWORD(v248);
    memcpy(v28, __src, (12 * v27));
    uint64_t v30 = 0;
    uint64_t v31 = v250;
    float v32 = (_DWORD *)(v22 + 4);
    do
    {
      *(v32 - 1) = *(_DWORD *)(v31 + 4 * v30);
      *float v32 = *(_DWORD *)(v31 + 4 * (v30 + 1));
      v32[1] = *(_DWORD *)(v31 + 4 * (v30 + 2));
      v30 += 3;
      v32 += 3;
    }
    while (3 * v29 != v30);
    TestDuplicateTriangles(v18, v22, 1);
    TestUnifiedNormals(v27, (uint64_t)v28, *v18, v22, 1);
    TestUnifiedNormals(v27, (uint64_t)v28, *v18, v22, 1);
    TestDuplicateTriangles(v18, v22, 1);
  }
  physx::MeshCleaner::~MeshCleaner((physx::MeshCleaner *)&v248);
  *(unsigned char *)(*(void *)(a1 + 56) + 38) = v27;
  float v33 = *(float **)a1;
  LODWORD(v248) = *(_DWORD *)(a1 + 68);
  if (!TestDuplicateTriangles((unsigned int *)&v248, v22, 0)
    || (TestUnifiedNormals(v27, (uint64_t)v33, v248, v22, 0) & 1) == 0)
  {
    goto LABEL_171;
  }
  *(unsigned char *)(*(void *)(a1 + 56) + 39) = 0;
  if (*(void *)(a1 + 16)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = 0;
  if (*(void *)(a1 + 32)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 32) = 0;
  if (*(void *)(a1 + 8)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 8) = 0;
  float v248 = 0;
  __src = 0;
  float v257 = 0;
  uint64_t v258 = 0;
  uint64_t v255 = 0;
  uint64_t v256 = 0;
  unsigned int v254 = 0;
  int v41 = 0;
  if (!extractHullPolygons(&v254, (uint64_t)&v248, (uint64_t *)a1, (uint64_t)&v257, (uint64_t)&v255)) {
    goto LABEL_153;
  }
  unsigned int v42 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 38);
  if (v256)
  {
    char v43 = v42 - v256;
    if ((_BYTE)v42 == (_BYTE)v256)
    {
      float v44 = 0;
    }
    else
    {
      float v44 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v42 - v256), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1057);
      unsigned int v42 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 38);
    }
    uint64_t v46 = physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v253, v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1058);
    if (*(unsigned char *)(*(void *)(a1 + 56) + 38))
    {
      unint64_t v47 = 0;
      int v48 = 0;
      do
      {
        if (v256)
        {
          uint64_t v49 = 0;
          while (*(_DWORD *)(v255 + 4 * v49) != v47)
          {
            if (v256 == ++v49) {
              goto LABEL_33;
            }
          }
        }
        else
        {
          LODWORD(v49) = 0;
        }
        if (v49 == v256)
        {
LABEL_33:
          uint64_t v50 = *(void *)a1 + 12 * v47;
          BOOL v51 = &v44[3 * v48];
          *(void *)BOOL v51 = *(void *)v50;
          v51[2] = *(float *)(v50 + 8);
          char v52 = v48++;
        }
        else
        {
          char v52 = -1;
        }
        *(unsigned char *)(v46 + v47++) = v52;
      }
      while (v47 < *(unsigned __int8 *)(*(void *)(a1 + 56) + 38));
    }
    unsigned int v45 = v254;
    if (v254)
    {
      int v53 = 0;
      float v54 = v248;
      do
      {
        unsigned int v57 = *v54;
        float v55 = v54 + 1;
        uint64_t v56 = v57;
        char v58 = v55;
        uint64_t v59 = v57;
        if (v57)
        {
          do
          {
            *char v58 = *(unsigned __int8 *)(v46 + *v58);
            ++v58;
            --v59;
          }
          while (v59);
        }
        else
        {
          uint64_t v56 = 0;
        }
        float v54 = &v55[v56];
        ++v53;
      }
      while (v53 != v45);
    }
    if (v46) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v46);
    }
    LOBYTE(v42) = v43;
  }
  else
  {
    float v44 = *(float **)a1;
    unsigned int v45 = v254;
  }
  if (v45 >= 0x100)
  {
    uint64_t v60 = physx::shdfnd::Foundation::mInstance;
    uint64_t v61 = "ConvexHullBuilder: convex hull has more than 255 polygons!";
    uint64_t v62 = 1096;
LABEL_48:
    physx::shdfnd::Foundation::error(v60, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", v62, v61, v34, (uint64_t)v35, v36, v245);
    goto LABEL_49;
  }
  unsigned __int8 v245 = v42;
  *(unsigned char *)(*(void *)(a1 + 56) + 39) = v45;
  if (v45)
  {
    double v63 = (void *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 20 * v45, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1102);
    unsigned int v64 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 39);
  }
  else
  {
    unsigned int v64 = 0;
    double v63 = 0;
  }
  *(void *)(a1 + 8) = v63;
  bzero(v63, 20 * v64);
  physx::ConvexHullBuilder::computeGeomCenter(*(void *)a1, *(unsigned char *)(*(void *)(a1 + 56) + 38), (uint64_t)v252, *(_DWORD *)(a1 + 68), *(void *)(a1 + 72), v65);
  uint64_t v66 = physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v251, __src - v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 1113);
  *(void *)(a1 + 16) = v66;
  if (v45)
  {
    uint64_t v67 = 0;
    double v68 = v257;
    float v69 = v248;
    float v70 = *(float *)v252;
    uint64_t v71 = *(void *)(a1 + 8);
    do
    {
      uint64_t v72 = v71 + 20 * v67;
      *(_WORD *)(v72 + 16) = v66 - *(_DWORD *)(a1 + 16);
      unsigned int v75 = *v69;
      uint64_t v73 = (int *)(v69 + 1);
      uint64_t v74 = v75;
      *(unsigned char *)(v72 + 18) = v75;
      if (v75)
      {
        unsigned int v76 = 0;
        uint64_t v77 = v73;
        uint64_t v78 = v74;
        do
        {
          int v80 = *v77++;
          char v79 = v80;
          if (v80 == 255) {
            --*(unsigned char *)(*(void *)(a1 + 8) + 20 * v67 + 18);
          }
          else {
            *(unsigned char *)(v66 + v76++) = v79;
          }
          --v78;
        }
        while (v78);
        uint64_t v71 = *(void *)(a1 + 8);
        uint64_t v81 = (float32x2_t *)(v71 + 20 * v67);
        uint64_t v82 = v81[2].u8[2];
        BOOL v83 = v66 != 0;
        if (v66 && v44 && v81[2].i8[2])
        {
          uint64_t v84 = 0;
          unsigned int v85 = v82 - 1;
          float v86 = 0.0;
          float v87 = 0.0;
          float v88 = 0.0;
          float v89 = 0.0;
          float v90 = 0.0;
          float v91 = 0.0;
          do
          {
            unsigned int v92 = &v44[3 * *(unsigned __int8 *)(v66 + v85)];
            int v93 = &v44[3 * *(unsigned __int8 *)(v66 + v84)];
            float v94 = v92[1];
            float v95 = v93[1];
            float v96 = v92[2];
            float v97 = v93[2];
            float v86 = v86 + (float)((float)(v94 - v95) * (float)(v96 + v97));
            float v87 = v87 + (float)((float)(v96 - v97) * (float)(*v92 + *v93));
            float v88 = v88 + (float)((float)(*v92 - *v93) * (float)(v94 + v95));
            float v89 = v89 + *v93;
            float v90 = v90 + v95;
            float v91 = v91 + v97;
            unsigned int v85 = v84++;
          }
          while (v82 != v84);
          v81->f32[0] = v86;
          v81->f32[1] = v87;
          v81[1].f32[0] = v88;
          float v98 = sqrtf((float)((float)(v87 * v87) + (float)(v86 * v86)) + (float)(v88 * v88));
          if (v98 > 0.0)
          {
            float v99 = 1.0 / v98;
            float v86 = v86 * v99;
            float v87 = v87 * v99;
            v81->f32[0] = v86;
            v81->f32[1] = v87;
            float v88 = v88 * v99;
            v81[1].f32[0] = v88;
          }
          v81[1].f32[1] = (float)-(float)((float)((float)(v90 * v87) + (float)(v89 * v86)) + (float)(v91 * v88))
                        / (float)v82;
          BOOL v83 = 1;
        }
        unsigned int v100 = v82;
      }
      else
      {
        LODWORD(v82) = 0;
        unsigned int v100 = 0;
        uint64_t v81 = (float32x2_t *)(v71 + 20 * v67);
        BOOL v83 = v66 != 0;
      }
      char v101 = v68 + 1;
      int v102 = *v68;
      if (*v68)
      {
        int v103 = 0;
        uint64_t v104 = *(float **)a1;
        uint64_t v105 = 4 * (v102 - 1);
LABEL_73:
        ++v101;
        int v106 = v103;
        do
        {
          long long v107 = (unsigned int *)(*(void *)(a1 + 72) + 12 * *(v101 - 1));
          uint64_t v108 = &v104[3 * *v107];
          uint64_t v109 = &v104[3 * v107[1]];
          uint64_t v110 = &v104[3 * v107[2]];
          float v111 = v108[1];
          float v112 = *v109 - *v108;
          float v113 = v109[1] - v111;
          float v114 = *v110 - *v108;
          float v115 = v108[2];
          float v116 = v109[2] - v115;
          float v117 = v110[1] - v111;
          float v118 = v110[2] - v115;
          float v119 = (float)(v113 * v118) - (float)(v116 * v117);
          float v120 = (float)(v116 * v114) - (float)(v112 * v118);
          float v121 = (float)(v112 * v117) - (float)(v113 * v114);
          float v122 = (float)((float)(v120 * v120) + (float)(v119 * v119)) + (float)(v121 * v121);
          float v123 = 0.0;
          float v124 = 0.0;
          float v125 = 0.0;
          if (v122 > 0.0)
          {
            float v126 = 1.0 / sqrtf(v122);
            float v123 = v119 * v126;
            float v124 = v120 * v126;
            float v125 = v121 * v126;
          }
          if (!v106)
          {
            float32x2_t v127 = *v81;
            float v128 = vmlas_n_f32(vmuls_lane_f32(v124, *v81, 1), v123, COERCE_FLOAT(*v81));
            float v129 = v81[1].f32[0];
            if ((float)(v128 + (float)(v125 * v129)) < 0.0)
            {
              int v103 = 1;
              if (v102 != 1) {
                goto LABEL_73;
              }
              double v68 = (int *)((char *)v68 + v105 + 8);
              goto LABEL_84;
            }
          }
          ++v106;
          ++v101;
        }
        while (v102 != v106);
        double v68 = (int *)((char *)v68 + v105 + 8);
        if ((v103 & 1) == 0) {
          goto LABEL_91;
        }
        float32x2_t v127 = *v81;
        float v129 = v81[1].f32[0];
LABEL_84:
        *uint64_t v81 = vneg_f32(v127);
        float32_t v130 = -v81[1].f32[1];
        v81[1].f32[0] = -v129;
        v81[1].f32[1] = v130;
        char v131 = !v83;
        if (v100 < 2) {
          char v131 = 1;
        }
        if ((v131 & 1) == 0)
        {
          uint64_t v132 = v82 >> 1;
          unsigned int v133 = v82 - 1;
          unsigned int v134 = (char *)v66;
          do
          {
            char v135 = *v134;
            *v134++ = *(unsigned char *)(v66 + v133);
            *(unsigned char *)(v66 + v133--) = v135;
            --v132;
          }
          while (v132);
          uint64_t v71 = *(void *)(a1 + 8);
        }
      }
      else
      {
        ++v68;
      }
LABEL_91:
      uint64_t v136 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 38);
      unsigned __int8 v137 = (float *)(v71 + 20 * v67);
      if (*(unsigned char *)(*(void *)(a1 + 56) + 38))
      {
        float v138 = *v137;
        float v139 = v137[1];
        float v140 = v137[2];
        uint64_t v141 = v71 + 20 * v67;
        float v143 = *(float *)(v141 + 12);
        char v142 = (float *)(v141 + 12);
        float v144 = v143;
        __int16 v145 = (float *)(*(void *)a1 + 8);
        do
        {
          float v146 = -(float)((float)((float)(v139 * *(v145 - 1)) + (float)(v138 * *(v145 - 2))) + (float)(v140 * *v145));
          if (v144 > v146)
          {
            *char v142 = v146;
            float v144 = v146;
          }
          v145 += 3;
          --v136;
        }
        while (v136);
      }
      else
      {
        float v138 = *v137;
        float v139 = v137[1];
        float v140 = v137[2];
        float v144 = v137[3];
      }
      if ((float)(v144
                 + (float)((float)((float)(v139 * *(float *)&v252[1]) + (float)(v70 * v138))
                         + (float)(*(float *)&v252[2] * v140))) > 0.0)
      {
        unint64_t v147 = *(unsigned __int8 *)(v71 + 20 * v67 + 18);
        char v148 = !v83;
        if (v147 < 2) {
          char v148 = 1;
        }
        if ((v148 & 1) == 0)
        {
          unint64_t v149 = v147 >> 1;
          unsigned int v150 = v147 - 1;
          double v151 = (char *)v66;
          do
          {
            char v152 = *v151;
            *v151++ = *(unsigned char *)(v66 + v150);
            *(unsigned char *)(v66 + v150--) = v152;
            --v149;
          }
          while (v149);
          uint64_t v71 = *(void *)(a1 + 8);
          float v153 = (float *)(v71 + 20 * v67);
          float v138 = *v153;
          float v139 = v153[1];
          float v140 = v153[2];
          float v144 = v153[3];
        }
        double v154 = (float *)(v71 + 20 * v67);
        *double v154 = -v138;
        v154[1] = -v139;
        v154[2] = -v140;
        v154[3] = -v144;
      }
      float v69 = (unsigned int *)&v73[v74];
      v66 += *(unsigned __int8 *)(v71 + 20 * v67++ + 18);
    }
    while (v67 != v45);
  }
  if (v44 != *(float **)a1)
  {
    memcpy(*(void **)a1, v44, 12 * v245);
    if (v44)
    {
      (*(void (**)(uint64_t, float *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v44);
      unsigned int v45 = v254;
    }
    *(unsigned char *)(*(void *)(a1 + 56) + 38) = v245;
  }
  int v41 = 0;
  if (physx::ConvexHullBuilder::calculateVertexMapTable((physx::ConvexHullBuilder *)a1, v45, 0))
  {
    uint64_t v155 = *(void *)(a1 + 56);
    if (v45)
    {
      uint64_t v156 = 0;
      unsigned int v157 = *(unsigned __int8 *)(v155 + 38);
      uint64_t v158 = *(float **)a1;
      uint64_t v159 = *(void *)(a1 + 8);
      do
      {
        if (v157)
        {
          unsigned __int8 v160 = 0;
          uint64_t v161 = (float *)(v159 + 20 * v156);
          float v162 = *v161;
          float v163 = v161[1];
          float v164 = v161[2];
          char v165 = -1;
          float v166 = 3.4028e38;
          float v167 = v158;
          do
          {
            float v168 = v167[2];
            if ((float)((float)((float)(v163 * v167[1]) + (float)(*v167 * v162)) + (float)(v168 * v164)) < v166)
            {
              float v166 = (float)((float)(v163 * v167[1]) + (float)(*v167 * v162)) + (float)(v168 * v164);
              char v165 = v160;
            }
            ++v160;
            v167 += 3;
          }
          while (v157 > v160);
        }
        else
        {
          char v165 = -1;
        }
        *(unsigned char *)(v159 + 20 * v156++ + 19) = v165;
      }
      while (v156 != v45);
    }
    uint64_t v169 = *(unsigned __int8 *)(v155 + 39);
    if (v169)
    {
      uint64_t v170 = *(void *)(a1 + 8);
      if (v170)
      {
        unsigned int v171 = 0;
        uint64_t v172 = (unsigned __int8 *)(v170 + 18);
        do
        {
          unsigned int v174 = *v172;
          v172 += 20;
          unsigned int v173 = v174;
          if (v174 <= 2)
          {
            uint64_t v60 = physx::shdfnd::Foundation::mInstance;
            uint64_t v61 = "ConvexHullBuilder::CreateTrianglesFromPolygons: convex hull has a polygon with less than 3 vertices!";
            uint64_t v62 = 1232;
            goto LABEL_48;
          }
          unsigned int v171 = v171 + v173 - 2;
          --v169;
        }
        while (v169);
        uint64_t v175 = physx::shdfnd::ReflectionAllocator<physx::HullTriangleData>::allocate(12 * v171, 1238);
        int v177 = (const void *)v175;
        uint64_t v178 = *(float **)a1;
        uint64_t v179 = *(unsigned __int8 *)(*(void *)(a1 + 56) + 39);
        if (*(unsigned char *)(*(void *)(a1 + 56) + 39))
        {
          uint64_t v180 = 0;
          unsigned int v181 = 0;
          uint64_t v183 = *(void *)(a1 + 8);
          uint64_t v182 = *(void *)(a1 + 16);
          int v184 = (_DWORD *)v175;
          do
          {
            uint64_t v185 = v183 + 20 * v180;
            unsigned int v186 = *(unsigned __int8 *)(v185 + 18);
            if (v186 != 2)
            {
              int v187 = (unsigned __int8 *)(v182 + *(unsigned __int16 *)(v185 + 16));
              for (unsigned int i = 2; i != v186; ++i)
              {
                int v189 = *v187;
                *int v184 = v189;
                int v190 = v187[(i - 1) % v186];
                v184[1] = v190;
                int v191 = v187[i % v186];
                v184[2] = v191;
                int v192 = &v178[3 * v189];
                int v193 = &v178[3 * v190];
                uint64_t v194 = &v178[3 * v191];
                float v195 = v192[1];
                float v196 = *v193 - *v192;
                float v197 = v193[1] - v195;
                float v198 = *v194 - *v192;
                float v199 = v192[2];
                float v200 = v193[2] - v199;
                float v201 = v194[1] - v195;
                float v202 = v194[2] - v199;
                float v176 = (float)((float)((float)((float)(v200 * v198) - (float)(v196 * v202))
                                     * (float)((float)(v200 * v198) - (float)(v196 * v202)))
                             + (float)((float)((float)(v197 * v202) - (float)(v200 * v201))
                                     * (float)((float)(v197 * v202) - (float)(v200 * v201))))
                     + (float)((float)((float)(v196 * v201) - (float)(v197 * v198))
                             * (float)((float)(v196 * v201) - (float)(v197 * v198)));
                v184 += 3 * (v176 != 0.0);
                if (v176 != 0.0) {
                  ++v181;
                }
              }
            }
            ++v180;
          }
          while (v180 != v179);
        }
        else
        {
          unsigned int v181 = 0;
        }
        if (*(void *)(a1 + 72)) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        *(void *)(a1 + 72) = 0;
        if (v171 == v181)
        {
          uint64_t v203 = (uint64_t)v177;
LABEL_145:
          *(void *)(a1 + 72) = v203;
          *(_DWORD *)(a1 + 68) = v181;
          physx::ConvexHullBuilder::computeGeomCenter(*(void *)a1, *(unsigned char *)(*(void *)(a1 + 56) + 38), (uint64_t)v259, v181, v203, v176);
          if (v181)
          {
            unint64_t v205 = 0;
            float v206 = *(float *)v259;
            float v207 = *(float *)&v259[1];
            float v208 = (_DWORD *)(v203 + 8);
            float v209 = *(float *)&v259[2];
            do
            {
              int v210 = *(v208 - 1);
              float v211 = &v178[3 * *(v208 - 2)];
              float v212 = &v178[3 * v210];
              float v213 = &v178[3 * *v208];
              float v214 = v211[1];
              float v215 = *v212 - *v211;
              float v216 = v212[1] - v214;
              float v217 = v211[2];
              float v218 = v212[2] - v217;
              float v219 = *v213 - *v211;
              float v220 = v213[1] - v214;
              float v221 = v213[2] - v217;
              float v222 = (float)(v216 * v221) - (float)(v218 * v220);
              float v223 = (float)(v218 * v219) - (float)(v215 * v221);
              float v224 = (float)(v215 * v220) - (float)(v216 * v219);
              float v225 = (float)((float)(v223 * v223) + (float)(v222 * v222)) + (float)(v224 * v224);
              float v226 = 0.0;
              float v227 = 0.0;
              float v228 = 0.0;
              if (v225 > 0.0)
              {
                float v229 = 1.0 / sqrtf(v225);
                float v226 = v222 * v229;
                float v227 = v223 * v229;
                float v228 = v224 * v229;
              }
              if ((float)((float)((float)((float)(v207 * v227) + (float)(v206 * v226)) + (float)(v209 * v228))
                         - (float)((float)((float)(v214 * v227) + (float)(*v211 * v226)) + (float)(v217 * v228))) > 0.0)
              {
                *(v208 - 1) = *v208;
                *float v208 = v210;
                unsigned int v181 = *v18;
              }
              ++v205;
              v208 += 3;
            }
            while (v205 < v181);
          }
          int v41 = 1;
          goto LABEL_153;
        }
        uint64_t v204 = (void *)physx::shdfnd::ReflectionAllocator<physx::HullTriangleData>::allocate(12 * v181, 1299);
        if (v204)
        {
          uint64_t v203 = (uint64_t)v204;
          memcpy(v204, v177, 12 * v181);
          if (v177) {
            float v176 = (*(float (**)(uint64_t, const void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
          }
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v177);
          goto LABEL_145;
        }
        if (v177) {
          (*(void (**)(uint64_t, const void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v177);
        }
      }
    }
LABEL_49:
    int v41 = 0;
  }
LABEL_153:
  if ((v256 & 0x8000000000000000) == 0 && (v256 & 0x7FFFFFFF00000000) != 0)
  {
    uint64_t v37 = v255;
    if (v255) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if ((v258 & 0x8000000000000000) == 0 && (v258 & 0x7FFFFFFF00000000) != 0)
  {
    uint64_t v37 = (uint64_t)v257;
    if (v257) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if ((HIDWORD(__src) & 0x80000000) == 0 && (HIDWORD(__src) & 0x7FFFFFFF) != 0)
  {
    uint64_t v37 = (uint64_t)v248;
    if (v248) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (!v41 || (physx::ConvexHullBuilder::checkHullPolygons((float **)a1, v37, v38, v39, v40, v34, v35, v36) & 1) == 0)
  {
LABEL_171:
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 331, "ConvexMeshBuilder::computeHullPolygons: compute convex hull polygons failed. Provided triangles dont form a convex hull.", v34, (uint64_t)v35, v36, v245);
    return 0;
  }
  uint64_t v230 = *(void *)(a1 + 56);
  *float v247 = *(unsigned __int8 *)(v230 + 38);
  *a11 = *(unsigned __int8 *)(v230 + 39);
  uint64_t v231 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)a6 + 16))(a6, 12 * *v247, "PxVec3", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 338);
  *float v246 = v231;
  memcpy(v231, *(const void **)a1, (12 * *v247));
  *a9 = 0;
  if (*a11)
  {
    unsigned int v232 = 0;
    unint64_t v233 = 0;
    float v234 = (unsigned __int8 *)(*(void *)(a1 + 8) + 18);
    do
    {
      int v235 = *v234;
      v234 += 20;
      v232 += v235;
      *a9 = v232;
      ++v233;
    }
    while (v233 < *a11);
    uint64_t v236 = 4 * v232;
  }
  else
  {
    uint64_t v236 = 0;
  }
  uint64_t v238 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)a6 + 16))(a6, v236, "PxU32", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 347);
  *a10 = v238;
  if (*a9)
  {
    unint64_t v239 = 0;
    uint64_t v240 = *(void *)(a1 + 16);
    do
    {
      *(_DWORD *)(v238 + 4 * v239) = *(unsigned __int8 *)(v240 + v239);
      ++v239;
    }
    while (v239 < *a9);
  }
  uint64_t v241 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)a6 + 16))(a6, 20 * *a11, "PxHullPolygon", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexMeshBuilder.cpp", 353);
  *a12 = v241;
  uint64_t v242 = *a11;
  if (v242)
  {
    uint64_t v243 = v241 + 12;
    uint64_t v244 = *(void *)(a1 + 8) + 12;
    do
    {
      *(_DWORD *)(v243 - 12) = *(_DWORD *)(v244 - 12);
      *(_DWORD *)(v243 - 8) = *(_DWORD *)(v244 - 8);
      *(_DWORD *)(v243 - 4) = *(_DWORD *)(v244 - 4);
      *(_DWORD *)uint64_t v243 = *(_DWORD *)v244;
      *(_WORD *)(v243 + 4) = *(unsigned __int8 *)(v244 + 6);
      *(_WORD *)(v243 + 6) = *(_WORD *)(v244 + 4);
      v243 += 20;
      v244 += 20;
      --v242;
    }
    while (v242);
  }
  return 1;
}

void physx::ConvexPolygonsBuilder::~ConvexPolygonsBuilder(physx::ConvexPolygonsBuilder *this)
{
  if (*((void *)this + 9)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *((void *)this + 9) = 0;
  physx::ConvexHullBuilder::~ConvexHullBuilder(this);
}

uint64_t extractHullPolygons(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  double v154 = a1;
  uint64_t v188 = *MEMORY[0x263EF8340];
  size_t v8 = *((unsigned int *)a3 + 17);
  uint64_t v9 = *a3;
  uint64_t v156 = *(unsigned __int8 *)(a3[7] + 38);
  float v153 = a3;
  uint64_t v10 = a3[9];
  unsigned int v176 = v8;
  uint64_t v167 = v10;
  uint64_t v177 = v10;
  uint64_t v178 = 0;
  uint64_t v179 = v9;
  int v180 = 1000593162;
  unsigned int v174 = 0;
  uint64_t v175 = 0;
  uint64_t v11 = 0;
  if (!physx::AdjacenciesBuilder::Init(&v174, &v176)) {
    goto LABEL_261;
  }
  size_t v152 = v8;
  uint64_t v12 = physx::Adjacencies::ComputeNbBoundaryEdges((physx::Adjacencies *)&v174);
  if (v12)
  {
    uint64_t v11 = 0;
    goto LABEL_261;
  }
  size_t v13 = v152;
  MEMORY[0x270FA5388](v12);
  unsigned int v157 = (char *)&v149 - ((v152 + 15) & 0x1FFFFFFF0);
  bzero(v157, v152);
  MEMORY[0x270FA5388](v14);
  uint64_t v158 = (char *)&v149 - v15;
  bzero((char *)&v149 - v15, v16);
  *double v154 = 0;
  uint64_t v151 = a5;
  uint64_t v150 = a4;
  uint64_t v149 = a2;
  while (1)
  {
    if (v13)
    {
      uint64_t v17 = 0;
      unsigned int v18 = v156;
      while (v157[v17])
      {
        if (v13 == ++v17) {
          goto LABEL_243;
        }
      }
    }
    else
    {
      uint64_t v17 = 0;
      unsigned int v18 = v156;
    }
    if (v17 == v13) {
      break;
    }
    uint64_t v172 = 0;
    uint64_t v173 = 0;
    uint64_t v19 = v175;
    uint64_t v155 = v17;
LABEL_13:
    extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill((uint64_t)&v172, v19, v17, (uint64_t)v157);
    uint64_t v20 = 0;
    uint64_t v19 = v175;
    unint64_t v21 = v173;
    unsigned int v22 = 1;
    uint64_t v23 = v172;
    uint64_t v160 = v172;
    unint64_t v159 = v173;
    while (v20 != v21)
    {
      unsigned int v24 = *(_DWORD *)(v23 + 4 * v20);
      uint64_t v162 = v20 + 1;
      if (v20 + 1 < v21)
      {
        uint64_t v25 = v22;
        BOOL v26 = 1;
        int v27 = v21;
        while (1)
        {
          float v28 = (_DWORD *)(v19 + 12 * *(unsigned int *)(v23 + 4 * v25));
          int v29 = v28[1];
          BOOL v31 = (*v28 & 0x20000000) == 0 || (*v28 & 0x1FFFFFFF) != v24;
          int v32 = v29 & 0x1FFFFFFF;
          BOOL v33 = (v29 & 0x20000000) == 0 && v31;
          if (v32 == v24) {
            BOOL v31 = v33;
          }
          int v34 = v28[2];
          if ((v34 & 0x1FFFFFFF) == v24)
          {
            if ((v34 & 0x20000000) != 0) {
              LOBYTE(v31) = 0;
            }
            if (!v31) {
              goto LABEL_37;
            }
          }
          else if (!v31)
          {
            goto LABEL_37;
          }
          BOOL v26 = ++v25 < v21;
          if (v22 == --v27) {
            goto LABEL_37;
          }
        }
      }
      BOOL v26 = 0;
LABEL_37:
      BOOL v161 = v26;
      unsigned int v163 = v22;
      if (v167)
      {
        uint64_t v35 = 0;
        uint64_t v36 = v19 + 12 * v24;
        int v37 = *(_DWORD *)(v167 + 12 * v24);
        int v165 = *(_DWORD *)(v167 + 4 * (3 * v24 + 1));
        int v166 = v37;
        int v164 = *(_DWORD *)(v167 + 4 * (3 * v24 + 2));
        while (1)
        {
          if ((*(_DWORD *)(v36 + 4 * v35) & 0x20000000) == 0)
          {
            if (v35 == 1) {
              int v38 = v166;
            }
            else {
              int v38 = v165;
            }
            uint64_t v39 = 0;
            if (v35 == 1) {
              uint64_t v40 = 2;
            }
            else {
              uint64_t v40 = 1;
            }
            if (!v35) {
              uint64_t v39 = 1;
            }
            int v41 = *(_DWORD *)(v36 + 4 * v39);
            int v42 = v35 ? v38 : v166;
            int v43 = v35 ? v164 : v165;
            uint64_t v44 = v35 ? v40 : 2;
            unsigned int v45 = v41 & 0x1FFFFFFF;
            LODWORD(v185) = 0;
            LODWORD(v170) = 0;
            uint64_t v46 = v167;
            int NeighborFace = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(v24, v42, v19, v167, (int *)&v185, (unsigned int *)&v170);
            LODWORD(v168) = 0;
            unsigned int v184 = 0;
            int v48 = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(v45, v42, v19, v46, (int *)&v168, &v184);
            if (NeighborFace)
            {
              if (v48 && v185 == v184 && v170 == v168) {
                break;
              }
            }
            unsigned int v49 = *(_DWORD *)(v36 + 4 * v44) & 0x1FFFFFFF;
            uint64_t v50 = v167;
            int v51 = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(v24, v43, v19, v167, (int *)&v185, (unsigned int *)&v170);
            int v52 = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(v49, v43, v19, v50, (int *)&v168, &v184);
            if (v51)
            {
              if (v52 && v185 == v184 && v170 == v168) {
                break;
              }
            }
          }
          if (++v35 == 3) {
            goto LABEL_66;
          }
        }
        uint64_t v23 = v160;
LABEL_69:
        unint64_t v53 = 0;
        float v54 = v157;
        do
        {
          uint64_t v55 = v19 + 12 * *(unsigned int *)(v23 + 4 * v53);
          *(void *)v55 |= 0x2000000020000000uLL;
          *(_DWORD *)(v55 + 8) |= 0x20000000u;
          v54[*(unsigned int *)(v23 + 4 * v53++)] = 0;
        }
        while (v53 < v173);
        LODWORD(v173) = 0;
        LODWORD(v17) = v155;
        goto LABEL_13;
      }
LABEL_66:
      unsigned int v22 = v163 + 1;
      uint64_t v20 = v162;
      uint64_t v23 = v160;
      unint64_t v21 = v159;
      if (v161) {
        goto LABEL_69;
      }
    }
    uint64_t v170 = 0;
    uint64_t v171 = 0;
    a2 = v149;
    if (v21)
    {
      unint64_t v56 = 0;
      do
      {
        unsigned int v57 = *(_DWORD *)(v172 + 4 * v56);
        unsigned int v58 = *(_DWORD *)(v167 + 12 * v57);
        unsigned int v59 = *(_DWORD *)(v167 + 4 * (3 * v57 + 1));
        unsigned int v60 = *(_DWORD *)(v167 + 4 * (3 * v57 + 2));
        uint64_t v61 = v175;
        if ((*(unsigned char *)(v175 + 12 * v57 + 3) & 0x20) != 0)
        {
          LODWORD(v185) = *(_DWORD *)(v167 + 12 * v57);
          HIDWORD(v185) = v59;
          int v62 = v171;
          if ((HIDWORD(v171) & 0x7FFFFFFFu) <= v171)
          {
            physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::growAndPushBack((uint64_t)&v170, &v185);
          }
          else
          {
            *(void *)(v170 + 8 * v171) = v185;
            LODWORD(v171) = v62 + 1;
          }
          uint64_t v61 = v175;
        }
        if ((*(unsigned char *)(v61 + 12 * v57 + 7) & 0x20) != 0)
        {
          unint64_t v185 = __PAIR64__(v60, v58);
          int v63 = v171;
          if ((HIDWORD(v171) & 0x7FFFFFFFu) <= v171)
          {
            physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::growAndPushBack((uint64_t)&v170, &v185);
          }
          else
          {
            *(void *)(v170 + 8 * v171) = v185;
            LODWORD(v171) = v63 + 1;
          }
          uint64_t v61 = v175;
        }
        if ((*(unsigned char *)(v61 + 12 * v57 + 11) & 0x20) != 0)
        {
          unint64_t v185 = __PAIR64__(v60, v59);
          int v64 = v171;
          if ((HIDWORD(v171) & 0x7FFFFFFFu) <= v171)
          {
            physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::growAndPushBack((uint64_t)&v170, &v185);
          }
          else
          {
            *(void *)(v170 + 8 * v171) = v185;
            LODWORD(v171) = v64 + 1;
          }
        }
        ++v56;
      }
      while (v56 < v173);
    }
    float v168 = 0;
    uint64_t v169 = 0;
    physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::copy<physx::shdfnd::ReflectionAllocator<Pair>>((unint64_t)&v185, (uint64_t)&v170);
    unsigned int v68 = v186;
    float v69 = (unsigned int *)v185;
    a5 = v151;
    a4 = v150;
    if (v186)
    {
LABEL_90:
      unint64_t v70 = 0;
      int v71 = -v68;
      uint64_t v72 = v69 + 2;
      uint64_t v73 = v69 + 5;
      uint64_t v74 = 1;
      unint64_t v75 = v68;
      do
      {
        unint64_t v76 = v70 + 1;
        if (v70 + 1 < v75)
        {
          uint64_t v77 = &v69[2 * v70];
          unsigned int v79 = *v77;
          unsigned int v78 = v77[1];
          int v80 = &v69[2 * v74];
          unsigned int v81 = *v80;
          unsigned int v82 = v80[1];
          BOOL v83 = v81 == v79 && v82 == v78;
          if (v83 || (v82 == v79 ? (BOOL v84 = v81 == v78) : (BOOL v84 = 0), v84))
          {
            BOOL v92 = 1;
            uint64_t v91 = v74;
LABEL_113:
            unint64_t v93 = (v91 + 1);
            if (v93 < v68)
            {
              uint64_t v94 = 2 * v91;
              do
              {
                *(void *)&v69[v94] = *(void *)&v69[2 * v93++];
                v94 += 2;
              }
              while (v93 < v68);
            }
            unint64_t v95 = v68 - 1;
            if (v76 < v95)
            {
              float v96 = v72;
              do
              {
                *(v96 - 1) = *v96;
                --v95;
                ++v96;
              }
              while (v74 != v95);
            }
            v68 -= 2;
            if (v92)
            {
              if (v68) {
                goto LABEL_90;
              }
              unsigned int v186 = 0;
              goto LABEL_154;
            }
          }
          else
          {
            uint64_t v85 = -2;
            float v86 = v73;
            while (1)
            {
              uint64_t v87 = v85;
              if (v71 == v85) {
                break;
              }
              int v88 = *(v86 - 1);
              uint64_t v65 = *v86;
              if (v88 != v79 || v65 != v78)
              {
                --v85;
                v86 += 2;
                if (v65 != v79 || v88 != v78) {
                  continue;
                }
              }
              uint64_t v91 = v70 - v87;
              BOOL v92 = v70 - v87 < v75;
              goto LABEL_113;
            }
          }
        }
        ++v74;
        ++v71;
        v73 += 2;
        ++v72;
        unint64_t v70 = v76;
      }
      while (v76 != v75);
      int v183 = -1;
      unsigned int v184 = -1;
      if (!v68) {
        goto LABEL_154;
      }
      unsigned int v97 = *v69;
      int v183 = v69[1];
      unsigned int v184 = v97;
      if ((HIDWORD(v169) & 0x7FFFFFFFu) <= v169)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v168, &v184);
        unsigned int v98 = v169;
      }
      else
      {
        v168[v169] = v97;
        unsigned int v98 = v169 + 1;
        LODWORD(v169) = v169 + 1;
      }
      if ((HIDWORD(v169) & 0x7FFFFFFFu) <= v98)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v168, &v183);
      }
      else
      {
        v168[v98] = v183;
        LODWORD(v169) = v169 + 1;
      }
      if (v68 < 2)
      {
        unsigned int v186 = v68 - 1;
        goto LABEL_154;
      }
      memmove(v69, v69 + 2, 8 * v68 - 8);
      unsigned int v99 = v68 - 1;
      unsigned int v186 = v68 - 1;
      unsigned int v100 = v183;
      do
      {
        uint64_t v101 = 0;
        unsigned int v102 = 1;
        int v103 = v69;
        uint64_t v104 = v99;
        while (1)
        {
          unsigned int v182 = 0;
          unsigned int v105 = *v103;
          unsigned int v181 = 0;
          unsigned int v182 = v105;
          unsigned int v106 = v103[1];
          unsigned int v181 = v106;
          if (v105 == v100) {
            break;
          }
          if (v106 == v100)
          {
            if ((HIDWORD(v169) & 0x7FFFFFFFu) <= v169)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v168, &v182);
            }
            else
            {
              v168[v169] = v105;
              LODWORD(v169) = v169 + 1;
            }
            unsigned int v100 = v182;
            int v183 = v182;
            unsigned int v184 = v181;
            if ((int)v101 + 1 < v104)
            {
              uint64_t v108 = 0;
              do
              {
                *(void *)&v103[2 * v108] = *(void *)&v69[2 * v102 + 2 * v108];
                ++v108;
              }
              while (v104 - v102 != v108);
            }
            goto LABEL_152;
          }
          ++v101;
          v103 += 2;
          ++v102;
          if (v104 == v101)
          {
            char v109 = 0;
            goto LABEL_155;
          }
        }
        if ((HIDWORD(v169) & 0x7FFFFFFFu) <= v169)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v168, &v181);
        }
        else
        {
          v168[v169] = v106;
          LODWORD(v169) = v169 + 1;
        }
        unsigned int v100 = v181;
        int v183 = v181;
        unsigned int v184 = v182;
        if ((int)v101 + 1 < v104)
        {
          uint64_t v107 = 0;
          do
          {
            *(void *)&v103[2 * v107] = *(void *)&v69[2 * v102 + 2 * v107];
            ++v107;
          }
          while (v104 - v102 != v107);
        }
LABEL_152:
        char v109 = 1;
        unsigned int v99 = v104 - 1;
      }
      while (v104 != 1);
    }
    else
    {
LABEL_154:
      char v109 = 1;
    }
LABEL_155:
    if ((v187 & 0x80000000) == 0 && (v187 & 0x7FFFFFFF) != 0 && v69 != 0) {
      (*(void (**)(uint64_t, unsigned int *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v69);
    }
    if ((v109 & 1) == 0)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", 943, "Meshmerizer::extractHullPolygons: line strip extraction failed", v65, v66, v67, v149);
      goto LABEL_167;
    }
    if (!v169) {
      goto LABEL_167;
    }
    float v111 = v168;
    unint64_t v112 = (v169 - 1);
    LODWORD(v185) = v169 - 1;
    uint64_t v113 = *(unsigned int *)(a2 + 8);
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v113)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a2, &v185);
      if (v112)
      {
LABEL_182:
        float v114 = v111;
        unint64_t v115 = v112;
        do
        {
          uint64_t v116 = *v114;
          ++v158[v116];
          uint64_t v117 = *(unsigned int *)(a2 + 8);
          if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v117)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a2, v114);
          }
          else
          {
            *(_DWORD *)(*(void *)a2 + 4 * v117) = v116;
            ++*(_DWORD *)(a2 + 8);
          }
          ++v114;
          --v115;
        }
        while (v115);
      }
    }
    else
    {
      *(_DWORD *)(*(void *)a2 + 4 * v113) = v112;
      ++*(_DWORD *)(a2 + 8);
      if (v112) {
        goto LABEL_182;
      }
    }
    ++*v154;
    int v118 = v173;
    if (v173)
    {
      for (unint64_t i = 0; i < v173; ++i)
      {
        unsigned int v120 = 3 * *(_DWORD *)(v172 + 4 * i);
        int v121 = *(_DWORD *)(v167 + 4 * v120);
        LODWORD(v185) = v121;
        unsigned int v122 = *(_DWORD *)(v167 + 4 * (v120 + 1));
        unsigned int v184 = v122;
        int v123 = *(_DWORD *)(v167 + 4 * (v120 + 2));
        int v183 = v123;
        if (v112)
        {
          unint64_t v124 = 0;
          int v125 = 0;
          int v126 = 0;
          int v127 = 0;
          do
          {
            int v128 = v111[v124];
            v127 |= v121 == v128;
            v126 |= v122 == v128;
            v125 |= v123 == v128;
            if (v127 & v126 & v125) {
              break;
            }
            ++v124;
          }
          while (v124 < v112);
          if (v127) {
            goto LABEL_212;
          }
        }
        else
        {
          LOBYTE(v125) = 0;
          LOBYTE(v126) = 0;
        }
        uint64_t v129 = *(unsigned int *)(a5 + 8);
        uint64_t v130 = *(void *)a5;
        if (v129)
        {
          uint64_t v131 = 0;
          while (*(_DWORD *)(v130 + 4 * v131) != v121)
          {
            if (v129 == ++v131)
            {
              uint64_t v132 = *(unsigned int *)(a5 + 8);
              goto LABEL_204;
            }
          }
          uint64_t v132 = *(unsigned int *)(a5 + 8);
        }
        else
        {
          uint64_t v132 = 0;
          LODWORD(v131) = 0;
        }
        if (v131 == v129)
        {
LABEL_204:
          if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) > v129)
          {
            *(_DWORD *)(v130 + 4 * v132) = v121;
            unsigned int v133 = *(_DWORD *)(a5 + 8) + 1;
            *(_DWORD *)(a5 + 8) = v133;
            if (v126) {
              goto LABEL_224;
            }
            if (!v133) {
              goto LABEL_214;
            }
            goto LABEL_207;
          }
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a5, &v185);
        }
LABEL_212:
        if (v126) {
          goto LABEL_224;
        }
        unsigned int v133 = *(_DWORD *)(a5 + 8);
        uint64_t v130 = *(void *)a5;
        if (!v133)
        {
LABEL_214:
          uint64_t v135 = 0;
          LODWORD(v134) = 0;
          goto LABEL_215;
        }
LABEL_207:
        uint64_t v134 = 0;
        uint64_t v135 = v133;
        while (*(_DWORD *)(v130 + 4 * v134) != v184)
        {
          if (v133 == ++v134) {
            goto LABEL_216;
          }
        }
LABEL_215:
        if (v134 == v133)
        {
LABEL_216:
          if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) > v133)
          {
            *(_DWORD *)(v130 + 4 * v135) = v184;
            unsigned int v136 = *(_DWORD *)(a5 + 8) + 1;
            *(_DWORD *)(a5 + 8) = v136;
            if ((v125 & 1) == 0)
            {
              if (!v136) {
                goto LABEL_226;
              }
              goto LABEL_219;
            }
            goto LABEL_231;
          }
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a5, &v184);
        }
LABEL_224:
        if ((v125 & 1) == 0)
        {
          unsigned int v136 = *(_DWORD *)(a5 + 8);
          uint64_t v130 = *(void *)a5;
          if (!v136)
          {
LABEL_226:
            uint64_t v138 = 0;
            LODWORD(v137) = 0;
LABEL_227:
            if (v137 == v136)
            {
LABEL_228:
              if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) <= v136)
              {
                physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a5, &v183);
              }
              else
              {
                *(_DWORD *)(v130 + 4 * v138) = v183;
                ++*(_DWORD *)(a5 + 8);
              }
            }
            goto LABEL_231;
          }
LABEL_219:
          uint64_t v137 = 0;
          uint64_t v138 = v136;
          while (*(_DWORD *)(v130 + 4 * v137) != v183)
          {
            if (v136 == ++v137) {
              goto LABEL_228;
            }
          }
          goto LABEL_227;
        }
LABEL_231:
        int v118 = v173;
      }
    }
    if (a4)
    {
      LODWORD(v185) = v118;
      uint64_t v139 = *(unsigned int *)(a4 + 8);
      if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v139)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, &v185);
      }
      else
      {
        *(_DWORD *)(*(void *)a4 + 4 * v139) = v118;
        ++*(_DWORD *)(a4 + 8);
      }
      if (v173)
      {
        uint64_t v140 = 0;
        unint64_t v141 = 0;
        do
        {
          uint64_t v142 = *(unsigned int *)(a4 + 8);
          if ((*(_DWORD *)(a4 + 12) & 0x7FFFFFFFu) <= v142)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a4, (_DWORD *)(v172 + v140));
          }
          else
          {
            *(_DWORD *)(*(void *)a4 + 4 * v142) = *(_DWORD *)(v172 + 4 * v141);
            ++*(_DWORD *)(a4 + 8);
          }
          ++v141;
          v140 += 4;
        }
        while (v141 < v173);
      }
    }
LABEL_167:
    if ((v169 & 0x8000000000000000) == 0 && (v169 & 0x7FFFFFFF00000000) != 0 && v168) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    if ((v171 & 0x8000000000000000) == 0 && (v171 & 0x7FFFFFFF00000000) != 0 && v170) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    if ((v173 & 0x8000000000000000) == 0 && (v173 & 0x7FFFFFFF00000000) != 0 && v172) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    uint64_t v11 = 0;
    size_t v13 = v152;
    if ((v109 & 1) == 0) {
      goto LABEL_261;
    }
  }
LABEL_243:
  LODWORD(v185) = 0;
  if (v18)
  {
    for (unsigned int j = 0; j < v18; LODWORD(v185) = j)
    {
      if (v158[j] <= 2u)
      {
        uint64_t v144 = *(unsigned int *)(a5 + 8);
        uint64_t v145 = *(void *)a5;
        if (v144)
        {
          uint64_t v146 = 0;
          while (*(_DWORD *)(v145 + 4 * v146) != j)
          {
            if (v144 == ++v146)
            {
              uint64_t v147 = *(unsigned int *)(a5 + 8);
              goto LABEL_254;
            }
          }
          uint64_t v147 = *(unsigned int *)(a5 + 8);
        }
        else
        {
          uint64_t v147 = 0;
          LODWORD(v146) = 0;
        }
        if (v146 == v144)
        {
LABEL_254:
          if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) <= v144)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a5, &v185);
            unsigned int v18 = v156;
          }
          else
          {
            *(_DWORD *)(v145 + 4 * v147) = j;
            ++*(_DWORD *)(a5 + 8);
          }
        }
      }
      unsigned int j = v185 + 1;
    }
  }
  uint64_t v11 = 1;
  if (a4 && *(_DWORD *)(a5 + 8)) {
    checkRedundantVertices(v154, a2, v153[9], a4, (uint64_t *)a5);
  }
LABEL_261:
  if (v175) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v175 - 16);
  }
  return v11;
}

uint64_t local::QuickHullFace::mergeAdjacentFace(uint64_t *a1, void *a2, uint64_t a3, float a4)
{
  uint64_t v7 = *(void *)(a2[6] + 56);
  uint64_t v50 = v7;
  uint64_t v8 = *(unsigned int *)(a3 + 8);
  if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v8)
  {
    physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a3, &v50);
  }
  else
  {
    *(void *)(*(void *)a3 + 8 * v8) = v7;
    *(_DWORD *)(a3 + 8) = v8 + 1;
  }
  *(_DWORD *)(v7 + 60) = 1;
  uint64_t v9 = a2[6];
  uint64_t v10 = *(void **)(v9 + 32);
  uint64_t v11 = (void *)a2[4];
  while (1)
  {
    uint64_t v9 = *(void *)(v9 + 40);
    if (*(void *)(v11[6] + 56) != v7) {
      break;
    }
    uint64_t v11 = (void *)v11[4];
    if (v11 == (void *)a2[4]) {
      return 0;
    }
  }
  uint64_t v12 = a2[5];
  while (*(void *)(*(void *)(v12 + 48) + 56) == v7)
  {
    uint64_t v10 = (void *)v10[4];
    uint64_t v12 = *(void *)(v12 + 40);
    if (v12 == a2[5]) {
      return 0;
    }
  }
  uint64_t v14 = v10[5];
  if (v9 != v14)
  {
    uint64_t v15 = v9;
    do
    {
      *(void *)(v15 + 56) = a1;
      uint64_t v15 = *(void *)(v15 + 40);
    }
    while (v15 != v14);
  }
  if ((void *)*a1 == a2) {
    *a1 = v12;
  }
  float v17 = local::QuickHullFace::connectHalfEdges(a1, v10, v12, a4);
  uint64_t v49 = v16;
  if (v16)
  {
    uint64_t v18 = *(unsigned int *)(a3 + 8);
    if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v18)
    {
      physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a3, &v49);
    }
    else
    {
      *(void *)(*(void *)a3 + 8 * v18) = v16;
      *(_DWORD *)(a3 + 8) = v18 + 1;
    }
  }
  local::QuickHullFace::connectHalfEdges(a1, v11, v9, v17);
  uint64_t v49 = v19;
  if (v19)
  {
    uint64_t v20 = *(unsigned int *)(a3 + 8);
    if ((*(_DWORD *)(a3 + 12) & 0x7FFFFFFFu) <= v20)
    {
      physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a3, &v49);
    }
    else
    {
      *(void *)(*(void *)a3 + 8 * v20) = v19;
      *(_DWORD *)(a3 + 8) = v20 + 1;
    }
  }
  uint64_t v21 = 0;
  a1[3] = 0;
  *((_DWORD *)a1 + 8) = 0;
  uint64_t v22 = *a1;
  float v24 = *(float *)*a1;
  float v23 = *(float *)(*a1 + 4);
  float v25 = *(float *)(*a1 + 8);
  float v26 = 0.0;
  int v27 = 3;
  do
  {
    float v28 = *(float **)(v22 + 40);
    float v29 = (float)((float)((float)(v23 - v28[1]) * (float)(v23 - v28[1]))
                + (float)((float)(v24 - *v28) * (float)(v24 - *v28)))
        + (float)((float)(v25 - v28[2]) * (float)(v25 - v28[2]));
    if (v29 > v26) {
      uint64_t v21 = v22;
    }
    float v25 = v28[2];
    if (v29 > v26) {
      float v26 = v29;
    }
    float v23 = v28[1];
    float v24 = *v28;
    uint64_t v22 = *(void *)(v22 + 40);
    --v27;
  }
  while (v27);
  uint64_t v30 = *(void *)(v21 + 40);
  float v32 = *(float *)v21;
  float v31 = *(float *)(v21 + 4);
  float v33 = *(float *)v30 - *(float *)v21;
  float v34 = *(float *)(v30 + 4) - v31;
  float v35 = *(float *)(v21 + 8);
  float v36 = *(float *)(v30 + 8) - v35;
  *((_DWORD *)a1 + 10) = *(_DWORD *)v21;
  *((float *)a1 + 11) = v31;
  *((float *)a1 + 12) = v35;
  unsigned __int16 v37 = 1;
  float v38 = 0.0;
  float v39 = 0.0;
  float v40 = 0.0;
  do
  {
    ++v37;
    float v32 = v32 + *(float *)v30;
    *((float *)a1 + 10) = v32;
    float v31 = v31 + *(float *)(v30 + 4);
    *((float *)a1 + 11) = v31;
    float v35 = v35 + *(float *)(v30 + 8);
    *((float *)a1 + 12) = v35;
    uint64_t v30 = *(void *)(v30 + 40);
    float v41 = *(float *)v30 - *(float *)v21;
    float v42 = *(float *)(v30 + 4) - *(float *)(v21 + 4);
    float v43 = *(float *)(v30 + 8) - *(float *)(v21 + 8);
    float v40 = v40 + (float)((float)(v42 * (float)-v36) + (float)(v34 * v43));
    float v39 = v39 + (float)((float)(v43 * (float)-v33) + (float)(v36 * v41));
    *((float *)a1 + 6) = v40;
    *((float *)a1 + 7) = v39;
    float v38 = v38 + (float)((float)(v41 * (float)-v34) + (float)(v33 * v42));
    *((float *)a1 + 8) = v38;
  }
  while (v30 != v21);
  *((_WORD *)a1 + 4) = v37;
  float v44 = sqrtf((float)((float)(v39 * v39) + (float)(v40 * v40)) + (float)(v38 * v38));
  if (v44 > 0.0)
  {
    float v40 = v40 * (float)(1.0 / v44);
    float v39 = v39 * (float)(1.0 / v44);
    *((float *)a1 + 6) = v40;
    *((float *)a1 + 7) = v39;
    float v38 = v38 * (float)(1.0 / v44);
    *((float *)a1 + 8) = v38;
  }
  float v45 = 1.0 / (float)v37;
  float v46 = v45 * v32;
  *((float *)a1 + 9) = v44;
  *((float *)a1 + 10) = v46;
  float v47 = v45 * v31;
  float v48 = v45 * v35;
  *((float *)a1 + 11) = v47;
  *((float *)a1 + 12) = v48;
  *((float *)a1 + 13) = (float)((float)(v47 * v39) + (float)(v40 * v46)) + (float)(v38 * v48);
  return 1;
}

float local::QuickHullFace::connectHalfEdges(void *a1, void *a2, uint64_t a3, float result)
{
  uint64_t v4 = *(uint64_t **)(a2[6] + 56);
  int v5 = *(void **)(a3 + 48);
  if (v4 == (uint64_t *)v5[7])
  {
    if ((void *)*a1 == a2) {
      *a1 = a3;
    }
    if (*((_WORD *)v4 + 4) == 3)
    {
      uint64_t v6 = *(void *)(v5[4] + 48);
      *((_DWORD *)v4 + 15) = 1;
    }
    else
    {
      uint64_t v6 = v5[5];
      uint64_t v7 = *(void *)(v6 + 32);
      if (*v4 == v7) {
        *uint64_t v4 = v6;
      }
      uint64_t v8 = *(void *)(v7 + 32);
      *(void *)(v6 + 32) = v8;
      *(void *)(v8 + 40) = v6;
    }
    uint64_t v9 = 0;
    uint64_t v10 = a2[4];
    *(void *)(a3 + 32) = v10;
    *(void *)(v10 + 40) = a3;
    *(void *)(a3 + 48) = v6;
    *(void *)(v6 + 48) = a3;
    v4[3] = 0;
    *((_DWORD *)v4 + 8) = 0;
    uint64_t v11 = *v4;
    float v13 = *(float *)*v4;
    float v12 = *(float *)(*v4 + 4);
    float v14 = *(float *)(*v4 + 8);
    float v15 = 0.0;
    int v16 = 3;
    do
    {
      float v17 = *(float **)(v11 + 40);
      float v18 = (float)((float)((float)(v12 - v17[1]) * (float)(v12 - v17[1]))
                  + (float)((float)(v13 - *v17) * (float)(v13 - *v17)))
          + (float)((float)(v14 - v17[2]) * (float)(v14 - v17[2]));
      if (v18 > v15) {
        uint64_t v9 = v11;
      }
      float v14 = v17[2];
      if (v18 > v15) {
        float v15 = v18;
      }
      float v12 = v17[1];
      float v13 = *v17;
      uint64_t v11 = *(void *)(v11 + 40);
      --v16;
    }
    while (v16);
    uint64_t v19 = *(void *)(v9 + 40);
    float v21 = *(float *)v9;
    float v20 = *(float *)(v9 + 4);
    float v22 = *(float *)v19 - *(float *)v9;
    float v23 = *(float *)(v19 + 4) - v20;
    float v24 = *(float *)(v9 + 8);
    float v25 = *(float *)(v19 + 8) - v24;
    *((_DWORD *)v4 + 10) = *(_DWORD *)v9;
    *((float *)v4 + 11) = v20;
    *((float *)v4 + 12) = v24;
    unsigned __int16 v26 = 1;
    float v27 = 0.0;
    float v28 = 0.0;
    float v29 = 0.0;
    do
    {
      ++v26;
      float v21 = v21 + *(float *)v19;
      float v20 = v20 + *(float *)(v19 + 4);
      float v24 = v24 + *(float *)(v19 + 8);
      *((float *)v4 + 10) = v21;
      *((float *)v4 + 11) = v20;
      *((float *)v4 + 12) = v24;
      uint64_t v19 = *(void *)(v19 + 40);
      float v30 = *(float *)v19 - *(float *)v9;
      float v31 = *(float *)(v19 + 4) - *(float *)(v9 + 4);
      float v32 = *(float *)(v19 + 8) - *(float *)(v9 + 8);
      float v29 = v29 + (float)((float)(v31 * (float)-v25) + (float)(v23 * v32));
      float v28 = v28 + (float)((float)(v32 * (float)-v22) + (float)(v25 * v30));
      *((float *)v4 + 6) = v29;
      *((float *)v4 + 7) = v28;
      float v27 = v27 + (float)((float)(v30 * (float)-v23) + (float)(v22 * v31));
      *((float *)v4 + 8) = v27;
    }
    while (v19 != v9);
    *((_WORD *)v4 + 4) = v26;
    float v33 = sqrtf((float)((float)(v28 * v28) + (float)(v29 * v29)) + (float)(v27 * v27));
    if (v33 > 0.0)
    {
      float v29 = v29 * (float)(1.0 / v33);
      float v28 = v28 * (float)(1.0 / v33);
      *((float *)v4 + 6) = v29;
      *((float *)v4 + 7) = v28;
      float v27 = v27 * (float)(1.0 / v33);
      *((float *)v4 + 8) = v27;
    }
    float v34 = 1.0 / (float)v26;
    float v35 = v34 * v21;
    *((float *)v4 + 9) = v33;
    *((float *)v4 + 10) = v35;
    float v36 = v34 * v20;
    float v37 = v34 * v24;
    *((float *)v4 + 11) = v36;
    *((float *)v4 + 12) = v37;
    float32_t result = (float)((float)(v36 * v28) + (float)(v29 * v35)) + (float)(v27 * v37);
    *((float *)v4 + 13) = result;
  }
  else
  {
    a2[5] = a3;
    *(void *)(a3 + 32) = a2;
  }
  return result;
}

void local::QuickHull::~QuickHull(local::QuickHull *this)
{
  int v2 = *((_DWORD *)this + 105);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 51) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v4 = *((_DWORD *)this + 101);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((void *)this + 49) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v6 = *((_DWORD *)this + 97);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((void *)this + 47) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v8 = *((_DWORD *)this + 93);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((void *)this + 45)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v9 = *((_DWORD *)this + 89);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((void *)this + 43)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v10 = *((_DWORD *)this + 33);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((void *)this + 15)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v11 = *((unsigned int *)this + 28);
  if (v11)
  {
    for (unint64_t i = 0; i < v11; ++i)
    {
      if (*(void *)(*((void *)this + 13) + 8 * i))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v11 = *((unsigned int *)this + 28);
      }
    }
  }
  *((_DWORD *)this + 28) = 0;
  int v13 = *((_DWORD *)this + 29);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((void *)this + 13) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unint64_t v15 = *((unsigned int *)this + 20);
  if (v15)
  {
    for (unint64_t j = 0; j < v15; ++j)
    {
      if (*(void *)(*((void *)this + 9) + 8 * j))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        unint64_t v15 = *((unsigned int *)this + 20);
      }
    }
  }
  *((_DWORD *)this + 20) = 0;
  int v17 = *((_DWORD *)this + 21);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && *((void *)this + 9) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t local::QuickHull::preallocate(local::QuickHull *this, unsigned int a2)
{
  if (a2 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = a2;
  }
  *((_DWORD *)this + 7) = v4;
  *((void *)this + 6) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 32 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 734);
  local::MemBlock<local::QuickHullHalfEdge,false>::init((uint64_t)this + 56, 9 * *((_DWORD *)this + 7) - 18);
  unsigned int v5 = 2 * *((_DWORD *)this + 7) - 4;
  uint64_t result = local::MemBlock<local::QuickHullFace,true>::init((unsigned int *)this + 22, 2 * v5);
  if ((*((_DWORD *)this + 33) & 0x7FFFFFFFu) < v5) {
    uint64_t result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate((uint64_t)this + 120, v5);
  }
  if ((*((_DWORD *)this + 89) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<local::QuickHullVertex *,physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>>::recreate((uint64_t)this + 344, a2);
  }
  if ((*((_DWORD *)this + 97) & 0x7FFFFFE0) == 0) {
    uint64_t result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate((uint64_t)this + 376, 0x20u);
  }
  if ((*((_DWORD *)this + 101) & 0x7FFFFFE0) == 0) {
    uint64_t result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate((uint64_t)this + 392, 0x20u);
  }
  if ((*((_DWORD *)this + 105) & 0x7FFFFFE0) == 0) {
    uint64_t result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate((uint64_t)this + 408, 0x20u);
  }
  if (a2 >= 0x80) {
    unsigned int v7 = 128;
  }
  else {
    unsigned int v7 = a2;
  }
  if ((*((_DWORD *)this + 93) & 0x7FFFFFFFu) < v7)
  {
    return physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::recreate((uint64_t)this + 360, v7);
  }
  return result;
}

uint64_t local::MemBlock<local::QuickHullHalfEdge,false>::init(uint64_t a1, unsigned int a2)
{
  *(_DWORD *)a1 = a2;
  if (a2) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 72 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 84);
  else {
    uint64_t result = 0;
  }
  uint64_t v5 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if ((*(_DWORD *)(a1 + 28) & 0x7FFFFFFFu) <= v4) {
    return physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::growAndPushBack(a1 + 16, &v5);
  }
  *(void *)(*(void *)(a1 + 16) + 8 * v4) = result;
  *(_DWORD *)(a1 + 24) = v4 + 1;
  return result;
}

uint64_t local::MemBlock<local::QuickHullFace,true>::init(unsigned int *a1, unsigned int a2)
{
  *a1 = a2;
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 80 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 84);
    uint64_t v4 = *a1;
    uint64_t v9 = result;
    if (v4)
    {
      uint64_t v5 = 0;
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v7 = result + v5;
        *(void *)uint64_t v7 = 0;
        *(_WORD *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 36) = 0;
        *(void *)(v7 + 52) = 0xFF7FFFFF00000000;
        *(_DWORD *)(v7 + 60) = 0;
        *(void *)(v7 + 64) = 0;
        *(_DWORD *)(v7 + 72) = i;
        v5 += 80;
        *(unsigned char *)(v7 + 76) = 0;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v9 = 0;
  }
  uint64_t v8 = a1[6];
  if ((a1[7] & 0x7FFFFFFF) <= v8) {
    return physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack((uint64_t)(a1 + 4), &v9);
  }
  *(void *)(*((void *)a1 + 2) + 8 * v8) = result;
  a1[6] = v8 + 1;
  return result;
}

uint64_t local::QuickHull::createTriangle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 96);
  uint64_t v9 = *(unsigned int *)(a1 + 88);
  if (v8 >= v9)
  {
    if (v9)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 80 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 138);
      float v14 = (unsigned int *)(a1 + 92);
      int v13 = *(_DWORD *)(a1 + 92);
      uint64_t v15 = *(unsigned int *)(a1 + 88);
      uint64_t v57 = v12;
      unsigned int v16 = v13 + 1;
      *(_DWORD *)(a1 + 92) = v16;
      if (v15)
      {
        uint64_t v17 = 0;
        int v18 = v16 * v15;
        uint64_t v19 = 80 * v15;
        do
        {
          uint64_t v20 = v12 + v17;
          *(void *)uint64_t v20 = 0;
          *(_WORD *)(v20 + 8) = 0;
          *(void *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 36) = 0;
          *(void *)(v20 + 52) = 0xFF7FFFFF00000000;
          *(_DWORD *)(v20 + 60) = 0;
          *(void *)(v20 + 64) = 0;
          *(_DWORD *)(v20 + 72) = v18;
          v17 += 80;
          ++v18;
          *(unsigned char *)(v20 + 76) = 0;
        }
        while (v19 != v17);
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v57 = 0;
      float v14 = (unsigned int *)(a1 + 92);
      unsigned int v16 = *(_DWORD *)(a1 + 92) + 1;
      *(_DWORD *)(a1 + 92) = v16;
    }
    uint64_t v21 = *(unsigned int *)(a1 + 112);
    if ((*(_DWORD *)(a1 + 116) & 0x7FFFFFFFu) <= v21)
    {
      physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a1 + 104, &v57);
      unsigned int v16 = *v14;
    }
    else
    {
      *(void *)(*(void *)(a1 + 104) + 8 * v21) = v12;
      *(_DWORD *)(a1 + 112) = v21 + 1;
    }
    uint64_t v11 = *(void *)(*(void *)(a1 + 104) + 8 * v16);
    *(_DWORD *)(a1 + 96) = 1;
  }
  else
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 104) + 8 * *(unsigned int *)(a1 + 92));
    *(_DWORD *)(a1 + 96) = v8 + 1;
    uint64_t v11 = v10 + 80 * v8;
  }
  float v22 = (unsigned int *)(a1 + 56);
  FreeIteuint64_t m = local::MemBlock<local::QuickHullHalfEdge,false>::getFreeItem((unsigned int *)(a1 + 56));
  *(void *)(FreeItem + 56) = v11;
  *(void *)FreeIteuint64_t m = *(void *)a2;
  *(_DWORD *)(FreeItem + 8) = *(_DWORD *)(a2 + 8);
  int v24 = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(FreeItem + 12) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(FreeItem + 28) = v24;
  uint64_t v25 = local::MemBlock<local::QuickHullHalfEdge,false>::getFreeItem(v22);
  *(void *)(v25 + 56) = v11;
  *(void *)uint64_t v25 = *(void *)a3;
  *(_DWORD *)(v25 + 8) = *(_DWORD *)(a3 + 8);
  int v26 = *(_DWORD *)(a3 + 28);
  *(_OWORD *)(v25 + 12) = *(_OWORD *)(a3 + 12);
  *(_DWORD *)(v25 + 28) = v26;
  uint64_t v27 = local::MemBlock<local::QuickHullHalfEdge,false>::getFreeItem(v22);
  uint64_t v28 = 0;
  *(void *)(v27 + 56) = v11;
  *(void *)uint64_t v27 = *(void *)a4;
  *(_DWORD *)(v27 + 8) = *(_DWORD *)(a4 + 8);
  long long v29 = *(_OWORD *)(a4 + 12);
  *(_DWORD *)(v27 + 28) = *(_DWORD *)(a4 + 28);
  *(_OWORD *)(v27 + 12) = v29;
  *(void *)(FreeItem + 32) = v27;
  *(void *)(FreeItem + 40) = v25;
  *(void *)(v25 + 32) = FreeItem;
  *(void *)(v25 + 40) = v27;
  *(void *)(v27 + 32) = v25;
  *(void *)(v27 + 40) = FreeItem;
  *(void *)uint64_t v11 = FreeItem;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 0;
  float v31 = *(float *)FreeItem;
  float v30 = *(float *)(FreeItem + 4);
  float v32 = *(float *)(FreeItem + 8);
  float v33 = 0.0;
  int v34 = 3;
  do
  {
    float v35 = *(float **)(FreeItem + 40);
    float v36 = (float)((float)((float)(v30 - v35[1]) * (float)(v30 - v35[1]))
                + (float)((float)(v31 - *v35) * (float)(v31 - *v35)))
        + (float)((float)(v32 - v35[2]) * (float)(v32 - v35[2]));
    if (v36 > v33) {
      uint64_t v28 = FreeItem;
    }
    float v32 = v35[2];
    if (v36 > v33) {
      float v33 = v36;
    }
    float v30 = v35[1];
    float v31 = *v35;
    FreeIteuint64_t m = *(void *)(FreeItem + 40);
    --v34;
  }
  while (v34);
  uint64_t v37 = *(void *)(v28 + 40);
  float v39 = *(float *)v28;
  float v38 = *(float *)(v28 + 4);
  float v40 = *(float *)v37 - *(float *)v28;
  float v41 = *(float *)(v37 + 4) - v38;
  float v42 = *(float *)(v28 + 8);
  float v43 = *(float *)(v37 + 8) - v42;
  *(_DWORD *)(v11 + 40) = *(_DWORD *)v28;
  *(float *)(v11 + 44) = v38;
  *(float *)(v11 + 48) = v42;
  unsigned __int16 v44 = 1;
  float v45 = 0.0;
  float v46 = 0.0;
  float v47 = 0.0;
  do
  {
    ++v44;
    float v39 = v39 + *(float *)v37;
    float v38 = v38 + *(float *)(v37 + 4);
    float v42 = v42 + *(float *)(v37 + 8);
    *(float *)(v11 + 40) = v39;
    *(float *)(v11 + 44) = v38;
    *(float *)(v11 + 48) = v42;
    uint64_t v37 = *(void *)(v37 + 40);
    float v48 = *(float *)v37 - *(float *)v28;
    float v49 = *(float *)(v37 + 4) - *(float *)(v28 + 4);
    float v50 = *(float *)(v37 + 8) - *(float *)(v28 + 8);
    float v47 = v47 + (float)((float)(v49 * (float)-v43) + (float)(v41 * v50));
    float v46 = v46 + (float)((float)(v50 * (float)-v40) + (float)(v43 * v48));
    *(float *)(v11 + 24) = v47;
    *(float *)(v11 + 28) = v46;
    float v45 = v45 + (float)((float)(v48 * (float)-v41) + (float)(v40 * v49));
    *(float *)(v11 + 32) = v45;
  }
  while (v37 != v28);
  *(_WORD *)(v11 + 8) = v44;
  float v51 = sqrtf((float)((float)(v46 * v46) + (float)(v47 * v47)) + (float)(v45 * v45));
  if (v51 > 0.0)
  {
    float v47 = v47 * (float)(1.0 / v51);
    float v46 = v46 * (float)(1.0 / v51);
    *(float *)(v11 + 24) = v47;
    *(float *)(v11 + 28) = v46;
    float v45 = v45 * (float)(1.0 / v51);
    *(float *)(v11 + 32) = v45;
  }
  float v52 = 1.0 / (float)v44;
  float v53 = v52 * v39;
  *(float *)(v11 + 36) = v51;
  *(float *)(v11 + 40) = v53;
  float v54 = v52 * v38;
  float v55 = v52 * v42;
  *(float *)(v11 + 44) = v54;
  *(float *)(v11 + 48) = v55;
  *(float *)(v11 + 52) = (float)((float)(v54 * v46) + (float)(v47 * v53)) + (float)(v45 * v55);
  return v11;
}

uint64_t local::QuickHull::buildHull(int8x8_t *this, double a2, __n128 a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  uint64_t v11 = (float *)&this[18];
  uint64_t v12 = (char *)&this[18] + 4;
  int v13 = this + 19;
  uint64_t v255 = *MEMORY[0x263EF8340];
  float v14 = (__n128 *)((char *)&this[19] + 4);
  uint64_t v15 = (float *)&this[30];
  unsigned int v16 = (char *)&this[30] + 4;
  uint64_t v17 = this + 31;
  int v18 = (__n128 *)((char *)&this[31] + 4);
  uint64_t v19 = this + 22;
  uint64_t v20 = (float *)&this[22] + 1;
  uint64_t v21 = this + 23;
  float v22 = (__n128 *)((char *)&this[23] + 4);
  float v23 = (float *)&this[34] + 1;
  int v24 = this + 35;
  uint64_t v25 = (__n128 *)((char *)&this[35] + 4);
  int v26 = this + 26;
  uint64_t v27 = (char *)&this[26] + 4;
  uint64_t v28 = (float *)&this[27];
  long long v29 = (char *)&this[27] + 4;
  long long v30 = 0uLL;
  uint64_t v238 = this + 15;
  uint64_t v236 = this + 49;
  float v31 = this + 47;
  float v234 = v12;
  int v235 = v11;
  unsigned int v232 = v14;
  unint64_t v233 = v13;
  uint64_t v231 = v15;
LABEL_2:
  if (!this[17].i8[4])
  {
    uint64_t v32 = 0;
    int8x8_t v33 = this[6];
    int v34 = (long long *)(*(void *)&v33 + 12);
    do
    {
      float v35 = &this[v32];
      v35[18] = **(int8x8_t **)&v33;
      v35[19].i32[0] = *(_DWORD *)(*(void *)&v33 + 8);
      long long v36 = *v34;
      v35[21].i32[1] = *(_DWORD *)(*(void *)&v33 + 28);
      *(_OWORD *)&v35[19].u8[4] = v36;
      v35[30] = **(int8x8_t **)&v33;
      v35[31].i32[0] = *(_DWORD *)(*(void *)&v33 + 8);
      long long v37 = *v34;
      v35[33].i32[1] = *(_DWORD *)(*(void *)&v33 + 28);
      *(_OWORD *)&v35[31].u8[4] = v37;
      v32 += 4;
    }
    while (v32 != 12);
    float v38 = *(float *)v33.i32[0];
    a3.n128_u32[0] = *(_DWORD *)(*(void *)&v33 + 4);
    float v39 = *(float *)(*(void *)&v33 + 8);
    uint64_t v40 = this[4].u32[0];
    if (v40 >= 2)
    {
      float v41 = (__n128 *)(*(void *)&v33 + 44);
      uint64_t v42 = v40 - 1;
      float v43 = v38;
      float v44 = a3.n128_f32[0];
      float v45 = v39;
      while (1)
      {
        float v46 = v41[-1].n128_f32[1];
        if (v46 <= v43)
        {
          float v47 = v11;
          float v48 = v12;
          float v49 = v13;
          float v50 = v14;
          float v51 = v41[-1].n128_f32[1];
          if (v46 >= v38) {
            goto LABEL_11;
          }
        }
        else
        {
          float v47 = v15;
          float v48 = v16;
          float v49 = v17;
          float v50 = v18;
          float v43 = v41[-1].n128_f32[1];
          float v51 = v38;
        }
        *float v47 = v46;
        *float v48 = v41[-1].n128_u32[2];
        v49->i32[0] = v41[-1].n128_i32[3];
        __n128 v52 = *v41;
        v50[1].n128_u32[0] = v41[1].n128_u32[0];
        *float v50 = v52;
        float v38 = v51;
LABEL_11:
        float v53 = v41[-1].n128_f32[2];
        if (v53 <= v44)
        {
          float v54 = v19;
          float v55 = v20;
          unint64_t v56 = v21;
          uint64_t v57 = v22;
          unsigned __int32 v58 = v41[-1].n128_u32[2];
          if (v53 >= a3.n128_f32[0]) {
            goto LABEL_15;
          }
        }
        else
        {
          float v54 = this + 34;
          float v55 = v23;
          unint64_t v56 = v24;
          uint64_t v57 = v25;
          float v44 = v41[-1].n128_f32[2];
          unsigned __int32 v58 = a3.n128_u32[0];
        }
        v54->i32[0] = v41[-1].n128_i32[1];
        *float v55 = v53;
        v56->i32[0] = v41[-1].n128_i32[3];
        a3 = *v41;
        v57[1].n128_u32[0] = v41[1].n128_u32[0];
        *uint64_t v57 = a3;
        a3.n128_u32[0] = v58;
LABEL_15:
        float v59 = v41[-1].n128_f32[3];
        if (v59 > v45)
        {
          uint64_t v61 = (_DWORD *)&this[38] + 1;
          unsigned int v60 = this + 38;
          int v62 = (char *)&this[39] + 4;
          int v63 = (float *)&this[39];
          float v45 = v41[-1].n128_f32[3];
          a9 = v39;
LABEL_18:
          v60->i32[0] = v41[-1].n128_i32[1];
          *uint64_t v61 = v41[-1].n128_u32[2];
          *int v63 = v59;
          __n128 v64 = *v41;
          *((_DWORD *)v62 + 4) = v41[1].n128_u32[0];
          *(__n128 *)int v62 = v64;
          float v39 = a9;
          goto LABEL_19;
        }
        unsigned int v60 = v26;
        uint64_t v61 = v27;
        int v63 = v28;
        int v62 = v29;
        a9 = v41[-1].n128_f32[3];
        if (v59 < v39) {
          goto LABEL_18;
        }
LABEL_19:
        v41 += 2;
        if (!--v42) {
          goto LABEL_22;
        }
      }
    }
    float v45 = *(float *)(*(void *)&v33 + 8);
    float v44 = *(float *)(*(void *)&v33 + 4);
    float v43 = *(float *)v33.i32[0];
LABEL_22:
    float v65 = (float)((float)(v45 + (float)((float)(v44 + (float)(v43 - v38)) - a3.n128_f32[0])) - v39) * 0.5;
    a3.n128_u32[0] = 884998144;
    v66.i32[0] = vdup_lane_s32((int32x2_t)a3.n128_u64[0], 0).u32[0];
    v66.i32[1] = *(_DWORD *)(*(void *)this + 4);
    float32x2_t v67 = vmul_n_f32(v66, v65);
    this[42] = vbsl_s8((int8x8_t)vcgt_f32(v67, v66), (int8x8_t)v67, (int8x8_t)v66);
  }
  unsigned int v68 = 0;
  uint64_t v69 = 0;
  LODWORD(v70) = 0;
  float v71 = 0.0;
  do
  {
    float v72 = v15[v69] - v15[v69 - 24];
    if (v72 <= v71) {
      uint64_t v70 = v70;
    }
    else {
      uint64_t v70 = v68;
    }
    if (v72 > v71) {
      float v71 = v15[v69] - v15[v69 - 24];
    }
    v69 += 9;
    ++v68;
  }
  while (v69 != 27);
  float v73 = *(float *)this[42].i32;
  if (v71 <= v73)
  {
    uint64_t v227 = physx::shdfnd::Foundation::mInstance;
    float v228 = "QuickHullConvexHullLib::findSimplex: Simplex input points appers to be almost at the same place";
    uint64_t v229 = 877;
LABEL_193:
    physx::shdfnd::Foundation::error(v227, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", v229, v228, (uint64_t)v20, (uint64_t)v21, (uint64_t)v22, v230);
    return 4;
  }
  uint64_t v74 = &this[4 * v70];
  uint64_t v239 = (uint64_t)v74[30];
  float32x2_t v75 = (float32x2_t)v239;
  float v76 = *(float *)v74[31].i32;
  long long v241 = *(_OWORD *)&v74[31].u8[4];
  __int32 v242 = v74[33].i32[1];
  float v77 = *(float *)v74[18].i32;
  float v78 = *(float *)&v74[18].i32[1];
  float v240 = v76;
  *(float *)uint64_t v243 = v77;
  float v79 = *(float *)v74[19].i32;
  *(float *)&v243[1] = v78;
  float v244 = v79;
  long long v80 = *(_OWORD *)&v74[19].u8[4];
  long long v245 = v80;
  __int32 v246 = v74[21].i32[1];
  float v81 = v77 - *(float *)&v239;
  float v82 = *((float *)&v239 + 1);
  float v83 = v78 - *((float *)&v239 + 1);
  float v84 = v79 - v76;
  float v85 = sqrtf((float)((float)(v83 * v83) + (float)(v81 * v81)) + (float)(v84 * v84));
  if (v85 > 0.0)
  {
    float v85 = 1.0 / v85;
    float v81 = v81 * v85;
    float v83 = v83 * v85;
    float v84 = v84 * v85;
  }
  uint64_t v86 = this[4].u32[0];
  if (v86)
  {
    float v87 = -v81;
    float v88 = -v83;
    uint64_t v89 = *(void *)&this[6] + 12;
    float v90 = 0.0;
    uint64_t v91 = this[4].u32[0];
    do
    {
      float v92 = *(float *)(v89 - 12);
      float v93 = *(float *)(v89 - 8);
      float v94 = *(float *)(v89 - 4);
      float v95 = (float)((float)(v93 - *((float *)&v239 + 1)) * (float)-v84) + (float)(v83 * (float)(v94 - v76));
      float v96 = (float)((float)(v94 - v76) * v87) + (float)(v84 * (float)(v92 - *(float *)&v239));
      float v97 = (float)((float)(v92 - *(float *)&v239) * v88) + (float)(v81 * (float)(v93 - *((float *)&v239 + 1)));
      if ((float)((float)((float)(v96 * v96) + (float)(v95 * v95)) + (float)(v97 * v97)) > v90
        && *(_DWORD *)v89 != v241
        && *(_DWORD *)v89 != v245)
      {
        long long v248 = *(_OWORD *)v89;
        *(float *)&long long v80 = v94;
        a9 = v93;
        float v9 = v92;
        int v249 = *(_DWORD *)(v89 + 16);
        float v85 = (float)((float)(v93 - *((float *)&v239 + 1)) * (float)-v84) + (float)(v83 * (float)(v94 - v76));
        float v79 = (float)((float)(v94 - v76) * v87) + (float)(v84 * (float)(v92 - *(float *)&v239));
        float v78 = (float)((float)(v92 - *(float *)&v239) * v88) + (float)(v81 * (float)(v93 - *((float *)&v239 + 1)));
        float v90 = (float)((float)(v96 * v96) + (float)(v95 * v95)) + (float)(v97 * v97);
      }
      v89 += 32;
      --v91;
    }
    while (v91);
    *(float *)float v247 = v9;
    *(float *)&v247[1] = a9;
    v247[2] = v80;
  }
  else
  {
    float v90 = 0.0;
  }
  if (sqrtf(v90) <= v73)
  {
    uint64_t v227 = physx::shdfnd::Foundation::mInstance;
    float v228 = "QuickHullConvexHullLib::findSimplex: Simplex input points appers to be colinear.";
    uint64_t v229 = 912;
    goto LABEL_193;
  }
  float v99 = sqrtf((float)((float)(v79 * v79) + (float)(v85 * v85)) + (float)(v78 * v78));
  if (v99 > 0.0)
  {
    float v100 = 1.0 / v99;
    float v85 = v85 * v100;
    float v79 = v79 * v100;
    float v78 = v78 * v100;
  }
  float v101 = (float)(a9 * v79) + (float)(v9 * v85);
  float v102 = v101 + (float)(*(float *)&v80 * v78);
  if (v86)
  {
    int v103 = (float *)(*(void *)&this[6] + 12);
    float v104 = 0.0;
    do
    {
      float v105 = *(v103 - 3);
      float v106 = *(v103 - 2);
      float v107 = *(v103 - 1);
      float v108 = vabds_f32((float)((float)(v79 * v106) + (float)(v105 * v85)) + (float)(v107 * v78), v102);
      if (v108 > v104)
      {
        float v109 = *v103;
        BOOL v110 = *(_DWORD *)v103 == v241 || LODWORD(v109) == v245;
        if (!v110 && LODWORD(v109) != v248)
        {
          long long v251 = *(_OWORD *)v103;
          int v252 = *((_DWORD *)v103 + 4);
          float v101 = v107;
          float v9 = v106;
          float v82 = v105;
          float v104 = v108;
        }
      }
      v103 += 8;
      --v86;
    }
    while (v86);
    *(float *)uint64_t v250 = v82;
    *(float *)&v250[1] = v9;
    *(float *)&v250[2] = v101;
  }
  else
  {
    float v104 = 0.0;
  }
  if (fabsf(v104) <= v73)
  {
    uint64_t v227 = physx::shdfnd::Foundation::mInstance;
    float v228 = "QuickHullConvexHullLib::findSimplex: Simplex input points appers to be coplanar.";
    uint64_t v229 = 935;
    goto LABEL_193;
  }
  for (uint64_t i = 0; i != 24; i += 8)
  {
    float32x2_t v75 = vadd_f32(v75, *(float32x2_t *)&v243[i]);
    float v76 = v76 + *(float *)((char *)&v244 + i * 4);
  }
  float v113 = (float)((float)((float)(v79 * v9) + (float)(v82 * v85)) + (float)(v101 * v78)) - v102;
  __asm { FMOV            V3.2S, #0.25 }
  this[2] = (int8x8_t)vmul_f32(v75, _D3);
  *(float *)this[3].i32 = v76 * 0.25;
  long long v253 = v30;
  long long v254 = v30;
  if (v113 >= 0.0)
  {
    Triangle = (uint64_t *)local::QuickHull::createTriangle((uint64_t)this, (uint64_t)&v239, (uint64_t)v247, (uint64_t)v243);
    *(void *)&long long v253 = Triangle;
    *((void *)&v253 + 1) = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)&v239, (uint64_t)v243);
    *(void *)&long long v254 = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)v243, (uint64_t)v247);
    uint64_t v133 = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)v247, (uint64_t)&v239);
    uint64_t v134 = 0;
    *((void *)&v254 + 1) = v133;
    int v135 = -3;
    do
    {
      uint64_t v136 = v134 + 1;
      uint64_t v137 = (uint64_t *)*((void *)&v253 + v134 + 1);
      uint64_t v138 = *v137;
      uint64_t v139 = v134 + 2;
      if (v134 == 2) {
        uint64_t v139 = 1;
      }
      uint64_t v140 = *(void *)(**((void **)&v253 + v139) + 40);
      *(void *)(v138 + 48) = v140;
      *(void *)(v140 + 48) = v138;
      uint64_t v141 = *(void *)(*(void *)(*v137 + 40) + 40);
      uint64_t v142 = *Triangle;
      if (v134)
      {
        int v143 = v135;
        do
        {
          uint64_t v142 = *(void *)(v142 + 40);
          _CF = __CFADD__(v143++, 1);
        }
        while (!_CF);
      }
      *(void *)(v141 + 48) = v142;
      *(void *)(v142 + 48) = v141;
      ++v135;
      uint64_t v134 = v136;
    }
    while (v136 != 3);
  }
  else
  {
    int v118 = (uint64_t *)local::QuickHull::createTriangle((uint64_t)this, (uint64_t)&v239, (uint64_t)v243, (uint64_t)v247);
    *(void *)&long long v253 = v118;
    uint64_t v119 = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)v243, (uint64_t)&v239);
    *((void *)&v253 + 1) = v119;
    unsigned int v120 = (uint64_t *)local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)v247, (uint64_t)v243);
    *(void *)&long long v254 = v120;
    *((void *)&v254 + 1) = local::QuickHull::createTriangle((uint64_t)this, (uint64_t)v250, (uint64_t)&v239, (uint64_t)v247);
    uint64_t v121 = *(void *)(*(void *)v119 + 40);
    uint64_t v122 = *v120;
    *(void *)(v121 + 48) = *v120;
    *(void *)(v122 + 48) = v121;
    uint64_t v123 = *(void *)(*(void *)(*(void *)v119 + 40) + 40);
    uint64_t v124 = *v118;
    int v125 = -1;
    uint64_t v126 = 1;
    do
    {
      int v127 = v125;
      do
      {
        uint64_t v124 = *(void *)(v124 + 40);
        _CF = __CFADD__(v127++, 1);
      }
      while (!_CF);
      *(void *)(v123 + 48) = v124;
      *(void *)(v124 + 48) = v123;
      uint64_t v128 = v126 + 2;
      ++v126;
      uint64_t v129 = *((void *)&v253 + v126);
      uint64_t v130 = *(void *)(*(void *)v129 + 40);
      --v125;
      if (v126 == 3) {
        uint64_t v128 = 1;
      }
      uint64_t v131 = **((void **)&v253 + v128);
      *(void *)(v130 + 48) = v131;
      *(void *)(v131 + 48) = v130;
      uint64_t v123 = *(void *)(*(void *)(*(void *)v129 + 40) + 40);
      uint64_t v124 = *v118;
    }
    while (v126 != 3);
    *(void *)(v123 + 48) = v124;
    *(void *)(v124 + 48) = v123;
  }
  for (uint64_t j = 0; j != 32; j += 8)
  {
    uint64_t v145 = (void *)((char *)&v253 + j);
    uint64_t v146 = this[16].u32[0];
    if ((this[16].i32[1] & 0x7FFFFFFFu) <= v146)
    {
      physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack((uint64_t)v238, v145);
    }
    else
    {
      *(void *)(*(void *)&this[15] + 8 * v146) = *v145;
      this[16].i32[0] = v146 + 1;
    }
  }
  this[17].i32[0] = 4;
  uint64_t v147 = this[4].u32[0];
  if (v147)
  {
    uint64_t v148 = 0;
    int8x8_t v149 = this[6];
    int v150 = v241;
    int v151 = v245;
    int v152 = v248;
    int v153 = v251;
    do
    {
      uint64_t v154 = *(void *)&v149 + 32 * v148;
      int v155 = *(_DWORD *)(v154 + 12);
      if (v155 != v150 && v155 != v151 && v155 != v152 && v155 != v153)
      {
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        float v161 = *(float *)this[42].i32;
        float v162 = *(float *)v154;
        float v163 = *(float *)(v154 + 4);
        float v164 = *(float *)(v154 + 8);
        do
        {
          int v165 = *(float **)((char *)&v253 + v159);
          float v166 = v165[13];
          if ((float)((float)((float)((float)(v163 * v165[7]) + (float)(v165[6] * v162)) + (float)(v165[8] * v164))
                     - v166) > v161)
          {
            float v161 = (float)((float)((float)(v163 * v165[7]) + (float)(v165[6] * v162)) + (float)(v165[8] * v164)) - v166;
            uint64_t v160 = *(void *)((char *)&v253 + v159);
          }
          v159 += 8;
        }
        while (v159 != 32);
        if (v160)
        {
          uint64_t v167 = *(void *)&v149 + 32 * v148;
          *(float *)(v167 + 16) = v161;
          float v168 = (float *)(v167 + 16);
          uint64_t v169 = *(void *)(v160 + 16);
          if (v169)
          {
            if (*(float *)(v169 + 16) <= v161)
            {
              *(void *)(*(void *)&v149 + 32 * v148 + 24) = v169;
              *(void *)(v160 + 16) = v154;
            }
            else
            {
              *(void *)(*(void *)&v149 + 32 * v148 + 24) = *(void *)(v169 + 24);
              *(void *)(v169 + 24) = v154;
            }
          }
          else
          {
            *(void *)(v160 + 16) = v154;
            *float v168 = v161;
            *(void *)(*(void *)&v149 + 32 * v148 + 24) = 0;
          }
        }
      }
      ++v148;
    }
    while (v148 != v147);
  }
  int8x8_t v170 = this[1];
  uint64_t v171 = this[16].u32[0];
  if ((*(_WORD *)(*(void *)&v170 + 72) & 4) == 0)
  {
LABEL_114:
    if (this[16].i32[0])
    {
      unsigned int v174 = 4;
      while (1)
      {
        uint64_t v175 = 0;
        uint64_t v176 = 0;
        float v177 = *(float *)&this[42].i32[1];
        uint64_t v178 = (uint64_t *)this[15];
        do
        {
          uint64_t v179 = *v178;
          if (!*(_DWORD *)(*v178 + 60))
          {
            uint64_t v180 = *(void *)(v179 + 16);
            if (v180)
            {
              if (v177 < *(float *)(v180 + 16))
              {
                uint64_t v176 = *(void *)(v179 + 16);
                uint64_t v175 = *v178;
                float v177 = *(float *)(v180 + 16);
              }
            }
          }
          ++v178;
          --v171;
        }
        while (v171);
        int8x8_t v170 = this[1];
        if (!v176
          || *(_DWORD *)(v176 + 12) == this[5].i32[0]
          || (*(_WORD *)(*(void *)&v170 + 72) & 0x20) != 0 && v174 >= *(unsigned __int16 *)(*(void *)&v170 + 74))
        {
          goto LABEL_189;
        }
        *(void *)(v175 + 16) = *(void *)(*(void *)(v175 + 16) + 24);
        local::QuickHull::calculateHorizon((uint64_t)this, (float *)v176, 0, v175, (uint64_t)&this[45], (uint64_t)v236);
        __int32 v181 = this[17].i32[0];
        if ((this[46].i32[0] + v181) >= 0x100)
        {
          __int32 v223 = this[50].i32[0];
          if (v223)
          {
            float v224 = (uint64_t *)*v236;
            uint64_t v225 = this[50].u32[0];
            do
            {
              uint64_t v226 = *v224++;
              *(_DWORD *)(v226 + 60) = 0;
              --v225;
            }
            while (v225);
          }
          this[17].i32[0] = v223 + v181;
          this[4].i32[1] = v174;
          return 3;
        }
        unsigned int v237 = v174;
        unint64_t v182 = 0;
        uint64_t v183 = 0;
        uint64_t v184 = 0;
        do
        {
          uint64_t v185 = *(void *)(*(void *)&this[45] + 8 * v182);
          uint64_t v186 = local::QuickHull::createTriangle((uint64_t)this, v176, *(void *)(v185 + 48), v185);
          uint64_t v187 = v186;
          uint64_t v239 = v186;
          uint64_t v188 = this[16].u32[0];
          if ((this[16].i32[1] & 0x7FFFFFFFu) <= v188)
          {
            physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack((uint64_t)v238, &v239);
          }
          else
          {
            *(void *)(*(void *)&this[15] + 8 * v188) = v186;
            this[16].i32[0] = v188 + 1;
          }
          ++this[17].i32[0];
          uint64_t v189 = *(void *)v187;
          uint64_t v190 = *(void *)(*(void *)v187 + 40);
          uint64_t v191 = *(void *)(v190 + 40);
          uint64_t v192 = *(void *)(v185 + 48);
          *(void *)(v191 + 48) = v192;
          *(void *)(v192 + 48) = v191;
          uint64_t v193 = v189;
          if (v183)
          {
            *(void *)(v190 + 48) = v183;
            *(void *)(v183 + 48) = v190;
            uint64_t v193 = v184;
          }
          uint64_t v194 = this[48].u32[0];
          if ((this[48].i32[1] & 0x7FFFFFFFu) <= v194)
          {
            physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack((uint64_t)&this[47], &v239);
          }
          else
          {
            *(void *)(*(void *)&this[47] + 8 * v194) = v187;
            this[48].i32[0] = v194 + 1;
          }
          ++v182;
          uint64_t v183 = v189;
          uint64_t v184 = v193;
        }
        while (v182 < this[46].u32[0]);
        uint64_t v195 = *(void *)(v193 + 40);
        *(void *)(v195 + 48) = v189;
        *(void *)(v189 + 48) = v195;
        LOBYTE(v239) = 0;
        unint64_t v196 = this[48].u32[0];
        if (v196)
        {
          unint64_t v197 = 0;
          unsigned int v198 = v237;
          do
          {
            uint64_t v199 = *(void *)(*(void *)v31 + 8 * v197);
            if (!*(_DWORD *)(v199 + 60))
            {
              while ((local::QuickHull::doAdjacentMerge((uint64_t)this, v199, 1, &v239) & 1) != 0)
                ;
              unint64_t v196 = this[48].u32[0];
            }
            ++v197;
          }
          while (v197 < v196);
          if ((_BYTE)v239) {
            goto LABEL_172;
          }
          if (v196)
          {
            for (unint64_t k = 0; k < v196; ++k)
            {
              uint64_t v201 = *(void *)(*(void *)v31 + 8 * k);
              if (*(_DWORD *)(v201 + 60) == 2)
              {
                *(_DWORD *)(v201 + 60) = 0;
                while ((local::QuickHull::doAdjacentMerge((uint64_t)this, v201, 0, &v239) & 1) != 0)
                  ;
                unint64_t v196 = this[48].u32[0];
              }
            }
            if ((_BYTE)v239)
            {
LABEL_172:
              this[5].i32[0] = *(_DWORD *)(v176 + 12);
              unint64_t v218 = this[10].u32[0];
              int v24 = this + 35;
              float v23 = (float *)&this[34] + 1;
              int v26 = this + 26;
              uint64_t v25 = (__n128 *)((char *)&this[35] + 4);
              if (v218)
              {
                for (unint64_t m = 0; m < v218; ++m)
                {
                  if (*(void *)(*(void *)&this[9] + 8 * m))
                  {
                    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
                    unint64_t v218 = this[10].u32[0];
                  }
                }
              }
              this[10].i32[0] = 0;
              this[7].i32[1] = 0;
              this[8].i32[0] = 0;
              local::MemBlock<local::QuickHullHalfEdge,false>::init((uint64_t)&this[7], this[7].u32[0]);
              unint64_t v220 = this[14].u32[0];
              if (v220)
              {
                for (unint64_t n = 0; n < v220; ++n)
                {
                  if (*(void *)(*(void *)&this[13] + 8 * n))
                  {
                    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
                    unint64_t v220 = this[14].u32[0];
                  }
                }
              }
              this[14].i32[0] = 0;
              this[11].i32[1] = 0;
              this[12].i32[0] = 0;
              local::MemBlock<local::QuickHullFace,true>::init((unsigned int *)&this[11], this[11].u32[0]);
              this[16].i32[0] = 0;
              this[17].i32[0] = 0;
              this[44].i32[0] = 0;
              this[46].i32[0] = 0;
              this[48].i32[0] = 0;
              this[50].i32[0] = 0;
              this[52].i32[0] = 0;
              uint64_t v12 = v234;
              uint64_t v11 = v235;
              float v14 = v232;
              int v13 = v233;
              unsigned int v16 = (char *)&this[30] + 4;
              uint64_t v15 = v231;
              int v18 = (__n128 *)((char *)&this[31] + 4);
              uint64_t v17 = this + 31;
              uint64_t v20 = (float *)&this[22] + 1;
              uint64_t v19 = this + 22;
              float v22 = (__n128 *)((char *)&this[23] + 4);
              uint64_t v21 = this + 23;
              uint64_t v28 = (float *)&this[27];
              uint64_t v27 = (char *)&this[26] + 4;
              long long v29 = (char *)&this[27] + 4;
              long long v30 = 0uLL;
              goto LABEL_2;
            }
          }
        }
        else
        {
          unint64_t v196 = 0;
          unsigned int v198 = v237;
        }
        uint64_t v202 = this[44].u32[0];
        if (v202)
        {
          uint64_t v203 = 0;
          int8x8_t v204 = this[47];
          int8x8_t v205 = this[43];
          float v206 = *(float *)this[42].i32;
          do
          {
            if (v196)
            {
              float v207 = 0;
              uint64_t v208 = *(void *)(*(void *)&v205 + 8 * v203);
              float v209 = (float **)v204;
              unint64_t v210 = v196;
              float v211 = v206;
              do
              {
                float v212 = *v209;
                if (!*((_DWORD *)*v209 + 15))
                {
                  float v213 = *(float *)(v208 + 8);
                  float v214 = v212[6];
                  float v215 = v212[7];
                  float v216 = v212[13];
                  if ((float)((float)((float)((float)(*(float *)(v208 + 4) * v215) + (float)(v214 * *(float *)v208))
                                     + (float)(v212[8] * v213))
                             - v216) > v211)
                  {
                    float v211 = (float)((float)((float)(*(float *)(v208 + 4) * v215) + (float)(v214 * *(float *)v208))
                                 + (float)(v212[8] * v213))
                         - v216;
                    float v207 = *v209;
                  }
                }
                ++v209;
                --v210;
              }
              while (v210);
              if (v207)
              {
                *(float *)(v208 + 16) = v211;
                uint64_t v217 = *((void *)v207 + 2);
                if (v217)
                {
                  if (*(float *)(v217 + 16) <= v211)
                  {
                    *(void *)(v208 + 24) = v217;
                    *((void *)v207 + 2) = v208;
                  }
                  else
                  {
                    *(void *)(v208 + 24) = *(void *)(v217 + 24);
                    *(void *)(v217 + 24) = v208;
                  }
                }
                else
                {
                  *((void *)v207 + 2) = v208;
                  *(float *)(v208 + 16) = v211;
                  *(void *)(v208 + 24) = 0;
                }
              }
            }
            ++v203;
          }
          while (v203 != v202);
        }
        this[44].i32[0] = 0;
        this[46].i32[0] = 0;
        this[48].i32[0] = 0;
        this[50].i32[0] = 0;
        unsigned int v174 = v198 + 1;
        uint64_t v171 = this[16].u32[0];
        if (!v171)
        {
          int8x8_t v170 = this[1];
          goto LABEL_189;
        }
      }
    }
LABEL_188:
    unsigned int v174 = 4;
LABEL_189:
    this[4].i32[1] = v174;
    return 2 * (v174 > *(unsigned __int16 *)(*(void *)&v170 + 74));
  }
  if (!this[16].i32[0]) {
    goto LABEL_188;
  }
  int8x8_t v172 = *v238;
  uint64_t v173 = this[16].u32[0];
  while (*(float *)(**(void **)&v172 + 36) >= (float)(*(float *)this->i32[0] + *(float *)this->i32[0]))
  {
    *(void *)&v172 += 8;
    if (!--v173) {
      goto LABEL_114;
    }
  }
  return 1;
}

uint64_t local::QuickHull::calculateHorizon(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = local::QuickHull::deleteFacePoints(a1, a4, 0);
  *(_DWORD *)(a4 + 60) = 1;
  uint64_t v17 = a4;
  uint64_t v13 = *(unsigned int *)(a6 + 8);
  if ((*(_DWORD *)(a6 + 12) & 0x7FFFFFFFu) <= v13)
  {
    uint64_t result = physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(a6, &v17);
  }
  else
  {
    *(void *)(*(void *)a6 + 8 * v13) = a4;
    *(_DWORD *)(a6 + 8) = v13 + 1;
  }
  --*(_DWORD *)(a1 + 136);
  if (a3)
  {
    uint64_t v14 = *(void *)(a3 + 40);
  }
  else
  {
    uint64_t v14 = *(void *)a4;
    a3 = v14;
  }
  uint64_t v17 = v14;
  do
  {
    uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 56);
    if (!*(_DWORD *)(v15 + 60))
    {
      if ((float)((float)((float)((float)(a2[1] * *(float *)(v15 + 28)) + (float)(*(float *)(v15 + 24) * *a2))
                         + (float)(*(float *)(v15 + 32) * a2[2]))
                 - *(float *)(v15 + 52)) <= *(float *)(a1 + 336))
      {
        uint64_t v16 = *(unsigned int *)(a5 + 8);
        if ((*(_DWORD *)(a5 + 12) & 0x7FFFFFFFu) <= v16)
        {
          uint64_t result = physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::growAndPushBack(a5, &v17);
        }
        else
        {
          *(void *)(*(void *)a5 + 8 * v16) = v14;
          *(_DWORD *)(a5 + 8) = v16 + 1;
        }
      }
      else
      {
        uint64_t result = local::QuickHull::calculateHorizon(a1, a2);
      }
    }
    uint64_t v14 = *(void *)(v14 + 40);
    uint64_t v17 = v14;
  }
  while (v14 != a3);
  return result;
}

uint64_t local::QuickHull::doAdjacentMerge(uint64_t a1, uint64_t a2, int a3, unsigned char *a4)
{
  uint64_t v7 = *(void **)a2;
  *a4 = 0;
  float v8 = *(float *)(a2 + 36);
  char v9 = 1;
  while (1)
  {
    uint64_t v10 = v7[6];
    uint64_t v11 = *(float **)(v10 + 56);
    if (!a3) {
      break;
    }
    if (v8 <= v11[9])
    {
      float v12 = -*(float *)(a1 + 336);
      if ((float)((float)((float)((float)(*(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 44) * v11[7])
                                 + (float)(v11[6] * *(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 40)))
                         + (float)(v11[8] * *(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 48)))
                 - v11[13]) > v12)
        goto LABEL_16;
      uint64_t v16 = (float *)v7[7];
      float v13 = (float)((float)(v11[11] * v16[7]) + (float)(v16[6] * v11[10])) + (float)(v16[8] * v11[12]);
      float v14 = v16[13];
    }
    else
    {
      float v12 = -*(float *)(a1 + 336);
      if ((float)((float)((float)((float)(v11[11] * *(float *)(v7[7] + 28))
                                 + (float)(*(float *)(v7[7] + 24) * v11[10]))
                         + (float)(*(float *)(v7[7] + 32) * v11[12]))
                 - *(float *)(v7[7] + 52)) > v12)
        goto LABEL_16;
      float v13 = (float)((float)(*(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 44) * v11[7])
                  + (float)(v11[6] * *(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 40)))
          + (float)(v11[8] * *(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 48));
      float v14 = v11[13];
    }
    if ((float)(v13 - v14) > v12) {
      char v9 = 0;
    }
LABEL_13:
    uint64_t v7 = (void *)v7[5];
    if (v7 == *(void **)a2)
    {
      uint64_t result = 0;
      if ((v9 & 1) == 0) {
        *(_DWORD *)(a2 + 60) = 2;
      }
      return result;
    }
  }
  float v15 = -*(float *)(a1 + 336);
  if ((float)((float)((float)((float)(v11[11] * *(float *)(v7[7] + 28)) + (float)(*(float *)(v7[7] + 24) * v11[10]))
                     + (float)(*(float *)(v7[7] + 32) * v11[12]))
             - *(float *)(v7[7] + 52)) <= v15
    && (float)((float)((float)((float)(*(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 44) * v11[7])
                             + (float)(v11[6] * *(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 40)))
                     + (float)(v11[8] * *(float *)(*(void *)(*(void *)(v10 + 48) + 56) + 48)))
             - v11[13]) <= v15)
  {
    goto LABEL_13;
  }
LABEL_16:
  *(_DWORD *)(a1 + 416) = 0;
  if (local::QuickHullFace::mergeAdjacentFace((uint64_t *)a2, v7, a1 + 408, v8))
  {
    int v18 = *(_DWORD *)(a1 + 416);
    *(_DWORD *)(a1 + 136) -= v18;
    if (v18)
    {
      unint64_t v19 = 0;
      do
        local::QuickHull::deleteFacePoints(a1, *(void *)(*(void *)(a1 + 408) + 8 * v19++), a2);
      while (v19 < *(unsigned int *)(a1 + 416));
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t local::QuickHull::deleteFacePoints(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = result + 344;
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v8 = v3;
            uint64_t v12 = v3;
            uint64_t v3 = *(void *)(v3 + 24);
            *(void *)(v8 + 24) = 0;
            if (a3)
            {
              float v9 = (float)((float)((float)(*(float *)(v8 + 4) * *(float *)(a3 + 28))
                                 + (float)(*(float *)(a3 + 24) * *(float *)v8))
                         + (float)(*(float *)(a3 + 32) * *(float *)(v8 + 8)))
                 - *(float *)(a3 + 52);
              if (v9 > *(float *)(v6 + 336)) {
                break;
              }
            }
            uint64_t v11 = *(unsigned int *)(v6 + 352);
            if ((*(_DWORD *)(v6 + 356) & 0x7FFFFFFFu) <= v11)
            {
              uint64_t result = physx::shdfnd::Array<local::QuickHullVertex *,physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>>::growAndPushBack(v7, &v12);
              if (!v3) {
                goto LABEL_17;
              }
            }
            else
            {
              *(void *)(*(void *)(v6 + 344) + 8 * v11) = v8;
              *(_DWORD *)(v6 + 352) = v11 + 1;
              if (!v3) {
                goto LABEL_17;
              }
            }
          }
          *(float *)(v8 + 16) = v9;
          uint64_t v10 = *(void *)(a3 + 16);
          if (v10) {
            break;
          }
          *(void *)(a3 + 16) = v8;
          *(float *)(v8 + 16) = v9;
          *(void *)(v8 + 24) = 0;
          if (!v3) {
            goto LABEL_17;
          }
        }
        if (*(float *)(v10 + 16) <= v9) {
          break;
        }
        *(void *)(v8 + 24) = *(void *)(v10 + 24);
        *(void *)(v10 + 24) = v8;
        if (!v3) {
          goto LABEL_17;
        }
      }
      *(void *)(v8 + 24) = v10;
      *(void *)(a3 + 16) = v8;
    }
    while (v3);
LABEL_17:
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

BOOL local::QuickHull::canMergeFaces(uint64_t a1, void *a2)
{
  int v2 = a2;
  uint64_t v105 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2[7];
  uint64_t v5 = *(uint64_t **)(a2[6] + 56);
  unsigned int v6 = *(unsigned __int16 *)(v4 + 8);
  unsigned int v7 = *((unsigned __int16 *)v5 + 4);
  unsigned int v8 = v7 + v6;
  v104[8] = v7 + v6 > 0xE;
  if (v7 + v6 < 0xF)
  {
    MEMORY[0x270FA5388](a1);
    float v9 = (uint64_t *)((char *)&v90 - v10);
    bzero((char *)&v90 - v10, v11);
  }
  else
  {
    float v9 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v91, 72 * (v7 + v6), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 1447);
    unsigned int v6 = *(unsigned __int16 *)(v4 + 8);
    unsigned int v7 = *((unsigned __int16 *)v5 + 4);
  }
  bzero(v9, 72 * (v6 + (unint64_t)v7));
  uint64_t v12 = 0;
  float v13 = 0;
  unsigned int v14 = 0;
  unsigned __int16 v92 = 0;
  uint64_t v93 = 0;
  float v96 = 0.0;
  unint64_t v100 = 0xFF7FFFFF00000000;
  int v101 = 0;
  uint64_t v102 = 0;
  char v103 = 0;
  uint64_t v91 = (float *)v9;
  float v15 = *(void **)v4;
  if (*(void **)v4 == v2) {
    float v15 = (void *)v2[5];
  }
  uint64_t v16 = v15;
  do
  {
    uint64_t v17 = &v9[9 * v14];
    v17[7] = &v91;
    void *v17 = *v16;
    *((_DWORD *)v17 + 2) = *((_DWORD *)v16 + 2);
    long long v18 = *(_OWORD *)((char *)v16 + 12);
    *((_DWORD *)v17 + 7) = *((_DWORD *)v16 + 7);
    *(_OWORD *)((char *)v17 + 12) = v18;
    if (v16 == v2)
    {
      uint64_t v12 = &v9[9 * v14];
      float v13 = (void *)v2[6];
    }
    unsigned int v19 = v14;
    if (!v14) {
      unsigned int v19 = *(unsigned __int16 *)(v4 + 8);
    }
    unsigned int v20 = v14++;
    unsigned int v21 = v19 - 1;
    if ((void *)v16[5] == v15) {
      unsigned int v22 = 0;
    }
    else {
      unsigned int v22 = v14;
    }
    float v23 = &v9[9 * v20];
    v23[4] = &v9[9 * v21];
    v23[5] = &v9[9 * v22];
    uint64_t v16 = (void *)v16[5];
  }
  while (v16 != v15);
  uint64_t v24 = *v5;
  do
  {
    uint64_t v25 = &v9[9 * v14];
    v25[7] = &v91;
    *uint64_t v25 = *(void *)v24;
    *((_DWORD *)v25 + 2) = *(_DWORD *)(v24 + 8);
    long long v26 = *(_OWORD *)(v24 + 12);
    *((_DWORD *)v25 + 7) = *(_DWORD *)(v24 + 28);
    *(_OWORD *)((char *)v25 + 12) = v26;
    if (v13 == (void *)v24) {
      float v13 = &v9[9 * v14];
    }
    uint64_t v27 = *v5;
    if (*(void *)(v24 + 40) == *v5)
    {
      unsigned int v29 = *(unsigned __int16 *)(v4 + 8);
      unsigned int v28 = v29;
    }
    else
    {
      unsigned int v28 = v14 + 1;
      unsigned int v29 = *(unsigned __int16 *)(v4 + 8);
    }
    unsigned int v30 = v14;
    if (v14 == v29) {
      unsigned int v30 = v14 + *((unsigned __int16 *)v5 + 4);
    }
    float v31 = &v9[9 * v14];
    v31[4] = &v9[9 * v30 - 9];
    v31[5] = &v9[9 * v28];
    ++v14;
    uint64_t v24 = *(void *)(v24 + 40);
  }
  while (v24 != v27);
  uint64_t v32 = 0;
  uint64_t v34 = v12[4];
  uint64_t v33 = v12[5];
  uint64_t v36 = v13[4];
  uint64_t v35 = v13[5];
  *(void *)(v36 + 40) = v33;
  *(void *)(v33 + 32) = v36;
  *(void *)(v34 + 40) = v35;
  *(void *)(v35 + 32) = v34;
  unint64_t v94 = 0;
  float v95 = 0.0;
  long long v37 = v91;
  float v39 = *v91;
  float v38 = v91[1];
  float v40 = 0.0;
  int v41 = 3;
  uint64_t v42 = v91;
  float v43 = v91[2];
  do
  {
    float v44 = (float *)*((void *)v42 + 5);
    float v45 = (float)((float)((float)(v38 - v44[1]) * (float)(v38 - v44[1]))
                + (float)((float)(v39 - *v44) * (float)(v39 - *v44)))
        + (float)((float)(v43 - v44[2]) * (float)(v43 - v44[2]));
    if (v45 > v40) {
      uint64_t v32 = v42;
    }
    float v43 = v44[2];
    if (v45 > v40) {
      float v40 = v45;
    }
    float v38 = v44[1];
    float v39 = *v44;
    uint64_t v42 = (float *)*((void *)v42 + 5);
    --v41;
  }
  while (v41);
  uint64_t v46 = *((void *)v32 + 5);
  float v48 = *v32;
  float v47 = v32[1];
  float v49 = *(float *)v46 - *v32;
  float v50 = *(float *)(v46 + 4) - v47;
  float v51 = v32[2];
  float v52 = *(float *)(v46 + 8) - v51;
  float v97 = *v32;
  float v98 = v47;
  float v99 = v51;
  unsigned __int16 v53 = 1;
  float v54 = 0.0;
  float v55 = 0.0;
  float v56 = 0.0;
  do
  {
    ++v53;
    float v48 = v48 + *(float *)v46;
    float v97 = v48;
    float v47 = v47 + *(float *)(v46 + 4);
    float v98 = v47;
    float v51 = v51 + *(float *)(v46 + 8);
    float v99 = v51;
    uint64_t v46 = *(void *)(v46 + 40);
    float v57 = *(float *)v46 - *v32;
    float v58 = *(float *)(v46 + 4) - v32[1];
    float v59 = *(float *)(v46 + 8) - v32[2];
    float v56 = v56 + (float)((float)(v58 * (float)-v52) + (float)(v50 * v59));
    float v55 = v55 + (float)((float)(v59 * (float)-v49) + (float)(v52 * v57));
    unint64_t v94 = __PAIR64__(LODWORD(v55), LODWORD(v56));
    float v54 = v54 + (float)((float)(v57 * (float)-v50) + (float)(v49 * v58));
    float v95 = v54;
  }
  while ((float *)v46 != v32);
  unsigned __int16 v92 = v53;
  float v60 = sqrtf((float)((float)(v55 * v55) + (float)(v56 * v56)) + (float)(v54 * v54));
  if (v60 > 0.0)
  {
    float v56 = v56 * (float)(1.0 / v60);
    float v55 = v55 * (float)(1.0 / v60);
    unint64_t v94 = __PAIR64__(LODWORD(v55), LODWORD(v56));
    float v54 = v54 * (float)(1.0 / v60);
    float v95 = v54;
  }
  float v61 = 1.0 / (float)v53;
  float v62 = v61 * v48;
  float v96 = v60;
  float v97 = v62;
  float v63 = v61 * v47;
  float v64 = v61 * v51;
  float v98 = v63;
  float v99 = v64;
  uint64_t v65 = *(unsigned int *)(a1 + 32);
  if (v65)
  {
    float v66 = (float)((float)(v63 * v55) + (float)(v56 * v62)) + (float)(v54 * v64);
    float32x2_t v67 = (float *)(*(void *)(a1 + 48) + 8);
    while ((float)((float)((float)((float)(v55 * *(v67 - 1)) + (float)(v56 * *(v67 - 2))) + (float)(v54 * *v67)) - v66) <= *(float *)(a1 + 340))
    {
      v67 += 8;
      if (!--v65) {
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    float v69 = *v91;
    float v68 = v91[1];
    float v70 = v91[2];
LABEL_39:
    long long v37 = (float *)*((void *)v37 + 5);
    float v71 = *v37 - v69;
    float v72 = v37[1] - v68;
    float v73 = v37[2] - v70;
    float v74 = sqrtf((float)((float)(v72 * v72) + (float)(v71 * v71)) + (float)(v73 * v73));
    if (v74 > 0.0)
    {
      float v75 = 1.0 / v74;
      float v71 = v71 * v75;
      float v72 = v72 * v75;
      float v73 = v73 * v75;
    }
    float v76 = v73 * (float)-v56;
    float v77 = v71 * (float)-v55;
    float v78 = -(float)((float)(v72 * (float)-v54) + (float)(v55 * v73));
    float v79 = -(float)(v76 + (float)(v54 * v71));
    float v80 = -(float)(v77 + (float)(v56 * v72));
    float v81 = v37;
    while ((float)((float)((float)((float)(v81[1] - v68) * v79) + (float)((float)(*v81 - v69) * v78))
                  + (float)((float)(v81[2] - v70) * v80)) <= *(float *)(a1 + 336))
    {
      float v81 = (float *)*((void *)v81 + 5);
      if (v81 == v37)
      {
        float v70 = v37[2];
        float v68 = v37[1];
        float v69 = *v37;
        if (v37 != v91) {
          goto LABEL_39;
        }
        uint64_t v83 = v2[5];
        float v82 = (void *)v2[6];
        uint64_t v84 = v82[7];
        uint64_t v85 = v82[4];
        do
        {
          float v82 = (void *)v82[5];
          int v2 = (void *)v2[4];
          uint64_t v86 = *(void *)(v2[6] + 56);
        }
        while (v86 == v84);
        while (1)
        {
          uint64_t v87 = *(void *)(*(void *)(v83 + 48) + 56);
          if (v87 != v84) {
            break;
          }
          uint64_t v85 = *(void *)(v85 + 32);
          uint64_t v83 = *(void *)(v83 + 40);
        }
        if (*(void *)(*(void *)(v85 + 48) + 56) != v87)
        {
          BOOL v88 = v86 != *(void *)(v82[6] + 56);
          goto LABEL_53;
        }
        break;
      }
    }
  }
  BOOL v88 = 0;
LABEL_53:
  if (v8 >= 0xF) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v104, v9);
  }
  return v88;
}

_DWORD *local::addExpandPoint(_DWORD *result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)a2;
    unsigned int v4 = v2 - 1;
    while (1)
    {
      uint64_t v5 = v4;
      if (*(_DWORD *)(v3 + 60 * v4 + 48) == result[12]
        && *(_DWORD *)(v3 + 60 * v4 + 52) == result[13]
        && *(_DWORD *)(v3 + 60 * v4 + 56) == result[14])
      {
        break;
      }
      --v4;
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v2)
    {
      return (_DWORD *)physx::shdfnd::Array<local::ExpandPoint,physx::shdfnd::ReflectionAllocator<local::ExpandPoint>>::growAndPushBack(a2, (uint64_t)result);
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)a2 + 60 * v2;
      do
      {
        *(_OWORD *)(v8 + v6 * 4) = *(_OWORD *)&result[v6];
        v6 += 4;
      }
      while (v6 != 12);
      uint64_t v9 = v7 + 60 * v2;
      uint64_t v10 = *((void *)result + 6);
      *(_DWORD *)(v9 + 56) = result[14];
      *(void *)(v9 + 48) = v10;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  return result;
}

uint64_t physx::QuickHullConvexHullLib::QuickHullConvexHullLib(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26E72A358;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v6 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHull>::getName() [T = local::QuickHull]";
  }
  else {
    uint64_t v7 = "<allocation names disabled>";
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 424, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 1810);
  *(void *)uint64_t v8 = a3;
  *(void *)(v8 + 8) = a2;
  *(void *)(v8 + 36) = 0xFFFFFFFF00000000;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  *(void *)(v8 + 72) = 0;
  *(_DWORD *)(v8 + 96) = 0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(void *)(v8 + 133) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(v8 + 336) = _D0;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(void *)(a1 + 56) = v8;
  local::QuickHull::preallocate((local::QuickHull *)v8, *(_DWORD *)(a2 + 16));
  return a1;
}

void physx::QuickHullConvexHullLib::~QuickHullConvexHullLib(physx::QuickHullConvexHullLib *this)
{
  *(void *)this = &unk_26E72A358;
  uint64_t v2 = *((void *)this + 7);
  if (!*(void *)(v2 + 48))
  {
    *(_DWORD *)(v2 + 128) = 0;
    goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(void *)(v2 + 48) = 0;
  uint64_t v3 = *((void *)this + 7);
  *(_DWORD *)(v2 + 128) = 0;
  uint64_t v2 = v3;
  if (v3)
  {
LABEL_5:
    local::QuickHull::~QuickHull((local::QuickHull *)v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0 && *(void *)(v4 + 32) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    int v7 = *(_DWORD *)(v4 + 28);
    if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *(void *)(v4 + 16) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    int v9 = *(_DWORD *)(v4 + 12);
    if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *(void *)v4 != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
  if (*((void *)this + 9)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 10) = 0;
  *(void *)this = &unk_26E72A320;
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 6)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::QuickHullConvexHullLib::~QuickHullConvexHullLib(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::QuickHullConvexHullLib::createConvexHull(float32x2_t *this)
{
  *(void *)&v149[24] = *MEMORY[0x263EF8340];
  unsigned int v2 = *(_DWORD *)(*(void *)&this[1] + 16);
  if (v2 <= 8) {
    unsigned int v2 = 8;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 1846);
  unsigned int v135 = 0;
  uint64_t v4 = (unsigned int *)this[1];
  uint64_t v5 = v4[4];
  uint64_t v6 = *((void *)v4 + 1);
  uint64_t v7 = *v4;
  if ((v4[18] & 0x100) != 0)
  {
    if (v5)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullLib.cpp", 137);
      uint64_t v10 = (float32x2_t *)v12;
      this[6] = (float32x2_t)v12;
      float32x2_t v13 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
      float32x2_t v14 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
      float v15 = (float *)(v6 + 8);
      float v16 = 8.5071e37;
      float v17 = -8.5071e37;
      int v18 = v5;
      do
      {
        if (v16 >= *v15) {
          float v16 = *v15;
        }
        float32x2_t v19 = *(float32x2_t *)(v15 - 2);
        float32x2_t v14 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v14), (int8x8_t)v14, (int8x8_t)v19);
        float32x2_t v13 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v13, v19), (int8x8_t)v13, (int8x8_t)v19);
        if (v17 <= *v15) {
          float v17 = *v15;
        }
        float v15 = (float *)((char *)v15 + v7);
        --v18;
      }
      while (v18);
      uint64_t v20 = 0;
      this[4] = vmul_f32(vadd_f32(v14, v13), (float32x2_t)0x3F0000003F000000);
      this[5].f32[0] = (float)(v16 + v17) * 0.5;
      unsigned int v21 = (float *)(v6 + 8);
      do
      {
        float32_t v22 = *v21 - this[5].f32[0];
        float v23 = (float32x2_t *)(v12 + v20);
        *float v23 = vsub_f32(*(float32x2_t *)(v21 - 2), this[4]);
        v23[1].f32[0] = v22;
        v20 += 12;
        unsigned int v21 = (float *)((char *)v21 + v7);
      }
      while (12 * v5 != v20);
    }
    else
    {
      uint64_t v10 = 0;
      this[6] = 0;
      this[4] = 0;
      this[5].i32[0] = 0;
    }
    uint64_t v8 = (physx *)this;
    uint64_t v9 = v5;
    uint64_t v11 = 12;
  }
  else
  {
    uint64_t v8 = (physx *)this;
    uint64_t v9 = v4[4];
    uint64_t v10 = (float32x2_t *)*((void *)v4 + 1);
    uint64_t v11 = *v4;
  }
  if (physx::ConvexHullLib::cleanupVertices(v8, v9, v10, v11, &v135, v3, &v137, &v136))
  {
    uint64_t v29 = 0;
    uint64_t v30 = v135;
    float v32 = *(float *)v3;
    float v31 = *(float *)(v3 + 4);
    v24.i32[0] = *(_DWORD *)(v3 + 8);
    do
    {
      uint64_t v33 = (float *)&v145[v29];
      float *v33 = v32;
      v33[1] = v31;
      v33[2] = *(float *)v24.i32;
      v33[3] = 0.0;
      uint64_t v34 = (float *)&v140[v29];
      *uint64_t v34 = v32;
      v34[1] = v31;
      v34[2] = *(float *)v24.i32;
      v29 += 32;
      v34[3] = 0.0;
    }
    while (v29 != 96);
    if (v30 < 2)
    {
      float v39 = v32;
      float v38 = v31;
      float v37 = *(float *)v24.i32;
LABEL_44:
      uint64_t v54 = 0;
      unsigned int v55 = 0;
      uint64_t v56 = 0;
      LODWORD(v57) = 0;
      float v58 = (float)((float)(*(float *)v24.i32 + (float)((float)((float)(v32 - v39) + v31) - v38)) - v37) * 0.5;
      v24.i32[0] = 884998144;
      v59.i32[0] = vdup_lane_s32(v24, 0).u32[0];
      v59.i32[1] = *(_DWORD *)(*(void *)&this[2] + 4);
      v25.n128_u64[0] = (unint64_t)vmul_n_f32(v59, v58);
      float v60 = 0.0;
      do
      {
        float v61 = *(float *)&v140[v54] - *(float *)&v145[v54];
        if (v61 <= v60) {
          uint64_t v57 = v57;
        }
        else {
          uint64_t v57 = v55;
        }
        if (v61 > v60) {
          float v60 = *(float *)&v140[v54] - *(float *)&v145[v54];
        }
        v56 += 32;
        ++v55;
        v54 += 36;
      }
      while (v56 != 96);
      int8x8_t v62 = (int8x8_t)vcgt_f32((float32x2_t)v25.n128_u64[0], v59);
      float v63 = (float *)&v140[32 * v57];
      float v64 = *v63;
      float v65 = v63[1];
      float v66 = v63[2];
      float32x2_t v67 = (float *)&v145[32 * v57];
      float v68 = v67[1];
      float v69 = v67[2];
      float v70 = *v67 - *v63;
      float v71 = v68 - v65;
      float v72 = v69 - v66;
      *(float *)&double v26 = sqrtf((float)((float)(v71 * v71) + (float)(v70 * v70)) + (float)(v72 * v72));
      if (*(float *)&v26 > 0.0)
      {
        float v68 = 1.0;
        *(float *)&double v26 = 1.0 / *(float *)&v26;
        float v70 = v70 * *(float *)&v26;
        float v71 = v71 * *(float *)&v26;
        float v72 = v72 * *(float *)&v26;
      }
      double v73 = COERCE_DOUBLE(vbsl_s8(v62, (int8x8_t)v25.n128_u64[0], (int8x8_t)v59));
      if (v30)
      {
        uint64_t v74 = 0;
        unsigned int v75 = 0;
        float v76 = -v71;
        float v77 = (float *)(v3 + 8);
        float v78 = 0.0;
        do
        {
          float v79 = *(v77 - 2);
          float v80 = *(v77 - 1);
          float v81 = *v77 - v66;
          float v82 = (float)((float)(v80 - v65) * (float)-v72) + (float)(v71 * v81);
          float v83 = (float)(v81 * (float)-v70) + (float)(v72 * (float)(v79 - v64));
          float v84 = (float)((float)(v79 - v64) * v76) + (float)(v70 * (float)(v80 - v65));
          if ((float)((float)((float)(v83 * v83) + (float)(v82 * v82)) + (float)(v84 * v84)) > v78)
          {
            v25.n128_f32[0] = v82;
            *(float *)v62.i32 = v83;
            *(float *)&double v26 = (float)((float)(v79 - v64) * v76) + (float)(v70 * (float)(v80 - v65));
            float v68 = *(v77 - 2);
            *(float *)&double v28 = *(v77 - 1);
            float v69 = *v77;
            float v78 = (float)((float)(v83 * v83) + (float)(v82 * v82)) + (float)(v84 * v84);
            unsigned int v75 = v74;
          }
          ++v74;
          v77 += 3;
        }
        while (v30 != v74);
      }
      else
      {
        unsigned int v75 = 0;
        float v78 = 0.0;
      }
      float v85 = sqrtf(v78);
      BOOL v86 = v85 >= *(float *)&v73;
      if (v85 < *(float *)&v73)
      {
        float v87 = v68 - v64;
        float v88 = *(float *)&v28 - v65;
        float v89 = v69 - v66;
        float v90 = (float)((float)((float)(v71 * v88) + (float)(v87 * v70)) + (float)(v89 * v72))
            / (float)((float)((float)(v71 * v71) + (float)(v70 * v70)) + (float)(v72 * v72));
        float v91 = v87 - (float)(v70 * v90);
        float v92 = v88 - (float)(v71 * v90);
        float v93 = v89 - (float)(v72 * v90);
        float v94 = sqrtf((float)((float)(v92 * v92) + (float)(v91 * v91)) + (float)(v93 * v93));
        if (v94 > 0.0)
        {
          float v95 = 1.0 / v94;
          float v91 = v91 * v95;
          float v92 = v92 * v95;
          float v93 = v93 * v95;
        }
        float v68 = v68 + (float)(*(float *)&v73 * v91);
        *(float *)&double v28 = *(float *)&v28 + (float)(*(float *)&v73 * v92);
        float v69 = v69 + (float)(*(float *)&v73 * v93);
        uint64_t v96 = v3 + 12 * v75;
        *(float *)uint64_t v96 = v68;
        *(_DWORD *)(v96 + 4) = LODWORD(v28);
        *(float *)(v96 + 8) = v69;
      }
      float v97 = sqrtf((float)((float)(*(float *)v62.i32 * *(float *)v62.i32) + (float)(v25.n128_f32[0] * v25.n128_f32[0]))+ (float)(*(float *)&v26 * *(float *)&v26));
      if (v97 > 0.0)
      {
        float v97 = 1.0 / v97;
        v25.n128_f32[0] = v25.n128_f32[0] * v97;
        *(float *)v62.i32 = *(float *)v62.i32 * v97;
        *(float *)&double v26 = *(float *)&v26 * v97;
      }
      *(float *)&double v28 = *(float *)&v28 * *(float *)v62.i32;
      *(float *)&double v27 = (float)(*(float *)&v28 + (float)(v68 * v25.n128_f32[0])) + (float)(v69 * *(float *)&v26);
      if (v30)
      {
        uint64_t v98 = 0;
        unsigned int v99 = 0;
        unint64_t v100 = (float *)(v3 + 8);
        double v101 = 0.0;
        do
        {
          float v102 = (float)(*(float *)v62.i32 * *(v100 - 1)) + (float)(*(v100 - 2) * v25.n128_f32[0]);
          float v103 = *v100;
          v100 += 3;
          float v97 = v103;
          *(float *)&double v28 = vabds_f32(v102 + (float)(v103 * *(float *)&v26), *(float *)&v27);
          if (*(float *)&v28 > *(float *)&v101)
          {
            *(float *)&double v101 = *(float *)&v28;
            unsigned int v99 = v98;
          }
          ++v98;
        }
        while (v30 != v98);
      }
      else
      {
        unsigned int v99 = 0;
        double v101 = 0.0;
      }
      *(float *)&double v101 = fabsf(*(float *)&v101);
      if (*(float *)&v101 < *(float *)&v73)
      {
        uint64_t v104 = v3 + 12 * v99;
        LODWORD(v101) = *(_DWORD *)(v104 + 4);
        float v97 = *(float *)v104;
        LODWORD(v28) = *(_DWORD *)(v104 + 8);
        *(float *)&double v27 = (float)((float)((float)(*(float *)v62.i32 * *(float *)&v101)
                                       + (float)(*(float *)v104 * v25.n128_f32[0]))
                               + (float)(*(float *)&v28 * *(float *)&v26))
                       - *(float *)&v27;
        float v105 = *(float *)&v73 * v25.n128_f32[0];
        float v106 = *(float *)&v73 * *(float *)v62.i32;
        float v107 = *(float *)&v73 * *(float *)&v26;
        if (*(float *)&v27 <= 0.0)
        {
          v25.n128_f32[0] = v97 - v105;
          *(float *)v62.i32 = *(float *)&v101 - v106;
          *(float *)&double v26 = *(float *)&v28 - v107;
        }
        else
        {
          v25.n128_f32[0] = v105 + v97;
          *(float *)v62.i32 = v106 + *(float *)&v101;
          *(float *)&double v26 = v107 + *(float *)&v28;
        }
        BOOL v86 = 0;
        *(_DWORD *)uint64_t v104 = v25.n128_u32[0];
        *(_DWORD *)(v104 + 4) = v62.i32[0];
        *(_DWORD *)(v104 + 8) = LODWORD(v26);
      }
      float v108 = (int8x8_t *)this[7];
      v108[4].i32[0] = v30;
      if (v30)
      {
        uint64_t v109 = 0;
        BOOL v110 = (_DWORD *)(*(void *)&v108[6] + 12);
        float v111 = (_DWORD *)(v3 + 8);
        do
        {
          v25.n128_u64[0] = *((void *)v111 - 1);
          *(void *)(v110 - 3) = v25.n128_u64[0];
          unsigned __int32 v112 = *v111;
          v111 += 3;
          v25.n128_u32[0] = v112;
          *(v110 - 1) = v112;
          *BOOL v110 = v109;
          v110 += 8;
          ++v109;
        }
        while (v30 != v109);
      }
      if (v86)
      {
        for (unint64_t i = 0; i != 96; i += 32)
        {
          float v114 = &v108[i / 8];
          v114[18] = *(int8x8_t *)&v145[i];
          v114[19].i32[0] = *(_DWORD *)&v145[i + 8];
          *(_OWORD *)&v114[19].u8[4] = *(_OWORD *)&v145[i + 12];
          v114[21].i32[1] = *(_DWORD *)&v145[i + 28];
          v114[30] = *(int8x8_t *)&v140[i];
          v114[31].i32[0] = *(_DWORD *)&v140[i + 8];
          __n128 v25 = *(__n128 *)&v140[i + 12];
          *(__n128 *)&v114[31].u8[4] = v25;
          __int32 v115 = *(_DWORD *)&v140[i + 28];
          v114[33].i32[1] = v115;
        }
        *(double *)&v108[42] = v73;
        v108[17].i8[4] = 1;
        float v108 = (int8x8_t *)this[7];
      }
      switch(local::QuickHull::buildHull(v108, v73, v25, *(double *)&v62, v26, v27, v101, v28, v97))
      {
        case 0u:
          uint64_t v116 = (uint64_t)this[7];
          unint64_t v117 = *(unsigned int *)(v116 + 128);
          if (!v117) {
            goto LABEL_110;
          }
          uint64_t v118 = 0;
          break;
        case 1u:
          uint64_t v53 = 1;
          goto LABEL_117;
        case 2u:
          if ((*(_WORD *)(*(void *)&this[1] + 72) & 0x20) != 0)
          {
            uint64_t v53 = physx::QuickHullConvexHullLib::expandHull((physx::QuickHullConvexHullLib *)this);
          }
          else
          {
            physx::QuickHullConvexHullLib::expandHullOBB((physx::QuickHullConvexHullLib *)this);
LABEL_110:
            uint64_t v53 = 0;
          }
          goto LABEL_117;
        case 3u:
          float32x2_t v129 = this[1];
          if (*(_DWORD *)(*(void *)&this[7] + 36) > *(unsigned __int16 *)(*(void *)&v129 + 74))
          {
            if ((*(_WORD *)(*(void *)&v129 + 72) & 0x20) != 0) {
              physx::QuickHullConvexHullLib::expandHull((physx::QuickHullConvexHullLib *)this);
            }
            else {
              physx::QuickHullConvexHullLib::expandHullOBB((physx::QuickHullConvexHullLib *)this);
            }
          }
          uint64_t v53 = 2;
          goto LABEL_117;
        default:
          uint64_t v53 = 3;
LABEL_117:
          if ((*(_WORD *)(*(void *)&this[1] + 72) & 0x80) != 0 && !*(void *)&this[8] && !v53)
          {
            float32x2_t v130 = this[7];
            uint64_t v131 = *(unsigned int *)(*(void *)&v130 + 128);
            if (v131)
            {
              unsigned int v132 = 0;
              uint64_t v133 = *(void *)(*(void *)&v130 + 120);
              do
              {
                if (!*(_DWORD *)(*(void *)v133 + 60) && v132 <= *(unsigned __int16 *)(*(void *)v133 + 8)) {
                  unsigned int v132 = *(unsigned __int16 *)(*(void *)v133 + 8);
                }
                v133 += 8;
                --v131;
              }
              while (v131);
              if (v132 >= 0x21) {
                physx::QuickHullConvexHullLib::expandHullOBB((physx::QuickHullConvexHullLib *)this);
              }
            }
            uint64_t v53 = 0;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v3);
          return v53;
      }
      while (1)
      {
        uint64_t v119 = *(void *)(*(void *)(v116 + 120) + 8 * v118);
        if (!*(_DWORD *)(v119 + 60)) {
          break;
        }
LABEL_104:
        if (++v118 >= v117) {
          goto LABEL_110;
        }
      }
LABEL_89:
      uint64_t v120 = *(void *)v119;
      uint64_t v121 = *(void **)v119;
      while (1)
      {
        uint64_t v122 = *(float **)(v121[6] + 56);
        if ((float)((float)((float)(*(float *)(v119 + 28) * v122[7]) + (float)(*(float *)(v119 + 24) * v122[6]))
                   + (float)(*(float *)(v119 + 32) * v122[8])) > 0.99863
          && *(float *)(v119 + 36) >= v122[9])
        {
          if (local::QuickHull::canMergeFaces(v116, v121))
          {
            uint64_t v138 = 0;
            uint64_t v139 = 0;
            local::QuickHullFace::mergeAdjacentFace((uint64_t *)v119, v121, (uint64_t)&v138, v123);
            uint64_t v124 = v139;
            *(_DWORD *)(v116 + 136) -= v139;
            int v125 = v138;
            uint64_t v126 = v138;
            if (v124)
            {
              do
              {
                uint64_t v127 = *v126++;
                local::QuickHull::deleteFacePoints(v116, v127, v119);
                --v124;
              }
              while (v124);
            }
            if ((v139 & 0x8000000000000000) == 0 && (v139 & 0x7FFFFFFF00000000) != 0 && v125 != 0) {
              (*(void (**)(uint64_t, uint64_t *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v125);
            }
            goto LABEL_89;
          }
          uint64_t v120 = *(void *)v119;
        }
        uint64_t v121 = (void *)v121[5];
        if (v121 == (void *)v120)
        {
          unint64_t v117 = *(unsigned int *)(v116 + 128);
          goto LABEL_104;
        }
      }
    }
    uint64_t v35 = (float *)(v3 + 20);
    uint64_t v36 = 1;
    float v37 = *(float *)v24.i32;
    float v38 = v31;
    float v39 = v32;
    while (1)
    {
      *(float *)&double v28 = *(v35 - 2);
      if (*(float *)&v28 > v32) {
        break;
      }
      if (*(float *)&v28 < v39)
      {
        float v40 = (float *)v145;
        float v39 = *(v35 - 2);
        goto LABEL_26;
      }
      float v41 = *(v35 - 1);
LABEL_28:
      if (v41 > v31)
      {
        float v31 = v41;
        float v43 = (char *)&v142 + 4;
        float v44 = (float *)&v142;
        float v45 = (float *)&v141 + 1;
        uint64_t v46 = &v141;
LABEL_32:
        *(_DWORD *)uint64_t v46 = LODWORD(v28);
        *float v45 = v41;
        float v47 = *v35;
        *float v44 = *v35;
        *(_DWORD *)float v43 = v36;
        goto LABEL_34;
      }
      if (v41 < v38)
      {
        float v38 = v41;
        float v43 = (char *)&v147 + 4;
        float v44 = (float *)&v147;
        float v45 = (float *)&v146 + 1;
        uint64_t v46 = &v146;
        goto LABEL_32;
      }
      float v47 = *v35;
LABEL_34:
      if (v47 > *(float *)v24.i32)
      {
        float v48 = v37;
        *(float *)v24.i32 = v47;
        float v49 = (char *)&v144 + 4;
        float v50 = (float *)&v144;
        float v51 = (float *)&v143 + 1;
        float v52 = &v143;
LABEL_37:
        *(_DWORD *)float v52 = LODWORD(v28);
        *float v51 = v41;
        *float v50 = v47;
        float v37 = v48;
        *(_DWORD *)float v49 = v36;
        goto LABEL_38;
      }
      float v48 = v47;
      float v49 = &v149[4];
      float v50 = (float *)v149;
      float v51 = (float *)&v148 + 1;
      float v52 = &v148;
      if (v47 < v37) {
        goto LABEL_37;
      }
LABEL_38:
      ++v36;
      v35 += 3;
      if (v30 == v36) {
        goto LABEL_44;
      }
    }
    float v40 = (float *)v140;
    float v32 = *(v35 - 2);
LABEL_26:
    float v41 = *(v35 - 1);
    float v42 = *v35;
    *float v40 = *(float *)&v28;
    v40[1] = v41;
    v40[2] = v42;
    *((_DWORD *)v40 + 3) = v36;
    goto LABEL_28;
  }
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v3);
  }
  return 3;
}

uint64_t physx::QuickHullConvexHullLib::expandHull(physx::QuickHullConvexHullLib *this)
{
  uint64_t v1 = this;
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v2 = *((void *)this + 7);
  uint64_t v3 = *(unsigned int *)(v2 + 32);
  if (v3)
  {
    this = (physx::QuickHullConvexHullLib *)physx::shdfnd::Array<local::ExpandPoint,physx::shdfnd::ReflectionAllocator<local::ExpandPoint>>::recreate(&v93, v3);
    uint64_t v2 = *((void *)v1 + 7);
  }
  LODWORD(v4) = *(_DWORD *)(v2 + 128);
  if (v4)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v2 + 120) + 8 * v5);
      if (!*(_DWORD *)(v6 + 60))
      {
        uint64_t v7 = *(void **)v6;
        do
        {
          unsigned int v8 = *(_DWORD *)(v7[7] + 72);
          uint64_t v9 = v7[5];
          unsigned int v10 = *(_DWORD *)(*(void *)(v7[6] + 56) + 72);
          if (v10 >= v8) {
            unsigned int v11 = *(_DWORD *)(v7[7] + 72);
          }
          else {
            unsigned int v11 = *(_DWORD *)(*(void *)(v7[6] + 56) + 72);
          }
          if (v10 <= v8) {
            unsigned int v10 = *(_DWORD *)(v7[7] + 72);
          }
          unsigned int v90 = v11;
          unsigned int v91 = v10;
          unsigned int v12 = *(_DWORD *)(*(void *)(*(void *)(v9 + 48) + 56) + 72);
          if (v12 >= v11)
          {
            float32x2_t v13 = (int *)&v92;
            if (v12 < v10)
            {
              unsigned int v92 = v10;
              float32x2_t v13 = (int *)&v91;
            }
          }
          else
          {
            unsigned int v91 = v11;
            unsigned int v92 = v10;
            float32x2_t v13 = (int *)&v90;
          }
          *float32x2_t v13 = v12;
          this = (physx::QuickHullConvexHullLib *)local::addExpandPoint(v89, (uint64_t)&v93);
          uint64_t v7 = (void *)v7[5];
        }
        while (v7 != *(void **)v6);
        uint64_t v2 = *((void *)v1 + 7);
      }
      ++v5;
      unint64_t v4 = *(unsigned int *)(v2 + 128);
    }
    while (v5 < v4);
  }
  uint64_t v14 = *(unsigned int *)(v2 + 32);
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(v2 + 48);
    do
    {
      if (v4)
      {
        float v17 = *(float ***)(v2 + 120);
        uint64_t v18 = v4;
        do
        {
          float32x2_t v19 = *v17;
          this = (physx::QuickHullConvexHullLib *)*((unsigned int *)*v17 + 15);
          if (!this)
          {
            float v20 = (float)((float)((float)(*(float *)(v16 + 32 * v15 + 4) * v19[7])
                                + (float)(v19[6] * *(float *)(v16 + 32 * v15)))
                        + (float)(v19[8] * *(float *)(v16 + 32 * v15 + 8)))
                - v19[13];
            if (v20 > 0.0 && v20 > v19[14]) {
              v19[14] = v20;
            }
          }
          ++v17;
          --v18;
        }
        while (v18);
      }
      ++v15;
    }
    while (v15 != v14);
  }
  uint64_t v21 = v94;
  if (!v94) {
    goto LABEL_37;
  }
  uint64_t v22 = 0;
  unsigned int v23 = *(_DWORD *)(v2 + 88);
  uint64_t v24 = *(void *)(v2 + 104);
  uint64_t v25 = v93 + 48;
  double v26 = (float *)(v93 + 12);
  do
  {
    uint64_t v27 = 0;
    double v28 = v26;
    do
    {
      uint64_t v29 = *(void *)(v24 + 8 * (*(_DWORD *)(v25 + v27) / v23)) + 80 * (*(_DWORD *)(v25 + v27) % v23);
      int v30 = *(_DWORD *)(v29 + 32);
      float v31 = (float)-*(float *)(v29 + 52) - fmaxf(*(float *)(v29 + 56), 0.0);
      *(void *)(v28 - 3) = *(void *)(v29 + 24);
      *((_DWORD *)v28 - 1) = v30;
      *double v28 = v31;
      v27 += 4;
      v28 += 4;
    }
    while (v27 != 12);
    ++v22;
    v25 += 60;
    v26 += 15;
  }
  while (v22 != v21);
  uint64_t v32 = (12 * v21);
  if (v32 > 0x400)
  {
    uint64_t v33 = (float *)physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)((char *)&v88 + 7), v32, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2170);
    int v34 = 1;
    if (!v21) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_37:
    MEMORY[0x270FA5388](this);
    uint64_t v33 = (float *)((char *)&v89[-2] - ((v35 + 15) & 0x1FFFFFFF0));
    bzero(v33, v35);
    int v34 = 0;
    if (!v21) {
      goto LABEL_43;
    }
  }
  uint64_t v36 = v33 + 2;
  float v37 = (float *)(v93 + 24);
  uint64_t v38 = v21;
  do
  {
    float v39 = *(v37 - 6);
    float v40 = *(v37 - 5);
    float v41 = *(v37 - 4);
    float v42 = *(v37 - 2);
    float v43 = *(v37 - 1);
    float v44 = *v37;
    float v45 = v37[2];
    float v46 = v37[3];
    float v47 = v37[4];
    v48.f32[0] = (float)(v40 * *v37) - (float)(v43 * v41);
    float v49 = (float)((float)(v42 * (float)((float)(v46 * v41) - (float)(v40 * v47)))
                + (float)(v39 * (float)((float)(v43 * v47) - (float)(v46 * *v37))))
        + (float)(v45 * v48.f32[0]);
    if (v49 == 0.0)
    {
      float32x2_t v58 = 0;
      float v54 = 0.0;
      float v57 = 0.0;
      float32x2_t v53 = (float32x2_t)1065353216;
      float32x2_t v56 = (float32x2_t)0x3F80000000000000;
      float v59 = 1.0;
    }
    else
    {
      float v50 = -v40;
      float v51 = 1.0 / v49;
      v52.f32[0] = (float)(v43 * v47) - (float)(v44 * v46);
      v52.f32[1] = -(float)((float)(v42 * v47) - (float)(v44 * v45));
      float32x2_t v53 = vmul_n_f32(v52, v51);
      float v54 = (float)((float)(v42 * v46) - (float)(v45 * v43)) * v51;
      v55.f32[0] = -(float)((float)(v41 * (float)-v46) + (float)(v40 * v47));
      v55.f32[1] = (float)(v39 * v47) - (float)(v45 * v41);
      float32x2_t v56 = vmul_n_f32(v55, v51);
      float v57 = -(float)((float)((float)(v39 * v46) - (float)(v45 * v40)) * v51);
      v48.f32[1] = -(float)((float)(v39 * v44) - (float)(v42 * v41));
      float32x2_t v58 = vmul_n_f32(v48, v51);
      float v59 = (float)((float)(v42 * v50) + (float)(v39 * v43)) * v51;
    }
    float v60 = *(v37 - 3);
    float v61 = v37[1];
    float v62 = v37[5];
    *((float32x2_t *)v36 - 1) = vneg_f32(vadd_f32(vadd_f32(vmul_n_f32(v53, v60), vmul_n_f32(v56, v61)), vmul_n_f32(v58, v62)));
    *uint64_t v36 = -(float)((float)((float)(v54 * v60) + (float)(v57 * v61)) + (float)(v59 * v62));
    v36 += 3;
    v37 += 15;
    --v38;
  }
  while (v38);
LABEL_43:
  uint64_t v63 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v64 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHull>::getName() [T = local::QuickHull]";
  }
  else {
    float v64 = "<allocation names disabled>";
  }
  uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v63 + 24) + 16))(v63 + 24, 424, v64, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2178);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)*((void *)v1 + 7);
  *(void *)(v65 + 36) = 0xFFFFFFFF00000000;
  *(void *)(v65 + 48) = 0;
  float v66 = (void *)(v65 + 48);
  *(void *)(v65 + 56) = 0;
  *(_DWORD *)(v65 + 64) = 0;
  *(void *)(v65 + 80) = 0;
  *(void *)(v65 + 88) = 0;
  *(void *)(v65 + 72) = 0;
  *(_DWORD *)(v65 + 96) = 0;
  *(_OWORD *)(v65 + 104) = 0u;
  *(_OWORD *)(v65 + 120) = 0u;
  *(void *)(v65 + 133) = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(void *)(v65 + 336) = _D1;
  *(_OWORD *)(v65 + 344) = 0u;
  *(_OWORD *)(v65 + 360) = 0u;
  *(_OWORD *)(v65 + 376) = 0u;
  *(_OWORD *)(v65 + 392) = 0u;
  *(_OWORD *)(v65 + 408) = 0u;
  local::QuickHull::preallocate((local::QuickHull *)v65, v21);
  *(_DWORD *)(v65 + 32) = v21;
  if (v21)
  {
    uint64_t v80 = 0;
    float v81 = (_DWORD *)(*v66 + 12);
    float v82 = (double *)(v33 + 2);
    do
    {
      double v72 = *(v82 - 1);
      *(double *)(v81 - 3) = v72;
      int v83 = *(_DWORD *)v82;
      float v82 = (double *)((char *)v82 + 12);
      LODWORD(v72) = v83;
      *(v81 - 1) = v83;
      *float v81 = v80;
      v81 += 8;
      ++v80;
    }
    while (v21 != v80);
  }
  switch(local::QuickHull::buildHull((int8x8_t *)v65, v72, v73, v74, v75, v76, v77, v78, v79))
  {
    case 0u:
    case 2u:
    case 3u:
      uint64_t v84 = *((void *)v1 + 7);
      if (*(void *)(v84 + 48))
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *(void *)(v84 + 48) = 0;
        uint64_t v85 = *((void *)v1 + 7);
        *(_DWORD *)(v84 + 128) = 0;
        uint64_t v84 = v85;
        if (!v85)
        {
LABEL_55:
          uint64_t v86 = 0;
          *((void *)v1 + 7) = v65;
          if (v34) {
            goto LABEL_66;
          }
          goto LABEL_67;
        }
      }
      else
      {
        *(_DWORD *)(v84 + 128) = 0;
      }
      local::QuickHull::~QuickHull((local::QuickHull *)v84);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v84);
      goto LABEL_55;
    case 1u:
      if (*v66)
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *float v66 = 0;
      }
      *(_DWORD *)(v65 + 128) = 0;
      local::QuickHull::~QuickHull((local::QuickHull *)v65);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v65);
      uint64_t v86 = 1;
      if (v34) {
        goto LABEL_66;
      }
      goto LABEL_67;
    case 4u:
      if (*v66)
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *float v66 = 0;
      }
      *(_DWORD *)(v65 + 128) = 0;
      local::QuickHull::~QuickHull((local::QuickHull *)v65);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v65);
      uint64_t v86 = 3;
      if (v34) {
        goto LABEL_66;
      }
      goto LABEL_67;
    default:
      uint64_t v86 = 0;
      if (v34) {
LABEL_66:
      }
        physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v89, v33);
LABEL_67:
      if ((v94 & 0x8000000000000000) == 0 && (v94 & 0x7FFFFFFF00000000) != 0 && v93) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      return v86;
  }
}

void physx::QuickHullConvexHullLib::expandHullOBB(physx::QuickHullConvexHullLib *this)
{
  MEMORY[0x270FA5388](this);
  unint64_t v4 = v3;
  uint64_t v609 = *MEMORY[0x263EF8340];
  uint64_t v565 = 0;
  uint64_t v566 = 0;
  unsigned int v5 = *(_DWORD *)(v3[7] + 128);
  if (v5)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::recreate((uint64_t)&v565, v5);
    uint64_t v6 = v4[7];
    if (*(_DWORD *)(v6 + 128))
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)(v6 + 120) + 8 * v7);
        if (!*(_DWORD *)(v8 + 60))
        {
          int v9 = *(_DWORD *)(v8 + 24);
          int v10 = *(_DWORD *)(v8 + 28);
          *(_DWORD *)v583 = v9;
          *(_DWORD *)&v583[4] = v10;
          int v11 = *(_DWORD *)(v8 + 32);
          float v12 = *(float *)(v8 + 56);
          float v13 = -*(float *)(v8 + 52);
          *(_DWORD *)&v583[8] = v11;
          *(float *)&v583[12] = v13;
          if (v12 > 0.0)
          {
            float v13 = v13 - v12;
            *(float *)&v583[12] = v13;
          }
          int v14 = v566;
          if ((HIDWORD(v566) & 0x7FFFFFFFu) <= v566)
          {
            physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack((uint64_t)&v565, v583);
            uint64_t v6 = v4[7];
          }
          else
          {
            uint64_t v15 = v565 + 16 * v566;
            *(_DWORD *)uint64_t v15 = v9;
            *(_DWORD *)(v15 + 4) = v10;
            *(_DWORD *)(v15 + 8) = v11;
            *(float *)(v15 + 12) = v13;
            LODWORD(v566) = v14 + 1;
          }
        }
        ++v7;
      }
      while (v7 < *(unsigned int *)(v6 + 128));
    }
  }
  int v549 = 0;
  uint64_t v550 = 0;
  unsigned int v551 = 0;
  int v552 = 0;
  uint64_t v553 = 0;
  unsigned int v554 = 0;
  int v555 = 0;
  uint64_t v556 = 0;
  unsigned int v557 = 0;
  int v559 = 16711935;
  physx::QuickHullConvexHullLib::fillConvexMeshDescFromQuickHull(v4, (uint64_t)&v549);
  v534 = v4;
  __int16 v20 = *(_WORD *)(v4[1] + 72);
  __int16 v558 = v20;
  uint64_t v21 = (_OWORD *)v550;
  uint64_t v22 = v551;
  if (v551)
  {
    unsigned int v23 = (float *)(v550 + 8);
    float32x2_t v24 = 0;
    *(void *)&long long v25 = 0;
    uint64_t v26 = v551;
    do
    {
      double v16 = *((double *)v23 - 1);
      float32x2_t v24 = vadd_f32(v24, *(float32x2_t *)&v16);
      float v27 = *v23;
      v23 += 3;
      *(float *)&long long v25 = *(float *)&v25 + v27;
      --v26;
    }
    while (v26);
  }
  else
  {
    float32x2_t v24 = 0;
    *(void *)&long long v25 = 0;
  }
  uint64_t v28 = v556;
  uint64_t v29 = v553;
  LODWORD(v17) = 1.0;
  *(float *)&double v16 = 1.0 / (float)v551;
  double v30 = COERCE_DOUBLE(vmul_n_f32(v24, *(float *)&v16));
  double v568 = v30;
  *(float *)&long long v25 = *(float *)&v16 * *(float *)&v25;
  LODWORD(v569) = v25;
  uint64_t v31 = v557;
  if (v557)
  {
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v557, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 844);
    uint64_t v33 = v32;
    uint64_t v34 = 0;
    do
    {
      *(unsigned char *)(v32 + v34) = *(_DWORD *)(v28 + 4 * v34);
      ++v34;
    }
    while (v31 != v34);
  }
  else
  {
    uint64_t v33 = 0;
  }
  unsigned int v35 = v554;
  if (v554)
  {
    uint64_t v36 = 20 * v554;
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v36, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 850);
    uint64_t v38 = v37;
    uint64_t v39 = 0;
    do
    {
      uint64_t v40 = v37 + v39;
      long long v25 = *(_OWORD *)(v29 + v39);
      *(_OWORD *)uint64_t v40 = v25;
      *(unsigned char *)(v40 + 18) = *(unsigned char *)(v29 + v39 + 16);
      *(_WORD *)(v40 + 16) = *(_WORD *)(v29 + v39 + 18);
      v39 += 20;
    }
    while (v36 != v39);
  }
  else
  {
    uint64_t v38 = 0;
  }
  __src[0] = 0.0;
  __int16 v582 = 255;
  v572 = v21;
  v575[0] = 0.0;
  float v573 = *(float *)&v22;
  uint64_t v576 = v38;
  int v578 = 0;
  unsigned int v577 = v35;
  uint64_t v579 = v33;
  int v581 = 16711680;
  int v580 = v31;
  if ((v20 & 0x40) != 0) {
    v41.n128_f64[0] = physx::computeVolumeIntegralsEberlySIMD((uint64_t)__src, (uint64_t)v583, (uint64_t)&v568, *(double *)&v25, v30, v16, v17, v18, v19);
  }
  else {
    physx::computeVolumeIntegralsEberly((uint64_t)__src, (uint64_t)v583, (float *)&v568);
  }
  if (v22)
  {
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, __n128))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v22, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 873, v41);
    float v43 = (float32x4_t *)v42;
    uint64_t v44 = 0;
    do
    {
      long long v45 = *v21;
      uint64_t v21 = (_OWORD *)((char *)v21 + 12);
      *(_OWORD *)(v42 + v44) = v45;
      v44 += 16;
    }
    while (16 * v22 != v44);
  }
  else
  {
    float v43 = 0;
  }
  uint64_t v46 = 0;
  float v47 = v570;
  uint64_t v48 = 24;
  do
  {
    uint64_t v49 = 0;
    uint64_t v50 = v48;
    do
    {
      float v51 = *(double *)&v583[v50];
      *(float *)((char *)v47 + v49) = v51;
      v49 += 4;
      v50 += 24;
    }
    while (v49 != 12);
    ++v46;
    float v47 = (_OWORD *)((char *)v47 + 12);
    v48 += 8;
  }
  while (v46 != 3);
  physx::PxDiagonalize((float *)v570, &v597, (float *)&v601);
  uint64_t v52 = 0;
  float v53 = v597;
  float v54 = v598;
  float v55 = v599;
  float v56 = v54 + v54;
  float v57 = v55 + v55;
  float v58 = v54 * (float)(v54 + v54);
  float v59 = v55 * (float)(v55 + v55);
  float v60 = (float)(v53 + v53) * v598;
  float v61 = (float)(v53 + v53) * v599;
  float v62 = (float)(v53 + v53) * v600;
  float v63 = v56 * v599;
  float v64 = v56 * v600;
  v601.f32[0] = (float)(1.0 - v58) - v59;
  v601.f32[1] = v60 + (float)(v57 * v600);
  float v65 = 1.0 - (float)(v53 * (float)(v53 + v53));
  float v602 = v61 - v64;
  float v603 = v60 - (float)(v57 * v600);
  float v604 = v65 - v59;
  float v605 = v63 + v62;
  float v606 = v61 + v64;
  float v607 = v63 - v62;
  float v608 = v65 - v58;
  float v66 = 1000000000.0;
  int32x4_t v545 = vdupq_n_s32(0x7F7FFFFFu);
  float32x4_t v547 = *(float32x4_t *)v583;
  do
  {
    unsigned int v67 = 0;
    float v68 = (float *)&v601 + 3 * v52;
    float32x2_t v69 = *(float32x2_t *)v68;
    float v70 = v68[2];
    do
    {
      __float2 v71 = __sincosf_stret((float)((float)v67 * 0.31416) * 0.5);
      *(float32x2_t *)v72.i8 = vmul_n_f32(v69, v71.__sinval);
      int32x4_t v73 = v72;
      *(float *)&v73.i32[2] = v70 * v71.__sinval;
      float32x4_t v74 = (float32x4_t)v73;
      v74.i32[3] = LODWORD(v71.__cosval);
      if (v22)
      {
        float32x4_t v75 = v74;
        v75.i32[3] = 0;
        float32x4_t v76 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 3);
        LODWORD(v77) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32).u32[0];
        float32x2_t v78 = (float32x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
        float32x2_t v79 = (float32x2_t)vext_s8(*(int8x8_t *)v72.i8, (int8x8_t)v78, 4uLL);
        float32x4_t v80 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
        v81.i64[0] = 0x80000000800000;
        v81.i64[1] = 0x80000000800000;
        float v82 = v43;
        uint64_t v83 = v22;
        float32x4_t v84 = v547;
        do
        {
          float32x4_t v85 = *v82++;
          float32x4_t v86 = vsubq_f32(v85, v547);
          float32x4_t v87 = v86;
          v87.i32[3] = 0;
          float32x4_t v88 = vmulq_n_f32(v87, v77);
          float32x2_t v89 = (float32x2_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
          int8x8_t v90 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v72.i8, (float32x2_t)vext_s8(*(int8x8_t *)v86.f32, (int8x8_t)v89, 4uLL)), v79, *(float32x2_t *)v86.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32(v78, *(float32x2_t *)v86.f32), *(float32x2_t *)v72.i8, v89), 4uLL);
          v88.i32[3] = 0;
          v86.i64[1] = v90.u32[0];
          float32x4_t v91 = vmlsq_f32(v88, v76, v86);
          v91.i64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u32[0];
          float32x4_t v92 = vmulq_f32(v75, v87);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          float32x4_t v93 = vmlaq_n_f32(v91, v75, vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32).f32[0]);
          float32x4_t v94 = vaddq_f32(v93, v93);
          v94.i32[3] = 0;
          float32x4_t v80 = vminq_f32(v80, v94);
          float32x4_t v81 = vmaxq_f32(v81, v94);
          --v83;
        }
        while (v83);
      }
      else
      {
        v81.i64[0] = 0x80000000800000;
        v81.i64[1] = 0x80000000800000;
        float32x4_t v80 = (float32x4_t)v545;
        float32x4_t v84 = v547;
      }
      float32x4_t v95 = vsubq_f32(v81, v80);
      float v96 = vmuls_lane_f32(vmulq_lane_f32(v95, *(float32x2_t *)v95.f32, 1).f32[0], v95, 2);
      if (v96 <= v66)
      {
        float v1 = v95.f32[2];
        v97.i64[0] = 0xBF000000BF000000;
        v97.i64[1] = 0xBF000000BF000000;
        float32x4_t v98 = vaddq_f32(v81, vmulq_f32(v95, v97));
        float32x2_t v99 = (float32x2_t)vdup_laneq_s32(v73, 2);
        float32x4_t v100 = vaddq_f32(v74, v74);
        float32x2_t v101 = vmul_n_f32(v99, v100.f32[0]);
        float32x2_t v102 = (float32x2_t)vdup_laneq_s32((int32x4_t)v74, 3);
        float32x2_t v103 = vmul_lane_f32(v102, *(float32x2_t *)v100.f32, 1);
        float32x2_t v104 = vmul_lane_f32(v99, *(float32x2_t *)v100.f32, 1);
        float32x2_t v105 = vmul_n_f32(v102, v100.f32[0]);
        *(int8x8_t *)v106.f32 = vext_s8((int8x8_t)vadd_f32(v101, v103), (int8x8_t)vsub_f32(v104, v105), 4uLL);
        __asm { FMOV            V23.2S, #1.0 }
        float32x2_t v110 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1);
        float32x2_t v111 = vsub_f32(_D23, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v100.f32), 0));
        float32x2_t v112 = vmul_lane_f32(v110, *(float32x2_t *)v100.f32, 1);
        *(float32x2_t *)&v106.u32[2] = vsub_f32(v111, v112);
        float32x2_t v113 = vmul_n_f32(v110, v100.f32[0]);
        float32x2_t v114 = vmul_laneq_f32(v102, v100, 2);
        float32x2_t v115 = vmul_laneq_f32(v99, v100, 2);
        *(int8x8_t *)v116.f32 = vext_s8((int8x8_t)vsub_f32(v113, v114), (int8x8_t)vsub_f32(v111, v115), 4uLL);
        *(float32x2_t *)&v116.u32[2] = vadd_f32(v104, v105);
        *(int8x8_t *)v117.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D23, v112), v115), (int8x8_t)vadd_f32(v113, v114), 4uLL);
        *(float32x2_t *)&v117.u32[2] = vsub_f32(v101, v103);
        uint64_t v560 = v72.i64[0];
        float32x4_t v118 = vaddq_f32(vmulq_laneq_f32(v106, v98, 2), vaddq_f32(vmulq_lane_f32(v116, *(float32x2_t *)v98.f32, 1), vaddq_f32(v84, vmulq_n_f32(v117, v98.f32[0]))));
        float v561 = v70 * v71.__sinval;
        float cosval = v71.__cosval;
        uint64_t v563 = v118.i64[0];
        __int32 v564 = v118.i32[2];
        float v66 = v96;
        float32x2_t v2 = *(float32x2_t *)v95.f32;
      }
      ++v67;
    }
    while (v67 != 20);
    ++v52;
  }
  while (v52 != 3);
  uint64_t v119 = &unk_2687A6000;
  if (v43) {
    (*(void (**)(uint64_t, float32x4_t *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v43);
  }
  uint64_t v120 = v534;
  if (v33) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v33);
  }
  if (v38) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v38);
  }
  if (v534[9]) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v534[9] = 0;
  v534[10] = 0;
  int v121 = v566;
  if (v566 >= 0x100) {
    int v121 = 256;
  }
  int v536 = v121;
  uint64_t v122 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float v123 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull>::getName() [T = physx::ConvexHull]";
  }
  else {
    float v123 = "<allocation names disabled>";
  }
  uint64_t v124 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v122 + 24) + 16))(v122 + 24, 56, v123, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2255);
  float32x2_t v601 = vmul_f32(v2, (float32x2_t)0x3F0000003F000000);
  float v602 = v1 * 0.5;
  *(_OWORD *)(v124 + 16) = 0u;
  uint64_t v125 = v124 + 16;
  *(_OWORD *)(v124 + 32) = 0u;
  uint64_t v126 = v124 + 32;
  *(_OWORD *)uint64_t v124 = 0u;
  *(void *)(v124 + 48) = &v565;
  float v127 = *(float *)&v560;
  float v128 = v561;
  float v129 = v128 + v128;
  float v130 = *((float *)&v560 + 1) * (float)(*((float *)&v560 + 1) + *((float *)&v560 + 1));
  float v131 = v128 * (float)(v128 + v128);
  float v132 = (float)(v127 + v127) * *((float *)&v560 + 1);
  float v133 = (float)(v127 + v127) * v561;
  float v134 = (float)(v127 + v127) * cosval;
  float v135 = (float)(*((float *)&v560 + 1) + *((float *)&v560 + 1)) * v561;
  float v136 = (float)(*((float *)&v560 + 1) + *((float *)&v560 + 1)) * cosval;
  __src[0] = (float)(1.0 - v130) - v131;
  __src[1] = v132 + (float)(v129 * cosval);
  float v137 = 1.0 - (float)(v127 * (float)(v127 + v127));
  *(float *)&v572 = v133 - v136;
  *((float *)&v572 + 1) = v132 - (float)(v129 * cosval);
  float v573 = v137 - v131;
  float v574 = v135 + v134;
  v575[0] = v133 + v136;
  v575[1] = v135 - v134;
  *(float *)&uint64_t v576 = v137 - v130;
  physx::Gu::computeOBBPoints((float *)v583, (float *)&v563, (float *)&v601, __src, (float *)&v572 + 1, v575);
  int v138 = *(_DWORD *)&v583[8];
  *(void *)&v570[0] = *(void *)v583;
  DWORD2(v570[0]) = *(_DWORD *)&v583[8];
  unsigned int v139 = *(_DWORD *)(v124 + 8);
  unsigned int v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  if (v140 <= v139)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, (uint64_t)v570);
    unsigned int v142 = *(_DWORD *)(v124 + 8);
    unsigned int v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    uint64_t v141 = *(void *)v124 + 12 * v139;
    *(void *)uint64_t v141 = *(void *)v583;
    *(_DWORD *)(v141 + 8) = v138;
    unsigned int v142 = v139 + 1;
    *(_DWORD *)(v124 + 8) = v142;
  }
  float v143 = v590;
  *(void *)&v570[0] = v589;
  *((float *)v570 + 2) = v590;
  if (v140 <= v142)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, (uint64_t)v570);
    unsigned int v145 = *(_DWORD *)(v124 + 8);
    unsigned int v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    uint64_t v144 = *(void *)v124 + 12 * v142;
    *(void *)uint64_t v144 = v589;
    *(float *)(v144 + 8) = v143;
    unsigned int v145 = v142 + 1;
    *(_DWORD *)(v124 + 8) = v145;
  }
  float v146 = v588;
  *(void *)&v570[0] = v587;
  *((float *)v570 + 2) = v588;
  if (v140 <= v145)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, (uint64_t)v570);
    unsigned int v148 = *(_DWORD *)(v124 + 8);
    unsigned int v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    uint64_t v147 = *(void *)v124 + 12 * v145;
    *(void *)uint64_t v147 = v587;
    *(float *)(v147 + 8) = v146;
    unsigned int v148 = v145 + 1;
    *(_DWORD *)(v124 + 8) = v148;
  }
  float v149 = v596;
  *(void *)&v570[0] = v595;
  *((float *)v570 + 2) = v596;
  if (v140 <= v148)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, (uint64_t)v570);
    unsigned int v151 = *(_DWORD *)(v124 + 8);
    unsigned int v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    uint64_t v150 = *(void *)v124 + 12 * v148;
    *(void *)uint64_t v150 = v595;
    *(float *)(v150 + 8) = v149;
    unsigned int v151 = v148 + 1;
    *(_DWORD *)(v124 + 8) = v151;
  }
  int v152 = *(_DWORD *)&v583[16];
  float v153 = v584;
  *(void *)&v570[0] = *(void *)&v583[12];
  *((float *)v570 + 2) = v584;
  if (v140 <= v151)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, (uint64_t)v570);
    unsigned int v155 = *(_DWORD *)(v124 + 8);
    unsigned int v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    uint64_t v154 = (float *)(*(void *)v124 + 12 * v151);
    *uint64_t v154 = *(float *)&v583[12];
    *((_DWORD *)v154 + 1) = v152;
    v154[2] = v153;
    unsigned int v155 = v151 + 1;
    *(_DWORD *)(v124 + 8) = v155;
  }
  float v156 = v592;
  *(void *)&v570[0] = v591;
  *((float *)v570 + 2) = v592;
  if (v140 <= v155)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, (uint64_t)v570);
    unsigned int v158 = *(_DWORD *)(v124 + 8);
    unsigned int v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    uint64_t v157 = *(void *)v124 + 12 * v155;
    *(void *)uint64_t v157 = v591;
    *(float *)(v157 + 8) = v156;
    unsigned int v158 = v155 + 1;
    *(_DWORD *)(v124 + 8) = v158;
  }
  float v159 = v586;
  *(void *)&v570[0] = v585;
  *((float *)v570 + 2) = v586;
  if (v140 <= v158)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, (uint64_t)v570);
    unsigned int v161 = *(_DWORD *)(v124 + 8);
    unsigned int v140 = *(_DWORD *)(v124 + 12) & 0x7FFFFFFF;
  }
  else
  {
    uint64_t v160 = *(void *)v124 + 12 * v158;
    *(void *)uint64_t v160 = v585;
    *(float *)(v160 + 8) = v159;
    unsigned int v161 = v158 + 1;
    *(_DWORD *)(v124 + 8) = v161;
  }
  float v162 = v594;
  *(void *)&v570[0] = v593;
  *((float *)v570 + 2) = v594;
  if (v140 <= v161)
  {
    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, (uint64_t)v570);
  }
  else
  {
    uint64_t v163 = *(void *)v124 + 12 * v161;
    *(void *)uint64_t v163 = v593;
    *(float *)(v163 + 8) = v162;
    *(_DWORD *)(v124 + 8) = v161 + 1;
  }
  float v164 = (float)((float)(*((float *)&v589 + 1) - *(float *)&v583[4]) * (float)(v596 - *(float *)&v583[8]))
       - (float)((float)(v590 - *(float *)&v583[8]) * (float)(*((float *)&v595 + 1) - *(float *)&v583[4]));
  float v165 = (float)((float)(v590 - *(float *)&v583[8]) * (float)(*(float *)&v595 - *(float *)v583))
       - (float)((float)(*(float *)&v589 - *(float *)v583) * (float)(v596 - *(float *)&v583[8]));
  float v166 = (float)((float)(*(float *)&v589 - *(float *)v583) * (float)(*((float *)&v595 + 1) - *(float *)&v583[4]))
       - (float)((float)(*((float *)&v589 + 1) - *(float *)&v583[4]) * (float)(*(float *)&v595 - *(float *)v583));
  float v167 = (float)((float)(v165 * v165) + (float)(v164 * v164)) + (float)(v166 * v166);
  float v168 = 0.0;
  float v169 = 0.0;
  float v170 = 0.0;
  if (v167 > 0.0)
  {
    float v171 = 1.0 / sqrtf(v167);
    float v168 = v164 * v171;
    float v169 = v165 * v171;
    float v170 = v166 * v171;
  }
  float v172 = -(float)((float)((float)(*(float *)&v583[4] * v169) + (float)(*(float *)v583 * v168))
                + (float)(*(float *)&v583[8] * v170));
  *(void *)&v570[0] = __PAIR64__(LODWORD(v169), LODWORD(v168));
  *((float *)v570 + 2) = v170;
  *((float *)v570 + 3) = v172;
  uint64_t v173 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v173)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    uint64_t v174 = *(void *)(v124 + 32) + 16 * v173;
    *(float *)uint64_t v174 = v168;
    *(float *)(v174 + 4) = v169;
    *(float *)(v174 + 8) = v170;
    *(float *)(v174 + 12) = v172;
    *(_DWORD *)(v124 + 40) = v173 + 1;
  }
  float v175 = (float)((float)(*((float *)&v593 + 1) - *((float *)&v585 + 1)) * (float)(v592 - v586))
       - (float)((float)(v594 - v586) * (float)(*((float *)&v591 + 1) - *((float *)&v585 + 1)));
  float v176 = (float)((float)(v594 - v586) * (float)(*(float *)&v591 - *(float *)&v585))
       - (float)((float)(*(float *)&v593 - *(float *)&v585) * (float)(v592 - v586));
  float v177 = (float)((float)(*(float *)&v593 - *(float *)&v585) * (float)(*((float *)&v591 + 1) - *((float *)&v585 + 1)))
       - (float)((float)(*((float *)&v593 + 1) - *((float *)&v585 + 1)) * (float)(*(float *)&v591 - *(float *)&v585));
  float v178 = (float)((float)(v176 * v176) + (float)(v175 * v175)) + (float)(v177 * v177);
  float v179 = 0.0;
  float v180 = 0.0;
  float v181 = 0.0;
  if (v178 > 0.0)
  {
    float v182 = 1.0 / sqrtf(v178);
    float v179 = v175 * v182;
    float v180 = v176 * v182;
    float v181 = v177 * v182;
  }
  float v183 = -(float)((float)((float)(*((float *)&v585 + 1) * v180) + (float)(*(float *)&v585 * v179)) + (float)(v586 * v181));
  *(void *)&v570[0] = __PAIR64__(LODWORD(v180), LODWORD(v179));
  *((float *)v570 + 2) = v181;
  *((float *)v570 + 3) = v183;
  uint64_t v184 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v184)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    uint64_t v185 = *(void *)(v124 + 32) + 16 * v184;
    *(float *)uint64_t v185 = v179;
    *(float *)(v185 + 4) = v180;
    *(float *)(v185 + 8) = v181;
    *(float *)(v185 + 12) = v183;
    *(_DWORD *)(v124 + 40) = v184 + 1;
  }
  float v186 = (float)((float)(*(float *)&v583[16] - *(float *)&v583[4]) * (float)(v592 - *(float *)&v583[8]))
       - (float)((float)(v584 - *(float *)&v583[8]) * (float)(*((float *)&v591 + 1) - *(float *)&v583[4]));
  float v187 = (float)((float)(v584 - *(float *)&v583[8]) * (float)(*(float *)&v591 - *(float *)v583))
       - (float)((float)(*(float *)&v583[12] - *(float *)v583) * (float)(v592 - *(float *)&v583[8]));
  float v188 = (float)((float)(*(float *)&v583[12] - *(float *)v583) * (float)(*((float *)&v591 + 1) - *(float *)&v583[4]))
       - (float)((float)(*(float *)&v583[16] - *(float *)&v583[4]) * (float)(*(float *)&v591 - *(float *)v583));
  float v189 = (float)((float)(v187 * v187) + (float)(v186 * v186)) + (float)(v188 * v188);
  float v190 = 0.0;
  float v191 = 0.0;
  float v192 = 0.0;
  if (v189 > 0.0)
  {
    float v193 = 1.0 / sqrtf(v189);
    float v190 = v186 * v193;
    float v191 = v187 * v193;
    float v192 = v188 * v193;
  }
  float v194 = -(float)((float)((float)(*(float *)&v583[4] * v191) + (float)(*(float *)v583 * v190))
                + (float)(*(float *)&v583[8] * v192));
  *(void *)&v570[0] = __PAIR64__(LODWORD(v191), LODWORD(v190));
  *((float *)v570 + 2) = v192;
  *((float *)v570 + 3) = v194;
  uint64_t v195 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v195)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    uint64_t v196 = *(void *)(v124 + 32) + 16 * v195;
    *(float *)uint64_t v196 = v190;
    *(float *)(v196 + 4) = v191;
    *(float *)(v196 + 8) = v192;
    *(float *)(v196 + 12) = v194;
    *(_DWORD *)(v124 + 40) = v195 + 1;
  }
  float v197 = (float)((float)(*((float *)&v593 + 1) - *((float *)&v595 + 1)) * (float)(v586 - v596))
       - (float)((float)(v594 - v596) * (float)(*((float *)&v585 + 1) - *((float *)&v595 + 1)));
  float v198 = (float)((float)(v594 - v596) * (float)(*(float *)&v585 - *(float *)&v595))
       - (float)((float)(*(float *)&v593 - *(float *)&v595) * (float)(v586 - v596));
  float v199 = (float)((float)(*(float *)&v593 - *(float *)&v595) * (float)(*((float *)&v585 + 1) - *((float *)&v595 + 1)))
       - (float)((float)(*((float *)&v593 + 1) - *((float *)&v595 + 1)) * (float)(*(float *)&v585 - *(float *)&v595));
  float v200 = (float)((float)(v198 * v198) + (float)(v197 * v197)) + (float)(v199 * v199);
  float v201 = 0.0;
  float v202 = 0.0;
  float v203 = 0.0;
  if (v200 > 0.0)
  {
    float v204 = 1.0 / sqrtf(v200);
    float v201 = v197 * v204;
    float v202 = v198 * v204;
    float v203 = v199 * v204;
  }
  float v205 = -(float)((float)((float)(*((float *)&v595 + 1) * v202) + (float)(*(float *)&v595 * v201)) + (float)(v596 * v203));
  *(void *)&v570[0] = __PAIR64__(LODWORD(v202), LODWORD(v201));
  *((float *)v570 + 2) = v203;
  *((float *)v570 + 3) = v205;
  uint64_t v206 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v206)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    uint64_t v207 = *(void *)(v124 + 32) + 16 * v206;
    *(float *)uint64_t v207 = v201;
    *(float *)(v207 + 4) = v202;
    *(float *)(v207 + 8) = v203;
    *(float *)(v207 + 12) = v205;
    *(_DWORD *)(v124 + 40) = v206 + 1;
  }
  float v208 = (float)((float)(*((float *)&v587 + 1) - *(float *)&v583[4]) * (float)(v586 - *(float *)&v583[8]))
       - (float)((float)(v588 - *(float *)&v583[8]) * (float)(*((float *)&v585 + 1) - *(float *)&v583[4]));
  float v209 = (float)((float)(v588 - *(float *)&v583[8]) * (float)(*(float *)&v585 - *(float *)v583))
       - (float)((float)(*(float *)&v587 - *(float *)v583) * (float)(v586 - *(float *)&v583[8]));
  float v210 = (float)((float)(*(float *)&v587 - *(float *)v583) * (float)(*((float *)&v585 + 1) - *(float *)&v583[4]))
       - (float)((float)(*((float *)&v587 + 1) - *(float *)&v583[4]) * (float)(*(float *)&v585 - *(float *)v583));
  float v211 = (float)((float)(v209 * v209) + (float)(v208 * v208)) + (float)(v210 * v210);
  float v212 = 0.0;
  float v213 = 0.0;
  float v214 = 0.0;
  if (v211 > 0.0)
  {
    float v215 = 1.0 / sqrtf(v211);
    float v212 = v208 * v215;
    float v213 = v209 * v215;
    float v214 = v210 * v215;
  }
  float v216 = -(float)((float)((float)(*(float *)&v583[4] * v213) + (float)(*(float *)v583 * v212))
                + (float)(*(float *)&v583[8] * v214));
  *(void *)&v570[0] = __PAIR64__(LODWORD(v213), LODWORD(v212));
  *((float *)v570 + 2) = v214;
  *((float *)v570 + 3) = v216;
  uint64_t v217 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v217)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    uint64_t v218 = *(void *)(v124 + 32) + 16 * v217;
    *(float *)uint64_t v218 = v212;
    *(float *)(v218 + 4) = v213;
    *(float *)(v218 + 8) = v214;
    *(float *)(v218 + 12) = v216;
    *(_DWORD *)(v124 + 40) = v217 + 1;
  }
  float v219 = (float)((float)(*((float *)&v591 + 1) - *((float *)&v589 + 1)) * (float)(v594 - v590))
       - (float)((float)(v592 - v590) * (float)(*((float *)&v593 + 1) - *((float *)&v589 + 1)));
  float v220 = (float)((float)(v592 - v590) * (float)(*(float *)&v593 - *(float *)&v589))
       - (float)((float)(*(float *)&v591 - *(float *)&v589) * (float)(v594 - v590));
  float v221 = (float)((float)(*(float *)&v591 - *(float *)&v589) * (float)(*((float *)&v593 + 1) - *((float *)&v589 + 1)))
       - (float)((float)(*((float *)&v591 + 1) - *((float *)&v589 + 1)) * (float)(*(float *)&v593 - *(float *)&v589));
  float v222 = (float)((float)(v220 * v220) + (float)(v219 * v219)) + (float)(v221 * v221);
  float v223 = 0.0;
  float v224 = 0.0;
  float v225 = 0.0;
  if (v222 > 0.0)
  {
    float v226 = 1.0 / sqrtf(v222);
    float v223 = v219 * v226;
    float v224 = v220 * v226;
    float v225 = v221 * v226;
  }
  float v227 = -(float)((float)((float)(*((float *)&v589 + 1) * v224) + (float)(*(float *)&v589 * v223)) + (float)(v590 * v225));
  *(void *)&v570[0] = __PAIR64__(LODWORD(v224), LODWORD(v223));
  *((float *)v570 + 2) = v225;
  *((float *)v570 + 3) = v227;
  uint64_t v228 = *(unsigned int *)(v124 + 40);
  if ((*(_DWORD *)(v124 + 44) & 0x7FFFFFFFu) <= v228)
  {
    physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(v126, v570);
  }
  else
  {
    uint64_t v229 = *(void *)(v124 + 32) + 16 * v228;
    *(float *)uint64_t v229 = v223;
    *(float *)(v229 + 4) = v224;
    *(float *)(v229 + 8) = v225;
    *(float *)(v229 + 12) = v227;
    *(_DWORD *)(v124 + 40) = v228 + 1;
  }
  LODWORD(v570[0]) = 11;
  uint64_t v230 = *(unsigned int *)(v124 + 24);
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v230)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v231 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v230) = v570[0];
    unsigned int v231 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v231;
  }
  LODWORD(v570[0]) = 65559;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v231)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v232 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v231) = v570[0];
    unsigned int v232 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v232;
  }
  LODWORD(v570[0]) = 196623;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v232)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v233 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v232) = v570[0];
    unsigned int v233 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v233;
  }
  LODWORD(v570[0]) = 131088;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v233)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v234 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v233) = v570[0];
    unsigned int v234 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v234;
  }
  LODWORD(v570[0]) = 17170445;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v234)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v235 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v234) = v570[0];
    unsigned int v235 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v235;
  }
  LODWORD(v570[0]) = 17235989;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v235)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v236 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v235) = v570[0];
    unsigned int v236 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v236;
  }
  LODWORD(v570[0]) = 17104905;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v236)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v237 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v236) = v570[0];
    unsigned int v237 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v237;
  }
  LODWORD(v570[0]) = 17039378;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v237)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v238 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v237) = v570[0];
    unsigned int v238 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v238;
  }
  LODWORD(v570[0]) = 33554451;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v238)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v239 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v238) = v570[0];
    unsigned int v239 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v239;
  }
  LODWORD(v570[0]) = 33816582;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v239)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v240 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v239) = v570[0];
    unsigned int v240 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v240;
  }
  LODWORD(v570[0]) = 33882132;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v240)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v241 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v240) = v570[0];
    unsigned int v241 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v241;
  }
  LODWORD(v570[0]) = 33619968;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v241)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v242 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v241) = v570[0];
    unsigned int v242 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v242;
  }
  LODWORD(v570[0]) = 50528278;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v242)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v243 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v242) = v570[0];
    unsigned int v243 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v243;
  }
  LODWORD(v570[0]) = 50790404;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v243)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v244 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v243) = v570[0];
    unsigned int v244 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v244;
  }
  LODWORD(v570[0]) = 50724881;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v244)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v245 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v244) = v570[0];
    unsigned int v245 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v245;
  }
  LODWORD(v570[0]) = 50462722;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v245)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v246 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v245) = v570[0];
    unsigned int v246 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v246;
  }
  LODWORD(v570[0]) = 67108867;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v246)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v247 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v246) = v570[0];
    unsigned int v247 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v247;
  }
  LODWORD(v570[0]) = 67239950;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v247)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v248 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v247) = v570[0];
    unsigned int v248 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v248;
  }
  LODWORD(v570[0]) = 67502087;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v248)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v249 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v248) = v570[0];
    unsigned int v249 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v249;
  }
  LODWORD(v570[0]) = 67371016;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v249)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v250 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v249) = v570[0];
    unsigned int v250 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v250;
  }
  LODWORD(v570[0]) = 83951626;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v250)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v251 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v250) = v570[0];
    unsigned int v251 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v251;
  }
  LODWORD(v570[0]) = 84213765;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v251)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v252 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v251) = v570[0];
    unsigned int v252 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v252;
  }
  LODWORD(v570[0]) = 84344844;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v252)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
    unsigned int v253 = *(_DWORD *)(v124 + 24);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v252) = v570[0];
    unsigned int v253 = *(_DWORD *)(v124 + 24) + 1;
    *(_DWORD *)(v124 + 24) = v253;
  }
  LODWORD(v570[0]) = 84082689;
  if ((*(_DWORD *)(v124 + 28) & 0x7FFFFFFFu) <= v253)
  {
    physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(v125, v570);
  }
  else
  {
    *(_DWORD *)(*(void *)(v124 + 16) + 4 * v253) = v570[0];
    ++*(_DWORD *)(v124 + 24);
  }
  if (!v536) {
    goto LABEL_450;
  }
  uint64_t v254 = v534[7];
  float v255 = *(float *)(v254 + 340);
  float v256 = *(float *)(v254 + 336);
  float v257 = -v255;
  uint64_t v258 = "exINS0_18ConvexHullNoScaleVEEE";
  do
  {
    uint64_t v548 = v124;
    uint64_t v259 = *(void *)(v124 + 48);
    uint64_t v260 = *(unsigned int *)(v259 + 8);
    if (v260)
    {
      uint64_t v261 = 0;
      unsigned int v262 = -1;
      float v263 = 0.0;
      while (1)
      {
        float v264 = 0.0;
        float v265 = 0.0;
        if (*(_DWORD *)(v124 + 8))
        {
          uint64_t v266 = (float *)(*(void *)v259 + 16 * v261);
          float v267 = *v266;
          float v268 = v266[1];
          float v269 = v266[2];
          float v270 = v266[3];
          uint64_t v271 = (float *)(*(void *)v124 + 8);
          uint64_t v272 = *(unsigned int *)(v124 + 8);
          do
          {
            float v273 = (float)(v268 * *(v271 - 1)) + (float)(*(v271 - 2) * v267);
            float v274 = *v271;
            v271 += 3;
            float v275 = v270 + (float)(v273 + (float)(v274 * v269));
            if (v264 <= v275) {
              float v264 = v275;
            }
            if (v265 >= v275) {
              float v265 = v275;
            }
            --v272;
          }
          while (v272);
        }
        float v276 = v264 - v265;
        if (v276 < v255) {
          float v276 = 1.0;
        }
        float v277 = v264 / v276;
        if (v277 > v263)
        {
          uint64_t v278 = *(unsigned int *)(v124 + 40);
          if (v278)
          {
            uint64_t v279 = 0;
            unsigned int v280 = (float *)(*(void *)v259 + 16 * v261);
            uint64_t v281 = *(void *)(v124 + 32);
            float v282 = v280 + 3;
            float v283 = *v280;
            float v284 = v280[1];
            while (1)
            {
              uint64_t v285 = (float *)(v281 + 16 * v279);
              float v286 = v285[1];
              if (v283 != *v285) {
                break;
              }
              float v287 = v280[2];
              if (v284 != v286) {
                goto LABEL_210;
              }
              if (v287 != v285[2]) {
                goto LABEL_210;
              }
              float v288 = 0.0;
              if (*v282 != *(float *)(v281 + 16 * v279 + 12)) {
                goto LABEL_210;
              }
LABEL_217:
              ++v279;
              float v277 = v288;
              if (v279 == v278) {
                goto LABEL_221;
              }
            }
            float v287 = v280[2];
LABEL_210:
            if ((float)((float)((float)(v284 * v286) + (float)(v283 * *v285)) + (float)(v287 * v285[2])) > *((float *)v258 + 540)
              && (uint64_t v289 = *(unsigned int *)(v124 + 24), v289))
            {
              float v290 = (unsigned __int8 *)(*(void *)(v124 + 16) + 3);
              while (1)
              {
                if (v279 == *v290)
                {
                  uint64_t v291 = (float *)(*(void *)v124 + 12 * *(v290 - 1));
                  if ((float)(*v282
                             + (float)((float)((float)(v284 * v291[1]) + (float)(*v291 * v283)) + (float)(v291[2] * v287))) < 0.0)
                    break;
                }
                v290 += 4;
                if (!--v289) {
                  goto LABEL_216;
                }
              }
              float v288 = 0.0;
            }
            else
            {
LABEL_216:
              float v288 = v277;
            }
            goto LABEL_217;
          }
          float v288 = v277;
LABEL_221:
          if (v288 > v263)
          {
            unsigned int v262 = v261;
            float v263 = v288;
          }
        }
        if (++v261 == v260) {
          goto LABEL_226;
        }
      }
    }
    unsigned int v262 = -1;
    float v263 = 0.0;
LABEL_226:
    if (v263 <= v256) {
      uint64_t v292 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v292 = v262;
    }
    if ((v292 & 0x80000000) != 0)
    {
LABEL_449:
      uint64_t v124 = v548;
      break;
    }
    double v568 = 0.0;
    uint64_t v569 = 0;
    uint64_t v293 = *(unsigned int *)(v124 + 8);
    if (!v293) {
      goto LABEL_245;
    }
    unsigned int v294 = 0;
    char v295 = 0;
    int v296 = (float *)(v565 + 16 * v292);
    float v297 = *v296;
    float v298 = v296[1];
    float v299 = v296[2];
    uint64_t v300 = v565 + 16 * v292;
    float v301 = *(float *)(v300 + 12);
    v543 = (float *)(v300 + 12);
    v544 = v296;
    float v302 = (float *)(*(void *)v124 + 8);
    float v303 = (char *)&v597 + 1;
    do
    {
      float v304 = v301 + (float)((float)((float)(v298 * *(v302 - 1)) + (float)(*(v302 - 2) * v297)) + (float)(*v302 * v299));
      int v305 = v304 < v257;
      if (v304 > v255) {
        int v305 = 2;
      }
      if (v305) {
        _ZF = v305 == 2;
      }
      else {
        _ZF = 1;
      }
      if (_ZF)
      {
        char v307 = -1;
      }
      else
      {
        if (v305 != 1) {
          goto LABEL_243;
        }
        char v307 = v294++;
      }
      *float v303 = v307;
      v303[1] = -1;
LABEL_243:
      *(v303 - 1) = v305;
      v295 |= v305;
      v302 += 3;
      v303 += 3;
      --v293;
    }
    while (v293);
    if ((v295 & 2) == 0)
    {
LABEL_245:
      uint64_t v308 = (void *)v119[105];
      if ((*(unsigned int (**)(void *))(*v308 + 40))(v308)) {
        int v309 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull>::getName() [T = physx::ConvexHull]";
      }
      else {
        int v309 = "<allocation names disabled>";
      }
      uint64_t v124 = (*(uint64_t (**)(void *, uint64_t, const char *, const char *, uint64_t))(v308[3] + 16))(v308 + 3, 56, v309, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 473);
      *(_OWORD *)uint64_t v124 = 0u;
      *(_OWORD *)(v124 + 32) = 0u;
      *(_OWORD *)(v124 + 16) = 0u;
      uint64_t v310 = v548;
      *(void *)(v124 + 48) = *(void *)(v548 + 48);
      physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::resize(v124, *(_DWORD *)(v548 + 8), (uint64_t)v583);
      physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::resize(v124 + 16, *(_DWORD *)(v548 + 24), v583);
      physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::resize(v124 + 32, *(_DWORD *)(v548 + 40), v583);
      memcpy(*(void **)v124, *(const void **)v310, (12 * *(_DWORD *)(v310 + 8)));
      uint64_t v120 = v534;
      memcpy(*(void **)(v124 + 16), *(const void **)(v310 + 16), (4 * *(_DWORD *)(v310 + 24)));
      memcpy(*(void **)(v124 + 32), *(const void **)(v310 + 32), (16 * *(_DWORD *)(v310 + 40)));
      goto LABEL_348;
    }
    if (!*(_DWORD *)(v124 + 40))
    {
      LOWORD(v314) = 0;
      LOWORD(v312) = 0;
      unsigned int v430 = 0;
      char v431 = 1;
      int v433 = -1;
      goto LABEL_324;
    }
    unint64_t v311 = 0;
    unsigned int v537 = 0;
    int v312 = 0;
    LODWORD(v313) = 0;
    uint64_t v314 = 0;
    do
    {
      char v315 = 0;
      unsigned int v316 = v313;
      uint64_t v317 = 255;
      uint64_t v313 = 0xFFFFFFFFLL;
      LODWORD(v318) = v316;
      int v319 = 255;
      uint64_t v320 = 255;
      uint64_t v546 = v316;
      unint64_t v541 = v311;
      uint64_t v542 = v314;
      unsigned int v540 = v316;
      do
      {
        unsigned int v321 = v318;
        uint64_t v318 = (v318 + 1);
        uint64_t v322 = *(void *)(v548 + 16);
        if (v318 < *(_DWORD *)(v548 + 24)
          && v311 == *(unsigned __int8 *)(v322 + 4 * v318 + 3))
        {
          uint64_t v323 = v318;
        }
        else
        {
          uint64_t v323 = v546;
          uint64_t v313 = v318;
          LODWORD(v318) = v316;
        }
        float v324 = (__int16 *)(v322 + 4 * v321);
        uint64_t v325 = *v324;
        uint64_t v326 = *v324;
        uint64_t v327 = *((unsigned __int8 *)v324 + 2);
        int v328 = *((unsigned __int8 *)&v597 + 3 * v327);
        uint64_t v329 = v322 + 4 * v323;
        unsigned int v332 = *(unsigned __int8 *)(v329 + 2);
        float v331 = (unsigned __int8 *)(v329 + 2);
        uint64_t v330 = v332;
        int v333 = *((unsigned __int8 *)&v597 + 3 * v332);
        if (v328 == 1)
        {
          uint64_t v334 = v317;
          v601.i16[v321] = v312;
          float v335 = &v583[4 * (unsigned __int16)v312];
          float32x4_t v335[2] = *((unsigned char *)&v597 + 3 * v327 + 1);
          v335[3] = v314;
          if (v333 == 1)
          {
            if (v321 > v325)
            {
              uint64_t v336 = v601.i16[(__int16)v325];
              *(_WORD *)&v583[4 * (unsigned __int16)v312] = v336;
              *(_WORD *)&v583[4 * v336] = v312;
            }
            ++v312;
            uint64_t v317 = v334;
          }
          else
          {
            if (v321 <= v325)
            {
              if (v333)
              {
                uint64_t v370 = *(void *)(v548 + 32);
                float32x2_t v371 = (float *)(v370 + 16 * *(unsigned __int8 *)(v322 + 4 * v321 + 3));
                int v372 = (float *)(v370 + 16 * *(unsigned __int8 *)(v322 + 4 * v325 + 3));
                float v373 = *v371;
                float v374 = v371[1];
                float v375 = v371[2];
                float v376 = *v372;
                float v377 = v372[1];
                float v378 = v372[2];
                float v379 = *v544;
                float v380 = v544[1];
                float v381 = v544[2];
                v382.f32[0] = (float)(v374 * v378) - (float)(v377 * v375);
                float v383 = (float)((float)(*v372 * (float)((float)(v380 * v375) - (float)(v374 * v381)))
                             + (float)(*v371 * (float)((float)(v377 * v381) - (float)(v380 * v378))))
                     + (float)(*v544 * v382.f32[0]);
                if (v383 == 0.0)
                {
                  float32x2_t v392 = 0;
                  float v393 = 1.0;
                  float v388 = 0.0;
                  float32x2_t v387 = (float32x2_t)1065353216;
                  float32x2_t v390 = (float32x2_t)0x3F80000000000000;
                  float v391 = 0.0;
                }
                else
                {
                  float v384 = -v374;
                  float v385 = 1.0 / v383;
                  v386.f32[0] = (float)(v377 * v381) - (float)(v378 * v380);
                  v386.f32[1] = -(float)((float)(v376 * v381) - (float)(v378 * v379));
                  float32x2_t v387 = vmul_n_f32(v386, v385);
                  float v388 = (float)((float)(v376 * v380) - (float)(v379 * v377)) * v385;
                  v389.f32[0] = -(float)((float)(v375 * (float)-v380) + (float)(v374 * v381));
                  v389.f32[1] = (float)(v373 * v381) - (float)(v379 * v375);
                  float32x2_t v390 = vmul_n_f32(v389, v385);
                  float v391 = -(float)((float)((float)(v373 * v380) - (float)(v379 * v374)) * v385);
                  v382.f32[1] = -(float)((float)(v373 * v378) - (float)(v376 * v375));
                  float32x2_t v392 = vmul_n_f32(v382, v385);
                  float v393 = (float)((float)(v376 * v384) + (float)(v373 * v377)) * v385;
                }
                float v412 = v371[3];
                float v413 = v372[3];
                float v414 = (float)((float)(v388 * v412) + (float)(v391 * v413)) + (float)(v393 * *v543);
                float32x2_t v415 = vneg_f32(vadd_f32(vadd_f32(vmul_n_f32(v387, v412), vmul_n_f32(v390, v413)), vmul_n_f32(v392, *v543)));
                *(float32x2_t *)&long long v567 = v415;
                *((float *)&v567 + 2) = -v414;
                int v416 = v569;
                if ((HIDWORD(v569) & 0x7FFFFFFFu) <= v569)
                {
                  uint64_t v418 = v320;
                  unsigned int v419 = v294;
                  uint64_t v420 = v313;
                  physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t)&v568, (uint64_t)&v567);
                  uint64_t v320 = v418;
                  unsigned int v316 = v540;
                  uint64_t v313 = v420;
                  unint64_t v311 = v541;
                  uint64_t v314 = v542;
                  unsigned int v294 = v419;
                }
                else
                {
                  float32x4_t v417 = (float32x2_t *)(*(void *)&v568 + 12 * v569);
                  *float32x4_t v417 = v415;
                  v417[1].f32[0] = -v414;
                  LODWORD(v569) = v416 + 1;
                }
                uint64_t v317 = v294++;
              }
              else
              {
                uint64_t v317 = *((unsigned __int8 *)&v597 + 3 * v330 + 1);
                if (v317 == 255)
                {
                  uint64_t v398 = v320;
                  uint64_t v399 = *(void *)v548;
                  float32x4_t v400 = (void *)(*(void *)v548 + 12 * v330);
                  int v401 = v569;
                  if ((HIDWORD(v569) & 0x7FFFFFFFu) <= v569)
                  {
                    unsigned int v426 = v294;
                    uint64_t v427 = v313;
                    physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t)&v568, (uint64_t)v400);
                    unsigned int v316 = v540;
                    uint64_t v313 = v427;
                    unint64_t v311 = v541;
                    uint64_t v314 = v542;
                    unsigned int v294 = v426;
                    uint64_t v330 = *v331;
                  }
                  else
                  {
                    uint64_t v402 = *(void *)&v568 + 12 * v569;
                    *(void *)uint64_t v402 = *v400;
                    *(_DWORD *)(v402 + 8) = *(_DWORD *)(v399 + 12 * v330 + 8);
                    LODWORD(v569) = v401 + 1;
                  }
                  uint64_t v317 = v294;
                  *((unsigned char *)&v597 + 3 * v330 + 1) = v294++;
                  uint64_t v320 = v398;
                }
              }
            }
            else
            {
              uint64_t v344 = v601.i16[v326];
              *(_WORD *)&v583[4 * (unsigned __int16)v312] = v344;
              float v345 = &v583[4 * v344];
              *(_WORD *)float v345 = v312;
              uint64_t v317 = v345[2];
            }
            if (v319 == 255 || v319 == v317)
            {
              ++v312;
            }
            else
            {
              float32x4_t v428 = &v583[4 * (unsigned __int16)(v312 + 1)];
              v428[2] = v317;
              uint64_t v320 = (unsigned __int16)(v312 + 1);
              v428[3] = v314;
              *(_WORD *)float32x4_t v428 = 255;
              v312 += 2;
            }
          }
        }
        else if (v333 == 1)
        {
          if (v321 <= v325)
          {
            if (*((unsigned char *)&v597 + 3 * v327))
            {
              uint64_t v346 = *(void *)(v548 + 32);
              float v347 = (float *)(v346 + 16 * *(unsigned __int8 *)(v322 + 4 * v321 + 3));
              float v348 = (float *)(v346 + 16 * *(unsigned __int8 *)(v322 + 4 * v325 + 3));
              float v349 = *v347;
              float v350 = v347[1];
              float v351 = v347[2];
              float v352 = *v348;
              float v353 = v348[1];
              float v354 = v348[2];
              float v355 = *v544;
              float v356 = v544[1];
              float v357 = v544[2];
              v358.f32[0] = (float)(v350 * v354) - (float)(v353 * v351);
              float v359 = (float)((float)(*v348 * (float)((float)(v356 * v351) - (float)(v350 * v357)))
                           + (float)(*v347 * (float)((float)(v353 * v357) - (float)(v356 * v354))))
                   + (float)(*v544 * v358.f32[0]);
              if (v359 == 0.0)
              {
                float32x2_t v366 = (float32x2_t)0x3F80000000000000;
                float32x2_t v363 = (float32x2_t)1065353216;
                float32x2_t v368 = 0;
                float v369 = 1.0;
                float v364 = 0.0;
                float v367 = 0.0;
              }
              else
              {
                float v360 = -v350;
                float v361 = 1.0 / v359;
                v362.f32[0] = (float)(v353 * v357) - (float)(v354 * v356);
                v362.f32[1] = -(float)((float)(v352 * v357) - (float)(v354 * v355));
                float32x2_t v363 = vmul_n_f32(v362, v361);
                float v364 = (float)((float)(v352 * v356) - (float)(v355 * v353)) * v361;
                v365.f32[0] = -(float)((float)(v351 * (float)-v356) + (float)(v350 * v357));
                v365.f32[1] = (float)(v349 * v357) - (float)(v355 * v351);
                float32x2_t v366 = vmul_n_f32(v365, v361);
                float v367 = -(float)((float)((float)(v349 * v356) - (float)(v355 * v350)) * v361);
                v358.f32[1] = -(float)((float)(v349 * v354) - (float)(v352 * v351));
                float32x2_t v368 = vmul_n_f32(v358, v361);
                float v369 = (float)((float)(v352 * v360) + (float)(v349 * v353)) * v361;
              }
              float v403 = v347[3];
              float v404 = v348[3];
              float v405 = (float)((float)(v364 * v403) + (float)(v367 * v404)) + (float)(v369 * *v543);
              float32x2_t v406 = vneg_f32(vadd_f32(vadd_f32(vmul_n_f32(v363, v403), vmul_n_f32(v366, v404)), vmul_n_f32(v368, *v543)));
              *(float32x2_t *)&long long v567 = v406;
              *((float *)&v567 + 2) = -v405;
              int v407 = v569;
              if ((HIDWORD(v569) & 0x7FFFFFFFu) <= v569)
              {
                unsigned int v539 = v320;
                unsigned int v409 = v294;
                uint64_t v410 = v313;
                uint64_t v411 = v317;
                physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t)&v568, (uint64_t)&v567);
                uint64_t v317 = v411;
                uint64_t v320 = v539;
                unsigned int v316 = v540;
                uint64_t v313 = v410;
                unint64_t v311 = v541;
                uint64_t v314 = v542;
                unsigned int v294 = v409;
              }
              else
              {
                float32x2_t v408 = (float32x2_t *)(*(void *)&v568 + 12 * v569);
                *float32x2_t v408 = v406;
                v408[1].f32[0] = -v405;
                LODWORD(v569) = v407 + 1;
              }
              int v319 = v294++;
            }
            else
            {
              int v319 = *((unsigned __int8 *)&v597 + 3 * v327 + 1);
              if (v319 == 255)
              {
                unsigned int v538 = v320;
                uint64_t v394 = *(void *)v548;
                float32x2_t v395 = (void *)(*(void *)v548 + 12 * *((unsigned __int8 *)v324 + 2));
                int v396 = v569;
                if ((HIDWORD(v569) & 0x7FFFFFFFu) <= v569)
                {
                  unsigned int v421 = v294;
                  unsigned int v535 = v313;
                  uint64_t v422 = v317;
                  physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack((uint64_t)&v568, (uint64_t)v395);
                  uint64_t v317 = v422;
                  unsigned int v316 = v540;
                  uint64_t v313 = v535;
                  unint64_t v311 = v541;
                  uint64_t v314 = v542;
                  unsigned int v294 = v421;
                  uint64_t v327 = *((unsigned __int8 *)v324 + 2);
                }
                else
                {
                  uint64_t v397 = *(void *)&v568 + 12 * v569;
                  *(void *)uint64_t v397 = *v395;
                  *(_DWORD *)(v397 + 8) = *(_DWORD *)(v394 + 12 * v327 + 8);
                  LODWORD(v569) = v396 + 1;
                }
                int v319 = v294;
                *((unsigned char *)&v597 + 3 * v327 + 1) = v294++;
                uint64_t v320 = v538;
              }
            }
          }
          else
          {
            int v337 = v601.i16[v326];
            uint64_t v338 = v601.i16[v326] + 1;
            int v339 = v583[4 * v601.i16[v326] + 3];
            if ((int)v338 >= (unsigned __int16)v312 || v583[4 * v338 + 3] != v339)
            {
              if (v337 >= 1) {
                int v340 = 1;
              }
              else {
                int v340 = v601.i16[v326];
              }
              int v341 = v340 - 1;
              uint64_t v342 = v337 + 4294967294;
              while (v337 >= 2)
              {
                int v343 = v583[4 * v342-- + 3];
                --v337;
                if (v343 != v339) {
                  goto LABEL_281;
                }
              }
              int v337 = v341;
LABEL_281:
              uint64_t v338 = v337;
            }
            int v319 = v583[4 * v338 + 2];
          }
          if (v317 != 255 && v319 != v317)
          {
            float32x2_t v423 = &v583[4 * (unsigned __int16)v312];
            v423[2] = v317;
            uint64_t v320 = (unsigned __int16)v312;
            v423[3] = v314;
            *(_WORD *)float32x2_t v423 = 255;
            ++v312;
          }
          int v424 = &v583[4 * (unsigned __int16)v312];
          v424[2] = v319;
          v424[3] = v314;
          v601.i16[v321] = v312;
          if (v321 > *v324)
          {
            uint64_t v425 = v601.i16[*v324];
            *(_WORD *)&v583[4 * (unsigned __int16)v312] = v425;
            *(_WORD *)&v583[4 * v425] = v312;
          }
          ++v312;
        }
        v315 |= v328;
      }
      while (v318 != v316);
      if (v315)
      {
        *(_OWORD *)&__src[4 * (unsigned __int16)v314] = *(_OWORD *)(*(void *)(v548 + 32) + 16 * v311);
        uint64_t v314 = (v314 + 1);
      }
      uint64_t v119 = &unk_2687A6000;
      if (v320 != 255)
      {
        float32x4_t v429 = (char *)v570 + 4 * v537;
        *(_WORD *)float32x4_t v429 = v320;
        v429[2] = v319;
        v429[3] = v317;
        ++v537;
      }
      ++v311;
    }
    while (v311 < *(unsigned int *)(v548 + 40));
    unsigned int v430 = v537;
    if (!v537)
    {
      char v431 = 1;
      int v433 = -1;
      goto LABEL_324;
    }
    char v431 = 0;
    unsigned __int16 v432 = v314 + 1;
    *(_OWORD *)&__src[4 * (unsigned __int16)v314] = *(_OWORD *)v544;
    int v433 = v537 - 1;
    if (v537 != 1)
    {
      LOWORD(v314) = v314 + 1;
LABEL_324:
      uint64_t v434 = 0;
      unsigned int v435 = 2;
      while (1)
      {
        int v436 = *((unsigned __int8 *)v570 + 4 * v434 + 3);
        uint64_t v437 = v434 + 1;
        if (v436 != *((unsigned __int8 *)v570 + 4 * v434 + 6))
        {
          if ((int)v434 + 2 >= v430)
          {
LABEL_347:
            uint64_t v124 = 0;
            uint64_t v120 = v534;
            goto LABEL_348;
          }
          unsigned int v438 = (char *)v570 + 4 * v435;
          unsigned int v439 = v430;
          while (v436 != v438[2])
          {
            v438 += 4;
            if (v435 == --v439) {
              goto LABEL_347;
            }
          }
          int v440 = *((_DWORD *)v570 + v437);
          *((_DWORD *)v570 + v437) = *(_DWORD *)v438;
          *(_DWORD *)unsigned int v438 = v440;
        }
        ++v435;
        uint64_t v434 = v437;
        if (v437 == v433)
        {
          unsigned __int16 v432 = v314;
          break;
        }
      }
    }
    if (v294)
    {
      unsigned int v441 = v294;
      float32x4_t v442 = (void *)v119[105];
      if ((*(unsigned int (**)(void *))(*v442 + 40))(v442)) {
        float32x4_t v443 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull>::getName() [T = physx::ConvexHull]";
      }
      else {
        float32x4_t v443 = "<allocation names disabled>";
      }
      uint64_t v124 = (*(uint64_t (**)(void *, uint64_t, const char *, const char *, uint64_t))(v442[3] + 16))(v442 + 3, 56, v443, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullUtils.cpp", 787);
      uint64_t v444 = *(void *)(v548 + 48);
      *(_OWORD *)uint64_t v124 = 0u;
      *(_OWORD *)(v124 + 16) = 0u;
      *(_OWORD *)(v124 + 32) = 0u;
      *(void *)(v124 + 48) = v444;
      unint64_t v445 = *(unsigned int *)(v548 + 8);
      if (v445)
      {
        uint64_t v446 = 0;
        unint64_t v447 = 0;
        unsigned int v448 = 0;
        unsigned int v449 = &v597;
        unsigned int v450 = v441;
        unsigned int v451 = v430;
        do
        {
          int v452 = *(unsigned __int8 *)v449;
          unsigned int v449 = (float *)((char *)v449 + 3);
          if (v452 == 1)
          {
            uint64_t v453 = *(void *)v548 + v446;
            unsigned int v454 = *(_DWORD *)(v124 + 8);
            if ((*(_DWORD *)(v124 + 12) & 0x7FFFFFFFu) <= v454)
            {
              physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, v453);
              unsigned int v451 = v430;
              unsigned int v450 = v441;
            }
            else
            {
              uint64_t v455 = *(void *)v124 + 12 * v454;
              *(void *)uint64_t v455 = *(void *)v453;
              *(_DWORD *)(v455 + 8) = *(_DWORD *)(v453 + 8);
              *(_DWORD *)(v124 + 8) = v454 + 1;
            }
            ++v448;
            unint64_t v445 = *(unsigned int *)(v548 + 8);
          }
          ++v447;
          v446 += 12;
        }
        while (v447 < v445);
      }
      else
      {
        unsigned int v448 = 0;
        unsigned int v450 = v441;
        unsigned int v451 = v430;
      }
      _CF = v450 >= v448;
      uint64_t v513 = v450 - v448;
      if (v513 != 0 && _CF)
      {
        uint64_t v514 = 0;
        do
        {
          uint64_t v515 = *(void *)&v568 + v514;
          unsigned int v516 = *(_DWORD *)(v124 + 8);
          if ((*(_DWORD *)(v124 + 12) & 0x7FFFFFFFu) <= v516)
          {
            physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::growAndPushBack(v124, v515);
            unsigned int v451 = v430;
          }
          else
          {
            uint64_t v517 = *(void *)v124 + 12 * v516;
            *(void *)uint64_t v517 = *(void *)v515;
            *(_DWORD *)(v517 + 8) = *(_DWORD *)(v515 + 8);
            *(_DWORD *)(v124 + 8) = v516 + 1;
          }
          v514 += 12;
          --v513;
        }
        while (v513);
      }
      unsigned int v518 = v451;
      physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::resize(v124 + 16, v451 + (unsigned __int16)v312, &v567);
      physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::resize(v124 + 32, v432, &v567);
      v519 = *(char **)(v124 + 16);
      if ((v431 & 1) == 0)
      {
        int v520 = (unsigned __int16)v312;
        v521 = (char *)v570 + 2;
        uint64_t v522 = v518;
        do
        {
          v523 = &v519[4 * v520];
          v523[3] = v432 - 1;
          uint64_t v524 = *((unsigned __int16 *)v521 - 1);
          *(_WORD *)v523 = v524;
          *(_WORD *)&v583[4 * v524] = v520;
          char v525 = *v521;
          v521 += 4;
          v523[2] = v525;
          ++v520;
          --v522;
        }
        while (v522);
      }
      memcpy(v519, v583, 4 * (unsigned __int16)v312);
      memcpy(*(void **)(v124 + 32), __src, 16 * v432);
      uint64_t v120 = v534;
      uint64_t v119 = (void *)&unk_2687A6000;
    }
    else
    {
      uint64_t v124 = 0;
      uint64_t v120 = v534;
    }
LABEL_348:
    if ((v569 & 0x8000000000000000) == 0 && (v569 & 0x7FFFFFFF00000000) != 0 && *(void *)&v568 != 0) {
      (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
    }
    uint64_t v258 = "N5physx2Gu11LocalConvexINS0_18ConvexHullNoScaleVEEE" + 21;
    if (!v124) {
      goto LABEL_449;
    }
    uint64_t v457 = 0;
    LODWORD(v458) = 0;
    --v536;
    unint64_t v459 = *(unsigned int *)(v124 + 24);
    uint64_t v460 = 3;
    while (v459 != v457)
    {
      uint64_t v461 = *(void *)(v124 + 16);
      uint64_t v462 = v461 + v460;
      int v463 = *(unsigned __int8 *)(v461 + v460);
      if (*(unsigned __int8 *)(v461 + 4 * v458 + 3) != v463) {
        LODWORD(v458) = v457;
      }
      unsigned int v464 = v458;
      if (v457 + 1 < v459)
      {
        if (*(unsigned __int8 *)(v462 + 4) == v463) {
          unsigned int v464 = v457 + 1;
        }
        else {
          unsigned int v464 = v458;
        }
      }
      int v465 = *(unsigned __int16 *)(v462 - 3);
      if (v465 != 255 && v465 != 0xFFFF)
      {
        v460 += 4;
        ++v457;
        if (*(unsigned __int8 *)(v461 + 4 * (__int16)v465 + 2) == *(unsigned __int8 *)(v461 + 4 * v464 + 2)) {
          continue;
        }
      }
      uint64_t v468 = *(void *)(v124 + 32);
      goto LABEL_434;
    }
    if (v459)
    {
      uint64_t v467 = 0;
      uint64_t v461 = *(void *)(v124 + 16);
      uint64_t v468 = *(void *)(v124 + 32);
      v469 = *(char **)v124;
      v470 = (unsigned __int8 *)(v461 + 3);
      int v471 = 1;
      while (1)
      {
        int v472 = *v470;
        v473 = (float *)(v468 + 16 * *v470);
        v474 = (float *)&v469[12 * *(v470 - 1)];
        float v475 = *v474;
        float v476 = v474[1];
        float v477 = *v473;
        float v478 = v473[1];
        float v479 = v474[2];
        float v480 = v473[2];
        float v481 = (float)((float)((float)(v476 * v478) + (float)(*v474 * *v473)) + (float)(v479 * v480)) + v473[3];
        if (v481 > v255 || v481 < v257) {
          break;
        }
        if (*(unsigned __int8 *)(v461 + 4 * v458 + 3) == v472) {
          uint64_t v458 = v458;
        }
        else {
          uint64_t v458 = (v471 - 1);
        }
        uint64_t v483 = v467 + 1;
        if (v467 + 1 >= v459 || (unsigned int v484 = v471, v470[4] != v472)) {
          unsigned int v484 = v458;
        }
        uint64_t v485 = v484 + 1;
        if (v485 >= v459
          || *(unsigned __int8 *)(v461 + 4 * v485 + 3) != v472)
        {
          uint64_t v485 = v458;
        }
        if (v467 != v485)
        {
          v486 = (float *)&v469[12 * *(unsigned __int8 *)(v461 + 4 * v484 + 2)];
          float v487 = v486[1];
          float v488 = *v486 - v475;
          float v489 = v487 - v476;
          v490 = (float *)&v469[12 * *(unsigned __int8 *)(v461 + 4 * v485 + 2)];
          float v491 = *v490 - *v486;
          float v492 = v486[2];
          float v493 = v492 - v479;
          float v494 = v490[1] - v487;
          float v495 = v490[2] - v492;
          float v496 = (float)(v489 * v495) - (float)(v493 * v494);
          float v497 = (float)(v493 * v491) - (float)(v488 * v495);
          float v498 = (float)(v488 * v494) - (float)(v489 * v491);
          float v499 = sqrtf((float)((float)(v497 * v497) + (float)(v496 * v496)) + (float)(v498 * v498));
          if (v499 == 0.0) {
            float v500 = 1.0;
          }
          else {
            float v500 = v496;
          }
          if (v499 == 0.0)
          {
            float v497 = 0.0;
            float v498 = 0.0;
          }
          if ((float)((float)((float)(v478 * (float)((float)(1.0 / v499) * v497))
                             + (float)((float)((float)(1.0 / v499) * v500) * v477))
                     + (float)((float)((float)(1.0 / v499) * v498) * v480)) <= 0.0)
            break;
        }
        ++v471;
        v470 += 4;
        uint64_t v467 = v483;
        if (v483 == v459) {
          goto LABEL_392;
        }
      }
LABEL_434:
      int v526 = *(_DWORD *)(v124 + 44);
      if ((v526 & 0x80000000) == 0 && (v526 & 0x7FFFFFFF) != 0 && v468 != 0)
      {
LABEL_439:
        (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
        uint64_t v461 = *(void *)(v124 + 16);
      }
LABEL_440:
      int v528 = *(_DWORD *)(v124 + 28);
      if ((v528 & 0x80000000) == 0 && (v528 & 0x7FFFFFFF) != 0 && v461) {
LABEL_443:
      }
        (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
LABEL_444:
      int v529 = *(_DWORD *)(v124 + 12);
      if ((v529 & 0x80000000) == 0 && (v529 & 0x7FFFFFFF) != 0 && *(void *)v124) {
        (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
      }
      (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
      goto LABEL_449;
    }
LABEL_392:
    uint64_t v501 = v120[1];
    if (*(_DWORD *)(v124 + 8) > *(unsigned __int16 *)(v501 + 74))
    {
      int v531 = *(_DWORD *)(v124 + 44);
      if ((v531 & 0x80000000) == 0 && (v531 & 0x7FFFFFFF) != 0 && *(void *)(v124 + 32)) {
        (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
      }
      int v532 = *(_DWORD *)(v124 + 28);
      if ((v532 & 0x80000000) == 0 && (v532 & 0x7FFFFFFF) != 0 && *(void *)(v124 + 16)) {
        goto LABEL_443;
      }
      goto LABEL_444;
    }
    if (v459 && (*(_WORD *)(v501 + 72) & 0x80) != 0)
    {
      uint64_t v502 = 0;
      unsigned int v503 = 0;
      unsigned int v504 = 0;
      unsigned int v505 = 0;
      uint64_t v461 = *(void *)(v124 + 16);
      uint64_t v506 = 3;
      do
      {
        int v507 = *(unsigned __int8 *)(v461 + 4 * v503 + 3);
        int v508 = *(unsigned __int8 *)(v461 + v506);
        if (v504 > v505) {
          unsigned int v509 = v504 + 1;
        }
        else {
          unsigned int v509 = v505;
        }
        if (v507 == v508)
        {
          ++v504;
        }
        else
        {
          unsigned int v505 = v509;
          unsigned int v504 = 0;
        }
        if (v507 != v508) {
          unsigned int v503 = v502;
        }
        ++v502;
        v506 += 4;
      }
      while (v459 != v502);
      if (v505 >= 0x21)
      {
        int v533 = *(_DWORD *)(v124 + 44);
        if ((v533 & 0x80000000) == 0 && (v533 & 0x7FFFFFFF) != 0 && *(void *)(v124 + 32)) {
          goto LABEL_439;
        }
        goto LABEL_440;
      }
    }
    int v510 = *(_DWORD *)(v548 + 44);
    if ((v510 & 0x80000000) == 0 && (v510 & 0x7FFFFFFF) != 0 && *(void *)(v548 + 32)) {
      (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
    }
    int v511 = *(_DWORD *)(v548 + 28);
    if ((v511 & 0x80000000) == 0 && (v511 & 0x7FFFFFFF) != 0 && *(void *)(v548 + 16)) {
      (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
    }
    int v512 = *(_DWORD *)(v548 + 12);
    if ((v512 & 0x80000000) == 0 && (v512 & 0x7FFFFFFF) != 0 && *(void *)v548) {
      (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
    }
    (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
  }
  while (v536);
LABEL_450:
  v120[8] = v124;
  if ((v566 & 0x8000000000000000) == 0 && (v566 & 0x7FFFFFFF00000000) != 0 && v565 != 0) {
    (*(void (**)(void))(*(void *)(v119[105] + 24) + 24))();
  }
}

void *physx::QuickHullConvexHullLib::fillConvexMeshDescFromQuickHull(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  uint64_t v5 = *(unsigned int *)(v4 + 128);
  if (v5)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    unsigned int v9 = 0;
    uint64_t v10 = *(void *)(v4 + 120);
    do
    {
      uint64_t v11 = *(void *)(v10 + 8 * v6);
      if (!*(_DWORD *)(v11 + 60))
      {
        ++v8;
        unsigned int v12 = *(unsigned __int16 *)(v11 + 8);
        v7 += v12;
        if (v12 > *(unsigned __int16 *)(*(void *)(v10 + 8 * v9) + 8)) {
          unsigned int v9 = v6;
        }
      }
      ++v6;
    }
    while (v5 != v6);
  }
  else
  {
    unsigned int v9 = 0;
    int v8 = 0;
    int v7 = 0;
  }
  int v13 = *(_DWORD *)(v4 + 32);
  unsigned int v14 = 12 * v13 + 12;
  unsigned int v15 = 20 * v8;
  unsigned int v16 = 2 * v8;
  int v17 = 22 * v8 + 4 * v7 + 4 * v13;
  if (v17 + v14)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v17 + v14, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2411);
    unsigned int v15 = 20 * v8;
    unsigned int v16 = 2 * v8;
    uint64_t v19 = v18;
    int v13 = *(_DWORD *)(a1[7] + 32);
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v19 + (4 * v7);
  uint64_t v21 = v20 + v14;
  uint64_t v22 = v21 + v15;
  a1[9] = v19;
  a1[10] = v22;
  unsigned int v23 = (unsigned int *)(v22 + v16);
  uint64_t result = memset(v23, 255, (4 * v13));
  if (v5)
  {
    uint64_t v25 = 0;
    unsigned int v26 = 0;
    uint64_t v27 = *(void *)(a1[7] + 120);
    do
    {
      uint64_t v28 = *(uint64_t **)(v27 + 8 * v25);
      if (!*((_DWORD *)v28 + 15))
      {
        uint64_t v29 = *v28;
        uint64_t v30 = *(unsigned int *)(v29 + 12);
        if (v23[v30] == -1)
        {
          uint64_t v31 = v20 + 12 * v26;
          *(void *)uint64_t v31 = *(void *)v29;
          *(_DWORD *)(v31 + 8) = *(_DWORD *)(v29 + 8);
          v23[v30] = v26++;
        }
        for (uint64_t i = *(void *)(v29 + 40); i != v29; uint64_t i = *(void *)(i + 40))
        {
          uint64_t v33 = *(unsigned int *)(i + 12);
          if (v23[v33] == -1)
          {
            uint64_t v34 = v20 + 12 * v26;
            *(void *)uint64_t v34 = *(void *)i;
            *(_DWORD *)(v34 + 8) = *(_DWORD *)(i + 8);
            v23[v33] = v26++;
          }
        }
      }
      ++v25;
    }
    while (v25 != v5);
  }
  else
  {
    unsigned int v26 = 0;
  }
  *(_DWORD *)(a2 + 16) = v26;
  *(void *)(a2 + 8) = v20;
  *(_DWORD *)a2 = 12;
  *(_DWORD *)(a2 + 64) = v7;
  *(void *)(a2 + 56) = v19;
  *(_DWORD *)(a2 + 48) = 4;
  *(_DWORD *)(a2 + 40) = v8;
  *(void *)(a2 + 32) = v21;
  *(_DWORD *)(a2 + 24) = 20;
  if (v5)
  {
    unsigned int v35 = 0;
    unsigned int v36 = 0;
    unsigned __int16 v37 = 0;
    do
    {
      if (v36 == v9) {
        unsigned int v38 = 0;
      }
      else {
        unsigned int v38 = v36;
      }
      if (!v36) {
        unsigned int v38 = v9;
      }
      uint64_t v39 = *(uint64_t **)(*(void *)(a1[7] + 120) + 8 * v38);
      if (!*((_DWORD *)v39 + 15))
      {
        uint64_t v40 = *v39;
        *(_DWORD *)(v40 + 64) = -1;
        *(_DWORD *)(v19 + 4 * v37) = v23[*(unsigned int *)(v40 + 12)];
        uint64_t v41 = *(void *)(v40 + 40);
        if (v41 != v40)
        {
          unsigned int v42 = v37 + 1;
          do
          {
            uint64_t result = (void *)v23[*(unsigned int *)(v41 + 12)];
            *(_DWORD *)(v19 + 4 * v42) = result;
            *(_DWORD *)(v41 + 64) = -1;
            uint64_t v41 = *(void *)(v41 + 40);
            ++v42;
          }
          while (v41 != v40);
        }
        int v43 = *((_DWORD *)v39 + 8);
        float v44 = -*((float *)v39 + 13);
        __int16 v45 = *((_WORD *)v39 + 4);
        uint64_t v46 = v21 + 20 * v35;
        *(_WORD *)(v46 + 18) = v37;
        v37 += v45;
        *(void *)uint64_t v46 = v39[3];
        *(_DWORD *)(v46 + 8) = v43;
        *(float *)(v46 + 12) = v44;
        *(_WORD *)(v46 + 16) = v45;
        *(_WORD *)(a1[10] + 2 * v35) = v38;
        *((unsigned char *)v39 + 76) = v35++;
      }
      ++v36;
    }
    while (v36 != v5);
  }
  return result;
}

BOOL physx::QuickHullConvexHullLib::createEdgeList(physx::QuickHullConvexHullLib *this, unsigned int a2, const unsigned __int8 *a3, unsigned __int8 **a4, unsigned __int16 **a5, unsigned __int16 **a6)
{
  uint64_t v6 = *((void *)this + 8);
  if (!v6)
  {
    int v13 = (unsigned __int8 *)physx::shdfnd::ReflectionAllocator<unsigned char>::allocate((uint64_t)&v31, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2319);
    uint64_t v14 = 2 * a2;
    unsigned int v15 = (unsigned __int16 *)physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v30, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2320);
    unsigned int v16 = (unsigned __int16 *)physx::shdfnd::ReflectionAllocator<unsigned short>::allocate((uint64_t)&v29, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2321);
    *a4 = v13;
    *a6 = v15;
    *a5 = v16;
    uint64_t v17 = *((void *)this + 7);
    if (*(_DWORD *)(v17 + 136))
    {
      unint64_t v18 = 0;
      int v19 = 0;
      unsigned __int16 v20 = 0;
      int v21 = 0;
      do
      {
        uint64_t v22 = *(uint64_t **)(*(void *)(v17 + 120) + 8 * *(unsigned __int16 *)(*((void *)this + 10) + 2 * v18));
        uint64_t v23 = *v22;
        uint64_t v24 = *v22;
        do
        {
          int v25 = *(_DWORD *)(v24 + 64);
          if (v25 == -1)
          {
            v15[2 * v20] = a3[v21];
            if (*(void *)(v24 + 40) == v23) {
              int v26 = v19;
            }
            else {
              int v26 = v21 + 1;
            }
            uint64_t v27 = (2 * v20) | 1;
            v15[v27] = a3[v26];
            v13[2 * v20] = *(unsigned char *)(*(void *)(v24 + 56) + 76);
            v13[v27] = *(unsigned char *)(*(void *)(*(void *)(*(void *)(v24 + 40) + 48) + 56) + 76);
            v16[v21++] = v20;
            *(_DWORD *)(v24 + 64) = v20;
            uint64_t v24 = *(void *)(v24 + 40);
            *(_DWORD *)(*(void *)(*(void *)(v24 + 48) + 32) + 64) = v20++;
            uint64_t v23 = *v22;
          }
          else
          {
            v16[v21] = v25;
            uint64_t v24 = *(void *)(v24 + 40);
            ++v21;
          }
        }
        while (v24 != v23);
        ++v18;
        uint64_t v17 = *((void *)this + 7);
        int v19 = v21;
      }
      while (v18 < *(unsigned int *)(v17 + 136));
    }
  }
  return v6 == 0;
}

uint64_t physx::QuickHullConvexHullLib::fillConvexMeshDesc(float32x2_t *a1, uint64_t a2)
{
  float32x2_t v4 = a1[8];
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(*(void *)&v4 + 24);
    uint64_t v6 = *(unsigned int *)(*(void *)&v4 + 40);
    int v7 = *(_DWORD *)(*(void *)&v4 + 8);
    uint64_t v8 = (4 * v5);
    int v9 = v8 + 20 * v6 + 12 * v7;
    if (v9 == -12)
    {
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, (v9 + 12), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 2528);
      float32x2_t v4 = a1[8];
    }
    a1[9] = (float32x2_t)v10;
    uint64_t v12 = v10 + v8;
    int v13 = (void *)(v12 + (20 * v6));
    uint64_t result = (uint64_t)memcpy(v13, **(const void ***)&v4, (12 * v7));
    float32x2_t v14 = a1[8];
    unsigned int v15 = *(_DWORD *)(*(void *)&v14 + 24);
    if (v15)
    {
      unsigned int v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = *(void *)(*(void *)&v14 + 32);
      do
      {
        if (v17 + 1 >= v15)
        {
          int v19 = 1;
        }
        else
        {
          uint64_t result = v17 - v15;
          int v19 = 1;
          while (*(unsigned __int8 *)(*(void *)(*(void *)&v14 + 16) + 4 * v17 + 3) == *(unsigned __int8 *)(*(void *)(*(void *)&v14 + 16) + 4 * (v17 + v19) + 3))
          {
            ++v19;
            if (!(result + v19))
            {
              int v19 = v15 - v17;
              break;
            }
          }
        }
        uint64_t v20 = v16;
        int v21 = (_DWORD *)(v12 + 20 * v16);
        uint64_t v22 = v12 + 20 * v20;
        *(_WORD *)(v22 + 16) = v19;
        *(_WORD *)(v22 + 18) = v17;
        uint64_t v23 = (_DWORD *)(v18 + 16 * v20);
        *int v21 = *v23;
        v21[1] = v23[1];
        v21[2] = v23[2];
        float32x4_t v21[3] = v23[3];
        if (v19)
        {
          uint64_t v24 = *(void *)(*(void *)&v14 + 16);
          do
          {
            *(_DWORD *)(v10 + 4 * v17) = *(unsigned __int8 *)(v24 + 4 * v17 + 2);
            ++v17;
            --v19;
          }
          while (v19);
          unsigned int v15 = *(_DWORD *)(*(void *)&v14 + 24);
        }
        unsigned int v16 = v20 + 1;
      }
      while (v17 < v15);
    }
    *(_DWORD *)(a2 + 64) = v5;
    *(_DWORD *)(a2 + 48) = 4;
    *(void *)(a2 + 56) = v10;
    *(_DWORD *)(a2 + 16) = v7;
    *(_DWORD *)a2 = 12;
    *(void *)(a2 + 8) = v13;
    *(_DWORD *)(a2 + 40) = v6;
    *(_DWORD *)(a2 + 24) = 20;
    *(void *)(a2 + 32) = v12;
    if (v6 >= 2)
    {
      LODWORD(v25) = 0;
      int v26 = (unsigned __int16 *)(v8 + v10 + 36);
      for (uint64_t i = 1; i != v6; ++i)
      {
        unsigned int v28 = *v26;
        v26 += 10;
        if (*(unsigned __int16 *)(v12 + 20 * v25 + 16) >= v28) {
          uint64_t v25 = v25;
        }
        else {
          uint64_t v25 = i;
        }
      }
      if (v25)
      {
        if (v5) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexHullLib.cpp", 313);
        }
        else {
          uint64_t result = 0;
        }
        a1[3] = (float32x2_t)result;
        long long v29 = *(_OWORD *)v12;
        unsigned __int16 v30 = *(_WORD *)(v12 + 16);
        uint64_t v31 = *(unsigned __int16 *)(v12 + 18);
        uint64_t v32 = v12 + 20 * v25;
        uint64_t v47 = v30;
        uint64_t v48 = *(unsigned __int16 *)(v32 + 16);
        uint64_t v33 = *(unsigned __int16 *)(v32 + 18);
        *(_OWORD *)uint64_t v12 = *(_OWORD *)v32;
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v32 + 16);
        *(_OWORD *)uint64_t v32 = v29;
        *(_WORD *)(v32 + 16) = v30;
        *(_WORD *)(v32 + 18) = v31;
        if (*(_DWORD *)(a2 + 40))
        {
          unint64_t v34 = 0;
          uint64_t v35 = (4 * v5);
          unsigned __int16 v36 = 0;
          uint64_t v46 = (const void *)(v10 + 4 * v31);
          unsigned __int16 v37 = (const void *)(v10 + 4 * v33);
          unsigned int v38 = (unsigned __int16 *)(v35 + v10 + 18);
          do
          {
            if (v34)
            {
              uint64_t v39 = (void *)(*(void *)&a1[3] + 4 * v36);
              if (v25 == v34)
              {
                uint64_t result = (uint64_t)memcpy(v39, v46, 4 * v47);
                *(_WORD *)(v12 + 20 * v25 + 18) = v36;
                __int16 v40 = v47;
              }
              else
              {
                uint64_t result = (uint64_t)memcpy(v39, (const void *)(v10 + 4 * *v38), 4 * *(v38 - 1));
                *unsigned int v38 = v36;
                __int16 v40 = *(v38 - 1);
              }
            }
            else
            {
              uint64_t result = (uint64_t)memcpy(*(void **)&a1[3], v37, 4 * v48);
              *(_WORD *)(v12 + 18) = v36;
              __int16 v40 = v48;
            }
            v36 += v40;
            ++v34;
            v38 += 10;
          }
          while (v34 < *(unsigned int *)(a2 + 40));
        }
        *(float32x2_t *)(a2 + 56) = a1[3];
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t)physx::QuickHullConvexHullLib::fillConvexMeshDescFromQuickHull(a1, a2);
  }
  if ((*(_WORD *)(*(void *)&a1[1] + 72) & 0x100) != 0)
  {
    uint64_t v41 = *(unsigned int *)(a2 + 16);
    if (v41)
    {
      unsigned int v42 = (float *)(*(void *)(a2 + 8) + 8);
      do
      {
        float v43 = *v42 + a1[5].f32[0];
        *((float32x2_t *)v42 - 1) = vadd_f32(*(float32x2_t *)(v42 - 2), a1[4]);
        *unsigned int v42 = v43;
        v42 += 3;
        --v41;
      }
      while (v41);
    }
    uint64_t v44 = *(unsigned int *)(a2 + 40);
    if (v44)
    {
      __int16 v45 = (float *)(*(void *)(a2 + 32) + 12);
      do
      {
        *__int16 v45 = *v45
             - (float)((float)((float)(*(v45 - 2) * a1[4].f32[1]) + (float)(*(v45 - 3) * a1[4].f32[0]))
                     + (float)(*(v45 - 1) * a1[5].f32[0]));
        v45 += 5;
        --v44;
      }
      while (v44);
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::PxVec3,physx::shdfnd::ReflectionAllocator<physx::PxVec3>>::recreate(result, a2);
  }
  unsigned int v6 = *(_DWORD *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 12 * a2;
    unint64_t v8 = *(void *)v5 + 12 * v6;
    do
    {
      *(void *)unint64_t v8 = *(void *)a3;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      v8 += 12;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

BOOL TestDuplicateTriangles(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  BOOL v3 = 1;
  if (a2)
  {
    uint64_t v5 = *a1;
    if (v5)
    {
      MEMORY[0x270FA5388](a1);
      bzero((char *)&v16 - ((12 * v5 + 15) & 0x1FFFFFFFF0), 12 * v5);
      uint64_t v8 = 0;
      do
      {
        int v9 = (char *)&v16 + v8 - ((12 * v5 + 15) & 0x1FFFFFFFF0);
        *(void *)int v9 = *(void *)(a2 + v8);
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + v8 + 8);
        v8 += 12;
      }
      while (12 * v5 != v8);
      int v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v20 = (char *)&v16 - ((12 * v5 + 15) & 0x1FFFFFFFF0);
      int v19 = v5;
      physx::ReducedVertexCloud::Reduce((physx::ReducedVertexCloud *)&v19, (uint64_t)&v17);
      unsigned int v10 = v18;
      BOOL v3 = v18 >= *a1;
      if (v18 < *a1)
      {
        if (a3)
        {
          *a1 = v18;
          if (v10)
          {
            unint64_t v11 = 0;
            uint64_t v12 = (_DWORD *)(a2 + 8);
            int v13 = (int *)(v17 + 8);
            do
            {
              *(v12 - 2) = *(v13 - 2);
              *(v12 - 1) = *(v13 - 1);
              int v14 = *v13;
              v13 += 3;
              *uint64_t v12 = v14;
              v12 += 3;
              ++v11;
            }
            while (v11 < *a1);
          }
        }
      }
      physx::ReducedVertexCloud::Clean((physx::ReducedVertexCloud *)&v19);
    }
  }
  return v3;
}

uint64_t TestUnifiedNormals(int a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  LODWORD(v5) = a1;
  uint64_t result = 0;
  if (v5 && a2 && a3 && a4)
  {
    float v7 = 1.0 / (float)v5;
    uint64_t v5 = v5;
    uint64_t v8 = (float *)(a2 + 8);
    float v9 = 0.0;
    float v10 = 0.0;
    float v11 = 0.0;
    do
    {
      float v9 = v9 + (float)(*(v8 - 2) * v7);
      float v10 = v10 + (float)(*(v8 - 1) * v7);
      float v12 = *v8;
      v8 += 3;
      float v11 = v11 + (float)(v12 * v7);
      --v5;
    }
    while (v5);
    int v13 = (unsigned int *)(a4 + 8);
    LOBYTE(result) = 1;
    uint64_t v14 = a3;
    do
    {
      unsigned int v15 = *(v13 - 1);
      uint64_t v16 = (float *)(a2 + 12 * *(v13 - 2));
      uint64_t v17 = (float *)(a2 + 12 * v15);
      unsigned int v18 = (float *)(a2 + 12 * *v13);
      float v19 = v16[1];
      float v20 = *v17 - *v16;
      float v21 = v17[1] - v19;
      float v22 = v16[2];
      float v23 = v17[2] - v22;
      float v24 = *v18 - *v16;
      float v25 = v18[1] - v19;
      float v26 = v18[2] - v22;
      float v27 = (float)(v21 * v26) - (float)(v23 * v25);
      float v28 = (float)(v23 * v24) - (float)(v20 * v26);
      float v29 = (float)(v20 * v25) - (float)(v21 * v24);
      float v30 = (float)((float)(v28 * v28) + (float)(v27 * v27)) + (float)(v29 * v29);
      float v31 = 0.0;
      float v32 = 0.0;
      float v33 = 0.0;
      if (v30 > 0.0)
      {
        float v34 = 1.0 / sqrtf(v30);
        float v31 = v27 * v34;
        float v32 = v28 * v34;
        float v33 = v29 * v34;
      }
      float v35 = (float)((float)((float)(v10 * v32) + (float)(v9 * v31)) + (float)(v11 * v33))
          - (float)((float)((float)(v19 * v32) + (float)(*v16 * v31)) + (float)(v22 * v33));
      if (v35 <= 0.0) {
        char v36 = 1;
      }
      else {
        char v36 = a5 ^ 1;
      }
      if (v36)
      {
        uint64_t result = (v35 <= 0.0) & result;
      }
      else
      {
        uint64_t result = 0;
        *(v13 - 1) = *v13;
        *int v13 = v15;
      }
      v13 += 3;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v12 = a3;
  if (!*(unsigned char *)(a4 + a3))
  {
    uint64_t v6 = result;
    unsigned int v7 = a3;
    *(unsigned char *)(a4 + a3) = 1;
    uint64_t v8 = *(unsigned int *)(result + 8);
    if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) <= v8)
    {
      uint64_t result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result, &v12);
      unsigned int v7 = v12;
    }
    else
    {
      *(_DWORD *)(*(void *)result + 4 * v8) = a3;
      ++*(_DWORD *)(result + 8);
    }
    float v9 = (_DWORD *)(a2 + 12 * v7);
    if ((*v9 & 0x20000000) == 0) {
      uint64_t result = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill(v6, a2, *v9 & 0x1FFFFFFF, a4);
    }
    int v10 = v9[1];
    if ((v10 & 0x20000000) == 0) {
      uint64_t result = extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill(v6, a2, v10 & 0x1FFFFFFF, a4);
    }
    int v11 = v9[2];
    if ((v11 & 0x20000000) == 0) {
      return extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::FloodFill(v6, a2, v11 & 0x1FFFFFFF, a4);
    }
  }
  return result;
}

void checkRedundantVertices(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v79 = a4;
  uint64_t v92 = *MEMORY[0x263EF8340];
  size_t v9 = *a1;
  MEMORY[0x270FA5388](a1);
  float32x4_t v81 = &v77[-((v9 + 15) & 0x1FFFFFFF0)];
  bzero(v81, v9);
  size_t v10 = *((unsigned int *)a5 + 2);
  MEMORY[0x270FA5388](v11);
  unsigned int v12 = &v77[-((v10 + 15) & 0x1FFFFFFF0)];
  bzero(v12, v10);
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  if (!v10) {
    goto LABEL_123;
  }
  int v13 = 0;
  while (2)
  {
    int v78 = v13;
    int v14 = v9;
    while (1)
    {
      size_t v10 = (v10 - 1);
      LODWORD(v91) = 0;
      unsigned int v15 = *(unsigned int **)a2;
      LODWORD(v88) = 0;
      if (v14) {
        break;
      }
LABEL_25:
      if (!v10)
      {
        if ((v78 & 1) == 0) {
          goto LABEL_123;
        }
        goto LABEL_34;
      }
    }
    unsigned int v16 = 0;
    unsigned int v17 = 0;
    do
    {
      LODWORD(v86) = 0;
      unsigned int v20 = *v15;
      float v19 = (int *)(v15 + 1);
      uint64_t v18 = v20;
      LODWORD(v86) = v20;
      if (v20)
      {
        uint64_t v21 = v18;
        float v22 = v19;
        while (1)
        {
          int v23 = *v22++;
          if (*(_DWORD *)(*a5 + 4 * v10) == v23) {
            break;
          }
          if (!--v21) {
            goto LABEL_19;
          }
        }
        if ((HIDWORD(v91) & 0x7FFFFFFFu) <= v91)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v90, &v88);
          unsigned int v24 = v91;
        }
        else
        {
          *(_DWORD *)(v90 + 4 * v91) = v17;
          unsigned int v24 = v91 + 1;
          LODWORD(v91) = v91 + 1;
        }
        if ((HIDWORD(v91) & 0x7FFFFFFFu) <= v24)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v90, &v86);
        }
        else
        {
          *(_DWORD *)(v90 + 4 * v24) = v86;
          LODWORD(v91) = v91 + 1;
        }
        ++v16;
        uint64_t v18 = v86;
        unsigned int v17 = v88;
        LODWORD(v9) = *a1;
      }
      else
      {
        uint64_t v18 = 0;
      }
LABEL_19:
      unsigned int v15 = (unsigned int *)&v19[v18];
      LODWORD(v88) = ++v17;
    }
    while (v17 < v9);
    if (!v16) {
      goto LABEL_24;
    }
    uint64_t v25 = 0;
    char v26 = 0;
    uint64_t v27 = v90;
    do
    {
      v26 |= *(_DWORD *)(v90 + 4 * (v25 & 0xFFFFFFFE) + 4) == 3;
      v25 += 2;
    }
    while (2 * v16 != v25);
    if ((v26 & 1) == 0)
    {
LABEL_24:
      int v14 = v9;
      goto LABEL_25;
    }
    uint64_t v28 = 0;
    v12[v10] = 1;
    do
    {
      if (*(_DWORD *)(v27 + 4 * (v28 + 1)) != 3) {
        v81[*(unsigned int *)(v27 + 4 * v28)] = 1;
      }
      v28 += 2;
    }
    while (2 * v16 != v28);
    int v13 = 1;
    if (v10) {
      continue;
    }
    break;
  }
LABEL_34:
  unint64_t v29 = *((unsigned int *)a5 + 2);
  if (v29)
  {
    uint64_t v30 = *a5;
    uint64_t v31 = *a5 + 4 * v29;
    unsigned int v32 = v29 - 1;
    LODWORD(v33) = *((_DWORD *)a5 + 2);
    do
    {
      int v34 = v29 - 1;
      if (v12[(v29 - 1)])
      {
        if (v29 < v33)
        {
          uint64_t v35 = 0;
          do
          {
            *(_DWORD *)(v30 + 4 * v32 + 4 * v35) = *(_DWORD *)(v31 + 4 * v35);
            unint64_t v33 = *((unsigned int *)a5 + 2);
            ++v35;
          }
          while (v29 + v35 < v33);
        }
        LODWORD(v33) = v33 - 1;
        *((_DWORD *)a5 + 2) = v33;
      }
      v31 -= 4;
      --v32;
      --v29;
    }
    while (v34);
    LODWORD(v9) = *a1;
  }
  float32x4_t v88 = 0;
  uint64_t v89 = 0;
  float32x4_t v86 = 0;
  uint64_t v87 = 0;
  if (v9)
  {
    unint64_t v36 = 0;
    int v37 = 0;
    unsigned int v38 = *(unsigned int **)v79;
    uint64_t v39 = *(unsigned int **)a2;
    uint64_t v80 = a2;
    do
    {
      unsigned int v42 = *v39;
      uint64_t v41 = v39 + 1;
      unsigned int v40 = v42;
      unsigned int v85 = v42;
      unsigned int v45 = *v38;
      uint64_t v44 = v38 + 1;
      unsigned int v43 = v45;
      unsigned int v84 = v45;
      if (v81[v36])
      {
        if (v43)
        {
          unint64_t v46 = 0;
          do
          {
            int v47 = v44[v46];
            int v82 = 3;
            int v83 = v47;
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v89)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, &v82);
              unsigned int v48 = v89;
            }
            else
            {
              v88[v89] = 3;
              unsigned int v48 = v89 + 1;
              LODWORD(v89) = v89 + 1;
            }
            uint64_t v49 = (int *)(a3 + 4 * (3 * v83));
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v48)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, v49);
              unsigned int v50 = v89;
            }
            else
            {
              v88[v48] = *v49;
              unsigned int v50 = v89 + 1;
              LODWORD(v89) = v89 + 1;
            }
            float v51 = (int *)(a3 + 4 * (3 * v83 + 1));
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v50)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, v51);
              unsigned int v52 = v89;
            }
            else
            {
              v88[v50] = *v51;
              unsigned int v52 = v89 + 1;
              LODWORD(v89) = v89 + 1;
            }
            float v53 = (int *)(a3 + 4 * (3 * v83 + 2));
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v52)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, v53);
            }
            else
            {
              v88[v52] = *v53;
              LODWORD(v89) = v89 + 1;
            }
            int v82 = 1;
            if ((HIDWORD(v87) & 0x7FFFFFFFu) <= v87)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v86, &v82);
              unsigned int v54 = v87;
            }
            else
            {
              v86[v87] = 1;
              unsigned int v54 = v87 + 1;
              LODWORD(v87) = v87 + 1;
            }
            if ((HIDWORD(v87) & 0x7FFFFFFFu) <= v54)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v86, &v83);
            }
            else
            {
              v86[v54] = v83;
              LODWORD(v87) = v87 + 1;
            }
            ++v46;
            uint64_t v55 = v84;
          }
          while (v46 < v84);
          v37 += v46;
        }
        else
        {
          uint64_t v55 = 0;
        }
      }
      else
      {
        int v56 = v37;
        if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v89)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, &v85);
        }
        else
        {
          v88[v89] = v40;
          LODWORD(v89) = v89 + 1;
        }
        if (v85)
        {
          uint64_t v57 = 0;
          for (unint64_t i = 0; i < v85; ++i)
          {
            if ((HIDWORD(v89) & 0x7FFFFFFFu) <= v89)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v88, &v41[v57]);
            }
            else
            {
              v88[v89] = v41[i];
              LODWORD(v89) = v89 + 1;
            }
            ++v57;
          }
        }
        if ((HIDWORD(v87) & 0x7FFFFFFFu) <= v87)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v86, &v84);
        }
        else
        {
          v86[v87] = v84;
          LODWORD(v87) = v87 + 1;
        }
        int v37 = v56 + 1;
        if (v84)
        {
          int v59 = v56 + 1;
          uint64_t v60 = 0;
          for (unint64_t j = 0; j < v84; ++j)
          {
            if ((HIDWORD(v87) & 0x7FFFFFFFu) <= v87)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)&v86, &v44[v60]);
            }
            else
            {
              v86[v87] = v44[j];
              LODWORD(v87) = v87 + 1;
            }
            uint64_t v55 = v84;
            ++v60;
          }
          int v37 = v59;
        }
        else
        {
          uint64_t v55 = 0;
        }
        a2 = v80;
      }
      uint64_t v39 = &v41[v85];
      unsigned int v38 = &v44[v55];
      ++v36;
    }
    while (v36 < *a1);
  }
  else
  {
    int v37 = 0;
  }
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v62 = v79;
  *(_DWORD *)(v79 + 8) = 0;
  if (&v88 != (int **)a2)
  {
    *(_DWORD *)(a2 + 8) = 0;
    unsigned int v63 = v89;
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) < v89)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a2, v89);
      unsigned int v63 = v89;
    }
    if (v63)
    {
      float v64 = *(unsigned int **)a2;
      unint64_t v65 = *(void *)a2 + 4 * v63;
      float v66 = v88;
      do
      {
        unsigned int v67 = *v66++;
        *v64++ = v67;
      }
      while ((unint64_t)v64 < v65);
      int v68 = v89;
    }
    else
    {
      int v68 = 0;
    }
    *(_DWORD *)(a2 + 8) = v68;
  }
  if (&v86 != (int **)v62)
  {
    *(_DWORD *)(v62 + 8) = 0;
    unsigned int v69 = v87;
    if ((*(_DWORD *)(v62 + 12) & 0x7FFFFFFFu) < v87)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(v62, v87);
      unsigned int v69 = v87;
    }
    if (v69)
    {
      float v70 = *(_DWORD **)v62;
      unint64_t v71 = *(void *)v62 + 4 * v69;
      int32x4_t v72 = v86;
      do
      {
        int v73 = *v72++;
        *v70++ = v73;
      }
      while ((unint64_t)v70 < v71);
      int v74 = v87;
    }
    else
    {
      int v74 = 0;
    }
    *(_DWORD *)(v62 + 8) = v74;
  }
  *a1 = v37;
  if ((v87 & 0x8000000000000000) == 0 && (v87 & 0x7FFFFFFF00000000) != 0 && v86 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if ((v89 & 0x8000000000000000) == 0 && (v89 & 0x7FFFFFFF00000000) != 0 && v88 != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
LABEL_123:
  if ((v91 & 0x8000000000000000) == 0 && (v91 & 0x7FFFFFFF00000000) != 0)
  {
    if (v90) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
}

uint64_t extractHullPolygons(unsigned int &,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &,physx::ConvexPolygonsBuilder const&,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>*,physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>> &)::Local::GetNeighborFace(unsigned int a1, int a2, uint64_t a3, uint64_t a4, int *a5, unsigned int *a6)
{
  v25[1] = *MEMORY[0x263EF8340];
  char v6 = 1;
  unsigned int v7 = a1;
  unsigned int v8 = a1;
  while (1)
  {
LABEL_2:
    int v9 = *(_DWORD *)(a4 + 12 * v8);
    int v10 = *(_DWORD *)(a4 + 4 * (3 * v8 + 1));
    v25[0] = 0x200000001;
    if (v9 == a2)
    {
      uint64_t v11 = 0;
      v25[0] = 0x100000000;
      uint64_t v12 = 1;
    }
    else if (v10 == a2)
    {
      uint64_t v11 = 0;
      LODWORD(v25[0]) = 0;
      uint64_t v12 = 2;
    }
    else
    {
      uint64_t v12 = 2;
      uint64_t v11 = 1;
    }
    uint64_t v13 = a3 + 12 * v8;
    int v14 = *(_DWORD *)(v13 + 4 * v11);
    int v15 = *(_DWORD *)(v13 + 4 * v12);
    if ((v14 & 0x20000000) != 0)
    {
      int v16 = *(_DWORD *)(v13 + 4 * v12);
      if ((v15 & 0x20000000) != 0) {
        return 0;
      }
    }
    else
    {
      int v16 = v14;
      int v14 = v15;
      if ((v15 & 0x20000000) == 0)
      {
        if (v8 != a1)
        {
          char v17 = 0;
          uint64_t v18 = 0;
          while (1)
          {
            int v19 = *(_DWORD *)(v13 + 4 * *((unsigned int *)v25 + v18)) & 0x1FFFFFFF;
            if (v19 == a1 && v7 != a1) {
              break;
            }
            char v21 = v17 | (v19 != v7);
            char v17 = 1;
            uint64_t v18 = 1;
            if (v21)
            {
              if (v19 != v7)
              {
                unsigned int v7 = v8;
                unsigned int v8 = v19;
              }
              goto LABEL_2;
            }
          }
        }
        return 0;
      }
    }
    if ((v6 & 1) == 0) {
      break;
    }
    if ((v16 & 0x1FFFFFFF) == a1) {
      unsigned int v22 = v7;
    }
    else {
      unsigned int v22 = v8;
    }
    if ((v16 & 0x1FFFFFFF) == a1) {
      int v23 = v8;
    }
    else {
      int v23 = v16 & 0x1FFFFFFF;
    }
    char v6 = 0;
    if ((v16 & 0x20000000) == 0)
    {
      unsigned int v7 = v22;
      unsigned int v8 = v23;
    }
  }
  *a5 = v14 & 0x1FFFFFFF;
  *a6 = v8;
  return 1;
}

uint64_t physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<Pair>::getName() [T = Pair]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unsigned int v8 = (void *)result;
  }
  else
  {
    unsigned int v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    uint64_t v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

unint64_t physx::shdfnd::Array<Pair,physx::shdfnd::ReflectionAllocator<Pair>>::copy<physx::shdfnd::ReflectionAllocator<Pair>>(unint64_t result, uint64_t a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3)
  {
    *(_DWORD *)(result + 8) = v3;
    *(_DWORD *)(result + 12) = v3;
    uint64_t v5 = 8 * v3;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<Pair>::getName() [T = Pair]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    *(void *)unint64_t v2 = result;
    uint64_t v8 = *(unsigned int *)(v2 + 8);
    if (v8)
    {
      unint64_t v9 = result + 8 * v8;
      unint64_t v10 = *(uint64_t **)a2;
      do
      {
        uint64_t v11 = *v10++;
        *(void *)uint64_t result = v11;
        result += 8;
      }
      while (result < v9);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
  }
  return result;
}

uint64_t local::MemBlock<local::QuickHullHalfEdge,false>::getFreeItem(unsigned int *a1)
{
  unsigned int v2 = a1[2];
  uint64_t v3 = *a1;
  if (v2 >= v3)
  {
    if (v3) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 72 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/QuickHullConvexHullLib.cpp", 138);
    else {
      uint64_t v6 = 0;
    }
    uint64_t v9 = v6;
    unsigned int v7 = a1[1] + 1;
    a1[1] = v7;
    uint64_t v8 = a1[6];
    if ((a1[7] & 0x7FFFFFFF) <= v8)
    {
      physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::growAndPushBack((uint64_t)(a1 + 4), &v9);
      unsigned int v7 = a1[1];
    }
    else
    {
      *(void *)(*((void *)a1 + 2) + 8 * v8) = v6;
      a1[6] = v8 + 1;
    }
    uint64_t result = *(void *)(*((void *)a1 + 2) + 8 * v7);
    a1[2] = 1;
  }
  else
  {
    uint64_t v4 = *(void *)(*((void *)a1 + 2) + 8 * a1[1]);
    a1[2] = v2 + 1;
    return v4 + 72 * v2;
  }
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<BOOL>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<BOOL>::getName() [T = BOOL]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 4 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>::getName() [T = physx::Conve"
  }
         "xHull::HalfEdge]";
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(int **)a1;
  if (v9)
  {
    unint64_t v11 = result + 4 * v9;
    uint64_t v12 = (_DWORD *)result;
    do
    {
      int v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(int **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxPlane>::getName() [T = physx::PxPlane]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_OWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  unint64_t v11 = *(long long **)v3;
  if (v9)
  {
    uint64_t v12 = *(long long **)v3;
    int v13 = v8;
    do
    {
      long long v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v10);
  }
  *unint64_t v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v11)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::ConvexHull::HalfEdge,physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>>::growAndPushBack(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::ConvexHull::HalfEdge>::getName() [T = physx::Con"
    }
           "vexHull::HalfEdge]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 4 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (_DWORD *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    unint64_t v11 = *(int **)v3;
    uint64_t v12 = v8;
    do
    {
      int v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::HullTriangleData>::allocate(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::HullTriangleData>::getName() [T = physx::HullTriangleData]";
    }
    else {
      unsigned int v5 = "<allocation names disabled>";
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16);
    return v6(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physxcooking/src/convex/ConvexPolygonsBuilder.cpp", a2);
  }
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>::allocate(8 * v5);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>::allocate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v3 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>::getName() [T = local::QuickHullFace *]";
    }
    else {
      uint64_t v3 = "<allocation names disabled>";
    }
    int v4 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16);
    return v4(v2 + 24, v1, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullFace *,physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<local::QuickHullFace *>::allocate(8 * a2);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullVertex *,physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>::getName() [T = local::QuickHullVertex *]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    uint64_t v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>::getName() [T = local::QuickHullHalfEdge *]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    uint64_t v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    unint64_t v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullVertex *,physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullVertex *>::getName() [T = local::QuickHullVertex *]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unint64_t v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<local::QuickHullHalfEdge *,physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::QuickHullHalfEdge *>::getName() [T = local::Quic"
    }
           "kHullHalfEdge *]";
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  unint64_t v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unint64_t v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<local::ExpandPoint,physx::shdfnd::ReflectionAllocator<local::ExpandPoint>>::growAndPushBack(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<local::ExpandPoint>::getName() [T = local::ExpandPoint]";
    }
    else {
      unint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 60 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 60 * v9;
    uint64_t v11 = *(void *)v3;
    unint64_t v12 = v8;
    do
    {
      for (uint64_t i = 0; i != 48; i += 16)
        *(_OWORD *)(v12 + i) = *(_OWORD *)(v11 + i);
      uint64_t v14 = *(void *)(v11 + 48);
      *(_DWORD *)(v12 + 56) = *(_DWORD *)(v11 + 56);
      *(void *)(v12 + 48) = v14;
      v12 += 60;
      v11 += 60;
    }
    while (v12 < v10);
    unsigned int v15 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    unsigned int v15 = 0;
  }
  for (uint64_t j = 0; j != 48; j += 16)
    *(_OWORD *)(v8 + 60 * v15 + j) = *(_OWORD *)(a2 + j);
  uint64_t v17 = v8 + 60 * v15;
  uint64_t v18 = *(void *)(a2 + 48);
  *(_DWORD *)(v17 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(v17 + 48) = v18;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<local::ExpandPoint,physx::shdfnd::ReflectionAllocator<local::ExpandPoint>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = 60 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<local::ExpandPoint>::getName() [T = local::ExpandPoint]";
  }
  else
  {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *a1;
  if (v9)
  {
    unint64_t v11 = result + 60 * v9;
    unint64_t v12 = result;
    do
    {
      for (uint64_t i = 0; i != 48; i += 16)
        *(_OWORD *)(v12 + i) = *(_OWORD *)(v10 + i);
      uint64_t v14 = *(void *)(v10 + 48);
      *(_DWORD *)(v12 + 56) = *(_DWORD *)(v10 + 56);
      *(void *)(v12 + 48) = v14;
      v12 += 60;
      v10 += 60;
    }
    while (v12 < v11);
    uint64_t v10 = *a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxPlane,physx::shdfnd::ReflectionAllocator<physx::PxPlane>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 16 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxPlane>::getName() [T = physx::PxPlane]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v10 = *(long long **)a1;
  if (v9)
  {
    unint64_t v11 = result + 16 * v9;
    unint64_t v12 = *(long long **)a1;
    uint64_t v13 = (_OWORD *)result;
    do
    {
      long long v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Foundation::Foundation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26E72A3D8;
  *(void *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 160) = 1;
  *(void *)(a1 + 168) = a1 + 32;
  *(void *)(a1 + 176) = 0x1000000000;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = &unk_26E72A478;
  *(void *)(a1 + 184) = a3;
  *(void *)(a1 + 192) = a2;
  *(unsigned char *)(a1 + 336) = 1;
  *(void *)(a1 + 208) = a2;
  *(void *)(a1 + 344) = a1 + 208;
  *(void *)(a1 + 352) = 0x1000000001;
  *(void *)(a1 + 200) = &unk_26E72A508;
  *(unsigned char *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 364) = -1;
  uint64_t v4 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 72, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 368) = v4;
  physx::shdfnd::MutexImpl::MutexImpl(v4);
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = -3233808384;
  *(void *)(a1 + 424) = 0;
  uint64_t v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 1216, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  uint64_t v6 = v5;
  unint64_t v7 = v5 + 16;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *uint64_t v5 = v8;
  v5[1] = v8;
  uint64_t v9 = v5 + 28;
  v5[2] = v8;
  v5[3] = v8;
  v5[4] = v8;
  v5[5] = v8;
  v5[6] = v8;
  v5[7] = v8;
  v5[8] = v8;
  v5[9] = v8;
  v5[10] = v8;
  v5[11] = v8;
  v5[12] = v8;
  v5[13] = v8;
  v5[14] = v8;
  v5[15] = v8;
  if (*(_DWORD *)(a1 + 428))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(a1 + 384);
    do
    {
      long long v12 = *(_OWORD *)(v11 + 16 * v10);
      unint64_t v13 = ~(*(void *)(v11 + 16 * v10) << 32) + *(void *)(v11 + 16 * v10);
      unint64_t v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
      unint64_t v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
      uint64_t v16 = (((v15 + ~(v15 << 27)) >> 31) ^ (v15 - 1)) & 0x3F;
      *((_DWORD *)v7 + v10) = *((_DWORD *)v5 + v16);
      v7[v10 + 12] = v12;
      *((_DWORD *)v5 + v16) = v10++;
    }
    while (v10 < *(unsigned int *)(a1 + 428));
  }
  if (*(void *)(a1 + 376)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 392) = v7;
  *(void *)(a1 + 400) = v6;
  *(void *)(a1 + 376) = v6;
  *(void *)(a1 + 384) = v9;
  *(void *)(a1 + 408) = 0x4000000030;
  if (*(_DWORD *)(a1 + 420) == -1) {
    *(_DWORD *)(a1 + 420) = 0;
  }
  uint64_t v17 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 72, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 432) = v17;
  physx::shdfnd::MutexImpl::MutexImpl(v17);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  uint64_t v18 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 72, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 456) = v18;
  physx::shdfnd::MutexImpl::MutexImpl(v18);
  int v19 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 72, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(void *)(a1 + 464) = v19;
  physx::shdfnd::MutexImpl::MutexImpl(v19);
  return a1;
}

void physx::shdfnd::Foundation::~Foundation(physx::shdfnd::Foundation *this)
{
  *(void *)this = &unk_26E72A3D8;
  int v2 = (void *)((char *)this + 440);
  unint64_t v3 = *((unsigned int *)this + 112);
  if (v3)
  {
    for (unint64_t i = 0; i < v3; ++i)
    {
      uint64_t v5 = *(void **)(*v2 + 8 * i);
      if (v5)
      {
        do
        {
          uint64_t v6 = (void *)*v5;
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          uint64_t v5 = v6;
        }
        while (v6);
        unint64_t v3 = *((unsigned int *)this + 112);
      }
    }
  }
  uint64_t v8 = 0;
  physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::resize((uint64_t)v2, 0, &v8);
  physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::recreate((uint64_t)v2, *((_DWORD *)this + 112));
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 58);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 57);
  int v7 = *((_DWORD *)this + 113);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((void *)this + 55)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 54);
  if (*((void *)this + 47)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 46);
  *((void *)this + 25) = &unk_26E72A508;
  *((_DWORD *)this + 88) = 0;
  physx::shdfnd::Broadcast<physx::PxErrorCallback,physx::PxErrorCallback>::~Broadcast((uint64_t)this + 200);
  *((void *)this + 3) = &unk_26E72A478;
  *((_DWORD *)this + 44) = 0;
  physx::shdfnd::Broadcast<physx::shdfnd::AllocationListener,physx::PxAllocatorCallback>::~Broadcast((uint64_t)this + 24);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::shdfnd::Foundation::~Foundation(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void physx::shdfnd::BroadcastingErrorCallback::~BroadcastingErrorCallback(uint64_t this)
{
  *(void *)this = &unk_26E72A508;
  *(_DWORD *)(this + 152) = 0;
  physx::shdfnd::Broadcast<physx::PxErrorCallback,physx::PxErrorCallback>::~Broadcast(this);
}

void physx::shdfnd::BroadcastingAllocator::~BroadcastingAllocator(uint64_t this)
{
  *(void *)this = &unk_26E72A478;
  *(_DWORD *)(this + 152) = 0;
  physx::shdfnd::Broadcast<physx::shdfnd::AllocationListener,physx::PxAllocatorCallback>::~Broadcast(this);
}

uint64_t physx::shdfnd::Foundation::error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::shdfnd::Foundation::errorImpl(a1, a2, a3, a4, a5, &a9);
}

uint64_t physx::shdfnd::Foundation::errorImpl(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char *__format, va_list a6)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(result + 364) & a2) != 0)
  {
    uint64_t v11 = result;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_lock(*(pthread_mutex_t **)(result + 368));
    }
    uint64_t result = vsnprintf(__str, 0x400uLL, __format, a6);
    if (*(_DWORD *)(v11 + 352))
    {
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = *(void *)(*(void *)(v11 + 344) + 8 * v12);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a2, __str, a3, a4);
        ++v12;
      }
      while (v12 < *(unsigned int *)(v11 + 352));
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 368));
    }
  }
  return result;
}

uint64_t physx::shdfnd::BroadcastingErrorCallback::reportError(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(result + 152))
  {
    uint64_t v9 = result;
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(v9 + 144) + 8 * v10);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2, a3, a4, a5);
      ++v10;
    }
    while (v10 < *(unsigned int *)(v9 + 152));
  }
  return result;
}

uint64_t physx::shdfnd::Foundation::createInstance(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 != 67174656) {
    operator new[]();
  }
  if (physx::shdfnd::Foundation::mInstance)
  {
    (*(void (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)a2 + 16))(a2, 8, "Foundation object exists already. Only one instance per process can be created.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 165);
    return 0;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)a3 + 16))(a3, 472, "Foundation", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 141);
  physx::shdfnd::Foundation::mInstance = v6;
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)a2 + 16))(a2, 32, "Memory allocation for foundation object failed.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 158);
    return 0;
  }
  physx::shdfnd::Foundation::Foundation(v6, a2, a3);
  physx::shdfnd::Foundation::mRefCount = 1;
  int v7 = physx::shdfnd::Foundation::mWarnOnceTimestap + 1;
  if (physx::shdfnd::Foundation::mWarnOnceTimestap == -1) {
    int v7 = 1;
  }
  physx::shdfnd::Foundation::mWarnOnceTimestap = v7;
  return physx::shdfnd::Foundation::mInstance;
}

uint64_t physx::shdfnd::snprintf(physx::shdfnd *this, char *a2, const char *a3, const char *a4, ...)
{
  va_start(va, a4);
  return vsnprintf((char *)this, (size_t)a2, a3, va);
}

uint64_t physx::shdfnd::Foundation::incRefCount(physx::shdfnd::Foundation *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!physx::shdfnd::Foundation::mRefCount) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 201, "Foundation: Invalid registration detected.", a6, a7, a8, a9);
  }
  ++physx::shdfnd::Foundation::mRefCount;
  return result;
}

uint64_t physx::shdfnd::Foundation::decRefCount(physx::shdfnd::Foundation *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!physx::shdfnd::Foundation::mRefCount) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 216, "Foundation: Invalid deregistration detected.", a6, a7, a8, a9);
  }
  --physx::shdfnd::Foundation::mRefCount;
  return result;
}

uint64_t physx::shdfnd::Foundation::release(physx::shdfnd::Foundation *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = physx::shdfnd::Foundation::mInstance;
  if (physx::shdfnd::Foundation::mRefCount == 1)
  {
    uint64_t v10 = (*(uint64_t (**)(void))(*(void *)physx::shdfnd::Foundation::mInstance + 32))();
    (*(void (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 56))(physx::shdfnd::Foundation::mInstance);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 24))(v10, physx::shdfnd::Foundation::mInstance);
    physx::shdfnd::Foundation::mInstance = 0;
    physx::shdfnd::Foundation::mRefCount = 0;
  }
  else
  {
    return physx::shdfnd::Foundation::error(v9, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/PsFoundation.cpp", 185, "Foundation destruction failed due to pending module references. Close/release all depending modules first.", a6, a7, a8, a9);
  }
  return result;
}

float physx::PxShortestRotation@<S0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  float v3 = *a1;
  float v4 = a1[1];
  float v5 = *a2;
  float v6 = a2[1];
  float v7 = a1[2];
  float v8 = a2[2];
  float v9 = (float)((float)(v4 * v6) + (float)(*a1 * *a2)) + (float)(v7 * v8);
  float v10 = -v4;
  if (v9 <= -1.0)
  {
    float v14 = fabsf(v3);
    float v13 = 0.0;
    BOOL v15 = v14 < 0.1;
    float v12 = 0.0;
    if (!v15)
    {
      float v10 = 0.0;
      float v7 = -*a1;
      float v12 = a1[1];
    }
  }
  else
  {
    float v10 = (float)(v5 * v10) + (float)(v3 * v6);
    float v11 = -(float)(v7 * v6);
    float v7 = (float)(v8 * (float)-*a1) + (float)(v7 * v5);
    float v12 = v11 + (float)(v4 * v8);
    float v13 = v9 + 1.0;
  }
  float v16 = sqrtf((float)((float)((float)(v7 * v7) + (float)(v12 * v12)) + (float)(v10 * v10)) + (float)(v13 * v13));
  float result = v10 / v16;
  *a3 = v12 / v16;
  a3[1] = v7 / v16;
  a3[2] = result;
  a3[3] = v13 / v16;
  return result;
}

unint64_t physx::PxDiagonalize@<X0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  float v75 = a1[1];
  float v76 = *a1;
  float v3 = a1[3];
  float v74 = a1[2];
  float v4 = a1[4];
  float v5 = a1[5];
  float v6 = a1[6];
  float v7 = a1[7];
  float v8 = a1[8];
  float v9 = 0.0;
  int v10 = 24;
  float v11 = 1.0;
  float v12 = 0.0;
  float v13 = 0.0;
  do
  {
    float v14 = v12 * (float)(v12 + v12);
    float v15 = v9 * (float)(v9 + v9);
    float v16 = v12 * (float)(v13 + v13);
    float v17 = v9 * (float)(v13 + v13);
    float v18 = v11 * (float)(v13 + v13);
    float v19 = v9 * (float)(v12 + v12);
    float v20 = v11 * (float)(v12 + v12);
    float v21 = v11 * (float)(v9 + v9);
    float v22 = (float)(1.0 - v14) - v15;
    float v23 = v21 + v16;
    float v24 = v17 - v20;
    float v25 = v16 - v21;
    float v26 = 1.0 - (float)(v13 * (float)(v13 + v13));
    float v27 = v26 - v15;
    float v28 = v19 + v18;
    float v29 = v20 + v17;
    float v30 = v19 - v18;
    float v31 = v26 - v14;
    float v32 = (float)(v76 * (float)(v20 + v17)) + (float)(v75 * (float)(v19 - v18));
    float v33 = (float)(v74 * v24) + (float)((float)(v76 * v22) + (float)(v75 * v23));
    float v34 = (float)(v74 * (float)(v19 + v18)) + (float)((float)(v76 * v25) + (float)(v75 * v27));
    float v35 = v32 + (float)(v74 * v31);
    float v36 = (float)(v5 * v24) + (float)((float)(v3 * v22) + (float)(v4 * v23));
    float v37 = (float)(v5 * v28) + (float)((float)(v3 * v25) + (float)(v4 * v27));
    float v38 = (float)((float)(v3 * v29) + (float)(v4 * v30)) + (float)(v5 * v31);
    float v39 = (float)(v8 * v24) + (float)((float)(v6 * v22) + (float)(v7 * v23));
    float v40 = (float)(v8 * v28) + (float)((float)(v6 * v25) + (float)(v7 * v27));
    float v41 = (float)((float)(v6 * v29) + (float)(v7 * v30)) + (float)(v8 * v31);
    float v42 = (float)(v24 * v39) + (float)((float)(v22 * v33) + (float)(v23 * v36));
    float v43 = (float)(v24 * v40) + (float)((float)(v22 * v34) + (float)(v23 * v37));
    float v44 = (float)(v24 * v41) + (float)((float)(v22 * v35) + (float)(v23 * v38));
    float v45 = (float)(v28 * v41) + (float)((float)(v25 * v35) + (float)(v27 * v38));
    float v46 = fabsf(v45);
    float v47 = fabsf(v44);
    float v48 = fabsf(v43);
    if (v47 > v48) {
      unsigned int v49 = 1;
    }
    else {
      unsigned int v49 = 2;
    }
    BOOL v50 = v46 <= v48 || v46 <= v47;
    float v51 = (float)(v28 * v39) + (float)((float)(v25 * v33) + (float)(v27 * v36));
    float v52 = (float)(v28 * v40) + (float)((float)(v25 * v34) + (float)(v27 * v37));
    float v53 = (float)(v31 * v39) + (float)((float)(v29 * v33) + (float)(v30 * v36));
    float v54 = (float)(v31 * v40) + (float)((float)(v29 * v34) + (float)(v30 * v37));
    float v55 = (float)(v31 * v41) + (float)((float)(v29 * v35) + (float)(v30 * v38));
    *(float *)&v77[1] = v43;
    *(float *)&v77[2] = v44;
    *(float *)&v77[3] = v51;
    *(float *)&v77[4] = v52;
    *(float *)&v77[5] = v45;
    *(float *)&v77[6] = v53;
    *(float *)float v77 = v42;
    *(float *)&v77[7] = v54;
    *(float *)&v77[8] = v55;
    if (!v50) {
      unsigned int v49 = 0;
    }
    unint64_t result = ((_BYTE)v49 + (v49 >> 1) + 1) & 3;
    uint64_t v57 = &v77[3 * result];
    float v58 = *(float *)&v57[((_BYTE)v49
                        + (v49 >> 1)
                        + 1
                        + (((v49 + (v49 >> 1) + 1) & 3) >> 1)
                        + 1) & 3];
    if (v58 == 0.0) {
      break;
    }
    float v59 = *(float *)&v57[result];
    unint64_t result = (unint64_t)&v77[3
                                  * (((_BYTE)v49
                                    + (v49 >> 1)
                                    + 1
                                    + (((v49 + (v49 >> 1) + 1) & 3) >> 1)
                                    + 1) & 3)];
    float v60 = *(float *)(result
                   + 4
                   * (((_BYTE)v49
                     + (v49 >> 1)
                     + 1
                     + (((v49 + (v49 >> 1) + 1) & 3) >> 1)
                     + 1) & 3));
    float v61 = v58 + v58;
    if (vabds_f32(v59, v60) > (float)(fabsf(v61) * 2000000.0)) {
      break;
    }
    float v62 = (float)(v59 - v60) / v61;
    float v63 = fabsf(v62);
    if (v63 <= 1000.0)
    {
      float v66 = sqrtf((float)(v62 * v62) + 1.0);
      float v67 = 1.0 / sqrtf((float)((float)(1.0 / (float)(v63 + v66)) * (float)(1.0 / (float)(v63 + v66))) + 1.0);
      float v68 = sqrtf((float)(1.0 - v67) * 0.5);
      if (v62 < 0.0) {
        float v68 = -v68;
      }
      float v65 = sqrtf((float)(v67 + 1.0) * 0.5);
      float v79 = 0.0;
      uint64_t v78 = 0;
      *((float *)&v78 + v49) = v68;
    }
    else
    {
      float v64 = v62 * 4.0;
      float v65 = 1.0;
      float v79 = 0.0;
      uint64_t v78 = 0;
      *((float *)&v78 + v49) = 1.0 / v64;
    }
    float v69 = (float)((float)((float)(v13 * v65) + (float)(v11 * *(float *)&v78)) + (float)(v12 * v79))
        - (float)(*((float *)&v78 + 1) * v9);
    float v70 = (float)((float)((float)(v12 * v65) + (float)(v11 * *((float *)&v78 + 1))) + (float)(v9 * *(float *)&v78))
        - (float)(v79 * v13);
    float v71 = (float)((float)((float)(v9 * v65) + (float)(v11 * v79)) + (float)(v13 * *((float *)&v78 + 1)))
        - (float)(*(float *)&v78 * v12);
    float v72 = (float)((float)((float)(v11 * v65) - (float)(v13 * *(float *)&v78)) - (float)(v12 * *((float *)&v78 + 1)))
        - (float)(v9 * v79);
    float v73 = sqrtf((float)((float)((float)(v70 * v70) + (float)(v69 * v69)) + (float)(v71 * v71)) + (float)(v72 * v72));
    float v13 = v69 / v73;
    float v12 = v70 / v73;
    float v9 = v71 / v73;
    float v11 = v72 / v73;
    --v10;
  }
  while (v10);
  *a2 = v13;
  a2[1] = v12;
  a2[2] = v9;
  a2[3] = v11;
  *a3 = v42;
  a3[1] = v52;
  a3[2] = v55;
  return result;
}

float *physx::shdfnd::optimizeBoundingBox@<X0>(float *result@<X0>, float *a2@<X8>)
{
  float v2 = (float)((float)(result[1] * result[1]) + (float)(*result * *result)) + (float)(result[2] * result[2]);
  float v3 = (float)((float)(result[4] * result[4]) + (float)(result[3] * result[3])) + (float)(result[5] * result[5]);
  float v4 = (float)((float)(result[7] * result[7]) + (float)(result[6] * result[6])) + (float)(result[8] * result[8]);
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v4;
  BOOL v5 = v3 > v2;
  if (v3 <= v2) {
    int v6 = 3;
  }
  else {
    int v6 = 2;
  }
  if (v4 <= a2[v3 <= v2]) {
    unsigned int v7 = v3 <= v2;
  }
  else {
    unsigned int v7 = 2;
  }
  float v8 = a2[v3 > v2];
  float v9 = a2[v7];
  if (v8 >= v9) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v5;
  }
  if (v8 >= v9) {
    unsigned int v11 = v5;
  }
  else {
    unsigned int v11 = v7;
  }
  uint64_t v12 = v6 - v7;
  float v13 = a2[v11];
  float v14 = 1.0 / sqrtf(v13);
  float v15 = v13 * v14;
  float v16 = (float32x2_t *)&result[3 * v11];
  float32_t v17 = v16->f32[0] * v14;
  float32_t v18 = v14 * v16->f32[1];
  v16->f32[0] = v17;
  v16->f32[1] = v18;
  float32_t v19 = v14 * v16[1].f32[0];
  v16[1].f32[0] = v19;
  float v20 = &result[3 * v10];
  float v21 = *v20;
  float v22 = v20[1];
  float v23 = v20[2];
  float v24 = (float)((float)(v18 * v22) + (float)(v17 * *v20)) + (float)(v19 * v23);
  float v25 = (float32x2_t *)&result[3 * v12];
  float v26 = (float *)v25 + 1;
  float v27 = (float *)&v25[1];
  float v28 = (float)((float)(v18 * v25->f32[1]) + (float)(v17 * v25->f32[0])) + (float)(v19 * v25[1].f32[0]);
  a2[v11] = v15 + (float)(fabsf(v24) + fabsf(v28));
  float *v20 = v21 - (float)(v17 * v24);
  v20[1] = v22 - (float)(v18 * v24);
  v20[2] = v23 - (float)(v19 * v24);
  float v29 = v28 * v16[1].f32[0];
  float32x2_t v30 = vsub_f32(*v25, vmul_n_f32(*v16, v28));
  *float v25 = v30;
  float v31 = v25[1].f32[0] - v29;
  v25[1].f32[0] = v31;
  float v32 = *v20;
  float v33 = v20[1];
  float v34 = v20[2];
  float v35 = sqrtf((float)((float)(v33 * v33) + (float)(v32 * v32)) + (float)(v34 * v34));
  if (v35 <= 0.0)
  {
    float v36 = v30.f32[1];
  }
  else
  {
    float v32 = v32 * (float)(1.0 / v35);
    float *v20 = v32;
    float v33 = v33 * (float)(1.0 / v35);
    v20[1] = v33;
    float v34 = v34 * (float)(1.0 / v35);
    v20[2] = v34;
    v30.i32[0] = v25->i32[0];
    float v36 = *v26;
    float v31 = *v27;
  }
  float v37 = (float)((float)(v36 * v33) + (float)(v32 * v30.f32[0])) + (float)(v34 * v31);
  a2[v10] = v35 + fabsf(v37);
  float v38 = v33 * v37;
  float v39 = v30.f32[0] - (float)(v32 * v37);
  v25->f32[0] = v39;
  float v40 = v36 - v38;
  *float v26 = v40;
  float v41 = v31 - (float)(v34 * v37);
  *float v27 = v41;
  float v42 = sqrtf((float)((float)(v40 * v40) + (float)(v39 * v39)) + (float)(v41 * v41));
  if (v42 > 0.0)
  {
    v25->f32[0] = v39 * (float)(1.0 / v42);
    *float v26 = v40 * (float)(1.0 / v42);
    *float v27 = v41 * (float)(1.0 / v42);
  }
  a2[v12] = v42;
  return result;
}

void physx::shdfnd::slerp(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>, float a4@<S0>)
{
  float v6 = *a1;
  float v7 = a1[1];
  float v8 = a2[1];
  float v9 = a1[2];
  float v10 = a1[3];
  float v11 = a2[2];
  float v12 = a2[3];
  float v13 = (float)((float)((float)(v7 * v8) + (float)(*a1 * *a2)) + (float)(v9 * v11)) + (float)(v10 * v12);
  if (v13 >= 0.0) {
    float v14 = (float)((float)((float)(v7 * v8) + (float)(*a1 * *a2)) + (float)(v9 * v11)) + (float)(v10 * v12);
  }
  else {
    float v14 = -v13;
  }
  float v15 = 1.0 - (float)(v14 * v14);
  if (v15 >= 1.0e-16)
  {
    float v16 = sqrtf(v15);
    float v24 = *a2;
    float v25 = a2[1];
    float v26 = a2[2];
    float v23 = atan2f(v16, v14);
    float v17 = 1.0 / v16;
    float v18 = sinf((float)(1.0 - a4) * v23);
    float v19 = a4;
    float v20 = v17 * v18;
    float v21 = v17 * sinf(v23 * v19);
    float v22 = -v21;
    if (v13 >= 0.0) {
      float v22 = v21;
    }
    float v6 = (float)(v6 * v20) + (float)(v24 * v22);
    float v7 = (float)(v7 * v20) + (float)(v25 * v22);
    float v9 = (float)(v9 * v20) + (float)(v26 * v22);
    float v10 = (float)(v10 * v20) + (float)(v12 * v22);
  }
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v9;
  a3[3] = v10;
}

uint64_t physx::shdfnd::Foundation::getErrorCallback(physx::shdfnd::Foundation *this)
{
  return *((void *)this + 2);
}

uint64_t physx::shdfnd::Foundation::setErrorLevel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 364) = a2;
  return result;
}

uint64_t physx::shdfnd::Foundation::getErrorLevel(physx::shdfnd::Foundation *this)
{
  return *((unsigned int *)this + 91);
}

uint64_t physx::shdfnd::Foundation::getAllocatorCallback(physx::shdfnd::Foundation *this)
{
  return *((void *)this + 1);
}

uint64_t physx::shdfnd::Foundation::getReportAllocationNames(physx::shdfnd::Foundation *this)
{
  return *((unsigned __int8 *)this + 360);
}

uint64_t physx::shdfnd::Foundation::setReportAllocationNames(uint64_t this, char a2)
{
  *(unsigned char *)(this + 360) = a2;
  return this;
}

void physx::shdfnd::BroadcastingAllocator::~BroadcastingAllocator(physx::shdfnd::BroadcastingAllocator *this)
{
  *(void *)this = &unk_26E72A478;
  *((_DWORD *)this + 38) = 0;
  physx::shdfnd::Broadcast<physx::shdfnd::AllocationListener,physx::PxAllocatorCallback>::~Broadcast((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::shdfnd::BroadcastingAllocator::allocate(physx::shdfnd::BroadcastingAllocator *this, uint64_t a2, const char *a3, const char *a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 20) + 16))(*((void *)this + 20));
  uint64_t v11 = v10;
  if (v10)
  {
    if ((v10 & 0xF) != 0)
    {
      (*(void (**)(void, uint64_t, const char *, const char *, uint64_t))(**((void **)this + 21) + 16))(*((void *)this + 21), 64, "Allocations must be 16-byte aligned.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsBroadcast.h", 205);
      return 0;
    }
    else if (*((_DWORD *)this + 38))
    {
      unint64_t v12 = 0;
      do
      {
        float v13 = *(void (****)(void, uint64_t, const char *, const char *, uint64_t, uint64_t))(*((void *)this + 18) + 8 * v12);
        (**v13)(v13, a2, a3, a4, a5, v11);
        ++v12;
      }
      while (v12 < *((unsigned int *)this + 38));
    }
  }
  else
  {
    (*(void (**)(void, uint64_t, const char *, const char *, uint64_t))(**((void **)this + 21) + 16))(*((void *)this + 21), 64, "User allocator returned NULL.", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsBroadcast.h", 199);
  }
  return v11;
}

uint64_t physx::shdfnd::BroadcastingAllocator::deallocate(physx::shdfnd::BroadcastingAllocator *this, void *a2)
{
  if (*((_DWORD *)this + 38))
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*((void *)this + 18) + 8 * v4);
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 8))(v5, a2);
      ++v4;
    }
    while (v4 < *((unsigned int *)this + 38));
  }
  float v6 = *(uint64_t (**)(void))(**((void **)this + 20) + 24);
  return v6();
}

void physx::shdfnd::BroadcastingErrorCallback::~BroadcastingErrorCallback(physx::shdfnd::BroadcastingErrorCallback *this)
{
  *(void *)this = &unk_26E72A508;
  *((_DWORD *)this + 38) = 0;
  physx::shdfnd::Broadcast<physx::PxErrorCallback,physx::PxErrorCallback>::~Broadcast((uint64_t)this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::shdfnd::Broadcast<physx::PxErrorCallback,physx::PxErrorCallback>::~Broadcast(uint64_t a1)
{
  *(void *)a1 = &unk_26E72A570;
  int v2 = *(_DWORD *)(a1 + 156);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3 == a1 + 8)
    {
      *(unsigned char *)(a1 + 136) = 0;
    }
    else if (v3)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return a1;
}

uint64_t physx::shdfnd::Broadcast<physx::shdfnd::AllocationListener,physx::PxAllocatorCallback>::~Broadcast(uint64_t a1)
{
  *(void *)a1 = &unk_26E72A4D8;
  int v2 = *(_DWORD *)(a1 + 156);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 144);
    if (v3 == a1 + 8)
    {
      *(unsigned char *)(a1 + 136) = 0;
    }
    else if (v3)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  return a1;
}

uint64_t physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::resize(uint64_t result, unsigned int a2, void *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    unint64_t result = physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 8 * a2;
    float v8 = (void *)(*(void *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a2, "", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unint64_t v4 = (void *)result;
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    float v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    uint64_t v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

pthread_mutex_t *physx::shdfnd::MutexImpl::MutexImpl(pthread_mutex_t *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutexattr_setprotocol(&v3, 1);
  pthread_mutex_init(this, &v3);
  pthread_mutexattr_destroy(&v3);
  return this;
}

physx::shdfnd::ReadWriteLock *physx::shdfnd::ReadWriteLock::ReadWriteLock(physx::shdfnd::ReadWriteLock *this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    int v2 = (pthread_mutex_t **)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/src/unix/PsUnixMutex.cpp", 202);
    *(void *)this = v2;
    uint64_t v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      uint64_t v4 = "<allocation names disabled>";
    }
    uint64_t v5 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v3 + 24) + 16))(v3 + 24, 72, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *int v2 = v5;
    physx::shdfnd::MutexImpl::MutexImpl(v5);
    *(_DWORD *)(*(void *)this + 8) = 0;
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void physx::shdfnd::ReadWriteLock::~ReadWriteLock(pthread_mutex_t ***this)
{
  int v2 = *this;
  if (v2)
  {
    physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(v2);
    if (*this) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
}

pthread_mutex_t ***physx::shdfnd::ReadWriteLock::lockReader(pthread_mutex_t ***this, int a2)
{
  int v2 = (atomic_uint *)*this;
  if (*this)
  {
    if (a2)
    {
      uint64_t v3 = this;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      {
        this = (pthread_mutex_t ***)pthread_mutex_lock(*(pthread_mutex_t **)v2);
        int v2 = (atomic_uint *)*v3;
      }
      atomic_fetch_add(v2 + 2, 1u);
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      {
        uint64_t v4 = **v3;
        return (pthread_mutex_t ***)pthread_mutex_unlock(v4);
      }
    }
    else
    {
      atomic_fetch_add(v2 + 2, 1u);
    }
  }
  return this;
}

uint64_t *physx::shdfnd::ReadWriteLock::lockWriter(uint64_t *this)
{
  uint64_t v1 = *this;
  if (*this)
  {
    int v2 = this;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      this = (uint64_t *)pthread_mutex_lock(*(pthread_mutex_t **)v1);
      uint64_t v1 = *v2;
    }
    while (*(_DWORD *)(v1 + 8))
      ;
  }
  return this;
}

void *physx::shdfnd::SListImpl::pop(physx::shdfnd::SListImpl *this)
{
  int v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  uint64_t v3 = *(void **)this;
  if (*(void *)this) {
    *(void *)this = *v3;
  }
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t physx::shdfnd::SyncImpl::set(physx::shdfnd::SyncImpl *this)
{
  pthread_mutex_lock((pthread_mutex_t *)this);
  if (!*((unsigned char *)this + 116))
  {
    *((unsigned char *)this + 116) = 1;
    ++*((_DWORD *)this + 28);
    pthread_cond_broadcast((pthread_cond_t *)((char *)this + 64));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)this);
}

BOOL physx::shdfnd::SyncImpl::wait(physx::shdfnd::SyncImpl *this, unsigned int a2)
{
  pthread_mutex_lock((pthread_mutex_t *)this);
  int v4 = *((_DWORD *)this + 28);
  if (!*((unsigned char *)this + 116))
  {
    if (a2 == -1)
    {
      while (!*((unsigned char *)this + 116)
           && v4 == *((_DWORD *)this + 28)
           && !pthread_cond_wait((pthread_cond_t *)((char *)this + 64), (pthread_mutex_t *)this))
        ;
    }
    else
    {
      gettimeofday(&v8, 0);
      unsigned int v6 = v8.tv_usec + 1000 * (a2 % 0x3E8);
      v9.tv_sec = v8.tv_sec + a2 / 0x3E8uLL + v6 / 0xF4240uLL;
      v9.tv_nsec = 1000 * (v6 % 0xF4240);
      while (!*((unsigned char *)this + 116)
           && v4 == *((_DWORD *)this + 28)
           && !pthread_cond_timedwait((pthread_cond_t *)((char *)this + 64), (pthread_mutex_t *)this, &v9))
        ;
    }
  }
  if (*((unsigned char *)this + 116)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 != *((_DWORD *)this + 28);
  }
  pthread_mutex_unlock((pthread_mutex_t *)this);
  return v5;
}

void *physx::shdfnd::TempAllocator::allocate(physx::shdfnd::TempAllocator *this, uint64_t a2, const char *a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  unsigned int v4 = 31 - __clz(a2 + 15);
  if (v4 <= 8) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = v4;
  }
  if (v5 > 0x10)
  {
    uint64_t v15 = a2 + 16;
    if (v15) {
      float v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v15, "NonTrackedAlloc", a3, a4);
    }
    else {
      float v13 = 0;
    }
  }
  else
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0
      || (uint64_t v7 = physx::shdfnd::Foundation::mInstance, physx::shdfnd::g_isLockingEnabled))
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(physx::shdfnd::Foundation::mInstance + 456));
      uint64_t v7 = physx::shdfnd::Foundation::mInstance;
    }
    uint64_t v8 = *(void *)(v7 + 440);
    uint64_t v9 = v8 + 8 * v5;
    uint64_t v10 = (void **)(v9 - 64);
    unint64_t v11 = v9 - 40;
    if (v11 >= v8 + 8 * (unint64_t)*(unsigned int *)(v7 + 448)) {
      unint64_t v11 = v8 + 8 * *(unsigned int *)(v7 + 448);
    }
    if ((unint64_t)v10 >= v11)
    {
LABEL_15:
      float v13 = (void *)(*(uint64_t (**)(void))(*(void *)(v7 + 24) + 16))();
    }
    else
    {
      uint64_t v12 = v8 + 8 * v5 - 64;
      while (1)
      {
        float v13 = *v10;
        if (*v10) {
          break;
        }
        ++v10;
        v12 += 8;
        if ((unint64_t)v10 >= v11) {
          goto LABEL_15;
        }
      }
      *uint64_t v10 = (void *)*v13;
      LODWORD(v5) = ((unint64_t)(v12 - *(void *)(physx::shdfnd::Foundation::mInstance + 440)) >> 3) + 8;
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 456));
    }
  }
  *(_DWORD *)float v13 = v5;
  return v13 + 2;
}

void physx::shdfnd::TempAllocator::deallocate(physx::shdfnd::TempAllocator *this, _DWORD *a2)
{
  if (a2)
  {
    int v2 = a2 - 4;
    unsigned int v3 = *(a2 - 4);
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if (v3 < 0x11)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0
        || (uint64_t v8 = physx::shdfnd::Foundation::mInstance, physx::shdfnd::g_isLockingEnabled))
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::shdfnd::Foundation::mInstance + 456));
        uint64_t v8 = physx::shdfnd::Foundation::mInstance;
      }
      unsigned int v9 = v3 - 8;
      if (*(_DWORD *)(v8 + 448) <= v3 - 8)
      {
        uint64_t v10 = 0;
        physx::shdfnd::Array<physx::shdfnd::TempAllocatorChunk *,physx::shdfnd::Allocator>::resize(v8 + 440, v3 - 7, &v10);
        uint64_t v8 = physx::shdfnd::Foundation::mInstance;
      }
      *int v2 = *(void *)(*(void *)(v8 + 440) + 8 * v9);
      *(void *)(*(void *)(physx::shdfnd::Foundation::mInstance + 440) + 8 * v9) = v2;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 456));
      }
    }
    else
    {
      uint64_t v5 = *(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
      uint64_t v6 = physx::shdfnd::Foundation::mInstance + 24;
      uint64_t v7 = (char *)(a2 - 4);
      v5(v6, v7);
    }
  }
}

uint64_t physx::NpActor::exportExtraData(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  uint64_t v5 = a1[1];
  if (!v5) {
    goto LABEL_21;
  }
  uint64_t v6 = *(unsigned int *)(v5 + 80);
  if (v6)
  {
    uint64_t v7 = v4;
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      v9 += (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 16))(v7, *(void *)(*(void *)(a1[1] + 72) + v8 + 8)) ^ 1;
      v8 += 16;
    }
    while (16 * v6 != v8);
    if (v9)
    {
      uint64_t v10 = physx::NpFactory::acquireConnectorArray((pthread_mutex_t **)physx::NpFactory::mInstance);
      uint64_t v5 = (uint64_t)v10;
      if (v9 < v6)
      {
        if ((*(_DWORD *)&v10[1].__opaque[12] & 0x7FFFFFFFu) < v6 - v9) {
          physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::recreate((uint64_t)v10, v6 - v9);
        }
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = *(void *)(a1[1] + 72) + v11;
          if ((*(unsigned int (**)(uint64_t, void))(*(void *)v7 + 16))(v7, *(void *)(v12 + 8)))
          {
            uint64_t v13 = *(unsigned int *)(v5 + 80);
            if ((*(_DWORD *)(v5 + 84) & 0x7FFFFFFFu) <= v13)
            {
              physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::growAndPushBack(v5, v12);
            }
            else
            {
              uint64_t v14 = *(void *)(v5 + 72) + 16 * v13;
              *(unsigned char *)uint64_t v14 = *(unsigned char *)v12;
              *(void *)(v14 + 8) = *(void *)(v12 + 8);
              *(_DWORD *)(v5 + 80) = v13 + 1;
            }
          }
          v11 += 16;
          --v6;
        }
        while (v6);
      }
      char v15 = 0;
      goto LABEL_18;
    }
    uint64_t v5 = a1[1];
  }
  char v15 = 1;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v5, 88);
  if (!*(unsigned char *)(v5 + 64) && *(void *)(v5 + 72) && *(_DWORD *)(v5 + 80) | *(_DWORD *)(v5 + 84) & 0x7FFFFFFF) {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  if ((v15 & 1) == 0) {
    physx::NpFactory::releaseConnectorArray(physx::NpFactory::mInstance, v5);
  }
LABEL_21:
  uint64_t v16 = *a1;
  float v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v17(a2, v16);
}

void *physx::NpActor::importExtraData(void *result, uint64_t a2)
{
  int v2 = *(unsigned int **)(a2 + 8);
  if (result[1])
  {
    unint64_t v3 = ((unint64_t)v2 + 15) & 0xFFFFFFFFFFFFFFF0;
    int v2 = (unsigned int *)(v3 + 88);
    result[1] = v3;
    uint64_t v4 = *(void *)(v3 + 72);
    if (v4) {
      *(_DWORD *)(v3 + 84) |= 0x80000000;
    }
    if (*(unsigned char *)(v3 + 64))
    {
      *(void *)(v3 + 72) = v3;
      if (*(_DWORD *)(v3 + 80)) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (!*(_DWORD *)(v3 + 80))
    {
LABEL_10:
      result[1] = 0;
      goto LABEL_11;
    }
    if (v4)
    {
      uint64_t v5 = *(_DWORD *)(v3 + 84) & 0x7FFFFFFF;
      *(void *)(v3 + 72) = v2;
      v2 += 4 * v5;
    }
  }
LABEL_11:
  unsigned int v8 = *v2;
  uint64_t v6 = v2 + 1;
  uint64_t v7 = v8;
  *(void *)(a2 + 8) = v6;
  if (!v8) {
    uint64_t v6 = 0;
  }
  *unint64_t result = v6;
  *(void *)(a2 + 8) += v7;
  return result;
}

uint64_t physx::NpActor::resolveReferences(uint64_t result, uint64_t (***a2)(void, uint64_t))
{
  uint64_t v2 = *(void *)(result + 8);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 80);
    if (v3)
    {
      uint64_t v5 = result;
      uint64_t v6 = 0;
      uint64_t v7 = 16 * v3;
      do
      {
        uint64_t v8 = *(void *)(*(void *)(v5 + 8) + 72) + v6;
        if (*(void *)(v8 + 8))
        {
          unint64_t result = (**a2)(a2, 0x80000000);
          *(void *)(v8 + 8) = result;
        }
        v6 += 16;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t physx::NpActor::releaseConstraints(uint64_t this, physx::PxRigidActor *a2, int8x8_t a3)
{
  uint64_t v3 = *(void *)(this + 8);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 80);
    if (v4)
    {
      uint64_t v5 = a2;
      uint64_t v6 = this;
      unsigned int v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)(v6 + 8) + 72);
        if (*(unsigned char *)(v8 + 16 * v7))
        {
          ++v7;
        }
        else
        {
          uint64_t v9 = *(void *)(v8 + 16 * v7 + 8);
          if (*(physx::PxRigidActor **)(v9 + 16) == v5) {
            uint64_t v10 = 16;
          }
          else {
            uint64_t v10 = 24;
          }
          *(void *)(v9 + v10) = 0;
          if (((*(_DWORD *)(v9 + 40) >> 30) - 1) <= 1)
          {
            a2 = (physx::PxRigidActor *)(v9 + 32);
            uint64_t v11 = *(void *)(v9 + 32);
            if (v11)
            {
              physx::Scb::Scene::removeConstraint(*(int32x2_t **)(v9 + 32), (uint64_t)a2, a3);
              uint64_t v12 = v9;
              physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v11 + 9072, &v12);
            }
          }
          this = physx::NpActor::removeConnector(v6, a2, v7);
        }
        --v4;
      }
      while (v4);
    }
  }
  return this;
}

uint64_t physx::NpActor::removeConnector(uint64_t this, physx::PxActor *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unsigned int v5 = *(_DWORD *)(v3 + 80) - 1;
  *(_DWORD *)(v3 + 80) = v5;
  *(_OWORD *)(v4 + 16 * a3) = *(_OWORD *)(v4 + 16 * v5);
  uint64_t v6 = *(void *)(this + 8);
  if (!*(_DWORD *)(v6 + 80))
  {
    uint64_t v7 = this;
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0) {
      this = physx::NpFactory::releaseConnectorArray(physx::NpFactory::mInstance, v6);
    }
    *(void *)(v7 + 8) = 0;
  }
  return this;
}

BOOL physx::NpAggregate::removeActorAndReinsert(physx::NpAggregate *this, physx::PxActor *a2, physx::PxActor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *((unsigned int *)this + 16);
  if (!v8)
  {
LABEL_7:
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", 204, "PxAggregate: can't remove actor, actor doesn't belong to aggregate", a6, a7, a8, v20);
    return 0;
  }
  int v9 = (int)a3;
  uint64_t v11 = (physx::PxActor **)*((void *)this + 9);
  if (*v11 != a2)
  {
    unint64_t v12 = 0;
    while (v8 - 1 != v12)
    {
      uint64_t v13 = v11[++v12];
      if (v13 == a2)
      {
        BOOL v14 = v12 < v8;
        goto LABEL_9;
      }
    }
    goto LABEL_7;
  }
  unint64_t v12 = 0;
  BOOL v14 = 1;
LABEL_9:
  int v15 = v8 - 1;
  *((_DWORD *)this + 16) = v15;
  v11[v12] = v11[v15];
  uint64_t v16 = (void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a2 + 4);
  float v17 = (char *)a2 + v16[18];
  physx::NpActor::setAggregate((uint64_t)a2 + *v16, 0, a3);
  physx::Scb::Aggregate::removeActor((void *)this + 2, (uint64_t)v17, v9, v18);
  return v14;
}

uint64_t physx::NpActor::addConnector(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(pthread_mutex_t **)(result + 8);
  if (!v6)
  {
    unint64_t result = (uint64_t)physx::NpFactory::acquireConnectorArray((pthread_mutex_t **)physx::NpFactory::mInstance);
    uint64_t v6 = (pthread_mutex_t *)result;
    *(void *)(v5 + 8) = result;
  }
  int v7 = *(_DWORD *)&v6[1].__opaque[12];
  if (v7 < 0 && *(_DWORD *)&v6[1].__opaque[8] == (v7 & 0x7FFFFFFF))
  {
    uint64_t v6 = physx::NpFactory::acquireConnectorArray((pthread_mutex_t **)physx::NpFactory::mInstance);
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v9 = *(void *)(v8 + 72);
    unint64_t result = physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::resizeUninitialized((uint64_t)v6, *(_DWORD *)(v8 + 80));
    uint64_t v10 = *(unsigned int *)&v6[1].__opaque[8];
    if (v10)
    {
      unint64_t v11 = *(void *)v6[1].__opaque;
      unint64_t v12 = v11 + 16 * v10;
      do
      {
        *(unsigned char *)unint64_t v11 = *(unsigned char *)v9;
        *(void *)(v11 + 8) = *(void *)(v9 + 8);
        v11 += 16;
        v9 += 16;
      }
      while (v11 < v12);
    }
    uint64_t v13 = *(void *)(v5 + 8);
    int v14 = *(_DWORD *)(v13 + 84);
    if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0)
    {
      uint64_t v15 = *(void *)(v13 + 72);
      if (v15 == v13)
      {
        *(unsigned char *)(v13 + 64) = 0;
      }
      else if (v15)
      {
        unint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
    }
    *(void *)(v5 + 8) = v6;
    int v7 = *(_DWORD *)&v6[1].__opaque[12];
  }
  v19[0] = a2;
  uint64_t v20 = a3;
  unsigned int v16 = v7 & 0x7FFFFFFF;
  uint64_t v17 = *(unsigned int *)&v6[1].__opaque[8];
  if (v16 <= v17) {
    return physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::growAndPushBack((uint64_t)v6, (uint64_t)v19);
  }
  uint64_t v18 = *(void *)v6[1].__opaque + 16 * v17;
  *(unsigned char *)uint64_t v18 = a2;
  *(void *)(v18 + 8) = a3;
  *(_DWORD *)&v6[1].__opaque[8] = v17 + 1;
  return result;
}

uint64_t physx::NpActor::removeConnector(uint64_t result, physx::PxActor *a2, int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 + 80);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (void *)(*(void *)(v4 + 72) + 8);
      while (*((unsigned __int8 *)v8 - 8) != a3 || *v8 != a4)
      {
        ++v7;
        v8 += 2;
        if (v5 == v7) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      LODWORD(v7) = -1;
    }
    return physx::NpActor::removeConnector(result, a2, v7);
  }
  return result;
}

uint64_t physx::NpActor::setAggregate(uint64_t this, physx::NpAggregate *a2, physx::PxActor *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  if (!v3) {
    return physx::NpActor::addConnector(this, 1, (uint64_t)a2);
  }
  uint64_t v4 = *(unsigned int *)(v3 + 80);
  if (!v4) {
    return physx::NpActor::addConnector(this, 1, (uint64_t)a2);
  }
  uint64_t v5 = 0;
  for (unint64_t i = (void *)(*(void *)(v3 + 72) + 8); *((unsigned char *)i - 8) != 1; i += 2)
  {
    if (v4 == ++v5) {
      return physx::NpActor::addConnector(this, 1, (uint64_t)a2);
    }
  }
  if (!*i) {
    return physx::NpActor::addConnector(this, 1, (uint64_t)a2);
  }
  if (!a2) {
    return physx::NpActor::removeConnector(this, 0, v5);
  }
  *unint64_t i = a2;
  return this;
}

int32x2_t *physx::NpActor::removeConstraintsFromScene(int32x2_t *this)
{
  int32x2_t v1 = this[1];
  if (v1)
  {
    uint64_t v2 = *(void *)(*(void *)&v1 + 72);
    unsigned int v3 = *(_DWORD *)(*(void *)&v1 + 80);
  }
  else
  {
    unsigned int v3 = 0;
    uint64_t v2 = 0;
  }
  unsigned int v4 = 0;
LABEL_5:
  if (v4 <= v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (unsigned __int8 *)(v2 + 16 * v4);
  uint64_t v7 = v5 - v4 + 1;
  while (--v7)
  {
    uint64_t v8 = v6 + 16;
    ++v4;
    int v9 = *v6;
    v6 += 16;
    if (!v9)
    {
      uint64_t v10 = *((void *)v8 - 1);
      if (!v10) {
        return this;
      }
      if (((*(_DWORD *)(v10 + 40) >> 30) - 1) <= 1)
      {
        uint64_t v11 = v10 + 32;
        unint64_t v12 = *(int32x2_t **)(v10 + 32);
        if (v12)
        {
          uint64_t v14 = *((void *)v8 - 1);
          physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v12[1134], &v14);
          this = physx::Scb::Scene::removeConstraint(v12, v11, v13);
        }
      }
      goto LABEL_5;
    }
  }
  return this;
}

int32x2_t *physx::NpActor::addConstraintsToSceneInternal(int32x2_t *this)
{
  int32x2_t v1 = this[1];
  if (v1)
  {
    unsigned int v2 = 0;
    uint64_t v3 = *(void *)(*(void *)&v1 + 72);
    unsigned int v4 = *(_DWORD *)(*(void *)&v1 + 80);
LABEL_3:
    if (v2 <= v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = v2;
    }
    uint64_t v6 = (unsigned __int8 *)(v3 + 16 * v2);
    uint64_t v7 = v5 - v2 + 1;
    while (--v7)
    {
      uint64_t v8 = v6 + 16;
      ++v2;
      int v9 = *v6;
      v6 += 16;
      if (!v9)
      {
        uint64_t v10 = *((void *)v8 - 1);
        if (!v10) {
          return this;
        }
        (*(void (**)(void))(*(void *)v10 + 72))(*((void *)v8 - 1));
        this = (int32x2_t *)physx::NpConstraint::getSceneFromActors((physx::NpConstraint *)v10);
        if (this)
        {
          unint64_t v12 = this;
          uint64_t v15 = v10;
          char v16 = 0;
          int8x8_t v13 = (void *)physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(this + 1136, &v15, &v16, v11);
          if (!v16) {
            *int8x8_t v13 = v15;
          }
          this = physx::Scb::Scene::add<physx::Scb::Constraint>(v12 + 2, (physx::Scb::Base *)(v10 + 32), v12 + 996, v14);
        }
        goto LABEL_3;
      }
    }
  }
  return this;
}

float32x4_t physx::NpActor::getGlobalPose(float32x4_t *a1, uint64_t a2, uint64_t a3, float32x4_t a4)
{
  unsigned int v4 = *(int8x8_t **)(a2 + 16);
  if ((*(unsigned char *)(a2 + 8) & 4) == 0) {
    unsigned int v4 = (int8x8_t *)(a2 + 64);
  }
  unsigned int v5 = *(_DWORD *)(a3 + 8);
  if ((v5 & 0xF000000) == 0x5000000)
  {
    uint64_t v6 = (int32x4_t *)(*(void *)(a3 + 16) + 176);
    if ((v5 & 0x40) == 0) {
      uint64_t v6 = (int32x4_t *)(a3 + 48);
    }
    v7.i64[0] = v6[1].i64[0];
    v7.i64[1] = v6[1].u32[2];
    *(int8x8_t *)v8.f32 = v4[2];
    v8.i64[1] = v4[3].u32[0];
    float32x2_t v9 = (float32x2_t)vdupq_laneq_s32(*v6, 3).u64[0];
    float32x4_t v10 = *(float32x4_t *)v6;
    v10.i32[3] = 0;
    float32x4_t v11 = *(float32x4_t *)v4->i8;
    v11.i32[3] = 0;
    float32x4_t v12 = vmulq_f32(v10, v11);
    v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
    float32x2_t v13 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
    float32x2_t v14 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
    v12.i64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    float32x2_t v15 = (float32x2_t)vext_s8(*(int8x8_t *)v6->i8, (int8x8_t)v14, 4uLL);
    int8x8_t v16 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v6->i8, (float32x2_t)vext_s8(*v4, *(int8x8_t *)v12.f32, 4uLL)), v15, (float32x2_t)*v4);
    *(int8x8_t *)v12.f32 = vext_s8(v16, (int8x8_t)vmls_f32(vmul_f32(v14, (float32x2_t)*v4), *(float32x2_t *)v6->i8, *(float32x2_t *)v12.f32), 4uLL);
    v12.i64[1] = v16.u32[0];
    float32x4_t v17 = vmlaq_laneq_f32(v12, v11, *(float32x4_t *)v6, 3);
    v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
    *(float32x2_t *)v11.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v6, *(int8x16_t *)v6, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v4->i8, *(int8x16_t *)v4->i8, 8uLL)), v13);
    float32x4_t v18 = vmulq_n_f32(v8, vmla_f32((float32x2_t)0xBF000000BF000000, v9, v9).f32[0]);
    v18.i32[3] = 0;
    float32x2_t v19 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    int8x8_t v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v6->i8, (float32x2_t)vext_s8(*(int8x8_t *)v8.f32, (int8x8_t)v19, 4uLL)), v15, *(float32x2_t *)v8.f32);
    *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v14, *(float32x2_t *)v8.f32), *(float32x2_t *)v6->i8, v19), 4uLL);
    v21.i64[1] = v20.u32[0];
    float32x4_t v22 = vmlaq_laneq_f32(v18, v21, *(float32x4_t *)v6, 3);
    v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
    float32x4_t v23 = vmulq_f32(v10, v8);
    v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
    float32x4_t v24 = vmlaq_n_f32(v22, v10, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]);
    float32x4_t v25 = vmlaq_laneq_f32(v17, v10, *(float32x4_t *)v4->i8, 3);
    v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
    v26.i64[0] = 0x4000000040000000;
    v26.i64[1] = 0x4000000040000000;
    float32x4_t result = vmlaq_f32(v7, v26, v24);
    a1[1].i64[0] = result.i64[0];
    a1[1].i32[2] = result.i32[2];
    v25.i32[3] = v11.i32[1];
    *a1 = v25;
    return result;
  }
  int v28 = *(_DWORD *)(a3 + 284);
  float v29 = *(__n128 **)(a3 + 16);
  float32x2_t v30 = &v29[21].n128_u8[12];
  if ((v28 & 0x4000) == 0) {
    float32x2_t v30 = (unsigned __int8 *)(a3 + 76);
  }
  if ((~*v30 & 3) == 0)
  {
    if ((v28 & 0x8000) != 0)
    {
      a4 = (float32x4_t)v29[17];
      float32x4_t v71 = a4;
      float v33 = (unsigned __int32 *)&v29[18];
      float v32 = &v29[18].n128_u32[1];
      float v34 = &v29[18].n128_u32[2];
      goto LABEL_18;
    }
    if (v5 >> 30 != 3)
    {
      float v31 = *(float32x4_t **)(a3 + 208);
      if (v31)
      {
        if (v31[1].i8[15] == 1 && v31[1].i8[12])
        {
          float v32 = &v31[1].u32[1];
          a4 = *v31;
          float32x4_t v71 = *v31;
          float v33 = (unsigned __int32 *)&v31[1];
          float v34 = &v31[1].u32[2];
LABEL_18:
          float v35 = (int8x8_t *)&v71;
          goto LABEL_19;
        }
      }
    }
  }
  float v35 = (int8x8_t *)(a3 + 224);
  float v33 = (unsigned __int32 *)(a3 + 240);
  float v32 = (unsigned __int32 *)(a3 + 244);
  float v34 = (unsigned __int32 *)(a3 + 248);
LABEL_19:
  float v36 = (int32x4_t *)&v29[14];
  if ((v28 & 0x400) != 0) {
    float v38 = v36;
  }
  else {
    float v38 = (int32x4_t *)(a3 + 80);
  }
  v39.i64[0] = v38[1].i64[0];
  v39.i64[1] = v38[1].u32[2];
  a4.i32[0] = *v33;
  a4.i32[1] = *v32;
  a4.i32[2] = *v34;
  float32x2_t v40 = (float32x2_t)vdupq_laneq_s32(*v38, 3).u64[0];
  float32x4_t v41 = *(float32x4_t *)v38;
  v41.i32[3] = 0;
  float32x4_t v42 = *(float32x4_t *)v4->i8;
  v42.i32[3] = 0;
  float32x4_t v43 = vmulq_f32(v42, v41);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  *(float32x2_t *)v43.f32 = vmla_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)v4->i8, 3), v40);
  float32x2_t v44 = (float32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
  float32x2_t v45 = (float32x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  float32x2_t v46 = (float32x2_t)vext_s8(*(int8x8_t *)v38->i8, (int8x8_t)v45, 4uLL);
  int8x8_t v47 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*v4, v46), (float32x2_t)vext_s8(*v4, (int8x8_t)v44, 4uLL), *(float32x2_t *)v38->i8);
  *(int8x8_t *)v48.f32 = vext_s8(v47, (int8x8_t)vmls_f32(vmul_f32(v44, *(float32x2_t *)v38->i8), (float32x2_t)*v4, v45), 4uLL);
  v48.i64[1] = v47.u32[0];
  float32x4_t v49 = vmlaq_laneq_f32(v48, v42, *(float32x4_t *)v38, 3);
  v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
  float32x4_t v50 = vmlsq_laneq_f32(v49, v41, *(float32x4_t *)v4->i8, 3);
  float32x4_t v51 = *(float32x4_t *)v35->i8;
  v51.i32[3] = 0;
  float32x2_t v52 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  float32x2_t v53 = (float32x2_t)vext_s8(*v35, (int8x8_t)v52, 4uLL);
  int8x8_t v54 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*v35, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL)), v53, *(float32x2_t *)v50.f32);
  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
  v37.i64[1] = v4[3].u32[0];
  *(int8x8_t *)v37.f32 = v4[2];
  float32x4_t v55 = vsubq_f32(v37, v39);
  float32x4_t v56 = vmulq_n_f32(v55, vmla_f32((float32x2_t)0xBF000000BF000000, v40, v40).f32[0]);
  v56.i32[3] = 0;
  int8x8_t v57 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, v46), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL), *(float32x2_t *)v38->i8);
  *(int8x8_t *)v58.f32 = vext_s8(v57, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v38->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL)), *(float32x2_t *)v55.f32, v45), 4uLL);
  v58.i64[1] = v57.u32[0];
  float32x4_t v59 = vmlaq_laneq_f32(v56, v58, *(float32x4_t *)v38, 3);
  v59.i64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u32[0];
  float32x4_t v60 = vmulq_f32(v41, v55);
  v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
  float32x4_t v61 = vmlaq_n_f32(v59, v41, vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32).f32[0]);
  v60.i64[0] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
  *(float32x2_t *)v41.f32 = vadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
  v61.i64[1] = v60.u32[0];
  float32x4_t v62 = vaddq_f32(v61, v61);
  v58.i64[0] = vdupq_laneq_s32(*(int32x4_t *)v35->i8, 3).u64[0];
  float32x4_t v63 = vmulq_f32(v51, v50);
  v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
  float32x2_t v64 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v35->i8, *(int8x16_t *)v35->i8, 8uLL), *(float32x2_t *)v43.f32), vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32));
  *(int8x8_t *)v63.f32 = vext_s8(v54, (int8x8_t)vmls_f32(vmul_f32(v52, *(float32x2_t *)v50.f32), (float32x2_t)*v35, *(float32x2_t *)&v50.u32[2]), 4uLL);
  v63.i64[1] = v54.u32[0];
  float32x4_t v65 = vmlaq_laneq_f32(v63, v50, *(float32x4_t *)v35->i8, 3);
  v65.i64[1] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
  float32x4_t v66 = vmulq_n_f32(v62, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).f32[0]);
  v66.i32[3] = 0;
  *(float32x2_t *)v60.f32 = vadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
  *(float32x2_t *)v58.f32 = vmls_f32(vmul_f32((float32x2_t)*v35, (float32x2_t)vext_s8(*(int8x8_t *)v41.f32, *(int8x8_t *)v60.f32, 4uLL)), v53, *(float32x2_t *)v41.f32);
  *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v58.f32, (int8x8_t)vmls_f32(vmul_f32(v52, *(float32x2_t *)v41.f32), (float32x2_t)*v35, *(float32x2_t *)v60.f32), 4uLL);
  v60.i64[1] = v58.u32[0];
  float32x4_t v67 = vmlaq_laneq_f32(v66, v60, *(float32x4_t *)v35->i8, 3);
  v67.i64[1] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
  float32x4_t v68 = vmulq_f32(v51, v62);
  v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
  float32x4_t v69 = vmlaq_n_f32(v67, v51, vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32).f32[0]);
  float32x4_t v70 = vmlaq_n_f32(v65, v51, v43.f32[0]);
  v69.i64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u32[0];
  v43.i64[0] = 0x4000000040000000;
  v43.i64[1] = 0x4000000040000000;
  float32x4_t result = vmlaq_f32(a4, v43, v69);
  a1[1].i64[0] = result.i64[0];
  a1[1].i32[2] = result.i32[2];
  v70.i32[3] = v64.i32[1];
  *a1 = v70;
  return result;
}

physx::NpAggregate *physx::NpAggregate::NpAggregate(physx::NpAggregate *this, unsigned int a2, char a3)
{
  *((_DWORD *)this + 2) = 196618;
  *(void *)this = &unk_26E72A598;
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = this;
  *((_DWORD *)this + 12) = -1;
  *((_DWORD *)this + 13) = a2;
  *((unsigned char *)this + 56) = a3;
  *((_DWORD *)this + 6) = 150994944;
  *((_DWORD *)this + 16) = 0;
  if (a2) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", 60);
  else {
    uint64_t v4 = 0;
  }
  *((void *)this + 9) = v4;
  return this;
}

void physx::NpAggregate::~NpAggregate(physx::NpAggregate *this)
{
  *(void *)this = &unk_26E72A598;
  physx::NpFactory::onAggregateRelease(physx::NpFactory::mInstance, this);
  if (*((_WORD *)this + 5))
  {
    if (*((void *)this + 9)) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpAggregate::~NpAggregate(this);
  if (v1)
  {
    unsigned int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::NpAggregate::release(physx::NpAggregate *this)
{
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, 0, 1);
  if (*((_DWORD *)this + 16))
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*((void *)this + 9) + 8 * v3);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4) == 2)
      {
        uint64_t v6 = *(void *)(*(void *)(*((void *)this + 9) + 8 * v3) + 384);
        *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6) + 136) = 0;
      }
      uint64_t v7 = *(void *)(*((void *)this + 9) + 8 * v3);
      float32x4_t v8 = (void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(v7 + 8);
      uint64_t v9 = v7 + v8[18];
      physx::NpActor::setAggregate(v7 + *v8, 0, v5);
      physx::Scb::Aggregate::removeActor((void *)this + 2, v9, 1, v10);
      ++v3;
    }
    while (v3 < *((unsigned int *)this + 16));
  }
  if (((*((_DWORD *)this + 6) >> 30) - 1) <= 1)
  {
    uint64_t v11 = *((void *)this + 2);
    if (v11)
    {
      physx::Scb::Scene::removeAggregate(*((int32x2_t **)this + 2), (uint64_t)this + 16, v2);
      float32x2_t v13 = this;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v11 + 9200, (uint64_t *)&v13);
    }
  }
  return physx::Scb::Base::destroy((uint64_t)this + 16);
}

void physx::NpAggregate::addActorInternal(physx::NpAggregate *this, int32x2_t *a2, int32x2_t *a3, const physx::PxBVHStructure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((*(unsigned int (**)(int32x2_t *))(*(void *)a2 + 48))(a2) == 2)
  {
    if (!(*(uint64_t (**)(int32x2_t *))(*(void *)a2 + 56))(a2))
    {
      uint64_t v14 = (uint64_t)a2[48];
      if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 152))(v14))
      {
        uint64_t v15 = 0;
        int8x8_t v16 = (char *)this + 16;
        do
        {
          uint64_t v24 = 0;
          *(double *)&int8x8_t v17 = (*(double (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v14 + 160))(v14, &v24, 1, v15);
          physx::Scb::Aggregate::addActor((uint64_t)v16, v24 + 96, v17);
          uint64_t v15 = (v15 + 1);
        }
        while (v15 < (*(unsigned int (**)(uint64_t))(*(void *)v14 + 152))(v14));
      }
      physx::NpScene::addArticulationInternal(a3, v14);
    }
  }
  else
  {
    physx::Scb::Aggregate::addActor((uint64_t)this + 16, (uint64_t)a2 + *((void *)&physx::NpActor::sLazyInitOffsets + a2[1].u16[0] + 18), v13);
    physx::NpScene::addActorInternal((physx::NpScene *)a3, a2, a4, v23, v18, v19, v20, v21, v22, a9);
  }
}

uint64_t physx::NpAggregate::addActor(physx::NpAggregate *this, int32x2_t *a2, atomic_uint *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 16) == *((_DWORD *)this + 13))
  {
    uint64_t v8 = physx::shdfnd::Foundation::mInstance;
    uint64_t v9 = "PxAggregate: can't add actor to aggregate, max number of actors reached";
    uint64_t v10 = 146;
LABEL_9:
    physx::shdfnd::Foundation::error(v8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", v10, v9, a6, a7, a8, v24);
    return 0;
  }
  if ((*(uint64_t (**)(int32x2_t *))(*(void *)a2 + 144))(a2))
  {
    uint64_t v8 = physx::shdfnd::Foundation::mInstance;
    uint64_t v9 = "PxAggregate: can't add actor to aggregate, actor already belongs to an aggregate";
    uint64_t v10 = 152;
    goto LABEL_9;
  }
  if ((*(uint64_t (**)(int32x2_t *))(*(void *)a2 + 56))(a2))
  {
    uint64_t v8 = physx::shdfnd::Foundation::mInstance;
    uint64_t v9 = "PxAggregate: can't add actor to aggregate, actor already belongs to a scene";
    uint64_t v10 = 158;
    goto LABEL_9;
  }
  if ((*(unsigned int (**)(int32x2_t *))(*(void *)a2 + 48))(a2) == 2)
  {
    uint64_t v8 = physx::shdfnd::Foundation::mInstance;
    uint64_t v9 = "PxAggregate: can't add articulation link to aggregate, only whole articulations can be added";
    uint64_t v10 = 164;
    goto LABEL_9;
  }
  physx::NpActor::setAggregate((uint64_t)a2 + *((void *)&physx::NpActor::sLazyInitOffsets + a2[1].u16[0]), this, v14);
  uint64_t v21 = *((void *)this + 9);
  uint64_t v22 = *((unsigned int *)this + 16);
  *((_DWORD *)this + 16) = v22 + 1;
  *(void *)(v21 + 8 * v22) = a2;
  if (((*((_DWORD *)this + 6) >> 30) - 1) <= 1 && (uint64_t v23 = *((void *)this + 2)) != 0)
  {
    physx::NpAggregate::addActorInternal(this, a2, (int32x2_t *)(v23 - 16), (const physx::PxBVHStructure *)a3, v17, v18, v19, v20, v24);
    return 1;
  }
  else
  {
    uint64_t v15 = 1;
    if (a3)
    {
      atomic_fetch_add(a3 + 6, 1u);
      physx::NpActor::addConnector((uint64_t)a2 + *((void *)&physx::NpActor::sLazyInitOffsets + a2[1].u16[0]), 3, (uint64_t)a3);
    }
  }
  return v15;
}

BOOL physx::NpAggregate::removeActor(physx::NpAggregate *this, physx::PxActor *a2)
{
  if ((*(unsigned int (**)(physx::PxActor *))(*(void *)a2 + 48))(a2) == 2)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", 215, "PxAggregate: can't remove articulation link, only whole articulations can be removed", v6, v7, v8, v13);
    return 0;
  }
  else
  {
    if (((*((_DWORD *)this + 6) >> 30) - 1) > 1 || !*((void *)this + 2))
    {
      uint64_t v10 = (char *)a2 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a2 + 4));
      uint64_t v14 = 0;
      if (physx::NpActor::getConnectors<physx::Gu::BVHStructure>((uint64_t)v10, 3, (uint64_t)&v14, 1u, 0))
      {
        physx::NpActor::removeConnector((uint64_t)v10, v11, 3, v14);
        uint64_t v12 = v14;
        if (atomic_fetch_add((atomic_uint *volatile)(v14 + 24), 0xFFFFFFFF) == 1) {
          (*(void (**)(void))(*(void *)(v12 + 16) + 16))();
        }
      }
    }
    return physx::NpAggregate::removeActorAndReinsert(this, a2, (physx::PxActor *)1, v4, v5, v6, v7, v8);
  }
}

unint64_t physx::NpActor::getConnectors<physx::Gu::BVHStructure>(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5 || !*(_DWORD *)(v5 + 80)) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = *(void *)(v5 + 72);
    if (*(unsigned __int8 *)(v10 + v6) != a2 || v8 >= a4)
    {
      uint64_t v12 = v9;
    }
    else
    {
      uint64_t v12 = (v9 + 1);
      if (v9 >= a5)
      {
        *(void *)(a3 + 8 * v8++) = *(void *)(v10 + v6 + 8);
        uint64_t v5 = *(void *)(a1 + 8);
      }
    }
    ++v7;
    v6 += 16;
    uint64_t v9 = v12;
  }
  while (v7 < *(unsigned int *)(v5 + 80));
  return v8;
}

uint64_t physx::NpAggregate::addArticulation(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 64);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 152))(a2) + v4 > *(_DWORD *)(a1 + 52))
  {
    uint64_t v8 = physx::shdfnd::Foundation::mInstance;
    uint64_t v9 = "PxAggregate: can't add articulation links, max number of actors reached";
    uint64_t v10 = 249;
LABEL_7:
    physx::shdfnd::Foundation::error(v8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", v10, v9, v5, v6, v7, v22);
    return 0;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 192))(a2))
  {
    uint64_t v8 = physx::shdfnd::Foundation::mInstance;
    uint64_t v9 = "PxAggregate: can't add articulation to aggregate, articulation already belongs to an aggregate";
    uint64_t v10 = 255;
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2))
  {
    uint64_t v8 = physx::shdfnd::Foundation::mInstance;
    uint64_t v9 = "PxAggregate: can't add articulation to aggregate, articulation already belongs to a scene";
    uint64_t v10 = 261;
    goto LABEL_7;
  }
  uint64_t v12 = (void *)(a1 + 16);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  *(void *)(v13 + 136) = a1;
  if (*(_DWORD *)(v13 + 128))
  {
    uint64_t v15 = v13;
    unint64_t v16 = 0;
    uint64_t v17 = *(void *)(v13 + 120);
    do
    {
      uint64_t v18 = *(void *)(v17 + 8 * v16);
      physx::NpActor::setAggregate(v18 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(v18 + 8)), (physx::NpAggregate *)a1, v14);
      uint64_t v19 = *(void *)(a1 + 72);
      uint64_t v20 = *(unsigned int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v20 + 1;
      *(void *)(v19 + 8 * v20) = v18;
      physx::Scb::Aggregate::addActor(a1 + 16, v18 + 96, v21);
      ++v16;
    }
    while (v16 < *(unsigned int *)(v15 + 128));
  }
  if (((*(_DWORD *)(a1 + 24) >> 30) - 1) <= 1)
  {
    if (*v12) {
      physx::NpScene::addArticulationInternal((int32x2_t *)(*v12 - 16), a2);
    }
  }
  return 1;
}

uint64_t physx::NpAggregate::removeArticulationAndReinsert(uint64_t a1, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a1 + 64))
  {
    char v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = (void *)(a1 + 16);
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 8 * v7);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 48))(v9) == 2
        && (v11 = *(void *)(a1 + 72), uint64_t v12 = *(void *)(v11 + 8 * v7), *(void *)(v12 + 384) == a2))
      {
        unsigned int v13 = *(_DWORD *)(a1 + 64) - 1;
        *(_DWORD *)(a1 + 64) = v13;
        *(void *)(v11 + 8 * v7) = *(void *)(v11 + 8 * v13);
        uint64_t v14 = (void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(v12 + 8);
        uint64_t v15 = v12 + v14[18];
        physx::NpActor::setAggregate(v12 + *v14, 0, v10);
        physx::Scb::Aggregate::removeActor(v8, v15, a3, v16);
        char v6 = 1;
      }
      else
      {
        ++v7;
      }
    }
    while (v7 < *(unsigned int *)(a1 + 64));
  }
  else
  {
    char v6 = 0;
  }
  *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2) + 136) = 0;
  if ((v6 & 1) == 0) {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpAggregate.cpp", 310, "PxAggregate: can't remove articulation, articulation doesn't belong to aggregate", v17, v18, v19, v21);
  }
  return v6 & 1;
}

uint64_t physx::NpAggregate::removeArticulation(uint64_t a1, uint64_t a2)
{
  return physx::NpAggregate::removeArticulationAndReinsert(a1, a2, 1);
}

uint64_t physx::NpAggregate::getNbActors(physx::NpAggregate *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t physx::NpAggregate::getMaxNbActors(physx::NpAggregate *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t physx::NpAggregate::getActors(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = (*(_DWORD *)(a1 + 64) - a4) & ~((int)(*(_DWORD *)(a1 + 64) - a4) >> 31);
  if (v5 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v5;
  }
  if (result)
  {
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 72) + 8 * a4);
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpAggregate::getScene(physx::NpAggregate *this)
{
  if (((*((_DWORD *)this + 6) >> 30) - 1) > 1) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    return v1 - 16;
  }
  else {
    return 0;
  }
}

uint64_t physx::NpAggregate::getSelfCollision(physx::NpAggregate *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t physx::NpAggregate::exportExtraData(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 72))
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    uint64_t v4 = *(void *)(v3 + 72);
    uint64_t v5 = (8 * *(_DWORD *)(v3 + 64));
    char v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
    return v6(a2, v4, v5);
  }
  return result;
}

uint64_t physx::NpAggregate::requiresObjects(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 64))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(unsigned __int16 **)(*(void *)(v3 + 72) + 8 * v4);
      if (v5) {
        BOOL v6 = v5[4] == 13;
      }
      else {
        BOOL v6 = 0;
      }
      if (v6) {
        uint64_t v5 = (unsigned __int16 *)(*(uint64_t (**)(void))(*(void *)v5 + 496))(*(void *)(*(void *)(v3 + 72) + 8 * v4));
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(void *)a2 + 16))(a2, v5);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 64));
  }
  return result;
}

void *physx::NpArticulationReducedCoordinate::setArticulationFlags(void *result, char *a2, int8x8_t a3)
{
  unint64_t v4 = result;
  uint64_t v5 = (uint64_t)(result + 3);
  char v6 = *a2;
  *((unsigned char *)result + 101) = v6;
  int v7 = *((_DWORD *)result + 8) >> 30;
  if (v7 == 2)
  {
    uint64_t result = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v7 == 3)
  {
    uint64_t result = *(void **)v5;
LABEL_5:
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v5, a3);
    *((_DWORD *)v4 + 8) |= 0x80000u;
    return result;
  }
  *((unsigned char *)v4 + 88) = v6;
  uint64_t v8 = v4[6];
  if (v8)
  {
    if (*(_DWORD *)(v8 + 32)) {
      *(unsigned char *)(*(void *)(*(void *)(v8 + 24) + 16) + 159) = v6 & 1;
    }
  }
  return result;
}

void *physx::NpArticulationReducedCoordinate::setArticulationFlag(void *result, char a2, int a3, int8x8_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = (uint64_t)(result + 3);
  char v7 = *((unsigned char *)result + 101);
  char v8 = v7 | a2;
  char v9 = v7 & ~a2;
  if (a3) {
    char v9 = v8;
  }
  *((unsigned char *)result + 101) = v9;
  int v10 = *((_DWORD *)result + 8) >> 30;
  if (v10 == 2)
  {
    uint64_t result = *(void **)v6;
    if (*(unsigned char *)(*(void *)v6 + 7689)) {
      goto LABEL_7;
    }
  }
  else if (v10 == 3)
  {
    uint64_t result = *(void **)v6;
LABEL_7:
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v6, a4);
    *((_DWORD *)v5 + 8) |= 0x80000u;
    return result;
  }
  *((unsigned char *)v5 + 88) = v9;
  uint64_t v11 = v5[6];
  if (v11)
  {
    if (*(_DWORD *)(v11 + 32)) {
      *(unsigned char *)(*(void *)(*(void *)(v11 + 24) + 16) + 159) = v9 & 1;
    }
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::getArticulationFlags@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 101);
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::getDofs(physx::NpArticulationReducedCoordinate *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)v1 + 56))();
  }
  else {
    return 0;
  }
}

void *physx::NpArticulationReducedCoordinate::createCache(physx::Sc::ArticulationSim **this)
{
  uint64_t result = physx::Sc::ArticulationSim::createCache(this[6]);
  *((_DWORD *)result + 28) = *((_DWORD *)this + 44);
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::getCacheDataSize(physx::NpArticulationReducedCoordinate *this)
{
  return physx::Sc::ArticulationCore::getCacheDataSize((physx::NpArticulationReducedCoordinate *)((char *)this + 48));
}

void physx::NpArticulationReducedCoordinate::zeroCache(uint64_t a1, void **a2)
{
}

void *physx::NpArticulationReducedCoordinate::applyCache(uint64_t a1, uint64_t a2, char *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 7508))
  {
    uint64_t v17 = physx::shdfnd::Foundation::mInstance;
    return (void *)physx::shdfnd::Foundation::error(v17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationReducedCoordinate.cpp", 141, "NpArticulation::applyCache() not allowed while simulation is running.", v13, v14, v15, a9);
  }
  char v19 = *a3;
  uint64_t v20 = *(void **)(a1 + 48);
  if (v20)
  {
    LOBYTE(v49[0]) = *a3;
    physx::Sc::ArticulationSim::applyCache(v20, a2, (char *)v49);
    char v19 = *a3;
  }
  if ((v19 & 4) != 0)
  {
    uint64_t v21 = *(unsigned int *)(a1 + 152);
    if (v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 8 * v21;
      while (1)
      {
        char v24 = *(_DWORD **)(*(void *)(a1 + 144) + v22);
        uint64_t v25 = (uint64_t)(v24 + 24);
        LODWORD(v16) = v24[36];
        int v26 = v24[37];
        v49[0] = LODWORD(v16);
        v49[1] = v26;
        int v28 = v24[39];
        int v50 = v24[38];
        int v27 = v50;
        int v51 = v28;
        int v30 = v24[41];
        int v52 = v24[40];
        int v29 = v52;
        int v53 = v30;
        int v54 = v24[42];
        int v31 = v54;
        v24[80] = LODWORD(v16);
        v24[81] = v26;
        v24[82] = v27;
        v24[83] = v28;
        v24[84] = v29;
        v24[85] = v30;
        v24[86] = v31;
        int v32 = v24[26] >> 30;
        if (v32 == 2)
        {
          float v33 = *(void **)v25;
          if (!*(unsigned char *)(*(void *)v25 + 7689))
          {
LABEL_15:
            physx::Sc::BodyCore::setBody2World((uint64_t)(v24 + 32), (uint64_t)v49);
            goto LABEL_16;
          }
        }
        else
        {
          if (v32 != 3) {
            goto LABEL_15;
          }
          float v33 = *(void **)v25;
        }
        v24[95] &= ~0x200000u;
        physx::Scb::Scene::scheduleForUpdate(v33, v25, *(int8x8_t *)&v16);
        v24[95] |= 0x100000u;
LABEL_16:
        v22 += 8;
        if (v23 == v22)
        {
          char v19 = *a3;
          break;
        }
      }
    }
  }
  if ((v19 & 5) != 0)
  {
    uint64_t v34 = *(unsigned int *)(a1 + 152);
    if (v34)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 8 * v34;
      do
      {
        uint64_t v37 = *(void *)(*(void *)(a1 + 144) + v35);
        uint64_t v38 = v37 + 96;
        LODWORD(v16) = *(_DWORD *)(v37 + 208);
        int v39 = *(_DWORD *)(v37 + 212);
        int v40 = *(_DWORD *)(v37 + 216);
        int v41 = *(_DWORD *)(v37 + 224);
        int v42 = *(_DWORD *)(v37 + 228);
        int v43 = *(_DWORD *)(v37 + 232);
        *(_DWORD *)(v37 + 348) = LODWORD(v16);
        *(_DWORD *)(v37 + 352) = v39;
        *(_DWORD *)(v37 + 356) = v40;
        int v44 = *(_DWORD *)(v37 + 104) >> 30;
        if (v44 == 2)
        {
          float32x2_t v45 = *(void **)v38;
          if (*(unsigned char *)(*(void *)v38 + 7689)) {
            goto LABEL_25;
          }
        }
        else if (v44 == 3)
        {
          float32x2_t v45 = *(void **)v38;
LABEL_25:
          physx::Scb::Scene::scheduleForUpdate(v45, v37 + 96, *(int8x8_t *)&v16);
          *(_DWORD *)(v37 + 380) |= 0x400000u;
          goto LABEL_27;
        }
        *(_DWORD *)(v37 + 208) = LODWORD(v16);
        *(_DWORD *)(v37 + 212) = v39;
        *(_DWORD *)(v37 + 216) = v40;
        updateBodySim((uint64_t *)(v37 + 128));
LABEL_27:
        *(_DWORD *)(v37 + 360) = v41;
        *(_DWORD *)(v37 + 364) = v42;
        *(_DWORD *)(v37 + 368) = v43;
        int v47 = *(_DWORD *)(v37 + 104) >> 30;
        if (v47 == 2)
        {
          float32x4_t v48 = *(void **)v38;
          if (!*(unsigned char *)(*(void *)v38 + 7689))
          {
LABEL_32:
            *(_DWORD *)(v37 + 224) = v41;
            *(_DWORD *)(v37 + 228) = v42;
            *(_DWORD *)(v37 + 232) = v43;
            updateBodySim((uint64_t *)(v37 + 128));
            goto LABEL_33;
          }
        }
        else
        {
          if (v47 != 3) {
            goto LABEL_32;
          }
          float32x4_t v48 = *(void **)v38;
        }
        physx::Scb::Scene::scheduleForUpdate(v48, v37 + 96, v46);
        *(_DWORD *)(v37 + 380) |= 0x800000u;
LABEL_33:
        v35 += 8;
      }
      while (v36 != v35);
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal((void *)(a1 + 24), 0, a4, v16);
}

void *physx::PxArticulationImpl::wakeUpInternal(void *this, int a2, int a3, double a4)
{
  uint64_t v4 = (uint64_t)this;
  unsigned int v5 = *((_DWORD *)this + 2);
  LODWORD(a4) = *(_DWORD *)(*this + 8176);
  int v6 = a2 | a3;
  if (!*((unsigned char *)this + 76)) {
    int v6 = 0;
  }
  if ((a3 & (*((float *)this + 18) < *(float *)&a4)) != 0) {
    float v7 = *(float *)(*this + 8176);
  }
  else {
    float v7 = *((float *)this + 18);
  }
  if ((a3 & (*((float *)this + 18) < *(float *)&a4)) == 0 && !v6) {
    return this;
  }
  if (!*((_DWORD *)this + 32)) {
    goto LABEL_18;
  }
  unint64_t v8 = 0;
  do
  {
    char v9 = *(float **)(*(void *)(v4 + 120) + 8 * v8);
    uint64_t v10 = (uint64_t)(v9 + 24);
    int v11 = *((_DWORD *)v9 + 26) >> 30;
    if (v11 == 2)
    {
      uint64_t v12 = *(void **)v10;
      if (*(unsigned char *)(*(void *)v10 + 7689)) {
        goto LABEL_14;
      }
    }
    else if (v11 == 3)
    {
      uint64_t v12 = *(void **)v10;
LABEL_14:
      v9[94] = 0.0;
      v9[93] = v7;
      this = physx::Scb::Scene::scheduleForUpdate(v12, v10, *(int8x8_t *)&a4);
      *((_DWORD *)v9 + 95) = v9[95] & 0xF8FFFFFF | 0x5000000;
      goto LABEL_16;
    }
    v9[94] = 0.0;
    v9[93] = v7;
    this = (void *)physx::Sc::BodyCore::setWakeCounter((uint64_t)(v9 + 32), v7, 1);
LABEL_16:
    ++v8;
  }
  while (v8 < *(unsigned int *)(v4 + 128));
  unsigned int v5 = *(_DWORD *)(v4 + 8);
LABEL_18:
  *(float *)(v4 + 72) = v7;
  *(unsigned char *)(v4 + 76) = 0;
  unsigned int v13 = v5 >> 30;
  if (v13 == 2)
  {
    this = *(void **)v4;
    if (!*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_23;
    }
LABEL_22:
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, *(int8x8_t *)&a4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v4 + 8) & 0xFFFFFC7F | 0x280;
  }
  else
  {
    if (v13 == 3)
    {
      this = *(void **)v4;
      goto LABEL_22;
    }
LABEL_23:
    *(float *)(v4 + 60) = v7;
  }
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::copyInternalStateToCache(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v3 = *(uint64_t **)(result + 48);
  if (v3)
  {
    uint64_t v4 = *v3;
    char v5 = *a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v4 + 80))(v4, a2, &v5);
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::releaseCache(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48)) {
    return physx::Sc::ArticulationSim::releaseCache(a1, a2);
  }
  return a1;
}

uint64_t physx::NpArticulationReducedCoordinate::packJointData(uint64_t this, const float *a2, float *a3)
{
  uint64_t v3 = *(void **)(this + 48);
  if (v3) {
    return (*(uint64_t (**)(void, const float *, float *))(*(void *)*v3 + 88))(*v3, a2, a3);
  }
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::unpackJointData(uint64_t this, const float *a2, float *a3)
{
  uint64_t v3 = *(void **)(this + 48);
  if (v3) {
    return (*(uint64_t (**)(void, const float *, float *))(*(void *)*v3 + 96))(*v3, a2, a3);
  }
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::commonInit(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)v1 + 104))();
  }
  return this;
}

uint64_t physx::NpArticulationReducedCoordinate::computeGeneralizedGravityForce(uint64_t result, uint64_t a2)
{
  int8x8_t v2 = *(void **)(result + 48);
  if (v2) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v2 + 112))(*v2, v2[1] + 1952, a2);
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeCoriolisAndCentrifugalForce(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)v1 + 120))();
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeGeneralizedExternalForce(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)v1 + 128))();
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeJointAcceleration(uint64_t result, uint64_t a2)
{
  int8x8_t v2 = *(void **)(result + 48);
  if (v2) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v2 + 136))(*v2, v2[1] + 1952, a2);
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeJointForce(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)v1 + 144))();
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeDenseJacobian(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)v1 + 160))();
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeCoefficientMatrix(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 192))
  {
    unint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 184) + 8 * v2);
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 208))(v3);
      uint64_t result = physx::NpConstraint::updateConstants(v4);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 192));
  }
  uint64_t v5 = *(void *)(v1 + 48);
  if (v5)
  {
    int v6 = *(uint64_t (**)(void))(**(void **)v5 + 168);
    return v6();
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::computeLambda(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1 && *(void *)(a1 + 24))
  {
    if (*(_DWORD *)(a2 + 112) == *(_DWORD *)(a1 + 176))
    {
      uint64_t v12 = (void **)(a1 + 48);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 488))(&v19);
      return physx::Sc::ArticulationCore::computeLambda(v12, a2, a3, a4, &v19, a5);
    }
    uint64_t v15 = physx::shdfnd::Foundation::mInstance;
    double v16 = "PxArticulation::computeLambda : cache is invalid, articulation configuration has changed!";
    uint64_t v17 = 308;
  }
  else
  {
    uint64_t v15 = physx::shdfnd::Foundation::mInstance;
    double v16 = "PxArticulation::computeLambda : object must be in a scened!";
    uint64_t v17 = 300;
  }
  physx::shdfnd::Foundation::error(v15, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationReducedCoordinate.cpp", v17, v16, a6, a7, a8, v18);
  return 0;
}

uint64_t physx::NpArticulationReducedCoordinate::computeGeneralizedMassMatrix(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)v1 + 192))();
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::addLoopJoint(physx::NpArticulationReducedCoordinate *this, physx::PxJoint *a2)
{
  uint64_t v12 = a2;
  uint64_t v4 = (char *)this + 184;
  unsigned int v5 = *((_DWORD *)this + 48);
  unsigned int v6 = *((_DWORD *)this + 49) & 0x7FFFFFFF;
  unsigned int v7 = (2 * v5) | 1;
  if (v5 >= v6 && v6 < v7)
  {
    physx::shdfnd::Array<physx::PxJoint *,physx::shdfnd::ReflectionAllocator<physx::PxJoint *>>::recreate((uint64_t)this + 184, v7);
    unsigned int v5 = *((_DWORD *)this + 48);
    unsigned int v6 = *((_DWORD *)this + 49) & 0x7FFFFFFF;
  }
  if (v6 <= v5)
  {
    physx::shdfnd::Array<physx::PxJoint *,physx::shdfnd::ReflectionAllocator<physx::PxJoint *>>::growAndPushBack((uint64_t)v4, &v12);
  }
  else
  {
    *(void *)(*((void *)this + 23) + 8 * v5) = a2;
    *((_DWORD *)this + 48) = v5 + 1;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t result = (*(uint64_t (**)(physx::PxJoint *))(*(void *)a2 + 208))(a2);
  if (v9)
  {
    int v11 = *(physx::Sc::ConstraintSim **)(result + 136);
    return physx::Sc::ArticulationSim::addLoopConstraint(v9, v11);
  }
  return result;
}

__n128 physx::NpArticulationReducedCoordinate::removeLoopJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2)
  {
    uint64_t v3 = 0;
    while (*(void *)(*(void *)(a1 + 184) + 8 * v3) != a2)
    {
      if (v2 == ++v3) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v3 != v2)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    unsigned int v5 = v2 - 1;
    *(_DWORD *)(a1 + 192) = v5;
    *(void *)(v4 + 8 * v3) = *(void *)(v4 + 8 * v5);
  }
LABEL_9:
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 208))(a2);
  uint64_t v9 = *(unsigned int *)(v6 + 88);
  if (v9)
  {
    uint64_t v10 = 0;
    for (unint64_t i = (void *)(*(void *)(v6 + 80) + 8); *i != *(void *)(v7 + 136); i += 2)
    {
      if (v9 == ++v10) {
        return result;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (v10 != v9)
  {
    uint64_t v12 = *(void *)(v6 + 80);
    unsigned int v13 = v9 - 1;
    *(_DWORD *)(v6 + 88) = v13;
    __n128 result = *(__n128 *)(v12 + 16 * v13);
    *(__n128 *)(v12 + 16 * v10) = result;
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::getNbLoopJoints(physx::NpArticulationReducedCoordinate *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t physx::NpArticulationReducedCoordinate::getLoopJoints(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = (*(_DWORD *)(a1 + 192) - a4) & ~((int)(*(_DWORD *)(a1 + 192) - a4) >> 31);
  if (v5 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v5;
  }
  if (result)
  {
    uint64_t v7 = (uint64_t *)(*(void *)(a1 + 184) + 8 * a4);
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpArticulationReducedCoordinate::getCoefficientMatrixSize(physx::NpArticulationReducedCoordinate *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 6);
  if (!v1) {
    return 0;
  }
  int v2 = v1[22];
  return 4 * v2 * (*(unsigned int (**)(void))(**(void **)v1 + 56))();
}

uint64_t physx::NpArticulationReducedCoordinate::teleportRootLink(uint64_t a1, float *a2, int a3, double a4)
{
  return physx::NpArticulationLink::setGlobalPoseInternal(**(void **)(a1 + 144), a2, a3, a4);
}

uint64_t physx::NpArticulationLink::setGlobalPoseInternal(uint64_t a1, float *a2, int a3, double a4)
{
  int v7 = *(_DWORD *)(a1 + 380);
  if ((v7 & 0x400) != 0) {
    uint64_t v8 = (float *)(*(void *)(a1 + 112) + 224);
  }
  else {
    uint64_t v8 = (float *)(a1 + 176);
  }
  uint64_t v9 = *(void *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  uint64_t v10 = a1 + 96;
  float v11 = v8[4] + v8[4];
  float v12 = v8[5] + v8[5];
  float v13 = v8[6] + v8[6];
  float v15 = a2[2];
  float v14 = a2[3];
  float v16 = (float)(v14 * v14) + -0.5;
  float v17 = a2[1];
  float v18 = (float)((float)(v12 * v17) + (float)(*a2 * v11)) + (float)(v15 * v13);
  float v19 = (float)((float)(v14 * (float)((float)(v17 * v13) - (float)(v15 * v12))) + (float)(v11 * v16))
      + (float)(*a2 * v18);
  float v20 = (float)((float)(v14 * (float)((float)(v15 * v11) - (float)(*a2 * v13))) + (float)(v12 * v16))
      + (float)(v17 * v18);
  float v21 = (float)((float)(v14 * (float)((float)(*a2 * v12) - (float)(v17 * v11))) + (float)(v13 * v16))
      + (float)(v15 * v18);
  float v22 = a2[4] + v19;
  float v23 = a2[5] + v20;
  *(float *)&a4 = a2[6] + v21;
  float v25 = v8[2];
  float v24 = v8[3];
  float v26 = v8[1];
  float v27 = (float)((float)((float)(*a2 * v24) + (float)(v14 * *v8)) + (float)(v17 * v25)) - (float)(v26 * v15);
  float v28 = (float)((float)((float)(v17 * v24) + (float)(v14 * v26)) + (float)(v15 * *v8)) - (float)(v25 * *a2);
  float v29 = (float)((float)((float)(v15 * v24) + (float)(v14 * v25)) + (float)(*a2 * v26)) - (float)(*v8 * v17);
  float v30 = (float)((float)(v14 * v24) - (float)(*a2 * *v8)) - (float)(v17 * v26);
  *(float *)float32x4_t v59 = v27;
  *(float *)&v59[1] = v28;
  float v31 = v30 - (float)(v15 * v25);
  *(float *)&v59[2] = v29;
  *(float *)&_DWORD v59[3] = v31;
  *(float *)&_DWORD v59[4] = v22;
  *(float *)&v59[5] = v23;
  v59[6] = LODWORD(a4);
  *(float *)(a1 + 320) = v27;
  *(float *)(a1 + 324) = v28;
  *(float *)(a1 + 328) = v29;
  *(float *)(a1 + 332) = v31;
  *(float *)(a1 + 336) = v22;
  *(float *)(a1 + 340) = v23;
  *(_DWORD *)(a1 + 344) = LODWORD(a4);
  int v32 = *(_DWORD *)(a1 + 104) >> 30;
  if (v32 == 2)
  {
    float v33 = *(void **)v10;
    if (*(unsigned char *)(*(void *)v10 + 7689))
    {
LABEL_8:
      *(_DWORD *)(a1 + 380) = v7 & 0xFFDFFFFF;
      uint64_t result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(v33, v10, *(int8x8_t *)&a4);
      *(_DWORD *)(a1 + 380) |= 0x100000u;
      if (!v9) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else if (v32 == 3)
  {
    float v33 = *(void **)v10;
    goto LABEL_8;
  }
  uint64_t result = physx::Sc::BodyCore::setBody2World(a1 + 128, (uint64_t)v59);
  if (!v9) {
    goto LABEL_13;
  }
LABEL_11:
  if (a3)
  {
    uint64_t v35 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 384) + 200))(*(void *)(a1 + 384));
    physx::PxArticulationImpl::wakeUpInternal(v35, 0, 1, v36);
    goto LABEL_14;
  }
LABEL_13:
  if (!v9) {
    return result;
  }
LABEL_14:
  uint64_t v37 = (*(uint64_t (**)(void))(**(void **)(a1 + 384) + 200))(*(void *)(a1 + 384));
  uint64_t v39 = v37;
  int v40 = *(_DWORD *)(v37 + 8) >> 30;
  if (v40 == 2)
  {
    int v41 = *(void **)v37;
    if (*(unsigned char *)(*(void *)v39 + 7689)) {
      goto LABEL_18;
    }
  }
  else if (v40 == 3)
  {
    int v41 = *(void **)v37;
LABEL_18:
    uint64_t result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(v41, v39, v38);
    unsigned int v43 = *(_DWORD *)(v39 + 8) | 0x800;
    *(_DWORD *)(v39 + 8) = v43;
    goto LABEL_20;
  }
  uint64_t result = (uint64_t)physx::Sc::ArticulationCore::setGlobalPose((void **)(v39 + 24));
  unsigned int v43 = *(_DWORD *)(v39 + 8);
LABEL_20:
  unsigned int v44 = v43 >> 30;
  if (v44 != 3 && (v44 != 2 || !*(unsigned char *)(*(void *)v39 + 7689)))
  {
    uint64_t v45 = *(unsigned int *)(v39 + 128);
    if (v45 >= 2)
    {
      uint64_t v46 = *(void *)(v39 + 120);
      uint64_t v47 = v45 - 1;
      uint64_t v48 = v46 + 8;
      do
      {
        float32x4_t v49 = *(_DWORD **)v48;
        uint64_t v50 = *(void *)v48 + 96;
        v42.i32[0] = *(_DWORD *)(*(void *)v48 + 144);
        int v51 = *(_DWORD *)(*(void *)v48 + 148);
        v60[0] = v42.i32[0];
        v60[1] = v51;
        int v53 = v49[39];
        int v61 = v49[38];
        int v52 = v61;
        int v62 = v53;
        int v55 = v49[41];
        int v63 = v49[40];
        int v54 = v63;
        int v64 = v55;
        int v65 = v49[42];
        int v56 = v65;
        v49[80] = v42.i32[0];
        v49[81] = v51;
        v49[82] = v52;
        v49[83] = v53;
        v49[84] = v54;
        v49[85] = v55;
        int v57 = v49[26] >> 30;
        v49[86] = v56;
        if (v57 == 2)
        {
          float32x4_t v58 = *(void **)v50;
          if (!*(unsigned char *)(*(void *)v50 + 7689))
          {
LABEL_30:
            uint64_t result = physx::Sc::BodyCore::setBody2World((uint64_t)(v49 + 32), (uint64_t)v60);
            goto LABEL_31;
          }
        }
        else
        {
          if (v57 != 3) {
            goto LABEL_30;
          }
          float32x4_t v58 = *(void **)v50;
        }
        v49[95] &= ~0x200000u;
        uint64_t result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(v58, v50, v42);
        v49[95] |= 0x100000u;
LABEL_31:
        v48 += 8;
        --v47;
      }
      while (v47);
    }
  }
  return result;
}

double physx::NpArticulationReducedCoordinate::getLinkVelocity@<D0>(physx::NpArticulationReducedCoordinate *this@<X0>, _OWORD *a2@<X8>)
{
  int v2 = (physx::Sc::ArticulationSim *)*((void *)this + 6);
  if (v2) {
    return physx::Sc::ArticulationSim::getLinkVelocity(v2, a2);
  }
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

double physx::NpArticulationReducedCoordinate::getLinkAcceleration@<D0>(physx::NpArticulationReducedCoordinate *this@<X0>, _OWORD *a2@<X8>)
{
  int v2 = (physx::Sc::ArticulationSim *)*((void *)this + 6);
  if (v2) {
    return physx::Sc::ArticulationSim::getLinkAcceleration(v2, a2);
  }
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

void physx::NpArticulationReducedCoordinate::~NpArticulationReducedCoordinate(physx::NpArticulationReducedCoordinate *this)
{
  *(void *)this = &unk_26E72A630;
  physx::NpFactory::onArticulationRelease(physx::NpFactory::mInstance, (uint64_t)this);
  int v2 = *((_DWORD *)this + 49);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 23) != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)this = &unk_26E72B1A0;
  physx::NpFactory::onArticulationRelease(physx::NpFactory::mInstance, (uint64_t)this);
  physx::PxArticulationImpl::~PxArticulationImpl((physx::NpArticulationReducedCoordinate *)((char *)this + 24));
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpArticulationReducedCoordinate::~NpArticulationReducedCoordinate(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void *physx::NpArticulationReducedCoordinate::createArticulationJoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return physx::NpFactory::createNpArticulationJointRC(physx::NpFactory::mInstance, a2, a3, a4, a5);
}

uint64_t physx::NpArticulationReducedCoordinate::releaseArticulationJoint(uint64_t a1, pthread_mutex_t *a2)
{
  return physx::NpFactory::releaseArticulationJointRCToPool((pthread_mutex_t **)physx::NpFactory::mInstance, a2);
}

void physx::NpArticulation::~NpArticulation(physx::NpArticulation *this)
{
  *(void *)this = &unk_26E72A828;
  physx::NpFactory::onArticulationRelease(physx::NpFactory::mInstance, (uint64_t)this);
  *(void *)this = &unk_26E72B398;
  physx::NpFactory::onArticulationRelease(physx::NpFactory::mInstance, (uint64_t)this);
  physx::PxArticulationImpl::~PxArticulationImpl((physx::NpArticulation *)((char *)this + 24));
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpArticulation::~NpArticulation(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::NpArticulation::getInternalDriveIterations(physx::NpArticulation *this)
{
  if (*((unsigned char *)this + 32)) {
    uint64_t v1 = (unsigned int *)*((void *)this + 5);
  }
  else {
    uint64_t v1 = (unsigned int *)((char *)this + 56);
  }
  return *v1;
}

void *physx::NpArticulation::setInternalDriveIterations(void *this, int a2, int8x8_t a3)
{
  uint64_t v4 = this;
  uint64_t v5 = (uint64_t)(this + 3);
  unsigned int v6 = *((_DWORD *)this + 8);
  if (v6 >> 30 == 2)
  {
    this = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v4 + 14) = a2;
    return this;
  }
  if (v6 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v5;
LABEL_5:
  int v7 = (_DWORD *)v4[5];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    int v7 = v8;
    v4[5] = v8;
    this = (void *)v4[3];
  }
  *int v7 = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 8) |= 1u;
  return this;
}

uint64_t physx::NpArticulation::getExternalDriveIterations(physx::NpArticulation *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0) {
    uint64_t v1 = (unsigned int *)(*((void *)this + 5) + 4);
  }
  else {
    uint64_t v1 = (unsigned int *)((char *)this + 60);
  }
  return *v1;
}

void *physx::NpArticulation::setExternalDriveIterations(void *this, int a2, int8x8_t a3)
{
  uint64_t v4 = this;
  uint64_t v5 = (uint64_t)(this + 3);
  unsigned int v6 = *((_DWORD *)this + 8);
  if (v6 >> 30 == 2)
  {
    this = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v4 + 15) = a2;
    return this;
  }
  if (v6 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v5;
LABEL_5:
  uint64_t v7 = v4[5];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v7 = v8;
    v4[5] = v8;
    this = (void *)v4[3];
  }
  *(_DWORD *)(v7 + 4) = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 8) |= 2u;
  return this;
}

uint64_t physx::NpArticulation::getMaxProjectionIterations(physx::NpArticulation *this)
{
  if ((*((unsigned char *)this + 32) & 4) != 0) {
    uint64_t v1 = (unsigned int *)(*((void *)this + 5) + 8);
  }
  else {
    uint64_t v1 = (unsigned int *)((char *)this + 64);
  }
  return *v1;
}

void *physx::NpArticulation::setMaxProjectionIterations(void *this, int a2, int8x8_t a3)
{
  uint64_t v4 = this;
  uint64_t v5 = (uint64_t)(this + 3);
  unsigned int v6 = *((_DWORD *)this + 8);
  if (v6 >> 30 == 2)
  {
    this = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v4 + 16) = a2;
    return this;
  }
  if (v6 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v5;
LABEL_5:
  uint64_t v7 = v4[5];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v7 = v8;
    v4[5] = v8;
    this = (void *)v4[3];
  }
  *(_DWORD *)(v7 + 8) = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 8) |= 4u;
  return this;
}

float physx::NpArticulation::getSeparationTolerance(physx::NpArticulation *this)
{
  if ((*((unsigned char *)this + 32) & 8) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 5) + 12);
  }
  else {
    uint64_t v1 = (char *)this + 72;
  }
  return *(float *)v1;
}

void *physx::NpArticulation::setSeparationTolerance(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  uint64_t v3 = this;
  uint64_t v4 = (uint64_t)(this + 3);
  unsigned int v5 = *((_DWORD *)this + 8);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 18) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[5] = v7;
    this = (void *)v3[3];
  }
  *(_DWORD *)(v6 + 12) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 8) |= 8u;
  return this;
}

unsigned __int16 *physx::NpArticulation::createDriveCache(physx::NpArticulation *this, float a2, unsigned __int16 a3)
{
  double result = (unsigned __int16 *)*((void *)this + 6);
  if (result) {
    return physx::Sc::ArticulationSim::createDriveCache((physx::Sc::ArticulationSim *)result, a2, a3);
  }
  return result;
}

void physx::NpArticulation::updateDriveCache(uint64_t a1, unsigned __int16 *a2, unsigned __int16 a3, float a4)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    physx::Sc::ArticulationSim::updateDriveCache(v4, a2, a3, a4);
  }
}

uint64_t physx::NpArticulation::releaseDriveCache(uint64_t result)
{
  if (*(void *)(result + 48)) {
    return (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return result;
}

void physx::NpArticulation::applyImpulse(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 100)) {
    physx::PxArticulationImpl::wakeUp((physx::PxArticulationImpl *)(a1 + 24), a2);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    physx::Sc::ArticulationSim::applyImpulse(v6);
  }
  if (*(_DWORD *)(a1 + 152))
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 144) + 8 * v7);
      uint64_t v13 = *(void *)(v8 + 208);
      int v14 = *(_DWORD *)(v8 + 216);
      uint64_t v11 = *(void *)(v8 + 224);
      int v12 = *(_DWORD *)(v8 + 232);
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v8 + 320))(v8, &v13, 1, a5);
      uint64_t v9 = *(void *)(*(void *)(a1 + 144) + 8 * v7);
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v9 + 336))(v9, &v11, 1, v10);
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 152));
  }
}

void *physx::PxArticulationImpl::wakeUp(physx::PxArticulationImpl *this, double a2)
{
  unsigned int v3 = *((_DWORD *)this + 2);
  if ((v3 >> 30) - 1 > 1)
  {
    uint64_t v4 = 0;
  }
  else if (*(void *)this)
  {
    uint64_t v4 = *(void *)this - 16;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (*((_DWORD *)this + 32))
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *(_DWORD **)(*((void *)this + 15) + 8 * v5);
      uint64_t v7 = (uint64_t)(v6 + 24);
      LODWORD(a2) = *(_DWORD *)(v4 + 0x2000);
      int v8 = v6[26] >> 30;
      if (v8 == 2)
      {
        uint64_t v9 = *(void **)v7;
        if (!*(unsigned char *)(*(void *)v7 + 7689))
        {
LABEL_13:
          v6[94] = 0;
          v6[93] = LODWORD(a2);
          physx::Sc::BodyCore::setWakeCounter((uint64_t)(v6 + 32), *(float *)&a2, 1);
          goto LABEL_14;
        }
      }
      else
      {
        if (v8 != 3) {
          goto LABEL_13;
        }
        uint64_t v9 = *(void **)v7;
      }
      v6[94] = 0;
      v6[93] = LODWORD(a2);
      physx::Scb::Scene::scheduleForUpdate(v9, v7, *(int8x8_t *)&a2);
      v6[95] = v6[95] & 0xF8FFFFFF | 0x5000000;
LABEL_14:
      if (++v5 >= (unint64_t)*((unsigned int *)this + 32))
      {
        unsigned int v3 = *((_DWORD *)this + 2);
        break;
      }
    }
  }
  double result = *(void **)this;
  LODWORD(a2) = *(_DWORD *)(*(void *)this + 8176);
  *((_DWORD *)this + 18) = LODWORD(a2);
  *((unsigned char *)this + 76) = 0;
  unsigned int v11 = v3 >> 30;
  if (v11 == 3 || v11 == 2 && *((unsigned char *)result + 7689))
  {
    double result = physx::Scb::Scene::scheduleForUpdate(result, (uint64_t)this, *(int8x8_t *)&a2);
    *((_DWORD *)this + 2) = *((_DWORD *)this + 2) & 0xFFFFFC7F | 0x280;
  }
  else
  {
    *((_DWORD *)this + 15) = LODWORD(a2);
  }
  return result;
}

float physx::NpArticulation::computeImpulseResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    return physx::Sc::ArticulationSim::computeImpulseResponse(v7, (uint64_t *)(a2 + 128), a3, a4, a5, a6, a7);
  }
  return result;
}

void *physx::NpArticulation::createArticulationJoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return physx::NpFactory::createNpArticulationJoint(physx::NpFactory::mInstance, a2, a3, a4, a5);
}

uint64_t physx::NpArticulation::releaseArticulationJoint(uint64_t a1, pthread_mutex_t *a2)
{
  return physx::NpFactory::releaseArticulationJointToPool((pthread_mutex_t **)physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpArticulationJoint::resolveReferences(uint64_t result, uint64_t (***a2)(void, uint64_t))
{
  unsigned int v3 = (void *)result;
  if (*(void *)(result + 424))
  {
    float result = (**a2)(a2, 0x80000000);
    v3[53] = result;
  }
  if (v3[54])
  {
    float result = (**a2)(a2, 0x80000000);
    v3[54] = result;
  }
  v3[52] = v3;
  return result;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::NpArticulationJointTemplate(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = 1;
  *(void *)a1 = &unk_26E72B508;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  physx::Sc::ArticulationJointCore::ArticulationJointCore(a1 + 40, a4, a6, a2 == 15);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xF0FFFFFF | 0x8000000;
  *(void *)(a1 + 424) = a3;
  *(void *)(a1 + 432) = a5;
  *(void *)(a1 + 408) = (*(uint64_t (**)(void))(**(void **)(a3 + 384) + 200))(*(void *)(a3 + 384))
                        + 24;
  *(void *)(a1 + 416) = a1;
  return a1;
}

void physx::NpArticulationJoint::~NpArticulationJoint(physx::NpArticulationJoint *this)
{
  *(void *)this = &unk_26E72B508;
}

{
  *(void *)this = &unk_26E72B508;
  (*(void (**)(uint64_t, physx::NpArticulationJoint *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

__n128 physx::NpArticulationJoint::setTargetOrientation(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = (uint64_t)&a1[1];
  unsigned __int32 v5 = a1[1].n128_u32[2];
  if (v5 >> 30 == 2)
  {
    uint64_t v6 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    __n128 result = *a2;
    a1[20] = *a2;
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void **)v4;
LABEL_5:
  unint64_t v7 = a1[2].n128_u64[0];
  if (!v7)
  {
    physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF);
    unint64_t v7 = v8;
    a1[2].n128_u64[0] = v8;
    uint64_t v6 = (void *)a1[1].n128_u64[0];
  }
  __n128 v9 = *a2;
  *(__n128 *)(v7 + 56) = *a2;
  physx::Scb::Scene::scheduleForUpdate(v6, v4, (int8x8_t)v9.n128_u64[0]);
  a1[1].n128_u32[2] |= 4u;
  return result;
}

__n128 physx::NpArticulationJoint::getTargetOrientation@<Q0>(physx::NpArticulationJoint *this@<X0>, __n128 *a2@<X8>)
{
  if ((*((unsigned char *)this + 24) & 4) != 0) {
    __int32 v2 = (__n128 *)(*((void *)this + 4) + 56);
  }
  else {
    __int32 v2 = (__n128 *)((char *)this + 320);
  }
  __n128 result = *v2;
  *a2 = *v2;
  return result;
}

float physx::NpArticulationJoint::setTargetVelocity(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  unsigned int v5 = *(_DWORD *)(a1 + 24);
  if (v5 >> 30 == 2)
  {
    uint64_t v6 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *(void *)(a1 + 336) = *(void *)a2;
    float result = *(float *)(a2 + 8);
    *(float *)(a1 + 344) = result;
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void **)v4;
LABEL_5:
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7)
  {
    physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF);
    uint64_t v7 = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v6 = *(void **)(a1 + 16);
  }
  int8x8_t v9 = *(int8x8_t *)a2;
  *(void *)(v7 + 72) = *(void *)a2;
  v9.i32[0] = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v7 + 80) = v9.i32[0];
  physx::Scb::Scene::scheduleForUpdate(v6, v4, v9);
  *(_DWORD *)(a1 + 24) |= 8u;
  return result;
}

uint64_t physx::NpArticulationJoint::getDriveType(physx::NpArticulationJoint *this)
{
  if (*((unsigned char *)this + 26)) {
    return *(unsigned int *)(*((void *)this + 4) + 132);
  }
  else {
    return *((unsigned __int8 *)this + 378);
  }
}

void *physx::NpArticulationJoint::setDriveType(void *result, int a2, int8x8_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = (uint64_t)(result + 2);
  unsigned int v6 = *((_DWORD *)result + 6);
  if (v6 >> 30 == 2)
  {
    float result = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((unsigned char *)v4 + 378) = a2;
    return result;
  }
  if (v6 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v5;
LABEL_5:
  uint64_t v7 = v4[4];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v7 = v8;
    v4[4] = v8;
    float result = (void *)v4[2];
  }
  *(_DWORD *)(v7 + 132) = a2;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v5, a3);
  *((_DWORD *)v4 + 6) |= 0x10000u;
  return result;
}

float physx::NpArticulationJoint::getTargetVelocity@<S0>(physx::NpArticulationJoint *this@<X0>, uint64_t a2@<X8>)
{
  if ((*((unsigned char *)this + 24) & 8) != 0) {
    __int32 v2 = (float *)(*((void *)this + 4) + 72);
  }
  else {
    __int32 v2 = (float *)((char *)this + 336);
  }
  *(void *)a2 = *(void *)v2;
  float result = v2[2];
  *(float *)(a2 + 8) = result;
  return result;
}

void *physx::NpArticulationJoint::setStiffness(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 87) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 84) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x10u;
  return this;
}

float physx::NpArticulationJoint::getStiffness(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 24) & 0x10) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 84);
  }
  else {
    uint64_t v1 = (char *)this + 348;
  }
  return *(float *)v1;
}

void *physx::NpArticulationJoint::setDamping(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 88) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 88) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x20u;
  return this;
}

float physx::NpArticulationJoint::getDamping(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 24) & 0x20) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 88);
  }
  else {
    uint64_t v1 = (char *)this + 352;
  }
  return *(float *)v1;
}

void physx::NpArticulationJoint::setSwingLimitContactDistance(physx::NpArticulationJoint *this, double a2)
{
  int v2 = LODWORD(a2);
  uint64_t v4 = (char *)this + 16;
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    uint64_t v6 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)this + 91) = LODWORD(a2);
    *((float *)this + 98) = tanf(*(float *)&a2 * 0.25);
    return;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void **)v4;
LABEL_5:
  uint64_t v7 = *((void *)this + 4);
  if (!v7)
  {
    *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v7 = v8;
    *((void *)this + 4) = v8;
    uint64_t v6 = (void *)*((void *)this + 2);
  }
  *(_DWORD *)(v7 + 108) = v2;
  physx::Scb::Scene::scheduleForUpdate(v6, (uint64_t)v4, *(int8x8_t *)&a2);
  *((_DWORD *)this + 6) |= 0x400u;
}

float physx::NpArticulationJoint::getSwingLimitContactDistance(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 25) & 4) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 108);
  }
  else {
    uint64_t v1 = (char *)this + 364;
  }
  return *(float *)v1;
}

void physx::NpArticulationJoint::setTwistLimitContactDistance(physx::NpArticulationJoint *this, double a2)
{
  int v2 = LODWORD(a2);
  uint64_t v4 = (char *)this + 16;
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    uint64_t v6 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)this + 95) = LODWORD(a2);
    *((float *)this + 101) = tanf(*(float *)&a2 * 0.25);
    return;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void **)v4;
LABEL_5:
  uint64_t v7 = *((void *)this + 4);
  if (!v7)
  {
    *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v7 = v8;
    *((void *)this + 4) = v8;
    uint64_t v6 = (void *)*((void *)this + 2);
  }
  *(_DWORD *)(v7 + 124) = v2;
  physx::Scb::Scene::scheduleForUpdate(v6, (uint64_t)v4, *(int8x8_t *)&a2);
  *((_DWORD *)this + 6) |= 0x4000u;
}

float physx::NpArticulationJoint::getTwistLimitContactDistance(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 25) & 0x40) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 124);
  }
  else {
    uint64_t v1 = (char *)this + 380;
  }
  return *(float *)v1;
}

uint64_t physx::NpArticulationJoint::getJointType(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 26) & 8) != 0) {
    return *(unsigned int *)(*((void *)this + 4) + 136);
  }
  else {
    return *((unsigned __int8 *)this + 318);
  }
}

void *physx::NpArticulationJoint::setJointType(uint64_t a1, int a2, int8x8_t a3)
{
  uint64_t v5 = a1 + 16;
  unsigned int v6 = *(_DWORD *)(a1 + 24);
  if (v6 >> 30 == 2)
  {
    uint64_t v7 = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v6 >> 30 == 3)
  {
    uint64_t v7 = *(void **)v5;
LABEL_5:
    uint64_t v8 = *(void *)(a1 + 32);
    if (!v8)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v6) & 0xF).n128_u64[0];
      uint64_t v8 = v9;
      *(void *)(a1 + 32) = v9;
      uint64_t v7 = *(void **)(a1 + 16);
    }
    *(_DWORD *)(v8 + 136) = a2;
    float result = physx::Scb::Scene::scheduleForUpdate(v7, v5, a3);
    *(_DWORD *)(a1 + 24) |= 0x80000u;
    return result;
  }
  return (void *)physx::Sc::ArticulationJointCore::setJointType(a1 + 40, a2);
}

uint64_t physx::NpArticulationJoint::setMotion(uint64_t a1, unsigned int a2, int a3, int8x8_t a4)
{
  physx::Scb::ArticulationJoint::setMotion(a1 + 16, a2, a3, a4);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 432) + 496))();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 200))(v5);
  ++*(_DWORD *)(result + 152);
  return result;
}

physx::Sc::ArticulationJointSim *physx::Scb::ArticulationJoint::setMotion(uint64_t a1, unsigned int a2, int a3, int8x8_t a4)
{
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(unsigned char *)(*(void *)a1 + 7689))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if ((v7 & 0x800000) != 0)
    {
      int v12 = *(void **)a1;
      if (v8)
      {
LABEL_17:
        *(_DWORD *)(v8 + 4 * a2 + 348) = a3;
        uint64_t result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v12, a1, a4);
        *(_DWORD *)(a1 + 8) |= 0x800000u;
        return result;
      }
      a4 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)a1, *(unsigned char *)(a1 + 11) & 0xF).n128_u64[0];
      *(void *)(a1 + 16) = v8;
    }
    else
    {
      if (!v8)
      {
        a4 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)a1, HIBYTE(v7) & 0xF).n128_u64[0];
        *(void *)(a1 + 16) = v8;
      }
      for (uint64_t i = 0; i != 6; ++i)
        *(_DWORD *)(v8 + 4 * i + 348) = *(unsigned __int8 *)(a1 + 290 + i);
    }
    int v12 = *(void **)a1;
    goto LABEL_17;
  }
  uint64_t v11 = a1 + 24;
  uint64_t result = *(physx::Sc::ArticulationJointSim **)(a1 + 24);
  *(unsigned char *)(v11 + a2 + 266) = a3;
  *(unsigned char *)(v11 + 277) |= 1u;
  if (result)
  {
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  }
  return result;
}

uint64_t physx::NpArticulationJoint::getMotion(uint64_t a1, unsigned int a2)
{
  if ((*(unsigned char *)(a1 + 26) & 0x80) != 0) {
    return *(unsigned int *)(*(void *)(a1 + 32) + 4 * a2 + 348);
  }
  else {
    return *(unsigned __int8 *)(a1 + a2 + 306);
  }
}

void *physx::NpArticulationJoint::setFrictionCoefficient(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 74) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 92) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x40u;
  return this;
}

float physx::NpArticulationJoint::getFrictionCoefficient(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 24) & 0x40) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 92);
  }
  else {
    uint64_t v1 = (char *)this + 296;
  }
  return *(float *)v1;
}

void *physx::NpArticulationJoint::setInternalCompliance(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 89) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 100) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x100u;
  return this;
}

float physx::NpArticulationJoint::getInternalCompliance(physx::NpArticulationJoint *this)
{
  if (*((unsigned char *)this + 25)) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 100);
  }
  else {
    uint64_t v1 = (char *)this + 356;
  }
  return *(float *)v1;
}

void *physx::NpArticulationJoint::setExternalCompliance(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 90) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 104) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x200u;
  return this;
}

float physx::NpArticulationJoint::getExternalCompliance(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 25) & 2) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 104);
  }
  else {
    uint64_t v1 = (char *)this + 360;
  }
  return *(float *)v1;
}

void physx::NpArticulationJoint::setSwingLimit(physx::NpArticulationJoint *this, double a2, float a3)
{
  int v4 = LODWORD(a2);
  uint64_t v6 = (char *)this + 16;
  unsigned int v7 = *((_DWORD *)this + 6);
  if (v7 >> 30 == 2)
  {
    uint64_t v8 = *(void **)v6;
    if (*(unsigned char *)(*(void *)v6 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)this + 28) = LODWORD(a2);
    *((float *)this + 30) = a3;
    *((float *)this + 96) = tanf(*(float *)&a2 * 0.25);
    *((float *)this + 97) = tanf(a3 * 0.25);
    return;
  }
  if (v7 >> 30 != 3) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void **)v6;
LABEL_5:
  uint64_t v9 = *((void *)this + 4);
  if (!v9)
  {
    *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)v8, HIBYTE(v7) & 0xF).n128_u64[0];
    uint64_t v9 = v10;
    *((void *)this + 4) = v10;
    uint64_t v8 = (void *)*((void *)this + 2);
  }
  *(_DWORD *)(v9 + 140) = v4;
  *(float *)(v9 + 144) = a3;
  physx::Scb::Scene::scheduleForUpdate(v8, (uint64_t)v6, *(int8x8_t *)&a2);
  *((_DWORD *)this + 6) |= 0x20000u;
}

float physx::NpArticulationJoint::getSwingLimit(physx::NpArticulationJoint *this, float *a2, float *a3)
{
  if ((*((unsigned char *)this + 26) & 2) != 0)
  {
    uint64_t v5 = *((void *)this + 4);
    unsigned int v3 = (float *)(v5 + 140);
    int v4 = (float *)(v5 + 144);
  }
  else
  {
    unsigned int v3 = (float *)((char *)this + 112);
    int v4 = (float *)((char *)this + 120);
  }
  *a2 = *v3;
  float result = *v4;
  *a3 = *v4;
  return result;
}

void *physx::NpArticulationJoint::setTangentialStiffness(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 92) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 116) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x1000u;
  return this;
}

float physx::NpArticulationJoint::getTangentialStiffness(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 25) & 0x10) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 116);
  }
  else {
    uint64_t v1 = (char *)this + 368;
  }
  return *(float *)v1;
}

void *physx::NpArticulationJoint::setTangentialDamping(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 93) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 120) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x2000u;
  return this;
}

float physx::NpArticulationJoint::getTangentialDamping(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 25) & 0x20) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 120);
  }
  else {
    uint64_t v1 = (char *)this + 372;
  }
  return *(float *)v1;
}

void *physx::NpArticulationJoint::setSwingLimitEnabled(void *this, char a2, int8x8_t a3)
{
  uint64_t v4 = this;
  uint64_t v5 = (uint64_t)(this + 2);
  unsigned int v6 = *((_DWORD *)this + 6);
  if (v6 >> 30 == 2)
  {
    this = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((unsigned char *)v4 + 376) = a2;
    return this;
  }
  if (v6 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v5;
LABEL_5:
  uint64_t v7 = v4[4];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v7 = v8;
    v4[4] = v8;
    this = (void *)v4[2];
  }
  *(unsigned char *)(v7 + 112) = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 6) |= 0x800u;
  return this;
}

uint64_t physx::NpArticulationJoint::getSwingLimitEnabled(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 25) & 8) != 0) {
    uint64_t v1 = (unsigned __int8 *)(*((void *)this + 4) + 112);
  }
  else {
    uint64_t v1 = (unsigned __int8 *)this + 376;
  }
  return *v1;
}

void physx::NpArticulationJoint::setTwistLimit(physx::NpArticulationJoint *this, double a2, float a3)
{
  float v4 = *(float *)&a2;
  unsigned int v6 = (char *)this + 16;
  unsigned int v7 = *((_DWORD *)this + 6);
  if (v7 >> 30 == 2)
  {
    uint64_t v8 = *(void **)v6;
    if (*(unsigned char *)(*(void *)v6 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)this + 26) = LODWORD(a2);
    *((float *)this + 27) = a3;
    *((float *)this + 99) = tanf(a3 * 0.25);
    *((float *)this + 100) = tanf(v4 * 0.25);
    return;
  }
  if (v7 >> 30 != 3) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void **)v6;
LABEL_5:
  uint64_t v9 = *((void *)this + 4);
  if (!v9)
  {
    *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)v8, HIBYTE(v7) & 0xF).n128_u64[0];
    uint64_t v9 = v10;
    *((void *)this + 4) = v10;
    uint64_t v8 = (void *)*((void *)this + 2);
  }
  *(float *)(v9 + 148) = v4;
  *(float *)(v9 + 152) = a3;
  physx::Scb::Scene::scheduleForUpdate(v8, (uint64_t)v6, *(int8x8_t *)&a2);
  *((_DWORD *)this + 6) |= 0x40000u;
}

float physx::NpArticulationJoint::getTwistLimit(physx::NpArticulationJoint *this, float *a2, float *a3)
{
  if ((*((unsigned char *)this + 26) & 4) != 0)
  {
    uint64_t v5 = *((void *)this + 4);
    unsigned int v3 = (float *)(v5 + 148);
    float v4 = (float *)(v5 + 152);
  }
  else
  {
    unsigned int v3 = (float *)((char *)this + 104);
    float v4 = (float *)((char *)this + 108);
  }
  *a2 = *v3;
  float result = *v4;
  *a3 = *v4;
  return result;
}

void *physx::NpArticulationJoint::setTwistLimitEnabled(void *this, char a2, int8x8_t a3)
{
  float v4 = this;
  uint64_t v5 = (uint64_t)(this + 2);
  unsigned int v6 = *((_DWORD *)this + 6);
  if (v6 >> 30 == 2)
  {
    this = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((unsigned char *)v4 + 377) = a2;
    return this;
  }
  if (v6 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v5;
LABEL_5:
  uint64_t v7 = v4[4];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v7 = v8;
    v4[4] = v8;
    this = (void *)v4[2];
  }
  *(unsigned char *)(v7 + 128) = a2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v5, a3);
  *((_DWORD *)v4 + 6) |= 0x8000u;
  return this;
}

uint64_t physx::NpArticulationJoint::getTwistLimitEnabled(physx::NpArticulationJoint *this)
{
  if ((*((unsigned char *)this + 25) & 0x80) != 0) {
    uint64_t v1 = (unsigned __int8 *)(*((void *)this + 4) + 128);
  }
  else {
    uint64_t v1 = (unsigned __int8 *)this + 377;
  }
  return *v1;
}

uint64_t physx::NpArticulationJointReducedCoordinate::resolveReferences(uint64_t result, uint64_t (***a2)(void, uint64_t))
{
  unsigned int v3 = (void *)result;
  if (*(void *)(result + 424))
  {
    float result = (**a2)(a2, 0x80000000);
    v3[53] = result;
  }
  if (v3[54])
  {
    float result = (**a2)(a2, 0x80000000);
    v3[54] = result;
  }
  v3[52] = v3;
  return result;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::NpArticulationJointTemplate(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = 1;
  *(void *)a1 = &unk_26E72B678;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  physx::Sc::ArticulationJointCore::ArticulationJointCore(a1 + 40, a4, a6, a2 == 15);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xF0FFFFFF | 0x8000000;
  *(void *)(a1 + 424) = a3;
  *(void *)(a1 + 432) = a5;
  *(void *)(a1 + 408) = (*(uint64_t (**)(void))(**(void **)(a3 + 384) + 200))(*(void *)(a3 + 384))
                        + 24;
  *(void *)(a1 + 416) = a1;
  return a1;
}

void physx::NpArticulationJointReducedCoordinate::~NpArticulationJointReducedCoordinate(physx::NpArticulationJointReducedCoordinate *this)
{
  *(void *)this = &unk_26E72B678;
}

{
  *(void *)this = &unk_26E72B678;
  (*(void (**)(uint64_t, physx::NpArticulationJointReducedCoordinate *))(*(void *)(physx::shdfnd::Foundation::mInstance
                                                                                             + 24)
                                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void *physx::NpArticulationJointReducedCoordinate::setJointType(uint64_t a1, int a2, int8x8_t a3)
{
  uint64_t v5 = a1 + 16;
  unsigned int v6 = *(_DWORD *)(a1 + 24);
  if (v6 >> 30 == 2)
  {
    uint64_t v7 = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v6 >> 30 == 3)
  {
    uint64_t v7 = *(void **)v5;
LABEL_5:
    uint64_t v8 = *(void *)(a1 + 32);
    if (!v8)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v6) & 0xF).n128_u64[0];
      uint64_t v8 = v9;
      *(void *)(a1 + 32) = v9;
      uint64_t v7 = *(void **)(a1 + 16);
    }
    *(_DWORD *)(v8 + 136) = a2;
    float result = physx::Scb::Scene::scheduleForUpdate(v7, v5, a3);
    *(_DWORD *)(a1 + 24) |= 0x80000u;
    return result;
  }
  return (void *)physx::Sc::ArticulationJointCore::setJointType(a1 + 40, a2);
}

uint64_t physx::NpArticulationJointReducedCoordinate::getJointType(physx::NpArticulationJointReducedCoordinate *this)
{
  if ((*((unsigned char *)this + 26) & 8) != 0) {
    return *(unsigned int *)(*((void *)this + 4) + 136);
  }
  else {
    return *((unsigned __int8 *)this + 318);
  }
}

uint64_t physx::NpArticulationJointReducedCoordinate::setMotion(uint64_t a1, unsigned int a2, int a3, int8x8_t a4)
{
  physx::Scb::ArticulationJoint::setMotion(a1 + 16, a2, a3, a4);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 432) + 496))();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 200))(v5);
  ++*(_DWORD *)(result + 152);
  return result;
}

uint64_t physx::NpArticulationJointReducedCoordinate::getMotion(uint64_t a1, unsigned int a2)
{
  if ((*(unsigned char *)(a1 + 26) & 0x80) != 0) {
    return *(unsigned int *)(*(void *)(a1 + 32) + 4 * a2 + 348);
  }
  else {
    return *(unsigned __int8 *)(a1 + a2 + 306);
  }
}

void *physx::NpArticulationJointReducedCoordinate::setFrictionCoefficient(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 74) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 92) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x40u;
  return this;
}

float physx::NpArticulationJointReducedCoordinate::getFrictionCoefficient(physx::NpArticulationJointReducedCoordinate *this)
{
  if ((*((unsigned char *)this + 24) & 0x40) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 92);
  }
  else {
    uint64_t v1 = (char *)this + 296;
  }
  return *(float *)v1;
}

void *physx::NpArticulationJointReducedCoordinate::setMaxJointVelocity(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = this;
  uint64_t v4 = (uint64_t)(this + 2);
  unsigned int v5 = *((_DWORD *)this + 6);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 78) = a2.i32[0];
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  this = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[4];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[4] = v7;
    this = (void *)v3[2];
  }
  *(_DWORD *)(v6 + 96) = v2;
  this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
  *((_DWORD *)v3 + 6) |= 0x80u;
  return this;
}

float physx::NpArticulationJointReducedCoordinate::getMaxJointVelocity(physx::NpArticulationJointReducedCoordinate *this)
{
  if ((*((unsigned char *)this + 24) & 0x80) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 4) + 96);
  }
  else {
    uint64_t v1 = (char *)this + 312;
  }
  return *(float *)v1;
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointReducedCoordinate::setLimit(uint64_t a1, unsigned int a2, __n128 Stream, float a4)
{
  unsigned __int32 v5 = Stream.n128_u32[0];
  uint64_t v8 = a1 + 16;
  unsigned int v9 = *(_DWORD *)(a1 + 24);
  if (v9 >> 30 == 3 || v9 >> 30 == 2 && *(unsigned char *)(*(void *)v8 + 7689))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if ((v9 & 0x100000) != 0)
    {
      if (!v10)
      {
        Stream.n128_u64[0] = physx::Scb::Scene::getStream(*(void *)(a1 + 16), HIBYTE(v9) & 0xF).n128_u64[0];
        *(void *)(a1 + 32) = v10;
      }
    }
    else
    {
      if (!v10)
      {
        Streaunint64_t m = physx::Scb::Scene::getStream(*(void *)(a1 + 16), HIBYTE(v9) & 0xF);
        *(void *)(a1 + 32) = v10;
      }
      uint64_t v11 = 0;
      uint64_t v12 = a1 + 104;
      do
      {
        uint64_t v13 = v10 + v11;
        *(_DWORD *)(v13 + 156) = *(_DWORD *)(v12 + v11);
        Stream.n128_u32[0] = *(_DWORD *)(v12 + v11 + 4);
        *(_DWORD *)(v13 + 160) = Stream.n128_u32[0];
        v11 += 8;
      }
      while (v11 != 48);
    }
    *(_DWORD *)(v10 + 8 * a2 + 156) = v5;
    *(float *)(v10 + 8 * a2 + 160) = a4;
    uint64_t result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(*(void **)(a1 + 16), v8, (int8x8_t)Stream.n128_u64[0]);
    *(_DWORD *)(a1 + 24) |= 0x100000u;
  }
  else
  {
    uint64_t v14 = v8 + 8 * a2;
    *(_DWORD *)(v14 + 88) = Stream.n128_u32[0];
    *(float *)(v14 + 92) = a4;
    *(unsigned char *)(a1 + 317) |= 0x10u;
    uint64_t result = *(physx::Sc::ArticulationJointSim **)(a1 + 40);
    if (result)
    {
      return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
    }
  }
  return result;
}

float physx::NpArticulationJointReducedCoordinate::getLimit(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  if ((*(unsigned char *)(a1 + 26) & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(a1 + 32) + 8 * a2;
    unsigned __int32 v5 = (_DWORD *)(v7 + 156);
    uint64_t v6 = (float *)(v7 + 160);
  }
  else
  {
    uint64_t v4 = a1 + 8 * a2;
    unsigned __int32 v5 = (_DWORD *)(v4 + 104);
    uint64_t v6 = (float *)(v4 + 108);
  }
  *a3 = *v5;
  float result = *v6;
  *a4 = *(_DWORD *)v6;
  return result;
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointReducedCoordinate::setDrive(uint64_t a1, unsigned int a2, int a3, __n128 Stream, float a5, float a6)
{
  unsigned __int32 v9 = Stream.n128_u32[0];
  uint64_t v12 = a1 + 16;
  unsigned int v13 = *(_DWORD *)(a1 + 24);
  if (v13 >> 30 == 3 || v13 >> 30 == 2 && *(unsigned char *)(*(void *)v12 + 7689))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if ((v13 & 0x200000) != 0)
    {
      if (!v14)
      {
        Stream.n128_u64[0] = physx::Scb::Scene::getStream(*(void *)(a1 + 16), HIBYTE(v13) & 0xF).n128_u64[0];
        *(void *)(a1 + 32) = v14;
      }
    }
    else
    {
      if (!v14)
      {
        Streaunint64_t m = physx::Scb::Scene::getStream(*(void *)(a1 + 16), HIBYTE(v13) & 0xF);
        *(void *)(a1 + 32) = v14;
      }
      for (uint64_t i = 0; i != 96; i += 16)
      {
        float v16 = (_DWORD *)(v14 + i);
        v16[51] = *(_DWORD *)(a1 + i + 152);
        v16[52] = *(_DWORD *)(a1 + i + 156);
        Stream.n128_u32[0] = *(_DWORD *)(a1 + i + 160);
        v16[53] = Stream.n128_u32[0];
        v16[54] = *(_DWORD *)(a1 + i + 164);
      }
    }
    uint64_t v19 = v14 + 16 * a2;
    *(_DWORD *)(v19 + 204) = v9;
    *(float *)(v19 + 208) = a5;
    *(float *)(v19 + 212) = a6;
    *(_DWORD *)(v19 + 216) = a3;
    float result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(*(void **)(a1 + 16), v12, (int8x8_t)Stream.n128_u64[0]);
    *(_DWORD *)(a1 + 24) |= 0x200000u;
  }
  else
  {
    uint64_t v17 = v12 + 16 * a2;
    *(_DWORD *)(v17 + 136) = Stream.n128_u32[0];
    *(float *)(v17 + 140) = a5;
    *(float *)(v17 + 144) = a6;
    *(_DWORD *)(v17 + 148) = a3;
    *(unsigned char *)(a1 + 317) |= 0x20u;
    float result = *(physx::Sc::ArticulationJointSim **)(a1 + 40);
    if (result)
    {
      return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
    }
  }
  return result;
}

float physx::NpArticulationJointReducedCoordinate::getDrive(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  if ((*(unsigned char *)(a1 + 26) & 0x20) != 0)
  {
    uint64_t v11 = *(void *)(a1 + 32) + 16 * a2;
    uint64_t v7 = (_DWORD *)(v11 + 204);
    uint64_t v8 = (_DWORD *)(v11 + 208);
    unsigned __int32 v9 = (float *)(v11 + 212);
    uint64_t v10 = (_DWORD *)(v11 + 216);
  }
  else
  {
    uint64_t v6 = a1 + 16 * a2;
    uint64_t v7 = (_DWORD *)(v6 + 152);
    uint64_t v8 = (_DWORD *)(v6 + 156);
    unsigned __int32 v9 = (float *)(v6 + 160);
    uint64_t v10 = (_DWORD *)(v6 + 164);
  }
  *a3 = *v7;
  *a4 = *v8;
  float result = *v9;
  *a5 = *(_DWORD *)v9;
  *a6 = *v10;
  return result;
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointReducedCoordinate::setDriveTarget(uint64_t a1, unsigned int a2, __n128 Stream)
{
  unsigned __int32 v3 = Stream.n128_u32[0];
  uint64_t v6 = (uint64_t *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 24);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(unsigned char *)(*v6 + 7689))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if ((v7 & 0x400000) != 0)
    {
      uint64_t v14 = (void *)*v6;
      if (v8)
      {
LABEL_18:
        *(_DWORD *)(v8 + 4 * a2 + 300) = v3;
        float result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v14, (uint64_t)v6, (int8x8_t)Stream.n128_u64[0]);
        *(_DWORD *)(a1 + 24) |= 0x400000u;
        return result;
      }
      Stream.n128_u64[0] = physx::Scb::Scene::getStream(*v6, HIBYTE(v7) & 0xF).n128_u64[0];
      *(void *)(a1 + 32) = v9;
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 32);
      if (!v8)
      {
        Streaunint64_t m = physx::Scb::Scene::getStream(*(void *)(a1 + 16), HIBYTE(v7) & 0xF);
        uint64_t v8 = v9;
        *(void *)(a1 + 32) = v9;
        if (!v9)
        {
          Streaunint64_t m = physx::Scb::Scene::getStream(*(void *)(a1 + 16), *(unsigned char *)(a1 + 27) & 0xF);
          uint64_t v8 = 0;
          *(void *)(a1 + 32) = v9;
        }
      }
      uint64_t v10 = 0;
      uint64_t v11 = v8 + 300;
      uint64_t v12 = a1 + 248;
      do
      {
        *(_DWORD *)(v11 + v10) = *(_DWORD *)(v12 + v10);
        Stream.n128_u32[0] = *(_DWORD *)(v12 + v10 + 24);
        *(_DWORD *)(v9 + v10 + 324) = Stream.n128_u32[0];
        v10 += 4;
      }
      while (v10 != 24);
    }
    uint64_t v14 = (void *)*v6;
    uint64_t v8 = v9;
    goto LABEL_18;
  }
  *((_DWORD *)v6 + a2 + 58) = Stream.n128_u32[0];
  *(unsigned char *)(a1 + 317) |= 4u;
  float result = *(physx::Sc::ArticulationJointSim **)(a1 + 40);
  if (result)
  {
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  }
  return result;
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointReducedCoordinate::setDriveVelocity(uint64_t a1, unsigned int a2, __n128 Stream)
{
  unsigned __int32 v3 = Stream.n128_u32[0];
  uint64_t v6 = (uint64_t *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 24);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(unsigned char *)(*v6 + 7689))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if ((v7 & 0x400000) != 0)
    {
      uint64_t v14 = (void *)*v6;
      if (v8)
      {
LABEL_18:
        *(_DWORD *)(v8 + 4 * a2 + 324) = v3;
        float result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v14, (uint64_t)v6, (int8x8_t)Stream.n128_u64[0]);
        *(_DWORD *)(a1 + 24) |= 0x400000u;
        return result;
      }
      Stream.n128_u64[0] = physx::Scb::Scene::getStream(*v6, HIBYTE(v7) & 0xF).n128_u64[0];
      *(void *)(a1 + 32) = v9;
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 32);
      if (!v8)
      {
        Streaunint64_t m = physx::Scb::Scene::getStream(*(void *)(a1 + 16), HIBYTE(v7) & 0xF);
        uint64_t v8 = v9;
        *(void *)(a1 + 32) = v9;
        if (!v9)
        {
          Streaunint64_t m = physx::Scb::Scene::getStream(*(void *)(a1 + 16), *(unsigned char *)(a1 + 27) & 0xF);
          uint64_t v8 = 0;
          *(void *)(a1 + 32) = v9;
        }
      }
      uint64_t v10 = 0;
      uint64_t v11 = v8 + 300;
      uint64_t v12 = a1 + 248;
      do
      {
        *(_DWORD *)(v11 + v10) = *(_DWORD *)(v12 + v10);
        Stream.n128_u32[0] = *(_DWORD *)(v12 + v10 + 24);
        *(_DWORD *)(v9 + v10 + 324) = Stream.n128_u32[0];
        v10 += 4;
      }
      while (v10 != 24);
    }
    uint64_t v14 = (void *)*v6;
    uint64_t v8 = v9;
    goto LABEL_18;
  }
  *((_DWORD *)v6 + a2 + 64) = Stream.n128_u32[0];
  *(unsigned char *)(a1 + 317) |= 8u;
  float result = *(physx::Sc::ArticulationJointSim **)(a1 + 40);
  if (result)
  {
    return (physx::Sc::ArticulationJointSim *)physx::Sc::ArticulationJointSim::setDirty(result);
  }
  return result;
}

float physx::NpArticulationJointReducedCoordinate::getDriveTarget(uint64_t a1, unsigned int a2)
{
  if ((*(unsigned char *)(a1 + 26) & 0x40) != 0) {
    uint64_t v2 = *(void *)(a1 + 32) + 4 * a2 + 300;
  }
  else {
    uint64_t v2 = a1 + 4 * a2 + 248;
  }
  return *(float *)v2;
}

float physx::NpArticulationJointReducedCoordinate::getDriveVelocity(uint64_t a1, unsigned int a2)
{
  if ((*(unsigned char *)(a1 + 26) & 0x40) != 0) {
    uint64_t v2 = *(void *)(a1 + 32) + 4 * a2 + 324;
  }
  else {
    uint64_t v2 = a1 + 4 * a2 + 272;
  }
  return *(float *)v2;
}

uint64_t physx::NpArticulationLink::requiresObjects(uint64_t a1, uint64_t a2)
{
  uint64_t result = physx::NpRigidActorTemplate<physx::PxArticulationLink>::requiresObjects(a1, a2);
  if (*(void *)(a1 + 392))
  {
    unsigned __int32 v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 16);
    return v5(a2);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::requiresObjects(uint64_t result, uint64_t a2)
{
  if (*(_WORD *)(result + 48))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    unsigned __int32 v5 = (void *)(result + 40);
    uint64_t v6 = 8 * *(unsigned __int16 *)(result + 48);
    do
    {
      unsigned int v7 = v5;
      if (*(_WORD *)(v3 + 48) != 1) {
        unsigned int v7 = (void *)*v5;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, v7[v4 / 8]);
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t physx::NpArticulationLink::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::exportExtraData(a1 + 40, a2);
  uint64_t result = physx::NpActor::exportExtraData((uint64_t *)(a1 + 24), a2);
  if (!*(unsigned char *)(a1 + 440))
  {
    return physx::Cm::ArrayAccess<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::store(a1 + 408, a2);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::exportExtraData(a1 + 40, a2);
  return physx::NpActor::exportExtraData((uint64_t *)(a1 + 24), a2);
}

void *physx::NpArticulationLink::importExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::importExtraData(a1 + 40, a2);
  uint64_t result = physx::NpActor::importExtraData((void *)(a1 + 24), a2);
  if (!*(unsigned char *)(a1 + 440) && *(void *)(a1 + 448))
  {
    uint64_t v5 = *(_DWORD *)(a1 + 460) & 0x7FFFFFFF;
    if (*(_DWORD *)(a1 + 456) | v5)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v6 + 8 * v5;
      *(void *)(a1 + 448) = v6;
    }
  }
  return result;
}

void *physx::NpRigidActorTemplate<physx::PxArticulationLink>::importExtraData(uint64_t a1, uint64_t a2)
{
  physx::NpShapeManager::importExtraData(a1 + 40, a2);
  return physx::NpActor::importExtraData((void *)(a1 + 24), a2);
}

uint64_t physx::NpArticulationLink::resolveReferences(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  if (*(void *)(a1 + 384)) {
    *(void *)(a1 + 384) = (**a2)(a2, 0x80000000);
  }
  if (*(void *)(a1 + 392)) {
    *(void *)(a1 + 392) = (**a2)(a2, 0x80000000);
  }
  if (*(void *)(a1 + 400)) {
    *(void *)(a1 + 400) = (**a2)(a2, 0x80000000);
  }
  uint64_t result = physx::NpRigidActorTemplate<physx::PxArticulationLink>::resolveReferences(a1, a2);
  uint64_t v5 = *(unsigned int *)(a1 + 456);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *(void *)(a1 + 448);
      if (*(void *)(v8 + v6))
      {
        uint64_t result = (**a2)(a2, 0x80000000);
        *(void *)(v8 + v6) = result;
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::resolveReferences(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  unint64_t v4 = (uint64_t *)(a1 + 40);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1)
  {
    if (!*(_WORD *)(a1 + 48)) {
      goto LABEL_10;
    }
    unint64_t v4 = (uint64_t *)*v4;
  }
  do
  {
    if (*v4)
    {
      uint64_t v6 = (**a2)(a2, 0x80000000);
      *unint64_t v4 = v6;
    }
    else
    {
      uint64_t v6 = 0;
    }
    atomic_fetch_add((atomic_uint *volatile)(v6 + 32), 1u);
    if ((*(_DWORD *)(v6 + 264) & 0x80000000) != 0) {
      *(void *)(v6 + 40) = a1;
    }
    atomic_fetch_add((atomic_uint *volatile)(v6 + 264), 1u);
    ++v4;
    --v5;
  }
  while (v5);
LABEL_10:
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

uint64_t physx::NpArticulationLink::NpArticulationLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v10 = 1;
  uint64_t v7 = physx::NpRigidBodyTemplate<physx::PxArticulationLink>::NpRigidBodyTemplate(a1, 13, &v10, 2, a2);
  *(void *)uint64_t v7 = &unk_26E72AC68;
  *(void *)(v7 + 384) = a3;
  *(void *)(v7 + 392) = 0;
  *(void *)(v7 + 400) = a4;
  *(unsigned char *)(v7 + 440) = 1;
  *(void *)(v7 + 448) = v7 + 408;
  *(void *)(v7 + 456) = 0x400000000;
  *(void *)(v7 + 464) = -1;
  *(_DWORD *)(v7 + 104) = *(_DWORD *)(v7 + 104) & 0xF0FFFFFF | 0x4000000;
  if (a4)
  {
    uint64_t v11 = a1;
    uint64_t v8 = *(unsigned int *)(a4 + 456);
    if ((*(_DWORD *)(a4 + 460) & 0x7FFFFFFFu) <= v8)
    {
      physx::shdfnd::Array<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::growAndPushBack(a4 + 408, &v11);
    }
    else
    {
      *(void *)(*(void *)(a4 + 448) + 8 * v8) = a1;
      *(_DWORD *)(a4 + 456) = v8 + 1;
    }
  }
  return a1;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxArticulationLink>::NpRigidBodyTemplate(uint64_t a1, __int16 a2, __int16 *a3, int a4, uint64_t a5)
{
  __int16 v6 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v6;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0x10000;
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26E72B778;
  *(void *)(a1 + 96) = 0;
  uint64_t v7 = a1 + 96;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  physx::Sc::BodyCore::BodyCore(a1 + 128, a4, a5);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a1 + 104) & 0xF0FFFFFF | 0x3000000;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 160);
  *(void *)&long long v8 = *(void *)(a1 + 164);
  *((void *)&v8 + 1) = *(void *)(a1 + 208);
  *(_OWORD *)(v7 + 244) = v8;
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a1 + 216);
  *(void *)(a1 + 360) = *(void *)(a1 + 224);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a1 + 284);
  *(void *)(a1 + 376) = 1;
  return a1;
}

void physx::NpArticulationLink::~NpArticulationLink(physx::NpArticulationLink *this)
{
  *(void *)this = &unk_26E72AC68;
  int v2 = *((_DWORD *)this + 115);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0)
  {
    uint64_t v3 = (physx::NpArticulationLink *)*((void *)this + 56);
    if (v3 == (physx::NpArticulationLink *)((char *)this + 408))
    {
      *((unsigned char *)this + 440) = 0;
    }
    else if (v3)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)this = &unk_26E72B9D8;
  uint64_t v4 = *(void *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::clear((uint64_t)this + 40, v4);
  physx::Cm::PtrTable::clear((uint64_t)this + 56, v4);
  *(void *)this = &unk_26E72BC38;
  physx::NpFactory::onActorRelease(physx::NpFactory::mInstance, this);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpArticulationLink::~NpArticulationLink(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::NpArticulationLink::releaseInternal(physx::NpArticulationLink *this)
{
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, *((void *)this + 2), 1);
  physx::NpRigidActorTemplate<physx::PxArticulationLink>::release(this, v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 48) + 200))(*((void *)this + 48));
  uint64_t v5 = v3;
  uint64_t v6 = *(unsigned int *)(v3 + 128);
  if (v6)
  {
    uint64_t v7 = 0;
    while (*(physx::NpArticulationLink **)(*(void *)(v3 + 120) + 8 * v7) != this)
    {
      if (v6 == ++v7) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if (v7 != v6)
  {
    uint64_t v8 = *(void *)(v3 + 120);
    unsigned int v9 = v6 - 1;
    *(_DWORD *)(v3 + 128) = v9;
    *(void *)(v8 + 8 * v7) = *(void *)(v8 + 8 * v9);
  }
LABEL_9:
  uint64_t v10 = *((void *)this + 50);
  if (v10)
  {
    uint64_t v11 = *(unsigned int *)(v10 + 456);
    if (v11)
    {
      uint64_t v12 = 0;
      while (*(physx::NpArticulationLink **)(*(void *)(v10 + 448) + 8 * v12) != this)
      {
        if (v11 == ++v12) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      LODWORD(v12) = 0;
    }
    if (v12 != v11)
    {
      uint64_t v13 = *(void *)(v10 + 448);
      unsigned int v14 = v11 - 1;
      *(_DWORD *)(v10 + 456) = v14;
      *(void *)(v13 + 8 * v12) = *(void *)(v13 + 8 * v14);
    }
  }
LABEL_18:
  float v15 = (void (***)(void))*((void *)this + 49);
  if (v15) {
    (**v15)(v15);
  }
  float v16 = (char *)this + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)this + 4) + 18);
  if (((*((_DWORD *)v16 + 2) >> 30) - 1) <= 1)
  {
    if (*(void *)v16)
    {
      physx::Scb::Scene::removeActor(*(int32x2_t **)v16, (physx::NpArticulationLink *)((char *)this + 96), 1, 0, v4);
      int v17 = *(_DWORD *)(v5 + 8) >> 30;
      if (v17 != 3 && (v17 != 2 || !*(unsigned char *)(*(void *)v5 + 7689)))
      {
        uint64_t v18 = *(void *)(v5 + 24);
        if (v18)
        {
          uint64_t v19 = *(unsigned int *)(v5 + 128);
          if (v19 >= 2)
          {
            uint64_t v20 = *(void *)(v5 + 120);
            uint64_t v21 = *(unsigned int *)(v18 + 48);
            for (uint64_t i = 1; i != v19; ++i)
            {
              uint64_t v23 = *(void *)(v20 + 8 * i);
              if (v21)
              {
                uint64_t v24 = 0;
                while (*(void *)(*(void *)(v18 + 40) + 8 * v24) != *(void *)(v23 + 128))
                {
                  if (v21 == ++v24) {
                    goto LABEL_32;
                  }
                }
              }
              else
              {
LABEL_32:
                LODWORD(v24) = 0x80000000;
              }
              *(_DWORD *)(v23 + 464) = v24;
            }
          }
        }
      }
    }
  }
  return physx::Scb::Base::destroy((uint64_t)this + 96);
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::release(physx::PxRigidActor *a1, int8x8_t a2)
{
  physx::NpActor::releaseConstraints((uint64_t)a1 + 24, a1, a2);
  uint64_t v6 = (char *)a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a1 + 4) + 18);
  if (((*((_DWORD *)v6 + 2) >> 30) - 1) > 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)v6;
    if (v7) {
      uint64_t v8 = (physx::NpScene *)(v7 - 16);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 200, "PxRigidActor::release: Actor is part of a pruning structure, pruning structure is now invalid!", v3, v4, v5, v17);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  uint64_t result = physx::NpShapeManager::detachAll((physx::PxRigidActor *)((char *)a1 + 40), v8, a1);
  uint64_t v15 = *((void *)a1 + 4);
  if (v15)
  {
    float v16 = *(physx::NpAggregate **)(*(void *)(v15 + 72) + 8);
    return physx::NpAggregate::removeActorAndReinsert(v16, a1, 0, v10, v11, v12, v13, v14);
  }
  return result;
}

uint64_t physx::NpArticulationLink::release(physx::NpArticulationLink *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 48) + 200))(*((void *)this + 48));
  if (*(_DWORD *)(v10 + 128)) {
    uint64_t v14 = **(physx::NpArticulationLink ***)(v10 + 120);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 == this
    && *(void *)((char *)this + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)this + 4) + 18)))
  {
    uint64_t v15 = "PxArticulationLink::release(): root link may not be released while articulation is in a scene";
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    uint64_t v17 = 141;
    goto LABEL_9;
  }
  if (*((_DWORD *)this + 114))
  {
    uint64_t v15 = "PxArticulationLink::release(): Only leaf articulation links can be released. Release call failed";
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    uint64_t v17 = 154;
LABEL_9:
    return physx::shdfnd::Foundation::error(v16, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationLink.cpp", v17, v15, v11, v12, v13, a9);
  }
  return physx::NpArticulationLink::releaseInternal(this);
}

float physx::NpArticulationLink::getGlobalPose@<S0>(physx::NpArticulationLink *this@<X0>, float *a2@<X8>)
{
  if ((*((unsigned char *)this + 381) & 4) != 0) {
    int8x8_t v2 = (float *)(*((void *)this + 14) + 224);
  }
  else {
    int8x8_t v2 = (float *)((char *)this + 176);
  }
  float v3 = v2[4] * -2.0;
  float v4 = v2[5] * -2.0;
  float v5 = v2[6] * -2.0;
  float v7 = v2[2];
  float v6 = v2[3];
  float v8 = (float)(v6 * v6) + -0.5;
  float v9 = v2[1];
  float v10 = (float)((float)(v4 * v9) + (float)(*v2 * v3)) + (float)(v7 * v5);
  float v11 = (float)((float)(v3 * v8) - (float)((float)((float)(v9 * v5) - (float)(v7 * v4)) * v6)) + (float)(*v2 * v10);
  float v12 = (float)((float)(v4 * v8) - (float)((float)((float)(v7 * v3) - (float)(*v2 * v5)) * v6)) + (float)(v9 * v10);
  float v13 = (float)((float)(v5 * v8) - (float)((float)((float)(*v2 * v4) - (float)(v9 * v3)) * v6)) + (float)(v7 * v10);
  float v14 = v11 + v11;
  float v15 = v12 + v12;
  float v16 = v13 + v13;
  float v17 = *((float *)this + 83);
  float v18 = (float)(v17 * v17) + -0.5;
  float v19 = *((float *)this + 80);
  float v20 = *((float *)this + 81);
  float v21 = *((float *)this + 82);
  float v22 = (float)((float)(v20 * (float)(v12 + v12)) + (float)(v19 * v14)) + (float)(v21 * v16);
  float v23 = (float)((float)(v17 * (float)((float)(v20 * v16) - (float)(v21 * v15))) + (float)(v14 * v18))
      + (float)(v19 * v22);
  float v24 = (float)((float)(v17 * (float)((float)(v21 * v14) - (float)(v19 * v16))) + (float)(v15 * v18))
      + (float)(v20 * v22);
  float v25 = (float)((float)(v17 * (float)((float)(v19 * v15) - (float)(v20 * v14))) + (float)(v16 * v18))
      + (float)(v21 * v22);
  float v26 = *((float *)this + 84) + v23;
  float v27 = *((float *)this + 85) + v24;
  float v28 = *((float *)this + 86);
  float v29 = (float)((float)((float)(v6 * v20) - (float)(v17 * v9)) - (float)(v21 * *v2)) + (float)(v7 * v19);
  float v30 = (float)((float)((float)(v6 * v21) - (float)(v17 * v7)) - (float)(v19 * v9)) + (float)(*v2 * v20);
  float v31 = *v2 * v19;
  *a2 = (float)((float)((float)(v6 * v19) - (float)(v17 * *v2)) - (float)(v20 * v7)) + (float)(v9 * v21);
  a2[1] = v29;
  a2[2] = v30;
  a2[3] = (float)((float)(v31 + (float)(v17 * v6)) + (float)(v20 * v9)) + (float)(v21 * v7);
  float result = v28 + v25;
  a2[4] = v26;
  a2[5] = v27;
  a2[6] = v28 + v25;
  return result;
}

uint64_t *physx::NpArticulationLink::setLinearDamping(uint64_t *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  float v3 = this;
  uint64_t v4 = (uint64_t)(this + 12);
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v4;
LABEL_5:
    uint64_t v6 = v3[14];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v3[14] = v7;
      this = (uint64_t *)v3[12];
    }
    *(_DWORD *)(v6 + 180) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 95) |= 4u;
    return this;
  }
  uint64_t v8 = v3[38];
  if (v8 && *(unsigned char *)(v8 + 31) == 1)
  {
    *(_DWORD *)(v8 + 48) = a2.i32[0];
  }
  else
  {
    *((_DWORD *)v3 + 62) = a2.i32[0];
    return updateBodySim(v3 + 16);
  }
  return this;
}

float physx::NpArticulationLink::getLinearDamping(physx::NpArticulationLink *this)
{
  if ((*((unsigned char *)this + 380) & 4) != 0)
  {
    __int32 v2 = (char *)(*((void *)this + 14) + 180);
  }
  else
  {
    uint64_t v1 = *((void *)this + 38);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      __int32 v2 = (char *)(v1 + 48);
    }
    else {
      __int32 v2 = (char *)this + 248;
    }
  }
  return *(float *)v2;
}

uint64_t *physx::NpArticulationLink::setAngularDamping(uint64_t *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  float v3 = this;
  uint64_t v4 = (uint64_t)(this + 12);
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v4;
LABEL_5:
    uint64_t v6 = v3[14];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v3[14] = v7;
      this = (uint64_t *)v3[12];
    }
    *(_DWORD *)(v6 + 184) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 95) |= 8u;
    return this;
  }
  uint64_t v8 = v3[38];
  if (v8 && *(unsigned char *)(v8 + 31) == 1)
  {
    *(_DWORD *)(v8 + 52) = a2.i32[0];
  }
  else
  {
    *((_DWORD *)v3 + 63) = a2.i32[0];
    return updateBodySim(v3 + 16);
  }
  return this;
}

float physx::NpArticulationLink::getAngularDamping(physx::NpArticulationLink *this)
{
  if ((*((unsigned char *)this + 380) & 8) != 0)
  {
    __int32 v2 = (char *)(*((void *)this + 14) + 184);
  }
  else
  {
    uint64_t v1 = *((void *)this + 38);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      __int32 v2 = (char *)(v1 + 52);
    }
    else {
      __int32 v2 = (char *)this + 252;
    }
  }
  return *(float *)v2;
}

uint64_t physx::NpArticulationLink::getArticulation(physx::NpArticulationLink *this)
{
  return *((void *)this + 48);
}

uint64_t physx::NpArticulationLink::getInboundJoint(physx::NpArticulationLink *this)
{
  return *((void *)this + 49);
}

uint64_t physx::NpArticulationLink::getInboundJointDof(physx::NpArticulationLink *this)
{
  return *((unsigned int *)this + 117);
}

uint64_t physx::NpArticulationLink::getNbChildren(physx::NpArticulationLink *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t physx::NpArticulationLink::getChildren(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = (*(_DWORD *)(a1 + 456) - a4) & ~((int)(*(_DWORD *)(a1 + 456) - a4) >> 31);
  if (v5 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v5;
  }
  if (result)
  {
    uint64_t v7 = (uint64_t *)(*(void *)(a1 + 448) + 8 * a4);
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpArticulationLink::getLinkIndex(physx::NpArticulationLink *this)
{
  return *((unsigned int *)this + 116);
}

void *physx::NpArticulationLink::setCMassLocalPose(uint64_t a1, float *a2)
{
  float v3 = a2[1];
  float v4 = a2[2];
  float v5 = a2[3];
  float v6 = sqrtf((float)((float)((float)(v3 * v3) + (float)(*a2 * *a2)) + (float)(v4 * v4)) + (float)(v5 * v5));
  float v7 = *a2 / v6;
  float v8 = v3 / v6;
  float v9 = v4 / v6;
  float v10 = v5 / v6;
  v153[0] = v7;
  v153[1] = v3 / v6;
  v153[2] = v4 / v6;
  v153[3] = v5 / v6;
  float v12 = a2[4];
  float v11 = a2[5];
  v153[4] = v12;
  v153[5] = v11;
  float v144 = v11;
  float v141 = a2[6];
  v153[6] = v141;
  if ((*(unsigned char *)(a1 + 381) & 4) != 0) {
    float v13 = (float *)(*(void *)(a1 + 112) + 224);
  }
  else {
    float v13 = (float *)(a1 + 176);
  }
  float v14 = v13[3];
  float v147 = v13[1];
  float v149 = v13[2];
  float v16 = v141;
  float v15 = v11;
  float v17 = (float)(v13[4] - v12) + (float)(v13[4] - v12);
  float v18 = (float)(v13[5] - v11) + (float)(v13[5] - v11);
  float v19 = (float)(v13[6] - v141) + (float)(v13[6] - v141);
  float v129 = (float)(v9 * v18) - (float)(v8 * v19);
  float v132 = -(float)(v8 * v18);
  float v135 = v19;
  float v137 = v18;
  float v139 = v17;
  float v125 = (float)(v8 * v17) - (float)(v7 * v18);
  float v127 = (float)(v7 * v19) - (float)(v9 * v17);
  float v122 = -(float)(v8 * v14);
  float v123 = -(float)(v7 * v14);
  float v151 = *v13;
  float v120 = v7 * *v13;
  float v121 = -(float)(v9 * v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 152))(&v154, a1);
  float v20 = (float)(v156 * v156) + -0.5;
  float v21 = (float)((float)((float)(v15 + v15) * *((float *)&v154 + 1)) + (float)(*(float *)&v154 * (float)(v12 + v12)))
      + (float)(v155 * (float)(v16 + v16));
  float v22 = v157
      + (float)((float)((float)(v156
                              * (float)((float)(*((float *)&v154 + 1) * (float)(v16 + v16))
                                      - (float)(v155 * (float)(v15 + v15))))
                      + (float)((float)(v12 + v12) * v20))
              + (float)(*(float *)&v154 * v21));
  float v23 = v158
      + (float)((float)((float)(v156
                              * (float)((float)(v155 * (float)(v12 + v12))
                                      - (float)(*(float *)&v154 * (float)(v16 + v16))))
                      + (float)((float)(v15 + v15) * v20))
              + (float)(*((float *)&v154 + 1) * v21));
  *(float *)v24.i32 = v159
                    + (float)((float)((float)(v156
                                            * (float)((float)(*(float *)&v154 * (float)(v15 + v15))
                                                    - (float)(*((float *)&v154 + 1) * (float)(v12 + v12))))
                                    + (float)((float)(v16 + v16) * v20))
                            + (float)(v155 * v21));
  float v25 = (float)((float)((float)(v10 * *((float *)&v154 + 1)) + (float)(v156 * v8)) + (float)(v155 * v7))
      - (float)(v9 * *(float *)&v154);
  float v26 = (float)((float)((float)(v10 * v155) + (float)(v156 * v9)) + (float)(*(float *)&v154 * v8))
      - (float)(v7 * *((float *)&v154 + 1));
  float v160 = (float)((float)((float)(v10 * *(float *)&v154) + (float)(v156 * v7)) + (float)(*((float *)&v154 + 1) * v9))
       - (float)(v8 * v155);
  float v161 = v25;
  float v27 = (float)((float)((float)(v156 * v10) - (float)(*(float *)&v154 * v7)) - (float)(*((float *)&v154 + 1) * v8))
      - (float)(v155 * v9);
  float v162 = v26;
  float v163 = v27;
  float v164 = v22;
  float v165 = v23;
  float v166 = *(float *)v24.i32;
  uint64_t v28 = a1 + 96;
  *(float *)(a1 + 320) = v160;
  *(float *)(a1 + 324) = v25;
  *(float *)(a1 + 328) = v26;
  *(float *)(a1 + 332) = v27;
  *(float *)(a1 + 336) = v22;
  *(float *)(a1 + 340) = v23;
  *(_DWORD *)(a1 + 344) = v24.i32[0];
  int v29 = *(_DWORD *)(a1 + 104) >> 30;
  float v119 = v12;
  if (v29 == 3 || v29 == 2 && *(unsigned char *)(*(void *)v28 + 7689))
  {
    int v30 = *(_DWORD *)(a1 + 380);
    if ((v30 & 0x100000) == 0) {
      *(_DWORD *)(a1 + 380) = v30 | 0x200000;
    }
    physx::Scb::Scene::scheduleForUpdate(*(void **)(a1 + 96), a1 + 96, v24);
    *(_DWORD *)(a1 + 380) |= 0x100000u;
  }
  else
  {
    physx::Sc::BodyCore::setBody2World(a1 + 128, (uint64_t)&v160);
  }
  float v32 = v139;
  float v33 = (float)(v10 * v10) + -0.5;
  float v34 = v10 * v129;
  float v35 = v10 * v125;
  float v36 = v120 + (float)(v10 * v14);
  unsigned int v37 = *(_DWORD *)(a1 + 104);
  float v130 = v132 - (float)(v7 * v139);
  float v133 = v34;
  if (v37 >> 30 == 2)
  {
    int8x8_t v38 = *(void **)v28;
    if (*(unsigned char *)(*(void *)v28 + 7689)) {
      goto LABEL_15;
    }
  }
  else if (v37 >> 30 == 3)
  {
    int8x8_t v38 = *(void **)v28;
LABEL_15:
    uint64_t v39 = *(float **)(a1 + 112);
    float v126 = v123 + (float)(v10 * v151);
    float v128 = v10 * v127;
    float v124 = v122 + (float)(v10 * v147);
    if (!v39)
    {
      Streaunint64_t m = physx::Scb::Scene::getStream((uint64_t)v38, HIBYTE(v37) & 0xF);
      uint64_t v39 = v40;
      *(void *)(a1 + 112) = v40;
      int8x8_t v38 = *(void **)(a1 + 96);
    }
    v39[56] = v7;
    v39[57] = v8;
    v39[58] = v9;
    v39[59] = v10;
    v39[60] = v119;
    v39[61] = v144;
    Stream.n128_f32[0] = v141;
    v39[62] = v141;
    physx::Scb::Scene::scheduleForUpdate(v38, a1 + 96, (int8x8_t)Stream.n128_u64[0]);
    *(_DWORD *)(a1 + 380) |= 0x400u;
    float v42 = v149;
    float v41 = v151;
    float v43 = v147;
    float v45 = v135;
    float v44 = v137;
    float v46 = v130;
    float v47 = v133;
    float v49 = v126;
    float v48 = v128;
    float v51 = v121 + (float)(v10 * v149);
    float v50 = v124;
    goto LABEL_19;
  }
  float v142 = v36;
  float v145 = v10 * v125;
  float v52 = v10 * v127;
  float v53 = v123 + (float)(v10 * v151);
  float v54 = v122 + (float)(v10 * v147);
  float v51 = v121 + (float)(v10 * v149);
  physx::Sc::BodyCore::setBody2Actor(a1 + 128, v153);
  float v46 = v130;
  float v47 = v133;
  float v50 = v54;
  float v49 = v53;
  float v48 = v52;
  float v36 = v142;
  float v35 = v145;
  float v44 = v137;
  float v32 = v139;
  float v43 = v147;
  float v42 = v149;
  float v41 = v151;
  float v45 = v135;
LABEL_19:
  float v55 = v46 - (float)(v9 * v45);
  float v56 = v47 + (float)(v32 * v33);
  float v57 = v48 + (float)(v44 * v33);
  float v58 = v35 + (float)(v45 * v33);
  uint64_t v59 = *(void *)(a1 + 32);
  if (v59)
  {
    uint64_t v60 = *(void *)(v59 + 72);
    unsigned int v61 = *(_DWORD *)(v59 + 80);
  }
  else
  {
    unsigned int v61 = 0;
    uint64_t v60 = 0;
  }
  unsigned int v62 = 0;
  float v146 = v56 - (float)(v7 * v55);
  float v140 = v58 - (float)(v9 * v55);
  float v143 = v57 - (float)(v8 * v55);
  float v150 = (float)(v50 - (float)(v9 * v41)) + (float)(v42 * v7);
  float v152 = (float)(v49 - (float)(v8 * v42)) + (float)(v43 * v9);
  float v148 = (float)(v51 - (float)(v7 * v43)) + (float)(v41 * v8);
  float v63 = (float)(v36 + (float)(v8 * v43)) + (float)(v9 * v42);
LABEL_23:
  if (v62 <= v61) {
    uint64_t v64 = v61;
  }
  else {
    uint64_t v64 = v62;
  }
  int v65 = (unsigned __int8 *)(v60 + 16 * v62);
  uint64_t v66 = v64 - v62 + 1;
  while (--v66)
  {
    float32x4_t v67 = v65 + 16;
    ++v62;
    int v68 = *v65;
    v65 += 16;
    if (!v68)
    {
      uint64_t v69 = *((void *)v67 - 1);
      if (!v69) {
        break;
      }
      physx::NpConstraint::comShift(v69, a1);
      goto LABEL_23;
    }
  }
  uint64_t result = *(void **)(a1 + 392);
  if (result)
  {
    uint64_t v71 = (*(uint64_t (**)(void *))(*(void *)result + 96))(result);
    uint64_t v73 = v71;
    unsigned int v74 = *(_DWORD *)(v71 + 8);
    if ((v74 & 2) != 0) {
      float v75 = (float *)(*(void *)(v71 + 16) + 28);
    }
    else {
      float v75 = (float *)(v71 + 60);
    }
    float v76 = v75[1];
    float v77 = v75[2];
    float v78 = v75[3];
    float v79 = v75[4] + v75[4];
    float v80 = v75[5] + v75[5];
    float v81 = v75[6] + v75[6];
    float v82 = (float)(v63 * v63) + -0.5;
    float v83 = (float)((float)(v150 * v80) + (float)(v152 * v79)) + (float)(v148 * v81);
    float v84 = v146
        + (float)((float)((float)(v63 * (float)((float)(v150 * v81) - (float)(v148 * v80))) + (float)(v79 * v82))
                + (float)(v152 * v83));
    float v85 = v143
        + (float)((float)((float)(v63 * (float)((float)(v148 * v79) - (float)(v152 * v81))) + (float)(v80 * v82))
                + (float)(v150 * v83));
    float v86 = v140
        + (float)((float)((float)(v63 * (float)((float)(v152 * v80) - (float)(v150 * v79))) + (float)(v81 * v82))
                + (float)(v148 * v83));
    float v87 = (float)((float)((float)(v152 * v78) + (float)(v63 * *v75)) + (float)(v150 * v77)) - (float)(v76 * v148);
    float v88 = (float)((float)((float)(v150 * v78) + (float)(v63 * v76)) + (float)(v148 * *v75)) - (float)(v77 * v152);
    float v89 = (float)((float)((float)(v148 * v78) + (float)(v63 * v77)) + (float)(v152 * v76)) - (float)(*v75 * v150);
    *(float *)v72.i32 = (float)((float)(v63 * v78) - (float)(v152 * *v75)) - (float)(v150 * v76);
    float v160 = v87;
    float v161 = v88;
    float v90 = *(float *)v72.i32 - (float)(v148 * v77);
    float v162 = v89;
    float v163 = v90;
    float v164 = v84;
    float v165 = v85;
    float v166 = v86;
    if (v74 >> 30 == 2)
    {
      uint64_t v91 = *(void **)v71;
      if (*(unsigned char *)(*(void *)v73 + 7689)) {
        goto LABEL_39;
      }
    }
    else if (v74 >> 30 == 3)
    {
      uint64_t v91 = *(void **)v71;
LABEL_39:
      uint64_t v92 = *(float **)(v73 + 16);
      if (!v92)
      {
        int8x8_t v72 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v91, HIBYTE(v74) & 0xF).n128_u64[0];
        uint64_t v92 = v93;
        *(void *)(v73 + 16) = v93;
        uint64_t v91 = *(void **)v73;
      }
      v92[7] = v87;
      v92[8] = v88;
      v92[9] = v89;
      v92[10] = v90;
      v92[11] = v84;
      v92[12] = v85;
      v92[13] = v86;
      uint64_t result = physx::Scb::Scene::scheduleForUpdate(v91, v73, v72);
      *(_DWORD *)(v73 + 8) |= 2u;
      goto LABEL_43;
    }
    uint64_t result = physx::Sc::ArticulationJointCore::setChildPose(v73 + 24, (uint64_t)&v160);
  }
LABEL_43:
  if (*(_DWORD *)(a1 + 456))
  {
    unint64_t v94 = 0;
    float v136 = -v148;
    float v138 = (float)(v63 * v63) + -0.5;
    float v131 = -v150;
    float v134 = -v152;
    do
    {
      uint64_t v95 = *(void *)(*(void *)(a1 + 448) + 8 * v94);
      uint64_t v96 = (*(uint64_t (**)(uint64_t))(*(void *)v95 + 504))(v95);
      uint64_t v98 = v96;
      unsigned int v99 = *(_DWORD *)(v96 + 24);
      if (v99) {
        float32x4_t v100 = *(float **)(v96 + 32);
      }
      else {
        float32x4_t v100 = (float *)(v96 + 48);
      }
      uint64_t v101 = v96 + 16;
      float v102 = v100[1];
      float v103 = v100[2];
      float v104 = v100[3];
      float v105 = v100[4] + v100[4];
      float v106 = v100[5] + v100[5];
      float v107 = v100[6] + v100[6];
      float v108 = (float)((float)(v150 * v106) + (float)(v152 * v105)) + (float)(v148 * v107);
      float v109 = v146
           + (float)((float)((float)(v63 * (float)((float)(v106 * v136) + (float)(v150 * v107))) + (float)(v105 * v138))
                   + (float)(v152 * v108));
      float v110 = v143
           + (float)((float)((float)(v63 * (float)((float)(v107 * v134) + (float)(v148 * v105))) + (float)(v106 * v138))
                   + (float)(v150 * v108));
      float v111 = v140
           + (float)((float)((float)(v63 * (float)((float)(v105 * v131) + (float)(v152 * v106))) + (float)(v107 * v138))
                   + (float)(v148 * v108));
      float v112 = (float)((float)((float)(v152 * v104) + (float)(v63 * *v100)) + (float)(v150 * v103)) - (float)(v102 * v148);
      float v113 = (float)((float)((float)(v150 * v104) + (float)(v63 * v102)) + (float)(v148 * *v100)) - (float)(v103 * v152);
      float v114 = (float)((float)((float)(v148 * v104) + (float)(v63 * v103)) + (float)(v152 * v102)) - (float)(*v100 * v150);
      *(float *)v97.i32 = (float)((float)(*v100 * v134) + (float)(v63 * v104)) + (float)(v131 * v102);
      float v160 = v112;
      float v161 = v113;
      float v115 = *(float *)v97.i32 + (float)(v136 * v103);
      float v162 = v114;
      float v163 = v115;
      float v164 = v109;
      float v165 = v110;
      float v166 = v111;
      if (v99 >> 30 == 2)
      {
        float32x4_t v116 = *(void **)v101;
        if (*(unsigned char *)(*(void *)v101 + 7689)) {
          goto LABEL_52;
        }
      }
      else if (v99 >> 30 == 3)
      {
        float32x4_t v116 = *(void **)v101;
LABEL_52:
        float32x4_t v117 = *(float **)(v98 + 32);
        if (!v117)
        {
          int8x8_t v97 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v116, HIBYTE(v99) & 0xF).n128_u64[0];
          float32x4_t v117 = v118;
          *(void *)(v98 + 32) = v118;
          float32x4_t v116 = *(void **)(v98 + 16);
        }
        *float32x4_t v117 = v112;
        v117[1] = v113;
        v117[2] = v114;
        v117[3] = v115;
        v117[4] = v109;
        v117[5] = v110;
        v117[6] = v111;
        uint64_t result = physx::Scb::Scene::scheduleForUpdate(v116, v98 + 16, v97);
        *(_DWORD *)(v98 + 24) |= 1u;
        goto LABEL_56;
      }
      uint64_t result = physx::Sc::ArticulationJointCore::setParentPose(v98 + 40, (uint64_t)&v160);
LABEL_56:
      ++v94;
    }
    while (v94 < *(unsigned int *)(a1 + 456));
  }
  return result;
}

void *physx::NpArticulationLink::addForce(uint64_t a1, float32x2_t *a2, int a3, int a4, double a5)
{
  float v8 = physx::NpRigidBodyTemplate<physx::PxArticulationLink>::addSpatialForce(a1, a2, 0, a3, a5);
  float v9 = (void *)(*(uint64_t (**)(void, float))(**(void **)(a1 + 384) + 200))(*(void *)(a1 + 384), v8);
  LODWORD(v10) = a2->i32[0];
  BOOL v11 = 1;
  if (a2->f32[0] == 0.0)
  {
    LODWORD(v10) = a2->i32[1];
    if (*(float *)&v10 == 0.0)
    {
      LODWORD(v10) = a2[1].i32[0];
      BOOL v11 = *(float *)&v10 != 0.0;
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal(v9, v11, a4, v10);
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::addSpatialForce(uint64_t a1, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  switch(a4)
  {
    case 0:
      if (a2)
      {
        if (*(unsigned char *)(a1 + 380))
        {
          float v6 = (float *)(*(void *)(a1 + 112) + 164);
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 304);
          if (v5 && *(unsigned char *)(v5 + 31) == 1) {
            float v6 = (float *)(v5 + 44);
          }
          else {
            float v6 = (float *)(a1 + 268);
          }
        }
        float v11 = *v6 * a2[1].f32[0];
        a5 = COERCE_DOUBLE(vmul_n_f32(*a2, *v6));
        double v82 = a5;
        float v83 = v11;
        a2 = (float32x2_t *)&v82;
      }
      if (a3)
      {
        if ((*(unsigned char *)(a1 + 380) & 2) != 0)
        {
          float v13 = (float *)(*(void *)(a1 + 112) + 168);
        }
        else
        {
          uint64_t v12 = *(void *)(a1 + 304);
          if (v12 && *(unsigned char *)(v12 + 31) == 1) {
            float v13 = (float *)(v12 + 32);
          }
          else {
            float v13 = (float *)(a1 + 256);
          }
        }
        float v17 = v13[1];
        float v18 = v13[2];
        float32x4_t v19 = *(float32x4_t *)(a1 + 320);
        float32x2_t v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
        float32x2_t v21 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
        float32x2_t v22 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
        _Q7 = vaddq_f32(v19, v19);
        *(int32x2_t *)v19.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)_Q7.f32), 0);
        float32x2_t v24 = vmul_lane_f32(v20, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v25 = vmul_laneq_f32(v21, _Q7, 2);
        float32x2_t v26 = vmul_n_f32(v20, _Q7.f32[0]);
        float32x2_t v27 = vmul_n_f32(v21, _Q7.f32[0]);
        float32x2_t v28 = vmul_n_f32(v22, _Q7.f32[0]);
        float32x2_t v29 = vmul_lane_f32(v21, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v30 = vmul_lane_f32(v22, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v31 = vmul_laneq_f32(v22, _Q7, 2);
        __asm { FMOV            V7.2S, #1.0 }
        *(float32x2_t *)v19.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v19.f32);
        *(float32x2_t *)_Q7.f32 = vadd_f32(v26, v31);
        float v36 = vsub_f32(v27, v30).f32[0];
        int8x8_t v37 = (int8x8_t)vsub_f32(v26, v31);
        float32x2_t v38 = vsub_f32(*(float32x2_t *)v19.f32, v25);
        float v39 = vadd_f32(v29, v28).f32[0];
        int8x8_t v40 = (int8x8_t)vadd_f32(v27, v30);
        int8x8_t v41 = (int8x8_t)vsub_f32(v29, v28);
        v19.f32[0] = vsub_f32(*(float32x2_t *)v19.f32, v24).f32[0];
        v28.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v17 * v39) * v39, *v13 * v36, v36), v18 * v19.f32[0], v19.f32[0]);
        v25.i32[0] = a3[1].i32[0];
        float32x2_t v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
        v42.f32[0] = (float)(1.0 - v24.f32[1]) - v25.f32[1];
        float32x2_t v43 = vmul_n_f32(v42, *v13);
        float32x2_t v44 = (float32x2_t)vext_s8(v37, (int8x8_t)v38, 4uLL);
        float32x2_t v45 = vmul_n_f32(v44, v17);
        float32x2_t v46 = (float32x2_t)vext_s8(v40, v41, 4uLL);
        float32x2_t v47 = vmul_n_f32(v46, v18);
        float32x2_t v48 = vmla_f32(vmla_f32(vmul_f32(v44, v45), v42, v43), v46, v47);
        v38.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v45, v38).f32[0], _Q7.f32[0], v43.f32[0]), *(float *)v41.i32, v47.f32[0]);
        float32x2_t v49 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v45, v39), v43, v36), v47, v19.f32[0]);
        a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v49, v25.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v38.f32[0])), vmul_f32(*a3, v48))));
        v49.f32[0] = (float)(v25.f32[0] * v28.f32[0]) + vaddv_f32(vmul_f32(*a3, v49));
        double v80 = a5;
        float v81 = v49.f32[0];
        a3 = (float32x2_t *)&v80;
      }
      *(float *)&a5 = physx::Scb::Body::addSpatialAcceleration((void **)(a1 + 96), a2, a3, a5);
      break;
    case 1:
      if (a2)
      {
        if (*(unsigned char *)(a1 + 380))
        {
          float v8 = (float *)(*(void *)(a1 + 112) + 164);
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 304);
          if (v7 && *(unsigned char *)(v7 + 31) == 1) {
            float v8 = (float *)(v7 + 44);
          }
          else {
            float v8 = (float *)(a1 + 268);
          }
        }
        float v14 = *v8 * a2[1].f32[0];
        a5 = COERCE_DOUBLE(vmul_n_f32(*a2, *v8));
        double v82 = a5;
        float v83 = v14;
        a2 = (float32x2_t *)&v82;
      }
      if (a3)
      {
        if ((*(unsigned char *)(a1 + 380) & 2) != 0)
        {
          float v16 = (float *)(*(void *)(a1 + 112) + 168);
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 304);
          if (v15 && *(unsigned char *)(v15 + 31) == 1) {
            float v16 = (float *)(v15 + 32);
          }
          else {
            float v16 = (float *)(a1 + 256);
          }
        }
        float v50 = v16[1];
        float v51 = v16[2];
        float32x4_t v52 = *(float32x4_t *)(a1 + 320);
        float32x2_t v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1);
        float32x2_t v54 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
        float32x2_t v55 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 3);
        _Q7 = vaddq_f32(v52, v52);
        *(int32x2_t *)v52.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)_Q7.f32), 0);
        float32x2_t v57 = vmul_lane_f32(v53, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v58 = vmul_laneq_f32(v54, _Q7, 2);
        float32x2_t v59 = vmul_n_f32(v53, _Q7.f32[0]);
        float32x2_t v60 = vmul_n_f32(v54, _Q7.f32[0]);
        float32x2_t v61 = vmul_n_f32(v55, _Q7.f32[0]);
        float32x2_t v62 = vmul_lane_f32(v54, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v63 = vmul_lane_f32(v55, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v64 = vmul_laneq_f32(v55, _Q7, 2);
        __asm { FMOV            V7.2S, #1.0 }
        *(float32x2_t *)v52.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v52.f32);
        *(float32x2_t *)_Q7.f32 = vadd_f32(v59, v64);
        float v65 = vsub_f32(v60, v63).f32[0];
        int8x8_t v66 = (int8x8_t)vsub_f32(v59, v64);
        float32x2_t v67 = vsub_f32(*(float32x2_t *)v52.f32, v58);
        float v68 = vadd_f32(v62, v61).f32[0];
        int8x8_t v69 = (int8x8_t)vadd_f32(v60, v63);
        int8x8_t v70 = (int8x8_t)vsub_f32(v62, v61);
        v52.f32[0] = vsub_f32(*(float32x2_t *)v52.f32, v57).f32[0];
        v61.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v50 * v68) * v68, *v16 * v65, v65), v51 * v52.f32[0], v52.f32[0]);
        v58.i32[0] = a3[1].i32[0];
        float32x2_t v71 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
        v71.f32[0] = (float)(1.0 - v57.f32[1]) - v58.f32[1];
        float32x2_t v72 = vmul_n_f32(v71, *v16);
        float32x2_t v73 = (float32x2_t)vext_s8(v66, (int8x8_t)v67, 4uLL);
        float32x2_t v74 = vmul_n_f32(v73, v50);
        float32x2_t v75 = (float32x2_t)vext_s8(v69, v70, 4uLL);
        float32x2_t v76 = vmul_n_f32(v75, v51);
        float32x2_t v77 = vmla_f32(vmla_f32(vmul_f32(v73, v74), v71, v72), v75, v76);
        v67.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v74, v67).f32[0], _Q7.f32[0], v72.f32[0]), *(float *)v70.i32, v76.f32[0]);
        float32x2_t v78 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v74, v68), v72, v65), v76, v52.f32[0]);
        a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v78, v58.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v67.f32[0])), vmul_f32(*a3, v77))));
        v78.f32[0] = (float)(v58.f32[0] * v61.f32[0]) + vaddv_f32(vmul_f32(*a3, v78));
        double v80 = a5;
        float v81 = v78.f32[0];
        a3 = (float32x2_t *)&v80;
      }
      *(float *)&a5 = physx::Scb::Body::addSpatialVelocity((void **)(a1 + 96), a2, a3, a5);
      break;
    case 2:
      float v9 = (void **)(a1 + 96);
      *(float *)&a5 = physx::Scb::Body::addSpatialVelocity(v9, a2, a3, a5);
      break;
    case 3:
      double v10 = (void **)(a1 + 96);
      *(float *)&a5 = physx::Scb::Body::addSpatialAcceleration(v10, a2, a3, a5);
      break;
    default:
      return *(float *)&a5;
  }
  return *(float *)&a5;
}

void *physx::NpArticulationLink::addTorque(uint64_t a1, float32x2_t *a2, int a3, int a4, double a5)
{
  float v8 = physx::NpRigidBodyTemplate<physx::PxArticulationLink>::addSpatialForce(a1, 0, a2, a3, a5);
  float v9 = (void *)(*(uint64_t (**)(void, float))(**(void **)(a1 + 384) + 200))(*(void *)(a1 + 384), v8);
  LODWORD(v10) = a2->i32[0];
  BOOL v11 = 1;
  if (a2->f32[0] == 0.0)
  {
    LODWORD(v10) = a2->i32[1];
    if (*(float *)&v10 == 0.0)
    {
      LODWORD(v10) = a2[1].i32[0];
      BOOL v11 = *(float *)&v10 != 0.0;
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal(v9, v11, a4, v10);
}

void *physx::NpArticulationLink::setForceAndTorque(uint64_t a1, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  uint64_t v5 = a3;
  uint64_t v7 = a2;
  switch(a4)
  {
    case 0:
      int v8 = *(_DWORD *)(a1 + 380);
      if (v8)
      {
        double v10 = (float *)(*(void *)(a1 + 112) + 164);
      }
      else
      {
        uint64_t v9 = *(void *)(a1 + 304);
        if (v9 && *(unsigned char *)(v9 + 31) == 1) {
          double v10 = (float *)(v9 + 44);
        }
        else {
          double v10 = (float *)(a1 + 268);
        }
      }
      float v18 = *v10 * a2->f32[0];
      float v19 = *v10 * a2->f32[1];
      float v20 = *v10 * a2[1].f32[0];
      v108.f32[0] = v18;
      v108.f32[1] = v19;
      float v109 = v20;
      if ((v8 & 2) != 0)
      {
        float32x2_t v22 = (float *)(*(void *)(a1 + 112) + 168);
      }
      else
      {
        uint64_t v21 = *(void *)(a1 + 304);
        if (v21 && *(unsigned char *)(v21 + 31) == 1) {
          float32x2_t v22 = (float *)(v21 + 32);
        }
        else {
          float32x2_t v22 = (float *)(a1 + 256);
        }
      }
      float v34 = v22[1];
      float v35 = v22[2];
      uint64_t v36 = a1 + 96;
      float32x4_t v37 = *(float32x4_t *)(a1 + 320);
      float32x2_t v38 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 1);
      float32x2_t v39 = (float32x2_t)vdup_laneq_s32((int32x4_t)v37, 2);
      float32x2_t v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v37, 3);
      _Q7 = vaddq_f32(v37, v37);
      *(int32x2_t *)v37.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)_Q7.f32), 0);
      float32x2_t v42 = vmul_lane_f32(v38, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v43 = vmul_laneq_f32(v39, _Q7, 2);
      float32x2_t v44 = vmul_n_f32(v38, _Q7.f32[0]);
      float32x2_t v45 = vmul_n_f32(v39, _Q7.f32[0]);
      float32x2_t v46 = vmul_n_f32(v40, _Q7.f32[0]);
      float32x2_t v47 = vmul_lane_f32(v39, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v48 = vmul_lane_f32(v40, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v49 = vmul_laneq_f32(v40, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      *(float32x2_t *)v37.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v37.f32);
      *(float32x2_t *)_Q7.f32 = vadd_f32(v44, v49);
      float v54 = vsub_f32(v45, v48).f32[0];
      int8x8_t v55 = (int8x8_t)vsub_f32(v44, v49);
      float32x2_t v56 = vsub_f32(*(float32x2_t *)v37.f32, v43);
      float v57 = vadd_f32(v47, v46).f32[0];
      int8x8_t v58 = (int8x8_t)vadd_f32(v45, v48);
      int8x8_t v59 = (int8x8_t)vsub_f32(v47, v46);
      v37.f32[0] = vsub_f32(*(float32x2_t *)v37.f32, v42).f32[0];
      v43.i32[0] = a3[1].i32[0];
      float32x2_t v60 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
      v60.f32[0] = (float)(1.0 - v42.f32[1]) - v43.f32[1];
      v42.f32[0] = v43.f32[0]
                 * vmlas_n_f32(vmlas_n_f32((float)(v34 * v57) * v57, *v22 * v54, v54), v35 * v37.f32[0], v37.f32[0]);
      float32x2_t v61 = vmul_n_f32(v60, *v22);
      float32x2_t v62 = (float32x2_t)vext_s8(v55, (int8x8_t)v56, 4uLL);
      float32x2_t v63 = vmul_n_f32(v62, v34);
      float32x2_t v64 = (float32x2_t)vext_s8(v58, v59, 4uLL);
      float32x2_t v65 = vmul_n_f32(v64, v35);
      float32x2_t v66 = vmla_f32(vmla_f32(vmul_f32(v62, v63), v60, v61), v64, v65);
      v56.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v63, v56).f32[0], _Q7.f32[0], v61.f32[0]), *(float *)v59.i32, v65.f32[0]);
      float32x2_t v67 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v63, v57), v61, v54), v65, v37.f32[0]);
      float32x2_t v68 = vadd_f32(vmul_n_f32(v67, v43.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v56.f32[0])), vmul_f32(*a3, v66)));
      float v69 = v42.f32[0] + vaddv_f32(vmul_f32(*a3, v67));
      double v106 = *(double *)&v68;
      float v107 = v69;
      unsigned int v70 = *(_DWORD *)(a1 + 104);
      if (v70 >> 30 != 2)
      {
        if (v70 >> 30 == 3)
        {
          float v17 = *(void **)v36;
          goto LABEL_42;
        }
        float v17 = *(void **)v36;
LABEL_47:
        uint64_t v30 = v17[548];
        float v32 = &v108;
        float v33 = &v106;
        float32x2_t v31 = (physx::Sc::BodySim **)(a1 + 128);
        goto LABEL_48;
      }
      float v17 = *(void **)v36;
      if (!*(unsigned char *)(*(void *)v36 + 7689)) {
        goto LABEL_47;
      }
LABEL_42:
      float32x4_t v100 = *(float32x2_t **)(a1 + 112);
      if (!v100)
      {
        physx::Scb::Scene::getStream((uint64_t)v17, HIBYTE(v70) & 0xF);
        float32x4_t v100 = v101;
        *(void *)(a1 + 112) = v101;
        float v17 = *(void **)(a1 + 96);
      }
      v100[37].f32[1] = v18;
      v100[38].f32[0] = v19;
      v100[38].f32[1] = v20;
      int8x8_t v28 = (int8x8_t)vadd_f32(v68, v100[39]);
      v100[39] = (float32x2_t)v28;
      *(float *)v28.i32 = v69 + v100[40].f32[0];
      v100[40].i32[0] = v28.i32[0];
      uint64_t v29 = a1 + 96;
LABEL_45:
      physx::Scb::Scene::scheduleForUpdate(v17, v29, v28);
      *(_DWORD *)(a1 + 380) |= 0x30000u;
LABEL_49:
      float v102 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 384) + 200))(*(void *)(a1 + 384));
      LODWORD(v103) = v5->i32[0];
      BOOL v104 = 1;
      if (v5->f32[0] == 0.0)
      {
        LODWORD(v103) = v5->i32[1];
        if (*(float *)&v103 == 0.0)
        {
          LODWORD(v103) = v5[1].i32[0];
          BOOL v104 = *(float *)&v103 != 0.0;
        }
      }
      return physx::PxArticulationImpl::wakeUpInternal(v102, v104, 1, v103);
    case 1:
      int v11 = *(_DWORD *)(a1 + 380);
      if (v11)
      {
        float v13 = (float *)(*(void *)(a1 + 112) + 164);
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 304);
        if (v12 && *(unsigned char *)(v12 + 31) == 1) {
          float v13 = (float *)(v12 + 44);
        }
        else {
          float v13 = (float *)(a1 + 268);
        }
      }
      float v23 = *v13 * a2[1].f32[0];
      float32x2_t v108 = vmul_n_f32(*a2, *v13);
      float v109 = v23;
      if ((v11 & 2) != 0)
      {
        float32x2_t v25 = (float *)(*(void *)(a1 + 112) + 168);
      }
      else
      {
        uint64_t v24 = *(void *)(a1 + 304);
        if (v24 && *(unsigned char *)(v24 + 31) == 1) {
          float32x2_t v25 = (float *)(v24 + 32);
        }
        else {
          float32x2_t v25 = (float *)(a1 + 256);
        }
      }
      float v71 = v25[1];
      float v72 = v25[2];
      float32x4_t v73 = *(float32x4_t *)(a1 + 320);
      float32x2_t v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.f32, 1);
      float32x2_t v75 = (float32x2_t)vdup_laneq_s32((int32x4_t)v73, 2);
      float32x2_t v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v73, 3);
      float v14 = (void **)(a1 + 96);
      _Q7 = vaddq_f32(v73, v73);
      *(int32x2_t *)v73.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)_Q7.f32), 0);
      float32x2_t v78 = vmul_lane_f32(v74, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v79 = vmul_laneq_f32(v75, _Q7, 2);
      float32x2_t v80 = vmul_n_f32(v74, _Q7.f32[0]);
      float32x2_t v81 = vmul_n_f32(v75, _Q7.f32[0]);
      float32x2_t v82 = vmul_n_f32(v76, _Q7.f32[0]);
      float32x2_t v83 = vmul_lane_f32(v75, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v84 = vmul_lane_f32(v76, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v85 = vmul_laneq_f32(v76, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      *(float32x2_t *)v73.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v73.f32);
      *(float32x2_t *)_Q7.f32 = vadd_f32(v80, v85);
      float v86 = vsub_f32(v81, v84).f32[0];
      int8x8_t v87 = (int8x8_t)vsub_f32(v80, v85);
      float32x2_t v88 = vsub_f32(*(float32x2_t *)v73.f32, v79);
      float v89 = vadd_f32(v83, v82).f32[0];
      int8x8_t v90 = (int8x8_t)vadd_f32(v81, v84);
      int8x8_t v91 = (int8x8_t)vsub_f32(v83, v82);
      v73.f32[0] = vsub_f32(*(float32x2_t *)v73.f32, v78).f32[0];
      v82.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v71 * v89) * v89, *v25 * v86, v86), v72 * v73.f32[0], v73.f32[0]);
      v79.i32[0] = a3[1].i32[0];
      float32x2_t v92 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
      v92.f32[0] = (float)(1.0 - v78.f32[1]) - v79.f32[1];
      float32x2_t v93 = vmul_n_f32(v92, *v25);
      float32x2_t v94 = (float32x2_t)vext_s8(v87, (int8x8_t)v88, 4uLL);
      float32x2_t v95 = vmul_n_f32(v94, v71);
      float32x2_t v96 = (float32x2_t)vext_s8(v90, v91, 4uLL);
      float32x2_t v97 = vmul_n_f32(v96, v72);
      float32x2_t v98 = vmla_f32(vmla_f32(vmul_f32(v94, v95), v92, v93), v96, v97);
      v88.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v95, v88).f32[0], _Q7.f32[0], v93.f32[0]), *(float *)v91.i32, v97.f32[0]);
      float32x2_t v99 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v95, v89), v93, v86), v97, v73.f32[0]);
      a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v99, v79.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v88.f32[0])), vmul_f32(*a3, v98))));
      v99.f32[0] = (float)(v79.f32[0] * v82.f32[0]) + vaddv_f32(vmul_f32(*a3, v99));
      double v106 = a5;
      float v107 = v99.f32[0];
      a2 = &v108;
      a3 = (float32x2_t *)&v106;
      goto LABEL_40;
    case 2:
      float v14 = (void **)(a1 + 96);
LABEL_40:
      physx::Scb::Body::addSpatialVelocity(v14, a2, a3, a5);
      goto LABEL_49;
    case 3:
      uint64_t v15 = a1 + 96;
      unsigned int v16 = *(_DWORD *)(a1 + 104);
      if (v16 >> 30 == 2)
      {
        float v17 = *(void **)v15;
        if (*(unsigned char *)(*(void *)v15 + 7689)) {
          goto LABEL_29;
        }
      }
      else
      {
        if (v16 >> 30 == 3)
        {
          float v17 = *(void **)v15;
LABEL_29:
          uint64_t v26 = *(void *)(a1 + 112);
          if (!v26)
          {
            physx::Scb::Scene::getStream((uint64_t)v17, HIBYTE(v16) & 0xF);
            uint64_t v26 = v27;
            *(void *)(a1 + 112) = v27;
            float v17 = *(void **)(a1 + 96);
          }
          *(float32x2_t *)(v26 + 300) = *v7;
          *(_DWORD *)(v26 + 308) = v7[1].i32[0];
          int8x8_t v28 = (int8x8_t)vadd_f32(*v5, *(float32x2_t *)(v26 + 312));
          *(int8x8_t *)(v26 + 312) = v28;
          *(float *)v28.i32 = v5[1].f32[0] + *(float *)(v26 + 320);
          *(_DWORD *)(v26 + 320) = v28.i32[0];
          uint64_t v29 = a1 + 96;
          goto LABEL_45;
        }
        float v17 = *(void **)v15;
      }
      uint64_t v30 = v17[548];
      float32x2_t v31 = (physx::Sc::BodySim **)(a1 + 128);
      float v32 = v7;
      float v33 = (double *)v5;
LABEL_48:
      physx::Sc::BodyCore::setSpatialAcceleration(v31, v30, (uint64_t)v32, (uint64_t)v33);
      goto LABEL_49;
    default:
      goto LABEL_49;
  }
}

void physx::NpArticulationLink::clearForce(uint64_t a1, int a2, int8x8_t a3)
{
}

void physx::NpRigidBodyTemplate<physx::PxArticulationLink>::clearSpatialForce(uint64_t a1, int a2, int a3, int a4, int8x8_t a5)
{
  if ((a2 - 1) < 2)
  {
    uint64_t v8 = a1 + 96;
    unsigned int v13 = *(_DWORD *)(a1 + 104);
    if (v13 >> 30 == 3 || v13 >> 30 == 2 && *(unsigned char *)(*(void *)v8 + 7689))
    {
      uint64_t v14 = *(void *)(a1 + 112);
      if (!v14)
      {
        a5 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)(a1 + 96), HIBYTE(v13) & 0xF).n128_u64[0];
        *(void *)(a1 + 112) = v14;
      }
      int v11 = *(_DWORD *)(a1 + 380);
      if (a3)
      {
        *(_DWORD *)(v14 + 324) = 0;
        *(void *)(v14 + 328) = 0;
        v11 &= ~0x40000u;
        int v12 = 0x20000000;
        if (!a4) {
          goto LABEL_31;
        }
      }
      else
      {
        int v12 = 0;
        if (!a4) {
          goto LABEL_31;
        }
      }
      *(void *)(v14 + 336) = 0;
      v11 &= ~0x80000u;
      v12 |= 0x40000000u;
      *(_DWORD *)(v14 + 344) = 0;
      goto LABEL_31;
    }
    unsigned int v16 = (physx::Sc::BodySim **)(a1 + 128);
    physx::Sc::BodyCore::clearSpatialVelocity(v16, a3, a4);
  }
  else
  {
    if (a2 != 3 && a2) {
      return;
    }
    uint64_t v8 = a1 + 96;
    unsigned int v9 = *(_DWORD *)(a1 + 104);
    if (v9 >> 30 == 3 || v9 >> 30 == 2 && *(unsigned char *)(*(void *)v8 + 7689))
    {
      uint64_t v10 = *(void *)(a1 + 112);
      if (!v10)
      {
        a5 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)(a1 + 96), HIBYTE(v9) & 0xF).n128_u64[0];
        *(void *)(a1 + 112) = v10;
      }
      int v11 = *(_DWORD *)(a1 + 380);
      if (a3)
      {
        *(_DWORD *)(v10 + 300) = 0;
        *(void *)(v10 + 304) = 0;
        v11 &= ~0x10000u;
        int v12 = 0x8000000;
        if (!a4) {
          goto LABEL_31;
        }
      }
      else
      {
        int v12 = 0;
        if (!a4)
        {
LABEL_31:
          *(_DWORD *)(a1 + 380) = v12 | v11;
          float v17 = *(void **)(a1 + 96);
          physx::Scb::Scene::scheduleForUpdate(v17, v8, a5);
          return;
        }
      }
      *(void *)(v10 + 312) = 0;
      v11 &= ~0x20000u;
      v12 |= 0x10000000u;
      *(_DWORD *)(v10 + 320) = 0;
      goto LABEL_31;
    }
    uint64_t v15 = (physx::Sc::BodySim **)(a1 + 128);
    physx::Sc::BodyCore::clearSpatialAcceleration(v15, a3, a4);
  }
}

void physx::NpArticulationLink::clearTorque(uint64_t a1, int a2, int8x8_t a3)
{
}

uint64_t physx::NpArticulationLink::setGlobalPose(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 160))(a1, a2, 1);
}

uint64_t *physx::NpArticulationLink::setLinearVelocity(uint64_t a1, int8x8_t *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  uint64_t v7 = a1 + 96;
  int8x8_t v8 = *a2;
  *(int8x8_t *)(a1 + 348) = *a2;
  v8.i32[0] = a2[1].i32[0];
  *(_DWORD *)(a1 + 356) = v8.i32[0];
  int v9 = *(_DWORD *)(a1 + 104) >> 30;
  if (v9 != 2)
  {
    if (v9 == 3)
    {
      uint64_t v10 = *(void **)v7;
      goto LABEL_5;
    }
LABEL_12:
    *(int8x8_t *)(a1 + 208) = *a2;
    *(_DWORD *)(a1 + 216) = a2[1].i32[0];
    uint64_t result = updateBodySim((uint64_t *)(a1 + 128));
    if (!v6) {
      return result;
    }
    goto LABEL_6;
  }
  uint64_t v10 = *(void **)v7;
  if (!*(unsigned char *)(*(void *)v7 + 7689)) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t result = physx::Scb::Scene::scheduleForUpdate(v10, v7, v8);
  *(_DWORD *)(a1 + 380) |= 0x400000u;
  if (!v6) {
    return result;
  }
LABEL_6:
  int v12 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 384) + 200))(*(void *)(a1 + 384));
  LODWORD(v13) = a2->i32[0];
  BOOL v14 = 1;
  if (*(float *)a2->i32 == 0.0)
  {
    LODWORD(v13) = a2->i32[1];
    if (*(float *)&v13 == 0.0)
    {
      LODWORD(v13) = a2[1].i32[0];
      BOOL v14 = *(float *)&v13 != 0.0;
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal(v12, v14, a3, v13);
}

uint64_t *physx::NpArticulationLink::setAngularVelocity(uint64_t a1, int8x8_t *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  uint64_t v7 = a1 + 96;
  int8x8_t v8 = *a2;
  *(int8x8_t *)(a1 + 360) = *a2;
  v8.i32[0] = a2[1].i32[0];
  *(_DWORD *)(a1 + 368) = v8.i32[0];
  int v9 = *(_DWORD *)(a1 + 104) >> 30;
  if (v9 != 2)
  {
    if (v9 == 3)
    {
      uint64_t v10 = *(void **)v7;
      goto LABEL_5;
    }
LABEL_12:
    *(int8x8_t *)(a1 + 224) = *a2;
    *(_DWORD *)(a1 + 232) = a2[1].i32[0];
    uint64_t result = updateBodySim((uint64_t *)(a1 + 128));
    if (!v6) {
      return result;
    }
    goto LABEL_6;
  }
  uint64_t v10 = *(void **)v7;
  if (!*(unsigned char *)(*(void *)v7 + 7689)) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t result = physx::Scb::Scene::scheduleForUpdate(v10, v7, v8);
  *(_DWORD *)(a1 + 380) |= 0x800000u;
  if (!v6) {
    return result;
  }
LABEL_6:
  int v12 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 384) + 200))(*(void *)(a1 + 384));
  LODWORD(v13) = a2->i32[0];
  BOOL v14 = 1;
  if (*(float *)a2->i32 == 0.0)
  {
    LODWORD(v13) = a2->i32[1];
    if (*(float *)&v13 == 0.0)
    {
      LODWORD(v13) = a2[1].i32[0];
      BOOL v14 = *(float *)&v13 != 0.0;
    }
  }
  return physx::PxArticulationImpl::wakeUpInternal(v12, v14, a3, v13);
}

uint64_t *physx::NpArticulationLink::setMaxAngularVelocity(uint64_t *this, double a2)
{
  __int32 v2 = this;
  uint64_t v3 = (uint64_t)(this + 12);
  float v4 = *(float *)&a2 * *(float *)&a2;
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v3;
LABEL_5:
    uint64_t v6 = v2[14];
    if (!v6)
    {
      *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v2[14] = v7;
      this = (uint64_t *)v2[12];
    }
    *(float *)(v6 + 188) = v4;
    this = physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 0x10u;
    return this;
  }
  uint64_t v8 = v2[38];
  if (v8 && *(unsigned char *)(v8 + 31) == 1)
  {
    *(float *)(v8 + 56) = v4;
  }
  else
  {
    *((float *)v2 + 60) = v4;
    return updateBodySim(v2 + 16);
  }
  return this;
}

float physx::NpArticulationLink::getMaxAngularVelocity(physx::NpArticulationLink *this)
{
  if ((*((unsigned char *)this + 380) & 0x10) != 0)
  {
    __int32 v2 = (float *)(*((void *)this + 14) + 188);
  }
  else
  {
    uint64_t v1 = *((void *)this + 38);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      __int32 v2 = (float *)(v1 + 56);
    }
    else {
      __int32 v2 = (float *)((char *)this + 240);
    }
  }
  return sqrtf(*v2);
}

uint64_t *physx::NpArticulationLink::setMaxLinearVelocity(uint64_t *this, double a2)
{
  __int32 v2 = this;
  uint64_t v3 = (uint64_t)(this + 12);
  float v4 = *(float *)&a2 * *(float *)&a2;
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v3;
LABEL_5:
    uint64_t v6 = v2[14];
    if (!v6)
    {
      *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v2[14] = v7;
      this = (uint64_t *)v2[12];
    }
    *(float *)(v6 + 192) = v4;
    this = physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 0x20u;
    return this;
  }
  uint64_t v8 = v2[38];
  if (v8 && *(unsigned char *)(v8 + 31) == 1)
  {
    *(float *)(v8 + 60) = v4;
  }
  else
  {
    *((float *)v2 + 61) = v4;
    return updateBodySim(v2 + 16);
  }
  return this;
}

float physx::NpArticulationLink::getMaxLinearVelocity(physx::NpArticulationLink *this)
{
  if ((*((unsigned char *)this + 380) & 0x20) != 0)
  {
    __int32 v2 = (float *)(*((void *)this + 14) + 192);
  }
  else
  {
    uint64_t v1 = *((void *)this + 38);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      __int32 v2 = (float *)(v1 + 60);
    }
    else {
      __int32 v2 = (float *)((char *)this + 244);
    }
  }
  return sqrtf(*v2);
}

void physx::NpArticulationLink::visualize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  physx::NpShapeManager::visualize((uint64_t *)(a1 + 40), a2, a3, a1);
  unint64_t v6 = *(unsigned int *)(a1 + 104);
  if (v6) {
    uint64_t v7 = *(unsigned char **)(a1 + 112);
  }
  else {
    uint64_t v7 = (unsigned char *)(a1 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v6 >> 24) & 0xF) + 3) + 108);
  }
  if ((*v7 & 1) == 0) {
    goto LABEL_34;
  }
  int v8 = *(_DWORD *)(a3 + 8624);
  if ((v8 & 0x20) == 0)
  {
    uint64_t v9 = *(void *)(a3 + 1872);
    float v10 = *(float *)(v9 + 1792);
LABEL_13:
    int v12 = (float *)(v9 + 1832);
    goto LABEL_14;
  }
  if (*(unsigned char *)(a3 + 8292)) {
    int v11 = (float *)(a3 + 8196);
  }
  else {
    int v11 = (float *)(*(void *)(a3 + 1872) + 1792);
  }
  float v10 = *v11;
  if (!*(unsigned char *)(a3 + 8302))
  {
    uint64_t v9 = *(void *)(a3 + 1872);
    goto LABEL_13;
  }
  int v12 = (float *)(a3 + 8236);
LABEL_14:
  float v13 = v10 * *v12;
  if (v13 != 0.0)
  {
    (*(void (**)(float32x2_t *__return_ptr, uint64_t))(*(void *)a1 + 152))(&v205, a1);
    BOOL v14 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, (uint64_t)&v205);
    float v219 = v13;
    float v220 = v13;
    float v221 = v13;
    unint64_t v222 = 0xFF00FF00FFFF0000;
    float v223 = -1.7015e38;
    physx::Cm::operator<<(v14, (uint64_t)&v219);
    int v8 = *(_DWORD *)(a3 + 8624);
  }
  int v15 = v8 & 0x20;
  if (v15 && *(unsigned char *)(a3 + 8294)) {
    unsigned int v16 = (float *)(a3 + 8204);
  }
  else {
    unsigned int v16 = (float *)(*(void *)(a3 + 1872) + 1800);
  }
  *(float *)&__int32 v17 = v10 * *v16;
  if (*(float *)&v17 != 0.0)
  {
    float v18 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, a1 + 320);
    v205.i32[0] = v17;
    v205.i32[1] = v17;
    LODWORD(v206) = v17;
    *(void *)((char *)&v206 + 4) = 0xFF00FF00FFFF0000;
    HIDWORD(v206) = -16776961;
    physx::Cm::operator<<(v18, (uint64_t)&v205);
    int v15 = *(_DWORD *)(a3 + 8624) & 0x20;
  }
  if (v15 && *(unsigned char *)(a3 + 8296)) {
    float v19 = (float *)(a3 + 8212);
  }
  else {
    float v19 = (float *)(*(void *)(a3 + 1872) + 1808);
  }
  float v20 = v10 * *v19;
  if (v20 != 0.0)
  {
    *(_DWORD *)(a2 + 4) = 0xFFFFFF;
    *(_DWORD *)(a2 + 36) = 1065353216;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(void *)(a2 + 68) = 0;
    *(void *)(a2 + 60) = 0;
    *(_DWORD *)(a2 + 76) = 1065353216;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(_DWORD *)(a2 + 96) = 1065353216;
    float v21 = v20 * *(float *)(a1 + 356);
    float v22 = v20 * 0.2;
    LODWORD(v206) = *(_DWORD *)(a1 + 344);
    float32x2_t v23 = vmul_n_f32(*(float32x2_t *)(a1 + 348), v20);
    float32x2_t v205 = *(float32x2_t *)(a1 + 336);
    *(float32x2_t *)((char *)&v206 + 4) = vadd_f32(v23, v205);
    *((float *)&v206 + 3) = v21 + *(float *)&v206;
    float v207 = v22;
    physx::Cm::operator<<((_DWORD *)a2, (float *)&v205);
    int v15 = *(_DWORD *)(a3 + 8624) & 0x20;
  }
  if (v15 && *(unsigned char *)(a3 + 8297)) {
    uint64_t v24 = (float *)(a3 + 8216);
  }
  else {
    uint64_t v24 = (float *)(*(void *)(a3 + 1872) + 1812);
  }
  float v25 = v10 * *v24;
  if (v25 != 0.0)
  {
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a2 + 36) = 1065353216;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 56) = 1065353216;
    *(void *)(a2 + 68) = 0;
    *(void *)(a2 + 60) = 0;
    *(_DWORD *)(a2 + 76) = 1065353216;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(_DWORD *)(a2 + 96) = 1065353216;
    float v26 = v25 * *(float *)(a1 + 368);
    float v27 = v25 * 0.2;
    LODWORD(v206) = *(_DWORD *)(a1 + 344);
    float32x2_t v28 = vmul_n_f32(*(float32x2_t *)(a1 + 360), v25);
    float32x2_t v205 = *(float32x2_t *)(a1 + 336);
    *(float32x2_t *)((char *)&v206 + 4) = vadd_f32(v28, v205);
    *((float *)&v206 + 3) = v26 + *(float *)&v206;
    float v207 = v27;
    physx::Cm::operator<<((_DWORD *)a2, (float *)&v205);
  }
LABEL_34:
  unint64_t v29 = *(unsigned int *)(a1 + 104);
  if (v29) {
    uint64_t v30 = *(unsigned char **)(a1 + 112);
  }
  else {
    uint64_t v30 = (unsigned char *)(a1 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v29 >> 24) & 0xF) + 3) + 108);
  }
  if (*v30)
  {
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    float v32 = (*(float (**)(uint64_t, void))(*(void *)v31 + 560))(v31, 0);
    uint64_t v33 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    if ((float)(v32 * (*(float (**)(void))(v33 + 560))()) != 0.0)
    {
      int v34 = *(_DWORD *)(a1 + 380);
      if ((v34 & 2) != 0)
      {
        uint64_t v36 = *(void *)(a1 + 112) + 168;
      }
      else
      {
        uint64_t v35 = *(void *)(a1 + 304);
        if (v35 && *(unsigned char *)(v35 + 31) == 1) {
          uint64_t v36 = v35 + 32;
        }
        else {
          uint64_t v36 = a1 + 256;
        }
      }
      float v37 = *(float *)(v36 + 8);
      float32x2_t v38 = (float32x2_t)vrev64_s32(*(int32x2_t *)v36);
      __asm { FMOV            V3.2S, #1.0 }
      float32x2_t v43 = (float32x2_t)vbic_s8((int8x8_t)vdiv_f32(_D3, v38), (int8x8_t)vceqz_f32(v38));
      float v44 = 1.0 / v37;
      _ZF = v37 == 0.0;
      int32x2_t v45 = 0;
      if (!_ZF) {
        *(float *)v45.i32 = v44;
      }
      if (v34)
      {
        float32x2_t v47 = (float *)(*(void *)(a1 + 112) + 164);
      }
      else
      {
        uint64_t v46 = *(void *)(a1 + 304);
        if (v46 && *(unsigned char *)(v46 + 31) == 1) {
          float32x2_t v47 = (float *)(v46 + 44);
        }
        else {
          float32x2_t v47 = (float *)(a1 + 268);
        }
      }
      *(float *)v45.i32 = *(float *)v45.i32 * (float)(6.0 / (float)(1.0 / *v47));
      float v192 = 6.0 / (float)(1.0 / *v47);
      int32x2_t v194 = v45;
      *(_DWORD *)(a2 + 4) = 0xFFFFFF;
      float32x2_t v48 = (_DWORD *)physx::Cm::RenderOutput::operator<<(a2, a1 + 320);
      float32x2_t v49 = vmul_n_f32(v43, v192);
      float32x2_t v50 = vmul_f32(vsqrt_f32(vabs_f32(vadd_f32((float32x2_t)vdup_lane_s32(v194, 0), vsub_f32(v49, (float32x2_t)vrev64_s32((int32x2_t)v49))))), (float32x2_t)0x3F0000003F000000);
      float v51 = sqrtf(vabds_f32(vaddv_f32(v49), *(float *)v194.i32)) * 0.5;
      float32x2_t v205 = vneg_f32(v50);
      *(float *)&long long v206 = -v51;
      *(float32x2_t *)((char *)&v206 + 4) = v50;
      *((float *)&v206 + 3) = v51;
      LOBYTE(v207) = 1;
      physx::Cm::operator<<(v48, (uint64_t *)&v205);
    }
    uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    float v53 = v32 * (*(float (**)(uint64_t, uint64_t))(*(void *)v52 + 560))(v52, 20);
    uint64_t v54 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    float v55 = v32 * (*(float (**)(void))(v54 + 560))();
    if (v53 != 0.0 || v55 != 0.0)
    {
      float v197 = (void (**)(void **, float *, float32x2_t *))&unk_26E725838;
      float v198 = v53;
      float v199 = v55;
      uint64_t v200 = a2;
      uint64_t v56 = *(void *)(a1 + 400);
      if (v56)
      {
        (*(void (**)(float32x2_t *__return_ptr, uint64_t))(*(void *)a1 + 152))(&v205, a1);
        (*(void (**)(float32x2_t *__return_ptr))(**(void **)(a1 + 392) + 88))(&v216);
        float v57 = (float)(*((float *)&v206 + 1) * *((float *)&v206 + 1)) + -0.5;
        float v58 = (float)((float)((float)(*((float *)&v217 + 3) + *((float *)&v217 + 3)) * v205.f32[1])
                    + (float)(v205.f32[0] * (float)(*((float *)&v217 + 2) + *((float *)&v217 + 2))))
            + (float)(*(float *)&v206 * (float)(v218 + v218));
        float v219 = (float)((float)((float)(v205.f32[0] * *((float *)&v217 + 1))
                             + (float)(*((float *)&v206 + 1) * v216.f32[0]))
                     + (float)(v205.f32[1] * *(float *)&v217))
             - (float)(v216.f32[1] * *(float *)&v206);
        float v220 = (float)((float)((float)(v205.f32[1] * *((float *)&v217 + 1))
                             + (float)(*((float *)&v206 + 1) * v216.f32[1]))
                     + (float)(*(float *)&v206 * v216.f32[0]))
             - (float)(*(float *)&v217 * v205.f32[0]);
        float v221 = (float)((float)((float)(*(float *)&v206 * *((float *)&v217 + 1))
                             + (float)(*((float *)&v206 + 1) * *(float *)&v217))
                     + (float)(v205.f32[0] * v216.f32[1]))
             - (float)(v216.f32[0] * v205.f32[1]);
        *(float *)&unint64_t v222 = (float)((float)((float)(*((float *)&v206 + 1) * *((float *)&v217 + 1))
                                        - (float)(v205.f32[0] * v216.f32[0]))
                                - (float)(v205.f32[1] * v216.f32[1]))
                        - (float)(*(float *)&v206 * *(float *)&v217);
        *((float *)&v222 + 1) = *((float *)&v206 + 2)
                              + (float)((float)((float)(*((float *)&v206 + 1)
                                                      * (float)((float)(v205.f32[1] * (float)(v218 + v218))
                                                              - (float)(*(float *)&v206
                                                                      * (float)(*((float *)&v217 + 3)
                                                                              + *((float *)&v217 + 3)))))
                                              + (float)((float)(*((float *)&v217 + 2) + *((float *)&v217 + 2)) * v57))
                                      + (float)(v205.f32[0] * v58));
        float v223 = *((float *)&v206 + 3)
             + (float)((float)((float)(*((float *)&v206 + 1)
                                     * (float)((float)(*(float *)&v206
                                                     * (float)(*((float *)&v217 + 2) + *((float *)&v217 + 2)))
                                             - (float)(v205.f32[0] * (float)(v218 + v218))))
                             + (float)((float)(*((float *)&v217 + 3) + *((float *)&v217 + 3)) * v57))
                     + (float)(v205.f32[1] * v58));
        float v224 = v207
             + (float)((float)((float)(*((float *)&v206 + 1)
                                     * (float)((float)(v205.f32[0]
                                                     * (float)(*((float *)&v217 + 3) + *((float *)&v217 + 3)))
                                             - (float)(v205.f32[1]
                                                     * (float)(*((float *)&v217 + 2) + *((float *)&v217 + 2)))))
                             + (float)((float)(v218 + v218) * v57))
                     + (float)(*(float *)&v206 * v58));
        (*(void (**)(float32x2_t *__return_ptr, uint64_t))(*(void *)v56 + 152))(&v205, v56);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 392) + 64))(&v210);
        float v59 = (float)(*((float *)&v206 + 1) * *((float *)&v206 + 1)) + -0.5;
        float v60 = (float)((float)((float)(v214 + v214) * v205.f32[1]) + (float)(v205.f32[0] * (float)(v213 + v213)))
            + (float)(*(float *)&v206 * (float)(v215 + v215));
        v216.f32[0] = (float)((float)((float)(v205.f32[0] * v212) + (float)(*((float *)&v206 + 1) * *(float *)&v210))
                            + (float)(v205.f32[1] * v211))
                    - (float)(*((float *)&v210 + 1) * *(float *)&v206);
        v216.f32[1] = (float)((float)((float)(v205.f32[1] * v212)
                                    + (float)(*((float *)&v206 + 1) * *((float *)&v210 + 1)))
                            + (float)(*(float *)&v206 * *(float *)&v210))
                    - (float)(v211 * v205.f32[0]);
        *(float *)&long long v217 = (float)((float)((float)(*(float *)&v206 * v212) + (float)(*((float *)&v206 + 1) * v211))
                                + (float)(v205.f32[0] * *((float *)&v210 + 1)))
                        - (float)(*(float *)&v210 * v205.f32[1]);
        *((float *)&v217 + 1) = (float)((float)((float)(*((float *)&v206 + 1) * v212)
                                              - (float)(v205.f32[0] * *(float *)&v210))
                                      - (float)(v205.f32[1] * *((float *)&v210 + 1)))
                              - (float)(*(float *)&v206 * v211);
        *((float *)&v217 + 2) = *((float *)&v206 + 2)
                              + (float)((float)((float)(*((float *)&v206 + 1)
                                                      * (float)((float)(v205.f32[1] * (float)(v215 + v215))
                                                              - (float)(*(float *)&v206 * (float)(v214 + v214))))
                                              + (float)((float)(v213 + v213) * v59))
                                      + (float)(v205.f32[0] * v60));
        *((float *)&v217 + 3) = *((float *)&v206 + 3)
                              + (float)((float)((float)(*((float *)&v206 + 1)
                                                      * (float)((float)(*(float *)&v206 * (float)(v213 + v213))
                                                              - (float)(v205.f32[0] * (float)(v215 + v215))))
                                              + (float)((float)(v214 + v214) * v59))
                                      + (float)(v205.f32[1] * v60));
        float v218 = v207
             + (float)((float)((float)(*((float *)&v206 + 1)
                                     * (float)((float)(v205.f32[0] * (float)(v214 + v214))
                                             - (float)(v205.f32[1] * (float)(v213 + v213))))
                             + (float)((float)(v215 + v215) * v59))
                     + (float)(*(float *)&v206 * v60));
        v197[2]((void **)&v197, &v219, &v216);
        uint64_t v61 = (*(uint64_t (**)(void))(**(void **)(a1 + 392) + 96))(*(void *)(a1 + 392));
        if (*(_WORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1) + 8) == 11)
        {
          float v63 = v216.f32[1];
          float v64 = v216.f32[0];
          float32x2_t v205 = v216;
          uint64_t v65 = v217;
          long long v206 = v217;
          float v207 = v218;
          _S17 = v222;
          float v67 = *((float *)&v217 + 1);
          __asm { FMLA            S0, S17, V5.S[1] }
          if (_S0 < 0.0)
          {
            float v64 = -v216.f32[0];
            float v63 = -v216.f32[1];
            *(float *)&uint64_t v65 = -*(float *)&v217;
            v216.f32[0] = -v216.f32[0];
            v216.f32[1] = -v216.f32[1];
            float v67 = -*((float *)&v217 + 1);
            *(float *)&long long v217 = -*(float *)&v217;
            *((float *)&v217 + 1) = -*((float *)&v65 + 1);
          }
          float v69 = (float)((float)((float)(*(float *)&v222 * v64) - (float)(v219 * v67)) - (float)(v220 * *(float *)&v65))
              + (float)(v63 * v221);
          float v70 = (float)((float)((float)(*(float *)&v222 * v63) - (float)(v220 * v67)) - (float)(v221 * v64))
              + (float)(*(float *)&v65 * v219);
          float v71 = (float)((float)((float)(*(float *)&v222 * *(float *)&v65) - (float)(v221 * v67)) - (float)(v219 * v63))
              + (float)(v64 * v220);
          float v72 = (float)((float)((float)(v219 * v64) + (float)(*(float *)&v222 * v67)) + (float)(v220 * v63))
              + (float)(v221 * *(float *)&v65);
          if (v69 == 0.0)
          {
            float v74 = 0.0;
            float v75 = 0.0;
            float v76 = 1.0;
          }
          else
          {
            float v73 = sqrtf((float)((float)(v69 * v69) + 0.0) + (float)(v72 * v72));
            float v74 = v69 / v73;
            float v75 = 0.0 / v73;
            float v76 = v72 / v73;
          }
          float v118 = v74 / (float)(v76 + 1.0);
          float v119 = 1.8447e19;
          if (v74 < 0.0) {
            float v119 = -1.8447e19;
          }
          if (v76 == -1.0) {
            float v118 = v119;
          }
          int v120 = *(_DWORD *)(v61 + 8);
          if ((v120 & 0x40000) != 0)
          {
            uint64_t v123 = *(void *)(v61 + 16);
            float v121 = (float *)(v123 + 148);
            float v122 = (float *)(v123 + 152);
          }
          else
          {
            float v121 = (float *)(v61 + 88);
            float v122 = (float *)(v61 + 92);
          }
          float v124 = (float)(v70 * v76) - (float)(v72 * v75);
          float v125 = (float)(v71 * v76) - (float)(v72 * v75);
          float v126 = (float)(v69 * v74) + (float)(v72 * v76);
          if ((v120 & 0x20000) != 0)
          {
            uint64_t v129 = *(void *)(v61 + 16);
            float v127 = (float *)(v129 + 140);
            float v128 = (float *)(v129 + 144);
          }
          else
          {
            float v127 = (float *)(v61 + 96);
            float v128 = (float *)(v61 + 104);
          }
          float v130 = v126 + (float)(v70 * v75);
          if ((v120 & 0x400) != 0) {
            float v131 = (float *)(*(void *)(v61 + 16) + 108);
          }
          else {
            float v131 = (float *)(v61 + 348);
          }
          float v132 = (float)(v124 - (float)(v71 * v74)) + (float)(v75 * v69);
          float v133 = (float)(v125 - (float)(v69 * v75)) + (float)(v74 * v70);
          float v134 = *v121;
          float v135 = *v122;
          float v136 = v130 + (float)(v71 * v75);
          float v137 = *v127;
          float v138 = *v128;
          float v196 = *v131;
          if ((v120 & 0x4000) != 0) {
            float v139 = (float *)(*(void *)(v61 + 16) + 124);
          }
          else {
            float v139 = (float *)(v61 + 364);
          }
          BOOL v140 = fabsf(v118) > tanf(v135 - *v139);
          ((void (*)(void (***)(void **, float *, float32x2_t *), float32x2_t *, BOOL, float, float))v197[4])(&v197, &v205, v140, v134, v135);
          float v141 = v132 / (float)(v136 + 1.0);
          float v142 = 1.8447e19;
          if (v133 >= 0.0) {
            float v143 = 1.8447e19;
          }
          else {
            float v143 = -1.8447e19;
          }
          if (v132 < 0.0) {
            float v142 = -1.8447e19;
          }
          if (v136 == -1.0) {
            float v144 = v143;
          }
          else {
            float v144 = v133 / (float)(v136 + 1.0);
          }
          if (v136 == -1.0) {
            float v145 = v142;
          }
          else {
            float v145 = v141;
          }
          float v146 = tanf(v137 * 0.25);
          float v147 = tanf(v138 * 0.25);
          float v148 = tanf(v196 * 0.25);
          float v149 = fabsf(v144);
          float v150 = fabsf(v145);
          float v151 = (float)((float)((float)(v149 + v148) / (float)(1.0 - (float)(v149 * v148))) / v146)
               * (float)((float)((float)(v149 + v148) / (float)(1.0 - (float)(v149 * v148))) / v146);
          float v152 = (float)((float)(v150 + v148) / (float)(1.0 - (float)(v150 * v148))) / v147;
          ((void (*)(void (***)(void **, float *, float32x2_t *), float32x2_t *, BOOL, float, float))v197[5])(&v197, &v205, (float)(v151 + (float)(v152 * v152)) > 1.0, v146, v147);
        }
        else
        {
          float v78 = v219;
          float v77 = v220;
          float v79 = v221;
          float v80 = v77 * (float)(v77 + v77);
          float v81 = v79 * (float)(v79 + v79);
          float v82 = (float)(v78 + v78) * v220;
          float v83 = (float)(v78 + v78) * v221;
          float v84 = (float)(v78 + v78) * *(float *)&v222;
          float v85 = (float)(v77 + v77) * v221;
          float v86 = (float)(v77 + v77) * *(float *)&v222;
          *(float *)v62.i32 = (float)(v79 + v79) * *(float *)&v222;
          float v87 = 1.0;
          v205.f32[0] = (float)(1.0 - v80) - v81;
          v205.f32[1] = v82 + *(float *)v62.i32;
          float v88 = 1.0 - (float)(v78 * (float)(v78 + v78));
          *(float *)&long long v206 = v83 - v86;
          *((float *)&v206 + 1) = v82 - *(float *)v62.i32;
          *((float *)&v206 + 2) = v88 - v81;
          *((float *)&v206 + 3) = v85 + v84;
          float v207 = v83 + v86;
          float v208 = v85 - v84;
          float v209 = v88 - v80;
          *(float32x2_t *)v62.i8 = v216;
          uint64_t v89 = *((void *)&v217 + 1);
          float v90 = v218;
          float v91 = v216.f32[1];
          float v190 = -*(float *)&v217;
          float v193 = *((float *)&v217 + 1);
          __int32 v191 = v217;
          int8x16_t v195 = v62;
          float v92 = *((float *)&v217 + 1);
          float v93 = *(float *)&v217;
          float v94 = v216.f32[1];
          if ((float)((float)(vmlas_n_f32(vmuls_lane_f32(v220, v216, 1), v219, v216.f32[0])
                             + (float)(v221 * *(float *)&v217))
                     + (float)(*(float *)&v222 * *((float *)&v217 + 1))) < 0.0)
          {
            float v92 = -*((float *)&v217 + 1);
            *(float32x2_t *)v62.i8 = vneg_f32(v216);
            float32x2_t v216 = *(float32x2_t *)v62.i8;
            float v93 = -*(float *)&v217;
            *(float *)&long long v217 = -*(float *)&v217;
            *((float *)&v217 + 1) = -*((float *)&v217 + 1);
            float v94 = *(float *)&v62.i32[1];
          }
          float v95 = (float)(*((float *)&v222 + 1) - *((float *)&v217 + 2))
              + (float)(*((float *)&v222 + 1) - *((float *)&v217 + 2));
          float v96 = (float)(v223 - *((float *)&v217 + 3)) + (float)(v223 - *((float *)&v217 + 3));
          float v97 = (float)(v224 - v218) + (float)(v224 - v218);
          float v98 = (float)(v92 * v92) + -0.5;
          float v99 = (float)((float)-(float)(v94 * v96) - (float)(*(float *)v62.i32 * v95)) - (float)(v93 * v97);
          float v100 = (float)((float)(v92 * (float)((float)(v93 * v96) - (float)(v94 * v97))) + (float)(v95 * v98))
               - (float)(*(float *)v62.i32 * v99);
          float v101 = (float)((float)(v92 * (float)((float)(*(float *)v62.i32 * v97) - (float)(v93 * v95)))
                       + (float)(v96 * v98))
               - (float)(v94 * v99);
          float v102 = (float)((float)(v92 * (float)((float)(v94 * v95) - (float)(*(float *)v62.i32 * v96)))
                       + (float)(v97 * v98))
               - (float)(v93 * v99);
          float v103 = (float)((float)((float)(v92 * v219) - (float)(*(float *)v62.i32 * *(float *)&v222))
                       - (float)(v94 * v221))
               + (float)(v220 * v93);
          float v104 = (float)((float)((float)(v92 * v220) - (float)(v94 * *(float *)&v222)) - (float)(v93 * v219))
               + (float)(v221 * *(float *)v62.i32);
          float v105 = (float)((float)((float)(v92 * v221) - (float)(v93 * *(float *)&v222))
                       - (float)(*(float *)v62.i32 * v220))
               + (float)(v219 * v94);
          float v106 = (float)((float)((float)(v219 * *(float *)v62.i32) + (float)(v92 * *(float *)&v222))
                       + (float)(v94 * v220))
               + (float)(v93 * v221);
          *(float *)&uint64_t v210 = v103;
          *((float *)&v210 + 1) = v104;
          float v211 = v105;
          float v212 = v106;
          float v213 = v100;
          float v214 = v101;
          float v215 = v102;
          float v107 = 0.0;
          float v108 = 0.0;
          float v109 = 0.0;
          if (v103 != 0.0)
          {
            float v110 = sqrtf((float)((float)(v103 * v103) + 0.0) + (float)(v106 * v106));
            float v108 = v103 / v110;
            float v109 = 0.0 / v110;
            float v87 = v106 / v110;
          }
          float v111 = (float)((float)((float)(v103 * v87) - (float)(v106 * v108)) - (float)(v104 * v109))
               + (float)(v109 * v105);
          float v112 = (float)((float)((float)(v104 * v87) - (float)(v106 * v109)) - (float)(v105 * v108))
               + (float)(v109 * v103);
          float v113 = (float)((float)((float)(v105 * v87) - (float)(v106 * v109)) - (float)(v103 * v109))
               + (float)(v108 * v104);
          float v114 = (float)((float)((float)(v103 * v108) + (float)(v106 * v87)) + (float)(v104 * v109))
               + (float)(v105 * v109);
          if (v112 == 0.0)
          {
            float v117 = 1.0;
            float v116 = 0.0;
          }
          else
          {
            float v115 = sqrtf((float)(v112 * v112) + (float)(v114 * v114));
            float v107 = 0.0 / v115;
            float v116 = v112 / v115;
            float v117 = v114 / v115;
          }
          float v153 = (float)((float)((float)(v113 * v117) - (float)(v114 * v107)) - (float)(v111 * v116))
               + (float)(v107 * v112);
          if (v153 == 0.0)
          {
            float v156 = 2.0;
            float v188 = 0.0;
          }
          else
          {
            float v154 = (float)((float)((float)(v111 * v107) + (float)(v114 * v117)) + (float)(v112 * v116))
                 + (float)(v113 * v107);
            float v155 = sqrtf((float)((float)(v153 * v153) + 0.0) + (float)(v154 * v154));
            float v188 = v153 / v155;
            float v156 = (float)(v154 / v155) + 1.0;
          }
          if (*(unsigned char *)(v61 + 290))
          {
            float v157 = sqrtf((float)((float)((float)(v109 * v109) + (float)(v108 * v108)) + (float)(v109 * v109))+ (float)(v87 * v87));
            if (v157 != 0.0)
            {
              float v108 = v108 / v157;
              float v87 = v87 / v157;
            }
            if (v87 < -1.0) {
              float v87 = -1.0;
            }
            if (v87 > 1.0) {
              float v87 = 1.0;
            }
            float v158 = acosf(v87);
            float v159 = v158 + v158;
            if (v108 >= 0.0) {
              float v160 = v159;
            }
            else {
              float v160 = -v159;
            }
            BOOL v161 = (float)(v160 + 0.01) > *(float *)(v61 + 92) || (float)(v160 + -0.01) < *(float *)(v61 + 88);
            v202.i64[0] = v195.i64[0];
            v202.i64[1] = __PAIR64__(LODWORD(v193), v191);
            uint64_t v203 = v89;
            float v204 = v90;
            v197[4]((void **)&v197, v202.f32, (float32x2_t *)v161);
          }
          float v189 = -v91;
          if (*(unsigned char *)(v61 + 291))
          {
            float v162 = *(float *)(v61 + 96);
            float v163 = *(float *)(v61 + 100);
            float v164 = atan2f(v116, v117 + 1.0) * 4.0;
            BOOL v165 = (float)(v164 + 0.01) > v163 || (float)(v164 + -0.01) < v162;
            uint64_t v203 = v89;
            v166.i64[0] = v195.i64[0];
            v166.i64[1] = __PAIR64__(v195.u32[0], v191);
            float32x4_t v167 = (float32x4_t)vuzp2q_s32((int32x4_t)v195, vzip1q_s32((int32x4_t)v195, (int32x4_t)v195));
            v167.i32[1] = v191;
            v167.f32[3] = v189;
            float32x4_t v168 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v166, (float32x4_t)xmmword_234423A60), (float32x4_t)xmmword_234423A70, v193), (float32x4_t)xmmword_234423A80, v167);
            float32x4_t v169 = (float32x4_t)vextq_s8((int8x16_t)v168, v195, 0xCuLL);
            v169.i32[0] = v191;
            v169.f32[3] = v190;
            float v204 = v90;
            float32x4_t v202 = vmlaq_f32(v168, (float32x4_t)xmmword_234423A90, v169);
            ((void (*)(void (***)(void **, float *, float32x2_t *), float32x4_t *, BOOL, float, float))v197[4])(&v197, &v202, v165, -v163, -v162);
          }
          if (*(unsigned char *)(v61 + 292))
          {
            float v170 = *(float *)(v61 + 104);
            float v171 = *(float *)(v61 + 108);
            float v172 = atan2f(v188, v156) * 4.0;
            BOOL v173 = (float)(v172 + 0.01) > v171 || (float)(v172 + -0.01) < v170;
            uint64_t v203 = v89;
            float v204 = v90;
            float32x4_t v174 = (float32x4_t)v195;
            v174.i32[2] = v191;
            float32x4_t v175 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v174, (int8x16_t)v174, 0xCuLL), (int8x16_t)v174, 8uLL);
            v174.i32[3] = v195.i32[0];
            float32x4_t v176 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v175, (int8x16_t)v175, 0xCuLL), (int8x16_t)v175, 8uLL);
            v175.f32[3] = v189;
            v176.f32[3] = v190;
            float32x4_t v202 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_f32(v174, (float32x4_t)xmmword_234421FC0), (float32x4_t)xmmword_234421FD0, v193), (float32x4_t)xmmword_234421FE0, v175), (float32x4_t)xmmword_2343853F0, v176);
            ((void (*)(void (***)(void **, float *, float32x2_t *), float32x4_t *, BOOL, float, float))v197[4])(&v197, &v202, v173, -v171, -v170);
          }
          uint64_t v177 = 0;
          float v178 = (float *)(v61 + 116);
          float v179 = (float *)&v206;
          do
          {
            if (*(unsigned char *)(v61 + v177 + 293) == 1)
            {
              float v180 = *(v178 - 1);
              float v181 = *v178;
              float v182 = *(&v213 + v177);
              float v183 = *(v179 - 2);
              float v184 = *(v179 - 1);
              float v185 = *v179;
              _NF = v182 > *v178 || v182 < v180;
              v202.f32[0] = *((float *)&v217 + 2) + (float)(v180 * v183);
              v202.f32[1] = *((float *)&v217 + 3) + (float)(v180 * v184);
              v202.f32[2] = v218 + (float)(v180 * v185);
              v201[0] = *((float *)&v217 + 2) + (float)(v181 * v183);
              v201[1] = *((float *)&v217 + 3) + (float)(v181 * v184);
              v201[2] = v218 + (float)(v181 * v185);
              if (_NF) {
                uint64_t v187 = 16711680;
              }
              else {
                uint64_t v187 = 0xFFFFFFLL;
              }
              ((void (*)(void (***)(void **, float *, float32x2_t *), float32x4_t *, float *, uint64_t))v197[7])(&v197, &v202, v201, v187);
            }
            ++v177;
            v178 += 2;
            v179 += 3;
          }
          while (v177 != 3);
        }
      }
    }
  }
}

const char *physx::PxAggregate::getConcreteTypeName(physx::PxAggregate *this)
{
  return "PxAggregate";
}

BOOL physx::PxAggregate::isKindOf(physx::PxAggregate *this, const char *a2)
{
  return !strcmp("PxAggregate", a2) || strcmp(a2, "PxBase") == 0;
}

const char *physx::PxArticulationLink::getConcreteTypeName(physx::PxArticulationLink *this)
{
  return "PxArticulationLink";
}

BOOL physx::PxArticulationLink::isKindOf(physx::PxArticulationLink *this, const char *a2)
{
  if (!strcmp("PxArticulationLink", a2)) {
    return 1;
  }
  return physx::PxRigidBody::isKindOf(this, a2);
}

uint64_t physx::NpArticulationLink::getType(physx::NpArticulationLink *this)
{
  return 2;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getScene(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v1 + 2) >> 30) - 1) > 1) {
    return 0;
  }
  uint64_t v2 = *v1;
  if (v2) {
    return v2 - 16;
  }
  else {
    return 0;
  }
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getName(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

float physx::NpRigidActorTemplate<physx::PxArticulationLink>::getWorldBounds@<S0>(physx::PxRigidActor *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  physx::NpShapeManager::getWorldBounds((physx::PxRigidActor *)((char *)a1 + 40), a1, (uint64_t)&v11);
  float v4 = (float)(v12 + v14) * 0.5;
  float v5 = (float)((float)(v14 - v12) * 0.5) * a3;
  float v6 = v4 - v5;
  float result = v4 + v5;
  float32x2_t v8 = vmul_f32(vadd_f32(v11, v13), (float32x2_t)0x3F0000003F000000);
  float32x2_t v9 = vmul_n_f32(vmul_f32(vsub_f32(v13, v11), (float32x2_t)0x3F0000003F000000), a3);
  *(float32x2_t *)a2 = vsub_f32(v8, v9);
  *(float *)(a2 + 8) = v6;
  *(float32x2_t *)(a2 + 12) = vadd_f32(v8, v9);
  *(float *)(a2 + 20) = result;
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxArticulationLink>::setActorFlag(int32x2_t *result, int a2, int a3, int8x8_t a4)
{
  float v6 = result;
  if (a2 != 8) {
    goto LABEL_35;
  }
  uint64_t v7 = *((void *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  float32x2_t v8 = (int32x2_t *)((char *)result + v7);
  unint64_t v9 = *(unsigned int *)((char *)result[1].u32 + v7);
  if (v9) {
    float v10 = (int32x2_t *)v8[2];
  }
  else {
    float v10 = (int32x2_t *)((char *)v8 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v9 >> 24) & 0xF) + 3) + 12);
  }
  uint64_t v11 = (uint64_t)*v8;
  int v12 = v10->u8[0];
  if (v12 & 8) == 0 || (a3)
  {
    if ((v12 & 8) != 0 || !a3) {
      goto LABEL_35;
    }
    if (v11)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      uint64_t v7 = *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
      LODWORD(v9) = *(__int32 *)((char *)v6[1].i32 + v7);
    }
    int v18 = v12 | 8;
    uint64_t v19 = (uint64_t)v6 + v7;
    unsigned int v20 = BYTE3(v9) & 0xF;
    uint64_t v21 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v20 + 3);
    unsigned int v22 = v9 >> 30;
    if (v22 == 2)
    {
      float32x2_t v23 = *(void **)v19;
      if (*(unsigned char *)(*(void *)v19 + 7689)) {
        goto LABEL_28;
      }
    }
    else if (v22 == 3)
    {
      float32x2_t v23 = *(void **)v19;
LABEL_28:
      float v27 = *(unsigned char **)(v19 + 16);
      if (!v27)
      {
        a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v23, v20).n128_u64[0];
        float v27 = v28;
        *(void *)(v19 + 16) = v28;
        float32x2_t v23 = *(void **)v19;
      }
      *float v27 = v18;
      physx::Scb::Scene::scheduleForUpdate(v23, v19, a4);
      *(_DWORD *)(v19 + 8) |= 1u;
LABEL_34:
      float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)v6 + 576))(v6);
      goto LABEL_35;
    }
    unint64_t v29 = (unsigned char *)(v21 + v19);
    if (v18 != *(unsigned __int8 *)(v21 + v19 + 12))
    {
      v29[12] = v18;
      if (*(void *)v29) {
        (*(void (**)(void))(**(void **)v29 + 16))(*(void *)v29);
      }
    }
    goto LABEL_34;
  }
  float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 584))(result);
  unsigned int v13 = v12 & 0xFFFFFFF7;
  uint64_t v14 = (uint64_t)v6 + *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
  unint64_t v15 = *(unsigned int *)(v14 + 8);
  uint64_t v16 = (v15 >> 24) & 0xF;
  unsigned int v17 = v15 >> 30;
  if (v17 == 2)
  {
    float result = *(int32x2_t **)v14;
    if (*(unsigned char *)(*(void *)v14 + 7689)) {
      goto LABEL_18;
    }
LABEL_21:
    uint64_t v26 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v16 + 3) + v14;
    if (v13 != *(unsigned __int8 *)(v26 + 12))
    {
      *(unsigned char *)(v26 + 12) = v13;
      float result = *(int32x2_t **)v26;
      if (*(void *)v26) {
        float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 16))(result);
      }
    }
    goto LABEL_24;
  }
  if (v17 != 3) {
    goto LABEL_21;
  }
  float result = *(int32x2_t **)v14;
LABEL_18:
  uint64_t v24 = *(unsigned char **)(v14 + 16);
  if (!v24)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v16).n128_u64[0];
    uint64_t v24 = v25;
    *(void *)(v14 + 16) = v25;
    float result = *(int32x2_t **)v14;
  }
  *uint64_t v24 = v13;
  float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v14, a4);
  *(_DWORD *)(v14 + 8) |= 1u;
LABEL_24:
  if (v11 && *(void *)&v6[4]) {
    float result = physx::NpActor::addConstraintsToSceneInternal(v6 + 3);
  }
LABEL_35:
  uint64_t v30 = (uint64_t)v6 + *((void *)&physx::NpActor::sLazyInitOffsets + v6[1].u16[0] + 18);
  unint64_t v31 = *(unsigned int *)(v30 + 8);
  if (a3)
  {
    if (v31)
    {
      int v34 = *(unsigned __int8 **)(v30 + 16);
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
    }
    else
    {
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
      int v34 = (unsigned __int8 *)(v33 + 12);
    }
    int v36 = *v34 | a2;
  }
  else
  {
    if (v31)
    {
      uint64_t v35 = *(unsigned __int8 **)(v30 + 16);
      uint64_t v32 = (v31 >> 24) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
    }
    else
    {
      LODWORD(v32) = BYTE3(v31) & 0xF;
      uint64_t v33 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v32 + 3) + v30;
      uint64_t v35 = (unsigned __int8 *)(v33 + 12);
    }
    int v36 = *v35 & ~a2;
  }
  unsigned int v37 = v31 >> 30;
  if (v37 == 2)
  {
    float result = *(int32x2_t **)v30;
    if (*(unsigned char *)(*(void *)v30 + 7689)) {
      goto LABEL_48;
    }
  }
  else if (v37 == 3)
  {
    float result = *(int32x2_t **)v30;
LABEL_48:
    float32x2_t v38 = *(unsigned char **)(v30 + 16);
    if (!v38)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v32).n128_u64[0];
      float32x2_t v38 = v39;
      *(void *)(v30 + 16) = v39;
      float result = *(int32x2_t **)v30;
    }
    *float32x2_t v38 = v36;
    float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v30, a4);
    *(_DWORD *)(v30 + 8) |= 1u;
    return result;
  }
  if (v36 != *(unsigned __int8 *)(v33 + 12))
  {
    *(unsigned char *)(v33 + 12) = v36;
    float result = *(int32x2_t **)v33;
    if (*(void *)v33)
    {
      float32x2_t v40 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (int32x2_t *)v40();
    }
  }
  return result;
}

int32x2_t *physx::NpRigidActorTemplate<physx::PxArticulationLink>::setActorFlags(int32x2_t *result, unsigned char *a2, int8x8_t a3)
{
  float v4 = result;
  uint64_t v5 = *((void *)&physx::NpActor::sLazyInitOffsets + result[1].u16[0] + 18);
  float v6 = (int32x2_t *)((char *)result + v5);
  unint64_t v7 = *(unsigned int *)((char *)result[1].u32 + v5);
  if (v7) {
    float32x2_t v8 = (int32x2_t *)v6[2];
  }
  else {
    float32x2_t v8 = (int32x2_t *)((char *)v6 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v7 >> 24) & 0xF) + 3) + 12);
  }
  uint64_t v9 = (uint64_t)*v6;
  int v10 = v8->u8[0];
  if ((*a2 & 8) != 0 || (v10 & 8) == 0)
  {
    if ((*a2 & 8) == 0 || (v10 & 8) != 0) {
      goto LABEL_34;
    }
    if (v9)
    {
      physx::NpActor::removeConstraintsFromScene(result + 3);
      uint64_t v5 = *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
      LODWORD(v7) = *(__int32 *)((char *)v4[1].i32 + v5);
    }
    int v16 = v10 | 8;
    uint64_t v17 = (uint64_t)v4 + v5;
    unsigned int v18 = BYTE3(v7) & 0xF;
    uint64_t v19 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v18 + 3);
    unsigned int v20 = v7 >> 30;
    if (v20 == 2)
    {
      uint64_t v21 = *(void **)v17;
      if (*(unsigned char *)(*(void *)v17 + 7689)) {
        goto LABEL_27;
      }
    }
    else if (v20 == 3)
    {
      uint64_t v21 = *(void **)v17;
LABEL_27:
      float v25 = *(unsigned char **)(v17 + 16);
      if (!v25)
      {
        a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v21, v18).n128_u64[0];
        float v25 = v26;
        *(void *)(v17 + 16) = v26;
        uint64_t v21 = *(void **)v17;
      }
      *float v25 = v16;
      physx::Scb::Scene::scheduleForUpdate(v21, v17, a3);
      *(_DWORD *)(v17 + 8) |= 1u;
LABEL_33:
      float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)v4 + 576))(v4);
      goto LABEL_34;
    }
    float v27 = (unsigned char *)(v19 + v17);
    if (v16 != *(unsigned __int8 *)(v19 + v17 + 12))
    {
      v27[12] = v16;
      if (*(void *)v27) {
        (*(void (**)(void))(**(void **)v27 + 16))(*(void *)v27);
      }
    }
    goto LABEL_33;
  }
  float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 584))(result);
  unsigned int v11 = v10 & 0xFFFFFFF7;
  uint64_t v12 = (uint64_t)v4 + *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
  unint64_t v13 = *(unsigned int *)(v12 + 8);
  uint64_t v14 = (v13 >> 24) & 0xF;
  unsigned int v15 = v13 >> 30;
  if (v15 == 2)
  {
    float result = *(int32x2_t **)v12;
    if (*(unsigned char *)(*(void *)v12 + 7689)) {
      goto LABEL_17;
    }
LABEL_20:
    uint64_t v24 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v14 + 3) + v12;
    if (v11 != *(unsigned __int8 *)(v24 + 12))
    {
      *(unsigned char *)(v24 + 12) = v11;
      float result = *(int32x2_t **)v24;
      if (*(void *)v24) {
        float result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)result + 16))(result);
      }
    }
    goto LABEL_23;
  }
  if (v15 != 3) {
    goto LABEL_20;
  }
  float result = *(int32x2_t **)v12;
LABEL_17:
  unsigned int v22 = *(unsigned char **)(v12 + 16);
  if (!v22)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v14).n128_u64[0];
    unsigned int v22 = v23;
    *(void *)(v12 + 16) = v23;
    float result = *(int32x2_t **)v12;
  }
  *unsigned int v22 = v11;
  float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v12, a3);
  *(_DWORD *)(v12 + 8) |= 1u;
LABEL_23:
  if (v9 && *(void *)&v4[4]) {
    float result = physx::NpActor::addConstraintsToSceneInternal(v4 + 3);
  }
LABEL_34:
  int v28 = *a2;
  uint64_t v29 = (uint64_t)v4 + *((void *)&physx::NpActor::sLazyInitOffsets + v4[1].u16[0] + 18);
  unint64_t v30 = *(unsigned int *)(v29 + 8);
  uint64_t v31 = (v30 >> 24) & 0xF;
  unsigned int v32 = v30 >> 30;
  if (v32 == 2)
  {
    float result = *(int32x2_t **)v29;
    if (*(unsigned char *)(*(void *)v29 + 7689)) {
      goto LABEL_38;
    }
  }
  else if (v32 == 3)
  {
    float result = *(int32x2_t **)v29;
LABEL_38:
    uint64_t v33 = *(unsigned char **)(v29 + 16);
    if (!v33)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v31).n128_u64[0];
      uint64_t v33 = v34;
      *(void *)(v29 + 16) = v34;
      float result = *(int32x2_t **)v29;
    }
    unsigned char *v33 = v28;
    float result = (int32x2_t *)physx::Scb::Scene::scheduleForUpdate(result, v29, a3);
    *(_DWORD *)(v29 + 8) |= 1u;
    return result;
  }
  uint64_t v35 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v31 + 3) + v29;
  if (v28 != *(unsigned __int8 *)(v35 + 12))
  {
    *(unsigned char *)(v35 + 12) = v28;
    float result = *(int32x2_t **)v35;
    if (*(void *)v35)
    {
      int v36 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (int32x2_t *)v36();
    }
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getActorFlags@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = result + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  unint64_t v3 = *(unsigned int *)(v2 + 8);
  if (v3) {
    float v4 = *(unsigned char **)(v2 + 16);
  }
  else {
    float v4 = (unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v3 >> 24) & 0xF) + 3) + v2 + 12);
  }
  *a2 = *v4;
  return result;
}

void *physx::NpActorTemplate<physx::PxArticulationLink>::setDominanceGroup(uint64_t a1, char a2, int8x8_t a3)
{
  uint64_t v4 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  uint64_t v6 = (v5 >> 24) & 0xF;
  uint64_t v7 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3);
  unsigned int v8 = v5 >> 30;
  if (v8 == 2)
  {
    uint64_t v9 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v8 == 3)
  {
    uint64_t v9 = *(void **)v4;
LABEL_5:
    uint64_t v10 = *(void *)(v4 + 16);
    if (!v10)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v9, v6).n128_u64[0];
      uint64_t v10 = v11;
      *(void *)(v4 + 16) = v11;
      uint64_t v9 = *(void **)v4;
    }
    *(unsigned char *)(v10 + 1) = a2;
    float result = physx::Scb::Scene::scheduleForUpdate(v9, v4, a3);
    *(_DWORD *)(v4 + 8) |= 2u;
    return result;
  }
  *(unsigned char *)(v7 + v4 + 14) = a2;
  float result = *(void **)(v4 + v7);
  if (result)
  {
    return physx::Sc::ActorSim::setActorsInteractionsDirty(result, 8, 0, 1, a3);
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getDominanceGroup(uint64_t a1)
{
  uint64_t v1 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  unint64_t v2 = *(unsigned int *)(v1 + 8);
  if ((v2 & 2) != 0) {
    unint64_t v3 = (unsigned __int8 *)(*(void *)(v1 + 16) + 1);
  }
  else {
    unint64_t v3 = (unsigned __int8 *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v2 >> 24) & 0xF) + 3) + v1 + 14);
  }
  return *v3;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::setOwnerClient(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = result + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(result + 8) + 18);
  if (*(void *)v9)
  {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpActorTemplate.h";
    uint64_t v11 = "Attempt to set the client id when an actor is already in a scene.";
    uint64_t v12 = physx::shdfnd::Foundation::mInstance;
    uint64_t v13 = 196;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  unint64_t v14 = *(unsigned int *)(v9 + 8);
  if (v14 >> 30 == 3 || v14 >> 30 == 2 && MEMORY[0x1E09])
  {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbActor.h";
    uint64_t v11 = "Attempt to set the client id when an actor is buffering";
    uint64_t v12 = physx::shdfnd::Foundation::mInstance;
    uint64_t v13 = 182;
    return physx::shdfnd::Foundation::error(v12, 8, (uint64_t)v10, v13, v11, a6, a7, a8, a9);
  }
  *(unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v14 >> 24) & 0xF) + 3) + v9 + 11) = a2;
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getOwnerClient(uint64_t a1)
{
  uint64_t v1 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  return *(unsigned __int8 *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v1 + 11) & 0xF) + 3)
                            + v1
                            + 11);
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::getAggregate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2) {
    return 0;
  }
  for (uint64_t i = *(void *)(v1 + 72) + 8; *(unsigned char *)(i - 8) != 1; i += 16)
  {
    if (!--v2) {
      return 0;
    }
  }
  return *(void *)i;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxArticulationLink>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return 1;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::detachShape(physx::PxRigidActor *a1, physx::NpShape *a2, char a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v13 = (physx::PxRigidActor *)((char *)a1 + 40);
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 247, "PxRigidActor::detachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a7, a8, a9, v19);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  uint64_t result = physx::NpShapeManager::detachShape(v13, a2, a1, a3, a4);
  if ((result & 1) == 0)
  {
    uint64_t v18 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v18, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 253, "PxRigidActor::detachShape: shape is not attached to this actor!", v15, v16, v17, a10);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::getNbShapes(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::getShapes(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  uint64_t v4 = (void *)(a1 + 40);
  int v5 = *(unsigned __int16 *)(a1 + 48);
  if (v5 != 1) {
    uint64_t v4 = (void *)*v4;
  }
  unsigned int v6 = (v5 - a4) & ~((v5 - a4) >> 31);
  if (v6 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v6;
  }
  if (result)
  {
    unsigned int v8 = &v4[a4];
    uint64_t v9 = result;
    do
    {
      uint64_t v10 = *v8++;
      *a2++ = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::getNbConstraints(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 80);
  if (!v2) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v4 = *(unsigned __int8 **)(v1 + 72);
  do
  {
    int v5 = *v4;
    v4 += 16;
    if (v5) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
    --v2;
  }
  while (v2);
  return result;
}

unint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::getConstraints(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return physx::NpActor::getConnectors<physx::Gu::BVHStructure>(a1 + 24, 0, a2, a3, a4);
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getCMassLocalPose@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 381) & 4) != 0) {
    uint64_t v2 = *(void *)(a1 + 112) + 224;
  }
  else {
    uint64_t v2 = a1 + 176;
  }
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(void *)(a2 + 16) = *(void *)(v2 + 16);
  float result = *(float *)(v2 + 24);
  *(float *)(a2 + 24) = result;
  return result;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMass(uint64_t *result, float a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t)(result + 12);
  float v4 = 1.0 / a2;
  BOOL v5 = a2 <= 0.0;
  int8x8_t v6 = 0;
  if (v5) {
    float v7 = 0.0;
  }
  else {
    float v7 = v4;
  }
  unsigned int v8 = *((_DWORD *)result + 26);
  if (v8 >> 30 == 2)
  {
    float result = *(uint64_t **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_8;
    }
  }
  else if (v8 >> 30 == 3)
  {
    float result = *(uint64_t **)v3;
LABEL_8:
    uint64_t v9 = v2[14];
    if (!v9)
    {
      int8x8_t v6 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v8) & 0xF).n128_u64[0];
      uint64_t v9 = v10;
      v2[14] = v10;
      float result = (uint64_t *)v2[12];
    }
    *(float *)(v9 + 164) = v7;
    float result = physx::Scb::Scene::scheduleForUpdate(result, v3, v6);
    *((_DWORD *)v2 + 95) |= 1u;
    return result;
  }
  uint64_t v11 = v2[38];
  if (v11 && *(unsigned char *)(v11 + 31) == 1)
  {
    *(float *)(v11 + 44) = v7;
  }
  else
  {
    *((float *)v2 + 67) = v7;
    return updateBodySim(v2 + 16);
  }
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMass(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 380))
  {
    uint64_t v2 = (float *)(*(void *)(a1 + 112) + 164);
  }
  else
  {
    uint64_t v1 = *(void *)(a1 + 304);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      uint64_t v2 = (float *)(v1 + 44);
    }
    else {
      uint64_t v2 = (float *)(a1 + 268);
    }
  }
  float result = 0.0;
  if (*v2 > 0.0) {
    return 1.0 / *v2;
  }
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getInvMass(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 380))
  {
    uint64_t v2 = *(void *)(a1 + 112) + 164;
  }
  else
  {
    uint64_t v1 = *(void *)(a1 + 304);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      uint64_t v2 = v1 + 44;
    }
    else {
      uint64_t v2 = a1 + 268;
    }
  }
  return *(float *)v2;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMassSpaceInertiaTensor(uint64_t a1, float32x2_t *a2)
{
  uint64_t v3 = a1 + 96;
  __asm { FMOV            V2.2S, #1.0 }
  int8x8_t v9 = vbic_s8((int8x8_t)vdiv_f32(_D2, *a2), (int8x8_t)vceqz_f32(*a2));
  float v10 = a2[1].f32[0];
  float v11 = 1.0 / v10;
  _ZF = v10 == 0.0;
  int8x8_t v12 = 0;
  if (_ZF) {
    float v13 = 0.0;
  }
  else {
    float v13 = v11;
  }
  int8x8_t v19 = v9;
  float v20 = v13;
  unsigned int v14 = *(_DWORD *)(a1 + 104);
  if (v14 >> 30 == 2)
  {
    uint64_t v15 = *(void **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_8;
    }
    return physx::Sc::BodyCore::setInverseInertia((uint64_t *)(a1 + 128), (uint64_t)&v19);
  }
  if (v14 >> 30 != 3) {
    return physx::Sc::BodyCore::setInverseInertia((uint64_t *)(a1 + 128), (uint64_t)&v19);
  }
  uint64_t v15 = *(void **)v3;
LABEL_8:
  uint64_t v16 = *(void *)(a1 + 112);
  if (!v16)
  {
    int8x8_t v12 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v15, HIBYTE(v14) & 0xF).n128_u64[0];
    uint64_t v16 = v17;
    *(void *)(a1 + 112) = v17;
    uint64_t v15 = *(void **)(a1 + 96);
  }
  *(int8x8_t *)(v16 + 168) = v9;
  *(float *)(v16 + 176) = v13;
  float result = physx::Scb::Scene::scheduleForUpdate(v15, v3, v12);
  *(_DWORD *)(a1 + 380) |= 2u;
  return result;
}

float32x2_t *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMassSpaceInertiaTensor@<X0>(float32x2_t *result@<X0>, uint64_t a2@<X8>)
{
  if ((result[47].i8[4] & 2) != 0)
  {
    uint64_t v3 = (float32x2_t *)(*(void *)&result[14] + 168);
  }
  else
  {
    uint64_t v2 = (float32x2_t *)result[38];
    if (v2 && v2[3].i8[7] == 1) {
      uint64_t v3 = v2 + 4;
    }
    else {
      uint64_t v3 = result + 32;
    }
  }
  float v4 = v3[1].f32[0];
  float v5 = 1.0 / v4;
  _ZF = v4 == 0.0;
  float v7 = 0.0;
  if (!_ZF) {
    float v7 = v5;
  }
  __asm { FMOV            V3.2S, #1.0 }
  *(int8x8_t *)a2 = vbic_s8((int8x8_t)vdiv_f32(_D3, *v3), (int8x8_t)vceqz_f32(*v3));
  *(float *)(a2 + 8) = v7;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMassSpaceInvInertiaTensor@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(unsigned char *)(a1 + 380) & 2) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 112) + 168;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 304);
    if (v2 && *(unsigned char *)(v2 + 31) == 1) {
      uint64_t v3 = v2 + 32;
    }
    else {
      uint64_t v3 = a1 + 256;
    }
  }
  *(void *)a2 = *(void *)v3;
  float result = *(float *)(v3 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getLinearVelocity@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 348);
  float result = *(float *)(a1 + 356);
  *(float *)(a2 + 8) = result;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getAngularVelocity@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 360);
  float result = *(float *)(a1 + 368);
  *(float *)(a2 + 8) = result;
  return result;
}

void physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setRigidBodyFlag(uint64_t a1, int a2, int a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((*(unsigned char *)(a1 + 381) & 0x40) != 0) {
    float v11 = (unsigned __int8 *)(*(void *)(a1 + 112) + 348);
  }
  else {
    float v11 = (unsigned __int8 *)(a1 + 172);
  }
  int v12 = *v11;
  if (a3) {
    int v13 = v12 | a2;
  }
  else {
    int v13 = v12 & ~a2;
  }
  if ((~v13 & 5) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 476, "RigidBody::setRigidBodyFlag: kinematic bodies with CCD enabled are not supported! CCD will be ignored.", a7, a8, a9, v32);
    v13 &= ~4u;
  }
  if ((~v13 & 0x24) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 483, "RigidBody::setRigidBodyFlag: eENABLE_CCD can't be raised as the same time as eENABLE_SPECULATIVE_CCD! eENABLE_SPECULATIVE_CCD will be ignored.", a7, a8, a9, v32);
    v13 &= ~0x20u;
  }
  unsigned int v14 = (uint64_t *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v15 = *v14;
    if (v15) {
      uint64_t v16 = v15 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  if (v16) {
    uint64_t v17 = v16 + 32;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v12 & 1) == 0 || (v13)
  {
    if ((v12 & 1) != 0 || (v13 & 1) == 0)
    {
LABEL_56:
      if ((v12 & 1) != 0
        && (v13 & 1) != 0
        && ((v13 ^ v12) & 2) != 0
        && ((*(unsigned char *)(a1 + 381) & 0x80) != 0
         || *(_DWORD *)(a1 + 104) >> 30 != 3
         && (uint64_t v31 = *(void *)(a1 + 304)) != 0
         && *(unsigned char *)(v31 + 31) == 1
         && *(unsigned char *)(v31 + 28)))
      {
        if (v16)
        {
          physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
          ++*(_DWORD *)(v16 + 8732);
        }
      }
LABEL_66:
      char v33 = v13;
      physx::Scb::Body::setFlags((physx::Sc::BodyCore *)(a1 + 96), &v33, *(int8x8_t *)&a4);
      return;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != 2)
    {
      if (*(_DWORD *)(a1 + 104) >> 30 == 1)
      {
        uint64_t v29 = *(void *)(a1 + 304);
        if (v29)
        {
          if (*(unsigned char *)(v29 + 31) != 1) {
            physx::Sc::BodyCore::setupSimStateData(a1 + 128, *(void *)(*(void *)(a1 + 96) + 4384), 1, 0);
          }
        }
      }
      if (v16)
      {
        a4 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v16 + 4700), (int32x2_t)0x1FFFFFFFFLL));
        *(double *)(v16 + 4700) = a4;
      }
      goto LABEL_66;
    }
    uint64_t v28 = physx::shdfnd::Foundation::mInstance;
    physx::shdfnd::Foundation::error(v28, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 540, "RigidBody::setRigidBodyFlag: kinematic articulation links are not supported!", v25, v26, v27, a10);
  }
  else
  {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 48);
    uint64_t v19 = a1 + 40;
    if (v18 != 1)
    {
      if (*(_WORD *)(a1 + 48))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        goto LABEL_24;
      }
LABEL_28:
      if ((v12 & 2) != 0)
      {
        if ((*(unsigned char *)(a1 + 381) & 0x80) != 0)
        {
          if (!v16)
          {
LABEL_53:
            if (*(_DWORD *)(a1 + 104) >> 30 == 1)
            {
              uint64_t v30 = *(void *)(a1 + 304);
              if (v30) {
                physx::Sc::BodyCore::tearDownSimStateData(a1 + 128, *(void *)(*(void *)(a1 + 96) + 4384), *(unsigned __int8 *)(v30 + 31) == 1);
              }
            }
            goto LABEL_56;
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 104) >> 30 == 3) {
            goto LABEL_35;
          }
          uint64_t v24 = *(void *)(a1 + 304);
          if (!v24 || *(unsigned char *)(v24 + 31) != 1 || !*(unsigned char *)(v24 + 28) || !v16) {
            goto LABEL_35;
          }
        }
        physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
        ++*(_DWORD *)(v16 + 8732);
LABEL_52:
        a4 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v17 + 4668), (int32x2_t)0xFFFFFFFF00000001));
        *(double *)(v17 + 4668) = a4;
        goto LABEL_53;
      }
LABEL_35:
      if (!v16) {
        goto LABEL_53;
      }
      goto LABEL_52;
    }
LABEL_24:
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v19 + 312))(&v34);
      if (v34)
      {
        int v23 = *(_DWORD *)(*(void *)v19 + 152);
        if ((v23 | 4) == 5 || v23 == 6) {
          break;
        }
      }
      v19 += 8;
      if (!--v18) {
        goto LABEL_28;
      }
    }
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 513, "RigidBody::setRigidBodyFlag: dynamic meshes/planes/heightfields are not supported!", v20, v21, v22, v32);
  }
}

void physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setRigidBodyFlags(uint64_t a1, unsigned __int8 *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((*(unsigned char *)(a1 + 381) & 0x40) != 0) {
    float v11 = (unsigned __int8 *)(*(void *)(a1 + 112) + 348);
  }
  else {
    float v11 = (unsigned __int8 *)(a1 + 172);
  }
  int v12 = *v11;
  int v13 = *a2;
  if ((~v13 & 5) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 476, "RigidBody::setRigidBodyFlag: kinematic bodies with CCD enabled are not supported! CCD will be ignored.", a7, a8, a9, v32);
    v13 &= ~4u;
  }
  if ((~v13 & 0x24) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 483, "RigidBody::setRigidBodyFlag: eENABLE_CCD can't be raised as the same time as eENABLE_SPECULATIVE_CCD! eENABLE_SPECULATIVE_CCD will be ignored.", a7, a8, a9, v32);
    v13 &= 0xDFu;
  }
  unsigned int v14 = (uint64_t *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v14 + 2) >> 30) - 1) > 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v15 = *v14;
    if (v15) {
      uint64_t v16 = v15 - 16;
    }
    else {
      uint64_t v16 = 0;
    }
  }
  if (v16) {
    uint64_t v17 = v16 + 32;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v12 & 1) == 0 || (v13)
  {
    if ((v12 & 1) != 0 || (v13 & 1) == 0)
    {
LABEL_53:
      if ((v12 & 1) != 0
        && (v13 & 1) != 0
        && ((v13 ^ v12) & 2) != 0
        && ((*(unsigned char *)(a1 + 381) & 0x80) != 0
         || *(_DWORD *)(a1 + 104) >> 30 != 3
         && (uint64_t v31 = *(void *)(a1 + 304)) != 0
         && *(unsigned char *)(v31 + 31) == 1
         && *(unsigned char *)(v31 + 28)))
      {
        if (v16)
        {
          physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
          ++*(_DWORD *)(v16 + 8732);
        }
      }
LABEL_63:
      char v33 = v13;
      physx::Scb::Body::setFlags((physx::Sc::BodyCore *)(a1 + 96), &v33, *(int8x8_t *)&a3);
      return;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != 2)
    {
      if (*(_DWORD *)(a1 + 104) >> 30 == 1)
      {
        uint64_t v29 = *(void *)(a1 + 304);
        if (v29)
        {
          if (*(unsigned char *)(v29 + 31) != 1) {
            physx::Sc::BodyCore::setupSimStateData(a1 + 128, *(void *)(*(void *)(a1 + 96) + 4384), 1, 0);
          }
        }
      }
      if (v16)
      {
        a3 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v16 + 4700), (int32x2_t)0x1FFFFFFFFLL));
        *(double *)(v16 + 4700) = a3;
      }
      goto LABEL_63;
    }
    uint64_t v28 = physx::shdfnd::Foundation::mInstance;
    physx::shdfnd::Foundation::error(v28, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 540, "RigidBody::setRigidBodyFlag: kinematic articulation links are not supported!", v25, v26, v27, a10);
  }
  else
  {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 48);
    uint64_t v19 = a1 + 40;
    if (v18 != 1)
    {
      if (*(_WORD *)(a1 + 48))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        goto LABEL_21;
      }
LABEL_25:
      if ((v12 & 2) != 0)
      {
        if ((*(unsigned char *)(a1 + 381) & 0x80) != 0)
        {
          if (!v16)
          {
LABEL_50:
            if (*(_DWORD *)(a1 + 104) >> 30 == 1)
            {
              uint64_t v30 = *(void *)(a1 + 304);
              if (v30) {
                physx::Sc::BodyCore::tearDownSimStateData(a1 + 128, *(void *)(*(void *)(a1 + 96) + 4384), *(unsigned __int8 *)(v30 + 31) == 1);
              }
            }
            goto LABEL_53;
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 104) >> 30 == 3) {
            goto LABEL_32;
          }
          uint64_t v24 = *(void *)(a1 + 304);
          if (!v24 || *(unsigned char *)(v24 + 31) != 1 || !*(unsigned char *)(v24 + 28) || !v16) {
            goto LABEL_32;
          }
        }
        physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v16 + 8640, (_WORD *)a1);
        ++*(_DWORD *)(v16 + 8732);
LABEL_49:
        a3 = COERCE_DOUBLE(vadd_s32(*(int32x2_t *)(v17 + 4668), (int32x2_t)0xFFFFFFFF00000001));
        *(double *)(v17 + 4668) = a3;
        goto LABEL_50;
      }
LABEL_32:
      if (!v16) {
        goto LABEL_50;
      }
      goto LABEL_49;
    }
LABEL_21:
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v19 + 312))(&v34);
      if (v34)
      {
        int v23 = *(_DWORD *)(*(void *)v19 + 152);
        if ((v23 | 4) == 5 || v23 == 6) {
          break;
        }
      }
      v19 += 8;
      if (!--v18) {
        goto LABEL_25;
      }
    }
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidBodyTemplate.h", 513, "RigidBody::setRigidBodyFlag: dynamic meshes/planes/heightfields are not supported!", v20, v21, v22, v32);
  }
}

uint64_t physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getRigidBodyFlags@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if ((*(unsigned char *)(result + 381) & 0x40) != 0) {
    uint64_t v2 = (unsigned char *)(*(void *)(result + 112) + 348);
  }
  else {
    uint64_t v2 = (unsigned char *)(result + 172);
  }
  *a2 = *v2;
  return result;
}

void *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMinCCDAdvanceCoefficient(void *result, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  uint64_t v3 = result;
  uint64_t v4 = (uint64_t)(result + 12);
  unsigned int v5 = *((_DWORD *)result + 26);
  if (v5 >> 30 == 2)
  {
    float result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 51) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[14];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[14] = v7;
    float result = (void *)v3[12];
  }
  *(_DWORD *)(v6 + 200) = v2;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 95) |= 0x80u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMinCCDAdvanceCoefficient(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 380) & 0x80) != 0) {
    uint64_t v1 = *(void *)(a1 + 112) + 200;
  }
  else {
    uint64_t v1 = a1 + 204;
  }
  return *(float *)v1;
}

float *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMaxDepenetrationVelocity(float *result, double a2)
{
  __int32 v2 = result;
  uint64_t v3 = (uint64_t)(result + 24);
  float v4 = -*(float *)&a2;
  unsigned int v5 = *((_DWORD *)result + 26);
  if (v5 >> 30 == 2)
  {
    float result = *(float **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    v2[55] = v4;
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(float **)v3;
LABEL_5:
  uint64_t v6 = *((void *)v2 + 14);
  if (!v6)
  {
    *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    *((void *)v2 + 14) = v7;
    float result = (float *)*((void *)v2 + 12);
  }
  *(float *)(v6 + 252) = v4;
  float result = (float *)physx::Scb::Scene::scheduleForUpdate(result, v3, *(int8x8_t *)&a2);
  *((_DWORD *)v2 + 95) |= 0x800u;
  return result;
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMaxDepenetrationVelocity(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 381) & 8) != 0) {
    uint64_t v1 = (float *)(*(void *)(a1 + 112) + 252);
  }
  else {
    uint64_t v1 = (float *)(a1 + 220);
  }
  return -*v1;
}

uint64_t *physx::NpRigidBodyTemplate<physx::PxArticulationLink>::setMaxContactImpulse(uint64_t a1, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  uint64_t v4 = a1 + 96;
  unsigned int v5 = *(_DWORD *)(a1 + 104);
  if (v5 >> 30 == 2)
  {
    uint64_t v6 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    uint64_t v6 = *(void **)v4;
LABEL_5:
    uint64_t v7 = *(void *)(a1 + 112);
    if (!v7)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v7 = v8;
      *(void *)(a1 + 112) = v8;
      uint64_t v6 = *(void **)(a1 + 96);
    }
    *(_DWORD *)(v7 + 260) = v2;
    float result = physx::Scb::Scene::scheduleForUpdate(v6, v4, a2);
    *(_DWORD *)(a1 + 380) |= 0x2000u;
    return result;
  }
  *(_DWORD *)(a1 + 272) = a2.i32[0];
  return updateBodySim((uint64_t *)(a1 + 128));
}

float physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getMaxContactImpulse(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 381) & 0x20) != 0) {
    uint64_t v1 = *(void *)(a1 + 112) + 260;
  }
  else {
    uint64_t v1 = a1 + 272;
  }
  return *(float *)v1;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxArticulationLink>::getInternalIslandNodeIndex(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    return *(_DWORD *)(v1 + 176) >> 7;
  }
  else {
    return 0x1FFFFFFLL;
  }
}

uint64_t physx::NpArticulationLink::isSubordinate(physx::NpArticulationLink *this)
{
  return 1;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::release(uint64_t a1)
{
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, a1, 0, 1);
  uint64_t v3 = (uint64_t *)(a1 + 16);
  if (((*(_DWORD *)(a1 + 24) >> 30) - 1) <= 1 && *v3) {
    physx::Scb::Scene::remove<physx::Scb::ArticulationJoint>(*v3, a1 + 16, (int32x2_t *)(*v3 + 8064), v2);
  }
  return physx::Scb::Base::destroy(a1 + 16);
}

const char *physx::PxArticulationJoint::getConcreteTypeName(physx::PxArticulationJoint *this)
{
  return "PxArticulationJoint";
}

BOOL physx::PxArticulationJoint::isKindOf(physx::PxArticulationJoint *this, const char *a2)
{
  return !strcmp("PxArticulationJoint", a2) || !strcmp("PxArticulationJointBase", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getParentArticulationLink(uint64_t a1)
{
  return *(void *)(a1 + 424);
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::setParentPose(uint64_t a1, float *a2)
{
  return physx::PxArticulationJointImpl::setParentPose(a1 + 16, a2);
}

float physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getParentPose@<S0>(uint64_t a1@<X0>, physx::PxArticulationJointImpl *a2@<X8>)
{
  return physx::PxArticulationJointImpl::getParentPose(a2, a1 + 16);
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getChildArticulationLink(uint64_t a1)
{
  return *(void *)(a1 + 432);
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::setChildPose(uint64_t a1, float *a2)
{
  return physx::PxArticulationJointImpl::setChildPose(a1 + 16, a2);
}

float physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getChildPose@<S0>(uint64_t a1@<X0>, physx::PxArticulationJointImpl *a2@<X8>)
{
  return physx::PxArticulationJointImpl::getChildPose(a2, a1 + 16);
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::getImpl(uint64_t a1)
{
  return a1 + 16;
}

{
  return a1 + 16;
}

uint64_t physx::NpArticulationJoint::isSubordinate(physx::NpArticulationJoint *this)
{
  return 1;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::release(uint64_t a1)
{
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, a1, *(void *)(a1 + 16), 1);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (v3)
  {
    LODWORD(v4) = 0;
    do
    {
      uint64_t v4 = v4 % v3;
      uint64_t v5 = *(void *)(*(void *)(a1 + 144) + 8 * v4);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 520))(v5)) {
        LODWORD(v4) = v4 + 1;
      }
      else {
        physx::NpArticulationLink::releaseInternal(*(physx::NpArticulationLink **)(*(void *)(a1 + 144) + 8 * v4));
      }
      unsigned int v3 = *(_DWORD *)(a1 + 152);
    }
    while (v3);
  }
  uint64_t v6 = (int32x2_t **)(a1 + 24);
  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1)
  {
    uint64_t v7 = *v6;
    if (*v6)
    {
      physx::Scb::Scene::removeArticulation(*v6, (physx::Scb::Articulation *)(a1 + 24), v2);
      uint64_t v9 = a1;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v7[1143], &v9);
    }
  }
  *(_DWORD *)(a1 + 152) = 0;
  return physx::Scb::Base::destroy(a1 + 24);
}

const char *physx::NpArticulation::getConcreteTypeName(physx::NpArticulation *this)
{
  return "PxArticulation";
}

BOOL physx::NpArticulation::isKindOf(physx::NpArticulation *this, const char *a2)
{
  return !strcmp("PxArticulation", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getScene(uint64_t a1)
{
  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) > 1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1) {
    return v1 - 16;
  }
  else {
    return 0;
  }
}

void *physx::NpArticulationTemplate<physx::PxArticulation>::setSolverIterationCounts(void *result, unsigned __int8 a2, __int16 a3, int8x8_t a4)
{
  uint64_t v4 = result;
  uint64_t v5 = (uint64_t)(result + 3);
  __int16 v6 = a2 | (unsigned __int16)(a3 << 8);
  unsigned int v7 = *((_DWORD *)result + 8);
  if (v7 >> 30 == 2)
  {
    float result = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_WORD *)v4 + 34) = v6;
    return result;
  }
  if (v7 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v5;
LABEL_5:
  uint64_t v8 = v4[5];
  if (!v8)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v7) & 0xF).n128_u64[0];
    uint64_t v8 = v9;
    v4[5] = v9;
    float result = (void *)v4[3];
  }
  *(_WORD *)(v8 + 20) = v6;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v5, a4);
  *((_DWORD *)v4 + 8) |= 0x20u;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getSolverIterationCounts(uint64_t result, _DWORD *a2, unsigned int *a3)
{
  if ((*(unsigned char *)(result + 32) & 0x20) != 0) {
    unsigned int v3 = (unsigned __int16 *)(*(void *)(result + 40) + 20);
  }
  else {
    unsigned int v3 = (unsigned __int16 *)(result + 68);
  }
  unsigned int v4 = *v3;
  *a3 = v4 >> 8;
  *a2 = v4;
  return result;
}

BOOL physx::NpArticulationTemplate<physx::PxArticulation>::isSleeping(uint64_t a1)
{
  return *(unsigned char *)(a1 + 100) != 0;
}

void *physx::NpArticulationTemplate<physx::PxArticulation>::setSleepThreshold(void *result, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = result;
  uint64_t v4 = (uint64_t)(result + 3);
  unsigned int v5 = *((_DWORD *)result + 8);
  if (v5 >> 30 == 2)
  {
    float result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 19) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[5] = v7;
    float result = (void *)v3[3];
  }
  *(_DWORD *)(v6 + 16) = v2;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 8) |= 0x10u;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulation>::getSleepThreshold(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0) {
    uint64_t v1 = *(void *)(a1 + 40) + 16;
  }
  else {
    uint64_t v1 = a1 + 76;
  }
  return *(float *)v1;
}

void *physx::NpArticulationTemplate<physx::PxArticulation>::setStabilizationThreshold(void *result, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = result;
  uint64_t v4 = (uint64_t)(result + 3);
  unsigned int v5 = *((_DWORD *)result + 8);
  if (v5 >> 30 == 2)
  {
    float result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 20) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[5] = v7;
    float result = (void *)v3[3];
  }
  *(_DWORD *)(v6 + 24) = v2;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 8) |= 0x40u;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulation>::getStabilizationThreshold(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 32) & 0x40) != 0) {
    uint64_t v1 = *(void *)(a1 + 40) + 24;
  }
  else {
    uint64_t v1 = a1 + 80;
  }
  return *(float *)v1;
}

float *physx::NpArticulationTemplate<physx::PxArticulation>::setWakeCounter(float *result, double a2)
{
  float v2 = *(float *)&a2;
  unsigned int v3 = result;
  if (*((_DWORD *)result + 38))
  {
    unint64_t v4 = 0;
    do
    {
      *(float *)&a2 = v2;
      float result = (float *)physx::Scb::Body::setWakeCounter((physx::Scb::Body *)(*(void *)(*((void *)v3 + 18) + 8 * v4++) + 96), a2);
    }
    while (v4 < *((unsigned int *)v3 + 38));
  }
  uint64_t v5 = (uint64_t)(v3 + 6);
  v3[24] = v2;
  int v6 = *((_DWORD *)v3 + 8) >> 30;
  if (v6 == 2)
  {
    uint64_t v7 = *(void *)v5;
    if (!*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_10;
    }
LABEL_8:
    if (v2 <= 0.0)
    {
      float result = (float *)physx::Scb::Scene::scheduleForUpdate(*((void **)v3 + 3), v5, *(int8x8_t *)&a2);
      unsigned int v8 = *((_DWORD *)v3 + 8) | 0x80;
    }
    else
    {
      *((unsigned char *)v3 + 100) = 0;
      float result = (float *)physx::Scb::Scene::scheduleForUpdate(*((void **)v3 + 3), v5, *(int8x8_t *)&a2);
      unsigned int v8 = v3[8] & 0xFFFFFC7F | 0x280;
    }
    *((_DWORD *)v3 + 8) = v8;
    return result;
  }
  if (v6 == 3) {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)v5;
LABEL_10:
  if (v2 > 0.0)
  {
    if (v7) {
      *((unsigned char *)v3 + 100) = 0;
    }
  }
  v3[21] = v2;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulation>::getWakeCounter(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

void *physx::NpArticulationTemplate<physx::PxArticulation>::wakeUp(uint64_t a1, double a2)
{
  return physx::PxArticulationImpl::wakeUp((physx::PxArticulationImpl *)(a1 + 24), a2);
}

void *physx::NpArticulationTemplate<physx::PxArticulation>::putToSleep(void *result, int8x8_t a2)
{
  float v2 = result;
  if (*((_DWORD *)result + 38))
  {
    unint64_t v3 = 0;
    do
      float result = physx::Scb::Body::putToSleepInternal((physx::Scb::Body *)(*(void *)(v2[18] + 8 * v3++) + 96), a2);
    while (v3 < *((unsigned int *)v2 + 38));
  }
  uint64_t v4 = (uint64_t)(v2 + 3);
  *((_DWORD *)v2 + 24) = 0;
  *((unsigned char *)v2 + 100) = 1;
  int v5 = *((_DWORD *)v2 + 8) >> 30;
  if (v5 == 2)
  {
    float result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_8;
    }
  }
  else if (v5 == 3)
  {
    float result = *(void **)v4;
LABEL_8:
    float result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
    *((_DWORD *)v2 + 8) = v2[4] & 0xFFFFFC7F | 0x180;
    return result;
  }
  *((_DWORD *)v2 + 21) = 0;
  return result;
}

physx::NpArticulationLink *physx::NpArticulationTemplate<physx::PxArticulation>::createLink(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    if (!v9)
    {
      uint64_t v10 = physx::shdfnd::Foundation::mInstance;
      float v11 = "Root articulation link must have NULL parent pointer!";
      uint64_t v12 = 332;
LABEL_6:
      physx::shdfnd::Foundation::error(v10, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationTemplate.h", v12, v11, a6, a7, a8, v26.i8[0]);
      return 0;
    }
  }
  else if (v9)
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    float v11 = "Non-root articulation link must have valid parent pointer!";
    uint64_t v12 = 338;
    goto LABEL_6;
  }
  ++*(_DWORD *)(a1 + 176);
  _Q0 = *a3;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a3->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned long long *)a3);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  float32x4_t v26 = vdivq_f32(*a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  uint64_t v27 = a3[1].i64[0];
  __int32 v28 = a3[1].i32[2];
  ArticulationLinunint64_t k = (physx::NpArticulationLink *)physx::NpFactory::createArticulationLink(physx::NpFactory::mInstance, a1, a2, v26.f32, a5, a6, a7, a8);
  if (ArticulationLink)
  {
    if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1)
    {
      uint64_t v23 = *(void *)(a1 + 24);
      if (v23) {
        physx::NpScene::addArticulationLink((int32x2_t *)(v23 - 16), ArticulationLink, v22);
      }
    }
    v26.i64[0] = (uint64_t)ArticulationLink;
    uint64_t v24 = *(unsigned int *)(a1 + 152);
    if ((*(_DWORD *)(a1 + 156) & 0x7FFFFFFFu) <= v24)
    {
      physx::shdfnd::Array<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::growAndPushBack(a1 + 104, &v26);
    }
    else
    {
      *(void *)(*(void *)(a1 + 144) + 8 * v24) = ArticulationLink;
      *(_DWORD *)(a1 + 152) = v24 + 1;
    }
  }
  return ArticulationLink;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getNbLinks(uint64_t a1)
{
  return *(unsigned int *)(a1 + 152);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getLinks(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = (*(_DWORD *)(a1 + 152) - a4) & ~((int)(*(_DWORD *)(a1 + 152) - a4) >> 31);
  if (v5 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v5;
  }
  if (result)
  {
    uint64_t v7 = (uint64_t *)(*(void *)(a1 + 144) + 8 * a4);
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 168) = a2;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getName(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

float physx::NpArticulationTemplate<physx::PxArticulation>::getWorldBounds@<S0>(uint64_t a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  if (*(_DWORD *)(a1 + 152))
  {
    unint64_t v6 = 0;
    float v7 = 8.5071e37;
    float v8 = -8.5071e37;
    float v9 = -8.5071e37;
    float v10 = -8.5071e37;
    float v11 = 8.5071e37;
    float v12 = 8.5071e37;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, float))(**(void **)(*(void *)(a1 + 144) + 8 * v6) + 80))(&v20, 1.01);
      if (v12 >= *(float *)&v20) {
        float v12 = *(float *)&v20;
      }
      if (v11 >= *((float *)&v20 + 1)) {
        float v11 = *((float *)&v20 + 1);
      }
      if (v7 >= v21) {
        float v7 = v21;
      }
      if (v10 <= v22) {
        float v10 = v22;
      }
      if (v9 <= v23) {
        float v9 = v23;
      }
      if (v8 <= v24) {
        float v8 = v24;
      }
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 152));
  }
  else
  {
    float v10 = -8.5071e37;
    float v12 = 8.5071e37;
    float v11 = 8.5071e37;
    float v7 = 8.5071e37;
    float v9 = -8.5071e37;
    float v8 = -8.5071e37;
  }
  float v13 = (float)(v12 + v10) * 0.5;
  float v14 = (float)(v11 + v9) * 0.5;
  float v15 = (float)(v7 + v8) * 0.5;
  float v16 = (float)((float)(v10 - v12) * 0.5) * a3;
  float v17 = (float)((float)(v9 - v11) * 0.5) * a3;
  float v18 = (float)((float)(v8 - v7) * 0.5) * a3;
  *a2 = v13 - v16;
  a2[1] = v14 - v17;
  a2[2] = v15 - v18;
  a2[3] = v13 + v16;
  float result = v15 + v18;
  a2[4] = v14 + v17;
  a2[5] = v15 + v18;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getAggregate(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::getImpl(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 136)) {
    physx::Cm::ArrayAccess<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::store(a1 + 104, a2);
  }
  uint64_t v4 = *(void *)(a1 + 168);
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulation>::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 152);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v2;
    do
    {
      float result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)(v4 + 144) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::release(uint64_t a1)
{
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, a1, 0, 1);
  unint64_t v3 = (uint64_t *)(a1 + 16);
  if (((*(_DWORD *)(a1 + 24) >> 30) - 1) <= 1 && *v3) {
    physx::Scb::Scene::remove<physx::Scb::ArticulationJoint>(*v3, a1 + 16, (int32x2_t *)(*v3 + 8064), v2);
  }
  return physx::Scb::Base::destroy(a1 + 16);
}

const char *physx::PxArticulationJointReducedCoordinate::getConcreteTypeName(physx::PxArticulationJointReducedCoordinate *this)
{
  return "PxArticulationJointReducedCoordinate";
}

BOOL physx::PxArticulationJointReducedCoordinate::isKindOf(physx::PxArticulationJointReducedCoordinate *this, const char *a2)
{
  return !strcmp("PxArticulationJointReducedCoordinate", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getParentArticulationLink(uint64_t a1)
{
  return *(void *)(a1 + 424);
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::setParentPose(uint64_t a1, float *a2)
{
  return physx::PxArticulationJointImpl::setParentPose(a1 + 16, a2);
}

float physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getParentPose@<S0>(uint64_t a1@<X0>, physx::PxArticulationJointImpl *a2@<X8>)
{
  return physx::PxArticulationJointImpl::getParentPose(a2, a1 + 16);
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getChildArticulationLink(uint64_t a1)
{
  return *(void *)(a1 + 432);
}

physx::Sc::ArticulationJointSim *physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::setChildPose(uint64_t a1, float *a2)
{
  return physx::PxArticulationJointImpl::setChildPose(a1 + 16, a2);
}

float physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getChildPose@<S0>(uint64_t a1@<X0>, physx::PxArticulationJointImpl *a2@<X8>)
{
  return physx::PxArticulationJointImpl::getChildPose(a2, a1 + 16);
}

uint64_t physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::getImpl(uint64_t a1)
{
  return a1 + 16;
}

{
  return a1 + 16;
}

uint64_t physx::NpArticulationJointReducedCoordinate::isSubordinate(physx::NpArticulationJointReducedCoordinate *this)
{
  return 1;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::release(uint64_t a1)
{
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, a1, *(void *)(a1 + 16), 1);
  unsigned int v3 = *(_DWORD *)(a1 + 152);
  if (v3)
  {
    LODWORD(v4) = 0;
    do
    {
      uint64_t v4 = v4 % v3;
      uint64_t v5 = *(void *)(*(void *)(a1 + 144) + 8 * v4);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 520))(v5)) {
        LODWORD(v4) = v4 + 1;
      }
      else {
        physx::NpArticulationLink::releaseInternal(*(physx::NpArticulationLink **)(*(void *)(a1 + 144) + 8 * v4));
      }
      unsigned int v3 = *(_DWORD *)(a1 + 152);
    }
    while (v3);
  }
  uint64_t v6 = (int32x2_t **)(a1 + 24);
  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1)
  {
    float v7 = *v6;
    if (*v6)
    {
      physx::Scb::Scene::removeArticulation(*v6, (physx::Scb::Articulation *)(a1 + 24), v2);
      uint64_t v9 = a1;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v7[1143], &v9);
    }
  }
  *(_DWORD *)(a1 + 152) = 0;
  return physx::Scb::Base::destroy(a1 + 24);
}

const char *physx::NpArticulationReducedCoordinate::getConcreteTypeName(physx::NpArticulationReducedCoordinate *this)
{
  return "PxArticulationReducedCoordinate";
}

BOOL physx::NpArticulationReducedCoordinate::isKindOf(physx::NpArticulationReducedCoordinate *this, const char *a2)
{
  return !strcmp("PxArticulationReducedCoordinate", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getScene(uint64_t a1)
{
  if (((*(_DWORD *)(a1 + 32) >> 30) - 1) > 1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1) {
    return v1 - 16;
  }
  else {
    return 0;
  }
}

void *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setSolverIterationCounts(void *result, unsigned __int8 a2, __int16 a3, int8x8_t a4)
{
  uint64_t v4 = result;
  uint64_t v5 = (uint64_t)(result + 3);
  __int16 v6 = a2 | (unsigned __int16)(a3 << 8);
  unsigned int v7 = *((_DWORD *)result + 8);
  if (v7 >> 30 == 2)
  {
    float result = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_WORD *)v4 + 34) = v6;
    return result;
  }
  if (v7 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v5;
LABEL_5:
  uint64_t v8 = v4[5];
  if (!v8)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v7) & 0xF).n128_u64[0];
    uint64_t v8 = v9;
    v4[5] = v9;
    float result = (void *)v4[3];
  }
  *(_WORD *)(v8 + 20) = v6;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v5, a4);
  *((_DWORD *)v4 + 8) |= 0x20u;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getSolverIterationCounts(uint64_t result, _DWORD *a2, unsigned int *a3)
{
  if ((*(unsigned char *)(result + 32) & 0x20) != 0) {
    unsigned int v3 = (unsigned __int16 *)(*(void *)(result + 40) + 20);
  }
  else {
    unsigned int v3 = (unsigned __int16 *)(result + 68);
  }
  unsigned int v4 = *v3;
  *a3 = v4 >> 8;
  *a2 = v4;
  return result;
}

BOOL physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::isSleeping(uint64_t a1)
{
  return *(unsigned char *)(a1 + 100) != 0;
}

void *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setSleepThreshold(void *result, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = result;
  uint64_t v4 = (uint64_t)(result + 3);
  unsigned int v5 = *((_DWORD *)result + 8);
  if (v5 >> 30 == 2)
  {
    float result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 19) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[5] = v7;
    float result = (void *)v3[3];
  }
  *(_DWORD *)(v6 + 16) = v2;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 8) |= 0x10u;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getSleepThreshold(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0) {
    uint64_t v1 = *(void *)(a1 + 40) + 16;
  }
  else {
    uint64_t v1 = a1 + 76;
  }
  return *(float *)v1;
}

void *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setStabilizationThreshold(void *result, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  unsigned int v3 = result;
  uint64_t v4 = (uint64_t)(result + 3);
  unsigned int v5 = *((_DWORD *)result + 8);
  if (v5 >> 30 == 2)
  {
    float result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((_DWORD *)v3 + 20) = a2.i32[0];
    return result;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_8;
  }
  float result = *(void **)v4;
LABEL_5:
  uint64_t v6 = v3[5];
  if (!v6)
  {
    a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    v3[5] = v7;
    float result = (void *)v3[3];
  }
  *(_DWORD *)(v6 + 24) = v2;
  float result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
  *((_DWORD *)v3 + 8) |= 0x40u;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getStabilizationThreshold(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 32) & 0x40) != 0) {
    uint64_t v1 = *(void *)(a1 + 40) + 24;
  }
  else {
    uint64_t v1 = a1 + 80;
  }
  return *(float *)v1;
}

float *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setWakeCounter(float *result, double a2)
{
  float v2 = *(float *)&a2;
  unsigned int v3 = result;
  if (*((_DWORD *)result + 38))
  {
    unint64_t v4 = 0;
    do
    {
      *(float *)&a2 = v2;
      float result = (float *)physx::Scb::Body::setWakeCounter((physx::Scb::Body *)(*(void *)(*((void *)v3 + 18) + 8 * v4++) + 96), a2);
    }
    while (v4 < *((unsigned int *)v3 + 38));
  }
  uint64_t v5 = (uint64_t)(v3 + 6);
  v3[24] = v2;
  int v6 = *((_DWORD *)v3 + 8) >> 30;
  if (v6 == 2)
  {
    uint64_t v7 = *(void *)v5;
    if (!*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_10;
    }
LABEL_8:
    if (v2 <= 0.0)
    {
      float result = (float *)physx::Scb::Scene::scheduleForUpdate(*((void **)v3 + 3), v5, *(int8x8_t *)&a2);
      unsigned int v8 = *((_DWORD *)v3 + 8) | 0x80;
    }
    else
    {
      *((unsigned char *)v3 + 100) = 0;
      float result = (float *)physx::Scb::Scene::scheduleForUpdate(*((void **)v3 + 3), v5, *(int8x8_t *)&a2);
      unsigned int v8 = v3[8] & 0xFFFFFC7F | 0x280;
    }
    *((_DWORD *)v3 + 8) = v8;
    return result;
  }
  if (v6 == 3) {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)v5;
LABEL_10:
  if (v2 > 0.0)
  {
    if (v7) {
      *((unsigned char *)v3 + 100) = 0;
    }
  }
  v3[21] = v2;
  return result;
}

float physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getWakeCounter(uint64_t a1)
{
  return *(float *)(a1 + 96);
}

void *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::wakeUp(uint64_t a1, double a2)
{
  return physx::PxArticulationImpl::wakeUp((physx::PxArticulationImpl *)(a1 + 24), a2);
}

void *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::putToSleep(void *result, int8x8_t a2)
{
  float v2 = result;
  if (*((_DWORD *)result + 38))
  {
    unint64_t v3 = 0;
    do
      float result = physx::Scb::Body::putToSleepInternal((physx::Scb::Body *)(*(void *)(v2[18] + 8 * v3++) + 96), a2);
    while (v3 < *((unsigned int *)v2 + 38));
  }
  uint64_t v4 = (uint64_t)(v2 + 3);
  *((_DWORD *)v2 + 24) = 0;
  *((unsigned char *)v2 + 100) = 1;
  int v5 = *((_DWORD *)v2 + 8) >> 30;
  if (v5 == 2)
  {
    float result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_8;
    }
  }
  else if (v5 == 3)
  {
    float result = *(void **)v4;
LABEL_8:
    float result = physx::Scb::Scene::scheduleForUpdate(result, v4, a2);
    *((_DWORD *)v2 + 8) = v2[4] & 0xFFFFFC7F | 0x180;
    return result;
  }
  *((_DWORD *)v2 + 21) = 0;
  return result;
}

physx::NpArticulationLink *physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::createLink(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(a1 + 152);
  if (a2)
  {
    if (!v9)
    {
      uint64_t v10 = physx::shdfnd::Foundation::mInstance;
      float v11 = "Root articulation link must have NULL parent pointer!";
      uint64_t v12 = 332;
LABEL_6:
      physx::shdfnd::Foundation::error(v10, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpArticulationTemplate.h", v12, v11, a6, a7, a8, v26.i8[0]);
      return 0;
    }
  }
  else if (v9)
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    float v11 = "Non-root articulation link must have valid parent pointer!";
    uint64_t v12 = 338;
    goto LABEL_6;
  }
  ++*(_DWORD *)(a1 + 176);
  _Q0 = *a3;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a3->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned long long *)a3);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  float32x4_t v26 = vdivq_f32(*a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  uint64_t v27 = a3[1].i64[0];
  __int32 v28 = a3[1].i32[2];
  ArticulationLinunint64_t k = (physx::NpArticulationLink *)physx::NpFactory::createArticulationLink(physx::NpFactory::mInstance, a1, a2, v26.f32, a5, a6, a7, a8);
  if (ArticulationLink)
  {
    if (((*(_DWORD *)(a1 + 32) >> 30) - 1) <= 1)
    {
      uint64_t v23 = *(void *)(a1 + 24);
      if (v23) {
        physx::NpScene::addArticulationLink((int32x2_t *)(v23 - 16), ArticulationLink, v22);
      }
    }
    v26.i64[0] = (uint64_t)ArticulationLink;
    uint64_t v24 = *(unsigned int *)(a1 + 152);
    if ((*(_DWORD *)(a1 + 156) & 0x7FFFFFFFu) <= v24)
    {
      physx::shdfnd::Array<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::growAndPushBack(a1 + 104, &v26);
    }
    else
    {
      *(void *)(*(void *)(a1 + 144) + 8 * v24) = ArticulationLink;
      *(_DWORD *)(a1 + 152) = v24 + 1;
    }
  }
  return ArticulationLink;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getNbLinks(uint64_t a1)
{
  return *(unsigned int *)(a1 + 152);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getLinks(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = (*(_DWORD *)(a1 + 152) - a4) & ~((int)(*(_DWORD *)(a1 + 152) - a4) >> 31);
  if (v5 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v5;
  }
  if (result)
  {
    uint64_t v7 = (uint64_t *)(*(void *)(a1 + 144) + 8 * a4);
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::setName(uint64_t result, uint64_t a2)
{
  *(void *)(result + 168) = a2;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getName(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

float physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getWorldBounds@<S0>(uint64_t a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  if (*(_DWORD *)(a1 + 152))
  {
    unint64_t v6 = 0;
    float v7 = 8.5071e37;
    float v8 = -8.5071e37;
    float v9 = -8.5071e37;
    float v10 = -8.5071e37;
    float v11 = 8.5071e37;
    float v12 = 8.5071e37;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, float))(**(void **)(*(void *)(a1 + 144) + 8 * v6) + 80))(&v20, 1.01);
      if (v12 >= *(float *)&v20) {
        float v12 = *(float *)&v20;
      }
      if (v11 >= *((float *)&v20 + 1)) {
        float v11 = *((float *)&v20 + 1);
      }
      if (v7 >= v21) {
        float v7 = v21;
      }
      if (v10 <= v22) {
        float v10 = v22;
      }
      if (v9 <= v23) {
        float v9 = v23;
      }
      if (v8 <= v24) {
        float v8 = v24;
      }
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 152));
  }
  else
  {
    float v10 = -8.5071e37;
    float v12 = 8.5071e37;
    float v11 = 8.5071e37;
    float v7 = 8.5071e37;
    float v9 = -8.5071e37;
    float v8 = -8.5071e37;
  }
  float v13 = (float)(v12 + v10) * 0.5;
  float v14 = (float)(v11 + v9) * 0.5;
  float v15 = (float)(v7 + v8) * 0.5;
  float v16 = (float)((float)(v10 - v12) * 0.5) * a3;
  float v17 = (float)((float)(v9 - v11) * 0.5) * a3;
  float v18 = (float)((float)(v8 - v7) * 0.5) * a3;
  *a2 = v13 - v16;
  a2[1] = v14 - v17;
  a2[2] = v15 - v18;
  a2[3] = v13 + v16;
  float result = v15 + v18;
  a2[4] = v14 + v17;
  a2[5] = v15 + v18;
  return result;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getAggregate(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::getImpl(uint64_t a1)
{
  return a1 + 24;
}

{
  return a1 + 24;
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::exportExtraData(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 136)) {
    physx::Cm::ArrayAccess<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::store(a1 + 104, a2);
  }
  uint64_t v4 = *(void *)(a1 + 168);
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32);
  return v5(a2, v4);
}

uint64_t physx::NpArticulationTemplate<physx::PxArticulationReducedCoordinate>::requiresObjects(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 152);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v2;
    do
    {
      float result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(*(void *)(v4 + 144) + v5));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(int32x2_t *a1, void *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = ~(*a2 << 32) + *a2;
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v6) {
        unsigned int v13 = 2 * v6;
      }
      else {
        unsigned int v13 = 16;
      }
      if (v6 < v13)
      {
        physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v13, a4);
        unsigned int v6 = a1[4].u32[1];
      }
      unint64_t v14 = ~(*a2 << 32) + *a2;
      unint64_t v15 = 9
          * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
      unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      unsigned int v10 = (v6 - 1) & ((v16 >> 31) ^ v16);
    }
    uint64_t v17 = a1[5].u32[1];
    a1[5].i32[1] = v17 + 1;
    int32x2_t v18 = a1[3];
    int32x2_t v19 = a1[1];
    *(_DWORD *)(*(void *)&a1[2] + 4 * v17) = *(_DWORD *)(*(void *)&v18 + 4 * v10);
    *(_DWORD *)(*(void *)&v18 + 4 * v10) = v17;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v19 + 8 * v17;
  }
  int32x2_t v12 = a1[1];
  while (*(void *)(*(void *)&v12 + 8 * v11) != *a2)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 8 * v9) {
    uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    uint64_t v11 = 0;
  }
  int32x2_t v12 = &v11[4 * v3];
  unsigned int v13 = &v11[v10];
  uint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 8) + 8 * v15);
      unint64_t v17 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      LODWORD(v19) = (v3 - 1) & ((v19 >> 31) ^ v19);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v19];
      *(_DWORD *)&v11[4 * v19] = v15;
      *(void *)&v13[8 * v15++] = v16;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

BOOL physx::PxBase::isKindOf(physx::PxBase *this, const char *__s1)
{
  return strcmp(__s1, "PxBase") == 0;
}

uint64_t physx::NpRigidActorTemplate<physx::PxArticulationLink>::attachShape(physx::PxRigidActor *a1, physx::NpShape *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((void *)a1 + 10))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 233, "PxRigidActor::attachShape: Actor is part of a pruning structure, pruning structure is now invalid!", a6, a7, a8, v11);
    physx::Sq::PruningStructure::invalidate(*((void *)a1 + 10), (uint64_t)a1);
  }
  physx::NpShapeManager::attachShape((physx::PxRigidActor *)((char *)a1 + 40), a2, a1);
  return 1;
}

physx::PxActor *physx::NpActorTemplate<physx::PxArticulationLink>::release(physx::PxActor *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *((void *)result + 4);
  if (v8) {
    return (physx::PxActor *)physx::NpAggregate::removeActorAndReinsert(*(physx::NpAggregate **)(*(void *)(v8 + 72) + 8), result, 0, a4, a5, a6, a7, a8);
  }
  return result;
}

void *physx::NpActorTemplate<physx::PxArticulationLink>::setActorFlag(void *result, int a2, int a3, int8x8_t a4)
{
  uint64_t v4 = (uint64_t)result + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  if (a3)
  {
    if (v5)
    {
      unsigned int v7 = *(unsigned __int8 **)(v4 + 16);
      uint64_t v8 = (v5 >> 24) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
    }
    else
    {
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v5 >> 24) & 0xF) + 3) + v4;
      unsigned int v7 = (unsigned __int8 *)(v6 + 12);
      uint64_t v8 = (v5 >> 24) & 0xF;
    }
    int v10 = *v7 | a2;
  }
  else
  {
    if (v5)
    {
      unsigned int v9 = *(unsigned __int8 **)(v4 + 16);
      uint64_t v8 = (v5 >> 24) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
    }
    else
    {
      LODWORD(v8) = BYTE3(v5) & 0xF;
      uint64_t v6 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v8 + 3) + v4;
      unsigned int v9 = (unsigned __int8 *)(v6 + 12);
    }
    int v10 = *v9 & ~a2;
  }
  unsigned int v11 = v5 >> 30;
  if (v11 == 2)
  {
    uint64_t result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_14;
    }
  }
  else if (v11 == 3)
  {
    uint64_t result = *(void **)v4;
LABEL_14:
    int32x2_t v12 = *(unsigned char **)(v4 + 16);
    if (!v12)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v8).n128_u64[0];
      int32x2_t v12 = v13;
      *(void *)(v4 + 16) = v13;
      uint64_t result = *(void **)v4;
    }
    *int32x2_t v12 = v10;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v4, a4);
    *(_DWORD *)(v4 + 8) |= 1u;
    return result;
  }
  if (v10 != *(unsigned __int8 *)(v6 + 12))
  {
    *(unsigned char *)(v6 + 12) = v10;
    uint64_t result = *(void **)v6;
    if (*(void *)v6)
    {
      unint64_t v14 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v14();
    }
  }
  return result;
}

void *physx::NpActorTemplate<physx::PxArticulationLink>::setActorFlags(void *result, unsigned __int8 *a2, int8x8_t a3)
{
  int v3 = *a2;
  uint64_t v4 = (uint64_t)result + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)result + 4) + 18);
  unint64_t v5 = *(unsigned int *)(v4 + 8);
  uint64_t v6 = (v5 >> 24) & 0xF;
  unsigned int v7 = v5 >> 30;
  if (v7 == 2)
  {
    uint64_t result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v7 == 3)
  {
    uint64_t result = *(void **)v4;
LABEL_5:
    uint64_t v8 = *(unsigned char **)(v4 + 16);
    if (!v8)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, v6).n128_u64[0];
      uint64_t v8 = v9;
      *(void *)(v4 + 16) = v9;
      uint64_t result = *(void **)v4;
    }
    *uint64_t v8 = v3;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v4, a3);
    *(_DWORD *)(v4 + 8) |= 1u;
    return result;
  }
  uint64_t v10 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + v6 + 3) + v4;
  if (v3 != *(unsigned __int8 *)(v10 + 12))
  {
    *(unsigned char *)(v10 + 12) = v3;
    uint64_t result = *(void **)v10;
    if (*(void *)v10)
    {
      unsigned int v11 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v11();
    }
  }
  return result;
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::exportExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::exportExtraData((uint64_t *)(a1 + 24), a2);
}

void *physx::NpActorTemplate<physx::PxArticulationLink>::importExtraData(uint64_t a1, uint64_t a2)
{
  return physx::NpActor::importExtraData((void *)(a1 + 24), a2);
}

uint64_t physx::NpActorTemplate<physx::PxArticulationLink>::resolveReferences(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  return physx::NpActor::resolveReferences(a1 + 24, a2);
}

BOOL physx::PxRigidBody::isKindOf(physx::PxRigidBody *this, const char *a2)
{
  if (!strcmp("PxRigidBody", a2)) {
    return 1;
  }
  return physx::PxRigidActor::isKindOf(this, a2);
}

BOOL physx::PxRigidActor::isKindOf(physx::PxRigidActor *this, const char *a2)
{
  if (!strcmp("PxRigidActor", a2)) {
    return 1;
  }
  return physx::PxActor::isKindOf(this, a2);
}

BOOL physx::PxActor::isKindOf(physx::PxActor *this, const char *a2)
{
  return !strcmp("PxActor", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::shdfnd::Array<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 52);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (!v5) {
    goto LABEL_14;
  }
  if ((8 * v5) <= 0x20 && *(unsigned char *)(a1 + 32) == 0)
  {
    *(unsigned char *)(a1 + 32) = 1;
    uint64_t v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    uint64_t v9 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>::getName() [T = physx::NpArt"
  }
         "iculationLink *]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  uint64_t v10 = *(unsigned int *)(a1 + 48);
  unsigned int v11 = (void *)(v9 + 8 * v10);
  if (v10)
  {
    int32x2_t v12 = *(uint64_t **)(a1 + 40);
    unsigned int v13 = (void *)v9;
    do
    {
      uint64_t v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  void *v11 = *a2;
  if ((*(_DWORD *)(a1 + 52) & 0x80000000) == 0)
  {
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15 == a1)
    {
      *(unsigned char *)(a1 + 32) = 0;
    }
    else if (v15)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v10 = *(unsigned int *)(a1 + 48);
    }
  }
  *(void *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 48) = v10 + 1;
  *(_DWORD *)(a1 + 52) = v5;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::recreate(uint64_t a1, int a2)
{
  uint64_t result = (16 * a2);
  if (result <= 0x40 && *(unsigned char *)(a1 + 64) == 0)
  {
    *(unsigned char *)(a1 + 64) = 1;
    uint64_t v6 = a1;
  }
  else
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpConnector>::allocate(result);
    uint64_t v6 = result;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 72);
  if (v7)
  {
    unint64_t v9 = v6 + 16 * v7;
    uint64_t v10 = *(void *)(a1 + 72);
    unint64_t v11 = v6;
    do
    {
      *(unsigned char *)unint64_t v11 = *(unsigned char *)v10;
      *(void *)(v11 + 8) = *(void *)(v10 + 8);
      v11 += 16;
      v10 += 16;
    }
    while (v11 < v9);
  }
  if ((*(_DWORD *)(a1 + 84) & 0x80000000) == 0)
  {
    if (v8 == a1)
    {
      *(unsigned char *)(a1 + 64) = 0;
    }
    else if (v8)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 84) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpConnector>::allocate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConnector>::getName() [T = physx::NpConnector]";
    }
    else {
      int v3 = "<allocation names disabled>";
    }
    int v4 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v2 + 24) + 16);
    return v4(v2 + 24, v1, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::growAndPushBack(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 84);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (16 * v5);
    if (v6 <= 0x40 && *(unsigned char *)(a1 + 64) == 0)
    {
      *(unsigned char *)(a1 + 64) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::NpConnector>::allocate(v6);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 80);
  uint64_t v10 = (unsigned char *)(v8 + 16 * v9);
  uint64_t v11 = *(void *)(a1 + 72);
  if (v9)
  {
    uint64_t v12 = *(void *)(a1 + 72);
    unint64_t v13 = v8;
    do
    {
      *(unsigned char *)unint64_t v13 = *(unsigned char *)v12;
      *(void *)(v13 + 8) = *(void *)(v12 + 8);
      v13 += 16;
      v12 += 16;
    }
    while (v13 < (unint64_t)v10);
  }
  *uint64_t v10 = *(unsigned char *)a2;
  *(void *)(v8 + 16 * v9 + 8) = *(void *)(a2 + 8);
  if ((*(_DWORD *)(a1 + 84) & 0x80000000) == 0)
  {
    if (v11 == a1)
    {
      *(unsigned char *)(a1 + 64) = 0;
    }
    else if (v11)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 80);
    }
  }
  *(void *)(a1 + 72) = v8;
  *(_DWORD *)(a1 + 80) = v9 + 1;
  *(_DWORD *)(a1 + 84) = v5;
  return v8 + 16 * v9;
}

uint64_t physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 84) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<physx::NpConnector,physx::shdfnd::InlineAllocator<64u,physx::shdfnd::ReflectionAllocator<physx::NpConnector>>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 80) = a2;
  return result;
}

void physx::PxArticulationImpl::~PxArticulationImpl(physx::PxArticulationImpl *this)
{
  int v1 = *((_DWORD *)this + 33);
  if ((v1 & 0x80000000) == 0 && (v1 & 0x7FFFFFFF) != 0)
  {
    uint64_t v2 = (physx::PxArticulationImpl *)*((void *)this + 15);
    if (v2 == (physx::PxArticulationImpl *)((char *)this + 80))
    {
      *((unsigned char *)this + 112) = 0;
    }
    else if (v2)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
}

float32x2_t physx::PxArticulationImpl::PxArticulationImpl(physx::PxArticulationImpl *this, char a2)
{
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v2 = physx::Sc::Physics::mInstance;
  *((void *)this + 4) = 0x400000004;
  float v3 = *(float *)(v2 + 4);
  float v4 = *(float *)v2 * 0.1;
  *((unsigned char *)this + 64) = 0;
  *((unsigned char *)this + 68) = a2;
  *((_DWORD *)this + 10) = 4;
  *((_WORD *)this + 22) = 260;
  *((float *)this + 12) = v4;
  float32x2_t result = vmul_n_f32(vmul_n_f32((float32x2_t)0x36A7C5AC3851B717, v3), v3);
  *(float32x2_t *)((char *)this + 52) = result;
  *((_DWORD *)this + 15) = 1053609164;
  *((_DWORD *)this + 2) = 117440512;
  *((_DWORD *)this + 18) = 1053609164;
  *((_WORD *)this + 38) = 1;
  *((unsigned char *)this + 112) = 1;
  *((void *)this + 15) = (char *)this + 80;
  *((void *)this + 16) = 0x400000000;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxJoint *,physx::shdfnd::ReflectionAllocator<physx::PxJoint *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 8 * a2;
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxJoint *>::getName() [T = physx::PxJoint *]";
  }
  else {
    uint64_t v6 = "<allocation names disabled>";
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v10 = *(uint64_t **)a1;
  if (v9)
  {
    unint64_t v11 = result + 8 * v9;
    uint64_t v12 = (void *)result;
    do
    {
      uint64_t v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    uint64_t v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxJoint *,physx::shdfnd::ReflectionAllocator<physx::PxJoint *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxJoint *>::getName() [T = physx::PxJoint *]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    unint64_t v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *uint64_t v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::Cm::ArrayAccess<physx::NpArticulationLink *,physx::shdfnd::InlineAllocator<32u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink *>>>::store(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    int v3 = *(_DWORD *)(result + 52);
    if (*(_DWORD *)(result + 48) | v3 & 0x7FFFFFFF) {
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, v2, (8 * v3));
    }
  }
  return result;
}

float32_t physx::Scb::Body::addSpatialAcceleration(void **a1, float32x2_t *a2, float32x2_t *a3, double a4)
{
  unsigned int v5 = a2;
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (v7 >> 30 == 2)
  {
    uint64_t v8 = (uint64_t)*a1;
    if (!*((unsigned char *)*a1 + 7689)) {
      goto LABEL_11;
    }
  }
  else if (v7 >> 30 != 3)
  {
    uint64_t v8 = (uint64_t)*a1;
LABEL_11:
    unint64_t v11 = (physx::Sc::BodySim **)(a1 + 4);
    uint64_t v12 = *(void *)(v8 + 4384);
    return physx::Sc::BodyCore::addSpatialAcceleration(v11, v12, v5, a3);
  }
  uint64_t v9 = a1[2];
  if (!v9)
  {
    *(void *)&a4 = physx::Scb::Scene::getStream((uint64_t)*a1, HIBYTE(v7) & 0xF).n128_u64[0];
    a1[2] = v9;
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a2)
  {
LABEL_7:
    a4 = COERCE_DOUBLE(vadd_f32(*v5, *(float32x2_t *)((char *)v9 + 300)));
    *(double *)((char *)v9 + 300) = a4;
    *(float *)&a4 = v5[1].f32[0] + *((float *)v9 + 77);
    *((_DWORD *)v9 + 77) = LODWORD(a4);
    LODWORD(v5) = 0x10000;
  }
LABEL_8:
  if (a3)
  {
    a4 = COERCE_DOUBLE(vadd_f32(*a3, (float32x2_t)v9[39]));
    *((double *)v9 + 39) = a4;
    *(float *)&a4 = a3[1].f32[0] + *((float *)v9 + 80);
    *((_DWORD *)v9 + 80) = LODWORD(a4);
    LODWORD(v5) = v5 | 0x20000;
  }
  physx::Scb::Scene::scheduleForUpdate(*a1, (uint64_t)a1, *(int8x8_t *)&a4);
  *((_DWORD *)a1 + 71) |= v5;
  return result;
}

float32_t physx::Scb::Body::addSpatialVelocity(void **a1, float32x2_t *a2, float32x2_t *a3, double a4)
{
  unsigned int v5 = a2;
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (v7 >> 30 == 2)
  {
    uint64_t v8 = (uint64_t)*a1;
    if (!*((unsigned char *)*a1 + 7689)) {
      goto LABEL_11;
    }
  }
  else if (v7 >> 30 != 3)
  {
    uint64_t v8 = (uint64_t)*a1;
LABEL_11:
    unint64_t v11 = (physx::Sc::BodySim **)(a1 + 4);
    uint64_t v12 = *(void *)(v8 + 4384);
    return physx::Sc::BodyCore::addSpatialVelocity(v11, v12, v5, a3);
  }
  uint64_t v9 = a1[2];
  if (!v9)
  {
    *(void *)&a4 = physx::Scb::Scene::getStream((uint64_t)*a1, HIBYTE(v7) & 0xF).n128_u64[0];
    a1[2] = v9;
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (a2)
  {
LABEL_7:
    a4 = COERCE_DOUBLE(vadd_f32(*v5, *(float32x2_t *)((char *)v9 + 324)));
    *(double *)((char *)v9 + 324) = a4;
    *(float *)&a4 = v5[1].f32[0] + *((float *)v9 + 83);
    *((_DWORD *)v9 + 83) = LODWORD(a4);
    LODWORD(v5) = 0x40000;
  }
LABEL_8:
  if (a3)
  {
    a4 = COERCE_DOUBLE(vadd_f32(*a3, (float32x2_t)v9[42]));
    *((double *)v9 + 42) = a4;
    *(float *)&a4 = a3[1].f32[0] + *((float *)v9 + 86);
    *((_DWORD *)v9 + 86) = LODWORD(a4);
    LODWORD(v5) = v5 | 0x80000;
  }
  physx::Scb::Scene::scheduleForUpdate(*a1, (uint64_t)a1, *(int8x8_t *)&a4);
  *((_DWORD *)a1 + 71) |= v5;
  return result;
}

void physx::Scb::Body::setFlags(physx::Sc::BodyCore *this, char *a2, int8x8_t a3)
{
  int v5 = *((_DWORD *)this + 71);
  if ((v5 & 0x4000) != 0) {
    uint64_t v6 = (unsigned __int8 *)(*((void *)this + 2) + 348);
  }
  else {
    uint64_t v6 = (unsigned __int8 *)this + 76;
  }
  unsigned __int8 v7 = *v6;
  char v8 = *a2;
  int v9 = *((_DWORD *)this + 2) >> 30;
  if (v9 == 3 || v9 == 2 && *(unsigned char *)(*(void *)this + 7689))
  {
    if (v7 & 1 | ((*a2 & 1) == 0))
    {
      if ((v7 & ((*a2 & 1) == 0)) != 0) {
        *((_DWORD *)this + 71) = v5 & 0xFFFF7FFF;
      }
    }
    else
    {
      physx::Scb::Body::putToSleepInternal(this, a3);
    }
    uint64_t v11 = *((void *)this + 2);
    uint64_t v12 = *(void **)this;
    if (!v11)
    {
      a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v12, *((unsigned char *)this + 11) & 0xF).n128_u64[0];
      uint64_t v11 = v13;
      *((void *)this + 2) = v13;
      uint64_t v12 = *(void **)this;
    }
    *(unsigned char *)(v11 + 348) = *a2;
    physx::Scb::Scene::scheduleForUpdate(v12, (uint64_t)this, a3);
    *((_DWORD *)this + 71) |= 0x4000u;
  }
  else
  {
    if (!(v7 & 1 | ((*a2 & 1) == 0)))
    {
      *(void *)((char *)this + 252) = 0;
      *(void *)((char *)this + 268) = 0;
      *(void *)((char *)this + 276) = 0x100000000;
      *(void *)((char *)this + 260) = 0;
    }
    if (*(void *)this) {
      uint64_t v10 = *(void *)(*(void *)this + 4384);
    }
    else {
      uint64_t v10 = 0;
    }
    char v14 = v8;
    physx::Sc::BodyCore::setFlags((physx::Sc::BodyCore *)((char *)this + 32), v10, &v14, a3);
  }
}

void *physx::Scb::Body::putToSleepInternal(physx::Scb::Body *this, int8x8_t a2)
{
  int v3 = *((_DWORD *)this + 2) >> 30;
  if (v3 == 3)
  {
    *(void *)((char *)this + 276) = 0x100000000;
    *((void *)this + 32) = 0;
    *((_DWORD *)this + 63) = 0;
    int v4 = *(void **)this;
LABEL_9:
    physx::Scb::Scene::scheduleForUpdate(v4, (uint64_t)this, a2);
    *((_DWORD *)this + 71) |= 0x400000u;
    unsigned int v8 = *((_DWORD *)this + 2);
    *((void *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    unsigned int v9 = v8 >> 30;
    if (v9 == 2)
    {
      uint64_t v10 = *(void **)this;
      if (*(unsigned char *)(*(void *)this + 7689)) {
        goto LABEL_13;
      }
    }
    else if (v9 == 3)
    {
      uint64_t v10 = *(void **)this;
LABEL_13:
      physx::Scb::Scene::scheduleForUpdate(v10, (uint64_t)this, v7);
      int v12 = *((_DWORD *)this + 71) | 0x800000;
LABEL_15:
      *((_DWORD *)this + 71) = v12 & 0xFFF07FFF;
      float32_t result = physx::Scb::Scene::scheduleForUpdate(*(void **)this, (uint64_t)this, v11);
      *((_DWORD *)this + 71) = *((_DWORD *)this + 71) & 0xF8FFFFFF | 0x3000000;
      return result;
    }
    *((void *)this + 16) = 0;
    *((_DWORD *)this + 34) = 0;
    updateBodySim((uint64_t *)this + 4);
    int v12 = *((_DWORD *)this + 71);
    goto LABEL_15;
  }
  if (v3 == 2)
  {
    int v4 = *(void **)this;
    if (*(unsigned char *)(*(void *)this + 7689))
    {
      *(void *)((char *)this + 276) = 0x100000000;
      *((void *)this + 32) = 0;
      *((_DWORD *)this + 63) = 0;
      goto LABEL_9;
    }
  }
  *(void *)((char *)this + 252) = 0;
  int v5 = (void *)((char *)this + 252);
  v5[2] = 0;
  v5[3] = 0x100000000;
  v5[1] = 0;
  return (void *)physx::Sc::BodyCore::putToSleep((physx::Sc::BodyCore *)((char *)v5 - 220));
}

physx::Sc::ArticulationJointSim *physx::PxArticulationJointImpl::setParentPose(uint64_t a1, float *a2)
{
  float32_t result = *(physx::Sc::ArticulationJointSim **)(a1 + 408);
  if (!result) {
    return result;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 224))(&v29);
  float v5 = a2[1];
  float v6 = a2[2];
  float v7 = a2[3];
  float v8 = sqrtf((float)((float)((float)(v5 * v5) + (float)(*a2 * *a2)) + (float)(v6 * v6)) + (float)(v7 * v7));
  *(float *)v23.i32 = *a2 / v8;
  float v9 = v5 / v8;
  float v10 = v6 / v8;
  float v11 = v7 / v8;
  float v12 = (float)(a2[4] - v32) + (float)(a2[4] - v32);
  float v13 = (float)(a2[5] - v33) + (float)(a2[5] - v33);
  float v14 = (float)(a2[6] - v34) + (float)(a2[6] - v34);
  float v15 = (float)(v31 * v31) + -0.5;
  float v16 = (float)((float)-(float)(*((float *)&v29 + 1) * v13) - (float)(*(float *)&v29 * v12)) - (float)(v30 * v14);
  float v17 = (float)((float)(v31 * (float)((float)(v30 * v13) - (float)(*((float *)&v29 + 1) * v14))) + (float)(v12 * v15))
      - (float)(*(float *)&v29 * v16);
  float v18 = (float)((float)(v31 * (float)((float)(*(float *)&v29 * v14) - (float)(v30 * v12))) + (float)(v13 * v15))
      - (float)(*((float *)&v29 + 1) * v16);
  float v19 = (float)((float)(v31 * (float)((float)(*((float *)&v29 + 1) * v12) - (float)(*(float *)&v29 * v13)))
              + (float)(v14 * v15))
      - (float)(v30 * v16);
  float v20 = (float)((float)((float)(v31 * *(float *)v23.i32) - (float)(*(float *)&v29 * v11))
              - (float)(*((float *)&v29 + 1) * v10))
      + (float)(v9 * v30);
  float v21 = (float)((float)((float)(v31 * v9) - (float)(*((float *)&v29 + 1) * v11)) - (float)(v30 * *(float *)v23.i32))
      + (float)(v10 * *(float *)&v29);
  float v22 = (float)((float)((float)(v31 * v10) - (float)(v30 * v11)) - (float)(*(float *)&v29 * v9))
      + (float)(*(float *)v23.i32 * *((float *)&v29 + 1));
  *(float *)v23.i32 = (float)((float)(*(float *)v23.i32 * *(float *)&v29) + (float)(v31 * v11))
                    + (float)(*((float *)&v29 + 1) * v9);
  float v24 = *(float *)v23.i32 + (float)(v30 * v10);
  *(float *)uint64_t v35 = v20;
  *(float *)&v35[1] = v21;
  *(float *)&v35[2] = v22;
  *(float *)&v35[3] = v24;
  *(float *)&v35[4] = v17;
  *(float *)&v35[5] = v18;
  *(float *)&v35[6] = v19;
  unsigned int v25 = *(_DWORD *)(a1 + 8);
  if (v25 >> 30 == 2)
  {
    float32x4_t v26 = *(void **)a1;
    if (*(unsigned char *)(*(void *)a1 + 7689)) {
      goto LABEL_6;
    }
    return physx::Sc::ArticulationJointCore::setParentPose(a1 + 24, (uint64_t)v35);
  }
  if (v25 >> 30 != 3) {
    return physx::Sc::ArticulationJointCore::setParentPose(a1 + 24, (uint64_t)v35);
  }
  float32x4_t v26 = *(void **)a1;
LABEL_6:
  uint64_t v27 = *(float **)(a1 + 16);
  if (!v27)
  {
    int8x8_t v23 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v26, HIBYTE(v25) & 0xF).n128_u64[0];
    uint64_t v27 = v28;
    *(void *)(a1 + 16) = v28;
    float32x4_t v26 = *(void **)a1;
  }
  *uint64_t v27 = v20;
  v27[1] = v21;
  v27[2] = v22;
  v27[3] = v24;
  v27[4] = v17;
  v27[5] = v18;
  v27[6] = v19;
  float32_t result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v26, a1, v23);
  *(_DWORD *)(a1 + 8) |= 1u;
  return result;
}

float physx::PxArticulationJointImpl::getParentPose(physx::PxArticulationJointImpl *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 408) + 224))(&v23);
  if (*(unsigned char *)(a2 + 8)) {
    int v4 = *(float **)(a2 + 16);
  }
  else {
    int v4 = (float *)(a2 + 32);
  }
  float v5 = v4[1];
  float v6 = v4[2];
  float v7 = v4[3];
  float v8 = v4[4] + v4[4];
  float v9 = v4[5] + v4[5];
  float v10 = v4[6] + v4[6];
  float v11 = (float)(v25 * v25) + -0.5;
  float v12 = (float)((float)(v9 * *((float *)&v23 + 1)) + (float)(*(float *)&v23 * v8)) + (float)(v24 * v10);
  float v13 = (float)((float)(v25 * (float)((float)(*((float *)&v23 + 1) * v10) - (float)(v24 * v9))) + (float)(v8 * v11))
      + (float)(*(float *)&v23 * v12);
  float v14 = (float)((float)(v25 * (float)((float)(v24 * v8) - (float)(*(float *)&v23 * v10))) + (float)(v9 * v11))
      + (float)(*((float *)&v23 + 1) * v12);
  float v15 = (float)((float)(v25 * (float)((float)(*(float *)&v23 * v9) - (float)(*((float *)&v23 + 1) * v8)))
              + (float)(v10 * v11))
      + (float)(v24 * v12);
  float v16 = v26 + v13;
  float v17 = v27 + v14;
  float v18 = v28;
  float v19 = (float)((float)((float)(v7 * *((float *)&v23 + 1)) + (float)(v25 * v5)) + (float)(v24 * *v4))
      - (float)(v6 * *(float *)&v23);
  float v20 = (float)((float)((float)(v7 * v24) + (float)(v25 * v6)) + (float)(*(float *)&v23 * v5))
      - (float)(*v4 * *((float *)&v23 + 1));
  float v21 = (float)((float)((float)(v25 * v7) - (float)(*(float *)&v23 * *v4)) - (float)(*((float *)&v23 + 1) * v5))
      - (float)(v24 * v6);
  *(float *)this = (float)((float)((float)(v7 * *(float *)&v23) + (float)(v25 * *v4))
                         + (float)(*((float *)&v23 + 1) * v6))
                 - (float)(v5 * v24);
  *((float *)this + 1) = v19;
  *((float *)this + 2) = v20;
  *((float *)this + 3) = v21;
  float result = v18 + v15;
  *((float *)this + 4) = v16;
  *((float *)this + 5) = v17;
  *((float *)this + 6) = v18 + v15;
  return result;
}

physx::Sc::ArticulationJointSim *physx::PxArticulationJointImpl::setChildPose(uint64_t a1, float *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 416) + 224))(&v29);
  float v4 = a2[1];
  float v5 = a2[2];
  float v6 = a2[3];
  float v7 = sqrtf((float)((float)((float)(v4 * v4) + (float)(*a2 * *a2)) + (float)(v5 * v5)) + (float)(v6 * v6));
  *(float *)v22.i32 = *a2 / v7;
  float v8 = v4 / v7;
  float v9 = v5 / v7;
  float v10 = v6 / v7;
  float v11 = (float)(a2[4] - v32) + (float)(a2[4] - v32);
  float v12 = (float)(a2[5] - v33) + (float)(a2[5] - v33);
  float v13 = (float)(a2[6] - v34) + (float)(a2[6] - v34);
  float v14 = (float)(v31 * v31) + -0.5;
  float v15 = (float)((float)-(float)(*((float *)&v29 + 1) * v12) - (float)(*(float *)&v29 * v11)) - (float)(v30 * v13);
  float v16 = (float)((float)(v31 * (float)((float)(v30 * v12) - (float)(*((float *)&v29 + 1) * v13))) + (float)(v11 * v14))
      - (float)(*(float *)&v29 * v15);
  float v17 = (float)((float)(v31 * (float)((float)(*(float *)&v29 * v13) - (float)(v30 * v11))) + (float)(v12 * v14))
      - (float)(*((float *)&v29 + 1) * v15);
  float v18 = (float)((float)(v31 * (float)((float)(*((float *)&v29 + 1) * v11) - (float)(*(float *)&v29 * v12)))
              + (float)(v13 * v14))
      - (float)(v30 * v15);
  float v19 = (float)((float)((float)(v31 * *(float *)v22.i32) - (float)(*(float *)&v29 * v10))
              - (float)(*((float *)&v29 + 1) * v9))
      + (float)(v8 * v30);
  float v20 = (float)((float)((float)(v31 * v8) - (float)(*((float *)&v29 + 1) * v10)) - (float)(v30 * *(float *)v22.i32))
      + (float)(v9 * *(float *)&v29);
  float v21 = (float)((float)((float)(v31 * v9) - (float)(v30 * v10)) - (float)(*(float *)&v29 * v8))
      + (float)(*(float *)v22.i32 * *((float *)&v29 + 1));
  *(float *)v22.i32 = (float)((float)(*(float *)v22.i32 * *(float *)&v29) + (float)(v31 * v10))
                    + (float)(*((float *)&v29 + 1) * v8);
  float v23 = *(float *)v22.i32 + (float)(v30 * v9);
  *(float *)uint64_t v35 = v19;
  *(float *)&v35[1] = v20;
  *(float *)&v35[2] = v21;
  *(float *)&v35[3] = v23;
  *(float *)&v35[4] = v16;
  *(float *)&v35[5] = v17;
  *(float *)&v35[6] = v18;
  unsigned int v24 = *(_DWORD *)(a1 + 8);
  if (v24 >> 30 == 2)
  {
    float v25 = *(void **)a1;
    if (*(unsigned char *)(*(void *)a1 + 7689)) {
      goto LABEL_5;
    }
    return physx::Sc::ArticulationJointCore::setChildPose(a1 + 24, (uint64_t)v35);
  }
  if (v24 >> 30 != 3) {
    return physx::Sc::ArticulationJointCore::setChildPose(a1 + 24, (uint64_t)v35);
  }
  float v25 = *(void **)a1;
LABEL_5:
  float v26 = *(float **)(a1 + 16);
  if (!v26)
  {
    int8x8_t v22 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v25, HIBYTE(v24) & 0xF).n128_u64[0];
    float v26 = v27;
    *(void *)(a1 + 16) = v27;
    float v25 = *(void **)a1;
  }
  v26[7] = v19;
  v26[8] = v20;
  v26[9] = v21;
  v26[10] = v23;
  v26[11] = v16;
  v26[12] = v17;
  v26[13] = v18;
  float result = (physx::Sc::ArticulationJointSim *)physx::Scb::Scene::scheduleForUpdate(v25, a1, v22);
  *(_DWORD *)(a1 + 8) |= 2u;
  return result;
}

float physx::PxArticulationJointImpl::getChildPose(physx::PxArticulationJointImpl *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 416) + 224))(&v23);
  if ((*(unsigned char *)(a2 + 8) & 2) != 0) {
    float v4 = (float *)(*(void *)(a2 + 16) + 28);
  }
  else {
    float v4 = (float *)(a2 + 60);
  }
  float v5 = v4[1];
  float v6 = v4[2];
  float v7 = v4[3];
  float v8 = v4[4] + v4[4];
  float v9 = v4[5] + v4[5];
  float v10 = v4[6] + v4[6];
  float v11 = (float)(v25 * v25) + -0.5;
  float v12 = (float)((float)(v9 * *((float *)&v23 + 1)) + (float)(*(float *)&v23 * v8)) + (float)(v24 * v10);
  float v13 = (float)((float)(v25 * (float)((float)(*((float *)&v23 + 1) * v10) - (float)(v24 * v9))) + (float)(v8 * v11))
      + (float)(*(float *)&v23 * v12);
  float v14 = (float)((float)(v25 * (float)((float)(v24 * v8) - (float)(*(float *)&v23 * v10))) + (float)(v9 * v11))
      + (float)(*((float *)&v23 + 1) * v12);
  float v15 = (float)((float)(v25 * (float)((float)(*(float *)&v23 * v9) - (float)(*((float *)&v23 + 1) * v8)))
              + (float)(v10 * v11))
      + (float)(v24 * v12);
  float v16 = v26 + v13;
  float v17 = v27 + v14;
  float v18 = v28;
  float v19 = (float)((float)((float)(v7 * *((float *)&v23 + 1)) + (float)(v25 * v5)) + (float)(v24 * *v4))
      - (float)(v6 * *(float *)&v23);
  float v20 = (float)((float)((float)(v7 * v24) + (float)(v25 * v6)) + (float)(*(float *)&v23 * v5))
      - (float)(*v4 * *((float *)&v23 + 1));
  float v21 = (float)((float)((float)(v25 * v7) - (float)(*(float *)&v23 * *v4)) - (float)(*((float *)&v23 + 1) * v5))
      - (float)(v24 * v6);
  *(float *)this = (float)((float)((float)(v7 * *(float *)&v23) + (float)(v25 * *v4))
                         + (float)(*((float *)&v23 + 1) * v6))
                 - (float)(v5 * v24);
  *((float *)this + 1) = v19;
  *((float *)this + 2) = v20;
  *((float *)this + 3) = v21;
  float result = v18 + v15;
  *((float *)this + 4) = v16;
  *((float *)this + 5) = v17;
  *((float *)this + 6) = v18 + v15;
  return result;
}

void *physx::Scb::Body::setWakeCounter(physx::Scb::Body *this, double a2)
{
  *((_DWORD *)this + 69) = LODWORD(a2);
  int v3 = *((_DWORD *)this + 2) >> 30;
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 7689)) {
      goto LABEL_8;
    }
  }
  else if (v3 != 3)
  {
    uint64_t v4 = *(void *)this;
LABEL_8:
    if (*(float *)&a2 > 0.0 && v4 != 0) {
      *((_DWORD *)this + 70) = 0;
    }
    float v7 = (char *)this + 32;
    int v8 = 0;
    goto LABEL_14;
  }
  if (*(float *)&a2 <= 0.0)
  {
    float result = physx::Scb::Scene::scheduleForUpdate(*(void **)this, (uint64_t)this, *(int8x8_t *)&a2);
    unsigned int v10 = *((_DWORD *)this + 71) | 0x1000000;
LABEL_20:
    *((_DWORD *)this + 71) = v10;
    return result;
  }
  if (v3 != 2)
  {
    float v5 = *(void **)this;
LABEL_19:
    *((_DWORD *)this + 70) = 0;
    *((_DWORD *)this + 69) = LODWORD(a2);
    float result = physx::Scb::Scene::scheduleForUpdate(v5, (uint64_t)this, *(int8x8_t *)&a2);
    unsigned int v10 = *((_DWORD *)this + 71) & 0xF8FFFFFF | 0x5000000;
    goto LABEL_20;
  }
  float v5 = *(void **)this;
  if (*(unsigned char *)(*(void *)this + 7689)) {
    goto LABEL_19;
  }
  *((_DWORD *)this + 70) = 0;
  *((_DWORD *)this + 69) = LODWORD(a2);
  float v7 = (char *)this + 32;
  int v8 = 1;
LABEL_14:
  return (void *)physx::Sc::BodyCore::setWakeCounter((uint64_t)v7, *(float *)&a2, v8);
}

void physx::NpBatchQuery::~NpBatchQuery(physx::NpBatchQuery *this)
{
  *(void *)this = &unk_26E72BED8;
  int v2 = *((_DWORD *)this + 9);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((void *)this + 3) != 0) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT((pthread_mutex_t **)this + 1);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpBatchQuery::~NpBatchQuery(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::NpBatchQuery::setUserMemory(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = 0;
  atomic_compare_exchange_strong((atomic_uint *volatile)(result + 60), (unsigned int *)&v9, 0);
  if (v9) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 73, "PxBatchQuery::setUserMemory: This batch is still executing, skipping setUserMemory", a6, a7, a8, a9);
  }
  *(_OWORD *)(result + 96) = *(_OWORD *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  *(void *)(result + 160) = *(void *)(a2 + 64);
  *(_OWORD *)(result + 128) = v11;
  *(_OWORD *)(result + 144) = v12;
  *(_OWORD *)(result + 112) = v10;
  return result;
}

uint64_t physx::NpBatchQuery::getUserMemory(physx::NpBatchQuery *this)
{
  return (uint64_t)this + 96;
}

uint64_t physx::NpBatchQuery::execute(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = 0;
  atomic_compare_exchange_strong((atomic_uint *volatile)(this + 60), (unsigned int *)&v9, 1u);
  if (v9 == -1)
  {
    long long v10 = "PxBatchQuery::execute: Another thread is still adding queries to this batch";
    uint64_t v11 = physx::shdfnd::Foundation::mInstance;
    uint64_t v12 = 317;
    goto LABEL_5;
  }
  if (v9 == 1)
  {
    long long v10 = "PxBatchQuery::execute: This batch is already executing";
    uint64_t v11 = physx::shdfnd::Foundation::mInstance;
    uint64_t v12 = 312;
LABEL_5:
    return physx::shdfnd::Foundation::error(v11, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", v12, v10, a6, a7, a8, a9);
  }
  uint64_t v13 = this;
  uint64_t v14 = *(unsigned int *)(this + 48);
  if (v14)
  {
    uint64_t v15 = *(void *)(this + 96) + 89;
    do
    {
      *(_WORD *)(v15 - 1) = 0;
      *(_DWORD *)(v15 - 17) = 0;
      *(void *)(v15 - 25) = 0;
      *(void *)(v15 - 9) = 0;
      v15 += 96;
      --v14;
    }
    while (v14);
  }
  uint64_t v16 = *(unsigned int *)(this + 52);
  if (v16)
  {
    uint64_t v17 = *(void *)(this + 128) + 49;
    do
    {
      *(_WORD *)(v17 - 1) = 0;
      *(_DWORD *)(v17 - 17) = 0;
      *(void *)(v17 - 25) = 0;
      *(void *)(v17 - 9) = 0;
      v17 += 56;
      --v16;
    }
    while (v16);
  }
  uint64_t v18 = *(unsigned int *)(this + 56);
  uint64_t v19 = *(void *)(this + 112);
  if (v18)
  {
    uint64_t v20 = v19 + 81;
    do
    {
      *(_WORD *)(v20 - 1) = 0;
      *(_DWORD *)(v20 - 17) = 0;
      *(void *)(v20 - 25) = 0;
      *(void *)(v20 - 9) = 0;
      v20 += 88;
      --v18;
    }
    while (v18);
  }
  uint64_t v22 = *(void *)(this + 96);
  uint64_t v21 = *(void *)(this + 104);
  uint64_t v24 = *(void *)(this + 128);
  uint64_t v23 = *(void *)(this + 136);
  uint64_t v25 = *(void *)(this + 120);
  int v85 = *(_DWORD *)(this + 144);
  int v86 = *(_DWORD *)(this + 152);
  int v84 = *(_DWORD *)(this + 148);
  int v26 = *(_DWORD *)(this + 72);
  uint64_t v114 = *(void *)(this + 64);
  int v115 = v26;
  long long v116 = *(_OWORD *)(this + 80);
  if (*(_DWORD *)(this + 168) == -16)
  {
    *(_DWORD *)(this + 168) = -16;
    *(_DWORD *)(this + 40) = 0;
    *(_DWORD *)(this + 56) = 0;
    *(void *)(this + 48) = 0;
    *(unsigned char *)(this + 172) = 0;
    do
    {
      int v27 = *(_DWORD *)(this + 60);
      int v28 = v27;
      atomic_compare_exchange_strong((atomic_uint *volatile)(this + 60), (unsigned int *)&v28, 0);
    }
    while (v28 != v27);
  }
  else
  {
    uint64_t v87 = v25;
    uint64_t v88 = v21;
    int v29 = 0;
    uint64_t v30 = 0;
    float v31 = &v95;
    do
    {
      uint64_t v32 = *(void *)(v13 + 24);
      uint64_t v33 = v32 + v30;
      uint64_t v30 = *(unsigned int *)(v32 + v30);
      _X8 = v32 + v30;
      __asm { PRFM            #0, [X8] }
      float32x2_t v38 = (void *)(v33 + 56);
      if (*(void *)(v33 + 56))
      {
        *(void *)(v33 + 56) = v33 + 104;
        uint64_t v39 = 116;
      }
      else
      {
        uint64_t v39 = 104;
      }
      if (*(void *)(v33 + 64))
      {
        uint64_t v40 = v33 + v39;
        v39 += 12;
        *(void *)(v33 + 64) = v40;
      }
      if (*(void *)(v33 + 88))
      {
        uint64_t v41 = v33 + v39;
        v39 += 28;
        *(void *)(v33 + 88) = v41;
      }
      if (*(void *)(v33 + 80))
      {
        unsigned int v42 = *(_DWORD *)(v33 + v39);
        _ZF = v42 > 4 || v42 == 1;
        uint64_t v44 = v39 + v33 + 4;
        if (_ZF) {
          uint64_t v44 = 0;
        }
        *(void *)(v33 + 80) = v44;
      }
      int v45 = *(char *)(v33 + 50);
      if (v45 == 2)
      {
        uint64_t v90 = v23;
        unsigned int v70 = v84 + 1227133513 * ((unint64_t)(v87 - *(void *)(v13 + 120)) >> 3);
        if (*(unsigned __int16 *)(v33 + 48) >= v70) {
          unsigned int v71 = v84 + 1227133513 * ((unint64_t)(v87 - *(void *)(v13 + 120)) >> 3);
        }
        else {
          unsigned int v71 = *(unsigned __int16 *)(v33 + 48);
        }
        *float v31 = 0;
        v31[1] = 0;
        int v96 = -1;
        __int16 v97 = 0;
        *(_OWORD *)float v99 = 0uLL;
        uint64_t v98 = 0;
        *(_DWORD *)&v99[16] = 2139095039;
        v99[24] = 0;
        uint64_t v100 = v87;
        uint64_t v101 = v71;
        float v94 = &unk_26E72C580;
        LOBYTE(v102) = 0;
        uint64_t v104 = 0;
        uint64_t v105 = 0;
        LODWORD(v106) = -1;
        WORD2(v106) = 0;
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        uint64_t v109 = 0;
        LODWORD(v110) = 2139095039;
        LOBYTE(v112) = 0;
        float v72 = *(void **)(v13 + 16);
        __int16 v91 = *(_WORD *)(v33 + 4);
        this = physx::NpSceneQueries::multiQuery<physx::PxSweepHit>(v72, (uint64_t)v38, (uint64_t)&v94, &v91, *(void **)(v33 + 40), v33 + 8, 0, (uint64_t)&v114);
        BOOL v73 = 0;
        if (!v70) {
          BOOL v73 = *(_WORD *)(v33 + 48) != 0;
        }
        char v74 = v102 | v73;
        LOBYTE(v102) = v74;
        uint64_t v75 = *(void *)(v33 + 32);
        long long v76 = *(_OWORD *)v31;
        *(_DWORD *)(v19 + 16) = *((_DWORD *)v31 + 4);
        *(_OWORD *)uint64_t v19 = v76;
        unsigned int v77 = HIDWORD(v101);
        if (v74) {
          char v78 = 2;
        }
        else {
          char v78 = 1;
        }
        if (HIDWORD(v101)) {
          BOOL v79 = 1;
        }
        else {
          BOOL v79 = v74 == 0;
        }
        *(void *)(v19 + 72) = v75;
        *(_WORD *)(v19 + 20) = v97;
        *(void *)(v19 + 24) = v98;
        *(_DWORD *)(v19 + 32) = *(_DWORD *)v99;
        *(_OWORD *)(v19 + 36) = *(_OWORD *)&v99[4];
        *(_DWORD *)(v19 + 52) = *(_DWORD *)&v99[20];
        *(unsigned char *)(v19 + 81) = v99[24];
        *(_DWORD *)(v19 + 64) = v77;
        *(unsigned char *)(v19 + 80) = v78;
        uint64_t v80 = v100;
        if (!v79) {
          uint64_t v80 = 0;
        }
        *(void *)(v19 + 56) = v80;
        v19 += 88;
        v87 += 56 * v77;
        uint64_t v23 = v90;
      }
      else if (v45 == 1)
      {
        unsigned int v57 = v86 + 1431655765 * ((unint64_t)(v23 - *(void *)(v13 + 136)) >> 3);
        unsigned int v58 = *(unsigned __int16 *)(v33 + 48);
        if (v58 >= v57) {
          unsigned int v58 = v86 + 1431655765 * ((unint64_t)(v23 - *(void *)(v13 + 136)) >> 3);
        }
        *float v31 = 0;
        v31[1] = 0;
        int v96 = -1;
        LOBYTE(v98) = 0;
        *(void *)float v99 = v23;
        *(void *)&v99[8] = v58;
        float v94 = &unk_26E72C538;
        v99[16] = 0;
        *(void *)&v99[24] = 0;
        uint64_t v100 = 0;
        LODWORD(v101) = -1;
        LOBYTE(v104) = 0;
        float v59 = *(void **)(v13 + 16);
        __int16 v92 = *(_WORD *)(v33 + 4);
        float v60 = v31;
        uint64_t v61 = v23;
        this = physx::NpSceneQueries::multiQuery<physx::PxOverlapHit>(v59, (uint64_t)v38, (uint64_t)&v94, &v92, *(void **)(v33 + 40), v33 + 8, 0, (uint64_t)&v114);
        BOOL v62 = 0;
        if (!v57) {
          BOOL v62 = *(_WORD *)(v33 + 48) != 0;
        }
        char v63 = v99[16] | v62;
        v99[16] = v63;
        uint64_t v64 = *(void *)(v33 + 32);
        long long v65 = *(_OWORD *)v60;
        *(void *)(v24 + 16) = v60[2];
        *(_OWORD *)uint64_t v24 = v65;
        unsigned int v66 = *(_DWORD *)&v99[12];
        if (v63) {
          char v67 = 2;
        }
        else {
          char v67 = 1;
        }
        if (*(_DWORD *)&v99[12]) {
          BOOL v68 = 1;
        }
        else {
          BOOL v68 = v63 == 0;
        }
        *(void *)(v24 + 40) = v64;
        *(unsigned char *)(v24 + 49) = v98;
        *(_DWORD *)(v24 + 32) = v66;
        *(unsigned char *)(v24 + 48) = v67;
        uint64_t v69 = *(void *)v99;
        if (!v68) {
          uint64_t v69 = 0;
        }
        *(void *)(v24 + 24) = v69;
        v24 += 56;
        uint64_t v23 = v61 + 24 * v66;
        float v31 = v60;
      }
      else if (!*(unsigned char *)(v33 + 50))
      {
        uint64_t v89 = v23;
        unint64_t v46 = (unint64_t)(v88 - *(void *)(v13 + 104)) >> 6;
        int v47 = v85 - v46;
        if (*(unsigned __int16 *)(v33 + 48) < (v85 - v46)) {
          int v47 = *(unsigned __int16 *)(v33 + 48);
        }
        *float v31 = 0;
        v31[1] = 0;
        int v96 = -1;
        __int16 v97 = 0;
        *(_OWORD *)float v99 = 0uLL;
        uint64_t v98 = 0;
        *(void *)&v99[16] = 2139095039;
        *(_DWORD *)&v99[24] = 0;
        LOBYTE(v100) = 0;
        uint64_t v101 = v88;
        int v102 = v47;
        unsigned int v103 = 0;
        float v94 = &unk_26E72C4F0;
        LOBYTE(v104) = 0;
        uint64_t v105 = 0;
        uint64_t v106 = 0;
        LODWORD(v107) = -1;
        WORD2(v107) = 0;
        uint64_t v109 = 0;
        uint64_t v110 = 0;
        uint64_t v108 = 0;
        uint64_t v111 = 2139095039;
        int v112 = 0;
        char v113 = 0;
        float32x2_t v48 = *(void **)(v13 + 16);
        __int16 v93 = *(_WORD *)(v33 + 4);
        this = physx::NpSceneQueries::multiQuery<physx::PxRaycastHit>(v48, v38, (uint64_t)&v94, &v93, *(void **)(v33 + 40), v33 + 8, 0, (uint64_t)&v114);
        BOOL v49 = 0;
        if (v85 == v46) {
          BOOL v49 = *(_WORD *)(v33 + 48) != 0;
        }
        char v50 = v104 | v49;
        LOBYTE(v104) = v50;
        uint64_t v51 = *(void *)(v33 + 32);
        long long v52 = *(_OWORD *)v31;
        *(_DWORD *)(v22 + 16) = *((_DWORD *)v31 + 4);
        *(_OWORD *)uint64_t v22 = v52;
        *(_WORD *)(v22 + 20) = v97;
        *(void *)(v22 + 24) = v98;
        *(_DWORD *)(v22 + 32) = *(_DWORD *)v99;
        *(_OWORD *)(v22 + 36) = *(_OWORD *)&v99[4];
        *(void *)(v22 + 52) = *(void *)&v99[20];
        uint64_t v53 = v103;
        if (v50) {
          char v54 = 2;
        }
        else {
          char v54 = 1;
        }
        if (v103) {
          BOOL v55 = 1;
        }
        else {
          BOOL v55 = v50 == 0;
        }
        *(void *)(v22 + 80) = v51;
        *(unsigned char *)(v22 + 89) = v100;
        *(_DWORD *)(v22 + 72) = v53;
        *(unsigned char *)(v22 + 88) = v54;
        uint64_t v56 = v101;
        if (!v55) {
          uint64_t v56 = 0;
        }
        *(void *)(v22 + 64) = v56;
        v22 += 96;
        v88 += v53 << 6;
        uint64_t v23 = v89;
      }
    }
    while (*(_DWORD *)v33 != -16 && ++v29 < 0xF4240);
    *(_DWORD *)(v13 + 168) = -16;
    *(_DWORD *)(v13 + 40) = 0;
    *(_DWORD *)(v13 + 56) = 0;
    *(void *)(v13 + 48) = 0;
    *(unsigned char *)(v13 + 172) = 0;
    do
    {
      int v82 = *(_DWORD *)(v13 + 60);
      int v83 = v82;
      atomic_compare_exchange_strong((atomic_uint *volatile)(v13 + 60), (unsigned int *)&v83, 0);
    }
    while (v83 != v82);
  }
  return this;
}

uint64_t physx::NpBatchQuery::writeBatchHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 40);
  unsigned int v6 = *(_DWORD *)(a1 + 36) & 0x7FFFFFFF;
  unsigned int v7 = 3 * (v5 + 56);
  if (v5 + 56 > v6 && v6 < v7) {
    physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1 + 24, v7);
  }
  uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized((uint64_t)v4, v5 + 56);
  uint64_t v10 = *(void *)(a1 + 24) + *(unsigned int *)(a1 + 40);
  *(_DWORD *)uint64_t v10 = *(_DWORD *)a2;
  *(_WORD *)(v10 + 4) = *(_WORD *)(a2 + 4);
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  *(_WORD *)(v10 + 24) = *(_WORD *)(a2 + 24);
  long long v11 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v10 + 47) = *(_DWORD *)(a2 + 47);
  *(_OWORD *)(v10 + 32) = v11;
  *(_DWORD *)(a1 + 40) = v5 + 56;
  unsigned int v14 = *(_DWORD *)(a1 + 168);
  uint64_t v13 = (_DWORD *)(a1 + 168);
  uint64_t v12 = v14;
  uint64_t v15 = v13;
  if (v14 != -16) {
    uint64_t v15 = (_DWORD *)(*v4 + v12);
  }
  *uint64_t v15 = v5;
  *uint64_t v13 = v5;
  return result;
}

_DWORD *physx::NpBatchQuery::raycast(_DWORD *result, uint64_t a2, uint64_t a3, __int16 a4, _WORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, char a10)
{
  if (result[12] < result[39])
  {
    uint64_t v10 = result;
    int v11 = 0;
    atomic_compare_exchange_strong(result + 15, (unsigned int *)&v11, 0xFFFFFFFF);
    if (v11 == 1)
    {
      uint64_t v12 = physx::shdfnd::Foundation::mInstance;
      return (_DWORD *)physx::shdfnd::Foundation::error(v12, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 484, "PxBatchQuery::raycast: This batch is still executing, skipping query.", a6, a7, a8, a10);
    }
    else
    {
      _X20 = a3;
      _X21 = a2;
      ++result[12];
      WORD2(v24) = *a5;
      long long v25 = *(_OWORD *)a6;
      LOWORD(v26) = *(_WORD *)(a6 + 16);
      uint64_t v27 = a7;
      uint64_t v28 = a8;
      __int16 v29 = a4;
      char v30 = 0;
      LODWORD(v24) = -16;
      physx::NpBatchQuery::writeBatchHeader((uint64_t)result, (uint64_t)&v24);
      __asm
      {
        PRFM            #0, [X21]
        PRFM            #0, [X20]
      }
      uint64_t v24 = _X21;
      *(void *)&long long v25 = _X20;
      *((float *)&v25 + 2) = a9;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      LODWORD(v28) = 0;
      uint64_t result = (_DWORD *)writeQueryInput((uint64_t)(v10 + 6), (long long *)&v24);
      do
      {
        int v22 = v10[15];
        int v23 = v22;
        atomic_compare_exchange_strong(v10 + 15, (unsigned int *)&v23, 0);
      }
      while (v23 != v22);
    }
  }
  return result;
}

uint64_t writeQueryInput(uint64_t a1, long long *a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = v4 + 48;
  unsigned int v6 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
  unsigned int v7 = 3 * (v4 + 48);
  if (v4 + 48 > v6 && v6 < v7) {
    physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, v7);
  }
  uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v4 + 48);
  uint64_t v10 = (_OWORD *)(*(void *)a1 + *(unsigned int *)(a1 + 16));
  long long v11 = *a2;
  long long v12 = a2[1];
  *(_OWORD *)((char *)v10 + 28) = *(long long *)((char *)a2 + 28);
  *uint64_t v10 = v11;
  v10[1] = v12;
  *(_DWORD *)(a1 + 16) = v5;
  uint64_t v13 = *(void *)a2;
  if (*(void *)a2)
  {
    unsigned int v5 = v4 + 60;
    unsigned int v14 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
    if (v4 + 60 > v14 && v14 < 3 * v5) {
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v5);
    }
    uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v4 + 60);
    uint64_t v15 = *(void *)a1 + *(unsigned int *)(a1 + 16);
    *(void *)uint64_t v15 = *(void *)v13;
    *(_DWORD *)(v15 + 8) = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(a1 + 16) = v5;
  }
  uint64_t v16 = *((void *)a2 + 1);
  if (v16)
  {
    v5 += 12;
    unsigned int v17 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
    unsigned int v18 = 3 * v5;
    if (v5 > v17 && v17 < v18) {
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, v18);
    }
    uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v5);
    uint64_t v20 = *(void *)a1 + *(unsigned int *)(a1 + 16);
    *(void *)uint64_t v20 = *(void *)v16;
    *(_DWORD *)(v20 + 8) = *(_DWORD *)(v16 + 8);
    *(_DWORD *)(a1 + 16) = v5;
  }
  uint64_t v21 = *((void *)a2 + 4);
  if (v21)
  {
    v5 += 28;
    unsigned int v22 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
    if (v5 > v22 && v22 < 3 * v5) {
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v5);
    }
    uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v5);
    uint64_t v23 = *(void *)a1 + *(unsigned int *)(a1 + 16);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v21;
    *(void *)(v23 + 16) = *(void *)(v21 + 16);
    *(_DWORD *)(v23 + 24) = *(_DWORD *)(v21 + 24);
    *(_DWORD *)(a1 + 16) = v5;
  }
  uint64_t v24 = (int *)*((void *)a2 + 3);
  if (v24)
  {
    int v25 = *v24;
    unsigned int v26 = v5 + 4;
    unsigned int v27 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
    if (v5 + 4 > v27 && v27 < 3 * v26) {
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v26);
    }
    uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v5 + 4);
    *(_DWORD *)(*(void *)a1 + *(unsigned int *)(a1 + 16)) = v25;
    *(_DWORD *)(a1 + 16) = v26;
    switch(v25)
    {
      case 0:
        unsigned int v28 = v5 + 12;
        unsigned int v29 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
        if (v28 > v29 && v29 < 3 * v28) {
          physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v28);
        }
        uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v28);
        *(void *)(*(void *)a1 + *(unsigned int *)(a1 + 16)) = *(void *)v24;
        goto LABEL_44;
      case 2:
        unsigned int v28 = v5 + 16;
        unsigned int v30 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
        if (v28 > v30 && v30 < 3 * v28) {
          physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v28);
        }
        uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v28);
        uint64_t v31 = *(void *)a1 + *(unsigned int *)(a1 + 16);
        uint64_t v32 = *(void *)v24;
        *(_DWORD *)(v31 + 8) = v24[2];
        *(void *)uint64_t v31 = v32;
        goto LABEL_44;
      case 3:
        unsigned int v28 = v5 + 20;
        unsigned int v33 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
        if (v28 > v33 && v33 < 3 * v28) {
          physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v28);
        }
        uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v28);
        uint64_t v34 = *(void *)a1 + *(unsigned int *)(a1 + 16);
        *(_DWORD *)uint64_t v34 = *v24;
        *(void *)(v34 + 4) = *(void *)(v24 + 1);
        *(_DWORD *)(v34 + 12) = v24[3];
        goto LABEL_44;
      case 4:
        unsigned int v28 = v5 + 52;
        unsigned int v35 = *(_DWORD *)(a1 + 12) & 0x7FFFFFFF;
        if (v28 > v35 && v35 < 3 * v28) {
          physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(a1, 3 * v28);
        }
        uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(a1, v28);
        uint64_t v36 = *(void *)a1 + *(unsigned int *)(a1 + 16);
        *(_DWORD *)uint64_t v36 = *v24;
        *(_OWORD *)(v36 + 4) = *(_OWORD *)(v24 + 1);
        *(void *)(v36 + 20) = *(void *)(v24 + 5);
        *(_DWORD *)(v36 + 28) = v24[7];
        *(void *)(v36 + 32) = *((void *)v24 + 4);
        *(unsigned char *)(v36 + 40) = *((unsigned char *)v24 + 40);
        __int16 v37 = *(_WORD *)((char *)v24 + 41);
        *(unsigned char *)(v36 + 43) = *((unsigned char *)v24 + 43);
        *(_WORD *)(v36 + 41) = v37;
LABEL_44:
        *(_DWORD *)(a1 + 16) = v28;
        break;
      default:
        return result;
    }
  }
  return result;
}

_DWORD *physx::NpBatchQuery::overlap(_DWORD *result, uint64_t a2, uint64_t a3, __int16 a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (result[13] < result[41])
  {
    int v9 = result;
    int v10 = 0;
    atomic_compare_exchange_strong(result + 15, (unsigned int *)&v10, 0xFFFFFFFF);
    if (v10 == 1)
    {
      uint64_t v11 = physx::shdfnd::Foundation::mInstance;
      return (_DWORD *)physx::shdfnd::Foundation::error(v11, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 505, "PxBatchQuery::overlap: This batch is still executing, skipping query.", a6, a7, a8, a9);
    }
    else
    {
      _X20 = a3;
      _X21 = a2;
      ++result[13];
      WORD2(v22) = 0;
      long long v23 = *a5;
      LOWORD(v24) = *((_WORD *)a5 + 8);
      uint64_t v25 = a6;
      uint64_t v26 = a7;
      __int16 v27 = a4;
      char v28 = 1;
      LODWORD(v22) = -16;
      physx::NpBatchQuery::writeBatchHeader((uint64_t)result, (uint64_t)&v22);
      __asm
      {
        PRFM            #0, [X21]
        PRFM            #0, [X20]
      }
      uint64_t v24 = _X21;
      uint64_t v25 = _X20;
      LODWORD(v26) = 0;
      uint64_t v22 = 0;
      *(void *)&long long v23 = 0;
      uint64_t result = (_DWORD *)writeQueryInput((uint64_t)(v9 + 6), (long long *)&v22);
      do
      {
        int v20 = v9[15];
        int v21 = v20;
        atomic_compare_exchange_strong(v9 + 15, (unsigned int *)&v21, 0);
      }
      while (v21 != v20);
    }
  }
  return result;
}

_DWORD *physx::NpBatchQuery::sweep(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, _WORD *a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t a11)
{
  if (result[14] < result[40])
  {
    uint64_t v11 = result;
    int v12 = 0;
    atomic_compare_exchange_strong(result + 15, (unsigned int *)&v12, 0xFFFFFFFF);
    if (v12 == 1)
    {
      uint64_t v13 = physx::shdfnd::Foundation::mInstance;
      return (_DWORD *)physx::shdfnd::Foundation::error(v13, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 541, "PxBatchQuery::sweep: This batch is still executing, skipping query.", (uint64_t)a6, a7, a8, a11);
    }
    else
    {
      _X21 = a4;
      _X20 = a3;
      _X22 = a2;
      ++result[14];
      WORD2(v34) = *a6;
      long long v35 = *(_OWORD *)a7;
      LOWORD(v36) = *(_WORD *)(a7 + 16);
      uint64_t v37 = a8;
      uint64_t v38 = a11;
      __int16 v39 = a5;
      char v40 = 2;
      LODWORD(v34) = -16;
      physx::NpBatchQuery::writeBatchHeader((uint64_t)result, (uint64_t)&v34);
      int v23 = (unsigned __int16)*a6;
      *((unsigned char *)v11 + 172) |= (v23 & 0x200) != 0;
      if ((~v23 & 0x300) == 0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 551, " Precise sweep doesn't support MTD. Perform MTD with default sweep", v20, v21, v22, v33);
        int v23 = *a6 & 0xFEFF;
        *a6 &= ~0x100u;
      }
      if ((~v23 & 0x210) == 0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 557, " eMTD cannot be used in conjunction with eASSUME_NO_INITIAL_OVERLAP. eASSUME_NO_INITIAL_OVERLAP will be ignored", v20, v21, v22, v33);
        LOWORD(v23) = *a6 & 0xFFEF;
        *a6 = v23;
      }
      if (a10 > 0.0 && (v23 & 0x100) != 0)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 565, " Precise sweep doesn't support inflation, inflation will be overwritten to be zero", v20, v21, v22, v33);
        a10 = 0.0;
      }
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X20]
        PRFM            #0, [X21]
      }
      *((float *)&v35 + 2) = a9;
      uint64_t v34 = 0;
      *(void *)&long long v35 = _X21;
      uint64_t v36 = _X22;
      uint64_t v37 = _X20;
      *(float *)&uint64_t v38 = a10;
      uint64_t result = (_DWORD *)writeQueryInput((uint64_t)(v11 + 6), (long long *)&v34);
      do
      {
        int v31 = v11[15];
        int v32 = v31;
        atomic_compare_exchange_strong(v11 + 15, (unsigned int *)&v32, 0);
      }
      while (v32 != v31);
    }
  }
  return result;
}

uint64_t physx::NpBatchQuery::release(physx::NpBatchQuery *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = 0;
  atomic_compare_exchange_strong((atomic_uint *volatile)this + 15, (unsigned int *)&v9, 0);
  if (v9) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpBatchQuery.cpp", 577, "PxBatchQuery::release: This batch is still executing, skipping release", a6, a7, a8, a9);
  }
  else {
    return physx::NpScene::releaseBatchQuery(*((void *)this + 2), (uint64_t)this);
  }
}

uint64_t physx::NpBatchQuery::getPreFilterShader(physx::NpBatchQuery *this)
{
  return *((void *)this + 10);
}

uint64_t physx::NpBatchQuery::getPostFilterShader(physx::NpBatchQuery *this)
{
  return *((void *)this + 11);
}

uint64_t physx::NpBatchQuery::getFilterShaderData(physx::NpBatchQuery *this)
{
  return *((void *)this + 8);
}

uint64_t physx::NpBatchQuery::getFilterShaderDataSize(physx::NpBatchQuery *this)
{
  return *((unsigned int *)this + 18);
}

int32x2_t *physx::NpConstraint::setConstraintFunctions(int32x2_t *result, uint64_t a2, int8x16_t *a3)
{
  uint64_t v3 = (uint64_t)result;
  result[11] = (int32x2_t)a2;
  int8x16_t v4 = vextq_s8(*a3, *a3, 8uLL);
  *(int8x16_t *)result[12].i8 = v4;
  result[14] = *(int32x2_t *)a3[1].i8;
  int32x2_t v5 = result[2];
  if (v5)
  {
    uint64_t result = (int32x2_t *)(*(void *)&v5
                         + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(*(void *)&v5 + 8)));
    int32x2_t v6 = result[1];
    if (!*(void *)&v6) {
      goto LABEL_13;
    }
    uint64_t v7 = *(unsigned int *)(*(void *)&v6 + 80);
    if (!v7) {
      goto LABEL_13;
    }
    int v8 = (void *)(*(void *)(*(void *)&v6 + 72) + 8);
    uint64_t v9 = 0xFFFFFFFFLL;
    while (*((unsigned char *)v8 - 8) || *v8 != v3)
    {
      --v9;
      v8 += 2;
      if (!--v7) {
        goto LABEL_13;
      }
    }
    if (v9)
    {
      v5.i32[0] = 0;
    }
    else
    {
LABEL_13:
      uint64_t result = (int32x2_t *)physx::NpActor::addConnector((uint64_t)result, 0, v3);
      v5.i32[0] = 1;
    }
  }
  uint64_t v11 = *(unsigned __int16 **)(v3 + 24);
  if (!v11) {
    goto LABEL_25;
  }
  uint64_t result = (int32x2_t *)((char *)v11 + *((void *)&physx::NpActor::sLazyInitOffsets + v11[4]));
  int32x2_t v12 = result[1];
  if (!*(void *)&v12) {
    goto LABEL_27;
  }
  uint64_t v13 = *(unsigned int *)(*(void *)&v12 + 80);
  if (!v13) {
    goto LABEL_27;
  }
  unsigned int v14 = (void *)(*(void *)(*(void *)&v12 + 72) + 8);
  uint64_t v15 = 0xFFFFFFFFLL;
  while (*((unsigned char *)v14 - 8) || *v14 != v3)
  {
    --v15;
    v14 += 2;
    if (!--v13) {
      goto LABEL_27;
    }
  }
  if (v15)
  {
LABEL_25:
    if (!v5.i32[0]) {
      return result;
    }
  }
  else
  {
LABEL_27:
    physx::NpActor::addConnector((uint64_t)result, 0, v3);
    uint64_t v11 = *(unsigned __int16 **)(v3 + 24);
  }
  uint64_t v17 = *(void *)(v3 + 16);
  if (!v17
    || ((*(void (**)(uint64_t *__return_ptr, void))(*(void *)v17 + 104))(&v29, *(void *)(v3 + 16)),
        (v29 & 8) != 0))
  {
    uint64_t v18 = 0;
    if (!v11) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v17);
    if (!v11) {
      goto LABEL_35;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *))(*(void *)v11 + 104))(&v29, v11);
  if ((v29 & 8) == 0)
  {
    uint64_t result = (int32x2_t *)(*(uint64_t (**)(unsigned __int16 *))(*(void *)v11 + 56))(v11);
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = 0;
LABEL_36:
  uint64_t v19 = (void *)(v3 + 32);
  BOOL v20 = v17 == 0;
  if (v11) {
    BOOL v21 = result == 0;
  }
  else {
    BOOL v21 = 0;
  }
  int v22 = !v21;
  if (v18)
  {
    BOOL v20 = 1;
    int v23 = (int32x2_t *)v18;
  }
  else
  {
    int v23 = result;
  }
  if ((v20 & v22) != 0) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  if (((*(_DWORD *)(v3 + 40) >> 30) - 1) <= 1)
  {
    if (*v19) {
      uint64_t v25 = (int32x2_t *)(*v19 - 16);
    }
    else {
      uint64_t v25 = 0;
    }
    if (v25 == v24) {
      return result;
    }
    if (*v19)
    {
      uint64_t v29 = v3;
      physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v25[1136], &v29);
      uint64_t result = physx::Scb::Scene::removeConstraint(v25 + 2, v3 + 32, v26);
    }
  }
  if (v24)
  {
    uint64_t v29 = v3;
    char v30 = 0;
    __int16 v27 = (void *)physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v24 + 1136, &v29, &v30, *(int8x8_t *)v4.i8);
    if (!v30) {
      *__int16 v27 = v29;
    }
    return physx::Scb::Scene::add<physx::Scb::Constraint>(v24 + 2, (physx::Scb::Base *)(v3 + 32), v24 + 996, v28);
  }
  return result;
}

void physx::NpConstraint::~NpConstraint(physx::NpConstraint *this)
{
  *(void *)this = &unk_26E72BF58;
  if (*((_WORD *)this + 5)) {
    (*(void (**)(void))(**((void **)this + 11) + 16))(*((void *)this + 11));
  }
  uint64_t v2 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 8));
  }
  if (*(_DWORD *)(v2 + 1004))
  {
    unint64_t v3 = ((unint64_t)this + ~((void)this << 32)) ^ (((unint64_t)this + ~((void)this << 32)) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    int32x2_t v6 = (_DWORD *)(*(void *)(v2 + 976)
                  + 4 * ((*(_DWORD *)(v2 + 988) - 1) & ((v5 >> 31) ^ v5)));
    uint64_t v7 = *v6;
    if (v7 != -1)
    {
      uint64_t v8 = *(void *)(v2 + 960);
      uint64_t v9 = *(void *)(v2 + 968);
      if (*(physx::NpConstraint **)(v8 + 8 * v7) == this)
      {
LABEL_12:
        *int32x2_t v6 = *(_DWORD *)(v9 + 4 * v7);
        *(int32x2_t *)(v2 + 1000) = vadd_s32(*(int32x2_t *)(v2 + 1000), (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(v9 + 4 * v7) = *(_DWORD *)(v2 + 996);
        *(_DWORD *)(v2 + 996) = v7;
      }
      else
      {
        while (1)
        {
          uint64_t v10 = v7;
          uint64_t v7 = *(unsigned int *)(v9 + 4 * v7);
          if (v7 == -1) {
            break;
          }
          if (*(physx::NpConstraint **)(v8 + 8 * v7) == this)
          {
            int32x2_t v6 = (_DWORD *)(v9 + 4 * v10);
            goto LABEL_12;
          }
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 8));
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpConstraint::~NpConstraint(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::NpConstraint::release(physx::NpConstraint *this)
{
  if (((*((_DWORD *)this + 10) >> 30) - 1) > 1)
  {
    unint64_t v3 = 0;
  }
  else
  {
    uint64_t v2 = *((void *)this + 4);
    if (v2) {
      unint64_t v3 = (int32x2_t *)(v2 - 16);
    }
    else {
      unint64_t v3 = 0;
    }
  }
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, 0, 1);
  unint64_t v4 = (unsigned __int16 *)*((void *)this + 2);
  if (v4) {
    physx::NpActor::removeConnector((uint64_t)v4 + *((void *)&physx::NpActor::sLazyInitOffsets + v4[4]), (physx::PxActor *)v4, 0, (uint64_t)this);
  }
  unint64_t v5 = (unsigned __int16 *)*((void *)this + 3);
  if (v5) {
    physx::NpActor::removeConnector((uint64_t)v5 + *((void *)&physx::NpActor::sLazyInitOffsets + v5[4]), (physx::PxActor *)v5, 0, (uint64_t)this);
  }
  if (v3)
  {
    uint64_t v8 = this;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v3[1136], (uint64_t *)&v8);
    physx::Scb::Scene::removeConstraint(v3 + 2, (uint64_t)this + 32, v6);
  }
  return physx::Scb::Base::destroy((uint64_t)this + 32);
}

uint64_t physx::NpConstraint::getScene(physx::NpConstraint *this)
{
  if (((*((_DWORD *)this + 10) >> 30) - 1) > 1) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 4);
  if (v1) {
    return v1 - 16;
  }
  else {
    return 0;
  }
}

uint64_t physx::NpConstraint::getActors(uint64_t result, void *a2, void *a3)
{
  *a2 = *(void *)(result + 16);
  *a3 = *(void *)(result + 24);
  return result;
}

physx::Sc::ConstraintSim *physx::NpConstraint::setActors(physx::NpConstraint *this, physx::PxRigidActor *a2, physx::PxRigidActor *a3, int8x8_t a4)
{
  uint64_t v7 = (unsigned __int16 *)*((void *)this + 2);
  if (v7) {
    physx::NpActor::removeConnector((uint64_t)v7 + *((void *)&physx::NpActor::sLazyInitOffsets + v7[4]), (physx::PxActor *)v7, 0, (uint64_t)this);
  }
  uint64_t v8 = (unsigned __int16 *)*((void *)this + 3);
  if (v8) {
    physx::NpActor::removeConnector((uint64_t)v8 + *((void *)&physx::NpActor::sLazyInitOffsets + v8[4]), (physx::PxActor *)v8, 0, (uint64_t)this);
  }
  if (a2) {
    physx::NpActor::addConnector((uint64_t)a2 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a2 + 4)), 0, (uint64_t)this);
  }
  if (a3) {
    physx::NpActor::addConnector((uint64_t)a3 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4)), 0, (uint64_t)this);
  }
  *((void *)this + 2) = a2;
  *((void *)this + 3) = a3;
  if (!a2
    || ((*(void (**)(physx::NpConstraint **__return_ptr, physx::PxRigidActor *))(*(void *)a2 + 104))(&v27, a2), (v27 & 8) != 0))
  {
    uint64_t v9 = 0;
    if (!a3) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(physx::PxRigidActor *))(*(void *)a2 + 56))(a2);
    if (!a3) {
      goto LABEL_16;
    }
  }
  (*(void (**)(physx::NpConstraint **__return_ptr, physx::PxRigidActor *))(*(void *)a3 + 104))(&v27, a3);
  if ((v27 & 8) == 0)
  {
    uint64_t v10 = (*(uint64_t (**)(physx::PxRigidActor *))(*(void *)a3 + 56))(a3);
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v10 = 0;
LABEL_17:
  BOOL v11 = a2 == 0;
  if (a3) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  int v13 = !v12;
  if (v9)
  {
    BOOL v11 = 1;
    unsigned int v14 = (int32x2_t *)v9;
  }
  else
  {
    unsigned int v14 = (int32x2_t *)v10;
  }
  if ((v11 & v13) != 0) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  if (((*((_DWORD *)this + 10) >> 30) - 1) > 1)
  {
    if (v15) {
      goto LABEL_37;
    }
LABEL_40:
    if (a2)
    {
      BOOL v21 = (physx::PxRigidActor *)((char *)a2 + 96);
      if (a3)
      {
LABEL_42:
        int v22 = (physx::PxRigidActor *)((char *)a3 + 96);
        return physx::Scb::Constraint::setBodies((physx::NpConstraint *)((char *)this + 32), v21, v22, a4);
      }
    }
    else
    {
      BOOL v21 = 0;
      if (a3) {
        goto LABEL_42;
      }
    }
    int v22 = 0;
    return physx::Scb::Constraint::setBodies((physx::NpConstraint *)((char *)this + 32), v21, v22, a4);
  }
  uint64_t v16 = *((void *)this + 4);
  if (v16) {
    uint64_t v17 = (int32x2_t *)(v16 - 16);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17 == v15) {
    goto LABEL_40;
  }
  if (v16)
  {
    __int16 v27 = this;
    physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&v17[1136], (uint64_t *)&v27);
    physx::Scb::Scene::removeConstraint(v17 + 2, (uint64_t)this + 32, v18);
  }
LABEL_37:
  if (a2)
  {
    uint64_t v19 = (physx::PxRigidActor *)((char *)a2 + 96);
    if (a3)
    {
LABEL_39:
      BOOL v20 = (physx::PxRigidActor *)((char *)a3 + 96);
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v19 = 0;
    if (a3) {
      goto LABEL_39;
    }
  }
  BOOL v20 = 0;
LABEL_45:
  uint64_t result = physx::Scb::Constraint::setBodies((physx::NpConstraint *)((char *)this + 32), v19, v20, a4);
  if (v15)
  {
    __int16 v27 = this;
    char v28 = 0;
    uint64_t v25 = (void *)physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v15 + 1136, &v27, &v28, v24);
    if (!v28) {
      *uint64_t v25 = v27;
    }
    return (physx::Sc::ConstraintSim *)physx::Scb::Scene::add<physx::Scb::Constraint>(v15 + 2, (physx::NpConstraint *)((char *)this + 32), v15 + 996, v26);
  }
  return result;
}

physx::Sc::ConstraintSim *physx::Scb::Constraint::setBodies(physx::Scb::Constraint *this, physx::Scb::RigidObject *a2, physx::Scb::RigidObject *a3, int8x8_t a4)
{
  if (!a2)
  {
    unint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    int8x8_t v6 = 0;
    goto LABEL_6;
  }
  unint64_t v5 = (char *)a2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*((unsigned char *)a2 + 11) & 0xF) + 3);
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  int8x8_t v6 = (char *)a3 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*((unsigned char *)a3 + 11) & 0xF) + 3);
LABEL_6:
  unsigned int v7 = *((_DWORD *)this + 2);
  if (v7 >> 30 == 3 || v7 >> 30 == 2 && *(unsigned char *)(*(void *)this + 7689))
  {
    uint64_t v8 = (void *)*((void *)this + 2);
    if (!v8)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)this, HIBYTE(v7) & 0xF).n128_u64[0];
      *((void *)this + 2) = v8;
    }
    *uint64_t v8 = v5;
    v8[1] = v6;
    uint64_t result = (physx::Sc::ConstraintSim *)physx::Scb::Scene::scheduleForUpdate(*(void **)this, (uint64_t)this, a4);
    *((_DWORD *)this + 2) |= 1u;
  }
  else
  {
    uint64_t result = (physx::Sc::ConstraintSim *)*((void *)this + 13);
    if (result)
    {
      physx::Sc::ConstraintSim::preBodiesChange(result, a4);
      uint64_t result = (physx::Sc::ConstraintSim *)*((void *)this + 13);
      if (result) {
        uint64_t result = physx::Sc::ConstraintSim::postBodiesChange(result, (uint64_t)v5, (uint64_t)v6, v10);
      }
    }
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  return result;
}

uint64_t physx::NpConstraint::markDirty(uint64_t this)
{
  *(unsigned char *)(this + 176) = 1;
  return this;
}

physx::Sc::ConstraintSim *physx::NpConstraint::setFlags(uint64_t a1, __int16 *a2, int8x8_t a3)
{
  uint64_t v4 = a1 + 32;
  __int16 v5 = *a2;
  unsigned int v6 = *(_DWORD *)(a1 + 40);
  if (v6 >> 30 == 2)
  {
    unsigned int v7 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    __int16 v11 = *a2;
    return physx::Sc::ConstraintCore::setFlags((physx::Sc::ConstraintSim *)(a1 + 56), &v11, a3);
  }
  if (v6 >> 30 != 3) {
    goto LABEL_8;
  }
  unsigned int v7 = *(void **)v4;
LABEL_5:
  uint64_t v8 = *(void *)(a1 + 48);
  if (!v8)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v7, HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v8 = v9;
    *(void *)(a1 + 48) = v9;
    unsigned int v7 = *(void **)(a1 + 32);
  }
  *(_WORD *)(v8 + 24) = v5;
  uint64_t result = (physx::Sc::ConstraintSim *)physx::Scb::Scene::scheduleForUpdate(v7, v4, a3);
  *(_DWORD *)(a1 + 40) |= 4u;
  return result;
}

uint64_t physx::NpConstraint::getFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  if ((*(unsigned char *)(this + 40) & 4) != 0)
  {
    __int16 v3 = *(_WORD *)(this + 168) | 0xFBFE;
    __int16 v2 = *(_WORD *)(*(void *)(this + 48) + 24);
  }
  else
  {
    __int16 v2 = *(_WORD *)(this + 56);
    __int16 v3 = *(_WORD *)(this + 168) | 0xFBFE;
  }
  *a2 = v3 & v2;
  return this;
}

physx::Sc::ConstraintSim *physx::NpConstraint::setFlag(uint64_t a1, __int16 a2, int a3, int8x8_t a4)
{
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    __int16 v7 = *(_WORD *)(a1 + 168) | 0xFBFE;
    __int16 v6 = *(_WORD *)(*(void *)(a1 + 48) + 24);
  }
  else
  {
    __int16 v6 = *(_WORD *)(a1 + 56);
    __int16 v7 = *(_WORD *)(a1 + 168) | 0xFBFE;
  }
  __int16 v8 = v7 & v6;
  uint64_t v9 = a1 + 32;
  __int16 v10 = v8 | a2;
  __int16 v11 = v8 & ~a2;
  if (a3) {
    __int16 v12 = v10;
  }
  else {
    __int16 v12 = v11;
  }
  if (v5 >> 30 == 2)
  {
    int v13 = *(void **)v9;
    if (*(unsigned char *)(*(void *)v9 + 7689)) {
      goto LABEL_11;
    }
LABEL_14:
    __int16 v17 = v12;
    return physx::Sc::ConstraintCore::setFlags((physx::Sc::ConstraintSim *)(a1 + 56), &v17, a4);
  }
  if (v5 >> 30 != 3) {
    goto LABEL_14;
  }
  int v13 = *(void **)v9;
LABEL_11:
  uint64_t v14 = *(void *)(a1 + 48);
  if (!v14)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v13, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v14 = v15;
    *(void *)(a1 + 48) = v15;
    int v13 = *(void **)(a1 + 32);
  }
  *(_WORD *)(v14 + 24) = v12;
  uint64_t result = (physx::Sc::ConstraintSim *)physx::Scb::Scene::scheduleForUpdate(v13, a1 + 32, a4);
  *(_DWORD *)(a1 + 40) |= 4u;
  return result;
}

float physx::NpConstraint::getForce(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)(a1 + 144);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 152);
  *(void *)a3 = *(void *)(a1 + 156);
  float result = *(float *)(a1 + 164);
  *(float *)(a3 + 8) = result;
  return result;
}

uint64_t physx::NpConstraint::updateConstants(uint64_t this)
{
  if (*(unsigned char *)(this + 176))
  {
    uint64_t v1 = this;
    __int16 v2 = (void *)(***(uint64_t (****)(void))(this + 88))(*(void *)(this + 88));
    this = *(void *)(v1 + 136);
    if (this)
    {
      this = physx::Sc::ConstraintSim::setConstantsLL((void **)this, v2);
      *(unsigned char *)(v1 + 176) = 0;
    }
  }
  return this;
}

void *physx::NpConstraint::setBreakForce(physx::NpConstraint *this, int8x8_t a2, float a3)
{
  __int32 v4 = a2.i32[0];
  __int16 v6 = (char *)this + 32;
  unsigned int v7 = *((_DWORD *)this + 10);
  if (v7 >> 30 == 2)
  {
    __int16 v8 = *(void **)v6;
    if (*(unsigned char *)(*(void *)v6 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v7 >> 30 == 3)
  {
    __int16 v8 = *(void **)v6;
LABEL_5:
    uint64_t v9 = *((void *)this + 6);
    if (!v9)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v8, HIBYTE(v7) & 0xF).n128_u64[0];
      uint64_t v9 = v10;
      *((void *)this + 6) = v10;
      __int16 v8 = (void *)*((void *)this + 4);
    }
    *(_DWORD *)(v9 + 16) = v4;
    *(float *)(v9 + 20) = a3;
    float result = physx::Scb::Scene::scheduleForUpdate(v8, (uint64_t)v6, a2);
    *((_DWORD *)this + 10) |= 2u;
    return result;
  }
  *((_DWORD *)this + 31) = a2.i32[0];
  *((float *)this + 32) = a3;
  float result = (void *)*((void *)this + 17);
  if (result)
  {
    return (void *)physx::Sc::ConstraintSim::setBreakForceLL((uint64_t)result, *(double *)&a2, a3);
  }
  return result;
}

float physx::NpConstraint::getBreakForce(physx::NpConstraint *this, float *a2, float *a3)
{
  if ((*((unsigned char *)this + 40) & 2) != 0)
  {
    uint64_t v5 = *((void *)this + 6);
    __int16 v3 = (float *)(v5 + 16);
    __int32 v4 = (float *)(v5 + 20);
  }
  else
  {
    __int16 v3 = (float *)((char *)this + 124);
    __int32 v4 = (float *)((char *)this + 128);
  }
  *a2 = *v3;
  float result = *v4;
  *a3 = *v4;
  return result;
}

void *physx::NpConstraint::setMinResponseThreshold(void *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  __int16 v3 = this;
  uint64_t v4 = (uint64_t)(this + 4);
  unsigned int v5 = *((_DWORD *)this + 10);
  if (v5 >> 30 == 2)
  {
    this = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(void **)v4;
LABEL_5:
    uint64_t v6 = v3[6];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v3[6] = v7;
      this = (void *)v3[4];
    }
    *(_DWORD *)(v6 + 28) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 10) |= 8u;
    return this;
  }
  *((_DWORD *)v3 + 33) = a2.i32[0];
  uint64_t v8 = v3[17];
  if (v8) {
    *(_DWORD *)(v8 + 76) = a2.i32[0];
  }
  return this;
}

float physx::NpConstraint::getMinResponseThreshold(physx::NpConstraint *this)
{
  if ((*((unsigned char *)this + 40) & 8) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 6) + 28);
  }
  else {
    uint64_t v1 = (char *)this + 132;
  }
  return *(float *)v1;
}

uint64_t physx::NpConstraint::isValid(physx::NpConstraint *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    LODWORD(v1) = *(unsigned __int16 *)(v1 + 8) != 6;
  }
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    LODWORD(v2) = *(unsigned __int16 *)(v2 + 8) != 6;
  }
  return v1 | v2;
}

uint64_t physx::NpConstraint::getExternalReference(physx::NpConstraint *this, unsigned int *a2)
{
  return (*(uint64_t (**)(void, unsigned int *))(**((void **)this + 11) + 40))(*((void *)this + 11), a2);
}

uint64_t physx::NpConstraint::comShift(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 88);
  if (*(void *)(result + 16) == a2) {
    float result = (*(uint64_t (**)(void, void))(*(void *)v4 + 24))(*(void *)(result + 88), 0);
  }
  if (*(void *)(v3 + 24) == a2)
  {
    unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 24);
    return v5(v4, 1);
  }
  return result;
}

uint64_t physx::NpConstraintGetRigidObjectsFromScb(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 - 32) + 56))();
  *a2 = 0;
  *a3 = 0;
  return result;
}

uint64_t physx::NpConstraint::getSceneFromActors(physx::NpConstraint *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v1 = *((void *)this + 3);
  if (!v2
    || ((*(void (**)(char *__return_ptr, void))(*(void *)v2 + 104))((char *)&v10 + 1, *((void *)this + 2)), (v10 & 0x800) != 0))
  {
    uint64_t v3 = 0;
    if (!v1) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
    if (!v1) {
      goto LABEL_8;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1 + 104))(&v10, v1);
  if ((v10 & 8) == 0)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 56))(v1);
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v4 = 0;
LABEL_9:
  BOOL v5 = v2 == 0;
  if (v1) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  int v7 = !v6;
  if (v3)
  {
    BOOL v5 = 1;
    uint64_t v8 = v3;
  }
  else
  {
    uint64_t v8 = v4;
  }
  if ((v5 & v7) != 0) {
    return v8;
  }
  else {
    return 0;
  }
}

void physx::NpFactory::~NpFactory(physx::NpFactory *this)
{
  *(void *)this = &unk_26E72C020;
  uint64_t v2 = *((void *)this + 104);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 931);
  if (*((_DWORD *)this + 1857))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v3 = *((void *)this + 930);
    if (v3)
    {
      do
      {
        uint64_t v220 = v3;
        int v4 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v3;
          LODWORD(v222) = v4 + 1;
        }
        uint64_t v3 = **((void **)this + 930);
        *((void *)this + 930) = v3;
      }
      while (v3);
      BOOL v5 = v221;
      int v6 = v222;
    }
    else
    {
      int v6 = 0;
      BOOL v5 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>(v5, v6);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>(*((char **)this + 926), *((_DWORD *)this + 1854));
    uint64_t v7 = *((unsigned int *)this + 1854);
    uint64_t v8 = v221;
    if (v7)
    {
      uint64_t v9 = (uint64_t *)*((void *)this + 926);
      uint64_t v10 = &v9[v7];
      do
      {
        unsigned int v11 = *((_DWORD *)this + 1856);
        if (v11)
        {
          uint64_t v12 = *v9;
          uint64_t v13 = 440 * v11;
          uint64_t v14 = *v9;
          do
          {
            if (v8 != &v221[8 * v222] && v14 == *(void *)v8) {
              v8 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
            }
            v14 += 440;
            v12 += 440;
            v13 -= 440;
          }
          while (v13);
        }
        ++v9;
      }
      while (v9 != v10);
      uint64_t v8 = v221;
    }
    if ((v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0 && v8 != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
    }
  }
  uint64_t v16 = *((unsigned int *)this + 1854);
  if (v16)
  {
    __int16 v17 = (void *)*((void *)this + 926);
    uint64_t v18 = 8 * v16;
    do
    {
      if (*v17) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  int v19 = *((_DWORD *)this + 1855);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0)
  {
    BOOL v20 = (physx::NpFactory *)*((void *)this + 926);
    if (v20 == (physx::NpFactory *)((char *)this + 6888))
    {
      *((unsigned char *)this + 7400) = 0;
    }
    else if (v20)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 859);
  if (*((_DWORD *)this + 1713))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v21 = *((void *)this + 858);
    if (v21)
    {
      do
      {
        uint64_t v220 = v21;
        int v22 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v21;
          LODWORD(v222) = v22 + 1;
        }
        uint64_t v21 = **((void **)this + 858);
        *((void *)this + 858) = v21;
      }
      while (v21);
      int v23 = v221;
      int v24 = v222;
    }
    else
    {
      int v24 = 0;
      int v23 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>(v23, v24);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>(*((char **)this + 854), *((_DWORD *)this + 1710));
    uint64_t v25 = *((unsigned int *)this + 1710);
    int8x8_t v26 = v221;
    if (v25)
    {
      __int16 v27 = (uint64_t *)*((void *)this + 854);
      char v28 = &v27[v25];
      do
      {
        unsigned int v29 = *((_DWORD *)this + 1712);
        if (v29)
        {
          uint64_t v30 = *v27;
          uint64_t v31 = 440 * v29;
          uint64_t v32 = *v27;
          do
          {
            if (v26 != &v221[8 * v222] && v32 == *(void *)v26) {
              v26 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v32 + 24))(v32);
            }
            v32 += 440;
            v30 += 440;
            v31 -= 440;
          }
          while (v31);
        }
        ++v27;
      }
      while (v27 != v28);
      int8x8_t v26 = v221;
    }
    if ((v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0 && v26 != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v26);
    }
  }
  uint64_t v34 = *((unsigned int *)this + 1710);
  if (v34)
  {
    long long v35 = (void *)*((void *)this + 854);
    uint64_t v36 = 8 * v34;
    do
    {
      if (*v35) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v35;
      v36 -= 8;
    }
    while (v36);
  }
  int v37 = *((_DWORD *)this + 1711);
  if ((v37 & 0x80000000) == 0 && (v37 & 0x7FFFFFFF) != 0)
  {
    uint64_t v38 = (physx::NpFactory *)*((void *)this + 854);
    if (v38 == (physx::NpFactory *)((char *)this + 6312))
    {
      *((unsigned char *)this + 6824) = 0;
    }
    else if (v38)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 787);
  if (*((_DWORD *)this + 1569))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v39 = *((void *)this + 786);
    if (v39)
    {
      do
      {
        uint64_t v220 = v39;
        int v40 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v39;
          LODWORD(v222) = v40 + 1;
        }
        uint64_t v39 = **((void **)this + 786);
        *((void *)this + 786) = v39;
      }
      while (v39);
      uint64_t v41 = v221;
      unsigned int v42 = v222;
    }
    else
    {
      unsigned int v42 = 0;
      uint64_t v41 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>(v41, v42);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>(*((char **)this + 782), *((_DWORD *)this + 1566));
    uint64_t v43 = *((unsigned int *)this + 1566);
    if (v43)
    {
      uint64_t v44 = (uint64_t *)*((void *)this + 782);
      int v45 = &v44[v43];
      unint64_t v46 = &v41[8 * v42];
      int v47 = v41;
      do
      {
        uint64_t v48 = *((unsigned int *)this + 1568);
        if (v48)
        {
          uint64_t v49 = *v44;
          uint64_t v50 = 480 * v48;
          uint64_t v51 = *v44;
          do
          {
            if (v47 != v46 && v51 == *(void *)v47) {
              v47 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
            }
            v51 += 480;
            v49 += 480;
            v50 -= 480;
          }
          while (v50);
        }
        ++v44;
      }
      while (v44 != v45);
    }
    if (v41 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v41);
    }
  }
  uint64_t v52 = *((unsigned int *)this + 1566);
  if (v52)
  {
    uint64_t v53 = (void *)*((void *)this + 782);
    uint64_t v54 = 8 * v52;
    do
    {
      if (*v53) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v53;
      v54 -= 8;
    }
    while (v54);
  }
  int v55 = *((_DWORD *)this + 1567);
  if ((v55 & 0x80000000) == 0 && (v55 & 0x7FFFFFFF) != 0)
  {
    uint64_t v56 = (physx::NpFactory *)*((void *)this + 782);
    if (v56 == (physx::NpFactory *)((char *)this + 5736))
    {
      *((unsigned char *)this + 6248) = 0;
    }
    else if (v56)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 715);
  if (*((_DWORD *)this + 1425))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v57 = *((void *)this + 714);
    if (v57)
    {
      do
      {
        uint64_t v220 = v57;
        int v58 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v57;
          LODWORD(v222) = v58 + 1;
        }
        uint64_t v57 = **((void **)this + 714);
        *((void *)this + 714) = v57;
      }
      while (v57);
      float v59 = v221;
      unsigned int v60 = v222;
    }
    else
    {
      unsigned int v60 = 0;
      float v59 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>(v59, v60);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>(*((char **)this + 710), *((_DWORD *)this + 1422));
    uint64_t v61 = *((unsigned int *)this + 1422);
    if (v61)
    {
      BOOL v62 = (uint64_t *)*((void *)this + 710);
      char v63 = &v62[v61];
      uint64_t v64 = &v59[8 * v60];
      long long v65 = v59;
      do
      {
        unsigned int v66 = *((_DWORD *)this + 1424);
        if (v66)
        {
          uint64_t v67 = *v62;
          uint64_t v68 = 200 * v66;
          uint64_t v69 = *v62;
          do
          {
            if (v65 != v64 && v69 == *(void *)v65) {
              v65 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v69 + 24))(v69);
            }
            v69 += 200;
            v67 += 200;
            v68 -= 200;
          }
          while (v68);
        }
        ++v62;
      }
      while (v62 != v63);
    }
    if (v59 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v59);
    }
  }
  uint64_t v70 = *((unsigned int *)this + 1422);
  if (v70)
  {
    unsigned int v71 = (void *)*((void *)this + 710);
    uint64_t v72 = 8 * v70;
    do
    {
      if (*v71) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v71;
      v72 -= 8;
    }
    while (v72);
  }
  int v73 = *((_DWORD *)this + 1423);
  if ((v73 & 0x80000000) == 0 && (v73 & 0x7FFFFFFF) != 0)
  {
    char v74 = (physx::NpFactory *)*((void *)this + 710);
    if (v74 == (physx::NpFactory *)((char *)this + 5160))
    {
      *((unsigned char *)this + 5672) = 0;
    }
    else if (v74)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 643);
  if (*((_DWORD *)this + 1281))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v75 = *((void *)this + 642);
    if (v75)
    {
      do
      {
        uint64_t v220 = v75;
        int v76 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v75;
          LODWORD(v222) = v76 + 1;
        }
        uint64_t v75 = **((void **)this + 642);
        *((void *)this + 642) = v75;
      }
      while (v75);
      unsigned int v77 = v221;
      unsigned int v78 = v222;
    }
    else
    {
      unsigned int v78 = 0;
      unsigned int v77 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>(v77, v78);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>(*((char **)this + 638), *((_DWORD *)this + 1278));
    uint64_t v79 = *((unsigned int *)this + 1278);
    if (v79)
    {
      uint64_t v80 = (uint64_t *)*((void *)this + 638);
      float v81 = &v80[v79];
      int v82 = &v77[8 * v78];
      int v83 = v77;
      do
      {
        unsigned int v84 = *((_DWORD *)this + 1280);
        if (v84)
        {
          uint64_t v85 = *v80;
          uint64_t v86 = 184 * v84;
          uint64_t v87 = *v80;
          do
          {
            if (v83 != v82 && v87 == *(void *)v83) {
              v83 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v87 + 24))(v87);
            }
            v87 += 184;
            v85 += 184;
            v86 -= 184;
          }
          while (v86);
        }
        ++v80;
      }
      while (v80 != v81);
    }
    if (v77 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v77);
    }
  }
  uint64_t v88 = *((unsigned int *)this + 1278);
  if (v88)
  {
    uint64_t v89 = (void *)*((void *)this + 638);
    uint64_t v90 = 8 * v88;
    do
    {
      if (*v89) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v89;
      v90 -= 8;
    }
    while (v90);
  }
  int v91 = *((_DWORD *)this + 1279);
  if ((v91 & 0x80000000) == 0 && (v91 & 0x7FFFFFFF) != 0)
  {
    __int16 v92 = (physx::NpFactory *)*((void *)this + 638);
    if (v92 == (physx::NpFactory *)((char *)this + 4584))
    {
      *((unsigned char *)this + 5096) = 0;
    }
    else if (v92)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 571);
  if (*((_DWORD *)this + 1137))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v93 = *((void *)this + 570);
    if (v93)
    {
      do
      {
        uint64_t v220 = v93;
        int v94 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v93;
          LODWORD(v222) = v94 + 1;
        }
        uint64_t v93 = **((void **)this + 570);
        *((void *)this + 570) = v93;
      }
      while (v93);
      uint64_t v95 = v221;
      unsigned int v96 = v222;
    }
    else
    {
      unsigned int v96 = 0;
      uint64_t v95 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>(v95, v96);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>(*((char **)this + 566), *((_DWORD *)this + 1134));
    uint64_t v97 = *((unsigned int *)this + 1134);
    if (v97)
    {
      uint64_t v98 = (uint64_t *)*((void *)this + 566);
      float v99 = &v98[v97];
      uint64_t v100 = &v95[8 * v96];
      uint64_t v101 = v95;
      do
      {
        uint64_t v102 = *((unsigned int *)this + 1136);
        if (v102)
        {
          uint64_t v103 = *v98;
          uint64_t v104 = 80 * v102;
          uint64_t v105 = *v98;
          do
          {
            if (v101 != v100 && v105 == *(void *)v101) {
              v101 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v105 + 24))(v105);
            }
            v105 += 80;
            v103 += 80;
            v104 -= 80;
          }
          while (v104);
        }
        ++v98;
      }
      while (v98 != v99);
    }
    if (v95 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v95);
    }
  }
  uint64_t v106 = *((unsigned int *)this + 1134);
  if (v106)
  {
    uint64_t v107 = (void *)*((void *)this + 566);
    uint64_t v108 = 8 * v106;
    do
    {
      if (*v107) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v107;
      v108 -= 8;
    }
    while (v108);
  }
  int v109 = *((_DWORD *)this + 1135);
  if ((v109 & 0x80000000) == 0 && (v109 & 0x7FFFFFFF) != 0)
  {
    uint64_t v110 = (physx::NpFactory *)*((void *)this + 566);
    if (v110 == (physx::NpFactory *)((char *)this + 4008))
    {
      *((unsigned char *)this + 4520) = 0;
    }
    else if (v110)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 499);
  if (*((_DWORD *)this + 993))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v111 = *((void *)this + 498);
    if (v111)
    {
      do
      {
        uint64_t v220 = v111;
        int v112 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v111;
          LODWORD(v222) = v112 + 1;
        }
        uint64_t v111 = **((void **)this + 498);
        *((void *)this + 498) = v111;
      }
      while (v111);
      char v113 = v221;
      unsigned int v114 = v222;
    }
    else
    {
      unsigned int v114 = 0;
      char v113 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>(v113, v114);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>(*((char **)this + 494), *((_DWORD *)this + 990));
    uint64_t v115 = *((unsigned int *)this + 990);
    if (v115)
    {
      long long v116 = (uint64_t *)*((void *)this + 494);
      float v117 = &v116[v115];
      float v118 = &v113[8 * v114];
      float v119 = v113;
      do
      {
        unsigned int v120 = *((_DWORD *)this + 992);
        if (v120)
        {
          uint64_t v121 = *v116;
          uint64_t v122 = 184 * v120;
          uint64_t v123 = *v116;
          do
          {
            if (v119 != v118 && v123 == *(void *)v119) {
              v119 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v123 + 24))(v123);
            }
            v123 += 184;
            v121 += 184;
            v122 -= 184;
          }
          while (v122);
        }
        ++v116;
      }
      while (v116 != v117);
    }
    if (v113 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v113);
    }
  }
  uint64_t v124 = *((unsigned int *)this + 990);
  if (v124)
  {
    float v125 = (void *)*((void *)this + 494);
    uint64_t v126 = 8 * v124;
    do
    {
      if (*v125) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v125;
      v126 -= 8;
    }
    while (v126);
  }
  int v127 = *((_DWORD *)this + 991);
  if ((v127 & 0x80000000) == 0 && (v127 & 0x7FFFFFFF) != 0)
  {
    float v128 = (physx::NpFactory *)*((void *)this + 494);
    if (v128 == (physx::NpFactory *)((char *)this + 3432))
    {
      *((unsigned char *)this + 3944) = 0;
    }
    else if (v128)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 427);
  if (*((_DWORD *)this + 849))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v129 = *((void *)this + 426);
    if (v129)
    {
      do
      {
        uint64_t v220 = v129;
        int v130 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v129;
          LODWORD(v222) = v130 + 1;
        }
        uint64_t v129 = **((void **)this + 426);
        *((void *)this + 426) = v129;
      }
      while (v129);
      float v131 = v221;
      unsigned int v132 = v222;
    }
    else
    {
      unsigned int v132 = 0;
      float v131 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>(v131, v132);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>(*((char **)this + 422), *((_DWORD *)this + 846));
    uint64_t v133 = *((unsigned int *)this + 846);
    if (v133)
    {
      float v134 = (uint64_t *)*((void *)this + 422);
      float v135 = &v134[v133];
      float v136 = &v131[8 * v132];
      float v137 = v131;
      do
      {
        uint64_t v138 = *((unsigned int *)this + 848);
        if (v138)
        {
          uint64_t v139 = *v134;
          uint64_t v140 = 80 * v138;
          uint64_t v141 = *v134;
          do
          {
            if (v137 != v136 && v141 == *(void *)v137) {
              v137 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v141 + 24))(v141);
            }
            v141 += 80;
            v139 += 80;
            v140 -= 80;
          }
          while (v140);
        }
        ++v134;
      }
      while (v134 != v135);
    }
    if (v131 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v131);
    }
  }
  uint64_t v142 = *((unsigned int *)this + 846);
  if (v142)
  {
    float v143 = (void *)*((void *)this + 422);
    uint64_t v144 = 8 * v142;
    do
    {
      if (*v143) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v143;
      v144 -= 8;
    }
    while (v144);
  }
  int v145 = *((_DWORD *)this + 847);
  if ((v145 & 0x80000000) == 0 && (v145 & 0x7FFFFFFF) != 0)
  {
    float v146 = (physx::NpFactory *)*((void *)this + 422);
    if (v146 == (physx::NpFactory *)((char *)this + 2856))
    {
      *((unsigned char *)this + 3368) = 0;
    }
    else if (v146)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 355);
  if (*((_DWORD *)this + 705))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v147 = *((void *)this + 354);
    if (v147)
    {
      do
      {
        uint64_t v220 = v147;
        int v148 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpShape>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v147;
          LODWORD(v222) = v148 + 1;
        }
        uint64_t v147 = **((void **)this + 354);
        *((void *)this + 354) = v147;
      }
      while (v147);
      float v149 = v221;
      unsigned int v150 = v222;
    }
    else
    {
      unsigned int v150 = 0;
      float v149 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpShape>>(v149, v150);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpShape>>(*((char **)this + 350), *((_DWORD *)this + 702));
    uint64_t v151 = *((unsigned int *)this + 702);
    if (v151)
    {
      float v152 = (uint64_t *)*((void *)this + 350);
      float v153 = &v152[v151];
      float v154 = &v149[8 * v150];
      float v155 = v149;
      do
      {
        uint64_t v156 = *((unsigned int *)this + 704);
        if (v156)
        {
          uint64_t v157 = *v152;
          uint64_t v158 = 272 * v156;
          uint64_t v159 = *v152;
          do
          {
            if (v155 != v154 && v159 == *(void *)v155) {
              v155 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v159 + 24))(v159);
            }
            v159 += 272;
            v157 += 272;
            v158 -= 272;
          }
          while (v158);
        }
        ++v152;
      }
      while (v152 != v153);
    }
    if (v149 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v149);
    }
  }
  uint64_t v160 = *((unsigned int *)this + 702);
  if (v160)
  {
    BOOL v161 = (void *)*((void *)this + 350);
    uint64_t v162 = 8 * v160;
    do
    {
      if (*v161) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v161;
      v162 -= 8;
    }
    while (v162);
  }
  int v163 = *((_DWORD *)this + 703);
  if ((v163 & 0x80000000) == 0 && (v163 & 0x7FFFFFFF) != 0)
  {
    float v164 = (physx::NpFactory *)*((void *)this + 350);
    if (v164 == (physx::NpFactory *)((char *)this + 2280))
    {
      *((unsigned char *)this + 2792) = 0;
    }
    else if (v164)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 283);
  if (*((_DWORD *)this + 561))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v165 = *((void *)this + 282);
    if (v165)
    {
      do
      {
        uint64_t v220 = v165;
        int v166 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v165;
          LODWORD(v222) = v166 + 1;
        }
        uint64_t v165 = **((void **)this + 282);
        *((void *)this + 282) = v165;
      }
      while (v165);
      float32x4_t v167 = v221;
      unsigned int v168 = v222;
    }
    else
    {
      unsigned int v168 = 0;
      float32x4_t v167 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>(v167, v168);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>(*((char **)this + 278), *((_DWORD *)this + 558));
    uint64_t v169 = *((unsigned int *)this + 558);
    if (v169)
    {
      float v170 = (uint64_t *)*((void *)this + 278);
      float v171 = &v170[v169];
      float v172 = &v167[8 * v168];
      BOOL v173 = v167;
      do
      {
        unsigned int v174 = *((_DWORD *)this + 560);
        if (v174)
        {
          uint64_t v175 = *v170;
          uint64_t v176 = 176 * v174;
          uint64_t v177 = *v170;
          do
          {
            if (v173 != v172 && v177 == *(void *)v173) {
              v173 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v177 + 24))(v177);
            }
            v177 += 176;
            v175 += 176;
            v176 -= 176;
          }
          while (v176);
        }
        ++v170;
      }
      while (v170 != v171);
    }
    if (v167 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v167);
    }
  }
  uint64_t v178 = *((unsigned int *)this + 558);
  if (v178)
  {
    float v179 = (void *)*((void *)this + 278);
    uint64_t v180 = 8 * v178;
    do
    {
      if (*v179) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v179;
      v180 -= 8;
    }
    while (v180);
  }
  int v181 = *((_DWORD *)this + 559);
  if ((v181 & 0x80000000) == 0 && (v181 & 0x7FFFFFFF) != 0)
  {
    float v182 = (physx::NpFactory *)*((void *)this + 278);
    if (v182 == (physx::NpFactory *)((char *)this + 1704))
    {
      *((unsigned char *)this + 2216) = 0;
    }
    else if (v182)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 211);
  if (*((_DWORD *)this + 417))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v183 = *((void *)this + 210);
    if (v183)
    {
      do
      {
        uint64_t v220 = v183;
        int v184 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v183;
          LODWORD(v222) = v184 + 1;
        }
        uint64_t v183 = **((void **)this + 210);
        *((void *)this + 210) = v183;
      }
      while (v183);
      float v185 = v221;
      unsigned int v186 = v222;
    }
    else
    {
      unsigned int v186 = 0;
      float v185 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>(v185, v186);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>(*((char **)this + 206), *((_DWORD *)this + 414));
    uint64_t v187 = *((unsigned int *)this + 414);
    if (v187)
    {
      float v188 = (uint64_t *)*((void *)this + 206);
      float v189 = &v188[v187];
      float v190 = &v185[8 * v186];
      __int32 v191 = v185;
      do
      {
        uint64_t v192 = *((unsigned int *)this + 416);
        if (v192)
        {
          uint64_t v193 = *v188;
          uint64_t v194 = 384 * v192;
          uint64_t v195 = *v188;
          do
          {
            if (v191 != v190 && v195 == *(void *)v191) {
              v191 += 8;
            }
            else {
              (*(void (**)(uint64_t))(*(void *)v195 + 24))(v195);
            }
            v195 += 384;
            v193 += 384;
            v194 -= 384;
          }
          while (v194);
        }
        ++v188;
      }
      while (v188 != v189);
    }
    if (v185 && (v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v185);
    }
  }
  uint64_t v196 = *((unsigned int *)this + 414);
  if (v196)
  {
    float v197 = (void *)*((void *)this + 206);
    uint64_t v198 = 8 * v196;
    do
    {
      if (*v197) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v197;
      v198 -= 8;
    }
    while (v198);
  }
  int v199 = *((_DWORD *)this + 415);
  if ((v199 & 0x80000000) == 0 && (v199 & 0x7FFFFFFF) != 0)
  {
    uint64_t v200 = (physx::NpFactory *)*((void *)this + 206);
    if (v200 == (physx::NpFactory *)((char *)this + 1128))
    {
      *((unsigned char *)this + 1640) = 0;
    }
    else if (v200)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  if (*((void *)this + 133)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if (*((void *)this + 126)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if (*((void *)this + 119)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if (*((void *)this + 112)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if (*((void *)this + 105)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 103);
  if (*((_DWORD *)this + 201))
  {
    float v221 = 0;
    uint64_t v222 = 0;
    uint64_t v201 = *((void *)this + 102);
    if (v201)
    {
      do
      {
        uint64_t v220 = v201;
        int v202 = v222;
        if ((HIDWORD(v222) & 0x7FFFFFFFu) <= v222)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::growAndPushBack((uint64_t)&v221, &v220);
        }
        else
        {
          *(void *)&v221[8 * v222] = v201;
          LODWORD(v222) = v202 + 1;
        }
        uint64_t v201 = **((void **)this + 102);
        *((void *)this + 102) = v201;
      }
      while (v201);
      uint64_t v203 = v221;
      int v204 = v222;
    }
    else
    {
      int v204 = 0;
      uint64_t v203 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>(v203, v204);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>(*((char **)this + 98), *((_DWORD *)this + 198));
    uint64_t v205 = *((unsigned int *)this + 198);
    long long v206 = v221;
    if (v205)
    {
      float v207 = (uint64_t *)*((void *)this + 98);
      float v208 = &v207[v205];
      do
      {
        unsigned int v209 = *((_DWORD *)this + 200);
        if (v209)
        {
          uint64_t v210 = *v207;
          uint64_t v211 = 88 * v209;
          do
          {
            if (v206 != &v221[8 * v222] && v210 == *(void *)v206)
            {
              v206 += 8;
            }
            else
            {
              int v212 = *(_DWORD *)(v210 + 84);
              if ((v212 & 0x80000000) == 0 && (v212 & 0x7FFFFFFF) != 0)
              {
                uint64_t v213 = *(void *)(v210 + 72);
                if (v210 == v213)
                {
                  *(unsigned char *)(v210 + 64) = 0;
                }
                else if (v213)
                {
                  (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
                }
              }
            }
            v210 += 88;
            v211 -= 88;
          }
          while (v211);
        }
        ++v207;
      }
      while (v207 != v208);
      long long v206 = v221;
    }
    if ((v222 & 0x8000000000000000) == 0 && (v222 & 0x7FFFFFFF00000000) != 0 && v206 != 0) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v206);
    }
  }
  uint64_t v215 = *((unsigned int *)this + 198);
  if (v215)
  {
    float32x2_t v216 = (void *)*((void *)this + 98);
    uint64_t v217 = 8 * v215;
    do
    {
      if (*v216) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v216;
      v217 -= 8;
    }
    while (v217);
  }
  int v218 = *((_DWORD *)this + 199);
  if ((v218 & 0x80000000) == 0 && (v218 & 0x7FFFFFFF) != 0)
  {
    float v219 = (physx::NpFactory *)*((void *)this + 98);
    if (v219 == (physx::NpFactory *)((char *)this + 264))
    {
      *((unsigned char *)this + 776) = 0;
    }
    else if (v219)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::GuMeshFactory::~GuMeshFactory(this);
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpFactory::~NpFactory(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::NpFactory::addRigidStatic(uint64_t this, physx::PxRigidStatic *a2, int a3, int8x8_t a4)
{
  if (a2)
  {
    uint64_t v5 = this;
    int v6 = (int32x2_t *)(this + 1008);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      }
      uint64_t v8 = a2;
      char v9 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(v6, &v8, &v9, a4);
      if (!v9) {
        *(void *)this = a2;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      {
        uint64_t v7 = *(pthread_mutex_t **)(v5 + 8);
        return pthread_mutex_unlock(v7);
      }
    }
    else
    {
      uint64_t v8 = a2;
      char v10 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create((int32x2_t *)(this + 1008), &v8, &v10, a4);
      if (!v10) {
        *(void *)this = a2;
      }
    }
  }
  return this;
}

uint64_t physx::NpFactory::addShape(uint64_t result, uint64_t a2, int a3, int8x8_t a4)
{
  uint64_t v8 = a2;
  if (a2)
  {
    uint64_t v5 = result;
    int v6 = (int32x2_t *)(result + 1064);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(result + 8));
      }
      char v9 = 0;
      uint64_t result = physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v6, &v8, &v9, a4);
      if (!v9) {
        *(void *)uint64_t result = a2;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      {
        uint64_t v7 = *(pthread_mutex_t **)(v5 + 8);
        return pthread_mutex_unlock(v7);
      }
    }
    else
    {
      char v10 = 0;
      uint64_t result = physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create((int32x2_t *)(result + 1064), &v8, &v10, a4);
      if (!v10) {
        *(void *)uint64_t result = a2;
      }
    }
  }
  return result;
}

uint64_t physx::NpFactory::onActorRelease(uint64_t this, physx::PxActor *a2)
{
  uint64_t v3 = (int32x2_t *)this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
  }
  if (v3[132].i32[1])
  {
    unint64_t v4 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    uint64_t v7 = (_DWORD *)(*(void *)&v3[129] + 4 * ((v3[130].i32[1] - 1) & ((v6 >> 31) ^ v6)));
    uint64_t v8 = *v7;
    if (v8 != -1)
    {
      int32x2_t v9 = v3[127];
      int32x2_t v10 = v3[128];
      if (*(physx::PxActor **)(*(void *)&v9 + 8 * v8) == a2)
      {
LABEL_10:
        *uint64_t v7 = *(_DWORD *)(*(void *)&v10 + 4 * v8);
        v3[132] = vadd_s32(v3[132], (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(*(void *)&v10 + 4 * v8) = v3[131].i32[1];
        v3[131].i32[1] = v8;
      }
      else
      {
        while (1)
        {
          uint64_t v11 = v8;
          uint64_t v8 = *(unsigned int *)(*(void *)&v10 + 4 * v8);
          if (v8 == -1) {
            break;
          }
          if (*(physx::PxActor **)(*(void *)&v9 + 8 * v8) == a2)
          {
            uint64_t v7 = (_DWORD *)(*(void *)&v10 + 4 * v11);
            goto LABEL_10;
          }
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v12 = (pthread_mutex_t *)v3[1];
    return pthread_mutex_unlock(v12);
  }
  return this;
}

uint64_t physx::NpFactory::onShapeRelease(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  }
  uint64_t result = physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(a1 + 1064, &v4);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  }
  return result;
}

uint64_t physx::NpFactory::addArticulation(uint64_t result, uint64_t a2, int a3, int8x8_t a4)
{
  uint64_t v8 = a2;
  if (a2)
  {
    uint64_t v5 = result;
    unint64_t v6 = (int32x2_t *)(result + 896);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(result + 8));
      }
      char v9 = 0;
      uint64_t result = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(v6, &v8, &v9, a4);
      if (!v9) {
        *(void *)uint64_t result = a2;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      {
        uint64_t v7 = *(pthread_mutex_t **)(v5 + 8);
        return pthread_mutex_unlock(v7);
      }
    }
    else
    {
      char v10 = 0;
      uint64_t result = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create((int32x2_t *)(result + 896), &v8, &v10, a4);
      if (!v10) {
        *(void *)uint64_t result = a2;
      }
    }
  }
  return result;
}

void *anonymous namespace'::createArticulation(_anonymous_namespace_ *this)
{
  uint64_t v1 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 5144));
  }
  uint64_t v2 = *(void **)(v1 + 5136);
  if (!v2)
  {
    uint64_t v3 = physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::allocate(*(unsigned int *)(v1 + 5128), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v4 = v3;
    uint64_t v9 = v3;
    uint64_t v5 = *(unsigned int *)(v1 + 5112);
    if ((*(_DWORD *)(v1 + 5116) & 0x7FFFFFFFu) <= v5)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>>::growAndPushBack(v1 + 4584, &v9);
    }
    else
    {
      *(void *)(*(void *)(v1 + 5104) + 8 * v5) = v3;
      *(_DWORD *)(v1 + 5112) = v5 + 1;
    }
    unint64_t v6 = v4 + 184 * *(unsigned int *)(v1 + 5120) - 184;
    uint64_t v2 = *(void **)(v1 + 5136);
    if (v6 >= v4)
    {
      uint64_t v7 = (void *)(v4 + 184 * *(unsigned int *)(v1 + 5120) - 184);
      do
      {
        *uint64_t v7 = v2;
        v7 -= 23;
        uint64_t v2 = (void *)v6;
        unint64_t v6 = (unint64_t)v7;
      }
      while ((unint64_t)v7 >= v4);
      uint64_t v2 = v7 + 23;
    }
  }
  *(void *)(v1 + 5136) = *v2;
  ++*(_DWORD *)(v1 + 5124);
  *((_DWORD *)v2 + 2) = 196619;
  v2[2] = 0;
  *uint64_t v2 = &unk_26E72B398;
  physx::PxArticulationImpl::PxArticulationImpl((physx::PxArticulationImpl *)(v2 + 3), 0);
  *uint64_t v2 = &unk_26E72A828;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 5144));
  }
  return v2;
}

void *anonymous namespace'::createArticulationLink(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v6 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 6296));
  }
  uint64_t v7 = *(void **)(v6 + 6288);
  if (!v7)
  {
    uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::allocate(*(unsigned int *)(v6 + 6280), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v9 = v8;
    uint64_t v35 = v8;
    uint64_t v10 = *(unsigned int *)(v6 + 6264);
    if ((*(_DWORD *)(v6 + 6268) & 0x7FFFFFFFu) <= v10)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>>::growAndPushBack(v6 + 5736, &v35);
    }
    else
    {
      *(void *)(*(void *)(v6 + 6256) + 8 * v10) = v8;
      *(_DWORD *)(v6 + 6264) = v10 + 1;
    }
    uint64_t v11 = (void *)(v9 + 480 * *(unsigned int *)(v6 + 6272) - 480);
    uint64_t v7 = *(void **)(v6 + 6288);
    if ((unint64_t)v11 >= v9)
    {
      do
      {
        void *v11 = v7;
        uint64_t v12 = v11 - 60;
        uint64_t v7 = v11;
        uint64_t v11 = v12;
      }
      while ((unint64_t)v12 >= v9);
      uint64_t v7 = v12 + 60;
    }
  }
  *(void *)(v6 + 6288) = *v7;
  ++*(_DWORD *)(v6 + 6276);
  physx::NpArticulationLink::NpArticulationLink((uint64_t)v7, (uint64_t)a3, a1, a2);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 6296));
  }
  if (a2)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 224))(&v32, a2);
    float v13 = (float)(a3[4] - *(float *)&v33) + (float)(a3[4] - *(float *)&v33);
    float v14 = (float)(a3[5] - *((float *)&v33 + 1)) + (float)(a3[5] - *((float *)&v33 + 1));
    float v15 = (float)(a3[6] - v34) + (float)(a3[6] - v34);
    float v16 = (float)(*((float *)&v32 + 3) * *((float *)&v32 + 3)) + -0.5;
    float v17 = (float)((float)-(float)(*((float *)&v32 + 1) * v14) - (float)(*(float *)&v32 * v13))
        - (float)(*((float *)&v32 + 2) * v15);
    float v18 = (float)((float)(*((float *)&v32 + 3)
                        * (float)((float)(*((float *)&v32 + 2) * v14) - (float)(*((float *)&v32 + 1) * v15)))
                + (float)(v13 * v16))
        - (float)(*(float *)&v32 * v17);
    float v19 = (float)((float)(*((float *)&v32 + 3)
                        * (float)((float)(*(float *)&v32 * v15) - (float)(*((float *)&v32 + 2) * v13)))
                + (float)(v14 * v16))
        - (float)(*((float *)&v32 + 1) * v17);
    float v20 = (float)((float)(*((float *)&v32 + 3)
                        * (float)((float)(*((float *)&v32 + 1) * v13) - (float)(*(float *)&v32 * v14)))
                + (float)(v15 * v16))
        - (float)(*((float *)&v32 + 2) * v17);
    float v22 = a3[2];
    float v21 = a3[3];
    float v23 = a3[1];
    float v24 = (float)((float)((float)(*((float *)&v32 + 3) * v23) - (float)(*((float *)&v32 + 1) * v21))
                - (float)(*((float *)&v32 + 2) * *a3))
        + (float)(v22 * *(float *)&v32);
    float v25 = (float)((float)((float)(*((float *)&v32 + 3) * v22) - (float)(*((float *)&v32 + 2) * v21))
                - (float)(*(float *)&v32 * v23))
        + (float)(*a3 * *((float *)&v32 + 1));
    float v26 = (float)((float)((float)(*(float *)&v32 * *a3) + (float)(*((float *)&v32 + 3) * v21))
                + (float)(*((float *)&v32 + 1) * v23))
        + (float)(*((float *)&v32 + 2) * v22);
    *(float *)&uint64_t v35 = (float)((float)((float)(*((float *)&v32 + 3) * *a3) - (float)(*(float *)&v32 * v21))
                           - (float)(*((float *)&v32 + 1) * v22))
                   + (float)(v23 * *((float *)&v32 + 2));
    *((float *)&v35 + 1) = v24;
    float v36 = v25;
    float v37 = v26;
    float v38 = v18;
    float v39 = v19;
    float v40 = v20;
    long long v32 = xmmword_23435FBB0;
    uint64_t v33 = 0;
    float v34 = 0.0;
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void *, long long *))(*(void *)a1 + 216))(a1, a2, &v35, v7, &v32);
    if (v27)
    {
      v7[49] = v27;
    }
    else
    {
      (*(void (**)(void *))(*v7 + 32))(v7);
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 207, "Articulation link initialization failed due to joint creation failure: returned NULL.", v28, v29, v30, v32);
      return 0;
    }
  }
  return v7;
}

void *anonymous namespace'::createArticulationRC(_anonymous_namespace_ *this)
{
  uint64_t v1 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 5720));
  }
  uint64_t v2 = *(void **)(v1 + 5712);
  if (!v2)
  {
    uint64_t v3 = physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::allocate(*(unsigned int *)(v1 + 5704), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v4 = v3;
    uint64_t v9 = v3;
    uint64_t v5 = *(unsigned int *)(v1 + 5688);
    if ((*(_DWORD *)(v1 + 5692) & 0x7FFFFFFFu) <= v5)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>>::growAndPushBack(v1 + 5160, &v9);
    }
    else
    {
      *(void *)(*(void *)(v1 + 5680) + 8 * v5) = v3;
      *(_DWORD *)(v1 + 5688) = v5 + 1;
    }
    unint64_t v6 = v4 + 200 * *(unsigned int *)(v1 + 5696) - 200;
    uint64_t v2 = *(void **)(v1 + 5712);
    if (v6 >= v4)
    {
      uint64_t v7 = (void *)(v4 + 200 * *(unsigned int *)(v1 + 5696) - 200);
      do
      {
        *uint64_t v7 = v2;
        v7 -= 25;
        uint64_t v2 = (void *)v6;
        unint64_t v6 = (unint64_t)v7;
      }
      while ((unint64_t)v7 >= v4);
      uint64_t v2 = v7 + 25;
    }
  }
  *(void *)(v1 + 5712) = *v2;
  ++*(_DWORD *)(v1 + 5700);
  *((_DWORD *)v2 + 2) = 196620;
  v2[2] = 0;
  *uint64_t v2 = &unk_26E72B1A0;
  physx::PxArticulationImpl::PxArticulationImpl((physx::PxArticulationImpl *)(v2 + 3), 1);
  *uint64_t v2 = &unk_26E72A630;
  v2[23] = 0;
  v2[24] = 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 5720));
  }
  return v2;
}

uint64_t physx::NpFactory::onArticulationRelease(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (int32x2_t *)result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 8));
  }
  if (v3[118].i32[1])
  {
    unint64_t v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    uint64_t v7 = (_DWORD *)(*(void *)&v3[115] + 4 * ((v3[116].i32[1] - 1) & ((v6 >> 31) ^ v6)));
    uint64_t v8 = *v7;
    if (v8 != -1)
    {
      int32x2_t v9 = v3[113];
      int32x2_t v10 = v3[114];
      if (*(void *)(*(void *)&v9 + 8 * v8) == a2)
      {
LABEL_10:
        *uint64_t v7 = *(_DWORD *)(*(void *)&v10 + 4 * v8);
        v3[118] = vadd_s32(v3[118], (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(*(void *)&v10 + 4 * v8) = v3[117].i32[1];
        v3[117].i32[1] = v8;
      }
      else
      {
        while (1)
        {
          uint64_t v11 = v8;
          uint64_t v8 = *(unsigned int *)(*(void *)&v10 + 4 * v8);
          if (v8 == -1) {
            break;
          }
          if (*(void *)(*(void *)&v9 + 8 * v8) == a2)
          {
            uint64_t v7 = (_DWORD *)(*(void *)&v10 + 4 * v11);
            goto LABEL_10;
          }
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v12 = (pthread_mutex_t *)v3[1];
    return pthread_mutex_unlock(v12);
  }
  return result;
}

void *physx::NpFactory::createArticulationLink(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  {
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 324, "Articulations not registered: returned NULL.", a6, a7, a8, vars0);
    return 0;
  }
}

void *physx::NpFactory::createNpArticulationJoint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 6872));
  }
  int32x2_t v10 = *(void **)(a1 + 6864);
  if (!v10)
  {
    physx::shdfnd::PoolBase<physx::NpArticulationJoint,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::allocateSlab(a1 + 6304);
    int32x2_t v10 = *(void **)(a1 + 6864);
  }
  *(void *)(a1 + 6864) = *v10;
  ++*(_DWORD *)(a1 + 6852);
  physx::NpArticulationJointTemplate<physx::PxArticulationJoint>::NpArticulationJointTemplate((uint64_t)v10, 14, a2, a3, a4, a5);
  *int32x2_t v10 = &unk_26E72A998;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 6872));
  }
  return v10;
}

uint64_t physx::NpFactory::releaseArticulationJointToPool(pthread_mutex_t **this, pthread_mutex_t *a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[859]);
  }
  uint64_t result = (*(uint64_t (**)(pthread_mutex_t *))(a2->__sig + 24))(a2);
  --*((_DWORD *)this + 1713);
  a2->__sig = (uint64_t)this[858];
  this[858] = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unint64_t v5 = this[859];
    return pthread_mutex_unlock(v5);
  }
  return result;
}

void *physx::NpFactory::createNpArticulationJointRC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 7448));
  }
  int32x2_t v10 = *(void **)(a1 + 7440);
  if (!v10)
  {
    physx::shdfnd::PoolBase<physx::NpArticulationJointReducedCoordinate,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::allocateSlab(a1 + 6880);
    int32x2_t v10 = *(void **)(a1 + 7440);
  }
  *(void *)(a1 + 7440) = *v10;
  ++*(_DWORD *)(a1 + 7428);
  physx::NpArticulationJointTemplate<physx::PxArticulationJointReducedCoordinate>::NpArticulationJointTemplate((uint64_t)v10, 15, a2, a3, a4, a5);
  *int32x2_t v10 = &unk_26E72AB50;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 7448));
  }
  return v10;
}

uint64_t physx::NpFactory::releaseArticulationJointRCToPool(pthread_mutex_t **this, pthread_mutex_t *a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[931]);
  }
  uint64_t result = (*(uint64_t (**)(pthread_mutex_t *))(a2->__sig + 24))(a2);
  --*((_DWORD *)this + 1857);
  a2->__sig = (uint64_t)this[930];
  this[930] = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unint64_t v5 = this[931];
    return pthread_mutex_unlock(v5);
  }
  return result;
}

uint64_t physx::NpFactory::addConstraint(uint64_t this, physx::PxConstraint *a2, int a3, int8x8_t a4)
{
  uint64_t v8 = a2;
  if (a2)
  {
    uint64_t v5 = this;
    unint64_t v6 = (int32x2_t *)(this + 952);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      }
      char v9 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(v6, &v8, &v9, a4);
      if (!v9) {
        *(void *)this = a2;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      {
        uint64_t v7 = *(pthread_mutex_t **)(v5 + 8);
        return pthread_mutex_unlock(v7);
      }
    }
    else
    {
      char v10 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create((int32x2_t *)(this + 952), &v8, &v10, a4);
      if (!v10) {
        *(void *)this = a2;
      }
    }
  }
  return this;
}

uint64_t physx::NpFactory::addAggregate(uint64_t this, physx::PxAggregate *a2, int a3, int8x8_t a4)
{
  uint64_t v8 = a2;
  if (a2)
  {
    uint64_t v5 = this;
    unint64_t v6 = (int32x2_t *)(this + 840);
    if (a3)
    {
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
      }
      char v9 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(v6, &v8, &v9, a4);
      if (!v9) {
        *(void *)this = a2;
      }
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      {
        uint64_t v7 = *(pthread_mutex_t **)(v5 + 8);
        return pthread_mutex_unlock(v7);
      }
    }
    else
    {
      char v10 = 0;
      this = physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create((int32x2_t *)(this + 840), &v8, &v10, a4);
      if (!v10) {
        *(void *)this = a2;
      }
    }
  }
  return this;
}

uint64_t physx::NpFactory::onAggregateRelease(uint64_t this, physx::PxAggregate *a2)
{
  uint64_t v3 = (int32x2_t *)this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
  }
  if (v3[111].i32[1])
  {
    unint64_t v4 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    uint64_t v7 = (_DWORD *)(*(void *)&v3[108] + 4 * ((v3[109].i32[1] - 1) & ((v6 >> 31) ^ v6)));
    uint64_t v8 = *v7;
    if (v8 != -1)
    {
      int32x2_t v9 = v3[106];
      int32x2_t v10 = v3[107];
      if (*(physx::PxAggregate **)(*(void *)&v9 + 8 * v8) == a2)
      {
LABEL_10:
        *uint64_t v7 = *(_DWORD *)(*(void *)&v10 + 4 * v8);
        v3[111] = vadd_s32(v3[111], (int32x2_t)0xFFFFFFFF00000001);
        *(_DWORD *)(*(void *)&v10 + 4 * v8) = v3[110].i32[1];
        v3[110].i32[1] = v8;
      }
      else
      {
        while (1)
        {
          uint64_t v11 = v8;
          uint64_t v8 = *(unsigned int *)(*(void *)&v10 + 4 * v8);
          if (v8 == -1) {
            break;
          }
          if (*(physx::PxAggregate **)(*(void *)&v9 + 8 * v8) == a2)
          {
            uint64_t v7 = (_DWORD *)(*(void *)&v10 + 4 * v11);
            goto LABEL_10;
          }
        }
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v12 = (pthread_mutex_t *)v3[1];
    return pthread_mutex_unlock(v12);
  }
  return this;
}

pthread_mutex_t *physx::NpFactory::acquireConnectorArray(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[103]);
  }
  uint64_t v2 = this[102];
  if (!v2)
  {
    physx::shdfnd::PoolBase<physx::NpConnectorArray,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::allocateSlab((uint64_t)(this + 32));
    uint64_t v2 = this[102];
  }
  this[102] = (pthread_mutex_t *)v2->__sig;
  ++*((_DWORD *)this + 201);
  LOBYTE(v2[1].__sig) = 1;
  *(void *)v2[1].__opaque = v2;
  *(void *)&v2[1].__opaque[8] = 0x400000000;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(this[103]);
  }
  return v2;
}

uint64_t physx::NpFactory::releaseConnectorArray(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 824));
  }
  if (a2)
  {
    int v4 = *(_DWORD *)(a2 + 84);
    if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0)
    {
      uint64_t v5 = *(void *)(a2 + 72);
      if (v5 == a2)
      {
        *(unsigned char *)(a2 + 64) = 0;
      }
      else if (v5)
      {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      }
    }
    --*(_DWORD *)(v3 + 804);
    *(void *)a2 = *(void *)(v3 + 816);
    *(void *)(v3 + 816) = a2;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unint64_t v6 = *(pthread_mutex_t **)(v3 + 824);
    return pthread_mutex_unlock(v6);
  }
  return result;
}

uint64_t physx::shdfnd::Array<unsigned short,physx::shdfnd::InlineAllocator<8u,physx::shdfnd::ReflectionAllocator<unsigned short>>>::resize(uint64_t result, unsigned int a2, _WORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 28) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<unsigned short,physx::shdfnd::InlineAllocator<8u,physx::shdfnd::ReflectionAllocator<unsigned short>>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 24);
  if (v6 < a2)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t v8 = (_WORD *)(v7 + 2 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7 + 2 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 24) = a2;
  return result;
}

uint64_t physx::NpDestroy(uint64_t result)
{
  switch(*(unsigned char *)(result + 11) & 0xF)
  {
    case 1:
    case 2:
      uint64_t v1 = result - 48;
      uint64_t v2 = *(void *)(result - 32);
      if ((*(_WORD *)(result - 38) & 1) == 0) {
        goto LABEL_41;
      }
      uint64_t v3 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 2840));
      }
      (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
      --*(_DWORD *)(v3 + 2820);
      *(void *)uint64_t v1 = *(void *)(v3 + 2832);
      *(void *)(v3 + 2832) = v1;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
        goto LABEL_64;
      }
      int v4 = *(pthread_mutex_t **)(v3 + 2840);
      goto LABEL_63;
    case 3:
      uint64_t v1 = result - 96;
      uint64_t v2 = *(void *)(result - 80);
      if ((*(_WORD *)(result - 86) & 1) == 0) {
        goto LABEL_41;
      }
      uint64_t v5 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 1688));
      }
      (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
      --*(_DWORD *)(v5 + 1668);
      *(void *)uint64_t v1 = *(void *)(v5 + 1680);
      *(void *)(v5 + 1680) = v1;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
        goto LABEL_64;
      }
      int v4 = *(pthread_mutex_t **)(v5 + 1688);
      goto LABEL_63;
    case 4:
      uint64_t v1 = result - 96;
      uint64_t v2 = *(void *)(result - 80);
      if ((*(_WORD *)(result - 86) & 1) == 0) {
        goto LABEL_41;
      }
      uint64_t v6 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 6296));
      }
      (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
      --*(_DWORD *)(v6 + 6276);
      *(void *)uint64_t v1 = *(void *)(v6 + 6288);
      *(void *)(v6 + 6288) = v1;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
        goto LABEL_64;
      }
      int v4 = *(pthread_mutex_t **)(v6 + 6296);
      goto LABEL_63;
    case 5:
      uint64_t v1 = result - 96;
      uint64_t v2 = *(void *)(result - 80);
      if ((*(_WORD *)(result - 86) & 1) == 0) {
        goto LABEL_41;
      }
      uint64_t v7 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 2264));
      }
      (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
      --*(_DWORD *)(v7 + 2244);
      *(void *)uint64_t v1 = *(void *)(v7 + 2256);
      *(void *)(v7 + 2256) = v1;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
        goto LABEL_64;
      }
      int v4 = *(pthread_mutex_t **)(v7 + 2264);
      goto LABEL_63;
    case 6:
      uint64_t v8 = (pthread_mutex_t *)(result - 32);
      if ((*(_WORD *)(result - 22) & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v9 = physx::NpFactory::mInstance;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
        pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 3992));
      }
      (*(void (**)(pthread_mutex_t *))(v8->__sig + 24))(v8);
      --*(_DWORD *)(v9 + 3972);
      v8->__sig = *(void *)(v9 + 3984);
      *(void *)(v9 + 3984) = v8;
      if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
        goto LABEL_56;
      }
      int32x2_t v10 = *(pthread_mutex_t **)(v9 + 3992);
      goto LABEL_54;
    case 7:
      uint64_t v1 = result - 24;
      uint64_t v2 = *(void *)(result - 8);
      if (*(_WORD *)(result - 14))
      {
        uint64_t v11 = physx::NpFactory::mInstance;
        if (*(_WORD *)(result - 16) == 11)
        {
          uint64_t v12 = (pthread_mutex_t **)(physx::NpFactory::mInstance + 5144);
          if (physx::shdfnd::g_alwaysUseLocking & 1 | (physx::shdfnd::g_isLockingEnabled != 0)) {
            pthread_mutex_lock(*v12);
          }
          (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
          --*(_DWORD *)(v11 + 5124);
          *(void *)uint64_t v1 = *(void *)(v11 + 5136);
          *(void *)(v11 + 5136) = v1;
        }
        else
        {
          uint64_t v12 = (pthread_mutex_t **)(physx::NpFactory::mInstance + 5720);
          if (physx::shdfnd::g_alwaysUseLocking & 1 | (physx::shdfnd::g_isLockingEnabled != 0)) {
            pthread_mutex_lock(*v12);
          }
          (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
          --*(_DWORD *)(v11 + 5700);
          *(void *)uint64_t v1 = *(void *)(v11 + 5712);
          *(void *)(v11 + 5712) = v1;
        }
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        {
          int v4 = *v12;
LABEL_63:
          pthread_mutex_unlock(v4);
        }
      }
      else
      {
LABEL_41:
        (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
      }
LABEL_64:
      uint64_t v14 = physx::NpPhysics::mInstance;
      uint64_t v15 = v1;
      uint64_t v16 = v2;
      break;
    case 8:
      uint64_t v8 = *(pthread_mutex_t **)(result + 400);
      if ((*(_WORD *)&v8->__opaque[2] & 1) == 0) {
        goto LABEL_43;
      }
      if (*(_WORD *)v8->__opaque == 14) {
        physx::NpFactory::releaseArticulationJointToPool((pthread_mutex_t **)physx::NpFactory::mInstance, v8);
      }
      else {
        physx::NpFactory::releaseArticulationJointRCToPool((pthread_mutex_t **)physx::NpFactory::mInstance, v8);
      }
      goto LABEL_56;
    case 9:
      uint64_t v8 = (pthread_mutex_t *)(result - 16);
      if (*(_WORD *)(result - 6))
      {
        uint64_t v13 = physx::NpFactory::mInstance;
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
          pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 3416));
        }
        (*(void (**)(pthread_mutex_t *))(v8->__sig + 24))(v8);
        --*(_DWORD *)(v13 + 3396);
        v8->__sig = *(void *)(v13 + 3408);
        *(void *)(v13 + 3408) = v8;
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        {
          int32x2_t v10 = *(pthread_mutex_t **)(v13 + 3416);
LABEL_54:
          pthread_mutex_unlock(v10);
        }
      }
      else
      {
LABEL_43:
        (*(void (**)(pthread_mutex_t *))(v8->__sig + 24))(v8);
      }
LABEL_56:
      uint64_t v14 = physx::NpPhysics::mInstance;
      uint64_t v15 = (uint64_t)v8;
      uint64_t v16 = 0;
      break;
    default:
      return result;
  }
  return physx::NpPhysics::notifyDeletionListeners(v14, v15, v16, 2);
}

uint64_t physx::NpPhysics::removeMaterialFromTable(uint64_t this, physx::NpMaterial *a2)
{
  uint64_t v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
  }
  if (*(_DWORD *)(v3 + 16))
  {
    unint64_t v4 = 0;
    do
      this = physx::Scb::Scene::removeMaterial(*(void *)(*(void *)(v3 + 8) + 8 * v4++) + 16, (uint64_t)a2 + 48);
    while (v4 < *(unsigned int *)(v3 + 16));
  }
  int v5 = *((unsigned __int16 *)a2 + 36);
  if (v5 != 0xFFFF)
  {
    *(void *)(*(void *)(v3 + 56) + 8 * *((unsigned __int16 *)a2 + 36)) = 0;
    this = physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID(v3 + 32, v5);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v6 = *(pthread_mutex_t **)(v3 + 160);
    return pthread_mutex_unlock(v6);
  }
  return this;
}

void physx::NpMaterial::~NpMaterial(physx::NpMaterial *this)
{
  *(void *)this = &unk_26E72C040;
  *((void *)this + 3) = &unk_26E72C110;
  physx::NpPhysics::removeMaterialFromTable(physx::NpPhysics::mInstance, this);
}

{
  void (*v1)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E72C040;
  *((void *)this + 3) = &unk_26E72C110;
  physx::NpPhysics::removeMaterialFromTable(physx::NpPhysics::mInstance, this);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

void non-virtual thunk to'physx::NpMaterial::~NpMaterial(physx::NpMaterial *this)
{
  *((void *)this - 3) = &unk_26E72C040;
  *(void *)this = &unk_26E72C110;
  physx::NpPhysics::removeMaterialFromTable(physx::NpPhysics::mInstance, (physx::NpMaterial *)((char *)this - 24));
}

{
  physx::NpMaterial::~NpMaterial((physx::NpMaterial *)((char *)this - 24));
}

physx::NpMaterial *physx::NpMaterial::resolveReferences(physx::NpMaterial *a1)
{
  *((void *)a1 + 8) = a1;
  return physx::NpPhysics::addMaterial((pthread_mutex_t **)physx::NpPhysics::mInstance, a1);
}

physx::NpMaterial *physx::NpPhysics::addMaterial(pthread_mutex_t **this, physx::NpMaterial *a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_lock(this[20]);
    }
    if (physx::NpMaterialManager::setMaterial((physx::NpMaterialManager *)(this + 4), v2))
    {
      if (*((_DWORD *)this + 4))
      {
        unint64_t v7 = 0;
        do
          physx::Scb::Scene::addMaterial(*(&this[1]->__sig + v7++) + 16, (uint64_t)v2 + 48);
        while (v7 < *((unsigned int *)this + 4));
      }
    }
    else
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 418, "PxPhysics::createMaterial: limit of 64K materials reached.", v4, v5, v6, v9);
      (**(void (***)(physx::NpMaterial *))v2)(v2);
      uint64_t v2 = 0;
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(this[20]);
    }
  }
  return v2;
}

uint64_t physx::NpMaterial::onRefCountZero(physx::NpMaterial *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (*((_WORD *)this + 5))
  {
    uint64_t v3 = physx::NpFactory::mInstance;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 4568));
    }
    (*(void (**)(physx::NpMaterial *))(*(void *)this + 24))(this);
    --*(_DWORD *)(v3 + 4548);
    *(void *)this = *(void *)(v3 + 4560);
    *(void *)(v3 + 4560) = this;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 4568));
    }
  }
  else
  {
    (*(void (**)(physx::NpMaterial *))(*(void *)this + 24))(this);
  }
  uint64_t v4 = physx::NpPhysics::mInstance;
  return physx::NpPhysics::notifyDeletionListeners(v4, (uint64_t)this, v2, 2);
}

uint64_t non-virtual thunk to'physx::NpMaterial::onRefCountZero(physx::NpMaterial *this)
{
  return physx::NpMaterial::onRefCountZero((physx::NpMaterial *)((char *)this - 24));
}

uint64_t physx::NpMaterial::release(uint64_t this)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 32), 0xFFFFFFFF) == 1) {
    return (*(uint64_t (**)(void))(*(void *)(this + 24) + 16))();
  }
  return this;
}

uint64_t physx::NpMaterial::acquireReference(uint64_t this)
{
  return this;
}

uint64_t physx::NpMaterial::getReferenceCount(physx::NpMaterial *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::NpMaterial::setDynamicFriction(physx::NpMaterial *this, float a2)
{
  *((float *)this + 12) = a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, this);
}

float physx::NpMaterial::getDynamicFriction(physx::NpMaterial *this)
{
  return *((float *)this + 12);
}

uint64_t physx::NpMaterial::setStaticFriction(physx::NpMaterial *this, float a2)
{
  *((float *)this + 13) = a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, this);
}

float physx::NpMaterial::getStaticFriction(physx::NpMaterial *this)
{
  return *((float *)this + 13);
}

uint64_t physx::NpMaterial::setRestitution(physx::NpMaterial *this, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 < 0.0 || a2 > 1.0)
  {
    double v14 = a2;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpMaterial.cpp", 143, "PxMaterial::setRestitution: Invalid value %f was clamped to [0,1]!", a7, a8, a9, SLOBYTE(v14));
  }
  *((float *)this + 14) = a2;
  uint64_t v12 = physx::NpPhysics::mInstance;
  return physx::NpPhysics::updateMaterial(v12, this);
}

float physx::NpMaterial::getRestitution(physx::NpMaterial *this)
{
  return *((float *)this + 14);
}

uint64_t physx::NpMaterial::setFlag(physx::NpMaterial *a1, __int16 a2, int a3)
{
  if (a3) {
    __int16 v3 = *((_WORD *)a1 + 30) | a2;
  }
  else {
    __int16 v3 = *((_WORD *)a1 + 30) & ~a2;
  }
  *((_WORD *)a1 + 30) = v3;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, a1);
}

uint64_t physx::NpMaterial::setFlags(physx::NpMaterial *a1, _WORD *a2)
{
  *((_WORD *)a1 + 30) = *a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, a1);
}

uint64_t physx::NpMaterial::getFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(this + 60);
  return this;
}

uint64_t physx::NpMaterial::setFrictionCombineMode(physx::NpMaterial *a1, char a2)
{
  *((unsigned char *)a1 + 62) = *((unsigned char *)a1 + 62) & 0xF | (16 * a2);
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, a1);
}

uint64_t physx::NpMaterial::getFrictionCombineMode(physx::NpMaterial *this)
{
  return *((unsigned __int8 *)this + 62) >> 4;
}

uint64_t physx::NpMaterial::setRestitutionCombineMode(physx::NpMaterial *a1, char a2)
{
  *((unsigned char *)a1 + 62) = *((unsigned char *)a1 + 62) & 0xF0 | a2;
  return physx::NpPhysics::updateMaterial(physx::NpPhysics::mInstance, a1);
}

uint64_t physx::NpMaterial::getRestitutionCombineMode(physx::NpMaterial *this)
{
  return *((unsigned char *)this + 62) & 0xF;
}

void physx::NpPhysics::~NpPhysics(physx::NpPhysics *this)
{
  *(void *)this = &unk_26E72C138;
  uint64_t v2 = *((unsigned int *)this + 4);
  if (v2)
  {
    __int16 v3 = (void *)*((void *)this + 1);
    do
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      *v3++ = 0;
      --v2;
    }
    while (v2);
  }
  *((_DWORD *)this + 4) = 0;
  unint64_t v4 = *((unsigned int *)this + 16);
  if (v4)
  {
    for (unint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = *(void *)(*((void *)this + 7) + 8 * i);
      if (v6)
      {
        physx::Cm::IDPoolBase<physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>>::freeID((uint64_t)this + 32, *(unsigned __int16 *)(v6 + 72));
        (***(void (****)(void))(*((void *)this + 7) + 8 * i))();
        *(void *)(*((void *)this + 7) + 8 * i) = 0;
        unint64_t v4 = *((unsigned int *)this + 16);
      }
    }
  }
  if (*((void *)this + 7)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  uint64_t v7 = *((unsigned int *)this + 35);
  if (v7)
  {
    uint64_t v8 = (void **)(*((void *)this + 12) + 8);
    do
    {
      char v9 = *v8;
      if (*v8)
      {
        if (*v9) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v9);
      }
      v8 += 2;
      --v7;
    }
    while (v7);
  }
  int v10 = *((_DWORD *)this + 31);
  if (v10 && *((_DWORD *)this + 35))
  {
    memset(*((void **)this + 14), 255, (4 * v10));
    uint64_t v11 = *((void *)this + 13);
    uint64_t v12 = (*((_DWORD *)this + 30) - 1);
    if (*((_DWORD *)this + 30) == 1)
    {
      uint64_t v20 = 0;
    }
    else
    {
      _X10 = v11 + 128;
      int v14 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v14++;
        _X10 += 4;
        --v12;
      }
      while (v12);
      uint64_t v20 = (*((_DWORD *)this + 30) - 1);
    }
    *(_DWORD *)(v11 + 4 * v20) = -1;
    *((_DWORD *)this + 33) = 0;
    *((_DWORD *)this + 35) = 0;
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 20);
  if (*((void *)this + 11)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 10);
  int v21 = *((_DWORD *)this + 13);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((void *)this + 5)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Sc::Physics::mInstance = 0;
  int v22 = *((_DWORD *)this + 5);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0)
  {
    if (*((void *)this + 1)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpPhysics::~NpPhysics(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

uint64_t physx::NpPhysics::createInstance(physx::shdfnd::Foundation *a1, uint64_t a2, float *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  if (a1 != 67174656)
  {
    physx::shdfnd::snprintf((physx::shdfnd *)v70, (char *)0x100, "Wrong version: PhysX version is 0x%08x, tried to create 0x%08x", a4, 67174656, a1);
    uint64_t v68 = *(void (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2) + 16);
LABEL_62:
    v68();
    return 0;
  }
  if (*a3 <= 0.0)
  {
    uint64_t v68 = *(void (**)(void))(*(void *)(*(uint64_t (**)(uint64_t, float))(*(void *)a2 + 8))(a2, *a3) + 16);
    goto LABEL_62;
  }
  int v10 = physx::NpPhysics::mRefCount;
  if (!physx::NpPhysics::mRefCount)
  {
    physx::shdfnd::Foundation::incRefCount(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v69);
    xmmword_2687A62F8 = (__int128)vdupq_n_s64(0xFFFFFFFFFFFFFFD0);
    unk_2687A6308 = vdupq_n_s64(0xFFFFFFFFFFFFFFD8);
    physx::Sc::gOffsetTable = (__int128)vdupq_n_s64(0xFFFFFFFFFFFFFF80);
    *(_OWORD *)algn_2687A62E8 = xmmword_234423EA0;
    *(_OWORD *)&qword_2687A6320 = xmmword_234423EB0;
    unk_2687A6330 = physx::Sc::gOffsetTable;
    physx::NpActor::sLazyInitOffsets = 0u;
    *(_OWORD *)algn_2687A6370 = 0u;
    qword_2687A6380 = 0;
    unk_2687A6398 = 0u;
    unk_2687A63A8 = 0u;
    unk_2687A63B8 = 0u;
    xmmword_2687A63D0 = 0u;
    unk_2687A63E0 = 0u;
    xmmword_2687A63F0 = 0u;
    unk_2687A6400 = 0u;
    qword_2687A6410 = 0;
    unk_2687A6428 = 0u;
    unk_2687A6438 = 0u;
    unk_2687A6448 = 0u;
    xmmword_2687A6460 = 0u;
    unk_2687A6470 = 0u;
    unk_2687A6388 = vdupq_n_s64(0x18uLL);
    qword_2687A63C8 = 24;
    unk_2687A6418 = vdupq_n_s64(0x60uLL);
    qword_2687A6458 = 96;
    physx::Scb::Actor::sLazyInitOffsets = (__int128)vdupq_n_s64(0x20uLL);
    qword_2687A64B0 = 32;
    xmmword_2687A64D0 = physx::Scb::Actor::sLazyInitOffsets;
    qword_2687A64E0 = 32;
    uint64_t v11 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v12 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPhysics>::getName() [T = physx::NpPhysics]";
    }
    else {
      uint64_t v12 = "<allocation names disabled>";
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v11 + 24) + 16))(v11 + 24, 168, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 216);
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0;
    *(void *)uint64_t v13 = &unk_26E72C138;
    *(void *)(v13 + 24) = *(void *)a3;
    physx::Sc::Physics::mInstance = v13 + 24;
    physx::gPxvOffsetTable = xmmword_234423EC0;
    qword_2687A6240 = -144;
    *(_DWORD *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(void *)(v13 + 48) = 0;
    int v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 1024, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpMaterialManager.h", 46);
    *(void *)(v13 + 56) = v14;
    *(_DWORD *)(v13 + 64) = 128;
    bzero(v14, 0x400uLL);
    *(void *)(v13 + 72) = &unk_26E72C450;
    uint64_t v15 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      uint64_t v16 = "<allocation names disabled>";
    }
    float v17 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v15 + 24) + 16))(v15 + 24, 72, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v13 + 80) = v17;
    physx::shdfnd::MutexImpl::MutexImpl(v17);
    *(void *)(v13 + 120) = 0;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_DWORD *)(v13 + 128) = 1061158912;
    *(void *)(v13 + 132) = 0xFFFFFFFFLL;
    *(_DWORD *)(v13 + 140) = 0;
    physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxDeletionListener * const,physx::NpPhysics::NpDelListenerEntry *>,physx::PxDeletionListener *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::internal::HashMapBase<physx::PxDeletionListener *,physx::NpPhysics::NpDelListenerEntry *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(v13 + 88, 0x40u, (int8x8_t)0xFFFFFFFFLL);
    *(void *)(v13 + 144) = &unk_26E72C4A0;
    *(unsigned char *)(v13 + 152) = 0;
    uint64_t v18 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v19 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      float v19 = "<allocation names disabled>";
    }
    uint64_t v20 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v18 + 24) + 16))(v18 + 24, 72, v19, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v13 + 160) = v20;
    physx::shdfnd::MutexImpl::MutexImpl(v20);
    physx::NpPhysics::mInstance = v13;
    uint64_t v21 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v22 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpFactory>::getName() [T = physx::NpFactory]";
    }
    else {
      int v22 = "<allocation names disabled>";
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v21 + 24) + 16))(v21 + 24, 7456, v22, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 101);
    float v24 = physx::GuMeshFactory::GuMeshFactory((physx::GuMeshFactory *)v23);
    *(void *)float v24 = &unk_26E72C020;
    *((void *)v24 + 99) = 0x4000000000;
    *((unsigned char *)v24 + 776) = 1;
    *((void *)v24 + 98) = (char *)v24 + 264;
    *((void *)v24 + 100) = 32;
    *((_DWORD *)v24 + 202) = 2816;
    *((void *)v24 + 102) = 0;
    uint64_t v25 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v26 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      float v26 = "<allocation names disabled>";
    }
    uint64_t v27 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v25 + 24) + 16))(v25 + 24, 72, v26, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 824) = v27;
    physx::shdfnd::MutexImpl::MutexImpl(v27);
    uint64_t v28 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v29 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager>::getName() [T = physx"
    }
            "::NpPtrTableStorageManager]";
    else {
      uint64_t v29 = "<allocation names disabled>";
    }
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v28 + 24) + 16))(v28 + 24, 1720, v29, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 51);
    *(void *)uint64_t v30 = &unk_26E72C3D0;
    uint64_t v31 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      long long v32 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      long long v32 = "<allocation names disabled>";
    }
    uint64_t v33 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v31 + 24) + 16))(v31 + 24, 72, v32, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v30 + 8) = v33;
    physx::shdfnd::MutexImpl::MutexImpl(v33);
    *(void *)(v30 + 552) = 0x4000000000;
    *(unsigned char *)(v30 + 536) = 1;
    *(void *)(v30 + 544) = v30 + 24;
    *(void *)(v30 + 560) = 128;
    *(_DWORD *)(v30 + 568) = 4096;
    *(void *)(v30 + 576) = 0;
    *(void *)(v30 + 1120) = 0x4000000000;
    *(unsigned char *)(v30 + 1104) = 1;
    *(void *)(v30 + 1112) = v30 + 592;
    *(void *)(v30 + 1128) = 32;
    *(_DWORD *)(v30 + 1136) = 4096;
    *(void *)(v30 + 1144) = 0;
    *(void *)(v30 + 1688) = 0x4000000000;
    *(unsigned char *)(v30 + 1672) = 1;
    *(void *)(v30 + 1680) = v30 + 1160;
    *(void *)(v30 + 1696) = 8;
    *(_DWORD *)(v30 + 1704) = 4096;
    *(void *)(v30 + 1712) = 0;
    *(void *)(v23 + 832) = v30;
    *(void *)(v23 + 872) = 0;
    *(_OWORD *)(v23 + 840) = 0u;
    *(_OWORD *)(v23 + 856) = 0u;
    *(_DWORD *)(v23 + 880) = 1061158912;
    *(_DWORD *)(v23 + 884) = -1;
    *(void *)(v23 + 888) = 0;
    physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v23 + 840, 0x40u, 0);
    *(void *)(v23 + 928) = 0;
    *(_OWORD *)(v23 + 896) = 0u;
    *(_OWORD *)(v23 + 912) = 0u;
    *(void *)(v23 + 936) = -3233808384;
    *(void *)(v23 + 944) = 0;
    physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v23 + 896, 0x40u, 0);
    *(void *)(v23 + 984) = 0;
    *(_OWORD *)(v23 + 952) = 0u;
    *(_OWORD *)(v23 + 968) = 0u;
    *(void *)(v23 + 992) = -3233808384;
    *(void *)(v23 + 1000) = 0;
    physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v23 + 952, 0x40u, 0);
    *(void *)(v23 + 1040) = 0;
    *(_OWORD *)(v23 + 1008) = 0u;
    *(_OWORD *)(v23 + 1024) = 0u;
    *(void *)(v23 + 1048) = -3233808384;
    *(void *)(v23 + 1056) = 0;
    physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v23 + 1008, 0x40u, 0);
    *(void *)(v23 + 1096) = 0;
    *(_OWORD *)(v23 + 1064) = 0u;
    *(_OWORD *)(v23 + 1080) = 0u;
    *(void *)(v23 + 1104) = -3233808384;
    *(void *)(v23 + 1112) = 0;
    physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(v23 + 1064, 0x40u, 0);
    *(void *)(v23 + 1656) = 0x4000000000;
    *(unsigned char *)(v23 + 1640) = 1;
    *(void *)(v23 + 1648) = v23 + 1128;
    *(void *)(v23 + 1664) = 10;
    *(_DWORD *)(v23 + 1672) = 4096;
    *(void *)(v23 + 1680) = 0;
    uint64_t v34 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v35 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      uint64_t v35 = "<allocation names disabled>";
    }
    float v36 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v34 + 24) + 16))(v34 + 24, 72, v35, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 1688) = v36;
    physx::shdfnd::MutexImpl::MutexImpl(v36);
    *(void *)(v23 + 2232) = 0x4000000000;
    *(unsigned char *)(v23 + 2216) = 1;
    *(void *)(v23 + 2224) = v23 + 1704;
    *(void *)(v23 + 2240) = 23;
    *(_DWORD *)(v23 + 2248) = 4096;
    *(void *)(v23 + 2256) = 0;
    uint64_t v37 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v38 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      float v38 = "<allocation names disabled>";
    }
    float v39 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v37 + 24) + 16))(v37 + 24, 72, v38, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 2264) = v39;
    physx::shdfnd::MutexImpl::MutexImpl(v39);
    *(void *)(v23 + 2808) = 0x4000000000;
    *(unsigned char *)(v23 + 2792) = 1;
    *(void *)(v23 + 2800) = v23 + 2280;
    *(void *)(v23 + 2816) = 15;
    *(_DWORD *)(v23 + 2824) = 4096;
    *(void *)(v23 + 2832) = 0;
    uint64_t v40 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v41 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      uint64_t v41 = "<allocation names disabled>";
    }
    unsigned int v42 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v40 + 24) + 16))(v40 + 24, 72, v41, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 2840) = v42;
    physx::shdfnd::MutexImpl::MutexImpl(v42);
    *(void *)(v23 + 3384) = 0x4000000000;
    *(unsigned char *)(v23 + 3368) = 1;
    *(void *)(v23 + 3376) = v23 + 2856;
    *(void *)(v23 + 3392) = 51;
    *(_DWORD *)(v23 + 3400) = 4096;
    *(void *)(v23 + 3408) = 0;
    uint64_t v43 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v44 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      uint64_t v44 = "<allocation names disabled>";
    }
    int v45 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v43 + 24) + 16))(v43 + 24, 72, v44, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 3416) = v45;
    physx::shdfnd::MutexImpl::MutexImpl(v45);
    *(void *)(v23 + 3960) = 0x4000000000;
    *(unsigned char *)(v23 + 3944) = 1;
    *(void *)(v23 + 3952) = v23 + 3432;
    *(void *)(v23 + 3968) = 22;
    *(_DWORD *)(v23 + 3976) = 4096;
    *(void *)(v23 + 3984) = 0;
    uint64_t v46 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      int v47 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      int v47 = "<allocation names disabled>";
    }
    uint64_t v48 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v46 + 24) + 16))(v46 + 24, 72, v47, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 3992) = v48;
    physx::shdfnd::MutexImpl::MutexImpl(v48);
    *(void *)(v23 + 4536) = 0x4000000000;
    *(unsigned char *)(v23 + 4520) = 1;
    *(void *)(v23 + 4528) = v23 + 4008;
    *(void *)(v23 + 4544) = 51;
    *(_DWORD *)(v23 + 4552) = 4096;
    *(void *)(v23 + 4560) = 0;
    uint64_t v49 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v50 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      uint64_t v50 = "<allocation names disabled>";
    }
    uint64_t v51 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v49 + 24) + 16))(v49 + 24, 72, v50, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 4568) = v51;
    physx::shdfnd::MutexImpl::MutexImpl(v51);
    *(void *)(v23 + 5112) = 0x4000000000;
    *(unsigned char *)(v23 + 5096) = 1;
    *(void *)(v23 + 5104) = v23 + 4584;
    *(void *)(v23 + 5120) = 22;
    *(_DWORD *)(v23 + 5128) = 4096;
    *(void *)(v23 + 5136) = 0;
    uint64_t v52 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v53 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      uint64_t v53 = "<allocation names disabled>";
    }
    uint64_t v54 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v52 + 24) + 16))(v52 + 24, 72, v53, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 5144) = v54;
    physx::shdfnd::MutexImpl::MutexImpl(v54);
    *(void *)(v23 + 5688) = 0x4000000000;
    *(unsigned char *)(v23 + 5672) = 1;
    *(void *)(v23 + 5680) = v23 + 5160;
    *(void *)(v23 + 5696) = 20;
    *(_DWORD *)(v23 + 5704) = 4096;
    *(void *)(v23 + 5712) = 0;
    uint64_t v55 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v56 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      uint64_t v56 = "<allocation names disabled>";
    }
    uint64_t v57 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v55 + 24) + 16))(v55 + 24, 72, v56, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 5720) = v57;
    physx::shdfnd::MutexImpl::MutexImpl(v57);
    *(void *)(v23 + 6264) = 0x4000000000;
    *(unsigned char *)(v23 + 6248) = 1;
    *(void *)(v23 + 6256) = v23 + 5736;
    *(void *)(v23 + 6272) = 8;
    *(_DWORD *)(v23 + 6280) = 4096;
    *(void *)(v23 + 6288) = 0;
    uint64_t v58 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      float v59 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      float v59 = "<allocation names disabled>";
    }
    unsigned int v60 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v58 + 24) + 16))(v58 + 24, 72, v59, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 6296) = v60;
    physx::shdfnd::MutexImpl::MutexImpl(v60);
    *(void *)(v23 + 6840) = 0x4000000000;
    *(unsigned char *)(v23 + 6824) = 1;
    *(void *)(v23 + 6832) = v23 + 6312;
    *(void *)(v23 + 6848) = 9;
    *(_DWORD *)(v23 + 6856) = 4096;
    *(void *)(v23 + 6864) = 0;
    uint64_t v61 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      BOOL v62 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      BOOL v62 = "<allocation names disabled>";
    }
    char v63 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v61 + 24) + 16))(v61 + 24, 72, v62, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 6872) = v63;
    physx::shdfnd::MutexImpl::MutexImpl(v63);
    *(void *)(v23 + 7416) = 0x4000000000;
    *(unsigned char *)(v23 + 7400) = 1;
    *(void *)(v23 + 7408) = v23 + 6888;
    *(void *)(v23 + 7424) = 9;
    *(_DWORD *)(v23 + 7432) = 4096;
    *(void *)(v23 + 7440) = 0;
    uint64_t v64 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      long long v65 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    }
    else {
      long long v65 = "<allocation names disabled>";
    }
    unsigned int v66 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v64 + 24) + 16))(v64 + 24, 72, v65, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(void *)(v23 + 7448) = v66;
    physx::shdfnd::MutexImpl::MutexImpl(v66);
    physx::NpFactory::mInstance = v23;
    physx::GuMeshFactory::addFactoryListener(v23, physx::NpPhysics::mInstance + 144);
    int v10 = physx::NpPhysics::mRefCount;
  }
  physx::NpPhysics::mRefCount = v10 + 1;
  return physx::NpPhysics::mInstance;
}

void physx::NpPhysics::release(physx::NpPhysics *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!--physx::NpPhysics::mRefCount)
  {
    uint64_t v9 = physx::NpFactory::mInstance;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unsigned int v10 = *(_DWORD *)(physx::NpFactory::mInstance + 892);
    if (v10) {
      physx::shdfnd::Array<physx::PxAggregate *,physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>>::recreate((uint64_t)&v51, v10);
    }
    if (*(_DWORD *)(v9 + 872))
    {
      uint64_t v11 = *(unsigned int **)(v9 + 864);
      uint64_t v12 = *v11;
      if (v12 == -1)
      {
        uint64_t v13 = 0;
        while (*(_DWORD *)(v9 + 876) - 1 != v13)
        {
          uint64_t v12 = v11[++v13];
          if (v12 != -1) {
            goto LABEL_11;
          }
        }
      }
      else
      {
        LODWORD(v13) = 0;
        do
        {
LABEL_11:
          int v14 = (void *)(*(void *)(v9 + 848) + 8 * v12);
          int v15 = v52;
          if ((HIDWORD(v52) & 0x7FFFFFFFu) <= v52)
          {
            physx::shdfnd::Array<physx::PxAggregate *,physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>>::growAndPushBack((uint64_t)&v51, v14);
          }
          else
          {
            *(void *)(v51 + 8 * v52) = *v14;
            LODWORD(v52) = v15 + 1;
          }
          uint64_t v12 = *(unsigned int *)(*(void *)(v9 + 856) + 4 * v12);
        }
        while (v12 != -1);
        while (*(_DWORD *)(v9 + 876) - 1 != v13)
        {
          LODWORD(v13) = v13 + 1;
          uint64_t v12 = *(unsigned int *)(*(void *)(v9 + 864) + 4 * v13);
          if (v12 != -1) {
            goto LABEL_11;
          }
        }
      }
    }
    if (v52)
    {
      unint64_t v16 = 0;
      do
      {
        (***(void (****)(void))(v51 + 8 * v16))(*(void *)(v51 + 8 * v16));
        ++v16;
      }
      while (v16 < v52);
    }
    if ((v52 & 0x8000000000000000) == 0 && (v52 & 0x7FFFFFFF00000000) != 0 && v51 != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unsigned int v18 = *(_DWORD *)(v9 + 1004);
    if (v18) {
      physx::shdfnd::Array<physx::PxConstraint *,physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>>::recreate((uint64_t)&v51, v18);
    }
    if (*(_DWORD *)(v9 + 984))
    {
      float v19 = *(unsigned int **)(v9 + 976);
      uint64_t v20 = *v19;
      if (v20 == -1)
      {
        uint64_t v21 = 0;
        while (*(_DWORD *)(v9 + 988) - 1 != v21)
        {
          uint64_t v20 = v19[++v21];
          if (v20 != -1) {
            goto LABEL_36;
          }
        }
      }
      else
      {
        LODWORD(v21) = 0;
        do
        {
LABEL_36:
          int v22 = (void *)(*(void *)(v9 + 960) + 8 * v20);
          int v23 = v52;
          if ((HIDWORD(v52) & 0x7FFFFFFFu) <= v52)
          {
            physx::shdfnd::Array<physx::PxConstraint *,physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>>::growAndPushBack((uint64_t)&v51, v22);
          }
          else
          {
            *(void *)(v51 + 8 * v52) = *v22;
            LODWORD(v52) = v23 + 1;
          }
          uint64_t v20 = *(unsigned int *)(*(void *)(v9 + 968) + 4 * v20);
        }
        while (v20 != -1);
        while (*(_DWORD *)(v9 + 988) - 1 != v21)
        {
          LODWORD(v21) = v21 + 1;
          uint64_t v20 = *(unsigned int *)(*(void *)(v9 + 976) + 4 * v21);
          if (v20 != -1) {
            goto LABEL_36;
          }
        }
      }
    }
    if (v52)
    {
      unint64_t v24 = 0;
      do
      {
        (***(void (****)(void))(v51 + 8 * v24))(*(void *)(v51 + 8 * v24));
        ++v24;
      }
      while (v24 < v52);
    }
    if ((v52 & 0x8000000000000000) == 0 && (v52 & 0x7FFFFFFF00000000) != 0 && v51 != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unsigned int v26 = *(_DWORD *)(v9 + 948);
    if (v26) {
      physx::shdfnd::Array<physx::PxArticulationBase *,physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>>::recreate((uint64_t)&v51, v26);
    }
    if (*(_DWORD *)(v9 + 928))
    {
      uint64_t v27 = *(unsigned int **)(v9 + 920);
      uint64_t v28 = *v27;
      if (v28 == -1)
      {
        uint64_t v29 = 0;
        while (*(_DWORD *)(v9 + 932) - 1 != v29)
        {
          uint64_t v28 = v27[++v29];
          if (v28 != -1) {
            goto LABEL_61;
          }
        }
      }
      else
      {
        LODWORD(v29) = 0;
        do
        {
LABEL_61:
          uint64_t v30 = (void *)(*(void *)(v9 + 904) + 8 * v28);
          int v31 = v52;
          if ((HIDWORD(v52) & 0x7FFFFFFFu) <= v52)
          {
            physx::shdfnd::Array<physx::PxArticulationBase *,physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>>::growAndPushBack((uint64_t)&v51, v30);
          }
          else
          {
            *(void *)(v51 + 8 * v52) = *v30;
            LODWORD(v52) = v31 + 1;
          }
          uint64_t v28 = *(unsigned int *)(*(void *)(v9 + 912) + 4 * v28);
        }
        while (v28 != -1);
        while (*(_DWORD *)(v9 + 932) - 1 != v29)
        {
          LODWORD(v29) = v29 + 1;
          uint64_t v28 = *(unsigned int *)(*(void *)(v9 + 920) + 4 * v29);
          if (v28 != -1) {
            goto LABEL_61;
          }
        }
      }
    }
    if (v52)
    {
      unint64_t v32 = 0;
      do
      {
        (***(void (****)(void))(v51 + 8 * v32))(*(void *)(v51 + 8 * v32));
        ++v32;
      }
      while (v32 < v52);
    }
    if ((v52 & 0x8000000000000000) == 0 && (v52 & 0x7FFFFFFF00000000) != 0 && v51 != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unsigned int v34 = *(_DWORD *)(v9 + 1060);
    if (v34) {
      physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::recreate((uint64_t)&v51, v34);
    }
    if (*(_DWORD *)(v9 + 1040))
    {
      uint64_t v35 = *(unsigned int **)(v9 + 1032);
      uint64_t v36 = *v35;
      if (v36 == -1)
      {
        uint64_t v37 = 0;
        while (*(_DWORD *)(v9 + 1044) - 1 != v37)
        {
          uint64_t v36 = v35[++v37];
          if (v36 != -1) {
            goto LABEL_86;
          }
        }
      }
      else
      {
        LODWORD(v37) = 0;
        do
        {
LABEL_86:
          float v38 = (void *)(*(void *)(v9 + 1016) + 8 * v36);
          int v39 = v52;
          if ((HIDWORD(v52) & 0x7FFFFFFFu) <= v52)
          {
            physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack((uint64_t)&v51, v38);
          }
          else
          {
            *(void *)(v51 + 8 * v52) = *v38;
            LODWORD(v52) = v39 + 1;
          }
          uint64_t v36 = *(unsigned int *)(*(void *)(v9 + 1024) + 4 * v36);
        }
        while (v36 != -1);
        while (*(_DWORD *)(v9 + 1044) - 1 != v37)
        {
          LODWORD(v37) = v37 + 1;
          uint64_t v36 = *(unsigned int *)(*(void *)(v9 + 1032) + 4 * v37);
          if (v36 != -1) {
            goto LABEL_86;
          }
        }
      }
    }
    if (v52)
    {
      unint64_t v40 = 0;
      do
      {
        (***(void (****)(void))(v51 + 8 * v40))(*(void *)(v51 + 8 * v40));
        ++v40;
      }
      while (v40 < v52);
    }
    if ((v52 & 0x8000000000000000) == 0 && (v52 & 0x7FFFFFFF00000000) != 0 && v51 != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    while (*(_DWORD *)(v9 + 1116))
    {
      uint64_t v42 = **(void **)(v9 + 1072);
      if (atomic_fetch_add((atomic_uint *volatile)(v42 + 32), 0xFFFFFFFF) == 1) {
        (*(void (**)(void))(*(void *)(v42 + 24) + 16))();
      }
    }
    physx::GuMeshFactory::release((physx::GuMeshFactory *)v9);
    physx::NpFactory::mInstance = 0;
    uint64_t v50 = (physx::shdfnd::Foundation *)physx::NpPhysics::mInstance;
    if (physx::NpPhysics::mInstance) {
      uint64_t v50 = (physx::shdfnd::Foundation *)(*(uint64_t (**)(uint64_t))(*(void *)physx::NpPhysics::mInstance
    }
                                                                            + 8))(physx::NpPhysics::mInstance);
    physx::NpPhysics::mInstance = 0;
    physx::shdfnd::Foundation::decRefCount(v50, v43, v44, v45, v46, v47, v48, v49, a9);
  }
}

void *physx::NpPhysics::createScene(uint64_t a1, uint64_t a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 160));
  }
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpScene>::getName() [T = physx::NpScene]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, 9744, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 274);
  uint64_t v23 = physx::NpScene::NpScene((uint64_t)v6, a2);
  if (!v23)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 277, "Unable to create scene.", v7, v8, v9, v22);
    goto LABEL_23;
  }
  if (!(*(uint64_t (**)(void *))(*v6 + 968))(v6))
  {
    uint64_t v17 = physx::shdfnd::Foundation::mInstance;
    unsigned int v18 = "Unable to create scene. Task manager creation failed.";
    uint64_t v19 = 32;
    uint64_t v20 = 282;
LABEL_21:
    physx::shdfnd::Foundation::error(v17, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", v20, v18, v10, v11, v12, v22);
    uint64_t v6 = 0;
    goto LABEL_23;
  }
  physx::NpScene::loadFromDesc((uint64_t)v6, a2);
  unint64_t v13 = *(unsigned int *)(a1 + 64);
  if (v13)
  {
    unint64_t v14 = 0;
    do
    {
      while (1)
      {
        uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
        if (v15) {
          break;
        }
        if (v13 == ++v14) {
          goto LABEL_15;
        }
      }
      unint64_t v14 = (v14 + 1);
      physx::Scb::Scene::addMaterial((uint64_t)(v6 + 2), v15 + 48);
      unint64_t v13 = *(unsigned int *)(a1 + 64);
    }
    while (v14 < v13);
  }
LABEL_15:
  if (!v6[234])
  {
    (*(void (**)(void *))(*v6 + 8))(v6);
    uint64_t v17 = physx::shdfnd::Foundation::mInstance;
    unsigned int v18 = "Unable to create scene.";
    uint64_t v19 = 16;
    uint64_t v20 = 299;
    goto LABEL_21;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFFFu) <= v16)
  {
    physx::shdfnd::Array<physx::NpScene *,physx::shdfnd::ReflectionAllocator<physx::NpScene *>>::growAndPushBack(a1 + 8, &v23);
  }
  else
  {
    *(void *)(*(void *)(a1 + 8) + 8 * v16) = v6;
    *(_DWORD *)(a1 + 16) = v16 + 1;
  }
LABEL_23:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 160));
  }
  return v6;
}

uint64_t physx::NpPhysics::releaseSceneInternal(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 160));
  }
  int v4 = *(_DWORD *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v3 + 16);
    uint64_t v6 = *(void **)(v3 + 8);
    while (*v6 != a2)
    {
      ++v6;
      if (!--v5) {
        goto LABEL_10;
      }
    }
    unsigned int v7 = v4 - 1;
    uint64_t v8 = *(void *)(*(void *)(v3 + 8) + 8 * v7);
    *(_DWORD *)(v3 + 16) = v7;
    *uint64_t v6 = v8;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
LABEL_10:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v9 = *(pthread_mutex_t **)(v3 + 160);
    return pthread_mutex_unlock(v9);
  }
  return result;
}

uint64_t physx::NpPhysics::getNbScenes(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled) {
    return *((unsigned int *)this + 4);
  }
  pthread_mutex_lock(this[20]);
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(this[20]);
  }
  return v2;
}

uint64_t physx::NpPhysics::getScenes(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  LODWORD(v5) = a3;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 160));
  }
  unsigned int v8 = (*(_DWORD *)(a1 + 16) - a4) & ~((int)(*(_DWORD *)(a1 + 16) - a4) >> 31);
  if (v8 >= v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v8;
  }
  if (v5)
  {
    uint64_t v9 = (uint64_t *)(*(void *)(a1 + 8) + 8 * a4);
    uint64_t v10 = v5;
    do
    {
      uint64_t v11 = *v9++;
      *a2++ = v11;
      --v10;
    }
    while (v10);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 160));
  }
  return v5;
}

physx::PxRigidStatic *physx::NpPhysics::createRigidStatic(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = physx::NpFactory::mInstance;
  _Q0 = *a2;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a2->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned long long *)a2);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  float32x4_t v19 = vdivq_f32(*a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  uint64_t v20 = a2[1].i64[0];
  __int32 v21 = a2[1].i32[2];
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 2264));
  }
  uint64_t v11 = *(physx::PxRigidStatic **)(v2 + 2256);
  if (!v11)
  {
    uint64_t v12 = physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::allocate(*(unsigned int *)(v2 + 2248), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v13 = v12;
    uint64_t v22 = v12;
    uint64_t v14 = *(unsigned int *)(v2 + 2232);
    if ((*(_DWORD *)(v2 + 2236) & 0x7FFFFFFFu) <= v14)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>>::growAndPushBack(v2 + 1704, &v22);
    }
    else
    {
      *(void *)(*(void *)(v2 + 2224) + 8 * v14) = v12;
      *(_DWORD *)(v2 + 2232) = v14 + 1;
    }
    unint64_t v15 = v13 + 176 * *(unsigned int *)(v2 + 2240) - 176;
    uint64_t v11 = *(physx::PxRigidStatic **)(v2 + 2256);
    if (v15 >= v13)
    {
      uint64_t v16 = (physx::PxRigidStatic **)(v13 + 176 * *(unsigned int *)(v2 + 2240) - 176);
      do
      {
        *uint64_t v16 = v11;
        v16 -= 22;
        uint64_t v11 = (physx::PxRigidStatic *)v15;
        unint64_t v15 = (unint64_t)v16;
      }
      while ((unint64_t)v16 >= v13);
      uint64_t v11 = (physx::PxRigidStatic *)(v16 + 22);
    }
  }
  *(void *)(v2 + 2256) = *(void *)v11;
  ++*(_DWORD *)(v2 + 2244);
  *(float *)v17.i32 = physx::NpRigidStatic::NpRigidStatic((uint64_t)v11, (uint64_t)&v19);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 2264));
  }
  physx::NpFactory::addRigidStatic(v2, v11, 1, v17);
  return v11;
}

uint64_t physx::NpPhysics::createShape(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, int a5, char *a6)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v10 = physx::NpFactory::mInstance;
  char v11 = *a6;
  v27[8] = 1;
  uint64_t v28 = (unsigned __int16 *)v27;
  uint64_t v29 = 0x400000000;
  LOWORD(v26) = 0;
  physx::shdfnd::Array<unsigned short,physx::shdfnd::InlineAllocator<8u,physx::shdfnd::ReflectionAllocator<unsigned short>>>::resize((uint64_t)v27, a4, &v26);
  if (a4 == 1)
  {
    uint64_t v12 = v28;
    *uint64_t v28 = *(_WORD *)(*(void *)a3 + 72);
  }
  else
  {
    uint64_t v12 = v28;
    if (a4)
    {
      uint64_t v13 = 0;
      do
      {
        v12[v13] = *(_WORD *)(*(void *)(a3 + 8 * v13) + 72);
        ++v13;
      }
      while (a4 != v13);
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(v10 + 2840));
    uint64_t v12 = v28;
  }
  uint64_t v14 = *(void *)(v10 + 2832);
  if (!v14)
  {
    uint64_t v15 = physx::shdfnd::ReflectionAllocator<physx::NpShape>::allocate(*(unsigned int *)(v10 + 2824), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v16 = v15;
    uint64_t v26 = v15;
    uint64_t v17 = *(unsigned int *)(v10 + 2808);
    if ((*(_DWORD *)(v10 + 2812) & 0x7FFFFFFFu) <= v17)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpShape>>>::growAndPushBack(v10 + 2280, &v26);
    }
    else
    {
      *(void *)(*(void *)(v10 + 2800) + 8 * v17) = v15;
      *(_DWORD *)(v10 + 2808) = v17 + 1;
    }
    unsigned int v18 = (uint64_t *)(v16 + 272 * *(unsigned int *)(v10 + 2816) - 272);
    uint64_t v14 = *(void *)(v10 + 2832);
    if ((unint64_t)v18 >= v16)
    {
      do
      {
        *unsigned int v18 = v14;
        float32x4_t v19 = v18 - 34;
        uint64_t v14 = (uint64_t)v18;
        unsigned int v18 = v19;
      }
      while ((unint64_t)v19 >= v16);
      uint64_t v14 = (uint64_t)(v19 + 34);
    }
  }
  *(void *)(v10 + 2832) = *(void *)v14;
  ++*(_DWORD *)(v10 + 2820);
  LOBYTE(v26) = v11;
  physx::NpShape::NpShape(v14, a2, (char *)&v26, v12, a4, a5);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v10 + 2840));
  }
  if (a4)
  {
    uint64_t v21 = 0;
    do
    {
      if ((*(unsigned char *)(v14 + 56) & 2) != 0)
      {
        uint64_t v24 = *(void *)(v14 + 64);
        if (*(_WORD *)(v24 + 148) == 1) {
          uint64_t v23 = v24 + 144;
        }
        else {
          uint64_t v23 = *(void *)(*(void *)(v14 + 48) + 7792) + 2 * *(unsigned int *)(v24 + 144);
        }
      }
      else
      {
        int v22 = *(_DWORD *)(v14 + 152);
        uint64_t v23 = v14 + 146;
        if ((v22 - 7) >= 0xFFFFFFFE)
        {
          if (v22 == 5) {
            uint64_t v23 = *(void *)(v14 + 216);
          }
          else {
            uint64_t v23 = *(void *)(v14 + 192);
          }
        }
      }
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(physx::NpPhysics::mInstance + 56)+ 8 * *(unsigned __int16 *)(v23 + v21))+ 32), 1u);
      v21 += 2;
    }
    while (2 * a4 != v21);
  }
  physx::NpFactory::addShape(v10, v14, 1, v20);
  if ((v29 & 0x8000000000000000) == 0 && (v29 & 0x7FFFFFFF00000000) != 0 && v28 != (unsigned __int16 *)v27 && v28) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v14;
}

uint64_t physx::NpPhysics::getNbShapes(physx::NpPhysics *this)
{
  return *(unsigned int *)(physx::NpFactory::mInstance + 1116);
}

uint64_t physx::NpPhysics::getShapes(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4 = (*(_DWORD *)(physx::NpFactory::mInstance + 1116) - a4) & ~((int)(*(_DWORD *)(physx::NpFactory::mInstance + 1116)
                                                                      - a4) >> 31);
  if (v4 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v4;
  }
  if (result)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(physx::NpFactory::mInstance + 1072) + 8 * a4);
    uint64_t v7 = result;
    do
    {
      uint64_t v8 = *v6++;
      *a2++ = v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

physx::PxRigidStatic *physx::NpPhysics::createRigidDynamic(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = physx::NpFactory::mInstance;
  _Q0 = *a2;
  _Q1 = vmulq_f32(_Q0, _Q0);
  _S2 = a2->i64[1];
  __asm { FMLA            S1, S2, V0.S[2] }
  _S2 = HIDWORD(*(unsigned long long *)a2);
  __asm { FMLA            S1, S2, V0.S[3] }
  _Q1.f32[0] = sqrtf(_Q1.f32[0]);
  float32x4_t v19 = vdivq_f32(*a2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
  uint64_t v20 = a2[1].i64[0];
  __int32 v21 = a2[1].i32[2];
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 1688));
  }
  char v11 = *(physx::PxRigidStatic **)(v2 + 1680);
  if (!v11)
  {
    uint64_t v12 = physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::allocate(*(unsigned int *)(v2 + 1672), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v13 = v12;
    uint64_t v22 = v12;
    uint64_t v14 = *(unsigned int *)(v2 + 1656);
    if ((*(_DWORD *)(v2 + 1660) & 0x7FFFFFFFu) <= v14)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>>::growAndPushBack(v2 + 1128, &v22);
    }
    else
    {
      *(void *)(*(void *)(v2 + 1648) + 8 * v14) = v12;
      *(_DWORD *)(v2 + 1656) = v14 + 1;
    }
    uint64_t v15 = (physx::PxRigidStatic **)(v13 + 384 * *(unsigned int *)(v2 + 1664) - 384);
    char v11 = *(physx::PxRigidStatic **)(v2 + 1680);
    if ((unint64_t)v15 >= v13)
    {
      do
      {
        *uint64_t v15 = v11;
        unint64_t v16 = v15 - 48;
        char v11 = (physx::PxRigidStatic *)v15;
        uint64_t v15 = v16;
      }
      while ((unint64_t)v16 >= v13);
      char v11 = (physx::PxRigidStatic *)(v16 + 48);
    }
  }
  *(void *)(v2 + 1680) = *(void *)v11;
  ++*(_DWORD *)(v2 + 1668);
  LOWORD(v22) = 3;
  physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::NpRigidBodyTemplate((uint64_t)v11, 5, (__int16 *)&v22, 1, (uint64_t)&v19);
  *(void *)char v11 = &unk_26E72C5F8;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 1688));
  }
  physx::NpFactory::addRigidStatic(v2, v11, 1, v17);
  return v11;
}

uint64_t physx::NpPhysics::createConstraint(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, int8x16_t *a5, int a6)
{
  uint64_t v11 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 3992));
  }
  uint64_t v12 = *(void *)(v11 + 3984);
  if (!v12)
  {
    uint64_t v13 = physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::allocate(*(unsigned int *)(v11 + 3976), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v14 = v13;
    uint64_t v26 = v13;
    uint64_t v15 = *(unsigned int *)(v11 + 3960);
    if ((*(_DWORD *)(v11 + 3964) & 0x7FFFFFFFu) <= v15)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>>::growAndPushBack(v11 + 3432, &v26);
    }
    else
    {
      *(void *)(*(void *)(v11 + 3952) + 8 * v15) = v13;
      *(_DWORD *)(v11 + 3960) = v15 + 1;
    }
    unint64_t v16 = v14 + 184 * *(unsigned int *)(v11 + 3968) - 184;
    uint64_t v12 = *(void *)(v11 + 3984);
    if (v16 >= v14)
    {
      int8x8_t v17 = (uint64_t *)(v14 + 184 * *(unsigned int *)(v11 + 3968) - 184);
      do
      {
        uint64_t *v17 = v12;
        v17 -= 23;
        uint64_t v12 = v16;
        unint64_t v16 = (unint64_t)v17;
      }
      while ((unint64_t)v17 >= v14);
      uint64_t v12 = (uint64_t)(v17 + 23);
    }
  }
  *(void *)(v11 + 3984) = *(void *)v12;
  ++*(_DWORD *)(v11 + 3972);
  *(_DWORD *)(v12 + 8) = 65545;
  *(void *)uint64_t v12 = &unk_26E72BF58;
  *(void *)(v12 + 32) = 0;
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  *(void *)(v12 + 48) = 0;
  *(_WORD *)(v12 + 56) = 32;
  *(void *)(v12 + 68) = 0;
  *(void *)(v12 + 76) = 0;
  *(void *)(v12 + 60) = 0;
  *(void *)(v12 + 88) = a4;
  *(int8x16_t *)(v12 + 96) = vextq_s8(*a5, *a5, 8uLL);
  *(void *)(v12 + 112) = a5[1].i64[0];
  *(_DWORD *)(v12 + 120) = a6;
  *(int32x2_t *)(v12 + 124) = vdup_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v12 + 132) = 0u;
  *(_OWORD *)(v12 + 148) = 0u;
  *(void *)(v12 + 162) = 0;
  *(_DWORD *)(v12 + 40) = 100663296;
  *(unsigned char *)(v12 + 176) = 1;
  LOWORD(v26) = a5[1].i32[2];
  physx::Sc::ConstraintCore::setFlags((physx::Sc::ConstraintSim *)(v12 + 56), (__int16 *)&v26, 0);
  if (a2) {
    physx::NpActor::addConnector((uint64_t)a2 + *((void *)&physx::NpActor::sLazyInitOffsets + a2[4]), 0, v12);
  }
  if (a3) {
    physx::NpActor::addConnector((uint64_t)a3 + *((void *)&physx::NpActor::sLazyInitOffsets + a3[4]), 0, v12);
  }
  if (!a2
    || ((*(void (**)(uint64_t *__return_ptr, unsigned __int16 *))(*(void *)a2 + 104))(&v26, a2),
        (v26 & 8) != 0))
  {
    uint64_t v19 = 0;
    if (!a3) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v19 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)a2 + 56))(a2);
    if (!a3) {
      goto LABEL_24;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *))(*(void *)a3 + 104))(&v26, a3);
  if ((v26 & 8) == 0)
  {
    uint64_t v20 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)a3 + 56))(a3);
    if (a2) {
      goto LABEL_25;
    }
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v20 = 0;
  if (a2)
  {
LABEL_25:
    if (!v19) {
      goto LABEL_38;
    }
  }
LABEL_26:
  if (v19) {
    __int32 v21 = (int32x2_t *)v19;
  }
  else {
    __int32 v21 = (int32x2_t *)v20;
  }
  if (v20) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = a3 == 0;
  }
  if (v22 && v21)
  {
    uint64_t v26 = v12;
    char v27 = 0;
    uint64_t v23 = (void *)physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::create(v21 + 1136, &v26, &v27, v18);
    if (!v27) {
      *uint64_t v23 = v26;
    }
    physx::Scb::Scene::add<physx::Scb::Constraint>(v21 + 2, (physx::Scb::Base *)(v12 + 32), v21 + 996, v24);
  }
LABEL_38:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 3992));
  }
  physx::NpFactory::addConstraint(v11, (physx::PxConstraint *)v12, 1, v18);
  return v12;
}

void *physx::NpPhysics::createArticulation(physx::NpPhysics *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  {
    uint64_t v8 = physx::NpFactory::mInstance;
    if (Articulation) {
      physx::NpFactory::addArticulation(v8, (uint64_t)Articulation, 1, v10);
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 263, "Articulations not registered: returned NULL.", a6, a7, a8, v12);
    return 0;
  }
  return Articulation;
}

void *physx::NpPhysics::createArticulationReducedCoordinate(physx::NpPhysics *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  {
    uint64_t v8 = physx::NpFactory::mInstance;
    if (ArticulationRC) {
      physx::NpFactory::addArticulation(v8, (uint64_t)ArticulationRC, 1, v10);
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpFactory.cpp", 279, "Articulations not registered: returned NULL.", a6, a7, a8, v12);
    return 0;
  }
  return ArticulationRC;
}

physx::NpAggregate *physx::NpPhysics::createAggregate(physx::NpPhysics *this, unsigned int a2, char a3)
{
  uint64_t v5 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 3416));
  }
  uint64_t v6 = *(physx::NpAggregate **)(v5 + 3408);
  if (!v6)
  {
    uint64_t v7 = physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::allocate(*(unsigned int *)(v5 + 3400), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v8 = v7;
    uint64_t v14 = v7;
    uint64_t v9 = *(unsigned int *)(v5 + 3384);
    if ((*(_DWORD *)(v5 + 3388) & 0x7FFFFFFFu) <= v9)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>>::growAndPushBack(v5 + 2856, &v14);
    }
    else
    {
      *(void *)(*(void *)(v5 + 3376) + 8 * v9) = v7;
      *(_DWORD *)(v5 + 3384) = v9 + 1;
    }
    unint64_t v10 = v8 + 80 * *(unsigned int *)(v5 + 3392) - 80;
    uint64_t v6 = *(physx::NpAggregate **)(v5 + 3408);
    if (v10 >= v8)
    {
      uint64_t v11 = (physx::NpAggregate **)(v8 + 80 * *(unsigned int *)(v5 + 3392) - 80);
      do
      {
        physx::PxRigidStatic *v11 = v6;
        v11 -= 10;
        uint64_t v6 = (physx::NpAggregate *)v10;
        unint64_t v10 = (unint64_t)v11;
      }
      while ((unint64_t)v11 >= v8);
      uint64_t v6 = (physx::NpAggregate *)(v11 + 10);
    }
  }
  *(void *)(v5 + 3408) = *(void *)v6;
  ++*(_DWORD *)(v5 + 3396);
  physx::NpAggregate::NpAggregate(v6, a2, a3);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 3416));
  }
  physx::NpFactory::addAggregate(v5, v6, 1, v12);
  return v6;
}

BOOL physx::NpMaterialManager::setMaterial(physx::NpMaterialManager *this, physx::NpMaterial *a2)
{
  int v4 = *((_DWORD *)this + 4);
  if (v4)
  {
    unsigned int v5 = v4 - 1;
    unsigned int v6 = *(_DWORD *)(*((void *)this + 1) + 4 * v5);
    *((_DWORD *)this + 4) = v5;
  }
  else
  {
    unsigned int v6 = (*(_DWORD *)this)++;
  }
  if (v6 <= 0xFFFE)
  {
    if (*((_DWORD *)this + 8) <= v6) {
      physx::NpMaterialManager::resize(this);
    }
    *(void *)(*((void *)this + 3) + 8 * v6) = a2;
    *((_WORD *)a2 + 36) = v6;
  }
  return v6 < 0xFFFF;
}

physx::NpMaterial *physx::NpPhysics::createMaterial(pthread_mutex_t **this, float a2, float a3, float a4)
{
  uint64_t v8 = physx::NpFactory::mInstance;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(physx::NpFactory::mInstance + 4568));
  }
  uint64_t v9 = *(void **)(v8 + 4560);
  if (!v9)
  {
    uint64_t v10 = physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::allocate(*(unsigned int *)(v8 + 4552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    unint64_t v11 = v10;
    uint64_t v16 = v10;
    uint64_t v12 = *(unsigned int *)(v8 + 4536);
    if ((*(_DWORD *)(v8 + 4540) & 0x7FFFFFFFu) <= v12)
    {
      physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>>::growAndPushBack(v8 + 4008, &v16);
    }
    else
    {
      *(void *)(*(void *)(v8 + 4528) + 8 * v12) = v10;
      *(_DWORD *)(v8 + 4536) = v12 + 1;
    }
    unint64_t v13 = v11 + 80 * *(unsigned int *)(v8 + 4544) - 80;
    uint64_t v9 = *(void **)(v8 + 4560);
    if (v13 >= v11)
    {
      uint64_t v14 = (void *)(v11 + 80 * *(unsigned int *)(v8 + 4544) - 80);
      do
      {
        *uint64_t v14 = v9;
        v14 -= 10;
        uint64_t v9 = (void *)v13;
        unint64_t v13 = (unint64_t)v14;
      }
      while ((unint64_t)v14 >= v11);
      uint64_t v9 = v14 + 10;
    }
  }
  *(void *)(v8 + 4560) = *v9;
  ++*(_DWORD *)(v8 + 4548);
  *((_DWORD *)v9 + 2) = 196616;
  *((_DWORD *)v9 + 8) = 1;
  *uint64_t v9 = &unk_26E72C040;
  void v9[2] = 0;
  v9[3] = &unk_26E72C110;
  *((float *)v9 + 12) = a3;
  *((float *)v9 + 13) = a2;
  *((float *)v9 + 14) = a4;
  *((_WORD *)v9 + 30) = 0;
  *((_WORD *)v9 + 31) = -13056;
  *((_DWORD *)v9 + 18) = -842137601;
  v9[8] = v9;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 4568));
  }
  return physx::NpPhysics::addMaterial(this, (physx::NpMaterial *)v9);
}

uint64_t physx::NpPhysics::getNbMaterials(pthread_mutex_t **this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    pthread_mutex_lock(this[20]);
    int v2 = *((_DWORD *)this + 8);
    int v3 = *((_DWORD *)this + 12);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      pthread_mutex_unlock(this[20]);
    }
  }
  else
  {
    int v2 = *((_DWORD *)this + 8);
    int v3 = *((_DWORD *)this + 12);
  }
  return (v2 - v3);
}

uint64_t physx::NpPhysics::getMaterials(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 160));
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  unsigned int v10 = 0;
  unint64_t v11 = *(unsigned int *)(a1 + 64);
LABEL_5:
  unsigned int v12 = v10;
  if (v10 <= a4) {
    unsigned int v13 = a4;
  }
  else {
    unsigned int v13 = v10;
  }
  unsigned int v10 = v13 + 1;
  while (v9 < v11)
  {
    unint64_t v14 = v9;
    while (1)
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v14);
      if (v15) {
        break;
      }
      if (v11 == ++v14) {
        goto LABEL_18;
      }
    }
    unint64_t v9 = (v14 + 1);
    if (v12++ == v13)
    {
      if (v8 == a3) {
        goto LABEL_19;
      }
      *(void *)(a2 + 8 * v8++) = v15;
      unint64_t v9 = (v14 + 1);
      goto LABEL_5;
    }
  }
LABEL_18:
  a3 = v8;
LABEL_19:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 160));
  }
  return a3;
}

uint64_t physx::NpPhysics::updateMaterial(uint64_t this, physx::NpMaterial *a2)
{
  uint64_t v3 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 160));
  }
  if (*(_DWORD *)(v3 + 16))
  {
    unint64_t v4 = 0;
    do
      this = physx::Scb::Scene::updateMaterial(*(void *)(*(void *)(v3 + 8) + 8 * v4++) + 16, (uint64_t)a2 + 48);
    while (v4 < *(unsigned int *)(v3 + 16));
  }
  *(void *)(*(void *)(v3 + 56) + 8 * *((unsigned __int16 *)a2 + 36)) = a2;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unsigned int v5 = *(pthread_mutex_t **)(v3 + 160);
    return pthread_mutex_unlock(v5);
  }
  return this;
}

physx::Gu::BV4TriangleMesh *physx::NpPhysics::createTriangleMesh(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  return physx::GuMeshFactory::createTriangleMesh((physx::GuMeshFactory *)physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpPhysics::getNbTriangleMeshes(physx::NpPhysics *this)
{
  return physx::GuMeshFactory::getNbTriangleMeshes((pthread_mutex_t **)physx::NpFactory::mInstance);
}

uint64_t physx::NpPhysics::getTriangleMeshes(physx::NpPhysics *this, physx::PxTriangleMesh **a2, int a3, unsigned int a4)
{
  return physx::GuMeshFactory::getTriangleMeshes(physx::NpFactory::mInstance, a2, a3, a4);
}

uint64_t physx::NpPhysics::createHeightField(uint64_t a1, void (***a2)(void, unsigned __int32 *, uint64_t))
{
  return physx::GuMeshFactory::createHeightField(physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpPhysics::getNbHeightFields(physx::NpPhysics *this)
{
  return physx::GuMeshFactory::getNbHeightFields((pthread_mutex_t **)physx::NpFactory::mInstance);
}

uint64_t physx::NpPhysics::getHeightFields(physx::NpPhysics *this, physx::PxHeightField **a2, int a3, unsigned int a4)
{
  return physx::GuMeshFactory::getHeightFields(physx::NpFactory::mInstance, a2, a3, a4);
}

uint64_t physx::NpPhysics::createConvexMesh(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  return physx::GuMeshFactory::createConvexMesh(physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpPhysics::getNbConvexMeshes(physx::NpPhysics *this)
{
  return physx::GuMeshFactory::getNbConvexMeshes((pthread_mutex_t **)physx::NpFactory::mInstance);
}

uint64_t physx::NpPhysics::getConvexMeshes(physx::NpPhysics *this, physx::PxConvexMesh **a2, int a3, unsigned int a4)
{
  return physx::GuMeshFactory::getConvexMeshes(physx::NpFactory::mInstance, a2, a3, a4);
}

uint64_t physx::NpPhysics::createBVHStructure(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  return physx::GuMeshFactory::createBVHStructure(physx::NpFactory::mInstance, a2);
}

uint64_t physx::NpPhysics::getNbBVHStructures(physx::NpPhysics *this)
{
  return physx::GuMeshFactory::getNbBVHStructures((pthread_mutex_t **)physx::NpFactory::mInstance);
}

uint64_t physx::NpPhysics::getBVHStructures(physx::NpPhysics *this, physx::PxBVHStructure **a2, int a3, unsigned int a4)
{
  return physx::GuMeshFactory::getBVHStructures(physx::NpFactory::mInstance, a2, a3, a4);
}

physx::Sq::PruningStructure *physx::NpPhysics::createPruningStructure(physx::NpPhysics *this, physx::PxRigidActor *const *a2, unsigned int a3)
{
  uint64_t v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    unsigned int v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sq::PruningStructure>::getName() [T = physx::Sq::P"
  }
         "runingStructure]";
  else {
    unsigned int v6 = "<allocation names disabled>";
  }
  uint64_t v7 = (physx::Sq::PruningStructure *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, 88, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 565);
  *((_DWORD *)v7 + 2) = 196624;
  *(void *)uint64_t v7 = &unk_26E728150;
  *((_DWORD *)v7 + 16) = 0;
  *((void *)v7 + 9) = 0;
  *((unsigned char *)v7 + 80) = 1;
  *(void *)((char *)v7 + 12) = 0;
  *(_OWORD *)((char *)v7 + 24) = 0u;
  *(_OWORD *)((char *)v7 + 40) = 0u;
  *((void *)v7 + 7) = 0;
  if ((physx::Sq::PruningStructure::build(v7, a2, a3, v8, v9, v10, v11, v12) & 1) == 0)
  {
    (*(void (**)(physx::Sq::PruningStructure *))(*(void *)v7 + 32))(v7);
    return 0;
  }
  return v7;
}

uint64_t physx::NpPhysics::registerDeletionListener(uint64_t result, uint64_t a2, unsigned char *a3, char a4)
{
  uint64_t v7 = (int32x2_t *)result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 80));
  }
  if (!v7[17].i32[1]
    || (unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22),
        unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8)),
        unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27),
        uint64_t v11 = *(unsigned int *)(*(void *)&v7[14]
                              + 4 * ((v7[15].i32[1] - 1) & ((v10 >> 31) ^ v10))),
        v11 == -1))
  {
LABEL_8:
    uint64_t v12 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v13 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPhysics::NpDelListenerEntry>::getName() [T = "
    }
            "physx::NpPhysics::NpDelListenerEntry]";
    else {
      unsigned int v13 = "<allocation names disabled>";
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v12 + 24) + 16))(v12 + 24, 64, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysics.cpp", 602);
    *(_OWORD *)uint64_t v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(void *)(v14 + 32) = 0;
    *(_DWORD *)(v14 + 40) = 1061158912;
    *(void *)(v14 + 44) = 0xFFFFFFFFLL;
    *(_DWORD *)(v14 + 52) = 0;
    uint64_t result = (uint64_t)physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v14, 0x40u, (int8x8_t)0xFFFFFFFFLL);
    *(unsigned char *)(v14 + 56) = *a3;
    *(unsigned char *)(v14 + 57) = a4;
    unsigned int v16 = v7[15].u32[1];
    if (v16)
    {
      unint64_t v17 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
      unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
      unsigned int v20 = (v16 - 1) & ((v19 >> 31) ^ v19);
      uint64_t v21 = *(unsigned int *)(*(void *)&v7[14] + 4 * v20);
      if (v21 != -1)
      {
        while (*(void *)(*(void *)&v7[12] + 16 * v21) != a2)
        {
          uint64_t v21 = *(unsigned int *)(*(void *)&v7[13] + 4 * v21);
          if (v21 == -1) {
            goto LABEL_17;
          }
        }
        if (*(void *)v14) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, v14);
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
LABEL_17:
    if (v7[17].i32[1] == v7[15].i32[0])
    {
      if (v16) {
        unsigned int v22 = 2 * v16;
      }
      else {
        unsigned int v22 = 16;
      }
      if (v16 < v22)
      {
        uint64_t result = (uint64_t)physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxDeletionListener * const,physx::NpPhysics::NpDelListenerEntry *>,physx::PxDeletionListener *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::internal::HashMapBase<physx::PxDeletionListener *,physx::NpPhysics::NpDelListenerEntry *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&v7[11], v22, v15);
        unsigned int v16 = v7[15].u32[1];
      }
      unint64_t v23 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
      unint64_t v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
      unsigned int v20 = (v16 - 1) & ((v25 >> 31) ^ v25);
    }
    uint64_t v26 = v7[16].u32[1];
    v7[16].i32[1] = v26 + 1;
    int32x2_t v27 = v7[14];
    int32x2_t v28 = v7[12];
    *(_DWORD *)(*(void *)&v7[13] + 4 * v26) = *(_DWORD *)(*(void *)&v27 + 4 * v20);
    *(_DWORD *)(*(void *)&v27 + 4 * v20) = v26;
    v7[17] = vadd_s32(v7[17], (int32x2_t)0x100000001);
    uint64_t v29 = (void *)(*(void *)&v28 + 16 * v26);
    *uint64_t v29 = a2;
    v29[1] = v14;
    v7[19].i8[0] = 1;
    goto LABEL_25;
  }
  while (*(void *)(*(void *)&v7[12] + 16 * v11) != a2)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&v7[13] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
LABEL_25:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v30 = (pthread_mutex_t *)v7[10];
    return pthread_mutex_unlock(v30);
  }
  return result;
}

uint64_t physx::NpPhysics::unregisterDeletionListener(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 80));
  }
  if (*(_DWORD *)(v3 + 140))
  {
    unint64_t v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    unsigned int v7 = (*(_DWORD *)(v3 + 124) - 1) & ((v6 >> 31) ^ v6);
    uint64_t v8 = *(void *)(v3 + 112);
    unint64_t v9 = (unsigned int *)(v8 + 4 * v7);
    uint64_t v10 = *v9;
    if (v10 != -1)
    {
      uint64_t v11 = *(void *)(v3 + 96);
      unsigned int v12 = *v9;
      while (*(void *)(v11 + 16 * v12) != a2)
      {
        unsigned int v12 = *(_DWORD *)(*(void *)(v3 + 104) + 4 * v12);
        if (v12 == -1) {
          goto LABEL_24;
        }
      }
      unsigned int v13 = *(void **)(v11 + 16 * v12 + 8);
      uint64_t v14 = *(void *)(v3 + 104);
      if (*(void *)(v11 + 16 * v10) == a2)
      {
LABEL_14:
        *unint64_t v9 = *(_DWORD *)(v14 + 4 * v10);
        unsigned int v16 = *(_DWORD *)(v3 + 140) - 1;
        ++*(_DWORD *)(v3 + 136);
        *(_DWORD *)(v3 + 140) = v16;
        if (v10 != v16)
        {
          long long v17 = *(_OWORD *)(v11 + 16 * v16);
          *(_OWORD *)(v11 + 16 * v10) = v17;
          *(_DWORD *)(v14 + 4 * v10) = *(_DWORD *)(v14 + 4 * v16);
          uint64_t v18 = (~((void)v17 << 32) + v17) ^ ((~((void)v17 << 32) + (void)v17) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          uint64_t v21 = (_DWORD *)(v8 + 4 * ((*(_DWORD *)(v3 + 124) - 1) & ((v20 >> 31) ^ v20)));
          uint64_t v22 = *(unsigned int *)(v3 + 140);
          uint64_t v23 = *v21;
          if (v23 != v22)
          {
            do
            {
              uint64_t v24 = v23;
              uint64_t v23 = *(unsigned int *)(v14 + 4 * v23);
            }
            while (v23 != v22);
            uint64_t v21 = (_DWORD *)(v14 + 4 * v24);
          }
          *uint64_t v21 = v10;
        }
        --*(_DWORD *)(v3 + 132);
      }
      else
      {
        while (1)
        {
          uint64_t v15 = v10;
          uint64_t v10 = *(unsigned int *)(v14 + 4 * v10);
          if (v10 == -1) {
            break;
          }
          if (*(void *)(v11 + 16 * v10) == a2)
          {
            unint64_t v9 = (unsigned int *)(v14 + 4 * v15);
            goto LABEL_14;
          }
        }
      }
      if (v13)
      {
        if (*v13) {
          (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
      }
    }
  }
LABEL_24:
  *(unsigned char *)(v3 + 152) = *(_DWORD *)(v3 + 140) != 0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unint64_t v25 = *(pthread_mutex_t **)(v3 + 80);
    return pthread_mutex_unlock(v25);
  }
  return result;
}

pthread_mutex_t **physx::NpPhysics::registerDeletionListenerObjects(pthread_mutex_t **result, uint64_t a2, uint64_t a3, int a4, int8x8_t a5)
{
  uint64_t v8 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = (pthread_mutex_t **)pthread_mutex_lock(result[10]);
  }
  if (*((_DWORD *)v8 + 35))
  {
    unint64_t v9 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    uint64_t v12 = *((unsigned int *)&v8[14]->__sig
          + ((*((_DWORD *)v8 + 31) - 1) & ((v11 >> 31) ^ v11)));
    if (v12 != -1)
    {
      unsigned int v13 = v8[12];
      while (*(&v13->__sig + 2 * v12) != a2)
      {
        uint64_t v12 = *((unsigned int *)&v8[13]->__sig + v12);
        if (v12 == -1) {
          goto LABEL_31;
        }
      }
      uint64_t v14 = *(int32x2_t **)&v13->__opaque[16 * v12];
      unsigned int v15 = v14[6].i32[1] + a4;
      if (v14[4].i32[1] < v15) {
        uint64_t result = (pthread_mutex_t **)physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)v14, v15, a5);
      }
      if (a4)
      {
        for (uint64_t i = 0; i != a4; ++i)
        {
          unsigned int v17 = v14[4].u32[1];
          if (v17)
          {
            uint64_t v18 = *(void *)(a3 + 8 * i);
            unint64_t v19 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
            unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
            unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
            unsigned int v22 = (v17 - 1) & ((v21 >> 31) ^ v21);
            uint64_t v23 = *(unsigned int *)(*(void *)&v14[3] + 4 * v22);
            if (v23 != -1)
            {
              while (*(void *)(*(void *)&v14[1] + 8 * v23) != v18)
              {
                uint64_t v23 = *(unsigned int *)(*(void *)&v14[2] + 4 * v23);
                if (v23 == -1) {
                  goto LABEL_20;
                }
              }
              continue;
            }
          }
          else
          {
            unsigned int v22 = 0;
          }
LABEL_20:
          uint64_t v24 = v14[5].u32[1];
          if (v24 == -1)
          {
            if (v17) {
              unsigned int v25 = 2 * v17;
            }
            else {
              unsigned int v25 = 16;
            }
            if (v17 >= v25)
            {
              uint64_t v24 = 0xFFFFFFFFLL;
            }
            else
            {
              uint64_t result = (pthread_mutex_t **)physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)v14, v25, a5);
              unsigned int v17 = v14[4].u32[1];
              uint64_t v24 = v14[5].u32[1];
            }
            uint64_t v26 = *(void *)(a3 + 8 * i);
            unint64_t v27 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
            unint64_t v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
            unint64_t v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
            unsigned int v22 = (v17 - 1) & ((v29 >> 31) ^ v29);
          }
          else
          {
            uint64_t v26 = *(void *)(a3 + 8 * i);
          }
          int32x2_t v31 = v14[1];
          int32x2_t v30 = v14[2];
          v14[5].i32[1] = *(_DWORD *)(*(void *)&v30 + 4 * v24);
          int32x2_t v32 = v14[3];
          *(_DWORD *)(*(void *)&v30 + 4 * v24) = *(_DWORD *)(*(void *)&v32 + 4 * v22);
          *(_DWORD *)(*(void *)&v32 + 4 * v22) = v24;
          a5 = (int8x8_t)vadd_s32(v14[6], (int32x2_t)0x100000001);
          v14[6] = (int32x2_t)a5;
          *(void *)(*(void *)&v31 + 8 * v24) = v26;
        }
      }
    }
  }
LABEL_31:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v33 = v8[10];
    return (pthread_mutex_t **)pthread_mutex_unlock(v33);
  }
  return result;
}

uint64_t physx::NpPhysics::unregisterDeletionListenerObjects(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 80));
  }
  if (*(_DWORD *)(v7 + 140))
  {
    unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    uint64_t v11 = *(unsigned int *)(*(void *)(v7 + 112)
                          + 4 * ((*(_DWORD *)(v7 + 124) - 1) & ((v10 >> 31) ^ v10)));
    if (v11 != -1)
    {
      uint64_t v12 = *(void *)(v7 + 96);
      while (*(void *)(v12 + 16 * v11) != a2)
      {
        uint64_t v11 = *(unsigned int *)(*(void *)(v7 + 104) + 4 * v11);
        if (v11 == -1) {
          goto LABEL_21;
        }
      }
      if (a4)
      {
        unsigned int v13 = *(int32x2_t **)(v12 + 16 * v11 + 8);
        if (v13[7].i8[1])
        {
          uint64_t v14 = 0;
          do
          {
            if (v13[6].i32[1])
            {
              uint64_t v15 = *(void *)(a3 + 8 * v14);
              unint64_t v16 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
              unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
              unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
              unint64_t v19 = (_DWORD *)(*(void *)&v13[3]
                             + 4 * ((v13[4].i32[1] - 1) & ((v18 >> 31) ^ v18)));
              uint64_t v20 = *v19;
              if (v20 != -1)
              {
                int32x2_t v22 = v13[1];
                int32x2_t v21 = v13[2];
                if (*(void *)(*(void *)&v22 + 8 * v20) == v15)
                {
LABEL_19:
                  _DWORD *v19 = *(_DWORD *)(*(void *)&v21 + 4 * v20);
                  v13[6] = vadd_s32(v13[6], (int32x2_t)0xFFFFFFFF00000001);
                  *(_DWORD *)(*(void *)&v21 + 4 * v20) = v13[5].i32[1];
                  v13[5].i32[1] = v20;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v23 = v20;
                    uint64_t v20 = *(unsigned int *)(*(void *)&v21 + 4 * v20);
                    if (v20 == -1) {
                      break;
                    }
                    if (*(void *)(*(void *)&v22 + 8 * v20) == v15)
                    {
                      unint64_t v19 = (_DWORD *)(*(void *)&v21 + 4 * v23);
                      goto LABEL_19;
                    }
                  }
                }
              }
            }
            ++v14;
          }
          while (v14 != a4);
        }
      }
    }
  }
LABEL_21:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    uint64_t v24 = *(pthread_mutex_t **)(v7 + 80);
    return pthread_mutex_unlock(v24);
  }
  return result;
}

uint64_t physx::NpPhysics::notifyDeletionListeners(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(result + 152))
  {
    uint64_t v7 = result;
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
      uint64_t result = pthread_mutex_lock(*(pthread_mutex_t **)(result + 80));
    }
    uint64_t v8 = *(unsigned int *)(v7 + 140);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(v7 + 96);
      unint64_t v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      unsigned int v14 = (v13 >> 31) ^ v13;
      do
      {
        uint64_t v15 = (void *)(v10 + 16 * v9);
        uint64_t v16 = v15[1];
        if ((*(unsigned char *)(v16 + 56) & a4) != 0)
        {
          if (*(unsigned char *)(v16 + 57))
          {
            if (!*(_DWORD *)(v16 + 52)) {
              goto LABEL_15;
            }
            uint64_t v17 = *(unsigned int *)(*(void *)(v16 + 24) + 4 * ((*(_DWORD *)(v16 + 36) - 1) & v14));
            if (v17 == -1) {
              goto LABEL_15;
            }
            while (*(void *)(*(void *)(v16 + 8) + 8 * v17) != a2)
            {
              uint64_t v17 = *(unsigned int *)(*(void *)(v16 + 16) + 4 * v17);
              if (v17 == -1) {
                goto LABEL_15;
              }
            }
          }
          uint64_t result = (**(uint64_t (***)(void, uint64_t, uint64_t, uint64_t))*v15)(*v15, a2, a3, a4);
        }
LABEL_15:
        ++v9;
      }
      while (v9 != v8);
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      unint64_t v18 = *(pthread_mutex_t **)(v7 + 80);
      return pthread_mutex_unlock(v18);
    }
  }
  return result;
}

uint64_t physx::NpPhysics::getTolerancesScale(physx::NpPhysics *this)
{
  return (uint64_t)this + 24;
}

uint64_t physx::NpPhysics::getFoundation(physx::NpPhysics *this)
{
  return physx::shdfnd::Foundation::mInstance;
}

void PxRegisterArticulations(physx::Dy *a1)
{
}

void PxRegisterArticulationsReducedCoordinate(physx::Dy *a1)
{
}

const char *physx::PxMaterial::getConcreteTypeName(physx::PxMaterial *this)
{
  return "PxMaterial";
}

BOOL physx::PxMaterial::isKindOf(physx::PxMaterial *this, const char *a2)
{
  return !strcmp("PxMaterial", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpBatchQuery::getDesc(physx::NpBatchQuery *this)
{
  return (uint64_t)this + 64;
}

const char *physx::PxConstraint::getConcreteTypeName(physx::PxConstraint *this)
{
  return "PxConstraint";
}

BOOL physx::PxConstraint::isKindOf(physx::PxConstraint *this, const char *a2)
{
  return !strcmp("PxConstraint", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::NpConstraint::isSubordinate(physx::NpConstraint *this)
{
  return 1;
}

uint64_t physx::NpPhysics::getPhysicsInsertionCallback(physx::NpPhysics *this)
{
  return (uint64_t)this + 72;
}

uint64_t physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    uint64_t result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t physx::NpPtrTableStorageManager::allocate(pthread_mutex_t **this, unsigned int a2)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_lock(this[1]);
  }
  if (a2 <= 0x20)
  {
    uint64_t v4 = (uint64_t)this[72];
    if (!v4)
    {
      uint64_t v5 = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::allocate(*((unsigned int *)this + 142), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
      unint64_t v6 = v5;
      uint64_t v22 = v5;
      uint64_t v7 = *((unsigned int *)this + 138);
      if ((*((_DWORD *)this + 139) & 0x7FFFFFFFu) <= v7)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>>::growAndPushBack((uint64_t)(this + 3), &v22);
      }
      else
      {
        *(&this[68]->__sig + v7) = v5;
        *((_DWORD *)this + 138) = v7 + 1;
      }
      unint64_t v14 = v6 + 32 * *((unsigned int *)this + 140) - 32;
      uint64_t v4 = (uint64_t)this[72];
      if (v14 >= v6)
      {
        uint64_t v15 = (uint64_t *)(v6 + 32 * *((unsigned int *)this + 140) - 32);
        do
        {
          *uint64_t v15 = v4;
          v15 -= 4;
          uint64_t v4 = v14;
          unint64_t v14 = (unint64_t)v15;
        }
        while ((unint64_t)v15 >= v6);
        uint64_t v4 = (uint64_t)(v15 + 4);
      }
    }
    this[72] = *(pthread_mutex_t **)v4;
    ++*((_DWORD *)this + 141);
    long long v16 = 0uLL;
LABEL_34:
    *(_OWORD *)uint64_t v4 = v16;
    *(_OWORD *)(v4 + 16) = v16;
    goto LABEL_35;
  }
  if (a2 <= 0x80)
  {
    uint64_t v4 = (uint64_t)this[143];
    if (!v4)
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::allocate(*((unsigned int *)this + 284), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
      unint64_t v9 = v8;
      uint64_t v22 = v8;
      uint64_t v10 = *((unsigned int *)this + 280);
      if ((*((_DWORD *)this + 281) & 0x7FFFFFFFu) <= v10)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>>::growAndPushBack((uint64_t)(this + 74), &v22);
      }
      else
      {
        *(&this[139]->__sig + v10) = v8;
        *((_DWORD *)this + 280) = v10 + 1;
      }
      unint64_t v17 = v9 + ((unint64_t)*((unsigned int *)this + 282) << 7) - 128;
      uint64_t v4 = (uint64_t)this[143];
      if (v17 >= v9)
      {
        unint64_t v18 = (uint64_t *)(v9 + ((unint64_t)*((unsigned int *)this + 282) << 7) - 128);
        do
        {
          *unint64_t v18 = v4;
          v18 -= 16;
          uint64_t v4 = v17;
          unint64_t v17 = (unint64_t)v18;
        }
        while ((unint64_t)v18 >= v9);
        uint64_t v4 = (uint64_t)(v18 + 16);
      }
    }
    this[143] = *(pthread_mutex_t **)v4;
    ++*((_DWORD *)this + 283);
    long long v16 = 0uLL;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    goto LABEL_34;
  }
  if (a2 <= 0x200)
  {
    uint64_t v4 = (uint64_t)this[214];
    if (!v4)
    {
      uint64_t v11 = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::allocate(*((unsigned int *)this + 426), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
      unint64_t v12 = v11;
      uint64_t v22 = v11;
      uint64_t v13 = *((unsigned int *)this + 422);
      if ((*((_DWORD *)this + 423) & 0x7FFFFFFFu) <= v13)
      {
        physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>>::growAndPushBack((uint64_t)(this + 145), &v22);
      }
      else
      {
        *(&this[210]->__sig + v13) = v11;
        *((_DWORD *)this + 422) = v13 + 1;
      }
      unint64_t v19 = (uint64_t *)(v12 + ((unint64_t)*((unsigned int *)this + 424) << 9) - 512);
      uint64_t v4 = (uint64_t)this[214];
      if ((unint64_t)v19 >= v12)
      {
        do
        {
          uint64_t *v19 = v4;
          uint64_t v20 = v19 - 64;
          uint64_t v4 = (uint64_t)v19;
          unint64_t v19 = v20;
        }
        while ((unint64_t)v20 >= v12);
        uint64_t v4 = (uint64_t)(v20 + 64);
      }
    }
    this[214] = *(pthread_mutex_t **)v4;
    ++*((_DWORD *)this + 425);
    long long v16 = 0uLL;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_OWORD *)(v4 + 368) = 0u;
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 416) = 0u;
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
    *(_OWORD *)(v4 + 464) = 0u;
    *(_OWORD *)(v4 + 480) = 0u;
    *(_OWORD *)(v4 + 496) = 0u;
    goto LABEL_34;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPtrTableStorageManager.h", 60);
LABEL_35:
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    pthread_mutex_unlock(this[1]);
  }
  return v4;
}

uint64_t physx::NpPtrTableStorageManager::deallocate(uint64_t this, void **a2, unsigned int a3)
{
  uint64_t v5 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled) {
    this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 8));
  }
  if (a3 > 0x20)
  {
    if (a3 > 0x80)
    {
      if (a3 > 0x200)
      {
        if (a2) {
          this = (*(uint64_t (**)(uint64_t, void **))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
        }
                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, a2);
      }
      else if (a2)
      {
        --*(_DWORD *)(v5 + 1700);
        *a2 = *(void **)(v5 + 1712);
        *(void *)(v5 + 1712) = a2;
      }
    }
    else if (a2)
    {
      --*(_DWORD *)(v5 + 1132);
      *a2 = *(void **)(v5 + 1144);
      *(void *)(v5 + 1144) = a2;
    }
  }
  else if (a2)
  {
    --*(_DWORD *)(v5 + 564);
    *a2 = *(void **)(v5 + 576);
    *(void *)(v5 + 576) = a2;
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
  {
    unint64_t v6 = *(pthread_mutex_t **)(v5 + 8);
    return pthread_mutex_unlock(v6);
  }
  return this;
}

BOOL physx::NpPtrTableStorageManager::canReuse(physx::NpPtrTableStorageManager *this, unsigned int a2, unsigned int a3)
{
  if (a2 < 0x41) {
    int v3 = 2;
  }
  else {
    int v3 = 3;
  }
  if (a2 >= 0x11) {
    int v4 = v3;
  }
  else {
    int v4 = 1;
  }
  if (a2 < 5) {
    int v4 = 0;
  }
  if (a3 < 0x41) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (a3 < 0x11) {
    int v5 = 1;
  }
  if (a3 < 5) {
    int v5 = 0;
  }
  return a3 < 0x41 && v4 == v5;
}

void physx::NpPtrTableStorageManager::~NpPtrTableStorageManager(physx::NpPtrTableStorageManager *this)
{
  physx::NpPtrTableStorageManager::~NpPtrTableStorageManager(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

{
  uint64_t v2;
  int v3;
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  physx::NpPtrTableStorageManager *v11;
  uint64_t v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  physx::NpPtrTableStorageManager *v21;
  uint64_t v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  int v30;
  physx::NpPtrTableStorageManager *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  *(void *)this = &unk_26E72C3D0;
  if (*((_DWORD *)this + 425))
  {
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    int v2 = *((void *)this + 214);
    if (v2)
    {
      do
      {
        int32x2_t v32 = v2;
        int v3 = v34;
        if ((HIDWORD(v34) & 0x7FFFFFFFu) <= v34)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::growAndPushBack((uint64_t)&v33, &v32);
        }
        else
        {
          *(void *)&v33[8 * v34] = v2;
          LODWORD(v34) = v3 + 1;
        }
        int v2 = **((void **)this + 214);
        *((void *)this + 214) = v2;
      }
      while (v2);
      int v4 = v33;
      int v5 = v34;
      unint64_t v6 = HIDWORD(v34);
    }
    else
    {
      unint64_t v6 = 0;
      int v5 = 0;
      int v4 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>(v4, v5);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>(*((char **)this + 210), *((_DWORD *)this + 422));
    if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && v4) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
    }
  }
  uint64_t v7 = *((unsigned int *)this + 422);
  if (v7)
  {
    uint64_t v8 = (void *)*((void *)this + 210);
    unint64_t v9 = 8 * v7;
    do
    {
      if (*v8) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  uint64_t v10 = *((_DWORD *)this + 423);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0)
  {
    uint64_t v11 = (physx::NpPtrTableStorageManager *)*((void *)this + 210);
    if (v11 == (physx::NpPtrTableStorageManager *)((char *)this + 1160))
    {
      *((unsigned char *)this + 1672) = 0;
    }
    else if (v11)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  if (*((_DWORD *)this + 283))
  {
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    unint64_t v12 = *((void *)this + 143);
    if (v12)
    {
      do
      {
        int32x2_t v32 = v12;
        uint64_t v13 = v34;
        if ((HIDWORD(v34) & 0x7FFFFFFFu) <= v34)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::growAndPushBack((uint64_t)&v33, &v32);
        }
        else
        {
          *(void *)&v33[8 * v34] = v12;
          LODWORD(v34) = v13 + 1;
        }
        unint64_t v12 = **((void **)this + 143);
        *((void *)this + 143) = v12;
      }
      while (v12);
      unint64_t v14 = v33;
      uint64_t v15 = v34;
      long long v16 = HIDWORD(v34);
    }
    else
    {
      long long v16 = 0;
      uint64_t v15 = 0;
      unint64_t v14 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>(v14, v15);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>(*((char **)this + 139), *((_DWORD *)this + 280));
    if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0 && v14) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v14);
    }
  }
  unint64_t v17 = *((unsigned int *)this + 280);
  if (v17)
  {
    unint64_t v18 = (void *)*((void *)this + 139);
    unint64_t v19 = 8 * v17;
    do
    {
      if (*v18) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  uint64_t v20 = *((_DWORD *)this + 281);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0)
  {
    int32x2_t v21 = (physx::NpPtrTableStorageManager *)*((void *)this + 139);
    if (v21 == (physx::NpPtrTableStorageManager *)((char *)this + 592))
    {
      *((unsigned char *)this + 1104) = 0;
    }
    else if (v21)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  if (*((_DWORD *)this + 141))
  {
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    uint64_t v22 = *((void *)this + 72);
    if (v22)
    {
      do
      {
        int32x2_t v32 = v22;
        uint64_t v23 = v34;
        if ((HIDWORD(v34) & 0x7FFFFFFFu) <= v34)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::growAndPushBack((uint64_t)&v33, &v32);
        }
        else
        {
          *(void *)&v33[8 * v34] = v22;
          LODWORD(v34) = v23 + 1;
        }
        uint64_t v22 = **((void **)this + 72);
        *((void *)this + 72) = v22;
      }
      while (v22);
      uint64_t v24 = v33;
      unsigned int v25 = v34;
      uint64_t v26 = HIDWORD(v34);
    }
    else
    {
      uint64_t v26 = 0;
      unsigned int v25 = 0;
      uint64_t v24 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>(v24, v25);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>(*((char **)this + 68), *((_DWORD *)this + 138));
    if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0 && v24) {
      (*(void (**)(uint64_t, char *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v24);
    }
  }
  unint64_t v27 = *((unsigned int *)this + 138);
  if (v27)
  {
    unint64_t v28 = (void *)*((void *)this + 68);
    unint64_t v29 = 8 * v27;
    do
    {
      if (*v28) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  int32x2_t v30 = *((_DWORD *)this + 139);
  if ((v30 & 0x80000000) == 0 && (v30 & 0x7FFFFFFF) != 0)
  {
    int32x2_t v31 = (physx::NpPtrTableStorageManager *)*((void *)this + 68);
    if (v31 == (physx::NpPtrTableStorageManager *)((char *)this + 24))
    {
      *((unsigned char *)this + 536) = 0;
    }
    else if (v31)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 1);
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::getName("
    }
           ") [T = physx::NpPtrTableStorageManager::PtrBlock<4>]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::getName"
    }
           "() [T = physx::NpPtrTableStorageManager::PtrBlock<16>]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::getName"
    }
           "() [T = physx::NpPtrTableStorageManager::PtrBlock<64>]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      uint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v7 = (void *)result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  unint64_t v9 = &v7[v8];
  if (v8)
  {
    uint64_t v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *unint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      uint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v7 = (void *)result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  unint64_t v9 = &v7[v8];
  if (v8)
  {
    uint64_t v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *unint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      uint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      uint64_t v7 = (void *)result;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  unint64_t v9 = &v7[v8];
  if (v8)
  {
    uint64_t v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *unint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<64>>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<16>>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpPtrTableStorageManager::PtrBlock<4>>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::getName() ["
  }
         "T = physx::NpArticulationJointReducedCoordinate]";
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::getName() [T = physx::NpArticulationJoint]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  unsigned int v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::getName() [T = physx::NpArticulationLink]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::getName() [T ="
    }
           " physx::NpArticulationReducedCoordinate]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::getName() [T = physx::NpArticulation]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::getName() [T = physx::NpMaterial]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::getName() [T = physx::NpConstraint]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::getName() [T = physx::NpAggregate]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpShape>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpShape>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpShape>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpShape>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpShape>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpShape>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpShape>::getName() [T = physx::NpShape]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpShape>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpShape>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::getName() [T = physx::NpRigidStatic]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::allocate(8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::allocate(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::getName() [T = physx::NpRigidDynamic]";
    }
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v6 + 24) + 16);
    return v8(v6 + 24, v5, v7, a2, a3);
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::allocate(4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>(char *result, int a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = v38;
  char v37 = 0;
  int v2 = a2 - 1;
  if (a2 - 1 < 1) {
    return result;
  }
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v5 = result + 8;
  uint64_t v6 = v38;
  memset(v38, 0, sizeof(v38));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4) {
        goto LABEL_36;
      }
      if ((v2 - v4) <= 4) {
        break;
      }
      int v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2)) {
        ++v7;
      }
      uint64_t v8 = (uint64_t)v7 >> 1;
      unint64_t v9 = *(void *)&v3[8 * (v7 >> 1)];
      unint64_t v10 = *(void *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(void *)&v3[8 * v4] = v9;
        *(void *)&v3[8 * v8] = v10;
        unint64_t v9 = v10;
        unint64_t v10 = *(void *)&v3[8 * v4];
      }
      unint64_t v11 = *(void *)&v3[8 * v2];
      if (v11 >= v10)
      {
        unint64_t v10 = *(void *)&v3[8 * v2];
      }
      else
      {
        *(void *)&v3[8 * v4] = v11;
        *(void *)&v3[8 * v2] = v10;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(void *)&v3[8 * v8] = v10;
        *(void *)&v3[8 * v2] = v9;
        unint64_t v9 = *(void *)&v3[8 * v8];
      }
      uint64_t v12 = v2 - 1;
      *(void *)&v3[8 * v8] = *(void *)&v3[8 * v12];
      *(void *)&v3[8 * v12] = v9;
      int v13 = v4;
      int v14 = v2 - 1;
      while (1)
      {
        uint64_t v15 = &v3[8 * v13];
        do
        {
          unint64_t v17 = *((void *)v15 + 1);
          v15 += 8;
          unint64_t v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        unint64_t v18 = &v3[8 * v14];
        do
        {
          unint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          unint64_t v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14) {
          break;
        }
        *(void *)uint64_t v15 = v19;
        *(void *)unint64_t v18 = v16;
        unint64_t v9 = *(void *)&v3[8 * v12];
      }
      *(void *)uint64_t v15 = v9;
      *(void *)&v3[8 * v12] = v16;
      unsigned int v21 = v35;
      unsigned int v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        uint64_t v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        int v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          uint64_t result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::grow((uint64_t)v34);
          unsigned int v21 = v35;
          uint64_t v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        uint64_t v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        int v4 = v13 + 1;
      }
    }
    uint64_t v25 = v4;
    int v26 = v4 + 1;
    unint64_t v27 = &v5[8 * v4];
    do
    {
      uint64_t v28 = 0;
      uint64_t v29 = v25++;
      int v30 = v29;
      do
      {
        if (*(void *)&v27[8 * v28] < *(void *)&v3[8 * v30]) {
          int v30 = v26 + v28;
        }
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != v29)
      {
        uint64_t v31 = *(void *)&v3[8 * v30];
        *(void *)&v3[8 * v30] = *(void *)&v3[8 * v29];
        *(void *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    int v32 = v35;
    if (!v35) {
      break;
    }
    LODWORD(v35) = v35 - 1;
    int v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    int v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37) {
    BOOL v33 = v6 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33) {
    return (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (void *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  uint64_t v8 = &v6[v7];
  if (v7)
  {
    unint64_t v9 = *(uint64_t **)v3;
    unint64_t v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *uint64_t v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::getName() [T = physx::NpConnectorArray]";
  }
  else {
    uint64_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::grow(uint64_t a1)
{
  unsigned int v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  uint64_t v3 = (void *)physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::allocate(a1, 4 * v2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  uint64_t result = memcpy(v3, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(unsigned char *)(a1 + 24) && *(void *)(a1 + 16)) {
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 16) = v3;
  return result;
}

physx::Gu::ConvexMesh *physx::NpPhysicsInsertionCallback::buildObjectFromData(int a1, int a2, physx::Gu::TriangleMeshData *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 - 3) > 1)
  {
    switch(a2)
    {
      case 1:
        uint64_t v11 = (physx::GuMeshFactory *)physx::NpFactory::mInstance;
        return physx::GuMeshFactory::createHeightField(v11, (uint64_t)a3);
      case 17:
        uint64_t v12 = physx::NpFactory::mInstance;
        return (physx::Gu::ConvexMesh *)physx::GuMeshFactory::createBVHStructure(v12, (uint64_t)a3);
      case 2:
        uint64_t v10 = physx::NpFactory::mInstance;
        return physx::GuMeshFactory::createConvexMesh(v10, (uint64_t)a3);
      default:
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpPhysicsInsertionCallback.h", 62, "Inserting object failed: Object type not supported for buildObjectFromData.", a6, a7, a8, vars0);
        return 0;
    }
  }
  else
  {
    uint64_t v8 = (physx::GuMeshFactory *)physx::NpFactory::mInstance;
    return physx::GuMeshFactory::createTriangleMesh(v8, a3);
  }
}

void physx::NpPhysicsInsertionCallback::~NpPhysicsInsertionCallback(physx::NpPhysicsInsertionCallback *this)
{
}

void physx::NpPhysics::MeshDeletionListener::~MeshDeletionListener(physx::NpPhysics::MeshDeletionListener *this)
{
}

uint64_t physx::NpPhysics::MeshDeletionListener::onGuMeshFactoryBufferRelease(physx::NpPhysics::MeshDeletionListener *this, const physx::PxBase *a2)
{
  return physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)a2, 0, 2);
}

void physx::NpMaterialManager::resize(physx::NpMaterialManager *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  int v3 = 2 * v2;
  if ((2 * v2) >= 0xFFFF) {
    int v3 = 0xFFFF;
  }
  *((_DWORD *)this + 8) = v3;
  if (v3)
  {
    int v4 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, (8 * v3), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpMaterialManager.h", 126);
    size_t v5 = (8 * *((_DWORD *)this + 8));
  }
  else
  {
    size_t v5 = 0;
    int v4 = 0;
  }
  bzero(v4, v5);
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      *(void *)&v4[v6] = *(void *)(*((void *)this + 3) + v6);
      v6 += 8;
    }
    while (8 * v2 != v6);
  }
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 3) = v4;
}

void *physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 44);
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  unsigned int v10 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v11 = 4 * v3;
  uint64_t v12 = ((-4 * (v3 + v10)) & 0xC) + 4 * (v3 + v10);
  if (v12 + 8 * v10) {
    int v13 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v12 + 8 * v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    int v13 = 0;
  }
  int v14 = &v13[v11];
  uint64_t v15 = &v13[v12];
  uint64_t result = memset(v13, 255, 4 * v3);
  if (v8 == -1)
  {
    if (*(_DWORD *)(a1 + 52))
    {
      unint64_t v24 = 0;
      do
      {
        uint64_t v25 = *(void *)(*(void *)(a1 + 8) + 8 * v24);
        unint64_t v26 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
        unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
        LODWORD(v28) = (v3 - 1) & ((v28 >> 31) ^ v28);
        *(_DWORD *)&v14[4 * v24] = *(_DWORD *)&v13[4 * v28];
        *(_DWORD *)&v13[4 * v28] = v24;
        *(void *)&v15[8 * v24++] = v25;
      }
      while (v24 < *(unsigned int *)(a1 + 52));
    }
  }
  else
  {
    uint64_t result = memcpy(&v13[v11], *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 32)));
    unint64_t v17 = *(unsigned int *)(a1 + 36);
    if (v17)
    {
      for (unint64_t i = 0; i < v17; ++i)
      {
        uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * i);
        if (v19 != -1)
        {
          do
          {
            uint64_t v20 = *(void *)(*(void *)(a1 + 8) + 8 * v19);
            unint64_t v21 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
            unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
            unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
            LODWORD(v23) = (v3 - 1) & ((v23 >> 31) ^ v23);
            *(_DWORD *)&v14[4 * v19] = *(_DWORD *)&v13[4 * v23];
            *(_DWORD *)&v13[4 * v23] = v19;
            *(void *)&v15[8 * v19] = v20;
            uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 16) + 4 * v19);
          }
          while (v19 != -1);
          unint64_t v17 = *(unsigned int *)(a1 + 36);
        }
      }
    }
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v13;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v15;
  uint64_t v29 = v10 - 1;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v3;
  if (v29 > v9)
  {
    uint64_t v30 = v9;
    do
    {
      *(_DWORD *)&v14[4 * v30] = v30 + 1;
      ++v30;
    }
    while (v29 != v30);
  }
  *(_DWORD *)&v14[4 * v29] = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v9;
  return result;
}

uint64_t *physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT(uint64_t *a1)
{
  uint64_t v2 = physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>::allocate((uint64_t)a1, 120, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSync.h", 95);
  *a1 = v2;
  pthread_mutex_init((pthread_mutex_t *)v2, 0);
  pthread_cond_init((pthread_cond_t *)(v2 + 64), 0);
  *(unsigned char *)(v2 + 116) = 0;
  *(_DWORD *)(v2 + 112) = 0;
  return a1;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>::getName() [T = physx::shdfnd::SyncImpl]";
  }
  else {
    int v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

pthread_mutex_t **physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT(pthread_mutex_t **a1)
{
  uint64_t v2 = *a1;
  pthread_cond_destroy((pthread_cond_t *)&(*a1)[1]);
  pthread_mutex_destroy(v2);
  if (*a1) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return a1;
}

BOOL PxOverflowBuffer<physx::PxRaycastHit>::processTouches(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 176);
  if (!*(unsigned char *)(a1 + 176))
  {
    *(void *)(a1 + 168) = *(void *)(a1 + 80);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 92);
    *(unsigned char *)(a1 + 176) = 1;
    *(void *)(a1 + 80) = a1 + 104;
    *(_DWORD *)(a1 + 88) = 1;
  }
  return v1 == 0;
}

uint64_t PxOverflowBuffer<physx::PxRaycastHit>::finalizeQuery(uint64_t result)
{
  if (*(unsigned char *)(result + 176))
  {
    *(unsigned char *)(result + 96) = *(_DWORD *)(result + 92) != 0;
    *(_DWORD *)(result + 92) = *(_DWORD *)(result + 100);
    *(void *)(result + 80) = *(void *)(result + 168);
  }
  return result;
}

void PxOverflowBuffer<physx::PxRaycastHit>::~PxOverflowBuffer()
{
}

BOOL PxOverflowBuffer<physx::PxOverlapHit>::processTouches(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 96);
  if (!*(unsigned char *)(a1 + 96))
  {
    *(void *)(a1 + 88) = *(void *)(a1 + 40);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 52);
    *(unsigned char *)(a1 + 96) = 1;
    *(void *)(a1 + 40) = a1 + 64;
    *(_DWORD *)(a1 + 48) = 1;
  }
  return v1 == 0;
}

uint64_t PxOverflowBuffer<physx::PxOverlapHit>::finalizeQuery(uint64_t result)
{
  if (*(unsigned char *)(result + 96))
  {
    *(unsigned char *)(result + 56) = *(_DWORD *)(result + 52) != 0;
    *(_DWORD *)(result + 52) = *(_DWORD *)(result + 60);
    *(void *)(result + 40) = *(void *)(result + 88);
  }
  return result;
}

void PxOverflowBuffer<physx::PxOverlapHit>::~PxOverflowBuffer()
{
}

BOOL PxOverflowBuffer<physx::PxSweepHit>::processTouches(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 160);
  if (!*(unsigned char *)(a1 + 160))
  {
    *(void *)(a1 + 152) = *(void *)(a1 + 72);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 84);
    *(unsigned char *)(a1 + 160) = 1;
    *(void *)(a1 + 72) = a1 + 96;
    *(_DWORD *)(a1 + 80) = 1;
  }
  return v1 == 0;
}

uint64_t PxOverflowBuffer<physx::PxSweepHit>::finalizeQuery(uint64_t result)
{
  if (*(unsigned char *)(result + 160))
  {
    *(unsigned char *)(result + 88) = *(_DWORD *)(result + 84) != 0;
    *(_DWORD *)(result + 84) = *(_DWORD *)(result + 92);
    *(void *)(result + 72) = *(void *)(result + 152);
  }
  return result;
}

void PxOverflowBuffer<physx::PxSweepHit>::~PxOverflowBuffer()
{
}

uint64_t physx::shdfnd::Array<physx::PxAggregate *,physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  unsigned int v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    int v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    unsigned int v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>::getName() [T = physx::PxAggregate *]";
  }
  else {
    int v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxAggregate *,physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxAggregate *>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unsigned int v6 = (void *)result;
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  int v8 = &v6[v7];
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)v3;
    unsigned int v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *int v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxConstraint *,physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  unsigned int v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    int v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    unsigned int v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>::getName() [T = physx::PxConstraint *]";
  }
  else {
    int v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxConstraint *,physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxConstraint *>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unsigned int v6 = (void *)result;
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  int v8 = &v6[v7];
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)v3;
    unsigned int v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *int v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxArticulationBase *,physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>::allocate(result, 8 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (void *)result;
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 8);
  unsigned int v6 = *(uint64_t **)v3;
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    int v8 = v4;
    do
    {
      uint64_t v9 = *v6++;
      *v8++ = v9;
    }
    while ((unint64_t)v8 < v7);
    unsigned int v6 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v6) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)uint64_t v3 = v4;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    int v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>::getName() [T = physx::PxArt"
  }
         "iculationBase *]";
  else {
    int v8 = "<allocation names disabled>";
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::PxArticulationBase *,physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<physx::PxArticulationBase *>::allocate(result, 8 * v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    unsigned int v6 = (void *)result;
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  int v8 = &v6[v7];
  if (v7)
  {
    uint64_t v9 = *(uint64_t **)v3;
    unsigned int v10 = v6;
    do
    {
      uint64_t v11 = *v9++;
      *v10++ = v11;
    }
    while (v10 < v8);
  }
  *int v8 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    LODWORD(v7) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 8) = v7 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::PxActor *,physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::internal::HashSetBase<physx::PxActor *,physx::shdfnd::Hash<physx::PxActor *>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::create(int32x2_t *a1, void *a2, unsigned char *a3, int8x8_t a4)
{
  unsigned int v6 = a1[4].u32[1];
  if (!v6)
  {
    unsigned int v10 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = ~(*a2 << 32) + *a2;
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  unsigned int v10 = (v6 - 1) & ((v9 >> 31) ^ v9);
  uint64_t v11 = *(unsigned int *)(*(void *)&a1[3] + 4 * v10);
  if (v11 == -1)
  {
LABEL_8:
    *a3 = 0;
    unsigned int v13 = a1[5].u32[1];
    if (v13 == -1)
    {
      if (v6) {
        unsigned int v14 = 2 * v6;
      }
      else {
        unsigned int v14 = 16;
      }
      if (v6 >= v14)
      {
        unsigned int v13 = -1;
      }
      else
      {
        physx::shdfnd::internal::HashBase<physx::PxBase const*,physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::internal::HashSetBase<physx::PxBase const*,physx::shdfnd::Hash<physx::PxBase const*>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal((uint64_t)a1, v14, a4);
        unsigned int v6 = a1[4].u32[1];
        unsigned int v13 = a1[5].u32[1];
      }
      unint64_t v16 = ~(*a2 << 32) + *a2;
      unint64_t v17 = 9
          * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
      unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      unsigned int v10 = (v6 - 1) & ((v18 >> 31) ^ v18);
    }
    int32x2_t v20 = a1[1];
    int32x2_t v19 = a1[2];
    a1[5].i32[1] = *(_DWORD *)(*(void *)&v19 + 4 * v13);
    int32x2_t v21 = a1[3];
    *(_DWORD *)(*(void *)&v19 + 4 * v13) = *(_DWORD *)(*(void *)&v21 + 4 * v10);
    *(_DWORD *)(*(void *)&v21 + 4 * v10) = v13;
    a1[6] = vadd_s32(a1[6], (int32x2_t)0x100000001);
    return *(void *)&v20 + 8 * v13;
  }
  int32x2_t v12 = a1[1];
  while (*(void *)(*(void *)&v12 + 8 * v11) != *a2)
  {
    uint64_t v11 = *(unsigned int *)(*(void *)&a1[2] + 4 * v11);
    if (v11 == -1) {
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)&v12 + 8 * v11;
  *a3 = 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulation>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulation>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  unint64_t v9 = &v7[v8];
  if (v8)
  {
    unsigned int v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *unint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulationReducedCoordinate>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  unint64_t v9 = &v7[v8];
  if (v8)
  {
    unsigned int v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *unint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulationLink>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  unint64_t v9 = &v7[v8];
  if (v8)
  {
    unsigned int v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *unint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::NpArticulationJoint,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  int v5 = (void *)(v3 + 440 * *(unsigned int *)(a1 + 544) - 440);
  if ((unint64_t)v5 >= v3)
  {
    unsigned int v6 = *(void **)(a1 + 560);
    do
    {
      *int v5 = v6;
      unint64_t v7 = v5 - 55;
      unsigned int v6 = v5;
      int v5 = v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 55;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::NpArticulationJoint>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unsigned int v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::PoolBase<physx::NpArticulationJointReducedCoordinate,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  int v5 = (void *)(v3 + 440 * *(unsigned int *)(a1 + 544) - 440);
  if ((unint64_t)v5 >= v3)
  {
    uint64_t v6 = *(void **)(a1 + 560);
    do
    {
      *int v5 = v6;
      unint64_t v7 = v5 - 55;
      uint64_t v6 = v5;
      int v5 = v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 55;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::NpArticulationJointReducedCoordinate>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unsigned int v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpConstraint>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpConstraint>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    unsigned int v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *uint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpAggregate>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpAggregate>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    unsigned int v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *uint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpMaterial>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpMaterial>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    unsigned int v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *uint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::NpConnectorArray,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>::allocateSlab(uint64_t a1)
{
  uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::allocate(a1, *(unsigned int *)(a1 + 552), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
  unint64_t v3 = result;
  uint64_t v8 = result;
  uint64_t v4 = *(unsigned int *)(a1 + 536);
  if ((*(_DWORD *)(a1 + 540) & 0x7FFFFFFFu) <= v4)
  {
    uint64_t result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>>::growAndPushBack(a1 + 8, &v8);
  }
  else
  {
    *(void *)(*(void *)(a1 + 528) + 8 * v4) = result;
    *(_DWORD *)(a1 + 536) = v4 + 1;
  }
  unint64_t v5 = v3 + 88 * *(unsigned int *)(a1 + 544) - 88;
  if (v5 >= v3)
  {
    unint64_t v6 = *(void *)(a1 + 560);
    unint64_t v7 = (unint64_t *)(v3 + 88 * *(unsigned int *)(a1 + 544) - 88);
    do
    {
      *unint64_t v7 = v6;
      v7 -= 11;
      unint64_t v6 = v5;
      unint64_t v5 = (unint64_t)v7;
    }
    while ((unint64_t)v7 >= v3);
    *(void *)(a1 + 560) = v7 + 11;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>>>::growAndPushBack(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (8 * v5);
    if (v6 <= 0x200 && *(unsigned char *)(a1 + 512) == 0)
    {
      *(unsigned char *)(a1 + 512) = 1;
      uint64_t v8 = a1;
    }
    else
    {
      uint64_t v8 = physx::shdfnd::ReflectionAllocator<physx::NpConnectorArray>::allocate(a1, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 528);
  unsigned int v10 = (void *)(v8 + 8 * v9);
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 520);
    uint64_t v12 = (void *)v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *unsigned int v10 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 520);
    if (v14 == a1)
    {
      *(unsigned char *)(a1 + 512) = 0;
    }
    else if (v14)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      uint64_t v9 = *(unsigned int *)(a1 + 528);
    }
  }
  *(void *)(a1 + 520) = v8;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v9 + 1;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<unsigned short,physx::shdfnd::InlineAllocator<8u,physx::shdfnd::ReflectionAllocator<unsigned short>>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2 > 4 || *(unsigned char *)(result + 8))
  {
    uint64_t result = physx::shdfnd::ReflectionAllocator<unsigned short>::allocate(result, 2 * a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v4 = (_WORD *)result;
  }
  else
  {
    *(unsigned char *)(result + 8) = 1;
    int v4 = (_WORD *)result;
  }
  uint64_t v5 = *(unsigned int *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 16);
  if (v5)
  {
    unint64_t v7 = (unint64_t)&v4[v5];
    uint64_t v8 = *(__int16 **)(v3 + 16);
    uint64_t v9 = v4;
    do
    {
      __int16 v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*(_DWORD *)(v3 + 28) & 0x80000000) == 0)
  {
    if (v6 == v3)
    {
      *(unsigned char *)(v3 + 8) = 0;
    }
    else if (v6)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 28) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpShape>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpShape>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    __int16 v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *uint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpRigidStatic>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    __int16 v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *uint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 532);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t result = (8 * v5);
    if (result <= 0x200 && *(unsigned char *)(v3 + 512) == 0)
    {
      *(unsigned char *)(v3 + 512) = 1;
      unint64_t v7 = (void *)v3;
    }
    else
    {
      uint64_t result = physx::shdfnd::ReflectionAllocator<physx::NpRigidDynamic>::allocate(result, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unint64_t v7 = (void *)result;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = *(unsigned int *)(v3 + 528);
  uint64_t v9 = &v7[v8];
  if (v8)
  {
    __int16 v10 = *(uint64_t **)(v3 + 520);
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *v10++;
      *v11++ = v12;
    }
    while (v11 < v9);
  }
  *uint64_t v9 = *a2;
  if ((*(_DWORD *)(v3 + 532) & 0x80000000) == 0)
  {
    uint64_t v13 = *(void *)(v3 + 520);
    if (v13 == v3)
    {
      *(unsigned char *)(v3 + 512) = 0;
    }
    else if (v13)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
      LODWORD(v8) = *(_DWORD *)(v3 + 528);
    }
  }
  *(void *)(v3 + 520) = v7;
  *(_DWORD *)(v3 + 532) = v5;
  *(_DWORD *)(v3 + 528) = v8 + 1;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::PxDeletionListener * const,physx::NpPhysics::NpDelListenerEntry *>,physx::PxDeletionListener *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::internal::HashMapBase<physx::PxDeletionListener *,physx::NpPhysics::NpDelListenerEntry *,physx::shdfnd::Hash<physx::PxDeletionListener *>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = a2;
  a3.i32[0] = a2;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    unsigned int v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    unsigned int v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    unsigned int v3 = (v7 | HIWORD(v7)) + 1;
  }
  int v8 = *(_DWORD *)(a1 + 32);
  unsigned int v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  uint64_t v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if (v10 + 16 * v9) {
    uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[4 * v3];
  uint64_t v13 = &v11[v10];
  uint64_t result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    unint64_t v15 = 0;
    uint64_t v16 = *(void *)(a1 + 8);
    do
    {
      long long v17 = *(_OWORD *)(v16 + 16 * v15);
      *(_OWORD *)&v13[16 * v15] = v17;
      uint64_t v18 = (~((void)v17 << 32) + v17) ^ ((~((void)v17 << 32) + (void)v17) >> 22);
      unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
      unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      LODWORD(v20) = (v3 - 1) & ((v20 >> 31) ^ v20);
      *(_DWORD *)&v12[4 * v15] = *(_DWORD *)&v11[4 * v20];
      *(_DWORD *)&v11[4 * v20] = v15++;
    }
    while (v15 < *(unsigned int *)(a1 + 52));
  }
  if (*(void *)a1) {
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1) {
    *(_DWORD *)(a1 + 44) = v8;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::NpScene *,physx::shdfnd::ReflectionAllocator<physx::NpScene *>>::growAndPushBack(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      unsigned int v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpScene *>::getName() [T = physx::NpScene *]";
    }
    else {
      unsigned int v7 = "<allocation names disabled>";
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    int v8 = (void *)result;
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 8);
  uint64_t v10 = &v8[v9];
  if (v9)
  {
    uint64_t v11 = *(uint64_t **)v3;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *uint64_t v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(void *)v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(void *)uint64_t v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::NpRigidBodyTemplate(uint64_t a1, __int16 a2, __int16 *a3, int a4, uint64_t a5)
{
  __int16 v6 = *a3;
  *(_WORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 10) = v6;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0x10000;
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26E72D5A0;
  *(void *)(a1 + 96) = 0;
  uint64_t v7 = a1 + 96;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  physx::Sc::BodyCore::BodyCore(a1 + 128, a4, a5);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a1 + 104) & 0xF0FFFFFF | 0x3000000;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a1 + 160);
  *(void *)&long long v8 = *(void *)(a1 + 164);
  *((void *)&v8 + 1) = *(void *)(a1 + 208);
  *(_OWORD *)(v7 + 244) = v8;
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a1 + 216);
  *(void *)(a1 + 360) = *(void *)(a1 + 224);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a1 + 284);
  *(void *)(a1 + 376) = 1;
  return a1;
}

void physx::NpRigidDynamic::~NpRigidDynamic(physx::PxActor *this)
{
  *(void *)this = &unk_26E72D5A0;
  physx::NpRigidActorTemplate<physx::PxRigidDynamic>::~NpRigidActorTemplate(this);
}

void physx::NpRigidDynamic::~NpRigidDynamic(physx::NpRigidDynamic *this)
{
  *(void *)this = &unk_26E72D5A0;
  physx::NpRigidActorTemplate<physx::PxRigidDynamic>::~NpRigidActorTemplate(this);
  int v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::requiresObjects(uint64_t result, uint64_t a2)
{
  if (*(_WORD *)(result + 48))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    unsigned int v5 = (void *)(result + 40);
    uint64_t v6 = 8 * *(unsigned __int16 *)(result + 48);
    do
    {
      uint64_t v7 = v5;
      if (*(_WORD *)(v3 + 48) != 1) {
        uint64_t v7 = (void *)*v5;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, v7[v4 / 8]);
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t physx::NpRigidDynamic::release(physx::NpRigidDynamic *this)
{
  uint64_t v2 = (physx::NpRigidDynamic *)((char *)this + 96);
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, *((void *)this + 2), 1);
  unint64_t v4 = *((unsigned int *)this + 26);
  if ((v4 >> 30) - 1 > 1) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = *(int32x2_t **)v2;
  }
  char v6 = *((unsigned char *)v2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v4 >> 24) & 0xF) + 3) + 12);
  if (v5 && (*((unsigned char *)v2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v4 >> 24) & 0xF) + 3) + 12) & 8) != 0)
  {
    physx::NpShapeManager::clearShapesOnRelease((uint64_t)this + 40, (uint64_t)v5);
    physx::NpRigidActorTemplate<physx::PxRigidDynamic>::release(this, v7);
  }
  else
  {
    physx::NpRigidActorTemplate<physx::PxRigidDynamic>::release(this, v3);
    if (!v5) {
      goto LABEL_9;
    }
  }
  physx::Scb::Scene::removeActor(v5, v2, 1, (v6 & 8) != 0, v8);
  unsigned int v10 = *((_DWORD *)this + 22);
  physx::NpScene::removeFromRigidActorList((uint64_t)&v5[-2], &v10);
LABEL_9:
  return physx::Scb::Base::destroy((uint64_t)v2);
}

void *physx::NpRigidDynamic::setGlobalPose(uint64_t a1, float *a2, int a3, double a4)
{
  uint64_t v6 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  if (((*(_DWORD *)(v6 + 8) >> 30) - 1) > 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)v6;
    if (v7) {
      uint64_t v8 = v7 - 16;
    }
    else {
      uint64_t v8 = 0;
    }
  }
  float v9 = a2[1];
  float v10 = a2[2];
  float v11 = a2[3];
  float v12 = sqrtf((float)((float)((float)(v9 * v9) + (float)(*a2 * *a2)) + (float)(v10 * v10)) + (float)(v11 * v11));
  float v13 = *a2 / v12;
  float v14 = v9 / v12;
  float v15 = v10 / v12;
  float v16 = v11 / v12;
  uint64_t v17 = a1 + 96;
  int v18 = *(_DWORD *)(a1 + 380);
  if ((v18 & 0x400) != 0) {
    unint64_t v19 = (float *)(*(void *)(a1 + 112) + 224);
  }
  else {
    unint64_t v19 = (float *)(a1 + 176);
  }
  float v20 = v19[4] + v19[4];
  float v21 = v19[5] + v19[5];
  float v22 = v19[6] + v19[6];
  float v23 = (float)(v16 * v16) + -0.5;
  float v24 = (float)((float)(v14 * v21) + (float)(v13 * v20)) + (float)(v15 * v22);
  float v25 = a2[4]
      + (float)((float)((float)(v16 * (float)((float)(v14 * v22) - (float)(v15 * v21))) + (float)(v20 * v23))
              + (float)(v13 * v24));
  float v26 = a2[5]
      + (float)((float)((float)(v16 * (float)((float)(v15 * v20) - (float)(v13 * v22))) + (float)(v21 * v23))
              + (float)(v14 * v24));
  float v27 = a2[6]
      + (float)((float)((float)(v16 * (float)((float)(v13 * v21) - (float)(v14 * v20))) + (float)(v22 * v23))
              + (float)(v15 * v24));
  float v29 = v19[2];
  float v28 = v19[3];
  float v30 = v19[1];
  float v31 = (float)((float)((float)(v13 * v28) + (float)(v16 * *v19)) + (float)(v14 * v29)) - (float)(v30 * v15);
  float v32 = (float)((float)((float)(v14 * v28) + (float)(v16 * v30)) + (float)(v15 * *v19)) - (float)(v29 * v13);
  float v33 = (float)((float)((float)(v15 * v28) + (float)(v16 * v29)) + (float)(v13 * v30)) - (float)(*v19 * v14);
  float v34 = (float)((float)(v16 * v28) - (float)(v13 * *v19)) - (float)(v14 * v30);
  *(float *)uint64_t v46 = v31;
  *(float *)&v46[1] = v32;
  *(float *)&a4 = v34 - (float)(v15 * v29);
  *(float *)&v46[2] = v33;
  v46[3] = LODWORD(a4);
  *(float *)&v46[4] = v25;
  *(float *)&v46[5] = v26;
  *(float *)&v46[6] = v27;
  *(float *)(a1 + 320) = v31;
  *(float *)(a1 + 324) = v32;
  *(float *)(a1 + 328) = v33;
  *(_DWORD *)(a1 + 332) = LODWORD(a4);
  *(float *)(a1 + 336) = v25;
  *(float *)(a1 + 340) = v26;
  *(float *)(a1 + 344) = v27;
  int v35 = *(_DWORD *)(a1 + 104) >> 30;
  if (v35 == 2)
  {
    uint64_t v36 = *(void **)v17;
    if (*(unsigned char *)(*(void *)v17 + 7689))
    {
LABEL_13:
      *(_DWORD *)(a1 + 380) = v18 & 0xFFDFFFFF;
      uint64_t result = physx::Scb::Scene::scheduleForUpdate(v36, a1 + 96, *(int8x8_t *)&a4);
      *(_DWORD *)(a1 + 380) |= 0x100000u;
      if (!v8) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  else if (v35 == 3)
  {
    uint64_t v36 = *(void **)v17;
    goto LABEL_13;
  }
  uint64_t result = (void *)physx::Sc::BodyCore::setBody2World(a1 + 128, (uint64_t)v46);
  if (v8)
  {
LABEL_14:
    uint64_t result = (void *)physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v8 + 8640, (_WORD *)a1);
    ++*(_DWORD *)(v8 + 8732);
  }
LABEL_15:
  if (*(void *)(a1 + 80))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidDynamic.cpp", 102, "PxRigidDynamic::setGlobalPose: Actor is part of a pruning structure, pruning structure is now invalid!", v38, v39, v40, v45);
    uint64_t result = (void *)physx::Sq::PruningStructure::invalidate(*(void *)(a1 + 80), a1);
  }
  if (v8 && a3)
  {
    unint64_t v42 = *(unsigned int *)(a1 + 104);
    uint64_t v43 = (v42 & 1) != 0
        ? *(unsigned char **)(a1 + 112)
        : (unsigned char *)(*((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v42 >> 24) & 0xF) + 3) + v17 + 12);
    if ((*v43 & 8) == 0)
    {
      uint64_t v44 = (unsigned char *)((*(unsigned char *)(a1 + 381) & 0x40) != 0 ? *(void *)(a1 + 112) + 348 : a1 + 172);
      if ((*v44 & 1) == 0)
      {
        return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest((void *)a1, (physx::Scb::Body *)(a1 + 96), 0, 1, v41);
      }
    }
  }
  return result;
}

uint64_t physx::NpRigidDynamic::setKinematicTarget(uint64_t a1, float *a2)
{
  float v3 = a2[1];
  float v4 = a2[2];
  float v5 = a2[3];
  float v6 = sqrtf((float)((float)((float)(v3 * v3) + (float)(*a2 * *a2)) + (float)(v4 * v4)) + (float)(v5 * v5));
  float v7 = *a2 / v6;
  float v8 = v3 / v6;
  float v9 = v4 / v6;
  float v10 = v5 / v6;
  float v11 = a2[6];
  uint64_t v12 = a1 + 96;
  if ((*(unsigned char *)(a1 + 381) & 4) != 0) {
    float v13 = (float *)(*(void *)(a1 + 112) + 224);
  }
  else {
    float v13 = (float *)(a1 + 176);
  }
  float v14 = v13[4] + v13[4];
  float v15 = v13[5] + v13[5];
  float v16 = v13[6] + v13[6];
  float v17 = (float)(v10 * v10) + -0.5;
  float v18 = (float)((float)(v8 * v15) + (float)(v7 * v14)) + (float)(v9 * v16);
  float v19 = (float)((float)(v10 * (float)((float)(v8 * v16) - (float)(v9 * v15))) + (float)(v14 * v17)) + (float)(v7 * v18);
  float v20 = (float)((float)(v10 * (float)((float)(v9 * v14) - (float)(v7 * v16))) + (float)(v15 * v17)) + (float)(v8 * v18);
  float v21 = (float)((float)(v10 * (float)((float)(v7 * v15) - (float)(v8 * v14))) + (float)(v16 * v17)) + (float)(v9 * v18);
  float v22 = a2[4] + v19;
  float v23 = a2[5] + v20;
  float v25 = v13[2];
  float v24 = v13[3];
  float v26 = v13[1];
  float v27 = (float)((float)((float)(v8 * v24) + (float)(v10 * v26)) + (float)(v9 * *v13)) - (float)(v25 * v7);
  float v28 = (float)((float)((float)(v9 * v24) + (float)(v10 * v25)) + (float)(v7 * v26)) - (float)(*v13 * v8);
  float v29 = (float)((float)((float)(v7 * v24) + (float)(v10 * *v13)) + (float)(v8 * v25)) - (float)(v26 * v9);
  float v30 = (float)((float)((float)(v10 * v24) - (float)(v7 * *v13)) - (float)(v8 * v26)) - (float)(v9 * v25);
  *(float *)uint64_t v36 = v29;
  *(float *)&v36[1] = v27;
  *(float *)&v36[2] = v28;
  *(float *)&v36[3] = v30;
  *(float *)&v36[4] = v22;
  *(float *)&v36[5] = v23;
  *(float *)&v36[6] = v11 + v21;
  uint64_t result = physx::Scb::Body::setKinematicTarget(v12, (uint64_t)v36);
  float v32 = (uint64_t *)(a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18));
  if (((*((_DWORD *)v32 + 2) >> 30) - 1) > 1)
  {
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v33 = *v32;
    if (v33) {
      uint64_t v34 = v33 - 16;
    }
    else {
      uint64_t v34 = 0;
    }
  }
  if ((*(unsigned char *)(a1 + 381) & 0x40) != 0) {
    int v35 = (unsigned char *)(*(void *)(a1 + 112) + 348);
  }
  else {
    int v35 = (unsigned char *)(a1 + 172);
  }
  if ((*v35 & 2) != 0)
  {
    if (v34)
    {
      uint64_t result = physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v34 + 8640, (_WORD *)a1);
      ++*(_DWORD *)(v34 + 8732);
    }
  }
  return result;
}

uint64_t physx::NpRigidDynamic::getKinematicTarget(uint64_t a1, float *a2)
{
  int v2 = *(_DWORD *)(a1 + 380);
  if ((v2 & 0x4000) != 0) {
    float v3 = (unsigned char *)(*(void *)(a1 + 112) + 348);
  }
  else {
    float v3 = (unsigned char *)(a1 + 172);
  }
  if ((*v3 & 1) == 0) {
    return 0;
  }
  if ((v2 & 0x8000) != 0)
  {
    uint64_t v12 = *(float **)(a1 + 112);
    float v5 = v12 + 68;
    float v6 = v12 + 69;
    float v7 = v12 + 70;
    float v8 = v12 + 71;
    float v9 = v12 + 72;
    float v10 = v12 + 73;
    float v11 = v12 + 74;
  }
  else
  {
    if (*(_DWORD *)(a1 + 104) >> 30 == 3) {
      return 0;
    }
    float v5 = *(float **)(a1 + 304);
    if (!v5 || *((unsigned char *)v5 + 31) != 1 || !*((unsigned char *)v5 + 28)) {
      return 0;
    }
    float v6 = v5 + 1;
    float v7 = v5 + 2;
    float v8 = v5 + 3;
    float v9 = v5 + 4;
    float v10 = v5 + 5;
    float v11 = v5 + 6;
  }
  float v13 = *v5;
  float v14 = *v6;
  float v15 = *v7;
  float v16 = *v8;
  float v17 = *v10;
  float v18 = *v11;
  if ((v2 & 0x400) != 0) {
    float v19 = (float *)(*(void *)(a1 + 112) + 224);
  }
  else {
    float v19 = (float *)(a1 + 176);
  }
  float v20 = v19[4] * -2.0;
  float v21 = v19[5] * -2.0;
  float v22 = v19[6] * -2.0;
  float v24 = v19[2];
  float v23 = v19[3];
  float v25 = (float)(v23 * v23) + -0.5;
  float v26 = v19[1];
  float v27 = (float)((float)(v21 * v26) + (float)(*v19 * v20)) + (float)(v24 * v22);
  float v28 = (float)((float)(v20 * v25) - (float)((float)((float)(v26 * v22) - (float)(v24 * v21)) * v23))
      + (float)(*v19 * v27);
  float v29 = (float)((float)(v21 * v25) - (float)((float)((float)(v24 * v20) - (float)(*v19 * v22)) * v23))
      + (float)(v26 * v27);
  float v30 = (float)((float)(v22 * v25) - (float)((float)((float)(*v19 * v21) - (float)(v26 * v20)) * v23))
      + (float)(v24 * v27);
  float v31 = v28 + v28;
  float v32 = v30 + v30;
  float v33 = (float)(v16 * v16) + -0.5;
  float v34 = (float)((float)(v14 * (float)(v29 + v29)) + (float)(v13 * (float)(v28 + v28))) + (float)(v15 * v32);
  float v35 = (float)((float)(v16 * (float)((float)(v14 * v32) - (float)(v15 * (float)(v29 + v29))))
              + (float)((float)(v28 + v28) * v33))
      + (float)(v13 * v34);
  float v36 = (float)((float)(v16 * (float)((float)(v15 * (float)(v28 + v28)) - (float)(v13 * v32)))
              + (float)((float)(v29 + v29) * v33))
      + (float)(v14 * v34);
  float v37 = (float)((float)(v16 * (float)((float)(v13 * (float)(v29 + v29)) - (float)(v14 * v31))) + (float)(v32 * v33))
      + (float)(v15 * v34);
  float v38 = *v9 + v35;
  float v39 = (float)((float)((float)(v13 * v23) - (float)(v16 * *v19)) - (float)(v14 * v24)) + (float)(v26 * v15);
  float v40 = (float)((float)((float)(v14 * v23) - (float)(v16 * v26)) - (float)(v15 * *v19)) + (float)(v24 * v13);
  float v41 = (float)((float)((float)(v15 * v23) - (float)(v16 * v24)) - (float)(v13 * v26)) + (float)(*v19 * v14);
  float v42 = (float)((float)((float)(v13 * *v19) + (float)(v16 * v23)) + (float)(v14 * v26)) + (float)(v15 * v24);
  *a2 = v39;
  a2[1] = v40;
  a2[2] = v41;
  a2[3] = v42;
  a2[4] = v38;
  a2[5] = v17 + v36;
  a2[6] = v18 + v37;
  return 1;
}

uint64_t physx::NpRigidDynamic::setCMassLocalPose(_WORD *a1, float *a2)
{
  float v3 = a2[1];
  float v4 = a2[2];
  float v5 = a2[3];
  float v6 = sqrtf((float)((float)((float)(v3 * v3) + (float)(*a2 * *a2)) + (float)(v4 * v4)) + (float)(v5 * v5));
  float v7 = *a2 / v6;
  float v8 = v3 / v6;
  float v9 = v4 / v6;
  float v10 = v5 / v6;
  v99[0] = v7;
  v99[1] = v3 / v6;
  v99[2] = v4 / v6;
  v99[3] = v5 / v6;
  float v11 = a2[4];
  float v12 = a2[5];
  v99[4] = v11;
  v99[5] = v12;
  float v13 = a2[6];
  v99[6] = v13;
  if ((*((unsigned char *)a1 + 381) & 4) != 0) {
    float v14 = (float *)(*((void *)a1 + 14) + 224);
  }
  else {
    float v14 = (float *)(a1 + 88);
  }
  float v15 = a1 + 48;
  float v98 = v14[1];
  float v16 = v14[3];
  float v96 = *v14;
  float v97 = v14[2];
  float v94 = v14[5];
  float v95 = v14[4];
  float v93 = v14[6];
  (*(void (**)(uint64_t *__return_ptr, _WORD *))(*(void *)a1 + 152))(&v100, a1);
  float v17 = (float)(v102 * v102) + -0.5;
  float v18 = (float)((float)((float)(v12 + v12) * *((float *)&v100 + 1)) + (float)(*(float *)&v100 * (float)(v11 + v11)))
      + (float)(v101 * (float)(v13 + v13));
  float v19 = v103
      + (float)((float)((float)(v102
                              * (float)((float)(*((float *)&v100 + 1) * (float)(v13 + v13))
                                      - (float)(v101 * (float)(v12 + v12))))
                      + (float)((float)(v11 + v11) * v17))
              + (float)(*(float *)&v100 * v18));
  float v20 = v104
      + (float)((float)((float)(v102
                              * (float)((float)(v101 * (float)(v11 + v11))
                                      - (float)(*(float *)&v100 * (float)(v13 + v13))))
                      + (float)((float)(v12 + v12) * v17))
              + (float)(*((float *)&v100 + 1) * v18));
  *(float *)v21.i32 = v105
                    + (float)((float)((float)(v102
                                            * (float)((float)(*(float *)&v100 * (float)(v12 + v12))
                                                    - (float)(*((float *)&v100 + 1) * (float)(v11 + v11))))
                                    + (float)((float)(v13 + v13) * v17))
                            + (float)(v101 * v18));
  float v22 = (float)((float)((float)(v10 * *((float *)&v100 + 1)) + (float)(v102 * v8)) + (float)(v101 * v7))
      - (float)(v9 * *(float *)&v100);
  float v23 = (float)((float)((float)(v10 * v101) + (float)(v102 * v9)) + (float)(*(float *)&v100 * v8))
      - (float)(v7 * *((float *)&v100 + 1));
  float v106 = (float)((float)((float)(v10 * *(float *)&v100) + (float)(v102 * v7)) + (float)(*((float *)&v100 + 1) * v9))
       - (float)(v8 * v101);
  float v107 = v22;
  float v24 = (float)((float)((float)(v102 * v10) - (float)(*(float *)&v100 * v7)) - (float)(*((float *)&v100 + 1) * v8))
      - (float)(v101 * v9);
  float v108 = v23;
  float v109 = v24;
  float v110 = v19;
  float v111 = v20;
  float v112 = *(float *)v21.i32;
  *((float *)a1 + 80) = v106;
  *((float *)a1 + 81) = v22;
  *((float *)a1 + 82) = v23;
  *((float *)a1 + 83) = v24;
  *((float *)a1 + 84) = v19;
  *((float *)a1 + 85) = v20;
  *((_DWORD *)a1 + 86) = v21.i32[0];
  int v25 = *((_DWORD *)a1 + 26) >> 30;
  if (v25 == 3 || v25 == 2 && *(unsigned char *)(*(void *)v15 + 7689))
  {
    int v26 = *((_DWORD *)a1 + 95);
    if ((v26 & 0x100000) == 0) {
      *((_DWORD *)a1 + 95) = v26 | 0x200000;
    }
    physx::Scb::Scene::scheduleForUpdate(*((void **)a1 + 12), (uint64_t)(a1 + 48), v21);
    *((_DWORD *)a1 + 95) |= 0x100000u;
  }
  else
  {
    physx::Sc::BodyCore::setBody2World((uint64_t)(a1 + 64), (uint64_t)&v106);
  }
  unsigned int v28 = *((_DWORD *)a1 + 26);
  if (v28 >> 30 == 2)
  {
    float v29 = *(void **)v15;
    if (*(unsigned char *)(*(void *)v15 + 7689)) {
      goto LABEL_15;
    }
  }
  else if (v28 >> 30 == 3)
  {
    float v29 = *(void **)v15;
LABEL_15:
    float v30 = (float *)*((void *)a1 + 14);
    if (!v30)
    {
      int8x8_t v27 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v29, HIBYTE(v28) & 0xF).n128_u64[0];
      float v30 = v31;
      *((void *)a1 + 14) = v31;
      float v29 = (void *)*((void *)a1 + 12);
    }
    v30[56] = v7;
    v30[57] = v8;
    v30[58] = v9;
    v30[59] = v10;
    v30[60] = v11;
    v30[61] = v12;
    v30[62] = v13;
    uint64_t result = (uint64_t)physx::Scb::Scene::scheduleForUpdate(v29, (uint64_t)(a1 + 48), v27);
    *((_DWORD *)a1 + 95) |= 0x400u;
    goto LABEL_19;
  }
  uint64_t result = physx::Sc::BodyCore::setBody2Actor((uint64_t)(a1 + 64), v99);
LABEL_19:
  uint64_t v33 = *((void *)a1 + 4);
  if (v33)
  {
    uint64_t v34 = *(void *)(v33 + 72);
    unsigned int v35 = *(_DWORD *)(v33 + 80);
  }
  else
  {
    unsigned int v35 = 0;
    uint64_t v34 = 0;
  }
  unsigned int v36 = 0;
LABEL_23:
  if (v36 <= v35) {
    uint64_t v37 = v35;
  }
  else {
    uint64_t v37 = v36;
  }
  float v38 = (unsigned __int8 *)(v34 + 16 * v36);
  uint64_t v39 = v37 - v36 + 1;
  while (--v39)
  {
    float v40 = v38 + 16;
    ++v36;
    int v41 = *v38;
    v38 += 16;
    if (!v41)
    {
      uint64_t result = *((void *)v40 - 1);
      if (!result) {
        break;
      }
      uint64_t result = physx::NpConstraint::comShift(result, (uint64_t)a1);
      goto LABEL_23;
    }
  }
  int v42 = *((_DWORD *)a1 + 95);
  if ((v42 & 0x4000) != 0) {
    uint64_t v43 = (unsigned char *)(*((void *)a1 + 14) + 348);
  }
  else {
    uint64_t v43 = a1 + 86;
  }
  if (*v43)
  {
    if ((v42 & 0x8000) != 0)
    {
      uint64_t v51 = (float *)*((void *)a1 + 14);
      uint64_t v44 = v51 + 68;
      char v45 = v51 + 69;
      uint64_t v46 = v51 + 70;
      uint64_t v47 = v51 + 71;
      uint64_t v48 = v51 + 72;
      uint64_t v49 = v51 + 73;
      uint64_t v50 = v51 + 74;
    }
    else
    {
      if (*((_DWORD *)a1 + 26) >> 30 == 3) {
        return result;
      }
      uint64_t v44 = (float *)*((void *)a1 + 38);
      if (!v44 || *((unsigned char *)v44 + 31) != 1 || !*((unsigned char *)v44 + 28)) {
        return result;
      }
      char v45 = v44 + 1;
      uint64_t v46 = v44 + 2;
      uint64_t v47 = v44 + 3;
      uint64_t v48 = v44 + 4;
      uint64_t v49 = v44 + 5;
      uint64_t v50 = v44 + 6;
    }
    float v52 = (float)(v16 * v16) + -0.5;
    float v53 = (float)((float)(v98 * (float)(v94 * -2.0)) + (float)(v96 * (float)(v95 * -2.0)))
        + (float)(v97 * (float)(v93 * -2.0));
    float v54 = (float)((float)((float)(v95 * -2.0) * v52)
                - (float)((float)((float)(v98 * (float)(v93 * -2.0)) - (float)(v97 * (float)(v94 * -2.0))) * v16))
        + (float)(v96 * v53);
    float v55 = (float)((float)((float)(v94 * -2.0) * v52)
                - (float)((float)((float)(v97 * (float)(v95 * -2.0)) - (float)(v96 * (float)(v93 * -2.0))) * v16))
        + (float)(v98 * v53);
    float v56 = (float)((float)((float)(v93 * -2.0) * v52)
                - (float)((float)((float)(v96 * (float)(v94 * -2.0)) - (float)(v98 * (float)(v95 * -2.0))) * v16))
        + (float)(v97 * v53);
    float v57 = v54 + v54;
    float v58 = v56 + v56;
    float v59 = (float)(*v47 * *v47) + -0.5;
    float v60 = (float)((float)((float)(v55 + v55) * *v45) + (float)(*v44 * (float)(v54 + v54))) + (float)(*v46 * v58);
    float v61 = (float)((float)(*v47 * (float)((float)(*v45 * v58) - (float)(*v46 * (float)(v55 + v55))))
                + (float)((float)(v54 + v54) * v59))
        + (float)(*v44 * v60);
    float v62 = (float)((float)(*v47 * (float)((float)(*v46 * (float)(v54 + v54)) - (float)(*v44 * v58)))
                + (float)((float)(v55 + v55) * v59))
        + (float)(*v45 * v60);
    float v63 = (float)((float)(*v47 * (float)((float)(*v44 * (float)(v55 + v55)) - (float)(*v45 * v57))) + (float)(v58 * v59))
        + (float)(*v46 * v60);
    float v64 = *v48 + v61;
    float v65 = *v49 + v62;
    float v66 = *v50 + v63;
    float v67 = (float)((float)((float)(v16 * *v44) - (float)(*v47 * v96)) - (float)(*v45 * v97)) + (float)(v98 * *v46);
    float v68 = (float)((float)((float)(v16 * *v45) - (float)(*v47 * v98)) - (float)(*v46 * v96)) + (float)(v97 * *v44);
    float v69 = (float)((float)((float)(v16 * *v46) - (float)(*v47 * v97)) - (float)(*v44 * v98)) + (float)(v96 * *v45);
    float v70 = (float)((float)((float)(v96 * *v44) + (float)(*v47 * v16)) + (float)(*v45 * v98)) + (float)(*v46 * v97);
    if ((v42 & 0x400) != 0) {
      uint64_t v71 = (float *)(*((void *)a1 + 14) + 224);
    }
    else {
      uint64_t v71 = (float *)(a1 + 88);
    }
    float v72 = v71[4] + v71[4];
    float v73 = v71[5] + v71[5];
    float v74 = v71[6] + v71[6];
    float v75 = (float)(v70 * v70) + -0.5;
    float v76 = (float)((float)(v68 * v73) + (float)(v67 * v72)) + (float)(v69 * v74);
    float v77 = (float)((float)(v70 * (float)((float)(v68 * v74) - (float)(v69 * v73))) + (float)(v72 * v75))
        + (float)(v67 * v76);
    float v78 = (float)((float)(v70 * (float)((float)(v69 * v72) - (float)(v67 * v74))) + (float)(v73 * v75))
        + (float)(v68 * v76);
    float v79 = (float)((float)(v70 * (float)((float)(v67 * v73) - (float)(v68 * v72))) + (float)(v74 * v75))
        + (float)(v69 * v76);
    float v80 = v64 + v77;
    float v81 = v65 + v78;
    float v83 = v71[2];
    float v82 = v71[3];
    float v84 = v71[1];
    float v85 = (float)((float)((float)(v68 * v82) + (float)(v70 * v84)) + (float)(v69 * *v71)) - (float)(v83 * v67);
    float v86 = (float)((float)((float)(v69 * v82) + (float)(v70 * v83)) + (float)(v67 * v84)) - (float)(*v71 * v68);
    float v87 = (float)((float)((float)(v67 * v82) + (float)(v70 * *v71)) + (float)(v68 * v83)) - (float)(v84 * v69);
    float v88 = (float)((float)((float)(v70 * v82) - (float)(v67 * *v71)) - (float)(v68 * v84)) - (float)(v69 * v83);
    float v106 = v87;
    float v107 = v85;
    float v108 = v86;
    float v109 = v88;
    float v110 = v80;
    float v111 = v81;
    float v112 = v66 + v79;
    uint64_t result = physx::Scb::Body::setKinematicTarget((uint64_t)(a1 + 48), (uint64_t)&v106);
    uint64_t v89 = (char *)a1 + *((void *)&physx::NpActor::sLazyInitOffsets + (unsigned __int16)a1[4] + 18);
    if (((*((_DWORD *)v89 + 2) >> 30) - 1) > 1)
    {
      uint64_t v91 = 0;
    }
    else
    {
      uint64_t v90 = *(void *)v89;
      if (v90) {
        uint64_t v91 = v90 - 16;
      }
      else {
        uint64_t v91 = 0;
      }
    }
    if ((*((unsigned char *)a1 + 381) & 0x40) != 0) {
      __int16 v92 = (unsigned char *)(*((void *)a1 + 14) + 348);
    }
    else {
      __int16 v92 = a1 + 86;
    }
    if ((*v92 & 2) != 0)
    {
      if (v91)
      {
        uint64_t result = physx::NpShapeManager::markAllSceneQueryForUpdate((uint64_t)(a1 + 20), v91 + 8640, a1);
        ++*(_DWORD *)(v91 + 8732);
      }
    }
  }
  return result;
}

uint64_t *physx::NpRigidDynamic::setLinearDamping(uint64_t *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  float v3 = this;
  uint64_t v4 = (uint64_t)(this + 12);
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v4;
LABEL_5:
    uint64_t v6 = v3[14];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v3[14] = v7;
      this = (uint64_t *)v3[12];
    }
    *(_DWORD *)(v6 + 180) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 95) |= 4u;
    return this;
  }
  uint64_t v8 = v3[38];
  if (v8 && *(unsigned char *)(v8 + 31) == 1)
  {
    *(_DWORD *)(v8 + 48) = a2.i32[0];
  }
  else
  {
    *((_DWORD *)v3 + 62) = a2.i32[0];
    return updateBodySim(v3 + 16);
  }
  return this;
}

float physx::NpRigidDynamic::getLinearDamping(physx::NpRigidDynamic *this)
{
  if ((*((unsigned char *)this + 380) & 4) != 0)
  {
    __int32 v2 = (char *)(*((void *)this + 14) + 180);
  }
  else
  {
    uint64_t v1 = *((void *)this + 38);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      __int32 v2 = (char *)(v1 + 48);
    }
    else {
      __int32 v2 = (char *)this + 248;
    }
  }
  return *(float *)v2;
}

uint64_t *physx::NpRigidDynamic::setAngularDamping(uint64_t *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  float v3 = this;
  uint64_t v4 = (uint64_t)(this + 12);
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v4;
LABEL_5:
    uint64_t v6 = v3[14];
    if (!v6)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v3[14] = v7;
      this = (uint64_t *)v3[12];
    }
    *(_DWORD *)(v6 + 184) = v2;
    this = physx::Scb::Scene::scheduleForUpdate(this, v4, a2);
    *((_DWORD *)v3 + 95) |= 8u;
    return this;
  }
  uint64_t v8 = v3[38];
  if (v8 && *(unsigned char *)(v8 + 31) == 1)
  {
    *(_DWORD *)(v8 + 52) = a2.i32[0];
  }
  else
  {
    *((_DWORD *)v3 + 63) = a2.i32[0];
    return updateBodySim(v3 + 16);
  }
  return this;
}

float physx::NpRigidDynamic::getAngularDamping(physx::NpRigidDynamic *this)
{
  if ((*((unsigned char *)this + 380) & 8) != 0)
  {
    __int32 v2 = (char *)(*((void *)this + 14) + 184);
  }
  else
  {
    uint64_t v1 = *((void *)this + 38);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      __int32 v2 = (char *)(v1 + 52);
    }
    else {
      __int32 v2 = (char *)this + 252;
    }
  }
  return *(float *)v2;
}

uint64_t *physx::NpRigidDynamic::setLinearVelocity(uint64_t a1, int8x8_t *a2, int a3)
{
  uint64_t v6 = (physx::Scb::Body *)(a1 + 96);
  int8x8_t v7 = *a2;
  *(int8x8_t *)(a1 + 348) = *a2;
  v7.i32[0] = a2[1].i32[0];
  *(_DWORD *)(a1 + 356) = v7.i32[0];
  int v8 = *(_DWORD *)(a1 + 104) >> 30;
  if (v8 == 2)
  {
    float v9 = *(void **)v6;
    if (*(unsigned char *)(*(void *)v6 + 7689)) {
      goto LABEL_5;
    }
LABEL_6:
    *(int8x8_t *)(a1 + 208) = *a2;
    *(_DWORD *)(a1 + 216) = a2[1].i32[0];
    uint64_t result = updateBodySim((uint64_t *)(a1 + 128));
    goto LABEL_7;
  }
  if (v8 != 3) {
    goto LABEL_6;
  }
  float v9 = *(void **)v6;
LABEL_5:
  uint64_t result = physx::Scb::Scene::scheduleForUpdate(v9, (uint64_t)v6, v7);
  *(_DWORD *)(a1 + 380) |= 0x400000u;
LABEL_7:
  uint64_t v12 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  if (((*(_DWORD *)(v12 + 8) >> 30) - 1) <= 1 && *(void *)v12)
  {
    LODWORD(v11) = a2->i32[0];
    BOOL v13 = 1;
    if (*(float *)a2->i32 == 0.0)
    {
      LODWORD(v11) = a2->i32[1];
      if (*(float *)&v11 == 0.0)
      {
        LODWORD(v11) = a2[1].i32[0];
        BOOL v13 = *(float *)&v11 != 0.0;
      }
    }
    return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest((void *)a1, v6, v13, a3, v11);
  }
  return result;
}

void *physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(void *this, physx::Scb::Body *a2, int a3, int a4, double a5)
{
  uint64_t v6 = *(void *)((char *)this + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)this + 4) + 18));
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  LODWORD(a5) = *(_DWORD *)(v7 + 0x2000);
  int v8 = a3 | a4;
  if (!*((_DWORD *)a2 + 70)) {
    int v8 = 0;
  }
  char v9 = a4 & (*((float *)a2 + 69) < *(float *)&a5);
  if (!v9) {
    LODWORD(a5) = *((_DWORD *)a2 + 69);
  }
  if ((v9 & 1) != 0 || v8)
  {
    int v10 = *((_DWORD *)a2 + 2) >> 30;
    if (v10 == 2)
    {
      double v11 = *(void **)a2;
      if (*(unsigned char *)(*(void *)a2 + 7689)) {
        goto LABEL_14;
      }
    }
    else if (v10 == 3)
    {
      double v11 = *(void **)a2;
LABEL_14:
      *((_DWORD *)a2 + 70) = 0;
      *((_DWORD *)a2 + 69) = LODWORD(a5);
      this = physx::Scb::Scene::scheduleForUpdate(v11, (uint64_t)a2, *(int8x8_t *)&a5);
      *((_DWORD *)a2 + 71) = *((_DWORD *)a2 + 71) & 0xF8FFFFFF | 0x5000000;
      return this;
    }
    *((_DWORD *)a2 + 70) = 0;
    *((_DWORD *)a2 + 69) = LODWORD(a5);
    return (void *)physx::Sc::BodyCore::setWakeCounter((uint64_t)a2 + 32, *(float *)&a5, 1);
  }
  return this;
}

uint64_t *physx::NpRigidDynamic::setAngularVelocity(uint64_t a1, int8x8_t *a2, int a3)
{
  uint64_t v6 = (physx::Scb::Body *)(a1 + 96);
  int8x8_t v7 = *a2;
  *(int8x8_t *)(a1 + 360) = *a2;
  v7.i32[0] = a2[1].i32[0];
  *(_DWORD *)(a1 + 368) = v7.i32[0];
  int v8 = *(_DWORD *)(a1 + 104) >> 30;
  if (v8 == 2)
  {
    char v9 = *(void **)v6;
    if (*(unsigned char *)(*(void *)v6 + 7689)) {
      goto LABEL_5;
    }
LABEL_6:
    *(int8x8_t *)(a1 + 224) = *a2;
    *(_DWORD *)(a1 + 232) = a2[1].i32[0];
    uint64_t result = updateBodySim((uint64_t *)(a1 + 128));
    goto LABEL_7;
  }
  if (v8 != 3) {
    goto LABEL_6;
  }
  char v9 = *(void **)v6;
LABEL_5:
  uint64_t result = physx::Scb::Scene::scheduleForUpdate(v9, (uint64_t)v6, v7);
  *(_DWORD *)(a1 + 380) |= 0x800000u;
LABEL_7:
  uint64_t v12 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  if (((*(_DWORD *)(v12 + 8) >> 30) - 1) <= 1 && *(void *)v12)
  {
    LODWORD(v11) = a2->i32[0];
    BOOL v13 = 1;
    if (*(float *)a2->i32 == 0.0)
    {
      LODWORD(v11) = a2->i32[1];
      if (*(float *)&v11 == 0.0)
      {
        LODWORD(v11) = a2[1].i32[0];
        BOOL v13 = *(float *)&v11 != 0.0;
      }
    }
    return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest((void *)a1, v6, v13, a3, v11);
  }
  return result;
}

uint64_t *physx::NpRigidDynamic::setMaxAngularVelocity(uint64_t *this, double a2)
{
  __int32 v2 = this;
  uint64_t v3 = (uint64_t)(this + 12);
  float v4 = *(float *)&a2 * *(float *)&a2;
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v3;
LABEL_5:
    uint64_t v6 = v2[14];
    if (!v6)
    {
      *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v2[14] = v7;
      this = (uint64_t *)v2[12];
    }
    *(float *)(v6 + 188) = v4;
    this = physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 0x10u;
    return this;
  }
  uint64_t v8 = v2[38];
  if (v8 && *(unsigned char *)(v8 + 31) == 1)
  {
    *(float *)(v8 + 56) = v4;
  }
  else
  {
    *((float *)v2 + 60) = v4;
    return updateBodySim(v2 + 16);
  }
  return this;
}

float physx::NpRigidDynamic::getMaxAngularVelocity(physx::NpRigidDynamic *this)
{
  if ((*((unsigned char *)this + 380) & 0x10) != 0)
  {
    __int32 v2 = (float *)(*((void *)this + 14) + 188);
  }
  else
  {
    uint64_t v1 = *((void *)this + 38);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      __int32 v2 = (float *)(v1 + 56);
    }
    else {
      __int32 v2 = (float *)((char *)this + 240);
    }
  }
  return sqrtf(*v2);
}

uint64_t *physx::NpRigidDynamic::setMaxLinearVelocity(uint64_t *this, double a2)
{
  __int32 v2 = this;
  uint64_t v3 = (uint64_t)(this + 12);
  float v4 = *(float *)&a2 * *(float *)&a2;
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(uint64_t **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    this = *(uint64_t **)v3;
LABEL_5:
    uint64_t v6 = v2[14];
    if (!v6)
    {
      *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v6 = v7;
      v2[14] = v7;
      this = (uint64_t *)v2[12];
    }
    *(float *)(v6 + 192) = v4;
    this = physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
    *((_DWORD *)v2 + 95) |= 0x20u;
    return this;
  }
  uint64_t v8 = v2[38];
  if (v8 && *(unsigned char *)(v8 + 31) == 1)
  {
    *(float *)(v8 + 60) = v4;
  }
  else
  {
    *((float *)v2 + 61) = v4;
    return updateBodySim(v2 + 16);
  }
  return this;
}

float physx::NpRigidDynamic::getMaxLinearVelocity(physx::NpRigidDynamic *this)
{
  if ((*((unsigned char *)this + 380) & 0x20) != 0)
  {
    __int32 v2 = (float *)(*((void *)this + 14) + 192);
  }
  else
  {
    uint64_t v1 = *((void *)this + 38);
    if (v1 && *(unsigned char *)(v1 + 31) == 1) {
      __int32 v2 = (float *)(v1 + 60);
    }
    else {
      __int32 v2 = (float *)((char *)this + 244);
    }
  }
  return sqrtf(*v2);
}

void *physx::NpRigidDynamic::addForce(void *a1, float32x2_t *a2, int a3, int a4, double a5)
{
  physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::addSpatialForce((uint64_t)a1, a2, 0, a3, a5);
  LODWORD(v8) = a2->i32[0];
  BOOL v9 = 1;
  if (a2->f32[0] == 0.0)
  {
    LODWORD(v8) = a2->i32[1];
    if (*(float *)&v8 == 0.0)
    {
      LODWORD(v8) = a2[1].i32[0];
      BOOL v9 = *(float *)&v8 != 0.0;
    }
  }
  return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(a1, (physx::Scb::Body *)(a1 + 12), v9, a4, v8);
}

float physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::addSpatialForce(uint64_t a1, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  switch(a4)
  {
    case 0:
      if (a2)
      {
        if (*(unsigned char *)(a1 + 380))
        {
          uint64_t v6 = (float *)(*(void *)(a1 + 112) + 164);
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 304);
          if (v5 && *(unsigned char *)(v5 + 31) == 1) {
            uint64_t v6 = (float *)(v5 + 44);
          }
          else {
            uint64_t v6 = (float *)(a1 + 268);
          }
        }
        float v11 = *v6 * a2[1].f32[0];
        a5 = COERCE_DOUBLE(vmul_n_f32(*a2, *v6));
        double v82 = a5;
        float v83 = v11;
        a2 = (float32x2_t *)&v82;
      }
      if (a3)
      {
        if ((*(unsigned char *)(a1 + 380) & 2) != 0)
        {
          BOOL v13 = (float *)(*(void *)(a1 + 112) + 168);
        }
        else
        {
          uint64_t v12 = *(void *)(a1 + 304);
          if (v12 && *(unsigned char *)(v12 + 31) == 1) {
            BOOL v13 = (float *)(v12 + 32);
          }
          else {
            BOOL v13 = (float *)(a1 + 256);
          }
        }
        float v17 = v13[1];
        float v18 = v13[2];
        float32x4_t v19 = *(float32x4_t *)(a1 + 320);
        float32x2_t v20 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
        float32x2_t v21 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
        float32x2_t v22 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
        _Q7 = vaddq_f32(v19, v19);
        *(int32x2_t *)v19.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)_Q7.f32), 0);
        float32x2_t v24 = vmul_lane_f32(v20, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v25 = vmul_laneq_f32(v21, _Q7, 2);
        float32x2_t v26 = vmul_n_f32(v20, _Q7.f32[0]);
        float32x2_t v27 = vmul_n_f32(v21, _Q7.f32[0]);
        float32x2_t v28 = vmul_n_f32(v22, _Q7.f32[0]);
        float32x2_t v29 = vmul_lane_f32(v21, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v30 = vmul_lane_f32(v22, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v31 = vmul_laneq_f32(v22, _Q7, 2);
        __asm { FMOV            V7.2S, #1.0 }
        *(float32x2_t *)v19.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v19.f32);
        *(float32x2_t *)_Q7.f32 = vadd_f32(v26, v31);
        float v36 = vsub_f32(v27, v30).f32[0];
        int8x8_t v37 = (int8x8_t)vsub_f32(v26, v31);
        float32x2_t v38 = vsub_f32(*(float32x2_t *)v19.f32, v25);
        float v39 = vadd_f32(v29, v28).f32[0];
        int8x8_t v40 = (int8x8_t)vadd_f32(v27, v30);
        int8x8_t v41 = (int8x8_t)vsub_f32(v29, v28);
        v19.f32[0] = vsub_f32(*(float32x2_t *)v19.f32, v24).f32[0];
        v28.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v17 * v39) * v39, *v13 * v36, v36), v18 * v19.f32[0], v19.f32[0]);
        v25.i32[0] = a3[1].i32[0];
        float32x2_t v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
        v42.f32[0] = (float)(1.0 - v24.f32[1]) - v25.f32[1];
        float32x2_t v43 = vmul_n_f32(v42, *v13);
        float32x2_t v44 = (float32x2_t)vext_s8(v37, (int8x8_t)v38, 4uLL);
        float32x2_t v45 = vmul_n_f32(v44, v17);
        float32x2_t v46 = (float32x2_t)vext_s8(v40, v41, 4uLL);
        float32x2_t v47 = vmul_n_f32(v46, v18);
        float32x2_t v48 = vmla_f32(vmla_f32(vmul_f32(v44, v45), v42, v43), v46, v47);
        v38.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v45, v38).f32[0], _Q7.f32[0], v43.f32[0]), *(float *)v41.i32, v47.f32[0]);
        float32x2_t v49 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v45, v39), v43, v36), v47, v19.f32[0]);
        a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v49, v25.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v38.f32[0])), vmul_f32(*a3, v48))));
        v49.f32[0] = (float)(v25.f32[0] * v28.f32[0]) + vaddv_f32(vmul_f32(*a3, v49));
        double v80 = a5;
        float v81 = v49.f32[0];
        a3 = (float32x2_t *)&v80;
      }
      *(float *)&a5 = physx::Scb::Body::addSpatialAcceleration((void **)(a1 + 96), a2, a3, a5);
      break;
    case 1:
      if (a2)
      {
        if (*(unsigned char *)(a1 + 380))
        {
          double v8 = (float *)(*(void *)(a1 + 112) + 164);
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 304);
          if (v7 && *(unsigned char *)(v7 + 31) == 1) {
            double v8 = (float *)(v7 + 44);
          }
          else {
            double v8 = (float *)(a1 + 268);
          }
        }
        float v14 = *v8 * a2[1].f32[0];
        a5 = COERCE_DOUBLE(vmul_n_f32(*a2, *v8));
        double v82 = a5;
        float v83 = v14;
        a2 = (float32x2_t *)&v82;
      }
      if (a3)
      {
        if ((*(unsigned char *)(a1 + 380) & 2) != 0)
        {
          float v16 = (float *)(*(void *)(a1 + 112) + 168);
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 304);
          if (v15 && *(unsigned char *)(v15 + 31) == 1) {
            float v16 = (float *)(v15 + 32);
          }
          else {
            float v16 = (float *)(a1 + 256);
          }
        }
        float v50 = v16[1];
        float v51 = v16[2];
        float32x4_t v52 = *(float32x4_t *)(a1 + 320);
        float32x2_t v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1);
        float32x2_t v54 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
        float32x2_t v55 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 3);
        _Q7 = vaddq_f32(v52, v52);
        *(int32x2_t *)v52.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)_Q7.f32), 0);
        float32x2_t v57 = vmul_lane_f32(v53, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v58 = vmul_laneq_f32(v54, _Q7, 2);
        float32x2_t v59 = vmul_n_f32(v53, _Q7.f32[0]);
        float32x2_t v60 = vmul_n_f32(v54, _Q7.f32[0]);
        float32x2_t v61 = vmul_n_f32(v55, _Q7.f32[0]);
        float32x2_t v62 = vmul_lane_f32(v54, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v63 = vmul_lane_f32(v55, *(float32x2_t *)_Q7.f32, 1);
        float32x2_t v64 = vmul_laneq_f32(v55, _Q7, 2);
        __asm { FMOV            V7.2S, #1.0 }
        *(float32x2_t *)v52.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v52.f32);
        *(float32x2_t *)_Q7.f32 = vadd_f32(v59, v64);
        float v65 = vsub_f32(v60, v63).f32[0];
        int8x8_t v66 = (int8x8_t)vsub_f32(v59, v64);
        float32x2_t v67 = vsub_f32(*(float32x2_t *)v52.f32, v58);
        float v68 = vadd_f32(v62, v61).f32[0];
        int8x8_t v69 = (int8x8_t)vadd_f32(v60, v63);
        int8x8_t v70 = (int8x8_t)vsub_f32(v62, v61);
        v52.f32[0] = vsub_f32(*(float32x2_t *)v52.f32, v57).f32[0];
        v61.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v50 * v68) * v68, *v16 * v65, v65), v51 * v52.f32[0], v52.f32[0]);
        v58.i32[0] = a3[1].i32[0];
        float32x2_t v71 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
        v71.f32[0] = (float)(1.0 - v57.f32[1]) - v58.f32[1];
        float32x2_t v72 = vmul_n_f32(v71, *v16);
        float32x2_t v73 = (float32x2_t)vext_s8(v66, (int8x8_t)v67, 4uLL);
        float32x2_t v74 = vmul_n_f32(v73, v50);
        float32x2_t v75 = (float32x2_t)vext_s8(v69, v70, 4uLL);
        float32x2_t v76 = vmul_n_f32(v75, v51);
        float32x2_t v77 = vmla_f32(vmla_f32(vmul_f32(v73, v74), v71, v72), v75, v76);
        v67.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v74, v67).f32[0], _Q7.f32[0], v72.f32[0]), *(float *)v70.i32, v76.f32[0]);
        float32x2_t v78 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v74, v68), v72, v65), v76, v52.f32[0]);
        a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v78, v58.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v67.f32[0])), vmul_f32(*a3, v77))));
        v78.f32[0] = (float)(v58.f32[0] * v61.f32[0]) + vaddv_f32(vmul_f32(*a3, v78));
        double v80 = a5;
        float v81 = v78.f32[0];
        a3 = (float32x2_t *)&v80;
      }
      *(float *)&a5 = physx::Scb::Body::addSpatialVelocity((void **)(a1 + 96), a2, a3, a5);
      break;
    case 2:
      BOOL v9 = (void **)(a1 + 96);
      *(float *)&a5 = physx::Scb::Body::addSpatialVelocity(v9, a2, a3, a5);
      break;
    case 3:
      int v10 = (void **)(a1 + 96);
      *(float *)&a5 = physx::Scb::Body::addSpatialAcceleration(v10, a2, a3, a5);
      break;
    default:
      return *(float *)&a5;
  }
  return *(float *)&a5;
}

void *physx::NpRigidDynamic::setForceAndTorque(physx::NpRigidDynamic *this, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  uint64_t v5 = a2;
  uint64_t v7 = a3;
  switch(a4)
  {
    case 0:
      int v8 = *((_DWORD *)this + 95);
      if (v8)
      {
        int v10 = (float *)(*((void *)this + 14) + 164);
      }
      else
      {
        uint64_t v9 = *((void *)this + 38);
        if (v9 && *(unsigned char *)(v9 + 31) == 1) {
          int v10 = (float *)(v9 + 44);
        }
        else {
          int v10 = (float *)((char *)this + 268);
        }
      }
      float v18 = *v10 * a2->f32[0];
      float v19 = *v10 * a2->f32[1];
      float v20 = *v10 * a2[1].f32[0];
      v103.f32[0] = v18;
      v103.f32[1] = v19;
      float v104 = v20;
      if ((v8 & 2) != 0)
      {
        float32x2_t v22 = (float *)(*((void *)this + 14) + 168);
      }
      else
      {
        uint64_t v21 = *((void *)this + 38);
        if (v21 && *(unsigned char *)(v21 + 31) == 1) {
          float32x2_t v22 = (float *)(v21 + 32);
        }
        else {
          float32x2_t v22 = (float *)((char *)this + 256);
        }
      }
      float v33 = v22[1];
      float v34 = v22[2];
      uint64_t v15 = (char *)this + 96;
      float32x4_t v35 = *((float32x4_t *)this + 20);
      float32x2_t v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 1);
      float32x2_t v37 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 2);
      float32x2_t v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)v35, 3);
      _Q7 = vaddq_f32(v35, v35);
      *(int32x2_t *)v35.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)_Q7.f32), 0);
      float32x2_t v40 = vmul_lane_f32(v36, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v41 = vmul_laneq_f32(v37, _Q7, 2);
      float32x2_t v42 = vmul_n_f32(v36, _Q7.f32[0]);
      float32x2_t v43 = vmul_n_f32(v37, _Q7.f32[0]);
      float32x2_t v44 = vmul_n_f32(v38, _Q7.f32[0]);
      float32x2_t v45 = vmul_lane_f32(v37, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v46 = vmul_lane_f32(v38, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v47 = vmul_laneq_f32(v38, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      *(float32x2_t *)v35.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v35.f32);
      *(float32x2_t *)_Q7.f32 = vadd_f32(v42, v47);
      float v52 = vsub_f32(v43, v46).f32[0];
      int8x8_t v53 = (int8x8_t)vsub_f32(v42, v47);
      float32x2_t v54 = vsub_f32(*(float32x2_t *)v35.f32, v41);
      float v55 = vadd_f32(v45, v44).f32[0];
      int8x8_t v56 = (int8x8_t)vadd_f32(v43, v46);
      int8x8_t v57 = (int8x8_t)vsub_f32(v45, v44);
      v35.f32[0] = vsub_f32(*(float32x2_t *)v35.f32, v40).f32[0];
      v41.i32[0] = a3[1].i32[0];
      float32x2_t v58 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
      v58.f32[0] = (float)(1.0 - v40.f32[1]) - v41.f32[1];
      v40.f32[0] = v41.f32[0]
                 * vmlas_n_f32(vmlas_n_f32((float)(v33 * v55) * v55, *v22 * v52, v52), v34 * v35.f32[0], v35.f32[0]);
      float32x2_t v59 = vmul_n_f32(v58, *v22);
      float32x2_t v60 = (float32x2_t)vext_s8(v53, (int8x8_t)v54, 4uLL);
      float32x2_t v61 = vmul_n_f32(v60, v33);
      float32x2_t v62 = (float32x2_t)vext_s8(v56, v57, 4uLL);
      float32x2_t v63 = vmul_n_f32(v62, v34);
      float32x2_t v64 = vmla_f32(vmla_f32(vmul_f32(v60, v61), v58, v59), v62, v63);
      v54.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v61, v54).f32[0], _Q7.f32[0], v59.f32[0]), *(float *)v57.i32, v63.f32[0]);
      float32x2_t v65 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v61, v55), v59, v52), v63, v35.f32[0]);
      float32x2_t v66 = vadd_f32(vmul_n_f32(v65, v41.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v54.f32[0])), vmul_f32(*a3, v64)));
      float v67 = v40.f32[0] + vaddv_f32(vmul_f32(*a3, v65));
      double v101 = *(double *)&v66;
      float v102 = v67;
      unsigned int v68 = *((_DWORD *)this + 26);
      if (v68 >> 30 != 2)
      {
        if (v68 >> 30 == 3)
        {
          float v17 = *(void **)v15;
          goto LABEL_42;
        }
        float v17 = *(void **)v15;
LABEL_47:
        uint64_t v29 = v17[548];
        float32x2_t v31 = &v103;
        float v32 = &v101;
        float32x2_t v30 = (physx::Sc::BodySim **)((char *)this + 128);
        goto LABEL_48;
      }
      float v17 = *(void **)v15;
      if (!*(unsigned char *)(*(void *)v15 + 7689)) {
        goto LABEL_47;
      }
LABEL_42:
      float32x2_t v26 = (float32x2_t *)*((void *)this + 14);
      if (!v26)
      {
        physx::Scb::Scene::getStream((uint64_t)v17, HIBYTE(v68) & 0xF);
        float32x2_t v26 = v98;
        *((void *)this + 14) = v98;
        float v17 = (void *)*((void *)this + 12);
      }
      v26[37].f32[1] = v18;
      v26[38].f32[0] = v19;
      v26[38].f32[1] = v20;
      int8x8_t v28 = (int8x8_t)vadd_f32(v66, v26[39]);
      v26[39] = (float32x2_t)v28;
      *(float *)v28.i32 = v67 + v26[40].f32[0];
LABEL_45:
      v26[40].i32[0] = v28.i32[0];
      physx::Scb::Scene::scheduleForUpdate(v17, (uint64_t)v15, v28);
      *((_DWORD *)this + 95) |= 0x30000u;
LABEL_49:
      LODWORD(a5) = v5->i32[0];
      BOOL v99 = 1;
      if (v5->f32[0] == 0.0)
      {
        LODWORD(a5) = v5->i32[1];
        if (*(float *)&a5 == 0.0)
        {
          LODWORD(a5) = v5[1].i32[0];
          BOOL v99 = *(float *)&a5 != 0.0;
        }
      }
      return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(this, (physx::NpRigidDynamic *)((char *)this + 96), v99, 1, a5);
    case 1:
      int v11 = *((_DWORD *)this + 95);
      if (v11)
      {
        BOOL v13 = (float *)(*((void *)this + 14) + 164);
      }
      else
      {
        uint64_t v12 = *((void *)this + 38);
        if (v12 && *(unsigned char *)(v12 + 31) == 1) {
          BOOL v13 = (float *)(v12 + 44);
        }
        else {
          BOOL v13 = (float *)((char *)this + 268);
        }
      }
      float v23 = *v13 * a2[1].f32[0];
      float32x2_t v103 = vmul_n_f32(*a2, *v13);
      float v104 = v23;
      if ((v11 & 2) != 0)
      {
        float32x2_t v25 = (float *)(*((void *)this + 14) + 168);
      }
      else
      {
        uint64_t v24 = *((void *)this + 38);
        if (v24 && *(unsigned char *)(v24 + 31) == 1) {
          float32x2_t v25 = (float *)(v24 + 32);
        }
        else {
          float32x2_t v25 = (float *)((char *)this + 256);
        }
      }
      float v69 = v25[1];
      float v70 = v25[2];
      float32x4_t v71 = *((float32x4_t *)this + 20);
      float32x2_t v72 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.f32, 1);
      float32x2_t v73 = (float32x2_t)vdup_laneq_s32((int32x4_t)v71, 2);
      float32x2_t v74 = (float32x2_t)vdup_laneq_s32((int32x4_t)v71, 3);
      float v14 = (void **)((char *)this + 96);
      _Q7 = vaddq_f32(v71, v71);
      *(int32x2_t *)v71.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)_Q7.f32), 0);
      float32x2_t v76 = vmul_lane_f32(v72, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v77 = vmul_laneq_f32(v73, _Q7, 2);
      float32x2_t v78 = vmul_n_f32(v72, _Q7.f32[0]);
      float32x2_t v79 = vmul_n_f32(v73, _Q7.f32[0]);
      float32x2_t v80 = vmul_n_f32(v74, _Q7.f32[0]);
      float32x2_t v81 = vmul_lane_f32(v73, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v82 = vmul_lane_f32(v74, *(float32x2_t *)_Q7.f32, 1);
      float32x2_t v83 = vmul_laneq_f32(v74, _Q7, 2);
      __asm { FMOV            V7.2S, #1.0 }
      *(float32x2_t *)v71.f32 = vsub_f32(*(float32x2_t *)_Q7.f32, *(float32x2_t *)v71.f32);
      *(float32x2_t *)_Q7.f32 = vadd_f32(v78, v83);
      float v84 = vsub_f32(v79, v82).f32[0];
      int8x8_t v85 = (int8x8_t)vsub_f32(v78, v83);
      float32x2_t v86 = vsub_f32(*(float32x2_t *)v71.f32, v77);
      float v87 = vadd_f32(v81, v80).f32[0];
      int8x8_t v88 = (int8x8_t)vadd_f32(v79, v82);
      int8x8_t v89 = (int8x8_t)vsub_f32(v81, v80);
      v71.f32[0] = vsub_f32(*(float32x2_t *)v71.f32, v76).f32[0];
      v80.f32[0] = vmlas_n_f32(vmlas_n_f32((float)(v69 * v87) * v87, *v25 * v84, v84), v70 * v71.f32[0], v71.f32[0]);
      v77.i32[0] = a3[1].i32[0];
      float32x2_t v90 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q7.f32, 0);
      v90.f32[0] = (float)(1.0 - v76.f32[1]) - v77.f32[1];
      float32x2_t v91 = vmul_n_f32(v90, *v25);
      float32x2_t v92 = (float32x2_t)vext_s8(v85, (int8x8_t)v86, 4uLL);
      float32x2_t v93 = vmul_n_f32(v92, v69);
      float32x2_t v94 = (float32x2_t)vext_s8(v88, v89, 4uLL);
      float32x2_t v95 = vmul_n_f32(v94, v70);
      float32x2_t v96 = vmla_f32(vmla_f32(vmul_f32(v92, v93), v90, v91), v94, v95);
      v86.f32[0] = vmlas_n_f32(vmlas_n_f32(vmul_f32(v93, v86).f32[0], _Q7.f32[0], v91.f32[0]), *(float *)v89.i32, v95.f32[0]);
      float32x2_t v97 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v93, v87), v91, v84), v95, v71.f32[0]);
      a5 = COERCE_DOUBLE(vadd_f32(vmul_n_f32(v97, v77.f32[0]), vadd_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(*a3, v86.f32[0])), vmul_f32(*a3, v96))));
      v97.f32[0] = (float)(v77.f32[0] * v80.f32[0]) + vaddv_f32(vmul_f32(*a3, v97));
      double v101 = a5;
      float v102 = v97.f32[0];
      a2 = &v103;
      a3 = (float32x2_t *)&v101;
      goto LABEL_40;
    case 2:
      float v14 = (void **)((char *)this + 96);
LABEL_40:
      physx::Scb::Body::addSpatialVelocity(v14, a2, a3, a5);
      goto LABEL_49;
    case 3:
      uint64_t v15 = (char *)this + 96;
      unsigned int v16 = *((_DWORD *)this + 26);
      if (v16 >> 30 == 2)
      {
        float v17 = *(void **)v15;
        if (*(unsigned char *)(*(void *)v15 + 7689)) {
          goto LABEL_29;
        }
      }
      else
      {
        if (v16 >> 30 == 3)
        {
          float v17 = *(void **)v15;
LABEL_29:
          float32x2_t v26 = (float32x2_t *)*((void *)this + 14);
          if (!v26)
          {
            physx::Scb::Scene::getStream((uint64_t)v17, HIBYTE(v16) & 0xF);
            float32x2_t v26 = v27;
            *((void *)this + 14) = v27;
            float v17 = (void *)*((void *)this + 12);
          }
          *(float32x2_t *)((char *)v26 + 300) = *v5;
          v26[38].i32[1] = v5[1].i32[0];
          int8x8_t v28 = (int8x8_t)vadd_f32(*v7, v26[39]);
          v26[39] = (float32x2_t)v28;
          *(float *)v28.i32 = v7[1].f32[0] + v26[40].f32[0];
          goto LABEL_45;
        }
        float v17 = *(void **)v15;
      }
      uint64_t v29 = v17[548];
      float32x2_t v30 = (physx::Sc::BodySim **)((char *)this + 128);
      float32x2_t v31 = v5;
      float v32 = (double *)v7;
LABEL_48:
      physx::Sc::BodyCore::setSpatialAcceleration(v30, v29, (uint64_t)v31, (uint64_t)v32);
      goto LABEL_49;
    default:
      goto LABEL_49;
  }
}

void *physx::NpRigidDynamic::addTorque(void *a1, float32x2_t *a2, int a3, int a4, double a5)
{
  physx::NpRigidBodyTemplate<physx::PxRigidDynamic>::addSpatialForce((uint64_t)a1, 0, a2, a3, a5);
  LODWORD(v8) = a2->i32[0];
  BOOL v9 = 1;
  if (a2->f32[0] == 0.0)
  {
    LODWORD(v8) = a2->i32[1];
    if (*(float *)&v8 == 0.0)
    {
      LODWORD(v8) = a2[1].i32[0];
      BOOL v9 = *(float *)&v8 != 0.0;
    }
  }
  return physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(a1, (physx::Scb::Body *)(a1 + 12), v9, a4, v8);
}

void physx::NpRigidDynamic::clearForce(uint64_t a1, int a2, int8x8_t a3)
{
}

void physx::NpRigidDynamic::clearTorque(uint64_t a1, int a2, int8x8_t a3)
{
}

BOOL physx::NpRigidDynamic::isSleeping(physx::NpRigidDynamic *this)
{
  return *((_DWORD *)this + 94) != 0;
}

uint64_t *physx::NpRigidDynamic::setSleepThreshold(physx::NpRigidDynamic *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  float v4 = (char *)this + 96;
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    uint64_t v6 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    uint64_t v6 = *(void **)v4;
LABEL_5:
    uint64_t v7 = *((void *)this + 14);
    if (!v7)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v7 = v8;
      *((void *)this + 14) = v8;
      uint64_t v6 = (void *)*((void *)this + 12);
    }
    *(_DWORD *)(v7 + 196) = v2;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(v6, (uint64_t)v4, a2);
    *((_DWORD *)this + 95) |= 0x40u;
    return result;
  }
  *((_DWORD *)this + 69) = a2.i32[0];
  return updateBodySim((uint64_t *)this + 16);
}

float physx::NpRigidDynamic::getSleepThreshold(physx::NpRigidDynamic *this)
{
  if ((*((unsigned char *)this + 380) & 0x40) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 14) + 196);
  }
  else {
    uint64_t v1 = (char *)this + 276;
  }
  return *(float *)v1;
}

uint64_t *physx::NpRigidDynamic::setStabilizationThreshold(physx::NpRigidDynamic *this, int8x8_t a2)
{
  __int32 v2 = a2.i32[0];
  float v4 = (char *)this + 96;
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    uint64_t v6 = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v5 >> 30 == 3)
  {
    uint64_t v6 = *(void **)v4;
LABEL_5:
    uint64_t v7 = *((void *)this + 14);
    if (!v7)
    {
      a2 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)v6, HIBYTE(v5) & 0xF).n128_u64[0];
      uint64_t v7 = v8;
      *((void *)this + 14) = v8;
      uint64_t v6 = (void *)*((void *)this + 12);
    }
    *(_DWORD *)(v7 + 256) = v2;
    uint64_t result = physx::Scb::Scene::scheduleForUpdate(v6, (uint64_t)v4, a2);
    *((_DWORD *)this + 95) |= 0x1000u;
    return result;
  }
  *((_DWORD *)this + 70) = a2.i32[0];
  return updateBodySim((uint64_t *)this + 16);
}

float physx::NpRigidDynamic::getStabilizationThreshold(physx::NpRigidDynamic *this)
{
  if ((*((unsigned char *)this + 381) & 0x10) != 0) {
    uint64_t v1 = (char *)(*((void *)this + 14) + 256);
  }
  else {
    uint64_t v1 = (char *)this + 280;
  }
  return *(float *)v1;
}

void *physx::NpRigidDynamic::setWakeCounter(physx::NpRigidDynamic *this, double a2)
{
  return physx::Scb::Body::setWakeCounter((physx::NpRigidDynamic *)((char *)this + 96), a2);
}

float physx::NpRigidDynamic::getWakeCounter(physx::NpRigidDynamic *this)
{
  return *((float *)this + 93);
}

void *physx::NpRigidDynamic::wakeUp(physx::NpRigidDynamic *this, double a2)
{
  float v4 = (char *)this + 96;
  uint64_t v3 = *((void *)this + 12);
  LODWORD(a2) = *(_DWORD *)(v3 + 8176);
  int v5 = *((_DWORD *)v4 + 2) >> 30;
  if (v5 == 3 || v5 == 2 && *(unsigned char *)(v3 + 7689))
  {
    *((_DWORD *)this + 94) = 0;
    *((_DWORD *)this + 93) = LODWORD(a2);
    uint64_t result = physx::Scb::Scene::scheduleForUpdate((void *)v3, (uint64_t)v4, *(int8x8_t *)&a2);
    *((_DWORD *)this + 95) = *((_DWORD *)this + 95) & 0xF8FFFFFF | 0x5000000;
  }
  else
  {
    *((_DWORD *)this + 94) = 0;
    *((_DWORD *)this + 93) = LODWORD(a2);
    return (void *)physx::Sc::BodyCore::setWakeCounter((uint64_t)this + 128, *(float *)&a2, 1);
  }
  return result;
}

void *physx::NpRigidDynamic::putToSleep(physx::NpRigidDynamic *this, int8x8_t a2)
{
  return physx::Scb::Body::putToSleepInternal((physx::NpRigidDynamic *)((char *)this + 96), a2);
}

void *physx::NpRigidDynamic::setSolverIterationCounts(void *this, unsigned __int8 a2, __int16 a3, int8x8_t a4)
{
  float v4 = this;
  uint64_t v5 = (uint64_t)(this + 12);
  __int16 v6 = a2 | (unsigned __int16)(a3 << 8);
  unsigned int v7 = *((_DWORD *)this + 26);
  if (v7 >> 30 == 2)
  {
    this = *(void **)v5;
    if (*(unsigned char *)(*(void *)v5 + 7689)) {
      goto LABEL_5;
    }
  }
  else if (v7 >> 30 == 3)
  {
    this = *(void **)v5;
LABEL_5:
    uint64_t v8 = v4[14];
    if (!v8)
    {
      a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v7) & 0xF).n128_u64[0];
      uint64_t v8 = v9;
      v4[14] = v9;
      this = (void *)v4[12];
    }
    *(_WORD *)(v8 + 208) = v6;
    this = physx::Scb::Scene::scheduleForUpdate(this, v5, a4);
    *((_DWORD *)v4 + 95) |= 0x200u;
    return this;
  }
  *((_WORD *)v4 + 87) = v6;
  uint64_t v10 = v4[16];
  if (v10) {
    *(_WORD *)(v10 + 126) = v6;
  }
  return this;
}

uint64_t physx::NpRigidDynamic::getSolverIterationCounts(uint64_t this, unsigned int *a2, unsigned int *a3)
{
  if ((*(unsigned char *)(this + 381) & 2) != 0) {
    uint64_t v3 = (unsigned __int16 *)(*(void *)(this + 112) + 208);
  }
  else {
    uint64_t v3 = (unsigned __int16 *)(this + 174);
  }
  unsigned int v4 = *v3;
  *a3 = v4 >> 8;
  *a2 = v4;
  return this;
}

float *physx::NpRigidDynamic::setContactReportThreshold(float *this, double a2)
{
  __int32 v2 = this;
  uint64_t v3 = (uint64_t)(this + 24);
  if (*(float *)&a2 >= 0.0) {
    float v4 = *(float *)&a2;
  }
  else {
    float v4 = 0.0;
  }
  unsigned int v5 = *((_DWORD *)this + 26);
  if (v5 >> 30 == 2)
  {
    this = *(float **)v3;
    if (*(unsigned char *)(*(void *)v3 + 7689)) {
      goto LABEL_8;
    }
LABEL_11:
    v2[59] = v4;
    return this;
  }
  if (v5 >> 30 != 3) {
    goto LABEL_11;
  }
  this = *(float **)v3;
LABEL_8:
  uint64_t v6 = *((void *)v2 + 14);
  if (!v6)
  {
    *(void *)&a2 = physx::Scb::Scene::getStream((uint64_t)this, HIBYTE(v5) & 0xF).n128_u64[0];
    uint64_t v6 = v7;
    *((void *)v2 + 14) = v7;
    this = (float *)*((void *)v2 + 12);
  }
  *(float *)(v6 + 204) = v4;
  this = (float *)physx::Scb::Scene::scheduleForUpdate(this, v3, *(int8x8_t *)&a2);
  *((_DWORD *)v2 + 95) |= 0x100u;
  return this;
}

float physx::NpRigidDynamic::getContactReportThreshold(physx::NpRigidDynamic *this)
{
  if (*((unsigned char *)this + 381)) {
    uint64_t v1 = (char *)(*((void *)this + 14) + 204);
  }
  else {
    uint64_t v1 = (char *)this + 236;
  }
  return *(float *)v1;
}

void *physx::NpRigidDynamic::switchToNoSim(physx::NpRigidDynamic *this, int8x8_t a2)
{
  float v4 = (physx::NpRigidDynamic *)((char *)this + 96);
  uint64_t v3 = (physx::Scb::Scene *)*((void *)this + 12);
  if (v3)
  {
    if (*((unsigned char *)v3 + 7689) || (physx::Scb::Scene::switchRigidToNoSim(v3, v4, 1), *(unsigned char *)(*(void *)v4 + 7689)))
    {
      uint64_t result = physx::Scb::Body::putToSleepInternal(v4, a2);
    }
    else
    {
      *(void *)((char *)this + 364) = 0;
      *(void *)((char *)this + 372) = 0x100000000;
      *(void *)((char *)this + 348) = 0;
      *(void *)((char *)this + 356) = 0;
      uint64_t result = (void *)physx::Sc::BodyCore::putToSleep((physx::NpRigidDynamic *)((char *)this + 128));
    }
    if (*((_DWORD *)this + 26) >> 30 == 1)
    {
      uint64_t v6 = *((void *)this + 38);
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)v4 + 4384);
        if (*(unsigned char *)(v6 + 31) == 1)
        {
          return (void *)physx::Sc::BodyCore::tearDownSimStateData((uint64_t)this + 128, v7, 1);
        }
        else
        {
          --*(_DWORD *)(v7 + 548);
          *(void *)uint64_t v6 = *(void *)(v7 + 560);
          *(void *)(v7 + 560) = v6;
          *((void *)this + 38) = 0;
        }
      }
    }
  }
  else
  {
    *(void *)((char *)this + 364) = 0;
    *(void *)((char *)this + 372) = 0x100000000;
    *(void *)((char *)this + 348) = 0;
    *(void *)((char *)this + 356) = 0;
    return (void *)physx::Sc::BodyCore::putToSleep((physx::NpRigidDynamic *)((char *)this + 128));
  }
  return result;
}

uint64_t physx::NpRigidDynamic::switchFromNoSim(physx::NpRigidDynamic *this)
{
  __int32 v2 = (physx::NpRigidDynamic *)((char *)this + 96);
  uint64_t result = *((void *)this + 12);
  if (result)
  {
    if (!*(unsigned char *)(result + 7689)) {
      return physx::Scb::Scene::switchRigidFromNoSim(result, v2, 1);
    }
  }
  return result;
}

uint64_t physx::NpRigidDynamic::getRigidDynamicLockFlags@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  if ((*(unsigned char *)(this + 381) & 0x40) != 0) {
    __int32 v2 = (unsigned char *)(*(void *)(this + 112) + 264);
  }
  else {
    __int32 v2 = (unsigned char *)(this + 302);
  }
  *a2 = *v2;
  return this;
}

void *physx::NpRigidDynamic::setRigidDynamicLockFlags(void *result, char *a2, int8x8_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (uint64_t)(result + 12);
  char v5 = *a2;
  unsigned int v6 = *((_DWORD *)result + 26);
  if (v6 >> 30 == 2)
  {
    uint64_t result = *(void **)v4;
    if (*(unsigned char *)(*(void *)v4 + 7689)) {
      goto LABEL_5;
    }
LABEL_8:
    *((unsigned char *)v3 + 302) = v5;
    return result;
  }
  if (v6 >> 30 != 3) {
    goto LABEL_8;
  }
  uint64_t result = *(void **)v4;
LABEL_5:
  uint64_t v7 = v3[14];
  if (!v7)
  {
    a3 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v6) & 0xF).n128_u64[0];
    uint64_t v7 = v8;
    v3[14] = v8;
    uint64_t result = (void *)v3[12];
  }
  *(unsigned char *)(v7 + 264) = v5;
  uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, v4, a3);
  *((_DWORD *)v3 + 95) |= 0x4000u;
  return result;
}

void *physx::NpRigidDynamic::setRigidDynamicLockFlag(void *result, char a2, int a3, int8x8_t a4)
{
  uint64_t v4 = result;
  if ((*((unsigned char *)result + 381) & 0x40) != 0) {
    char v5 = (char *)(result[14] + 264);
  }
  else {
    char v5 = (char *)result + 302;
  }
  unsigned int v6 = result + 12;
  char v7 = *v5;
  char v8 = v7 | a2;
  char v9 = v7 & ~a2;
  if (a3) {
    char v10 = v8;
  }
  else {
    char v10 = v9;
  }
  unsigned int v11 = *((_DWORD *)result + 26);
  if (v11 >> 30 == 2)
  {
    uint64_t result = (void *)*v6;
    if (*(unsigned char *)(*v6 + 7689)) {
      goto LABEL_11;
    }
LABEL_14:
    *((unsigned char *)v4 + 302) = v10;
    return result;
  }
  if (v11 >> 30 != 3) {
    goto LABEL_14;
  }
  uint64_t result = (void *)*v6;
LABEL_11:
  uint64_t v12 = v4[14];
  if (!v12)
  {
    a4 = (int8x8_t)physx::Scb::Scene::getStream((uint64_t)result, HIBYTE(v11) & 0xF).n128_u64[0];
    uint64_t v12 = v13;
    v4[14] = v13;
    uint64_t result = (void *)v4[12];
  }
  *(unsigned char *)(v12 + 264) = v10;
  uint64_t result = physx::Scb::Scene::scheduleForUpdate(result, (uint64_t)(v4 + 12), a4);
  *((_DWORD *)v4 + 95) |= 0x4000u;
  return result;
}

float physx::NpRigidStatic::NpRigidStatic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 196614;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0x10000;
  *(_DWORD *)(a1 + 72) = -1;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_26E72C8B8;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0xFFFFFF;
  *(_WORD *)(a1 + 140) = 1;
  *(unsigned char *)(a1 + 142) = 0;
  *(unsigned char *)(a1 + 173) = 0;
  *(_WORD *)(a1 + 174) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(void *)(a1 + 160) = *(void *)(a2 + 16);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 168) = result;
  *(unsigned char *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 104) = 83886080;
  return result;
}

physx::PxActor *physx::NpRigidActorTemplate<physx::PxRigidStatic>::~NpRigidActorTemplate(physx::PxActor *a1)
{
  *(void *)a1 = &unk_26E72DDC8;
  uint64_t v2 = *(void *)(physx::NpFactory::mInstance + 832);
  physx::Cm::PtrTable::clear((uint64_t)a1 + 40, v2);
  physx::Cm::PtrTable::clear((uint64_t)a1 + 56, v2);
  *(void *)a1 = &unk_26E72DEE0;
  physx::NpFactory::onActorRelease(physx::NpFactory::mInstance, a1);
  return a1;
}

void physx::NpRigidStatic::~NpRigidStatic(physx::PxActor *this)
{
  *(void *)this = &unk_26E72C8B8;
  physx::NpRigidActorTemplate<physx::PxRigidStatic>::~NpRigidActorTemplate(this);
}

void physx::NpRigidStatic::~NpRigidStatic(physx::NpRigidStatic *this)
{
  *(void *)this = &unk_26E72C8B8;
  physx::NpRigidActorTemplate<physx::PxRigidStatic>::~NpRigidActorTemplate(this);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::requiresObjects(uint64_t result, uint64_t a2)
{
  if (*(_WORD *)(result + 48))
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    char v5 = (void *)(result + 40);
    uint64_t v6 = 8 * *(unsigned __int16 *)(result + 48);
    do
    {
      char v7 = v5;
      if (*(_WORD *)(v3 + 48) != 1) {
        char v7 = (void *)*v5;
      }
      float result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, v7[v4 / 8]);
      v4 += 8;
    }
    while (v6 != v4);
  }
  return result;
}

uint64_t physx::NpRigidStatic::release(physx::NpRigidStatic *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 96);
  physx::NpPhysics::notifyDeletionListeners(physx::NpPhysics::mInstance, (uint64_t)this, *((void *)this + 2), 1);
  unint64_t v4 = *((unsigned int *)this + 26);
  if ((v4 >> 30) - 1 > 1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v2;
  }
  char v6 = *((unsigned char *)v2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v4 >> 24) & 0xF) + 3) + 12);
  if (v5 && (*((unsigned char *)v2 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v4 >> 24) & 0xF) + 3) + 12) & 8) != 0)
  {
    physx::NpShapeManager::clearShapesOnRelease((uint64_t)this + 40, v5);
    physx::NpRigidActorTemplate<physx::PxRigidStatic>::release(this, v7);
  }
  else
  {
    physx::NpRigidActorTemplate<physx::PxRigidStatic>::release(this, v3);
    if (!v5) {
      goto LABEL_9;
    }
  }
  physx::Scb::Scene::removeActor(v5, (uint64_t)v2, 1, (v6 & 8) != 0, v8);
  unsigned int v10 = *((_DWORD *)this + 22);
  physx::NpScene::removeFromRigidActorList(v5 - 16, &v10);
LABEL_9:
  return physx::Scb::Base::destroy((uint64_t)v2);
}

physx::Sc::RigidSim *physx::NpRigidStatic::setGlobalPose(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = a1 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a1 + 8) + 18);
  if (((*(_DWORD *)(v10 + 8) >> 30) - 1) > 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = *(void *)v10;
    if (v11) {
      uint64_t v12 = v11 - 16;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  uint64_t v13 = a1 + 96;
  LODWORD(a3) = *(_DWORD *)a2;
  float v14 = *(float *)(a2 + 4);
  float v15 = *(float *)(a2 + 8);
  float v16 = *(float *)(a2 + 12);
  float v17 = sqrtf((float)((float)((float)(v14 * v14) + (float)(*(float *)&a3 * *(float *)&a3)) + (float)(v15 * v15))+ (float)(v16 * v16));
  float v18 = *(float *)a2 / v17;
  float v19 = v14 / v17;
  float v20 = v15 / v17;
  float v21 = v16 / v17;
  int v23 = *(_DWORD *)(a2 + 16);
  int v22 = *(_DWORD *)(a2 + 20);
  int v24 = *(_DWORD *)(a2 + 24);
  unsigned int v25 = *(_DWORD *)(a1 + 104);
  if (v25 >> 30 == 2)
  {
    float32x2_t v26 = *(void **)v13;
    if (*(unsigned char *)(*(void *)v13 + 7689)) {
      goto LABEL_10;
    }
LABEL_13:
    *(float *)(a1 + 144) = v18;
    *(float *)(a1 + 148) = v19;
    *(float *)(a1 + 152) = v20;
    *(float *)(a1 + 156) = v21;
    *(_DWORD *)(a1 + 160) = v23;
    *(_DWORD *)(a1 + 164) = v22;
    *(_DWORD *)(a1 + 168) = v24;
    float result = *(physx::Sc::RigidSim **)(a1 + 128);
    if (result) {
      float result = (physx::Sc::RigidSim *)physx::Sc::RigidSim::notifyShapesOfTransformChange(result);
    }
    goto LABEL_15;
  }
  if (v25 >> 30 != 3) {
    goto LABEL_13;
  }
  float32x2_t v26 = *(void **)v13;
LABEL_10:
  uint64_t v27 = *(void *)(a1 + 112);
  if (!v27)
  {
    *(void *)&a3 = physx::Scb::Scene::getStream((uint64_t)v26, HIBYTE(v25) & 0xF).n128_u64[0];
    uint64_t v27 = v28;
    *(void *)(a1 + 112) = v28;
    float32x2_t v26 = *(void **)(a1 + 96);
  }
  *(float *)(v27 + 176) = v18;
  *(float *)(v27 + 180) = v19;
  *(float *)(v27 + 184) = v20;
  *(float *)(v27 + 188) = v21;
  *(_DWORD *)(v27 + 192) = v23;
  *(_DWORD *)(v27 + 196) = v22;
  *(_DWORD *)(v27 + 200) = v24;
  float result = (physx::Sc::RigidSim *)physx::Scb::Scene::scheduleForUpdate(v26, a1 + 96, *(int8x8_t *)&a3);
  *(_DWORD *)(a1 + 104) |= 0x40u;
LABEL_15:
  if (v12)
  {
    float result = (physx::Sc::RigidSim *)physx::NpShapeManager::markAllSceneQueryForUpdate(a1 + 40, v12 + 8640, (_WORD *)a1);
    ++*(_DWORD *)(v12 + 8684);
  }
  if (*(void *)(a1 + 80))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidStatic.cpp", 101, "PxRigidStatic::setGlobalPose: Actor is part of a pruning structure, pruning structure is now invalid!", a7, a8, a9, v39);
    float result = (physx::Sc::RigidSim *)physx::Sq::PruningStructure::invalidate(*(void *)(a1 + 80), a1);
  }
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30)
  {
    uint64_t v31 = *(void *)(v30 + 72);
    unsigned int v32 = *(_DWORD *)(v30 + 80);
  }
  else
  {
    unsigned int v32 = 0;
    uint64_t v31 = 0;
  }
  unsigned int v33 = 0;
LABEL_23:
  if (v33 <= v32) {
    uint64_t v34 = v32;
  }
  else {
    uint64_t v34 = v33;
  }
  float32x4_t v35 = (unsigned __int8 *)(v31 + 16 * v33);
  uint64_t v36 = v34 - v33 + 1;
  while (--v36)
  {
    float32x2_t v37 = v35 + 16;
    ++v33;
    int v38 = *v35;
    v35 += 16;
    if (!v38)
    {
      float result = (physx::Sc::RigidSim *)*((void *)v37 - 1);
      if (!result) {
        return result;
      }
      float result = (physx::Sc::RigidSim *)physx::NpConstraint::comShift((uint64_t)result, a1);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t physx::NpShapeManager::markAllSceneQueryForUpdate(uint64_t result, uint64_t a2, _WORD *a3)
{
  uint64_t v4 = *(unsigned int *)(result + 32);
  if (v4 == -1)
  {
    uint64_t v6 = result;
    if (*(_WORD *)(result + 8))
    {
      uint64_t v7 = 0;
      __n128 v8 = (uint64_t *)(result + 16);
      uint64_t v9 = 8 * *(unsigned __int16 *)(result + 8);
      do
      {
        uint64_t v10 = v6 + 16;
        if (*(_WORD *)(v6 + 24) != 1) {
          uint64_t v10 = *v8;
        }
        unint64_t v11 = *(void *)(v10 + v7);
        if (v11 != 0xFFFFFFFF)
        {
          *(unsigned char *)(a2 + 208) = 1;
          float result = physx::Sq::PrunerExt::addToDirtyList(a2 + 48 * (v11 & 1), v11 >> 1);
        }
        v7 += 8;
      }
      while (v9 != v7);
    }
  }
  else
  {
    BOOL v5 = (a3[4] & 0xFFF7) == 5;
    (*(void (**)(void *__return_ptr, _WORD *))(*(void *)a3 + 152))(v12, a3);
    float result = (*(uint64_t (**)(void, uint64_t, void *))(**(void **)(a2 + 96) + 16))(*(void *)(a2 + 96), v4, v12);
    ++*(_DWORD *)(a2 + 48 * v5 + 44);
  }
  return result;
}

float physx::NpRigidStatic::getGlobalPose@<S0>(physx::NpRigidStatic *this@<X0>, uint64_t a2@<X8>)
{
  if ((*((unsigned char *)this + 104) & 0x40) != 0) {
    uint64_t v2 = (char *)(*((void *)this + 14) + 176);
  }
  else {
    uint64_t v2 = (char *)this + 144;
  }
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(void *)(a2 + 16) = *((void *)v2 + 2);
  float result = *((float *)v2 + 6);
  *(float *)(a2 + 24) = result;
  return result;
}

void physx::NpRigidStatic::switchToNoSim(physx::NpRigidStatic *this)
{
  uint64_t v2 = (physx::NpRigidStatic *)((char *)this + 96);
  uint64_t v1 = (physx::Scb::Scene *)*((void *)this + 12);
  if (v1)
  {
    if (!*((unsigned char *)v1 + 7689)) {
      physx::Scb::Scene::switchRigidToNoSim(v1, v2, 0);
    }
  }
}

uint64_t physx::NpRigidStatic::switchFromNoSim(physx::NpRigidStatic *this)
{
  uint64_t v2 = (physx::NpRigidStatic *)((char *)this + 96);
  uint64_t result = *((void *)this + 12);
  if (result)
  {
    if (!*(unsigned char *)(result + 7689)) {
      return physx::Scb::Scene::switchRigidFromNoSim(result, v2, 0);
    }
  }
  return result;
}

uint64_t physx::NpScene::NpScene(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E72C9D0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 16;
  physx::Scb::Scene::Scene(a1 + 16, a2, a1);
  physx::Sq::SceneQueryManager::SceneQueryManager(a1 + 8640, v4, *(_DWORD *)(a2 + 176), *(_DWORD *)(a2 + 180), *(unsigned int *)(a2 + 184), a2 + 96);
  *(void *)(a1 + 8856) = gRaycastMap;
  *(void *)(a1 + 8864) = gGeomSweepFuncs;
  *(void *)(a1 + 8872) = gGeomOverlapMethodTable;
  *(_OWORD *)(a1 + 8896) = 0u;
  *(_DWORD *)(a1 + 8912) = 0;
  *(void *)(a1 + 8888) = a1;
  *(void *)(a1 + 8880) = &unk_26E72E0B0;
  *(void *)(a1 + 8928) = "NpSceneQueries.sceneQueriesStaticPrunerUpdate";
  *(_OWORD *)(a1 + 8952) = 0u;
  *(_DWORD *)(a1 + 8968) = 0;
  *(void *)(a1 + 8944) = a1;
  *(void *)(a1 + 8936) = &unk_26E72E140;
  *(void *)(a1 + 8984) = "NpSceneQueries.sceneQueriesDynamicPrunerUpdate";
  *(_DWORD *)(a1 + 8992) = *(_DWORD *)(a2 + 188);
  *(void *)(a1 + 8920) = a1;
  *(void *)(a1 + 8976) = a1;
  *(void *)a1 = &unk_26E72CD98;
  *(void *)(a1 + 9000) = &unk_26E722EE8;
  *(_OWORD *)(a1 + 9008) = 0u;
  *(_OWORD *)(a1 + 9024) = 0u;
  *(_OWORD *)(a1 + 9040) = 0u;
  *(_OWORD *)(a1 + 9056) = 0u;
  *(_OWORD *)(a1 + 9072) = 0u;
  *(_OWORD *)(a1 + 9088) = 0u;
  *(_OWORD *)(a1 + 9104) = 0u;
  *(void *)(a1 + 9120) = 0;
  *(void *)(a1 + 9128) = -3233808384;
  *(void *)(a1 + 9136) = 0;
  physx::shdfnd::internal::HashBase<physx::PxConstraint *,physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::internal::HashSetBase<physx::PxConstraint *,physx::shdfnd::Hash<physx::PxConstraint *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 9088, 0x40u, 0);
  *(void *)(a1 + 9192) = 0;
  *(_OWORD *)(a1 + 9160) = 0u;
  *(_OWORD *)(a1 + 9176) = 0u;
  *(_OWORD *)(a1 + 9144) = 0u;
  *(void *)(a1 + 9200) = -3233808384;
  *(void *)(a1 + 9208) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 9160, 0x40u, 0);
  *(void *)(a1 + 9248) = 0;
  *(_OWORD *)(a1 + 9232) = 0u;
  *(_OWORD *)(a1 + 9216) = 0u;
  *(void *)(a1 + 9256) = -3233808384;
  *(void *)(a1 + 9264) = 0;
  physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 9216, 0x40u, 0);
  *(_OWORD *)(a1 + 9272) = 0u;
  *(void *)(a1 + 9288) = *(void *)(a2 + 236);
  *(void *)(a1 + 9296) = *(void *)(a2 + 244);
  *(void *)(a1 + 9304) = *(void *)(a2 + 252);
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT((uint64_t *)(a1 + 9312));
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT((uint64_t *)(a1 + 9320));
  BOOL v5 = physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT((uint64_t *)(a1 + 9328));
  *(_DWORD *)(a1 + 9340) = 1;
  *(_OWORD *)(a1 + 9344) = 0u;
  *(void *)(a1 + 9400) = 0;
  *(void *)(a1 + 9392) = 0;
  *(_DWORD *)(a1 + 9408) = 0;
  *(void *)(a1 + 9384) = a1;
  *(void *)(a1 + 9376) = &unk_26E72DFE0;
  *(void *)(a1 + 9416) = a1 + 9312;
  *(void *)(a1 + 9448) = 0;
  *(void *)(a1 + 9440) = 0;
  *(_DWORD *)(a1 + 9456) = 0;
  *(void *)(a1 + 9432) = a1;
  *(void *)(a1 + 9424) = &unk_26E72DFE0;
  *(void *)(a1 + 9464) = a1 + 9320;
  *(void *)(a1 + 9496) = 0;
  *(void *)(a1 + 9488) = 0;
  *(_DWORD *)(a1 + 9504) = 0;
  *(void *)(a1 + 9480) = a1;
  *(void *)(a1 + 9472) = &unk_26E72DFE0;
  *(void *)(a1 + 9512) = v5;
  *(void *)(a1 + 9536) = 0;
  *(void *)(a1 + 9544) = 0;
  *(_DWORD *)(a1 + 9552) = 0;
  *(void *)(a1 + 9528) = a1;
  *(void *)(a1 + 9520) = &unk_26E72E1D0;
  *(void *)(a1 + 9560) = 0;
  *(void *)(a1 + 9568) = "NpScene.execution";
  *(void *)(a1 + 9600) = 0;
  *(void *)(a1 + 9592) = 0;
  *(_DWORD *)(a1 + 9608) = 0;
  *(void *)(a1 + 9584) = a1;
  *(void *)(a1 + 9576) = &unk_26E72E260;
  *(void *)(a1 + 9616) = 0;
  *(void *)(a1 + 9624) = "NpScene.collide";
  *(void *)(a1 + 9656) = 0;
  *(void *)(a1 + 9648) = 0;
  *(_DWORD *)(a1 + 9664) = 0;
  *(void *)(a1 + 9640) = a1;
  *(void *)(a1 + 9632) = &unk_26E72E2F0;
  *(void *)(a1 + 9672) = 0;
  *(void *)(a1 + 9680) = "NpScene.solve";
  *(unsigned char *)(a1 + 9688) = 0;
  *(_DWORD *)(a1 + 9692) = 0;
  *(_DWORD *)(a1 + 9696) = 0;
  *(_DWORD *)(a1 + 9700) = 0;
  *(_DWORD *)(a1 + 9704) = 0;
  *(void *)(a1 + 9712) = 0;
  physx::shdfnd::ReadWriteLock::ReadWriteLock((physx::shdfnd::ReadWriteLock *)(a1 + 9720));
  *(_DWORD *)(a1 + 9728) = 0;
  *(void *)(a1 + 9560) = a1;
  *(void *)(a1 + 9616) = a1;
  *(void *)(a1 + 9672) = a1;
  *(_OWORD *)(a1 + 9360) = *(_OWORD *)(a1 + 7488);
  pthread_key_t v7 = 0;
  pthread_key_create(&v7, 0);
  *(_DWORD *)(a1 + 9708) = v7;
  return a1;
}

void *physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesDynamicPrunerUpdate>::~DelegateTask(void *result)
{
  *uint64_t result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::NpSceneQueries,&physx::NpSceneQueries::sceneQueriesStaticPrunerUpdate>::~DelegateTask(void *result)
{
  *uint64_t result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void physx::NpScene::~NpScene(physx::NpScene *this)
{
  *(void *)this = &unk_26E72CD98;
  int v2 = *((_DWORD *)this + 2317);
  if (v2)
  {
    unsigned int v3 = v2 - 1;
    do
    {
      uint64_t v4 = v3;
      (*(void (**)(physx::NpScene *, void, void))(*(void *)this + 136))(this, *(void *)(*((void *)this + 1153) + 8 * v3--), 0);
    }
    while (v4);
  }
  int v5 = *((_DWORD *)this + 2288);
  if (v5)
  {
    unsigned int v6 = v5 - 1;
    do
    {
      uint64_t v7 = v6;
      (*(void (**)(physx::NpScene *, void, void))(*(void *)this + 112))(this, *(void *)(*((void *)this + 1143) + 8 * v6--), 0);
    }
    while (v7);
  }
  int v8 = *((_DWORD *)this + 2303);
  if (v8)
  {
    unsigned int v9 = v8 - 1;
    do
    {
      uint64_t v10 = v9;
      (*(void (**)(physx::NpScene *, void, void))(*(void *)this + 80))(this, *(void *)(*((void *)this + 1146) + 8 * v9--), 0);
    }
    while (v10);
  }
  uint64_t v11 = 8608;
  if ((*((unsigned char *)this + 8624) & 4) == 0) {
    uint64_t v11 = 4300;
  }
  int v12 = *(_DWORD *)((char *)this + v11);
  int v13 = *((_DWORD *)this + 2320);
  if (v13)
  {
    unsigned int v14 = v13 - 1;
    do
    {
      uint64_t v15 = *(void *)(*((void *)this + 1159) + 8 * v14);
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 96))(v15);
      }
    }
    while ((unint64_t)v14--);
  }
  *((_DWORD *)this + 2320) = 0;
  float v17 = (void *)((char *)this + 32);
  physx::Sc::Scene::release((physx::NpScene *)((char *)this + 32));
  *((_DWORD *)this + 1954) = 0;
  *((_DWORD *)this + 1958) = 0;
  *((_DWORD *)this + 1962) = 0;
  physx::Cm::FlushPool::clear((pthread_mutex_t **)this + 964);
  if ((v12 & 0x200) != 0) {
    (*(void (**)(physx::NpScene *))(*(void *)this + 808))(this);
  }
  pthread_key_delete(*((unsigned int *)this + 2427));
  physx::shdfnd::ReadWriteLock::~ReadWriteLock((pthread_mutex_t ***)this + 1215);
  *((void *)this + 1204) = &unk_26E7231E8;
  *((void *)this + 1206) = 0;
  *((void *)this + 1197) = &unk_26E7231E8;
  *((void *)this + 1199) = 0;
  *((void *)this + 1190) = &unk_26E7231E8;
  *((void *)this + 1192) = 0;
  *((void *)this + 1184) = &unk_26E7231E8;
  *((void *)this + 1186) = 0;
  *((void *)this + 1178) = &unk_26E7231E8;
  *((void *)this + 1180) = 0;
  *((void *)this + 1172) = &unk_26E7231E8;
  *((void *)this + 1174) = 0;
  int v18 = *((_DWORD *)this + 2339);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((void *)this + 1168)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT((pthread_mutex_t **)this + 1166);
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT((pthread_mutex_t **)this + 1165);
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::~SyncT((pthread_mutex_t **)this + 1164);
  int v19 = *((_DWORD *)this + 2321);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((void *)this + 1159)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 1152)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 1145)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v20 = *((_DWORD *)this + 2289);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((void *)this + 1143)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 1136)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Cm::RenderBuffer::~RenderBuffer((physx::NpScene *)((char *)this + 9000));
  *(void *)this = &unk_26E72C9D0;
  *((void *)this + 1117) = &unk_26E7231E8;
  *((void *)this + 1119) = 0;
  *((void *)this + 1110) = &unk_26E7231E8;
  *((void *)this + 1112) = 0;
  physx::Sq::SceneQueryManager::~SceneQueryManager((pthread_mutex_t **)this + 1080);
  if (*((void *)this + 1017)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 1010)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 1003)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 996)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 989)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 982)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v21 = *((_DWORD *)this + 1963);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((void *)this + 980)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v22 = *((_DWORD *)this + 1959);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((void *)this + 978)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v23 = *((_DWORD *)this + 1955);
  if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0 && *((void *)this + 976)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 969)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Cm::FlushPool::~FlushPool((physx::NpScene *)((char *)this + 7712));
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 962);
  int v24 = *((_DWORD *)this + 1923);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && *((void *)this + 960)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 958) && (*((_DWORD *)this + 1918) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 958) = 0;
  if (*((void *)this + 956) && (*((_DWORD *)this + 1914) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 956) = 0;
  int v25 = *((_DWORD *)this + 1911);
  if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && *((void *)this + 954)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v26 = *((_DWORD *)this + 1905);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0 && *((void *)this + 951)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v27 = *((_DWORD *)this + 1901);
  if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && *((void *)this + 949)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v28 = *((_DWORD *)this + 1897);
  if ((v28 & 0x80000000) == 0 && (v28 & 0x7FFFFFFF) != 0 && *((void *)this + 947)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 940)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  physx::Cm::FlushPool::~FlushPool((physx::NpScene *)((char *)this + 7448));
  *((void *)this + 924) = &unk_26E7231E8;
  *((void *)this + 926) = 0;
  *((void *)this + 917) = &unk_26E7231E8;
  *((void *)this + 919) = 0;
  *((void *)this + 910) = &unk_26E7231E8;
  *((void *)this + 912) = 0;
  *((void *)this + 903) = &unk_26E7231E8;
  *((void *)this + 905) = 0;
  *((void *)this + 896) = &unk_26E7231E8;
  *((void *)this + 898) = 0;
  *((void *)this + 889) = &unk_26E7231E8;
  *((void *)this + 891) = 0;
  *((void *)this + 882) = &unk_26E7231E8;
  *((void *)this + 884) = 0;
  *((void *)this + 875) = &unk_26E7231E8;
  *((void *)this + 877) = 0;
  *((void *)this + 853) = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 873);
  int v29 = *((_DWORD *)this + 1743);
  if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0)
  {
    uint64_t v30 = (physx::NpScene *)*((void *)this + 870);
    if (v30 == (physx::NpScene *)((char *)this + 6920))
    {
      *((unsigned char *)this + 6952) = 0;
    }
    else if (v30)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v31 = *((_DWORD *)this + 1729);
  if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0)
  {
    unsigned int v32 = (physx::NpScene *)*((void *)this + 863);
    if (v32 == (physx::NpScene *)((char *)this + 6864))
    {
      *((unsigned char *)this + 6896) = 0;
    }
    else if (v32)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 846) = &unk_26E7231E8;
  *((void *)this + 848) = 0;
  *((void *)this + 839) = &unk_26E7231E8;
  *((void *)this + 841) = 0;
  *((void *)this + 832) = &unk_26E7231E8;
  *((void *)this + 834) = 0;
  *((void *)this + 825) = &unk_26E7231E8;
  *((void *)this + 827) = 0;
  *((void *)this + 818) = &unk_26E7231E8;
  *((void *)this + 820) = 0;
  *((void *)this + 811) = &unk_26E7231E8;
  *((void *)this + 813) = 0;
  *((void *)this + 804) = &unk_26E7231E8;
  *((void *)this + 806) = 0;
  *((void *)this + 797) = &unk_26E7231E8;
  *((void *)this + 799) = 0;
  *((void *)this + 790) = &unk_26E7231E8;
  *((void *)this + 792) = 0;
  *((void *)this + 783) = &unk_26E7231E8;
  *((void *)this + 785) = 0;
  *((void *)this + 776) = &unk_26E7231E8;
  *((void *)this + 778) = 0;
  *((void *)this + 769) = &unk_26E7231E8;
  *((void *)this + 771) = 0;
  *((void *)this + 762) = &unk_26E7231E8;
  *((void *)this + 764) = 0;
  *((void *)this + 755) = &unk_26E7231E8;
  *((void *)this + 757) = 0;
  *((void *)this + 748) = &unk_26E7231E8;
  *((void *)this + 750) = 0;
  *((void *)this + 741) = &unk_26E7231E8;
  *((void *)this + 743) = 0;
  *((void *)this + 734) = &unk_26E7231E8;
  *((void *)this + 736) = 0;
  *((void *)this + 727) = &unk_26E7231E8;
  *((void *)this + 729) = 0;
  *((void *)this + 720) = &unk_26E7231E8;
  *((void *)this + 722) = 0;
  *((void *)this + 713) = &unk_26E7231E8;
  *((void *)this + 715) = 0;
  *((void *)this + 706) = &unk_26E7231E8;
  *((void *)this + 708) = 0;
  *((void *)this + 699) = &unk_26E7231E8;
  *((void *)this + 701) = 0;
  *((void *)this + 692) = &unk_26E7231E8;
  *((void *)this + 694) = 0;
  *((void *)this + 685) = &unk_26E7231E8;
  *((void *)this + 687) = 0;
  *((void *)this + 678) = &unk_26E7231E8;
  *((void *)this + 680) = 0;
  *((void *)this + 671) = &unk_26E7231E8;
  *((void *)this + 673) = 0;
  *((void *)this + 664) = &unk_26E7231E8;
  *((void *)this + 666) = 0;
  unsigned int v33 = *((_DWORD *)this + 1324);
  if (v33)
  {
    uint64_t v34 = (void (***)(void))*((void *)this + 661);
    unint64_t v35 = (unint64_t)&v34[7 * v33];
    uint64_t v36 = v34;
    float32x2_t v37 = v34;
    do
    {
      int v38 = *v37;
      v37 += 7;
      (*v38)(v36);
      v34 += 7;
      uint64_t v36 = v37;
    }
    while ((unint64_t)v37 < v35);
  }
  int v39 = *((_DWORD *)this + 1325);
  if ((v39 & 0x80000000) == 0 && (v39 & 0x7FFFFFFF) != 0 && *((void *)this + 661)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unsigned int v40 = *((_DWORD *)this + 1320);
  if (v40)
  {
    float32x2_t v41 = (void (***)(void))*((void *)this + 659);
    unint64_t v42 = (unint64_t)&v41[7 * v40];
    float32x2_t v43 = v41;
    float32x2_t v44 = v41;
    do
    {
      float32x2_t v45 = *v44;
      v44 += 7;
      (*v45)(v43);
      v41 += 7;
      float32x2_t v43 = v44;
    }
    while ((unint64_t)v44 < v42);
  }
  int v46 = *((_DWORD *)this + 1321);
  if ((v46 & 0x80000000) == 0 && (v46 & 0x7FFFFFFF) != 0 && *((void *)this + 659)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unsigned int v47 = *((_DWORD *)this + 1316);
  if (v47)
  {
    float32x2_t v48 = (void (***)(void))*((void *)this + 657);
    unint64_t v49 = (unint64_t)&v48[7 * v47];
    float v50 = v48;
    float v51 = v48;
    do
    {
      float v52 = *v51;
      v51 += 7;
      (*v52)(v50);
      v48 += 7;
      float v50 = v51;
    }
    while ((unint64_t)v51 < v49);
  }
  int v53 = *((_DWORD *)this + 1317);
  if ((v53 & 0x80000000) == 0 && (v53 & 0x7FFFFFFF) != 0 && *((void *)this + 657)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unsigned int v54 = *((_DWORD *)this + 1312);
  if (v54)
  {
    float v55 = (void (***)(void))*((void *)this + 655);
    unint64_t v56 = (unint64_t)&v55[7 * v54];
    int8x8_t v57 = v55;
    float32x2_t v58 = v55;
    do
    {
      float32x2_t v59 = *v58;
      v58 += 7;
      (*v59)(v57);
      v55 += 7;
      int8x8_t v57 = v58;
    }
    while ((unint64_t)v58 < v56);
  }
  int v60 = *((_DWORD *)this + 1313);
  if ((v60 & 0x80000000) == 0 && (v60 & 0x7FFFFFFF) != 0 && *((void *)this + 655)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unsigned int v61 = *((_DWORD *)this + 1308);
  if (v61)
  {
    float32x2_t v62 = (void (***)(void))*((void *)this + 653);
    unint64_t v63 = (unint64_t)&v62[7 * v61];
    float32x2_t v64 = v62;
    float32x2_t v65 = v62;
    do
    {
      float32x2_t v66 = *v65;
      v65 += 7;
      (*v66)(v64);
      v62 += 7;
      float32x2_t v64 = v65;
    }
    while ((unint64_t)v65 < v63);
  }
  int v67 = *((_DWORD *)this + 1309);
  if ((v67 & 0x80000000) == 0 && (v67 & 0x7FFFFFFF) != 0 && *((void *)this + 653)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  unsigned int v68 = *((_DWORD *)this + 1304);
  if (v68)
  {
    float v69 = (void (***)(void))*((void *)this + 651);
    unint64_t v70 = (unint64_t)&v69[7 * v68];
    float32x4_t v71 = v69;
    float32x2_t v72 = v69;
    do
    {
      float32x2_t v73 = *v72;
      v72 += 7;
      (*v73)(v71);
      v69 += 7;
      float32x4_t v71 = v72;
    }
    while ((unint64_t)v72 < v70);
  }
  int v74 = *((_DWORD *)this + 1305);
  if ((v74 & 0x80000000) == 0 && (v74 & 0x7FFFFFFF) != 0 && *((void *)this + 651)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 644) = &unk_26E7231E8;
  *((void *)this + 646) = 0;
  *((void *)this + 622) = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 642);
  int v75 = *((_DWORD *)this + 1281);
  if ((v75 & 0x80000000) == 0 && (v75 & 0x7FFFFFFF) != 0)
  {
    float32x2_t v76 = (physx::NpScene *)*((void *)this + 639);
    if (v76 == (physx::NpScene *)((char *)this + 5072))
    {
      *((unsigned char *)this + 5104) = 0;
    }
    else if (v76)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v77 = *((_DWORD *)this + 1267);
  if ((v77 & 0x80000000) == 0 && (v77 & 0x7FFFFFFF) != 0)
  {
    float32x2_t v78 = (physx::NpScene *)*((void *)this + 632);
    if (v78 == (physx::NpScene *)((char *)this + 5016))
    {
      *((unsigned char *)this + 5048) = 0;
    }
    else if (v78)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 600) = &unk_26E726230;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 620);
  int v79 = *((_DWORD *)this + 1237);
  if ((v79 & 0x80000000) == 0 && (v79 & 0x7FFFFFFF) != 0)
  {
    float32x2_t v80 = (physx::NpScene *)*((void *)this + 617);
    if (v80 == (physx::NpScene *)((char *)this + 4896))
    {
      *((unsigned char *)this + 4928) = 0;
    }
    else if (v80)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v81 = *((_DWORD *)this + 1223);
  if ((v81 & 0x80000000) == 0 && (v81 & 0x7FFFFFFF) != 0)
  {
    float32x2_t v82 = (physx::NpScene *)*((void *)this + 610);
    if (v82 == (physx::NpScene *)((char *)this + 4840))
    {
      *((unsigned char *)this + 4872) = 0;
    }
    else if (v82)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((void *)this + 593) = &unk_26E7231E8;
  *((void *)this + 595) = 0;
  if (*((void *)this + 568) && (*((_DWORD *)this + 1138) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 568) = 0;
  int v83 = *((_DWORD *)this + 1135);
  if ((v83 & 0x80000000) == 0 && (v83 & 0x7FFFFFFF) != 0 && *((void *)this + 566)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v84 = *((_DWORD *)this + 1131);
  if ((v84 & 0x80000000) == 0 && (v84 & 0x7FFFFFFF) != 0 && *((void *)this + 564)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v85 = *((_DWORD *)this + 1127);
  if ((v85 & 0x80000000) == 0 && (v85 & 0x7FFFFFFF) != 0 && *((void *)this + 562)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v86 = *((_DWORD *)this + 1123);
  if ((v86 & 0x80000000) == 0 && (v86 & 0x7FFFFFFF) != 0 && *((void *)this + 560)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v87 = *((_DWORD *)this + 1119);
  if ((v87 & 0x80000000) == 0 && (v87 & 0x7FFFFFFF) != 0 && *((void *)this + 558)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 556) && (*((_DWORD *)this + 1114) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 556) = 0;
  if (*((void *)this + 554) && (*((_DWORD *)this + 1110) & 0x80000000) == 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *((void *)this + 554) = 0;
  int v88 = *((_DWORD *)this + 1107);
  if ((v88 & 0x80000000) == 0 && (v88 & 0x7FFFFFFF) != 0 && *((void *)this + 552)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v89 = *((_DWORD *)this + 1067);
  if ((v89 & 0x80000000) == 0 && (v89 & 0x7FFFFFFF) != 0 && *((void *)this + 532)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v90 = *((_DWORD *)this + 1063);
  if ((v90 & 0x80000000) == 0 && (v90 & 0x7FFFFFFF) != 0 && *((void *)this + 530)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v91 = *((_DWORD *)this + 1059);
  if ((v91 & 0x80000000) == 0 && (v91 & 0x7FFFFFFF) != 0 && *((void *)this + 528)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v92 = *((_DWORD *)this + 1055);
  if ((v92 & 0x80000000) == 0 && (v92 & 0x7FFFFFFF) != 0 && *((void *)this + 526)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v93 = *((_DWORD *)this + 1051);
  if ((v93 & 0x80000000) == 0 && (v93 & 0x7FFFFFFF) != 0 && *((void *)this + 524)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 516)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 509)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((_DWORD *)this + 1001))
  {
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    uint64_t v94 = *((void *)this + 502);
    if (v94)
    {
      do
      {
        uint64_t v159 = v94;
        int v95 = v161;
        if ((HIDWORD(v161) & 0x7FFFFFFFu) <= v161)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>::growAndPushBack((uint64_t)&v160, &v159);
        }
        else
        {
          *(void *)&v160[8 * v161] = v94;
          LODWORD(v161) = v95 + 1;
        }
        uint64_t v94 = **((void **)this + 502);
        *((void *)this + 502) = v94;
      }
      while (v94);
      float32x2_t v96 = v160;
      int v97 = v161;
    }
    else
    {
      int v97 = 0;
      float32x2_t v96 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>(v96, v97);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,384u>>>(*((char **)this + 498), *((_DWORD *)this + 998));
    if ((v161 & 0x8000000000000000) == 0 && (v161 & 0x7FFFFFFF00000000) != 0 && v160) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v98 = *((unsigned int *)this + 998);
  if (v98)
  {
    BOOL v99 = (void *)*((void *)this + 498);
    uint64_t v100 = 8 * v98;
    do
    {
      if (*v99) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v99;
      v100 -= 8;
    }
    while (v100);
  }
  int v101 = *((_DWORD *)this + 999);
  if ((v101 & 0x80000000) == 0 && (v101 & 0x7FFFFFFF) != 0)
  {
    float v102 = (physx::NpScene *)*((void *)this + 498);
    if (v102 == (physx::NpScene *)((char *)this + 3464))
    {
      *((unsigned char *)this + 3976) = 0;
    }
    else if (v102)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 859))
  {
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    uint64_t v103 = *((void *)this + 431);
    if (v103)
    {
      do
      {
        uint64_t v159 = v103;
        int v104 = v161;
        if ((HIDWORD(v161) & 0x7FFFFFFFu) <= v161)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>::growAndPushBack((uint64_t)&v160, &v159);
        }
        else
        {
          *(void *)&v160[8 * v161] = v103;
          LODWORD(v161) = v104 + 1;
        }
        uint64_t v103 = **((void **)this + 431);
        *((void *)this + 431) = v103;
      }
      while (v103);
      float v105 = v160;
      int v106 = v161;
    }
    else
    {
      int v106 = 0;
      float v105 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>(v105, v106);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,256u>>>(*((char **)this + 427), *((_DWORD *)this + 856));
    if ((v161 & 0x8000000000000000) == 0 && (v161 & 0x7FFFFFFF00000000) != 0 && v160) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v107 = *((unsigned int *)this + 856);
  if (v107)
  {
    float v108 = (void *)*((void *)this + 427);
    uint64_t v109 = 8 * v107;
    do
    {
      if (*v108) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v108;
      v109 -= 8;
    }
    while (v109);
  }
  int v110 = *((_DWORD *)this + 857);
  if ((v110 & 0x80000000) == 0 && (v110 & 0x7FFFFFFF) != 0)
  {
    float v111 = (physx::NpScene *)*((void *)this + 427);
    if (v111 == (physx::NpScene *)((char *)this + 2896))
    {
      *((unsigned char *)this + 3408) = 0;
    }
    else if (v111)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 717))
  {
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    uint64_t v112 = *((void *)this + 360);
    if (v112)
    {
      do
      {
        uint64_t v159 = v112;
        int v113 = v161;
        if ((HIDWORD(v161) & 0x7FFFFFFFu) <= v161)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>::growAndPushBack((uint64_t)&v160, &v159);
        }
        else
        {
          *(void *)&v160[8 * v161] = v112;
          LODWORD(v161) = v113 + 1;
        }
        uint64_t v112 = **((void **)this + 360);
        *((void *)this + 360) = v112;
      }
      while (v112);
      unsigned int v114 = v160;
      int v115 = v161;
    }
    else
    {
      int v115 = 0;
      unsigned int v114 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>(v114, v115);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<unsigned char,128u>>>(*((char **)this + 356), *((_DWORD *)this + 714));
    if ((v161 & 0x8000000000000000) == 0 && (v161 & 0x7FFFFFFF00000000) != 0 && v160) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v116 = *((unsigned int *)this + 714);
  if (v116)
  {
    float v117 = (void *)*((void *)this + 356);
    uint64_t v118 = 8 * v116;
    do
    {
      if (*v117) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v117;
      v118 -= 8;
    }
    while (v118);
  }
  int v119 = *((_DWORD *)this + 715);
  if ((v119 & 0x80000000) == 0 && (v119 & 0x7FFFFFFF) != 0)
  {
    unsigned int v120 = (physx::NpScene *)*((void *)this + 356);
    if (v120 == (physx::NpScene *)((char *)this + 2328))
    {
      *((unsigned char *)this + 2840) = 0;
    }
    else if (v120)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((void *)this + 283)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v121 = *((_DWORD *)this + 565);
  if ((v121 & 0x80000000) == 0 && (v121 & 0x7FFFFFFF) != 0 && *((void *)this + 281)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 274)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v122 = *((_DWORD *)this + 543);
  if ((v122 & 0x80000000) == 0 && (v122 & 0x7FFFFFFF) != 0 && *((void *)this + 270)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v123 = *((_DWORD *)this + 539);
  if ((v123 & 0x80000000) == 0 && (v123 & 0x7FFFFFFF) != 0 && *((void *)this + 268)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v124 = *((_DWORD *)this + 535);
  if ((v124 & 0x80000000) == 0 && (v124 & 0x7FFFFFFF) != 0 && *((void *)this + 266)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 254)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v125 = *((_DWORD *)this + 503);
  if ((v125 & 0x80000000) == 0 && (v125 & 0x7FFFFFFF) != 0 && *((void *)this + 250)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((_DWORD *)this + 463))
  {
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    uint64_t v126 = *((void *)this + 233);
    if (v126)
    {
      do
      {
        uint64_t v159 = v126;
        int v127 = v161;
        if ((HIDWORD(v161) & 0x7FFFFFFFu) <= v161)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>::growAndPushBack((uint64_t)&v160, &v159);
        }
        else
        {
          *(void *)&v160[8 * v161] = v126;
          LODWORD(v161) = v127 + 1;
        }
        uint64_t v126 = **((void **)this + 233);
        *((void *)this + 233) = v126;
      }
      while (v126);
      float v128 = v160;
      int v129 = v161;
    }
    else
    {
      int v129 = 0;
      float v128 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>(v128, v129);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,32u>>>(*((char **)this + 229), *((_DWORD *)this + 460));
    if ((v161 & 0x8000000000000000) == 0 && (v161 & 0x7FFFFFFF00000000) != 0 && v160) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v130 = *((unsigned int *)this + 460);
  if (v130)
  {
    float v131 = (void *)*((void *)this + 229);
    uint64_t v132 = 8 * v130;
    do
    {
      if (*v131) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v131;
      v132 -= 8;
    }
    while (v132);
  }
  int v133 = *((_DWORD *)this + 461);
  if ((v133 & 0x80000000) == 0 && (v133 & 0x7FFFFFFF) != 0)
  {
    float v134 = (physx::NpScene *)*((void *)this + 229);
    if (v134 == (physx::NpScene *)((char *)this + 1312))
    {
      *((unsigned char *)this + 1824) = 0;
    }
    else if (v134)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 321))
  {
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    uint64_t v135 = *((void *)this + 162);
    if (v135)
    {
      do
      {
        uint64_t v159 = v135;
        int v136 = v161;
        if ((HIDWORD(v161) & 0x7FFFFFFFu) <= v161)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>::growAndPushBack((uint64_t)&v160, &v159);
        }
        else
        {
          *(void *)&v160[8 * v161] = v135;
          LODWORD(v161) = v136 + 1;
        }
        uint64_t v135 = **((void **)this + 162);
        *((void *)this + 162) = v135;
      }
      while (v135);
      float v137 = v160;
      int v138 = v161;
    }
    else
    {
      int v138 = 0;
      float v137 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>(v137, v138);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,16u>>>(*((char **)this + 158), *((_DWORD *)this + 318));
    if ((v161 & 0x8000000000000000) == 0 && (v161 & 0x7FFFFFFF00000000) != 0 && v160) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v139 = *((unsigned int *)this + 318);
  if (v139)
  {
    uint64_t v140 = (void *)*((void *)this + 158);
    uint64_t v141 = 8 * v139;
    do
    {
      if (*v140) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v140;
      v141 -= 8;
    }
    while (v141);
  }
  int v142 = *((_DWORD *)this + 319);
  if ((v142 & 0x80000000) == 0 && (v142 & 0x7FFFFFFF) != 0)
  {
    float v143 = (physx::NpScene *)*((void *)this + 158);
    if (v143 == (physx::NpScene *)((char *)this + 744))
    {
      *((unsigned char *)this + 1256) = 0;
    }
    else if (v143)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  if (*((_DWORD *)this + 179))
  {
    uint64_t v160 = 0;
    uint64_t v161 = 0;
    uint64_t v144 = *((void *)this + 91);
    if (v144)
    {
      do
      {
        uint64_t v159 = v144;
        int v145 = v161;
        if ((HIDWORD(v161) & 0x7FFFFFFFu) <= v161)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>::growAndPushBack((uint64_t)&v160, &v159);
        }
        else
        {
          *(void *)&v160[8 * v161] = v144;
          LODWORD(v161) = v145 + 1;
        }
        uint64_t v144 = **((void **)this + 91);
        *((void *)this + 91) = v144;
      }
      while (v144);
      float v146 = v160;
      int v147 = v161;
    }
    else
    {
      int v147 = 0;
      float v146 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>(v146, v147);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Sc::Scene::Block<void *,8u>>>(*((char **)this + 87), *((_DWORD *)this + 176));
    if ((v161 & 0x8000000000000000) == 0 && (v161 & 0x7FFFFFFF00000000) != 0 && v160) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  uint64_t v148 = *((unsigned int *)this + 176);
  if (v148)
  {
    float v149 = (void *)*((void *)this + 87);
    uint64_t v150 = 8 * v148;
    do
    {
      if (*v149) {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      ++v149;
      v150 -= 8;
    }
    while (v150);
  }
  int v151 = *((_DWORD *)this + 177);
  if ((v151 & 0x80000000) == 0 && (v151 & 0x7FFFFFFF) != 0)
  {
    float v152 = (physx::NpScene *)*((void *)this + 87);
    if (v152 == (physx::NpScene *)((char *)this + 176))
    {
      *((unsigned char *)this + 688) = 0;
    }
    else if (v152)
    {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  for (uint64_t i = 0; i != -48; i -= 16)
  {
    int v154 = *(_DWORD *)((char *)this + i + 148);
    if ((v154 & 0x80000000) == 0 && (v154 & 0x7FFFFFFF) != 0 && *(void *)((char *)this + i + 136) != 0) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  int v156 = *((_DWORD *)this + 25);
  if ((v156 & 0x80000000) == 0 && (v156 & 0x7FFFFFFF) != 0 && *((void *)this + 11) != 0) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  int v158 = *((_DWORD *)this + 19);
  if ((v158 & 0x80000000) == 0 && (v158 & 0x7FFFFFFF) != 0 && *((void *)this + 8)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*v17) {
    (*(void (**)(uint64_t, void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *v17 - *(void *)(*v17 - 8));
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::NpScene::~NpScene(this);
  if (v1)
  {
    int v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void *physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeAdvance>::~DelegateTask(void *result)
{
  *uint64_t result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeCollide>::~DelegateTask(void *result)
{
  *uint64_t result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void *physx::Cm::DelegateTask<physx::NpScene,&physx::NpScene::executeScene>::~DelegateTask(void *result)
{
  *uint64_t result = &unk_26E7231E8;
  result[2] = 0;
  return result;
}

void physx::NpScene::SceneCompletion::~SceneCompletion(physx::NpScene::SceneCompletion *this)
{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = &unk_26E7231E8;
  *((void *)this + 2) = 0;
  JUMPOUT(0x237DBCBD0);
}

uint64_t physx::NpScene::release(physx::NpScene *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = 8608;
  if ((*((unsigned char *)this + 8624) & 4) == 0) {
    uint64_t v9 = 4300;
  }
  if ((*((unsigned char *)this + v9 + 1) & 2) != 0) {
    (*(void (**)(physx::NpScene *, const char *, uint64_t))(*(void *)this + 800))(this, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 195);
  }
  if (*((_DWORD *)this + 1877))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 203, "PxScene::release(): Scene is still being simulated! PxScene::fetchResults() is called implicitly.", a6, a7, a8, v13);
    int v10 = *((_DWORD *)this + 1877);
    if (v10 == 1)
    {
      (*(void (**)(physx::NpScene *, uint64_t))(*(void *)this + 432))(this, 1);
      int v10 = *((_DWORD *)this + 1877);
    }
    if (v10 == 2) {
      (*(void (**)(physx::NpScene *, void))(*(void *)this + 408))(this, 0);
    }
    (*(void (**)(physx::NpScene *, uint64_t, void))(*(void *)this + 440))(this, 1, 0);
  }
  uint64_t v11 = physx::NpPhysics::mInstance;
  return physx::NpPhysics::releaseSceneInternal(v11, (uint64_t)this);
}

uint64_t physx::NpScene::loadFromDesc(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 96);
  if (v4 && (*(_DWORD *)(a1 + 9156) & 0x7FFFFFFFu) < v4)
  {
    physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::recreate(a1 + 9144, v4);
    unsigned int v4 = *(_DWORD *)(a2 + 96);
  }
  physx::Sc::Scene::preAllocate((physx::Sc::Scene *)(a1 + 32), v4, *(_DWORD *)(a2 + 100), *(_DWORD *)(a2 + 104), *(_DWORD *)(a2 + 108));
  *(void *)(a1 + 8) = *(void *)(a2 + 192);
  return 1;
}

double physx::NpScene::setGravity(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*(unsigned char *)(a1 + 7705))
  {
    *(_DWORD *)(a1 + 8592) = v2;
    double result = *(double *)(a2 + 1);
    *(double *)(a1 + 8596) = result;
    *(_DWORD *)(a1 + 8624) |= 1u;
  }
  else
  {
    *(_DWORD *)(a1 + 1984) = v2;
    double result = *(double *)(a2 + 1);
    *(double *)(a1 + 1988) = result;
    *(_DWORD *)(a1 + 1996) = 1;
  }
  return result;
}

uint64_t physx::NpScene::getGravity@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = 8592;
  uint64_t v3 = 8596;
  if ((*(_DWORD *)(this + 8624) & 1) == 0) {
    uint64_t v3 = 1988;
  }
  uint64_t v4 = 8600;
  if ((*(_DWORD *)(this + 8624) & 1) == 0) {
    uint64_t v4 = 1992;
  }
  int v5 = *(_DWORD *)(this + v4);
  int v6 = *(_DWORD *)(this + v3);
  if ((*(_DWORD *)(this + 8624) & 1) == 0) {
    uint64_t v2 = 1984;
  }
  *a2 = *(_DWORD *)(this + v2);
  a2[1] = v6;
  a2[2] = v5;
  return this;
}

float physx::NpScene::setBounceThresholdVelocity(physx::NpScene *this, float result)
{
  if (*((unsigned char *)this + 7705))
  {
    *((float *)this + 2151) = result;
    *((_DWORD *)this + 2156) |= 2u;
  }
  else
  {
    double result = -result;
    *(float *)(*((void *)this + 240) + 120) = result;
  }
  return result;
}

float physx::NpScene::getBounceThresholdVelocity(physx::NpScene *this)
{
  if ((*((unsigned char *)this + 8624) & 2) != 0) {
    return *((float *)this + 2151);
  }
  else {
    return -*(float *)(*((void *)this + 240) + 120);
  }
}

uint64_t physx::NpScene::setLimits(uint64_t a1, long long *a2)
{
  unsigned int v4 = *(_DWORD *)a2;
  if (v4 && (*(_DWORD *)(a1 + 9156) & 0x7FFFFFFFu) < v4)
  {
    physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::recreate(a1 + 9144, v4);
    unsigned int v4 = *(_DWORD *)a2;
  }
  physx::Sc::Scene::preAllocate((physx::Sc::Scene *)(a1 + 32), v4, *((_DWORD *)a2 + 1), *((_DWORD *)a2 + 2), *((_DWORD *)a2 + 3));
  long long v5 = *a2;
  *(_OWORD *)(a1 + 1968) = a2[1];
  *(_OWORD *)(a1 + 1952) = v5;
  unsigned int v6 = *((_DWORD *)a2 + 2);
  unsigned int v7 = *((_DWORD *)a2 + 3);
  physx::Sq::PrunerExt::preallocate((physx::Sq::PrunerExt *)(a1 + 8640), v6);
  return physx::Sq::PrunerExt::preallocate((physx::Sq::PrunerExt *)(a1 + 8688), v7);
}

__n128 physx::NpScene::getLimits@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[122];
  __n128 v3 = this[123];
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t physx::NpScene::setFlag(uint64_t result, int a2, int a3)
{
  int v3 = *(_DWORD *)(result + 8624);
  uint64_t v4 = 8608;
  if ((v3 & 4) == 0) {
    uint64_t v4 = 4300;
  }
  int v5 = *(_DWORD *)(result + v4);
  int v6 = v5 | a2;
  int v7 = v5 & ~a2;
  if (a3) {
    int v7 = v6;
  }
  if (*(unsigned char *)(result + 7705))
  {
    *(_DWORD *)(result + 8608) = v7;
    *(_DWORD *)(result + 8624) = v3 | 4;
  }
  else
  {
    *(_DWORD *)(result + 4300) = v7;
    uint64_t v8 = *(void *)(result + 1872);
    *(unsigned char *)(v8 + 2584) = (v7 & 0x40) != 0;
    *(unsigned char *)(v8 + 2585) = (v7 & 0x100) == 0;
  }
  return result;
}

uint64_t physx::NpScene::getFlags@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = 8608;
  if ((*(_DWORD *)(this + 8624) & 4) == 0) {
    uint64_t v2 = 4300;
  }
  *a2 = *(_DWORD *)(this + v2);
  return this;
}

void physx::NpScene::addActor(physx::NpScene *this, int32x2_t *a2, const physx::PxBVHStructure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9, char a10)
{
  uint64_t v10 = a2[1].u16[0];
  if (v10 == 5)
  {
    if (a2[10])
    {
      uint64_t v11 = "PxScene::addActor(): actor is in a pruning structure and cannot be added to a scene directly, use addActors("
            "const PxPruningStructure&)";
      uint64_t v12 = physx::shdfnd::Foundation::mInstance;
      uint64_t v13 = 352;
      goto LABEL_5;
    }
  }
  else if (v10 == 6 && *(void *)&a2[10])
  {
    uint64_t v11 = "PxScene::addActor(): actor is in a pruning structure and cannot be added to a scene directly, use addActors(co"
          "nst PxPruningStructure&)";
    uint64_t v12 = physx::shdfnd::Foundation::mInstance;
    uint64_t v13 = 344;
LABEL_5:
    physx::shdfnd::Foundation::error(v12, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v13, v11, a6, a7, a8, a10);
    return;
  }
  unsigned int v14 = (char *)a2 + *((void *)&physx::NpActor::sLazyInitOffsets + v10 + 18);
  int v15 = *((_DWORD *)v14 + 2) >> 30;
  if (v15)
  {
    if (v15 != 3 || ((uint64_t v16 = *(void *)v14) != 0 ? (v17 = (physx::NpScene *)(v16 - 16)) : (v17 = 0), v17 != this))
    {
      uint64_t v11 = "PxScene::addActor(): Actor already assigned to a scene. Call will be ignored!";
      uint64_t v12 = physx::shdfnd::Foundation::mInstance;
      uint64_t v13 = 360;
      goto LABEL_5;
    }
  }
  physx::NpScene::addActorInternal(this, a2, a3, a9, a4, a5, a6, a7, a8, a10);
}

void physx::NpScene::addActorInternal(physx::NpScene *this, int32x2_t *a2, const physx::PxBVHStructure *a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a3)
  {
    if (!(*(unsigned int (**)(int32x2_t *, const char *))(*(void *)a2 + 40))(a2, "PxRigidActor")
      || !(*(unsigned int (**)(const physx::PxBVHStructure *))(*(void *)a3 + 80))(a3)
      || (unsigned int v13 = (*(uint64_t (**)(const physx::PxBVHStructure *))(*(void *)a3 + 80))(a3),
          v13 > (*(unsigned int (**)(int32x2_t *))(*(void *)a2 + 184))(a2)))
    {
      unsigned int v14 = "PxRigidActor::setBVHStructure structure is empty or does not match shapes in the actor.";
      uint64_t v15 = physx::shdfnd::Foundation::mInstance;
      uint64_t v16 = 4;
      uint64_t v17 = 371;
LABEL_6:
      physx::shdfnd::Foundation::error(v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v17, v14, a7, a8, a9, a10);
      return;
    }
  }
  int v18 = a2[1].u16[0];
  switch(v18)
  {
    case 5:
      physx::NpScene::addRigidDynamic(this, a2, a3, 0, a4);
      break;
    case 13:
      unsigned int v14 = "PxScene::addActor(): Individual articulation links can not be added to the scene";
      uint64_t v15 = physx::shdfnd::Foundation::mInstance;
      uint64_t v16 = 2;
      uint64_t v17 = 400;
      goto LABEL_6;
    case 6:
      physx::NpScene::addRigidStatic((int32x2_t *)this, a2, a3, 0, a4);
      break;
  }
}

void physx::NpScene::addRigidStatic(int32x2_t *this, int32x2_t *a2, const physx::Gu::BVHStructure *a3, unsigned int a4, int8x8_t a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v9 = (physx::Scb::Base *)&a2[12];
  unint64_t v10 = a2[13].u32[0];
  if (v10) {
    uint64_t v11 = (unsigned char *)a2[14];
  }
  else {
    uint64_t v11 = (char *)v9 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v10 >> 24) & 0xF) + 3) + 12;
  }
  uint64_t v12 = this + 2;
  if ((*v11 & 8) != 0)
  {
    physx::Scb::Scene::addRigidNoSim<false,physx::Scb::RigidStatic>(v12, v9, this + 982, a5);
    physx::NpShapeManager::setupAllSceneQuery((physx::NpShapeManager *)&a2[5], (uint64_t)this, (physx::PxRigidActor *)a2, a4, 0, a3, v27, v28, v29, v30, v31, v32, v33, v34, v25, v26);
  }
  else
  {
    if (a2[6].u16[0] < 9u && this[963].i8[1] == 0) {
      unsigned int v14 = &v37;
    }
    else {
      unsigned int v14 = 0;
    }
    physx::Scb::Scene::addActor(v12, v9, 0, (uint64_t)v14, a5);
    physx::NpShapeManager::setupAllSceneQuery((physx::NpShapeManager *)&a2[5], (uint64_t)this, (physx::PxRigidActor *)a2, a4, (uint64_t)v14, a3, v17, v18, v19, v20, v21, v22, v23, v24, v15, v16);
    if (a2[4]) {
      physx::NpActor::addConstraintsToSceneInternal(a2 + 3);
    }
  }
  uint64_t v35 = this[1144].u32[0];
  a2[11].i32[0] = v35;
  uint64_t v36 = a2;
  if ((this[1144].i32[1] & 0x7FFFFFFFu) <= v35)
  {
    physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack((uint64_t)&this[1143], &v36);
  }
  else
  {
    *(void *)(*(void *)&this[1143] + 8 * v35) = a2;
    this[1144].i32[0] = v35 + 1;
  }
}

void physx::NpScene::addRigidDynamic(physx::NpScene *this, int32x2_t *a2, const physx::Gu::BVHStructure *a3, unsigned int a4, int8x8_t a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v9 = (physx::Scb::Base *)&a2[12];
  unint64_t v10 = a2[13].u32[0];
  if (v10) {
    uint64_t v11 = (unsigned char *)a2[14];
  }
  else {
    uint64_t v11 = (char *)v9 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v10 >> 24) & 0xF) + 3) + 12;
  }
  uint64_t v12 = (int32x2_t *)((char *)this + 16);
  if ((*v11 & 8) != 0)
  {
    physx::Scb::Scene::addActor(v12, v9, 1, 0, (uint64_t)a3, a5);
    physx::NpShapeManager::setupAllSceneQuery((physx::NpShapeManager *)&a2[5], (uint64_t)this, (physx::PxRigidActor *)a2, a4, 0, a3, v27, v28, v29, v30, v31, v32, v33, v34, v25, v26);
  }
  else
  {
    if (a2[6].u16[0] < 9u && *((unsigned char *)this + 7705) == 0) {
      unsigned int v14 = &v37;
    }
    else {
      unsigned int v14 = 0;
    }
    physx::Scb::Scene::addActor(v12, v9, 0, (uint64_t)v14, (uint64_t)a3, a5);
    physx::NpShapeManager::setupAllSceneQuery((physx::NpShapeManager *)&a2[5], (uint64_t)this, (physx::PxRigidActor *)a2, a4, (uint64_t)v14, a3, v17, v18, v19, v20, v21, v22, v23, v24, v15, v16);
    if (a2[4]) {
      physx::NpActor::addConstraintsToSceneInternal(a2 + 3);
    }
  }
  uint64_t v35 = *((unsigned int *)this + 2288);
  a2[11].i32[0] = v35;
  uint64_t v36 = a2;
  if ((*((_DWORD *)this + 2289) & 0x7FFFFFFFu) <= v35)
  {
    physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack((uint64_t)this + 9144, &v36);
  }
  else
  {
    *(void *)(*((void *)this + 1143) + 8 * v35) = a2;
    *((_DWORD *)this + 2288) = v35 + 1;
  }
}

uint64_t physx::NpScene::updateScbStateAndSetupSq(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, float32x4_t a9, int8x16_t a10, double a11, double a12, double a13, double a14, double a15, int32x4_t a16)
{
  uint64_t v30 = result + 16;
  *(void *)a3 = result + 16;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a3 + 8) & 0x3FFFFFFF | 0x80000000;
  uint64_t v16 = *((unsigned __int16 *)a4 + 4);
  if (v16 == 1) {
    float32x4_t v17 = a4;
  }
  else {
    float32x4_t v17 = (uint64_t *)*a4;
  }
  if (*((_WORD *)a4 + 4))
  {
    unint64_t v21 = 0;
    uint64_t v22 = result + 8640;
    double v23 = a4 + 2;
    uint64_t v24 = 8 * v16;
    uint64_t v25 = a6;
    do
    {
      uint64_t v26 = v17[v21 / 8];
      char v27 = *(unsigned char *)(v26 + 144);
      atomic_fetch_add((atomic_uint *volatile)(v26 + 32), 1u);
      if ((*(_DWORD *)(v26 + 264) & 0x80000000) != 0)
      {
        *(void *)(v26 + 48) = v30;
        *(_DWORD *)(v26 + 56) = *(_DWORD *)(v26 + 56) & 0x3FFFFFFF | 0x80000000;
        if ((v27 & 2) != 0)
        {
LABEL_8:
          if (a6) {
            uint64_t v28 = v25;
          }
          else {
            uint64_t v28 = 0;
          }
          __n128 result = physx::Sq::SceneQueryManager::addPrunerShape(v22, v26 + 48, a2 + *((void *)&physx::NpActor::sLazyInitOffsets + *(unsigned __int16 *)(a2 + 8) + 18), a5, *((unsigned int *)a4 + 8), v28, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
          if (*((_WORD *)a4 + 12) == 1) {
            double v29 = v23;
          }
          else {
            double v29 = (uint64_t *)a4[2];
          }
          v29[v21 / 8] = result;
        }
      }
      else if ((v27 & 2) != 0)
      {
        goto LABEL_8;
      }
      v21 += 8;
      v25 += 24;
    }
    while (v24 != v21);
  }
  return result;
}

void physx::NpScene::addActors(int32x2_t *this, int32x2_t **a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void physx::NpScene::addActorsInternal(int32x2_t *this, int32x2_t **a2, int a3, const physx::Sq::PruningStructure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  if (this[938].i32[1])
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    physx::shdfnd::Foundation::error(v9, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 468, "PxScene::addActors() not allowed while simulation is running.", a6, a7, a8, a9);
    return;
  }
  LODWORD(v11) = a3;
  int v77 = (physx::Sc::Scene *)&this[4];
  physx::Sc::Scene::startBatchInsertion(&this[4], v78);
  int8x8_t v19 = (int8x8_t)128;
  long long v79 = xmmword_234424150;
  long long v80 = xmmword_234424150;
  uint64_t v81 = 80;
  v83[192] = 1;
  *(void *)int v84 = v83;
  uint64_t v85 = 0x800000000;
  if (!v11)
  {
    BOOL v21 = 0;
LABEL_59:
    if (a4) {
      physx::Sq::SceneQueryManager::addPruningStructure(&this[1080], a4, v14, v15);
    }
    goto LABEL_61;
  }
  unint64_t v20 = 0;
  int v74 = v11;
  unint64_t v11 = v11;
  BOOL v21 = 1;
  unint64_t v75 = v11;
  float32x2_t v76 = this + 1143;
  while (1)
  {
    uint64_t v22 = v20++;
    if (v20 < v11)
    {
      _X8 = (unint64_t)a2[v20];
      int v24 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
      do
      {
        __asm { PRFM            #0, [X8] }
        _X8 += 32;
      }
      while (!__CFADD__(v24++, 1));
    }
    uint64_t v30 = (physx::PxActor *)a2[v22];
    uint64_t v31 = *((unsigned __int16 *)v30 + 4);
    double v32 = (char *)v30 + *((void *)&physx::NpActor::sLazyInitOffsets + v31 + 18);
    int v33 = *((_DWORD *)v32 + 2) >> 30;
    if (v33)
    {
      if (v33 != 3
        || ((uint64_t v34 = *(void *)v32) != 0 ? (v35 = (physx::NpScene *)(v34 - 16)) : (v35 = 0),
            v35 != (physx::NpScene *)this))
      {
        uint64_t v62 = physx::shdfnd::Foundation::mInstance;
        unint64_t v63 = "PxScene::addActors(): Actor already assigned to a scene. Call will be ignored!";
        uint64_t v64 = 8;
        uint64_t v65 = 495;
        goto LABEL_58;
      }
    }
    if (v31 != 5)
    {
      if (v31 == 6)
      {
        if (!a4 && *((void *)v30 + 10))
        {
          uint64_t v71 = physx::shdfnd::Foundation::mInstance;
          uint64_t v72 = 513;
          goto LABEL_73;
        }
        unint64_t v36 = *((unsigned int *)v30 + 26);
        if (v36) {
          char v37 = (unsigned char *)*((void *)v30 + 14);
        }
        else {
          char v37 = (char *)v30 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v36 >> 24) & 0xF) + 3) + 108;
        }
        if ((*v37 & 8) == 0)
        {
          physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::resizeUninitialized((uint64_t)v83, *((unsigned __int16 *)v30 + 24) + 1);
          physx::Sc::Scene::addStatic((uint64_t)v77, (uint64_t)v30, (uint64_t)v78, *(uint64_t *)v84);
          physx::NpScene::updateScbStateAndSetupSq((uint64_t)this, (uint64_t)v30, (uint64_t)v30 + 96, (uint64_t *)v30 + 5, 0, *(uint64_t *)v84, a4 != 0, v40, v41, v42, v43, v44, v45, v46, v47, v48);
          uint64_t v49 = this[1144].u32[0];
          *((_DWORD *)v30 + 22) = v49;
          float32x2_t v82 = v30;
          if ((this[1144].i32[1] & 0x7FFFFFFFu) <= v49)
          {
            physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack((uint64_t)v76, &v82);
          }
          else
          {
            *(void *)(*(void *)&this[1143] + 8 * v49) = v30;
            this[1144].i32[0] = v49 + 1;
          }
          BOOL v21 = v20 < v11;
          unint64_t v11 = v75;
          if (!*((void *)v30 + 4)) {
            goto LABEL_50;
          }
          goto LABEL_49;
        }
        physx::NpScene::addRigidStatic(this, a2[v22], 0, a4 != 0, v19);
        goto LABEL_43;
      }
      uint64_t v62 = physx::shdfnd::Foundation::mInstance;
      unint64_t v63 = "PxScene::addRigidActors(): articulation link not permitted";
      uint64_t v64 = 2;
      uint64_t v65 = 553;
LABEL_58:
      physx::shdfnd::Foundation::error(v62, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v65, v63, v16, v17, v18, v73);
      LODWORD(v11) = v22;
      goto LABEL_59;
    }
    if (!a4 && *((void *)v30 + 10)) {
      break;
    }
    unint64_t v38 = *((unsigned int *)v30 + 26);
    if (v38) {
      int v39 = (unsigned char *)*((void *)v30 + 14);
    }
    else {
      int v39 = (char *)v30 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v38 >> 24) & 0xF) + 3) + 108;
    }
    if ((*v39 & 8) == 0)
    {
      physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::resizeUninitialized((uint64_t)v83, *((unsigned __int16 *)v30 + 24) + 1);
      physx::Sc::Scene::addBody(v77, (uint64_t)v30, (uint64_t)v78, *(uint64_t *)v84, 0);
      v58.i32[0] = *((_DWORD *)v30 + 93);
      BOOL v59 = 0;
      if (v58.f32[0] == 0.0)
      {
        v58.i32[0] = *((_DWORD *)v30 + 87);
        if (v58.f32[0] == 0.0)
        {
          v58.i32[0] = *((_DWORD *)v30 + 88);
          if (v58.f32[0] == 0.0)
          {
            v58.i32[0] = *((_DWORD *)v30 + 89);
            if (v58.f32[0] == 0.0)
            {
              v58.i32[0] = *((_DWORD *)v30 + 90);
              if (v58.f32[0] == 0.0)
              {
                v58.i32[0] = *((_DWORD *)v30 + 91);
                if (v58.f32[0] == 0.0)
                {
                  v58.i32[0] = *((_DWORD *)v30 + 92);
                  if (v58.f32[0] == 0.0) {
                    BOOL v59 = 1;
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v60 = *(void *)v84;
      *((_DWORD *)v30 + 94) = v59;
      physx::NpScene::updateScbStateAndSetupSq((uint64_t)this, (uint64_t)v30, (uint64_t)v30 + 96, (uint64_t *)v30 + 5, 1u, v60, a4 != 0, v50, v58, v51, v52, v53, v54, v55, v56, v57);
      uint64_t v61 = this[1144].u32[0];
      *((_DWORD *)v30 + 22) = v61;
      float32x2_t v82 = v30;
      if ((this[1144].i32[1] & 0x7FFFFFFFu) <= v61)
      {
        physx::shdfnd::Array<physx::PxRigidActor *,physx::shdfnd::ReflectionAllocator<physx::PxRigidActor *>>::growAndPushBack((uint64_t)v76, &v82);
      }
      else
      {
        *(void *)(*(void *)&this[1143] + 8 * v61) = v30;
        this[1144].i32[0] = v61 + 1;
      }
      BOOL v21 = v20 < v11;
      if (!*((void *)v30 + 4)) {
        goto LABEL_50;
      }
LABEL_49:
      physx::NpActor::addConstraintsToSceneInternal((int32x2_t *)v30 + 3);
      goto LABEL_50;
    }
    physx::NpScene::addRigidDynamic((physx::NpScene *)this, a2[v22], 0, a4 != 0, v19);
LABEL_43:
    BOOL v21 = v20 < v11;
LABEL_50:
    if (v20 == v11)
    {
      BOOL v21 = 0;
      LODWORD(v11) = v74;
      goto LABEL_59;
    }
  }
  uint64_t v71 = physx::shdfnd::Foundation::mInstance;
  uint64_t v72 = 536;
LABEL_73:
  physx::shdfnd::Foundation::error(v71, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v72, "PxScene::addActors(): actor is in a pruning structure and cannot be added to a scene directly, use addActors(const PxPruningStructure&)", v16, v17, v18, v73);
  LODWORD(v11) = v22;
LABEL_61:
  physx::Sc::Scene::finishBatchInsertion((physx::Cm::PreallocatingRegionManager **)v77, v78);
  if (v21 && v11)
  {
    unint64_t v11 = v11;
    do
    {
      unint64_t v70 = *a2++;
      physx::NpScene::removeActorInternal(this, v70, 0, 1, v66, v67, v68, v69, v73);
      --v11;
    }
    while (v11);
  }
  if ((v85 & 0x8000000000000000) == 0 && (v85 & 0x7FFFFFFF00000000) != 0 && *(unsigned char **)v84 != v83 && *(void *)v84) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
}

void physx::NpScene::addActors(int32x2_t *this, const physx::PxPruningStructure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((unsigned char *)a2 + 80)) {
    physx::NpScene::addActorsInternal(this, *((int32x2_t ***)a2 + 9), *((_DWORD *)a2 + 16), a2, a5, a6, a7, a8, a9);
  }
  else {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 453, "PxScene::addActors(): Provided pruning structure is not valid.", a6, a7, a8, a9);
  }
}

uint64_t physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 212) & 0x7FFFFFFFu) < a2) {
    __n128 result = physx::shdfnd::Array<physx::PxBounds3,physx::shdfnd::InlineAllocator<192u,physx::shdfnd::ReflectionAllocator<physx::PxBounds3>>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 208) = a2;
  return result;
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidStatic>::getNbShapes(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t physx::NpRigidActorTemplate<physx::PxRigidDynamic>::getNbShapes(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t physx::NpScene::removeActorInternal(int32x2_t *this, int32x2_t *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result = (*(uint64_t (**)(int32x2_t *))(*(void *)a2 + 48))(a2);
  if (result == 2)
  {
    uint64_t v22 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 689, "PxScene::removeActor(): Individual articulation links can not be removed from the scene", v16, v17, v18, a9);
  }
  else
  {
    if (result == 1)
    {
      double v23 = a2 + 12;
      unint64_t v24 = a2[13].u32[0];
      if (v24) {
        uint64_t v25 = (char *)a2[14];
      }
      else {
        uint64_t v25 = (char *)&v23[1] + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v24 >> 24) & 0xF) + 3) + 4;
      }
      char v30 = *v25;
      if (a4)
      {
        int32x2_t v31 = a2[4];
        if (v31)
        {
          uint64_t v32 = *(unsigned int *)(*(void *)&v31 + 80);
          if (v32)
          {
            int v33 = (physx::NpAggregate **)(*(void *)(*(void *)&v31 + 72) + 8);
            while (*((unsigned char *)v33 - 8) != 1)
            {
              v33 += 2;
              if (!--v32) {
                goto LABEL_34;
              }
            }
            if (*v33) {
              physx::NpAggregate::removeActorAndReinsert(*v33, (physx::PxActor *)a2, 0, v14, v15, v16, v17, v18);
            }
          }
        }
      }
LABEL_34:
      physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&a2[5], (physx::Sq::SceneQueryManager *)&this[1080], (const physx::PxRigidActor *)a2);
      if ((v30 & 8) == 0) {
        physx::NpActor::removeConstraintsFromScene(a2 + 3);
      }
      physx::Scb::Scene::removeActor(this + 2, (physx::Scb::Body *)&a2[12], a3, (v23[1].i8[*((void *)&physx::Scb::Actor::sLazyInitOffsets + (a2[13].i8[3] & 0xF) + 3) + 4] & 8) != 0, v36);
      unsigned int v38 = a2[11].u32[0];
      uint64_t v35 = &v38;
    }
    else
    {
      if (result) {
        return result;
      }
      int8x8_t v19 = a2 + 12;
      unint64_t v20 = a2[13].u32[0];
      if (v20) {
        BOOL v21 = (char *)a2[14];
      }
      else {
        BOOL v21 = (char *)&v19[1] + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v20 >> 24) & 0xF) + 3) + 4;
      }
      char v26 = *v21;
      if (a4)
      {
        int32x2_t v27 = a2[4];
        if (v27)
        {
          uint64_t v28 = *(unsigned int *)(*(void *)&v27 + 80);
          if (v28)
          {
            double v29 = (physx::NpAggregate **)(*(void *)(*(void *)&v27 + 72) + 8);
            while (*((unsigned char *)v29 - 8) != 1)
            {
              v29 += 2;
              if (!--v28) {
                goto LABEL_29;
              }
            }
            if (*v29) {
              physx::NpAggregate::removeActorAndReinsert(*v29, (physx::PxActor *)a2, 0, v14, v15, v16, v17, v18);
            }
          }
        }
      }
LABEL_29:
      physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&a2[5], (physx::Sq::SceneQueryManager *)&this[1080], (const physx::PxRigidActor *)a2);
      if ((v26 & 8) == 0) {
        physx::NpActor::removeConstraintsFromScene(a2 + 3);
      }
      physx::Scb::Scene::removeActor((uint64_t)&this[2], (uint64_t)&a2[12], a3, (v19[1].i8[*((void *)&physx::Scb::Actor::sLazyInitOffsets + (a2[13].i8[3] & 0xF) + 3) + 4] & 8) != 0, v34);
      __int32 v37 = a2[11].i32[0];
      uint64_t v35 = (unsigned int *)&v37;
    }
    return physx::NpScene::removeFromRigidActorList((uint64_t)this, v35);
  }
}

void physx::NpScene::removeActors(physx::NpScene *this, physx::PxActor *const *a2, unsigned int a3, int a4)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  int v7 = (physx::NpScene *)((char *)this + 32);
  physx::Sc::Scene::resizeReleasedBodyIDMaps((physx::NpScene *)((char *)this + 32), *((_DWORD *)this + 2288), a3);
  uint64_t v54 = 0x4000000000;
  v52[512] = 1;
  double v53 = v52;
  uint64_t v58 = 0x4000000000;
  char v56 = 1;
  int32x4_t v57 = v55;
  *((void *)this + 551) = v52;
  if (a3)
  {
    uint64_t v8 = 0;
    uint64_t v49 = (physx::NpScene *)((char *)this + 16);
    unint64_t v9 = a3;
    do
    {
      uint64_t v10 = v8 + 1;
      if (v8 + 1 < v9)
      {
        _X8 = (unint64_t)a2[v10];
        int v12 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
        do
        {
          __asm { PRFM            #0, [X8] }
          _X8 += 32;
          _CF = __CFADD__(v12++, 1);
        }
        while (!_CF);
      }
      uint64_t v18 = (unsigned __int16 *)a2[v8];
      int v19 = v18[4];
      if ((physx::NpScene *)(*(uint64_t (**)(unsigned __int16 *))(*(void *)v18 + 56))(v18) != this)
      {
        physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 79, "%s not assigned to scene or assigned to another scene. Call will be ignored!", v20, v21, v22, (char)"PxScene::removeActors(): Actor");
        break;
      }
      LODWORD(v54) = 0;
      LODWORD(v58) = 0;
      if (v19 == 5)
      {
        double v23 = (int32x2_t *)a2[v8];
        int32x2_t v27 = v23 + 12;
        unint64_t v28 = v23[13].u32[0];
        if (v28) {
          double v29 = (char *)v23[14];
        }
        else {
          double v29 = (char *)&v27[1] + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v28 >> 24) & 0xF) + 3) + 4;
        }
        char v39 = *v29;
        if (v23[6].i16[0])
        {
          uint64_t v40 = v23 + 5;
          if (v23[6].i16[0] != 1) {
            uint64_t v40 = (int32x2_t *)v23[5];
          }
          _X8 = *v40;
          int v42 = ~((unint64_t)(*(void *)&_X8 + 271) >> 5) + (*(void *)&_X8 >> 5);
          do
          {
            __asm { PRFM            #0, [X8] }
            *(void *)&_X8 += 32;
            _CF = __CFADD__(v42++, 1);
          }
          while (!_CF);
        }
        physx::Sc::Scene::prefetchForRemove(v7, (const physx::Sc::BodyCore *)&v23[16]);
        _X8 = *(void *)(*((void *)this + 1143) + 8 * (*((_DWORD *)this + 2288) - 1));
        int v45 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
        do
        {
          __asm { PRFM            #0, [X8] }
          _X8 += 32;
          _CF = __CFADD__(v45++, 1);
        }
        while (!_CF);
        if ((v39 & 8) == 0) {
          physx::NpActor::removeConstraintsFromScene(v23 + 3);
        }
        physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&v23[5], (physx::NpScene *)((char *)this + 8640), (const physx::PxRigidActor *)v23);
        physx::Scb::Scene::removeActor((int32x2_t *)v49, (physx::Scb::Body *)&v23[12], a4, (v27[1].i8[*((void *)&physx::Scb::Actor::sLazyInitOffsets + (v23[13].i8[3] & 0xF) + 3) + 4] & 8) != 0, v47);
      }
      else
      {
        if (v19 != 6)
        {
          physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 651, "PxScene::removeActor(): Individual articulation links can not be removed from the scene", v20, v21, v22, v48);
          break;
        }
        double v23 = (int32x2_t *)a2[v8];
        unint64_t v24 = v23 + 12;
        unint64_t v25 = v23[13].u32[0];
        if (v25) {
          char v26 = (char *)v23[14];
        }
        else {
          char v26 = (char *)&v24[1] + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v25 >> 24) & 0xF) + 3) + 4;
        }
        char v30 = *v26;
        if (v23[6].i16[0])
        {
          int32x2_t v31 = v23 + 5;
          if (v23[6].i16[0] != 1) {
            int32x2_t v31 = (int32x2_t *)v23[5];
          }
          _X8 = *v31;
          int v33 = ~((unint64_t)(*(void *)&_X8 + 271) >> 5) + (*(void *)&_X8 >> 5);
          do
          {
            __asm { PRFM            #0, [X8] }
            *(void *)&_X8 += 32;
            _CF = __CFADD__(v33++, 1);
          }
          while (!_CF);
        }
        physx::Sc::Scene::prefetchForRemove((uint64_t)v7, (unint64_t *)&v23[16]);
        _X8 = *(void *)(*((void *)this + 1143) + 8 * (*((_DWORD *)this + 2288) - 1));
        int v36 = ~((_X8 + 383) >> 5) + (_X8 >> 5);
        do
        {
          __asm { PRFM            #0, [X8] }
          _X8 += 32;
          _CF = __CFADD__(v36++, 1);
        }
        while (!_CF);
        if ((v30 & 8) == 0) {
          physx::NpActor::removeConstraintsFromScene(v23 + 3);
        }
        physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&v23[5], (physx::NpScene *)((char *)this + 8640), (const physx::PxRigidActor *)v23);
        physx::Scb::Scene::removeActor((uint64_t)v49, (uint64_t)&v23[12], a4, (v24[1].i8[*((void *)&physx::Scb::Actor::sLazyInitOffsets + (v23[13].i8[3] & 0xF) + 3) + 4] & 8) != 0, v38);
      }
      unsigned int v51 = v23[11].u32[0];
      physx::NpScene::removeFromRigidActorList((uint64_t)this, &v51);
      uint64_t v8 = v10;
    }
    while (v10 != v9);
  }
  *((void *)this + 551) = 0;
  if ((v58 & 0x8000000000000000) == 0 && (v58 & 0x7FFFFFFF00000000) != 0)
  {
    if (v57 == v55)
    {
      char v56 = 0;
    }
    else if (v57)
    {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  if ((v54 & 0x8000000000000000) == 0 && (v54 & 0x7FFFFFFF00000000) != 0 && v53 != v52)
  {
    if (v53) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
}

uint64_t physx::NpShapeManager::teardownAllSceneQuery(uint64_t this, physx::Sq::SceneQueryManager *a2, const physx::PxRigidActor *a3)
{
  uint64_t v4 = this;
  uint64_t v5 = *(unsigned __int16 *)(this + 8);
  int v6 = *(_DWORD *)(this + 32);
  if (v5 == 1)
  {
    uint64_t v7 = this;
    if (v6 == -1)
    {
LABEL_13:
      uint64_t v12 = 0;
      unsigned int v13 = (uint64_t *)(this + 16);
      do
      {
        uint64_t v14 = *(void *)(v7 + 8 * v12);
        if ((*(unsigned char *)(v14 + 56) & 0x40) != 0) {
          uint64_t v15 = (char *)(*(void *)(v14 + 64) + 52);
        }
        else {
          uint64_t v15 = (char *)(v14 + 144);
        }
        char v16 = *v15;
        int v17 = *(unsigned __int16 *)(v4 + 24);
        if ((v16 & 2) != 0)
        {
          uint64_t v18 = v4 + 16;
          if (v17 != 1) {
            uint64_t v18 = *v13;
          }
          this = physx::Sq::SceneQueryManager::removePrunerShape(a2, 0xFFFFFFFFLL, *(void *)(v18 + 8 * v12));
          int v17 = *(unsigned __int16 *)(v4 + 24);
        }
        uint64_t v19 = v4 + 16;
        if (v17 != 1) {
          uint64_t v19 = *v13;
        }
        *(void *)(v19 + 8 * v12++) = 0xFFFFFFFFLL;
      }
      while (v5 != v12);
      return this;
    }
  }
  else if (v6 == -1)
  {
    if (!*(_WORD *)(this + 8)) {
      return this;
    }
    uint64_t v7 = *(void *)this;
    goto LABEL_13;
  }
  BOOL v8 = (*((_WORD *)a3 + 4) & 0xFFF7) == 5;
  this = (*(uint64_t (**)(void))(**((void **)a2 + 12) + 8))(*((void *)a2 + 12));
  ++*((_DWORD *)a2 + 12 * v8 + 11);
  if (v5)
  {
    uint64_t v9 = 0;
    int v10 = *(unsigned __int16 *)(v4 + 24);
    do
    {
      uint64_t v11 = v4 + 16;
      if (v10 != 1) {
        uint64_t v11 = *(void *)(v4 + 16);
      }
      *(void *)(v11 + v9) = 0xFFFFFFFFLL;
      v9 += 8;
    }
    while (8 * v5 != v9);
  }
  *(_DWORD *)(v4 + 32) = -1;
  return this;
}

uint64_t physx::NpScene::removeFromRigidActorList(uint64_t this, const unsigned int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(this + 9144);
  unsigned int v4 = *(_DWORD *)(this + 9152) - 1;
  *(_DWORD *)(this + 9152) = v4;
  *(void *)(v3 + 8 * v2) = *(void *)(v3 + 8 * v4);
  if (v4)
  {
    uint64_t v6 = *a2;
    if (v4 != v6)
    {
      uint64_t v7 = *(_DWORD **)(*(void *)(this + 9144) + 8 * v6);
      this = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 48))(v7);
      if (this <= 1) {
        v7[22] = *a2;
      }
    }
  }
  return this;
}

uint64_t physx::NpScene::removeActor(int32x2_t *this, int32x2_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)a2 + 56))(a2) != this) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 79, "%s not assigned to scene or assigned to another scene. Call will be ignored!", v13, v14, v15, (char)"PxScene::removeActor(): Actor");
  }
  return physx::NpScene::removeActorInternal(this, a2, a3, 1, v12, v13, v14, v15, a9);
}

void physx::NpScene::addArticulation(int32x2_t *a1, _WORD *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v15);
  if ((v15 & 0x2000) != 0)
  {
    if (a2[4] != 12)
    {
      uint64_t v11 = physx::shdfnd::Foundation::mInstance;
      uint64_t v12 = "PxScene::addArticulation(): Only Reduced coordinate articulations are currently supported when PxSceneFlag::"
            "eENABLE_GPU_DYNAMICS is set!";
      uint64_t v13 = 815;
      goto LABEL_15;
    }
    BOOL v7 = 1;
  }
  else
  {
    BOOL v7 = a2[4] == 12;
  }
  if (a1[938].i32[1]) {
    BOOL v8 = !v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(_WORD *))(*(void *)a2 + 200))(a2);
    int v10 = *(_DWORD *)(v9 + 8) >> 30;
    if (!v10 || v10 == 3 && (int32x2_t *)(*(void *)v9 - 16) == a1)
    {
      physx::NpScene::addArticulationInternal(a1, (uint64_t)a2);
      return;
    }
    uint64_t v11 = physx::shdfnd::Foundation::mInstance;
    uint64_t v12 = "PxScene::addArticulation(): Articulation already assigned to a scene. Call will be ignored!";
    uint64_t v13 = 832;
  }
  else
  {
    uint64_t v11 = physx::shdfnd::Foundation::mInstance;
    uint64_t v12 = "PxScene::addArticulation(): this call is not allowed while the simulation is running. Call will be ignored!";
    uint64_t v13 = 821;
  }
LABEL_15:
  physx::shdfnd::Foundation::error(v11, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v13, v12, v4, v5, v6, v14);
}

void physx::NpScene::addArticulationInternal(int32x2_t *a1, uint64_t a2)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  if (*(_DWORD *)(v5 + 128)) {
    BOOL v7 = **(physx::NpArticulationLink ***)(v5 + 120);
  }
  else {
    BOOL v7 = 0;
  }
  unint64_t v75 = (int32x2_t *)v7;
  checkArticulationLink(v7, v6);
  v8.i32[0] = v75[43].i32[1];
  if (*(float *)v8.i32 == 0.0
    && (v8.i32[0] = v75[44].i32[0], *(float *)v8.i32 == 0.0)
    && (v8.i32[0] = v75[44].i32[1], *(float *)v8.i32 == 0.0)
    && (v8.i32[0] = v75[45].i32[0], *(float *)v8.i32 == 0.0)
    && (v8.i32[0] = v75[45].i32[1], *(float *)v8.i32 == 0.0))
  {
    v8.i32[0] = v75[46].i32[0];
    char v9 = *(float *)v8.i32 != 0.0;
  }
  else
  {
    char v9 = 1;
  }
  physx::NpScene::addArticulationLinkBody(a1, (physx::NpArticulationLink *)v75, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  physx::Scb::Scene::add<physx::Scb::Articulation>(a1 + 2, v10, a1 + 1003, v11);
  *(unsigned char *)(v10 + 76) = *(float *)(v10 + 72) == 0.0;
  uint64_t v12 = v75;
  int v74 = (void *)v10;
  uint64_t v13 = *(void *)(v10 + 24);
  if (v13)
  {
    uint64_t v14 = *(unsigned int *)(v13 + 48);
    if (v14)
    {
      uint64_t v15 = 0;
      while (*(void *)(*(void *)(v13 + 40) + 8 * v15) != *(void *)&v75[16])
      {
        if (v14 == ++v15) {
          goto LABEL_16;
        }
      }
    }
    else
    {
LABEL_16:
      LODWORD(v15) = 0x80000000;
    }
    uint64_t v12 = v75;
    v75[58].i32[0] = v15;
  }
  v12[58].i32[1] = 0;
  char v16 = physx::NpScene::addArticulationLinkConstraint(a1, v12);
  BOOL v84 = (8 * v4) > 0x400;
  uint64_t v73 = (8 * v4);
  if ((8 * v4) < 0x401)
  {
    MEMORY[0x270FA5388](v16);
    int v17 = (uint64_t *)((char *)&v73 - ((v19 + 15) & 0x1FFFFFFF0));
    bzero(v17, v19);
  }
  else
  {
    int v17 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v85, (8 * v4), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 888);
  }
  uint64_t v82 = a2;
  int v83 = v17;
  long long v79 = (void *)v13;
  void *v17 = v75;
  uint64_t v77 = (v4 - 1);
  if (v4 != 1)
  {
    uint64_t v20 = 0;
    int v21 = 1;
    do
    {
      uint64_t v22 = v17[v20];
      if (*(_DWORD *)(v22 + 456)) {
        uint64_t v23 = *(void *)(v22 + 448);
      }
      else {
        uint64_t v23 = 0;
      }
      if ((*(unsigned int (**)(void))(*(void *)v22 + 520))(v17[v20]))
      {
        unint64_t v25 = 0;
        char v26 = v17;
        do
        {
          int32x2_t v27 = *(physx::NpScene **)(v23 + 8 * v25);
          checkArticulationLink(v27, v24);
          if (v9)
          {
            char v9 = 1;
          }
          else
          {
            v28.i32[0] = *((_DWORD *)v27 + 87);
            if (*(float *)v28.i32 == 0.0
              && (v28.i32[0] = *((_DWORD *)v27 + 88), *(float *)v28.i32 == 0.0)
              && (v28.i32[0] = *((_DWORD *)v27 + 89), *(float *)v28.i32 == 0.0)
              && (v28.i32[0] = *((_DWORD *)v27 + 90), *(float *)v28.i32 == 0.0)
              && (v28.i32[0] = *((_DWORD *)v27 + 91), *(float *)v28.i32 == 0.0))
            {
              v28.i32[0] = *((_DWORD *)v27 + 92);
              BOOL v29 = *(float *)v28.i32 == 0.0;
            }
            else
            {
              BOOL v29 = 0;
            }
            char v9 = !v29;
          }
          physx::NpScene::addArticulationLink(a1, v27, v28);
          v26[(v21 + v25)] = v27;
          int v17 = v26;
          ++v25;
        }
        while (v25 < (*(unsigned int (**)(uint64_t))(*(void *)v22 + 520))(v22));
        v21 += v25;
      }
      ++v20;
    }
    while (v20 != v77);
  }
  LODWORD(v18) = *((_DWORD *)v74 + 18);
  if (*(float *)&v18 == 0.0 && (v9 & 1) != 0) {
    physx::PxArticulationImpl::wakeUpInternal(v74, 1, 0, v18);
  }
  unsigned int v30 = a1[1149].u32[1];
  int32x2_t v31 = v79;
  uint64_t v32 = v82;
  if (!v30)
  {
    unsigned int v36 = 0;
    goto LABEL_50;
  }
  unint64_t v33 = (~(v82 << 32) + v82) ^ ((unint64_t)(~(v82 << 32) + v82) >> 22);
  unint64_t v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
  unint64_t v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
  unsigned int v36 = (v30 - 1) & ((v35 >> 31) ^ v35);
  uint64_t v37 = *(unsigned int *)(*(void *)&a1[1148] + 4 * v36);
  if (v37 == -1)
  {
LABEL_50:
    if (a1[1151].i32[1] == a1[1149].i32[0])
    {
      if (v30) {
        unsigned int v38 = 2 * v30;
      }
      else {
        unsigned int v38 = 16;
      }
      if (v30 < v38)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&a1[1145], v38, *(int8x8_t *)&v18);
        unsigned int v30 = a1[1149].u32[1];
      }
      unint64_t v39 = (~(v32 << 32) + v32) ^ ((unint64_t)(~(v32 << 32) + v32) >> 22);
      unint64_t v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
      unint64_t v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
      unsigned int v36 = (v30 - 1) & ((v41 >> 31) ^ v41);
    }
    uint64_t v42 = a1[1150].u32[1];
    a1[1150].i32[1] = v42 + 1;
    int32x2_t v43 = a1[1148];
    *(_DWORD *)(*(void *)&a1[1147] + 4 * v42) = *(_DWORD *)(*(void *)&v43 + 4 * v36);
    *(_DWORD *)(*(void *)&v43 + 4 * v36) = v42;
    a1[1151] = vadd_s32(a1[1151], (int32x2_t)0x100000001);
    *(void *)(*(void *)&a1[1146] + 8 * v42) = v32;
    goto LABEL_58;
  }
  while (*(void *)(*(void *)&a1[1146] + 8 * v37) != v82)
  {
    uint64_t v37 = *(unsigned int *)(*(void *)&a1[1147] + 4 * v37);
    if (v37 == -1) {
      goto LABEL_50;
    }
  }
LABEL_58:
  if (v31)
  {
    physx::Sc::ArticulationSim::checkResize(v31);
    void *v17 = v75;
    if (v77)
    {
      uint64_t v44 = 0;
      uint64_t v45 = 1;
      float32x2_t v78 = a1;
      do
      {
        uint64_t v46 = v17[v44];
        if (*(_DWORD *)(v46 + 456)) {
          uint64_t v82 = *(void *)(v46 + 448);
        }
        else {
          uint64_t v82 = 0;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v46 + 520))(v46))
        {
          uint64_t v76 = v44;
          unint64_t v47 = 0;
          uint64_t v48 = v82;
          uint64_t v80 = v45;
          uint64_t v81 = v17;
          do
          {
            uint64_t v49 = *(_DWORD **)(v48 + 8 * v47);
            uint64_t v50 = (*(uint64_t (**)(_DWORD *))(*(void *)v49 + 528))(v49);
            v49[117] = (*(uint64_t (**)(void, uint64_t))(*(void *)*v31 + 64))(*v31, v50);
            if (*(_WORD *)(v32 + 8) == 12)
            {
              uint64_t v51 = (*(uint64_t (**)(_DWORD *))(*(void *)v49 + 504))(v49);
              int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 120))(v51);
              if (v52 != 3)
              {
                uint64_t v56 = v32;
                if (v52 == 4)
                {
                  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 952, "PxScene::addArticulation(): The application need to set joint type. defaulting joint type to eFix", v53, v54, v55, v73);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 112))(v51, 3);
                  v49[117] = 0;
                }
                char v57 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v51 + 136))(v51, 3);
                char v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v51 + 136))(v51, 4);
                char v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v51 + 136))(v51, 5);
                char v60 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v51 + 136))(v51, 1);
                char v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v51 + 136))(v51, 2);
                BOOL v62 = (v58 | v57 | v59 | v60 | v61 | (*(uint64_t (**)(uint64_t, void))(*(void *)v51 + 136))(v51, 0)) == 0;
                uint64_t v32 = v56;
                a1 = v78;
                int32x2_t v31 = v79;
                LODWORD(v45) = v80;
                int v17 = v81;
                uint64_t v48 = v82;
                if (v62)
                {
                  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 973, "PxScene::addArticulation(): The application need to set joint motion. defaulting joint type to eFix", v63, v64, v65, v73);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 112))(v51, 3);
                  v49[117] = 0;
                }
              }
            }
            v17[(v45 + v47++)] = v49;
          }
          while (v47 < (*(unsigned int (**)(uint64_t))(*(void *)v46 + 520))(v46));
          uint64_t v45 = (v45 + v47);
          uint64_t v44 = v76;
        }
        ++v44;
      }
      while (v44 != v77);
    }
  }
  if (*(_WORD *)(v32 + 8) == 12)
  {
    if (v74[8])
    {
      int32x2_t v66 = v75[16];
      if (v66) {
        *(unsigned char *)(*(void *)(*(void *)&v66 + 136) + 159) = 1;
      }
    }
    uint64_t v67 = (uint64_t *)v74[3];
    if (v67)
    {
      int32x2_t v68 = a1[242];
      uint64_t v69 = *v67;
      int v85 = *((_DWORD *)v67 + 18);
      (*(void (**)(int32x2_t, uint64_t, int *))(**(void **)&v68 + 64))(v68, v69, &v85);
    }
    if (*(_DWORD *)(v32 + 192))
    {
      unint64_t v70 = 0;
      do
      {
        uint64_t v71 = *(void *)(*(void *)(v32 + 184) + 8 * v70);
        uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 208))(v71);
        physx::Sc::ArticulationSim::addLoopConstraint((uint64_t)v31, *(physx::Sc::ConstraintSim **)(v72 + 136));
        ++v70;
      }
      while (v70 < *(unsigned int *)(v32 + 192));
    }
  }
  if (v73 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v83, v17);
  }
}

void *checkArticulationLink(physx::NpScene *a1, physx::NpArticulationLink *a2)
{
  if ((*(float (**)(physx::NpScene *, physx::NpArticulationLink *))(*(void *)a1 + 240))(a1, a2) == 0.0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 844, "PxScene::addArticulation(): Articulation link with zero mass added to scene; defaulting mass to 1",
      v3,
      v4,
      v5,
      v15);
    (*(void (**)(physx::NpScene *, float))(*(void *)a1 + 232))(a1, 1.0);
  }
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, physx::NpScene *))(*(void *)a1 + 264))(&v18, a1);
  if (*(float *)&v18 == 0.0 || *((float *)&v18 + 1) == 0.0 || v19 == 0.0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 851, "PxScene::addArticulation(): Articulation link with zero moment of inertia added to scene; defaulting inertia to (1,1,1)",
      v7,
      v8,
      v9,
      v15);
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v16 = _D0;
    int v17 = 1065353216;
    return (void *)(*(uint64_t (**)(physx::NpScene *, uint64_t *))(*(void *)a1 + 256))(a1, &v16);
  }
  return result;
}

void physx::NpScene::addArticulationLinkBody(int32x2_t *this, physx::NpArticulationLink *a2, int8x8_t a3)
{
  physx::Scb::Scene::addActor(this + 2, (physx::NpArticulationLink *)((char *)a2 + 96), 0, 0, 0, a3);
  physx::NpShapeManager::setupAllSceneQuery((physx::NpArticulationLink *)((char *)a2 + 40), (uint64_t)this, a2, 0, 0, 0, v7, v8, v9, v10, v11, v12, v13, v14, v5, v6);
}

int32x2_t *physx::NpScene::addArticulationLinkConstraint(int32x2_t *this, int32x2_t *a2)
{
  uint64_t result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(void *)a2 + 504))(a2);
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(int32x2_t *))(*(void *)result + 96))(result);
    uint64_t result = physx::Scb::Scene::add<physx::Scb::ArticulationJoint>((uint64_t)&this[2], v5, this + 1010, v6);
  }
  if (a2[4])
  {
    return physx::NpActor::addConstraintsToSceneInternal(a2 + 3);
  }
  return result;
}

uint64_t physx::NpScene::addArticulationLink(int32x2_t *this, physx::NpArticulationLink *a2, int8x8_t a3)
{
  physx::NpScene::addArticulationLinkBody(this, a2, a3);
  physx::NpScene::addArticulationLinkConstraint(this, (int32x2_t *)a2);
  uint64_t v5 = (*(uint64_t (**)(physx::NpArticulationLink *))(*(void *)a2 + 496))(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 200))(v5);
  uint64_t v7 = *(void *)(result + 24);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 + 48);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(v7 + 40);
      while (*(void *)(v10 + 8 * v9) != *((void *)a2 + 16))
      {
        if (v8 == ++v9) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      LODWORD(v9) = 0x80000000;
    }
    *((_DWORD *)a2 + 116) = v9;
  }
  return result;
}

void physx::NpScene::removeArticulation(int32x2_t *a1, uint64_t a2, int a3)
{
  if ((int32x2_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2) == a1)
  {
    physx::NpScene::removeArticulationInternal(a1, a2, a3, 1);
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 79, "%s not assigned to scene or assigned to another scene. Call will be ignored!", v6, v7, v8, (char)"PxScene::removeArticulation(): Articulation");
  }
}

void physx::NpScene::removeArticulationInternal(int32x2_t *a1, uint64_t a2, int a3, int a4)
{
  int v37 = a3;
  uint64_t v5 = a2;
  v39[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(a2);
  int v8 = v7;
  if (a4)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
    if (v7)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
      uint64_t v7 = physx::NpAggregate::removeArticulationAndReinsert(v9, v5, 0);
    }
  }
  uint64_t v36 = (8 * v8);
  if ((8 * v8) < 0x401)
  {
    MEMORY[0x270FA5388](v7);
    uint64_t v10 = (int32x2_t **)((char *)&v34 - ((v11 + 15) & 0x1FFFFFFF0));
    bzero(v10, v11);
  }
  else
  {
    uint64_t v10 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v38, (8 * v8), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1038);
  }
  v38[0] = v10;
  *uint64_t v10 = **(void **)((*(uint64_t (**)(uint64_t))(*(void *)v5 + 200))(v5) + 120);
  uint64_t v12 = (v8 - 1);
  if (v8 == 1) {
    goto LABEL_18;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  do
  {
    uint64_t v15 = v10[v13];
    if (*(_DWORD *)(v15 + 456)) {
      uint64_t v16 = *(void *)(v15 + 448);
    }
    else {
      uint64_t v16 = 0;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15 + 520))(v10[v13]))
    {
      unint64_t v17 = 0;
      do
      {
        v10[(v14 + v17)] = *(void *)(v16 + 8 * v17);
        ++v17;
      }
      while (v17 < (*(unsigned int (**)(uint64_t))(*(void *)v15 + 520))(v15));
      v14 += v17;
    }
    ++v13;
  }
  while (v13 != v12);
  if (v8 >= 1)
  {
LABEL_18:
    unint64_t v34 = a1;
    uint64_t v35 = v5;
    char v18 = 0;
    uint64_t v19 = v8;
    uint64_t v20 = (physx::Sq::SceneQueryManager *)&a1[1080];
    int v21 = a1 + 2;
    uint64_t v22 = a1 + 1010;
    unint64_t v23 = v19 + 1;
    do
    {
      unint64_t v24 = (int32x2_t *)v10[v12];
      __int8 v25 = v24[21].i8[4];
      uint64_t v26 = (*(uint64_t (**)(int32x2_t *))(*(void *)v24 + 504))(v24);
      physx::NpActor::removeConstraintsFromScene(v24 + 3);
      physx::NpShapeManager::teardownAllSceneQuery((uint64_t)&v24[5], v20, (const physx::PxRigidActor *)v24);
      if (v26)
      {
        uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 96))(v26);
        physx::Scb::Scene::remove<physx::Scb::ArticulationJoint>((uint64_t)v21, v28, v22, v29);
      }
      v18 |= v25;
      physx::Scb::Scene::removeActor(v21, (physx::Scb::Body *)&v24[12], v37, 0, v27);
      --v23;
      LODWORD(v12) = v12 - 1;
    }
    while (v23 > 1);
    a1 = v34;
    uint64_t v5 = v35;
    if ((v18 & 0x20) != 0)
    {
      uint64_t v30 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v35 + 200))(v35) + 24);
      if (v30)
      {
        unint64_t v31 = *(unsigned int *)(v30 + 72);
        if (v31 <= 0xFFFFFF7F && 32 * a1[959].i32[0] > v31 >> 7) {
          *(_DWORD *)(*(void *)&a1[958] + ((v31 >> 10) & 0x3FFFFC)) &= ~(1 << (v31 >> 7));
        }
      }
    }
  }
  uint64_t v32 = (physx::Scb::Articulation *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 200))(v5);
  physx::Scb::Scene::removeArticulation(a1 + 2, v32, v33);
  v39[0] = v5;
  physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)&a1[1145], v39);
  if (v36 >= 0x401) {
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v38, v10);
  }
}

void physx::NpShapeManager::setupAllSceneQuery(physx::NpShapeManager *this, uint64_t a2, physx::PxRigidActor *a3, unsigned int a4, uint64_t a5, physx::Gu::BVHStructure *a6, float32x4_t a7, int8x16_t a8, double a9, double a10, double a11, double a12, double a13, int32x4_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19 = a2 + 8640;
  uint64_t v20 = *((unsigned __int16 *)this + 4);
  if (v20 == 1)
  {
    int v21 = this;
    if (!a6)
    {
LABEL_10:
      uint64_t v23 = 0;
      int v24 = *((_WORD *)a3 + 4) & 0xFFF7;
      __int8 v25 = (char **)((char *)this + 16);
      uint64_t v26 = a5;
      do
      {
        uint64_t v27 = *((void *)v21 + v23);
        if ((*(unsigned char *)(v27 + 56) & 0x40) != 0) {
          uint64_t v28 = (unsigned char *)(*(void *)(v27 + 64) + 52);
        }
        else {
          uint64_t v28 = (unsigned char *)(v27 + 144);
        }
        if ((*v28 & 2) != 0)
        {
          if (a5) {
            uint64_t v29 = v26;
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v30 = physx::Sq::SceneQueryManager::addPrunerShape(v19, v27 + 48, (uint64_t)a3 + *((void *)&physx::NpActor::sLazyInitOffsets + *((unsigned __int16 *)a3 + 4) + 18), v24 == 5, *((unsigned int *)this + 8), v29, a4, a16, a7, a8, a9, a10, a11, a12, a13, a14);
          unint64_t v31 = (char *)this + 16;
          if (*((_WORD *)this + 12) != 1) {
            unint64_t v31 = *v25;
          }
          *(void *)&v31[8 * v23] = v30;
        }
        ++v23;
        v26 += 24;
      }
      while (v20 != v23);
      return;
    }
  }
  else if (!a6)
  {
    if (!*((_WORD *)this + 4)) {
      return;
    }
    int v21 = *(physx::NpShapeManager **)this;
    goto LABEL_10;
  }
  uint64_t v22 = (physx::Sq::SceneQueryManager *)(a2 + 8640);
  physx::NpShapeManager::addBVHStructureShapes(this, v22, a3, a6);
}

int8x8_t physx::NpScene::addAggregate(int32x2_t *this, physx::PxAggregate *a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v12 = *((unsigned int *)a2 + 16);
  uint64_t v13 = (physx::PxAggregate *)((char *)a2 + 16);
  int v14 = *((_DWORD *)a2 + 6) >> 30;
  if (v14 && (v14 != 3 || (int32x2_t *)(*(void *)v13 - 16) != this))
  {
    uint64_t v15 = physx::shdfnd::Foundation::mInstance;
    physx::shdfnd::Foundation::error(v15, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1179, "PxScene::addAggregate(): Aggregate already assigned to a scene. Call will be ignored!", a7, a8, a9, a10);
    return result;
  }
  physx::Scb::Scene::addAggregate(this + 2, v13, a3);
  if (v12)
  {
    uint64_t v17 = 0;
    do
    {
      char v18 = *(unsigned __int16 **)(*((void *)a2 + 9) + v17);
      uint64_t v19 = (uint64_t)v18 + *((void *)&physx::NpActor::sLazyInitOffsets + v18[4]);
      unsigned int v38 = 0;
      if (physx::NpActor::getConnectors<physx::Gu::BVHStructure>(v19, 3, (uint64_t)&v38, 1u, 0)) {
        physx::NpActor::removeConnector(v19, (physx::PxActor *)v18, 3, (uint64_t)v38);
      }
      physx::NpAggregate::addActorInternal(a2, (int32x2_t *)v18, this, v38, v20, v21, v22, v23, v37);
      int v24 = v38;
      if (v38 && atomic_fetch_add((atomic_uint *volatile)v38 + 6, 0xFFFFFFFF) == 1) {
        (*(void (**)(void))(*((void *)v24 + 2) + 16))();
      }
      v17 += 8;
    }
    while (8 * v12 != v17);
  }
  unsigned int v25 = this[1156].u32[1];
  if (!v25)
  {
    unsigned int v29 = 0;
    goto LABEL_21;
  }
  unint64_t v26 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
  unint64_t v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
  unint64_t v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
  unsigned int v29 = (v25 - 1) & ((v28 >> 31) ^ v28);
  uint64_t v30 = *(unsigned int *)(*(void *)&this[1155] + 4 * v29);
  if (v30 == -1)
  {
LABEL_21:
    if (this[1158].i32[1] == this[1156].i32[0])
    {
      if (v25) {
        unsigned int v31 = 2 * v25;
      }
      else {
        unsigned int v31 = 16;
      }
      if (v25 < v31)
      {
        physx::shdfnd::internal::HashBase<physx::Sc::ConstraintSim *,physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::internal::HashSetBase<physx::Sc::ConstraintSim *,physx::shdfnd::Hash<physx::Sc::ConstraintSim *>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)&this[1152], v31, result);
        unsigned int v25 = this[1156].u32[1];
      }
      unint64_t v32 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
      unint64_t v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
      unint64_t v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
      unsigned int v29 = (v25 - 1) & ((v34 >> 31) ^ v34);
    }
    uint64_t v35 = this[1157].u32[1];
    this[1157].i32[1] = v35 + 1;
    int32x2_t v36 = this[1155];
    *(_DWORD *)(*(void *)&this[1154] + 4 * v35) = *(_DWORD *)(*(void *)&v36 + 4 * v29);
    *(_DWORD *)(*(void *)&v36 + 4 * v29) = v35;
    int8x8_t result = (int8x8_t)vadd_s32(this[1158], (int32x2_t)0x100000001);
    this[1158] = (int32x2_t)result;
    *(void *)(*(void *)&this[1153] + 8 * v35) = a2;
    return result;
  }
  while (*(physx::PxAggregate **)(*(void *)&this[1153] + 8 * v30) != a2)
  {
    uint64_t v30 = *(unsigned int *)(*(void *)&this[1154] + 4 * v30);
    if (v30 == -1) {
      goto LABEL_21;
    }
  }
  return result;
}

physx::NpScene *physx::NpScene::removeAggregate(physx::NpScene *this, physx::PxAggregate *a2, int a3)
{
  if ((physx::NpScene *)(*(uint64_t (**)(physx::PxAggregate *))(*(void *)a2 + 104))(a2) != this) {
    return (physx::NpScene *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 79, "%s not assigned to scene or assigned to another scene. Call will be ignored!", v6, v7, v8, (char)"PxScene::removeAggregate(): Aggregate");
  }
  int8x8_t result = (physx::NpScene *)(*(uint64_t (**)(physx::PxAggregate *))(*(void *)a2 + 104))(a2);
  if (result == this)
  {
    uint64_t v11 = *((unsigned int *)a2 + 16);
    if (v11)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        uint64_t v13 = *(int32x2_t **)(*((void *)a2 + 9) + 8 * i);
        if ((*(unsigned int (**)(int32x2_t *))(*(void *)v13 + 48))(v13) == 2)
        {
          if ((*(uint64_t (**)(int32x2_t *))(*(void *)v13 + 56))(v13))
          {
            uint64_t v15 = (uint64_t)v13[48];
            uint64_t v16 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v15 + 200))(v15) + 120);
            if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 152))(v15))
            {
              unint64_t v18 = 0;
              do
                physx::Scb::Aggregate::removeActor((void *)a2 + 2, *(void *)(v16 + 8 * v18++) + 96, 0, v17);
              while (v18 < (*(unsigned int (**)(uint64_t))(*(void *)v15 + 152))(v15));
            }
            physx::NpScene::removeArticulationInternal((int32x2_t *)this, v15, a3, 0);
          }
        }
        else
        {
          physx::Scb::Aggregate::removeActor((void *)a2 + 2, (uint64_t)v13 + *((void *)&physx::NpActor::sLazyInitOffsets + v13[1].u16[0] + 18), 0, v14);
          physx::NpScene::removeActorInternal((int32x2_t *)this, v13, a3, 0, v19, v20, v21, v22, v23);
        }
      }
    }
    physx::Scb::Scene::removeAggregate((int32x2_t *)this + 2, (uint64_t)a2 + 16, v10);
    int v24 = a2;
    return (physx::NpScene *)physx::shdfnd::internal::HashBase<physx::Sc::BodySim const*,physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::internal::HashSetBase<physx::Sc::BodySim const*,physx::shdfnd::Hash<physx::Sc::BodySim const*>,physx::shdfnd::NonTrackingAllocator,true>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase((uint64_t)this + 9216, (uint64_t *)&v24);
  }
  return result;
}

uint64_t physx::NpScene::getNbAggregates(physx::NpScene *this)
{
  return *((unsigned int *)this + 2317);
}

uint64_t physx::NpScene::getAggregates(physx::NpScene *this, physx::PxAggregate **a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = (*((_DWORD *)this + 2317) - a4) & ~((int)(*((_DWORD *)this + 2317) - a4) >> 31);
  if (v5 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v5;
  }
  if (result)
  {
    uint64_t v7 = (physx::PxAggregate **)(*((void *)this + 1153) + 8 * a4);
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

void physx::NpScene::addCollection(int32x2_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 116);
  int8x8_t v14 = 0;
  *(void *)uint64_t v15 = 0;
  if (v2)
  {
    physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::recreate((uint64_t)&v14, v2);
    uint64_t v9 = 0;
    uint64_t v10 = 16 * v2;
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a2 + 72) + v9);
      switch(*(_WORD *)(v11 + 8))
      {
        case 5:
        case 6:
          if (!*(void *)(v11 + 80)) {
            physx::NpScene::addCollection(physx::PxCollection const&)::Local::addActorIfNeeded(*(void *)(*(void *)(a2 + 72) + v9), (uint64_t)&v14);
          }
          break;
        case 0xA:
          (*(void (**)(int32x2_t *, void))(*(void *)a1 + 128))(a1, *(void *)(*(void *)(a2 + 72) + v9));
          break;
        case 0xB:
        case 0xC:
          if (!(*(uint64_t (**)(void))(*(void *)v11 + 192))(*(void *)(*(void *)(a2 + 72) + v9))) {
            (*(void (**)(int32x2_t *, uint64_t))(*(void *)a1 + 72))(a1, v11);
          }
          break;
        case 0x10:
          (*(void (**)(int32x2_t *, void))(*(void *)a1 + 104))(a1, *(void *)(*(void *)(a2 + 72) + v9));
          break;
        default:
          break;
      }
      v9 += 16;
    }
    while (v10 != v9);
    uint64_t v12 = v14;
    if (v15[0])
    {
      physx::NpScene::addActorsInternal(a1, (int32x2_t **)v14, v15[0], 0, v5, v6, v7, v8, (char)v14);
      uint64_t v12 = v14;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  if ((v15[1] & 0x80000000) == 0 && (v15[1] & 0x7FFFFFFF) != 0 && v12 != 0) {
    (*(void (**)(uint64_t, physx::PxActor **))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
  }
}

uint64_t physx::NpScene::addCollection(physx::PxCollection const&)::Local::addActorIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  if (!result)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 8);
    if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v5)
    {
      return physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::growAndPushBack(a2, &v6);
    }
    else
    {
      *(void *)(*(void *)a2 + 8 * v5) = a1;
      *(_DWORD *)(a2 + 8) = v5 + 1;
    }
  }
  return result;
}

uint64_t physx::NpScene::getNbActors(uint64_t a1, __int16 *a2)
{
  __int16 v3 = *a2;
  if ((*a2 & 1) != 0 && (int v4 = *(_DWORD *)(a1 + 9152)) != 0)
  {
    LODWORD(result) = 0;
    unsigned int v6 = v4 - 1;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 9144) + 8 * v6);
      if (v7) {
        BOOL v8 = *(unsigned __int16 *)(v7 + 8) == 6;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
    }
    while ((unint64_t)v6--);
    if ((v3 & 2) == 0) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    if ((v3 & 2) == 0) {
      return result;
    }
  }
  int v10 = *(_DWORD *)(a1 + 9152);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 9144);
    unsigned int v12 = v10 - 1;
    do
    {
      uint64_t v13 = *(void *)(v11 + 8 * v12);
      if (v13) {
        BOOL v14 = *(unsigned __int16 *)(v13 + 8) == 5;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14) {
        uint64_t result = (result + 1);
      }
      else {
        uint64_t result = result;
      }
    }
    while ((unint64_t)v12--);
  }
  return result;
}

unint64_t physx::NpScene::getActors(uint64_t a1, __int16 *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  __int16 v5 = *a2;
  if ((*a2 & 3) == 0) {
    return 0;
  }
  unint64_t v6 = 0;
  if (a4)
  {
    unint64_t v7 = *(unsigned int *)(a1 + 9152);
    if (v7)
    {
      unint64_t v8 = 0;
      unsigned int v9 = 0;
      unint64_t v6 = 0;
      do
      {
        if ((v5 & 1) != 0
          && ((uint64_t v10 = *(void *)(*(void *)(a1 + 9144) + 8 * v8)) != 0
            ? (BOOL v11 = *(unsigned __int16 *)(v10 + 8) == 6)
            : (BOOL v11 = 0),
              v11)
          || (v5 & 2) != 0
          && ((uint64_t v10 = *(void *)(*(void *)(a1 + 9144) + 8 * v8)) != 0
            ? (BOOL v12 = *(unsigned __int16 *)(v10 + 8) == 5)
            : (BOOL v12 = 0),
              v12))
        {
          if (v9 >= a5) {
            *(void *)(a3 + 8 * v6++) = v10;
          }
          ++v9;
        }
        ++v8;
      }
      while (v8 < v7 && v6 < a4);
    }
  }
  return v6;
}

uint64_t physx::NpScene::getActiveActors(physx::NpScene *this, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 7705))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 704, "PxScene::getActiveActors() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, v11);
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    unsigned int v10 = *((_DWORD *)this + 1054);
    *a2 = v10;
    if (v10) {
      return *((void *)this + 526);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t physx::NpScene::getFrozenActors(physx::NpScene *this, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 7705))
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 721, "PxScene::getFrozenActors() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, v11);
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    unsigned int v10 = *((_DWORD *)this + 1058);
    *a2 = v10;
    if (v10) {
      return *((void *)this + 528);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t physx::NpScene::setFrozenActorFlag(uint64_t this, char a2)
{
  *(unsigned char *)(this + 9731) = a2;
  return this;
}

uint64_t physx::NpScene::getNbArticulations(physx::NpScene *this)
{
  return *((unsigned int *)this + 2303);
}

uint64_t physx::NpScene::getArticulations(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = (*(_DWORD *)(a1 + 9212) - a4) & ~((int)(*(_DWORD *)(a1 + 9212) - a4) >> 31);
  if (v5 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v5;
  }
  if (result)
  {
    unint64_t v7 = (uint64_t *)(*(void *)(a1 + 9168) + 8 * a4);
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpScene::getNbConstraints(physx::NpScene *this)
{
  return *((unsigned int *)this + 2285);
}

uint64_t physx::NpScene::getConstraints(physx::NpScene *this, physx::PxConstraint **a2, unsigned int a3, unsigned int a4)
{
  unsigned int v5 = (*((_DWORD *)this + 2285) - a4) & ~((int)(*((_DWORD *)this + 2285) - a4) >> 31);
  if (v5 >= a3) {
    uint64_t result = a3;
  }
  else {
    uint64_t result = v5;
  }
  if (result)
  {
    unint64_t v7 = (physx::PxConstraint **)(*((void *)this + 1137) + 8 * a4);
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *v7++;
      *a2++ = v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t physx::NpScene::getRenderBuffer(physx::NpScene *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 1877)) {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1448, "PxScene::getRenderBuffer() not allowed while simulation is running.", a6, a7, a8, v10);
  }
  return (uint64_t)this + 9000;
}

void physx::NpScene::getSimulationStatistics(physx::NpScene *this, physx::PxSimulationStatistics *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_DWORD *)this + 1877)) {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1551, "PxScene::getSimulationStatistics() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  else {
    physx::Sc::Scene::getStats((physx::NpScene *)((char *)this + 32), a2);
  }
}

uint64_t physx::NpScene::createClient(physx::NpScene *this)
{
  ++*((_DWORD *)this + 2335);
  if (!*((unsigned char *)this + 7705)) {
    return physx::Sc::Scene::createClient((physx::NpScene *)((char *)this + 32));
  }
  int v1 = *((_DWORD *)this + 1050);
  int v2 = *((_DWORD *)this + 2155);
  *((_DWORD *)this + 2155) = v2 + 1;
  return (v2 + v1);
}

uint64_t physx::NpScene::setFrictionType(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(result + 1920) + 148) = a2;
  return result;
}

uint64_t physx::NpScene::getFrictionType(physx::NpScene *this)
{
  return *(unsigned int *)(*((void *)this + 240) + 148);
}

uint64_t physx::NpScene::setSimulationEventCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 7705)) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 503, "PxScene::setSimulationEventCallback() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  else {
    return physx::Sc::Scene::setSimulationEventCallback(a1 + 32, a2);
  }
}

uint64_t physx::NpScene::getSimulationEventCallback(physx::NpScene *this)
{
  return *((void *)this + 534);
}

uint64_t physx::NpScene::setContactModifyCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 7705)) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 516, "PxScene::setContactModifyCallback() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  uint64_t v10 = *(void *)(a1 + 1872);
  *(void *)(v10 + 1768) = a2;
  return (*(uint64_t (**)(void))(**(void **)(v10 + 1776) + 176))();
}

uint64_t physx::NpScene::getContactModifyCallback(physx::NpScene *this)
{
  return *(void *)(*((void *)this + 234) + 1768);
}

uint64_t physx::NpScene::setCCDContactModifyCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(result + 7705)) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 529, "PxScene::setCCDContactModifyCallback() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  *(void *)(*(void *)(result + 1896) + 168) = a2;
  return result;
}

uint64_t physx::NpScene::getCCDContactModifyCallback(physx::NpScene *this)
{
  return *(void *)(*((void *)this + 237) + 168);
}

uint64_t physx::NpScene::setBroadPhaseCallback(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(result + 7705)) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 555, "PxScene::setBroadPhaseCallback() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  *(void *)(result + 4280) = a2;
  return result;
}

uint64_t physx::NpScene::getBroadPhaseCallback(physx::NpScene *this)
{
  return *((void *)this + 535);
}

uint64_t physx::NpScene::setCCDMaxPasses(uint64_t this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(this + 7705)) {
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 542, "PxScene::setCCDMaxPasses() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  *(_DWORD *)(*(void *)(this + 1896) + 436) = a2;
  return this;
}

uint64_t physx::NpScene::getCCDMaxPasses(physx::NpScene *this)
{
  return *(unsigned int *)(*((void *)this + 237) + 436);
}

uint64_t physx::NpScene::getBroadPhaseType(physx::NpScene *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 235) + 392) + 72))();
}

uint64_t physx::NpScene::getBroadPhaseCaps(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 1880) + 392) + 16))();
}

uint64_t physx::NpScene::getNbBroadPhaseRegions(physx::NpScene *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 235) + 392) + 24))();
}

uint64_t physx::NpScene::getBroadPhaseRegions(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 1880) + 392) + 32))();
}

uint64_t physx::NpScene::addBroadPhaseRegion(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a2 <= a2[3])
  {
    uint64_t v9 = a1 + 16;
    return physx::Scb::Scene::addBroadPhaseRegion(v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1682, "PxScene::addBroadPhaseRegion(): region bounds are empty. Call will be ignored.", a6, a7, a8, vars0);
    return 0xFFFFFFFFLL;
  }
}

uint64_t physx::NpScene::removeBroadPhaseRegion(physx::NpScene *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return physx::Scb::Scene::removeBroadPhaseRegion((physx::NpScene *)((char *)this + 16), a2, a3, a4, a5, a6, a7, a8);
}

void *physx::NpScene::setFilterShaderData(physx::NpScene *this, const void *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((unsigned char *)this + 7705)) {
    return (void *)physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/buffering/ScbScene.h", 565, "PxScene::setFilterShaderData() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  else {
    return physx::Sc::Scene::setFilterShaderData((void *)this + 4, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t physx::NpScene::getFilterShaderData(physx::NpScene *this)
{
  return *((void *)this + 504);
}

uint64_t physx::NpScene::getFilterShaderDataSize(physx::NpScene *this)
{
  return *((unsigned int *)this + 1010);
}

uint64_t physx::NpScene::getFilterShader(physx::NpScene *this)
{
  return *((void *)this + 506);
}

uint64_t physx::NpScene::getFilterCallback(physx::NpScene *this)
{
  return *((void *)this + 507);
}

void physx::NpScene::resetFiltering(physx::NpScene *this, physx::PxActor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10 = *((unsigned __int16 *)a2 + 4);
  switch(v10)
  {
    case 5:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, 0, 0);
      if ((*((unsigned char *)a2 + 381) & 0x40) != 0) {
        uint64_t v15 = (unsigned char *)(*((void *)a2 + 14) + 348);
      }
      else {
        uint64_t v15 = (char *)a2 + 172;
      }
      if ((*v15 & 1) == 0)
      {
        physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(a2, (physx::PxActor *)((char *)a2 + 96), 0, 1, v14);
      }
      break;
    case 13:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, 0, 0);
      BOOL v12 = (void *)(*(uint64_t (**)(void))(**((void **)a2 + 48) + 200))(*((void *)a2 + 48));
      physx::PxArticulationImpl::wakeUpInternal(v12, 0, 1, v13);
      break;
    case 6:
      char v11 = (char *)a2 + 96;
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)v11, 0, 0);
      break;
    default:
      uint64_t v16 = physx::shdfnd::Foundation::mInstance;
      physx::shdfnd::Foundation::error(v16, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1767, "PxScene::resetFiltering(): only PxRigidActor supports this operation!", a6, a7, a8, a9);
      break;
  }
}

void physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!a3) {
    a4 = *(unsigned __int16 *)(a1 + 48);
  }
  uint64_t v8 = (8 * a4);
  BOOL v33 = v8 > 0x400;
  if (v8 > 0x400)
  {
    unint64_t v18 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v31, (8 * a4), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpRigidActorTemplate.h", 417);
    unint64_t v32 = v18;
    if (!v18) {
      goto LABEL_46;
    }
    if (!a3) {
      goto LABEL_23;
    }
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v18 = &v30[-((v8 + 15) & 0x1FFFFFFF0)];
    bzero(v18, (8 * a4));
    unint64_t v32 = &v30[-((v8 + 15) & 0x1FFFFFFF0)];
    if (!a3)
    {
LABEL_23:
      uint64_t v20 = (void *)(a1 + 40);
      if (*(_WORD *)(a1 + 48) != 1) {
        uint64_t v20 = (void *)*v20;
      }
      if (!a4) {
        return;
      }
      uint64_t v21 = 0;
      unsigned int v10 = 0;
      while (1)
      {
        uint64_t v22 = v20[v21];
        unsigned int v23 = *(_DWORD *)(v22 + 56);
        if ((v23 & 0x40) != 0) {
          int v24 = (unsigned char *)(*(void *)(v22 + 64) + 52);
        }
        else {
          int v24 = (unsigned char *)(v22 + 144);
        }
        if ((*v24 & 5) == 0) {
          goto LABEL_42;
        }
        uint64_t v25 = v22 + 48;
        unsigned int v26 = *(_DWORD *)(a2 + 8);
        if ((v26 & 8) != 0)
        {
          if ((v23 & 0xF000000) == 0x1000000)
          {
            if (v23 >> 30 == 1) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v27 = *(void *)(a2 + 16);
            if (!v27)
            {
              int8x8_t v19 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)a2, HIBYTE(v26) & 0xF).n128_u64[0];
              *(void *)(a2 + 16) = v27;
            }
            uint64_t v28 = *(unsigned int *)(v27 + 56);
            if (v28)
            {
              unsigned int v29 = *(void **)(v27 + 48);
              while (*v29 != v25)
              {
                ++v29;
                if (!--v28) {
                  goto LABEL_41;
                }
              }
              goto LABEL_42;
            }
          }
        }
LABEL_41:
        v18[v10++] = v25;
LABEL_42:
        if (++v21 == a4) {
          goto LABEL_43;
        }
      }
    }
  }
  if (!a4) {
    return;
  }
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  do
  {
    uint64_t v11 = *(void *)(a3 + 8 * v9);
    uint64_t v12 = v11 + 48;
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    if ((v13 & 8) == 0)
    {
LABEL_19:
      v18[v10++] = v12;
      goto LABEL_20;
    }
    unsigned int v14 = *(_DWORD *)(v11 + 56);
    if ((v14 & 0xF000000) == 0x1000000)
    {
      if (v14 >> 30 != 1) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a2 + 16);
      if (!v15)
      {
        int8x8_t v19 = (int8x8_t)physx::Scb::Scene::getStream(*(void *)a2, HIBYTE(v13) & 0xF).n128_u64[0];
        *(void *)(a2 + 16) = v15;
      }
      uint64_t v16 = *(unsigned int *)(v15 + 56);
      if (!v16) {
        goto LABEL_19;
      }
      int8x8_t v17 = *(void **)(v15 + 48);
      while (*v17 != v12)
      {
        ++v17;
        if (!--v16) {
          goto LABEL_19;
        }
      }
    }
LABEL_20:
    ++v9;
  }
  while (v9 != a4);
LABEL_43:
  if (v10) {
    physx::Scb::RigidObject::resetFiltering((physx::Scb::RigidObject *)a2, (physx::Scb::Shape **)v18, v10, v19);
  }
  if (v8 >= 0x401) {
LABEL_46:
  }
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v32, v18);
}

void physx::NpScene::resetFiltering(physx::NpScene *this, physx::PxRigidActor *a2, physx::PxShape *const *a3, int a4)
{
  int v5 = *((unsigned __int16 *)a2 + 4);
  switch(v5)
  {
    case 5:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, (uint64_t)a3, a4);
      if ((*((unsigned char *)a2 + 381) & 0x40) != 0) {
        unsigned int v10 = (unsigned char *)(*((void *)a2 + 14) + 348);
      }
      else {
        unsigned int v10 = (char *)a2 + 172;
      }
      if ((*v10 & 1) == 0)
      {
        physx::NpRigidDynamic::wakeUpInternalNoKinematicTest(a2, (physx::PxRigidActor *)((char *)a2 + 96), 0, 1, v9);
      }
      break;
    case 13:
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)a2 + 96, (uint64_t)a3, a4);
      unint64_t v7 = (void *)(*(uint64_t (**)(void))(**((void **)a2 + 48) + 200))(*((void *)a2 + 48));
      physx::PxArticulationImpl::wakeUpInternal(v7, 0, 1, v8);
      break;
    case 6:
      unint64_t v6 = (char *)a2 + 96;
      physx::NpRigidActorTemplate<physx::PxRigidStatic>::resetFiltering((uint64_t)a2, (uint64_t)v6, (uint64_t)a3, a4);
      break;
  }
}

uint64_t physx::NpScene::getKinematicKinematicFilteringMode(physx::NpScene *this)
{
  return *((unsigned int *)this + 1016);
}

uint64_t physx::NpScene::getStaticKinematicFilteringMode(physx::NpScene *this)
{
  return *((unsigned int *)this + 1017);
}

uint64_t physx::NpScene::getPhysics(physx::NpScene *this)
{
  return physx::NpPhysics::mInstance;
}

uint64_t physx::NpScene::simulateOrCollide(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, char *a6, uint64_t a7, uint64_t a8, float a9, char a10)
{
  if (*(_DWORD *)(a1 + 7508))
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v10, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1859, a6, (uint64_t)a6, a7, a8, a10);
  }
  int v12 = a7;
  unint64_t v18 = (unsigned char *)(a1 + 8292);
  *(_DWORD *)(a1 + 9016) = 0;
  *(_DWORD *)(a1 + 9032) = 0;
  *(_DWORD *)(a1 + 9048) = 0;
  *(_DWORD *)(a1 + 9064) = 0;
  *(_DWORD *)(a1 + 9080) = 0;
  if ((*(float (**)(uint64_t, void))(*(void *)a1 + 560))(a1, 0) != 0.0)
  {
    memset(v107, 0, sizeof(v107));
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t v108 = 0x3F80000000000000;
    uint64_t v113 = 0;
    uint64_t v112 = 0;
    int v111 = 1065353216;
    int v114 = 1065353216;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    int v117 = 1065353216;
    uint64_t v118 = a1 + 9000;
    float v27 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 560))(a1, 1);
    if (v27 != 0.0)
    {
      *(float *)int v104 = v27;
      *(float *)&v104[4] = v27;
      *(float *)&v104[8] = v27;
      *(void *)&v104[12] = 0xFF00FF00FFFF0000;
      *(_DWORD *)&v104[20] = -16776961;
      physx::Cm::operator<<(v107, (uint64_t)v104);
    }
    unint64_t v28 = *(unsigned int *)(a1 + 9212);
    if (v28)
    {
      for (unint64_t i = 0; i < v28; ++i)
      {
        uint64_t v30 = *(void *)(*(void *)(a1 + 9168) + 8 * i);
        if (*(_DWORD *)(v30 + 152))
        {
          unint64_t v31 = 0;
          do
            physx::NpArticulationLink::visualize(*(void *)(*(void *)(v30 + 144) + 8 * v31++), (uint64_t)v107, a1);
          while (v31 < *(unsigned int *)(v30 + 152));
          unint64_t v28 = *(unsigned int *)(a1 + 9212);
        }
      }
    }
    int v98 = a5;
    uint64_t v32 = *(unsigned int *)(a1 + 9152);
    if (!v32)
    {
LABEL_107:
      float v87 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 560))(a1, 17);
      float v88 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 560))(a1, 18);
      if (v87 != 0.0)
      {
        uint64_t v89 = *(void *)(a1 + 8640);
        if (v89) {
          (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v89 + 120))(v89, v107, 4278190335);
        }
      }
      if (v88 != 0.0)
      {
        uint64_t v90 = *(void *)(a1 + 8688);
        if (v90) {
          (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v90 + 120))(v90, v107, 4294901760);
        }
      }
      if ((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 560))(a1, 23) != 0.0)
      {
        *(_OWORD *)int v104 = xmmword_23435FBB0;
        *(void *)&unsigned char v104[16] = 0;
        float v105 = 0.0;
        physx::Cm::RenderOutput::operator<<((uint64_t)v107, (uint64_t)v104);
        int v91 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 1880) + 392) + 24))(*(void *)(*(void *)(a1 + 1880) + 392));
        if (v91)
        {
          int v92 = v91;
          uint64_t v93 = 0;
          do
          {
            (*(void (**)(void, unsigned char *, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 1880) + 392)
                                                                      + 32))(*(void *)(*(void *)(a1 + 1880) + 392), v104, 1, v93);
            if (v106) {
              int v94 = -256;
            }
            else {
              int v94 = -16777216;
            }
            DWORD1(v107[0]) = v94;
            *(_OWORD *)float v102 = *(_OWORD *)v104;
            *(void *)&v102[16] = *(void *)&v104[16];
            char v103 = 1;
            physx::Cm::operator<<(v107, (uint64_t *)v102);
            uint64_t v93 = (v93 + 1);
          }
          while (v92 != v93);
        }
      }
      a5 = v98;
      if ((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 560))(a1, 22) != 0.0)
      {
        uint64_t v95 = (*(unsigned char *)(a1 + 8624) & 0x40) != 0 ? a1 + 8316 : *(void *)(a1 + 1872) + 1888;
        float v96 = *(float *)v95;
        float v97 = *(float *)(v95 + 12);
        if (*(float *)v95 <= v97)
        {
          DWORD1(v107[0]) = -256;
          *(float *)int v104 = v96;
          *(void *)&v104[4] = *(void *)(v95 + 4);
          *(float *)&v104[12] = v97;
          *(void *)&unsigned char v104[16] = *(void *)(v95 + 16);
          LOBYTE(v105) = 1;
          physx::Cm::operator<<(v107, (uint64_t *)v104);
        }
      }
      goto LABEL_6;
    }
    BOOL v33 = *(uint64_t **)(a1 + 9144);
    __asm { FMOV            V11.2S, #1.0 }
    while (1)
    {
      uint64_t v39 = *v33;
      if ((*(unsigned int (**)(uint64_t))(*(void *)*v33 + 48))(*v33) == 1) {
        break;
      }
      physx::NpShapeManager::visualize((uint64_t *)(v39 + 40), (uint64_t)v107, a1, v39);
      unint64_t v42 = *(unsigned int *)(v39 + 104);
      if (v42) {
        int32x2_t v43 = *(unsigned char **)(v39 + 112);
      }
      else {
        int32x2_t v43 = (unsigned char *)(v39 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v42 >> 24) & 0xF) + 3) + 108);
      }
      if (*v43)
      {
        if ((*(unsigned char *)(a1 + 8624) & 0x20) == 0)
        {
          uint64_t v47 = *(void *)(a1 + 1872);
          float v48 = *(float *)(v47 + 1792);
          goto LABEL_103;
        }
        uint64_t v51 = (float *)(a1 + 8196);
        if (!*v18) {
          uint64_t v51 = (float *)(*(void *)(a1 + 1872) + 1792);
        }
        float v48 = *v51;
        if (v18[10])
        {
          int v52 = (float *)(a1 + 8236);
        }
        else
        {
          uint64_t v47 = *(void *)(a1 + 1872);
LABEL_103:
          int v52 = (float *)(v47 + 1832);
        }
        float v86 = v48 * *v52;
        if (v86 != 0.0)
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v39 + 152))(v104, v39);
          physx::Cm::RenderOutput::operator<<((uint64_t)v107, (uint64_t)v104);
          *(float *)float v102 = v86;
          *(float *)&float32x4_t v102[4] = v86;
          *(float *)&v102[8] = v86;
          *(void *)&v102[12] = 0xFF00FF00FFFF0000;
          *(_DWORD *)&v102[20] = -16776961;
          physx::Cm::operator<<(v107, (uint64_t)v102);
        }
      }
LABEL_106:
      ++v33;
      if (!--v32) {
        goto LABEL_107;
      }
    }
    physx::NpShapeManager::visualize((uint64_t *)(v39 + 40), (uint64_t)v107, a1, v39);
    unint64_t v40 = *(unsigned int *)(v39 + 104);
    if (v40) {
      unint64_t v41 = *(unsigned char **)(v39 + 112);
    }
    else {
      unint64_t v41 = (unsigned char *)(v39 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v40 >> 24) & 0xF) + 3) + 108);
    }
    if ((*v41 & 1) == 0)
    {
LABEL_76:
      unint64_t v67 = *(unsigned int *)(v39 + 104);
      if (v67) {
        int32x2_t v68 = *(unsigned char **)(v39 + 112);
      }
      else {
        int32x2_t v68 = (unsigned char *)(v39 + *((void *)&physx::Scb::Actor::sLazyInitOffsets + ((v67 >> 24) & 0xF) + 3) + 108);
      }
      if (*v68)
      {
        float v69 = (*(float (**)(uint64_t, void))(*(void *)a1 + 560))(a1, 0);
        if ((float)(v69 * (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 560))(a1, 3)) != 0.0)
        {
          if (*(_DWORD *)(v39 + 376))
          {
            unsigned int v70 = 16711680;
          }
          else
          {
            float v71 = *(float *)(v39 + 372) / *(float *)(a1 + 0x2000);
            if (v71 <= 1.0) {
              float v72 = v71 * 255.0;
            }
            else {
              float v72 = 255.0;
            }
            unsigned int v70 = (v72 << 16) | (v72 << 8) | v72;
          }
          int v73 = *(_DWORD *)(v39 + 380);
          if ((v73 & 2) != 0)
          {
            uint64_t v75 = *(void *)(v39 + 112) + 168;
          }
          else
          {
            uint64_t v74 = *(void *)(v39 + 304);
            if (v74 && *(unsigned char *)(v74 + 31) == 1) {
              uint64_t v75 = v74 + 32;
            }
            else {
              uint64_t v75 = v39 + 256;
            }
          }
          float v76 = *(float *)(v75 + 8);
          float v77 = 1.0 / v76;
          _ZF = v76 == 0.0;
          int32x2_t v78 = 0;
          if (!_ZF) {
            *(float *)v78.i32 = v77;
          }
          if (v73)
          {
            uint64_t v80 = (float *)(*(void *)(v39 + 112) + 164);
          }
          else
          {
            uint64_t v79 = *(void *)(v39 + 304);
            if (v79 && *(unsigned char *)(v79 + 31) == 1) {
              uint64_t v80 = (float *)(v79 + 44);
            }
            else {
              uint64_t v80 = (float *)(v39 + 268);
            }
          }
          float32x2_t v81 = (float32x2_t)vrev64_s32(*(int32x2_t *)v75);
          float32x2_t v82 = (float32x2_t)vbic_s8((int8x8_t)vdiv_f32(_D11, v81), (int8x8_t)vceqz_f32(v81));
          *(float *)v78.i32 = *(float *)v78.i32 * (float)(6.0 / (float)(1.0 / *v80));
          float v100 = 6.0 / (float)(1.0 / *v80);
          int32x2_t v101 = v78;
          DWORD1(v107[0]) = v70;
          physx::Cm::RenderOutput::operator<<((uint64_t)v107, v39 + 320);
          float32x2_t v83 = vmul_n_f32(v82, v100);
          float32x2_t v84 = vsqrt_f32(vabs_f32(vadd_f32((float32x2_t)vdup_lane_s32(v101, 0), vsub_f32(v83, (float32x2_t)vrev64_s32((int32x2_t)v83)))));
          v83.f32[0] = sqrtf(vabds_f32(vaddv_f32(v83), *(float *)v101.i32));
          float32x2_t v85 = vmul_f32(v84, (float32x2_t)0x3F0000003F000000);
          *(float32x2_t *)int v104 = vneg_f32(v85);
          *(float *)&v104[8] = -(float)(v83.f32[0] * 0.5);
          *(float32x2_t *)&v104[12] = v85;
          *(float *)&v104[20] = v83.f32[0] * 0.5;
          LOBYTE(v105) = 1;
          physx::Cm::operator<<(v107, (uint64_t *)v104);
        }
      }
      goto LABEL_106;
    }
    int v44 = *(_DWORD *)(a1 + 8624);
    if ((v44 & 0x20) != 0)
    {
      uint64_t v49 = (float *)(a1 + 8196);
      if (!*v18) {
        uint64_t v49 = (float *)(*(void *)(a1 + 1872) + 1792);
      }
      float v46 = *v49;
      if (v18[10])
      {
        uint64_t v50 = (float *)(a1 + 8236);
LABEL_59:
        float v53 = v46 * *v50;
        if (v53 != 0.0)
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v39 + 152))(v104, v39);
          physx::Cm::RenderOutput::operator<<((uint64_t)v107, (uint64_t)v104);
          *(float *)float v102 = v53;
          *(float *)&float32x4_t v102[4] = v53;
          *(float *)&v102[8] = v53;
          *(void *)&v102[12] = 0xFF00FF00FFFF0000;
          *(_DWORD *)&v102[20] = -16776961;
          physx::Cm::operator<<(v107, (uint64_t)v102);
          int v44 = *(_DWORD *)(a1 + 8624);
        }
        int v54 = v44 & 0x20;
        if (!v54 || (uint64_t v55 = (float *)(a1 + 8204), !v18[2])) {
          uint64_t v55 = (float *)(*(void *)(a1 + 1872) + 1800);
        }
        float v56 = v46 * *v55;
        if (v56 != 0.0)
        {
          physx::Cm::RenderOutput::operator<<((uint64_t)v107, v39 + 320);
          *(float *)int v104 = v56;
          *(float *)&v104[4] = v56;
          *(float *)&v104[8] = v56;
          *(void *)&v104[12] = 0xFF00FF00FFFF0000;
          *(_DWORD *)&v104[20] = -16776961;
          physx::Cm::operator<<(v107, (uint64_t)v104);
          int v54 = *(_DWORD *)(a1 + 8624) & 0x20;
        }
        if (!v54 || (char v57 = (float *)(a1 + 8212), !v18[4])) {
          char v57 = (float *)(*(void *)(a1 + 1872) + 1808);
        }
        float v58 = v46 * *v57;
        if (v58 != 0.0)
        {
          DWORD1(v107[0]) = 0xFFFFFF;
          HIDWORD(v108) = 1065353216;
          uint64_t v109 = 0;
          uint64_t v110 = 0;
          uint64_t v112 = 0;
          uint64_t v113 = 0;
          int v111 = 1065353216;
          int v114 = 1065353216;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          int v117 = 1065353216;
          float v59 = v58 * *(float *)(v39 + 356);
          float v60 = v58 * 0.2;
          *(_DWORD *)&v104[8] = *(_DWORD *)(v39 + 344);
          float32x2_t v61 = vmul_n_f32(*(float32x2_t *)(v39 + 348), v58);
          *(void *)int v104 = *(void *)(v39 + 336);
          *(float32x2_t *)&v104[12] = vadd_f32(v61, *(float32x2_t *)v104);
          *(float *)&v104[20] = v59 + *(float *)&v104[8];
          float v105 = v60;
          physx::Cm::operator<<(v107, (float *)v104);
          int v54 = *(_DWORD *)(a1 + 8624) & 0x20;
        }
        if (!v54 || (BOOL v62 = (float *)(a1 + 8216), !v18[5])) {
          BOOL v62 = (float *)(*(void *)(a1 + 1872) + 1812);
        }
        float v63 = v46 * *v62;
        if (v63 != 0.0)
        {
          DWORD1(v107[0]) = 0;
          HIDWORD(v108) = 1065353216;
          uint64_t v109 = 0;
          uint64_t v110 = 0;
          uint64_t v112 = 0;
          uint64_t v113 = 0;
          int v111 = 1065353216;
          int v114 = 1065353216;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          int v117 = 1065353216;
          float v64 = v63 * *(float *)(v39 + 368);
          float v65 = v63 * 0.2;
          *(_DWORD *)&v104[8] = *(_DWORD *)(v39 + 344);
          float32x2_t v66 = vmul_n_f32(*(float32x2_t *)(v39 + 360), v63);
          *(void *)int v104 = *(void *)(v39 + 336);
          *(float32x2_t *)&v104[12] = vadd_f32(v66, *(float32x2_t *)v104);
          *(float *)&v104[20] = v64 + *(float *)&v104[8];
          float v105 = v65;
          physx::Cm::operator<<(v107, (float *)v104);
        }
        goto LABEL_76;
      }
      uint64_t v45 = *(void *)(a1 + 1872);
    }
    else
    {
      uint64_t v45 = *(void *)(a1 + 1872);
      float v46 = *(float *)(v45 + 1792);
    }
    uint64_t v50 = (float *)(v45 + 1832);
    goto LABEL_59;
  }
LABEL_6:
  if (*(_DWORD *)(a1 + 9140))
  {
    unint64_t v19 = 0;
    uint64_t v20 = *(void *)(a1 + 9096);
    do
      physx::NpConstraint::updateConstants(*(void *)(v20 + 8 * v19++));
    while (v19 < *(unsigned int *)(a1 + 9140));
  }
  physx::PxcScratchAllocator::setBlock(*(void *)(a1 + 1872), a3, a4);
  *(float *)(a1 + 9336) = a9;
  if (v12 == 1)
  {
    *(float *)(a1 + 2016) = a9;
    float v21 = 1.0 / a9;
    if (a9 <= 0.0) {
      float v21 = 0.0;
    }
    *(float *)(a1 + 2020) = v21;
  }
  v18[1396] = a5;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  physx::Scb::Scene::updateLowLevelMaterial((pthread_mutex_t **)(a1 + 16), *(physx::NpMaterial ***)(v22 + 56));
  *(_DWORD *)(a1 + 7508) = v12;
  *(unsigned char *)(a1 + 7705) = 1;
  v18[1437] = 1;
  if (a5)
  {
    (*(void (**)(void))(**(void **)(a1 + 9360) + 16))(*(void *)(a1 + 9360));
    (*(void (**)(void))(**(void **)(a1 + 9360) + 24))(*(void *)(a1 + 9360));
  }
  uint64_t v23 = *(void *)(a1 + 9360);
  if (v12 == 1)
  {
    *(_DWORD *)(a1 + 9456) = 1;
    *(void *)(a1 + 9448) = a2;
    *(void *)(a1 + 9440) = v23;
    if (a2) {
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
    }
    *(_DWORD *)(a1 + 9608) = 1;
    *(void *)(a1 + 9600) = a1 + 9424;
    (*(void (**)(uint64_t))(*(void *)(a1 + 9424) + 32))(a1 + 9424);
    *(void *)(a1 + 9592) = *(void *)(*(void *)(a1 + 9600) + 16);
    uint64_t v24 = *(void *)(a1 + 9360);
    *(_DWORD *)(a1 + 9408) = 1;
    *(void *)(a1 + 9400) = 0;
    *(void *)(a1 + 9392) = v24;
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 9440) + 144))(*(void *)(a1 + 9440), a1 + 9424);
    uint64_t v25 = *(void *)(a1 + 9592);
  }
  else
  {
    *(_DWORD *)(a1 + 9408) = 1;
    *(void *)(a1 + 9400) = a2;
    *(void *)(a1 + 9392) = v23;
    if (a2)
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      uint64_t v23 = *(void *)(a1 + 9360);
    }
    *(_DWORD *)(a1 + 9552) = 1;
    *(void *)(a1 + 9544) = a1 + 9376;
    *(void *)(a1 + 9536) = v23;
    (*(void (**)(uint64_t))(*(void *)(a1 + 9376) + 32))(a1 + 9376);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 9392) + 144))(*(void *)(a1 + 9392), a1 + 9376);
    uint64_t v25 = *(void *)(a1 + 9536);
  }
  unsigned int v26 = *(uint64_t (**)(void))(*(void *)v25 + 144);
  return v26();
}

uint64_t physx::NpScene::simulate(physx::NpScene *this, float a2, physx::PxBaseTask *a3, char *a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return physx::NpScene::simulateOrCollide((uint64_t)this, (uint64_t)a3, a4, a5, a6, "PxScene::simulate: Simulation is still processing last simulate call, you should call fetchResults()!", 3, a9, a2, a10);
}

uint64_t physx::NpScene::advance(pthread_mutex_t **this, pthread_mutex_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_DWORD *)this + 1877) == 2)
  {
    physx::Scb::Scene::syncWriteThroughProperties(this + 2);
    *((_DWORD *)this + 1877) = 3;
    this[1175] = a2;
    if (a2) {
      (*(void (**)(pthread_mutex_t *))(a2->__sig + 32))(a2);
    }
    uint64_t v11 = this[1170];
    *((_DWORD *)this + 2416) = 1;
    this[1207] = (pthread_mutex_t *)(this + 1172);
    this[1206] = v11;
    (*(void (**)(char *))&this[1172]->__opaque[24])((char *)this + 9376);
    (*(void (**)(pthread_mutex_t *, char *))(this[1174]->__sig + 144))(this[1174], (char *)this + 9376);
    int v12 = *(uint64_t (**)(void))(this[1206]->__sig + 144);
    return v12();
  }
  else
  {
    uint64_t v14 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v14, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 1950, "PxScene::advance: advance() called illegally! advance() needed to be called after fetchCollision() and before fetchResult()!!", a6, a7, a8, a9);
  }
}

uint64_t physx::NpScene::collide(physx::NpScene *this, float a2, physx::PxBaseTask *a3, char *a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return physx::NpScene::simulateOrCollide((uint64_t)this, (uint64_t)a3, a4, a5, a6, "PxScene::collide: collide() called illegally! If it isn't the first frame, collide() needed to be called between fetchResults() and fetchCollision(). Otherwise, collide() needed to be called before fetchCollision()", 1, a9, a2, a10);
}

BOOL physx::NpScene::checkResults(physx::shdfnd::SyncImpl **this, int a2)
{
  return physx::shdfnd::SyncImpl::wait(this[1164], a2 << 31 >> 31);
}

BOOL physx::NpScene::checkCollision(physx::shdfnd::SyncImpl **this, int a2)
{
  return physx::shdfnd::SyncImpl::wait(this[1165], a2 << 31 >> 31);
}

BOOL physx::NpScene::fetchCollision(physx::shdfnd::SyncImpl **this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 1877) == 1)
  {
    BOOL result = physx::shdfnd::SyncImpl::wait(this[1165], a2 << 31 >> 31);
    if (result)
    {
      *((_DWORD *)this + 1877) = 2;
      return 1;
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2048, "PxScene::fetchCollision: fetchCollision() should be called after collide() and before advance()!", a6, a7, a8, v10);
    return 0;
  }
  return result;
}

uint64_t physx::NpScene::fetchResultsPreContactCallbacks(physx::NpScene *this)
{
  int v2 = (physx::NpScene *)((char *)this + 16);
  __int16 v3 = (physx::NpScene *)((char *)this + 32);
  physx::Sc::Scene::prepareOutOfBoundsCallbacks((uint64_t)this + 32);
  physx::Scb::Scene::processPendingRemove(v2, v4);
  physx::Sc::Scene::endSimulation(v3);
  char v8 = physx::Sc::Scene::fireOutOfBoundsCallbacks(v3);
  uint64_t v9 = *((void *)this + 235);
  uint64_t v10 = *(unsigned int *)(v9 + 432);
  if (v10)
  {
    uint64_t v11 = *(void *)(v9 + 424);
    uint64_t v12 = *((void *)this + 535);
    do
    {
      if (*(_DWORD *)(*(void *)v11 + 24) >> 30 == 3 || v12 == 0) {
        v8 |= *(_DWORD *)(*(void *)v11 + 24) >> 30 != 3;
      }
      else {
        (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
      }
      v11 += 8;
      --v10;
    }
    while (v10);
    uint64_t v9 = *((void *)this + 235);
  }
  *(_DWORD *)(v9 + 432) = 0;
  if (v8) {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2040, "At least one object is out of the broadphase bounds. To manage those objects, define a PxBroadPhaseCallback for each used client.", v5, v6, v7, v15);
  }
  physx::Sc::Scene::fireBrokenConstraintCallbacks((uint64_t)v3);
  return physx::Sc::Scene::fireTriggerCallbacks((uint64_t)v3);
}

uint64_t physx::NpScene::fetchResultsPostContactCallbacks(physx::NpScene *this)
{
  int v2 = (char *)this + 9688;
  __int16 v3 = (physx::NpScene *)((char *)this + 16);
  int8x8_t v4 = (physx::NpScene *)((char *)this + 32);
  physx::Sc::Scene::postCallbacksPreSync((physx::NpScene *)((char *)this + 32));
  physx::Scb::Scene::syncEntireScene(v3);
  uint64_t v9 = (uint64_t (**)(void, void, uint64_t))&unk_26E72E050;
  physx::Sc::SqBoundsManager::syncBounds(*((void *)this + 265), (uint64_t (***)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))this + 1103, &v9, *(void *)(*((void *)this + 262) + 8), *((void *)this + 7), (uint64_t)this + 4544);
  physx::Sq::SceneQueryManager::updateCompoundActors((uint64_t)this + 8640, *((physx::Sc::BodyCore *const **)this + 11), *((_DWORD *)this + 24));
  physx::Sq::SceneQueryManager::afterSync((physx::NpScene *)((char *)this + 8640), *((_DWORD *)this + 2248));
  physx::Sc::Scene::fireCallbacksPostSync(v4);
  physx::Sc::Scene::postReportsCleanup(v4);
  uint64_t v5 = 8608;
  if ((*((unsigned char *)this + 8624) & 4) == 0) {
    uint64_t v5 = 4300;
  }
  if (*((unsigned char *)this + v5))
  {
    if (v2[43]) {
      physx::Sc::Scene::buildActiveAndFrozenActors((uint64_t)v4);
    }
    else {
      physx::Sc::Scene::buildActiveActors((uint64_t)v4);
    }
  }
  physx::Cm::RenderBuffer::append((uint64_t)this + 9000, *((void *)this + 234) + 296);
  if (*v2) {
    (*(void (**)(void))(**((void **)this + 1170) + 32))(*((void *)this + 1170));
  }
  *((_DWORD *)this + 1877) = 0;
  uint64_t v6 = (pthread_mutex_t *)*((void *)this + 1164);
  pthread_mutex_lock(v6);
  v6[1].__opaque[44] = 0;
  pthread_mutex_unlock(v6);
  uint64_t v7 = (pthread_mutex_t *)*((void *)this + 1165);
  pthread_mutex_lock(v7);
  v7[1].__opaque[44] = 0;
  return pthread_mutex_unlock(v7);
}

BOOL physx::NpScene::fetchResults(physx::shdfnd::SyncImpl **this, int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)this + 1877) == 3)
  {
    BOOL result = physx::shdfnd::SyncImpl::wait(this[1164], a2 << 31 >> 31);
    if (result)
    {
      physx::NpScene::fetchResultsPreContactCallbacks((physx::NpScene *)this);
      physx::Sc::Scene::fireQueuedContactCallbacks((uint64_t)(this + 4), 0);
      physx::NpScene::fetchResultsPostContactCallbacks((physx::NpScene *)this);
      if (a3) {
        *a3 = 0;
      }
      return 1;
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2159, "PxScene::fetchResults: fetchResults() called illegally! It must be called after advance() or simulate()", a6, a7, a8, v11);
    return 0;
  }
  return result;
}

BOOL physx::NpScene::fetchResultsStart(uint64_t a1, void *a2, _DWORD *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 7508) == 3)
  {
    BOOL result = physx::shdfnd::SyncImpl::wait(*(physx::shdfnd::SyncImpl **)(a1 + 9312), a4 << 31 >> 31);
    if (result)
    {
      physx::NpScene::fetchResultsPreContactCallbacks((physx::NpScene *)a1);
      QueuedContactPairHeaders = physx::Sc::Scene::getQueuedContactPairHeaders((physx::Sc::Scene *)(a1 + 32));
      *a3 = *((_DWORD *)QueuedContactPairHeaders + 2);
      *a2 = *(void *)QueuedContactPairHeaders;
      BOOL result = 1;
      *(unsigned char *)(a1 + 9730) = 1;
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2210, "PXScene::fetchResultsStart: fetchResultsStart() called illegally! It must be called after advance() or simulate()", a6, a7, a8, v13);
    return 0;
  }
  return result;
}

uint64_t physx::NpContactCallbackTask::run(physx::NpContactCallbackTask *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 272))(*((void *)this + 5));
  if (result)
  {
    uint64_t v3 = result;
    (*(void (**)(void, void, void))(**((void **)this + 5) + 784))(*((void *)this + 5), 0, 0);
    if (*((_DWORD *)this + 14))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v3 + 24))(v3, *((void *)this + 6) + v4, *(void *)(*((void *)this + 6) + v4 + 32), *(unsigned int *)(*((void *)this + 6) + v4 + 40));
        ++v5;
        v4 += 48;
      }
      while (v5 < *((unsigned int *)this + 14));
    }
    uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 5) + 792);
    return v6();
  }
  return result;
}

char *physx::NpScene::processCallbacks(physx::NpScene *this, physx::PxBaseTask *a2)
{
  uint64_t result = physx::Sc::Scene::getQueuedContactPairHeaders((physx::NpScene *)((char *)this + 32));
  unsigned int v5 = *((_DWORD *)result + 2);
  if (v5)
  {
    unsigned int v6 = 0;
    uint64_t v7 = *(void *)result;
    char v8 = *(pthread_mutex_t ***)(*((void *)this + 234) + 1920);
    unsigned int v9 = *((_DWORD *)result + 2);
    do
    {
      uint64_t v10 = physx::Cm::FlushPool::allocate(v8, 64, 0x10u);
      char v11 = (void *)v10;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(void *)(v10 + 56) = 0;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_DWORD *)(v10 + 32) = 0;
      uint64_t v12 = (uint64_t (**)(void *))&unk_26E72D4D8;
      *(void *)uint64_t v10 = &unk_26E72D4D8;
      if (v9 >= 0x100) {
        int v13 = 256;
      }
      else {
        int v13 = v9;
      }
      *(void *)(v10 + 40) = this;
      *(void *)(v10 + 48) = v7 + 48 * v6;
      *(_DWORD *)(v10 + 56) = v13;
      *(_DWORD *)(v10 + 32) = 1;
      *(void *)(v10 + 24) = a2;
      if (a2)
      {
        (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
        v11[2] = *(void *)(v11[3] + 16);
        uint64_t v12 = (uint64_t (**)(void *))*v11;
      }
      uint64_t result = (char *)v12[5](v11);
      v6 += 256;
      v9 -= 256;
    }
    while (v6 < v5);
  }
  return result;
}

uint64_t physx::NpScene::fetchResultsFinish(physx::NpScene *this, unsigned int *a2)
{
  *((unsigned char *)this + 9730) = 0;
  uint64_t result = physx::NpScene::fetchResultsPostContactCallbacks(this);
  if (a2) {
    *a2 = 0;
  }
  return result;
}

void *physx::NpScene::flushSimulation(physx::NpScene *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*((_DWORD *)this + 1877))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    return (void *)physx::shdfnd::Foundation::error(v9, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2308, "PxScene::flushSimulation(): This call is not allowed while the simulation is running. Call will be ignored", a6, a7, a8, a9);
  }
  else
  {
    int v13 = (physx::NpScene *)((char *)this + 32);
    uint64_t v14 = (char *)this + 7808;
    LOWORD(v15) = 0;
    physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::resize((uint64_t)this + 7808, 0, &v15);
    physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::recreate((uint64_t)v14, *((_DWORD *)this + 1954));
    uint64_t v15 = 0;
    physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::resize((uint64_t)this + 7824, 0, &v15);
    physx::shdfnd::Array<physx::Scb::Shape *,physx::shdfnd::ReflectionAllocator<physx::Scb::Shape *>>::recreate((uint64_t)this + 7824, *((_DWORD *)this + 1958));
    uint64_t v15 = 0;
    physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::resize((uint64_t)this + 7840, 0, &v15);
    physx::shdfnd::Array<physx::Scb::Actor *,physx::shdfnd::ReflectionAllocator<physx::Scb::Actor *>>::recreate((uint64_t)this + 7840, *((_DWORD *)this + 1962));
    physx::Sc::Scene::flush(v13, a2);
    return physx::Sq::SceneQueryManager::flushMemory((physx::NpScene *)((char *)this + 8640));
  }
}

uint64_t physx::NpScene::flushQueryUpdates(physx::NpScene *this)
{
  return physx::Sq::SceneQueryManager::flushUpdates((uint64_t)this + 8640);
}

uint64_t physx::NpScene::setDominanceGroupPair(uint64_t result, unsigned int a2, unsigned int a3, unsigned char *a4)
{
  if (!*(unsigned char *)(result + 7705)) {
    return physx::Sc::Scene::setDominanceGroupPair(result + 32, a2, a3, a4);
  }
  if (a2 <= a3) {
    char v4 = a3;
  }
  else {
    char v4 = a2;
  }
  if (a2 >= a3) {
    unsigned int v5 = a3;
  }
  else {
    unsigned int v5 = a2;
  }
  *(_DWORD *)(result + 4 * v5 + 8340) |= 1 << v4;
  int v6 = 1 << a3;
  uint64_t v7 = result + 4 * a2;
  if (*a4) {
    int v8 = *(_DWORD *)(v7 + 8464) | v6;
  }
  else {
    int v8 = *(_DWORD *)(v7 + 8464) & ~v6;
  }
  *(_DWORD *)(v7 + 8464) = v8;
  int v9 = 1 << a2;
  uint64_t v10 = result + 4 * a3;
  if (a4[1]) {
    int v11 = *(_DWORD *)(v10 + 8464) | v9;
  }
  else {
    int v11 = *(_DWORD *)(v10 + 8464) & ~v9;
  }
  *(_DWORD *)(v10 + 8464) = v11;
  *(_DWORD *)(result + 8624) |= 8u;
  return result;
}

uint64_t physx::NpScene::getDominanceGroupPair(physx::NpScene *this, unsigned int a2, unsigned int a3)
{
  if ((*((unsigned char *)this + 8624) & 8) != 0
    && (a2 >= a3 ? (unsigned int v3 = a3) : (unsigned int v3 = a2),
        a2 <= a3 ? (char v4 = a3) : (char v4 = a2),
        ((*((_DWORD *)this + v3 + 2085) >> v4) & 1) != 0))
  {
    unsigned int v5 = (char *)this + 8464;
    unsigned int v6 = (*((_DWORD *)this + a2 + 2116) & (1 << a3)) >> a3;
    unsigned int v7 = (*(_DWORD *)&v5[4 * a3] & (1 << a2)) >> a2;
  }
  else
  {
    int v8 = *((_DWORD *)this + a3 + 1140) >> a2;
    unsigned int v6 = (*((_DWORD *)this + a2 + 1140) >> a3) & 1;
    unsigned int v7 = v8 & 1;
  }
  return v6 | (v7 << 8);
}

uint64_t physx::NpScene::setSceneQueryUpdateMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8992) = a2;
  return result;
}

uint64_t physx::NpScene::getSceneQueryUpdateMode(physx::NpScene *this)
{
  return *((unsigned int *)this + 2248);
}

uint64_t physx::NpScene::setDynamicTreeRebuildRateHint(physx::NpScene *this, uint64_t a2)
{
  return physx::Sq::SceneQueryManager::setDynamicTreeRebuildRateHint((physx::NpScene *)((char *)this + 8640), a2);
}

uint64_t physx::NpScene::getDynamicTreeRebuildRateHint(physx::NpScene *this)
{
  return *((unsigned int *)this + 2200);
}

uint64_t physx::NpScene::forceDynamicTreeRebuild(physx::NpScene *this, char a2, char a3)
{
  return physx::Sq::SceneQueryManager::forceDynamicTreeRebuild((uint64_t)this + 8640, a2, a3);
}

uint64_t physx::NpScene::setSolverBatchSize(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 7705))
  {
    *(_DWORD *)(this + 8612) = a2;
    *(_DWORD *)(this + 8624) |= 0x10u;
  }
  else
  {
    *(_DWORD *)(*(void *)(this + 1920) + 140) = a2;
  }
  return this;
}

uint64_t physx::NpScene::getSolverBatchSize(physx::NpScene *this)
{
  if ((*((unsigned char *)this + 8624) & 0x10) != 0) {
    int v1 = (unsigned int *)((char *)this + 8612);
  }
  else {
    int v1 = (unsigned int *)(*((void *)this + 240) + 140);
  }
  return *v1;
}

uint64_t physx::NpScene::setSolverArticulationBatchSize(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 7705))
  {
    *(_DWORD *)(this + 8616) = a2;
    *(_DWORD *)(this + 8624) |= 0x80u;
  }
  else
  {
    *(_DWORD *)(*(void *)(this + 1920) + 144) = a2;
  }
  return this;
}

uint64_t physx::NpScene::getSolverArticulationBatchSize(physx::NpScene *this)
{
  if ((*((unsigned char *)this + 8624) & 0x80) != 0) {
    int v1 = (unsigned int *)((char *)this + 8612);
  }
  else {
    int v1 = (unsigned int *)(*((void *)this + 240) + 144);
  }
  return *v1;
}

uint64_t physx::NpScene::setVisualizationParameter(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((int)a2 >= 24)
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    uint64_t v10 = "setVisualizationParameter: parameter out of range.";
    uint64_t v11 = 2477;
LABEL_5:
    physx::shdfnd::Foundation::error(v9, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", v11, v10, a7, a8, a9, vars0);
    return 0;
  }
  if (a3 < 0.0)
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    uint64_t v10 = "setVisualizationParameter: value must be larger or equal to 0.";
    uint64_t v11 = 2482;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 7705))
  {
    uint64_t v12 = 1;
    *(unsigned char *)(a1 + 8196 + a2 + 96) = 1;
    *(float *)(a1 + 8196 + 4 * a2) = a3;
    *(_DWORD *)(a1 + 8624) |= 0x20u;
  }
  else
  {
    uint64_t v12 = 1;
    *(unsigned char *)(a1 + 4692) = 1;
    *(float *)(*(void *)(a1 + 1872) + 4 * a2 + 1792) = a3;
    if (!a2) {
      *(float *)(a1 + 4688) = a3;
    }
  }
  return v12;
}

float physx::NpScene::getVisualizationParameter(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((int)a2 > 23)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2497, "getVisualizationParameter: param is not an enum.", a6, a7, a8, vars0);
    return 0.0;
  }
  else if ((*(unsigned char *)(a1 + 8624) & 0x20) != 0 && *(unsigned char *)(a1 + a2 + 8292))
  {
    return *(float *)(a1 + 4 * a2 + 8196);
  }
  else
  {
    return *(float *)(*(void *)(a1 + 1872) + 4 * a2 + 1792);
  }
}

double physx::NpScene::setVisualizationCullingBox(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 7705))
  {
    *(void *)(a1 + 8316) = *(void *)a2;
    *(void *)(a1 + 8324) = *(void *)(a2 + 8);
    double result = *(double *)(a2 + 16);
    *(double *)(a1 + 8332) = result;
    *(_DWORD *)(a1 + 8624) |= 0x40u;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 1872);
    *(void *)(v3 + 1888) = *(void *)a2;
    *(void *)(v3 + 1896) = *(void *)(a2 + 8);
    double result = *(double *)(a2 + 16);
    *(double *)(v3 + 1904) = result;
  }
  return result;
}

double physx::NpScene::getVisualizationCullingBox@<D0>(physx::NpScene *this@<X0>, uint64_t a2@<X8>)
{
  if ((*((unsigned char *)this + 8624) & 0x40) != 0) {
    int v2 = (double *)((char *)this + 8316);
  }
  else {
    int v2 = (double *)(*((void *)this + 234) + 1888);
  }
  *(_OWORD *)a2 = *(_OWORD *)v2;
  double result = v2[2];
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t physx::NpScene::setNbContactDataBlocks(physx::NpScene *this, unsigned int a2)
{
  return physx::PxcNpMemBlockPool::setBlockCount(*((void *)this + 234) + 40, a2);
}

uint64_t physx::NpScene::getNbContactDataBlocksUsed(physx::NpScene *this)
{
  return *(unsigned int *)(*((void *)this + 234) + 244);
}

uint64_t physx::NpScene::getMaxNbContactDataBlocksUsed(physx::NpScene *this)
{
  return *(unsigned int *)(*((void *)this + 234) + 248);
}

uint64_t physx::NpScene::getTimestamp(physx::NpScene *this)
{
  return *((unsigned int *)this + 506);
}

uint64_t physx::NpScene::getSceneQueryStaticTimestamp(physx::NpScene *this)
{
  return *((unsigned int *)this + 2171);
}

uint64_t physx::NpScene::getCpuDispatcher(physx::NpScene *this)
{
  int v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(physx::NpScene *))(*(void *)this + 776))(this)
                           + 8);
  return v1();
}

uint64_t physx::NpScene::getCudaContextManager(physx::NpScene *this)
{
  return *((void *)this + 1171);
}

{
  return *((void *)this + 1171);
}

uint64_t physx::NpScene::getStaticStructure(physx::NpScene *this)
{
  return *((unsigned int *)this + 2170);
}

uint64_t physx::NpScene::getDynamicStructure(physx::NpScene *this)
{
  return *((unsigned int *)this + 2182);
}

float physx::NpScene::getFrictionOffsetThreshold(physx::NpScene *this)
{
  return *(float *)(*((void *)this + 240) + 124);
}

uint64_t physx::NpScene::getContactReportStreamBufferSize(physx::NpScene *this)
{
  return *(unsigned int *)(*((void *)this + 503) + 80);
}

pthread_mutex_t ***physx::NpScene::lockRead(physx::NpScene *this, const char *a2)
{
  unsigned int v3 = pthread_getspecific(*((unsigned int *)this + 2427));
  double result = (pthread_mutex_t ***)pthread_setspecific(*((unsigned int *)this + 2427), (const void *)((v3 + 0x10000) & 0xFF0000 | (unint64_t)(v3 & 0xFF00FFFF)));
  if ((*(void *)&v3 & 0xFF0000) == 0)
  {
    unsigned int v5 = (pthread_mutex_t ***)((char *)this + 9720);
    pthread_t v6 = (pthread_t)*((void *)this + 1214);
    BOOL v7 = v6 != pthread_self();
    return physx::shdfnd::ReadWriteLock::lockReader(v5, v7);
  }
  return result;
}

uint64_t physx::NpScene::unlockRead(physx::NpScene *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v10 = pthread_getspecific(*((unsigned int *)this + 2427));
  if (BYTE2(v10))
  {
    int v14 = (BYTE2(v10) - 1);
    uint64_t result = pthread_setspecific(*((unsigned int *)this + 2427), (const void *)(v10 & 0xFF00FFFF | ((unint64_t)(BYTE2(v10) - 1) << 16)));
    if (!v14)
    {
      uint64_t v16 = *((void *)this + 1215);
      if (v16) {
        atomic_fetch_add((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF);
      }
    }
  }
  else
  {
    uint64_t v17 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v17, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2749, "PxScene::unlockRead() called without matching call to PxScene::lockRead(), behaviour will be undefined.", v11, v12, v13, a9);
  }
  return result;
}

pthread_t physx::NpScene::lockWrite(physx::NpScene *this, const char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v12 = pthread_getspecific(*((unsigned int *)this + 2427));
  uint64_t v16 = v12 & 0xFF000000;
  if ((*(void *)&v12 & 0xFF0000) != 0 && v16 == 0)
  {
    uint64_t v19 = physx::shdfnd::Foundation::mInstance;
    if (a2) {
      uint64_t v20 = a2;
    }
    else {
      uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp";
    }
    if (a2) {
      uint64_t v21 = a3;
    }
    else {
      uint64_t v21 = 2766;
    }
    return (pthread_t)physx::shdfnd::Foundation::error(v19, 8, (uint64_t)v20, v21, "PxScene::lockWrite() detected after a PxScene::lockRead(), lock upgrading is not supported, behaviour will be undefined.", v13, v14, v15, a9);
  }
  else
  {
    pthread_setspecific(*((unsigned int *)this + 2427), (const void *)((v12 + 0x1000000) & 0xFF000000 | *(void *)&v12 & 0xFFFFFFLL));
    if (!v16) {
      physx::shdfnd::ReadWriteLock::lockWriter((uint64_t *)this + 1215);
    }
    pthread_t result = pthread_self();
    *((void *)this + 1214) = result;
  }
  return result;
}

uint64_t physx::NpScene::unlockWrite(physx::NpScene *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v10 = pthread_getspecific(*((unsigned int *)this + 2427));
  if ((v10 & 0xFF000000) != 0)
  {
    int v14 = (HIBYTE(v10) - 1);
    uint64_t result = pthread_setspecific(*((unsigned int *)this + 2427), (const void *)(*(void *)&v10 & 0xFFFFFFLL | ((unint64_t)(HIBYTE(v10) - 1) << 24)));
    if (!v14)
    {
      *((void *)this + 1214) = 0;
      uint64_t v17 = (pthread_mutex_t **)*((void *)this + 1215);
      if (v17)
      {
        if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
        {
          unint64_t v18 = *v17;
          return pthread_mutex_unlock(v18);
        }
      }
    }
  }
  else
  {
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v16, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2788, "PxScene::unlockWrite() called without matching call to PxScene::lockWrite(), behaviour will be undefined.", v11, v12, v13, a9);
  }
  return result;
}

float physx::NpScene::getWakeCounterResetValue(physx::NpScene *this)
{
  return *((float *)this + 2048);
}

float physx::NpScene::shiftOrigin(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(unsigned char *)(a1 + 7705))
  {
    uint64_t v9 = physx::shdfnd::Foundation::mInstance;
    physx::shdfnd::Foundation::error(v9, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2838, "PxScene::shiftOrigin() not allowed while simulation is running. Call will be ignored.", a6, a7, a8, a9);
  }
  else
  {
    uint64_t v12 = a1;
    unsigned int v13 = *(_DWORD *)(a1 + 9152);
    uint64_t v14 = *(void *)(a1 + 9144);
    if (v13 >= 4)
    {
      uint64_t v59 = *(void *)(a1 + 9144);
      unint64_t v16 = 0;
      unsigned int v17 = 0;
      unint64_t v60 = *(unsigned int *)(a1 + 9152);
      unsigned int v18 = v13 >> 2;
      unsigned int v19 = (v13 >> 2) - 1;
      uint64_t v20 = (uint64_t *)(v14 + 32);
      uint64_t v21 = 4;
      do
      {
        unint64_t v15 = v16 + 4;
        if (v17 >= v19)
        {
          if (v15 < v60)
          {
            uint64_t v39 = v20;
            unint64_t v40 = v60;
            do
            {
              uint64_t v42 = *v39++;
              _X10 = v42;
              __asm
              {
                PRFM            #0, [X10]
                PRFM            #0, [X10,#0x80]
              }
              --v40;
            }
            while (v21 != v40);
          }
        }
        else
        {
          _X9 = *(void *)(v59 + 8 * v15);
          __asm
          {
            PRFM            #0, [X9]
            PRFM            #0, [X9,#0x80]
          }
          unsigned int v29 = (void *)(v59 + 8 * v16);
          _X9 = v29[5];
          __asm
          {
            PRFM            #0, [X9]
            PRFM            #0, [X9,#0x80]
          }
          _X9 = v29[6];
          _X8 = v29[7];
          __asm
          {
            PRFM            #0, [X9]
            PRFM            #0, [X9,#0x80]
            PRFM            #0, [X8]
            PRFM            #0, [X8,#0x80]
          }
        }
        for (uint64_t i = 0; i != 32; i += 8)
        {
          float v46 = *(float32x2_t **)(v14 + i);
          if ((*(unsigned int (**)(float32x2_t *))(*(void *)v46 + 48))(v46))
          {
            v46[42] = vsub_f32(v46[42], *a2);
            v46[43].f32[0] = v46[43].f32[0] - a2[1].f32[0];
            physx::Sc::BodyCore::onOriginShift(v46 + 16, a2);
          }
          else
          {
            v46[20] = vsub_f32(v46[20], *a2);
            v46[21].f32[0] = v46[21].f32[0] - a2[1].f32[0];
          }
        }
        ++v17;
        v21 += 4;
        v20 += 4;
        v14 += 32;
        unint64_t v16 = v15;
      }
      while (v17 != v18);
      uint64_t v12 = a1;
      uint64_t v14 = v59;
      unsigned int v13 = v60;
    }
    else
    {
      LODWORD(v15) = 0;
    }
    if (v15 < v13)
    {
      int v47 = v13 - v15;
      float v48 = (float32x2_t **)(v14 + 8 * v15);
      do
      {
        uint64_t v49 = *v48;
        if ((*(unsigned int (**)(float32x2_t *))(*(void *)*v48 + 48))(*v48))
        {
          v49[42] = vsub_f32(v49[42], *a2);
          v49[43].f32[0] = v49[43].f32[0] - a2[1].f32[0];
          physx::Sc::BodyCore::onOriginShift(v49 + 16, a2);
        }
        else
        {
          v49[20] = vsub_f32(v49[20], *a2);
          v49[21].f32[0] = v49[21].f32[0] - a2[1].f32[0];
        }
        ++v48;
        --v47;
      }
      while (v47);
    }
    if (*(_DWORD *)(v12 + 9212))
    {
      unint64_t v50 = 0;
      uint64_t v51 = *(void *)(v12 + 9168);
      do
      {
        uint64_t v52 = *(void *)(v51 + 8 * v50);
        uint64_t v53 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v52 + 200))(v52) + 120);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v52 + 152))(v52))
        {
          unint64_t v54 = 0;
          do
          {
            uint64_t v55 = *(float32x2_t **)(v53 + 8 * v54);
            if ((*(unsigned int (**)(float32x2_t *))(*(void *)v55 + 48))(v55))
            {
              v55[42] = vsub_f32(v55[42], *a2);
              v55[43].f32[0] = v55[43].f32[0] - a2[1].f32[0];
              v56.n128_f32[0] = physx::Sc::BodyCore::onOriginShift(v55 + 16, a2);
            }
            else
            {
              v56.n128_u64[0] = (unint64_t)vsub_f32(v55[20], *a2);
              v55[20] = (float32x2_t)v56.n128_u64[0];
              v56.n128_f32[0] = v55[21].f32[0] - a2[1].f32[0];
              v55[21].i32[0] = v56.n128_u32[0];
            }
            ++v54;
          }
          while (v54 < (*(unsigned int (**)(uint64_t, __n128))(*(void *)v52 + 152))(v52, v56));
        }
        ++v50;
      }
      while (v50 < *(unsigned int *)(v12 + 9212));
    }
    physx::Sc::Scene::shiftOrigin(v12 + 32, a2);
    physx::Sq::SceneQueryManager::shiftOrigin(v12 + 8640, (uint64_t)a2);
    float v57 = -a2[1].f32[0];
    float32x2_t v61 = vneg_f32(*a2);
    float v62 = v57;
    return physx::Cm::RenderBuffer::shift(v12 + 9000, &v61);
  }
  return result;
}

float physx::Cm::RenderBuffer::shift(uint64_t a1, float32x2_t *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = (float *)(*(void *)(a1 + 8) + 8);
    do
    {
      *((float32x2_t *)v3 - 1) = vadd_f32(*a2, *(float32x2_t *)(v3 - 2));
      float result = a2[1].f32[0] + *v3;
      float *v3 = result;
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  if (v5)
  {
    pthread_t v6 = (float32x2_t *)(*(void *)(a1 + 24) + 16);
    do
    {
      v6[-2] = vadd_f32(*a2, v6[-2]);
      v6[-1].f32[0] = a2[1].f32[0] + v6[-1].f32[0];
      *pthread_t v6 = vadd_f32(*a2, *v6);
      float result = a2[1].f32[0] + v6[1].f32[0];
      v6[1].f32[0] = result;
      v6 += 4;
      --v5;
    }
    while (v5);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 48);
  if (v7)
  {
    int v8 = (float32x2_t *)(*(void *)(a1 + 40) + 24);
    do
    {
      v8[-3] = vadd_f32(*a2, v8[-3]);
      v8[-2].f32[0] = a2[1].f32[0] + v8[-2].f32[0];
      v8[-1] = vadd_f32(*a2, v8[-1]);
      v8->f32[0] = a2[1].f32[0] + v8->f32[0];
      v8[1] = vadd_f32(*a2, v8[1]);
      float result = a2[1].f32[0] + v8[2].f32[0];
      v8[2].f32[0] = result;
      v8 += 6;
      --v7;
    }
    while (v7);
  }
  uint64_t v9 = *(unsigned int *)(a1 + 64);
  if (v9)
  {
    unsigned int v10 = (float *)(*(void *)(a1 + 56) + 8);
    do
    {
      *((float32x2_t *)v10 - 1) = vadd_f32(*a2, *(float32x2_t *)(v10 - 2));
      float result = a2[1].f32[0] + *v10;
      *unsigned int v10 = result;
      v10 += 8;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::NpScene::getScenePvdClient(physx::NpScene *this)
{
  return 0;
}

uint64_t physx::NpScene::getSimulationController(physx::NpScene *this)
{
  return *((void *)this + 242);
}

void *physx::NpScene::setActiveActors(physx::NpScene *this, physx::PxActor **a2, unsigned int a3)
{
  *((_DWORD *)this + 1054) = 0;
  uint64_t v7 = 0;
  physx::shdfnd::Array<physx::PxActor *,physx::shdfnd::ReflectionAllocator<physx::PxActor *>>::resize((uint64_t)this + 4208, a3, &v7);
  return memcpy(*((void **)this + 526), a2, 8 * a3);
}

physx::Sq::SceneQueryManager *physx::NpScene::forceSceneQueryRebuild(physx::NpScene *this)
{
  char v4 = (uint64_t (**)(void, void, uint64_t))&unk_26E72E050;
  uint64_t v2 = (physx::NpScene *)((char *)this + 8640);
  physx::Sc::SqBoundsManager::syncBounds(*((void *)this + 265), (uint64_t (***)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))this + 1103, &v4, *(void *)(*((void *)this + 262) + 8), *((void *)this + 7), (uint64_t)this + 4544);
  return physx::Sq::SceneQueryManager::afterSync(v2, *((_DWORD *)this + 2248));
}

uint64_t physx::NpScene::sceneQueriesUpdate(physx::NpScene *this, physx::PxBaseTask *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = (char *)this + 9728;
  if (*((unsigned char *)this + 9728))
  {
    uint64_t v10 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v10, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 2961, "PxScene::fetchSceneQueries was not called!", a6, a7, a8, a9);
  }
  else
  {
    physx::Sq::SceneQueryManager::flushUpdates((uint64_t)this + 8640);
    uint64_t v15 = *((void *)this + 1080);
    if (v15 && *((_DWORD *)this + 2170) == 1) {
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 152))(v15);
    }
    else {
      int v16 = 0;
    }
    uint64_t v17 = *((void *)this + 1086);
    if (v17 && *((_DWORD *)this + 2182) == 1) {
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 152))(v17);
    }
    else {
      int v18 = 0;
    }
    *uint64_t v9 = 1;
    if (a3)
    {
      (*(void (**)(void))(**((void **)this + 1170) + 16))(*((void *)this + 1170));
      (*(void (**)(void))(**((void **)this + 1170) + 24))(*((void *)this + 1170));
    }
    uint64_t v19 = *((void *)this + 1170);
    uint64_t v20 = (char *)this + 9472;
    *((_DWORD *)this + 2376) = 1;
    *((void *)this + 1187) = a2;
    *((void *)this + 1186) = v19;
    if (a2) {
      (*(void (**)(physx::PxBaseTask *))(*(void *)a2 + 32))(a2);
    }
    if (v16)
    {
      *((_DWORD *)this + 2228) = 1;
      *((void *)this + 1113) = v20;
      (*(void (**)(char *))(*((void *)this + 1184) + 32))((char *)this + 9472);
      *((void *)this + 1112) = *(void *)(*((void *)this + 1113) + 16);
    }
    if (v18)
    {
      *((_DWORD *)this + 2242) = 1;
      *((void *)this + 1120) = v20;
      (*(void (**)(char *))(*((void *)this + 1184) + 32))((char *)this + 9472);
      *((void *)this + 1119) = *(void *)(*((void *)this + 1120) + 16);
    }
    uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this + 1186) + 144))(*((void *)this + 1186), (char *)this + 9472);
    if (v16) {
      uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this + 1112) + 144))(*((void *)this + 1112), (char *)this + 8880);
    }
    if (v18)
    {
      uint64_t v21 = *(uint64_t (**)(void))(**((void **)this + 1119) + 144);
      return v21();
    }
  }
  return result;
}

BOOL physx::NpScene::checkQueries(physx::shdfnd::SyncImpl **this, int a2)
{
  return physx::shdfnd::SyncImpl::wait(this[1166], a2 << 31 >> 31);
}

BOOL physx::NpScene::fetchQueries(physx::shdfnd::SyncImpl **this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = this + 1216;
  if (*((unsigned char *)this + 9728))
  {
    BOOL result = physx::shdfnd::SyncImpl::wait(this[1166], a2 << 31 >> 31);
    if (result)
    {
      physx::Sq::SceneQueryManager::flushUpdates((uint64_t)(this + 1080));
      uint64_t v11 = (pthread_mutex_t *)this[1166];
      pthread_mutex_lock(v11);
      v11[1].__opaque[44] = 0;
      pthread_mutex_unlock(v11);
      *int v8 = 0;
      return 1;
    }
  }
  else
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 3019, "PxScene::fetchQueries: fetchQueries() called illegally! It must be called after sceneQueriesUpdate()", a6, a7, a8, v12);
    return 0;
  }
  return result;
}

uint64_t physx::NpScene::createBatchQuery(uint64_t a1, long long *a2)
{
  uint64_t v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::NpBatchQuery>::getName() [T = physx::NpBatchQuery]";
  }
  else {
    uint64_t v5 = "<allocation names disabled>";
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 176, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpScene.cpp", 3060);
  *(void *)uint64_t v6 = &unk_26E72BED8;
  physx::shdfnd::SyncT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SyncImpl>>::SyncT((uint64_t *)(v6 + 8));
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 16) = a1;
  *(_DWORD *)(v6 + 40) = 0;
  *(void *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 60) = 0;
  long long v7 = *a2;
  long long v8 = a2[2];
  *(_OWORD *)(v6 + 80) = a2[1];
  *(_OWORD *)(v6 + 96) = v8;
  *(_OWORD *)(v6 + 64) = v7;
  long long v9 = a2[3];
  long long v10 = a2[4];
  long long v11 = a2[5];
  *(void *)(v6 + 160) = *((void *)a2 + 12);
  *(_OWORD *)(v6 + 128) = v10;
  *(_OWORD *)(v6 + 144) = v11;
  *(_OWORD *)(v6 + 112) = v9;
  *(_DWORD *)(v6 + 168) = -16;
  *(unsigned char *)(v6 + 172) = 0;
  uint64_t v14 = v6;
  uint64_t v12 = *(unsigned int *)(a1 + 9280);
  if ((*(_DWORD *)(a1 + 9284) & 0x7FFFFFFFu) <= v12)
  {
    physx::shdfnd::Array<physx::NpBatchQuery *,physx::shdfnd::ReflectionAllocator<physx::NpBatchQuery *>>::growAndPushBack(a1 + 9272, &v14);
  }
  else
  {
    *(void *)(*(void *)(a1 + 9272) + 8 * v12) = v6;
    *(_DWORD *)(a1 + 9280) = v12 + 1;
  }
  return v6;
}

uint64_t physx::NpScene::releaseBatchQuery(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 9280);
  if (v2)
  {
    uint64_t v3 = 0;
    while (*(void *)(*(void *)(result + 9272) + 8 * v3) != a2)
    {
      if (v2 == ++v3) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if (v3 != v2)
  {
    uint64_t v4 = *(void *)(result + 9272);
    unsigned int v5 = v2 - 1;
    *(_DWORD *)(result + 9280) = v5;
    *(void *)(v4 + 8 * v3) = *(void *)(v4 + 8 * v5);
  }
LABEL_9:
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  }
  return result;
}

BOOL physx::NpSceneQueries::raycast(void *a1, uint64_t _X1, uint64_t _X2, uint64_t a4, __int16 *a5, uint64_t a6, uint64_t a7, void *a8, float a9)
{
  __asm
  {
    PRFM            #0, [X1]
    PRFM            #0, [X2]
  }
  v17[0] = _X1;
  v17[1] = _X2;
  float v18 = a9;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  __int16 v16 = *a5;
  return physx::NpSceneQueries::multiQuery<physx::PxRaycastHit>(a1, v17, a4, &v16, a8, a6, a7, 0);
}

BOOL physx::NpSceneQueries::multiQuery<physx::PxRaycastHit>(void *a1, void *a2, uint64_t a3, __int16 *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v15 = *(_WORD *)(a6 + 16) & 0x10;
  if (!a5)
  {
    uint64_t v42 = 0xFFFFFFFFLL;
    unint64_t v24 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  uint64_t v16 = a5[1];
  int v17 = *(unsigned __int16 *)(v16 + 8);
  float v18 = (uint64_t *)(v16 + 40);
  if (v17 == 5) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v17 == 6) {
    uint64_t v19 = v18;
  }
  if (v17 != 13) {
    float v18 = v19;
  }
  uint64_t v20 = *((unsigned __int16 *)v18 + 4);
  int v21 = v18;
  if (v20 == 1) {
    goto LABEL_12;
  }
  if (*((_WORD *)v18 + 4))
  {
    int v21 = (uint64_t *)*v18;
LABEL_12:
    uint64_t v22 = 0;
    uint64_t v23 = 0xFFFFFFFFLL;
    while (v21[v22] != *a5)
    {
      if (v20 == ++v22) {
        goto LABEL_19;
      }
    }
    uint64_t v23 = v22;
    goto LABEL_19;
  }
  uint64_t v23 = 0xFFFFFFFFLL;
LABEL_19:
  uint64_t v42 = *((unsigned int *)v18 + 8);
  uint64_t v25 = v18 + 2;
  if (*((_WORD *)v18 + 12) != 1) {
    uint64_t v25 = (void *)*v25;
  }
  unint64_t v24 = v25[v23];
LABEL_22:
  unsigned int v26 = a1 + 1080;
  physx::Sq::SceneQueryManager::flushUpdates((uint64_t)(a1 + 1080));
  *(unsigned char *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 92) = 0;
  int v27 = *((_DWORD *)a2 + 4);
  __int16 v28 = *a4;
  v45[0] = &unk_26E72E380;
  v45[1] = a1;
  v45[2] = a2;
  v45[3] = a3;
  __int16 v46 = v28;
  uint64_t v47 = a6;
  uint64_t v48 = a7;
  int v49 = v27;
  uint64_t v50 = a8;
  __int16 v51 = ((v28 & 0x40 | v15) != 0) << 6;
  char v52 = 1;
  __int16 v29 = *(_WORD *)(a6 + 16);
  BOOL v53 = (v29 & 0x20) != 0;
  BOOL v54 = v53;
  char v55 = v15 >> 4;
  char v56 = 0;
  char v57 = 0;
  uint64_t v58 = 0;
  if (v24 != 0xFFFFFFFF && !*(_DWORD *)(a3 + 88))
  {
    Payload = (uint64_t *)physx::Sq::SceneQueryManager::getPayload((physx::Sq::SceneQueryManager *)(a1 + 1080), v42, v24);
    char v56 = 1;
    BOOL v32 = MultiQueryCallback<physx::PxRaycastHit>::invoke((uint64_t)v45, &v44, Payload, v31);
    char v56 = 0;
    if (!v32) {
      goto LABEL_34;
    }
    __int16 v29 = *(_WORD *)(a6 + 16);
  }
  uint64_t v33 = a1[1086];
  uint64_t v34 = a1[1092];
  if ((v29 & 1) != 0
    && ((*(uint64_t (**)(void, void, void, int *, void *))(*(void *)*v26 + 48))(*v26, *a2, a2[1], &v49, v45) & 1) == 0)
  {
LABEL_34:
    uint64_t v38 = *(unsigned int *)(a3 + 92);
    BOOL v39 = (*(unsigned __int8 *)(a3 + 72) | v38) != 0;
    if (!*(unsigned char *)(a3 + 72))
    {
LABEL_32:
      if (!v38) {
        goto LABEL_40;
      }
LABEL_37:
      if ((**(unsigned int (***)(uint64_t, void))a3)(a3, *(void *)(a3 + 80))) {
        *(_DWORD *)(a3 + 92) = 0;
      }
      goto LABEL_40;
    }
LABEL_35:
    if (!v38) {
      goto LABEL_40;
    }
    int v40 = physx::clipHitsToNewMaxDist<physx::PxRaycastHit>(*(void *)(a3 + 80), v38, *(float *)(a3 + 56));
    *(_DWORD *)(a3 + 92) = v40;
    if (!v40) {
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  if ((v29 & 2) != 0
    && ((*(uint64_t (**)(uint64_t, void, void, int *, void *))(*(void *)v33 + 48))(v33, *a2, a2[1], &v49, v45) & 1) == 0)
  {
    BOOL v39 = (*(unsigned __int8 *)(a3 + 72) | *(_DWORD *)(a3 + 92)) != 0;
    goto LABEL_40;
  }
  uint64_t v35 = *a2;
  uint64_t v36 = a2[1];
  __int16 v43 = *(_WORD *)(a6 + 16);
  char v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, void *, __int16 *))(*(void *)v34 + 48))(v34, v35, v36, &v49, v45, &v43);
  uint64_t v38 = *(unsigned int *)(a3 + 92);
  BOOL v39 = (*(unsigned __int8 *)(a3 + 72) | v38) != 0;
  if (v37)
  {
    if (!*(unsigned char *)(a3 + 72)) {
      goto LABEL_32;
    }
    goto LABEL_35;
  }
LABEL_40:
  (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  return v39;
}

BOOL physx::NpSceneQueries::overlap(void *a1, uint64_t _X1, uint64_t _X2, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm
  {
    PRFM            #0, [X1]
    PRFM            #0, [X2]
  }
  v14[3] = _X1;
  v14[4] = _X2;
  int v15 = 0;
  v14[0] = 0;
  v14[1] = 0;
  __int16 v13 = 0;
  return physx::NpSceneQueries::multiQuery<physx::PxOverlapHit>(a1, (uint64_t)v14, a4, &v13, 0, a5, a6, 0);
}

BOOL physx::NpSceneQueries::multiQuery<physx::PxOverlapHit>(void *a1, uint64_t a2, uint64_t a3, __int16 *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  unsigned int v13 = *(_WORD *)(a6 + 16) & 0x10;
  if (!a5)
  {
    uint64_t v22 = a7;
    uint64_t v23 = a8;
    uint64_t v46 = 0xFFFFFFFFLL;
    unint64_t v24 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  uint64_t v14 = a5[1];
  int v15 = *(unsigned __int16 *)(v14 + 8);
  uint64_t v16 = (uint64_t *)(v14 + 40);
  if (v15 == 5) {
    int v17 = v16;
  }
  else {
    int v17 = 0;
  }
  if (v15 == 6) {
    int v17 = v16;
  }
  if (v15 != 13) {
    uint64_t v16 = v17;
  }
  uint64_t v18 = *((unsigned __int16 *)v16 + 4);
  uint64_t v19 = v16;
  if (v18 == 1) {
    goto LABEL_12;
  }
  if (*((_WORD *)v16 + 4))
  {
    uint64_t v19 = (uint64_t *)*v16;
LABEL_12:
    uint64_t v20 = 0;
    uint64_t v21 = 0xFFFFFFFFLL;
    while (v19[v20] != *a5)
    {
      if (v18 == ++v20)
      {
        uint64_t v22 = a7;
        uint64_t v23 = a8;
        goto LABEL_19;
      }
    }
    uint64_t v22 = a7;
    uint64_t v23 = a8;
    uint64_t v21 = v20;
    goto LABEL_19;
  }
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  uint64_t v21 = 0xFFFFFFFFLL;
LABEL_19:
  uint64_t v46 = *((unsigned int *)v16 + 8);
  uint64_t v25 = v16 + 2;
  if (*((_WORD *)v16 + 12) != 1) {
    uint64_t v25 = (void *)*v25;
  }
  unint64_t v24 = v25[v21];
LABEL_22:
  physx::Sq::SceneQueryManager::flushUpdates((uint64_t)(a1 + 1080));
  *(unsigned char *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 52) = 0;
  __int16 v32 = *a4;
  v48[0] = &unk_26E72E3F0;
  v48[1] = a1;
  v48[2] = a2;
  v48[3] = a3;
  __int16 v49 = v32;
  uint64_t v50 = a6;
  uint64_t v51 = v22;
  int v52 = 2139095039;
  uint64_t v53 = v23;
  __int16 v54 = ((v32 & 0x40 | v13) != 0) << 6;
  char v55 = 1;
  __int16 v33 = *(_WORD *)(a6 + 16);
  BOOL v56 = (v33 & 0x20) != 0;
  BOOL v57 = v56;
  char v58 = v13 >> 4;
  char v59 = 0;
  char v60 = 0;
  float32x2_t v61 = 0;
  if (v24 != 0xFFFFFFFF && !*(_DWORD *)(a3 + 48))
  {
    Payload = (uint64_t *)physx::Sq::SceneQueryManager::getPayload((physx::Sq::SceneQueryManager *)(a1 + 1080), v46, v24);
    char v59 = 1;
    float32x4_t v26 = MultiQueryCallback<physx::PxOverlapHit>::invoke((uint64_t)v48, v36, v35, Payload);
    char v59 = 0;
    if ((v37 & 1) == 0) {
      goto LABEL_33;
    }
    __int16 v33 = *(_WORD *)(a6 + 16);
  }
  uint64_t v38 = a1[1080];
  uint64_t v39 = a1[1086];
  uint64_t v40 = a1[1092];
  v26.i32[0] = *(_DWORD *)(a2 + 40);
  physx::Gu::ShapeData::ShapeData((uint64_t)v62, *(void *)(a2 + 24), *(void *)(a2 + 32), *(double *)v26.i64, v27, v28, v29, v30, v31);
  float32x2_t v61 = v62;
  if ((v33 & 1) != 0
    && ((*(uint64_t (**)(uint64_t, unsigned char *, void *))(*(void *)v38 + 56))(v38, v62, v48) & 1) == 0)
  {
LABEL_33:
    int v44 = *(_DWORD *)(a3 + 52);
    BOOL v43 = (*(unsigned __int8 *)(a3 + 32) | v44) != 0;
    if (!v44) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  if ((v33 & 2) != 0
    && ((*(uint64_t (**)(uint64_t, unsigned char *, void *))(*(void *)v39 + 56))(v39, v62, v48) & 1) == 0)
  {
    BOOL v43 = (*(unsigned __int8 *)(a3 + 32) | *(_DWORD *)(a3 + 52)) != 0;
    goto LABEL_37;
  }
  __int16 v47 = *(_WORD *)(a6 + 16);
  int v41 = (*(uint64_t (**)(uint64_t, unsigned char *, void *, __int16 *))(*(void *)v40 + 56))(v40, v62, v48, &v47);
  int v42 = *(_DWORD *)(a3 + 52);
  BOOL v43 = (*(unsigned __int8 *)(a3 + 32) | v42) != 0;
  if (v41 && v42)
  {
LABEL_34:
    if ((**(unsigned int (***)(uint64_t, void))a3)(a3, *(void *)(a3 + 40))) {
      *(_DWORD *)(a3 + 52) = 0;
    }
  }
LABEL_37:
  (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  return v43;
}

BOOL physx::NpSceneQueries::sweep(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, uint64_t a7, uint64_t a8, float a9, float a10, void *a11)
{
  _X24 = a4;
  _X23 = a3;
  _X25 = a2;
  int v21 = (unsigned __int16)*a6;
  if ((~v21 & 0x300) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpSceneQueries.cpp", 130, " Precise sweep doesn't support MTD. Perform MTD with default sweep", (uint64_t)a6, a7, a8, v30);
    int v21 = *a6 & 0xFEFF;
    *a6 &= ~0x100u;
  }
  if ((~v21 & 0x210) == 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpSceneQueries.cpp", 136, " eMTD cannot be used in conjunction with eASSUME_NO_INITIAL_OVERLAP. eASSUME_NO_INITIAL_OVERLAP will be ignored", (uint64_t)a6, a7, a8, v30);
    LOWORD(v21) = *a6 & 0xFFEF;
    *a6 = v21;
  }
  if (a10 > 0.0 && (v21 & 0x100) != 0)
  {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/physx/src/NpSceneQueries.cpp", 144, " Precise sweep doesn't support inflation, inflation will be overwritten to be zero", (uint64_t)a6, a7, a8, v30);
    LOWORD(v21) = *a6;
    a10 = 0.0;
  }
  __asm
  {
    PRFM            #0, [X25]
    PRFM            #0, [X23]
    PRFM            #0, [X24]
  }
  float v33 = a9;
  v32[0] = 0;
  v32[1] = _X24;
  uint64_t v34 = _X25;
  uint64_t v35 = _X23;
  float v36 = a10;
  __int16 v31 = v21;
  return physx::NpSceneQueries::multiQuery<physx::PxSweepHit>(a1, (uint64_t)v32, a5, &v31, a11, a7, a8, 0);
}

BOOL physx::NpSceneQueries::multiQuery<physx::PxSweepHit>(void *a1, uint64_t a2, uint64_t a3, __int16 *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  unsigned int v13 = *(_WORD *)(a6 + 16) & 0x10;
  if (!a5)
  {
    uint64_t v22 = a7;
    uint64_t v23 = a8;
    uint64_t v52 = 0xFFFFFFFFLL;
    unint64_t v24 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  uint64_t v14 = a5[1];
  int v15 = *(unsigned __int16 *)(v14 + 8);
  uint64_t v16 = (uint64_t *)(v14 + 40);
  if (v15 == 5) {
    int v17 = v16;
  }
  else {
    int v17 = 0;
  }
  if (v15 == 6) {
    int v17 = v16;
  }
  if (v15 != 13) {
    uint64_t v16 = v17;
  }
  uint64_t v18 = *((unsigned __int16 *)v16 + 4);
  uint64_t v19 = v16;
  if (v18 == 1) {
    goto LABEL_12;
  }
  if (*((_WORD *)v16 + 4))
  {
    uint64_t v19 = (uint64_t *)*v16;
LABEL_12:
    uint64_t v20 = 0;
    uint64_t v21 = 0xFFFFFFFFLL;
    while (v19[v20] != *a5)
    {
      if (v18 == ++v20)
      {
        uint64_t v22 = a7;
        uint64_t v23 = a8;
        goto LABEL_19;
      }
    }
    uint64_t v22 = a7;
    uint64_t v23 = a8;
    uint64_t v21 = v20;
    goto LABEL_19;
  }
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  uint64_t v21 = 0xFFFFFFFFLL;
LABEL_19:
  uint64_t v52 = *((unsigned int *)v16 + 8);
  uint64_t v25 = v16 + 2;
  if (*((_WORD *)v16 + 12) != 1) {
    uint64_t v25 = (void *)*v25;
  }
  unint64_t v24 = v25[v21];
LABEL_22:
  physx::Sq::SceneQueryManager::flushUpdates((uint64_t)(a1 + 1080));
  *(unsigned char *)(a3 + 64) = 0;
  *(_DWORD *)(a3 + 84) = 0;
  v30.i32[0] = 1287568416;
  *(float *)&double v31 = fminf(*(float *)(a2 + 16), 100000000.0);
  __int16 v32 = *a4;
  v55[0] = &unk_26E72E430;
  v55[1] = a1;
  void v55[2] = a2;
  v55[3] = a3;
  __int16 v56 = v32;
  uint64_t v57 = a6;
  uint64_t v58 = v22;
  int v59 = LODWORD(v31);
  uint64_t v60 = v23;
  __int16 v61 = ((v32 & 0x40 | v13) != 0) << 6;
  char v62 = 1;
  __int16 v33 = *(_WORD *)(a6 + 16);
  BOOL v63 = (v33 & 0x20) != 0;
  BOOL v64 = v63;
  char v65 = v13 >> 4;
  char v66 = 0;
  char v69 = 0;
  unsigned int v70 = 0;
  if (v24 != 0xFFFFFFFF && !*(_DWORD *)(a3 + 80))
  {
    Payload = (uint64_t *)physx::Sq::SceneQueryManager::getPayload((physx::Sq::SceneQueryManager *)(a1 + 1080), v52, v24);
    char v66 = 1;
    LODWORD(v35) = *(_DWORD *)(a2 + 40);
    physx::Gu::ShapeData::ShapeData((uint64_t)v71, *(void *)(a2 + 24), *(void *)(a2 + 32), v35, v36, v37, v38, v39, v40);
    v41.i64[1] = *((void *)&v72 + 1);
    long long v67 = v72;
    v41.i64[0] = v73;
    uint64_t v68 = v73;
    char v69 = 1;
    unsigned int v70 = v71;
    char v42 = MultiQueryCallback<physx::PxSweepHit>::invoke((uint64_t)v55, &v54, Payload, v41);
    unsigned int v70 = 0;
    char v66 = 0;
    if ((v42 & 1) == 0) {
      goto LABEL_34;
    }
    __int16 v33 = *(_WORD *)(a6 + 16);
  }
  uint64_t v43 = a1[1080];
  uint64_t v44 = a1[1086];
  uint64_t v45 = a1[1092];
  LODWORD(v31) = *(_DWORD *)(a2 + 40);
  physx::Gu::ShapeData::ShapeData((uint64_t)v71, *(void *)(a2 + 24), *(void *)(a2 + 32), v31, v30, v26, v27, v28, v29);
  long long v67 = v72;
  uint64_t v68 = v73;
  char v69 = 1;
  unsigned int v70 = v71;
  if ((v33 & 1) != 0
    && ((*(uint64_t (**)(uint64_t, unsigned char *, void, int *, void *))(*(void *)v43 + 64))(v43, v71, *(void *)(a2 + 8), &v59, v55) & 1) == 0)
  {
LABEL_34:
    uint64_t v48 = *(unsigned int *)(a3 + 84);
    BOOL v49 = (*(unsigned __int8 *)(a3 + 64) | v48) != 0;
    if (!*(unsigned char *)(a3 + 64))
    {
LABEL_32:
      if (!v48) {
        goto LABEL_40;
      }
LABEL_37:
      if ((**(unsigned int (***)(uint64_t, void))a3)(a3, *(void *)(a3 + 72))) {
        *(_DWORD *)(a3 + 84) = 0;
      }
      goto LABEL_40;
    }
LABEL_35:
    if (!v48) {
      goto LABEL_40;
    }
    int v50 = physx::clipHitsToNewMaxDist<physx::PxSweepHit>(*(void *)(a3 + 72), v48, *(float *)(a3 + 56));
    *(_DWORD *)(a3 + 84) = v50;
    if (!v50) {
      goto LABEL_40;
    }
    goto LABEL_37;
  }
  if ((v33 & 2) != 0
    && ((*(uint64_t (**)(uint64_t, unsigned char *, void, int *, void *))(*(void *)v44 + 64))(v44, v71, *(void *)(a2 + 8), &v59, v55) & 1) == 0)
  {
    BOOL v49 = (*(unsigned __int8 *)(a3 + 64) | *(_DWORD *)(a3 + 84)) != 0;
    goto LABEL_40;
  }
  uint64_t v46 = *(void *)(a2 + 8);
  __int16 v53 = *(_WORD *)(a6 + 16);
  int v47 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, int *, void *, __int16 *))(*(void *)v45 + 64))(v45, v71, v46, &v59, v55, &v53);
  uint64_t v48 = *(unsigned int *)(a3 + 84);
  BOOL v49 = (*(unsigned __int8 *)(a3 + 64) | v48) != 0;
  if (v47)
  {
    if (!*(unsigned char *)(a3 + 64)) {
      goto LABEL_32;
    }
    goto LABEL_35;
  }
LABEL_40:
  (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  return v49;
}

BOOL MultiQueryCallback<physx::PxRaycastHit>::invoke(uint64_t a1, float *a2, uint64_t *a3, float32x4_t a4)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  v86[0] = 0;
  v86[1] = 0;
  int v87 = -1;
  __int16 v88 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v89 = 0;
  uint64_t v92 = 2139095039;
  int v93 = 0;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  long long v8 = (float32x4_t *)(*a3 + 32);
  long long v9 = (char *)v8 + qword_2687A62F0;
  uint64_t v10 = *(void *)(a1 + 40);
  __int16 v71 = *(_WORD *)(v10 + 16);
  if (*(unsigned char *)(a1 + 78)) {
    int v11 = 2;
  }
  else {
    int v11 = 1;
  }
  if (*(__int16 *)(v10 + 16) > -1 && *(_DWORD *)(*(void *)(a1 + 24) + 88) == 0) {
    int v13 = 2;
  }
  else {
    int v13 = v11;
  }
  __int16 v14 = *(_WORD *)(a1 + 32);
  uint64_t v7 = *((void *)&physx::Scb::Actor::sLazyInitOffsets + (*(unsigned char *)(v6 + 11) & 0xF) + 3) + v6;
  uint64_t v70 = v7 + *((void *)&physx::Sc::gOffsetTable + *(unsigned __int8 *)(v7 + 13) + 10);
  if (!*(unsigned char *)(a1 + 78))
  {
    unint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 64);
    if (!v16)
    {
      int v18 = *(_DWORD *)(v10 + 4);
      int v19 = *(_DWORD *)(v10 + 8);
      int v20 = *(_DWORD *)(v10 + 12);
      if (v18 | *(_DWORD *)v10 | v19 | v20)
      {
        if (!(*(_DWORD *)(v5 + 36) & v18 | *(_DWORD *)(v5 + 32) & *(_DWORD *)v10 | *(_DWORD *)(v5 + 40) & v19 | *(_DWORD *)(v5 + 44) & v20)) {
          return 1;
        }
      }
    }
    if ((v71 & 4) != 0 && v15 | v16)
    {
      LOWORD(v81) = v14;
      if (v15)
      {
        int v17 = (**(uint64_t (***)(unint64_t))v15)(v15);
LABEL_21:
        int v13 = v17;
        if (!v17) {
          return 1;
        }
        __int16 v14 = v81 & 0x1B0 | v14 & 0xFE4F;
        goto LABEL_23;
      }
      uint64_t v21 = *(uint64_t (**)(unsigned char *, float32x4_t *, void, void, long long *))(v16 + 16);
      if (v21)
      {
        *(_OWORD *)uint64_t v73 = *(_OWORD *)v10;
        v85[0] = *v8;
        int v17 = v21(v73, v85, *(void *)v16, *(unsigned int *)(v16 + 8), &v81);
        goto LABEL_21;
      }
    }
  }
LABEL_23:
  physx::NpActor::getGlobalPose(v85, v5, v6, a4);
  if (*(unsigned char *)(v5 + 8)) {
    uint64_t v22 = (int *)(*(void *)(v5 + 16) + 64);
  }
  else {
    uint64_t v22 = (int *)(v5 + 104);
  }
  uint64_t v23 = *(void *)(a1 + 24);
  unsigned int v24 = *(_DWORD *)(v23 + 88);
  uint64_t v25 = *(unsigned int *)(v23 + 92);
  double v26 = (void *)(*(void *)(v23 + 80) + (v25 << 6));
  if (v24 > v25) {
    float32x4_t v27 = v26;
  }
  else {
    float32x4_t v27 = v86;
  }
  float v28 = *(float *)(a1 + 56);
  float32x4_t v29 = *(uint64_t (**)(float))(*(void *)(*(void *)(a1 + 8) + 8856) + 8 * *v22);
  *(_WORD *)uint64_t v73 = *(_WORD *)(a1 + 72) | v14;
  unsigned int v30 = v29(v28);
  if (!v30) {
    return 1;
  }
  uint64_t v68 = v8;
  unint64_t v31 = 0;
  BOOL v32 = 0;
  unint64_t v33 = (unint64_t)v30 << 6;
  unint64_t v34 = 1;
  unint64_t v35 = v30;
  uint64_t v36 = v70;
  while (1)
  {
    double v37 = &v27[v31 / 8];
    *double v37 = v36;
    v37[1] = (uint64_t)v9;
    int v38 = v13;
    if (*(unsigned char *)(a1 + 78)) {
      goto LABEL_42;
    }
    uint64_t v39 = *(void *)(a1 + 48);
    if (v39)
    {
      int v38 = v13;
      if ((v71 & 8) == 0) {
        goto LABEL_42;
      }
      int v38 = (*(uint64_t (**)(void, void, void *))(*(void *)v39 + 8))(*(void *)(a1 + 48), *(void *)(a1 + 40), &v27[v31 / 8]);
      goto LABEL_41;
    }
    uint64_t v40 = *(void *)(a1 + 64);
    if (v40) {
      BOOL v41 = (v71 & 8) == 0;
    }
    else {
      BOOL v41 = 1;
    }
    int v38 = v13;
    if (!v41)
    {
      char v42 = *(uint64_t (**)(long long *, float32x4_t *, void, void, void *))(v40 + 24);
      int v38 = v13;
      if (v42)
      {
        long long v43 = *(_OWORD *)*(void *)(a1 + 40);
        float32x4_t v83 = *v68;
        long long v84 = v43;
        int v38 = v42(&v84, &v83, *(void *)v40, *(unsigned int *)(v40 + 8), &v27[v31 / 8]);
LABEL_41:
        uint64_t v36 = v70;
      }
    }
LABEL_42:
    if (*(unsigned char *)(a1 + 77) && v38 != 0) {
      break;
    }
    if (*(unsigned char *)(a1 + 76)) {
      int v45 = 1;
    }
    else {
      int v45 = v38;
    }
    if (v45 == 2)
    {
      __int16 v61 = &v27[v31 / 8];
      float v62 = *(float *)&v27[v31 / 8 + 6];
      if (v62 <= *(float *)(a1 + 56))
      {
        *(float *)(a1 + 56) = v62;
        *a2 = v62;
        uint64_t v63 = *(void *)(a1 + 24);
        long long v64 = *(_OWORD *)v37;
        *(_DWORD *)(v63 + 24) = *((_DWORD *)v37 + 4);
        *(_OWORD *)(v63 + 8) = v64;
        *(_WORD *)(v63 + 28) = *((_WORD *)v61 + 10);
        *(void *)(v63 + 32) = v61[3];
        *(_DWORD *)(v63 + 40) = *((_DWORD *)v61 + 8);
        *(_OWORD *)(v63 + 44) = *(_OWORD *)((char *)v61 + 36);
        *(void *)(v63 + 60) = *(void *)((char *)v61 + 52);
        *(unsigned char *)(*(void *)(a1 + 24) + 72) = 1;
      }
    }
    else if (v45 == 1)
    {
      uint64_t v46 = *(void *)(a1 + 24);
      int v47 = *(_DWORD *)(v46 + 88);
      if (v47)
      {
        if (*(unsigned char *)(a1 + 74) && *(float *)&v27[v31 / 8 + 6] <= *(float *)(a1 + 56))
        {
          unsigned int v48 = *(_DWORD *)(v46 + 92);
          if (v48 == v47)
          {
            BOOL v49 = *(long long **)(a1 + 40);
            long long v81 = *v49;
            __int16 v82 = *((_WORD *)v49 + 8) | 0x8000;
            *(void *)&v73[8] = 0;
            *(void *)&v73[16] = 0;
            int v74 = -1;
            __int16 v75 = 0;
            *(void *)float v77 = 0;
            *(void *)&v77[8] = 0;
            uint64_t v76 = 0;
            *(void *)&v77[16] = 2139095039;
            *(_DWORD *)&unsigned char v77[24] = 0;
            char v78 = 0;
            uint64_t v79 = 0;
            uint64_t v80 = 0;
            *(void *)uint64_t v73 = &unk_26E72E3C0;
            if (!*(unsigned char *)(a1 + 75) && *(_DWORD *)(v46 + 88))
            {
              uint64_t v50 = *(void *)(a1 + 8);
              uint64_t v51 = *(void *)(a1 + 16);
              __int16 v72 = *(_WORD *)(a1 + 32);
              int v52 = physx::NpSceneQueries::multiQuery<physx::PxRaycastHit>(v50, v51, v73, &v72, 0, &v81, *(void *)(a1 + 48), *(void *)(a1 + 64));
              uint64_t v46 = *(void *)(a1 + 24);
              if (v52)
              {
                long long v53 = *(_OWORD *)&v73[8];
                *(_DWORD *)(v46 + 24) = v74;
                *(_OWORD *)(v46 + 8) = v53;
                *(_WORD *)(v46 + 28) = v75;
                *(void *)(v46 + 32) = v76;
                *(_DWORD *)(v46 + 40) = *(_DWORD *)v77;
                *(_OWORD *)(v46 + 44) = *(_OWORD *)&v77[4];
                *(void *)(v46 + 60) = *(void *)&v77[20];
                uint64_t v54 = *(void *)(a1 + 24);
                *(unsigned char *)(v54 + 72) = 1;
                int v55 = physx::clipHitsToNewMaxDist<physx::PxRaycastHit>(*(void *)(v54 + 80), *(unsigned int *)(v54 + 92), *(float *)&v77[16]);
                uint64_t v46 = *(void *)(a1 + 24);
                *(_DWORD *)(v46 + 92) = v55;
                int v56 = *(_DWORD *)&v77[16];
                *(_DWORD *)(a1 + 56) = *(_DWORD *)&v77[16];
                *(_DWORD *)a2 = v56;
              }
              uint64_t v36 = v70;
            }
            *(unsigned char *)(a1 + 75) = 1;
            unsigned int v48 = *(_DWORD *)(v46 + 92);
            if (v48 == *(_DWORD *)(v46 + 88))
            {
              int v57 = (**(uint64_t (***)(uint64_t, void))v46)(v46, *(void *)(v46 + 80));
              uint64_t v36 = v70;
              *(unsigned char *)(a1 + 74) = v57;
              if (!v57) {
                return v32;
              }
              unsigned int v48 = 0;
              uint64_t v46 = *(void *)(a1 + 24);
              *(_DWORD *)(v46 + 92) = 0;
            }
          }
          uint64_t v58 = *(void *)(v46 + 80);
          *(_DWORD *)(v46 + 92) = v48 + 1;
          uint64_t v59 = v58 + ((unint64_t)v48 << 6);
          long long v60 = *(_OWORD *)v37;
          *(_DWORD *)(v59 + 16) = *((_DWORD *)v37 + 4);
          *(_OWORD *)uint64_t v59 = v60;
          *(_WORD *)(v59 + 20) = WORD2(v27[v31 / 8 + 2]);
          *(void *)(v59 + 24) = v27[v31 / 8 + 3];
          *(_DWORD *)(v59 + 32) = v27[v31 / 8 + 4];
          *(_OWORD *)(v59 + 36) = *(_OWORD *)((char *)&v27[v31 / 8 + 4] + 4);
          *(void *)(v59 + 52) = *(void *)((char *)&v27[v31 / 8 + 6] + 4);
        }
      }
    }
    BOOL v32 = v34 >= v35;
    v31 += 64;
    ++v34;
    if (v33 == v31) {
      return v32;
    }
  }
  uint64_t v65 = *(void *)(a1 + 24);
  long long v66 = *(_OWORD *)&v27[v31 / 8];
  *(_DWORD *)(v65 + 24) = v27[v31 / 8 + 2];
  *(_OWORD *)(v65 + 8) = v66;
  *(_WORD *)(v65 + 28) = WORD2(v27[v31 / 8 + 2]);
  *(void *)(v65 + 32) = v27[v31 / 8 + 3];
  *(_DWORD *)(v65 + 40) = v27[v31 / 8 + 4];
  *(_OWORD *)(v65 + 44) = *(_OWORD *)((char *)&v27[v31 / 8 + 4] + 4);
  *(void *)(v65 + 60) = *(void *)((char *)&v27[v31 / 8 + 6] + 4);
  *(unsigned char *)(*(void *)(a1 + 24) + 72) = 1;
  return v32;
}