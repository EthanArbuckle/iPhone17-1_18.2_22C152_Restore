__n128 physx::Gu::LocalConvex<physx::Gu::TriangleV>::supportPoint(uint64_t a1, int a2)
{
  return *(__n128 *)(*(void *)(a1 + 8) + 16 * a2 + 48);
}

double physx::Gu::LocalConvex<physx::Gu::TriangleV>::support(uint64_t a1, float32x4_t *a2)
{
  v2 = *(float32x4_t **)(a1 + 8);
  float32x4_t v3 = v2[3];
  float32x4_t v4 = v2[4];
  float32x4_t v5 = v2[5];
  float32x4_t v6 = vmulq_f32(v3, *a2);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  *(float32x2_t *)v6.f32 = vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32);
  float32x4_t v7 = vmulq_f32(v4, *a2);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
  float32x4_t v8 = vmulq_f32(v5, *a2);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  *(float32x2_t *)v8.f32 = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  *(void *)&double result = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v8.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v7.f32)), 0), (int8x16_t)v3, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32), 0), (int8x16_t)v4, (int8x16_t)v5)).u64[0];
  return result;
}

double physx::Gu::LocalConvex<physx::Gu::TriangleV>::support(uint64_t a1, float32x4_t *a2, unsigned __int32 *a3)
{
  float32x4_t v3 = *(float32x4_t **)(a1 + 8);
  float32x4_t v4 = v3[3];
  float32x4_t v5 = v3[4];
  float32x4_t v6 = v3[5];
  float32x4_t v7 = vmulq_f32(v4, *a2);
  v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
  *(float32x2_t *)v7.f32 = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32);
  float32x4_t v8 = vmulq_f32(v5, *a2);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  *(float32x2_t *)v8.f32 = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  float32x4_t v9 = vmulq_f32(v6, *a2);
  int8x16_t v10 = (int8x16_t)vpaddq_f32(v9, v9);
  *(float32x2_t *)v10.i8 = vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8);
  *(int8x8_t *)v7.f32 = vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v10.i8), (int8x8_t)vcgt_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v8.f32));
  *(int32x2_t *)v10.i8 = vcgt_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v10.i8);
  int8x16_t v11 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  int8x16_t v13 = vandq_s8(v10, v12);
  v12.i64[0] = 0x200000002;
  v12.i64[1] = 0x200000002;
  *a3 = vorrq_s8(v13, vbicq_s8(v12, v11)).u32[0] & ~v7.i32[0];
  *(void *)&double result = vbslq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0), (int8x16_t)v4, vbslq_s8(v11, (int8x16_t)v5, (int8x16_t)v6)).u64[0];
  return result;
}

int32x2_t physx::Gu::LocalConvex<physx::Gu::TriangleV>::getSweepMargin()
{
  return vdup_n_s32(0x7F7FFFFFu);
}

__n128 physx::Gu::LocalConvex<physx::Gu::TriangleV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(void *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::TriangleV>::~LocalConvex()
{
}

BOOL physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  uint64_t v224 = *MEMORY[0x263EF8340];
  float32x4_t v14 = vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v15) = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
  unsigned int v210 = 1;
  float32x4_t v16 = vmulq_f32(*a3, *a3);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  float32x4_t v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
  float32x4_t v18 = vmulq_f32(v17, v17);
  v18.i64[0] = vpaddq_f32(v18, v18).u64[0];
  float32x2_t v19 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
  float32x2_t v20 = vrsqrte_f32(v19);
  int v21 = 4;
  do
  {
    float32x2_t v20 = vmul_f32(v20, vrsqrts_f32(vmul_f32(v20, v20), v19));
    --v21;
  }
  while (v21);
  HIDWORD(v15) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v27 = vmul_f32(v19, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v19), 0), (int8x8_t)_D8, (int8x8_t)v20));
  float32x2_t v28 = vrecpe_f32(v27);
  int v29 = 4;
  do
  {
    float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  float32x2_t v30 = (float32x2_t)vdup_lane_s32(a4, 0);
  v14.i64[1] = v15;
  float32x4_t v31 = vmulq_n_f32(v17, v28.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v32 = vnegq_f32(v31);
  v32.i32[3] = 0;
  v33 = *(float32x4_t **)(a1 + 8);
  float32x4_t v34 = v33[3];
  float32x4_t v35 = v33[4];
  float32x4_t v36 = v33[5];
  float32x4_t v37 = vmulq_f32(v32, v34);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  *(float32x2_t *)v37.f32 = vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
  float32x4_t v38 = vmulq_f32(v32, v35);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  float32x4_t v39 = vmulq_f32(v32, v36);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  *(float32x2_t *)v39.f32 = vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32);
  float32x4_t v40 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v39.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.f32)), 0), (int8x16_t)v34, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32), 0), (int8x16_t)v35, (int8x16_t)v36));
  v41 = *(float32x4_t **)(a2 + 8);
  float32x4_t v42 = v41[3];
  int8x16_t v43 = (int8x16_t)vnegq_f32(v42);
  v43.i32[3] = 0;
  float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v31), (int8x16_t)v42, v43);
  float32x4_t v45 = vsubq_f32(v40, v44);
  float32x4_t v221 = v45;
  float32x4_t v222 = 0u;
  memset(v223, 0, sizeof(v223));
  float32x4_t v217 = v40;
  float32x4_t v218 = 0u;
  float32x4_t v219 = 0u;
  long long v220 = 0u;
  float32x4_t v46 = vnegq_f32(v45);
  v46.i32[3] = 0;
  v41 = (float32x4_t *)((char *)v41 + 24);
  float32x4_t v213 = v44;
  float32x4_t v214 = 0u;
  float32x4_t v215 = 0u;
  long long v216 = 0u;
  *(float32x2_t *)v40.f32 = vld1_dup_f32(v41->f32);
  float32x2_t v47 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v40.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v40.f32, v47), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v48 = vadd_f32(v30, *(float32x2_t *)v40.f32);
  float32x2_t v49 = vmul_f32(v48, v48);
  float32x4_t v50 = vmulq_f32(v46, v46);
  float32x4_t v51 = vpaddq_f32(v50, v50);
  float32x2_t v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
  float32x2_t v201 = vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  int16x4_t v53 = (int16x4_t)vcgt_f32(v52, v201);
  v54.i64[0] = -1;
  v54.i64[1] = -1;
  v51.i32[0] = -1;
  int32x4_t v200 = (int32x4_t)v51;
  int8x16_t v55 = (int8x16_t)v45;
  int8x16_t v204 = (int8x16_t)v46;
  float32x4_t v56 = v46;
  float32x2_t v57 = 0;
  while (1)
  {
    int8x16_t v58 = (int8x16_t)v45;
    int8x8_t v59 = (int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16(v53, 0), 0xFuLL));
    unsigned __int32 v60 = vuzp1_s8(v59, v59).u32[0];
    if (v60 != -1) {
      break;
    }
    float32x4_t v61 = vmulq_f32(v56, v56);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    float32x2_t v62 = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
    float32x2_t v63 = vrsqrte_f32(v62);
    int v64 = 4;
    do
    {
      float32x2_t v63 = vmul_f32(v63, vrsqrts_f32(vmul_f32(v63, v63), v62));
      --v64;
    }
    while (v64);
    float32x2_t v65 = vmul_f32(v62, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v62), 0), (int8x8_t)_D8, (int8x8_t)v63));
    float32x2_t v66 = vrecpe_f32(v65);
    int v67 = 4;
    do
    {
      float32x2_t v66 = vmul_f32(v66, vrecps_f32(v65, v66));
      --v67;
    }
    while (v67);
    float32x4_t v68 = vmulq_n_f32(v56, v66.f32[0]);
    v68.i32[3] = 0;
    float32x4_t v69 = vnegq_f32(v68);
    v69.i32[3] = 0;
    v70 = *(float32x4_t **)(a1 + 8);
    float32x4_t v71 = v70[3];
    float32x4_t v72 = v70[4];
    float32x4_t v73 = v70[5];
    float32x4_t v74 = vmulq_f32(v68, v71);
    v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
    *(float32x2_t *)v74.f32 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
    float32x4_t v75 = vmulq_f32(v68, v72);
    v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
    *(float32x2_t *)v75.f32 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
    float32x4_t v76 = vmulq_f32(v68, v73);
    v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
    *(float32x2_t *)v76.f32 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
    float32x4_t v77 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v76.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v75.f32)), 0), (int8x16_t)v71, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v76.f32), 0), (int8x16_t)v72, (int8x16_t)v73));
    float32x4_t v78 = *(float32x4_t *)(*(void *)(a2 + 8) + 48);
    int8x16_t v79 = (int8x16_t)vnegq_f32(v78);
    v79.i32[3] = 0;
    float32x4_t v80 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v69), (int8x16_t)v78, v79);
    float32x4_t v81 = vaddq_f32(v14, v80);
    float32x4_t v45 = vsubq_f32(v77, v81);
    float32x4_t v82 = vnegq_f32(v45);
    v82.i32[3] = 0;
    float32x4_t v83 = vmulq_f32(v68, v82);
    v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
    float32x2_t v84 = vsub_f32(vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32), v48);
    if (v84.f32[0] > 0.0)
    {
      float32x4_t v85 = vmulq_f32(v68, *a7);
      v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
      float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
      if (v86.f32[0] >= 0.0) {
        return v60 != -1;
      }
      float32x2_t v87 = vrecpe_f32(v86);
      int v88 = 4;
      do
      {
        float32x2_t v87 = vmul_f32(v87, vrecps_f32(v86, v87));
        --v88;
      }
      while (v88);
      float32x2_t v89 = vsub_f32(v57, vmul_f32(v84, v87));
      if (vcgt_f32(v89, v57).u8[0])
      {
        if (v89.f32[0] > 1.0) {
          return v60 != -1;
        }
        float32x4_t v90 = vmlaq_n_f32(*a6, *a7, v89.f32[0]);
        v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
        float32x4_t v91 = vsubq_f32(v90, v14);
        float32x4_t v213 = vaddq_f32(v213, v91);
        float32x4_t v214 = vaddq_f32(v214, v91);
        float32x4_t v215 = vaddq_f32(v215, v91);
        float32x4_t v221 = vsubq_f32(v217, v213);
        float32x4_t v222 = vsubq_f32(v218, v214);
        v223[0] = vsubq_f32(v219, v215);
        float32x4_t v81 = vaddq_f32(v80, v90);
        float32x4_t v45 = vsubq_f32(v77, v81);
        float32x2_t v52 = v47;
        int8x16_t v204 = (int8x16_t)v56;
        float32x4_t v14 = v90;
      }
      float32x2_t v57 = v89;
    }
    int8x16_t v207 = v58;
    uint64_t v92 = v210;
    *(&v217 + v210) = v77;
    *(&v213 + v92) = v81;
    unsigned int v210 = v92 + 1;
    *(&v221 + v92) = v45;
    if (v92 == 3)
    {
      float32x4_t v205 = v14;
      physx::Gu::closestPtPointTetrahedron(&v221, &v217, &v213, (int *)&v210);
      float32x4_t v14 = v205;
LABEL_27:
      int8x16_t v55 = v207;
      goto LABEL_60;
    }
    if (v92 != 2)
    {
      int8x16_t v55 = v58;
      if (v92 != 1) {
        goto LABEL_60;
      }
      float32x4_t v45 = v221;
      float32x4_t v93 = vsubq_f32(v222, v221);
      float32x4_t v94 = vmulq_f32(v93, v93);
      v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
      float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v95), 0), *(int8x8_t *)v221.f32).u32[0] != -1)
      {
        float32x4_t v96 = vnegq_f32(v221);
        v96.i32[3] = 0;
        float32x4_t v97 = vmulq_f32(v96, v93);
        v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
        float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
        float32x2_t v99 = vrecpe_f32(v95);
        int v100 = 4;
        do
        {
          float32x2_t v99 = vmul_f32(v99, vrecps_f32(v95, v99));
          --v100;
        }
        while (v100);
        float32x4_t v45 = vmlaq_n_f32(v221, v93, vmax_f32(vmin_f32(vmul_f32(v98, v99), _D8), 0).f32[0]);
LABEL_42:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        goto LABEL_60;
      }
LABEL_43:
      unsigned int v210 = 1;
      goto LABEL_60;
    }
    float32x4_t v45 = v221;
    float32x4_t v101 = vsubq_f32(v222, v221);
    float32x4_t v102 = vsubq_f32(v223[0], v221);
    int8x8_t v104 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v101.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL), *(float32x2_t *)v102.f32);
    *(int8x8_t *)v103.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), *(float32x2_t *)v102.f32), *(float32x2_t *)v101.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL)), 4uLL);
    v104.i32[1] = 0;
    unsigned int v210 = 3;
    float32x2_t v105 = vpadd_f32(vmul_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32), vmul_f32((float32x2_t)v104.u32[0], (float32x2_t)v104.u32[0]));
    float32x2_t v106 = vpadd_f32(v105, v105);
    if (v106.f32[0] <= 0.00000011921)
    {
      unsigned int v210 = 2;
      float32x4_t v143 = vmulq_f32(v101, v101);
      v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
      float32x2_t v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
      int8x16_t v55 = v58;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v144), 0), *(int8x8_t *)v221.f32).u32[0] != -1)
      {
        float32x4_t v145 = vnegq_f32(v221);
        v145.i32[3] = 0;
        float32x4_t v146 = vmulq_f32(v145, v101);
        v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
        float32x2_t v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
        float32x2_t v148 = vrecpe_f32(v144);
        int v149 = 4;
        do
        {
          float32x2_t v148 = vmul_f32(v148, vrecps_f32(v144, v148));
          --v149;
        }
        while (v149);
        float32x4_t v45 = vmlaq_n_f32(v221, v101, vmax_f32(vmin_f32(vmul_f32(v147, v148), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v106.f32[0] == 0.0)
    {
      float32x4_t v45 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v103.u32[2] = v104;
    float32x2_t v107 = (float32x2_t)vextq_s8((int8x16_t)v222, (int8x16_t)v222, 8uLL).u64[0];
    float32x2_t v108 = (float32x2_t)vextq_s8((int8x16_t)v223[0], (int8x16_t)v223[0], 8uLL).u64[0];
    float32x2_t v109 = (float32x2_t)vextq_s8((int8x16_t)v223[0], (int8x16_t)v223[0], 4uLL).u64[0];
    float32x2_t v110 = (float32x2_t)vextq_s8((int8x16_t)v222, (int8x16_t)v222, 4uLL).u64[0];
    int8x8_t v111 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v222.f32, v109), v110, *(float32x2_t *)v223[0].f32);
    *(int8x8_t *)v112.f32 = vext_s8(v111, (int8x8_t)vmls_f32(vmul_f32(v107, *(float32x2_t *)v223[0].f32), *(float32x2_t *)v222.f32, v108), 4uLL);
    v112.i64[1] = v111.u32[0];
    float32x2_t v113 = (float32x2_t)vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL).u64[0];
    float32x2_t v114 = (float32x2_t)vextq_s8((int8x16_t)v221, (int8x16_t)v221, 4uLL).u64[0];
    int8x8_t v115 = (int8x8_t)vmls_f32(vmul_f32(v114, *(float32x2_t *)v223[0].f32), v109, *(float32x2_t *)v221.f32);
    *(int8x8_t *)v116.f32 = vext_s8(v115, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v221.f32, v108), *(float32x2_t *)v223[0].f32, v113), 4uLL);
    v116.i64[1] = v115.u32[0];
    int8x8_t v117 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v221.f32, v110), v114, *(float32x2_t *)v222.f32);
    *(int8x8_t *)v118.f32 = vext_s8(v117, (int8x8_t)vmls_f32(vmul_f32(v113, *(float32x2_t *)v222.f32), *(float32x2_t *)v221.f32, v107), 4uLL);
    v118.i64[1] = v117.u32[0];
    float32x4_t v119 = vmulq_f32(v112, v103);
    v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
    float32x2_t v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
    float32x4_t v121 = vmulq_f32(v116, v103);
    v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
    float32x2_t v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
    float32x4_t v123 = vmulq_f32(v118, v103);
    v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
    float32x2_t v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v122), (int8x8_t)vcgez_f32(v120)), (int8x8_t)vcgez_f32(v124)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
    {
      int8x16_t v150 = (int8x16_t)vmulq_f32(v221, v103);
      float32x2_t v151 = (float32x2_t)vextq_s8(v150, v150, 8uLL).u64[0];
      float32x2_t v152 = vrecpe_f32(v106);
      int v153 = 4;
      int8x16_t v55 = v207;
      do
      {
        float32x2_t v152 = vmul_f32(v152, vrecps_f32(v106, v152));
        --v153;
      }
      while (v153);
      float32x2_t v154 = vpadd_f32(*(float32x2_t *)v150.i8, v151);
      float32x4_t v45 = vmulq_n_f32(v103, vmul_f32(v152, vpadd_f32(v154, v154)).f32[0]);
      v45.i32[3] = 0;
    }
    else
    {
      float32x4_t v125 = vnegq_f32(v221);
      v125.i32[3] = 0;
      float32x4_t v126 = vnegq_f32(v222);
      v126.i32[3] = 0;
      float32x4_t v127 = vmulq_f32(v125, v101);
      v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
      float32x2_t v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
      float32x4_t v129 = vmulq_f32(v101, v126);
      v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
      float32x2_t v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v128), (int8x8_t)vclez_f32(v130)), (int8x8_t)vclez_f32(v124)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
      {
        float32x2_t v155 = vsub_f32(v128, v130);
        float32x2_t v156 = vrecpe_f32(v155);
        int v157 = 4;
        do
        {
          float32x2_t v156 = vmul_f32(v156, vrecps_f32(v155, v156));
          --v157;
        }
        while (v157);
        uint64_t v142 = 0;
        float32x4_t v45 = vmlaq_n_f32(v221, v101, vmul_f32(v128, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v155), (float32x2_t)0x3400000034000000), (int8x8_t)v156, 0)).f32[0]);
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        unsigned int v158 = 2;
        uint64_t v141 = 1;
      }
      else
      {
        float32x4_t v131 = vnegq_f32(v223[0]);
        v131.i32[3] = 0;
        float32x4_t v132 = vmulq_f32(v126, v102);
        v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
        float32x2_t v133 = vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32);
        float32x4_t v134 = vmulq_f32(v101, v131);
        v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
        float32x2_t v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
        float32x4_t v136 = vmulq_f32(v102, v131);
        v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
        float32x2_t v137 = vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v133, v130), (int8x8_t)vcge_f32(v135, v137)), (int8x8_t)vclez_f32(v120)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
        {
          float32x2_t v159 = vsub_f32(v133, v130);
          float32x2_t v160 = vadd_f32(v159, vsub_f32(v135, v137));
          float32x2_t v161 = vrecpe_f32(v160);
          int v162 = 4;
          do
          {
            float32x2_t v161 = vmul_f32(v161, vrecps_f32(v160, v161));
            --v162;
          }
          while (v162);
          int8x16_t v163 = (int8x16_t)vmlaq_n_f32(v222, vsubq_f32(v223[0], v222), vmul_f32(v159, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v160), (float32x2_t)0x3400000034000000), (int8x8_t)v161, 0)).f32[0]);
          v163.i64[1] = vextq_s8(v163, v163, 8uLL).u32[0];
          unsigned int v158 = 2;
          uint64_t v141 = 2;
          uint64_t v142 = 1;
          float32x4_t v45 = (float32x4_t)v163;
        }
        else
        {
          float32x4_t v138 = vmulq_f32(v125, v102);
          v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
          float32x2_t v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v139), (int8x8_t)vclez_f32(v137)), (int8x8_t)vclez_f32(v122)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
          {
            float32x2_t v164 = vsub_f32(v139, v137);
            float32x2_t v165 = vrecpe_f32(v164);
            int v166 = 4;
            do
            {
              float32x2_t v165 = vmul_f32(v165, vrecps_f32(v164, v165));
              --v166;
            }
            while (v166);
            uint64_t v142 = 0;
            float32x4_t v45 = vmlaq_n_f32(v221, v102, vmul_f32(v139, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v164), (float32x2_t)0x3400000034000000), (int8x8_t)v165, 0)).f32[0]);
            v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
            uint64_t v141 = 2;
          }
          else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v139), (int8x8_t)vclez_f32(v128)), 0), *(int8x8_t *)v221.f32).u32[0] == -1)
          {
            uint64_t v142 = 0;
            uint64_t v141 = 1;
          }
          else
          {
            *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v130, v133), (int8x8_t)vcgez_f32(v130)), 0);
            *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
            __int32 v140 = v45.i32[0];
            float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v200), 0), (int8x16_t)v222, (int8x16_t)v223[0]);
            uint64_t v141 = 1;
            if (v140 == -1) {
              uint64_t v142 = 1;
            }
            else {
              uint64_t v142 = 2;
            }
          }
          unsigned int v158 = v141;
        }
      }
      int8x16_t v55 = v207;
      float32x4_t v167 = *(&v221 + v141);
      float32x4_t v168 = *(&v217 + v142);
      float32x4_t v169 = *(&v217 + v141);
      float32x4_t v170 = *(&v213 + v142);
      float32x4_t v171 = *(&v213 + v141);
      float32x4_t v221 = *(&v221 + v142);
      float32x4_t v222 = v167;
      float32x4_t v217 = v168;
      float32x4_t v218 = v169;
      float32x4_t v213 = v170;
      float32x4_t v214 = v171;
      unsigned int v210 = v158;
    }
LABEL_60:
    float32x4_t v56 = vnegq_f32(v45);
    v56.i32[3] = 0;
    float32x4_t v172 = vmulq_f32(v45, v45);
    v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
    float32x2_t v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32);
    int8x8_t v174 = (int8x8_t)vcgt_f32(v52, v173);
    int8x16_t v54 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v174, (int8x8_t)0x100000001), 0);
    int16x4_t v53 = (int16x4_t)vand_s8((int8x8_t)vcgt_f32(v173, v49), v174);
    float32x2_t v52 = v173;
  }
  float32x4_t v175 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v52, v201), 0), v54), 0x1FuLL)), (int8x16_t)v56, v204);
  float32x4_t v176 = vmulq_f32(v175, v175);
  v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
  float32x2_t v177 = vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32);
  float32x2_t v178 = vrsqrte_f32(v177);
  int v179 = 4;
  do
  {
    float32x2_t v178 = vmul_f32(v178, vrsqrts_f32(vmul_f32(v178, v178), v177));
    --v179;
  }
  while (v179);
  float32x2_t v180 = vmul_f32(v177, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v177), 0), (int8x8_t)_D8, (int8x8_t)v178));
  float32x2_t v181 = vrecpe_f32(v180);
  int v182 = 4;
  do
  {
    float32x2_t v181 = vmul_f32(v181, vrecps_f32(v180, v181));
    --v182;
  }
  while (v182);
  int8x16_t v183 = (int8x16_t)vdupq_n_s32(-*(char *)(*(void *)(a1 + 8) + 32));
  int8x16_t v184 = (int8x16_t)vmulq_n_f32(v175, v181.f32[0]);
  v184.i32[3] = 0;
  float32x4_t v185 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v180), 0), v184));
  v185.i32[3] = 0;
  *a9 = v185;
  *a8 = v57;
  float32x4_t v186 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v54, 0x1FuLL)), v58, v55);
  float32x4_t v209 = v186;
  if (v210 == 3)
  {
    float32x2_t v211 = 0;
    float32x2_t v212 = 0;
    float32x4_t v206 = v185;
    int8x16_t v208 = v183;
    physx::Gu::barycentricCoordinates(&v209, &v221, &v222, v223, &v212, &v211);
    float32x4_t v185 = v206;
    int8x16_t v183 = v208;
    v181.i32[1] = v217.i32[1];
    float32x4_t v188 = vmulq_n_f32(vsubq_f32(v218, v217), v212.f32[0]);
    v188.i32[3] = 0;
    float32x4_t v189 = vmulq_n_f32(vsubq_f32(v219, v217), v211.f32[0]);
    v189.i32[3] = 0;
    float32x4_t v187 = vaddq_f32(v217, vaddq_f32(v188, v189));
  }
  else if (v210 == 2)
  {
    float32x4_t v190 = vsubq_f32(v221, v186);
    float32x4_t v191 = vsubq_f32(vsubq_f32(v222, v186), v190);
    float32x4_t v192 = vmulq_f32(v191, v191);
    v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
    float32x2_t v193 = vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32);
    float32x2_t v194 = vrecpe_f32(v193);
    int v195 = 4;
    do
    {
      float32x2_t v194 = vmul_f32(v194, vrecps_f32(v193, v194));
      --v195;
    }
    while (v195);
    float32x4_t v196 = vnegq_f32(v190);
    v196.i32[3] = 0;
    float32x4_t v197 = vmulq_f32(v196, v191);
    v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
    float32x4_t v187 = vmlaq_n_f32(v217, vsubq_f32(v218, v217), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v193), (int8x8_t)v194, 0), vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32)).f32[0]);
    v181.i32[1] = 0;
    v187.i64[1] = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v187 = 0uLL;
    if (v210 == 1) {
      float32x4_t v187 = v217;
    }
  }
  v181.i32[0] = *(_DWORD *)(*(void *)(a1 + 8) + 16);
  int8x16_t v198 = (int8x16_t)vmlsq_lane_f32(v187, v185, v181, 0);
  v198.i64[1] = vextq_s8(v198, v198, 8uLL).u32[0];
  *a10 = vbslq_s8(v183, v198, (int8x16_t)v187);
  return v60 != -1;
}

uint64_t physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2) {
    double result = physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    unint64_t v7 = *(void *)v5 + 16 * a2;
    float32x4_t v8 = (_OWORD *)(*(void *)v5 + 16 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>::getName() [T = physx::"
    }
           "Gu::NodeAllocator::Slab]";
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    double result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 16 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v6 = (_OWORD *)result;
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 8);
  float32x4_t v8 = *(long long **)v3;
  if (v7)
  {
    unint64_t v9 = (unint64_t)&v6[v7];
    int8x16_t v10 = v6;
    do
    {
      long long v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    float32x4_t v8 = *(long long **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8) {
    double result = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)uint64_t v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return 0;
  }
  uint64_t v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
    float32x4_t v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeBuildNode>::getName() [T = physx::Gu::"
  }
         "AABBTreeBuildNode]";
  else {
    float32x4_t v8 = "<allocation names disabled>";
  }
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(v7 + 24) + 16);
  return v9(v7 + 24, a2, v8, a3, a4);
}

uint64_t physx::shdfnd::Array<physx::Gu::NodeAllocator::Slab,physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0) {
    unsigned int v5 = 2 * v4;
  }
  else {
    unsigned int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::NodeAllocator::Slab>::getName() [T = physx::"
    }
           "Gu::NodeAllocator::Slab]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24) + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v8 + 16 * v9;
    long long v11 = *(long long **)a1;
    int8x16_t v12 = (_OWORD *)v8;
    do
    {
      long long v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    uint64_t v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    uint64_t v14 = 0;
  }
  *(_OWORD *)(v8 + 16 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(void *)a1) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(void *)a1 = v8;
  uint64_t v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 16 * v15;
}

uint64_t physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(result + 2068) & 0x7FFFFFFFu) < a2) {
    double result = physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::recreate(result, a2);
  }
  *(_DWORD *)(v3 + 2064) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::BVHNode const*,physx::shdfnd::InlineAllocator<2048u,physx::shdfnd::ReflectionAllocator<physx::Gu::BVHNode const*>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (8 * a2);
  if (v4 <= 0x800 && *(unsigned char *)(result + 2048) == 0)
  {
    *(unsigned char *)(result + 2048) = 1;
    uint64_t v8 = (void *)result;
  }
  else if (v4)
  {
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v7 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::Gu::BVHNode *>::getName() [T = const physx"
    }
           "::Gu::BVHNode *]";
    else {
      uint64_t v7 = "<allocation names disabled>";
    }
    double result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v6 + 24)
                                                                                              + 16))(v6 + 24, v4, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    uint64_t v8 = (void *)result;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 2064);
  if (v9)
  {
    unint64_t v10 = (unint64_t)&v8[v9];
    long long v11 = *(uint64_t **)(v3 + 2056);
    int8x16_t v12 = v8;
    do
    {
      uint64_t v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
  }
  if ((*(_DWORD *)(v3 + 2068) & 0x80000000) == 0)
  {
    uint64_t v14 = *(void *)(v3 + 2056);
    if (v14 == v3)
    {
      *(unsigned char *)(v3 + 2048) = 0;
    }
    else if (v14)
    {
      double result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 2056) = v8;
  *(_DWORD *)(v3 + 2068) = a2;
  return result;
}

float physx::Gu::SweepAnyShapeHeightfield(int **a1, float *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, uint64_t a7, uint64_t a8, __n128 a9, double a10, float a11, unsigned int *a12)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(float32x2_t **)a2;
  uint64_t v207 = *(void *)(*(void *)a2 + 8);
  int8x16_t v208 = v15;
  float v16 = v15[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  int32x2_t v205 = vrev64_s32((int32x2_t)vdiv_f32(_D2, v15[2]));
  float v206 = 1.0 / v16;
  v217[256] = 1;
  uint64_t v219 = 0x4000000000;
  float32x4_t v218 = v217;
  v204[0] = &unk_26E728C10;
  v204[1] = v217;
  float v22 = a3[3].f32[0] - a5[3].f32[0];
  float32x2_t v23 = vsub_f32(a3[2], a5[2]);
  float v24 = a4[3].f32[0] - a6[3].f32[0];
  float v25 = v22 - v24;
  float v26 = (float)(v22 - v24) * 0.5;
  float v27 = (float)(*((float *)a1 + 19) + fabsf(v26)) + a9.n128_f32[0];
  float v28 = v26 + *((float *)a1 + 22);
  _D2.f32[0] = v28 - v27;
  float v29 = v27 + v28;
  float32x2_t v169 = vsub_f32(a4[2], a6[2]);
  float32x2_t v177 = vsub_f32(v23, v169);
  float32x2_t v30 = vmul_f32(v177, (float32x2_t)0x3F0000003F000000);
  float32x2_t v31 = (float32x2_t)vdup_lane_s32((int32x2_t)a9.n128_u64[0], 0);
  float32x2_t v32 = vadd_f32(vadd_f32(vabs_f32(v30), *(float32x2_t *)((char *)a1 + 68)), v31);
  float32x2_t v33 = vadd_f32(v30, (float32x2_t)a1[10]);
  float32x2_t v200 = vsub_f32(v33, v32);
  float32x2_t v202 = vadd_f32(v32, v33);
  __int32 v201 = _D2.i32[0];
  float v203 = v29;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v205, (float *)a4, (float *)&v200, 1, (uint64_t)v204);
  *(_DWORD *)int v182 = 0;
  uint64_t v199 = 0;
  int8x16_t v198 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v198, v219, v182);
  *(_DWORD *)int v182 = 0;
  uint64_t v197 = 0;
  uint64_t v196 = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&v196, v219, v182);
  float32x4_t v34 = v198;
  uint64_t v35 = v219;
  float32x4_t v175 = a1;
  if (!v219)
  {
    unsigned int v171 = 0;
    goto LABEL_54;
  }
  uint64_t v36 = 0;
  unsigned int v171 = 0;
  uint64_t v37 = v196;
  float32x2_t v38 = (float32x2_t)a1[10];
  float v39 = *((float *)a1 + 22);
  float32x4_t v40 = v218;
  float v41 = v22;
  float32x2_t v42 = (float32x2_t)vdup_n_s32(0x3F8CCCCDu);
  float32x2_t v43 = vmul_f32(vadd_f32(*(float32x2_t *)((char *)a1 + 68), v31), v42);
  float v44 = (float)(*((float *)a1 + 19) + a9.n128_f32[0]) * 1.1;
  float32x2_t v165 = vsub_f32(v169, v23);
  float v163 = v24 - v41;
  unsigned __int32 v161 = vadd_f32(v38, v43).u32[0];
  float v157 = v39 + v44;
  float v159 = v38.f32[1] + v43.f32[1];
  float32x2_t v168 = v43;
  float32x2_t v170 = v38;
  unsigned __int32 v155 = vsub_f32(v38, v43).u32[0];
  float v167 = v39;
  float v151 = v39 - v44;
  float v153 = v38.f32[1] - v43.f32[1];
  do
  {
    physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v205, a2 + 3, (uint64_t)v182, 0, 0, *(_DWORD *)&v40[4 * v36], 1, 1);
    float v45 = *(float *)&v182[20];
    float v46 = *(float *)&v182[8];
    _D17 = vsub_f32(*(float32x2_t *)&v182[12], *(float32x2_t *)v182);
    float32x2_t v48 = vsub_f32((float32x2_t)v183, *(float32x2_t *)v182);
    float v49 = v184;
    _S7 = v184 - *(float *)&v182[8];
    float v51 = -(float)(vmuls_lane_f32(-(float)(*(float *)&v182[20] - *(float *)&v182[8]), v48, 1)
                 + (float)(_D17.f32[1] * (float)(v184 - *(float *)&v182[8])));
    __asm { FMLA            S21, S7, V17.S[1] }
    float v53 = -(float)((float)((float)(*(float *)&v182[20] - *(float *)&v182[8]) * v48.f32[0])
                 - (float)(_D17.f32[0] * (float)(v184 - *(float *)&v182[8])));
    float v54 = vmlas_n_f32(-(float)(_D17.f32[0] * (float)(v184 - *(float *)&v182[8])), *(float *)&v182[20] - *(float *)&v182[8], v48.f32[0]);
    float v55 = (float)-_D17.f32[1] * v48.f32[0];
    float v56 = -(float)(v55 + (float)(_D17.f32[0] * v48.f32[1]));
    float v57 = vmlas_n_f32(v55, v48.f32[1], _D17.f32[0]);
    float v58 = sqrtf((float)((float)(v54 * v54) + (float)(_S21 * _S21)) + (float)(v57 * v57));
    if (v58 > 0.0)
    {
      float v59 = 1.0 / v58;
      float v51 = v59 * v51;
      float v53 = v59 * v53;
      float v56 = v59 * v56;
    }
    if ((float)((float)((float)(v177.f32[1] * v53) + (float)(v177.f32[0] * v51)) + (float)(v25 * v56)) < a11) {
      goto LABEL_28;
    }
    float32x2_t v60 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
    int8x8_t v61 = (int8x8_t)vcgt_f32(*(float32x2_t *)v182, v60);
    float v62 = 8.5071e37;
    if (*(float *)&v182[8] <= 8.5071e37) {
      float v62 = *(float *)&v182[8];
    }
    float32x2_t v63 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
    int8x8_t v64 = (int8x8_t)vcgt_f32(v63, *(float32x2_t *)v182);
    if (*(float *)&v182[8] < -8.5071e37) {
      float v46 = -8.5071e37;
    }
    if (v62 >= *(float *)&v182[20]) {
      float v62 = *(float *)&v182[20];
    }
    if (v46 > *(float *)&v182[20]) {
      float v45 = v46;
    }
    if (v62 >= v184) {
      float v65 = v184;
    }
    else {
      float v65 = v62;
    }
    if (v45 > v184) {
      float v49 = v45;
    }
    float v66 = (float)(v65 + v49) * 0.5;
    float v67 = (float)((float)(v49 - v65) * 0.5) + 0.01;
    float32x2_t v68 = (float32x2_t)vbsl_s8(v61, (int8x8_t)v60, *(int8x8_t *)v182);
    float32x2_t v69 = (float32x2_t)vbsl_s8(v64, (int8x8_t)v63, *(int8x8_t *)v182);
    float32x2_t v70 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v182[12], v68), (int8x8_t)v68, *(int8x8_t *)&v182[12]);
    float32x2_t v71 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v69, *(float32x2_t *)&v182[12]), (int8x8_t)v69, *(int8x8_t *)&v182[12]);
    float32x2_t v72 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v183, v70), (int8x8_t)v70, (int8x8_t)v183);
    float32x2_t v73 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v71, (float32x2_t)v183), (int8x8_t)v71, (int8x8_t)v183);
    float32x2_t v74 = vmul_f32(vadd_f32(v72, v73), (float32x2_t)0x3F0000003F000000);
    float32x2_t v75 = vmul_f32(vadd_f32(vmul_f32(vsub_f32(v73, v72), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3C23D70Au)), v42);
    float v76 = v67 * 1.1;
    int8x8_t v77 = vmvn_s8((int8x8_t)vcge_f32(vadd_f32(v168, v75), vabd_f32(v170, v74)));
    if ((v77.i8[0] & 1) == 0 && (v77.i8[4] & 1) == 0)
    {
      float v78 = 0.0;
      if (vabds_f32(v167, v66) <= (float)(v44 + v76)) {
        goto LABEL_22;
      }
    }
    unint64_t v83 = 0;
    *(float32x2_t *)&v179[0] = v165;
    *((float *)v179 + 2) = v163;
    unint64_t v190 = __PAIR64__(LODWORD(v159), v161);
    *(float *)&unsigned int v191 = v157;
    unint64_t v215 = __PAIR64__(LODWORD(v153), v155);
    float v216 = v151;
    float32x2_t v211 = vadd_f32(v74, v75);
    float v212 = v66 + v76;
    unint64_t v209 = (unint64_t)vsub_f32(v74, v75);
    float v78 = 0.0;
    float v84 = 1.0;
    float v210 = v66 - v76;
    do
    {
      float v85 = *(float *)((char *)v179 + v83);
      if (v85 >= -0.000001)
      {
        if (v85 <= 0.000001)
        {
          if (v211.f32[v83 / 4] < *(float *)((char *)&v215 + v83)
            || *(float *)((char *)&v209 + v83) > *(float *)((char *)&v190 + v83))
          {
            goto LABEL_28;
          }
        }
        else
        {
          float v86 = *(float *)((char *)&v209 + v83);
          float v87 = *(float *)((char *)&v190 + v83);
          if (v86 > v87) {
            goto LABEL_28;
          }
          float v91 = v211.f32[v83 / 4];
          float v92 = *(float *)((char *)&v215 + v83);
          if (v91 < v92)
          {
            float v93 = (float)(v92 - v91) / v85;
            if (v93 > v78) {
              float v78 = v93;
            }
          }
          if (v87 > v86)
          {
LABEL_44:
            float v94 = (float)(v87 - v86) / v85;
            if (v94 < v84) {
              float v84 = v94;
            }
          }
        }
      }
      else
      {
        float v86 = v211.f32[v83 / 4];
        float v87 = *(float *)((char *)&v215 + v83);
        if (v86 < v87) {
          goto LABEL_28;
        }
        float v88 = *(float *)((char *)&v190 + v83);
        float v89 = *(float *)((char *)&v209 + v83);
        if (v88 < v89)
        {
          float v90 = (float)(v88 - v89) / v85;
          if (v90 > v78) {
            float v78 = v90;
          }
        }
        if (v86 > v87) {
          goto LABEL_44;
        }
      }
      if (v78 > v84) {
        goto LABEL_28;
      }
      v83 += 4;
    }
    while (v83 != 12);
    if (v78 > 1.0) {
      goto LABEL_28;
    }
LABEL_22:
    if (v171)
    {
      uint64_t v79 = v171;
      while (1)
      {
        uint64_t v80 = (v79 - 1);
        float v81 = *(float *)(v37 + 4 * v80);
        if (v81 <= v78) {
          break;
        }
        *(float *)(v37 + 4 * v79) = v81;
        v34[v79--] = v34[v80];
        if (!v80) {
          goto LABEL_26;
        }
      }
    }
    else
    {
LABEL_26:
      LODWORD(v79) = 0;
    }
    uint64_t v82 = v79;
    v34[v82] = *(_DWORD *)&v40[4 * v36];
    *(float *)(v37 + v82 * 4) = v78;
    ++v171;
LABEL_28:
    ++v36;
  }
  while (v36 != v35);
LABEL_54:
  uint64_t v95 = a8;
  *(void *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  *(void *)a8 = 0;
  *(_DWORD *)(a8 + 8) = 0;
  float v96 = *((float *)a1 + 2);
  float v97 = a4[2].f32[0];
  float v98 = a4[2].f32[1];
  float v99 = a4[3].f32[0];
  float v100 = (float)(*((float *)a1 + 7) - v97) + (float)(*((float *)a1 + 7) - v97);
  float v101 = (float)(*((float *)a1 + 8) - v98) + (float)(*((float *)a1 + 8) - v98);
  float v102 = (float)(*((float *)a1 + 9) - v99) + (float)(*((float *)a1 + 9) - v99);
  float v104 = a4[1].f32[0];
  float v103 = a4[1].f32[1];
  float v105 = (float)(v103 * v103) + -0.5;
  float v106 = a4->f32[0];
  float v107 = a4->f32[1];
  float v108 = (float)((float)(v101 * v107) + (float)(a4->f32[0] * v100)) + (float)(v104 * v102);
  *(float *)&unsigned int v109 = (float)((float)(v100 * v105) - (float)((float)((float)(v107 * v102) - (float)(v104 * v101)) * v103))
                  + (float)(a4->f32[0] * v108);
  *(float *)&unsigned int v110 = (float)((float)(v101 * v105)
                          - (float)((float)((float)(v104 * v100) - (float)(a4->f32[0] * v102)) * v103))
                  + (float)(v107 * v108);
  float v111 = (float)((float)(v102 * v105) - (float)((float)((float)(a4->f32[0] * v101) - (float)(v107 * v100)) * v103))
       + (float)(v104 * v108);
  unint64_t v209 = __PAIR64__(v110, v109);
  float v210 = v111;
  if (v171)
  {
    float v158 = v96;
    float v160 = v96 * v96;
    float v112 = (float)(a5[2].f32[0] - v97) + (float)(a5[2].f32[0] - v97);
    float v113 = (float)(a5[2].f32[1] - v98) + (float)(a5[2].f32[1] - v98);
    float v114 = (float)(a5[3].f32[0] - v99) + (float)(a5[3].f32[0] - v99);
    float v115 = (float)((float)(v107 * v113) + (float)(v106 * v112)) + (float)(v104 * v114);
    float v154 = (float)((float)(v113 * v105) - (float)((float)((float)(v104 * v112) - (float)(v106 * v114)) * v103))
         + (float)(v107 * v115);
    float v156 = (float)((float)(v112 * v105) - (float)((float)((float)(v107 * v114) - (float)(v104 * v113)) * v103))
         + (float)(v106 * v115);
    float v152 = (float)((float)(v114 * v105) - (float)((float)((float)(v106 * v113) - (float)(v107 * v112)) * v103))
         + (float)(v104 * v115);
    uint64_t v116 = v171;
    uint64_t v166 = 0;
    float v164 = 0.0;
    unsigned int v117 = -1;
    float v178 = 3.4028e38;
    float v118 = 0.0;
    float v162 = 0.0;
    int v119 = 0;
    do
    {
      physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v205, (float *)a6, (uint64_t)&v190, 0, 0, *v34, 0, 0);
      v120.i64[0] = v190;
      v120.i64[1] = v191;
      v121.i64[0] = v192;
      v121.i64[1] = LODWORD(v193);
      v122.i64[0] = v194;
      v122.i64[1] = LODWORD(v195);
      float32x4_t v123 = vmulq_f32(vaddq_f32(vaddq_f32(v120, v121), v122), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
      v123.i32[3] = 0;
      LOBYTE(v184) = 0;
      *(float32x4_t *)int v182 = v123;
      float32x4_t v185 = v120;
      float32x4_t v186 = v121;
      float32x4_t v187 = v122;
      *(void *)&v182[16] = 0x7F7FFFFF00000000;
      uint64_t v183 = 0x57F7FFFFFLL;
      float32x2_t v124 = *v175;
      v179[0] = xmmword_23435FD50;
      v179[1] = xmmword_23435FD50;
      v179[2] = xmmword_234376D80;
      v179[3] = xmmword_23435FD60;
      uint64_t v180 = 0x3F80000000000000;
      char v181 = 0;
      float v125 = ((float (*)(__n128, double))*(&physx::Gu::g_TriangleSweepMethodTable + *v124))(a9, 0.0);
      if (v125 <= 0.0)
      {
        float v126 = *(float *)&v192 - *(float *)&v190;
        float v127 = *((float *)&v192 + 1) - *((float *)&v190 + 1);
        float v128 = v193 - *(float *)&v191;
        float v129 = *(float *)&v194 - *(float *)&v190;
        float v130 = *((float *)&v194 + 1) - *((float *)&v190 + 1);
        float v131 = v195 - *(float *)&v191;
        *(float *)int v179 = *(float *)&v190 + (float)(*(float *)&v192 - *(float *)&v190);
        *((float *)v179 + 1) = *((float *)&v190 + 1) + (float)(*((float *)&v192 + 1) - *((float *)&v190 + 1));
        *((float *)v179 + 2) = *(float *)&v191 + (float)(v193 - *(float *)&v191);
        *(float *)&unint64_t v215 = *(float *)&v190 + (float)(*(float *)&v194 - *(float *)&v190);
        *((float *)&v215 + 1) = *((float *)&v190 + 1) + (float)(*((float *)&v194 + 1) - *((float *)&v190 + 1));
        float v216 = *(float *)&v191 + (float)(v195 - *(float *)&v191);
        int v214 = 0;
        int v213 = 0;
        physx::Gu::closestPtPointTriangle((float *)&v209, (float *)&v190, (float32x2_t *)v179, (float32x2_t *)&v215, (float *)&v214, (float *)&v213, (uint64_t)&v211);
        float v132 = (float)((float)((float)(v211.f32[1] - *((float *)&v209 + 1))
                             * (float)(v211.f32[1] - *((float *)&v209 + 1)))
                     + (float)((float)(v211.f32[0] - *(float *)&v209) * (float)(v211.f32[0] - *(float *)&v209)))
             + (float)((float)(v212 - v210) * (float)(v212 - v210));
        float v125 = 0.0;
        if (v132 < v160)
        {
          float v133 = sqrtf(v132);
          float v134 = v133 - v158;
          float v135 = -(float)((float)(v158 * 2.0) - v133);
          if ((float)((float)((float)((float)(v154 * (float)((float)(v128 * v129) - (float)(v126 * v131)))
                                     + (float)((float)((float)(v127 * v131) - (float)(v128 * v130)) * v156))
                             + (float)((float)((float)(v126 * v130) - (float)(v127 * v129)) * v152))
                     - (float)((float)((float)((float)((float)(v128 * v129) - (float)(v126 * v131))
                                             * *((float *)&v190 + 1))
                                     + (float)((float)((float)(v127 * v131) - (float)(v128 * v130)) * *(float *)&v190))
                             + (float)((float)((float)(v126 * v130) - (float)(v127 * v129)) * *(float *)&v191))) <= 0.0)
            float v125 = v134;
          else {
            float v125 = v135;
          }
        }
      }
      if (v125 < v178)
      {
        float v136 = (float)((float)(*((float *)&v192 + 1) - *((float *)&v190 + 1)) * (float)(v195 - *(float *)&v191))
             - (float)((float)(v193 - *(float *)&v191) * (float)(*((float *)&v194 + 1) - *((float *)&v190 + 1)));
        float v118 = (float)((float)(v193 - *(float *)&v191) * (float)(*(float *)&v194 - *(float *)&v190))
             - (float)((float)(*(float *)&v192 - *(float *)&v190) * (float)(v195 - *(float *)&v191));
        float v137 = (float)((float)(*(float *)&v192 - *(float *)&v190)
                     * (float)(*((float *)&v194 + 1) - *((float *)&v190 + 1)))
             - (float)((float)(*((float *)&v192 + 1) - *((float *)&v190 + 1))
                     * (float)(*(float *)&v194 - *(float *)&v190));
        float v138 = sqrtf((float)((float)(v118 * v118) + (float)(v136 * v136)) + (float)(v137 * v137));
        if (v138 <= 0.0)
        {
          float v162 = (float)((float)(*((float *)&v192 + 1) - *((float *)&v190 + 1)) * (float)(v195 - *(float *)&v191))
               - (float)((float)(v193 - *(float *)&v191) * (float)(*((float *)&v194 + 1) - *((float *)&v190 + 1)));
        }
        else
        {
          float v139 = 1.0 / v138;
          float v162 = v136 * v139;
          float v118 = v118 * v139;
          float v137 = v137 * v139;
        }
        float v164 = v137;
        uint64_t v166 = v188;
        int v119 = v189;
        float v178 = v125;
        unsigned int v117 = *v34;
      }
      ++v34;
      --v116;
    }
    while (v116);
    float v106 = a4->f32[0];
    float v107 = a4->f32[1];
    float v104 = a4[1].f32[0];
    float v103 = a4[1].f32[1];
    float v105 = (float)(v103 * v103) + -0.5;
    float v140 = -v104;
    float v141 = -a4->f32[0];
    float v142 = -v107;
    uint64_t v95 = a8;
    float v143 = v164;
    float v144 = v162;
  }
  else
  {
    uint64_t v166 = 0;
    float v140 = -v104;
    float v141 = -v106;
    float v142 = -v107;
    unsigned int v117 = -1;
    int v119 = 0;
    float v178 = 3.4028e38;
    float v144 = 0.0;
    float v118 = 0.0;
    float v143 = 0.0;
  }
  float v145 = v144 + v144;
  float v146 = v143 + v143;
  float v147 = (float)((float)(v107 * (float)(v118 + v118)) + (float)(v106 * v145)) + (float)(v104 * v146);
  *(float *)a7 = (float)((float)(v103 * (float)((float)(v140 * (float)(v118 + v118)) + (float)(v107 * v146)))
                       + (float)(v145 * v105))
               + (float)(v106 * v147);
  *(float *)(a7 + 4) = (float)((float)(v103 * (float)((float)(v141 * v146) + (float)(v104 * v145)))
                             + (float)((float)(v118 + v118) * v105))
                     + (float)(v107 * v147);
  *(float *)(a7 + 8) = (float)((float)(v103 * (float)((float)(v142 * v145) + (float)(v106 * (float)(v118 + v118))))
                             + (float)(v146 * v105))
                     + (float)(v104 * v147);
  *(void *)uint64_t v95 = v166;
  *(_DWORD *)(v95 + 8) = v119;
  *a12 = v117;
  if ((v197 & 0x8000000000000000) == 0 && (v197 & 0x7FFFFFFF00000000) != 0 && v196) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if ((v199 & 0x8000000000000000) == 0 && (v199 & 0x7FFFFFFF00000000) != 0 && v198) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if ((v219 & 0x8000000000000000) == 0 && (v219 & 0x7FFFFFFF00000000) != 0 && v218 != v217 && v218) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v178;
}

float physx::Gu::SweepEstimateAnyShapeHeightfield(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, double a7, float a8)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  long long v11 = *(float32x2_t **)a2;
  uint64_t v113 = *(void *)(*(void *)a2 + 8);
  float v114 = v11;
  float v12 = v11[3].f32[0];
  __asm { FMOV            V3.2S, #1.0 }
  int32x2_t v111 = vrev64_s32((int32x2_t)vdiv_f32(_D3, v11[2]));
  float v112 = 1.0 / v12;
  v123[256] = 1;
  uint64_t v125 = 0x4000000000;
  float32x2_t v124 = v123;
  v110[0] = &unk_26E728C10;
  v110[1] = v123;
  float v18 = a3[3].f32[0] - a5[3].f32[0];
  float32x2_t v19 = vsub_f32(a3[2], a5[2]);
  float32x2_t v20 = vsub_f32(a4[2], a6[2]);
  float v21 = a4[3].f32[0] - a6[3].f32[0];
  float v22 = v18 - v21;
  float v23 = (float)(v18 - v21) * 0.5;
  float v24 = (float)(*(float *)(a1 + 76) + fabsf(v23)) + *(float *)&a7;
  float v25 = v23 + *(float *)(a1 + 88);
  _D3.f32[0] = v25 - v24;
  float v26 = v24 + v25;
  float32x2_t v99 = vsub_f32(v19, v20);
  float32x2_t v27 = vmul_f32(v99, (float32x2_t)0x3F0000003F000000);
  float32x2_t v28 = vadd_f32(vadd_f32(vabs_f32(v27), *(float32x2_t *)(a1 + 68)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0));
  float32x2_t v29 = vadd_f32(v27, *(float32x2_t *)(a1 + 80));
  float32x2_t v106 = vsub_f32(v29, v28);
  __int32 v107 = _D3.i32[0];
  float32x2_t v108 = vadd_f32(v28, v29);
  float v109 = v26;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v111, (float *)a4, (float *)&v106, 1, (uint64_t)v110);
  uint64_t v30 = v125;
  if (v125)
  {
    uint64_t v31 = 0;
    float32x2_t v32 = *(float32x2_t *)(a1 + 80);
    float v33 = *(float *)(a1 + 88);
    float32x4_t v34 = v124;
    uint64_t v35 = (float *)(a2 + 12);
    float32x2_t v36 = (float32x2_t)vdup_n_s32(0x3F8CCCCDu);
    float32x2_t v37 = vmul_f32(*(float32x2_t *)(a1 + 68), v36);
    float v38 = *(float *)(a1 + 76) * 1.1;
    float32x2_t v95 = vsub_f32(v20, v19);
    float v94 = v21 - v18;
    unsigned __int32 v93 = vadd_f32(v32, v37).u32[0];
    float v91 = v33 + v38;
    float v92 = v32.f32[1] + v37.f32[1];
    float32x2_t v97 = v37;
    float32x2_t v98 = v32;
    unsigned __int32 v90 = vsub_f32(v32, v37).u32[0];
    float v39 = 3.4028e38;
    float v96 = v33;
    float v40 = v38;
    float v88 = v33 - v38;
    float v89 = v32.f32[1] - v37.f32[1];
    while (1)
    {
      physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v111, v35, (uint64_t)&v100, 0, 0, *(_DWORD *)&v34[4 * v31], 1, 1);
      float v41 = v103;
      float v42 = v101;
      _D17 = vsub_f32(v102, v100);
      float32x2_t v44 = vsub_f32(v104, v100);
      float v45 = v105;
      _S7 = v105 - v101;
      float v47 = -(float)(vmuls_lane_f32(-(float)(v103 - v101), v44, 1) + (float)(_D17.f32[1] * (float)(v105 - v101)));
      __asm { FMLA            S21, S7, V17.S[1] }
      float v49 = -(float)((float)((float)(v103 - v101) * v44.f32[0]) - (float)(_D17.f32[0] * (float)(v105 - v101)));
      float v50 = vmlas_n_f32(-(float)(_D17.f32[0] * (float)(v105 - v101)), v103 - v101, v44.f32[0]);
      float v51 = (float)-_D17.f32[1] * v44.f32[0];
      float v52 = -(float)(v51 + (float)(_D17.f32[0] * v44.f32[1]));
      float v53 = vmlas_n_f32(v51, v44.f32[1], _D17.f32[0]);
      float v54 = sqrtf((float)((float)(v50 * v50) + (float)(_S21 * _S21)) + (float)(v53 * v53));
      if (v54 > 0.0)
      {
        float v55 = 1.0 / v54;
        float v47 = v55 * v47;
        float v49 = v55 * v49;
        float v52 = v55 * v52;
      }
      if ((float)((float)((float)(v99.f32[1] * v49) + (float)(v99.f32[0] * v47)) + (float)(v22 * v52)) >= a8)
      {
        float32x2_t v56 = (float32x2_t)vdup_n_s32(0x7E7FFFFFu);
        int8x8_t v57 = (int8x8_t)vcgt_f32(v100, v56);
        float v58 = 8.5071e37;
        if (v101 <= 8.5071e37) {
          float v58 = v101;
        }
        float32x2_t v59 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
        int8x8_t v60 = (int8x8_t)vcgt_f32(v59, v100);
        if (v101 < -8.5071e37) {
          float v42 = -8.5071e37;
        }
        if (v58 >= v103) {
          float v58 = v103;
        }
        if (v42 > v103) {
          float v41 = v42;
        }
        if (v58 >= v105) {
          float v61 = v105;
        }
        else {
          float v61 = v58;
        }
        if (v41 > v105) {
          float v45 = v41;
        }
        float v62 = (float)(v61 + v45) * 0.5;
        float v63 = (float)((float)(v45 - v61) * 0.5) + 0.01;
        float32x2_t v64 = (float32x2_t)vbsl_s8(v57, (int8x8_t)v56, (int8x8_t)v100);
        float32x2_t v65 = (float32x2_t)vbsl_s8(v60, (int8x8_t)v59, (int8x8_t)v100);
        float32x2_t v66 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v102, v64), (int8x8_t)v64, (int8x8_t)v102);
        float32x2_t v67 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v65, v102), (int8x8_t)v65, (int8x8_t)v102);
        float32x2_t v68 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v104, v66), (int8x8_t)v66, (int8x8_t)v104);
        float32x2_t v69 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v67, v104), (int8x8_t)v67, (int8x8_t)v104);
        float32x2_t v70 = vmul_f32(vadd_f32(v68, v69), (float32x2_t)0x3F0000003F000000);
        float32x2_t v71 = vmul_f32(vadd_f32(vmul_f32(vsub_f32(v69, v68), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3C23D70Au)), v36);
        float v72 = v63 * 1.1;
        int8x8_t v73 = vmvn_s8((int8x8_t)vcge_f32(vadd_f32(v97, v71), vabd_f32(v98, v70)));
        if ((v73.i8[0] & 1) != 0 || (v73.i8[4] & 1) != 0 || (float v74 = 0.0, vabds_f32(v96, v62) > (float)(v40 + v72)))
        {
          uint64_t v75 = 0;
          float32x2_t v121 = v95;
          float v122 = v94;
          v120[0] = v93;
          *(float *)&v120[1] = v92;
          *(float *)&v120[2] = v91;
          v119[0] = v90;
          *(float *)&v119[1] = v89;
          *(float *)&v119[2] = v88;
          float32x2_t v117 = vadd_f32(v70, v71);
          float v118 = v62 + v72;
          float32x2_t v115 = vsub_f32(v70, v71);
          float v74 = 0.0;
          float v76 = 1.0;
          float v116 = v62 - v72;
          do
          {
            float v77 = v121.f32[v75];
            if (v77 >= -0.000001)
            {
              if (v77 <= 0.000001)
              {
                if (v117.f32[v75] < *(float *)&v119[v75] || v115.f32[v75] > *(float *)&v120[v75])
                {
LABEL_44:
                  float v74 = 3.4028e38;
                  break;
                }
              }
              else
              {
                float v78 = v115.f32[v75];
                float v79 = *(float *)&v120[v75];
                if (v78 > v79) {
                  goto LABEL_44;
                }
                float v83 = v117.f32[v75];
                float v84 = *(float *)&v119[v75];
                if (v83 < v84)
                {
                  float v85 = (float)(v84 - v83) / v77;
                  if (v85 > v74) {
                    float v74 = v85;
                  }
                }
                if (v79 > v78)
                {
LABEL_36:
                  float v86 = (float)(v79 - v78) / v77;
                  if (v86 < v76) {
                    float v76 = v86;
                  }
                }
              }
            }
            else
            {
              float v78 = v117.f32[v75];
              float v79 = *(float *)&v119[v75];
              if (v78 < v79) {
                goto LABEL_44;
              }
              float v80 = *(float *)&v120[v75];
              float v81 = v115.f32[v75];
              if (v80 < v81)
              {
                float v82 = (float)(v80 - v81) / v77;
                if (v82 > v74) {
                  float v74 = v82;
                }
              }
              if (v78 > v79) {
                goto LABEL_36;
              }
            }
            if (v74 > v76) {
              goto LABEL_44;
            }
            ++v75;
          }
          while (v75 != 3);
        }
        if (v39 >= v74) {
          float v39 = v74;
        }
      }
      if (++v31 == v30) {
        goto LABEL_50;
      }
    }
  }
  float v39 = 3.4028e38;
LABEL_50:
  if ((v125 & 0x8000000000000000) == 0 && (v125 & 0x7FFFFFFF00000000) != 0 && v124 != v123 && v124) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v39;
}

float physx::Gu::SweepAnyShapeMesh(int **a1, uint64_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, float *a7, uint64_t a8, double a9, double a10, float a11, int *a12)
{
  v196.n128_f64[0] = a9;
  uint64_t v288 = *MEMORY[0x263EF8340];
  float32x2_t v19 = (float *)(*a2 + 4);
  uint64_t v207 = *a2;
  physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v260, v19, (float *)(*a2 + 16));
  float v20 = a3[3].f32[0] - a5[3].f32[0];
  float32x2_t v21 = vsub_f32(a3[2], a5[2]);
  float32x2_t v22 = vsub_f32(a4[2], a6[2]);
  float v23 = a4[3].f32[0] - a6[3].f32[0];
  float32x2_t v24 = vsub_f32(v21, v22);
  float v25 = v20 - v23;
  float32x2_t v258 = v24;
  float v259 = v25;
  float v26 = v24.f32[1];
  float v204 = v24.f32[0];
  float v27 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v24.f32[1], v24, 1), v24.f32[0], v24.f32[0]) + (float)(v25 * v25));
  if (v27 > 0.0)
  {
    float32x2_t v258 = vmul_n_f32(v24, 1.0 / v27);
    float v259 = v25 * (float)(1.0 / v27);
  }
  v256[0] = xmmword_23435FD50;
  v256[1] = xmmword_23435FD50;
  int v257 = 1065353216;
  *(float32x2_t *)v30.i8 = physx::Gu::computeSweptBox((uint64_t)&v242, (float *)a1 + 17, (float32x2_t *)a1 + 10, (float *)v256, &v258, v27);
  v29.i32[0] = *(__int32 *)v19;
  v30.i32[0] = 1.0;
  if (*v19 == 1.0
    && (v29.i32[0] = *(_DWORD *)(v207 + 8), *(float *)v29.i32 == 1.0)
    && (v30.i32[0] = *(_DWORD *)(v207 + 12), v29.i32[0] = 1.0, *(float *)v30.i32 == 1.0))
  {
    float v31 = a4[2].f32[0] * -2.0;
    float v32 = a4[2].f32[1] * -2.0;
    float v33 = a4[3].f32[0] * -2.0;
    float v35 = a4[1].f32[0];
    float v34 = a4[1].f32[1];
    float v36 = (float)(v34 * v34) + -0.5;
    float v37 = a4->f32[0];
    float v38 = a4->f32[1];
    float v39 = (float)((float)(v32 * v38) + (float)(a4->f32[0] * v31)) + (float)(v35 * v33);
    float v40 = (float)((float)(v31 * v36) - (float)((float)((float)(v38 * v33) - (float)(v35 * v32)) * v34))
        + (float)(a4->f32[0] * v39);
    float v41 = (float)((float)(v32 * v36) - (float)((float)((float)(v35 * v31) - (float)(a4->f32[0] * v33)) * v34))
        + (float)(v38 * v39);
    float v42 = (float)((float)(v33 * v36) - (float)((float)((float)(a4->f32[0] * v32) - (float)(v38 * v31)) * v34))
        + (float)(v35 * v39);
    float v43 = (float)((float)-(float)(v38 * (float)(v243 + v243)) - (float)(a4->f32[0] * (float)(v242 + v242)))
        - (float)(v35 * (float)(v244 + v244));
    *(float *)&unsigned int v44 = (float)((float)(v34
                                   * (float)((float)(v35 * (float)(v243 + v243)) - (float)(v38 * (float)(v244 + v244))))
                           + (float)((float)(v242 + v242) * v36))
                   - (float)(a4->f32[0] * v43);
    *(float *)&unsigned int v45 = (float)((float)(v34
                                   * (float)((float)(a4->f32[0] * (float)(v244 + v244))
                                           - (float)(v35 * (float)(v242 + v242))))
                           + (float)((float)(v243 + v243) * v36))
                   - (float)(v38 * v43);
    *(float *)&unsigned int v46 = (float)((float)(v34
                                   * (float)((float)(v38 * (float)(v242 + v242))
                                           - (float)(a4->f32[0] * (float)(v243 + v243))))
                           + (float)((float)(v244 + v244) * v36))
                   - (float)(v35 * v43);
    float v47 = (float)((float)-(float)(v38 * (float)(v246 + v246)) - (float)(a4->f32[0] * (float)(v245 + v245)))
        - (float)(v35 * (float)(v247 + v247));
    *(float *)&unsigned int v48 = (float)((float)(v34
                                   * (float)((float)(v35 * (float)(v246 + v246)) - (float)(v38 * (float)(v247 + v247))))
                           + (float)((float)(v245 + v245) * v36))
                   - (float)(a4->f32[0] * v47);
    float v49 = (float)((float)(v34 * (float)((float)(a4->f32[0] * (float)(v247 + v247)) - (float)(v35 * (float)(v245 + v245))))
                + (float)((float)(v246 + v246) * v36))
        - (float)(v38 * v47);
    float v50 = (float)((float)(v34 * (float)((float)(v38 * (float)(v245 + v245)) - (float)(a4->f32[0] * (float)(v246 + v246))))
                + (float)((float)(v247 + v247) * v36))
        - (float)(v35 * v47);
    float v51 = (float)((float)-(float)(v38 * (float)(v249 + v249)) - (float)(a4->f32[0] * (float)(v248 + v248)))
        - (float)(v35 * (float)(v250 + v250));
    float v52 = (float)(v34 * (float)((float)(v38 * (float)(v248 + v248)) - (float)(a4->f32[0] * (float)(v249 + v249))))
        + (float)((float)(v250 + v250) * v36);
    float v53 = (float)((float)-(float)(v38 * (float)(v252 + v252)) - (float)(a4->f32[0] * (float)(v251 + v251)))
        - (float)(v35 * (float)(v253 + v253));
    float v54 = v40
        + (float)((float)((float)(v34
                                * (float)((float)(v35 * (float)(v252 + v252)) - (float)(v38 * (float)(v253 + v253))))
                        + (float)((float)(v251 + v251) * v36))
                - (float)(a4->f32[0] * v53));
    float v55 = v41
        + (float)((float)((float)(v34
                                * (float)((float)(a4->f32[0] * (float)(v253 + v253))
                                        - (float)(v35 * (float)(v251 + v251))))
                        + (float)((float)(v252 + v252) * v36))
                - (float)(v38 * v53));
    float32x2_t v56 = v254;
    float v57 = v255;
    float v58 = (float)((float)(v34 * (float)((float)(v35 * (float)(v249 + v249)) - (float)(v38 * (float)(v250 + v250))))
                + (float)((float)(v248 + v248) * v36))
        - (float)(a4->f32[0] * v51);
    float v59 = (float)((float)(v34 * (float)((float)(a4->f32[0] * (float)(v250 + v250)) - (float)(v35 * (float)(v248 + v248))))
                + (float)((float)(v249 + v249) * v36))
        - (float)(v38 * v51);
    v231.i64[0] = __PAIR64__(v45, v44);
    v231.i64[1] = __PAIR64__(v48, v46);
    float v232 = v49;
    float v233 = v50;
    float v234 = v58;
    float v235 = v59;
    float v236 = v52 - (float)(v35 * v51);
    float v237 = v54;
    float v238 = v55;
    float v239 = v42
         + (float)((float)((float)(v34
                                 * (float)((float)(v38 * (float)(v251 + v251)) - (float)(v37 * (float)(v252 + v252))))
                         + (float)((float)(v253 + v253) * v36))
                 - (float)(v35 * v53));
  }
  else
  {
    physx::Gu::computeVertexSpaceOBB(&v231, (uint64_t)&v242, (float *)a4, v19, v30, v29, v28);
    float32x2_t v56 = v240;
    float v57 = v241;
  }
  float32x2_t v60 = (float32x2_t)vdup_lane_s32((int32x2_t)v196.n128_u64[0], 0);
  float32x2_t v240 = vadd_f32(v56, v60);
  float v241 = v57 + v196.n128_f32[0];
  v285[256] = 1;
  uint64_t v287 = 0x4000000000;
  v286 = v285;
  v229[7] = 2;
  *(void *)&v229[5] = &unk_26E728C50;
  v230 = v285;
  physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(*(void *)(v207 + 48) + 8) - 3]();
  uint64_t v61 = v287;
  if (!v287)
  {
    float v120 = 3.4028e38;
    goto LABEL_88;
  }
  float v178 = a7;
  uint64_t v179 = a8;
  float32x2_t v202 = v286;
  float v206 = v20;
  float v62 = *((float *)a1 + 22);
  float32x2_t v198 = (float32x2_t)a1[10];
  float32x2_t v195 = vadd_f32(*(float32x2_t *)((char *)a1 + 68), v60);
  float v63 = *((float *)a1 + 19) + v196.n128_f32[0];
  v282[256] = 1;
  uint64_t v284 = 0x4000000000;
  v283 = (int *)v282;
  v278[0] = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::resize((uint64_t)v282, v287, v278);
  char v279 = 1;
  uint64_t v281 = 0x4000000000;
  v280 = v278;
  LODWORD(v222) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::resize((uint64_t)v278, v287, &v222);
  uint64_t v64 = 0;
  unsigned int v200 = 0;
  float32x2_t v65 = v283;
  float32x2_t v66 = v280;
  float32x2_t v191 = vsub_f32(v22, v21);
  __int32 v188 = vadd_f32(v198, v195).u32[0];
  float v185 = v62 + v63;
  LODWORD(v184) = vsub_f32(v198, v195).u32[0];
  float v193 = v63;
  float v67 = v62 - v63;
  int32x2_t v68 = vdup_n_s32(0xFE7FFFFF);
  do
  {
    LODWORD(v219) = 0;
    uint64_t v222 = v207;
    v223 = &v260;
    uint64_t v224 = (int *)&v202[4 * v64];
    int v225 = 1;
    v226 = &v219;
    long long v227 = xmmword_23441FAD0;
    int32x2_t v228 = v68;
    *(void *)v229 = 0;
    *(void *)((char *)&v229[1] + 1) = 0;
    float v70 = a4[1].f32[0];
    float v69 = a4[1].f32[1];
    float v71 = (float)(v69 * v69) + -0.5;
    float v72 = a4->f32[1];
    float v73 = (float)((float)((float)(*(float *)&v211[4] + *(float *)&v211[4]) * v72)
                + (float)(a4->f32[0] * (float)(*(float *)v211 + *(float *)v211)))
        + (float)(v70 * (float)(*(float *)&v211[8] + *(float *)&v211[8]));
    if ((float)((float)((float)-(float)((float)((float)((float)(v69
                                                               * (float)((float)(v70
                                                                               * (float)(*(float *)v211 + *(float *)v211))
                                                                       - (float)(a4->f32[0]
                                                                               * (float)(*(float *)&v211[8]
                                                                                       + *(float *)&v211[8]))))
                                                       + (float)((float)(*(float *)&v211[4] + *(float *)&v211[4]) * v71))
                                               + (float)(v72 * v73))
                                       * v26)
                       - (float)(v204
                               * (float)((float)((float)(v69
                                                       * (float)((float)(v72
                                                                       * (float)(*(float *)&v211[8] + *(float *)&v211[8]))
                                                               - (float)(v70
                                                                       * (float)(*(float *)&v211[4] + *(float *)&v211[4]))))
                                               + (float)((float)(*(float *)v211 + *(float *)v211) * v71))
                                       + (float)(a4->f32[0] * v73))))
               - (float)(v25
                       * (float)((float)((float)(v69
                                               * (float)((float)(a4->f32[0]
                                                               * (float)(*(float *)&v211[4] + *(float *)&v211[4]))
                                                       - (float)(v72 * (float)(*(float *)v211 + *(float *)v211))))
                                       + (float)((float)(*(float *)&v211[8] + *(float *)&v211[8]) * v71))
                               + (float)(v70 * v73)))) < a11)
      goto LABEL_20;
    float v74 = (float)(*(float *)&v211[8] + *(float *)&v211[20]) * 0.5;
    float32x2_t v75 = vmul_f32(vadd_f32(*(float32x2_t *)v211, *(float32x2_t *)&v211[12]), (float32x2_t)0x3F0000003F000000);
    float32x2_t v76 = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)&v211[12], *(float32x2_t *)v211), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3CA3D70Au));
    float v77 = (float)((float)(*(float *)&v211[20] - *(float *)&v211[8]) * 0.5) + 0.02;
    int8x8_t v78 = vmvn_s8((int8x8_t)vcge_f32(vadd_f32(v195, v76), vabd_f32(v198, v75)));
    if ((v78.i8[0] & 1) != 0 || (v78.i8[4] & 1) != 0 || (float v79 = 0.0, vabds_f32(v62, v74) > (float)(v193 + v77)))
    {
      uint64_t v84 = 0;
      *(float32x2_t *)&v208[0] = v191;
      *((float *)v208 + 2) = v23 - v206;
      v276.i32[0] = v188;
      v276.f32[1] = v198.f32[1] + v195.f32[1];
      float v277 = v185;
      float v271 = v184;
      float v272 = v198.f32[1] - v195.f32[1];
      float v273 = v67;
      unint64_t v269 = (unint64_t)vadd_f32(v75, v76);
      float v270 = v74 + v77;
      float v85 = v74 - v77;
      float32x2_t v267 = vsub_f32(v75, v76);
      float v79 = 0.0;
      float v86 = 1.0;
      float v268 = v85;
      while (1)
      {
        float v87 = *(float *)((char *)v208 + v84 * 4);
        if (v87 < -0.000001) {
          break;
        }
        if (v87 <= 0.000001)
        {
          if (*(float *)((char *)&v269 + v84 * 4) < *(float *)((char *)&v271 + v84 * 4)
            || v267.f32[v84] > v276.f32[v84])
          {
            goto LABEL_20;
          }
          goto LABEL_41;
        }
        float v88 = v267.f32[v84];
        float v89 = v276.f32[v84];
        if (v88 > v89) {
          goto LABEL_20;
        }
        float v93 = *(float *)((char *)&v269 + v84 * 4);
        float v94 = *(float *)((char *)&v271 + v84 * 4);
        if (v93 < v94)
        {
          float v95 = (float)(v94 - v93) / v87;
          if (v95 > v79) {
            float v79 = v95;
          }
        }
        if (v89 > v88) {
          goto LABEL_36;
        }
LABEL_41:
        if (v79 > v86) {
          goto LABEL_20;
        }
        if (++v84 == 3)
        {
          if (v79 > 1.0) {
            goto LABEL_20;
          }
          goto LABEL_14;
        }
      }
      float v88 = *(float *)((char *)&v269 + v84 * 4);
      float v89 = *(float *)((char *)&v271 + v84 * 4);
      if (v88 < v89) {
        goto LABEL_20;
      }
      float v90 = v276.f32[v84];
      float v91 = v267.f32[v84];
      if (v90 < v91)
      {
        float v92 = (float)(v90 - v91) / v87;
        if (v92 > v79) {
          float v79 = v92;
        }
      }
      if (v88 <= v89) {
        goto LABEL_41;
      }
LABEL_36:
      float v96 = (float)(v89 - v88) / v87;
      if (v96 < v86) {
        float v86 = v96;
      }
      goto LABEL_41;
    }
LABEL_14:
    if (v200)
    {
      uint64_t v80 = v200;
      while (1)
      {
        uint64_t v81 = (v80 - 1);
        float v82 = *(float *)&v66[v81];
        if (v82 <= v79) {
          break;
        }
        *(float *)&v66[v80] = v82;
        v65[v80--] = v65[v81];
        if (!v81) {
          goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      LODWORD(v80) = 0;
    }
    uint64_t v83 = v80;
    v65[v83] = *(_DWORD *)&v202[4 * v64];
    *(float *)&v66[v83] = v79;
    ++v200;
LABEL_20:
    ++v64;
  }
  while (v64 != v61);
  float v97 = *((float *)a1 + 2);
  float v98 = a4[2].f32[0];
  float v99 = a4[2].f32[1];
  float v100 = a4[3].f32[0];
  float v101 = (float)(a6[2].f32[0] - v98) + (float)(a6[2].f32[0] - v98);
  float v102 = (float)(a6[2].f32[1] - v99) + (float)(a6[2].f32[1] - v99);
  float v103 = (float)(a6[3].f32[0] - v100) + (float)(a6[3].f32[0] - v100);
  float v105 = a4[1].f32[0];
  float v104 = a4[1].f32[1];
  float v106 = (float)(v104 * v104) + -0.5;
  float v107 = a4->f32[0];
  float v108 = a4->f32[1];
  float v109 = (float)((float)(v102 * v108) + (float)(a4->f32[0] * v101)) + (float)(v105 * v103);
  *(float *)&unsigned int v110 = (float)((float)(v101 * v106) - (float)((float)((float)(v108 * v103) - (float)(v105 * v102)) * v104))
                  + (float)(a4->f32[0] * v109);
  *(float *)&unsigned int v111 = (float)((float)(v102 * v106)
                          - (float)((float)((float)(v105 * v101) - (float)(a4->f32[0] * v103)) * v104))
                  + (float)(v108 * v109);
  float v112 = (float)((float)(v103 * v106) - (float)((float)((float)(a4->f32[0] * v102) - (float)(v108 * v101)) * v104))
       + (float)(v105 * v109);
  unint64_t v269 = __PAIR64__(v111, v110);
  float v270 = v112;
  if (v200)
  {
    float v113 = (float)(a5[2].f32[0] - v98) + (float)(a5[2].f32[0] - v98);
    float v114 = (float)(a5[2].f32[1] - v99) + (float)(a5[2].f32[1] - v99);
    float v115 = (float)(a5[3].f32[0] - v100) + (float)(a5[3].f32[0] - v100);
    float v116 = (float)((float)(v108 * v114) + (float)(v107 * v113)) + (float)(v105 * v115);
    float v183 = (float)((float)(v113 * v106) - (float)((float)((float)(v108 * v115) - (float)(v105 * v114)) * v104))
         + (float)(v107 * v116);
    float v182 = (float)((float)(v114 * v106) - (float)((float)((float)(v105 * v113) - (float)(v107 * v115)) * v104))
         + (float)(v108 * v116);
    __n128 v117 = v196;
    float v180 = v97 + v196.n128_f32[0];
    float v181 = (float)((float)(v115 * v106) - (float)((float)((float)(v107 * v114) - (float)(v108 * v113)) * v104))
         + (float)(v105 * v116);
    uint64_t v118 = v200;
    uint64_t v192 = 0;
    float v190 = 0.0;
    int v119 = -1;
    float v120 = 3.4028e38;
    uint64_t v121 = 0x7F7FFFFF00000000;
    float v186 = 0.0;
    float v187 = 0.0;
    int v189 = 0;
    float v122 = v178;
    do
    {
      int v221 = 0;
      uint64_t v222 = v207;
      v223 = &v260;
      uint64_t v224 = v65;
      int v225 = 1;
      v226 = (uint64_t *)&v221;
      long long v227 = xmmword_23441FAD0;
      int32x2_t v228 = vdup_n_s32(0xFE7FFFFF);
      *(void *)v229 = 0;
      *(void *)((char *)&v229[1] + 1) = 0;
      uint64_t v123 = *(void *)(v207 + 48);
      uint64_t v124 = *(void *)(v123 + 48);
      uint64_t v125 = (3 * *v65);
      if ((*(unsigned char *)(v123 + 92) & 2) != 0)
      {
        float v130 = (unsigned __int16 *)(v124 + 2 * v125);
        unsigned int v127 = *v130;
        unsigned int v128 = v130[1];
        unsigned int v129 = v130[2];
      }
      else
      {
        uint64_t v126 = (unsigned int *)(v124 + 4 * v125);
        unsigned int v127 = *v126;
        unsigned int v128 = v126[1];
        unsigned int v129 = v126[2];
      }
      uint64_t v131 = *(void *)(v123 + 40);
      float v132 = (float *)(v131 + 12 * v129);
      float v133 = (float *)(v131 + 12 * v128);
      float v134 = (float *)(v131 + 12 * v127);
      float v135 = v134[1];
      float v136 = v134[2];
      float v138 = v133[1];
      float v137 = v133[2];
      float v139 = *v133;
      float v140 = *v132;
      float v141 = v132[1];
      float v142 = v132[2];
      float v143 = (float)((float)(*v134 * v261) + (float)(v135 * v263)) + (float)(v136 * v265);
      *(float32x2_t *)v144.f32 = vadd_f32(vadd_f32(vmul_n_f32(v260, *v134), vmul_n_f32(v262, v135)), vmul_n_f32(v264, v136));
      uint64_t v217 = v144.i64[0];
      float v218 = v143;
      if (v266) {
        float v145 = v140;
      }
      else {
        float v145 = v139;
      }
      if (v266) {
        float v146 = v141;
      }
      else {
        float v146 = v138;
      }
      float v147 = (float)(v145 * v261) + (float)(v146 * v263);
      if (v266) {
        float v148 = v142;
      }
      else {
        float v148 = v137;
      }
      float32x2_t v149 = vadd_f32(vadd_f32(vmul_n_f32(v260, v145), vmul_n_f32(v262, v146)), vmul_n_f32(v264, v148));
      float v150 = v147 + (float)(v148 * v265);
      if (v266) {
        float v151 = v139;
      }
      else {
        float v151 = v140;
      }
      if (!v266) {
        float v138 = v141;
      }
      float v152 = (float)(v151 * v261) + (float)(v138 * v263);
      if (!v266) {
        float v137 = v142;
      }
      *(float32x2_t *)v153.f32 = vadd_f32(vadd_f32(vmul_n_f32(v260, v151), vmul_n_f32(v262, v138)), vmul_n_f32(v264, v137));
      v144.i64[1] = LODWORD(v143);
      float32x2_t v203 = v149;
      float v205 = v150;
      *(float32x2_t *)v154.f32 = v149;
      v154.i64[1] = LODWORD(v150);
      float v199 = v152 + (float)(v137 * v265);
      uint64_t v201 = v153.i64[0];
      v153.i64[1] = LODWORD(v199);
      float32x4_t v155 = vmulq_f32(vaddq_f32(v153, vaddq_f32(v144, v154)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
      v155.i32[3] = 0;
      char v213 = 0;
      *(float32x4_t *)float32x2_t v211 = v155;
      float32x4_t v214 = v144;
      float32x4_t v215 = v154;
      float32x4_t v216 = v153;
      *(void *)&v211[16] = v121;
      uint64_t v212 = 0x57F7FFFFFLL;
      float v156 = *a1;
      v208[0] = xmmword_23435FD50;
      v208[1] = xmmword_23435FD50;
      v208[2] = xmmword_234376D80;
      v208[3] = xmmword_23435FD60;
      uint64_t v209 = 0x3F80000000000000;
      char v210 = 0;
      float v157 = ((float (*)(__n128, double))*(&physx::Gu::g_TriangleSweepMethodTable + *v156))(v117, 0.0);
      float v158 = -v267.f32[0];
      float v159 = -v267.f32[1];
      float v160 = -v268;
      v267.f32[0] = -v267.f32[0];
      v267.f32[1] = -v267.f32[1];
      float v268 = -v268;
      if (v157 <= 0.0)
      {
        float v194 = v120;
        uint64_t v161 = v121;
        float v162 = v203.f32[0] - *(float *)&v217;
        float v163 = v203.f32[1] - *((float *)&v217 + 1);
        float v164 = v205 - v218;
        float v165 = *(float *)&v201 - *(float *)&v217;
        float v166 = *((float *)&v201 + 1) - *((float *)&v217 + 1);
        float v167 = v199 - v218;
        *(float *)int8x16_t v208 = *(float *)&v217 + (float)(v203.f32[0] - *(float *)&v217);
        *((float *)v208 + 1) = *((float *)&v217 + 1) + (float)(v203.f32[1] - *((float *)&v217 + 1));
        *((float *)v208 + 2) = v218 + (float)(v205 - v218);
        v276.f32[0] = *(float *)&v217 + (float)(*(float *)&v201 - *(float *)&v217);
        v276.f32[1] = *((float *)&v217 + 1) + (float)(*((float *)&v201 + 1) - *((float *)&v217 + 1));
        float v277 = v218 + (float)(v199 - v218);
        int v275 = 0;
        int v274 = 0;
        physx::Gu::closestPtPointTriangle((float *)&v269, (float *)&v217, (float32x2_t *)v208, &v276, (float *)&v275, (float *)&v274, (uint64_t)&v271);
        float v168 = (float)((float)((float)(v272 - *((float *)&v269 + 1)) * (float)(v272 - *((float *)&v269 + 1)))
                     + (float)((float)(v271 - *(float *)&v269) * (float)(v271 - *(float *)&v269)))
             + (float)((float)(v273 - v270) * (float)(v273 - v270));
        float v157 = 0.0;
        if (v168 < (float)(v180 * v180))
        {
          float v169 = sqrtf(v168);
          float v170 = v169 - v180;
          float v171 = -(float)((float)(v180 * 2.0) - v169);
          if ((float)((float)((float)((float)(v182 * (float)((float)(v164 * v165) - (float)(v162 * v167)))
                                     + (float)((float)((float)(v163 * v167) - (float)(v164 * v166)) * v183))
                             + (float)((float)((float)(v162 * v166) - (float)(v163 * v165)) * v181))
                     - (float)((float)((float)((float)((float)(v164 * v165) - (float)(v162 * v167))
                                             * *((float *)&v217 + 1))
                                     + (float)((float)((float)(v163 * v167) - (float)(v164 * v166)) * *(float *)&v217))
                             + (float)((float)((float)(v162 * v166) - (float)(v163 * v165)) * v218))) >= 0.0)
            float v157 = v170;
          else {
            float v157 = v171;
          }
        }
        float v173 = a4[1].f32[0];
        float v172 = a4[1].f32[1];
        float v174 = (float)(v172 * v172) + -0.5;
        float v175 = a4->f32[1];
        float v176 = (float)((float)((float)(*((float *)v208 + 1) + *((float *)v208 + 1)) * v175)
                     + (float)(a4->f32[0] * (float)(*(float *)v208 + *(float *)v208)))
             + (float)(v173 * (float)(*((float *)v208 + 2) + *((float *)v208 + 2)));
        float v158 = (float)((float)(v172
                             * (float)((float)(v175 * (float)(*((float *)v208 + 2) + *((float *)v208 + 2)))
                                     - (float)(v173 * (float)(*((float *)v208 + 1) + *((float *)v208 + 1)))))
                     + (float)((float)(*(float *)v208 + *(float *)v208) * v174))
             + (float)(a4->f32[0] * v176);
        float v159 = (float)((float)(v172
                             * (float)((float)(v173 * (float)(*(float *)v208 + *(float *)v208))
                                     - (float)(a4->f32[0] * (float)(*((float *)v208 + 2) + *((float *)v208 + 2)))))
                     + (float)((float)(*((float *)v208 + 1) + *((float *)v208 + 1)) * v174))
             + (float)(v175 * v176);
        float v160 = (float)((float)(v172
                             * (float)((float)(a4->f32[0] * (float)(*((float *)v208 + 1) + *((float *)v208 + 1)))
                                     - (float)(v175 * (float)(*(float *)v208 + *(float *)v208))))
                     + (float)((float)(*((float *)v208 + 2) + *((float *)v208 + 2)) * v174))
             + (float)(v173 * v176);
        uint64_t v121 = v161;
        float v120 = v194;
      }
      if (v157 < v120)
      {
        uint64_t v192 = v219;
        float v187 = v158;
        int v189 = v220;
        float v186 = v159;
        float v190 = v160;
        float v120 = v157;
        int v119 = *v65;
      }
      ++v65;
      --v118;
      __n128 v117 = v196;
    }
    while (v118);
  }
  else
  {
    uint64_t v192 = 0;
    int v119 = -1;
    float v187 = 0.0;
    int v189 = 0;
    float v120 = 3.4028e38;
    float v186 = 0.0;
    float v190 = 0.0;
    float v122 = v178;
  }
  *float v122 = v187;
  v122[1] = v186;
  v122[2] = v190;
  *(void *)uint64_t v179 = v192;
  *(_DWORD *)(v179 + 8) = v189;
  *a12 = v119;
  if ((v281 & 0x8000000000000000) == 0 && (v281 & 0x7FFFFFFF00000000) != 0 && v280 != v278 && v280) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  if ((v284 & 0x8000000000000000) == 0 && (v284 & 0x7FFFFFFF00000000) != 0 && v283 != (int *)v282 && v283) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
LABEL_88:
  if ((v287 & 0x8000000000000000) == 0 && (v287 & 0x7FFFFFFF00000000) != 0 && v286 != v285 && v286) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v120;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5 = result;
  if ((*(_DWORD *)(result + 276) & 0x7FFFFFFFu) < a2) {
    double result = physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(result, a2);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 272);
  if (v6 < a2)
  {
    uint64_t v7 = *(void *)(v5 + 264);
    uint64_t v8 = (_DWORD *)(v7 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7 + 4 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 272) = a2;
  return result;
}

float *physx::Gu::anonymous namespace'::ConvexTriangles::getPolygonNormal(float *this, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 48);
  char v3 = *(unsigned char *)(v2 + 92);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  uint64_t v6 = (3 * **(_DWORD **)(a2 + 16));
  if ((v3 & 2) != 0)
  {
    long long v11 = (unsigned __int16 *)(v5 + 2 * v6);
    unsigned int v8 = *v11;
    unsigned int v9 = v11[1];
    unsigned int v10 = v11[2];
  }
  else
  {
    uint64_t v7 = (unsigned int *)(v5 + 4 * v6);
    unsigned int v8 = *v7;
    unsigned int v9 = v7[1];
    unsigned int v10 = v7[2];
  }
  float v12 = (float *)(v4 + 12 * v10);
  uint64_t v13 = (float *)(v4 + 12 * v9);
  uint64_t v14 = (float *)(v4 + 12 * v8);
  float v16 = v14[1];
  float v15 = v14[2];
  float v17 = *v14;
  float v19 = v13[1];
  float v18 = v13[2];
  float v20 = *v13;
  uint64_t v21 = *(void *)(a2 + 8);
  float v22 = *(float *)v21;
  float v23 = *(float *)(v21 + 4);
  float v24 = *(float *)(v21 + 8);
  float v25 = *(float *)(v21 + 12);
  float v26 = *(float *)(v21 + 16);
  float v27 = *(float *)(v21 + 20);
  float v28 = (float)(v17 * *(float *)v21) + (float)(v16 * v25);
  float v29 = (float)(v17 * v23) + (float)(v16 * v26);
  float v30 = (float)(v17 * v24) + (float)(v16 * v27);
  float v31 = *(float *)(v21 + 24);
  float v32 = *(float *)(v21 + 28);
  float v33 = *(float *)(v21 + 32);
  float v34 = v28 + (float)(v15 * v31);
  float v35 = v29 + (float)(v15 * v32);
  float v36 = v30 + (float)(v15 * v33);
  if (*(unsigned char *)(v21 + 72)) {
    float v37 = *v12;
  }
  else {
    float v37 = *v13;
  }
  float v38 = v22 * v37;
  float v39 = v37 * v23;
  float v40 = v37 * v24;
  if (*(unsigned char *)(v21 + 72)) {
    float v41 = v12[1];
  }
  else {
    float v41 = v13[1];
  }
  float v42 = v38 + (float)(v41 * v25);
  float v43 = v39 + (float)(v41 * v26);
  float v44 = v40 + (float)(v41 * v27);
  if (*(unsigned char *)(v21 + 72)) {
    float v45 = v12[2];
  }
  else {
    float v45 = v13[2];
  }
  float v46 = v42 + (float)(v45 * v31);
  float v47 = v43 + (float)(v45 * v32);
  float v48 = v44 + (float)(v45 * v33);
  if (!*(unsigned char *)(v21 + 72)) {
    float v20 = *v12;
  }
  float v49 = v22 * v20;
  float v50 = v20 * v23;
  float v51 = v20 * v24;
  if (!*(unsigned char *)(v21 + 72)) {
    float v19 = v12[1];
  }
  float v52 = v49 + (float)(v19 * v25);
  float v53 = v50 + (float)(v19 * v26);
  float v54 = v51 + (float)(v19 * v27);
  if (!*(unsigned char *)(v21 + 72)) {
    float v18 = v12[2];
  }
  float v55 = v36 - v48;
  float v56 = v34 - (float)(v52 + (float)(v18 * v31));
  float v57 = v35 - (float)(v53 + (float)(v18 * v32));
  float v58 = v36 - (float)(v54 + (float)(v18 * v33));
  float v59 = (float)((float)(v35 - v47) * v58) - (float)(v55 * v57);
  float v60 = (float)(v55 * v56) - (float)((float)(v34 - v46) * v58);
  float v61 = (float)((float)(v34 - v46) * v57) - (float)((float)(v35 - v47) * v56);
  float v62 = (float)((float)(v60 * v60) + (float)(v59 * v59)) + (float)(v61 * v61);
  float v63 = 0.0;
  float v64 = 0.0;
  float v65 = 0.0;
  if (v62 > 0.0)
  {
    float v66 = 1.0 / sqrtf(v62);
    float v63 = v59 * v66;
    float v64 = v60 * v66;
    float v65 = v61 * v66;
  }
  *this = v63;
  this[1] = v64;
  this[2] = v65;
  return this;
}

float physx::Gu::anonymous namespace'::ConvexTriangles::getBounds(uint64_t a1, uint64_t a2, float *a3)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = *(float **)(a1 + 8);
    uint64_t v4 = *(int **)(a1 + 16);
    uint64_t v6 = *(void *)(*(void *)a1 + 48);
    char v7 = *(unsigned char *)(v6 + 92);
    float v9 = a3[2];
    float v8 = a3[3];
    float v10 = (float)(v8 * v8) + -0.5;
    float v11 = *a3;
    float v12 = a3[1];
    float v13 = -v9;
    float v14 = -*a3;
    float v15 = -v12;
    uint64_t v16 = *(void *)(v6 + 40);
    uint64_t v17 = *(void *)(v6 + 48);
    uint64_t v18 = *(unsigned int *)(a1 + 24);
    do
    {
      int v19 = *v4++;
      uint64_t v20 = (3 * v19);
      if ((v7 & 2) != 0)
      {
        float v25 = (unsigned __int16 *)(v17 + 2 * v20);
        unsigned int v22 = *v25;
        unsigned int v23 = v25[1];
        unsigned int v24 = v25[2];
      }
      else
      {
        uint64_t v21 = (unsigned int *)(v17 + 4 * v20);
        unsigned int v22 = *v21;
        unsigned int v23 = v21[1];
        unsigned int v24 = v21[2];
      }
      float v26 = (float *)(v16 + 12 * v24);
      float v27 = (float *)(v16 + 12 * v23);
      float v28 = (float *)(v16 + 12 * v22);
      float v30 = v28[1];
      float v29 = v28[2];
      float v32 = v27[1];
      float v31 = v27[2];
      float v33 = *v27;
      float v35 = v26[1];
      float v34 = v26[2];
      float v36 = *v26;
      float v37 = (float)((float)(*v28 * *v5) + (float)(v30 * v5[3])) + (float)(v29 * v5[6]);
      float v38 = (float)((float)(*v28 * v5[1]) + (float)(v30 * v5[4])) + (float)(v29 * v5[7]);
      float v39 = (float)((float)(*v28 * v5[2]) + (float)(v30 * v5[5])) + (float)(v29 * v5[8]);
      float v40 = v37 + v37;
      float v41 = v38 + v38;
      float v42 = v39 + v39;
      float v43 = (float)((float)(v12 * (float)(v38 + v38)) + (float)(v11 * v40)) + (float)(v9 * v42);
      float v44 = a3[4]
          + (float)((float)((float)(v8 * (float)((float)(v41 * v13) + (float)(v12 * v42))) + (float)(v40 * v10))
                  + (float)(v11 * v43));
      float v45 = a3[5]
          + (float)((float)((float)(v8 * (float)((float)(v42 * v14) + (float)(v9 * v40))) + (float)(v41 * v10))
                  + (float)(v12 * v43));
      float v46 = a3[6]
          + (float)((float)((float)(v8 * (float)((float)(v40 * v15) + (float)(v11 * v41))) + (float)(v42 * v10))
                  + (float)(v9 * v43));
      float v47 = *(float *)(a1 + 84) + v44;
      float v48 = *(float *)(a1 + 88) + v45;
      *(float *)(a1 + 84) = v47;
      *(float *)(a1 + 88) = v48;
      float v49 = v46 + *(float *)(a1 + 92);
      *(float *)(a1 + 92) = v49;
      if (*(float *)(a1 + 60) >= v44) {
        float v50 = v44;
      }
      else {
        float v50 = *(float *)(a1 + 60);
      }
      if (*(float *)(a1 + 64) >= v45) {
        float v51 = v45;
      }
      else {
        float v51 = *(float *)(a1 + 64);
      }
      float v52 = *(float *)(a1 + 72);
      if (*(float *)(a1 + 68) >= v46) {
        float v53 = v46;
      }
      else {
        float v53 = *(float *)(a1 + 68);
      }
      *(float *)(a1 + 60) = v50;
      *(float *)(a1 + 64) = v51;
      if (v52 <= v44) {
        float v54 = v44;
      }
      else {
        float v54 = v52;
      }
      if (*(float *)(a1 + 76) > v45) {
        float v45 = *(float *)(a1 + 76);
      }
      if (*(float *)(a1 + 80) <= v46) {
        float v55 = v46;
      }
      else {
        float v55 = *(float *)(a1 + 80);
      }
      *(float *)(a1 + 68) = v53;
      *(float *)(a1 + 72) = v54;
      *(float *)(a1 + 76) = v45;
      *(float *)(a1 + 80) = v55;
      float v56 = (float)(v33 * *v5) + (float)(v32 * v5[3]);
      float v57 = (float)(v33 * v5[1]) + (float)(v32 * v5[4]);
      float v58 = (float)(v33 * v5[2]) + (float)(v32 * v5[5]);
      float v59 = v31 * v5[7];
      float v60 = v56 + (float)(v31 * v5[6]);
      float v61 = v58 + (float)(v31 * v5[8]);
      float v62 = v60 + v60;
      float v63 = (float)(v57 + v59) + (float)(v57 + v59);
      float v64 = v61 + v61;
      float v65 = (float)((float)(v12 * v63) + (float)(v11 * v62)) + (float)(v9 * v64);
      float v66 = (float)((float)(v8 * (float)((float)(v63 * v13) + (float)(v12 * v64))) + (float)(v62 * v10))
          + (float)(v11 * v65);
      float v67 = (float)((float)(v8 * (float)((float)(v64 * v14) + (float)(v9 * v62))) + (float)(v63 * v10))
          + (float)(v12 * v65);
      float v68 = (float)((float)(v8 * (float)((float)(v62 * v15) + (float)(v11 * v63))) + (float)(v64 * v10))
          + (float)(v9 * v65);
      float v69 = a3[4] + v66;
      float v70 = a3[5] + v67;
      float v71 = a3[6] + v68;
      float v72 = v47 + v69;
      float v73 = v48 + v70;
      *(float *)(a1 + 84) = v47 + v69;
      *(float *)(a1 + 88) = v48 + v70;
      float v74 = v49 + v71;
      *(float *)(a1 + 92) = v49 + v71;
      if (v50 >= v69) {
        float v75 = v69;
      }
      else {
        float v75 = v50;
      }
      if (v51 >= v70) {
        float v76 = v70;
      }
      else {
        float v76 = v51;
      }
      if (v53 >= v71) {
        float v77 = v71;
      }
      else {
        float v77 = v53;
      }
      *(float *)(a1 + 60) = v75;
      *(float *)(a1 + 64) = v76;
      if (v54 <= v69) {
        float v78 = v69;
      }
      else {
        float v78 = v54;
      }
      if (v45 <= v70) {
        float v79 = v70;
      }
      else {
        float v79 = v45;
      }
      if (v55 > v71) {
        float v71 = v55;
      }
      *(float *)(a1 + 68) = v77;
      *(float *)(a1 + 72) = v78;
      *(float *)(a1 + 76) = v79;
      *(float *)(a1 + 80) = v71;
      float v80 = (float)(v36 * *v5) + (float)(v35 * v5[3]);
      float v81 = (float)(v36 * v5[1]) + (float)(v35 * v5[4]);
      float v82 = (float)(v36 * v5[2]) + (float)(v35 * v5[5]);
      float v83 = v34 * v5[7];
      float v84 = v80 + (float)(v34 * v5[6]);
      float v85 = v82 + (float)(v34 * v5[8]);
      float v86 = v84 + v84;
      float v87 = (float)(v81 + v83) + (float)(v81 + v83);
      float v88 = v85 + v85;
      float v89 = (float)((float)(v12 * v87) + (float)(v11 * v86)) + (float)(v9 * v88);
      float v90 = (float)((float)(v8 * (float)((float)(v87 * v13) + (float)(v12 * v88))) + (float)(v86 * v10))
          + (float)(v11 * v89);
      float v91 = (float)((float)(v8 * (float)((float)(v88 * v14) + (float)(v9 * v86))) + (float)(v87 * v10))
          + (float)(v12 * v89);
      float v92 = (float)((float)(v8 * (float)((float)(v86 * v15) + (float)(v11 * v87))) + (float)(v88 * v10))
          + (float)(v9 * v89);
      float v93 = a3[4] + v90;
      float v94 = a3[5] + v91;
      float v95 = a3[6] + v92;
      float v96 = v72 + v93;
      float v97 = v73 + v94;
      *(float *)(a1 + 84) = v72 + v93;
      *(float *)(a1 + 88) = v73 + v94;
      float v98 = v74 + v95;
      *(float *)(a1 + 92) = v74 + v95;
      if (v75 >= v93) {
        float v99 = v93;
      }
      else {
        float v99 = v75;
      }
      if (v76 >= v94) {
        float v100 = v94;
      }
      else {
        float v100 = v76;
      }
      if (v77 >= v95) {
        float v101 = v95;
      }
      else {
        float v101 = v77;
      }
      *(float *)(a1 + 60) = v99;
      *(float *)(a1 + 64) = v100;
      if (v78 <= v93) {
        float v102 = v93;
      }
      else {
        float v102 = v78;
      }
      if (v79 <= v94) {
        float v103 = v94;
      }
      else {
        float v103 = v79;
      }
      *(float *)(a1 + 68) = v101;
      *(float *)(a1 + 72) = v102;
      if (v71 <= v95) {
        float v71 = v95;
      }
      *(float *)(a1 + 76) = v103;
      *(float *)(a1 + 80) = v71;
      --v18;
    }
    while (v18);
  }
  else
  {
    float v96 = *(float *)(a1 + 84);
    float v97 = *(float *)(a1 + 88);
    float v98 = *(float *)(a1 + 92);
    float v99 = *(float *)(a1 + 60);
    float v100 = *(float *)(a1 + 64);
    float v101 = *(float *)(a1 + 68);
  }
  float v104 = 1.0 / (float)(3 * v3);
  *(float *)(a1 + 84) = v104 * v96;
  *(float *)(a1 + 88) = v104 * v97;
  *(float *)(a1 + 92) = v104 * v98;
  *(unsigned char *)(a1 + 96) = 1;
  *(float *)a2 = v99;
  *(float *)(a2 + 4) = v100;
  *(float *)(a2 + 8) = v101;
  *(void *)(a2 + 12) = *(void *)(a1 + 72);
  float result = *(float *)(a1 + 80);
  *(float *)(a2 + 20) = result;
  return result;
}

float physx::Gu::SweepEstimateAnyShapeMesh(float32x2_t *a1, uint64_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, double a7)
{
  uint64_t v12 = *a2;
  float v13 = (float *)(*a2 + 4);
  physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v38, v13, (float *)(*a2 + 16));
  float v14 = a3[3].f32[0] - a5[3].f32[0];
  float32x2_t v36 = vsub_f32(a3[2], a5[2]);
  float v37 = v14;
  float v15 = a4[3].f32[0] - a6[3].f32[0];
  float32x2_t v34 = vsub_f32(a4[2], a6[2]);
  float v35 = v15;
  float v16 = v14 - v15;
  float32x2_t v17 = vsub_f32(v36, v34);
  float32x2_t v32 = v17;
  float v33 = v16;
  float32x2_t v30 = v17;
  float v31 = v16;
  float v18 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v17.f32[1], v17, 1), v17.f32[0], v17.f32[0]) + (float)(v16 * v16));
  if (v18 > 0.0)
  {
    v30.f32[0] = v17.f32[0] * (float)(1.0 / v18);
    v30.f32[1] = v17.f32[1] * (float)(1.0 / v18);
    float v31 = v16 * (float)(1.0 / v18);
  }
  v28[0] = xmmword_23435FD50;
  v28[1] = xmmword_23435FD50;
  int v29 = 1065353216;
  *(float32x2_t *)v19.i8 = physx::Gu::computeSweptBox((uint64_t)v27, (float *)&a1[8] + 1, a1 + 10, (float *)v28, &v30, v18);
  physx::Gu::computeVertexSpaceOBB(v24, (uint64_t)v27, (float *)a4, v13, v19, v20, v21);
  float32x2_t v25 = vadd_f32(v25, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0));
  float v26 = v26 + *(float *)&a7;
  physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(*(void *)(v12 + 48) + 8) - 3]();
  return 3.4028e38;
}

float physx::Gu::UnimplementedSweep()
{
  return 3.4028e38;
}

float32_t physx::Gu::SweepGeomGeom<physx::Gu::CapsuleV,physx::Gu::CapsuleV>(uint64_t *a1, uint64_t *a2, int8x8_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v325 = *MEMORY[0x263EF8340];
  uint64_t v14 = *a1;
  int v15 = 4;
  int v306 = 4;
  v302[1] = 0;
  v302[0] = 0;
  LODWORD(a12) = *(_DWORD *)(v14 + 4);
  float32x4_t v18 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)(v14 + 8));
  v18.i32[3] = 0;
  uint64_t v16 = *a2;
  float32x4_t v17 = vnegq_f32(v18);
  v17.i32[3] = 0;
  float32x4_t v308 = v18;
  float32x4_t v309 = v17;
  int32x2_t v310 = vdup_lane_s32(*(int32x2_t *)&a12, 0);
  int v303 = LODWORD(a12);
  int v304 = LODWORD(a12);
  int v305 = LODWORD(a12);
  char v307 = 1;
  int v297 = 4;
  v293[1] = 0;
  v293[0] = 0;
  v18.i32[0] = *(_DWORD *)(v16 + 4);
  float32x4_t v19 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)(v16 + 8));
  v19.i32[3] = 0;
  float32x4_t v20 = vnegq_f32(v19);
  v20.i32[3] = 0;
  float32x4_t v275 = v20;
  float32x4_t v278 = v19;
  float32x4_t v299 = v19;
  float32x4_t v300 = v20;
  int32x2_t v301 = vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
  float v294 = v18.f32[0];
  __int32 v295 = v18.i32[0];
  __int32 v296 = v18.i32[0];
  char v298 = 1;
  *(float *)&a9 = *(float *)&a12 + *(float *)&a9;
  v21.i64[0] = *(void *)(a5 + 16);
  v21.i64[1] = *(unsigned int *)(a5 + 24);
  float32x4_t v22 = *a4;
  v23.i64[0] = *(void *)(a6 + 16);
  v23.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v24 = vnegq_f32(*a4);
  float32x4_t v25 = vsubq_f32(v21, v23);
  float32x4_t v26 = v24;
  v26.i32[3] = 0;
  float32x4_t v266 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v27) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v266.f32, *(float32x2_t *)v266.f32).u32[0];
  float32x4_t v28 = vmulq_n_f32(v25, v27);
  v28.i32[3] = 0;
  float32x2_t v29 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  float32x2_t v30 = (float32x2_t)vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)v29, 4uLL);
  int8x8_t v31 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), v30, *(float32x2_t *)v25.f32);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32(v29, *(float32x2_t *)v25.f32), *(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v32.i64[1] = v31.u32[0];
  float32x4_t v33 = vmlaq_laneq_f32(v28, v32, *a4, 3);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  float32x4_t v34 = vmulq_f32(v26, v25);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  float32x4_t v35 = vmlaq_n_f32(v33, v26, vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).f32[0]);
  float32x4_t v36 = vaddq_f32(v35, v35);
  v36.i32[3] = 0;
  float32x4_t v37 = *(float32x4_t *)a3->i8;
  v37.i32[3] = 0;
  float32x2x2_t v38 = (float32x2x2_t)vmulq_f32(v37, v26);
  v38.val[0] = (float32x2_t)vpaddq_f32((float32x4_t)v38, (float32x4_t)v38).u64[0];
  float32x4_t v39 = vmulq_laneq_f32(v37, *a4, 3);
  v37.i64[0] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  int8x8_t v40 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a3, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v24.f32), v30, (float32x2_t)*a3);
  *(int8x8_t *)v19.f32 = vext_s8(v40, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a3, v29), *(float32x2_t *)v24.f32, *(float32x2_t *)v37.f32), 4uLL);
  *(int8x8_t *)&v19.u32[2] = v40;
  float32x4_t v41 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, *(float32x4_t *)a3->i8, 3), v39), v19);
  *(int32x2_t *)v24.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
  *(int32x2_t *)v26.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  float32x2_t v42 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL)), vpadd_f32(v38.val[0], v38.val[0]));
  float32x4_t v43 = vaddq_f32(v41, v41);
  *(int32x2_t *)v39.f32 = vdup_laneq_s32((int32x4_t)v43, 2);
  *(int32x2_t *)v41.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v43.f32), 0);
  float32x2_t v44 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v43.f32, 1);
  float32x2_t v45 = vmul_laneq_f32(*(float32x2_t *)v26.f32, v43, 2);
  *(float32x2_t *)v24.f32 = vmul_n_f32(*(float32x2_t *)v24.f32, v43.f32[0]);
  float32x2_t v46 = vmul_n_f32(*(float32x2_t *)v26.f32, v43.f32[0]);
  float32x2_t v47 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0), v42, 1);
  *(float32x2_t *)v26.f32 = vmul_lane_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v43.f32, 1);
  *(float32x2_t *)v43.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 1), v42, 1);
  float32x2_t v48 = vmul_lane_f32(*(float32x2_t *)v39.f32, v42, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v41.f32 = vsub_f32(_D8, *(float32x2_t *)v41.f32);
  v38.val[0] = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v44), v45), (int8x8_t)vadd_f32(*(float32x2_t *)v24.f32, v48), 4uLL);
  v38.val[1] = (float32x2_t)vsub_f32(v46, *(float32x2_t *)v43.f32).u32[0];
  *(int8x8_t *)v24.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v24.f32, v48), (int8x8_t)vsub_f32(*(float32x2_t *)v41.f32, v45), 4uLL);
  v24.i64[1] = vadd_f32(*(float32x2_t *)v26.f32, v47).u32[0];
  float32x2x2_t v285 = v38;
  int32x4_t v286 = (int32x4_t)v24;
  *(int8x8_t *)v24.f32 = vext_s8((int8x8_t)vadd_f32(v46, *(float32x2_t *)v43.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v26.f32, v47), 4uLL);
  v24.i64[1] = vsub_f32(*(float32x2_t *)v41.f32, v44).u32[0];
  int32x4_t v287 = (int32x4_t)v24;
  float32x4_t v288 = v36;
  *(int8x8_t *)v41.f32 = a3[2];
  v41.i64[1] = a3[3].u32[0];
  v24.i64[0] = a4[1].i64[0];
  v24.i64[1] = a4[1].u32[2];
  float32x4_t v267 = v23;
  float32x4_t v262 = vsubq_f32(v41, v21);
  float32x4_t v54 = vsubq_f32(vsubq_f32(v24, v23), v262);
  float32x4_t v55 = v22;
  v55.i32[3] = 0;
  float v264 = v27;
  float32x2_t v265 = *(float32x2_t *)v22.f32;
  float32x4_t v56 = vmulq_n_f32(v54, v27);
  v56.i32[3] = 0;
  float32x2_t v261 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u64[0];
  float32x2_t v260 = (float32x2_t)vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)v261, 4uLL);
  *(float32x2_t *)v26.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL)), v260, *(float32x2_t *)v54.f32);
  *(int8x8_t *)v24.f32 = vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)vmls_f32(vmul_f32(v261, *(float32x2_t *)v54.f32), *(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)), 4uLL);
  v24.i64[1] = v26.u32[0];
  float32x4_t v57 = vmlsq_laneq_f32(v56, v24, v22, 3);
  v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
  float32x4_t v58 = vmulq_f32(v55, v54);
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  float32x4_t v263 = v55;
  float32x4_t v59 = vmlaq_n_f32(v57, v55, vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).f32[0]);
  float32x4_t v60 = vaddq_f32(v59, v59);
  v281.i64[1] = (uint64_t)v302;
  v281.i64[0] = (uint64_t)&unk_26E728CE0;
  v282 = (float32x4_t *)&v285;
  float v61 = (float *)v283;
  v283[0] = v38;
  v284[0] = v287;
  float v62 = (float *)v284;
  float32x2x2_t v63 = (float32x2x2_t)vzip1q_s32((int32x4_t)v38, v287);
  v38.val[0] = (float32x2_t)vzip2q_s32((int32x4_t)v38, v287).u64[0];
  int32x4_t v64 = vzip1q_s32(v286, (int32x4_t)0);
  v39.i64[0] = vzip2q_s32(v286, (int32x4_t)0).u64[0];
  vst2_f32(v61, v63);
  v284[1] = v36;
  vst2_f32(v62, v38);
  v283[1] = vzip2q_s32((int32x4_t)v63, v64);
  unsigned int v290 = 1;
  float32x4_t v65 = vmulq_f32(v36, v36);
  v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
  float32x4_t v66 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v36, (int8x16_t)xmmword_23435FD50);
  float32x4_t v67 = vmulq_f32(v66, v66);
  v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
  float32x2_t v68 = vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32);
  float32x2_t v69 = vrsqrte_f32(v68);
  do
  {
    float32x2_t v69 = vmul_f32(v69, vrsqrts_f32(vmul_f32(v69, v69), v68));
    --v15;
  }
  while (v15);
  v60.i32[3] = 0;
  float32x4_t v269 = v60;
  int8x16_t v70 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v60);
  float32x2_t v71 = vmul_f32(v68, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v68), 0), (int8x8_t)_D8, (int8x8_t)v69));
  float32x2_t v72 = vrecpe_f32(v71);
  int v73 = 4;
  do
  {
    float32x2_t v72 = vmul_f32(v72, vrecps_f32(v71, v72));
    --v73;
  }
  while (v73);
  *(float *)&a9 = *(float *)&a9 + v18.f32[0];
  float32x2_t v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v70.i64[1] = vextq_s8(v70, v70, 8uLL).u32[0];
  float32x4_t v75 = vmulq_n_f32(v66, v72.f32[0]);
  v75.i32[3] = 0;
  float32x4_t v272 = (float32x4_t)v70;
  float32x4_t v273 = v75;
  float32x4_t v76 = vnegq_f32(v75);
  v76.i32[3] = 0;
  float32x4_t v311 = v76;
  *(double *)v77.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v281, (float32x2_t *)&v311);
  float32x4_t v78 = v77;
  float32x4_t v79 = vmulq_f32(v278, v273);
  v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
  float32x4_t v80 = vmulq_f32(v275, v273);
  v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
  float32x4_t v81 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32), vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32)), 0), (int8x16_t)v278, (int8x16_t)v275);
  float32x4_t v82 = vsubq_f32(v78, v81);
  float32x4_t v311 = v82;
  float32x4_t v312 = 0u;
  float32x4_t v313 = 0u;
  int32x4_t v314 = 0u;
  float32x4_t v316 = v78;
  float32x4_t v317 = 0u;
  float32x4_t v83 = vnegq_f32(v82);
  v83.i32[3] = 0;
  float32x4_t v318 = 0u;
  long long v319 = 0u;
  float32x2_t v84 = vadd_f32(v74, 0);
  float32x2_t v85 = vmul_f32(v84, v84);
  float32x4_t v86 = vmulq_f32(v83, v83);
  float32x4_t v87 = vpaddq_f32(v86, v86);
  float32x2_t v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
  *(int32x2_t *)v87.f32 = vcgtz_f32(v88);
  int32x4_t v89 = vdupq_lane_s32(*(int32x2_t *)v87.f32, 0);
  float32x4_t v321 = v81;
  float32x4_t v322 = 0u;
  float32x4_t v323 = 0u;
  long long v324 = 0u;
  v87.i32[0] = -1;
  int32x4_t v259 = (int32x4_t)v87;
  int8x16_t v90 = (int8x16_t)v82;
  v91.i64[0] = -1;
  v91.i64[1] = -1;
  int8x16_t v268 = (int8x16_t)v83;
  float32x2_t v270 = 0;
  while (1)
  {
    int8x16_t v92 = (int8x16_t)v82;
    v93.i64[0] = -1;
    v93.i64[1] = -1;
    *(int16x4_t *)v93.i8 = vmovn_s32(vceqq_s32(v89, v93));
    unsigned __int32 v94 = vuzp1_s8(*(int8x8_t *)v93.i8, *(int8x8_t *)v93.i8).u32[0];
    if (v94 != -1) {
      break;
    }
    float32x4_t v95 = vmulq_f32(v83, v83);
    v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
    float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
    float32x2_t v97 = vrsqrte_f32(v96);
    int v98 = 4;
    do
    {
      float32x2_t v97 = vmul_f32(v97, vrsqrts_f32(vmul_f32(v97, v97), v96));
      --v98;
    }
    while (v98);
    int8x16_t v274 = v92;
    float32x2_t v99 = vmul_f32(v96, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v96), 0), (int8x8_t)_D8, (int8x8_t)v97));
    float32x2_t v100 = vrecpe_f32(v99);
    int v101 = 4;
    do
    {
      float32x2_t v100 = vmul_f32(v100, vrecps_f32(v99, v100));
      --v101;
    }
    while (v101);
    float32x4_t v271 = v83;
    float32x4_t v102 = vmulq_n_f32(v83, v100.f32[0]);
    v102.i32[3] = 0;
    float32x4_t v276 = v102;
    float32x4_t v289 = v102;
    float32x4_t v103 = vnegq_f32(v102);
    v103.i32[3] = 0;
    float32x4_t v279 = v103;
    *(double *)v104.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v281, (float32x2_t *)&v289);
    float32x4_t v105 = v104;
    float32x4_t v106 = vmulq_f32(v279, v299);
    v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
    float32x4_t v107 = vmulq_f32(v279, v300);
    v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
    float32x4_t v108 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32)), 0), (int8x16_t)v299, (int8x16_t)v300);
    float32x4_t v109 = vaddq_f32(v272, v108);
    float32x4_t v82 = vsubq_f32(v104, v109);
    float32x4_t v110 = vnegq_f32(v82);
    v110.i32[3] = 0;
    float32x4_t v111 = vmulq_f32(v276, v110);
    v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
    float32x2_t v112 = vsub_f32(vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32), v84);
    if (v112.f32[0] > 0.0)
    {
      float32x4_t v113 = vmulq_f32(v269, v276);
      v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
      float32x2_t v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
      if (v114.f32[0] >= 0.0) {
        goto LABEL_70;
      }
      float32x2_t v115 = vrecpe_f32(v114);
      int v116 = 4;
      do
      {
        float32x2_t v115 = vmul_f32(v115, vrecps_f32(v114, v115));
        --v116;
      }
      while (v116);
      float32x2_t v117 = vsub_f32(v270, vmul_f32(v112, v115));
      if (vcgt_f32(v117, v270).u8[0])
      {
        if (v117.f32[0] > 1.0)
        {
LABEL_70:
          float32x2_t v214 = 0;
          float32x4_t v212 = 0uLL;
          float32x4_t v216 = 0uLL;
          goto LABEL_76;
        }
        float32x4_t v118 = vmlaq_n_f32((float32x4_t)0, v269, v117.f32[0]);
        v118.i64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0];
        float32x4_t v119 = vsubq_f32(v118, v272);
        float32x4_t v321 = vaddq_f32(v119, v321);
        float32x4_t v322 = vaddq_f32(v119, v322);
        float32x4_t v323 = vaddq_f32(v119, v323);
        float32x4_t v311 = vsubq_f32(v316, v321);
        float32x4_t v312 = vsubq_f32(v317, v322);
        float32x4_t v313 = vsubq_f32(v318, v323);
        float32x4_t v109 = vaddq_f32(v108, v118);
        float32x4_t v82 = vsubq_f32(v105, v109);
        float32x2_t v88 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v268 = (int8x16_t)v271;
        float32x4_t v272 = v118;
      }
      float32x2_t v270 = v117;
    }
    uint64_t v120 = v290;
    *(&v316 + v290) = v105;
    *(&v321 + v120) = v109;
    unsigned int v290 = v120 + 1;
    *(&v311 + v120) = v82;
    if (v120 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v311, &v316, &v321, (int *)&v290);
LABEL_27:
      int8x16_t v90 = v274;
      goto LABEL_61;
    }
    if (v120 != 2)
    {
      int8x16_t v90 = v274;
      if (v120 != 1) {
        goto LABEL_61;
      }
      float32x4_t v82 = v311;
      float32x4_t v121 = vsubq_f32(v312, v311);
      float32x4_t v122 = vmulq_f32(v121, v121);
      v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
      float32x2_t v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v123), 0), *(int8x8_t *)v311.f32).u32[0] != -1)
      {
        float32x4_t v124 = vnegq_f32(v311);
        v124.i32[3] = 0;
        float32x4_t v125 = vmulq_f32(v124, v121);
        v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
        float32x2_t v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
        float32x2_t v127 = vrecpe_f32(v123);
        int v128 = 4;
        do
        {
          float32x2_t v127 = vmul_f32(v127, vrecps_f32(v123, v127));
          --v128;
        }
        while (v128);
        float32x4_t v82 = vmlaq_n_f32(v311, v121, vmax_f32(vmin_f32(vmul_f32(v126, v127), _D8), 0).f32[0]);
LABEL_42:
        v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      unsigned int v290 = 1;
      goto LABEL_61;
    }
    float32x4_t v82 = v311;
    float32x4_t v129 = vsubq_f32(v312, v311);
    float32x4_t v130 = vsubq_f32(v313, v311);
    int8x8_t v132 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v129.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 4uLL), *(float32x2_t *)v130.f32);
    *(int8x8_t *)v131.f32 = vext_s8(v132, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), *(float32x2_t *)v130.f32), *(float32x2_t *)v129.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL)), 4uLL);
    v132.i32[1] = 0;
    unsigned int v290 = 3;
    float32x2_t v133 = vpadd_f32(vmul_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32), vmul_f32((float32x2_t)v132.u32[0], (float32x2_t)v132.u32[0]));
    float32x2_t v134 = vpadd_f32(v133, v133);
    if (v134.f32[0] <= 0.00000011921)
    {
      unsigned int v290 = 2;
      float32x4_t v171 = vmulq_f32(v129, v129);
      v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
      float32x2_t v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
      int8x16_t v90 = v274;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v172), 0), *(int8x8_t *)v311.f32).u32[0] != -1)
      {
        float32x4_t v173 = vnegq_f32(v311);
        v173.i32[3] = 0;
        float32x4_t v174 = vmulq_f32(v173, v129);
        v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
        float32x2_t v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
        float32x2_t v176 = vrecpe_f32(v172);
        int v177 = 4;
        do
        {
          float32x2_t v176 = vmul_f32(v176, vrecps_f32(v172, v176));
          --v177;
        }
        while (v177);
        float32x4_t v82 = vmlaq_n_f32(v311, v129, vmax_f32(vmin_f32(vmul_f32(v175, v176), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v134.f32[0] == 0.0)
    {
      float32x4_t v82 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v131.u32[2] = v132;
    float32x2_t v135 = (float32x2_t)vextq_s8((int8x16_t)v312, (int8x16_t)v312, 8uLL).u64[0];
    float32x2_t v136 = (float32x2_t)vextq_s8((int8x16_t)v313, (int8x16_t)v313, 8uLL).u64[0];
    float32x2_t v137 = (float32x2_t)vextq_s8((int8x16_t)v313, (int8x16_t)v313, 4uLL).u64[0];
    float32x2_t v138 = (float32x2_t)vextq_s8((int8x16_t)v312, (int8x16_t)v312, 4uLL).u64[0];
    int8x8_t v139 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v312.f32, v137), v138, *(float32x2_t *)v313.f32);
    *(int8x8_t *)v140.f32 = vext_s8(v139, (int8x8_t)vmls_f32(vmul_f32(v135, *(float32x2_t *)v313.f32), *(float32x2_t *)v312.f32, v136), 4uLL);
    v140.i64[1] = v139.u32[0];
    float32x2_t v141 = (float32x2_t)vextq_s8((int8x16_t)v311, (int8x16_t)v311, 8uLL).u64[0];
    float32x2_t v142 = (float32x2_t)vextq_s8((int8x16_t)v311, (int8x16_t)v311, 4uLL).u64[0];
    int8x8_t v143 = (int8x8_t)vmls_f32(vmul_f32(v142, *(float32x2_t *)v313.f32), v137, *(float32x2_t *)v311.f32);
    *(int8x8_t *)v144.f32 = vext_s8(v143, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v311.f32, v136), *(float32x2_t *)v313.f32, v141), 4uLL);
    v144.i64[1] = v143.u32[0];
    int8x8_t v145 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v311.f32, v138), v142, *(float32x2_t *)v312.f32);
    *(int8x8_t *)v146.f32 = vext_s8(v145, (int8x8_t)vmls_f32(vmul_f32(v141, *(float32x2_t *)v312.f32), *(float32x2_t *)v311.f32, v135), 4uLL);
    v146.i64[1] = v145.u32[0];
    float32x4_t v147 = vmulq_f32(v140, v131);
    v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
    float32x2_t v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
    float32x4_t v149 = vmulq_f32(v144, v131);
    v149.i64[0] = vpaddq_f32(v149, v149).u64[0];
    float32x2_t v150 = vpadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v149.f32);
    float32x4_t v151 = vmulq_f32(v146, v131);
    v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
    float32x2_t v152 = vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v150), (int8x8_t)vcgez_f32(v148)), (int8x8_t)vcgez_f32(v152)), 0), *(int8x8_t *)v311.f32).u32[0] != -1)
    {
      float32x4_t v153 = vnegq_f32(v311);
      v153.i32[3] = 0;
      float32x4_t v154 = vnegq_f32(v312);
      v154.i32[3] = 0;
      float32x4_t v155 = vmulq_f32(v153, v129);
      v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
      float32x2_t v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
      float32x4_t v157 = vmulq_f32(v129, v154);
      v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
      float32x2_t v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v156), (int8x8_t)vclez_f32(v158)), (int8x8_t)vclez_f32(v152)), 0), *(int8x8_t *)v311.f32).u32[0] == -1)
      {
        float32x2_t v181 = vsub_f32(v156, v158);
        float32x2_t v182 = vrecpe_f32(v181);
        int v183 = 4;
        do
        {
          float32x2_t v182 = vmul_f32(v182, vrecps_f32(v181, v182));
          --v183;
        }
        while (v183);
        uint64_t v170 = 0;
        float32x4_t v82 = vmlaq_n_f32(v311, v129, vmul_f32(v156, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v181), (float32x2_t)0x3400000034000000), (int8x8_t)v182, 0)).f32[0]);
        v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
        unsigned int v184 = 2;
        uint64_t v169 = 1;
      }
      else
      {
        float32x4_t v159 = vnegq_f32(v313);
        v159.i32[3] = 0;
        float32x4_t v160 = vmulq_f32(v154, v130);
        v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
        float32x2_t v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
        float32x4_t v162 = vmulq_f32(v129, v159);
        v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
        float32x2_t v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
        float32x4_t v164 = vmulq_f32(v130, v159);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        float32x2_t v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v161, v158), (int8x8_t)vcge_f32(v163, v165)), (int8x8_t)vclez_f32(v148)), 0), *(int8x8_t *)v311.f32).u32[0] != -1)
        {
          float32x4_t v166 = vmulq_f32(v153, v130);
          v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
          float32x2_t v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v167), (int8x8_t)vclez_f32(v165)), (int8x8_t)vclez_f32(v150)), 0), *(int8x8_t *)v311.f32).u32[0] == -1)
          {
            float32x2_t v190 = vsub_f32(v167, v165);
            float32x2_t v191 = vrecpe_f32(v190);
            int v192 = 4;
            int8x16_t v90 = v274;
            do
            {
              float32x2_t v191 = vmul_f32(v191, vrecps_f32(v190, v191));
              --v192;
            }
            while (v192);
            uint64_t v170 = 0;
            float32x4_t v82 = vmlaq_n_f32(v311, v130, vmul_f32(v167, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v190), (float32x2_t)0x3400000034000000), (int8x8_t)v191, 0)).f32[0]);
            v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
            uint64_t v169 = 2;
          }
          else
          {
            int8x16_t v90 = v274;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v167), (int8x8_t)vclez_f32(v156)), 0), *(int8x8_t *)v311.f32).u32[0] == -1)
            {
              uint64_t v170 = 0;
              uint64_t v169 = 1;
            }
            else
            {
              *(int16x4_t *)v82.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v158, v161), (int8x8_t)vcgez_f32(v158)), 0);
              *(int8x8_t *)v82.f32 = vuzp1_s8(*(int8x8_t *)v82.f32, *(int8x8_t *)v82.f32);
              __int32 v168 = v82.i32[0];
              float32x4_t v82 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v82, v259), 0), (int8x16_t)v312, (int8x16_t)v313);
              uint64_t v169 = 1;
              if (v168 == -1) {
                uint64_t v170 = 1;
              }
              else {
                uint64_t v170 = 2;
              }
            }
          }
          unsigned int v184 = v169;
          goto LABEL_60;
        }
        float32x2_t v185 = vsub_f32(v161, v158);
        float32x2_t v186 = vadd_f32(v185, vsub_f32(v163, v165));
        float32x2_t v187 = vrecpe_f32(v186);
        int v188 = 4;
        do
        {
          float32x2_t v187 = vmul_f32(v187, vrecps_f32(v186, v187));
          --v188;
        }
        while (v188);
        int8x16_t v189 = (int8x16_t)vmlaq_n_f32(v312, vsubq_f32(v313, v312), vmul_f32(v185, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v186), (float32x2_t)0x3400000034000000), (int8x8_t)v187, 0)).f32[0]);
        v189.i64[1] = vextq_s8(v189, v189, 8uLL).u32[0];
        unsigned int v184 = 2;
        uint64_t v169 = 2;
        uint64_t v170 = 1;
        float32x4_t v82 = (float32x4_t)v189;
      }
      int8x16_t v90 = v274;
LABEL_60:
      float32x4_t v193 = *(&v311 + v169);
      float32x4_t v194 = *(&v316 + v170);
      float32x4_t v195 = *(&v316 + v169);
      float32x4_t v196 = *(&v321 + v170);
      float32x4_t v197 = *(&v321 + v169);
      float32x4_t v311 = *(&v311 + v170);
      float32x4_t v312 = v193;
      float32x4_t v316 = v194;
      float32x4_t v317 = v195;
      float32x4_t v321 = v196;
      float32x4_t v322 = v197;
      unsigned int v290 = v184;
      goto LABEL_61;
    }
    float32x2_t v178 = vrecpe_f32(v134);
    int v179 = 4;
    int8x16_t v90 = v274;
    do
    {
      float32x2_t v178 = vmul_f32(v178, vrecps_f32(v134, v178));
      --v179;
    }
    while (v179);
    float32x4_t v180 = vmulq_f32(v311, v131);
    v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
    float32x4_t v82 = vmulq_n_f32(v131, vmul_f32(v178, vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32)).f32[0]);
    v82.i32[3] = 0;
LABEL_61:
    float32x4_t v83 = vnegq_f32(v82);
    v83.i32[3] = 0;
    float32x4_t v198 = vmulq_f32(v82, v82);
    v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
    float32x2_t v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
    int8x8_t v200 = (int8x8_t)vcgt_f32(v88, v199);
    int8x16_t v91 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v200, (int8x8_t)0x100000001), 0);
    int32x4_t v89 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v199, v85), v200), 0);
    float32x2_t v88 = v199;
  }
  uint64_t v201 = v281.i64[1];
  float32x4_t v202 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v88, 0), 0), v91), 0x1FuLL)), (int8x16_t)v83, v268);
  float32x4_t v203 = vmulq_f32(v202, v202);
  v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
  float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
  float32x2_t v205 = vrsqrte_f32(v204);
  int v206 = 4;
  do
  {
    float32x2_t v205 = vmul_f32(v205, vrsqrts_f32(vmul_f32(v205, v205), v204));
    --v206;
  }
  while (v206);
  float32x2_t v207 = vmul_f32(v204, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v204), 0), (int8x8_t)_D8, (int8x8_t)v205));
  float32x2_t v208 = vrecpe_f32(v207);
  int v209 = 4;
  do
  {
    float32x2_t v208 = vmul_f32(v208, vrecps_f32(v207, v208));
    --v209;
  }
  while (v209);
  int8x16_t v210 = (int8x16_t)vdupq_n_s32(-*(char *)(v281.i64[1] + 32));
  int8x16_t v211 = (int8x16_t)vmulq_n_f32(v202, v208.f32[0]);
  v211.i32[3] = 0;
  float32x4_t v212 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v207), 0), v211));
  v212.i32[3] = 0;
  float32x4_t v213 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v91, 0x1FuLL)), v92, v90);
  float32x4_t v289 = v213;
  float32x2_t v214 = v270;
  if (v290 == 3)
  {
    float32x2_t v291 = 0;
    float32x2_t v292 = 0;
    int8x16_t v277 = v210;
    float32x4_t v280 = v212;
    physx::Gu::barycentricCoordinates(&v289, &v311, &v312, &v313, &v292, &v291);
    int8x16_t v210 = v277;
    float32x4_t v212 = v280;
    float32x2_t v214 = v270;
    v91.i32[1] = v316.i32[1];
    float32x4_t v217 = vmulq_n_f32(vsubq_f32(v317, v316), v292.f32[0]);
    v217.i32[3] = 0;
    float32x4_t v218 = vmulq_n_f32(vsubq_f32(v318, v316), v291.f32[0]);
    v218.i32[3] = 0;
    float32x4_t v215 = vaddq_f32(v316, vaddq_f32(v217, v218));
  }
  else if (v290 == 2)
  {
    float32x4_t v219 = vsubq_f32(v311, v213);
    float32x4_t v220 = vsubq_f32(vsubq_f32(v312, v213), v219);
    float32x4_t v221 = vmulq_f32(v220, v220);
    v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
    float32x2_t v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
    float32x2_t v223 = vrecpe_f32(v222);
    int v224 = 4;
    do
    {
      float32x2_t v223 = vmul_f32(v223, vrecps_f32(v222, v223));
      --v224;
    }
    while (v224);
    float32x4_t v225 = vnegq_f32(v219);
    v225.i32[3] = 0;
    float32x4_t v226 = vmulq_f32(v225, v220);
    v226.i64[0] = vpaddq_f32(v226, v226).u64[0];
    float32x4_t v215 = vmlaq_n_f32(v316, vsubq_f32(v317, v316), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v222), (int8x8_t)v223, 0), vpadd_f32(*(float32x2_t *)v226.f32, *(float32x2_t *)v226.f32)).f32[0]);
    v91.i32[1] = 0;
    v215.i64[1] = vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v215 = 0uLL;
    if (v290 == 1) {
      float32x4_t v215 = v316;
    }
  }
  v91.i32[0] = *(_DWORD *)(v201 + 16);
  int8x16_t v227 = (int8x16_t)vmlsq_lane_f32(v215, v212, *(float32x2_t *)v91.i8, 0);
  v227.i64[1] = vextq_s8(v227, v227, 8uLL).u32[0];
  float32x4_t v216 = (float32x4_t)vbslq_s8(v210, v227, (int8x16_t)v215);
LABEL_76:
  if (v94 == -1)
  {
    v214.i32[0] = 2139095039;
  }
  else
  {
    if (v214.f32[0] == 0.0)
    {
      v216.i32[0] = *(_DWORD *)(v281.i64[1] + 16);
      v291.i8[0] = 0;
      float32x2_t v320 = 0;
      float32x4_t v316 = 0u;
      float32x4_t v317 = 0u;
      float32x4_t v318 = 0u;
      v311.i64[1] = v281.i64[1];
      v311.i64[0] = (uint64_t)&unk_26E728CE0;
      v312.i64[0] = (uint64_t)v282;
      float32x2x2_t v229 = (float32x2x2_t)v282[2];
      float32x4_t v228 = v282[3];
      int32x4_t v230 = *(int32x4_t *)v282;
      int32x4_t v314 = (int32x4_t)v282[1];
      v315[0] = v229;
      float32x4_t v313 = (float32x4_t)v230;
      float32x2x2_t v231 = (float32x2x2_t)vzip1q_s32(v230, (int32x4_t)v229);
      v229.val[0] = (float32x2_t)vzip2q_s32(v230, (int32x4_t)v229).u64[0];
      int32x4_t v232 = vzip1q_s32(v314, (int32x4_t)0);
      unint64_t v233 = vzip2q_s32(v314, (int32x4_t)0).u64[0];
      v216.f32[0] = (float)(v216.f32[0] + v294) * 100.0;
      float v234 = &v313;
      float v235 = (float *)v315;
      vst2_f32(v234->f32, v231);
      v315[1] = v228;
      int32x4_t v314 = vzip2q_s32((int32x4_t)v231, v232);
      vst2_f32(v235, v229);
      v321.i64[0] = (uint64_t)&unk_26E7287F0;
      v321.i64[1] = (uint64_t)v293;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::CapsuleV>>(&v311, (uint64_t)&v321, &v289, &v292, &v291, (uint64_t)&v316, v288, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v216.f32, 0), 0.0, v228) != 5)goto LABEL_80; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)&v281) - 5 >= 2)
      {
        float32x4_t v237 = vnegq_f32(v269);
        v237.i32[3] = 0;
        float32x4_t v238 = vmulq_f32(v237, v237);
        v238.i64[0] = vpaddq_f32(v238, v238).u64[0];
        float32x2_t v239 = vpadd_f32(*(float32x2_t *)v238.f32, *(float32x2_t *)v238.f32);
        float32x2_t v240 = vrsqrte_f32(v239);
        int v241 = 4;
        do
        {
          float32x2_t v240 = vmul_f32(v240, vrsqrts_f32(vmul_f32(v240, v240), v239));
          --v241;
        }
        while (v241);
        float32x2_t v242 = vmul_f32(v239, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v239), 0), _D8, (int8x8_t)v240));
        float32x2_t v243 = vrecpe_f32(v242);
        int v244 = 4;
        do
        {
          float32x2_t v243 = vmul_f32(v243, vrecps_f32(v242, v243));
          --v244;
        }
        while (v244);
        float32x4_t v212 = vmulq_n_f32(v237, v243.f32[0]);
        v212.i32[3] = 0;
        float32x4_t v216 = 0uLL;
        float32x2_t v214 = 0;
      }
      else
      {
LABEL_80:
        float32x4_t v212 = v318;
        float32x4_t v216 = v316;
        float32x2_t v214 = vmin_f32(v320, 0);
      }
    }
    float32x4_t v245 = vmulq_n_f32(v216, v264);
    v245.i32[3] = 0;
    int8x8_t v246 = (int8x8_t)vmls_f32(vmul_f32(v265, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v216, (int8x16_t)v216, 4uLL)), v260, *(float32x2_t *)v216.f32);
    *(int8x8_t *)v247.f32 = vext_s8(v246, (int8x8_t)vmls_f32(vmul_f32(v261, *(float32x2_t *)v216.f32), v265, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL)), 4uLL);
    v247.i64[1] = v246.u32[0];
    float32x4_t v248 = vmlaq_f32(v245, v266, v247);
    v248.i64[1] = vextq_s8((int8x16_t)v248, (int8x16_t)v248, 8uLL).u32[0];
    float32x4_t v249 = vmulq_f32(v263, v216);
    v249.i64[0] = vpaddq_f32(v249, v249).u64[0];
    float32x4_t v250 = vmlaq_n_f32(v248, v263, vpadd_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v249.f32).f32[0]);
    v250.i64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u32[0];
    v247.i64[0] = 0x4000000040000000;
    v247.i64[1] = 0x4000000040000000;
    float32x4_t v251 = vmlaq_f32(v267, v247, v250);
    v251.i64[1] = vextq_s8((int8x16_t)v251, (int8x16_t)v251, 8uLL).u32[0];
    float32x4_t v252 = vmlaq_n_f32(v251, v262, vmax_f32(v214, 0).f32[0]);
    float32x4_t v253 = vmulq_n_f32(v212, v264);
    v253.i32[3] = 0;
    *(float32x2_t *)v247.f32 = vmls_f32(vmul_f32(v265, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v212, (int8x16_t)v212, 4uLL)), v260, *(float32x2_t *)v212.f32);
    *(int8x8_t *)v250.f32 = vext_s8(*(int8x8_t *)v247.f32, (int8x8_t)vmls_f32(vmul_f32(v261, *(float32x2_t *)v212.f32), v265, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL)), 4uLL);
    v250.i64[1] = v247.u32[0];
    float32x4_t v254 = vmlaq_f32(v253, v266, v250);
    v254.i64[1] = vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL).u32[0];
    float32x4_t v255 = vmulq_f32(v263, v212);
    v255.i64[0] = vpaddq_f32(v255, v255).u64[0];
    float32x4_t v256 = vmlaq_n_f32(v254, v263, vpadd_f32(*(float32x2_t *)v255.f32, *(float32x2_t *)v255.f32).f32[0]);
    float32x4_t v257 = vaddq_f32(v256, v256);
    *(void *)a7 = v257.i64[0];
    *(_DWORD *)(a7 + 8) = v257.i32[2];
    *(void *)a8 = v252.i64[0];
    *(_DWORD *)(a8 + 8) = v252.i32[2];
  }
  return v214.f32[0];
}

float32_t physx::Gu::SweepGeomGeom<physx::Gu::CapsuleV,physx::Gu::BoxV>(uint64_t *a1, uint64_t *a2, int8x8_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v326 = *MEMORY[0x263EF8340];
  uint64_t v14 = *a1;
  int v15 = 4;
  int v307 = 4;
  v303[1] = 0;
  v303[0] = 0;
  LODWORD(a12) = *(_DWORD *)(v14 + 4);
  float32x4_t v16 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)(v14 + 8));
  v16.i32[3] = 0;
  uint64_t v17 = *a2;
  float32x4_t v18 = vnegq_f32(v16);
  v18.i32[3] = 0;
  float32x4_t v309 = v16;
  float32x4_t v310 = v18;
  int32x2_t v311 = vdup_lane_s32(*(int32x2_t *)&a12, 0);
  int v304 = LODWORD(a12);
  int v305 = LODWORD(a12);
  int v306 = LODWORD(a12);
  char v308 = 1;
  int v286 = 3;
  char v287 = 0;
  v284[0] = 0;
  v284[1] = 0;
  v16.i64[0] = *(void *)(v17 + 4);
  float32x4_t v19 = v16;
  v19.i32[2] = *(_DWORD *)(v17 + 12);
  *(int32x2_t *)v18.f32 = vdup_laneq_s32((int32x4_t)v19, 2);
  v19.i32[3] = 0;
  float32x4_t v278 = v19;
  float32x4_t v288 = v19;
  *(float32x2_t *)v16.f32 = vpmin_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v16.f32);
  *(float32x2_t *)v16.f32 = vpmin_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
  _OWORD v284[2] = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, v16.f32[0]);
  v16.f32[0] = 0.05 * v16.f32[0];
  int32x2_t v281 = *(int32x2_t *)v16.f32;
  __int32 v285 = v16.i32[0];
  *(float *)&a9 = *(float *)&a12 + *(float *)&a9;
  v19.i64[0] = *(void *)(a5 + 16);
  v19.i64[1] = *(unsigned int *)(a5 + 24);
  float32x4_t v20 = *a4;
  v21.i64[0] = *(void *)(a6 + 16);
  v21.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v22 = vnegq_f32(*a4);
  float32x4_t v23 = vsubq_f32(v19, v21);
  float32x4_t v24 = v22;
  v24.i32[3] = 0;
  float32x4_t v269 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v25) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v269.f32, *(float32x2_t *)v269.f32).u32[0];
  float32x4_t v26 = vmulq_n_f32(v23, v25);
  v26.i32[3] = 0;
  float32x2_t v27 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  float32x2_t v28 = (float32x2_t)vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)v27, 4uLL);
  int8x8_t v29 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL)), v28, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(v27, *(float32x2_t *)v23.f32), *(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), 4uLL);
  v30.i64[1] = v29.u32[0];
  float32x4_t v31 = vmlaq_laneq_f32(v26, v30, *a4, 3);
  v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
  float32x4_t v32 = vmulq_f32(v24, v23);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  float32x4_t v33 = vmlaq_n_f32(v31, v24, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
  float32x4_t v34 = vaddq_f32(v33, v33);
  v34.i32[3] = 0;
  float32x4_t v35 = *(float32x4_t *)a3->i8;
  v35.i32[3] = 0;
  float32x4_t v36 = vmulq_f32(v35, v24);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  float32x4_t v37 = vmulq_laneq_f32(v35, *a4, 3);
  v35.i64[0] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
  int8x8_t v38 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a3, *(int8x8_t *)v35.f32, 4uLL), *(float32x2_t *)v22.f32), v28, (float32x2_t)*a3);
  *(int8x8_t *)v39.f32 = vext_s8(v38, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a3, v27), *(float32x2_t *)v22.f32, *(float32x2_t *)v35.f32), 4uLL);
  *(int8x8_t *)&v39.u32[2] = v38;
  float32x4_t v40 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v24, *(float32x4_t *)a3->i8, 3), v37), v39);
  *(int32x2_t *)v22.f32 = vdup_lane_s32(*(int32x2_t *)v40.f32, 1);
  *(int32x2_t *)v24.f32 = vdup_laneq_s32((int32x4_t)v40, 2);
  float32x2_t v41 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32));
  float32x4_t v42 = vaddq_f32(v40, v40);
  *(int32x2_t *)v37.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  *(int32x2_t *)v40.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v42.f32), 0);
  float32x2_t v43 = vmul_lane_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v42.f32, 1);
  float32x2_t v44 = vmul_laneq_f32(*(float32x2_t *)v24.f32, v42, 2);
  *(float32x2_t *)v22.f32 = vmul_n_f32(*(float32x2_t *)v22.f32, v42.f32[0]);
  float32x2_t v45 = vmul_n_f32(*(float32x2_t *)v24.f32, v42.f32[0]);
  float32x2_t v46 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 0), v41, 1);
  *(float32x2_t *)v24.f32 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v42.f32, 1);
  *(float32x2_t *)v42.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 1), v41, 1);
  float32x2_t v47 = vmul_lane_f32(*(float32x2_t *)v37.f32, v41, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v40.f32 = vsub_f32(_D8, *(float32x2_t *)v40.f32);
  *(int8x8_t *)v36.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v43), v44), (int8x8_t)vadd_f32(*(float32x2_t *)v22.f32, v47), 4uLL);
  v36.i64[1] = vsub_f32(v45, *(float32x2_t *)v42.f32).u32[0];
  *(int8x8_t *)v22.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v22.f32, v47), (int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, v44), 4uLL);
  v22.i64[1] = vadd_f32(*(float32x2_t *)v24.f32, v46).u32[0];
  float32x4_t v295 = v36;
  int32x4_t v296 = (int32x4_t)v22;
  *(int8x8_t *)v22.f32 = vext_s8((int8x8_t)vadd_f32(v45, *(float32x2_t *)v42.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v24.f32, v46), 4uLL);
  v22.i64[1] = vsub_f32(*(float32x2_t *)v40.f32, v43).u32[0];
  int32x4_t v297 = (int32x4_t)v22;
  float32x4_t v298 = v34;
  *(int8x8_t *)v40.f32 = a3[2];
  v40.i64[1] = a3[3].u32[0];
  v22.i64[0] = a4[1].i64[0];
  v22.i64[1] = a4[1].u32[2];
  float32x4_t v270 = v21;
  float32x4_t v265 = vsubq_f32(v40, v19);
  float32x4_t v53 = vsubq_f32(vsubq_f32(v22, v21), v265);
  float32x4_t v54 = v20;
  v54.i32[3] = 0;
  float v267 = v25;
  float32x2_t v268 = *(float32x2_t *)v20.f32;
  float32x4_t v55 = vmulq_n_f32(v53, v25);
  v55.i32[3] = 0;
  float32x2_t v264 = (float32x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
  float32x2_t v263 = (float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v264, 4uLL);
  *(float32x2_t *)v24.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL)), v263, *(float32x2_t *)v53.f32);
  *(int8x8_t *)v22.f32 = vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)vmls_f32(vmul_f32(v264, *(float32x2_t *)v53.f32), *(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL)), 4uLL);
  v22.i64[1] = v24.u32[0];
  float32x4_t v56 = vmlsq_laneq_f32(v55, v22, v20, 3);
  v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
  float32x4_t v57 = vmulq_f32(v54, v53);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  float32x4_t v266 = v54;
  float32x4_t v58 = vmlaq_n_f32(v56, v54, vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).f32[0]);
  float32x4_t v59 = vaddq_f32(v58, v58);
  v291.i64[1] = (uint64_t)v303;
  v291.i64[0] = (uint64_t)&unk_26E728CE0;
  float32x2_t v292 = (int32x4_t *)&v295;
  float32x4_t v60 = (float *)v293;
  v293[0] = v36;
  v294[0] = v297;
  float v61 = (float *)v294;
  float32x2x2_t v62 = (float32x2x2_t)vzip1q_s32((int32x4_t)v36, v297);
  unint64_t v63 = vzip2q_s32((int32x4_t)v36, v297).u64[0];
  int32x4_t v64 = vzip1q_s32(v296, (int32x4_t)0);
  v36.i64[0] = vzip2q_s32(v296, (int32x4_t)0).u64[0];
  vst2_f32(v60, v62);
  v294[1] = v34;
  vst2_f32(v61, *(float32x2x2_t *)((char *)&v36 - 8));
  v293[1] = vzip2q_s32((int32x4_t)v62, v64);
  unsigned int v290 = (float32x4_t *)v284;
  float32x4_t v289 = &unk_26E728AB8;
  unsigned int v300 = 1;
  float32x4_t v65 = vmulq_f32(v34, v34);
  v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
  float32x4_t v66 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v34, (int8x16_t)xmmword_23435FD50);
  float32x4_t v67 = vmulq_f32(v66, v66);
  v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
  float32x2_t v68 = vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32);
  float32x2_t v69 = vrsqrte_f32(v68);
  do
  {
    float32x2_t v69 = vmul_f32(v69, vrsqrts_f32(vmul_f32(v69, v69), v68));
    --v15;
  }
  while (v15);
  v59.i32[3] = 0;
  float32x4_t v272 = v59;
  int8x16_t v70 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v59);
  float32x2_t v71 = vmul_f32(v68, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v68), 0), (int8x8_t)_D8, (int8x8_t)v69));
  float32x2_t v72 = vrecpe_f32(v71);
  int v73 = 4;
  do
  {
    float32x2_t v72 = vmul_f32(v72, vrecps_f32(v71, v72));
    --v73;
  }
  while (v73);
  *(float *)&a9 = *(float *)&a9 + 0.0;
  float32x2_t v74 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v70.i64[1] = vextq_s8(v70, v70, 8uLL).u32[0];
  float32x4_t v75 = vmulq_n_f32(v66, v72.f32[0]);
  v75.i32[3] = 0;
  float32x4_t v275 = (float32x4_t)v70;
  float32x4_t v276 = v75;
  float32x4_t v76 = vnegq_f32(v75);
  v76.i32[3] = 0;
  float32x4_t v312 = v76;
  *(double *)v77.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v291, (float32x2_t *)&v312);
  float32x4_t v78 = v77;
  int8x16_t v79 = (int8x16_t)vnegq_f32(v278);
  v79.i32[3] = 0;
  float32x4_t v80 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v276), (int8x16_t)v278, v79);
  float32x4_t v81 = vsubq_f32(v78, v80);
  float32x4_t v312 = v81;
  float32x4_t v313 = 0u;
  float32x4_t v314 = 0u;
  int32x4_t v315 = 0u;
  float32x4_t v317 = v78;
  float32x4_t v318 = 0u;
  float32x4_t v319 = 0u;
  long long v320 = 0u;
  float32x4_t v82 = vnegq_f32(v81);
  v82.i32[3] = 0;
  float32x4_t v322 = v80;
  float32x4_t v323 = 0u;
  float32x4_t v324 = 0u;
  long long v325 = 0u;
  *(float32x2_t *)v78.f32 = vmul_f32(vmin_f32((float32x2_t)vdup_lane_s32(v281, 0), 0), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v83 = vadd_f32(v74, *(float32x2_t *)v78.f32);
  *(float32x2_t *)v80.f32 = vmul_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32);
  float32x2_t v84 = vmul_f32(v83, v83);
  float32x4_t v85 = vmulq_f32(v82, v82);
  float32x4_t v86 = vpaddq_f32(v85, v85);
  float32x2_t v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
  float32x2_t v262 = *(float32x2_t *)v80.f32;
  *(int32x2_t *)v86.f32 = vcgt_f32(v87, *(float32x2_t *)v80.f32);
  int32x4_t v88 = vdupq_lane_s32(*(int32x2_t *)v86.f32, 0);
  v86.i32[0] = -1;
  int32x4_t v261 = (int32x4_t)v86;
  int8x16_t v89 = (int8x16_t)v81;
  v90.i64[0] = -1;
  v90.i64[1] = -1;
  int8x16_t v271 = (int8x16_t)v82;
  float32x4_t v91 = v82;
  float32x2_t v273 = 0;
  while (1)
  {
    int8x16_t v92 = (int8x16_t)v81;
    v93.i64[0] = -1;
    v93.i64[1] = -1;
    *(int16x4_t *)v93.i8 = vmovn_s32(vceqq_s32(v88, v93));
    unsigned __int32 v94 = vuzp1_s8(*(int8x8_t *)v93.i8, *(int8x8_t *)v93.i8).u32[0];
    if (v94 != -1) {
      break;
    }
    float32x4_t v95 = vmulq_f32(v91, v91);
    v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
    float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
    float32x2_t v97 = vrsqrte_f32(v96);
    int v98 = 4;
    do
    {
      float32x2_t v97 = vmul_f32(v97, vrsqrts_f32(vmul_f32(v97, v97), v96));
      --v98;
    }
    while (v98);
    int8x16_t v277 = v92;
    float32x2_t v99 = vmul_f32(v96, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v96), 0), (int8x8_t)_D8, (int8x8_t)v97));
    float32x2_t v100 = vrecpe_f32(v99);
    int v101 = 4;
    do
    {
      float32x2_t v100 = vmul_f32(v100, vrecps_f32(v99, v100));
      --v101;
    }
    while (v101);
    float32x4_t v274 = v91;
    float32x4_t v102 = vmulq_n_f32(v91, v100.f32[0]);
    v102.i32[3] = 0;
    float32x4_t v299 = v102;
    float32x4_t v103 = vnegq_f32(v102);
    v103.i32[3] = 0;
    float32x4_t v279 = v102;
    float32x4_t v282 = v103;
    *(double *)v104.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v291, (float32x2_t *)&v299);
    float32x4_t v105 = v104;
    float32x4_t v106 = v290[3];
    int8x16_t v107 = (int8x16_t)vnegq_f32(v106);
    v107.i32[3] = 0;
    float32x4_t v108 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v282), (int8x16_t)v106, v107);
    float32x4_t v109 = vaddq_f32(v275, v108);
    float32x4_t v81 = vsubq_f32(v104, v109);
    float32x4_t v110 = vnegq_f32(v81);
    v110.i32[3] = 0;
    float32x4_t v111 = vmulq_f32(v279, v110);
    v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
    float32x2_t v112 = vsub_f32(vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32), v83);
    if (v112.f32[0] > 0.0)
    {
      float32x4_t v113 = vmulq_f32(v272, v279);
      v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
      float32x2_t v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
      if (v114.f32[0] >= 0.0) {
        goto LABEL_70;
      }
      float32x2_t v115 = vrecpe_f32(v114);
      int v116 = 4;
      do
      {
        float32x2_t v115 = vmul_f32(v115, vrecps_f32(v114, v115));
        --v116;
      }
      while (v116);
      float32x2_t v117 = vsub_f32(v273, vmul_f32(v112, v115));
      if (vcgt_f32(v117, v273).u8[0])
      {
        if (v117.f32[0] > 1.0)
        {
LABEL_70:
          float32x2_t v214 = 0;
          float32x4_t v212 = 0uLL;
          float32x4_t v216 = 0uLL;
          goto LABEL_76;
        }
        float32x4_t v118 = vmlaq_n_f32((float32x4_t)0, v272, v117.f32[0]);
        v118.i64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0];
        float32x4_t v119 = vsubq_f32(v118, v275);
        float32x4_t v322 = vaddq_f32(v119, v322);
        float32x4_t v323 = vaddq_f32(v119, v323);
        float32x4_t v324 = vaddq_f32(v119, v324);
        float32x4_t v312 = vsubq_f32(v317, v322);
        float32x4_t v313 = vsubq_f32(v318, v323);
        float32x4_t v314 = vsubq_f32(v319, v324);
        float32x4_t v109 = vaddq_f32(v108, v118);
        float32x4_t v81 = vsubq_f32(v105, v109);
        float32x2_t v87 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v271 = (int8x16_t)v274;
        float32x4_t v275 = v118;
      }
      float32x2_t v273 = v117;
    }
    uint64_t v120 = v300;
    *(&v317 + v300) = v105;
    *(&v322 + v120) = v109;
    unsigned int v300 = v120 + 1;
    *(&v312 + v120) = v81;
    if (v120 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v312, &v317, &v322, (int *)&v300);
LABEL_27:
      int8x16_t v89 = v277;
      goto LABEL_61;
    }
    if (v120 != 2)
    {
      int8x16_t v89 = v277;
      if (v120 != 1) {
        goto LABEL_61;
      }
      float32x4_t v81 = v312;
      float32x4_t v121 = vsubq_f32(v313, v312);
      float32x4_t v122 = vmulq_f32(v121, v121);
      v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
      float32x2_t v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v123), 0), *(int8x8_t *)v312.f32).u32[0] != -1)
      {
        float32x4_t v124 = vnegq_f32(v312);
        v124.i32[3] = 0;
        float32x4_t v125 = vmulq_f32(v124, v121);
        v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
        float32x2_t v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
        float32x2_t v127 = vrecpe_f32(v123);
        int v128 = 4;
        do
        {
          float32x2_t v127 = vmul_f32(v127, vrecps_f32(v123, v127));
          --v128;
        }
        while (v128);
        float32x4_t v81 = vmlaq_n_f32(v312, v121, vmax_f32(vmin_f32(vmul_f32(v126, v127), _D8), 0).f32[0]);
LABEL_42:
        v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      unsigned int v300 = 1;
      goto LABEL_61;
    }
    float32x4_t v81 = v312;
    float32x4_t v129 = vsubq_f32(v313, v312);
    float32x4_t v130 = vsubq_f32(v314, v312);
    int8x8_t v132 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v129.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 4uLL), *(float32x2_t *)v130.f32);
    *(int8x8_t *)v131.f32 = vext_s8(v132, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), *(float32x2_t *)v130.f32), *(float32x2_t *)v129.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL)), 4uLL);
    v132.i32[1] = 0;
    unsigned int v300 = 3;
    float32x2_t v133 = vpadd_f32(vmul_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32), vmul_f32((float32x2_t)v132.u32[0], (float32x2_t)v132.u32[0]));
    float32x2_t v134 = vpadd_f32(v133, v133);
    if (v134.f32[0] <= 0.00000011921)
    {
      unsigned int v300 = 2;
      float32x4_t v171 = vmulq_f32(v129, v129);
      v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
      float32x2_t v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
      int8x16_t v89 = v277;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v172), 0), *(int8x8_t *)v312.f32).u32[0] != -1)
      {
        float32x4_t v173 = vnegq_f32(v312);
        v173.i32[3] = 0;
        float32x4_t v174 = vmulq_f32(v173, v129);
        v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
        float32x2_t v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
        float32x2_t v176 = vrecpe_f32(v172);
        int v177 = 4;
        do
        {
          float32x2_t v176 = vmul_f32(v176, vrecps_f32(v172, v176));
          --v177;
        }
        while (v177);
        float32x4_t v81 = vmlaq_n_f32(v312, v129, vmax_f32(vmin_f32(vmul_f32(v175, v176), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v134.f32[0] == 0.0)
    {
      float32x4_t v81 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v131.u32[2] = v132;
    float32x2_t v135 = (float32x2_t)vextq_s8((int8x16_t)v313, (int8x16_t)v313, 8uLL).u64[0];
    float32x2_t v136 = (float32x2_t)vextq_s8((int8x16_t)v314, (int8x16_t)v314, 8uLL).u64[0];
    float32x2_t v137 = (float32x2_t)vextq_s8((int8x16_t)v314, (int8x16_t)v314, 4uLL).u64[0];
    float32x2_t v138 = (float32x2_t)vextq_s8((int8x16_t)v313, (int8x16_t)v313, 4uLL).u64[0];
    int8x8_t v139 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v313.f32, v137), v138, *(float32x2_t *)v314.f32);
    *(int8x8_t *)v140.f32 = vext_s8(v139, (int8x8_t)vmls_f32(vmul_f32(v135, *(float32x2_t *)v314.f32), *(float32x2_t *)v313.f32, v136), 4uLL);
    v140.i64[1] = v139.u32[0];
    float32x2_t v141 = (float32x2_t)vextq_s8((int8x16_t)v312, (int8x16_t)v312, 8uLL).u64[0];
    float32x2_t v142 = (float32x2_t)vextq_s8((int8x16_t)v312, (int8x16_t)v312, 4uLL).u64[0];
    int8x8_t v143 = (int8x8_t)vmls_f32(vmul_f32(v142, *(float32x2_t *)v314.f32), v137, *(float32x2_t *)v312.f32);
    *(int8x8_t *)v144.f32 = vext_s8(v143, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v312.f32, v136), *(float32x2_t *)v314.f32, v141), 4uLL);
    v144.i64[1] = v143.u32[0];
    int8x8_t v145 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v312.f32, v138), v142, *(float32x2_t *)v313.f32);
    *(int8x8_t *)v146.f32 = vext_s8(v145, (int8x8_t)vmls_f32(vmul_f32(v141, *(float32x2_t *)v313.f32), *(float32x2_t *)v312.f32, v135), 4uLL);
    v146.i64[1] = v145.u32[0];
    float32x4_t v147 = vmulq_f32(v140, v131);
    v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
    float32x2_t v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
    float32x4_t v149 = vmulq_f32(v144, v131);
    v149.i64[0] = vpaddq_f32(v149, v149).u64[0];
    float32x2_t v150 = vpadd_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v149.f32);
    float32x4_t v151 = vmulq_f32(v146, v131);
    v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
    float32x2_t v152 = vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v150), (int8x8_t)vcgez_f32(v148)), (int8x8_t)vcgez_f32(v152)), 0), *(int8x8_t *)v312.f32).u32[0] != -1)
    {
      float32x4_t v153 = vnegq_f32(v312);
      v153.i32[3] = 0;
      float32x4_t v154 = vnegq_f32(v313);
      v154.i32[3] = 0;
      float32x4_t v155 = vmulq_f32(v153, v129);
      v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
      float32x2_t v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
      float32x4_t v157 = vmulq_f32(v129, v154);
      v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
      float32x2_t v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v156), (int8x8_t)vclez_f32(v158)), (int8x8_t)vclez_f32(v152)), 0), *(int8x8_t *)v312.f32).u32[0] == -1)
      {
        float32x2_t v181 = vsub_f32(v156, v158);
        float32x2_t v182 = vrecpe_f32(v181);
        int v183 = 4;
        do
        {
          float32x2_t v182 = vmul_f32(v182, vrecps_f32(v181, v182));
          --v183;
        }
        while (v183);
        uint64_t v170 = 0;
        float32x4_t v81 = vmlaq_n_f32(v312, v129, vmul_f32(v156, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v181), (float32x2_t)0x3400000034000000), (int8x8_t)v182, 0)).f32[0]);
        v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
        unsigned int v184 = 2;
        uint64_t v169 = 1;
      }
      else
      {
        float32x4_t v159 = vnegq_f32(v314);
        v159.i32[3] = 0;
        float32x4_t v160 = vmulq_f32(v154, v130);
        v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
        float32x2_t v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
        float32x4_t v162 = vmulq_f32(v129, v159);
        v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
        float32x2_t v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
        float32x4_t v164 = vmulq_f32(v130, v159);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        float32x2_t v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v161, v158), (int8x8_t)vcge_f32(v163, v165)), (int8x8_t)vclez_f32(v148)), 0), *(int8x8_t *)v312.f32).u32[0] != -1)
        {
          float32x4_t v166 = vmulq_f32(v153, v130);
          v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
          float32x2_t v167 = vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v167), (int8x8_t)vclez_f32(v165)), (int8x8_t)vclez_f32(v150)), 0), *(int8x8_t *)v312.f32).u32[0] == -1)
          {
            float32x2_t v190 = vsub_f32(v167, v165);
            float32x2_t v191 = vrecpe_f32(v190);
            int v192 = 4;
            int8x16_t v89 = v277;
            do
            {
              float32x2_t v191 = vmul_f32(v191, vrecps_f32(v190, v191));
              --v192;
            }
            while (v192);
            uint64_t v170 = 0;
            float32x4_t v81 = vmlaq_n_f32(v312, v130, vmul_f32(v167, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v190), (float32x2_t)0x3400000034000000), (int8x8_t)v191, 0)).f32[0]);
            v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
            uint64_t v169 = 2;
          }
          else
          {
            int8x16_t v89 = v277;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v167), (int8x8_t)vclez_f32(v156)), 0), *(int8x8_t *)v312.f32).u32[0] == -1)
            {
              uint64_t v170 = 0;
              uint64_t v169 = 1;
            }
            else
            {
              *(int16x4_t *)v81.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v158, v161), (int8x8_t)vcgez_f32(v158)), 0);
              *(int8x8_t *)v81.f32 = vuzp1_s8(*(int8x8_t *)v81.f32, *(int8x8_t *)v81.f32);
              __int32 v168 = v81.i32[0];
              float32x4_t v81 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v81, v261), 0), (int8x16_t)v313, (int8x16_t)v314);
              uint64_t v169 = 1;
              if (v168 == -1) {
                uint64_t v170 = 1;
              }
              else {
                uint64_t v170 = 2;
              }
            }
          }
          unsigned int v184 = v169;
          goto LABEL_60;
        }
        float32x2_t v185 = vsub_f32(v161, v158);
        float32x2_t v186 = vadd_f32(v185, vsub_f32(v163, v165));
        float32x2_t v187 = vrecpe_f32(v186);
        int v188 = 4;
        do
        {
          float32x2_t v187 = vmul_f32(v187, vrecps_f32(v186, v187));
          --v188;
        }
        while (v188);
        int8x16_t v189 = (int8x16_t)vmlaq_n_f32(v313, vsubq_f32(v314, v313), vmul_f32(v185, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v186), (float32x2_t)0x3400000034000000), (int8x8_t)v187, 0)).f32[0]);
        v189.i64[1] = vextq_s8(v189, v189, 8uLL).u32[0];
        unsigned int v184 = 2;
        uint64_t v169 = 2;
        uint64_t v170 = 1;
        float32x4_t v81 = (float32x4_t)v189;
      }
      int8x16_t v89 = v277;
LABEL_60:
      float32x4_t v193 = *(&v312 + v169);
      float32x4_t v194 = *(&v317 + v170);
      float32x4_t v195 = *(&v317 + v169);
      float32x4_t v196 = *(&v322 + v170);
      float32x4_t v197 = *(&v322 + v169);
      float32x4_t v312 = *(&v312 + v170);
      float32x4_t v313 = v193;
      float32x4_t v317 = v194;
      float32x4_t v318 = v195;
      float32x4_t v322 = v196;
      float32x4_t v323 = v197;
      unsigned int v300 = v184;
      goto LABEL_61;
    }
    float32x2_t v178 = vrecpe_f32(v134);
    int v179 = 4;
    int8x16_t v89 = v277;
    do
    {
      float32x2_t v178 = vmul_f32(v178, vrecps_f32(v134, v178));
      --v179;
    }
    while (v179);
    float32x4_t v180 = vmulq_f32(v312, v131);
    v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
    float32x4_t v81 = vmulq_n_f32(v131, vmul_f32(v178, vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32)).f32[0]);
    v81.i32[3] = 0;
LABEL_61:
    float32x4_t v91 = vnegq_f32(v81);
    v91.i32[3] = 0;
    float32x4_t v198 = vmulq_f32(v81, v81);
    v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
    float32x2_t v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
    int8x8_t v200 = (int8x8_t)vcgt_f32(v87, v199);
    int8x16_t v90 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v200, (int8x8_t)0x100000001), 0);
    int32x4_t v88 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v199, v84), v200), 0);
    float32x2_t v87 = v199;
  }
  uint64_t v201 = v291.i64[1];
  float32x4_t v202 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v87, v262), 0), v90), 0x1FuLL)), (int8x16_t)v91, v271);
  float32x4_t v203 = vmulq_f32(v202, v202);
  v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
  float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
  float32x2_t v205 = vrsqrte_f32(v204);
  int v206 = 4;
  do
  {
    float32x2_t v205 = vmul_f32(v205, vrsqrts_f32(vmul_f32(v205, v205), v204));
    --v206;
  }
  while (v206);
  float32x2_t v207 = vmul_f32(v204, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v204), 0), (int8x8_t)_D8, (int8x8_t)v205));
  float32x2_t v208 = vrecpe_f32(v207);
  int v209 = 4;
  do
  {
    float32x2_t v208 = vmul_f32(v208, vrecps_f32(v207, v208));
    --v209;
  }
  while (v209);
  int8x16_t v210 = (int8x16_t)vdupq_n_s32(-*(char *)(v291.i64[1] + 32));
  int8x16_t v211 = (int8x16_t)vmulq_n_f32(v202, v208.f32[0]);
  v211.i32[3] = 0;
  float32x4_t v212 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v207), 0), v211));
  v212.i32[3] = 0;
  float32x4_t v213 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v90, 0x1FuLL)), v92, v89);
  float32x4_t v299 = v213;
  float32x2_t v214 = v273;
  if (v300 == 3)
  {
    float32x2_t v302 = 0;
    float32x2_t v301 = 0;
    int8x16_t v280 = v210;
    float32x4_t v283 = v212;
    physx::Gu::barycentricCoordinates(&v299, &v312, &v313, &v314, &v302, &v301);
    int8x16_t v210 = v280;
    float32x4_t v212 = v283;
    float32x2_t v214 = v273;
    v90.i32[1] = v317.i32[1];
    float32x4_t v217 = vmulq_n_f32(vsubq_f32(v318, v317), v302.f32[0]);
    v217.i32[3] = 0;
    float32x4_t v218 = vmulq_n_f32(vsubq_f32(v319, v317), v301.f32[0]);
    v218.i32[3] = 0;
    float32x4_t v215 = vaddq_f32(v317, vaddq_f32(v217, v218));
  }
  else if (v300 == 2)
  {
    float32x4_t v219 = vsubq_f32(v312, v213);
    float32x4_t v220 = vsubq_f32(vsubq_f32(v313, v213), v219);
    float32x4_t v221 = vmulq_f32(v220, v220);
    v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
    float32x2_t v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
    float32x2_t v223 = vrecpe_f32(v222);
    int v224 = 4;
    do
    {
      float32x2_t v223 = vmul_f32(v223, vrecps_f32(v222, v223));
      --v224;
    }
    while (v224);
    float32x4_t v225 = vnegq_f32(v219);
    v225.i32[3] = 0;
    float32x4_t v226 = vmulq_f32(v225, v220);
    v226.i64[0] = vpaddq_f32(v226, v226).u64[0];
    float32x4_t v215 = vmlaq_n_f32(v317, vsubq_f32(v318, v317), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v222), (int8x8_t)v223, 0), vpadd_f32(*(float32x2_t *)v226.f32, *(float32x2_t *)v226.f32)).f32[0]);
    v90.i32[1] = 0;
    v215.i64[1] = vextq_s8((int8x16_t)v215, (int8x16_t)v215, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v215 = 0uLL;
    if (v300 == 1) {
      float32x4_t v215 = v317;
    }
  }
  v90.i32[0] = *(_DWORD *)(v201 + 16);
  int8x16_t v227 = (int8x16_t)vmlsq_lane_f32(v215, v212, *(float32x2_t *)v90.i8, 0);
  v227.i64[1] = vextq_s8(v227, v227, 8uLL).u32[0];
  float32x4_t v216 = (float32x4_t)vbslq_s8(v210, v227, (int8x16_t)v215);
LABEL_76:
  if (v94 == -1)
  {
    v214.i32[0] = 2139095039;
  }
  else
  {
    if (v214.f32[0] == 0.0)
    {
      v216.i32[0] = *(_DWORD *)(v291.i64[1] + 16);
      uint64_t v228 = (uint64_t)v290;
      float v229 = v290[1].f32[0];
      v301.i8[0] = 0;
      float32x2_t v321 = 0;
      float32x4_t v317 = 0u;
      float32x4_t v318 = 0u;
      float32x4_t v319 = 0u;
      v312.i64[1] = v291.i64[1];
      v312.i64[0] = (uint64_t)&unk_26E728CE0;
      v313.i64[0] = (uint64_t)v292;
      float32x2x2_t v231 = (float32x2x2_t)v292[2];
      int32x4_t v230 = v292[3];
      int32x4_t v232 = *v292;
      int32x4_t v315 = v292[1];
      v316[0] = v231;
      float32x4_t v314 = (float32x4_t)v232;
      float32x2x2_t v233 = (float32x2x2_t)vzip1q_s32(v232, (int32x4_t)v231);
      v231.val[0] = (float32x2_t)vzip2q_s32(v232, (int32x4_t)v231).u64[0];
      int32x4_t v234 = vzip1q_s32(v315, (int32x4_t)0);
      unint64_t v235 = vzip2q_s32(v315, (int32x4_t)0).u64[0];
      v216.f32[0] = (float)(v216.f32[0] + v229) * 100.0;
      float v236 = &v314;
      float32x4_t v237 = (float *)v316;
      vst2_f32(v236->f32, v233);
      v316[1] = v230;
      int32x4_t v315 = vzip2q_s32((int32x4_t)v233, v234);
      vst2_f32(v237, v231);
      v322.i64[0] = (uint64_t)&unk_26E728AB8;
      v322.i64[1] = v228;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v312, (uint64_t)&v322, &v299, &v302, &v301, (uint64_t)&v317, v298, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v216.f32, 0), 0.0, *(int8x8_t *)v230.i8) != 5)goto LABEL_80; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)&v291) - 5 >= 2)
      {
        float32x4_t v239 = vnegq_f32(v272);
        v239.i32[3] = 0;
        float32x4_t v240 = vmulq_f32(v239, v239);
        v240.i64[0] = vpaddq_f32(v240, v240).u64[0];
        float32x2_t v241 = vpadd_f32(*(float32x2_t *)v240.f32, *(float32x2_t *)v240.f32);
        float32x2_t v242 = vrsqrte_f32(v241);
        int v243 = 4;
        do
        {
          float32x2_t v242 = vmul_f32(v242, vrsqrts_f32(vmul_f32(v242, v242), v241));
          --v243;
        }
        while (v243);
        float32x2_t v244 = vmul_f32(v241, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v241), 0), _D8, (int8x8_t)v242));
        float32x2_t v245 = vrecpe_f32(v244);
        int v246 = 4;
        do
        {
          float32x2_t v245 = vmul_f32(v245, vrecps_f32(v244, v245));
          --v246;
        }
        while (v246);
        float32x4_t v212 = vmulq_n_f32(v239, v245.f32[0]);
        v212.i32[3] = 0;
        float32x2_t v214 = 0;
        float32x4_t v216 = 0uLL;
      }
      else
      {
LABEL_80:
        float32x4_t v212 = v319;
        float32x4_t v216 = v317;
        float32x2_t v214 = vmin_f32(v321, 0);
      }
    }
    float32x4_t v247 = vmulq_n_f32(v216, v267);
    v247.i32[3] = 0;
    int8x8_t v248 = (int8x8_t)vmls_f32(vmul_f32(v268, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v216, (int8x16_t)v216, 4uLL)), v263, *(float32x2_t *)v216.f32);
    *(int8x8_t *)v249.f32 = vext_s8(v248, (int8x8_t)vmls_f32(vmul_f32(v264, *(float32x2_t *)v216.f32), v268, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL)), 4uLL);
    v249.i64[1] = v248.u32[0];
    float32x4_t v250 = vmlaq_f32(v247, v269, v249);
    v250.i64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u32[0];
    float32x4_t v251 = vmulq_f32(v266, v216);
    v251.i64[0] = vpaddq_f32(v251, v251).u64[0];
    float32x4_t v252 = vmlaq_n_f32(v250, v266, vpadd_f32(*(float32x2_t *)v251.f32, *(float32x2_t *)v251.f32).f32[0]);
    v252.i64[1] = vextq_s8((int8x16_t)v252, (int8x16_t)v252, 8uLL).u32[0];
    v249.i64[0] = 0x4000000040000000;
    v249.i64[1] = 0x4000000040000000;
    float32x4_t v253 = vmlaq_f32(v270, v249, v252);
    v253.i64[1] = vextq_s8((int8x16_t)v253, (int8x16_t)v253, 8uLL).u32[0];
    float32x4_t v254 = vmlaq_n_f32(v253, v265, vmax_f32(v214, 0).f32[0]);
    float32x4_t v255 = vmulq_n_f32(v212, v267);
    v255.i32[3] = 0;
    *(float32x2_t *)v249.f32 = vmls_f32(vmul_f32(v268, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v212, (int8x16_t)v212, 4uLL)), v263, *(float32x2_t *)v212.f32);
    *(int8x8_t *)v252.f32 = vext_s8(*(int8x8_t *)v249.f32, (int8x8_t)vmls_f32(vmul_f32(v264, *(float32x2_t *)v212.f32), v268, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL)), 4uLL);
    v252.i64[1] = v249.u32[0];
    float32x4_t v256 = vmlaq_f32(v255, v269, v252);
    v256.i64[1] = vextq_s8((int8x16_t)v256, (int8x16_t)v256, 8uLL).u32[0];
    float32x4_t v257 = vmulq_f32(v266, v212);
    v257.i64[0] = vpaddq_f32(v257, v257).u64[0];
    float32x4_t v258 = vmlaq_n_f32(v256, v266, vpadd_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v257.f32).f32[0]);
    float32x4_t v259 = vaddq_f32(v258, v258);
    *(void *)a7 = v259.i64[0];
    *(_DWORD *)(a7 + 8) = v259.i32[2];
    *(void *)a8 = v254.i64[0];
    *(_DWORD *)(a8 + 8) = v254.i32[2];
  }
  return v214.f32[0];
}

float32_t physx::Gu::SweepGeomGeom<physx::Gu::CapsuleV,physx::Gu::ConvexHullV>(uint64_t *a1, uint64_t *a2, int8x8_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float32x4_t a10)
{
  uint64_t v401 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  int v382 = 4;
  v378[1] = 0;
  v378[0] = 0;
  a10.i32[0] = *(_DWORD *)(v10 + 4);
  float32x4_t v11 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)(v10 + 8));
  v11.i32[3] = 0;
  uint64_t v12 = *a2;
  float32x4_t v13 = vnegq_f32(v11);
  v13.i32[3] = 0;
  float32x4_t v384 = v11;
  float32x4_t v385 = v13;
  int32x2_t v386 = vdup_lane_s32(*(int32x2_t *)a10.f32, 0);
  unsigned __int32 v379 = a10.i32[0];
  unsigned __int32 v380 = a10.i32[0];
  unsigned __int32 v381 = a10.i32[0];
  char v383 = 1;
  char v367 = 0;
  float32x4_t v365 = 0u;
  long long v366 = 0u;
  uint64_t v14 = *(void *)(v12 + 48);
  float32x4_t v15 = *(float32x4_t *)(v12 + 4);
  float32x4_t v16 = v15;
  v16.i32[3] = 0;
  float32x4_t v17 = *(float32x4_t *)(v12 + 16);
  v11.i32[0] = HIDWORD(*(void *)(v12 + 4));
  BOOL v18 = COERCE_FLOAT(*(void *)(v12 + 12)) == 1.0;
  if (v11.f32[0] != 1.0) {
    BOOL v18 = 0;
  }
  uint64_t v374 = v14;
  uint64_t v376 = *(void *)(v14 + 40) + 20 * *(unsigned __int8 *)(v14 + 39);
  char v377 = *(unsigned char *)(v14 + 38);
  BOOL v20 = v15.f32[0] == 1.0 && v18;
  v19.i64[1] = *(unsigned int *)(v14 + 68);
  v19.i64[0] = *(void *)(v14 + 60);
  int32x4_t v21 = (int32x4_t)vmulq_f32(v16, v19);
  *(float32x2_t *)v21.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v21, 2), *(float32x2_t *)v21.i8);
  *(float *)v21.i32 = vpmin_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8).f32[0];
  *(float32x2_t *)&long long v366 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v21.i32);
  *((float *)&v366 + 2) = 0.025 * *(float *)v21.i32;
  __asm { FMOV            V8.2S, #1.0 }
  if (v20)
  {
    long long v368 = xmmword_23435FD50;
    long long v369 = xmmword_23435FD60;
    long long v370 = xmmword_23435FD80;
    long long v371 = xmmword_23435FD50;
    float32x4_t v372 = (float32x4_t)xmmword_23435FD60;
    long long v373 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v27 = vrecpeq_f32(v16);
    int v28 = 4;
    do
    {
      float32x4_t v27 = vmulq_f32(v27, vrecpsq_f32(v27, v16));
      --v28;
    }
    while (v28);
    *(int32x2_t *)v29.f32 = vdup_lane_s32(*(int32x2_t *)v15.f32, 0);
    v29.i64[1] = v29.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v29, v16)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v36 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1);
      float32x2_t v37 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 2);
      float32x2_t v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 3);
      float32x4_t v39 = vaddq_f32(v17, v17);
      float32x2_t v40 = vmul_lane_f32(v36, *(float32x2_t *)v39.f32, 1);
      float32x2_t v41 = vmul_laneq_f32(v37, v39, 2);
      float32x2_t v42 = vmul_n_f32(v36, v39.f32[0]);
      float32x2_t v43 = vmul_n_f32(v37, v39.f32[0]);
      float32x2_t v44 = vmul_n_f32(v38, v39.f32[0]);
      float32x2_t v45 = vmul_lane_f32(v37, *(float32x2_t *)v39.f32, 1);
      float32x2_t v46 = vmul_lane_f32(v38, *(float32x2_t *)v39.f32, 1);
      float32x2_t v47 = vmul_laneq_f32(v38, v39, 2);
      float32x2_t v48 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v39.f32), 0));
      int8x8_t v49 = (int8x8_t)vsub_f32(v42, v47);
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v40), v41), (int8x8_t)vadd_f32(v42, v47), 4uLL);
      v50.i64[1] = vsub_f32(v43, v46).u32[0];
      *(int8x8_t *)v51.f32 = vext_s8(v49, (int8x8_t)vsub_f32(v48, v41), 4uLL);
      *(int8x8_t *)v39.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), *(int8x8_t *)v51.f32, 4uLL);
      v51.i64[1] = vadd_f32(v45, v44).u32[0];
      int8x8_t v52 = (int8x8_t)vsub_f32(v45, v44);
      v44.i32[0] = vsub_f32(v48, v40).u32[0];
      *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vadd_f32(v43, v46), v52, 4uLL);
      *(int8x8_t *)v54.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v51.f32, 1), 4uLL);
      v53.i64[1] = v44.u32[0];
      v39.i64[1] = vdup_lane_s32(*(int32x2_t *)v53.f32, 0).u32[0];
      v54.i64[1] = vdup_lane_s32(*(int32x2_t *)v53.f32, 1).u32[0];
      *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v50.u32[2], 0), *(int8x8_t *)&v51.u32[2], 4uLL);
      v55.i64[1] = vdup_lane_s32((int32x2_t)v44.u32[0], 0).u32[0];
      float32x4_t v56 = vmulq_n_f32(v39, v15.f32[0]);
      v56.i32[3] = 0;
      float32x4_t v57 = vmulq_lane_f32(v54, *(float32x2_t *)v15.f32, 1);
      v57.i32[3] = 0;
      float32x4_t v58 = vmulq_laneq_f32(v55, v15, 2);
      v58.i32[3] = 0;
      float32x4_t v59 = vmulq_n_f32(v56, v50.f32[0]);
      v59.i32[3] = 0;
      float32x4_t v60 = vmulq_lane_f32(v57, *(float32x2_t *)v50.f32, 1);
      v60.i32[3] = 0;
      float32x4_t v61 = vmulq_laneq_f32(v58, v50, 2);
      v61.i32[3] = 0;
      float32x4_t v30 = vaddq_f32(v61, vaddq_f32(v59, v60));
      float32x4_t v62 = vmulq_n_f32(v56, v51.f32[0]);
      v62.i32[3] = 0;
      float32x4_t v63 = vmulq_lane_f32(v57, *(float32x2_t *)v51.f32, 1);
      v63.i32[3] = 0;
      float32x4_t v64 = vmulq_laneq_f32(v58, v51, 2);
      v64.i32[3] = 0;
      float32x4_t v65 = vaddq_f32(v62, v63);
      float32x4_t v66 = vmulq_n_f32(v56, v53.f32[0]);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_lane_f32(v57, *(float32x2_t *)v53.f32, 1);
      v67.i32[3] = 0;
      float32x4_t v31 = vaddq_f32(v64, v65);
      float32x4_t v68 = vmulq_laneq_f32(v58, v53, 2);
      v68.i32[3] = 0;
      float32x4_t v32 = vaddq_f32(v68, vaddq_f32(v66, v67));
      long long v368 = (__int128)v30;
      long long v369 = (__int128)v31;
      float32x4_t v69 = vmulq_n_f32(v39, v27.f32[0]);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_lane_f32(v54, *(float32x2_t *)v27.f32, 1);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_laneq_f32(v55, v27, 2);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_n_f32(v69, v50.f32[0]);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_lane_f32(v70, *(float32x2_t *)v50.f32, 1);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_laneq_f32(v71, v50, 2);
      v74.i32[3] = 0;
      float32x4_t v75 = vaddq_f32(v72, v73);
      float32x4_t v76 = vmulq_n_f32(v69, v51.f32[0]);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_lane_f32(v70, *(float32x2_t *)v51.f32, 1);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_laneq_f32(v71, v51, 2);
      v78.i32[3] = 0;
      float32x4_t v79 = vaddq_f32(v74, v75);
      float32x4_t v80 = vmulq_n_f32(v69, v53.f32[0]);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_lane_f32(v70, *(float32x2_t *)v53.f32, 1);
      v81.i32[3] = 0;
      a10 = vmulq_laneq_f32(v71, v53, 2);
      a10.i32[3] = 0;
      float32x4_t v35 = vaddq_f32(a10, vaddq_f32(v80, v81));
      long long v370 = (__int128)v32;
      long long v371 = (__int128)v79;
      float32x4_t v372 = vaddq_f32(v78, vaddq_f32(v76, v77));
      a10.i32[0] = *(_DWORD *)(v10 + 4);
    }
    else
    {
      v27.i32[3] = 0;
      float32x4_t v30 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD50);
      float32x4_t v31 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD60);
      float32x4_t v32 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD80);
      long long v368 = (__int128)v30;
      long long v369 = (__int128)v31;
      float32x4_t v33 = vmulq_f32(v27, (float32x4_t)xmmword_23435FD50);
      float32x4_t v34 = vmulq_f32(v27, (float32x4_t)xmmword_23435FD60);
      float32x4_t v35 = vmulq_f32(v27, (float32x4_t)xmmword_23435FD80);
      long long v370 = (__int128)v32;
      long long v371 = (__int128)v33;
      float32x4_t v372 = v34;
    }
    float32x4_t v82 = vmulq_f32(v30, (float32x4_t)0);
    v82.i32[3] = 0;
    float32x4_t v83 = vmulq_f32(v31, (float32x4_t)0);
    v83.i32[3] = 0;
    float32x4_t v84 = vmulq_f32(v32, (float32x4_t)0);
    v84.i32[3] = 0;
    long long v373 = (__int128)v35;
    float32x4_t v365 = vaddq_f32(v84, vaddq_f32(v83, v82));
  }
  uint64_t v375 = *(void *)(v14 + 48);
  v85.i64[0] = *(void *)(a5 + 16);
  v85.i64[1] = *(unsigned int *)(a5 + 24);
  float32x4_t v86 = *a4;
  v87.i64[0] = *(void *)(a6 + 16);
  v87.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v88 = vnegq_f32(*a4);
  float32x4_t v89 = v88;
  v89.i32[3] = 0;
  float32x4_t v90 = vsubq_f32(v85, v87);
  float32x4_t v333 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v91) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v333.f32, *(float32x2_t *)v333.f32).u32[0];
  float32x4_t v92 = vmulq_n_f32(v90, v91);
  v92.i32[3] = 0;
  float32x2_t v93 = (float32x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
  float32x2_t v94 = (float32x2_t)vext_s8(*(int8x8_t *)v88.f32, (int8x8_t)v93, 4uLL);
  int8x8_t v95 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v88.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v90, (int8x16_t)v90, 4uLL)), v94, *(float32x2_t *)v90.f32);
  *(int8x8_t *)v96.f32 = vext_s8(v95, (int8x8_t)vmls_f32(vmul_f32(v93, *(float32x2_t *)v90.f32), *(float32x2_t *)v88.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL)), 4uLL);
  v96.i64[1] = v95.u32[0];
  float32x4_t v97 = vmlaq_laneq_f32(v92, v96, *a4, 3);
  v97.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u32[0];
  float32x4_t v98 = vmulq_f32(v89, v90);
  v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
  float32x4_t v99 = vmlaq_n_f32(v97, v89, vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32).f32[0]);
  float32x4_t v100 = vaddq_f32(v99, v99);
  v100.i32[3] = 0;
  float32x4_t v101 = *(float32x4_t *)a3->i8;
  v101.i32[3] = 0;
  float32x4_t v102 = vmulq_f32(v101, v89);
  v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
  float32x4_t v103 = vmulq_laneq_f32(v101, *a4, 3);
  v101.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
  int8x8_t v104 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a3, *(int8x8_t *)v101.f32, 4uLL), *(float32x2_t *)v88.f32), v94, (float32x2_t)*a3);
  *(int8x8_t *)v88.f32 = vext_s8(v104, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a3, v93), *(float32x2_t *)v88.f32, *(float32x2_t *)v101.f32), 4uLL);
  *(int8x8_t *)&v88.u32[2] = v104;
  float32x4_t v105 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v89, *(float32x4_t *)a3->i8, 3), v103), v88);
  float32x2_t v106 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.f32, 1);
  *(int32x2_t *)v89.f32 = vdup_laneq_s32((int32x4_t)v105, 2);
  float32x4_t v107 = vaddq_f32(v105, v105);
  *(int32x2_t *)v103.f32 = vdup_laneq_s32((int32x4_t)v107, 2);
  *(float32x2_t *)v96.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL)), vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32));
  *(int32x2_t *)v105.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v107.f32), 0);
  *(float32x2_t *)v102.f32 = vmul_lane_f32(v106, *(float32x2_t *)v107.f32, 1);
  float32x2_t v108 = vmul_laneq_f32(*(float32x2_t *)v89.f32, v107, 2);
  float32x2_t v109 = vmul_n_f32(v106, v107.f32[0]);
  float32x2_t v110 = vmul_n_f32(*(float32x2_t *)v89.f32, v107.f32[0]);
  float32x2_t v111 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.f32, 0), *(float32x2_t *)v96.f32, 1);
  *(float32x2_t *)v89.f32 = vmul_lane_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v107.f32, 1);
  *(float32x2_t *)v107.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v107.f32, 1), *(float32x2_t *)v96.f32, 1);
  *(float32x2_t *)v96.f32 = vmul_lane_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v96.f32, 1);
  *(float32x2_t *)v105.f32 = vsub_f32(_D8, *(float32x2_t *)v105.f32);
  *(int8x8_t *)v112.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, *(float32x2_t *)v102.f32), v108), (int8x8_t)vadd_f32(v109, *(float32x2_t *)v96.f32), 4uLL);
  v112.i64[1] = vsub_f32(v110, *(float32x2_t *)v107.f32).u32[0];
  *(int8x8_t *)v113.f32 = vext_s8((int8x8_t)vsub_f32(v109, *(float32x2_t *)v96.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v105.f32, v108), 4uLL);
  v113.i64[1] = vadd_f32(*(float32x2_t *)v89.f32, v111).u32[0];
  *(float *)&a9 = a10.f32[0] + *(float *)&a9;
  int32x4_t v356 = v112;
  int32x4_t v357 = (int32x4_t)v113;
  *(int8x8_t *)v114.i8 = vext_s8((int8x8_t)vadd_f32(v110, *(float32x2_t *)v107.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v89.f32, v111), 4uLL);
  v114.i64[1] = vsub_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v102.f32).u32[0];
  *(int8x8_t *)v105.f32 = a3[2];
  v105.i64[1] = a3[3].u32[0];
  v113.i64[0] = a4[1].i64[0];
  v113.i64[1] = a4[1].u32[2];
  int32x4_t v358 = v114;
  float32x4_t v359 = v100;
  float32x4_t v334 = v87;
  float32x4_t v115 = v86;
  v115.i32[3] = 0;
  float32x4_t v329 = vsubq_f32(v105, v85);
  float32x4_t v116 = vsubq_f32(vsubq_f32(v113, v87), v329);
  float v331 = v91;
  float32x2_t v332 = *(float32x2_t *)v86.f32;
  float32x4_t v117 = vmulq_n_f32(v116, v91);
  v117.i32[3] = 0;
  float32x2_t v328 = (float32x2_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u64[0];
  float32x2_t v327 = (float32x2_t)vext_s8(*(int8x8_t *)v86.f32, (int8x8_t)v328, 4uLL);
  *(float32x2_t *)v113.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v86.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 4uLL)), v327, *(float32x2_t *)v116.f32);
  *(int8x8_t *)v105.f32 = vext_s8(*(int8x8_t *)v113.f32, (int8x8_t)vmls_f32(vmul_f32(v328, *(float32x2_t *)v116.f32), *(float32x2_t *)v86.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL)), 4uLL);
  v105.i64[1] = v113.u32[0];
  float32x4_t v118 = vmlsq_laneq_f32(v117, v105, v86, 3);
  v118.i64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0];
  float32x4_t v119 = vmulq_f32(v115, v116);
  v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
  float32x4_t v330 = v115;
  float32x4_t v120 = vmlaq_n_f32(v118, v115, vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32).f32[0]);
  float32x4_t v121 = vaddq_f32(v120, v120);
  v352.i64[1] = (uint64_t)v378;
  v352.i64[0] = (uint64_t)&unk_26E728CE0;
  v353 = (float32x4_t *)&v356;
  float32x4_t v122 = (float *)v354;
  v354[0] = v112;
  v355[0] = v358;
  float32x2_t v123 = (float *)v355;
  float32x2x2_t v124 = (float32x2x2_t)vzip1q_s32(v112, v358);
  unint64_t v125 = vzip2q_s32(v112, v358).u64[0];
  int32x4_t v126 = vzip1q_s32(v357, (int32x4_t)0);
  v96.i64[0] = vzip2q_s32(v357, (int32x4_t)0).u64[0];
  vst2_f32(v122, v124);
  v355[1] = v100;
  v354[1] = vzip2q_s32((int32x4_t)v124, v126);
  vst2_f32(v123, *(float32x2x2_t *)((char *)&v96 - 8));
  v351 = &v365;
  v350 = &unk_26E728850;
  unsigned int v363 = 1;
  float32x4_t v127 = vmulq_f32(v100, v100);
  v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
  float32x4_t v128 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v100, (int8x16_t)xmmword_23435FD50);
  float32x4_t v129 = vmulq_f32(v128, v128);
  v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
  float32x2_t v130 = vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32);
  float32x2_t v131 = vrsqrte_f32(v130);
  int v132 = 4;
  do
  {
    float32x2_t v131 = vmul_f32(v131, vrsqrts_f32(vmul_f32(v131, v131), v130));
    --v132;
  }
  while (v132);
  v121.i32[3] = 0;
  float32x4_t v338 = v121;
  int8x16_t v133 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v121);
  float32x2_t v134 = vmul_f32(v130, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v130), 0), (int8x8_t)_D8, (int8x8_t)v131));
  float32x2_t v135 = vrecpe_f32(v134);
  int v136 = 4;
  do
  {
    float32x2_t v135 = vmul_f32(v135, vrecps_f32(v134, v135));
    --v136;
  }
  while (v136);
  *(float *)&a9 = *(float *)&a9 + 0.0;
  float32x2_t v137 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v133.i64[1] = vextq_s8(v133, v133, 8uLL).u32[0];
  float32x4_t v342 = (float32x4_t)v133;
  float32x4_t v138 = vmulq_n_f32(v128, v135.f32[0]);
  v138.i32[3] = 0;
  float32x4_t v362 = v138;
  float32x4_t v139 = vnegq_f32(v138);
  v139.i32[3] = 0;
  float32x4_t v387 = v139;
  *(double *)v140.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v352, (float32x2_t *)&v387);
  float32x4_t v347 = v140;
  *(double *)v141.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v350, &v362);
  float32x4_t v142 = v141;
  float32x4_t v143 = vsubq_f32(v347, v141);
  float32x4_t v387 = v143;
  float32x4_t v388 = 0u;
  float32x4_t v389 = 0u;
  int32x4_t v390 = 0u;
  float32x4_t v392 = v347;
  float32x4_t v393 = 0u;
  float32x4_t v394 = 0u;
  long long v395 = 0u;
  float32x4_t v144 = vnegq_f32(v143);
  v144.i32[3] = 0;
  float32x4_t v397 = v142;
  float32x4_t v398 = 0u;
  float32x4_t v399 = 0u;
  long long v400 = 0u;
  int8x8_t v145 = &v351[1].f32[2];
  *(float32x2_t *)v142.f32 = vld1_dup_f32(v145);
  *(float32x2_t *)v142.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v142.f32, 0), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v146 = vadd_f32(v137, *(float32x2_t *)v142.f32);
  float32x2_t v147 = vmul_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v142.f32);
  float32x2_t v148 = vmul_f32(v146, v146);
  float32x4_t v149 = vmulq_f32(v144, v144);
  float32x4_t v150 = vpaddq_f32(v149, v149);
  float32x2_t v151 = vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32);
  float32x2_t v326 = v147;
  *(int32x2_t *)v150.f32 = vcgt_f32(v151, v147);
  int32x4_t v152 = vdupq_lane_s32(*(int32x2_t *)v150.f32, 0);
  v150.i32[0] = -1;
  int32x4_t v325 = (int32x4_t)v150;
  int8x16_t v153 = (int8x16_t)v143;
  v154.i64[0] = -1;
  v154.i64[1] = -1;
  int8x16_t v337 = (int8x16_t)v144;
  float32x4_t v155 = v144;
  float32x2_t v339 = 0;
  while (1)
  {
    int8x16_t v156 = (int8x16_t)v143;
    v157.i64[0] = -1;
    v157.i64[1] = -1;
    *(int16x4_t *)v157.i8 = vmovn_s32(vceqq_s32(v152, v157));
    unsigned __int32 v158 = vuzp1_s8(*(int8x8_t *)v157.i8, *(int8x8_t *)v157.i8).u32[0];
    if (v158 != -1) {
      break;
    }
    float32x4_t v159 = vmulq_f32(v155, v155);
    v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
    float32x2_t v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32);
    float32x2_t v161 = vrsqrte_f32(v160);
    int v162 = 4;
    do
    {
      float32x2_t v161 = vmul_f32(v161, vrsqrts_f32(vmul_f32(v161, v161), v160));
      --v162;
    }
    while (v162);
    int8x16_t v343 = v156;
    float32x2_t v163 = vmul_f32(v160, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v160), 0), (int8x8_t)_D8, (int8x8_t)v161));
    float32x2_t v164 = vrecpe_f32(v163);
    int v165 = 4;
    do
    {
      float32x2_t v164 = vmul_f32(v164, vrecps_f32(v163, v164));
      --v165;
    }
    while (v165);
    float32x4_t v341 = v155;
    float32x4_t v166 = vmulq_n_f32(v155, v164.f32[0]);
    v166.i32[3] = 0;
    float32x4_t v344 = v166;
    float32x4_t v361 = v166;
    float32x4_t v167 = vnegq_f32(v166);
    v167.i32[3] = 0;
    float32x4_t v360 = v167;
    *(double *)v168.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(&v352, (float32x2_t *)&v361);
    float32x4_t v348 = v168;
    *(double *)v169.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v350, &v360);
    float32x4_t v170 = v348;
    float32x4_t v171 = vaddq_f32(v342, v169);
    float32x4_t v143 = vsubq_f32(v348, v171);
    float32x4_t v172 = vnegq_f32(v143);
    v172.i32[3] = 0;
    float32x4_t v173 = vmulq_f32(v344, v172);
    v173.i64[0] = vpaddq_f32(v173, v173).u64[0];
    float32x2_t v174 = vsub_f32(vpadd_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), v146);
    if (v174.f32[0] > 0.0)
    {
      float32x4_t v175 = vmulq_f32(v338, v344);
      v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
      float32x2_t v176 = vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32);
      if (v176.f32[0] >= 0.0) {
        goto LABEL_84;
      }
      float32x2_t v177 = vrecpe_f32(v176);
      int v178 = 4;
      do
      {
        float32x2_t v177 = vmul_f32(v177, vrecps_f32(v176, v177));
        --v178;
      }
      while (v178);
      float32x2_t v179 = vsub_f32(v339, vmul_f32(v174, v177));
      if (vcgt_f32(v179, v339).u8[0])
      {
        if (v179.f32[0] > 1.0)
        {
LABEL_84:
          float32x2_t v278 = 0;
          float32x4_t v276 = 0uLL;
          float32x4_t v280 = 0uLL;
          goto LABEL_90;
        }
        float32x4_t v180 = vmlaq_n_f32((float32x4_t)0, v338, v179.f32[0]);
        v180.i64[1] = vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u32[0];
        float32x4_t v345 = v180;
        float32x4_t v181 = vsubq_f32(v180, v342);
        float32x2_t v340 = v179;
        float32x4_t v397 = vaddq_f32(v181, v397);
        float32x4_t v398 = vaddq_f32(v181, v398);
        float32x4_t v399 = vaddq_f32(v181, v399);
        float32x4_t v387 = vsubq_f32(v392, v397);
        float32x4_t v388 = vsubq_f32(v393, v398);
        float32x4_t v389 = vsubq_f32(v394, v399);
        *(double *)v182.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v350, &v360);
        float32x4_t v170 = v348;
        float32x4_t v171 = vaddq_f32(v345, v182);
        float32x4_t v143 = vsubq_f32(v348, v171);
        float32x2_t v151 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v337 = (int8x16_t)v341;
        float32x4_t v342 = v345;
        float32x2_t v183 = v340;
      }
      else
      {
        float32x2_t v183 = v179;
      }
      float32x2_t v339 = v183;
    }
    uint64_t v184 = v363;
    *(&v392 + v363) = v170;
    *(&v397 + v184) = v171;
    unsigned int v363 = v184 + 1;
    *(&v387 + v184) = v143;
    if (v184 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v387, &v392, &v397, (int *)&v363);
LABEL_41:
      int8x16_t v153 = v343;
      goto LABEL_75;
    }
    if (v184 != 2)
    {
      int8x16_t v153 = v343;
      if (v184 != 1) {
        goto LABEL_75;
      }
      float32x4_t v143 = v387;
      float32x4_t v185 = vsubq_f32(v388, v387);
      float32x4_t v186 = vmulq_f32(v185, v185);
      v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
      float32x2_t v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v187), 0), *(int8x8_t *)v387.f32).u32[0] != -1)
      {
        float32x4_t v188 = vnegq_f32(v387);
        v188.i32[3] = 0;
        float32x4_t v189 = vmulq_f32(v188, v185);
        v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
        float32x2_t v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
        float32x2_t v191 = vrecpe_f32(v187);
        int v192 = 4;
        do
        {
          float32x2_t v191 = vmul_f32(v191, vrecps_f32(v187, v191));
          --v192;
        }
        while (v192);
        float32x4_t v143 = vmlaq_n_f32(v387, v185, vmax_f32(vmin_f32(vmul_f32(v190, v191), _D8), 0).f32[0]);
LABEL_56:
        v143.i64[1] = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u32[0];
        goto LABEL_75;
      }
LABEL_57:
      unsigned int v363 = 1;
      goto LABEL_75;
    }
    float32x4_t v143 = v387;
    float32x4_t v193 = vsubq_f32(v388, v387);
    float32x4_t v194 = vsubq_f32(v389, v387);
    int8x8_t v196 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v193.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v194, (int8x16_t)v194, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v193, (int8x16_t)v193, 4uLL), *(float32x2_t *)v194.f32);
    *(int8x8_t *)v195.f32 = vext_s8(v196, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL), *(float32x2_t *)v194.f32), *(float32x2_t *)v193.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL)), 4uLL);
    v196.i32[1] = 0;
    unsigned int v363 = 3;
    float32x2_t v197 = vpadd_f32(vmul_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32), vmul_f32((float32x2_t)v196.u32[0], (float32x2_t)v196.u32[0]));
    float32x2_t v198 = vpadd_f32(v197, v197);
    if (v198.f32[0] <= 0.00000011921)
    {
      unsigned int v363 = 2;
      float32x4_t v235 = vmulq_f32(v193, v193);
      v235.i64[0] = vpaddq_f32(v235, v235).u64[0];
      float32x2_t v236 = vpadd_f32(*(float32x2_t *)v235.f32, *(float32x2_t *)v235.f32);
      int8x16_t v153 = v343;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v236), 0), *(int8x8_t *)v387.f32).u32[0] != -1)
      {
        float32x4_t v237 = vnegq_f32(v387);
        v237.i32[3] = 0;
        float32x4_t v238 = vmulq_f32(v237, v193);
        v238.i64[0] = vpaddq_f32(v238, v238).u64[0];
        float32x2_t v239 = vpadd_f32(*(float32x2_t *)v238.f32, *(float32x2_t *)v238.f32);
        float32x2_t v240 = vrecpe_f32(v236);
        int v241 = 4;
        do
        {
          float32x2_t v240 = vmul_f32(v240, vrecps_f32(v236, v240));
          --v241;
        }
        while (v241);
        float32x4_t v143 = vmlaq_n_f32(v387, v193, vmax_f32(vmin_f32(vmul_f32(v239, v240), _D8), 0).f32[0]);
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    if (v198.f32[0] == 0.0)
    {
      float32x4_t v143 = 0uLL;
      goto LABEL_41;
    }
    *(int8x8_t *)&v195.u32[2] = v196;
    float32x2_t v199 = (float32x2_t)vextq_s8((int8x16_t)v388, (int8x16_t)v388, 8uLL).u64[0];
    float32x2_t v200 = (float32x2_t)vextq_s8((int8x16_t)v389, (int8x16_t)v389, 8uLL).u64[0];
    float32x2_t v201 = (float32x2_t)vextq_s8((int8x16_t)v389, (int8x16_t)v389, 4uLL).u64[0];
    float32x2_t v202 = (float32x2_t)vextq_s8((int8x16_t)v388, (int8x16_t)v388, 4uLL).u64[0];
    int8x8_t v203 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v388.f32, v201), v202, *(float32x2_t *)v389.f32);
    *(int8x8_t *)v204.f32 = vext_s8(v203, (int8x8_t)vmls_f32(vmul_f32(v199, *(float32x2_t *)v389.f32), *(float32x2_t *)v388.f32, v200), 4uLL);
    v204.i64[1] = v203.u32[0];
    float32x2_t v205 = (float32x2_t)vextq_s8((int8x16_t)v387, (int8x16_t)v387, 8uLL).u64[0];
    float32x2_t v206 = (float32x2_t)vextq_s8((int8x16_t)v387, (int8x16_t)v387, 4uLL).u64[0];
    int8x8_t v207 = (int8x8_t)vmls_f32(vmul_f32(v206, *(float32x2_t *)v389.f32), v201, *(float32x2_t *)v387.f32);
    *(int8x8_t *)v208.f32 = vext_s8(v207, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v387.f32, v200), *(float32x2_t *)v389.f32, v205), 4uLL);
    v208.i64[1] = v207.u32[0];
    int8x8_t v209 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v387.f32, v202), v206, *(float32x2_t *)v388.f32);
    *(int8x8_t *)v210.f32 = vext_s8(v209, (int8x8_t)vmls_f32(vmul_f32(v205, *(float32x2_t *)v388.f32), *(float32x2_t *)v387.f32, v199), 4uLL);
    v210.i64[1] = v209.u32[0];
    float32x4_t v211 = vmulq_f32(v204, v195);
    v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
    float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
    float32x4_t v213 = vmulq_f32(v208, v195);
    v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
    float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
    float32x4_t v215 = vmulq_f32(v210, v195);
    v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
    float32x2_t v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v214), (int8x8_t)vcgez_f32(v212)), (int8x8_t)vcgez_f32(v216)), 0), *(int8x8_t *)v387.f32).u32[0] != -1)
    {
      float32x4_t v217 = vnegq_f32(v387);
      v217.i32[3] = 0;
      float32x4_t v218 = vnegq_f32(v388);
      v218.i32[3] = 0;
      float32x4_t v219 = vmulq_f32(v217, v193);
      v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
      float32x2_t v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
      float32x4_t v221 = vmulq_f32(v193, v218);
      v221.i64[0] = vpaddq_f32(v221, v221).u64[0];
      float32x2_t v222 = vpadd_f32(*(float32x2_t *)v221.f32, *(float32x2_t *)v221.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v220), (int8x8_t)vclez_f32(v222)), (int8x8_t)vclez_f32(v216)), 0), *(int8x8_t *)v387.f32).u32[0] == -1)
      {
        float32x2_t v245 = vsub_f32(v220, v222);
        float32x2_t v246 = vrecpe_f32(v245);
        int v247 = 4;
        do
        {
          float32x2_t v246 = vmul_f32(v246, vrecps_f32(v245, v246));
          --v247;
        }
        while (v247);
        uint64_t v234 = 0;
        float32x4_t v143 = vmlaq_n_f32(v387, v193, vmul_f32(v220, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v245), (float32x2_t)0x3400000034000000), (int8x8_t)v246, 0)).f32[0]);
        v143.i64[1] = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u32[0];
        unsigned int v248 = 2;
        uint64_t v233 = 1;
      }
      else
      {
        float32x4_t v223 = vnegq_f32(v389);
        v223.i32[3] = 0;
        float32x4_t v224 = vmulq_f32(v218, v194);
        v224.i64[0] = vpaddq_f32(v224, v224).u64[0];
        float32x2_t v225 = vpadd_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v224.f32);
        float32x4_t v226 = vmulq_f32(v193, v223);
        v226.i64[0] = vpaddq_f32(v226, v226).u64[0];
        float32x2_t v227 = vpadd_f32(*(float32x2_t *)v226.f32, *(float32x2_t *)v226.f32);
        float32x4_t v228 = vmulq_f32(v194, v223);
        v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
        float32x2_t v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v225, v222), (int8x8_t)vcge_f32(v227, v229)), (int8x8_t)vclez_f32(v212)), 0), *(int8x8_t *)v387.f32).u32[0] != -1)
        {
          float32x4_t v230 = vmulq_f32(v217, v194);
          v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
          float32x2_t v231 = vpadd_f32(*(float32x2_t *)v230.f32, *(float32x2_t *)v230.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v231), (int8x8_t)vclez_f32(v229)), (int8x8_t)vclez_f32(v214)), 0), *(int8x8_t *)v387.f32).u32[0] == -1)
          {
            float32x2_t v254 = vsub_f32(v231, v229);
            float32x2_t v255 = vrecpe_f32(v254);
            int v256 = 4;
            int8x16_t v153 = v343;
            do
            {
              float32x2_t v255 = vmul_f32(v255, vrecps_f32(v254, v255));
              --v256;
            }
            while (v256);
            uint64_t v234 = 0;
            float32x4_t v143 = vmlaq_n_f32(v387, v194, vmul_f32(v231, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v254), (float32x2_t)0x3400000034000000), (int8x8_t)v255, 0)).f32[0]);
            v143.i64[1] = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u32[0];
            uint64_t v233 = 2;
          }
          else
          {
            int8x16_t v153 = v343;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v231), (int8x8_t)vclez_f32(v220)), 0), *(int8x8_t *)v387.f32).u32[0] == -1)
            {
              uint64_t v234 = 0;
              uint64_t v233 = 1;
            }
            else
            {
              *(int16x4_t *)v143.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v222, v225), (int8x8_t)vcgez_f32(v222)), 0);
              *(int8x8_t *)v143.f32 = vuzp1_s8(*(int8x8_t *)v143.f32, *(int8x8_t *)v143.f32);
              __int32 v232 = v143.i32[0];
              float32x4_t v143 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v143, v325), 0), (int8x16_t)v388, (int8x16_t)v389);
              uint64_t v233 = 1;
              if (v232 == -1) {
                uint64_t v234 = 1;
              }
              else {
                uint64_t v234 = 2;
              }
            }
          }
          unsigned int v248 = v233;
          goto LABEL_74;
        }
        float32x2_t v249 = vsub_f32(v225, v222);
        float32x2_t v250 = vadd_f32(v249, vsub_f32(v227, v229));
        float32x2_t v251 = vrecpe_f32(v250);
        int v252 = 4;
        do
        {
          float32x2_t v251 = vmul_f32(v251, vrecps_f32(v250, v251));
          --v252;
        }
        while (v252);
        int8x16_t v253 = (int8x16_t)vmlaq_n_f32(v388, vsubq_f32(v389, v388), vmul_f32(v249, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v250), (float32x2_t)0x3400000034000000), (int8x8_t)v251, 0)).f32[0]);
        v253.i64[1] = vextq_s8(v253, v253, 8uLL).u32[0];
        unsigned int v248 = 2;
        uint64_t v233 = 2;
        uint64_t v234 = 1;
        float32x4_t v143 = (float32x4_t)v253;
      }
      int8x16_t v153 = v343;
LABEL_74:
      float32x4_t v257 = *(&v387 + v233);
      float32x4_t v258 = *(&v392 + v234);
      float32x4_t v259 = *(&v392 + v233);
      float32x4_t v260 = *(&v397 + v234);
      float32x4_t v261 = *(&v397 + v233);
      float32x4_t v387 = *(&v387 + v234);
      float32x4_t v388 = v257;
      float32x4_t v392 = v258;
      float32x4_t v393 = v259;
      float32x4_t v397 = v260;
      float32x4_t v398 = v261;
      unsigned int v363 = v248;
      goto LABEL_75;
    }
    float32x2_t v242 = vrecpe_f32(v198);
    int v243 = 4;
    int8x16_t v153 = v343;
    do
    {
      float32x2_t v242 = vmul_f32(v242, vrecps_f32(v198, v242));
      --v243;
    }
    while (v243);
    float32x4_t v244 = vmulq_f32(v387, v195);
    v244.i64[0] = vpaddq_f32(v244, v244).u64[0];
    float32x4_t v143 = vmulq_n_f32(v195, vmul_f32(v242, vpadd_f32(*(float32x2_t *)v244.f32, *(float32x2_t *)v244.f32)).f32[0]);
    v143.i32[3] = 0;
LABEL_75:
    float32x4_t v155 = vnegq_f32(v143);
    v155.i32[3] = 0;
    float32x4_t v262 = vmulq_f32(v143, v143);
    v262.i64[0] = vpaddq_f32(v262, v262).u64[0];
    float32x2_t v263 = vpadd_f32(*(float32x2_t *)v262.f32, *(float32x2_t *)v262.f32);
    int8x8_t v264 = (int8x8_t)vcgt_f32(v151, v263);
    int8x16_t v154 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v264, (int8x8_t)0x100000001), 0);
    int32x4_t v152 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v263, v148), v264), 0);
    float32x2_t v151 = v263;
  }
  uint64_t v265 = v352.i64[1];
  float32x4_t v266 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v151, v326), 0), v154), 0x1FuLL)), (int8x16_t)v155, v337);
  float32x4_t v267 = vmulq_f32(v266, v266);
  v267.i64[0] = vpaddq_f32(v267, v267).u64[0];
  float32x2_t v268 = vpadd_f32(*(float32x2_t *)v267.f32, *(float32x2_t *)v267.f32);
  float32x2_t v269 = vrsqrte_f32(v268);
  int v270 = 4;
  do
  {
    float32x2_t v269 = vmul_f32(v269, vrsqrts_f32(vmul_f32(v269, v269), v268));
    --v270;
  }
  while (v270);
  float32x2_t v271 = vmul_f32(v268, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v268), 0), (int8x8_t)_D8, (int8x8_t)v269));
  float32x2_t v272 = vrecpe_f32(v271);
  int v273 = 4;
  do
  {
    float32x2_t v272 = vmul_f32(v272, vrecps_f32(v271, v272));
    --v273;
  }
  while (v273);
  int8x16_t v274 = (int8x16_t)vdupq_n_s32(-*(char *)(v352.i64[1] + 32));
  int8x16_t v275 = (int8x16_t)vmulq_n_f32(v266, v272.f32[0]);
  v275.i32[3] = 0;
  float32x4_t v276 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v271), 0), v275));
  v276.i32[3] = 0;
  float32x4_t v277 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v154, 0x1FuLL)), v156, v153);
  float32x4_t v361 = v277;
  float32x2_t v278 = v339;
  if (v363 == 3)
  {
    v360.i64[0] = 0;
    float32x2_t v364 = 0;
    int8x16_t v346 = v274;
    float32x4_t v349 = v276;
    physx::Gu::barycentricCoordinates(&v361, &v387, &v388, &v389, (float32x2_t *)&v360, &v364);
    int8x16_t v274 = v346;
    float32x4_t v276 = v349;
    float32x2_t v278 = v339;
    v154.i32[1] = v392.i32[1];
    float32x4_t v281 = vmulq_n_f32(vsubq_f32(v393, v392), v360.f32[0]);
    v281.i32[3] = 0;
    float32x4_t v282 = vmulq_n_f32(vsubq_f32(v394, v392), v364.f32[0]);
    v282.i32[3] = 0;
    float32x4_t v279 = vaddq_f32(v392, vaddq_f32(v281, v282));
  }
  else if (v363 == 2)
  {
    float32x4_t v283 = vsubq_f32(v387, v277);
    float32x4_t v284 = vsubq_f32(vsubq_f32(v388, v277), v283);
    float32x4_t v285 = vmulq_f32(v284, v284);
    v285.i64[0] = vpaddq_f32(v285, v285).u64[0];
    float32x2_t v286 = vpadd_f32(*(float32x2_t *)v285.f32, *(float32x2_t *)v285.f32);
    float32x2_t v287 = vrecpe_f32(v286);
    int v288 = 4;
    do
    {
      float32x2_t v287 = vmul_f32(v287, vrecps_f32(v286, v287));
      --v288;
    }
    while (v288);
    float32x4_t v289 = vnegq_f32(v283);
    v289.i32[3] = 0;
    float32x4_t v290 = vmulq_f32(v289, v284);
    v290.i64[0] = vpaddq_f32(v290, v290).u64[0];
    float32x4_t v279 = vmlaq_n_f32(v392, vsubq_f32(v393, v392), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v286), (int8x8_t)v287, 0), vpadd_f32(*(float32x2_t *)v290.f32, *(float32x2_t *)v290.f32)).f32[0]);
    v154.i32[1] = 0;
    v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v279 = 0uLL;
    if (v363 == 1) {
      float32x4_t v279 = v392;
    }
  }
  v154.i32[0] = *(_DWORD *)(v265 + 16);
  int8x16_t v291 = (int8x16_t)vmlsq_lane_f32(v279, v276, *(float32x2_t *)v154.i8, 0);
  v291.i64[1] = vextq_s8(v291, v291, 8uLL).u32[0];
  float32x4_t v280 = (float32x4_t)vbslq_s8(v274, v291, (int8x16_t)v279);
LABEL_90:
  if (v158 == -1)
  {
    v278.i32[0] = 2139095039;
  }
  else
  {
    if (v278.f32[0] == 0.0)
    {
      v280.i32[0] = *(_DWORD *)(v352.i64[1] + 16);
      uint64_t v292 = (uint64_t)v351;
      float v293 = v351[1].f32[0];
      v360.i8[0] = 0;
      float32x2_t v396 = 0;
      float32x4_t v392 = 0u;
      float32x4_t v393 = 0u;
      float32x4_t v394 = 0u;
      v387.i64[1] = v352.i64[1];
      v387.i64[0] = (uint64_t)&unk_26E728CE0;
      v388.i64[0] = (uint64_t)v353;
      float32x2x2_t v295 = (float32x2x2_t)v353[2];
      float32x4_t v294 = v353[3];
      int32x4_t v296 = *(int32x4_t *)v353;
      int32x4_t v390 = (int32x4_t)v353[1];
      v391[0] = v295;
      float32x4_t v389 = (float32x4_t)v296;
      float32x2x2_t v297 = (float32x2x2_t)vzip1q_s32(v296, (int32x4_t)v295);
      v295.val[0] = (float32x2_t)vzip2q_s32(v296, (int32x4_t)v295).u64[0];
      int32x4_t v298 = vzip1q_s32(v390, (int32x4_t)0);
      unint64_t v299 = vzip2q_s32(v390, (int32x4_t)0).u64[0];
      v280.f32[0] = (float)(v280.f32[0] + v293) * 100.0;
      unsigned int v300 = &v389;
      float32x2_t v301 = (float *)v391;
      vst2_f32(v300->f32, v297);
      v391[1] = v294;
      int32x4_t v390 = vzip2q_s32((int32x4_t)v297, v298);
      vst2_f32(v301, v295);
      v397.i64[0] = (uint64_t)&unk_26E728850;
      v397.i64[1] = v292;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v387, (uint64_t)&v397, &v362, &v361, &v360, (uint64_t)&v392, v359, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v280.f32, 0), 0.0, v294) != 5)goto LABEL_94; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)&v352) - 5 >= 2)
      {
        float32x4_t v303 = vnegq_f32(v338);
        v303.i32[3] = 0;
        float32x4_t v304 = vmulq_f32(v303, v303);
        v304.i64[0] = vpaddq_f32(v304, v304).u64[0];
        float32x2_t v305 = vpadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v304.f32);
        float32x2_t v306 = vrsqrte_f32(v305);
        int v307 = 4;
        do
        {
          float32x2_t v306 = vmul_f32(v306, vrsqrts_f32(vmul_f32(v306, v306), v305));
          --v307;
        }
        while (v307);
        float32x2_t v308 = vmul_f32(v305, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v305), 0), _D8, (int8x8_t)v306));
        float32x2_t v309 = vrecpe_f32(v308);
        int v310 = 4;
        do
        {
          float32x2_t v309 = vmul_f32(v309, vrecps_f32(v308, v309));
          --v310;
        }
        while (v310);
        float32x4_t v276 = vmulq_n_f32(v303, v309.f32[0]);
        v276.i32[3] = 0;
        float32x2_t v278 = 0;
        float32x4_t v280 = 0uLL;
      }
      else
      {
LABEL_94:
        float32x4_t v276 = v394;
        float32x4_t v280 = v392;
        float32x2_t v278 = vmin_f32(v396, 0);
      }
    }
    float32x4_t v311 = vmulq_n_f32(v280, v331);
    v311.i32[3] = 0;
    int8x8_t v312 = (int8x8_t)vmls_f32(vmul_f32(v332, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v280, (int8x16_t)v280, 4uLL)), v327, *(float32x2_t *)v280.f32);
    *(int8x8_t *)v313.f32 = vext_s8(v312, (int8x8_t)vmls_f32(vmul_f32(v328, *(float32x2_t *)v280.f32), v332, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v280, (int8x16_t)v280, 8uLL)), 4uLL);
    v313.i64[1] = v312.u32[0];
    float32x4_t v314 = vmlaq_f32(v311, v333, v313);
    v314.i64[1] = vextq_s8((int8x16_t)v314, (int8x16_t)v314, 8uLL).u32[0];
    float32x4_t v315 = vmulq_f32(v330, v280);
    v315.i64[0] = vpaddq_f32(v315, v315).u64[0];
    float32x4_t v316 = vmlaq_n_f32(v314, v330, vpadd_f32(*(float32x2_t *)v315.f32, *(float32x2_t *)v315.f32).f32[0]);
    v316.i64[1] = vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL).u32[0];
    v313.i64[0] = 0x4000000040000000;
    v313.i64[1] = 0x4000000040000000;
    float32x4_t v317 = vmlaq_f32(v334, v313, v316);
    v317.i64[1] = vextq_s8((int8x16_t)v317, (int8x16_t)v317, 8uLL).u32[0];
    float32x4_t v318 = vmlaq_n_f32(v317, v329, vmax_f32(v278, 0).f32[0]);
    float32x4_t v319 = vmulq_n_f32(v276, v331);
    v319.i32[3] = 0;
    *(float32x2_t *)v313.f32 = vmls_f32(vmul_f32(v332, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v276, (int8x16_t)v276, 4uLL)), v327, *(float32x2_t *)v276.f32);
    *(int8x8_t *)v316.f32 = vext_s8(*(int8x8_t *)v313.f32, (int8x8_t)vmls_f32(vmul_f32(v328, *(float32x2_t *)v276.f32), v332, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v276, (int8x16_t)v276, 8uLL)), 4uLL);
    v316.i64[1] = v313.u32[0];
    float32x4_t v320 = vmlaq_f32(v319, v333, v316);
    v320.i64[1] = vextq_s8((int8x16_t)v320, (int8x16_t)v320, 8uLL).u32[0];
    float32x4_t v321 = vmulq_f32(v330, v276);
    v321.i64[0] = vpaddq_f32(v321, v321).u64[0];
    float32x4_t v322 = vmlaq_n_f32(v320, v330, vpadd_f32(*(float32x2_t *)v321.f32, *(float32x2_t *)v321.f32).f32[0]);
    float32x4_t v323 = vaddq_f32(v322, v322);
    *(void *)a7 = v323.i64[0];
    *(_DWORD *)(a7 + 8) = v323.i32[2];
    *(void *)a8 = v318.i64[0];
    *(_DWORD *)(a8 + 8) = v318.i32[2];
  }
  return v278.f32[0];
}

BOOL physx::Gu::SweepGeomGeom<physx::Gu::BoxV,physx::Gu::BoxV>(uint64_t *a1, uint64_t *a2, int8x16_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float32x4_t a10)
{
  uint64_t v12 = *a1;
  uint64_t v13 = *a2;
  int v93 = 3;
  char v94 = 0;
  v91[0] = 0;
  v91[1] = 0;
  a10.i64[0] = *(void *)(v12 + 4);
  float32x4_t v14 = a10;
  v14.i32[2] = *(_DWORD *)(v12 + 12);
  float32x2_t v15 = (float32x2_t)vdup_laneq_s32((int32x4_t)v14, 2);
  v14.i32[3] = 0;
  float32x4_t v95 = v14;
  *(float32x2_t *)a10.f32 = vpmin_f32(v15, *(float32x2_t *)a10.f32);
  a10.f32[0] = vpmin_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32).f32[0];
  v91[2] = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, a10.f32[0]);
  float v92 = 0.05 * a10.f32[0];
  int v88 = 3;
  char v89 = 0;
  v86[0] = 0;
  v86[1] = 0;
  a10.i64[0] = *(void *)(v13 + 4);
  float32x4_t v16 = a10;
  v16.i32[2] = *(_DWORD *)(v13 + 12);
  float32x2_t v17 = (float32x2_t)vdup_laneq_s32((int32x4_t)v16, 2);
  v16.i32[3] = 0;
  float32x4_t v90 = v16;
  float32x2_t v18 = vpmin_f32(v17, *(float32x2_t *)a10.f32);
  v18.f32[0] = vpmin_f32(v18, v18).f32[0];
  v86[2] = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, v18.f32[0]);
  float v87 = 0.05 * v18.f32[0];
  *(float *)&a9 = *(float *)&a9 + 0.0;
  float32x4_t v110 = 0u;
  v14.i64[0] = *(void *)(a5 + 16);
  v14.i64[1] = *(unsigned int *)(a5 + 24);
  float32x4_t v19 = *a4;
  v20.i64[0] = *(void *)(a6 + 16);
  v20.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v21 = vnegq_f32(*a4);
  float32x4_t v22 = vsubq_f32(v14, v20);
  float32x4_t v23 = v21;
  v23.i32[3] = 0;
  float32x4_t v84 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v24) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32).u32[0];
  float32x4_t v25 = vmulq_n_f32(v22, v24);
  v25.i32[3] = 0;
  float32x2_t v26 = (float32x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  float32x2_t v27 = (float32x2_t)vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)v26, 4uLL);
  int8x8_t v28 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL)), v27, *(float32x2_t *)v22.f32);
  *(int8x8_t *)v29.f32 = vext_s8(v28, (int8x8_t)vmls_f32(vmul_f32(v26, *(float32x2_t *)v22.f32), *(float32x2_t *)v21.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL)), 4uLL);
  v29.i64[1] = v28.u32[0];
  float32x4_t v30 = vmlaq_laneq_f32(v25, v29, *a4, 3);
  v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
  float32x4_t v31 = vmulq_f32(v23, v22);
  v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
  float32x4_t v32 = vmlaq_n_f32(v30, v23, vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).f32[0]);
  float32x4_t v33 = vaddq_f32(v32, v32);
  v33.i32[3] = 0;
  float32x4_t v34 = *(float32x4_t *)a3;
  v34.i32[3] = 0;
  float32x4_t v35 = vmulq_f32(v34, v23);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  *(float32x2_t *)v29.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32));
  _Q18 = vmulq_laneq_f32(v34, *a4, 3);
  v34.i64[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
  int8x8_t v37 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a3->i8, *(int8x8_t *)v34.f32, 4uLL), *(float32x2_t *)v21.f32), v27, *(float32x2_t *)a3->i8);
  *(int8x8_t *)v16.f32 = vext_s8(v37, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->i8, v26), *(float32x2_t *)v21.f32, *(float32x2_t *)v34.f32), 4uLL);
  *(int8x8_t *)&v16.u32[2] = v37;
  float32x4_t v38 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v23, *(float32x4_t *)a3, 3), _Q18), v16);
  *(int32x2_t *)v21.f32 = vdup_lane_s32(*(int32x2_t *)v38.f32, 1);
  *(int32x2_t *)v23.f32 = vdup_laneq_s32((int32x4_t)v38, 2);
  float32x4_t v39 = vaddq_f32(v38, v38);
  float32x2_t v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v39, 2);
  *(int32x2_t *)v38.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32), 0);
  float32x2_t v41 = vmul_lane_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v39.f32, 1);
  float32x2_t v42 = vmul_laneq_f32(*(float32x2_t *)v23.f32, v39, 2);
  *(float32x2_t *)v21.f32 = vmul_n_f32(*(float32x2_t *)v21.f32, v39.f32[0]);
  float32x2_t v43 = vmul_n_f32(*(float32x2_t *)v23.f32, v39.f32[0]);
  float32x2_t v44 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0), *(float32x2_t *)v29.f32, 1);
  *(float32x2_t *)v23.f32 = vmul_lane_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v39.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1), *(float32x2_t *)v29.f32, 1);
  *(float32x2_t *)v29.f32 = vmul_lane_f32(v40, *(float32x2_t *)v29.f32, 1);
  __asm { FMOV            V18.2S, #1.0 }
  *(float32x2_t *)v38.f32 = vsub_f32(*(float32x2_t *)_Q18.f32, *(float32x2_t *)v38.f32);
  *(int8x8_t *)_Q18.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q18.f32, v41), v42), (int8x8_t)vadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v29.f32), 4uLL);
  _Q18.i64[1] = vsub_f32(v43, *(float32x2_t *)v39.f32).u32[0];
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v29.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v38.f32, v42), 4uLL);
  v21.i64[1] = vadd_f32(*(float32x2_t *)v23.f32, v44).u32[0];
  float32x4_t v106 = _Q18;
  int32x4_t v107 = (int32x4_t)v21;
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)vadd_f32(v43, *(float32x2_t *)v39.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v23.f32, v44), 4uLL);
  v21.i64[1] = vsub_f32(*(float32x2_t *)v38.f32, v41).u32[0];
  v38.i64[0] = a3[1].i64[0];
  v38.i64[1] = a3[1].u32[2];
  v23.i64[0] = a4[1].i64[0];
  v23.i64[1] = a4[1].u32[2];
  int32x4_t v108 = (int32x4_t)v21;
  float32x4_t v109 = v33;
  float32x4_t v85 = v20;
  float32x4_t v49 = v19;
  v49.i32[3] = 0;
  float32x4_t v80 = vsubq_f32(v38, v14);
  float32x4_t v50 = vsubq_f32(vsubq_f32(v23, v20), v80);
  float v82 = v24;
  float32x2_t v83 = *(float32x2_t *)v19.f32;
  float32x4_t v51 = vmulq_n_f32(v50, v24);
  v51.i32[3] = 0;
  v23.i64[0] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
  float32x2_t v52 = (float32x2_t)vext_s8(*(int8x8_t *)v19.f32, *(int8x8_t *)v23.f32, 4uLL);
  float32x2_t v79 = *(float32x2_t *)v23.f32;
  *(float32x2_t *)v21.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL)), v52, *(float32x2_t *)v50.f32);
  *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)v21.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v50.f32), *(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL)), 4uLL);
  v38.i64[1] = v21.u32[0];
  float32x4_t v53 = vmlsq_laneq_f32(v51, v38, v19, 3);
  v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
  float32x4_t v54 = vmulq_f32(v49, v50);
  v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
  float32x4_t v81 = v49;
  float32x4_t v55 = vmlaq_n_f32(v53, v49, vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32).f32[0]);
  float32x4_t v56 = vaddq_f32(v55, v55);
  v56.i32[3] = 0;
  float32x4_t v105 = v56;
  float32x2_t v104 = 0;
  float32x4_t v102 = 0u;
  int8x16_t v103 = 0u;
  uint64_t v101 = 0;
  v97.i64[1] = (uint64_t)v91;
  float32x4_t v98 = &v106;
  float32x4_t v57 = (float *)v99;
  float32x4_t v58 = v109;
  v99[0] = _Q18;
  v100[0] = v108;
  float32x4_t v59 = (float *)v100;
  float32x2x2_t v60 = (float32x2x2_t)vzip1q_s32((int32x4_t)_Q18, v108);
  unint64_t v61 = vzip2q_s32((int32x4_t)_Q18, v108).u64[0];
  int32x4_t v62 = vzip1q_s32(v107, (int32x4_t)0);
  v29.i64[0] = vzip2q_s32(v107, (int32x4_t)0).u64[0];
  vst2_f32(v57, v60);
  v100[1] = v58;
  v99[1] = vzip2q_s32((int32x4_t)v60, v62);
  vst2_f32(v59, *(float32x2x2_t *)((char *)&v29 - 8));
  v96[1] = v86;
  v97.i64[0] = (uint64_t)&unk_26E728B18;
  v96[0] = &unk_26E728AB8;
  BOOL result = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v97, (uint64_t)v96, &v109, (uint64_t)&v101, &v110, &v105, &v104, &v102, *(int32x2_t *)&a9, &v103, 1);
  if (result)
  {
    float32x4_t v64 = vmulq_n_f32((float32x4_t)v103, v82);
    v64.i32[3] = 0;
    float32x2_t v65 = (float32x2_t)vextq_s8(v103, v103, 8uLL).u64[0];
    int8x8_t v66 = (int8x8_t)vmls_f32(vmul_f32(v83, (float32x2_t)vext_s8(*(int8x8_t *)v103.i8, (int8x8_t)v65, 4uLL)), v52, *(float32x2_t *)v103.i8);
    *(int8x8_t *)v67.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32(v79, *(float32x2_t *)v103.i8), v83, v65), 4uLL);
    v67.i64[1] = v66.u32[0];
    float32x4_t v68 = vmlaq_f32(v64, v84, v67);
    v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
    float32x4_t v69 = vmulq_f32(v81, (float32x4_t)v103);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    float32x4_t v70 = vmlaq_n_f32(v68, v81, vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32).f32[0]);
    v70.i64[1] = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL).u32[0];
    v69.i64[0] = 0x4000000040000000;
    v69.i64[1] = 0x4000000040000000;
    float32x4_t v71 = vmlaq_f32(v85, v69, v70);
    v71.i64[1] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u32[0];
    float32x4_t v72 = vmlaq_n_f32(v71, v80, vmax_f32(v104, 0).f32[0]);
    float32x4_t v73 = vmulq_n_f32(v102, v82);
    v73.i32[3] = 0;
    v67.i64[0] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
    int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32(v83, (float32x2_t)vext_s8(*(int8x8_t *)v102.f32, *(int8x8_t *)v67.f32, 4uLL)), v52, *(float32x2_t *)v102.f32);
    *(int8x8_t *)v67.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v79, *(float32x2_t *)v102.f32), v83, *(float32x2_t *)v67.f32), 4uLL);
    v67.i64[1] = v74.u32[0];
    float32x4_t v75 = vmlaq_f32(v73, v84, v67);
    v75.i64[1] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u32[0];
    float32x4_t v76 = vmulq_f32(v81, v102);
    v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
    float32x4_t v77 = vmlaq_n_f32(v75, v81, vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32).f32[0]);
    float32x4_t v78 = vaddq_f32(v77, v77);
    *(void *)a7 = v78.i64[0];
    *(_DWORD *)(a7 + 8) = v78.i32[2];
    *(void *)a8 = v72.i64[0];
    *(_DWORD *)(a8 + 8) = v72.i32[2];
  }
  return result;
}

BOOL physx::Gu::SweepGeomGeom<physx::Gu::BoxV,physx::Gu::ConvexHullV>(uint64_t *a1, uint64_t *a2, int8x16_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int32x4_t a10)
{
  uint64_t v187 = *MEMORY[0x263EF8340];
  uint64_t v12 = *a1;
  uint64_t v13 = *a2;
  int v156 = 3;
  char v157 = 0;
  v154[0] = 0;
  v154[1] = 0;
  a10.i64[0] = *(void *)(v12 + 4);
  int32x4_t v14 = a10;
  v14.i32[2] = *(_DWORD *)(v12 + 12);
  float32x2_t v15 = (float32x2_t)vdup_laneq_s32(v14, 2);
  v14.i32[3] = 0;
  int32x4_t v158 = v14;
  *(float32x2_t *)a10.i8 = vpmin_f32(v15, *(float32x2_t *)a10.i8);
  *(float *)a10.i32 = vpmin_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a10.i8).f32[0];
  v154[2] = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, *(float *)a10.i32);
  float v155 = 0.05 * *(float *)a10.i32;
  char v176 = 0;
  float32x4_t v174 = 0u;
  long long v175 = 0u;
  uint64_t v16 = *(void *)(v13 + 48);
  float32x4_t v17 = *(float32x4_t *)(v13 + 4);
  float32x4_t v18 = v17;
  v18.i32[3] = 0;
  float32x4_t v19 = *(float32x4_t *)(v13 + 16);
  a10.i32[0] = HIDWORD(*(void *)(v13 + 4));
  BOOL v20 = COERCE_FLOAT(*(void *)(v13 + 12)) == 1.0;
  uint64_t v183 = v16;
  uint64_t v185 = *(void *)(v16 + 40) + 20 * *(unsigned __int8 *)(v16 + 39);
  char v186 = *(unsigned char *)(v16 + 38);
  _ZF = v17.f32[0] == 1.0 && *(float *)a10.i32 == 1.0;
  v21.i64[1] = *(unsigned int *)(v16 + 68);
  v21.i64[0] = *(void *)(v16 + 60);
  int32x4_t v23 = (int32x4_t)vmulq_f32(v18, v21);
  float32x2_t v24 = (float32x2_t)vdup_laneq_s32(v23, 2);
  if (!_ZF) {
    BOOL v20 = 0;
  }
  float32x2_t v25 = vpmin_f32(v24, *(float32x2_t *)v23.i8);
  v25.f32[0] = vpmin_f32(v25, v25).f32[0];
  *(float32x2_t *)&long long v175 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v25.f32[0]);
  *((float *)&v175 + 2) = 0.025 * v25.f32[0];
  __asm { FMOV            V1.2S, #1.0 }
  if (v20)
  {
    long long v177 = xmmword_23435FD50;
    long long v178 = xmmword_23435FD60;
    long long v179 = xmmword_23435FD80;
    long long v180 = xmmword_23435FD50;
    long long v181 = xmmword_23435FD60;
    long long v182 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v30 = vrecpeq_f32(v18);
    int v31 = 4;
    do
    {
      float32x4_t v30 = vmulq_f32(v30, vrecpsq_f32(v30, v18));
      --v31;
    }
    while (v31);
    *(int32x2_t *)v32.f32 = vdup_lane_s32(*(int32x2_t *)v17.f32, 0);
    v32.i64[1] = v32.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v32, v18)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
      float32x2_t v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
      float32x2_t v41 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
      float32x4_t v42 = vaddq_f32(v19, v19);
      float32x2_t v43 = vmul_lane_f32(v39, *(float32x2_t *)v42.f32, 1);
      float32x2_t v44 = vmul_laneq_f32(v40, v42, 2);
      float32x2_t v45 = vmul_n_f32(v39, v42.f32[0]);
      float32x2_t v46 = vmul_n_f32(v40, v42.f32[0]);
      float32x2_t v47 = vmul_n_f32(v41, v42.f32[0]);
      float32x2_t v48 = vmul_lane_f32(v40, *(float32x2_t *)v42.f32, 1);
      float32x2_t v49 = vmul_lane_f32(v41, *(float32x2_t *)v42.f32, 1);
      float32x2_t v50 = vmul_laneq_f32(v41, v42, 2);
      *(float32x2_t *)v42.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v42.f32), 0));
      *(int8x8_t *)v51.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v43), v44), (int8x8_t)vadd_f32(v45, v50), 4uLL);
      v51.i64[1] = vsub_f32(v46, v49).u32[0];
      int32x2_t v52 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v45, v50), (int8x8_t)vsub_f32(*(float32x2_t *)v42.f32, v44), 4uLL);
      int8x8_t v53 = (int8x8_t)vadd_f32(v46, v49);
      *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v51.f32, 0), (int8x8_t)v52, 4uLL);
      int8x8_t v55 = (int8x8_t)vdup_lane_s32(v52, 1);
      *(int32x2_t *)v56.f32 = v52;
      v56.i64[1] = vadd_f32(v48, v47).u32[0];
      *(int8x8_t *)v57.f32 = vext_s8(v53, (int8x8_t)vsub_f32(v48, v47), 4uLL);
      *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v51.f32, v55, 4uLL);
      v57.i64[1] = vsub_f32(*(float32x2_t *)v42.f32, v43).u32[0];
      v54.i64[1] = vdup_lane_s32(*(int32x2_t *)v57.f32, 0).u32[0];
      v58.i64[1] = vdup_lane_s32(*(int32x2_t *)v57.f32, 1).u32[0];
      *(int8x8_t *)v59.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v51.u32[2], 0), *(int8x8_t *)&v56.u32[2], 4uLL);
      v59.i64[1] = vdup_lane_s32(*(int32x2_t *)&v57.u32[2], 0).u32[0];
      float32x4_t v60 = vmulq_n_f32(v54, v17.f32[0]);
      v60.i32[3] = 0;
      float32x4_t v61 = vmulq_lane_f32(v58, *(float32x2_t *)v17.f32, 1);
      v61.i32[3] = 0;
      float32x4_t v62 = vmulq_laneq_f32(v59, v17, 2);
      v62.i32[3] = 0;
      float32x4_t v63 = vmulq_n_f32(v60, v51.f32[0]);
      v63.i32[3] = 0;
      float32x4_t v64 = vmulq_lane_f32(v61, *(float32x2_t *)v51.f32, 1);
      v64.i32[3] = 0;
      float32x4_t v65 = vmulq_laneq_f32(v62, v51, 2);
      v65.i32[3] = 0;
      float32x4_t v33 = vaddq_f32(v65, vaddq_f32(v63, v64));
      float32x4_t v66 = vmulq_n_f32(v60, v56.f32[0]);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_lane_f32(v61, *(float32x2_t *)v56.f32, 1);
      v67.i32[3] = 0;
      float32x4_t v68 = vmulq_laneq_f32(v62, v56, 2);
      v68.i32[3] = 0;
      float32x4_t v69 = vaddq_f32(v66, v67);
      float32x4_t v70 = vmulq_n_f32(v60, v57.f32[0]);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_lane_f32(v61, *(float32x2_t *)v57.f32, 1);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_laneq_f32(v62, v57, 2);
      v72.i32[3] = 0;
      float32x4_t v34 = vaddq_f32(v68, v69);
      float32x4_t v35 = vaddq_f32(v72, vaddq_f32(v70, v71));
      long long v177 = (__int128)v33;
      long long v178 = (__int128)v34;
      long long v179 = (__int128)v35;
      float32x4_t v73 = vmulq_n_f32(v54, v30.f32[0]);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_lane_f32(v58, *(float32x2_t *)v30.f32, 1);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_laneq_f32(v59, v30, 2);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_n_f32(v73, v51.f32[0]);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_lane_f32(v74, *(float32x2_t *)v51.f32, 1);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_laneq_f32(v75, v51, 2);
      v78.i32[3] = 0;
      float32x4_t v36 = vaddq_f32(v78, vaddq_f32(v76, v77));
      float32x4_t v79 = vmulq_n_f32(v73, v56.f32[0]);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_lane_f32(v74, *(float32x2_t *)v56.f32, 1);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_laneq_f32(v75, v56, 2);
      v81.i32[3] = 0;
      float32x4_t v82 = vmulq_n_f32(v73, v57.f32[0]);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_lane_f32(v74, *(float32x2_t *)v57.f32, 1);
      v83.i32[3] = 0;
      float32x4_t v37 = vaddq_f32(v81, vaddq_f32(v79, v80));
      float32x4_t v84 = vmulq_laneq_f32(v75, v57, 2);
      v84.i32[3] = 0;
      float32x4_t v38 = vaddq_f32(v84, vaddq_f32(v82, v83));
    }
    else
    {
      v30.i32[3] = 0;
      float32x4_t v33 = vmulq_f32(v18, (float32x4_t)xmmword_23435FD50);
      float32x4_t v34 = vmulq_f32(v18, (float32x4_t)xmmword_23435FD60);
      float32x4_t v35 = vmulq_f32(v18, (float32x4_t)xmmword_23435FD80);
      long long v177 = (__int128)v33;
      long long v178 = (__int128)v34;
      long long v179 = (__int128)v35;
      float32x4_t v36 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD50);
      float32x4_t v37 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD60);
      float32x4_t v38 = vmulq_f32(v30, (float32x4_t)xmmword_23435FD80);
    }
    long long v181 = (__int128)v37;
    long long v182 = (__int128)v38;
    float32x4_t v85 = vmulq_f32(v33, (float32x4_t)0);
    v85.i32[3] = 0;
    float32x4_t v86 = vmulq_f32(v34, (float32x4_t)0);
    v86.i32[3] = 0;
    float32x4_t v87 = vmulq_f32(v35, (float32x4_t)0);
    v87.i32[3] = 0;
    long long v180 = (__int128)v36;
    float32x4_t v174 = vaddq_f32(v87, vaddq_f32(v86, v85));
  }
  uint64_t v184 = *(void *)(v16 + 48);
  *(float *)&a9 = *(float *)&a9 + 0.0;
  float32x4_t v173 = 0u;
  v88.i64[0] = *(void *)(a5 + 16);
  v88.i64[1] = *(unsigned int *)(a5 + 24);
  float32x4_t v89 = *a4;
  v90.i64[0] = *(void *)(a6 + 16);
  v90.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v91 = vnegq_f32(*a4);
  float32x4_t v92 = v91;
  v92.i32[3] = 0;
  float32x4_t v93 = vsubq_f32(v88, v90);
  float32x4_t v152 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v94) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32).u32[0];
  float32x4_t v95 = vmulq_n_f32(v93, v94);
  v95.i32[3] = 0;
  float32x2_t v96 = (float32x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
  float32x2_t v97 = (float32x2_t)vext_s8(*(int8x8_t *)v91.f32, (int8x8_t)v96, 4uLL);
  int8x8_t v98 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v91.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL)), v97, *(float32x2_t *)v93.f32);
  *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(v96, *(float32x2_t *)v93.f32), *(float32x2_t *)v91.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL)), 4uLL);
  v99.i64[1] = v98.u32[0];
  float32x4_t v100 = vmlaq_laneq_f32(v95, v99, *a4, 3);
  v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
  float32x4_t v101 = vmulq_f32(v92, v93);
  v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
  float32x4_t v102 = vmlaq_n_f32(v100, v92, vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0]);
  float32x4_t v103 = vaddq_f32(v102, v102);
  v103.i32[3] = 0;
  float32x4_t v104 = *(float32x4_t *)a3;
  v104.i32[3] = 0;
  float32x4_t v105 = vmulq_f32(v104, v92);
  v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
  float32x2_t v106 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)), vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32));
  float32x4_t v107 = vmulq_laneq_f32(v104, *a4, 3);
  v104.i64[0] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
  int8x8_t v108 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a3->i8, *(int8x8_t *)v104.f32, 4uLL), *(float32x2_t *)v91.f32), v97, *(float32x2_t *)a3->i8);
  *(int8x8_t *)v109.f32 = vext_s8(v108, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->i8, v96), *(float32x2_t *)v91.f32, *(float32x2_t *)v104.f32), 4uLL);
  *(int8x8_t *)&v109.u32[2] = v108;
  float32x4_t v110 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v92, *(float32x4_t *)a3, 3), v107), v109);
  *(int32x2_t *)v91.f32 = vdup_lane_s32(*(int32x2_t *)v110.f32, 1);
  *(int32x2_t *)v92.f32 = vdup_laneq_s32((int32x4_t)v110, 2);
  float32x2x2_t v111 = (float32x2x2_t)vaddq_f32(v110, v110);
  *(float32x2_t *)v110.f32 = vmul_f32(*(float32x2_t *)v110.f32, v111.val[0]);
  float32x2_t v112 = vmul_lane_f32(*(float32x2_t *)v91.f32, v111.val[0], 1);
  float32x2_t v113 = vmul_laneq_f32(*(float32x2_t *)v92.f32, (float32x4_t)v111, 2);
  *(float32x2_t *)v91.f32 = vmul_n_f32(*(float32x2_t *)v91.f32, v111.val[0].f32[0]);
  float32x2_t v114 = vmul_n_f32(*(float32x2_t *)v92.f32, v111.val[0].f32[0]);
  *(float32x2_t *)v92.f32 = vmul_lane_f32(*(float32x2_t *)v92.f32, v111.val[0], 1);
  float32x2_t v115 = vmul_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)v111.val[0], 0), v106, 1);
  *(float32x2_t *)v107.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)v111.val[0], 1), v106, 1);
  v111.val[0] = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v111, 2), v106, 1);
  *(float32x2_t *)v110.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v110.f32, 0));
  *(int8x8_t *)v116.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v112), v113), (int8x8_t)vadd_f32(*(float32x2_t *)v91.f32, v111.val[0]), 4uLL);
  v116.i64[1] = vsub_f32(v114, *(float32x2_t *)v107.f32).u32[0];
  *(int8x8_t *)v91.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v91.f32, v111.val[0]), (int8x8_t)vsub_f32(*(float32x2_t *)v110.f32, v113), 4uLL);
  v91.i64[1] = vadd_f32(*(float32x2_t *)v92.f32, v115).u32[0];
  int32x4_t v169 = v116;
  int32x4_t v170 = (int32x4_t)v91;
  *(int8x8_t *)v116.i8 = vext_s8((int8x8_t)vadd_f32(v114, *(float32x2_t *)v107.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v92.f32, v115), 4uLL);
  v116.i64[1] = vsub_f32(*(float32x2_t *)v110.f32, v112).u32[0];
  v110.i64[0] = a3[1].i64[0];
  v110.i64[1] = a3[1].u32[2];
  v91.i64[0] = a4[1].i64[0];
  v91.i64[1] = a4[1].u32[2];
  int32x4_t v171 = v116;
  float32x4_t v172 = v103;
  float32x4_t v153 = v90;
  float32x4_t v117 = v89;
  v117.i32[3] = 0;
  float32x4_t v148 = vsubq_f32(v110, v88);
  float32x4_t v118 = vsubq_f32(vsubq_f32(v91, v90), v148);
  float v150 = v94;
  float32x2_t v151 = *(float32x2_t *)v89.f32;
  float32x4_t v119 = vmulq_n_f32(v118, v94);
  v119.i32[3] = 0;
  v91.i64[0] = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u64[0];
  float32x2_t v120 = (float32x2_t)vext_s8(*(int8x8_t *)v89.f32, *(int8x8_t *)v91.f32, 4uLL);
  float32x2_t v147 = *(float32x2_t *)v91.f32;
  *(float32x2_t *)v110.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v89.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 4uLL)), v120, *(float32x2_t *)v118.f32);
  *(int8x8_t *)v103.f32 = vext_s8(*(int8x8_t *)v110.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v118.f32), *(float32x2_t *)v89.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL)), 4uLL);
  v103.i64[1] = v110.u32[0];
  float32x4_t v121 = vmlsq_laneq_f32(v119, v103, v89, 3);
  v121.i64[1] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u32[0];
  float32x4_t v122 = vmulq_f32(v117, v118);
  v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
  float32x4_t v149 = v117;
  float32x4_t v123 = vmlaq_n_f32(v121, v117, vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32).f32[0]);
  float32x4_t v124 = vaddq_f32(v123, v123);
  v124.i32[3] = 0;
  float32x4_t v168 = v124;
  float32x2_t v167 = 0;
  float32x4_t v165 = 0u;
  int8x16_t v166 = 0u;
  uint64_t v164 = 0;
  v160.i64[1] = (uint64_t)v154;
  float32x2_t v161 = &v169;
  unint64_t v125 = (float *)v162;
  float32x4_t v126 = v172;
  v162[0] = v169;
  v163[0] = v171;
  float32x4_t v127 = (float *)v163;
  float32x2x2_t v128 = (float32x2x2_t)vzip1q_s32(v169, v171);
  v111.val[0] = (float32x2_t)vzip2q_s32(v169, v171).u64[0];
  int32x4_t v129 = vzip1q_s32(v170, (int32x4_t)0);
  unint64_t v130 = vzip2q_s32(v170, (int32x4_t)0).u64[0];
  vst2_f32(v125, v128);
  v163[1] = v126;
  v162[1] = vzip2q_s32((int32x4_t)v128, v129);
  vst2_f32(v127, v111);
  v159[1] = &v174;
  v160.i64[0] = (uint64_t)&unk_26E728B18;
  v159[0] = &unk_26E728850;
  BOOL result = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v160, (uint64_t)v159, &v172, (uint64_t)&v164, &v173, &v168, &v167, &v165, *(int32x2_t *)&a9, &v166, 1);
  if (result)
  {
    float32x4_t v132 = vmulq_n_f32((float32x4_t)v166, v150);
    v132.i32[3] = 0;
    float32x2_t v133 = (float32x2_t)vextq_s8(v166, v166, 8uLL).u64[0];
    int8x8_t v134 = (int8x8_t)vmls_f32(vmul_f32(v151, (float32x2_t)vext_s8(*(int8x8_t *)v166.i8, (int8x8_t)v133, 4uLL)), v120, *(float32x2_t *)v166.i8);
    *(int8x8_t *)v135.f32 = vext_s8(v134, (int8x8_t)vmls_f32(vmul_f32(v147, *(float32x2_t *)v166.i8), v151, v133), 4uLL);
    v135.i64[1] = v134.u32[0];
    float32x4_t v136 = vmlaq_f32(v132, v152, v135);
    v136.i64[1] = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u32[0];
    float32x4_t v137 = vmulq_f32(v149, (float32x4_t)v166);
    v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
    float32x4_t v138 = vmlaq_n_f32(v136, v149, vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32).f32[0]);
    v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
    v137.i64[0] = 0x4000000040000000;
    v137.i64[1] = 0x4000000040000000;
    float32x4_t v139 = vmlaq_f32(v153, v137, v138);
    v139.i64[1] = vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL).u32[0];
    float32x4_t v140 = vmlaq_n_f32(v139, v148, vmax_f32(v167, 0).f32[0]);
    float32x4_t v141 = vmulq_n_f32(v165, v150);
    v141.i32[3] = 0;
    v135.i64[0] = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u64[0];
    int8x8_t v142 = (int8x8_t)vmls_f32(vmul_f32(v151, (float32x2_t)vext_s8(*(int8x8_t *)v165.f32, *(int8x8_t *)v135.f32, 4uLL)), v120, *(float32x2_t *)v165.f32);
    *(int8x8_t *)v135.f32 = vext_s8(v142, (int8x8_t)vmls_f32(vmul_f32(v147, *(float32x2_t *)v165.f32), v151, *(float32x2_t *)v135.f32), 4uLL);
    v135.i64[1] = v142.u32[0];
    float32x4_t v143 = vmlaq_f32(v141, v152, v135);
    v143.i64[1] = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u32[0];
    float32x4_t v144 = vmulq_f32(v149, v165);
    v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
    float32x4_t v145 = vmlaq_n_f32(v143, v149, vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32).f32[0]);
    float32x4_t v146 = vaddq_f32(v145, v145);
    *(void *)a7 = v146.i64[0];
    *(_DWORD *)(a7 + 8) = v146.i32[2];
    *(void *)a8 = v140.i64[0];
    *(_DWORD *)(a8 + 8) = v140.i32[2];
  }
  return result;
}

BOOL physx::Gu::SweepGeomGeom<physx::Gu::ConvexHullV,physx::Gu::ConvexHullV>(uint64_t *a1, uint64_t *a2, int8x16_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v256 = *MEMORY[0x263EF8340];
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  char v245 = 0;
  float32x4_t v243 = 0u;
  long long v244 = 0u;
  uint64_t v13 = *(void *)(v11 + 48);
  float32x4_t v14 = *(float32x4_t *)(v11 + 4);
  float32x4_t v15 = v14;
  v15.i32[3] = 0;
  float32x4_t v16 = *(float32x4_t *)(v11 + 16);
  LODWORD(v17) = HIDWORD(*(void *)(v11 + 4));
  BOOL v18 = COERCE_FLOAT(*(void *)(v11 + 12)) == 1.0;
  uint64_t v252 = v13;
  uint64_t v254 = *(void *)(v13 + 40) + 20 * *(unsigned __int8 *)(v13 + 39);
  char v255 = *(unsigned char *)(v13 + 38);
  _ZF = v14.f32[0] == 1.0 && v17 == 1.0;
  v19.i64[1] = *(unsigned int *)(v13 + 68);
  v19.i64[0] = *(void *)(v13 + 60);
  int32x4_t v21 = (int32x4_t)vmulq_f32(v15, v19);
  float32x2_t v22 = (float32x2_t)vdup_laneq_s32(v21, 2);
  if (!_ZF) {
    BOOL v18 = 0;
  }
  float32x2_t v23 = vpmin_f32(v22, *(float32x2_t *)v21.i8);
  v23.f32[0] = vpmin_f32(v23, v23).f32[0];
  *(float32x2_t *)&long long v244 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v23.f32[0]);
  *((float *)&v244 + 2) = 0.025 * v23.f32[0];
  __asm { FMOV            V1.2S, #1.0 }
  if (v18)
  {
    long long v246 = xmmword_23435FD50;
    long long v247 = xmmword_23435FD60;
    long long v248 = xmmword_23435FD80;
    long long v249 = xmmword_23435FD50;
    long long v250 = xmmword_23435FD60;
    long long v251 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v28 = vrecpeq_f32(v15);
    int v29 = 4;
    do
    {
      float32x4_t v28 = vmulq_f32(v28, vrecpsq_f32(v28, v15));
      --v29;
    }
    while (v29);
    *(int32x2_t *)v30.f32 = vdup_lane_s32(*(int32x2_t *)v14.f32, 0);
    v30.i64[1] = v30.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v30, v15)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.f32, 1);
      float32x2_t v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)v16, 2);
      float32x2_t v39 = (float32x2_t)vdup_laneq_s32((int32x4_t)v16, 3);
      float32x4_t v40 = vaddq_f32(v16, v16);
      float32x2_t v41 = vmul_lane_f32(v37, *(float32x2_t *)v40.f32, 1);
      float32x2_t v42 = vmul_laneq_f32(v38, v40, 2);
      float32x2_t v43 = vmul_n_f32(v37, v40.f32[0]);
      float32x2_t v44 = vmul_n_f32(v38, v40.f32[0]);
      float32x2_t v45 = vmul_n_f32(v39, v40.f32[0]);
      float32x2_t v46 = vmul_lane_f32(v38, *(float32x2_t *)v40.f32, 1);
      float32x2_t v47 = vmul_lane_f32(v39, *(float32x2_t *)v40.f32, 1);
      float32x2_t v48 = vmul_laneq_f32(v39, v40, 2);
      *(float32x2_t *)v40.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v40.f32), 0));
      *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v41), v42), (int8x8_t)vadd_f32(v43, v48), 4uLL);
      v49.i64[1] = vsub_f32(v44, v47).u32[0];
      int32x2_t v50 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v43, v48), (int8x8_t)vsub_f32(*(float32x2_t *)v40.f32, v42), 4uLL);
      int8x8_t v51 = (int8x8_t)vadd_f32(v44, v47);
      *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 0), (int8x8_t)v50, 4uLL);
      int8x8_t v53 = (int8x8_t)vdup_lane_s32(v50, 1);
      *(int32x2_t *)v54.f32 = v50;
      v54.i64[1] = vadd_f32(v46, v45).u32[0];
      *(int8x8_t *)v55.f32 = vext_s8(v51, (int8x8_t)vsub_f32(v46, v45), 4uLL);
      *(int8x8_t *)v56.f32 = vext_s8(*(int8x8_t *)v49.f32, v53, 4uLL);
      v55.i64[1] = vsub_f32(*(float32x2_t *)v40.f32, v41).u32[0];
      v52.i64[1] = vdup_lane_s32(*(int32x2_t *)v55.f32, 0).u32[0];
      v56.i64[1] = vdup_lane_s32(*(int32x2_t *)v55.f32, 1).u32[0];
      *(int8x8_t *)v57.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v49.u32[2], 0), *(int8x8_t *)&v54.u32[2], 4uLL);
      v57.i64[1] = vdup_lane_s32(*(int32x2_t *)&v55.u32[2], 0).u32[0];
      float32x4_t v58 = vmulq_n_f32(v52, v14.f32[0]);
      v58.i32[3] = 0;
      float32x4_t v59 = vmulq_lane_f32(v56, *(float32x2_t *)v14.f32, 1);
      v59.i32[3] = 0;
      float32x4_t v60 = vmulq_laneq_f32(v57, v14, 2);
      v60.i32[3] = 0;
      float32x4_t v61 = vmulq_n_f32(v58, v49.f32[0]);
      v61.i32[3] = 0;
      float32x4_t v62 = vmulq_lane_f32(v59, *(float32x2_t *)v49.f32, 1);
      v62.i32[3] = 0;
      float32x4_t v63 = vmulq_laneq_f32(v60, v49, 2);
      v63.i32[3] = 0;
      float32x4_t v31 = vaddq_f32(v63, vaddq_f32(v61, v62));
      float32x4_t v64 = vmulq_n_f32(v58, v54.f32[0]);
      v64.i32[3] = 0;
      float32x4_t v65 = vmulq_lane_f32(v59, *(float32x2_t *)v54.f32, 1);
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_laneq_f32(v60, v54, 2);
      v66.i32[3] = 0;
      float32x4_t v67 = vaddq_f32(v64, v65);
      float32x4_t v68 = vmulq_n_f32(v58, v55.f32[0]);
      v68.i32[3] = 0;
      float32x4_t v69 = vmulq_lane_f32(v59, *(float32x2_t *)v55.f32, 1);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_laneq_f32(v60, v55, 2);
      v70.i32[3] = 0;
      float32x4_t v32 = vaddq_f32(v66, v67);
      float32x4_t v33 = vaddq_f32(v70, vaddq_f32(v68, v69));
      long long v246 = (__int128)v31;
      long long v247 = (__int128)v32;
      long long v248 = (__int128)v33;
      float32x4_t v71 = vmulq_n_f32(v52, v28.f32[0]);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_lane_f32(v56, *(float32x2_t *)v28.f32, 1);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_laneq_f32(v57, v28, 2);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_n_f32(v71, v49.f32[0]);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_lane_f32(v72, *(float32x2_t *)v49.f32, 1);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_laneq_f32(v73, v49, 2);
      v76.i32[3] = 0;
      float32x4_t v34 = vaddq_f32(v76, vaddq_f32(v74, v75));
      float32x4_t v77 = vmulq_n_f32(v71, v54.f32[0]);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_lane_f32(v72, *(float32x2_t *)v54.f32, 1);
      v78.i32[3] = 0;
      float32x4_t v79 = vmulq_laneq_f32(v73, v54, 2);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_n_f32(v71, v55.f32[0]);
      v80.i32[3] = 0;
      float32x4_t v81 = vmulq_lane_f32(v72, *(float32x2_t *)v55.f32, 1);
      v81.i32[3] = 0;
      float32x4_t v35 = vaddq_f32(v79, vaddq_f32(v77, v78));
      float32x4_t v82 = vmulq_laneq_f32(v73, v55, 2);
      v82.i32[3] = 0;
      float32x4_t v36 = vaddq_f32(v82, vaddq_f32(v80, v81));
    }
    else
    {
      v28.i32[3] = 0;
      float32x4_t v31 = vmulq_f32(v15, (float32x4_t)xmmword_23435FD50);
      float32x4_t v32 = vmulq_f32(v15, (float32x4_t)xmmword_23435FD60);
      float32x4_t v33 = vmulq_f32(v15, (float32x4_t)xmmword_23435FD80);
      long long v246 = (__int128)v31;
      long long v247 = (__int128)v32;
      long long v248 = (__int128)v33;
      float32x4_t v34 = vmulq_f32(v28, (float32x4_t)xmmword_23435FD50);
      float32x4_t v35 = vmulq_f32(v28, (float32x4_t)xmmword_23435FD60);
      float32x4_t v36 = vmulq_f32(v28, (float32x4_t)xmmword_23435FD80);
    }
    long long v250 = (__int128)v35;
    long long v251 = (__int128)v36;
    float32x4_t v83 = vmulq_f32(v31, (float32x4_t)0);
    v83.i32[3] = 0;
    float32x4_t v84 = vmulq_f32(v32, (float32x4_t)0);
    v84.i32[3] = 0;
    float32x4_t v85 = vmulq_f32(v33, (float32x4_t)0);
    v85.i32[3] = 0;
    long long v249 = (__int128)v34;
    float32x4_t v243 = vaddq_f32(v85, vaddq_f32(v84, v83));
  }
  BOOL v86 = 0;
  uint64_t v253 = *(void *)(v13 + 48);
  char v232 = 0;
  float32x4_t v230 = 0u;
  long long v231 = 0u;
  uint64_t v87 = *(void *)(v12 + 48);
  float32x4_t v88 = *(float32x4_t *)(v12 + 4);
  float32x4_t v89 = v88;
  v89.i32[3] = 0;
  if (v88.f32[0] == 1.0 && v88.f32[1] == 1.0) {
    BOOL v86 = v88.f32[2] == 1.0;
  }
  float32x4_t v90 = *(float32x4_t *)(v12 + 16);
  uint64_t v239 = *(void *)(v12 + 48);
  uint64_t v241 = *(void *)(v87 + 40) + 20 * *(unsigned __int8 *)(v87 + 39);
  char v242 = *(unsigned char *)(v87 + 38);
  v91.i64[0] = *(void *)(v87 + 60);
  v91.i64[1] = *(unsigned int *)(v87 + 68);
  int32x4_t v92 = (int32x4_t)vmulq_f32(v89, v91);
  *(float32x2_t *)v92.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v92, 2), *(float32x2_t *)v92.i8);
  *(float *)v92.i32 = vpmin_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8).f32[0];
  *(float32x2_t *)&long long v231 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v92.i32);
  *((float *)&v231 + 2) = 0.025 * *(float *)v92.i32;
  if (v86)
  {
    long long v233 = xmmword_23435FD50;
    long long v234 = xmmword_23435FD60;
    long long v235 = xmmword_23435FD80;
    long long v236 = xmmword_23435FD50;
    long long v237 = xmmword_23435FD60;
    long long v238 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v93 = vrecpeq_f32(v89);
    int v94 = 4;
    do
    {
      float32x4_t v93 = vmulq_f32(v93, vrecpsq_f32(v93, v89));
      --v94;
    }
    while (v94);
    *(int32x2_t *)v95.f32 = vdup_lane_s32(*(int32x2_t *)v88.f32, 0);
    v95.i64[1] = v95.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v95, v89)), *(int8x8_t *)&a9).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v102 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.f32, 1);
      float32x2_t v103 = (float32x2_t)vdup_laneq_s32((int32x4_t)v90, 2);
      float32x2_t v104 = (float32x2_t)vdup_laneq_s32((int32x4_t)v90, 3);
      float32x4_t v105 = vaddq_f32(v90, v90);
      float32x2_t v106 = vmul_lane_f32(v102, *(float32x2_t *)v105.f32, 1);
      float32x2_t v107 = vmul_laneq_f32(v103, v105, 2);
      float32x2_t v108 = vmul_n_f32(v102, v105.f32[0]);
      float32x2_t v109 = vmul_n_f32(v103, v105.f32[0]);
      float32x2_t v110 = vmul_n_f32(v104, v105.f32[0]);
      float32x2_t v111 = vmul_lane_f32(v103, *(float32x2_t *)v105.f32, 1);
      float32x2_t v112 = vmul_lane_f32(v104, *(float32x2_t *)v105.f32, 1);
      float32x2_t v113 = vmul_laneq_f32(v104, v105, 2);
      *(float32x2_t *)v105.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v105.f32), 0));
      *(int8x8_t *)v114.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v106), v107), (int8x8_t)vadd_f32(v108, v113), 4uLL);
      v114.i64[1] = vsub_f32(v109, v112).u32[0];
      int32x2_t v115 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v108, v113), (int8x8_t)vsub_f32(*(float32x2_t *)v105.f32, v107), 4uLL);
      *(int8x8_t *)v116.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v114.f32, 0), (int8x8_t)v115, 4uLL);
      *(int32x2_t *)v117.f32 = v115;
      v117.i64[1] = vadd_f32(v111, v110).u32[0];
      *(int8x8_t *)v118.f32 = vext_s8((int8x8_t)vadd_f32(v109, v112), (int8x8_t)vsub_f32(v111, v110), 4uLL);
      *(int8x8_t *)v119.f32 = vext_s8(*(int8x8_t *)v114.f32, (int8x8_t)vdup_lane_s32(v115, 1), 4uLL);
      v118.i64[1] = vsub_f32(*(float32x2_t *)v105.f32, v106).u32[0];
      v116.i64[1] = vdup_lane_s32(*(int32x2_t *)v118.f32, 0).u32[0];
      v119.i64[1] = vdup_lane_s32(*(int32x2_t *)v118.f32, 1).u32[0];
      *(int8x8_t *)v120.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v114.u32[2], 0), (int8x8_t)v117.u32[2], 4uLL);
      v120.i64[1] = vdup_lane_s32(*(int32x2_t *)&v118.u32[2], 0).u32[0];
      float32x4_t v121 = vmulq_n_f32(v116, v88.f32[0]);
      v121.i32[3] = 0;
      float32x4_t v122 = vmulq_lane_f32(v119, *(float32x2_t *)v88.f32, 1);
      v122.i32[3] = 0;
      float32x4_t v123 = vmulq_laneq_f32(v120, v88, 2);
      v123.i32[3] = 0;
      float32x4_t v124 = vmulq_n_f32(v121, v114.f32[0]);
      v124.i32[3] = 0;
      float32x4_t v125 = vmulq_lane_f32(v122, *(float32x2_t *)v114.f32, 1);
      v125.i32[3] = 0;
      float32x4_t v126 = vmulq_laneq_f32(v123, v114, 2);
      v126.i32[3] = 0;
      float32x4_t v96 = vaddq_f32(v126, vaddq_f32(v124, v125));
      float32x4_t v127 = vmulq_n_f32(v121, v117.f32[0]);
      v127.i32[3] = 0;
      float32x4_t v128 = vmulq_lane_f32(v122, *(float32x2_t *)v117.f32, 1);
      v128.i32[3] = 0;
      float32x4_t v129 = vmulq_laneq_f32(v123, v117, 2);
      v129.i32[3] = 0;
      float32x4_t v130 = vaddq_f32(v127, v128);
      float32x4_t v131 = vmulq_n_f32(v121, v118.f32[0]);
      v131.i32[3] = 0;
      float32x4_t v132 = vmulq_lane_f32(v122, *(float32x2_t *)v118.f32, 1);
      v132.i32[3] = 0;
      float32x4_t v133 = vmulq_laneq_f32(v123, v118, 2);
      v133.i32[3] = 0;
      float32x4_t v97 = vaddq_f32(v129, v130);
      float32x4_t v98 = vaddq_f32(v133, vaddq_f32(v131, v132));
      long long v233 = (__int128)v96;
      long long v234 = (__int128)v97;
      long long v235 = (__int128)v98;
      float32x4_t v134 = vmulq_n_f32(v116, v93.f32[0]);
      v134.i32[3] = 0;
      float32x4_t v135 = vmulq_lane_f32(v119, *(float32x2_t *)v93.f32, 1);
      v135.i32[3] = 0;
      float32x4_t v136 = vmulq_laneq_f32(v120, v93, 2);
      v136.i32[3] = 0;
      float32x4_t v137 = vmulq_n_f32(v134, v114.f32[0]);
      v137.i32[3] = 0;
      float32x4_t v138 = vmulq_lane_f32(v135, *(float32x2_t *)v114.f32, 1);
      v138.i32[3] = 0;
      float32x4_t v139 = vmulq_laneq_f32(v136, v114, 2);
      v139.i32[3] = 0;
      float32x4_t v99 = vaddq_f32(v139, vaddq_f32(v137, v138));
      float32x4_t v140 = vmulq_n_f32(v134, v117.f32[0]);
      v140.i32[3] = 0;
      float32x4_t v141 = vmulq_lane_f32(v135, *(float32x2_t *)v117.f32, 1);
      v141.i32[3] = 0;
      float32x4_t v142 = vmulq_laneq_f32(v136, v117, 2);
      v142.i32[3] = 0;
      float32x4_t v143 = vmulq_n_f32(v134, v118.f32[0]);
      v143.i32[3] = 0;
      float32x4_t v144 = vmulq_lane_f32(v135, *(float32x2_t *)v118.f32, 1);
      v144.i32[3] = 0;
      float32x4_t v100 = vaddq_f32(v142, vaddq_f32(v140, v141));
      float32x4_t v145 = vmulq_laneq_f32(v136, v118, 2);
      v145.i32[3] = 0;
      float32x4_t v101 = vaddq_f32(v145, vaddq_f32(v143, v144));
    }
    else
    {
      v93.i32[3] = 0;
      float32x4_t v96 = vmulq_f32(v89, (float32x4_t)xmmword_23435FD50);
      float32x4_t v97 = vmulq_f32(v89, (float32x4_t)xmmword_23435FD60);
      float32x4_t v98 = vmulq_f32(v89, (float32x4_t)xmmword_23435FD80);
      long long v233 = (__int128)v96;
      long long v234 = (__int128)v97;
      long long v235 = (__int128)v98;
      float32x4_t v99 = vmulq_f32(v93, (float32x4_t)xmmword_23435FD50);
      float32x4_t v100 = vmulq_f32(v93, (float32x4_t)xmmword_23435FD60);
      float32x4_t v101 = vmulq_f32(v93, (float32x4_t)xmmword_23435FD80);
    }
    long long v237 = (__int128)v100;
    long long v238 = (__int128)v101;
    float32x4_t v146 = vmulq_f32(v96, (float32x4_t)0);
    v146.i32[3] = 0;
    float32x4_t v147 = vmulq_f32(v97, (float32x4_t)0);
    v147.i32[3] = 0;
    float32x4_t v148 = vmulq_f32(v98, (float32x4_t)0);
    v148.i32[3] = 0;
    long long v236 = (__int128)v99;
    float32x4_t v230 = vaddq_f32(v148, vaddq_f32(v147, v146));
  }
  uint64_t v240 = *(void *)(v87 + 48);
  *(float *)&a9 = *(float *)&a9 + 0.0;
  float32x4_t v229 = 0u;
  v149.i64[0] = *(void *)(a5 + 16);
  v149.i64[1] = *(unsigned int *)(a5 + 24);
  float32x4_t v150 = *a4;
  v151.i64[0] = *(void *)(a6 + 16);
  v151.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v152 = vnegq_f32(*a4);
  float32x4_t v153 = v152;
  v153.i32[3] = 0;
  float32x4_t v154 = vsubq_f32(v149, v151);
  float32x4_t v213 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v155) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32).u32[0];
  float32x4_t v156 = vmulq_n_f32(v154, v155);
  v156.i32[3] = 0;
  float32x2_t v157 = (float32x2_t)vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u64[0];
  float32x2_t v158 = (float32x2_t)vext_s8(*(int8x8_t *)v152.f32, (int8x8_t)v157, 4uLL);
  int8x8_t v159 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v152.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 4uLL)), v158, *(float32x2_t *)v154.f32);
  *(int8x8_t *)v160.f32 = vext_s8(v159, (int8x8_t)vmls_f32(vmul_f32(v157, *(float32x2_t *)v154.f32), *(float32x2_t *)v152.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL)), 4uLL);
  v160.i64[1] = v159.u32[0];
  float32x4_t v161 = vmlaq_laneq_f32(v156, v160, *a4, 3);
  v161.i64[1] = vextq_s8((int8x16_t)v161, (int8x16_t)v161, 8uLL).u32[0];
  float32x4_t v162 = vmulq_f32(v153, v154);
  v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
  float32x4_t v163 = vmlaq_n_f32(v161, v153, vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32).f32[0]);
  float32x4_t v164 = vaddq_f32(v163, v163);
  v164.i32[3] = 0;
  float32x4_t v165 = *(float32x4_t *)a3;
  v165.i32[3] = 0;
  float32x4_t v166 = vmulq_f32(v165, v153);
  v166.i64[0] = vpaddq_f32(v166, v166).u64[0];
  float32x2_t v167 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL)), vpadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v166.f32));
  float32x4_t v168 = vmulq_laneq_f32(v165, *a4, 3);
  v165.i64[0] = vextq_s8((int8x16_t)v165, (int8x16_t)v165, 8uLL).u64[0];
  int8x8_t v169 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a3->i8, *(int8x8_t *)v165.f32, 4uLL), *(float32x2_t *)v152.f32), v158, *(float32x2_t *)a3->i8);
  *(int8x8_t *)v170.f32 = vext_s8(v169, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a3->i8, v157), *(float32x2_t *)v152.f32, *(float32x2_t *)v165.f32), 4uLL);
  *(int8x8_t *)&v170.u32[2] = v169;
  float32x4_t v171 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v153, *(float32x4_t *)a3, 3), v168), v170);
  *(int32x2_t *)v152.f32 = vdup_lane_s32(*(int32x2_t *)v171.f32, 1);
  *(int32x2_t *)v153.f32 = vdup_laneq_s32((int32x4_t)v171, 2);
  float32x2x2_t v172 = (float32x2x2_t)vaddq_f32(v171, v171);
  *(float32x2_t *)v171.f32 = vmul_f32(*(float32x2_t *)v171.f32, v172.val[0]);
  float32x2_t v173 = vmul_lane_f32(*(float32x2_t *)v152.f32, v172.val[0], 1);
  float32x2_t v174 = vmul_laneq_f32(*(float32x2_t *)v153.f32, (float32x4_t)v172, 2);
  *(float32x2_t *)v152.f32 = vmul_n_f32(*(float32x2_t *)v152.f32, v172.val[0].f32[0]);
  float32x2_t v175 = vmul_n_f32(*(float32x2_t *)v153.f32, v172.val[0].f32[0]);
  *(float32x2_t *)v153.f32 = vmul_lane_f32(*(float32x2_t *)v153.f32, v172.val[0], 1);
  float32x2_t v176 = vmul_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)v172.val[0], 0), v167, 1);
  *(float32x2_t *)v168.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32((int32x2_t)v172.val[0], 1), v167, 1);
  v172.val[0] = vmul_lane_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v172, 2), v167, 1);
  *(float32x2_t *)v171.f32 = vsub_f32(_D1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v171.f32, 0));
  *(int8x8_t *)v177.i8 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v173), v174), (int8x8_t)vadd_f32(*(float32x2_t *)v152.f32, v172.val[0]), 4uLL);
  v177.i64[1] = vsub_f32(v175, *(float32x2_t *)v168.f32).u32[0];
  *(int8x8_t *)v152.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v152.f32, v172.val[0]), (int8x8_t)vsub_f32(*(float32x2_t *)v171.f32, v174), 4uLL);
  v152.i64[1] = vadd_f32(*(float32x2_t *)v153.f32, v176).u32[0];
  int32x4_t v225 = v177;
  int32x4_t v226 = (int32x4_t)v152;
  *(int8x8_t *)v177.i8 = vext_s8((int8x8_t)vadd_f32(v175, *(float32x2_t *)v168.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v153.f32, v176), 4uLL);
  v177.i64[1] = vsub_f32(*(float32x2_t *)v171.f32, v173).u32[0];
  v171.i64[0] = a3[1].i64[0];
  v171.i64[1] = a3[1].u32[2];
  v152.i64[0] = a4[1].i64[0];
  v152.i64[1] = a4[1].u32[2];
  int32x4_t v227 = v177;
  float32x4_t v228 = v164;
  float32x4_t v214 = v151;
  float32x4_t v178 = v150;
  v178.i32[3] = 0;
  float32x4_t v209 = vsubq_f32(v171, v149);
  float32x4_t v179 = vsubq_f32(vsubq_f32(v152, v151), v209);
  float v211 = v155;
  float32x2_t v212 = *(float32x2_t *)v150.f32;
  float32x4_t v180 = vmulq_n_f32(v179, v155);
  v180.i32[3] = 0;
  v152.i64[0] = vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL).u64[0];
  float32x2_t v181 = (float32x2_t)vext_s8(*(int8x8_t *)v150.f32, *(int8x8_t *)v152.f32, 4uLL);
  float32x2_t v208 = *(float32x2_t *)v152.f32;
  *(float32x2_t *)v171.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v150.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 4uLL)), v181, *(float32x2_t *)v179.f32);
  *(int8x8_t *)v164.f32 = vext_s8(*(int8x8_t *)v171.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v179.f32), *(float32x2_t *)v150.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL)), 4uLL);
  v164.i64[1] = v171.u32[0];
  float32x4_t v182 = vmlsq_laneq_f32(v180, v164, v150, 3);
  v182.i64[1] = vextq_s8((int8x16_t)v182, (int8x16_t)v182, 8uLL).u32[0];
  float32x4_t v183 = vmulq_f32(v178, v179);
  v183.i64[0] = vpaddq_f32(v183, v183).u64[0];
  float32x4_t v210 = v178;
  float32x4_t v184 = vmlaq_n_f32(v182, v178, vpadd_f32(*(float32x2_t *)v183.f32, *(float32x2_t *)v183.f32).f32[0]);
  float32x4_t v185 = vaddq_f32(v184, v184);
  v185.i32[3] = 0;
  float32x4_t v224 = v185;
  float32x2_t v223 = 0;
  float32x4_t v221 = 0u;
  int8x16_t v222 = 0u;
  uint64_t v220 = 0;
  v216.i64[1] = (uint64_t)&v243;
  float32x4_t v217 = &v225;
  char v186 = (float *)v218;
  float32x4_t v187 = v228;
  v218[0] = v225;
  v219[0] = v227;
  float32x4_t v188 = (float *)v219;
  float32x2x2_t v189 = (float32x2x2_t)vzip1q_s32(v225, v227);
  v172.val[0] = (float32x2_t)vzip2q_s32(v225, v227).u64[0];
  int32x4_t v190 = vzip1q_s32(v226, (int32x4_t)0);
  unint64_t v191 = vzip2q_s32(v226, (int32x4_t)0).u64[0];
  vst2_f32(v186, v189);
  v219[1] = v187;
  v218[1] = vzip2q_s32((int32x4_t)v189, v190);
  vst2_f32(v188, v172);
  v215[1] = &v230;
  v216.i64[0] = (uint64_t)&unk_26E728B78;
  v215[0] = &unk_26E728850;
  BOOL result = physx::Gu::gjkRaycastPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v216, (uint64_t)v215, &v228, (uint64_t)&v220, &v229, &v224, &v223, &v221, *(int32x2_t *)&a9, &v222, 1);
  if (result)
  {
    float32x4_t v193 = vmulq_n_f32((float32x4_t)v222, v211);
    v193.i32[3] = 0;
    float32x2_t v194 = (float32x2_t)vextq_s8(v222, v222, 8uLL).u64[0];
    int8x8_t v195 = (int8x8_t)vmls_f32(vmul_f32(v212, (float32x2_t)vext_s8(*(int8x8_t *)v222.i8, (int8x8_t)v194, 4uLL)), v181, *(float32x2_t *)v222.i8);
    *(int8x8_t *)v196.f32 = vext_s8(v195, (int8x8_t)vmls_f32(vmul_f32(v208, *(float32x2_t *)v222.i8), v212, v194), 4uLL);
    v196.i64[1] = v195.u32[0];
    float32x4_t v197 = vmlaq_f32(v193, v213, v196);
    v197.i64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u32[0];
    float32x4_t v198 = vmulq_f32(v210, (float32x4_t)v222);
    v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
    float32x4_t v199 = vmlaq_n_f32(v197, v210, vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32).f32[0]);
    v199.i64[1] = vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL).u32[0];
    v198.i64[0] = 0x4000000040000000;
    v198.i64[1] = 0x4000000040000000;
    float32x4_t v200 = vmlaq_f32(v214, v198, v199);
    v200.i64[1] = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u32[0];
    float32x4_t v201 = vmlaq_n_f32(v200, v209, vmax_f32(v223, 0).f32[0]);
    float32x4_t v202 = vmulq_n_f32(v221, v211);
    v202.i32[3] = 0;
    v196.i64[0] = vextq_s8((int8x16_t)v221, (int8x16_t)v221, 8uLL).u64[0];
    int8x8_t v203 = (int8x8_t)vmls_f32(vmul_f32(v212, (float32x2_t)vext_s8(*(int8x8_t *)v221.f32, *(int8x8_t *)v196.f32, 4uLL)), v181, *(float32x2_t *)v221.f32);
    *(int8x8_t *)v196.f32 = vext_s8(v203, (int8x8_t)vmls_f32(vmul_f32(v208, *(float32x2_t *)v221.f32), v212, *(float32x2_t *)v196.f32), 4uLL);
    v196.i64[1] = v203.u32[0];
    float32x4_t v204 = vmlaq_f32(v202, v213, v196);
    v204.i64[1] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u32[0];
    float32x4_t v205 = vmulq_f32(v210, v221);
    v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
    float32x4_t v206 = vmlaq_n_f32(v204, v210, vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32).f32[0]);
    float32x4_t v207 = vaddq_f32(v206, v206);
    *(void *)a7 = v207.i64[0];
    *(_DWORD *)(a7 + 8) = v207.i32[2];
    *(void *)a8 = v201.i64[0];
    *(_DWORD *)(a8 + 8) = v201.i32[2];
  }
  return result;
}

float physx::Gu::UnimplementedTriangleSweep()
{
  return 1.0e10;
}

float32_t physx::Gu::SweepGeomTriangles<physx::Gu::CapsuleV>(int32x2_t *a1, double a2, uint64_t a3, float32x4_t *a4, int8x8_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v309 = *MEMORY[0x263EF8340];
  int v13 = 4;
  int v290 = 4;
  v286[0] = 0;
  v286[1] = 0;
  int32x2_t v15 = a1[1];
  float32x4_t v14 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)v15.i32);
  v14.i32[3] = 0;
  v15.i32[0] = a1->i32[1];
  float32x4_t v16 = vnegq_f32(v14);
  v16.i32[3] = 0;
  float32x4_t v292 = v14;
  float32x4_t v293 = v16;
  int32x2_t v294 = vdup_lane_s32(v15, 0);
  float v287 = *(float *)v15.i32;
  __int32 v288 = v15.i32[0];
  __int32 v289 = v15.i32[0];
  char v291 = 1;
  v17.i64[0] = *(void *)(a7 + 16);
  v17.i64[1] = *(unsigned int *)(a7 + 24);
  v18.i64[0] = *(void *)(a6 + 16);
  float32x4_t v19 = *a4;
  v18.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v20 = vnegq_f32(*a4);
  float32x4_t v21 = vsubq_f32(v17, v18);
  float32x4_t v22 = v20;
  v22.i32[3] = 0;
  float32x4_t v262 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v23) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v262.f32, *(float32x2_t *)v262.f32).u32[0];
  float32x4_t v24 = vmulq_n_f32(v21, v23);
  v24.i32[3] = 0;
  float32x2_t v25 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  float32x2_t v26 = (float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v25, 4uLL);
  int8x8_t v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL)), v26, *(float32x2_t *)v21.f32);
  *(int8x8_t *)v28.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(v25, *(float32x2_t *)v21.f32), *(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), 4uLL);
  v28.i64[1] = v27.u32[0];
  float32x4_t v29 = vmlaq_laneq_f32(v24, v28, *a4, 3);
  v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
  float32x4_t v30 = vmulq_f32(v22, v21);
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  float32x4_t v31 = vmlaq_n_f32(v29, v22, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
  float32x4_t v32 = vaddq_f32(v31, v31);
  v32.i32[3] = 0;
  float32x4_t v33 = *(float32x4_t *)a5->i8;
  v33.i32[3] = 0;
  float32x2x2_t v34 = (float32x2x2_t)vmulq_f32(v33, v22);
  v34.val[0] = (float32x2_t)vpaddq_f32((float32x4_t)v34, (float32x4_t)v34).u64[0];
  float32x4_t v35 = vmulq_laneq_f32(v33, *a4, 3);
  v33.i64[0] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  int8x8_t v36 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a5, *(int8x8_t *)v33.f32, 4uLL), *(float32x2_t *)v20.f32), v26, (float32x2_t)*a5);
  *(int8x8_t *)v16.f32 = vext_s8(v36, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a5, v25), *(float32x2_t *)v20.f32, *(float32x2_t *)v33.f32), 4uLL);
  *(int8x8_t *)&v16.u32[2] = v36;
  float32x4_t v37 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v22, *(float32x4_t *)a5->i8, 3), v35), v16);
  *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)v37.f32, 1);
  *(int32x2_t *)v22.f32 = vdup_laneq_s32((int32x4_t)v37, 2);
  float32x4_t v38 = vaddq_f32(v37, v37);
  float32x2_t v39 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5->i8, *(int8x16_t *)a5->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), vpadd_f32(v34.val[0], v34.val[0]));
  *(int32x2_t *)v33.f32 = vdup_laneq_s32((int32x4_t)v38, 2);
  *(int32x2_t *)v37.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.f32), 0);
  float32x2_t v40 = vmul_lane_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v38.f32, 1);
  float32x2_t v41 = vmul_laneq_f32(*(float32x2_t *)v22.f32, v38, 2);
  *(float32x2_t *)v20.f32 = vmul_n_f32(*(float32x2_t *)v20.f32, v38.f32[0]);
  float32x2_t v42 = vmul_n_f32(*(float32x2_t *)v22.f32, v38.f32[0]);
  v34.val[0] = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0), v39, 1);
  *(float32x2_t *)v22.f32 = vmul_lane_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v38.f32, 1);
  *(float32x2_t *)v38.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 1), v39, 1);
  float32x2_t v43 = vmul_lane_f32(*(float32x2_t *)v33.f32, v39, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(int8x8_t *)v33.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v40), v41), (int8x8_t)vadd_f32(*(float32x2_t *)v20.f32, v43), 4uLL);
  v33.i64[1] = vsub_f32(v42, *(float32x2_t *)v38.f32).u32[0];
  *(float32x2_t *)v37.f32 = vsub_f32(_D8, *(float32x2_t *)v37.f32);
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v20.f32, v43), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v41), 4uLL);
  v20.i64[1] = vadd_f32(*(float32x2_t *)v22.f32, v34.val[0]).u32[0];
  *(int8x8_t *)v22.f32 = vext_s8((int8x8_t)vadd_f32(v42, *(float32x2_t *)v38.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v22.f32, v34.val[0]), 4uLL);
  v22.i64[1] = vsub_f32(*(float32x2_t *)v37.f32, v40).u32[0];
  *(int8x8_t *)v37.f32 = a5[2];
  v37.i64[1] = a5[3].u32[0];
  v49.i64[0] = a4[1].i64[0];
  v49.i64[1] = a4[1].u32[2];
  int32x4_t v278 = (int32x4_t)v33;
  int32x4_t v279 = (int32x4_t)v20;
  float32x4_t v263 = v18;
  float32x4_t v50 = v19;
  v50.i32[3] = 0;
  float32x4_t v258 = vsubq_f32(v37, v17);
  float32x4_t v51 = vsubq_f32(vsubq_f32(v49, v18), v258);
  float v260 = v23;
  float32x2_t v261 = *(float32x2_t *)v19.f32;
  float32x4_t v52 = vmulq_n_f32(v51, v23);
  v52.i32[3] = 0;
  float32x2_t v257 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
  float32x2_t v256 = (float32x2_t)vext_s8(*(int8x8_t *)v19.f32, (int8x8_t)v257, 4uLL);
  *(float32x2_t *)v49.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL)), v256, *(float32x2_t *)v51.f32);
  *(int8x8_t *)v20.f32 = vext_s8(*(int8x8_t *)v49.f32, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v51.f32), *(float32x2_t *)v19.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), 4uLL);
  v20.i64[1] = v49.u32[0];
  float32x4_t v53 = vmlsq_laneq_f32(v52, v20, v19, 3);
  v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
  float32x4_t v280 = v22;
  float32x4_t v281 = v32;
  float32x4_t v54 = vmulq_f32(v50, v51);
  v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
  float32x4_t v259 = v50;
  float32x4_t v55 = vmlaq_n_f32(v53, v50, vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32).f32[0]);
  float32x4_t v56 = vaddq_f32(v55, v55);
  v274.i64[1] = a11;
  int8x16_t v275 = &v278;
  float32x4_t v57 = (float *)v276;
  v277[0] = v22;
  v277[1] = v32;
  v276[0] = v33;
  float32x4_t v58 = (float *)v277;
  float32x2x2_t v59 = (float32x2x2_t)vzip1q_s32((int32x4_t)v33, (int32x4_t)v22);
  v34.val[0] = (float32x2_t)vzip2q_s32(v278, (int32x4_t)v22).u64[0];
  int32x4_t v60 = vzip1q_s32(v279, (int32x4_t)0);
  v35.i64[0] = vzip2q_s32(v279, (int32x4_t)0).u64[0];
  vst2_f32(v57, v59);
  vst2_f32(v58, v34);
  v276[1] = vzip2q_s32((int32x4_t)v59, v60);
  v274.i64[0] = (uint64_t)&unk_26E728D40;
  unsigned int v283 = 1;
  float32x4_t v61 = vmulq_f32(v32, v32);
  v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
  float32x4_t v62 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v32, (int8x16_t)xmmword_23435FD50);
  float32x4_t v63 = vmulq_f32(v62, v62);
  v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
  float32x2_t v64 = vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32);
  float32x2_t v65 = vrsqrte_f32(v64);
  do
  {
    float32x2_t v65 = vmul_f32(v65, vrsqrts_f32(vmul_f32(v65, v65), v64));
    --v13;
  }
  while (v13);
  v56.i32[3] = 0;
  float32x4_t v265 = v56;
  int8x16_t v66 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v56);
  float32x2_t v67 = vmul_f32(v64, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v64), 0), (int8x8_t)_D8, (int8x8_t)v65));
  float32x2_t v68 = vrecpe_f32(v67);
  int v69 = 4;
  do
  {
    float32x2_t v68 = vmul_f32(v68, vrecps_f32(v67, v68));
    --v69;
  }
  while (v69);
  *(float *)&a2 = *(float *)v15.i32 + *(float *)&a2;
  float32x2_t v70 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
  v66.i64[1] = vextq_s8(v66, v66, 8uLL).u32[0];
  float32x4_t v268 = (float32x4_t)v66;
  float32x4_t v71 = vmulq_n_f32(v62, v68.f32[0]);
  v71.i32[3] = 0;
  float32x4_t v271 = v71;
  float32x4_t v72 = vnegq_f32(v71);
  v72.i32[3] = 0;
  float32x4_t v295 = v72;
  *(double *)v73.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v274, (float32x2_t *)&v295);
  float32x4_t v74 = v73;
  float32x4_t v75 = vmulq_f32(v271, v292);
  v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
  float32x4_t v76 = vmulq_f32(v271, v293);
  v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
  float32x4_t v77 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32)), 0), (int8x16_t)v292, (int8x16_t)v293);
  float32x4_t v78 = vsubq_f32(v73, v77);
  float32x4_t v295 = v78;
  float32x4_t v296 = 0u;
  float32x4_t v297 = 0u;
  int32x4_t v298 = 0u;
  float32x4_t v300 = v74;
  float32x4_t v301 = 0u;
  float32x4_t v79 = vnegq_f32(v78);
  v79.i32[3] = 0;
  float32x4_t v302 = 0u;
  long long v303 = 0u;
  float32x2_t v80 = vadd_f32(v70, 0);
  float32x2_t v81 = vmul_f32(v80, v80);
  float32x4_t v82 = vmulq_f32(v79, v79);
  float32x4_t v83 = vpaddq_f32(v82, v82);
  float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
  *(int32x2_t *)v83.f32 = vcgtz_f32(v84);
  int32x4_t v85 = vdupq_lane_s32(*(int32x2_t *)v83.f32, 0);
  float32x4_t v305 = v77;
  float32x4_t v306 = 0u;
  float32x4_t v307 = 0u;
  long long v308 = 0u;
  v83.i32[0] = -1;
  int32x4_t v255 = (int32x4_t)v83;
  int8x16_t v86 = (int8x16_t)v78;
  v87.i64[0] = -1;
  v87.i64[1] = -1;
  int8x16_t v264 = (int8x16_t)v79;
  float32x2_t v266 = 0;
  while (1)
  {
    int8x16_t v88 = (int8x16_t)v78;
    v89.i64[0] = -1;
    v89.i64[1] = -1;
    *(int16x4_t *)v89.i8 = vmovn_s32(vceqq_s32(v85, v89));
    unsigned __int32 v90 = vuzp1_s8(*(int8x8_t *)v89.i8, *(int8x8_t *)v89.i8).u32[0];
    if (v90 != -1) {
      break;
    }
    float32x4_t v91 = vmulq_f32(v79, v79);
    v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
    float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
    float32x2_t v93 = vrsqrte_f32(v92);
    int v94 = 4;
    do
    {
      float32x2_t v93 = vmul_f32(v93, vrsqrts_f32(vmul_f32(v93, v93), v92));
      --v94;
    }
    while (v94);
    int8x16_t v269 = v88;
    float32x2_t v95 = vmul_f32(v92, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v92), 0), (int8x8_t)_D8, (int8x8_t)v93));
    float32x2_t v96 = vrecpe_f32(v95);
    int v97 = 4;
    do
    {
      float32x2_t v96 = vmul_f32(v96, vrecps_f32(v95, v96));
      --v97;
    }
    while (v97);
    float32x4_t v267 = v79;
    float32x4_t v98 = vmulq_n_f32(v79, v96.f32[0]);
    v98.i32[3] = 0;
    float32x4_t v282 = v98;
    float32x4_t v99 = vnegq_f32(v98);
    v99.i32[3] = 0;
    float32x4_t v272 = v99;
    *(double *)v100.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v274, (float32x2_t *)&v282);
    float32x4_t v101 = v100;
    float32x4_t v102 = vmulq_f32(v272, v292);
    v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
    float32x4_t v103 = vmulq_f32(v272, v293);
    v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
    float32x4_t v104 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32), vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32)), 0), (int8x16_t)v292, (int8x16_t)v293);
    float32x4_t v105 = vaddq_f32(v268, v104);
    float32x4_t v78 = vsubq_f32(v100, v105);
    float32x4_t v106 = vnegq_f32(v78);
    v106.i32[3] = 0;
    float32x4_t v107 = vmulq_f32(v282, v106);
    v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
    float32x2_t v108 = vsub_f32(vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32), v80);
    if (v108.f32[0] > 0.0)
    {
      float32x4_t v109 = vmulq_f32(v265, v282);
      v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
      float32x2_t v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
      if (v110.f32[0] >= 0.0) {
        goto LABEL_70;
      }
      float32x2_t v111 = vrecpe_f32(v110);
      int v112 = 4;
      do
      {
        float32x2_t v111 = vmul_f32(v111, vrecps_f32(v110, v111));
        --v112;
      }
      while (v112);
      float32x2_t v113 = vsub_f32(v266, vmul_f32(v108, v111));
      if (vcgt_f32(v113, v266).u8[0])
      {
        if (v113.f32[0] > 1.0)
        {
LABEL_70:
          float32x2_t v210 = 0;
          float32x4_t v208 = 0uLL;
          float32x4_t v212 = 0uLL;
          goto LABEL_76;
        }
        float32x4_t v114 = vmlaq_n_f32((float32x4_t)0, v265, v113.f32[0]);
        v114.i64[1] = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u32[0];
        float32x4_t v115 = vsubq_f32(v114, v268);
        float32x4_t v305 = vaddq_f32(v115, v305);
        float32x4_t v306 = vaddq_f32(v115, v306);
        float32x4_t v307 = vaddq_f32(v115, v307);
        float32x4_t v295 = vsubq_f32(v300, v305);
        float32x4_t v296 = vsubq_f32(v301, v306);
        float32x4_t v297 = vsubq_f32(v302, v307);
        float32x4_t v105 = vaddq_f32(v104, v114);
        float32x4_t v78 = vsubq_f32(v101, v105);
        float32x2_t v84 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        int8x16_t v264 = (int8x16_t)v267;
        float32x4_t v268 = v114;
      }
      float32x2_t v266 = v113;
    }
    uint64_t v116 = v283;
    *(&v300 + v283) = v101;
    *(&v305 + v116) = v105;
    unsigned int v283 = v116 + 1;
    *(&v295 + v116) = v78;
    if (v116 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v295, &v300, &v305, (int *)&v283);
LABEL_27:
      int8x16_t v86 = v269;
      goto LABEL_61;
    }
    if (v116 != 2)
    {
      int8x16_t v86 = v269;
      if (v116 != 1) {
        goto LABEL_61;
      }
      float32x4_t v78 = v295;
      float32x4_t v117 = vsubq_f32(v296, v295);
      float32x4_t v118 = vmulq_f32(v117, v117);
      v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
      float32x2_t v119 = vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v119), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
      {
        float32x4_t v120 = vnegq_f32(v295);
        v120.i32[3] = 0;
        float32x4_t v121 = vmulq_f32(v120, v117);
        v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
        float32x2_t v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
        float32x2_t v123 = vrecpe_f32(v119);
        int v124 = 4;
        do
        {
          float32x2_t v123 = vmul_f32(v123, vrecps_f32(v119, v123));
          --v124;
        }
        while (v124);
        float32x4_t v78 = vmlaq_n_f32(v295, v117, vmax_f32(vmin_f32(vmul_f32(v122, v123), _D8), 0).f32[0]);
LABEL_42:
        v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      unsigned int v283 = 1;
      goto LABEL_61;
    }
    float32x4_t v78 = v295;
    float32x4_t v125 = vsubq_f32(v296, v295);
    float32x4_t v126 = vsubq_f32(v297, v295);
    int8x8_t v128 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v125.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 4uLL), *(float32x2_t *)v126.f32);
    *(int8x8_t *)v127.f32 = vext_s8(v128, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL), *(float32x2_t *)v126.f32), *(float32x2_t *)v125.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL)), 4uLL);
    v128.i32[1] = 0;
    unsigned int v283 = 3;
    float32x2_t v129 = vpadd_f32(vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), vmul_f32((float32x2_t)v128.u32[0], (float32x2_t)v128.u32[0]));
    float32x2_t v130 = vpadd_f32(v129, v129);
    if (v130.f32[0] <= 0.00000011921)
    {
      unsigned int v283 = 2;
      float32x4_t v167 = vmulq_f32(v125, v125);
      v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
      float32x2_t v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
      int8x16_t v86 = v269;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v168), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
      {
        float32x4_t v169 = vnegq_f32(v295);
        v169.i32[3] = 0;
        float32x4_t v170 = vmulq_f32(v169, v125);
        v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
        float32x2_t v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
        float32x2_t v172 = vrecpe_f32(v168);
        int v173 = 4;
        do
        {
          float32x2_t v172 = vmul_f32(v172, vrecps_f32(v168, v172));
          --v173;
        }
        while (v173);
        float32x4_t v78 = vmlaq_n_f32(v295, v125, vmax_f32(vmin_f32(vmul_f32(v171, v172), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v130.f32[0] == 0.0)
    {
      float32x4_t v78 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v127.u32[2] = v128;
    float32x2_t v131 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 8uLL).u64[0];
    float32x2_t v132 = (float32x2_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u64[0];
    float32x2_t v133 = (float32x2_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 4uLL).u64[0];
    float32x2_t v134 = (float32x2_t)vextq_s8((int8x16_t)v296, (int8x16_t)v296, 4uLL).u64[0];
    int8x8_t v135 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v296.f32, v133), v134, *(float32x2_t *)v297.f32);
    *(int8x8_t *)v136.f32 = vext_s8(v135, (int8x8_t)vmls_f32(vmul_f32(v131, *(float32x2_t *)v297.f32), *(float32x2_t *)v296.f32, v132), 4uLL);
    v136.i64[1] = v135.u32[0];
    float32x2_t v137 = (float32x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL).u64[0];
    float32x2_t v138 = (float32x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 4uLL).u64[0];
    int8x8_t v139 = (int8x8_t)vmls_f32(vmul_f32(v138, *(float32x2_t *)v297.f32), v133, *(float32x2_t *)v295.f32);
    *(int8x8_t *)v140.f32 = vext_s8(v139, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v295.f32, v132), *(float32x2_t *)v297.f32, v137), 4uLL);
    v140.i64[1] = v139.u32[0];
    int8x8_t v141 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v295.f32, v134), v138, *(float32x2_t *)v296.f32);
    *(int8x8_t *)v142.f32 = vext_s8(v141, (int8x8_t)vmls_f32(vmul_f32(v137, *(float32x2_t *)v296.f32), *(float32x2_t *)v295.f32, v131), 4uLL);
    v142.i64[1] = v141.u32[0];
    float32x4_t v143 = vmulq_f32(v136, v127);
    v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
    float32x2_t v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
    float32x4_t v145 = vmulq_f32(v140, v127);
    v145.i64[0] = vpaddq_f32(v145, v145).u64[0];
    float32x2_t v146 = vpadd_f32(*(float32x2_t *)v145.f32, *(float32x2_t *)v145.f32);
    float32x4_t v147 = vmulq_f32(v142, v127);
    v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
    float32x2_t v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v146), (int8x8_t)vcgez_f32(v144)), (int8x8_t)vcgez_f32(v148)), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
    {
      float32x4_t v149 = vnegq_f32(v295);
      v149.i32[3] = 0;
      float32x4_t v150 = vnegq_f32(v296);
      v150.i32[3] = 0;
      float32x4_t v151 = vmulq_f32(v149, v125);
      v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
      float32x2_t v152 = vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32);
      float32x4_t v153 = vmulq_f32(v125, v150);
      v153.i64[0] = vpaddq_f32(v153, v153).u64[0];
      float32x2_t v154 = vpadd_f32(*(float32x2_t *)v153.f32, *(float32x2_t *)v153.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v152), (int8x8_t)vclez_f32(v154)), (int8x8_t)vclez_f32(v148)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
      {
        float32x2_t v177 = vsub_f32(v152, v154);
        float32x2_t v178 = vrecpe_f32(v177);
        int v179 = 4;
        do
        {
          float32x2_t v178 = vmul_f32(v178, vrecps_f32(v177, v178));
          --v179;
        }
        while (v179);
        uint64_t v166 = 0;
        float32x4_t v78 = vmlaq_n_f32(v295, v125, vmul_f32(v152, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v177), (float32x2_t)0x3400000034000000), (int8x8_t)v178, 0)).f32[0]);
        v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
        unsigned int v180 = 2;
        uint64_t v165 = 1;
      }
      else
      {
        float32x4_t v155 = vnegq_f32(v297);
        v155.i32[3] = 0;
        float32x4_t v156 = vmulq_f32(v150, v126);
        v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
        float32x2_t v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
        float32x4_t v158 = vmulq_f32(v125, v155);
        v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
        float32x2_t v159 = vpadd_f32(*(float32x2_t *)v158.f32, *(float32x2_t *)v158.f32);
        float32x4_t v160 = vmulq_f32(v126, v155);
        v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
        float32x2_t v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v157, v154), (int8x8_t)vcge_f32(v159, v161)), (int8x8_t)vclez_f32(v144)), 0), *(int8x8_t *)v295.f32).u32[0] != -1)
        {
          float32x4_t v162 = vmulq_f32(v149, v126);
          v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
          float32x2_t v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v163), (int8x8_t)vclez_f32(v161)), (int8x8_t)vclez_f32(v146)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
          {
            float32x2_t v186 = vsub_f32(v163, v161);
            float32x2_t v187 = vrecpe_f32(v186);
            int v188 = 4;
            int8x16_t v86 = v269;
            do
            {
              float32x2_t v187 = vmul_f32(v187, vrecps_f32(v186, v187));
              --v188;
            }
            while (v188);
            uint64_t v166 = 0;
            float32x4_t v78 = vmlaq_n_f32(v295, v126, vmul_f32(v163, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v186), (float32x2_t)0x3400000034000000), (int8x8_t)v187, 0)).f32[0]);
            v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
            uint64_t v165 = 2;
          }
          else
          {
            int8x16_t v86 = v269;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v163), (int8x8_t)vclez_f32(v152)), 0), *(int8x8_t *)v295.f32).u32[0] == -1)
            {
              uint64_t v166 = 0;
              uint64_t v165 = 1;
            }
            else
            {
              *(int16x4_t *)v78.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v154, v157), (int8x8_t)vcgez_f32(v154)), 0);
              *(int8x8_t *)v78.f32 = vuzp1_s8(*(int8x8_t *)v78.f32, *(int8x8_t *)v78.f32);
              __int32 v164 = v78.i32[0];
              float32x4_t v78 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v78, v255), 0), (int8x16_t)v296, (int8x16_t)v297);
              uint64_t v165 = 1;
              if (v164 == -1) {
                uint64_t v166 = 1;
              }
              else {
                uint64_t v166 = 2;
              }
            }
          }
          unsigned int v180 = v165;
          goto LABEL_60;
        }
        float32x2_t v181 = vsub_f32(v157, v154);
        float32x2_t v182 = vadd_f32(v181, vsub_f32(v159, v161));
        float32x2_t v183 = vrecpe_f32(v182);
        int v184 = 4;
        do
        {
          float32x2_t v183 = vmul_f32(v183, vrecps_f32(v182, v183));
          --v184;
        }
        while (v184);
        int8x16_t v185 = (int8x16_t)vmlaq_n_f32(v296, vsubq_f32(v297, v296), vmul_f32(v181, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v182), (float32x2_t)0x3400000034000000), (int8x8_t)v183, 0)).f32[0]);
        v185.i64[1] = vextq_s8(v185, v185, 8uLL).u32[0];
        unsigned int v180 = 2;
        uint64_t v165 = 2;
        uint64_t v166 = 1;
        float32x4_t v78 = (float32x4_t)v185;
      }
      int8x16_t v86 = v269;
LABEL_60:
      float32x4_t v189 = *(&v295 + v165);
      float32x4_t v190 = *(&v300 + v166);
      float32x4_t v191 = *(&v300 + v165);
      float32x4_t v192 = *(&v305 + v166);
      float32x4_t v193 = *(&v305 + v165);
      float32x4_t v295 = *(&v295 + v166);
      float32x4_t v296 = v189;
      float32x4_t v300 = v190;
      float32x4_t v301 = v191;
      float32x4_t v305 = v192;
      float32x4_t v306 = v193;
      unsigned int v283 = v180;
      goto LABEL_61;
    }
    float32x2_t v174 = vrecpe_f32(v130);
    int v175 = 4;
    int8x16_t v86 = v269;
    do
    {
      float32x2_t v174 = vmul_f32(v174, vrecps_f32(v130, v174));
      --v175;
    }
    while (v175);
    float32x4_t v176 = vmulq_f32(v295, v127);
    v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
    float32x4_t v78 = vmulq_n_f32(v127, vmul_f32(v174, vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32)).f32[0]);
    v78.i32[3] = 0;
LABEL_61:
    float32x4_t v79 = vnegq_f32(v78);
    v79.i32[3] = 0;
    float32x4_t v194 = vmulq_f32(v78, v78);
    v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
    float32x2_t v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
    int8x8_t v196 = (int8x8_t)vcgt_f32(v84, v195);
    int8x16_t v87 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v196, (int8x8_t)0x100000001), 0);
    int32x4_t v85 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v195, v81), v196), 0);
    float32x2_t v84 = v195;
  }
  uint64_t v197 = v274.i64[1];
  float32x4_t v198 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v84, 0), 0), v87), 0x1FuLL)), (int8x16_t)v79, v264);
  float32x4_t v199 = vmulq_f32(v198, v198);
  v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
  float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
  float32x2_t v201 = vrsqrte_f32(v200);
  int v202 = 4;
  do
  {
    float32x2_t v201 = vmul_f32(v201, vrsqrts_f32(vmul_f32(v201, v201), v200));
    --v202;
  }
  while (v202);
  float32x2_t v203 = vmul_f32(v200, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v200), 0), (int8x8_t)_D8, (int8x8_t)v201));
  float32x2_t v204 = vrecpe_f32(v203);
  int v205 = 4;
  do
  {
    float32x2_t v204 = vmul_f32(v204, vrecps_f32(v203, v204));
    --v205;
  }
  while (v205);
  int8x16_t v206 = (int8x16_t)vdupq_n_s32(-*(char *)(v274.i64[1] + 32));
  int8x16_t v207 = (int8x16_t)vmulq_n_f32(v198, v204.f32[0]);
  v207.i32[3] = 0;
  float32x4_t v208 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v203), 0), v207));
  v208.i32[3] = 0;
  float32x4_t v209 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v87, 0x1FuLL)), v88, v86);
  float32x4_t v282 = v209;
  float32x2_t v210 = v266;
  if (v283 == 3)
  {
    float32x2_t v284 = 0;
    float32x2_t v285 = 0;
    int8x16_t v270 = v206;
    float32x4_t v273 = v208;
    physx::Gu::barycentricCoordinates(&v282, &v295, &v296, &v297, &v285, &v284);
    int8x16_t v206 = v270;
    float32x4_t v208 = v273;
    float32x2_t v210 = v266;
    v87.i32[1] = v300.i32[1];
    float32x4_t v213 = vmulq_n_f32(vsubq_f32(v301, v300), v285.f32[0]);
    v213.i32[3] = 0;
    float32x4_t v214 = vmulq_n_f32(vsubq_f32(v302, v300), v284.f32[0]);
    v214.i32[3] = 0;
    float32x4_t v211 = vaddq_f32(v300, vaddq_f32(v213, v214));
  }
  else if (v283 == 2)
  {
    float32x4_t v215 = vsubq_f32(v295, v209);
    float32x4_t v216 = vsubq_f32(vsubq_f32(v296, v209), v215);
    float32x4_t v217 = vmulq_f32(v216, v216);
    v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
    float32x2_t v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
    float32x2_t v219 = vrecpe_f32(v218);
    int v220 = 4;
    do
    {
      float32x2_t v219 = vmul_f32(v219, vrecps_f32(v218, v219));
      --v220;
    }
    while (v220);
    float32x4_t v221 = vnegq_f32(v215);
    v221.i32[3] = 0;
    float32x4_t v222 = vmulq_f32(v221, v216);
    v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
    float32x4_t v211 = vmlaq_n_f32(v300, vsubq_f32(v301, v300), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v218), (int8x8_t)v219, 0), vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32)).f32[0]);
    v87.i32[1] = 0;
    v211.i64[1] = vextq_s8((int8x16_t)v211, (int8x16_t)v211, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v211 = 0uLL;
    if (v283 == 1) {
      float32x4_t v211 = v300;
    }
  }
  v87.i32[0] = *(_DWORD *)(v197 + 16);
  int8x16_t v223 = (int8x16_t)vmlsq_lane_f32(v211, v208, *(float32x2_t *)v87.i8, 0);
  v223.i64[1] = vextq_s8(v223, v223, 8uLL).u32[0];
  float32x4_t v212 = (float32x4_t)vbslq_s8(v206, v223, (int8x16_t)v211);
LABEL_76:
  if (v90 == -1)
  {
    v210.i32[0] = 2139095039;
  }
  else
  {
    if (v210.f32[0] == 0.0)
    {
      v212.i32[0] = *(_DWORD *)(v274.i64[1] + 16);
      v284.i8[0] = 0;
      float32x2_t v304 = 0;
      float32x4_t v300 = 0u;
      float32x4_t v301 = 0u;
      float32x4_t v302 = 0u;
      v295.i64[1] = v274.i64[1];
      v295.i64[0] = (uint64_t)&unk_26E728D40;
      v296.i64[0] = (uint64_t)v275;
      float32x2x2_t v225 = (float32x2x2_t)v275[2];
      float32x4_t v224 = (float32x4_t)v275[3];
      int32x4_t v226 = *v275;
      int32x4_t v298 = v275[1];
      v299[0] = v225;
      float32x4_t v297 = (float32x4_t)v226;
      float32x2x2_t v227 = (float32x2x2_t)vzip1q_s32(v226, (int32x4_t)v225);
      v225.val[0] = (float32x2_t)vzip2q_s32(v226, (int32x4_t)v225).u64[0];
      int32x4_t v228 = vzip1q_s32(v298, (int32x4_t)0);
      unint64_t v229 = vzip2q_s32(v298, (int32x4_t)0).u64[0];
      v212.f32[0] = (float)(v212.f32[0] + v287) * 100.0;
      float32x4_t v230 = &v297;
      long long v231 = (float *)v299;
      vst2_f32(v230->f32, v227);
      v299[1] = v224;
      int32x4_t v298 = vzip2q_s32((int32x4_t)v227, v228);
      vst2_f32(v231, v225);
      v305.i64[0] = (uint64_t)&unk_26E7287F0;
      v305.i64[1] = (uint64_t)v286;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::CapsuleV>>(&v295, (uint64_t)&v305, &v282, &v285, &v284, (uint64_t)&v300, v281, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v212.f32, 0), 0.0, v224) != 5)goto LABEL_80; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)&v274) - 5 >= 2)
      {
        float32x4_t v233 = vnegq_f32(v265);
        v233.i32[3] = 0;
        float32x4_t v234 = vmulq_f32(v233, v233);
        v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
        float32x2_t v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
        float32x2_t v236 = vrsqrte_f32(v235);
        int v237 = 4;
        do
        {
          float32x2_t v236 = vmul_f32(v236, vrsqrts_f32(vmul_f32(v236, v236), v235));
          --v237;
        }
        while (v237);
        float32x2_t v238 = vmul_f32(v235, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v235), 0), _D8, (int8x8_t)v236));
        float32x2_t v239 = vrecpe_f32(v238);
        int v240 = 4;
        do
        {
          float32x2_t v239 = vmul_f32(v239, vrecps_f32(v238, v239));
          --v240;
        }
        while (v240);
        float32x4_t v208 = vmulq_n_f32(v233, v239.f32[0]);
        v208.i32[3] = 0;
        float32x2_t v210 = 0;
        float32x4_t v212 = 0uLL;
      }
      else
      {
LABEL_80:
        float32x4_t v208 = v302;
        float32x4_t v212 = v300;
        float32x2_t v210 = vmin_f32(v304, 0);
      }
    }
    float32x4_t v241 = vmulq_n_f32(v212, v260);
    v241.i32[3] = 0;
    int8x8_t v242 = (int8x8_t)vmls_f32(vmul_f32(v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v212, (int8x16_t)v212, 4uLL)), v256, *(float32x2_t *)v212.f32);
    *(int8x8_t *)v243.f32 = vext_s8(v242, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v212.f32), v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL)), 4uLL);
    v243.i64[1] = v242.u32[0];
    float32x4_t v244 = vmlaq_f32(v241, v262, v243);
    v244.i64[1] = vextq_s8((int8x16_t)v244, (int8x16_t)v244, 8uLL).u32[0];
    float32x4_t v245 = vmulq_f32(v259, v212);
    v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
    float32x4_t v246 = vmlaq_n_f32(v244, v259, vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32).f32[0]);
    v246.i64[1] = vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u32[0];
    v243.i64[0] = 0x4000000040000000;
    v243.i64[1] = 0x4000000040000000;
    float32x4_t v247 = vmlaq_f32(v263, v243, v246);
    v247.i64[1] = vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL).u32[0];
    float32x4_t v248 = vmlaq_n_f32(v247, v258, vmax_f32(v210, 0).f32[0]);
    float32x4_t v249 = vmulq_n_f32(v208, v260);
    v249.i32[3] = 0;
    *(float32x2_t *)v243.f32 = vmls_f32(vmul_f32(v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v208, (int8x16_t)v208, 4uLL)), v256, *(float32x2_t *)v208.f32);
    *(int8x8_t *)v246.f32 = vext_s8(*(int8x8_t *)v243.f32, (int8x8_t)vmls_f32(vmul_f32(v257, *(float32x2_t *)v208.f32), v261, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL)), 4uLL);
    v246.i64[1] = v243.u32[0];
    float32x4_t v250 = vmlaq_f32(v249, v262, v246);
    v250.i64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u32[0];
    float32x4_t v251 = vmulq_f32(v259, v208);
    v251.i64[0] = vpaddq_f32(v251, v251).u64[0];
    float32x4_t v252 = vmlaq_n_f32(v250, v259, vpadd_f32(*(float32x2_t *)v251.f32, *(float32x2_t *)v251.f32).f32[0]);
    float32x4_t v253 = vaddq_f32(v252, v252);
    *(void *)a8 = v253.i64[0];
    *(_DWORD *)(a8 + 8) = v253.i32[2];
    *(void *)a9 = v248.i64[0];
    *(_DWORD *)(a9 + 8) = v248.i32[2];
  }
  return v210.f32[0];
}

float32_t physx::Gu::SweepGeomTriangles<physx::Gu::BoxV>(uint64_t a1, double a2, uint64_t a3, float32x4_t *a4, int8x16_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v315 = *MEMORY[0x263EF8340];
  int v284 = 3;
  char v285 = 0;
  float32x4_t v13 = *(float32x4_t *)(a1 + 4);
  float32x4_t v14 = v13;
  v14.i32[2] = *(_DWORD *)(a1 + 12);
  v282[0] = 0;
  v282[1] = 0;
  float32x2_t v15 = (float32x2_t)vdup_laneq_s32((int32x4_t)v14, 2);
  v14.i32[3] = 0;
  float32x4_t v286 = v14;
  *(float32x2_t *)v13.f32 = vpmin_f32(v15, *(float32x2_t *)v13.f32);
  v13.f32[0] = vpmin_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32).f32[0];
  v282[2] = vmul_n_f32((float32x2_t)0x3BA3D70A3C23D70ALL, v13.f32[0]);
  v15.f32[0] = 0.05 * v13.f32[0];
  v14.i64[0] = *(void *)(a7 + 16);
  v14.i64[1] = *(unsigned int *)(a7 + 24);
  float32x4_t v16 = *a4;
  v17.i64[0] = *(void *)(a6 + 16);
  v17.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v18 = vnegq_f32(*a4);
  float32x4_t v19 = v18;
  v19.i32[3] = 0;
  float32x4_t v20 = vsubq_f32(v14, v17);
  float32x4_t v270 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v21) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v270.f32, *(float32x2_t *)v270.f32).u32[0];
  float32x4_t v22 = vmulq_n_f32(v20, v21);
  v22.i32[3] = 0;
  float32x2_t v23 = (float32x2_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  float32x2_t v24 = (float32x2_t)vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)v23, 4uLL);
  int8x8_t v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL)), v24, *(float32x2_t *)v20.f32);
  *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(v23, *(float32x2_t *)v20.f32), *(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
  v26.i64[1] = v25.u32[0];
  float32x4_t v27 = vmlaq_laneq_f32(v22, v26, *a4, 3);
  v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
  float32x4_t v28 = vmulq_f32(v19, v20);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  float32x4_t v29 = vmlaq_n_f32(v27, v19, vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
  float32x4_t v30 = vaddq_f32(v29, v29);
  v30.i32[3] = 0;
  float32x4_t v31 = *(float32x4_t *)a5;
  v31.i32[3] = 0;
  float32x4_t v32 = vmulq_f32(v31, v19);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  float32x2_t v33 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*a5, *a5, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL)), vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32));
  float32x4_t v34 = vmulq_laneq_f32(v31, *a4, 3);
  v31.i64[0] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
  int8x8_t v35 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a5->i8, *(int8x8_t *)v31.f32, 4uLL), *(float32x2_t *)v18.f32), v24, *(float32x2_t *)a5->i8);
  *(int8x8_t *)v36.f32 = vext_s8(v35, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a5->i8, v23), *(float32x2_t *)v18.f32, *(float32x2_t *)v31.f32), 4uLL);
  *(int8x8_t *)&v36.u32[2] = v35;
  float32x4_t v37 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v19, *(float32x4_t *)a5, 3), v34), v36);
  *(int32x2_t *)v18.f32 = vdup_lane_s32(*(int32x2_t *)v37.f32, 1);
  *(int32x2_t *)v19.f32 = vdup_laneq_s32((int32x4_t)v37, 2);
  float32x4_t v38 = vaddq_f32(v37, v37);
  float32x2_t v39 = (float32x2_t)vdup_laneq_s32((int32x4_t)v38, 2);
  *(int32x2_t *)v37.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.f32), 0);
  float32x2_t v40 = vmul_lane_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v38.f32, 1);
  float32x2_t v41 = vmul_laneq_f32(*(float32x2_t *)v19.f32, v38, 2);
  *(float32x2_t *)v18.f32 = vmul_n_f32(*(float32x2_t *)v18.f32, v38.f32[0]);
  float32x2_t v42 = vmul_n_f32(*(float32x2_t *)v19.f32, v38.f32[0]);
  float32x2_t v43 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0), v33, 1);
  *(float32x2_t *)v19.f32 = vmul_lane_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v38.f32, 1);
  *(float32x2_t *)v38.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 1), v33, 1);
  float32x2_t v44 = vmul_lane_f32(v39, v33, 1);
  __asm { FMOV            V8.2S, #1.0 }
  *(float32x2_t *)v37.f32 = vsub_f32(_D8, *(float32x2_t *)v37.f32);
  *(int8x8_t *)v34.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v40), v41), (int8x8_t)vadd_f32(*(float32x2_t *)v18.f32, v44), 4uLL);
  v34.i64[1] = vsub_f32(v42, *(float32x2_t *)v38.f32).u32[0];
  *(int8x8_t *)v18.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v18.f32, v44), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v41), 4uLL);
  v18.i64[1] = vadd_f32(*(float32x2_t *)v19.f32, v43).u32[0];
  __int32 v283 = v15.i32[0];
  int32x4_t v293 = (int32x4_t)v34;
  int32x4_t v294 = (int32x4_t)v18;
  *(int8x8_t *)v50.i8 = vext_s8((int8x8_t)vadd_f32(v42, *(float32x2_t *)v38.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v19.f32, v43), 4uLL);
  v50.i64[1] = vsub_f32(*(float32x2_t *)v37.f32, v40).u32[0];
  v37.i64[0] = a5[1].i64[0];
  v37.i64[1] = a5[1].u32[2];
  v18.i64[0] = a4[1].i64[0];
  v18.i64[1] = a4[1].u32[2];
  int32x4_t v295 = v50;
  float32x4_t v296 = v30;
  float32x4_t v271 = v17;
  float32x4_t v51 = v16;
  v51.i32[3] = 0;
  float32x4_t v266 = vsubq_f32(v37, v14);
  float32x4_t v52 = vsubq_f32(vsubq_f32(v18, v17), v266);
  float v268 = v21;
  float32x2_t v269 = *(float32x2_t *)v16.f32;
  float32x4_t v53 = vmulq_n_f32(v52, v21);
  v53.i32[3] = 0;
  float32x2_t v265 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  float32x2_t v264 = (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v265, 4uLL);
  *(float32x2_t *)v18.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL)), v264, *(float32x2_t *)v52.f32);
  *(int8x8_t *)v37.f32 = vext_s8(*(int8x8_t *)v18.f32, (int8x8_t)vmls_f32(vmul_f32(v265, *(float32x2_t *)v52.f32), *(float32x2_t *)v16.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL)), 4uLL);
  v37.i64[1] = v18.u32[0];
  float32x4_t v54 = vmlsq_laneq_f32(v53, v37, v16, 3);
  v54.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
  float32x4_t v55 = vmulq_f32(v51, v52);
  v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
  float32x4_t v267 = v51;
  float32x4_t v56 = vmlaq_n_f32(v54, v51, vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32).f32[0]);
  float32x4_t v57 = vaddq_f32(v56, v56);
  v289.i64[1] = a11;
  v289.i64[0] = (uint64_t)&unk_26E728D40;
  int v290 = &v293;
  float32x4_t v58 = (float *)v291;
  v291[0] = v293;
  v292[0] = v295;
  float32x2x2_t v59 = (float *)v292;
  float32x2x2_t v60 = (float32x2x2_t)vzip1q_s32(v293, v295);
  v316.val[0] = (float32x2_t)vzip2q_s32(v293, v295).u64[0];
  int32x4_t v61 = vzip1q_s32(v294, (int32x4_t)0);
  v316.val[1] = (float32x2_t)vzip2q_s32(v294, (int32x4_t)0).u64[0];
  vst2_f32(v58, v60);
  v292[1] = v30;
  v291[1] = vzip2q_s32((int32x4_t)v60, v61);
  vst2_f32(v59, v316);
  __int32 v288 = (float32x4_t *)v282;
  float v287 = &unk_26E728AB8;
  unsigned int v298 = 1;
  float32x4_t v62 = vmulq_f32(v30, v30);
  v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
  float32x4_t v63 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v30, (int8x16_t)xmmword_23435FD50);
  float32x4_t v64 = vmulq_f32(v63, v63);
  v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
  float32x2_t v65 = vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32);
  float32x2_t v66 = vrsqrte_f32(v65);
  int v67 = 4;
  do
  {
    float32x2_t v66 = vmul_f32(v66, vrsqrts_f32(vmul_f32(v66, v66), v65));
    --v67;
  }
  while (v67);
  v57.i32[3] = 0;
  float32x4_t v273 = v57;
  int8x16_t v68 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v57);
  float32x2_t v69 = vmul_f32(v65, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v65), 0), (int8x8_t)_D8, (int8x8_t)v66));
  float32x2_t v70 = vrecpe_f32(v69);
  int v71 = 4;
  do
  {
    float32x2_t v70 = vmul_f32(v70, vrecps_f32(v69, v70));
    --v71;
  }
  while (v71);
  *(float *)&a2 = *(float *)&a2 + 0.0;
  float32x2_t v72 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
  v68.i64[1] = vextq_s8(v68, v68, 8uLL).u32[0];
  float32x4_t v276 = (float32x4_t)v68;
  float32x4_t v73 = vmulq_n_f32(v63, v70.f32[0]);
  v73.i32[3] = 0;
  float32x4_t v279 = v73;
  float32x4_t v74 = vnegq_f32(v73);
  v74.i32[3] = 0;
  float32x4_t v301 = v74;
  *(double *)v75.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v289, (float32x2_t *)&v301);
  float32x4_t v76 = v75;
  float32x4_t v77 = v288[3];
  int8x16_t v78 = (int8x16_t)vnegq_f32(v77);
  v78.i32[3] = 0;
  float32x4_t v79 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v279), (int8x16_t)v77, v78);
  float32x4_t v80 = vsubq_f32(v75, v79);
  float32x4_t v301 = v80;
  float32x4_t v302 = 0u;
  float32x4_t v303 = 0u;
  int32x4_t v304 = 0u;
  float32x4_t v306 = v76;
  float32x4_t v307 = 0u;
  float32x4_t v308 = 0u;
  long long v309 = 0u;
  float32x4_t v81 = vnegq_f32(v80);
  v81.i32[3] = 0;
  float32x4_t v82 = &v288[1].f32[2];
  float32x4_t v311 = v79;
  float32x4_t v312 = 0u;
  float32x4_t v313 = 0u;
  long long v314 = 0u;
  *(float32x2_t *)v76.f32 = vld1_dup_f32(v82);
  float32x2_t v83 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v76.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v76.f32, v83), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v84 = vadd_f32(v72, *(float32x2_t *)v76.f32);
  *(float32x2_t *)v79.f32 = vmul_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
  float32x2_t v85 = vmul_f32(v84, v84);
  float32x4_t v86 = vmulq_f32(v81, v81);
  float32x4_t v87 = vpaddq_f32(v86, v86);
  float32x2_t v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
  float32x2_t v263 = *(float32x2_t *)v79.f32;
  *(int32x2_t *)v87.f32 = vcgt_f32(v88, *(float32x2_t *)v79.f32);
  int32x4_t v89 = vdupq_lane_s32(*(int32x2_t *)v87.f32, 0);
  v87.i32[0] = -1;
  int32x4_t v262 = (int32x4_t)v87;
  int8x16_t v90 = (int8x16_t)v80;
  v91.i64[0] = -1;
  v91.i64[1] = -1;
  int8x16_t v272 = (int8x16_t)v81;
  float32x4_t v92 = v81;
  float32x2_t v274 = 0;
  while (1)
  {
    int8x16_t v93 = (int8x16_t)v80;
    v94.i64[0] = -1;
    v94.i64[1] = -1;
    *(int16x4_t *)v94.i8 = vmovn_s32(vceqq_s32(v89, v94));
    unsigned __int32 v95 = vuzp1_s8(*(int8x8_t *)v94.i8, *(int8x8_t *)v94.i8).u32[0];
    if (v95 != -1) {
      break;
    }
    float32x4_t v96 = vmulq_f32(v92, v92);
    v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
    float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
    float32x2_t v98 = vrsqrte_f32(v97);
    int v99 = 4;
    do
    {
      float32x2_t v98 = vmul_f32(v98, vrsqrts_f32(vmul_f32(v98, v98), v97));
      --v99;
    }
    while (v99);
    int8x16_t v277 = v93;
    float32x2_t v100 = vmul_f32(v97, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v97), 0), (int8x8_t)_D8, (int8x8_t)v98));
    float32x2_t v101 = vrecpe_f32(v100);
    int v102 = 4;
    do
    {
      float32x2_t v101 = vmul_f32(v101, vrecps_f32(v100, v101));
      --v102;
    }
    while (v102);
    float32x4_t v275 = v92;
    float32x4_t v103 = vmulq_n_f32(v92, v101.f32[0]);
    v103.i32[3] = 0;
    float32x4_t v297 = v103;
    float32x4_t v104 = vnegq_f32(v103);
    v104.i32[3] = 0;
    float32x4_t v280 = v104;
    *(double *)v105.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v289, (float32x2_t *)&v297);
    float32x4_t v106 = v105;
    float32x4_t v107 = v288[3];
    int8x16_t v108 = (int8x16_t)vnegq_f32(v107);
    v108.i32[3] = 0;
    float32x4_t v109 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v280), (int8x16_t)v107, v108);
    float32x4_t v110 = vaddq_f32(v276, v109);
    float32x4_t v80 = vsubq_f32(v105, v110);
    float32x4_t v111 = vnegq_f32(v80);
    v111.i32[3] = 0;
    float32x4_t v112 = vmulq_f32(v297, v111);
    v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
    float32x2_t v113 = vsub_f32(vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32), v84);
    if (v113.f32[0] > 0.0)
    {
      float32x4_t v114 = vmulq_f32(v273, v297);
      v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
      float32x2_t v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
      if (v115.f32[0] >= 0.0) {
        goto LABEL_70;
      }
      float32x2_t v116 = vrecpe_f32(v115);
      int v117 = 4;
      do
      {
        float32x2_t v116 = vmul_f32(v116, vrecps_f32(v115, v116));
        --v117;
      }
      while (v117);
      float32x2_t v118 = vsub_f32(v274, vmul_f32(v113, v116));
      if (vcgt_f32(v118, v274).u8[0])
      {
        if (v118.f32[0] > 1.0)
        {
LABEL_70:
          float32x2_t v215 = 0;
          float32x4_t v213 = 0uLL;
          float32x4_t v217 = 0uLL;
          goto LABEL_76;
        }
        float32x4_t v119 = vmlaq_n_f32((float32x4_t)0, v273, v118.f32[0]);
        v119.i64[1] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u32[0];
        float32x4_t v120 = vsubq_f32(v119, v276);
        float32x4_t v311 = vaddq_f32(v120, v311);
        float32x4_t v312 = vaddq_f32(v120, v312);
        float32x4_t v313 = vaddq_f32(v120, v313);
        float32x4_t v301 = vsubq_f32(v306, v311);
        float32x4_t v302 = vsubq_f32(v307, v312);
        float32x4_t v303 = vsubq_f32(v308, v313);
        float32x4_t v110 = vaddq_f32(v109, v119);
        float32x4_t v80 = vsubq_f32(v106, v110);
        float32x2_t v88 = v83;
        int8x16_t v272 = (int8x16_t)v275;
        float32x4_t v276 = v119;
      }
      float32x2_t v274 = v118;
    }
    uint64_t v121 = v298;
    *(&v306 + v298) = v106;
    *(&v311 + v121) = v110;
    unsigned int v298 = v121 + 1;
    *(&v301 + v121) = v80;
    if (v121 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v301, &v306, &v311, (int *)&v298);
LABEL_27:
      int8x16_t v90 = v277;
      goto LABEL_61;
    }
    if (v121 != 2)
    {
      int8x16_t v90 = v277;
      if (v121 != 1) {
        goto LABEL_61;
      }
      float32x4_t v80 = v301;
      float32x4_t v122 = vsubq_f32(v302, v301);
      float32x4_t v123 = vmulq_f32(v122, v122);
      v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
      float32x2_t v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v124), 0), *(int8x8_t *)v301.f32).u32[0] != -1)
      {
        float32x4_t v125 = vnegq_f32(v301);
        v125.i32[3] = 0;
        float32x4_t v126 = vmulq_f32(v125, v122);
        v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
        float32x2_t v127 = vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32);
        float32x2_t v128 = vrecpe_f32(v124);
        int v129 = 4;
        do
        {
          float32x2_t v128 = vmul_f32(v128, vrecps_f32(v124, v128));
          --v129;
        }
        while (v129);
        float32x4_t v80 = vmlaq_n_f32(v301, v122, vmax_f32(vmin_f32(vmul_f32(v127, v128), _D8), 0).f32[0]);
LABEL_42:
        v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      unsigned int v298 = 1;
      goto LABEL_61;
    }
    float32x4_t v80 = v301;
    float32x4_t v130 = vsubq_f32(v302, v301);
    float32x4_t v131 = vsubq_f32(v303, v301);
    int8x8_t v133 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v130.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v131, (int8x16_t)v131, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 4uLL), *(float32x2_t *)v131.f32);
    *(int8x8_t *)v132.f32 = vext_s8(v133, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL), *(float32x2_t *)v131.f32), *(float32x2_t *)v130.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL)), 4uLL);
    v133.i32[1] = 0;
    unsigned int v298 = 3;
    float32x2_t v134 = vpadd_f32(vmul_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32), vmul_f32((float32x2_t)v133.u32[0], (float32x2_t)v133.u32[0]));
    float32x2_t v135 = vpadd_f32(v134, v134);
    if (v135.f32[0] <= 0.00000011921)
    {
      unsigned int v298 = 2;
      float32x4_t v172 = vmulq_f32(v130, v130);
      v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
      float32x2_t v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32);
      int8x16_t v90 = v277;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v173), 0), *(int8x8_t *)v301.f32).u32[0] != -1)
      {
        float32x4_t v174 = vnegq_f32(v301);
        v174.i32[3] = 0;
        float32x4_t v175 = vmulq_f32(v174, v130);
        v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
        float32x2_t v176 = vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32);
        float32x2_t v177 = vrecpe_f32(v173);
        int v178 = 4;
        do
        {
          float32x2_t v177 = vmul_f32(v177, vrecps_f32(v173, v177));
          --v178;
        }
        while (v178);
        float32x4_t v80 = vmlaq_n_f32(v301, v130, vmax_f32(vmin_f32(vmul_f32(v176, v177), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v135.f32[0] == 0.0)
    {
      float32x4_t v80 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v132.u32[2] = v133;
    float32x2_t v136 = (float32x2_t)vextq_s8((int8x16_t)v302, (int8x16_t)v302, 8uLL).u64[0];
    float32x2_t v137 = (float32x2_t)vextq_s8((int8x16_t)v303, (int8x16_t)v303, 8uLL).u64[0];
    float32x2_t v138 = (float32x2_t)vextq_s8((int8x16_t)v303, (int8x16_t)v303, 4uLL).u64[0];
    float32x2_t v139 = (float32x2_t)vextq_s8((int8x16_t)v302, (int8x16_t)v302, 4uLL).u64[0];
    int8x8_t v140 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v302.f32, v138), v139, *(float32x2_t *)v303.f32);
    *(int8x8_t *)v141.f32 = vext_s8(v140, (int8x8_t)vmls_f32(vmul_f32(v136, *(float32x2_t *)v303.f32), *(float32x2_t *)v302.f32, v137), 4uLL);
    v141.i64[1] = v140.u32[0];
    float32x2_t v142 = (float32x2_t)vextq_s8((int8x16_t)v301, (int8x16_t)v301, 8uLL).u64[0];
    float32x2_t v143 = (float32x2_t)vextq_s8((int8x16_t)v301, (int8x16_t)v301, 4uLL).u64[0];
    int8x8_t v144 = (int8x8_t)vmls_f32(vmul_f32(v143, *(float32x2_t *)v303.f32), v138, *(float32x2_t *)v301.f32);
    *(int8x8_t *)v145.f32 = vext_s8(v144, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v301.f32, v137), *(float32x2_t *)v303.f32, v142), 4uLL);
    v145.i64[1] = v144.u32[0];
    int8x8_t v146 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v301.f32, v139), v143, *(float32x2_t *)v302.f32);
    *(int8x8_t *)v147.f32 = vext_s8(v146, (int8x8_t)vmls_f32(vmul_f32(v142, *(float32x2_t *)v302.f32), *(float32x2_t *)v301.f32, v136), 4uLL);
    v147.i64[1] = v146.u32[0];
    float32x4_t v148 = vmulq_f32(v141, v132);
    v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
    float32x2_t v149 = vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32);
    float32x4_t v150 = vmulq_f32(v145, v132);
    v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
    float32x2_t v151 = vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32);
    float32x4_t v152 = vmulq_f32(v147, v132);
    v152.i64[0] = vpaddq_f32(v152, v152).u64[0];
    float32x2_t v153 = vpadd_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v151), (int8x8_t)vcgez_f32(v149)), (int8x8_t)vcgez_f32(v153)), 0), *(int8x8_t *)v301.f32).u32[0] != -1)
    {
      float32x4_t v154 = vnegq_f32(v301);
      v154.i32[3] = 0;
      float32x4_t v155 = vnegq_f32(v302);
      v155.i32[3] = 0;
      float32x4_t v156 = vmulq_f32(v154, v130);
      v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
      float32x2_t v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
      float32x4_t v158 = vmulq_f32(v130, v155);
      v158.i64[0] = vpaddq_f32(v158, v158).u64[0];
      float32x2_t v159 = vpadd_f32(*(float32x2_t *)v158.f32, *(float32x2_t *)v158.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v157), (int8x8_t)vclez_f32(v159)), (int8x8_t)vclez_f32(v153)), 0), *(int8x8_t *)v301.f32).u32[0] == -1)
      {
        float32x2_t v182 = vsub_f32(v157, v159);
        float32x2_t v183 = vrecpe_f32(v182);
        int v184 = 4;
        do
        {
          float32x2_t v183 = vmul_f32(v183, vrecps_f32(v182, v183));
          --v184;
        }
        while (v184);
        uint64_t v171 = 0;
        float32x4_t v80 = vmlaq_n_f32(v301, v130, vmul_f32(v157, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v182), (float32x2_t)0x3400000034000000), (int8x8_t)v183, 0)).f32[0]);
        v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
        unsigned int v185 = 2;
        uint64_t v170 = 1;
      }
      else
      {
        float32x4_t v160 = vnegq_f32(v303);
        v160.i32[3] = 0;
        float32x4_t v161 = vmulq_f32(v155, v131);
        v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
        float32x2_t v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
        float32x4_t v163 = vmulq_f32(v130, v160);
        v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
        float32x2_t v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32);
        float32x4_t v165 = vmulq_f32(v131, v160);
        v165.i64[0] = vpaddq_f32(v165, v165).u64[0];
        float32x2_t v166 = vpadd_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v165.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v162, v159), (int8x8_t)vcge_f32(v164, v166)), (int8x8_t)vclez_f32(v149)), 0), *(int8x8_t *)v301.f32).u32[0] != -1)
        {
          float32x4_t v167 = vmulq_f32(v154, v131);
          v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
          float32x2_t v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v168), (int8x8_t)vclez_f32(v166)), (int8x8_t)vclez_f32(v151)), 0), *(int8x8_t *)v301.f32).u32[0] == -1)
          {
            float32x2_t v191 = vsub_f32(v168, v166);
            float32x2_t v192 = vrecpe_f32(v191);
            int v193 = 4;
            int8x16_t v90 = v277;
            do
            {
              float32x2_t v192 = vmul_f32(v192, vrecps_f32(v191, v192));
              --v193;
            }
            while (v193);
            uint64_t v171 = 0;
            float32x4_t v80 = vmlaq_n_f32(v301, v131, vmul_f32(v168, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v191), (float32x2_t)0x3400000034000000), (int8x8_t)v192, 0)).f32[0]);
            v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
            uint64_t v170 = 2;
          }
          else
          {
            int8x16_t v90 = v277;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v168), (int8x8_t)vclez_f32(v157)), 0), *(int8x8_t *)v301.f32).u32[0] == -1)
            {
              uint64_t v171 = 0;
              uint64_t v170 = 1;
            }
            else
            {
              *(int16x4_t *)v80.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v159, v162), (int8x8_t)vcgez_f32(v159)), 0);
              *(int8x8_t *)v80.f32 = vuzp1_s8(*(int8x8_t *)v80.f32, *(int8x8_t *)v80.f32);
              __int32 v169 = v80.i32[0];
              float32x4_t v80 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v80, v262), 0), (int8x16_t)v302, (int8x16_t)v303);
              uint64_t v170 = 1;
              if (v169 == -1) {
                uint64_t v171 = 1;
              }
              else {
                uint64_t v171 = 2;
              }
            }
          }
          unsigned int v185 = v170;
          goto LABEL_60;
        }
        float32x2_t v186 = vsub_f32(v162, v159);
        float32x2_t v187 = vadd_f32(v186, vsub_f32(v164, v166));
        float32x2_t v188 = vrecpe_f32(v187);
        int v189 = 4;
        do
        {
          float32x2_t v188 = vmul_f32(v188, vrecps_f32(v187, v188));
          --v189;
        }
        while (v189);
        int8x16_t v190 = (int8x16_t)vmlaq_n_f32(v302, vsubq_f32(v303, v302), vmul_f32(v186, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v187), (float32x2_t)0x3400000034000000), (int8x8_t)v188, 0)).f32[0]);
        v190.i64[1] = vextq_s8(v190, v190, 8uLL).u32[0];
        unsigned int v185 = 2;
        uint64_t v170 = 2;
        uint64_t v171 = 1;
        float32x4_t v80 = (float32x4_t)v190;
      }
      int8x16_t v90 = v277;
LABEL_60:
      float32x4_t v194 = *(&v301 + v170);
      float32x4_t v195 = *(&v306 + v171);
      float32x4_t v196 = *(&v306 + v170);
      float32x4_t v197 = *(&v311 + v171);
      float32x4_t v198 = *(&v311 + v170);
      float32x4_t v301 = *(&v301 + v171);
      float32x4_t v302 = v194;
      float32x4_t v306 = v195;
      float32x4_t v307 = v196;
      float32x4_t v311 = v197;
      float32x4_t v312 = v198;
      unsigned int v298 = v185;
      goto LABEL_61;
    }
    float32x2_t v179 = vrecpe_f32(v135);
    int v180 = 4;
    int8x16_t v90 = v277;
    do
    {
      float32x2_t v179 = vmul_f32(v179, vrecps_f32(v135, v179));
      --v180;
    }
    while (v180);
    float32x4_t v181 = vmulq_f32(v301, v132);
    v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
    float32x4_t v80 = vmulq_n_f32(v132, vmul_f32(v179, vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32)).f32[0]);
    v80.i32[3] = 0;
LABEL_61:
    float32x4_t v92 = vnegq_f32(v80);
    v92.i32[3] = 0;
    float32x4_t v199 = vmulq_f32(v80, v80);
    v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
    float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
    int8x8_t v201 = (int8x8_t)vcgt_f32(v88, v200);
    int8x16_t v91 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v201, (int8x8_t)0x100000001), 0);
    int32x4_t v89 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v200, v85), v201), 0);
    float32x2_t v88 = v200;
  }
  uint64_t v202 = v289.i64[1];
  float32x4_t v203 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v88, v263), 0), v91), 0x1FuLL)), (int8x16_t)v92, v272);
  float32x4_t v204 = vmulq_f32(v203, v203);
  v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
  float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
  float32x2_t v206 = vrsqrte_f32(v205);
  int v207 = 4;
  do
  {
    float32x2_t v206 = vmul_f32(v206, vrsqrts_f32(vmul_f32(v206, v206), v205));
    --v207;
  }
  while (v207);
  float32x2_t v208 = vmul_f32(v205, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v205), 0), (int8x8_t)_D8, (int8x8_t)v206));
  float32x2_t v209 = vrecpe_f32(v208);
  int v210 = 4;
  do
  {
    float32x2_t v209 = vmul_f32(v209, vrecps_f32(v208, v209));
    --v210;
  }
  while (v210);
  int8x16_t v211 = (int8x16_t)vdupq_n_s32(-*(char *)(v289.i64[1] + 32));
  int8x16_t v212 = (int8x16_t)vmulq_n_f32(v203, v209.f32[0]);
  v212.i32[3] = 0;
  float32x4_t v213 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v208), 0), v212));
  v213.i32[3] = 0;
  float32x4_t v214 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v91, 0x1FuLL)), v93, v90);
  float32x4_t v297 = v214;
  float32x2_t v215 = v274;
  if (v298 == 3)
  {
    float32x2_t v300 = 0;
    float32x2_t v299 = 0;
    int8x16_t v278 = v211;
    float32x4_t v281 = v213;
    physx::Gu::barycentricCoordinates(&v297, &v301, &v302, &v303, &v300, &v299);
    int8x16_t v211 = v278;
    float32x4_t v213 = v281;
    float32x2_t v215 = v274;
    v91.i32[1] = v306.i32[1];
    float32x4_t v218 = vmulq_n_f32(vsubq_f32(v307, v306), v300.f32[0]);
    v218.i32[3] = 0;
    float32x4_t v219 = vmulq_n_f32(vsubq_f32(v308, v306), v299.f32[0]);
    v219.i32[3] = 0;
    float32x4_t v216 = vaddq_f32(v306, vaddq_f32(v218, v219));
  }
  else if (v298 == 2)
  {
    float32x4_t v220 = vsubq_f32(v301, v214);
    float32x4_t v221 = vsubq_f32(vsubq_f32(v302, v214), v220);
    float32x4_t v222 = vmulq_f32(v221, v221);
    v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
    float32x2_t v223 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
    float32x2_t v224 = vrecpe_f32(v223);
    int v225 = 4;
    do
    {
      float32x2_t v224 = vmul_f32(v224, vrecps_f32(v223, v224));
      --v225;
    }
    while (v225);
    float32x4_t v226 = vnegq_f32(v220);
    v226.i32[3] = 0;
    float32x4_t v227 = vmulq_f32(v226, v221);
    v227.i64[0] = vpaddq_f32(v227, v227).u64[0];
    float32x4_t v216 = vmlaq_n_f32(v306, vsubq_f32(v307, v306), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v223), (int8x8_t)v224, 0), vpadd_f32(*(float32x2_t *)v227.f32, *(float32x2_t *)v227.f32)).f32[0]);
    v91.i32[1] = 0;
    v216.i64[1] = vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v216 = 0uLL;
    if (v298 == 1) {
      float32x4_t v216 = v306;
    }
  }
  v91.i32[0] = *(_DWORD *)(v202 + 16);
  int8x16_t v228 = (int8x16_t)vmlsq_lane_f32(v216, v213, *(float32x2_t *)v91.i8, 0);
  v228.i64[1] = vextq_s8(v228, v228, 8uLL).u32[0];
  float32x4_t v217 = (float32x4_t)vbslq_s8(v211, v228, (int8x16_t)v216);
LABEL_76:
  if (v95 == -1)
  {
    v215.i32[0] = 2139095039;
  }
  else
  {
    if (v215.f32[0] == 0.0)
    {
      v217.i32[0] = *(_DWORD *)(v289.i64[1] + 16);
      uint64_t v229 = (uint64_t)v288;
      float v230 = v288[1].f32[0];
      v299.i8[0] = 0;
      float32x2_t v310 = 0;
      float32x4_t v306 = 0u;
      float32x4_t v307 = 0u;
      float32x4_t v308 = 0u;
      v301.i64[1] = v289.i64[1];
      v301.i64[0] = (uint64_t)&unk_26E728D40;
      v302.i64[0] = (uint64_t)v290;
      float32x2x2_t v232 = (float32x2x2_t)v290[2];
      int32x4_t v231 = v290[3];
      int32x4_t v233 = *v290;
      int32x4_t v304 = v290[1];
      v305[0] = v232;
      float32x4_t v303 = (float32x4_t)v233;
      float32x2x2_t v234 = (float32x2x2_t)vzip1q_s32(v233, (int32x4_t)v232);
      v232.val[0] = (float32x2_t)vzip2q_s32(v233, (int32x4_t)v232).u64[0];
      int32x4_t v235 = vzip1q_s32(v304, (int32x4_t)0);
      unint64_t v236 = vzip2q_s32(v304, (int32x4_t)0).u64[0];
      v217.f32[0] = (float)(v217.f32[0] + v230) * 100.0;
      int v237 = &v303;
      float32x2_t v238 = (float *)v305;
      vst2_f32(v237->f32, v234);
      v305[1] = v231;
      int32x4_t v304 = vzip2q_s32((int32x4_t)v234, v235);
      vst2_f32(v238, v232);
      v311.i64[0] = (uint64_t)&unk_26E728AB8;
      v311.i64[1] = v229;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v301, (uint64_t)&v311, &v297, &v300, &v299, (uint64_t)&v306, v296, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v217.f32, 0), 0.0, *(int8x8_t *)v231.i8) != 5)goto LABEL_80; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)&v289) - 5 >= 2)
      {
        float32x4_t v240 = vnegq_f32(v273);
        v240.i32[3] = 0;
        float32x4_t v241 = vmulq_f32(v240, v240);
        v241.i64[0] = vpaddq_f32(v241, v241).u64[0];
        float32x2_t v242 = vpadd_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v241.f32);
        float32x2_t v243 = vrsqrte_f32(v242);
        int v244 = 4;
        do
        {
          float32x2_t v243 = vmul_f32(v243, vrsqrts_f32(vmul_f32(v243, v243), v242));
          --v244;
        }
        while (v244);
        float32x2_t v245 = vmul_f32(v242, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v242), 0), _D8, (int8x8_t)v243));
        float32x2_t v246 = vrecpe_f32(v245);
        int v247 = 4;
        do
        {
          float32x2_t v246 = vmul_f32(v246, vrecps_f32(v245, v246));
          --v247;
        }
        while (v247);
        float32x4_t v213 = vmulq_n_f32(v240, v246.f32[0]);
        v213.i32[3] = 0;
        float32x2_t v215 = 0;
        float32x4_t v217 = 0uLL;
      }
      else
      {
LABEL_80:
        float32x4_t v213 = v308;
        float32x4_t v217 = v306;
        float32x2_t v215 = vmin_f32(v310, 0);
      }
    }
    float32x4_t v248 = vmulq_n_f32(v217, v268);
    v248.i32[3] = 0;
    int8x8_t v249 = (int8x8_t)vmls_f32(vmul_f32(v269, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v217, (int8x16_t)v217, 4uLL)), v264, *(float32x2_t *)v217.f32);
    *(int8x8_t *)v250.f32 = vext_s8(v249, (int8x8_t)vmls_f32(vmul_f32(v265, *(float32x2_t *)v217.f32), v269, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL)), 4uLL);
    v250.i64[1] = v249.u32[0];
    float32x4_t v251 = vmlaq_f32(v248, v270, v250);
    v251.i64[1] = vextq_s8((int8x16_t)v251, (int8x16_t)v251, 8uLL).u32[0];
    float32x4_t v252 = vmulq_f32(v267, v217);
    v252.i64[0] = vpaddq_f32(v252, v252).u64[0];
    float32x4_t v253 = vmlaq_n_f32(v251, v267, vpadd_f32(*(float32x2_t *)v252.f32, *(float32x2_t *)v252.f32).f32[0]);
    v253.i64[1] = vextq_s8((int8x16_t)v253, (int8x16_t)v253, 8uLL).u32[0];
    v250.i64[0] = 0x4000000040000000;
    v250.i64[1] = 0x4000000040000000;
    float32x4_t v254 = vmlaq_f32(v271, v250, v253);
    v254.i64[1] = vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL).u32[0];
    float32x4_t v255 = vmlaq_n_f32(v254, v266, vmax_f32(v215, 0).f32[0]);
    float32x4_t v256 = vmulq_n_f32(v213, v268);
    v256.i32[3] = 0;
    *(float32x2_t *)v250.f32 = vmls_f32(vmul_f32(v269, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 4uLL)), v264, *(float32x2_t *)v213.f32);
    *(int8x8_t *)v253.f32 = vext_s8(*(int8x8_t *)v250.f32, (int8x8_t)vmls_f32(vmul_f32(v265, *(float32x2_t *)v213.f32), v269, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL)), 4uLL);
    v253.i64[1] = v250.u32[0];
    float32x4_t v257 = vmlaq_f32(v256, v270, v253);
    v257.i64[1] = vextq_s8((int8x16_t)v257, (int8x16_t)v257, 8uLL).u32[0];
    float32x4_t v258 = vmulq_f32(v267, v213);
    v258.i64[0] = vpaddq_f32(v258, v258).u64[0];
    float32x4_t v259 = vmlaq_n_f32(v257, v267, vpadd_f32(*(float32x2_t *)v258.f32, *(float32x2_t *)v258.f32).f32[0]);
    float32x4_t v260 = vaddq_f32(v259, v259);
    *(void *)a8 = v260.i64[0];
    *(_DWORD *)(a8 + 8) = v260.i32[2];
    *(void *)a9 = v255.i64[0];
    *(_DWORD *)(a9 + 8) = v255.i32[2];
  }
  return v215.f32[0];
}

float32_t physx::Gu::SweepGeomTriangles<physx::Gu::ConvexHullV>(uint64_t a1, double a2, uint64_t a3, float32x4_t *a4, int8x8_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v386 = *MEMORY[0x263EF8340];
  char v361 = 0;
  float32x4_t v359 = 0u;
  long long v360 = 0u;
  uint64_t v12 = *(void *)(a1 + 48);
  float32x4_t v13 = *(float32x4_t *)(a1 + 4);
  float32x4_t v14 = v13;
  v14.i32[3] = 0;
  float32x4_t v15 = *(float32x4_t *)(a1 + 16);
  BOOL v16 = COERCE_FLOAT(*(void *)(a1 + 12)) == 1.0;
  _ZF = v13.f32[0] == 1.0 && COERCE_FLOAT(HIDWORD(*(void *)(a1 + 4))) == 1.0;
  uint64_t v368 = *(void *)(a1 + 48);
  uint64_t v370 = *(void *)(v12 + 40) + 20 * *(unsigned __int8 *)(v12 + 39);
  char v371 = *(unsigned char *)(v12 + 38);
  BOOL v19 = _ZF && v16;
  v18.i64[1] = *(unsigned int *)(v12 + 68);
  v18.i64[0] = *(void *)(v12 + 60);
  int32x4_t v20 = (int32x4_t)vmulq_f32(v14, v18);
  *(float32x2_t *)v20.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v20, 2), *(float32x2_t *)v20.i8);
  *(float *)v20.i32 = vpmin_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8).f32[0];
  *(float32x2_t *)&long long v360 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v20.i32);
  *((float *)&v360 + 2) = 0.025 * *(float *)v20.i32;
  __asm { FMOV            V8.2S, #1.0 }
  if (v19)
  {
    long long v362 = xmmword_23435FD50;
    long long v363 = xmmword_23435FD60;
    long long v364 = xmmword_23435FD80;
    long long v365 = xmmword_23435FD50;
    long long v366 = xmmword_23435FD60;
    long long v367 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v25 = vrecpeq_f32(v14);
    int v26 = 4;
    do
    {
      float32x4_t v25 = vmulq_f32(v25, vrecpsq_f32(v25, v14));
      --v26;
    }
    while (v26);
    *(int32x2_t *)v27.f32 = vdup_lane_s32(*(int32x2_t *)v13.f32, 0);
    v27.i64[1] = v27.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v27, v14)), *(int8x8_t *)&a2).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
      float32x2_t v35 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 2);
      float32x2_t v36 = (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 3);
      float32x4_t v37 = vaddq_f32(v15, v15);
      float32x2_t v38 = vmul_lane_f32(v34, *(float32x2_t *)v37.f32, 1);
      float32x2_t v39 = vmul_laneq_f32(v35, v37, 2);
      float32x2_t v40 = vmul_n_f32(v34, v37.f32[0]);
      float32x2_t v41 = vmul_n_f32(v35, v37.f32[0]);
      float32x2_t v42 = vmul_n_f32(v36, v37.f32[0]);
      float32x2_t v43 = vmul_lane_f32(v35, *(float32x2_t *)v37.f32, 1);
      float32x2_t v44 = vmul_lane_f32(v36, *(float32x2_t *)v37.f32, 1);
      float32x2_t v45 = vmul_laneq_f32(v36, v37, 2);
      *(float32x2_t *)v37.f32 = vsub_f32(_D8, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v37.f32), 0));
      *(int8x8_t *)v46.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v38), v39), (int8x8_t)vadd_f32(v40, v45), 4uLL);
      v46.i64[1] = vsub_f32(v41, v44).u32[0];
      int32x2_t v47 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v40, v45), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v39), 4uLL);
      int8x8_t v48 = (int8x8_t)vadd_f32(v41, v44);
      *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v46.f32, 0), (int8x8_t)v47, 4uLL);
      int8x8_t v50 = (int8x8_t)vdup_lane_s32(v47, 1);
      *(int32x2_t *)v51.f32 = v47;
      v51.i64[1] = vadd_f32(v43, v42).u32[0];
      *(int8x8_t *)v52.f32 = vext_s8(v48, (int8x8_t)vsub_f32(v43, v42), 4uLL);
      *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v46.f32, v50, 4uLL);
      v52.i64[1] = vsub_f32(*(float32x2_t *)v37.f32, v38).u32[0];
      v49.i64[1] = vdup_lane_s32(*(int32x2_t *)v52.f32, 0).u32[0];
      v53.i64[1] = vdup_lane_s32(*(int32x2_t *)v52.f32, 1).u32[0];
      *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v46.u32[2], 0), (int8x8_t)v51.u32[2], 4uLL);
      v54.i64[1] = vdup_lane_s32(*(int32x2_t *)&v52.u32[2], 0).u32[0];
      float32x4_t v55 = vmulq_n_f32(v49, v13.f32[0]);
      v55.i32[3] = 0;
      float32x4_t v56 = vmulq_lane_f32(v53, *(float32x2_t *)v13.f32, 1);
      v56.i32[3] = 0;
      float32x4_t v57 = vmulq_laneq_f32(v54, v13, 2);
      v57.i32[3] = 0;
      float32x4_t v58 = vmulq_n_f32(v55, v46.f32[0]);
      v58.i32[3] = 0;
      float32x4_t v59 = vmulq_lane_f32(v56, *(float32x2_t *)v46.f32, 1);
      v59.i32[3] = 0;
      float32x4_t v60 = vmulq_laneq_f32(v57, v46, 2);
      v60.i32[3] = 0;
      float32x4_t v28 = vaddq_f32(v60, vaddq_f32(v58, v59));
      float32x4_t v61 = vmulq_n_f32(v55, v51.f32[0]);
      v61.i32[3] = 0;
      float32x4_t v62 = vmulq_lane_f32(v56, *(float32x2_t *)v51.f32, 1);
      v62.i32[3] = 0;
      float32x4_t v63 = vmulq_laneq_f32(v57, v51, 2);
      v63.i32[3] = 0;
      float32x4_t v64 = vaddq_f32(v61, v62);
      float32x4_t v65 = vmulq_n_f32(v55, v52.f32[0]);
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_lane_f32(v56, *(float32x2_t *)v52.f32, 1);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_laneq_f32(v57, v52, 2);
      v67.i32[3] = 0;
      float32x4_t v29 = vaddq_f32(v63, v64);
      float32x4_t v30 = vaddq_f32(v67, vaddq_f32(v65, v66));
      long long v362 = (__int128)v28;
      long long v363 = (__int128)v29;
      long long v364 = (__int128)v30;
      float32x4_t v68 = vmulq_n_f32(v49, v25.f32[0]);
      v68.i32[3] = 0;
      float32x4_t v69 = vmulq_lane_f32(v53, *(float32x2_t *)v25.f32, 1);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_laneq_f32(v54, v25, 2);
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_n_f32(v68, v46.f32[0]);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_lane_f32(v69, *(float32x2_t *)v46.f32, 1);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_laneq_f32(v70, v46, 2);
      v73.i32[3] = 0;
      float32x4_t v31 = vaddq_f32(v73, vaddq_f32(v71, v72));
      float32x4_t v74 = vmulq_n_f32(v68, v51.f32[0]);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_lane_f32(v69, *(float32x2_t *)v51.f32, 1);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_laneq_f32(v70, v51, 2);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_n_f32(v68, v52.f32[0]);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_lane_f32(v69, *(float32x2_t *)v52.f32, 1);
      v78.i32[3] = 0;
      float32x4_t v32 = vaddq_f32(v76, vaddq_f32(v74, v75));
      float32x4_t v79 = vmulq_laneq_f32(v70, v52, 2);
      v79.i32[3] = 0;
      float32x4_t v33 = vaddq_f32(v79, vaddq_f32(v77, v78));
    }
    else
    {
      v25.i32[3] = 0;
      float32x4_t v28 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD50);
      float32x4_t v29 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD60);
      float32x4_t v30 = vmulq_f32(v14, (float32x4_t)xmmword_23435FD80);
      long long v362 = (__int128)v28;
      long long v363 = (__int128)v29;
      long long v364 = (__int128)v30;
      float32x4_t v31 = vmulq_f32(v25, (float32x4_t)xmmword_23435FD50);
      float32x4_t v32 = vmulq_f32(v25, (float32x4_t)xmmword_23435FD60);
      float32x4_t v33 = vmulq_f32(v25, (float32x4_t)xmmword_23435FD80);
    }
    long long v366 = (__int128)v32;
    long long v367 = (__int128)v33;
    float32x4_t v80 = vmulq_f32(v28, (float32x4_t)0);
    v80.i32[3] = 0;
    float32x4_t v81 = vmulq_f32(v29, (float32x4_t)0);
    v81.i32[3] = 0;
    float32x4_t v82 = vmulq_f32(v30, (float32x4_t)0);
    v82.i32[3] = 0;
    long long v365 = (__int128)v31;
    float32x4_t v359 = vaddq_f32(v82, vaddq_f32(v81, v80));
  }
  uint64_t v369 = *(void *)(v12 + 48);
  v83.i64[0] = *(void *)(a7 + 16);
  v83.i64[1] = *(unsigned int *)(a7 + 24);
  v84.i64[0] = *(void *)(a6 + 16);
  float32x4_t v85 = *a4;
  v84.i64[1] = *(unsigned int *)(a6 + 24);
  float32x4_t v86 = vnegq_f32(*a4);
  float32x4_t v87 = vsubq_f32(v83, v84);
  float32x4_t v88 = v86;
  v88.i32[3] = 0;
  float32x4_t v329 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v89) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v329.f32, *(float32x2_t *)v329.f32).u32[0];
  float32x4_t v90 = vmulq_n_f32(v87, v89);
  v90.i32[3] = 0;
  float32x2_t v91 = (float32x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
  float32x2_t v92 = (float32x2_t)vext_s8(*(int8x8_t *)v86.f32, (int8x8_t)v91, 4uLL);
  int8x8_t v93 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v86.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 4uLL)), v92, *(float32x2_t *)v87.f32);
  *(int8x8_t *)v94.f32 = vext_s8(v93, (int8x8_t)vmls_f32(vmul_f32(v91, *(float32x2_t *)v87.f32), *(float32x2_t *)v86.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL)), 4uLL);
  v94.i64[1] = v93.u32[0];
  float32x4_t v95 = vmlaq_laneq_f32(v90, v94, *a4, 3);
  v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
  float32x4_t v96 = vmulq_f32(v88, v87);
  v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
  float32x4_t v97 = vmlaq_n_f32(v95, v88, vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32).f32[0]);
  float32x4_t v98 = vaddq_f32(v97, v97);
  v98.i32[3] = 0;
  float32x4_t v99 = *(float32x4_t *)a5->i8;
  v99.i32[3] = 0;
  float32x4_t v100 = vmulq_f32(v99, v88);
  v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
  float32x4_t v101 = vmulq_laneq_f32(v99, *a4, 3);
  v99.i64[0] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
  int8x8_t v102 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*a5, *(int8x8_t *)v99.f32, 4uLL), *(float32x2_t *)v86.f32), v92, (float32x2_t)*a5);
  *(int8x8_t *)v103.f32 = vext_s8(v102, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*a5, v91), *(float32x2_t *)v86.f32, *(float32x2_t *)v99.f32), 4uLL);
  *(int8x8_t *)&v103.u32[2] = v102;
  float32x4_t v104 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v88, *(float32x4_t *)a5->i8, 3), v101), v103);
  *(int32x2_t *)v86.f32 = vdup_lane_s32(*(int32x2_t *)v104.f32, 1);
  *(int32x2_t *)v88.f32 = vdup_laneq_s32((int32x4_t)v104, 2);
  float32x4_t v105 = vaddq_f32(v104, v104);
  float32x2_t v106 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5->i8, *(int8x16_t *)a5->i8, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL)), vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32));
  *(int32x2_t *)v99.f32 = vdup_laneq_s32((int32x4_t)v105, 2);
  *(int32x2_t *)v104.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v105.f32), 0);
  float32x2_t v107 = vmul_lane_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v105.f32, 1);
  float32x2_t v108 = vmul_laneq_f32(*(float32x2_t *)v88.f32, v105, 2);
  *(float32x2_t *)v86.f32 = vmul_n_f32(*(float32x2_t *)v86.f32, v105.f32[0]);
  float32x2_t v109 = vmul_n_f32(*(float32x2_t *)v88.f32, v105.f32[0]);
  *(float32x2_t *)v100.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.f32, 0), v106, 1);
  *(float32x2_t *)v88.f32 = vmul_lane_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v105.f32, 1);
  *(float32x2_t *)v105.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.f32, 1), v106, 1);
  float32x2_t v110 = vmul_lane_f32(*(float32x2_t *)v99.f32, v106, 1);
  *(float32x2_t *)v104.f32 = vsub_f32(_D8, *(float32x2_t *)v104.f32);
  *(int8x8_t *)v99.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D8, v107), v108), (int8x8_t)vadd_f32(*(float32x2_t *)v86.f32, v110), 4uLL);
  v99.i64[1] = vsub_f32(v109, *(float32x2_t *)v105.f32).u32[0];
  *(int8x8_t *)v86.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v86.f32, v110), (int8x8_t)vsub_f32(*(float32x2_t *)v104.f32, v108), 4uLL);
  v86.i64[1] = vadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v100.f32).u32[0];
  int32x4_t v350 = (int32x4_t)v99;
  int32x4_t v351 = (int32x4_t)v86;
  *(int8x8_t *)v86.f32 = vext_s8((int8x8_t)vadd_f32(v109, *(float32x2_t *)v105.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v100.f32), 4uLL);
  v86.i64[1] = vsub_f32(*(float32x2_t *)v104.f32, v107).u32[0];
  int32x4_t v352 = (int32x4_t)v86;
  float32x4_t v353 = v98;
  *(int8x8_t *)v104.f32 = a5[2];
  v104.i64[1] = a5[3].u32[0];
  v86.i64[0] = a4[1].i64[0];
  v86.i64[1] = a4[1].u32[2];
  float32x4_t v330 = v84;
  float32x4_t v325 = vsubq_f32(v104, v83);
  float32x4_t v111 = vsubq_f32(vsubq_f32(v86, v84), v325);
  float32x4_t v112 = v85;
  v112.i32[3] = 0;
  float v327 = v89;
  float32x2_t v328 = *(float32x2_t *)v85.f32;
  float32x4_t v113 = vmulq_n_f32(v111, v89);
  v113.i32[3] = 0;
  float32x2_t v324 = (float32x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
  float32x2_t v323 = (float32x2_t)vext_s8(*(int8x8_t *)v85.f32, (int8x8_t)v324, 4uLL);
  *(float32x2_t *)v88.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v85.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 4uLL)), v323, *(float32x2_t *)v111.f32);
  *(int8x8_t *)v86.f32 = vext_s8(*(int8x8_t *)v88.f32, (int8x8_t)vmls_f32(vmul_f32(v324, *(float32x2_t *)v111.f32), *(float32x2_t *)v85.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL)), 4uLL);
  v86.i64[1] = v88.u32[0];
  float32x4_t v114 = vmlsq_laneq_f32(v113, v86, v85, 3);
  v114.i64[1] = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u32[0];
  float32x4_t v115 = vmulq_f32(v112, v111);
  v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
  float32x4_t v326 = v112;
  float32x4_t v116 = vmlaq_n_f32(v114, v112, vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32).f32[0]);
  float32x4_t v117 = vaddq_f32(v116, v116);
  v346.i64[1] = a11;
  v346.i64[0] = (uint64_t)&unk_26E728D40;
  float32x4_t v347 = &v350;
  float32x2_t v118 = (float *)v348;
  v348[0] = v350;
  v349[0] = v352;
  float32x4_t v119 = (float *)v349;
  float32x2x2_t v120 = (float32x2x2_t)vzip1q_s32(v350, v352);
  v105.i64[0] = vzip2q_s32(v350, v352).u64[0];
  int32x4_t v121 = vzip1q_s32(v351, (int32x4_t)0);
  v100.i64[0] = vzip2q_s32(v351, (int32x4_t)0).u64[0];
  vst2_f32(v118, v120);
  v349[1] = v98;
  v348[1] = vzip2q_s32((int32x4_t)v120, v121);
  vst2_f32(v119, *(float32x2x2_t *)((char *)&v100 - 8));
  float32x4_t v345 = &v359;
  float32x4_t v344 = &unk_26E728850;
  unsigned int v357 = 1;
  float32x4_t v122 = vmulq_f32(v98, v98);
  v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
  float32x4_t v123 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v98, (int8x16_t)xmmword_23435FD50);
  float32x4_t v124 = vmulq_f32(v123, v123);
  v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
  float32x2_t v125 = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
  float32x2_t v126 = vrsqrte_f32(v125);
  int v127 = 4;
  do
  {
    float32x2_t v126 = vmul_f32(v126, vrsqrts_f32(vmul_f32(v126, v126), v125));
    --v127;
  }
  while (v127);
  v117.i32[3] = 0;
  float32x4_t v334 = v117;
  int8x16_t v128 = (int8x16_t)vmlaq_f32((float32x4_t)0, (float32x4_t)0, v117);
  float32x2_t v129 = vmul_f32(v125, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v125), 0), (int8x8_t)_D8, (int8x8_t)v126));
  float32x2_t v130 = vrecpe_f32(v129);
  int v131 = 4;
  do
  {
    float32x2_t v130 = vmul_f32(v130, vrecps_f32(v129, v130));
    --v131;
  }
  while (v131);
  *(float *)&a2 = *(float *)&a2 + 0.0;
  float32x2_t v132 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
  v128.i64[1] = vextq_s8(v128, v128, 8uLL).u32[0];
  float32x4_t v338 = (float32x4_t)v128;
  float32x4_t v133 = vmulq_n_f32(v123, v130.f32[0]);
  v133.i32[3] = 0;
  float32x4_t v356 = v133;
  float32x4_t v134 = vnegq_f32(v133);
  v134.i32[3] = 0;
  float32x4_t v372 = v134;
  *(double *)v135.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v346, (float32x2_t *)&v372);
  float32x4_t v341 = v135;
  *(double *)v136.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v356);
  float32x4_t v137 = v136;
  float32x4_t v138 = vsubq_f32(v341, v136);
  float32x4_t v372 = v138;
  float32x4_t v373 = 0u;
  float32x4_t v374 = 0u;
  int32x4_t v375 = 0u;
  float32x4_t v377 = v341;
  float32x4_t v378 = 0u;
  float32x4_t v139 = vnegq_f32(v138);
  v139.i32[3] = 0;
  float32x4_t v379 = 0u;
  long long v380 = 0u;
  float32x4_t v382 = v137;
  float32x4_t v383 = 0u;
  float32x4_t v384 = 0u;
  long long v385 = 0u;
  int8x8_t v140 = &v345[1].f32[2];
  *(float32x2_t *)v137.f32 = vld1_dup_f32(v140);
  float32x2_t v141 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v137.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v137.f32, v141), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v142 = vadd_f32(v132, *(float32x2_t *)v137.f32);
  float32x2_t v143 = vmul_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32);
  float32x2_t v144 = vmul_f32(v142, v142);
  float32x4_t v145 = vmulq_f32(v139, v139);
  float32x4_t v146 = vpaddq_f32(v145, v145);
  float32x2_t v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
  float32x2_t v322 = v143;
  *(int32x2_t *)v146.f32 = vcgt_f32(v147, v143);
  int32x4_t v148 = vdupq_lane_s32(*(int32x2_t *)v146.f32, 0);
  v146.i32[0] = -1;
  int32x4_t v321 = (int32x4_t)v146;
  int8x16_t v149 = (int8x16_t)v138;
  v150.i64[0] = -1;
  v150.i64[1] = -1;
  int8x16_t v332 = (int8x16_t)v139;
  float32x4_t v151 = v139;
  float32x2_t v335 = 0;
  while (1)
  {
    int8x16_t v152 = (int8x16_t)v138;
    v153.i64[0] = -1;
    v153.i64[1] = -1;
    *(int16x4_t *)v153.i8 = vmovn_s32(vceqq_s32(v148, v153));
    unsigned __int32 v154 = vuzp1_s8(*(int8x8_t *)v153.i8, *(int8x8_t *)v153.i8).u32[0];
    if (v154 != -1) {
      break;
    }
    float32x4_t v155 = vmulq_f32(v151, v151);
    v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
    float32x2_t v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
    float32x2_t v157 = vrsqrte_f32(v156);
    int v158 = 4;
    do
    {
      float32x2_t v157 = vmul_f32(v157, vrsqrts_f32(vmul_f32(v157, v157), v156));
      --v158;
    }
    while (v158);
    int8x16_t v339 = v152;
    float32x2_t v159 = vmul_f32(v156, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v156), 0), (int8x8_t)_D8, (int8x8_t)v157));
    float32x2_t v160 = vrecpe_f32(v159);
    int v161 = 4;
    do
    {
      float32x2_t v160 = vmul_f32(v160, vrecps_f32(v159, v160));
      --v161;
    }
    while (v161);
    float32x4_t v337 = v151;
    float32x4_t v162 = vmulq_n_f32(v151, v160.f32[0]);
    v162.i32[3] = 0;
    float32x4_t v355 = v162;
    float32x4_t v163 = vnegq_f32(v162);
    v163.i32[3] = 0;
    float32x4_t v354 = v163;
    *(double *)v164.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v346, (float32x2_t *)&v355);
    float32x4_t v342 = v164;
    *(double *)v165.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v354);
    float32x4_t v166 = v342;
    float32x4_t v167 = vaddq_f32(v338, v165);
    float32x4_t v138 = vsubq_f32(v342, v167);
    float32x4_t v168 = vnegq_f32(v138);
    v168.i32[3] = 0;
    float32x4_t v169 = vmulq_f32(v355, v168);
    v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
    float32x2_t v170 = vsub_f32(vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32), v142);
    if (v170.f32[0] > 0.0)
    {
      float32x4_t v171 = vmulq_f32(v334, v355);
      v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
      float32x2_t v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
      if (v172.f32[0] >= 0.0) {
        goto LABEL_85;
      }
      float32x2_t v173 = vrecpe_f32(v172);
      int v174 = 4;
      do
      {
        float32x2_t v173 = vmul_f32(v173, vrecps_f32(v172, v173));
        --v174;
      }
      while (v174);
      float32x2_t v175 = vsub_f32(v335, vmul_f32(v170, v173));
      if (vcgt_f32(v175, v335).u8[0])
      {
        if (v175.f32[0] > 1.0)
        {
LABEL_85:
          float32x2_t v274 = 0;
          float32x4_t v272 = 0uLL;
          float32x4_t v276 = 0uLL;
          goto LABEL_91;
        }
        float32x4_t v176 = vmlaq_n_f32((float32x4_t)0, v334, v175.f32[0]);
        v176.i64[1] = vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u32[0];
        float32x4_t v336 = v176;
        float32x4_t v177 = vsubq_f32(v176, v338);
        float32x2_t v333 = v175;
        float32x4_t v382 = vaddq_f32(v177, v382);
        float32x4_t v383 = vaddq_f32(v177, v383);
        float32x4_t v384 = vaddq_f32(v177, v384);
        float32x4_t v372 = vsubq_f32(v377, v382);
        float32x4_t v373 = vsubq_f32(v378, v383);
        float32x4_t v374 = vsubq_f32(v379, v384);
        *(double *)v178.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v344, &v354);
        float32x4_t v166 = v342;
        float32x4_t v167 = vaddq_f32(v336, v178);
        float32x4_t v138 = vsubq_f32(v342, v167);
        float32x2_t v147 = v141;
        int8x16_t v332 = (int8x16_t)v337;
        float32x4_t v338 = v336;
        float32x2_t v179 = v333;
      }
      else
      {
        float32x2_t v179 = v175;
      }
      float32x2_t v335 = v179;
    }
    uint64_t v180 = v357;
    *(&v377 + v357) = v166;
    *(&v382 + v180) = v167;
    unsigned int v357 = v180 + 1;
    *(&v372 + v180) = v138;
    if (v180 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v372, &v377, &v382, (int *)&v357);
LABEL_42:
      int8x16_t v149 = v339;
      goto LABEL_76;
    }
    if (v180 != 2)
    {
      int8x16_t v149 = v339;
      if (v180 != 1) {
        goto LABEL_76;
      }
      float32x4_t v138 = v372;
      float32x4_t v181 = vsubq_f32(v373, v372);
      float32x4_t v182 = vmulq_f32(v181, v181);
      v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
      float32x2_t v183 = vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v183), 0), *(int8x8_t *)v372.f32).u32[0] != -1)
      {
        float32x4_t v184 = vnegq_f32(v372);
        v184.i32[3] = 0;
        float32x4_t v185 = vmulq_f32(v184, v181);
        v185.i64[0] = vpaddq_f32(v185, v185).u64[0];
        float32x2_t v186 = vpadd_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32);
        float32x2_t v187 = vrecpe_f32(v183);
        int v188 = 4;
        do
        {
          float32x2_t v187 = vmul_f32(v187, vrecps_f32(v183, v187));
          --v188;
        }
        while (v188);
        float32x4_t v138 = vmlaq_n_f32(v372, v181, vmax_f32(vmin_f32(vmul_f32(v186, v187), _D8), 0).f32[0]);
LABEL_57:
        v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
        goto LABEL_76;
      }
LABEL_58:
      unsigned int v357 = 1;
      goto LABEL_76;
    }
    float32x4_t v138 = v372;
    float32x4_t v189 = vsubq_f32(v373, v372);
    float32x4_t v190 = vsubq_f32(v374, v372);
    int8x8_t v192 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v189.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v190, (int8x16_t)v190, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v189, (int8x16_t)v189, 4uLL), *(float32x2_t *)v190.f32);
    *(int8x8_t *)v191.f32 = vext_s8(v192, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL), *(float32x2_t *)v190.f32), *(float32x2_t *)v189.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL)), 4uLL);
    v192.i32[1] = 0;
    unsigned int v357 = 3;
    float32x2_t v193 = vpadd_f32(vmul_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32), vmul_f32((float32x2_t)v192.u32[0], (float32x2_t)v192.u32[0]));
    float32x2_t v194 = vpadd_f32(v193, v193);
    if (v194.f32[0] <= 0.00000011921)
    {
      unsigned int v357 = 2;
      float32x4_t v231 = vmulq_f32(v189, v189);
      v231.i64[0] = vpaddq_f32(v231, v231).u64[0];
      float32x2_t v232 = vpadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32);
      int8x16_t v149 = v339;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v232), 0), *(int8x8_t *)v372.f32).u32[0] != -1)
      {
        float32x4_t v233 = vnegq_f32(v372);
        v233.i32[3] = 0;
        float32x4_t v234 = vmulq_f32(v233, v189);
        v234.i64[0] = vpaddq_f32(v234, v234).u64[0];
        float32x2_t v235 = vpadd_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v234.f32);
        float32x2_t v236 = vrecpe_f32(v232);
        int v237 = 4;
        do
        {
          float32x2_t v236 = vmul_f32(v236, vrecps_f32(v232, v236));
          --v237;
        }
        while (v237);
        float32x4_t v138 = vmlaq_n_f32(v372, v189, vmax_f32(vmin_f32(vmul_f32(v235, v236), _D8), 0).f32[0]);
        goto LABEL_57;
      }
      goto LABEL_58;
    }
    if (v194.f32[0] == 0.0)
    {
      float32x4_t v138 = 0uLL;
      goto LABEL_42;
    }
    *(int8x8_t *)&v191.u32[2] = v192;
    float32x2_t v195 = (float32x2_t)vextq_s8((int8x16_t)v373, (int8x16_t)v373, 8uLL).u64[0];
    float32x2_t v196 = (float32x2_t)vextq_s8((int8x16_t)v374, (int8x16_t)v374, 8uLL).u64[0];
    float32x2_t v197 = (float32x2_t)vextq_s8((int8x16_t)v374, (int8x16_t)v374, 4uLL).u64[0];
    float32x2_t v198 = (float32x2_t)vextq_s8((int8x16_t)v373, (int8x16_t)v373, 4uLL).u64[0];
    int8x8_t v199 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v373.f32, v197), v198, *(float32x2_t *)v374.f32);
    *(int8x8_t *)v200.f32 = vext_s8(v199, (int8x8_t)vmls_f32(vmul_f32(v195, *(float32x2_t *)v374.f32), *(float32x2_t *)v373.f32, v196), 4uLL);
    v200.i64[1] = v199.u32[0];
    float32x2_t v201 = (float32x2_t)vextq_s8((int8x16_t)v372, (int8x16_t)v372, 8uLL).u64[0];
    float32x2_t v202 = (float32x2_t)vextq_s8((int8x16_t)v372, (int8x16_t)v372, 4uLL).u64[0];
    int8x8_t v203 = (int8x8_t)vmls_f32(vmul_f32(v202, *(float32x2_t *)v374.f32), v197, *(float32x2_t *)v372.f32);
    *(int8x8_t *)v204.f32 = vext_s8(v203, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v372.f32, v196), *(float32x2_t *)v374.f32, v201), 4uLL);
    v204.i64[1] = v203.u32[0];
    int8x8_t v205 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v372.f32, v198), v202, *(float32x2_t *)v373.f32);
    *(int8x8_t *)v206.f32 = vext_s8(v205, (int8x8_t)vmls_f32(vmul_f32(v201, *(float32x2_t *)v373.f32), *(float32x2_t *)v372.f32, v195), 4uLL);
    v206.i64[1] = v205.u32[0];
    float32x4_t v207 = vmulq_f32(v200, v191);
    v207.i64[0] = vpaddq_f32(v207, v207).u64[0];
    float32x2_t v208 = vpadd_f32(*(float32x2_t *)v207.f32, *(float32x2_t *)v207.f32);
    float32x4_t v209 = vmulq_f32(v204, v191);
    v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
    float32x2_t v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
    float32x4_t v211 = vmulq_f32(v206, v191);
    v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
    float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v210), (int8x8_t)vcgez_f32(v208)), (int8x8_t)vcgez_f32(v212)), 0), *(int8x8_t *)v372.f32).u32[0] != -1)
    {
      float32x4_t v213 = vnegq_f32(v372);
      v213.i32[3] = 0;
      float32x4_t v214 = vnegq_f32(v373);
      v214.i32[3] = 0;
      float32x4_t v215 = vmulq_f32(v213, v189);
      v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
      float32x2_t v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
      float32x4_t v217 = vmulq_f32(v189, v214);
      v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
      float32x2_t v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v216), (int8x8_t)vclez_f32(v218)), (int8x8_t)vclez_f32(v212)), 0), *(int8x8_t *)v372.f32).u32[0] == -1)
      {
        float32x2_t v241 = vsub_f32(v216, v218);
        float32x2_t v242 = vrecpe_f32(v241);
        int v243 = 4;
        do
        {
          float32x2_t v242 = vmul_f32(v242, vrecps_f32(v241, v242));
          --v243;
        }
        while (v243);
        uint64_t v230 = 0;
        float32x4_t v138 = vmlaq_n_f32(v372, v189, vmul_f32(v216, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v241), (float32x2_t)0x3400000034000000), (int8x8_t)v242, 0)).f32[0]);
        v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
        unsigned int v244 = 2;
        uint64_t v229 = 1;
      }
      else
      {
        float32x4_t v219 = vnegq_f32(v374);
        v219.i32[3] = 0;
        float32x4_t v220 = vmulq_f32(v214, v190);
        v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
        float32x2_t v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
        float32x4_t v222 = vmulq_f32(v189, v219);
        v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
        float32x2_t v223 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
        float32x4_t v224 = vmulq_f32(v190, v219);
        v224.i64[0] = vpaddq_f32(v224, v224).u64[0];
        float32x2_t v225 = vpadd_f32(*(float32x2_t *)v224.f32, *(float32x2_t *)v224.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v221, v218), (int8x8_t)vcge_f32(v223, v225)), (int8x8_t)vclez_f32(v208)), 0), *(int8x8_t *)v372.f32).u32[0] != -1)
        {
          float32x4_t v226 = vmulq_f32(v213, v190);
          v226.i64[0] = vpaddq_f32(v226, v226).u64[0];
          float32x2_t v227 = vpadd_f32(*(float32x2_t *)v226.f32, *(float32x2_t *)v226.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v227), (int8x8_t)vclez_f32(v225)), (int8x8_t)vclez_f32(v210)), 0), *(int8x8_t *)v372.f32).u32[0] == -1)
          {
            float32x2_t v250 = vsub_f32(v227, v225);
            float32x2_t v251 = vrecpe_f32(v250);
            int v252 = 4;
            int8x16_t v149 = v339;
            do
            {
              float32x2_t v251 = vmul_f32(v251, vrecps_f32(v250, v251));
              --v252;
            }
            while (v252);
            uint64_t v230 = 0;
            float32x4_t v138 = vmlaq_n_f32(v372, v190, vmul_f32(v227, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v250), (float32x2_t)0x3400000034000000), (int8x8_t)v251, 0)).f32[0]);
            v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
            uint64_t v229 = 2;
          }
          else
          {
            int8x16_t v149 = v339;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v227), (int8x8_t)vclez_f32(v216)), 0), *(int8x8_t *)v372.f32).u32[0] == -1)
            {
              uint64_t v230 = 0;
              uint64_t v229 = 1;
            }
            else
            {
              *(int16x4_t *)v138.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v218, v221), (int8x8_t)vcgez_f32(v218)), 0);
              *(int8x8_t *)v138.f32 = vuzp1_s8(*(int8x8_t *)v138.f32, *(int8x8_t *)v138.f32);
              __int32 v228 = v138.i32[0];
              float32x4_t v138 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v138, v321), 0), (int8x16_t)v373, (int8x16_t)v374);
              uint64_t v229 = 1;
              if (v228 == -1) {
                uint64_t v230 = 1;
              }
              else {
                uint64_t v230 = 2;
              }
            }
          }
          unsigned int v244 = v229;
          goto LABEL_75;
        }
        float32x2_t v245 = vsub_f32(v221, v218);
        float32x2_t v246 = vadd_f32(v245, vsub_f32(v223, v225));
        float32x2_t v247 = vrecpe_f32(v246);
        int v248 = 4;
        do
        {
          float32x2_t v247 = vmul_f32(v247, vrecps_f32(v246, v247));
          --v248;
        }
        while (v248);
        int8x16_t v249 = (int8x16_t)vmlaq_n_f32(v373, vsubq_f32(v374, v373), vmul_f32(v245, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v246), (float32x2_t)0x3400000034000000), (int8x8_t)v247, 0)).f32[0]);
        v249.i64[1] = vextq_s8(v249, v249, 8uLL).u32[0];
        unsigned int v244 = 2;
        uint64_t v229 = 2;
        uint64_t v230 = 1;
        float32x4_t v138 = (float32x4_t)v249;
      }
      int8x16_t v149 = v339;
LABEL_75:
      float32x4_t v253 = *(&v372 + v229);
      float32x4_t v254 = *(&v377 + v230);
      float32x4_t v255 = *(&v377 + v229);
      float32x4_t v256 = *(&v382 + v230);
      float32x4_t v257 = *(&v382 + v229);
      float32x4_t v372 = *(&v372 + v230);
      float32x4_t v373 = v253;
      float32x4_t v377 = v254;
      float32x4_t v378 = v255;
      float32x4_t v382 = v256;
      float32x4_t v383 = v257;
      unsigned int v357 = v244;
      goto LABEL_76;
    }
    float32x2_t v238 = vrecpe_f32(v194);
    int v239 = 4;
    int8x16_t v149 = v339;
    do
    {
      float32x2_t v238 = vmul_f32(v238, vrecps_f32(v194, v238));
      --v239;
    }
    while (v239);
    float32x4_t v240 = vmulq_f32(v372, v191);
    v240.i64[0] = vpaddq_f32(v240, v240).u64[0];
    float32x4_t v138 = vmulq_n_f32(v191, vmul_f32(v238, vpadd_f32(*(float32x2_t *)v240.f32, *(float32x2_t *)v240.f32)).f32[0]);
    v138.i32[3] = 0;
LABEL_76:
    float32x4_t v151 = vnegq_f32(v138);
    v151.i32[3] = 0;
    float32x4_t v258 = vmulq_f32(v138, v138);
    v258.i64[0] = vpaddq_f32(v258, v258).u64[0];
    float32x2_t v259 = vpadd_f32(*(float32x2_t *)v258.f32, *(float32x2_t *)v258.f32);
    int8x8_t v260 = (int8x8_t)vcgt_f32(v147, v259);
    int8x16_t v150 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v260, (int8x8_t)0x100000001), 0);
    int32x4_t v148 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v259, v144), v260), 0);
    float32x2_t v147 = v259;
  }
  uint64_t v261 = v346.i64[1];
  float32x4_t v262 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v147, v322), 0), v150), 0x1FuLL)), (int8x16_t)v151, v332);
  float32x4_t v263 = vmulq_f32(v262, v262);
  v263.i64[0] = vpaddq_f32(v263, v263).u64[0];
  float32x2_t v264 = vpadd_f32(*(float32x2_t *)v263.f32, *(float32x2_t *)v263.f32);
  float32x2_t v265 = vrsqrte_f32(v264);
  int v266 = 4;
  do
  {
    float32x2_t v265 = vmul_f32(v265, vrsqrts_f32(vmul_f32(v265, v265), v264));
    --v266;
  }
  while (v266);
  float32x2_t v267 = vmul_f32(v264, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v264), 0), (int8x8_t)_D8, (int8x8_t)v265));
  float32x2_t v268 = vrecpe_f32(v267);
  int v269 = 4;
  do
  {
    float32x2_t v268 = vmul_f32(v268, vrecps_f32(v267, v268));
    --v269;
  }
  while (v269);
  int8x16_t v270 = (int8x16_t)vdupq_n_s32(-*(char *)(v346.i64[1] + 32));
  int8x16_t v271 = (int8x16_t)vmulq_n_f32(v262, v268.f32[0]);
  v271.i32[3] = 0;
  float32x4_t v272 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v267), 0), v271));
  v272.i32[3] = 0;
  float32x4_t v273 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v150, 0x1FuLL)), v152, v149);
  float32x4_t v355 = v273;
  float32x2_t v274 = v335;
  if (v357 == 3)
  {
    v354.i64[0] = 0;
    float32x2_t v358 = 0;
    int8x16_t v340 = v270;
    float32x4_t v343 = v272;
    physx::Gu::barycentricCoordinates(&v355, &v372, &v373, &v374, (float32x2_t *)&v354, &v358);
    int8x16_t v270 = v340;
    float32x4_t v272 = v343;
    float32x2_t v274 = v335;
    v150.i32[1] = v377.i32[1];
    float32x4_t v277 = vmulq_n_f32(vsubq_f32(v378, v377), v354.f32[0]);
    v277.i32[3] = 0;
    float32x4_t v278 = vmulq_n_f32(vsubq_f32(v379, v377), v358.f32[0]);
    v278.i32[3] = 0;
    float32x4_t v275 = vaddq_f32(v377, vaddq_f32(v277, v278));
  }
  else if (v357 == 2)
  {
    float32x4_t v279 = vsubq_f32(v372, v273);
    float32x4_t v280 = vsubq_f32(vsubq_f32(v373, v273), v279);
    float32x4_t v281 = vmulq_f32(v280, v280);
    v281.i64[0] = vpaddq_f32(v281, v281).u64[0];
    float32x2_t v282 = vpadd_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32);
    float32x2_t v283 = vrecpe_f32(v282);
    int v284 = 4;
    do
    {
      float32x2_t v283 = vmul_f32(v283, vrecps_f32(v282, v283));
      --v284;
    }
    while (v284);
    float32x4_t v285 = vnegq_f32(v279);
    v285.i32[3] = 0;
    float32x4_t v286 = vmulq_f32(v285, v280);
    v286.i64[0] = vpaddq_f32(v286, v286).u64[0];
    float32x4_t v275 = vmlaq_n_f32(v377, vsubq_f32(v378, v377), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v282), (int8x8_t)v283, 0), vpadd_f32(*(float32x2_t *)v286.f32, *(float32x2_t *)v286.f32)).f32[0]);
    v150.i32[1] = 0;
    v275.i64[1] = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v275 = 0uLL;
    if (v357 == 1) {
      float32x4_t v275 = v377;
    }
  }
  v150.i32[0] = *(_DWORD *)(v261 + 16);
  int8x16_t v287 = (int8x16_t)vmlsq_lane_f32(v275, v272, *(float32x2_t *)v150.i8, 0);
  v287.i64[1] = vextq_s8(v287, v287, 8uLL).u32[0];
  float32x4_t v276 = (float32x4_t)vbslq_s8(v270, v287, (int8x16_t)v275);
LABEL_91:
  if (v154 == -1)
  {
    v274.i32[0] = 2139095039;
  }
  else
  {
    if (v274.f32[0] == 0.0)
    {
      v276.i32[0] = *(_DWORD *)(v346.i64[1] + 16);
      uint64_t v288 = (uint64_t)v345;
      float v289 = v345[1].f32[0];
      v354.i8[0] = 0;
      float32x2_t v381 = 0;
      float32x4_t v377 = 0u;
      float32x4_t v378 = 0u;
      float32x4_t v379 = 0u;
      v372.i64[1] = v346.i64[1];
      v372.i64[0] = (uint64_t)&unk_26E728D40;
      v373.i64[0] = (uint64_t)v347;
      float32x2x2_t v291 = (float32x2x2_t)v347[2];
      float32x4_t v290 = (float32x4_t)v347[3];
      int32x4_t v292 = *v347;
      int32x4_t v375 = v347[1];
      v376[0] = v291;
      float32x4_t v374 = (float32x4_t)v292;
      float32x2x2_t v293 = (float32x2x2_t)vzip1q_s32(v292, (int32x4_t)v291);
      v291.val[0] = (float32x2_t)vzip2q_s32(v292, (int32x4_t)v291).u64[0];
      int32x4_t v294 = vzip1q_s32(v375, (int32x4_t)0);
      unint64_t v295 = vzip2q_s32(v375, (int32x4_t)0).u64[0];
      v276.f32[0] = (float)(v276.f32[0] + v289) * 100.0;
      float32x4_t v296 = &v374;
      float32x4_t v297 = (float *)v376;
      vst2_f32(v296->f32, v293);
      v376[1] = v290;
      int32x4_t v375 = vzip2q_s32((int32x4_t)v293, v294);
      vst2_f32(v297, v291);
      v382.i64[0] = (uint64_t)&unk_26E728850;
      v382.i64[1] = v288;
      if (physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v372, (uint64_t)&v382, &v356, &v355, &v354, (uint64_t)&v377, v353, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v276.f32, 0), 0.0, v290) != 5)goto LABEL_95; {
      __asm { FMOV            V8.2S, #1.0 }
      }
      if (physx::Gu::epaPenetration((uint64_t)&v346) - 5 >= 2)
      {
        float32x4_t v299 = vnegq_f32(v334);
        v299.i32[3] = 0;
        float32x4_t v300 = vmulq_f32(v299, v299);
        v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
        float32x2_t v301 = vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32);
        float32x2_t v302 = vrsqrte_f32(v301);
        int v303 = 4;
        do
        {
          float32x2_t v302 = vmul_f32(v302, vrsqrts_f32(vmul_f32(v302, v302), v301));
          --v303;
        }
        while (v303);
        float32x2_t v304 = vmul_f32(v301, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v301), 0), _D8, (int8x8_t)v302));
        float32x2_t v305 = vrecpe_f32(v304);
        int v306 = 4;
        do
        {
          float32x2_t v305 = vmul_f32(v305, vrecps_f32(v304, v305));
          --v306;
        }
        while (v306);
        float32x4_t v272 = vmulq_n_f32(v299, v305.f32[0]);
        v272.i32[3] = 0;
        float32x2_t v274 = 0;
        float32x4_t v276 = 0uLL;
      }
      else
      {
LABEL_95:
        float32x4_t v272 = v379;
        float32x4_t v276 = v377;
        float32x2_t v274 = vmin_f32(v381, 0);
      }
    }
    float32x4_t v307 = vmulq_n_f32(v276, v327);
    v307.i32[3] = 0;
    int8x8_t v308 = (int8x8_t)vmls_f32(vmul_f32(v328, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v276, (int8x16_t)v276, 4uLL)), v323, *(float32x2_t *)v276.f32);
    *(int8x8_t *)v309.f32 = vext_s8(v308, (int8x8_t)vmls_f32(vmul_f32(v324, *(float32x2_t *)v276.f32), v328, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v276, (int8x16_t)v276, 8uLL)), 4uLL);
    v309.i64[1] = v308.u32[0];
    float32x4_t v310 = vmlaq_f32(v307, v329, v309);
    v310.i64[1] = vextq_s8((int8x16_t)v310, (int8x16_t)v310, 8uLL).u32[0];
    float32x4_t v311 = vmulq_f32(v326, v276);
    v311.i64[0] = vpaddq_f32(v311, v311).u64[0];
    float32x4_t v312 = vmlaq_n_f32(v310, v326, vpadd_f32(*(float32x2_t *)v311.f32, *(float32x2_t *)v311.f32).f32[0]);
    v312.i64[1] = vextq_s8((int8x16_t)v312, (int8x16_t)v312, 8uLL).u32[0];
    v309.i64[0] = 0x4000000040000000;
    v309.i64[1] = 0x4000000040000000;
    float32x4_t v313 = vmlaq_f32(v330, v309, v312);
    v313.i64[1] = vextq_s8((int8x16_t)v313, (int8x16_t)v313, 8uLL).u32[0];
    float32x4_t v314 = vmlaq_n_f32(v313, v325, vmax_f32(v274, 0).f32[0]);
    float32x4_t v315 = vmulq_n_f32(v272, v327);
    v315.i32[3] = 0;
    *(float32x2_t *)v309.f32 = vmls_f32(vmul_f32(v328, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v272, (int8x16_t)v272, 4uLL)), v323, *(float32x2_t *)v272.f32);
    *(int8x8_t *)v312.f32 = vext_s8(*(int8x8_t *)v309.f32, (int8x8_t)vmls_f32(vmul_f32(v324, *(float32x2_t *)v272.f32), v328, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL)), 4uLL);
    v312.i64[1] = v309.u32[0];
    float32x4_t v316 = vmlaq_f32(v315, v329, v312);
    v316.i64[1] = vextq_s8((int8x16_t)v316, (int8x16_t)v316, 8uLL).u32[0];
    float32x4_t v317 = vmulq_f32(v326, v272);
    v317.i64[0] = vpaddq_f32(v317, v317).u64[0];
    float32x4_t v318 = vmlaq_n_f32(v316, v326, vpadd_f32(*(float32x2_t *)v317.f32, *(float32x2_t *)v317.f32).f32[0]);
    float32x4_t v319 = vaddq_f32(v318, v318);
    *(void *)a8 = v319.i64[0];
    *(_DWORD *)(a8 + 8) = v319.i32[2];
    *(void *)a9 = v314.i64[0];
    *(_DWORD *)(a9 + 8) = v314.i32[2];
  }
  return v274.f32[0];
}

float32x2_t physx::Gu::barycentricCoordinates(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, float32x2_t *a6)
{
  int8x16_t v6 = (int8x16_t)vsubq_f32(*a3, *a2);
  int8x16_t v7 = (int8x16_t)vsubq_f32(*a4, *a2);
  int8x8_t v8 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 4uLL), *(float32x2_t *)v7.i8);
  *(int8x8_t *)v6.i8 = vext_s8(v8, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), *(float32x2_t *)v7.i8), *(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)), 4uLL);
  int8x16_t v9 = (int8x16_t)vsubq_f32(*a2, *a1);
  int8x16_t v10 = (int8x16_t)vsubq_f32(*a3, *a1);
  int8x16_t v11 = (int8x16_t)vsubq_f32(*a4, *a1);
  v7.i64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
  float32x2_t v12 = (float32x2_t)vextq_s8(v11, v11, 8uLL).u64[0];
  float32x2_t v13 = (float32x2_t)vextq_s8(v11, v11, 4uLL).u64[0];
  float32x2_t v14 = (float32x2_t)vextq_s8(v10, v10, 4uLL).u64[0];
  int8x8_t v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v10.i8, v13), v14, *(float32x2_t *)v11.i8);
  float32x2_t v16 = (float32x2_t)vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v11.i8), *(float32x2_t *)v10.i8, v12), 4uLL);
  float32x2_t v17 = (float32x2_t)vextq_s8(v9, v9, 8uLL).u64[0];
  float32x2_t v18 = (float32x2_t)vextq_s8(v9, v9, 4uLL).u64[0];
  int8x8_t v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11.i8, v18), v13, *(float32x2_t *)v9.i8);
  *(int8x8_t *)v11.i8 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32(v12, *(float32x2_t *)v9.i8), *(float32x2_t *)v11.i8, v17), 4uLL);
  int8x8_t v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.i8, v14), v18, *(float32x2_t *)v10.i8);
  *(int8x8_t *)v9.i8 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v10.i8), *(float32x2_t *)v9.i8, *(float32x2_t *)v7.i8), 4uLL);
  *(float32x2_t *)v10.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v6.i8, v16), vmul_f32((float32x2_t)v8.u32[0], (float32x2_t)v15.u32[0]));
  *(float32x2_t *)v7.i8 = vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8);
  *(float32x2_t *)v10.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v11.i8), vmul_f32((float32x2_t)v8.u32[0], (float32x2_t)v19.u32[0]));
  float32x2_t v21 = vpadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v10.i8);
  float32x2_t v22 = vpadd_f32(vmul_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v9.i8), vmul_f32((float32x2_t)v8.u32[0], (float32x2_t)v20.u32[0]));
  float32x2_t v23 = vpadd_f32(v22, v22);
  float32x2_t v24 = vadd_f32(*(float32x2_t *)v7.i8, vadd_f32(v21, v23));
  float32x2_t v25 = vrecpe_f32(v24);
  int v26 = 4;
  do
  {
    float32x2_t v25 = vmul_f32(v25, vrecps_f32(v24, v25));
    --v26;
  }
  while (v26);
  float32x2_t v27 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vceqz_f32(v24)), 0), (int8x8_t)v25);
  *a5 = vmul_f32(v21, v27);
  float32x2_t result = vmul_f32(v23, v27);
  *a6 = result;
  return result;
}

uint64_t physx::Gu::SeparatingAxes::addAxis(_DWORD *a1, float *a2)
{
  int v3 = (float *)(a1 + 1);
  unsigned int v2 = *a1;
  float v4 = *a2;
  float v5 = a2[1];
  float v6 = a2[2];
  if (*a1)
  {
    int8x16_t v7 = &v3[3 * v2];
    while (fabsf((float)((float)(v5 * v3[1]) + (float)(v4 * *v3)) + (float)(v6 * v3[2])) <= 0.9999)
    {
      v3 += 3;
      if (v3 >= v7)
      {
        if (v2 <= 0xFF) {
          goto LABEL_6;
        }
        return 0;
      }
    }
    return 0;
  }
  else
  {
LABEL_6:
    *a1 = v2 + 1;
    int8x8_t v8 = (float *)&a1[3 * v2];
    v8[1] = v4;
    v8[2] = v5;
    v8[3] = v6;
    return 1;
  }
}

BOOL physx::Gu::contactBoxBox(float *a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v224 = *MEMORY[0x263EF8340];
  float v8 = *a3;
  float v9 = a3[1];
  float v10 = a3[2];
  float v11 = a3[3];
  float v12 = v9 + v9;
  float v13 = v10 + v10;
  float v14 = v9 * (float)(v9 + v9);
  float v15 = v10 * (float)(v10 + v10);
  float v16 = (float)(v8 + v8) * v9;
  float v17 = (float)(v8 + v8) * v10;
  float v18 = (float)(v8 + v8) * v11;
  float v19 = v12 * v10;
  float v20 = v12 * v11;
  float v21 = v13 * v11;
  float v22 = (float)(1.0 - v14) - v15;
  float v23 = v16 + v21;
  float v24 = v17 - v20;
  float v25 = v16 - v21;
  float v26 = 1.0 - (float)(v8 * (float)(v8 + v8));
  float v27 = v26 - v15;
  float v28 = v19 + v18;
  float v194 = v17 + v20;
  float v195 = v19 - v18;
  float v196 = v26 - v14;
  float v29 = a3[6];
  float v30 = *a4;
  float v31 = a4[1];
  float v32 = a4[2];
  float v33 = a4[3];
  float v34 = v31 + v31;
  float v35 = v32 + v32;
  float v36 = v31 * (float)(v31 + v31);
  float v37 = v32 * (float)(v32 + v32);
  float v38 = (float)(v30 + v30) * v31;
  float v39 = (float)(v30 + v30) * v32;
  float v40 = (float)(v30 + v30) * v33;
  float v41 = v34 * v32;
  float v42 = v34 * v33;
  float v43 = v35 * v33;
  float v44 = (float)(1.0 - v36) - v37;
  float v45 = v38 + v43;
  float v46 = v39 - v42;
  float v47 = v38 - v43;
  float v48 = 1.0 - (float)(v30 * (float)(v30 + v30));
  float v49 = v48 - v37;
  float v50 = v41 + v40;
  float v51 = v39 + v42;
  float v52 = v41 - v40;
  float v53 = v48 - v36;
  float v55 = a4[4];
  float v54 = a4[5];
  float v56 = a4[6];
  float v57 = a3[4];
  float v58 = a3[5];
  float v59 = (float)((float)(v23 * (float)(v48 - v37)) + (float)(v22 * v47)) + (float)(v24 * (float)(v41 + v40));
  float v193 = v54 - v58;
  float v60 = v55 - v57;
  float v61 = v56 - v29;
  float v62 = (float)((float)(v23 * (float)(v54 - v58)) + (float)(v22 * (float)(v55 - v57)))
      + (float)(v24 * (float)(v56 - v29));
  float v183 = (float)((float)(v23 * v45) + (float)(v22 * v44)) + (float)(v24 * v46);
  float v63 = fabsf(v183) + 0.000001;
  float v181 = (float)((float)(v23 * v52) + (float)(v22 * v51)) + (float)(v24 * v53);
  float v182 = v59;
  float v64 = fabsf(v59) + 0.000001;
  float32x4_t v65 = a1 + 1;
  float v66 = a2[1];
  float v67 = a2[2];
  float v191 = fabsf(v181) + 0.000001;
  float v192 = a1[1];
  float v68 = a2[3];
  float v69 = v28;
  float v70 = *a5;
  float v214 = *a5
       + (float)((float)((float)((float)(v192 + (float)(v66 * v63)) + (float)(v67 * v64)) + (float)(v68 * v191))
               - fabsf(v62));
  int v71 = *(unsigned __int8 *)(a6 + 10);
  float v187 = v22;
  float v188 = v23;
  *(float *)float32x2_t v198 = v22;
  *(float *)&v198[1] = v23;
  float v189 = v24;
  float v190 = v29;
  *(float *)&v198[2] = v24;
  *(float *)&v198[3] = v25;
  *(float *)&v198[4] = v27;
  *(float *)&v198[5] = v69;
  *(float *)&v198[6] = v194;
  *(float *)&v198[7] = v195;
  *(float *)&v198[8] = v196;
  *(float *)&v198[9] = v57;
  *(float *)&v198[10] = v58;
  *(float *)&v198[11] = v29;
  *(float *)float32x2_t v197 = v44;
  *(float *)&v197[1] = v45;
  *(float *)&v197[2] = v46;
  *(float *)&v197[3] = v47;
  *(float *)&v197[4] = v49;
  *(float *)&v197[5] = v50;
  *(float *)&v197[6] = v51;
  *(float *)&v197[7] = v52;
  *(float *)&v197[8] = v53;
  *(float *)&v197[9] = v55;
  float v184 = v55;
  float v185 = v54;
  *(float *)&v197[10] = v54;
  *(float *)&v197[11] = v56;
  float v186 = v56;
  v220[0] = v62;
  if (v214 < 0.0) {
    goto LABEL_26;
  }
  float v72 = v57;
  float v177 = v69;
  float v73 = (float)((float)(v27 * v193) + (float)(v25 * v60)) + (float)(v69 * v61);
  float v175 = v58;
  float v176 = (float)((float)(v27 * v45) + (float)(v25 * v44)) + (float)(v69 * v46);
  float v74 = fabsf(v176) + 0.000001;
  float v174 = (float)((float)(v27 * v49) + (float)(v25 * v47)) + (float)(v69 * v50);
  float v75 = fabsf(v174) + 0.000001;
  v220[1] = v73;
  float v180 = a1[2];
  float v178 = fabsf((float)((float)(v27 * v52) + (float)(v25 * v51)) + (float)(v69 * v53)) + 0.000001;
  float v215 = v70
       + (float)((float)((float)((float)(v180 + (float)(v66 * v74)) + (float)(v67 * v75)) + (float)(v68 * v178))
               - fabsf(v73));
  if (v215 < 0.0) {
    goto LABEL_26;
  }
  float v76 = v74;
  float v77 = v75;
  float v78 = v44;
  float v169 = (float)((float)(v27 * v52) + (float)(v25 * v51)) + (float)(v69 * v53);
  float v170 = v25;
  float v179 = v67;
  float v173 = v53;
  float v171 = v27;
  float v172 = v52;
  float v79 = (float)((float)(v195 * v193) + (float)(v194 * v60)) + (float)(v196 * v61);
  float v80 = (float)((float)(v195 * v45) + (float)(v194 * v44)) + (float)(v196 * v46);
  float v81 = fabsf(v80) + 0.000001;
  float v82 = (float)((float)(v195 * v49) + (float)(v194 * v47)) + (float)(v196 * v50);
  float v83 = fabsf(v82) + 0.000001;
  float v84 = (float)((float)(v195 * v52) + (float)(v194 * v51)) + (float)(v196 * v53);
  float v85 = fabsf(v84) + 0.000001;
  v220[2] = v79;
  float v86 = a1[3];
  float v216 = v70
       + (float)((float)((float)((float)(v86 + (float)(v66 * v81)) + (float)(v67 * v83)) + (float)(v68 * v85))
               - fabsf(v79));
  if (v216 < 0.0) {
    goto LABEL_26;
  }
  float v167 = v66;
  float v168 = v68;
  float v87 = v85;
  float v221 = (float)((float)(v45 * v193) + (float)(v78 * v60)) + (float)(v46 * v61);
  float v88 = v192;
  float v89 = v66 + (float)(v192 * v63);
  float v90 = v180;
  float v217 = v70 + (float)((float)((float)(v89 + (float)(v180 * v76)) + (float)(v86 * v81)) - fabsf(v221));
  if (v217 < 0.0) {
    goto LABEL_26;
  }
  float v222 = (float)((float)(v49 * v193) + (float)(v47 * v60)) + (float)(v50 * v61);
  float v218 = v70
       + (float)((float)((float)((float)(v67 + (float)(v192 * v64)) + (float)(v180 * v77)) + (float)(v86 * v83))
               - fabsf(v222));
  if (v218 < 0.0) {
    goto LABEL_26;
  }
  float v91 = v172;
  float v223 = (float)((float)(v172 * v193) + (float)(v51 * v60)) + (float)(v173 * v61);
  float v219 = v70
       + (float)((float)((float)((float)(v168 + (float)(v192 * v191)) + (float)(v180 * v178)) + (float)(v86 * v87))
               - fabsf(v223));
  if (v219 < 0.0) {
    goto LABEL_26;
  }
  if (v71)
  {
    float v92 = v51;
    *(&v214 + (v71 - 1)) = *(&v214 + (v71 - 1)) * 0.999;
    float v93 = v177;
    goto LABEL_9;
  }
  if (fabsf((float)(v79 * v176) - (float)(v73 * v80)) > (float)((float)((float)((float)(v70 + (float)(v180 * v81))
                                                                               + (float)(v86 * v76))
                                                                       + (float)(v67 * v191))
                                                               + (float)(v168 * v64))
    || fabsf((float)(v82 * (float)-v73) + (float)(v79 * v174)) > (float)((float)((float)((float)(v70
                                                                                               + (float)(v180 * v83))
                                                                                       + (float)(v86 * v77))
                                                                               + (float)(v167 * v191))
                                                                       + (float)(v168 * v63))
    || fabsf((float)(v84 * (float)-v73) + (float)(v79 * v169)) > (float)((float)((float)((float)(v70
                                                                                               + (float)(v180 * v87))
                                                                                       + (float)(v86 * v178))
                                                                               + (float)(v167 * v64))
                                                                       + (float)(v67 * v63))
    || fabsf((float)(v62 * v80) - (float)(v79 * v183)) > (float)((float)((float)((float)(v70 + (float)(v192 * v81))
                                                                               + (float)(v86 * v63))
                                                                       + (float)(v67 * v178))
                                                               + (float)(v168 * v77))
    || fabsf((float)(v182 * (float)-v79) + (float)(v62 * v82)) > (float)((float)((float)((float)(v70
                                                                                               + (float)(v192 * v83))
                                                                                       + (float)(v86 * v64))
                                                                               + (float)(v167 * v178))
                                                                       + (float)(v168 * v76))
    || fabsf((float)(v181 * (float)-v79) + (float)(v62 * v84)) > (float)((float)((float)((float)(v70
                                                                                               + (float)(v192 * v87))
                                                                                       + (float)(v86 * v191))
                                                                               + (float)(v167 * v77))
                                                                       + (float)(v67 * v76))
    || fabsf((float)(v73 * v183) - (float)(v62 * v176)) > (float)((float)((float)((float)(v70 + (float)(v192 * v76))
                                                                                + (float)(v180 * v63))
                                                                        + (float)(v67 * v87))
                                                                + (float)(v168 * v83))
    || fabsf((float)(v174 * (float)-v62) + (float)(v73 * v182)) > (float)((float)((float)((float)(v70
                                                                                                + (float)(v192 * v77))
                                                                                        + (float)(v180 * v64))
                                                                                + (float)(v167 * v87))
                                                                        + (float)(v168 * v81))
    || (float v88 = v192,
        float v109 = fabsf((float)(v169 * (float)-v62) + (float)(v73 * v181)),
        float v91 = v172,
        float v92 = v51,
        float v93 = v177,
        float v90 = v180,
        v109 > (float)((float)((float)((float)(v70 + (float)(v192 * v178)) + (float)(v180 * v191)) + (float)(v167 * v83))
                     + (float)(v67 * v81))))
  {
    LOBYTE(v71) = 0;
LABEL_26:
    int Contacts = 0;
    goto LABEL_27;
  }
LABEL_9:
  uint64_t v94 = 0;
  int v95 = 0;
  float v96 = 3.4028e38;
  do
  {
    if (*(&v214 + v94) >= 0.0 && *(&v214 + v94) < v96)
    {
      float v96 = *(&v214 + v94);
      int v95 = v94;
    }
    ++v94;
  }
  while (v94 != 6);
  float v97 = v220[v95];
  switch(v95)
  {
    case 0:
      float v98 = v57;
      if (v97 >= 0.0)
      {
        float v100 = -v187;
        float v99 = -v188;
        float v101 = -v189;
        float v108 = -v170;
        float v107 = -v171;
        float v93 = -v93;
        float v102 = v98 + (float)(v187 * v88);
        float v103 = v58 + (float)(v188 * v88);
        float v104 = v190 + (float)(v189 * v88);
        float v106 = v195;
        float v105 = v196;
      }
      else
      {
        float v100 = v187;
        float v99 = v188;
        float v101 = v189;
        float v102 = v57 - (float)(v187 * v88);
        float v103 = v58 - (float)(v188 * v88);
        float v104 = v190 - (float)(v189 * v88);
        float v106 = v195;
        float v105 = v196;
        float v108 = v170;
        float v107 = v171;
      }
      float v121 = v70;
      float v199 = v100;
      float v200 = v99;
      float v201 = v101;
      float v202 = v100;
      float v203 = v99;
      float v204 = v101;
      float v205 = v108;
      float v206 = v107;
      float v207 = v93;
      float v208 = v194;
      float v209 = v106;
      float v210 = v105;
      float v211 = v102;
      float v212 = v103;
      float v213 = v104;
      float32x2_t v160 = (float *)v197;
      uint64_t v161 = a7;
      float v162 = v180;
      float v163 = v86;
      goto LABEL_48;
    case 1:
      float v208 = v187;
      float v209 = v188;
      float v210 = v189;
      if (v97 >= 0.0)
      {
        float v164 = v170 * v90;
        float v115 = -v170;
        float v165 = v171 * v90;
        float v114 = -v171;
        float v166 = v93 * v90;
        float v93 = -v93;
        float v122 = -v194;
        float v120 = -v195;
        float v119 = -v196;
        float v116 = v57 + v164;
        float v117 = v175 + v165;
        float v118 = v190 + v166;
        float v121 = v70;
      }
      else
      {
        float v115 = v170;
        float v114 = v171;
        float v116 = v57 - (float)(v170 * v90);
        float v117 = v58 - (float)(v171 * v90);
        float v118 = v190 - (float)(v93 * v90);
        float v120 = v195;
        float v119 = v196;
        float v121 = v70;
        float v122 = v194;
      }
      float v199 = v115;
      float v200 = v114;
      float v201 = v93;
      float v202 = v115;
      float v203 = v114;
      float v204 = v93;
      float v205 = v122;
      float v206 = v120;
      float v207 = v119;
      float v211 = v116;
      float v212 = v117;
      float v213 = v118;
      float32x2_t v160 = (float *)v197;
      uint64_t v161 = a7;
      float v162 = v86;
      float v163 = v88;
      goto LABEL_48;
    case 2:
      float v208 = v170;
      float v209 = v171;
      float v210 = v93;
      if (v97 >= 0.0)
      {
        float v124 = -v194;
        float v123 = -v195;
        float v125 = -v196;
        float v131 = -v187;
        float v130 = -v188;
        float v128 = -v189;
        float v126 = v72 + (float)(v194 * v86);
        float v127 = v58 + (float)(v195 * v86);
        float v129 = v190 + (float)(v196 * v86);
        float v90 = v180;
      }
      else
      {
        float v124 = v194;
        float v123 = v195;
        float v125 = v196;
        float v126 = v72 - (float)(v194 * v86);
        float v127 = v58 - (float)(v195 * v86);
        float v128 = v189;
        float v129 = v190 - (float)(v196 * v86);
        float v131 = v187;
        float v130 = v188;
      }
      float v121 = v70;
      float v199 = v124;
      float v200 = v123;
      float v201 = v125;
      float v202 = v124;
      float v203 = v123;
      float v204 = v125;
      float v205 = v131;
      float v206 = v130;
      float v207 = v128;
      float v211 = v126;
      float v212 = v127;
      float v213 = v129;
      float32x2_t v160 = (float *)v197;
      uint64_t v161 = a7;
      float v162 = v88;
      float v163 = v90;
LABEL_48:
      float32x4_t v65 = a2 + 1;
      goto LABEL_56;
    case 3:
      float v132 = -v78;
      float v133 = -v45;
      float v134 = -v46;
      if (v97 >= 0.0)
      {
        float v135 = v184 - (float)(v78 * v167);
        float v136 = v185 - (float)(v45 * v167);
        float v138 = -v78;
        float v139 = -v45;
        float v137 = v186 - (float)(v46 * v167);
        float v140 = -v46;
        float v132 = v78;
        float v133 = v45;
        float v134 = v46;
      }
      else
      {
        float v47 = -v47;
        float v49 = -v49;
        float v50 = -v50;
        float v135 = v184 + (float)(v78 * v167);
        float v136 = v185 + (float)(v45 * v167);
        float v137 = v186 + (float)(v46 * v167);
        float v138 = v78;
        float v139 = v45;
        float v140 = v46;
      }
      float v162 = v179;
      float v199 = v138;
      float v200 = v139;
      float v201 = v140;
      float v202 = v132;
      float v203 = v133;
      float v204 = v134;
      float v205 = v47;
      float v206 = v49;
      float v207 = v50;
      float v208 = v92;
      float v209 = v91;
      float v210 = v173;
      float v211 = v135;
      float v212 = v136;
      float v213 = v137;
      float32x2_t v160 = (float *)v198;
      uint64_t v161 = a7;
      float v163 = v168;
      goto LABEL_55;
    case 4:
      float v208 = v78;
      float v209 = v45;
      float v141 = -v47;
      float v142 = -v49;
      float v143 = -v50;
      float v210 = v46;
      if (v97 >= 0.0)
      {
        float v145 = v184 - (float)(v47 * v67);
        float v146 = v185 - (float)(v49 * v67);
        float v148 = -v47;
        float v149 = -v49;
        float v147 = v186 - (float)(v50 * v67);
        float v150 = -v50;
        float v141 = v47;
        float v142 = v49;
        float v143 = v50;
        float v144 = v173;
      }
      else
      {
        float v92 = -v92;
        float v91 = -v91;
        float v144 = -v173;
        float v145 = v184 + (float)(v47 * v67);
        float v146 = v185 + (float)(v49 * v67);
        float v147 = v186 + (float)(v50 * v67);
        float v148 = v47;
        float v149 = v49;
        float v150 = v50;
      }
      float v199 = v148;
      float v200 = v149;
      float v201 = v150;
      float v202 = v141;
      float v203 = v142;
      float v204 = v143;
      float v205 = v92;
      float v206 = v91;
      float v207 = v144;
      float v211 = v145;
      float v212 = v146;
      float v213 = v147;
      float32x2_t v160 = (float *)v198;
      uint64_t v161 = a7;
      float v163 = v167;
      float v162 = v168;
      goto LABEL_55;
    case 5:
      float v208 = v47;
      float v209 = v49;
      float v151 = -v92;
      float v152 = -v91;
      float v153 = -v173;
      float v210 = v50;
      if (v97 >= 0.0)
      {
        float v154 = v184 - (float)(v92 * v168);
        float v155 = v185 - (float)(v91 * v168);
        float v157 = -v92;
        float v158 = -v91;
        float v156 = v186 - (float)(v173 * v168);
        float v159 = -v173;
        float v151 = v92;
        float v152 = v91;
        float v153 = v173;
      }
      else
      {
        float v78 = -v78;
        float v45 = -v45;
        float v46 = -v46;
        float v154 = v184 + (float)(v92 * v168);
        float v155 = v185 + (float)(v91 * v168);
        float v156 = v186 + (float)(v173 * v168);
        float v157 = v92;
        float v158 = v91;
        float v159 = v173;
      }
      float v163 = v179;
      float v199 = v157;
      float v200 = v158;
      float v201 = v159;
      float v202 = v151;
      float v203 = v152;
      float v204 = v153;
      float v205 = v78;
      float v206 = v45;
      float v207 = v46;
      float v211 = v154;
      float v212 = v155;
      float v213 = v156;
      float32x2_t v160 = (float *)v198;
      uint64_t v161 = a7;
      float v162 = v167;
LABEL_55:
      float v121 = v70;
LABEL_56:
      int Contacts = generateContacts(v161, (uint64_t)&v199, v65, (uint64_t)&v202, v160, v162, v163, v121);
      break;
    default:
      int Contacts = 0;
      break;
  }
  LOBYTE(v71) = v95 + 1;
LABEL_27:
  BOOL v111 = Contacts == 0;
  BOOL result = Contacts != 0;
  if (v111) {
    char v113 = 0;
  }
  else {
    char v113 = v71;
  }
  *(unsigned char *)(a6 + 10) = v113;
  return result;
}

BOOL physx::Gu::contactCapsuleBox(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float *a5, uint64_t a6, float32x2_t *a7)
{
  uint64_t v207 = *MEMORY[0x263EF8340];
  float v10 = *a3;
  float v11 = a3[1];
  float v12 = v10 + v10;
  float v14 = a3[2];
  float v13 = a3[3];
  float v15 = v13 + v13;
  float v16 = (float)((float)(v13 * (float)(v13 + v13)) + -1.0) + (float)(v10 * (float)(v10 + v10));
  float v17 = (float)(v12 * v11) + (float)(v14 * (float)(v13 + v13));
  float v18 = (float)(v12 * v14) - (float)(v11 * v15);
  float v20 = *(float *)(a1 + 4);
  float v19 = *(float *)(a1 + 8);
  float v21 = v16 * v19;
  float v22 = v19 * v17;
  float v23 = v18 * v19;
  float v24 = a3[4];
  float v25 = a3[5];
  float v26 = a3[6];
  v186.f32[0] = v24 + v21;
  v186.f32[1] = v25 + v22;
  float v187 = v23 + v26;
  v188.f32[0] = v24 - v21;
  v188.f32[1] = v25 - v22;
  float v189 = v26 - v23;
  float32x2_t v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a4, 1);
  float32x2_t v28 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 2);
  float32x2_t v29 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a4, 3);
  _Q6 = vaddq_f32(*(float32x4_t *)a4, *(float32x4_t *)a4);
  float32x2_t v31 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a4, *(float32x2_t *)_Q6.f32), 0);
  float v32 = v20 + *a5;
  float32x2_t v33 = vmul_lane_f32(v27, *(float32x2_t *)_Q6.f32, 1);
  float32x2_t v34 = vmul_laneq_f32(v28, _Q6, 2);
  float32x2_t v35 = vmul_n_f32(v27, _Q6.f32[0]);
  float32x2_t v36 = vmul_n_f32(v28, _Q6.f32[0]);
  float32x2_t v37 = vmul_n_f32(v29, _Q6.f32[0]);
  float32x2_t v38 = vmul_lane_f32(v28, *(float32x2_t *)_Q6.f32, 1);
  float32x2_t v39 = vmul_lane_f32(v29, *(float32x2_t *)_Q6.f32, 1);
  float32x2_t v40 = vmul_laneq_f32(v29, _Q6, 2);
  __asm { FMOV            V6.2S, #1.0 }
  float32x2_t v45 = vsub_f32(*(float32x2_t *)_Q6.f32, v31);
  LODWORD(v46) = vsub_f32(v36, v39).u32[0];
  LODWORD(v47) = vadd_f32(v38, v37).u32[0];
  v181.f32[0] = (float)(1.0 - v33.f32[1]) - v34.f32[1];
  v181.i32[1] = vadd_f32(v35, v40).u32[0];
  HIDWORD(v46) = vsub_f32(v35, v40).i32[1];
  *(void *)float v182 = v46;
  *(_DWORD *)&v182[8] = vsub_f32(v45, v34).u32[0];
  HIDWORD(v47) = vadd_f32(v36, v39).i32[1];
  *(void *)&long long v183 = v47;
  *((int32x2_t *)&v183 + 1) = vzip1_s32((int32x2_t)vsub_f32(v38, v37), (int32x2_t)vsub_f32(v45, v33));
  *(_DWORD *)float v184 = *(_DWORD *)(a4 + 16);
  *(void *)&long long v48 = *(void *)(a4 + 20);
  *((void *)&v48 + 1) = *(void *)(a2 + 4);
  *(_OWORD *)&v184[4] = v48;
  int v185 = *(_DWORD *)(a2 + 12);
  float v180 = 0.0;
  physx::Gu::distanceSegmentBoxSquared((float *)&v186, (float *)&v188, (float *)v184, (float32x2_t *)&v184[12], (float *)&v181, &v180, &v178);
  float v50 = v49;
  BOOL result = 0;
  if (v49 < (float)(v32 * v32))
  {
    if (v49 != 0.0)
    {
      float v52 = v179;
      float v179 = (float)((float)((float)(v178.f32[0] * *(float *)v182) + (float)(v178.f32[1] * *(float *)&v183))
                   + (float)(v179 * *((float *)&v183 + 3)))
           + *(float *)&v184[8];
      float32x2_t v178 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v181, v178.f32[0]), vmul_n_f32(*(float32x2_t *)&v182[4], v178.f32[1])), vmul_n_f32(*(float32x2_t *)((char *)&v183 + 4), v52)), *(float32x2_t *)v184);
      float32x2_t v53 = vsub_f32(vadd_f32(v186, vmul_n_f32(vsub_f32(v188, v186), v180)), v178);
      float v54 = (float)(v187 + (float)(v180 * (float)(v189 - v187))) - v179;
      float v55 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v53, v53).i32[1]), v53.f32[0], v53.f32[0]) + (float)(v54 * v54));
      if (v55 > 0.0)
      {
        float v56 = 1.0 / v55;
        float32x2_t v174 = vmul_n_f32(v53, v56);
        float32x2_t v176 = v174;
        float v57 = v54 * v56;
        float v177 = v54 * v56;
        GuGenerateVFContacts((uint64_t)a7, (uint64_t)&v186, (float *)&v181, &v176, *(float *)(a1 + 4), *a5);
        if (a7[512].i32[0] == 2) {
          return 1;
        }
        float v58 = *(float *)(a1 + 4);
        float v59 = *a5;
        physx::Gu::computeOBBPoints(v206, (float *)v184, (float *)&v184[12], (float *)&v181, (float *)&v182[4], (float *)&v183 + 1);
        float v61 = v186.f32[1];
        float v60 = v186.f32[0];
        float32x2_t v204 = v186;
        float v62 = v187;
        float v205 = v187;
        float32x2_t v202 = v188;
        float v203 = v189;
        _S3 = v188.f32[0] - v186.f32[0];
        float v64 = v188.f32[1] - v186.f32[1];
        float v65 = v189 - v187;
        float v66 = sqrtf((float)((float)(v64 * v64) + (float)(_S3 * _S3)) + (float)(v65 * v65));
        if (v66 > 0.0)
        {
          float v67 = 0.01 / v66;
          float v68 = _S3 * v67;
          float v69 = v64 * v67;
          float v70 = v65 * v67;
          float v60 = v186.f32[0] - v68;
          float v61 = v186.f32[1] - v69;
          v204.f32[0] = v186.f32[0] - v68;
          v204.f32[1] = v186.f32[1] - v69;
          float v62 = v187 - v70;
          float v205 = v187 - v70;
          v202.f32[0] = v188.f32[0] + v68;
          v202.f32[1] = v188.f32[1] + v69;
          float v203 = v189 + v70;
          _S3 = (float)(v188.f32[0] + v68) - (float)(v186.f32[0] - v68);
          float v64 = (float)(v188.f32[1] + v69) - (float)(v186.f32[1] - v69);
          float v65 = (float)(v189 + v70) - (float)(v187 - v70);
        }
        float v199 = _S3;
        float v200 = v64;
        float v201 = v65;
        _V19.S[1] = v174.i32[1];
        float v72 = vmuls_lane_f32(-v65, v174, 1) + (float)(v64 * v57);
        float v73 = -(float)((float)(v65 * v174.f32[0]) - (float)(_S3 * v57));
        float v74 = vmlas_n_f32(-(float)(_S3 * v57), v65, v174.f32[0]);
        __asm { FMLA            S5, S3, V19.S[1] }
        float v195 = -v72;
        float v196 = v73;
        float v197 = -(float)((float)((float)-v64 * v174.f32[0]) + (float)(_S3 * v174.f32[1]));
        float v198 = -(float)((float)((float)-(float)(v74 * v61) - (float)(v72 * v60)) + (float)(v197 * v62));
        float v76 = fabsf(v72);
        float v77 = fabsf(v74);
        float v78 = fabsf(_S5);
        if (v77 <= v76 || v77 <= v78)
        {
          unsigned int v127 = 1;
          if (v78 <= v76)
          {
            unsigned int v129 = 2;
LABEL_55:
            uint64_t v137 = 0;
            float v138 = 1.0 / (float)((float)(*(&v199 + v129) * v176.f32[v127]) - (float)(*(&v199 + v127) * v176.f32[v129]));
            float v139 = v58 + v59;
            unint64_t v140 = a7[512].u32[0];
            float32x2_t v141 = vneg_f32(v174);
            do
            {
              float v142 = &v206[3 * physx::Gu::getBoxEdges(void)::Indices[v137]];
              int v143 = physx::Gu::getBoxEdges(void)::Indices[v137 + 1];
              float v192 = 0.0;
              unint64_t v190 = (unint64_t)v141;
              float v191 = -v57;
              if (intersectEdgeEdgePreca((float *)&v204, (float *)&v202, (uint64_t)&v199, &v195, v127, v129, (float32x2_t *)&v190, v142, v138, &v206[3 * v143], &v192, &v193))
              {
                float v144 = v192;
                if (v192 < v139 && v140 <= 0x3F)
                {
                  float32_t v145 = v192 - v58;
                  float32_t v146 = v194 - (float)(v57 * v192);
                  float v147 = &a7[8 * v140++];
                  a7[512].i32[0] = v140;
                  *float v147 = v174;
                  v147[2] = vsub_f32(v193, vmul_n_f32(v174, v144));
                  v147[3].f32[0] = v146;
                  v147[1].f32[0] = v57;
                  v147[1].f32[1] = v145;
                  v147[6].i32[1] = -1;
                }
              }
              v137 += 2;
            }
            while (v137 != 24);
            if (!v140)
            {
              float v148 = *(float *)(a1 + 4);
              a7[512].i32[0] = 1;
              *a7 = v174;
              a7[2] = v178;
              a7[3].f32[0] = v179;
              a7[1].f32[0] = v57;
              a7[1].f32[1] = sqrtf(v50) - v148;
              a7[6].i32[1] = -1;
            }
            return 1;
          }
          int v128 = 0;
        }
        else
        {
          unsigned int v127 = 0;
          int v128 = 2;
        }
        unsigned int v129 = v127;
        unsigned int v127 = v128;
        goto LABEL_55;
      }
    }
    uint64_t v80 = 0;
    float v81 = *(float *)(a1 + 4);
    float v82 = 0.0;
    float v83 = 3.4028e38;
    *(float *)&__int32 v84 = 0.0;
    *(float *)&__int32 v85 = 0.0;
    do
    {
      v206[0] = 0.0;
      BOOL result = GuTestAxis((float *)((char *)&v181 + v80 * 4), (float *)&v186, (float *)&v181, v206, v81);
      if (!result) {
        return result;
      }
      if (v206[0] < v83)
      {
        __int32 v85 = v181.i32[v80];
        __int32 v84 = v181.i32[v80 + 1];
        float v82 = *(float *)((char *)&v181 + v80 * 4 + 8);
        float v83 = v206[0];
      }
      v80 += 3;
    }
    while (v80 != 9);
    float v168 = *(float *)&v85;
    float v169 = *(float *)&v84;
    float v170 = v82;
    float v175 = v83;
    float v166 = v186.f32[1];
    float v167 = v186.f32[0];
    float v164 = v187;
    float v165 = v188.f32[0];
    float v86 = v188.f32[0] - v186.f32[0];
    float v162 = v188.f32[1];
    float v163 = v189;
    float v87 = v188.f32[1] - v186.f32[1];
    float v88 = v189 - v187;
    float v89 = (float)((float)(v87 * v87) + (float)(v86 * v86)) + (float)(v88 * v88);
    float v90 = 0.0;
    float v91 = 0.0;
    float v92 = 0.0;
    if (v89 > 0.0)
    {
      float v93 = 1.0 / sqrtf(v89);
      float v90 = v86 * v93;
      float v91 = v87 * v93;
      float v92 = v88 * v93;
    }
    uint64_t v94 = 0;
    float v95 = -v92;
    float v96 = -v90;
    float v97 = -v91;
    do
    {
      float v99 = v181.f32[v94 + 1];
      float v98 = *(float *)((char *)&v181 + v94 * 4 + 8);
      float v100 = v181.f32[v94];
      float v101 = (float)(v99 * v95) + (float)(v91 * v98);
      float v102 = (float)(v98 * v96) + (float)(v92 * v100);
      float v103 = (float)(v100 * v97) + (float)(v90 * v99);
      if (fabsf(v101) > 0.000001 || fabsf(v102) > 0.000001 || fabsf(v103) > 0.000001)
      {
        float v104 = (float)((float)(v102 * v102) + (float)(v101 * v101)) + (float)(v103 * v103);
        float v105 = 0.0;
        float v106 = 0.0;
        float v107 = 0.0;
        if (v104 > 0.0)
        {
          float v108 = 1.0 / sqrtf(v104);
          float v107 = v101 * v108;
          float v106 = v102 * v108;
          float v105 = v103 * v108;
        }
        v206[0] = v107;
        v206[1] = v106;
        v206[2] = v105;
        float v195 = 0.0;
        BOOL result = GuTestAxis(v206, (float *)&v186, (float *)&v181, &v195, v81);
        if (!result) {
          return result;
        }
        if (v195 < v175)
        {
          float v168 = v107;
          float v169 = v106;
          float v170 = v105;
          float v175 = v195;
        }
        float v96 = -v90;
        float v95 = -v92;
        float v97 = -v91;
      }
      v94 += 3;
    }
    while (v94 != 9);
    float v109 = (float)((float)(v169 * (float)((float)((float)(v162 + v166) * 0.5) - *(float *)&v184[4]))
                 + (float)(v168 * (float)((float)((float)(v165 + v167) * 0.5) - *(float *)v184)))
         + (float)(v170 * (float)((float)((float)(v163 + v164) * 0.5) - *(float *)&v184[8]));
    if (v109 >= 0.0) {
      float v110 = v168;
    }
    else {
      float v110 = -v168;
    }
    if (v109 >= 0.0) {
      float v111 = v169;
    }
    else {
      float v111 = -v169;
    }
    if (v109 >= 0.0) {
      float v112 = v170;
    }
    else {
      float v112 = -v170;
    }
    unint64_t v190 = __PAIR64__(LODWORD(v111), LODWORD(v110));
    float v191 = v112;
    GuGenerateVFContacts((uint64_t)a7, (uint64_t)&v186, (float *)&v181, (float32x2_t *)&v190, v81, *a5);
    if (a7[512].i32[0] == 2) {
      return 1;
    }
    float v113 = *(float *)(a1 + 4);
    physx::Gu::computeOBBPoints(v206, (float *)v184, (float *)&v184[12], (float *)&v181, (float *)&v182[4], (float *)&v183 + 1);
    float32x2_t v114 = v186;
    float32x2_t v204 = v186;
    float v115 = v187;
    float v205 = v187;
    float32x2_t v202 = v188;
    float v203 = v189;
    float v116 = v188.f32[0] - v186.f32[0];
    float v117 = v188.f32[1] - v186.f32[1];
    float v118 = v189 - v187;
    float v119 = sqrtf((float)((float)(v117 * v117) + (float)(v116 * v116)) + (float)(v118 * v118));
    if (v119 <= 0.0)
    {
      float v126 = v187;
      float v125 = v186.f32[1];
      float v124 = v186.f32[0];
    }
    else
    {
      float v120 = 0.01 / v119;
      float v121 = v116 * v120;
      float v122 = v117 * v120;
      float v123 = v118 * v120;
      float v124 = v186.f32[0] - v121;
      float v125 = v186.f32[1] - v122;
      v204.f32[0] = v186.f32[0] - v121;
      v204.f32[1] = v186.f32[1] - v122;
      float v126 = v187 - v123;
      float v205 = v187 - v123;
      v202.f32[0] = v188.f32[0] + v121;
      v202.f32[1] = v188.f32[1] + v122;
      float v203 = v189 + v123;
      float v116 = (float)(v188.f32[0] + v121) - (float)(v186.f32[0] - v121);
      float v117 = (float)(v188.f32[1] + v122) - (float)(v186.f32[1] - v122);
      float v118 = (float)(v189 + v123) - (float)(v187 - v123);
    }
    float v199 = v116;
    float v200 = v117;
    float v201 = v118;
    float v195 = (float)(v117 * v112) - (float)(v118 * v111);
    float v196 = (float)(v118 * v110) - (float)(v116 * v112);
    float v197 = (float)(v116 * v111) - (float)(v117 * v110);
    float v198 = -(float)((float)((float)(v125 * v196) + (float)(v195 * v124)) + (float)(v197 * v126));
    float v130 = fabsf(v195);
    float v131 = fabsf(v196);
    float v132 = fabsf(v197);
    BOOL v133 = v131 <= v130 || v131 <= v132;
    uint64_t v161 = a1;
    float v172 = v188.f32[1];
    float v173 = v188.f32[0];
    float v171 = v189;
    if (v133)
    {
      unsigned int v134 = 1;
      if (v132 <= v130)
      {
        unsigned int v136 = 2;
        goto LABEL_64;
      }
      int v135 = 0;
    }
    else
    {
      unsigned int v134 = 0;
      int v135 = 2;
    }
    unsigned int v136 = v134;
    unsigned int v134 = v135;
LABEL_64:
    uint64_t v149 = 0;
    float v150 = 1.0
         / (float)((float)(*(&v199 + v134) * *((float *)&v190 + v136))
                 - (float)(*(&v199 + v136) * *((float *)&v190 + v134)));
    unint64_t v151 = a7[512].u32[0];
    do
    {
      float v152 = &v206[3 * physx::Gu::getBoxEdges(void)::Indices[v149]];
      float v153 = &v206[3 * physx::Gu::getBoxEdges(void)::Indices[v149 + 1]];
      v176.i32[0] = 0;
      if (intersectEdgeEdgePreca((float *)&v204, (float *)&v202, (uint64_t)&v199, &v195, v134, v136, (float32x2_t *)&v190, v152, v150, v153, (float *)&v176, &v193)&& v151 <= 0x3F)
      {
        float32_t v154 = v194 - (float)(v112 * v176.f32[0]);
        float v155 = v193.f32[0];
        float32_t v156 = v193.f32[1] - (float)(v111 * v176.f32[0]);
        float32_t v157 = -(float)(v113 + v176.f32[0]);
        float v158 = v110 * v176.f32[0];
        float v159 = &a7[8 * v151++];
        a7[512].i32[0] = v151;
        v159->f32[0] = v110;
        v159->f32[1] = v111;
        v159[2].f32[0] = v155 - v158;
        v159[2].f32[1] = v156;
        v159[3].f32[0] = v154;
        v159[1].f32[0] = v112;
        v159[1].f32[1] = v157;
        v159[6].i32[1] = -1;
      }
      v149 += 2;
    }
    while (v149 != 24);
    if (!v151)
    {
      float v160 = *(float *)(v161 + 4);
      BOOL result = 1;
      a7[512].i32[0] = 1;
      a7->f32[0] = v110;
      a7->f32[1] = v111;
      a7[2].f32[0] = (float)(v114.f32[0] + v173) * 0.5;
      a7[2].f32[1] = (float)(v114.f32[1] + v172) * 0.5;
      a7[3].f32[0] = (float)(v115 + v171) * 0.5;
      a7[1].f32[0] = v112;
      a7[1].f32[1] = -(float)(v175 + v160);
      a7[6].i32[1] = -1;
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t GuGenerateVFContacts(uint64_t a1, uint64_t a2, float *a3, float32x2_t *a4, float a5, float a6)
{
  uint64_t v11 = 0;
  float v12 = a3[13];
  v42[0] = a3[12];
  v42[1] = v12;
  float v43 = a3[14];
  v41[0] = -v42[0];
  v41[1] = -v12;
  v41[2] = -v43;
  float v13 = a4->f32[1];
  float v14 = a4[1].f32[0];
  float v15 = -(float)((float)((float)(a3[1] * v13) + (float)(*a3 * a4->f32[0])) + (float)(a3[2] * v14));
  float v16 = -(float)((float)((float)(v13 * a3[4]) + (float)(a3[3] * a4->f32[0])) + (float)(a3[5] * v14));
  float v17 = -(float)((float)((float)(v13 * a3[7]) + (float)(a3[6] * a4->f32[0])) + (float)(a3[8] * v14));
  *(float *)float32x2_t v40 = v15;
  *(float *)&v40[1] = v16;
  *(float *)&v40[2] = v17;
  float v18 = a5 + a6;
  unint64_t v19 = *(unsigned int *)(a1 + 4096);
  char v20 = 1;
  do
  {
    float v21 = (float32x2_t *)(a2 + 12 * v11);
    float v22 = COERCE_FLOAT(*v21) - a3[9];
    float32x2_t v37 = *v21;
    float v23 = COERCE_FLOAT(HIDWORD(*(unint64_t *)v21)) - a3[10];
    float v24 = v21[1].f32[0];
    float v25 = v24 - a3[11];
    float v26 = (float)((float)(v23 * a3[1]) + (float)(*a3 * v22)) + (float)(a3[2] * v25);
    float v27 = (float)((float)(v23 * a3[4]) + (float)(a3[3] * v22)) + (float)(a3[5] * v25);
    char v28 = v20;
    float v29 = (float)((float)(v23 * a3[7]) + (float)(a3[6] * v22)) + (float)(a3[8] * v25);
    *(float *)float32x2_t v39 = v26;
    *(float *)&v39[1] = v27;
    *(float *)&v39[2] = v29;
    uint64_t v38 = 0;
    uint64_t result = physx::Gu::intersectRayAABB((uint64_t)v41, (uint64_t)v42, (uint64_t)v39, (uint64_t)v40, (float *)&v38 + 1, (float *)&v38);
    if (result != -1)
    {
      float v31 = *((float *)&v38 + 1);
      if (*((float *)&v38 + 1) < v18 && v19 <= 0x3F)
      {
        float32_t v32 = *((float *)&v38 + 1) - a5;
        float v33 = a4[1].f32[0];
        float32_t v34 = v24 - (float)(*((float *)&v38 + 1) * v33);
        float32x2_t v35 = (float32x2_t *)(a1 + (v19++ << 6));
        *(_DWORD *)(a1 + 4096) = v19;
        v35[1].f32[0] = v33;
        float32x2_t v36 = vsub_f32(v37, vmul_n_f32(*a4, v31));
        *float32x2_t v35 = *a4;
        v35[2] = v36;
        v35[3].f32[0] = v34;
        v35[1].f32[1] = v32;
        v35[6].i32[1] = -1;
      }
    }
    char v20 = 0;
    uint64_t v11 = 1;
  }
  while ((v28 & 1) != 0);
  return result;
}

BOOL physx::Gu::contactCapsuleCapsule(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a2;
  uint64_t v123 = *MEMORY[0x263EF8340];
  float v12 = *(float *)a3;
  float v13 = v12 + v12;
  float v14 = *(float *)(a3 + 12);
  float v15 = v14 + v14;
  float v16 = (float)((float)(v14 * (float)(v14 + v14)) + -1.0) + (float)(v12 * (float)(v12 + v12));
  float v17 = *(float *)(a1 + 8);
  float v18 = *a4;
  float v19 = a4[1];
  float v20 = v18 + v18;
  float v22 = a4[2];
  float v21 = a4[3];
  float v23 = (float)((float)(v21 * (float)(v21 + v21)) + -1.0) + (float)(v18 * (float)(v18 + v18));
  float v24 = (float)((float)(v18 + v18) * v19) + (float)(v22 * (float)(v21 + v21));
  float v25 = (float)(v20 * v22) - (float)(v19 * (float)(v21 + v21));
  float v26 = *(float *)(a2 + 8);
  float v27 = v23 * v26;
  float v28 = v26 * v24;
  float v29 = v25 * v26;
  float v30 = a4[4] - *(float *)(a3 + 16);
  float v31 = a4[5] - *(float *)(a3 + 20);
  float v32 = a4[6] - *(float *)(a3 + 24);
  float v107 = v16 * v17;
  float v109 = -(float)(v16 * v17);
  float32x2_t v33 = *(float32x2_t *)(a3 + 4);
  v34.i32[0] = vdup_lane_s32((int32x2_t)v33, 1).u32[0];
  v34.f32[1] = -v33.f32[0];
  float v35 = (float)(v16 * v17) * -2.0;
  float32x2_t v108 = vmul_n_f32(vmla_n_f32(vmul_n_f32(v33, v13), v34, v15), v17);
  float32x2_t v101 = vmul_f32(v108, (float32x2_t)0xC0000000C0000000);
  float32x2_t v116 = v101;
  float v111 = v27 + v30;
  v112.f32[0] = v28 + v31;
  v112.f32[1] = v29 + v32;
  float v113 = v30 - v27;
  v114.f32[0] = v31 - v28;
  v114.f32[1] = v32 - v29;
  float v115 = v35;
  float v36 = v27 * -2.0;
  float v37 = v28 * -2.0;
  _S9 = v29 * -2.0;
  float v117 = v27 * -2.0;
  float v118 = v28 * -2.0;
  uint64_t v102 = 0;
  *(float *)float v103 = v109 - (float)(v16 * v17);
  float32x2_t v110 = vneg_f32(v108);
  *(float32x2_t *)&v103[4] = vsub_f32(v110, v108);
  float v119 = v29 * -2.0;
  float v120 = (float)(v30 - v27) - (float)(v27 + v30);
  float v121 = (float)(v31 - v28) - (float)(v28 + v31);
  float v122 = (float)(v32 - v29) - (float)(v29 + v32);
  float v39 = physx::Gu::distanceSegmentSegmentSquared(&v107, (float *)v103, &v111, &v120, (float *)&v102 + 1, (float *)&v102);
  float v40 = *(float *)(a1 + 4);
  float v41 = v40 + *(float *)(v10 + 4);
  float v42 = (float)(v41 + *a5) * (float)(v41 + *a5);
  if (v39 < v42)
  {
    _D31 = v101;
    _S5 = v101.i32[1];
    __asm { FMLA            S4, S5, V31.S[1] }
    float v48 = sqrtf(_S4);
    float v49 = sqrtf((float)((float)(v37 * v37) + (float)(v36 * v36)) + (float)(_S9 * _S9));
    float v120 = v48;
    float v121 = v49;
    if (v48 != 0.0)
    {
      float v35 = v35 * (float)(1.0 / v48);
      float v115 = v35;
      _D31 = vmul_n_f32(v101, 1.0 / v48);
      float32x2_t v116 = _D31;
    }
    if (v49 != 0.0)
    {
      float v117 = v36 * (float)(1.0 / v49);
      float v118 = v37 * (float)(1.0 / v49);
      _S9 = _S9 * (float)(1.0 / v49);
      float v119 = _S9;
    }
    __asm { FMLA            S6, S9, V31.S[1] }
    if (fabsf(_S6) <= 0.9998) {
      goto LABEL_31;
    }
    uint64_t v51 = 0;
    int v52 = 0;
    v106[0] = v48 * 0.001;
    v106[1] = v49 * 0.001;
    unint64_t v53 = *(unsigned int *)(a7 + 4096);
    char v54 = 1;
    do
    {
      char v55 = v54;
      float v56 = &v107 + 6 * (v51 ^ 1);
      float v57 = &v103[12 * v51];
      float v58 = &v115 + 3 * v51;
      float v59 = &v107 + 6 * v51;
      float v60 = v59[2];
      float32x2_t v61 = *(float32x2_t *)v59;
      float32x2_t v62 = *(float32x2_t *)v58;
      float v63 = v58[2];
      float v64 = v106[v51];
      float v65 = (float32x2_t *)&v103[12 * (v51 ^ 1)];
      LODWORD(v66) = HIDWORD(*(void *)v58);
      char v67 = 1;
      unint64_t v68 = v53;
      do
      {
        char v69 = v67;
        _ZF = (v67 & 1) == 0;
        if (v67) {
          int v71 = &v107 + 6 * (v51 ^ 1);
        }
        else {
          int v71 = v56 + 3;
        }
        float v72 = *v71;
        *float v57 = *(_DWORD *)v71;
        if (_ZF) {
          float v73 = v56 + 4;
        }
        else {
          float v73 = v56 + 1;
        }
        float v74 = *v73;
        v57[1] = *(_DWORD *)v73;
        if (_ZF) {
          float v75 = v56 + 5;
        }
        else {
          float v75 = v56 + 2;
        }
        float v76 = *v75;
        v57[2] = *(_DWORD *)v75;
        float v77 = (float)((float)(v66 * (float)(v74 - v61.f32[1])) + (float)(v62.f32[0] * (float)(v72 - v61.f32[0])))
            + (float)(v63 * (float)(v76 - v60));
        if (v77 >= (float)-v64 && v77 <= (float)(v64 + *(&v120 + v51)))
        {
          *float v65 = vadd_f32(v61, vmul_n_f32(v62, v77));
          v65[1].f32[0] = v60 + (float)(v63 * v77);
          float32x2_t v78 = v104;
          float32x2_t v79 = vsub_f32(v104, *(float32x2_t *)v103);
          float v80 = v105 - *(float *)&v103[8];
          float v81 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v79, v79).i32[1]), v79.f32[0], v79.f32[0]) + (float)(v80 * v80);
          if (v81 > 0.000001 && v81 < v42)
          {
            if (v68 <= 0x3F)
            {
              float v83 = sqrtf(v81);
              float32_t v84 = v80 * (float)(1.0 / v83);
              float v85 = *(float *)(v10 + 4);
              float32_t v86 = *(float *)(a3 + 24) + (float)(v105 - (float)(v84 * v85));
              unint64_t v53 = v68 + 1;
              *(_DWORD *)(a7 + 4096) = v68 + 1;
              float v87 = (float32x2_t *)(a7 + (v68 << 6));
              v87[1].f32[0] = v84;
              float32x2_t v88 = vmul_n_f32(v79, 1.0 / v83);
              float32x2_t v89 = vadd_f32(vsub_f32(v78, vmul_n_f32(v88, v85)), *(float32x2_t *)(a3 + 16));
              *float v87 = v88;
              v87[2] = v89;
              v87[3].f32[0] = v86;
              v87[1].f32[1] = v83 - v41;
              v87[6].i32[1] = -1;
              unint64_t v68 = v53;
            }
            ++v52;
          }
        }
        char v67 = 0;
      }
      while ((v69 & 1) != 0);
      char v54 = 0;
      uint64_t v10 = a1;
      uint64_t v51 = 1;
    }
    while ((v55 & 1) != 0);
    if (!v52)
    {
LABEL_31:
      float v90 = v107 + (float)(*((float *)&v102 + 1) * (float)(v109 - v107));
      float32x2_t v91 = vadd_f32(v108, vmul_n_f32(vsub_f32(v110, v108), *((float *)&v102 + 1)));
      _D16 = vsub_f32(v91, vadd_f32(v112, vmul_n_f32(vsub_f32(v114, v112), *(float *)&v102)));
      _S18 = _D16.i32[1];
      __asm { FMLA            S17, S18, V16.S[1] }
      if (_S17 >= 0.000001)
      {
        float v95 = 1.0 / sqrtf(_S17);
        float v35 = (float)(v90 - (float)(v111 + (float)(*(float *)&v102 * (float)(v113 - v111)))) * v95;
        _D31 = vmul_n_f32(_D16, v95);
      }
      else if (v48 <= 0.000001)
      {
        _D31 = 0;
        float v35 = 1.0;
      }
      uint64_t v96 = *(unsigned int *)(a7 + 4096);
      if (v96 <= 0x3F)
      {
        float v97 = v90 + *(float *)(a3 + 16);
        *(_DWORD *)(a7 + 4096) = v96 + 1;
        uint64_t v98 = a7 + (v96 << 6);
        *(float *)uint64_t v98 = v35;
        *(float *)(v98 + 16) = v97 - (float)(v40 * v35);
        float32x2_t v99 = vsub_f32(vadd_f32(v91, *(float32x2_t *)(a3 + 20)), vmul_n_f32(_D31, v40));
        *(float32x2_t *)(v98 + 4) = _D31;
        *(float32x2_t *)(v98 + 20) = v99;
        *(float *)(v98 + 12) = sqrtf(v39) - v41;
        *(_DWORD *)(v98 + 52) = -1;
      }
    }
  }
  return v39 < v42;
}

void physx::Gu::anonymous namespace'::EntityReportContainerCallback::~EntityReportContainerCallback(physx::Gu::_anonymous_namespace_::EntityReportContainerCallback *this)
{
}

uint64_t physx::Gu::anonymous namespace'::EntityReportContainerCallback::onEvent(physx::Gu::_anonymous_namespace_::EntityReportContainerCallback *this, unsigned int a2, unsigned int *a3)
{
  if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = *((void *)this + 1);
      uint64_t v7 = *(unsigned int *)(v6 + 272);
      if ((*(_DWORD *)(v6 + 276) & 0x7FFFFFFFu) <= v7)
      {
        physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::growAndPushBack(v6, a3);
      }
      else
      {
        *(_DWORD *)(*(void *)(v6 + 264) + 4 * v7) = *a3;
        ++*(_DWORD *)(v6 + 272);
      }
      ++a3;
      --v5;
    }
    while (v5);
  }
  return 1;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::growAndPushBack(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 276);
  if ((v4 & 0x7FFFFFFF) != 0) {
    int v5 = 2 * v4;
  }
  else {
    int v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = (4 * v5);
    if (v6 <= 0x100 && *(unsigned char *)(result + 256) == 0) {
      *(unsigned char *)(result + 256) = 1;
    }
    else {
      uint64_t result = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate(result, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    }
    float v8 = (_DWORD *)result;
  }
  else
  {
    float v8 = 0;
  }
  uint64_t v9 = *(unsigned int *)(v3 + 272);
  uint64_t v10 = *(void *)(v3 + 264);
  if (v9)
  {
    unint64_t v11 = (unint64_t)&v8[v9];
    float v12 = *(int **)(v3 + 264);
    float v13 = v8;
    do
    {
      int v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    uint64_t v15 = *(unsigned int *)(v3 + 272);
  }
  else
  {
    uint64_t v15 = 0;
  }
  v8[v15] = *a2;
  if ((*(_DWORD *)(v3 + 276) & 0x80000000) == 0)
  {
    if (v10 == v3)
    {
      *(unsigned char *)(v3 + 256) = 0;
    }
    else if (v10)
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 264) = v8;
  *(_DWORD *)(v3 + 276) = v5;
  ++*(_DWORD *)(v3 + 272);
  return result;
}

uint64_t physx::Gu::anonymous namespace'::AccumCallback::processHit(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (_DWORD *)(a2 + 16);
  uint64_t v4 = *(unsigned int *)(v2 + 272);
  if ((*(_DWORD *)(v2 + 276) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::growAndPushBack(v2, v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(v2 + 264) + 4 * v4) = *v3;
    ++*(_DWORD *)(v2 + 272);
  }
  return 1;
}

void physx::Gu::anonymous namespace'::AccumCallback::~AccumCallback(physx::Gu::_anonymous_namespace_::AccumCallback *this)
{
}

BOOL physx::Gu::SweepEstimateAnyShapeMesh(physx::Gu::CCDShape const&,physx::Gu::CCDShape const&,physx::PxTransform const&,physx::PxTransform const&,physx::PxTransform const&,physx::PxTransform const&,float,float)::CB::processHit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  int v55 = 0;
  long long v48 = *(_OWORD *)(a1 + 24);
  uint64_t v49 = a2 + 16;
  int v50 = 1;
  uint64_t v51 = &v55;
  long long v52 = xmmword_23441FAD0;
  int32x2_t v53 = vdup_n_s32(0xFE7FFFFF);
  v54[0] = 0;
  *(void *)((char *)v54 + 5) = 0;
  float v8 = *(float **)(a1 + 64);
  float v10 = v8[2];
  float v9 = v8[3];
  float v11 = (float)(v9 * v9) + -0.5;
  float v12 = v8[1];
  float v13 = (float)((float)((float)(v44.f32[1] + v44.f32[1]) * v12) + (float)(*v8 * (float)(v44.f32[0] + v44.f32[0])))
      + (float)(v10 * (float)(v45 + v45));
  int v14 = *(float **)(a1 + 40);
  if ((float)((float)((float)-(float)((float)((float)((float)(v9
                                                             * (float)((float)(v10 * (float)(v44.f32[0] + v44.f32[0]))
                                                                     - (float)(*v8 * (float)(v45 + v45))))
                                                     + (float)((float)(v44.f32[1] + v44.f32[1]) * v11))
                                             + (float)(v12 * v13))
                                     * v14[1])
                     - (float)(*v14
                             * (float)((float)((float)(v9
                                                     * (float)((float)(v12 * (float)(v45 + v45))
                                                             - (float)(v10 * (float)(v44.f32[1] + v44.f32[1]))))
                                             + (float)((float)(v44.f32[0] + v44.f32[0]) * v11))
                                     + (float)(*v8 * v13))))
             - (float)(v14[2]
                     * (float)((float)((float)(v9
                                             * (float)((float)(*v8 * (float)(v44.f32[1] + v44.f32[1]))
                                                     - (float)(v12 * (float)(v44.f32[0] + v44.f32[0]))))
                                     + (float)((float)(v45 + v45) * v11))
                             + (float)(v10 * v13)))) >= *(float *)(a1 + 16))
  {
    uint64_t v15 = *(float32x2_t **)(a1 + 72);
    float v16 = *(float32x2_t **)(a1 + 80);
    float v17 = v16[1].f32[0] * 1.1;
    float v18 = (float)(v45 + v47) * 0.5;
    float32x2_t v19 = vmul_f32(vadd_f32(v44, v46), (float32x2_t)0x3F0000003F000000);
    float32x2_t v20 = (float32x2_t)vdup_n_s32(0x3F8CCCCDu);
    float32x2_t v21 = vmul_f32(vadd_f32(vmul_f32(vsub_f32(v46, v44), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_n_s32(0x3C23D70Au)), v20);
    float v22 = (float)((float)((float)(v47 - v45) * 0.5) + 0.01) * 1.1;
    float v23 = v15[1].f32[0];
    float32x2_t v24 = vmul_f32(*v16, v20);
    float32x2_t v25 = *v15;
    int8x8_t v26 = vmvn_s8((int8x8_t)vcge_f32(vadd_f32(v24, v21), vabd_f32(*v15, v19)));
    if ((v26.i8[0] & 1) != 0 || (v26.i8[4] & 1) != 0 || (float v27 = 0.0, vabds_f32(v23, v18) > (float)(v17 + v22)))
    {
      uint64_t v28 = 0;
      float v30 = *(float32x2_t **)(a1 + 48);
      float v29 = *(float32x2_t **)(a1 + 56);
      float v31 = v29[1].f32[0] - v30[1].f32[0];
      float32x2_t v62 = vsub_f32(*v29, *v30);
      float v63 = v31;
      v61[0] = vadd_f32(v24, v25).u32[0];
      *(float *)&v61[1] = v24.f32[1] + v25.f32[1];
      *(float *)&v61[2] = v17 + v23;
      v60[0] = vsub_f32(v25, v24).u32[0];
      *(float *)&v60[1] = v25.f32[1] - v24.f32[1];
      *(float *)&v60[2] = v23 - v17;
      float32x2_t v58 = vadd_f32(v19, v21);
      float v59 = v18 + v22;
      float32x2_t v56 = vsub_f32(v19, v21);
      float v57 = v18 - v22;
      float v27 = 0.0;
      float v32 = 1.0;
      do
      {
        float v33 = v62.f32[v28];
        if (v33 >= -0.000001)
        {
          if (v33 <= 0.000001)
          {
            if (v58.f32[v28] < *(float *)&v60[v28] || v56.f32[v28] > *(float *)&v61[v28])
            {
LABEL_27:
              float v27 = 3.4028e38;
              break;
            }
          }
          else
          {
            float v34 = v56.f32[v28];
            float v35 = *(float *)&v61[v28];
            if (v34 > v35) {
              goto LABEL_27;
            }
            float v39 = v58.f32[v28];
            float v40 = *(float *)&v60[v28];
            if (v39 < v40)
            {
              float v41 = (float)(v40 - v39) / v33;
              if (v41 > v27) {
                float v27 = v41;
              }
            }
            if (v35 > v34)
            {
LABEL_19:
              float v42 = (float)(v35 - v34) / v33;
              if (v42 < v32) {
                float v32 = v42;
              }
            }
          }
        }
        else
        {
          float v34 = v58.f32[v28];
          float v35 = *(float *)&v60[v28];
          if (v34 < v35) {
            goto LABEL_27;
          }
          float v36 = *(float *)&v61[v28];
          float v37 = v56.f32[v28];
          if (v36 < v37)
          {
            float v38 = (float)(v36 - v37) / v33;
            if (v38 > v27) {
              float v27 = v38;
            }
          }
          if (v34 > v35) {
            goto LABEL_19;
          }
        }
        if (v27 > v32) {
          goto LABEL_27;
        }
        ++v28;
      }
      while (v28 != 3);
    }
    if (*(float *)(a1 + 12) < v27) {
      float v27 = *(float *)(a1 + 12);
    }
    *(float *)(a1 + 12) = v27;
    *a6 = v27;
  }
  return *(float *)(a1 + 12) > 0.0;
}

void physx::Gu::SweepEstimateAnyShapeMesh(physx::Gu::CCDShape const&,physx::Gu::CCDShape const&,physx::PxTransform const&,physx::PxTransform const&,physx::PxTransform const&,physx::PxTransform const&,float,float)::CB::~CB()
{
}

unint64_t generateContacts(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float *a5, float a6, float a7, float a8)
{
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v211 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 4096) = 0;
  float v10 = *(float *)(a4 + 4);
  float v11 = *(float *)(a4 + 40);
  float v12 = *(float *)(a4 + 44);
  float v13 = *(float *)(a4 + 36);
  float v14 = (float)-(float)(v11 * v10) - (float)(*(float *)a4 * v13);
  float v15 = *(float *)(a4 + 16);
  float v16 = *(float *)(a4 + 20);
  float v17 = *(float *)(a4 + 8);
  float v18 = *(float *)(a4 + 12);
  float v19 = (float)-(float)(v11 * v15) - (float)(v18 * v13);
  float v20 = *(float *)(a4 + 24);
  float v21 = *(float *)(a4 + 28);
  float v22 = (float)-(float)(v11 * v21) - (float)(v20 * v13);
  float v23 = a5[1];
  float v24 = a5[2];
  float v25 = a5[3];
  float v26 = (float)((float)(v18 * *a5) + (float)(v15 * v23)) + (float)(v16 * v24);
  float v27 = a5[4];
  float v28 = a5[5];
  float v29 = (float)((float)(v18 * v25) + (float)(v15 * v27)) + (float)(v16 * v28);
  float v31 = a5[6];
  float v30 = a5[7];
  float v32 = a5[8];
  float v33 = a5[9];
  float v34 = (float)((float)(v18 * v31) + (float)(v15 * v30)) + (float)(v16 * v32);
  float v35 = a5[10];
  float v36 = a5[11];
  float v37 = *(float *)(a4 + 32);
  float v38 = v19 - (float)(v16 * v12);
  float v39 = (float)((float)(v18 * v33) + (float)(v15 * v35)) + (float)(v16 * v36);
  float v40 = (float)((float)(v20 * v33) + (float)(v21 * v35)) + (float)(v37 * v36);
  float v41 = v38 + v39;
  float v42 = v14 - (float)(v17 * v12);
  float v43 = v22 - (float)(v37 * v12);
  float v44 = (float)((float)(*(float *)a4 * *a5) + (float)(v10 * v23)) + (float)(v17 * v24);
  float v45 = (float)((float)(v20 * *a5) + (float)(v21 * v23)) + (float)(v37 * v24);
  float v46 = (float)((float)(*(float *)a4 * v25) + (float)(v10 * v27)) + (float)(v17 * v28);
  float v47 = (float)((float)(v20 * v25) + (float)(v21 * v27)) + (float)(v37 * v28);
  float v48 = (float)((float)(*(float *)a4 * v31) + (float)(v10 * v30)) + (float)(v17 * v32);
  float v49 = (float)((float)(v20 * v31) + (float)(v21 * v30)) + (float)(v37 * v32);
  float v50 = v42 + (float)((float)((float)(*(float *)a4 * v33) + (float)(v10 * v35)) + (float)(v17 * v36));
  float v51 = v43 + v40;
  float v52 = a3[1];
  float v53 = v44 * *a3;
  float v54 = v26 * *a3;
  float v55 = v45 * *a3;
  float v56 = v46 * v52;
  float v57 = v29 * v52;
  float v58 = v47 * v52;
  float v59 = a3[2];
  float v60 = v48 * v59;
  float v61 = v34 * v59;
  float v62 = v50 - v53;
  float v63 = v41 - v54;
  float v64 = v56 + (float)(v48 * v59);
  float v65 = v57 + (float)(v34 * v59);
  v210[0] = (float)(v50 - v53) - v64;
  v210[1] = (float)(v41 - v54) - v65;
  float v66 = v49 * v59;
  float v67 = v51 - v55;
  float v68 = v50 + v53;
  v210[2] = (float)(v51 - v55) - (float)(v58 + v66);
  float v69 = v41 + v54;
  float v70 = v51 + v55;
  v210[4] = v68 - v64;
  v210[5] = v69 - v65;
  v210[6] = v70 - (float)(v58 + v66);
  v210[24] = v62 + v64;
  v210[25] = v63 + v65;
  v210[26] = v67 + (float)(v58 + v66);
  v210[28] = v68 + v64;
  v210[29] = v69 + v65;
  v210[30] = v70 + (float)(v58 + v66);
  float v71 = v57 - v61;
  v210[8] = v62 + (float)(v56 - v60);
  v210[9] = v63 + v71;
  float v72 = v58 - v66;
  v210[10] = v67 + v72;
  v210[12] = v68 + (float)(v56 - v60);
  v210[13] = v69 + v71;
  v210[14] = v70 + v72;
  v210[16] = v62 - (float)(v56 - v60);
  v210[17] = v63 - v71;
  v210[18] = v67 - v72;
  v210[20] = v68 - (float)(v56 - v60);
  v210[21] = v69 - v71;
  v210[22] = v70 - v72;
  float v73 = a6 + a8;
  float v74 = a7 + a8;
  do
  {
    float v75 = v210[v8];
    float v76 = &v210[v8];
    if (v75 >= (float)-a8)
    {
      *((unsigned char *)v76 + 12) = 1;
      float v77 = v76[1];
      if (fabsf(v77) <= v73 && (float v78 = v76[2], fabsf(v78) <= v74))
      {
        BYTE1(v210[v8 + 3]) = 1;
        if (v9 <= 0x3F)
        {
          uint64_t v79 = a1 + (v9++ << 6);
          *(_DWORD *)(a1 + 4096) = v9;
          *(void *)uint64_t v79 = *(void *)a2;
          int v80 = *(_DWORD *)(a2 + 8);
          *(float *)(v79 + 16) = v75;
          *(float *)(v79 + 20) = v77;
          *(float *)(v79 + 24) = v78;
          *(_DWORD *)(v79 + 8) = v80;
          *(float *)(v79 + 12) = -v75;
          *(_DWORD *)(v79 + 52) = -1;
        }
      }
      else
      {
        *((unsigned char *)v76 + 13) = 0;
      }
    }
    else
    {
      *((_WORD *)v76 + 6) = 0;
    }
    v8 += 4;
  }
  while (v8 != 32);
  float v81 = -v73;
  float v82 = -v74;
  float v83 = &generateContacts(physx::Gu::ContactBuffer &,physx::PxVec3 const&,float,float,physx::PxVec3 const&,physx::Cm::Matrix34 const&,physx::Cm::Matrix34 const&,float)::indices;
  do
  {
    uint64_t v84 = v83[1];
    float v85 = &v210[4 * *v83];
    float32_t v86 = &v210[4 * v84];
    if (*((unsigned char *)v85 + 12) || *((unsigned char *)v86 + 12))
    {
      if (!*((unsigned char *)v85 + 13) || !BYTE1(v210[4 * v84 + 3]))
      {
        float v87 = v85 + 1;
        float v88 = v85[1];
        float32x2_t v89 = v86 + 1;
        float v90 = v86[1];
        if (v88 <= v90) {
          float32x2_t v91 = &v210[4 * *v83];
        }
        else {
          float32x2_t v91 = v86;
        }
        if (v88 <= v90) {
          float v92 = v86;
        }
        else {
          float v92 = &v210[4 * *v83];
        }
        if (v88 <= v90) {
          float v93 = v85[1];
        }
        else {
          float v93 = v86[1];
        }
        if (v93 < v73)
        {
          float v94 = v88 <= v90 ? v86[1] : v85[1];
          if (v94 >= v73)
          {
            float v95 = (float)(v73 - v93) / (float)(v94 - v93);
            uint64_t v96 = v88 <= v90 ? &v210[4 * *v83] : v86;
            float v97 = v96[2];
            uint64_t v98 = v88 <= v90 ? v86 : &v210[4 * *v83];
            float v99 = v97 + (float)((float)(v98[2] - v97) * v95);
            if (fabsf(v99) <= v74)
            {
              float v100 = *v91 + (float)((float)(*v92 - *v91) * v95);
              if ((float)(v100 + a8) >= 0.0 && v9 <= 0x3F)
              {
                uint64_t v101 = a1 + (v9++ << 6);
                *(_DWORD *)(a1 + 4096) = v9;
                *(void *)uint64_t v101 = *(void *)a2;
                int v102 = *(_DWORD *)(a2 + 8);
                *(float *)(v101 + 16) = v100;
                *(float *)(v101 + 20) = v73;
                *(float *)(v101 + 24) = v99;
                *(_DWORD *)(v101 + 8) = v102;
                *(float *)(v101 + 12) = -v100;
                *(_DWORD *)(v101 + 52) = -1;
              }
            }
          }
        }
        if (v93 < v81)
        {
          float v103 = v88 <= v90 ? v86 + 1 : v85 + 1;
          if (*v103 >= v81)
          {
            float v104 = (float)(v81 - v93) / (float)(*v103 - v93);
            float v105 = v88 <= v90 ? v85 : v86;
            float v106 = v105[2];
            float v107 = v88 <= v90 ? v86 : v85;
            float v108 = v106 + (float)((float)(v107[2] - v106) * v104);
            if (fabsf(v108) <= v74)
            {
              float v109 = *v91 + (float)((float)(*v92 - *v91) * v104);
              if ((float)(v109 + a8) >= 0.0 && v9 <= 0x3F)
              {
                uint64_t v110 = a1 + (v9++ << 6);
                *(_DWORD *)(a1 + 4096) = v9;
                *(void *)uint64_t v110 = *(void *)a2;
                int v111 = *(_DWORD *)(a2 + 8);
                *(float *)(v110 + 16) = v109;
                *(float *)(v110 + 20) = v81;
                *(float *)(v110 + 24) = v108;
                *(_DWORD *)(v110 + 8) = v111;
                *(float *)(v110 + 12) = -v109;
                *(_DWORD *)(v110 + 52) = -1;
              }
            }
          }
        }
        float32x2_t v112 = v86 + 2;
        if (v88 <= v90) {
          float v113 = v85;
        }
        else {
          float v113 = v86;
        }
        if (v88 <= v90) {
          float32x2_t v114 = v85 + 2;
        }
        else {
          float32x2_t v114 = v86 + 2;
        }
        float v115 = v113[2];
        if (v88 > v90) {
          float32x2_t v112 = v85 + 2;
        }
        else {
          float v85 = v86;
        }
        float v116 = v85[2];
        if (v115 <= v116) {
          float v85 = v91;
        }
        else {
          float v85 = v92;
        }
        if (v115 <= v116) {
          float32_t v86 = v92;
        }
        else {
          float32_t v86 = v91;
        }
        if (v115 <= v116) {
          float v117 = v113[2];
        }
        else {
          float v117 = v116;
        }
        if (v117 < v74)
        {
          float v118 = v115 <= v116 ? v116 : v113[2];
          if (v118 >= v74)
          {
            float v119 = (float)(v74 - v117) / (float)(v118 - v117);
            if (v88 <= v90) {
              float v120 = v89;
            }
            else {
              float v120 = v87;
            }
            if (v88 <= v90) {
              float v121 = v87;
            }
            else {
              float v121 = v89;
            }
            if (v115 <= v116) {
              float v122 = v121;
            }
            else {
              float v122 = v120;
            }
            if (v115 > v116) {
              float v120 = v121;
            }
            float v123 = *v122 + (float)((float)(*v120 - *v122) * v119);
            if (fabsf(v123) <= v73)
            {
              float v124 = *v85 + (float)((float)(*v86 - *v85) * v119);
              if ((float)(v124 + a8) >= 0.0 && v9 <= 0x3F)
              {
                uint64_t v125 = a1 + (v9++ << 6);
                *(_DWORD *)(a1 + 4096) = v9;
                *(void *)uint64_t v125 = *(void *)a2;
                int v126 = *(_DWORD *)(a2 + 8);
                *(float *)(v125 + 16) = v124;
                *(float *)(v125 + 20) = v123;
                *(float *)(v125 + 24) = v74;
                *(_DWORD *)(v125 + 8) = v126;
                *(float *)(v125 + 12) = -v124;
                *(_DWORD *)(v125 + 52) = -1;
              }
            }
          }
        }
        if (v117 < v82)
        {
          unsigned int v127 = v115 <= v116 ? v112 : v114;
          if (*v127 >= v82)
          {
            float v128 = (float)(v82 - v117) / (float)(*v127 - v117);
            if (v88 <= v90) {
              unsigned int v129 = v89;
            }
            else {
              unsigned int v129 = v87;
            }
            if (v88 > v90) {
              float v87 = v89;
            }
            if (v115 <= v116) {
              float v130 = v87;
            }
            else {
              float v130 = v129;
            }
            if (v115 <= v116) {
              float v87 = v129;
            }
            float v131 = *v130 + (float)((float)(*v87 - *v130) * v128);
            if (fabsf(v131) <= v73)
            {
              float v132 = *v85 + (float)((float)(*v86 - *v85) * v128);
              if ((float)(v132 + a8) >= 0.0 && v9 <= 0x3F)
              {
                uint64_t v133 = a1 + (v9++ << 6);
                *(_DWORD *)(a1 + 4096) = v9;
                *(void *)uint64_t v133 = *(void *)a2;
                int v134 = *(_DWORD *)(a2 + 8);
                *(float *)(v133 + 16) = v132;
                *(float *)(v133 + 20) = v131;
                *(float *)(v133 + 24) = v82;
                *(_DWORD *)(v133 + 8) = v134;
                *(float *)(v133 + 12) = -v132;
                *(_DWORD *)(v133 + 52) = -1;
              }
            }
          }
        }
      }
      if (!*((unsigned char *)v85 + 12) && !*((unsigned char *)v86 + 13) || !*((unsigned char *)v86 + 12) && !*((unsigned char *)v85 + 13))
      {
        float v135 = (float)-*v85 / (float)(*v86 - *v85);
        float v136 = v85[1] + (float)((float)(v86[1] - v85[1]) * v135);
        if (fabsf(v136) <= v73)
        {
          float v137 = v85[2] + (float)((float)(v86[2] - v85[2]) * v135);
          if (fabsf(v137) <= v74 && v9 <= 0x3F)
          {
            uint64_t v138 = a1 + (v9++ << 6);
            *(_DWORD *)(a1 + 4096) = v9;
            *(void *)uint64_t v138 = *(void *)a2;
            *(_DWORD *)(v138 + 8) = *(_DWORD *)(a2 + 8);
            *(float *)(v138 + 20) = v136;
            *(float *)(v138 + 24) = v137;
            *(_DWORD *)(v138 + 12) = 0;
            *(_DWORD *)(v138 + 16) = 0;
            *(_DWORD *)(v138 + 52) = -1;
          }
        }
      }
    }
    v83 += 2;
  }
  while (v83 != (int *)&generateContacts(physx::Gu::ContactBuffer &,physx::PxVec3 const&,float,float,physx::PxVec3 const&,physx::Cm::Matrix34 const&,physx::Cm::Matrix34 const&,float)::face);
  unint64_t v139 = 0;
  int v140 = 0;
  do
  {
    float32x2_t v141 = (int *)((char *)&generateContacts(physx::Gu::ContactBuffer &,physx::PxVec3 const&,float,float,physx::PxVec3 const&,physx::Cm::Matrix34 const&,physx::Cm::Matrix34 const&,float)::face
                 + 16 * v139);
    uint64_t v142 = *v141;
    int v143 = &v210[4 * v142];
    v207[0] = v143;
    if (*((unsigned char *)v143 + 12))
    {
      uint64_t v144 = v141[1];
      float32_t v145 = &v210[4 * v144];
      v207[1] = v145;
      if (*((unsigned char *)v145 + 12))
      {
        uint64_t v146 = v141[2];
        float v208 = &v210[4 * v146];
        if (*((unsigned char *)v208 + 12))
        {
          uint64_t v147 = v141[3];
          float v148 = &v210[4 * v147];
          float v209 = v148;
          if (*((unsigned char *)v148 + 12))
          {
            if (!BYTE1(v210[4 * v142 + 3])
              || !BYTE1(v210[4 * v144 + 3])
              || !BYTE1(v210[4 * v146 + 3])
              || !BYTE1(v210[4 * v147 + 3]))
            {
              if ((v140 & 1) == 0)
              {
                uint64_t v149 = 0;
                float v152 = v148[1];
                float v153 = v148[2];
                while (1)
                {
                  float v154 = v153;
                  float v155 = v152;
                  uint64_t v156 = v207[v149];
                  float v152 = *(float *)(v156 + 4);
                  float v153 = *(float *)(v156 + 8);
                  if ((float)((float)((float)(v152 - v155) * (float)(v82 - v154))
                             - (float)((float)(v153 - v154) * (float)(v81 - v155))) >= 0.0)
                    break;
                  if (++v149 == 4)
                  {
                    float v157 = v143[1];
                    float v158 = v143[2];
                    float v150 = v148[1];
                    float v151 = v148[2];
                    float v159 = (float)((float)((float)((float)((float)(v82 - v158) * (float)(v151 - v158))
                                                 + (float)((float)(v81 - v157) * (float)(v150 - v157)))
                                         * (float)(*v148 - *v143))
                                 / (float)((float)((float)((float)(v150 - v157) * (float)(v150 - v157))
                                                 + (float)((float)(*v148 - *v143) * (float)(*v148 - *v143)))
                                         + (float)((float)(v151 - v158) * (float)(v151 - v158))))
                         + (float)(*v143
                                 + (float)((float)((float)(*v145 - *v143)
                                                 * (float)((float)((float)(v82 - v158) * (float)(v145[2] - v158))
                                                         + (float)((float)(v81 - v157) * (float)(v145[1] - v157))))
                                         / (float)((float)((float)((float)(v145[1] - v157) * (float)(v145[1] - v157))
                                                         + (float)((float)(*v145 - *v143) * (float)(*v145 - *v143)))
                                                 + (float)((float)(v145[2] - v158) * (float)(v145[2] - v158)))));
                    if (v159 >= 0.0)
                    {
                      v140 |= 1u;
                      if (v9 <= 0x3F)
                      {
                        uint64_t v160 = a1 + (v9++ << 6);
                        *(_DWORD *)(a1 + 4096) = v9;
                        *(void *)uint64_t v160 = *(void *)a2;
                        int v161 = *(_DWORD *)(a2 + 8);
                        *(float *)(v160 + 16) = v159;
                        *(float *)(v160 + 20) = v81;
                        *(float *)(v160 + 24) = v82;
                        *(_DWORD *)(v160 + 8) = v161;
                        *(float *)(v160 + 12) = -v159;
                        *(_DWORD *)(v160 + 52) = -1;
                      }
                    }
                    break;
                  }
                }
              }
              if ((v140 & 2) == 0)
              {
                uint64_t v162 = 0;
                float v165 = v148[1];
                float v166 = v148[2];
                while (1)
                {
                  float v167 = v166;
                  float v168 = v165;
                  uint64_t v169 = v207[v162];
                  float v165 = *(float *)(v169 + 4);
                  float v166 = *(float *)(v169 + 8);
                  if ((float)((float)((float)(v165 - v168) * (float)(v82 - v167))
                             - (float)((float)(v166 - v167) * (float)(v73 - v168))) >= 0.0)
                    break;
                  if (++v162 == 4)
                  {
                    float v170 = v143[1];
                    float v171 = v143[2];
                    float v163 = v148[1];
                    float v164 = v148[2];
                    float v172 = (float)((float)((float)((float)((float)(v82 - v171) * (float)(v164 - v171))
                                                 + (float)((float)(v73 - v170) * (float)(v163 - v170)))
                                         * (float)(*v148 - *v143))
                                 / (float)((float)((float)((float)(v163 - v170) * (float)(v163 - v170))
                                                 + (float)((float)(*v148 - *v143) * (float)(*v148 - *v143)))
                                         + (float)((float)(v164 - v171) * (float)(v164 - v171))))
                         + (float)(*v143
                                 + (float)((float)((float)(*v145 - *v143)
                                                 * (float)((float)((float)(v82 - v171) * (float)(v145[2] - v171))
                                                         + (float)((float)(v73 - v170) * (float)(v145[1] - v170))))
                                         / (float)((float)((float)((float)(v145[1] - v170) * (float)(v145[1] - v170))
                                                         + (float)((float)(*v145 - *v143) * (float)(*v145 - *v143)))
                                                 + (float)((float)(v145[2] - v171) * (float)(v145[2] - v171)))));
                    if (v172 >= 0.0)
                    {
                      v140 |= 2u;
                      if (v9 <= 0x3F)
                      {
                        uint64_t v173 = a1 + (v9++ << 6);
                        *(_DWORD *)(a1 + 4096) = v9;
                        *(void *)uint64_t v173 = *(void *)a2;
                        int v174 = *(_DWORD *)(a2 + 8);
                        *(float *)(v173 + 16) = v172;
                        *(float *)(v173 + 20) = v73;
                        *(float *)(v173 + 24) = v82;
                        *(_DWORD *)(v173 + 8) = v174;
                        *(float *)(v173 + 12) = -v172;
                        *(_DWORD *)(v173 + 52) = -1;
                      }
                    }
                    break;
                  }
                }
              }
              if ((v140 & 4) == 0)
              {
                uint64_t v175 = 0;
                float v178 = v148[1];
                float v179 = v148[2];
                while (1)
                {
                  float v180 = v179;
                  float v181 = v178;
                  uint64_t v182 = v207[v175];
                  float v178 = *(float *)(v182 + 4);
                  float v179 = *(float *)(v182 + 8);
                  if ((float)((float)((float)(v178 - v181) * (float)(v74 - v180))
                             - (float)((float)(v179 - v180) * (float)(v81 - v181))) >= 0.0)
                    break;
                  if (++v175 == 4)
                  {
                    float v183 = v143[1];
                    float v184 = v143[2];
                    float v176 = v148[1];
                    float v177 = v148[2];
                    float v185 = (float)((float)((float)((float)((float)(v74 - v184) * (float)(v177 - v184))
                                                 + (float)((float)(v81 - v183) * (float)(v176 - v183)))
                                         * (float)(*v148 - *v143))
                                 / (float)((float)((float)((float)(v176 - v183) * (float)(v176 - v183))
                                                 + (float)((float)(*v148 - *v143) * (float)(*v148 - *v143)))
                                         + (float)((float)(v177 - v184) * (float)(v177 - v184))))
                         + (float)(*v143
                                 + (float)((float)((float)(*v145 - *v143)
                                                 * (float)((float)((float)(v74 - v184) * (float)(v145[2] - v184))
                                                         + (float)((float)(v81 - v183) * (float)(v145[1] - v183))))
                                         / (float)((float)((float)((float)(v145[1] - v183) * (float)(v145[1] - v183))
                                                         + (float)((float)(*v145 - *v143) * (float)(*v145 - *v143)))
                                                 + (float)((float)(v145[2] - v184) * (float)(v145[2] - v184)))));
                    if (v185 >= 0.0)
                    {
                      v140 |= 4u;
                      if (v9 <= 0x3F)
                      {
                        uint64_t v186 = a1 + (v9++ << 6);
                        *(_DWORD *)(a1 + 4096) = v9;
                        *(void *)uint64_t v186 = *(void *)a2;
                        int v187 = *(_DWORD *)(a2 + 8);
                        *(float *)(v186 + 16) = v185;
                        *(float *)(v186 + 20) = v81;
                        *(float *)(v186 + 24) = v74;
                        *(_DWORD *)(v186 + 8) = v187;
                        *(float *)(v186 + 12) = -v185;
                        *(_DWORD *)(v186 + 52) = -1;
                      }
                    }
                    break;
                  }
                }
              }
              if ((v140 & 8) == 0)
              {
                uint64_t v188 = 0;
                float v191 = v148[1];
                float v192 = v148[2];
                while (1)
                {
                  float v193 = v192;
                  float v194 = v191;
                  uint64_t v195 = v207[v188];
                  float v191 = *(float *)(v195 + 4);
                  float v192 = *(float *)(v195 + 8);
                  if ((float)((float)((float)(v191 - v194) * (float)(v74 - v193))
                             - (float)((float)(v192 - v193) * (float)(v73 - v194))) >= 0.0)
                    break;
                  if (++v188 == 4)
                  {
                    float v196 = v143[1];
                    float v197 = v143[2];
                    float v189 = v148[1];
                    float v190 = v148[2];
                    float v198 = (float)((float)((float)((float)((float)(v74 - v197) * (float)(v190 - v197))
                                                 + (float)((float)(v73 - v196) * (float)(v189 - v196)))
                                         * (float)(*v148 - *v143))
                                 / (float)((float)((float)((float)(v189 - v196) * (float)(v189 - v196))
                                                 + (float)((float)(*v148 - *v143) * (float)(*v148 - *v143)))
                                         + (float)((float)(v190 - v197) * (float)(v190 - v197))))
                         + (float)(*v143
                                 + (float)((float)((float)(*v145 - *v143)
                                                 * (float)((float)((float)(v74 - v197) * (float)(v145[2] - v197))
                                                         + (float)((float)(v73 - v196) * (float)(v145[1] - v196))))
                                         / (float)((float)((float)((float)(v145[1] - v196) * (float)(v145[1] - v196))
                                                         + (float)((float)(*v145 - *v143) * (float)(*v145 - *v143)))
                                                 + (float)((float)(v145[2] - v197) * (float)(v145[2] - v197)))));
                    if (v198 >= 0.0)
                    {
                      v140 |= 8u;
                      if (v9 <= 0x3F)
                      {
                        uint64_t v199 = a1 + (v9++ << 6);
                        *(_DWORD *)(a1 + 4096) = v9;
                        *(void *)uint64_t v199 = *(void *)a2;
                        int v200 = *(_DWORD *)(a2 + 8);
                        *(float *)(v199 + 16) = v198;
                        *(float *)(v199 + 20) = v73;
                        *(float *)(v199 + 24) = v74;
                        *(_DWORD *)(v199 + 8) = v200;
                        *(float *)(v199 + 12) = -v198;
                        *(_DWORD *)(v199 + 52) = -1;
                      }
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v139 > 4) {
      break;
    }
    ++v139;
  }
  while (v140 != 15);
  if (v9)
  {
    float v201 = (float *)(a1 + 24);
    unint64_t v202 = v9;
    do
    {
      float v203 = *(v201 - 2);
      float v204 = *(v201 - 1);
      float v205 = (float)((float)((float)(v203 * *(float *)(a4 + 8)) + (float)(v204 * *(float *)(a4 + 20)))
                   + (float)(*v201 * *(float *)(a4 + 32)))
           + *(float *)(a4 + 44);
      *((float32x2_t *)v201 - 1) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a4, v203), vmul_n_f32(*(float32x2_t *)(a4 + 12), v204)), vmul_n_f32(*(float32x2_t *)(a4 + 24), *v201)), *(float32x2_t *)(a4 + 36));
      *float v201 = v205;
      v201 += 16;
      --v202;
    }
    while (v202);
  }
  return v9;
}

BOOL intersectEdgeEdgePreca(float *a1, float *a2, uint64_t a3, float *a4, unsigned int a5, unsigned int a6, float32x2_t *a7, float *a8, float a9, float *a10, float *a11, float32x2_t *a12)
{
  float v12 = *a8;
  float v13 = a8[1];
  float v14 = a4[1];
  float v15 = a8[2];
  float v16 = a4[2];
  float v17 = a4[3];
  float v18 = (float)((float)((float)(v13 * v14) + (float)(*a8 * *a4)) + (float)(v15 * v16)) + v17;
  float v19 = a10[1];
  float v20 = a10[2];
  if ((float)(v18 * (float)(v17 + (float)((float)((float)(v14 * v19) + (float)(*a10 * *a4)) + (float)(v20 * v16)))) > 0.0) {
    return 0;
  }
  float v21 = *a10 - v12;
  float v22 = v19 - v13;
  float v23 = v20 - v15;
  float v24 = (float)((float)(v14 * v22) + (float)(*a4 * v21)) + (float)(v16 * v23);
  if (v24 == 0.0) {
    return 0;
  }
  float v25 = v18 / v24;
  a12->f32[0] = v12 - (float)(v21 * v25);
  a12->f32[1] = v13 - (float)(v22 * v25);
  a12[1].f32[0] = v15 - (float)(v23 * v25);
  float v26 = (float)((float)(*(float *)(a3 + 4 * a5) * (float)(a12->f32[a6] - a1[a6]))
              - (float)(*(float *)(a3 + 4 * a6) * (float)(a12->f32[a5] - a1[a5])))
      * a9;
  *a11 = v26;
  if (v26 < 0.0) {
    return 0;
  }
  float v28 = v26 * a7[1].f32[0];
  float32x2_t v29 = vsub_f32(*a12, vmul_n_f32(*a7, v26));
  *a12 = v29;
  float32_t v30 = a12[1].f32[0] - v28;
  a12[1].f32[0] = v30;
  return (float)((float)((float)((float)(a1[1] - v29.f32[1]) * (float)(a2[1] - v29.f32[1]))
                       + (float)((float)(*a1 - v29.f32[0]) * (float)(*a2 - v29.f32[0])))
               + (float)((float)(a1[2] - v30) * (float)(a2[2] - v30))) < 0.0;
}

BOOL GuTestAxis(float *a1, float *a2, float *a3, float *a4, float a5)
{
  float v5 = *a1;
  float v6 = a1[1];
  float v7 = a1[2];
  float v8 = a2[3];
  float v9 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  float v10 = a2[5];
  float v11 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  if (v9 <= v11) {
    float v12 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  }
  else {
    float v12 = (float)((float)(v6 * a2[4]) + (float)(v8 * *a1)) + (float)(v10 * v7);
  }
  if (v9 > v11) {
    float v11 = (float)((float)(a2[1] * v6) + (float)(*a2 * *a1)) + (float)(a2[2] * v7);
  }
  float v13 = v12 - a5;
  float v14 = v11 + a5;
  float v15 = (float)((float)(v6 * a3[10]) + (float)(a3[9] * v5)) + (float)(a3[11] * v7);
  float v16 = (float)((float)(a3[13] * fabsf((float)((float)(v6 * a3[4]) + (float)(a3[3] * v5)) + (float)(a3[5] * v7)))
              + (float)(fabsf((float)((float)(v6 * a3[1]) + (float)(*a3 * v5)) + (float)(a3[2] * v7)) * a3[12]))
      + (float)(fabsf((float)((float)(v6 * a3[7]) + (float)(a3[6] * v5)) + (float)(a3[8] * v7)) * a3[14]);
  float v17 = v15 - v16;
  float v18 = v15 + v16;
  BOOL result = v18 >= v13 && v14 >= v17;
  if (result)
  {
    float v20 = v14 - v17;
    float v21 = v18 - v13;
    if (v20 >= v21) {
      float v20 = v21;
    }
    *a4 = v20;
  }
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<256u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (4 * a2);
  if (v4 <= 0x100 && *(unsigned char *)(result + 256) == 0) {
    *(unsigned char *)(result + 256) = 1;
  }
  else {
    BOOL result = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate(result, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  uint64_t v6 = result;
  uint64_t v7 = *(unsigned int *)(v3 + 272);
  uint64_t v8 = *(void *)(v3 + 264);
  if (v7)
  {
    unint64_t v9 = result + 4 * v7;
    float v10 = *(int **)(v3 + 264);
    float v11 = (_DWORD *)result;
    do
    {
      int v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 276) & 0x80000000) == 0)
  {
    if (v8 == v3)
    {
      *(unsigned char *)(v3 + 256) = 0;
    }
    else if (v8)
    {
      BOOL result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 264) = v6;
  *(_DWORD *)(v3 + 276) = a2;
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::supportPoint(uint64_t a1, int a2)
{
  uint64_t v2 = *(float32x4_t **)(a1 + 16);
  float32x4_t v3 = *(float32x4_t *)(*(void *)(a1 + 8) + 16 * (1 - a2) + 48);
  float32x4_t v4 = vmulq_n_f32(*v2, v3.f32[0]);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_lane_f32(v2[1], *(float32x2_t *)v3.f32, 1);
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_laneq_f32(v2[2], v3, 2);
  v6.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v2[3], vaddq_f32(vaddq_f32(v4, v5), v6)).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t v2 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v2.i32[3] = 0;
  float32x4_t v3 = vmulq_lane_f32(a1[3], *a2, 1);
  v3.i32[3] = 0;
  float32x4_t v4 = (float32x4_t *)a1->i64[1];
  float32x4_t v5 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v6 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v6.i32[3] = 0;
  float32x4_t v7 = vaddq_f32(vaddq_f32(v2, v3), v6);
  float32x4_t v8 = v4[3];
  float32x4_t v9 = v4[4];
  float32x4_t v10 = vmulq_f32(v8, v7);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  float32x4_t v11 = vmulq_f32(v7, v9);
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  float32x4_t v12 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32), vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32)), 0), (int8x16_t)v8, (int8x16_t)v9);
  float32x4_t v13 = vmulq_n_f32(*v5, v12.f32[0]);
  v13.i32[3] = 0;
  float32x4_t v14 = vmulq_lane_f32(v5[1], *(float32x2_t *)v12.f32, 1);
  v14.i32[3] = 0;
  float32x4_t v15 = vmulq_laneq_f32(v5[2], v12, 2);
  v15.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v5[3], vaddq_f32(v15, vaddq_f32(v13, v14))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(float32x4_t *a1, float32x2_t *a2, _DWORD *a3)
{
  float32x4_t v3 = (float32x4_t *)a1->i64[1];
  float32x4_t v4 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v5 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_lane_f32(a1[3], *a2, 1);
  v6.i32[3] = 0;
  float32x4_t v7 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v7.i32[3] = 0;
  float32x4_t v8 = vaddq_f32(vaddq_f32(v5, v6), v7);
  float32x4_t v9 = vmulq_f32(v3[3], v8);
  v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
  float32x4_t v10 = vmulq_f32(v8, v3[4]);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  *(int8x8_t *)v10.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v9.f32, *(float32x2_t *)v9.f32), vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32)), (int8x8_t)0x100000001);
  *a3 = v10.i32[0];
  float32x4_t v11 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v10.f32, 0), 0x1FuLL)), (int8x16_t)v3[3], (int8x16_t)v3[4]);
  float32x4_t v12 = vmulq_n_f32(*v4, v11.f32[0]);
  v12.i32[3] = 0;
  float32x4_t v13 = vmulq_lane_f32(v4[1], *(float32x2_t *)v11.f32, 1);
  v13.i32[3] = 0;
  float32x4_t v14 = vmulq_laneq_f32(v4[2], v11, 2);
  v14.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v4[3], vaddq_f32(v14, vaddq_f32(v12, v13))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::getSweepMargin()
{
  return 0.0;
}

double physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::getCenter(uint64_t a1)
{
  float32x4_t v2 = *(float32x2_t **)(a1 + 8);
  v1 = *(float32x4_t **)(a1 + 16);
  float32x4_t v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  float32x4_t v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::~RelativeConvex()
{
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::CapsuleV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10)
{
  float32x4_t v10 = a4;
  float32x4_t v11 = a3;
  uint64_t v341 = *MEMORY[0x263EF8340];
  uint64_t v14 = a1->i64[1];
  float32x4_t v15 = (const float *)(v14 + 20);
  float32x2_t v16 = vld1_dup_f32(v15);
  uint64_t v17 = *(void *)(a2 + 8);
  float v18 = (const float *)(v17 + 20);
  float32x2_t v19 = vld1_dup_f32(v18);
  float32x2_t v20 = vmin_f32(v16, v19);
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v22 = vmul_f32(v20, v21);
  v20.i32[0] = *(_DWORD *)(v14 + 16);
  v21.i32[0] = *(_DWORD *)(v17 + 16);
  a10.i32[0] = -*(char *)(v14 + 32);
  int32x2_t v23 = (int32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v20);
  float32x2_t v24 = (float32x2_t)vdup_lane_s32(v23, 0);
  v23.i32[0] = -*(char *)(v17 + 32);
  float32x2_t v25 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v23, (int8x8_t)v21), 0);
  float32x2_t v315 = v24;
  float v316 = v25.f32[0];
  float32x2_t v26 = vadd_f32(v24, v25);
  unsigned int v324 = 0;
  uint64_t v27 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v53 = vmulq_f32(a7, a7);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v54 = vmulq_f32(v45, v45);
    v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
    float32x2_t v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
    float32x2_t v56 = vrsqrte_f32(v55);
    int v57 = 4;
    do
    {
      float32x2_t v56 = vmul_f32(v56, vrsqrts_f32(vmul_f32(v56, v56), v55));
      --v57;
    }
    while (v57);
    float32x2_t v58 = vmul_f32(v55, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v55), 0), (int8x8_t)_D11, (int8x8_t)v56));
    float32x2_t v59 = vrecpe_f32(v58);
    int v60 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v58, v59);
      float32x2_t v59 = vmul_f32(v59, *(float32x2_t *)a10.f32);
      --v60;
    }
    while (v60);
    float32x4_t v61 = vmulq_n_f32(v45, v59.f32[0]);
    v61.i32[3] = 0;
    float32x4_t v320 = v61;
    float32x2_t v62 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v63.i64[0] = -1;
    v63.i64[1] = -1;
    float32x4_t v64 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v33 = 0;
  float v34 = (float32x4_t *)a1[1].i64[0];
  uint64_t v35 = v14 + 48;
  uint64_t v36 = v17 + 48;
  do
  {
    uint64_t v37 = a3[v33];
    *(&v330 + v33) = v37;
    uint64_t v38 = a4[v33];
    *(&v328 + v33) = v38;
    float32x4_t v39 = *(float32x4_t *)(v35 + 16 * (1 - v37));
    float32x4_t v40 = vmulq_n_f32(*v34, v39.f32[0]);
    v40.i32[3] = 0;
    float32x4_t v41 = vmulq_lane_f32(v34[1], *(float32x2_t *)v39.f32, 1);
    v41.i32[3] = 0;
    a10 = v34[3];
    float32x4_t v42 = vmulq_laneq_f32(v34[2], v39, 2);
    v42.i32[3] = 0;
    float32x4_t v43 = vaddq_f32(a10, vaddq_f32(vaddq_f32(v40, v41), v42));
    float32x4_t v44 = *(float32x4_t *)(v36 + 16 * (1 - v38));
    float32x4_t v45 = vsubq_f32(v43, v44);
    *(&v335 + v33) = v43;
    *(&v332 + v33) = v44;
    *(&v338 + v33++) = v45;
  }
  while (v27 != v33);
  unsigned int v324 = v27;
  switch(v33)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v338, &v335, &v332, &v330, &v328, (int *)&v324);
      goto LABEL_49;
    case 3:
      unsigned int v324 = 3;
      float32x4_t v45 = v338;
      a10 = vsubq_f32(v339, v338);
      float32x4_t v65 = vsubq_f32((float32x4_t)v340[0], v338);
      int8x8_t v67 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v65.f32);
      *(int8x8_t *)v66.f32 = vext_s8(v67, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v65.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), 4uLL);
      v67.i32[1] = 0;
      float32x2_t v68 = vpadd_f32(vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), vmul_f32((float32x2_t)v67.u32[0], (float32x2_t)v67.u32[0]));
      float32x2_t v69 = vpadd_f32(v68, v68);
      if (v69.f32[0] > 0.00000011921)
      {
        if (v69.f32[0] == 0.0)
        {
          float32x4_t v45 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v66.u32[2] = v67;
          float32x2_t v70 = (float32x2_t)vextq_s8((int8x16_t)v339, (int8x16_t)v339, 8uLL).u64[0];
          float32x2_t v71 = (float32x2_t)vextq_s8(v340[0], v340[0], 8uLL).u64[0];
          float32x2_t v72 = (float32x2_t)vextq_s8(v340[0], v340[0], 4uLL).u64[0];
          float32x2_t v73 = (float32x2_t)vextq_s8((int8x16_t)v339, (int8x16_t)v339, 4uLL).u64[0];
          int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v339.f32, v72), v73, *(float32x2_t *)v340[0].i8);
          *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v340[0].i8), *(float32x2_t *)v339.f32, v71), 4uLL);
          v75.i64[1] = v74.u32[0];
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 8uLL).u64[0];
          float32x2_t v77 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 4uLL).u64[0];
          int8x8_t v78 = (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v340[0].i8), v72, *(float32x2_t *)v338.f32);
          *(int8x8_t *)v79.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v71), *(float32x2_t *)v340[0].i8, v76), 4uLL);
          v79.i64[1] = v78.u32[0];
          int8x8_t v80 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v73), v77, *(float32x2_t *)v339.f32);
          *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v339.f32), *(float32x2_t *)v338.f32, v70), 4uLL);
          v81.i64[1] = v80.u32[0];
          float32x4_t v82 = vmulq_f32(v75, v66);
          v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
          float32x2_t v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
          float32x4_t v84 = vmulq_f32(v79, v66);
          v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
          float32x2_t v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
          float32x4_t v86 = vmulq_f32(v81, v66);
          v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
          float32x2_t v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v85), (int8x8_t)vcgez_f32(v83)), (int8x8_t)vcgez_f32(v87)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
          {
            int8x16_t v113 = (int8x16_t)vmulq_f32(v338, v66);
            float32x2_t v114 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
            float32x2_t v115 = vrecpe_f32(v69);
            int v116 = 4;
            do
            {
              float32x2_t v115 = vmul_f32(v115, vrecps_f32(v69, v115));
              --v116;
            }
            while (v116);
            float32x2_t v117 = vpadd_f32(*(float32x2_t *)v113.i8, v114);
            float32x4_t v45 = vmulq_n_f32(v66, vmul_f32(v115, vpadd_f32(v117, v117)).f32[0]);
            v45.i32[3] = 0;
          }
          else
          {
            float32x4_t v88 = vnegq_f32(v338);
            v88.i32[3] = 0;
            float32x4_t v89 = vnegq_f32(v339);
            v89.i32[3] = 0;
            float32x4_t v90 = vmulq_f32(v88, a10);
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
            float32x4_t v92 = vmulq_f32(a10, v89);
            v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
            float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v91), (int8x8_t)vclez_f32(v93)), (int8x8_t)vclez_f32(v87)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
            {
              float32x2_t v118 = vsub_f32(v91, v93);
              float32x2_t v119 = vrecpe_f32(v118);
              int v120 = 4;
              do
              {
                float32x2_t v119 = vmul_f32(v119, vrecps_f32(v118, v119));
                --v120;
              }
              while (v120);
              uint64_t v105 = 0;
              float32x4_t v45 = vmlaq_n_f32(v338, a10, vmul_f32(v91, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v118), (float32x2_t)0x3400000034000000), (int8x8_t)v119, 0)).f32[0]);
              v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
              unsigned int v121 = 2;
              uint64_t v104 = 1;
            }
            else
            {
              float32x4_t v94 = vnegq_f32((float32x4_t)v340[0]);
              v94.i32[3] = 0;
              float32x4_t v95 = vmulq_f32(v89, v65);
              v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
              float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
              float32x4_t v97 = vmulq_f32(a10, v94);
              v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
              float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
              float32x4_t v99 = vmulq_f32(v65, v94);
              v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
              float32x2_t v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v96, v93), (int8x8_t)vcge_f32(v98, v100)), (int8x8_t)vclez_f32(v83)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
              {
                float32x2_t v122 = vsub_f32(v96, v93);
                float32x2_t v123 = vadd_f32(v122, vsub_f32(v98, v100));
                float32x2_t v124 = vrecpe_f32(v123);
                int v125 = 4;
                do
                {
                  float32x2_t v124 = vmul_f32(v124, vrecps_f32(v123, v124));
                  --v125;
                }
                while (v125);
                int8x16_t v126 = (int8x16_t)vmlaq_n_f32(v339, vsubq_f32((float32x4_t)v340[0], v339), vmul_f32(v122, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v123), (float32x2_t)0x3400000034000000), (int8x8_t)v124, 0)).f32[0]);
                v126.i64[1] = vextq_s8(v126, v126, 8uLL).u32[0];
                unsigned int v121 = 2;
                uint64_t v105 = 1;
                uint64_t v104 = 2;
                float32x4_t v45 = (float32x4_t)v126;
              }
              else
              {
                float32x4_t v101 = vmulq_f32(v88, v65);
                int32x4_t v102 = (int32x4_t)vpaddq_f32(v101, v101);
                *(float32x2_t *)v102.i8 = vpadd_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v102.i8), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v85)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
                {
                  float32x2_t v127 = vsub_f32(*(float32x2_t *)v102.i8, v100);
                  float32x2_t v128 = vrecpe_f32(v127);
                  int v129 = 4;
                  do
                  {
                    float32x2_t v128 = vmul_f32(v128, vrecps_f32(v127, v128));
                    --v129;
                  }
                  while (v129);
                  uint64_t v105 = 0;
                  float32x4_t v45 = vmlaq_n_f32(v338, v65, vmul_f32(*(float32x2_t *)v102.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v127), (float32x2_t)0x3400000034000000), (int8x8_t)v128, 0)).f32[0]);
                  v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
                  uint64_t v104 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v102.i8), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
                {
                  uint64_t v105 = 0;
                  uint64_t v104 = 1;
                }
                else
                {
                  *(int32x2_t *)v102.i8 = vcge_f32(v93, v96);
                  *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v102.i8, (int8x8_t)vcgez_f32(v93)), 0);
                  *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
                  v102.i32[0] = -1;
                  __int32 v103 = v45.i32[0];
                  float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v102), 0), (int8x16_t)v339, v340[0]);
                  uint64_t v104 = 1;
                  if (v103 == -1) {
                    uint64_t v105 = 1;
                  }
                  else {
                    uint64_t v105 = 2;
                  }
                }
                unsigned int v121 = v104;
              }
            }
            float32x4_t v130 = *(&v338 + v105);
            float32x4_t v131 = *(&v338 + v104);
            a10 = *(&v335 + v105);
            float32x4_t v132 = *(&v335 + v104);
            float32x4_t v133 = *(&v332 + v105);
            float32x4_t v134 = *(&v332 + v104);
            int v135 = *(&v330 + v105);
            int v136 = *(&v330 + v104);
            int v137 = *(&v328 + v105);
            int v138 = *(&v328 + v104);
            float32x4_t v338 = v130;
            float32x4_t v339 = v131;
            float32x4_t v335 = a10;
            float32x4_t v336 = v132;
            float32x4_t v332 = v133;
            float32x4_t v333 = v134;
            int v330 = v135;
            int v331 = v136;
            int v328 = v137;
            int v329 = v138;
            unsigned int v324 = v121;
          }
        }
        goto LABEL_49;
      }
      unsigned int v324 = 2;
      float32x4_t v106 = vmulq_f32(a10, a10);
      v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
      float32x2_t v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v107), 0), *(int8x8_t *)v338.f32).u32[0] != -1)
      {
        float32x4_t v108 = vnegq_f32(v338);
        v108.i32[3] = 0;
        float32x4_t v109 = vmulq_f32(v108, a10);
        v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
        float32x2_t v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
        float32x2_t v111 = vrecpe_f32(v107);
        int v112 = 4;
        do
        {
          float32x2_t v111 = vmul_f32(v111, vrecps_f32(v107, v111));
          --v112;
        }
        while (v112);
        float32x4_t v45 = vmlaq_n_f32(v338, a10, vmax_f32(vmin_f32(vmul_f32(v110, v111), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v45 = v338;
      float32x4_t v46 = vsubq_f32(v339, v338);
      float32x4_t v47 = vmulq_f32(v46, v46);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      float32x2_t v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v48), 0), *(int8x8_t *)v338.f32).u32[0] != -1)
      {
        float32x4_t v49 = vnegq_f32(v338);
        v49.i32[3] = 0;
        float32x4_t v50 = vmulq_f32(v49, v46);
        a10 = vpaddq_f32(v50, v50);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        float32x2_t v51 = vrecpe_f32(v48);
        int v52 = 4;
        do
        {
          float32x2_t v51 = vmul_f32(v51, vrecps_f32(v48, v51));
          --v52;
        }
        while (v52);
        float32x4_t v45 = vmlaq_n_f32(v338, v46, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v51), _D11), 0).f32[0]);
LABEL_31:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v324 = 1;
LABEL_49:
  float32x4_t v139 = vmulq_f32(v45, v45);
  v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
  float32x2_t v140 = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32);
  float32x2_t v141 = vrsqrte_f32(v140);
  int v142 = 4;
  do
  {
    float32x2_t v141 = vmul_f32(v141, vrsqrts_f32(vmul_f32(v141, v141), v140));
    --v142;
  }
  while (v142);
  float32x2_t v62 = vmul_f32(v140, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v140), 0), (int8x8_t)_D11, (int8x8_t)v141));
  float32x2_t v143 = vrecpe_f32(v62);
  int v144 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v62, v143);
    float32x2_t v143 = vmul_f32(v143, *(float32x2_t *)a10.f32);
    --v144;
  }
  while (v144);
  float32x4_t v145 = vmulq_n_f32(v45, v143.f32[0]);
  v145.i32[3] = 0;
  float32x4_t v320 = v145;
  int32x4_t v63 = vdupq_lane_s32(vcgt_f32(v62, v22), 0);
  float32x4_t v64 = v45;
LABEL_54:
  float32x2_t v317 = v26;
  float32x2_t v146 = vadd_f32(v26, a8);
  a10.i32[0] = -1;
  int32x4_t v313 = (int32x4_t)a10;
  float32x2_t v147 = v62;
  v148.i64[0] = -1;
  v148.i64[1] = -1;
  while (1)
  {
    float32x4_t v149 = v45;
    v150.i64[0] = -1;
    v150.i64[1] = -1;
    *(int16x4_t *)v150.i8 = vmovn_s32(vceqq_s32(v63, v150));
    if (vuzp1_s8(*(int8x8_t *)v150.i8, *(int8x8_t *)v150.i8).u32[0] != -1) {
      break;
    }
    float32x2_t v321 = v62;
    float32x4_t v322 = v149;
    float32x4_t v151 = vnegq_f32(v149);
    v151.i32[3] = 0;
    float32x4_t v325 = v151;
    uint64_t v152 = v324;
    *(double *)v153.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(a1, (float32x2_t *)&v325, &v330 + v324);
    float32x4_t v64 = v322;
    float32x4_t v154 = v153;
    float v155 = *(float32x4_t **)(a2 + 8);
    float32x4_t v156 = vmulq_f32(v322, v155[3]);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    float32x4_t v157 = vmulq_f32(v322, v155[4]);
    v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
    *(int8x8_t *)v156.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32), vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32)), (int8x8_t)0x100000001);
    *(&v328 + v152) = v156.i32[0];
    float32x4_t v158 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v156.f32, 0), 0x1FuLL)), (int8x16_t)v155[3], (int8x16_t)v155[4]);
    float32x4_t v45 = vsubq_f32(v154, v158);
    float32x4_t v159 = v320;
    float32x4_t v160 = vmulq_f32(v320, v45);
    v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
    float32x2_t v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v161, v146)).u8[0] & 1) == 0)
    {
      if (v11)
      {
        *a5 = v152;
        if (v152)
        {
          uint64_t v261 = &v328;
          float32x4_t v262 = &v330;
          do
          {
            int v263 = *v262++;
            *v11++ = v263;
            int v264 = *v261++;
            *v10++ = v264;
            --v152;
          }
          while (v152);
        }
      }
      return 0;
    }
    float32x2_t v162 = v321;
    if (v161.f32[0] > (float)(0.99977 * v321.f32[0]))
    {
      float32x4_t v325 = v322;
      if (v11)
      {
        *a5 = v152;
        if (v152)
        {
          float32x2_t v265 = &v328;
          int v266 = &v330;
          uint64_t v267 = v152;
          do
          {
            int v268 = *v266++;
            *v11++ = v268;
            int v269 = *v265++;
            *v10++ = v269;
            --v267;
          }
          while (v267);
          goto LABEL_119;
        }
        uint64_t v270 = a6;
        *(float32x4_t *)(a6 + 32) = v320;
        float32x4_t v271 = 0uLL;
        float32x4_t v272 = 0uLL;
      }
      else
      {
LABEL_119:
        uint64_t v270 = a6;
        *(float32x4_t *)(a6 + 32) = v320;
        if (v152 == 3)
        {
          float32x2_t v326 = 0;
          float32x2_t v327 = 0;
          physx::Gu::barycentricCoordinates(&v325, &v338, &v339, (float32x4_t *)v340, &v327, &v326);
          float32x4_t v159 = v320;
          float32x2_t v162 = v321;
          float32x4_t v280 = vmulq_n_f32(vsubq_f32(v336, v335), v327.f32[0]);
          v280.i32[3] = 0;
          float32x4_t v281 = vmulq_n_f32(vsubq_f32(v337, v335), v326.f32[0]);
          v281.i32[3] = 0;
          float32x4_t v282 = vaddq_f32(v280, v281);
          float32x4_t v283 = vmulq_n_f32(vsubq_f32(v333, v332), v327.f32[0]);
          v283.i32[3] = 0;
          float32x4_t v271 = vaddq_f32(v335, v282);
          float32x4_t v284 = vmulq_n_f32(vsubq_f32(v334, v332), v326.f32[0]);
          v284.i32[3] = 0;
          float32x4_t v272 = vaddq_f32(v332, vaddq_f32(v283, v284));
        }
        else if (v152 == 2)
        {
          float32x4_t v285 = vsubq_f32(v338, v322);
          float32x4_t v286 = vsubq_f32(vsubq_f32(v339, v322), v285);
          float32x4_t v287 = vmulq_f32(v286, v286);
          v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
          float32x2_t v288 = vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32);
          float32x2_t v289 = vrecpe_f32(v288);
          int v290 = 4;
          do
          {
            float32x2_t v289 = vmul_f32(v289, vrecps_f32(v288, v289));
            --v290;
          }
          while (v290);
          float32x4_t v291 = vnegq_f32(v285);
          v291.i32[3] = 0;
          float32x4_t v292 = vmulq_f32(v291, v286);
          v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
          v291.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v288), (int8x8_t)v289, 0), vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32)).u32[0];
          float32x4_t v271 = vmlaq_n_f32(v335, vsubq_f32(v336, v335), v291.f32[0]);
          v271.i64[1] = vextq_s8((int8x16_t)v271, (int8x16_t)v271, 8uLL).u32[0];
          float32x4_t v272 = vmlaq_n_f32(v332, vsubq_f32(v333, v332), v291.f32[0]);
          v272.i64[1] = vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL).u32[0];
        }
        else
        {
          float32x4_t v271 = 0uLL;
          float32x4_t v272 = 0uLL;
          if (v152 == 1)
          {
            float32x4_t v271 = v335;
            float32x4_t v272 = v332;
          }
        }
      }
      int8x16_t v293 = (int8x16_t)vmlsq_lane_f32(v271, v159, v315, 0);
      v293.i64[1] = vextq_s8(v293, v293, 8uLL).u32[0];
      int8x16_t v294 = (int8x16_t)vmlaq_n_f32(v272, v159, v316);
      v294.i64[1] = vextq_s8(v294, v294, 8uLL).u32[0];
      *(int8x16_t *)uint64_t v270 = v293;
      *(int8x16_t *)(v270 + 16) = v294;
      *(float32x2_t *)(v270 + 64) = vsub_f32(v162, v317);
      return 2;
    }
    *(&v335 + v152) = v154;
    *(&v332 + v152) = v158;
    unsigned int v324 = v152 + 1;
    *(&v338 + v152) = v45;
    switch(v152)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v338, &v335, &v332, &v330, &v328, (int *)&v324);
        float32x2_t v162 = v321;
        float32x4_t v64 = v322;
        break;
      case 2:
        float32x4_t v45 = v338;
        float32x4_t v171 = vsubq_f32(v339, v338);
        float32x4_t v172 = vsubq_f32((float32x4_t)v340[0], v338);
        int8x8_t v174 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 4uLL), *(float32x2_t *)v172.f32);
        *(int8x8_t *)v173.f32 = vext_s8(v174, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL), *(float32x2_t *)v172.f32), *(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL)), 4uLL);
        v174.i32[1] = 0;
        unsigned int v324 = 3;
        float32x2_t v175 = vpadd_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), vmul_f32((float32x2_t)v174.u32[0], (float32x2_t)v174.u32[0]));
        float32x2_t v176 = vpadd_f32(v175, v175);
        if (v176.f32[0] <= 0.00000011921)
        {
          unsigned int v324 = 2;
          float32x4_t v213 = vmulq_f32(v171, v171);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v214), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
          {
LABEL_81:
            unsigned int v324 = 1;
            break;
          }
          float32x4_t v215 = vnegq_f32(v338);
          v215.i32[3] = 0;
          float32x4_t v216 = vmulq_f32(v215, v171);
          v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
          float32x2_t v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
          float32x2_t v218 = vrecpe_f32(v214);
          int v219 = 4;
          do
          {
            float32x2_t v218 = vmul_f32(v218, vrecps_f32(v214, v218));
            --v219;
          }
          while (v219);
          float32x4_t v45 = vmlaq_n_f32(v338, v171, vmax_f32(vmin_f32(vmul_f32(v217, v218), _D11), 0).f32[0]);
          goto LABEL_80;
        }
        if (v176.f32[0] == 0.0)
        {
          float32x4_t v45 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v173.u32[2] = v174;
          float32x2_t v177 = (float32x2_t)vextq_s8((int8x16_t)v339, (int8x16_t)v339, 8uLL).u64[0];
          float32x2_t v178 = (float32x2_t)vextq_s8(v340[0], v340[0], 8uLL).u64[0];
          float32x2_t v179 = (float32x2_t)vextq_s8(v340[0], v340[0], 4uLL).u64[0];
          float32x2_t v180 = (float32x2_t)vextq_s8((int8x16_t)v339, (int8x16_t)v339, 4uLL).u64[0];
          int8x8_t v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v339.f32, v179), v180, *(float32x2_t *)v340[0].i8);
          *(int8x8_t *)v182.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32(v177, *(float32x2_t *)v340[0].i8), *(float32x2_t *)v339.f32, v178), 4uLL);
          v182.i64[1] = v181.u32[0];
          float32x2_t v183 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 8uLL).u64[0];
          float32x2_t v184 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 4uLL).u64[0];
          int8x8_t v185 = (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v340[0].i8), v179, *(float32x2_t *)v338.f32);
          *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v178), *(float32x2_t *)v340[0].i8, v183), 4uLL);
          v186.i64[1] = v185.u32[0];
          int8x8_t v187 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v180), v184, *(float32x2_t *)v339.f32);
          *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v339.f32), *(float32x2_t *)v338.f32, v177), 4uLL);
          v188.i64[1] = v187.u32[0];
          float32x4_t v189 = vmulq_f32(v182, v173);
          v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
          float32x2_t v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
          float32x4_t v191 = vmulq_f32(v186, v173);
          v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
          float32x2_t v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
          float32x4_t v193 = vmulq_f32(v188, v173);
          v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
          float32x2_t v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v192), (int8x8_t)vcgez_f32(v190)), (int8x8_t)vcgez_f32(v194)), 0), *(int8x8_t *)v338.f32).u32[0] != -1)
          {
            float32x4_t v195 = vnegq_f32(v338);
            v195.i32[3] = 0;
            float32x4_t v196 = vnegq_f32(v339);
            v196.i32[3] = 0;
            float32x4_t v197 = vmulq_f32(v195, v171);
            v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
            float32x2_t v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
            float32x4_t v199 = vmulq_f32(v171, v196);
            v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
            float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v198), (int8x8_t)vclez_f32(v200)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
            {
              float32x2_t v225 = vsub_f32(v198, v200);
              float32x2_t v226 = vrecpe_f32(v225);
              int v227 = 4;
              do
              {
                float32x2_t v226 = vmul_f32(v226, vrecps_f32(v225, v226));
                --v227;
              }
              while (v227);
              uint64_t v212 = 0;
              float32x4_t v45 = vmlaq_n_f32(v338, v171, vmul_f32(v198, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v225), (float32x2_t)0x3400000034000000), (int8x8_t)v226, 0)).f32[0]);
              v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
              unsigned int v228 = 2;
              uint64_t v211 = 1;
            }
            else
            {
              float32x4_t v201 = vnegq_f32((float32x4_t)v340[0]);
              v201.i32[3] = 0;
              float32x4_t v202 = vmulq_f32(v196, v172);
              v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
              float32x2_t v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
              float32x4_t v204 = vmulq_f32(v171, v201);
              v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
              float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
              float32x4_t v206 = vmulq_f32(v172, v201);
              v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
              float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v203, v200), (int8x8_t)vcge_f32(v205, v207)), (int8x8_t)vclez_f32(v190)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
              {
                float32x2_t v229 = vsub_f32(v203, v200);
                float32x2_t v230 = vadd_f32(v229, vsub_f32(v205, v207));
                float32x2_t v231 = vrecpe_f32(v230);
                int v232 = 4;
                do
                {
                  float32x2_t v231 = vmul_f32(v231, vrecps_f32(v230, v231));
                  --v232;
                }
                while (v232);
                int8x16_t v233 = (int8x16_t)vmlaq_n_f32(v339, vsubq_f32((float32x4_t)v340[0], v339), vmul_f32(v229, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v230), (float32x2_t)0x3400000034000000), (int8x8_t)v231, 0)).f32[0]);
                v233.i64[1] = vextq_s8(v233, v233, 8uLL).u32[0];
                uint64_t v211 = 2;
                float32x4_t v45 = (float32x4_t)v233;
                uint64_t v212 = 1;
              }
              else
              {
                float32x4_t v208 = vmulq_f32(v195, v172);
                v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
                float32x2_t v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v209), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v338.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v209), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v338.f32).u32[0] == -1)
                  {
                    uint64_t v212 = 0;
                    uint64_t v211 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v200, v203), (int8x8_t)vcgez_f32(v200)), 0);
                    *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
                    __int32 v210 = v45.i32[0];
                    float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v313), 0), (int8x16_t)v339, v340[0]);
                    uint64_t v211 = 1;
                    if (v210 == -1) {
                      uint64_t v212 = 1;
                    }
                    else {
                      uint64_t v212 = 2;
                    }
                  }
                  unsigned int v228 = 1;
                  goto LABEL_98;
                }
                float32x2_t v234 = vsub_f32(v209, v207);
                float32x2_t v235 = vrecpe_f32(v234);
                int v236 = 4;
                do
                {
                  float32x2_t v235 = vmul_f32(v235, vrecps_f32(v234, v235));
                  --v236;
                }
                while (v236);
                uint64_t v212 = 0;
                float32x4_t v45 = vmlaq_n_f32(v338, v172, vmul_f32(v209, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v234), (float32x2_t)0x3400000034000000), (int8x8_t)v235, 0)).f32[0]);
                v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
                uint64_t v211 = 2;
              }
              unsigned int v228 = 2;
            }
LABEL_98:
            float32x4_t v237 = *(&v338 + v212);
            float32x4_t v238 = *(&v338 + v211);
            float32x4_t v239 = *(&v335 + v212);
            float32x4_t v240 = *(&v335 + v211);
            float32x4_t v241 = *(&v332 + v212);
            float32x4_t v242 = *(&v332 + v211);
            int v243 = *(&v330 + v212);
            int v244 = *(&v330 + v211);
            int v245 = *(&v328 + v212);
            int v246 = *(&v328 + v211);
            float32x4_t v338 = v237;
            float32x4_t v339 = v238;
            float32x4_t v335 = v239;
            float32x4_t v336 = v240;
            float32x4_t v332 = v241;
            float32x4_t v333 = v242;
            int v330 = v243;
            int v331 = v244;
            int v328 = v245;
            int v329 = v246;
            unsigned int v324 = v228;
            break;
          }
          int8x16_t v220 = (int8x16_t)vmulq_f32(v338, v173);
          float32x2_t v221 = (float32x2_t)vextq_s8(v220, v220, 8uLL).u64[0];
          float32x2_t v222 = vrecpe_f32(v176);
          int v223 = 4;
          do
          {
            float32x2_t v222 = vmul_f32(v222, vrecps_f32(v176, v222));
            --v223;
          }
          while (v223);
          float32x2_t v224 = vpadd_f32(*(float32x2_t *)v220.i8, v221);
          float32x4_t v45 = vmulq_n_f32(v173, vmul_f32(v222, vpadd_f32(v224, v224)).f32[0]);
          v45.i32[3] = 0;
        }
        break;
      case 1:
        float32x4_t v45 = v338;
        float32x4_t v163 = vsubq_f32(v339, v338);
        float32x4_t v164 = vmulq_f32(v163, v163);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        float32x2_t v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v165), 0), *(int8x8_t *)v338.f32).u32[0] == -1)goto LABEL_81; {
        float32x4_t v166 = vnegq_f32(v338);
        }
        v166.i32[3] = 0;
        float32x4_t v167 = vmulq_f32(v166, v163);
        v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
        float32x2_t v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
        float32x2_t v169 = vrecpe_f32(v165);
        int v170 = 4;
        do
        {
          float32x2_t v169 = vmul_f32(v169, vrecps_f32(v165, v169));
          --v170;
        }
        while (v170);
        float32x4_t v45 = vmlaq_n_f32(v338, v163, vmax_f32(vmin_f32(vmul_f32(v168, v169), _D11), 0).f32[0]);
LABEL_80:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        break;
    }
    float32x4_t v247 = vmulq_f32(v45, v45);
    v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
    float32x2_t v248 = vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32);
    float32x2_t v249 = vrsqrte_f32(v248);
    int v250 = 4;
    do
    {
      float32x2_t v249 = vmul_f32(v249, vrsqrts_f32(vmul_f32(v249, v249), v248));
      --v250;
    }
    while (v250);
    float32x2_t v62 = vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v248), 0), (int8x8_t)_D11, (int8x8_t)v249));
    float32x2_t v251 = vrecpe_f32(v62);
    int v252 = 4;
    do
    {
      float32x2_t v251 = vmul_f32(v251, vrecps_f32(v62, v251));
      --v252;
    }
    while (v252);
    float32x4_t v253 = vmulq_n_f32(v45, v251.f32[0]);
    v253.i32[3] = 0;
    float32x4_t v320 = v253;
    *(int32x2_t *)v253.f32 = vcgt_f32(v162, v62);
    int32x4_t v148 = vdupq_lane_s32(*(int32x2_t *)v253.f32, 0);
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v62, v22), *(int8x8_t *)v253.f32), 0);
    float32x2_t v147 = v162;
  }
  int8x8_t v254 = (int8x8_t)vmovn_s32(vceqzq_s32(v148));
  uint64_t v255 = v324;
  if (vuzp1_s8(v254, v254).u32[0] == -1)
  {
    if (v11)
    {
      uint64_t v273 = v324 - 1;
      *a5 = v324 - 1;
      if (v255 == 1)
      {
LABEL_130:
        float32x4_t v278 = v335;
        float32x4_t v279 = v332;
        goto LABEL_141;
      }
      float32x2_t v274 = &v328;
      float32x4_t v275 = &v330;
      do
      {
        int v276 = *v275++;
        *v11++ = v276;
        int v277 = *v274++;
        *v10++ = v277;
        --v273;
      }
      while (v273);
    }
    float32x4_t v325 = v64;
    if (v255 == 3)
    {
      float32x2_t v326 = 0;
      float32x2_t v327 = 0;
      float32x4_t v323 = v64;
      physx::Gu::barycentricCoordinates(&v325, &v338, &v339, (float32x4_t *)v340, &v327, &v326);
      float32x4_t v295 = vmulq_n_f32(vsubq_f32(v336, v335), v327.f32[0]);
      v295.i32[3] = 0;
      float32x4_t v296 = vmulq_n_f32(vsubq_f32(v337, v335), v326.f32[0]);
      v296.i32[3] = 0;
      float32x4_t v297 = vaddq_f32(v295, v296);
      float32x4_t v298 = vmulq_n_f32(vsubq_f32(v333, v332), v327.f32[0]);
      v298.i32[3] = 0;
      float32x4_t v278 = vaddq_f32(v335, v297);
      float32x4_t v299 = vmulq_n_f32(vsubq_f32(v334, v332), v326.f32[0]);
      float32x4_t v64 = v323;
      v299.i32[3] = 0;
      float32x4_t v279 = vaddq_f32(v332, vaddq_f32(v298, v299));
    }
    else
    {
      if (v255 == 2)
      {
        float32x4_t v300 = vsubq_f32(v338, v64);
        float32x4_t v301 = vsubq_f32(vsubq_f32(v339, v64), v300);
        float32x4_t v302 = vmulq_f32(v301, v301);
        v302.i64[0] = vpaddq_f32(v302, v302).u64[0];
        float32x2_t v303 = vpadd_f32(*(float32x2_t *)v302.f32, *(float32x2_t *)v302.f32);
        float32x2_t v304 = vrecpe_f32(v303);
        int v305 = 4;
        do
        {
          float32x2_t v304 = vmul_f32(v304, vrecps_f32(v303, v304));
          --v305;
        }
        while (v305);
        float32x4_t v306 = vnegq_f32(v300);
        v306.i32[3] = 0;
        float32x4_t v307 = vmulq_f32(v306, v301);
        v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
        v306.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v303), (int8x8_t)v304, 0), vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32)).u32[0];
        float32x4_t v278 = vmlaq_n_f32(v335, vsubq_f32(v336, v335), v306.f32[0]);
        v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
        float32x4_t v279 = vmlaq_n_f32(v332, vsubq_f32(v333, v332), v306.f32[0]);
        v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        goto LABEL_141;
      }
      float32x4_t v278 = 0uLL;
      float32x4_t v279 = 0uLL;
      if (v255 == 1) {
        goto LABEL_130;
      }
    }
LABEL_141:
    float32x2_t v308 = vrecpe_f32(v147);
    int v309 = 4;
    do
    {
      float32x2_t v308 = vmul_f32(v308, vrecps_f32(v147, v308));
      --v309;
    }
    while (v309);
    float32x4_t v310 = vmulq_n_f32(v64, v308.f32[0]);
    v310.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v310;
    *(float32x4_t *)(a6 + 48) = v320;
    int8x16_t v311 = (int8x16_t)vmlsq_lane_f32(v278, v310, v315, 0);
    v311.i64[1] = vextq_s8(v311, v311, 8uLL).u32[0];
    int8x16_t v312 = (int8x16_t)vmlaq_n_f32(v279, v310, v316);
    v312.i64[1] = vextq_s8(v312, v312, 8uLL).u32[0];
    *(int8x16_t *)a6 = v311;
    *(int8x16_t *)(a6 + 16) = v312;
    *(float32x2_t *)(a6 + 64) = vsub_f32(v147, v317);
    if (vcge_f32(v317, v147).u8[0]) {
      return 2;
    }
    else {
      return 4;
    }
  }
  if (v11)
  {
    *a5 = v324;
    if (v255)
    {
      float32x4_t v256 = &v328;
      float32x4_t v257 = &v330;
      do
      {
        int v258 = *v257++;
        *v11++ = v258;
        int v259 = *v256++;
        *v10++ = v259;
        --v255;
      }
      while (v255);
    }
  }
  return 5;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, int8x8_t a10)
{
  float32x4_t v10 = a4;
  float32x4_t v11 = a3;
  uint64_t v347 = *MEMORY[0x263EF8340];
  uint64_t v14 = a1->i64[1];
  float32x4_t v15 = (const float *)(v14 + 20);
  float32x2_t v16 = vld1_dup_f32(v15);
  uint64_t v17 = *(float32x4_t **)(a2 + 8);
  float v18 = &v17[1].f32[1];
  float32x2_t v19 = vld1_dup_f32(v18);
  float32x2_t v20 = vmin_f32(v16, v19);
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v22 = vmul_f32(v20, v21);
  v20.i32[0] = *(_DWORD *)(v14 + 16);
  v21.i32[0] = v17[1].i32[0];
  a10.i32[0] = -*(char *)(v14 + 32);
  int32x2_t v23 = (int32x2_t)vand_s8(a10, (int8x8_t)v20);
  float32x2_t v24 = (float32x2_t)vdup_lane_s32(v23, 0);
  v23.i32[0] = -v17[2].i8[0];
  float32x2_t v25 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v23, (int8x8_t)v21), 0);
  float32x2_t v322 = v24;
  float v323 = v25.f32[0];
  float32x2_t v26 = vadd_f32(v24, v25);
  unsigned int v330 = 0;
  uint64_t v27 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v55 = vmulq_f32(a7, a7);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    float32x4_t v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v56 = vmulq_f32(v46, v46);
    v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
    float32x2_t v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
    float32x2_t v58 = vrsqrte_f32(v57);
    int v59 = 4;
    do
    {
      float32x2_t v58 = vmul_f32(v58, vrsqrts_f32(vmul_f32(v58, v58), v57));
      --v59;
    }
    while (v59);
    float32x2_t v60 = vmul_f32(v57, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v57), 0), (int8x8_t)_D11, (int8x8_t)v58));
    float32x2_t v61 = vrecpe_f32(v60);
    int v62 = 4;
    do
    {
      float32x2_t v61 = vmul_f32(v61, vrecps_f32(v60, v61));
      --v62;
    }
    while (v62);
    float32x4_t v63 = vmulq_n_f32(v46, v61.f32[0]);
    v63.i32[3] = 0;
    float32x4_t v326 = v63;
    float32x2_t v64 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v65.i64[0] = -1;
    v65.i64[1] = -1;
    float32x4_t v66 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v33 = 0;
  float v34 = (float32x4_t *)a1[1].i64[0];
  uint64_t v35 = v14 + 48;
  float32x4_t v36 = v17[3];
  int8x16_t v37 = (int8x16_t)vnegq_f32(v36);
  v37.i32[3] = 0;
  do
  {
    uint64_t v38 = a3[v33];
    *(&v336 + v33) = v38;
    uint64_t v39 = a4[v33];
    *(&v334 + v33) = v39;
    float32x4_t v40 = *(float32x4_t *)(v35 + 16 * (1 - v38));
    float32x4_t v41 = vmulq_n_f32(*v34, v40.f32[0]);
    v41.i32[3] = 0;
    float32x4_t v42 = vmulq_lane_f32(v34[1], *(float32x2_t *)v40.f32, 1);
    v42.i32[3] = 0;
    float32x4_t v43 = vmulq_laneq_f32(v34[2], v40, 2);
    v43.i32[3] = 0;
    float32x4_t v44 = vaddq_f32(v34[3], vaddq_f32(vaddq_f32(v41, v42), v43));
    float32x4_t v45 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v39], (int8x16_t)v36, v37);
    float32x4_t v46 = vsubq_f32(v44, v45);
    *(&v341 + v33) = v44;
    *(&v338 + v33) = v45;
    *(&v344 + v33++) = v46;
  }
  while (v27 != v33);
  unsigned int v330 = v27;
  switch(v33)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v344, &v341, &v338, &v336, &v334, (int *)&v330);
      goto LABEL_49;
    case 3:
      unsigned int v330 = 3;
      float32x4_t v46 = v344;
      float32x4_t v67 = vsubq_f32(v345, v344);
      float32x4_t v68 = vsubq_f32((float32x4_t)v346[0], v344);
      int8x8_t v70 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v67.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL), *(float32x2_t *)v68.f32);
      *(int8x8_t *)v69.f32 = vext_s8(v70, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), *(float32x2_t *)v68.f32), *(float32x2_t *)v67.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)), 4uLL);
      v70.i32[1] = 0;
      float32x2_t v71 = vpadd_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vmul_f32((float32x2_t)v70.u32[0], (float32x2_t)v70.u32[0]));
      float32x2_t v72 = vpadd_f32(v71, v71);
      if (v72.f32[0] > 0.00000011921)
      {
        if (v72.f32[0] == 0.0)
        {
          float32x4_t v46 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v69.u32[2] = v70;
          float32x2_t v73 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          float32x2_t v74 = (float32x2_t)vextq_s8(v346[0], v346[0], 8uLL).u64[0];
          float32x2_t v75 = (float32x2_t)vextq_s8(v346[0], v346[0], 4uLL).u64[0];
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v75), v76, *(float32x2_t *)v346[0].i8);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v73, *(float32x2_t *)v346[0].i8), *(float32x2_t *)v345.f32, v74), 4uLL);
          v78.i64[1] = v77.u32[0];
          float32x2_t v79 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          float32x2_t v80 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          int8x8_t v81 = (int8x8_t)vmls_f32(vmul_f32(v80, *(float32x2_t *)v346[0].i8), v75, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v74), *(float32x2_t *)v346[0].i8, v79), 4uLL);
          v82.i64[1] = v81.u32[0];
          int8x8_t v83 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v76), v80, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(v79, *(float32x2_t *)v345.f32), *(float32x2_t *)v344.f32, v73), 4uLL);
          v84.i64[1] = v83.u32[0];
          float32x4_t v85 = vmulq_f32(v78, v69);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          float32x4_t v87 = vmulq_f32(v82, v69);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          float32x2_t v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
          float32x4_t v89 = vmulq_f32(v84, v69);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v88), (int8x8_t)vcgez_f32(v86)), (int8x8_t)vcgez_f32(v90)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
          {
            int8x16_t v116 = (int8x16_t)vmulq_f32(v344, v69);
            float32x2_t v117 = (float32x2_t)vextq_s8(v116, v116, 8uLL).u64[0];
            float32x2_t v118 = vrecpe_f32(v72);
            int v119 = 4;
            do
            {
              float32x2_t v118 = vmul_f32(v118, vrecps_f32(v72, v118));
              --v119;
            }
            while (v119);
            float32x2_t v120 = vpadd_f32(*(float32x2_t *)v116.i8, v117);
            float32x4_t v46 = vmulq_n_f32(v69, vmul_f32(v118, vpadd_f32(v120, v120)).f32[0]);
            v46.i32[3] = 0;
          }
          else
          {
            float32x4_t v91 = vnegq_f32(v344);
            v91.i32[3] = 0;
            float32x4_t v92 = vnegq_f32(v345);
            v92.i32[3] = 0;
            float32x4_t v93 = vmulq_f32(v91, v67);
            v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
            float32x2_t v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
            float32x4_t v95 = vmulq_f32(v67, v92);
            v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
            float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v94), (int8x8_t)vclez_f32(v96)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
            {
              float32x2_t v121 = vsub_f32(v94, v96);
              float32x2_t v122 = vrecpe_f32(v121);
              int v123 = 4;
              do
              {
                float32x2_t v122 = vmul_f32(v122, vrecps_f32(v121, v122));
                --v123;
              }
              while (v123);
              uint64_t v108 = 0;
              float32x4_t v46 = vmlaq_n_f32(v344, v67, vmul_f32(v94, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v121), (float32x2_t)0x3400000034000000), (int8x8_t)v122, 0)).f32[0]);
              v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
              unsigned int v124 = 2;
              uint64_t v107 = 1;
            }
            else
            {
              float32x4_t v97 = vnegq_f32((float32x4_t)v346[0]);
              v97.i32[3] = 0;
              float32x4_t v98 = vmulq_f32(v92, v68);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              float32x4_t v100 = vmulq_f32(v67, v97);
              v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
              float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
              float32x4_t v102 = vmulq_f32(v68, v97);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v99, v96), (int8x8_t)vcge_f32(v101, v103)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
              {
                float32x2_t v125 = vsub_f32(v99, v96);
                float32x2_t v126 = vadd_f32(v125, vsub_f32(v101, v103));
                float32x2_t v127 = vrecpe_f32(v126);
                int v128 = 4;
                do
                {
                  float32x2_t v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                  --v128;
                }
                while (v128);
                int8x16_t v129 = (int8x16_t)vmlaq_n_f32(v345, vsubq_f32((float32x4_t)v346[0], v345), vmul_f32(v125, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                v129.i64[1] = vextq_s8(v129, v129, 8uLL).u32[0];
                unsigned int v124 = 2;
                uint64_t v108 = 1;
                uint64_t v107 = 2;
                float32x4_t v46 = (float32x4_t)v129;
              }
              else
              {
                float32x4_t v104 = vmulq_f32(v91, v68);
                int32x4_t v105 = (int32x4_t)vpaddq_f32(v104, v104);
                *(float32x2_t *)v105.i8 = vpadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v105.i8), (int8x8_t)vclez_f32(v103)), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                {
                  float32x2_t v130 = vsub_f32(*(float32x2_t *)v105.i8, v103);
                  float32x2_t v131 = vrecpe_f32(v130);
                  int v132 = 4;
                  do
                  {
                    float32x2_t v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                    --v132;
                  }
                  while (v132);
                  uint64_t v108 = 0;
                  float32x4_t v46 = vmlaq_n_f32(v344, v68, vmul_f32(*(float32x2_t *)v105.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
                  v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
                  uint64_t v107 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v105.i8), (int8x8_t)vclez_f32(v94)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                {
                  uint64_t v108 = 0;
                  uint64_t v107 = 1;
                }
                else
                {
                  *(int32x2_t *)v105.i8 = vcge_f32(v96, v99);
                  *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v105.i8, (int8x8_t)vcgez_f32(v96)), 0);
                  *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
                  v105.i32[0] = -1;
                  __int32 v106 = v46.i32[0];
                  float32x4_t v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v105), 0), (int8x16_t)v345, v346[0]);
                  uint64_t v107 = 1;
                  if (v106 == -1) {
                    uint64_t v108 = 1;
                  }
                  else {
                    uint64_t v108 = 2;
                  }
                }
                unsigned int v124 = v107;
              }
            }
            float32x4_t v133 = *(&v344 + v108);
            float32x4_t v134 = *(&v344 + v107);
            float32x4_t v135 = *(&v341 + v108);
            float32x4_t v136 = *(&v341 + v107);
            float32x4_t v137 = *(&v338 + v108);
            float32x4_t v138 = *(&v338 + v107);
            int v139 = *(&v336 + v108);
            int v140 = *(&v336 + v107);
            int v141 = *(&v334 + v108);
            int v142 = *(&v334 + v107);
            float32x4_t v344 = v133;
            float32x4_t v345 = v134;
            float32x4_t v341 = v135;
            float32x4_t v342 = v136;
            float32x4_t v338 = v137;
            float32x4_t v339 = v138;
            int v336 = v139;
            int v337 = v140;
            int v334 = v141;
            int v335 = v142;
            unsigned int v330 = v124;
          }
        }
        goto LABEL_49;
      }
      unsigned int v330 = 2;
      float32x4_t v109 = vmulq_f32(v67, v67);
      v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
      float32x2_t v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v110), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        float32x4_t v111 = vnegq_f32(v344);
        v111.i32[3] = 0;
        float32x4_t v112 = vmulq_f32(v111, v67);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        float32x2_t v113 = vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32);
        float32x2_t v114 = vrecpe_f32(v110);
        int v115 = 4;
        do
        {
          float32x2_t v114 = vmul_f32(v114, vrecps_f32(v110, v114));
          --v115;
        }
        while (v115);
        float32x4_t v46 = vmlaq_n_f32(v344, v67, vmax_f32(vmin_f32(vmul_f32(v113, v114), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v46 = v344;
      float32x4_t v47 = vsubq_f32(v345, v344);
      float32x4_t v48 = vmulq_f32(v47, v47);
      v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
      float32x2_t v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v49), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        float32x4_t v50 = vnegq_f32(v344);
        v50.i32[3] = 0;
        float32x4_t v51 = vmulq_f32(v50, v47);
        v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
        float32x2_t v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
        float32x2_t v53 = vrecpe_f32(v49);
        int v54 = 4;
        do
        {
          float32x2_t v53 = vmul_f32(v53, vrecps_f32(v49, v53));
          --v54;
        }
        while (v54);
        float32x4_t v46 = vmlaq_n_f32(v344, v47, vmax_f32(vmin_f32(vmul_f32(v52, v53), _D11), 0).f32[0]);
LABEL_31:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v330 = 1;
LABEL_49:
  float32x4_t v143 = vmulq_f32(v46, v46);
  v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
  float32x2_t v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
  float32x2_t v145 = vrsqrte_f32(v144);
  int v146 = 4;
  do
  {
    float32x2_t v145 = vmul_f32(v145, vrsqrts_f32(vmul_f32(v145, v145), v144));
    --v146;
  }
  while (v146);
  float32x2_t v64 = vmul_f32(v144, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v144), 0), (int8x8_t)_D11, (int8x8_t)v145));
  float32x2_t v147 = vrecpe_f32(v64);
  int v148 = 4;
  do
  {
    float32x2_t v147 = vmul_f32(v147, vrecps_f32(v64, v147));
    --v148;
  }
  while (v148);
  float32x4_t v149 = vmulq_n_f32(v46, v147.f32[0]);
  v149.i32[3] = 0;
  float32x4_t v326 = v149;
  int32x4_t v65 = vdupq_lane_s32(vcgt_f32(v64, v22), 0);
  float32x4_t v66 = v46;
LABEL_54:
  float32x2_t v150 = vadd_f32(v26, a8);
  long long v151 = xmmword_2343978C0;
  LODWORD(v151) = -1;
  int32x4_t v320 = (int32x4_t)v151;
  v152.i64[0] = -1;
  v152.i64[1] = -1;
  for (float32x2_t i = v64; ; float32x2_t i = v169)
  {
    float32x4_t v154 = v46;
    v155.i64[0] = -1;
    v155.i64[1] = -1;
    *(int16x4_t *)v155.i8 = vmovn_s32(vceqq_s32(v65, v155));
    if (vuzp1_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8).u32[0] != -1) {
      break;
    }
    float32x2_t v327 = v64;
    float32x4_t v328 = v154;
    float32x4_t v156 = vnegq_f32(v154);
    v156.i32[3] = 0;
    float32x4_t v331 = v156;
    uint64_t v157 = v330;
    *(double *)v158.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(a1, (float32x2_t *)&v331, &v336 + v330);
    float32x4_t v66 = v328;
    float32x4_t v159 = v158;
    float32x4_t v160 = *(float32x4_t **)(a2 + 8);
    int8x16_t v161 = (int8x16_t)vcgtzq_f32(v328);
    float32x4_t v162 = v326;
    int32x4_t v163 = (int32x4_t)vandq_s8(v161, (int8x16_t)xmmword_2343978C0);
    v163.i64[0] = vpaddq_s32(v163, v163).u64[0];
    *(&v334 + v157) = vpadd_s32(*(int32x2_t *)v163.i8, *(int32x2_t *)v163.i8).u8[0] & 7;
    float32x4_t v164 = v160[3];
    int8x16_t v165 = (int8x16_t)vnegq_f32(v164);
    v165.i32[3] = 0;
    float32x4_t v166 = (float32x4_t)vbslq_s8(v161, (int8x16_t)v164, v165);
    float32x4_t v46 = vsubq_f32(v159, v166);
    float32x4_t v167 = vmulq_f32(v326, v46);
    v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
    float32x2_t v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v168, v150)).u8[0] & 1) == 0)
    {
      if (v11)
      {
        *a5 = v157;
        if (v157)
        {
          int v268 = &v334;
          int v269 = &v336;
          do
          {
            int v270 = *v269++;
            *v11++ = v270;
            int v271 = *v268++;
            *v10++ = v271;
            --v157;
          }
          while (v157);
        }
      }
      return 0;
    }
    float32x2_t v169 = v327;
    if (v168.f32[0] > (float)(0.99977 * v327.f32[0]))
    {
      float32x4_t v331 = v328;
      if (v11)
      {
        *a5 = v157;
        if (v157)
        {
          float32x4_t v272 = &v334;
          uint64_t v273 = &v336;
          uint64_t v274 = v157;
          do
          {
            int v275 = *v273++;
            *v11++ = v275;
            int v276 = *v272++;
            *v10++ = v276;
            --v274;
          }
          while (v274);
          goto LABEL_119;
        }
        uint64_t v277 = a6;
        *(float32x4_t *)(a6 + 32) = v326;
        float32x4_t v278 = 0uLL;
        float32x4_t v279 = 0uLL;
      }
      else
      {
LABEL_119:
        uint64_t v277 = a6;
        *(float32x4_t *)(a6 + 32) = v326;
        if (v157 == 3)
        {
          float32x2_t v332 = 0;
          float32x2_t v333 = 0;
          physx::Gu::barycentricCoordinates(&v331, &v344, &v345, (float32x4_t *)v346, &v333, &v332);
          float32x4_t v162 = v326;
          float32x2_t v169 = v327;
          float32x4_t v287 = vmulq_n_f32(vsubq_f32(v342, v341), v333.f32[0]);
          v287.i32[3] = 0;
          float32x4_t v288 = vmulq_n_f32(vsubq_f32(v343, v341), v332.f32[0]);
          v288.i32[3] = 0;
          float32x4_t v289 = vaddq_f32(v287, v288);
          float32x4_t v290 = vmulq_n_f32(vsubq_f32(v339, v338), v333.f32[0]);
          v290.i32[3] = 0;
          float32x4_t v278 = vaddq_f32(v341, v289);
          float32x4_t v291 = vmulq_n_f32(vsubq_f32(v340, v338), v332.f32[0]);
          v291.i32[3] = 0;
          float32x4_t v279 = vaddq_f32(v338, vaddq_f32(v290, v291));
        }
        else if (v157 == 2)
        {
          float32x4_t v292 = vsubq_f32(v344, v328);
          float32x4_t v293 = vsubq_f32(vsubq_f32(v345, v328), v292);
          float32x4_t v294 = vmulq_f32(v293, v293);
          v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
          float32x2_t v295 = vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32);
          float32x2_t v296 = vrecpe_f32(v295);
          int v297 = 4;
          do
          {
            float32x2_t v296 = vmul_f32(v296, vrecps_f32(v295, v296));
            --v297;
          }
          while (v297);
          float32x4_t v298 = vnegq_f32(v292);
          v298.i32[3] = 0;
          float32x4_t v299 = vmulq_f32(v298, v293);
          v299.i64[0] = vpaddq_f32(v299, v299).u64[0];
          v298.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v295), (int8x8_t)v296, 0), vpadd_f32(*(float32x2_t *)v299.f32, *(float32x2_t *)v299.f32)).u32[0];
          float32x4_t v278 = vmlaq_n_f32(v341, vsubq_f32(v342, v341), v298.f32[0]);
          v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          float32x4_t v279 = vmlaq_n_f32(v338, vsubq_f32(v339, v338), v298.f32[0]);
          v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        }
        else
        {
          float32x4_t v278 = 0uLL;
          float32x4_t v279 = 0uLL;
          if (v157 == 1)
          {
            float32x4_t v278 = v341;
            float32x4_t v279 = v338;
          }
        }
      }
      int8x16_t v300 = (int8x16_t)vmlsq_lane_f32(v278, v162, v322, 0);
      v300.i64[1] = vextq_s8(v300, v300, 8uLL).u32[0];
      int8x16_t v301 = (int8x16_t)vmlaq_n_f32(v279, v162, v323);
      v301.i64[1] = vextq_s8(v301, v301, 8uLL).u32[0];
      *(int8x16_t *)uint64_t v277 = v300;
      *(int8x16_t *)(v277 + 16) = v301;
      *(float32x2_t *)(v277 + 64) = vsub_f32(v169, v26);
      return 2;
    }
    *(&v341 + v157) = v159;
    *(&v338 + v157) = v166;
    unsigned int v330 = v157 + 1;
    *(&v344 + v157) = v46;
    switch(v157)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v344, &v341, &v338, &v336, &v334, (int *)&v330);
        float32x2_t v169 = v327;
        float32x4_t v66 = v328;
        break;
      case 2:
        float32x4_t v46 = v344;
        float32x4_t v178 = vsubq_f32(v345, v344);
        float32x4_t v179 = vsubq_f32((float32x4_t)v346[0], v344);
        int8x8_t v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v178.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 4uLL), *(float32x2_t *)v179.f32);
        *(int8x8_t *)v180.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL), *(float32x2_t *)v179.f32), *(float32x2_t *)v178.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL)), 4uLL);
        v181.i32[1] = 0;
        unsigned int v330 = 3;
        float32x2_t v182 = vpadd_f32(vmul_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32), vmul_f32((float32x2_t)v181.u32[0], (float32x2_t)v181.u32[0]));
        float32x2_t v183 = vpadd_f32(v182, v182);
        if (v183.f32[0] <= 0.00000011921)
        {
          unsigned int v330 = 2;
          float32x4_t v220 = vmulq_f32(v178, v178);
          v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
          float32x2_t v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v221), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
          {
LABEL_81:
            unsigned int v330 = 1;
            break;
          }
          float32x4_t v222 = vnegq_f32(v344);
          v222.i32[3] = 0;
          float32x4_t v223 = vmulq_f32(v222, v178);
          v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
          float32x2_t v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
          float32x2_t v225 = vrecpe_f32(v221);
          int v226 = 4;
          do
          {
            float32x2_t v225 = vmul_f32(v225, vrecps_f32(v221, v225));
            --v226;
          }
          while (v226);
          float32x4_t v46 = vmlaq_n_f32(v344, v178, vmax_f32(vmin_f32(vmul_f32(v224, v225), _D11), 0).f32[0]);
          goto LABEL_80;
        }
        if (v183.f32[0] == 0.0)
        {
          float32x4_t v46 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v180.u32[2] = v181;
          float32x2_t v184 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          float32x2_t v185 = (float32x2_t)vextq_s8(v346[0], v346[0], 8uLL).u64[0];
          float32x2_t v186 = (float32x2_t)vextq_s8(v346[0], v346[0], 4uLL).u64[0];
          float32x2_t v187 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          int8x8_t v188 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v186), v187, *(float32x2_t *)v346[0].i8);
          *(int8x8_t *)v189.f32 = vext_s8(v188, (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v346[0].i8), *(float32x2_t *)v345.f32, v185), 4uLL);
          v189.i64[1] = v188.u32[0];
          float32x2_t v190 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          float32x2_t v191 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          int8x8_t v192 = (int8x8_t)vmls_f32(vmul_f32(v191, *(float32x2_t *)v346[0].i8), v186, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v193.f32 = vext_s8(v192, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v185), *(float32x2_t *)v346[0].i8, v190), 4uLL);
          v193.i64[1] = v192.u32[0];
          int8x8_t v194 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v187), v191, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v195.f32 = vext_s8(v194, (int8x8_t)vmls_f32(vmul_f32(v190, *(float32x2_t *)v345.f32), *(float32x2_t *)v344.f32, v184), 4uLL);
          v195.i64[1] = v194.u32[0];
          float32x4_t v196 = vmulq_f32(v189, v180);
          v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
          float32x2_t v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
          float32x4_t v198 = vmulq_f32(v193, v180);
          v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
          float32x2_t v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
          float32x4_t v200 = vmulq_f32(v195, v180);
          v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
          float32x2_t v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v199), (int8x8_t)vcgez_f32(v197)), (int8x8_t)vcgez_f32(v201)), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
          {
            float32x4_t v202 = vnegq_f32(v344);
            v202.i32[3] = 0;
            float32x4_t v203 = vnegq_f32(v345);
            v203.i32[3] = 0;
            float32x4_t v204 = vmulq_f32(v202, v178);
            v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
            float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
            float32x4_t v206 = vmulq_f32(v178, v203);
            v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
            float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v205), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v201)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
            {
              float32x2_t v232 = vsub_f32(v205, v207);
              float32x2_t v233 = vrecpe_f32(v232);
              int v234 = 4;
              do
              {
                float32x2_t v233 = vmul_f32(v233, vrecps_f32(v232, v233));
                --v234;
              }
              while (v234);
              uint64_t v219 = 0;
              float32x4_t v46 = vmlaq_n_f32(v344, v178, vmul_f32(v205, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
              v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
              unsigned int v235 = 2;
              uint64_t v218 = 1;
            }
            else
            {
              float32x4_t v208 = vnegq_f32((float32x4_t)v346[0]);
              v208.i32[3] = 0;
              float32x4_t v209 = vmulq_f32(v203, v179);
              v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
              float32x2_t v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
              float32x4_t v211 = vmulq_f32(v178, v208);
              v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
              float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
              float32x4_t v213 = vmulq_f32(v179, v208);
              v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
              float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v210, v207), (int8x8_t)vcge_f32(v212, v214)), (int8x8_t)vclez_f32(v197)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
              {
                float32x2_t v236 = vsub_f32(v210, v207);
                float32x2_t v237 = vadd_f32(v236, vsub_f32(v212, v214));
                float32x2_t v238 = vrecpe_f32(v237);
                int v239 = 4;
                do
                {
                  float32x2_t v238 = vmul_f32(v238, vrecps_f32(v237, v238));
                  --v239;
                }
                while (v239);
                int8x16_t v240 = (int8x16_t)vmlaq_n_f32(v345, vsubq_f32((float32x4_t)v346[0], v345), vmul_f32(v236, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v237), (float32x2_t)0x3400000034000000), (int8x8_t)v238, 0)).f32[0]);
                v240.i64[1] = vextq_s8(v240, v240, 8uLL).u32[0];
                uint64_t v218 = 2;
                float32x4_t v46 = (float32x4_t)v240;
                uint64_t v219 = 1;
              }
              else
              {
                float32x4_t v215 = vmulq_f32(v202, v179);
                v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
                float32x2_t v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v216), (int8x8_t)vclez_f32(v214)), (int8x8_t)vclez_f32(v199)), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v216), (int8x8_t)vclez_f32(v205)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                  {
                    uint64_t v219 = 0;
                    uint64_t v218 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v207, v210), (int8x8_t)vcgez_f32(v207)), 0);
                    *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
                    __int32 v217 = v46.i32[0];
                    float32x4_t v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v320), 0), (int8x16_t)v345, v346[0]);
                    uint64_t v218 = 1;
                    if (v217 == -1) {
                      uint64_t v219 = 1;
                    }
                    else {
                      uint64_t v219 = 2;
                    }
                  }
                  unsigned int v235 = 1;
                  goto LABEL_98;
                }
                float32x2_t v241 = vsub_f32(v216, v214);
                float32x2_t v242 = vrecpe_f32(v241);
                int v243 = 4;
                do
                {
                  float32x2_t v242 = vmul_f32(v242, vrecps_f32(v241, v242));
                  --v243;
                }
                while (v243);
                uint64_t v219 = 0;
                float32x4_t v46 = vmlaq_n_f32(v344, v179, vmul_f32(v216, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v241), (float32x2_t)0x3400000034000000), (int8x8_t)v242, 0)).f32[0]);
                v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
                uint64_t v218 = 2;
              }
              unsigned int v235 = 2;
            }
LABEL_98:
            float32x4_t v244 = *(&v344 + v219);
            float32x4_t v245 = *(&v344 + v218);
            float32x4_t v246 = *(&v341 + v219);
            float32x4_t v247 = *(&v341 + v218);
            float32x4_t v248 = *(&v338 + v219);
            float32x4_t v249 = *(&v338 + v218);
            int v250 = *(&v336 + v219);
            int v251 = *(&v336 + v218);
            int v252 = *(&v334 + v219);
            int v253 = *(&v334 + v218);
            float32x4_t v344 = v244;
            float32x4_t v345 = v245;
            float32x4_t v341 = v246;
            float32x4_t v342 = v247;
            float32x4_t v338 = v248;
            float32x4_t v339 = v249;
            int v336 = v250;
            int v337 = v251;
            int v334 = v252;
            int v335 = v253;
            unsigned int v330 = v235;
            break;
          }
          int8x16_t v227 = (int8x16_t)vmulq_f32(v344, v180);
          float32x2_t v228 = (float32x2_t)vextq_s8(v227, v227, 8uLL).u64[0];
          float32x2_t v229 = vrecpe_f32(v183);
          int v230 = 4;
          do
          {
            float32x2_t v229 = vmul_f32(v229, vrecps_f32(v183, v229));
            --v230;
          }
          while (v230);
          float32x2_t v231 = vpadd_f32(*(float32x2_t *)v227.i8, v228);
          float32x4_t v46 = vmulq_n_f32(v180, vmul_f32(v229, vpadd_f32(v231, v231)).f32[0]);
          v46.i32[3] = 0;
        }
        break;
      case 1:
        float32x4_t v46 = v344;
        float32x4_t v170 = vsubq_f32(v345, v344);
        float32x4_t v171 = vmulq_f32(v170, v170);
        v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
        float32x2_t v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v172), 0), *(int8x8_t *)v344.f32).u32[0] == -1)goto LABEL_81; {
        float32x4_t v173 = vnegq_f32(v344);
        }
        v173.i32[3] = 0;
        float32x4_t v174 = vmulq_f32(v173, v170);
        v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
        float32x2_t v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
        float32x2_t v176 = vrecpe_f32(v172);
        int v177 = 4;
        do
        {
          float32x2_t v176 = vmul_f32(v176, vrecps_f32(v172, v176));
          --v177;
        }
        while (v177);
        float32x4_t v46 = vmlaq_n_f32(v344, v170, vmax_f32(vmin_f32(vmul_f32(v175, v176), _D11), 0).f32[0]);
LABEL_80:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        break;
    }
    float32x4_t v254 = vmulq_f32(v46, v46);
    v254.i64[0] = vpaddq_f32(v254, v254).u64[0];
    float32x2_t v255 = vpadd_f32(*(float32x2_t *)v254.f32, *(float32x2_t *)v254.f32);
    float32x2_t v256 = vrsqrte_f32(v255);
    int v257 = 4;
    do
    {
      float32x2_t v256 = vmul_f32(v256, vrsqrts_f32(vmul_f32(v256, v256), v255));
      --v257;
    }
    while (v257);
    float32x2_t v64 = vmul_f32(v255, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v255), 0), (int8x8_t)_D11, (int8x8_t)v256));
    float32x2_t v258 = vrecpe_f32(v64);
    int v259 = 4;
    do
    {
      float32x2_t v258 = vmul_f32(v258, vrecps_f32(v64, v258));
      --v259;
    }
    while (v259);
    float32x4_t v260 = vmulq_n_f32(v46, v258.f32[0]);
    v260.i32[3] = 0;
    float32x4_t v326 = v260;
    *(int32x2_t *)v260.f32 = vcgt_f32(v169, v64);
    int32x4_t v152 = vdupq_lane_s32(*(int32x2_t *)v260.f32, 0);
    int32x4_t v65 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v64, v22), *(int8x8_t *)v260.f32), 0);
  }
  int8x8_t v261 = (int8x8_t)vmovn_s32(vceqzq_s32(v152));
  uint64_t v262 = v330;
  if (vuzp1_s8(v261, v261).u32[0] == -1)
  {
    if (v11)
    {
      uint64_t v280 = v330 - 1;
      *a5 = v330 - 1;
      if (v262 == 1)
      {
LABEL_130:
        float32x4_t v285 = v341;
        float32x4_t v286 = v338;
        goto LABEL_141;
      }
      float32x4_t v281 = &v334;
      float32x4_t v282 = &v336;
      do
      {
        int v283 = *v282++;
        *v11++ = v283;
        int v284 = *v281++;
        *v10++ = v284;
        --v280;
      }
      while (v280);
    }
    float32x4_t v331 = v66;
    if (v262 == 3)
    {
      float32x2_t v332 = 0;
      float32x2_t v333 = 0;
      float32x4_t v329 = v66;
      physx::Gu::barycentricCoordinates(&v331, &v344, &v345, (float32x4_t *)v346, &v333, &v332);
      float32x4_t v302 = vmulq_n_f32(vsubq_f32(v342, v341), v333.f32[0]);
      v302.i32[3] = 0;
      float32x4_t v303 = vmulq_n_f32(vsubq_f32(v343, v341), v332.f32[0]);
      v303.i32[3] = 0;
      float32x4_t v304 = vaddq_f32(v302, v303);
      float32x4_t v305 = vmulq_n_f32(vsubq_f32(v339, v338), v333.f32[0]);
      v305.i32[3] = 0;
      float32x4_t v285 = vaddq_f32(v341, v304);
      float32x4_t v306 = vmulq_n_f32(vsubq_f32(v340, v338), v332.f32[0]);
      float32x4_t v66 = v329;
      v306.i32[3] = 0;
      float32x4_t v286 = vaddq_f32(v338, vaddq_f32(v305, v306));
    }
    else
    {
      if (v262 == 2)
      {
        float32x4_t v307 = vsubq_f32(v344, v66);
        float32x4_t v308 = vsubq_f32(vsubq_f32(v345, v66), v307);
        float32x4_t v309 = vmulq_f32(v308, v308);
        v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
        float32x2_t v310 = vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32);
        float32x2_t v311 = vrecpe_f32(v310);
        int v312 = 4;
        do
        {
          float32x2_t v311 = vmul_f32(v311, vrecps_f32(v310, v311));
          --v312;
        }
        while (v312);
        float32x4_t v313 = vnegq_f32(v307);
        v313.i32[3] = 0;
        float32x4_t v314 = vmulq_f32(v313, v308);
        v314.i64[0] = vpaddq_f32(v314, v314).u64[0];
        v313.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v310), (int8x8_t)v311, 0), vpadd_f32(*(float32x2_t *)v314.f32, *(float32x2_t *)v314.f32)).u32[0];
        float32x4_t v285 = vmlaq_n_f32(v341, vsubq_f32(v342, v341), v313.f32[0]);
        v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
        float32x4_t v286 = vmlaq_n_f32(v338, vsubq_f32(v339, v338), v313.f32[0]);
        v286.i64[1] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u32[0];
        goto LABEL_141;
      }
      float32x4_t v285 = 0uLL;
      float32x4_t v286 = 0uLL;
      if (v262 == 1) {
        goto LABEL_130;
      }
    }
LABEL_141:
    float32x2_t v315 = vrecpe_f32(i);
    int v316 = 4;
    do
    {
      float32x2_t v315 = vmul_f32(v315, vrecps_f32(i, v315));
      --v316;
    }
    while (v316);
    float32x4_t v317 = vmulq_n_f32(v66, v315.f32[0]);
    v317.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v317;
    *(float32x4_t *)(a6 + 48) = v326;
    int8x16_t v318 = (int8x16_t)vmlsq_lane_f32(v285, v317, v322, 0);
    v318.i64[1] = vextq_s8(v318, v318, 8uLL).u32[0];
    int8x16_t v319 = (int8x16_t)vmlaq_n_f32(v286, v317, v323);
    v319.i64[1] = vextq_s8(v319, v319, 8uLL).u32[0];
    *(int8x16_t *)a6 = v318;
    *(int8x16_t *)(a6 + 16) = v319;
    *(float32x2_t *)(a6 + 64) = vsub_f32(i, v26);
    if (vcge_f32(v26, i).u8[0]) {
      return 2;
    }
    else {
      return 4;
    }
  }
  if (v11)
  {
    *a5 = v330;
    if (v262)
    {
      int v263 = &v334;
      int v264 = &v336;
      do
      {
        int v265 = *v264++;
        *v11++ = v265;
        int v266 = *v263++;
        *v10++ = v266;
        --v262;
      }
      while (v262);
    }
  }
  return 5;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10)
{
  uint64_t v347 = *MEMORY[0x263EF8340];
  uint64_t v15 = a1->i64[1];
  float32x2_t v16 = (const float *)(v15 + 20);
  float32x2_t v17 = vld1_dup_f32(v16);
  float v18 = *(float32x4_t **)(a2 + 8);
  float32x2_t v19 = &v18[1].f32[1];
  float32x2_t v20 = vld1_dup_f32(v19);
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v22 = vmin_f32(v17, v20);
  float32x2_t v23 = vmul_f32(v22, v21);
  v22.i32[0] = *(_DWORD *)(v15 + 16);
  v20.i32[0] = v18[1].i32[0];
  v21.i32[0] = -*(char *)(v15 + 32);
  int32x2_t v24 = (int32x2_t)vand_s8((int8x8_t)v21, (int8x8_t)v22);
  float32x2_t v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -v18[2].i8[0];
  float32x2_t v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v20), 0);
  float32x2_t v322 = v25;
  float v323 = v26.f32[0];
  float32x2_t v27 = vadd_f32(v25, v26);
  float32x4_t v332 = 0uLL;
  unsigned int v331 = 0;
  uint64_t v28 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v61 = vmulq_f32(a7, a7);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    float32x4_t v53 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v332 = v53;
    float32x4_t v62 = vmulq_f32(v53, v53);
    v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
    float32x2_t v63 = vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32);
    float32x2_t v64 = vrsqrte_f32(v63);
    int v65 = 4;
    do
    {
      float32x2_t v64 = vmul_f32(v64, vrsqrts_f32(vmul_f32(v64, v64), v63));
      --v65;
    }
    while (v65);
    float32x2_t v66 = vmul_f32(v63, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v63), 0), (int8x8_t)_D11, (int8x8_t)v64));
    float32x2_t v67 = vrecpe_f32(v66);
    int v68 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v66, v67);
      float32x2_t v67 = vmul_f32(v67, *(float32x2_t *)a10.f32);
      --v68;
    }
    while (v68);
    float32x4_t v69 = vmulq_n_f32(v53, v67.f32[0]);
    v69.i32[3] = 0;
    float32x4_t v327 = v69;
    float32x2_t v70 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v71.i64[0] = -1;
    v71.i64[1] = -1;
    float32x4_t v72 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v34 = 0;
  uint64_t v35 = (float32x4_t *)a1[1].i64[0];
  uint64_t v36 = v15 + 48;
  uint64_t v37 = v18[10].i64[0];
  float32x4_t v38 = v18[3];
  float32x4_t v39 = v18[4];
  a10 = v18[5];
  do
  {
    uint64_t v40 = a3[v34];
    *(&v336 + v34) = v40;
    unsigned int v41 = a4[v34];
    *(&v334 + v34) = v41;
    float32x4_t v42 = *(float32x4_t *)(v36 + 16 * (1 - v40));
    float32x4_t v43 = vmulq_n_f32(*v35, v42.f32[0]);
    v43.i32[3] = 0;
    float32x4_t v44 = vmulq_lane_f32(v35[1], *(float32x2_t *)v42.f32, 1);
    v44.i32[3] = 0;
    float32x4_t v45 = vmulq_laneq_f32(v35[2], v42, 2);
    v45.i32[3] = 0;
    float32x4_t v46 = vaddq_f32(vaddq_f32(v43, v44), v45);
    float32x4_t v47 = *(float32x4_t *)(v37 + 12 * v41);
    float32x4_t v48 = vmulq_n_f32(v38, v47.f32[0]);
    v48.i32[3] = 0;
    float32x4_t v49 = vmulq_lane_f32(v39, *(float32x2_t *)v47.f32, 1);
    v49.i32[3] = 0;
    float32x4_t v50 = vmulq_laneq_f32(a10, v47, 2);
    v50.i32[3] = 0;
    float32x4_t v51 = vaddq_f32(v35[3], v46);
    float32x4_t v52 = vaddq_f32(v50, vaddq_f32(v48, v49));
    float32x4_t v53 = vsubq_f32(v51, v52);
    *(&v341 + v34) = v51;
    *(&v338 + v34) = v52;
    *(&v344 + v34++) = v53;
  }
  while (v28 != v34);
  unsigned int v331 = v28;
  switch(v34)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v344, &v341, &v338, &v336, &v334, (int *)&v331);
      goto LABEL_49;
    case 3:
      unsigned int v331 = 3;
      float32x4_t v53 = v344;
      a10 = vsubq_f32(v345, v344);
      float32x4_t v73 = vsubq_f32(v346[0], v344);
      int8x8_t v75 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v73.f32);
      *(int8x8_t *)v74.f32 = vext_s8(v75, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v73.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), 4uLL);
      v75.i32[1] = 0;
      float32x2_t v76 = vpadd_f32(vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32), vmul_f32((float32x2_t)v75.u32[0], (float32x2_t)v75.u32[0]));
      float32x2_t v77 = vpadd_f32(v76, v76);
      if (v77.f32[0] > 0.00000011921)
      {
        if (v77.f32[0] == 0.0)
        {
          float32x4_t v53 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v74.u32[2] = v75;
          float32x2_t v78 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
          float32x2_t v79 = (float32x2_t)vextq_s8((int8x16_t)v346[0], (int8x16_t)v346[0], 8uLL).u64[0];
          float32x2_t v80 = (float32x2_t)vextq_s8((int8x16_t)v346[0], (int8x16_t)v346[0], 4uLL).u64[0];
          float32x2_t v81 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
          int8x8_t v82 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v80), v81, *(float32x2_t *)v346[0].f32);
          *(int8x8_t *)v83.f32 = vext_s8(v82, (int8x8_t)vmls_f32(vmul_f32(v78, *(float32x2_t *)v346[0].f32), *(float32x2_t *)v345.f32, v79), 4uLL);
          v83.i64[1] = v82.u32[0];
          float32x2_t v84 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          float32x2_t v85 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          int8x8_t v86 = (int8x8_t)vmls_f32(vmul_f32(v85, *(float32x2_t *)v346[0].f32), v80, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v87.f32 = vext_s8(v86, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v79), *(float32x2_t *)v346[0].f32, v84), 4uLL);
          v87.i64[1] = v86.u32[0];
          int8x8_t v88 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v81), v85, *(float32x2_t *)v345.f32);
          *(int8x8_t *)v89.f32 = vext_s8(v88, (int8x8_t)vmls_f32(vmul_f32(v84, *(float32x2_t *)v345.f32), *(float32x2_t *)v344.f32, v78), 4uLL);
          v89.i64[1] = v88.u32[0];
          float32x4_t v90 = vmulq_f32(v83, v74);
          v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
          float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
          float32x4_t v92 = vmulq_f32(v87, v74);
          v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
          float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
          float32x4_t v94 = vmulq_f32(v89, v74);
          v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
          float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v93), (int8x8_t)vcgez_f32(v91)), (int8x8_t)vcgez_f32(v95)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
          {
            int8x16_t v121 = (int8x16_t)vmulq_f32(v344, v74);
            float32x2_t v122 = (float32x2_t)vextq_s8(v121, v121, 8uLL).u64[0];
            float32x2_t v123 = vrecpe_f32(v77);
            int v124 = 4;
            do
            {
              float32x2_t v123 = vmul_f32(v123, vrecps_f32(v77, v123));
              --v124;
            }
            while (v124);
            float32x2_t v125 = vpadd_f32(*(float32x2_t *)v121.i8, v122);
            float32x4_t v53 = vmulq_n_f32(v74, vmul_f32(v123, vpadd_f32(v125, v125)).f32[0]);
            v53.i32[3] = 0;
          }
          else
          {
            float32x4_t v96 = vnegq_f32(v344);
            v96.i32[3] = 0;
            float32x4_t v97 = vnegq_f32(v345);
            v97.i32[3] = 0;
            float32x4_t v98 = vmulq_f32(v96, a10);
            v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
            float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
            float32x4_t v100 = vmulq_f32(a10, v97);
            v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
            float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v99), (int8x8_t)vclez_f32(v101)), (int8x8_t)vclez_f32(v95)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
            {
              float32x2_t v126 = vsub_f32(v99, v101);
              float32x2_t v127 = vrecpe_f32(v126);
              int v128 = 4;
              do
              {
                float32x2_t v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                --v128;
              }
              while (v128);
              uint64_t v113 = 0;
              float32x4_t v53 = vmlaq_n_f32(v344, a10, vmul_f32(v99, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
              v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
              unsigned int v129 = 2;
              uint64_t v112 = 1;
            }
            else
            {
              float32x4_t v102 = vnegq_f32(v346[0]);
              v102.i32[3] = 0;
              float32x4_t v103 = vmulq_f32(v97, v73);
              v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
              float32x2_t v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
              float32x4_t v105 = vmulq_f32(a10, v102);
              v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
              float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
              float32x4_t v107 = vmulq_f32(v73, v102);
              v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
              float32x2_t v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v104, v101), (int8x8_t)vcge_f32(v106, v108)), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
              {
                float32x2_t v130 = vsub_f32(v104, v101);
                float32x2_t v131 = vadd_f32(v130, vsub_f32(v106, v108));
                float32x2_t v132 = vrecpe_f32(v131);
                int v133 = 4;
                do
                {
                  float32x2_t v132 = vmul_f32(v132, vrecps_f32(v131, v132));
                  --v133;
                }
                while (v133);
                int8x16_t v134 = (int8x16_t)vmlaq_n_f32(v345, vsubq_f32(v346[0], v345), vmul_f32(v130, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v131), (float32x2_t)0x3400000034000000), (int8x8_t)v132, 0)).f32[0]);
                v134.i64[1] = vextq_s8(v134, v134, 8uLL).u32[0];
                unsigned int v129 = 2;
                uint64_t v113 = 1;
                uint64_t v112 = 2;
                float32x4_t v53 = (float32x4_t)v134;
              }
              else
              {
                float32x4_t v109 = vmulq_f32(v96, v73);
                int32x4_t v110 = (int32x4_t)vpaddq_f32(v109, v109);
                *(float32x2_t *)v110.i8 = vpadd_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v110.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v110.i8), (int8x8_t)vclez_f32(v108)), (int8x8_t)vclez_f32(v93)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                {
                  float32x2_t v135 = vsub_f32(*(float32x2_t *)v110.i8, v108);
                  float32x2_t v136 = vrecpe_f32(v135);
                  int v137 = 4;
                  do
                  {
                    float32x2_t v136 = vmul_f32(v136, vrecps_f32(v135, v136));
                    --v137;
                  }
                  while (v137);
                  uint64_t v113 = 0;
                  float32x4_t v53 = vmlaq_n_f32(v344, v73, vmul_f32(*(float32x2_t *)v110.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v135), (float32x2_t)0x3400000034000000), (int8x8_t)v136, 0)).f32[0]);
                  v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
                  uint64_t v112 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v110.i8), (int8x8_t)vclez_f32(v99)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
                {
                  uint64_t v113 = 0;
                  uint64_t v112 = 1;
                }
                else
                {
                  *(int32x2_t *)v110.i8 = vcge_f32(v101, v104);
                  *(int16x4_t *)v53.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v110.i8, (int8x8_t)vcgez_f32(v101)), 0);
                  *(int8x8_t *)v53.f32 = vuzp1_s8(*(int8x8_t *)v53.f32, *(int8x8_t *)v53.f32);
                  v110.i32[0] = -1;
                  __int32 v111 = v53.i32[0];
                  float32x4_t v53 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v53, v110), 0), (int8x16_t)v345, (int8x16_t)v346[0]);
                  uint64_t v112 = 1;
                  if (v111 == -1) {
                    uint64_t v113 = 1;
                  }
                  else {
                    uint64_t v113 = 2;
                  }
                }
                unsigned int v129 = v112;
              }
            }
            float32x4_t v138 = *(&v344 + v113);
            float32x4_t v139 = *(&v344 + v112);
            a10 = *(&v341 + v113);
            float32x4_t v140 = *(&v341 + v112);
            float32x4_t v141 = *(&v338 + v113);
            float32x4_t v142 = *(&v338 + v112);
            int v143 = *(&v336 + v113);
            int v144 = *(&v336 + v112);
            int v145 = *(&v334 + v113);
            int v146 = *(&v334 + v112);
            float32x4_t v344 = v138;
            float32x4_t v345 = v139;
            float32x4_t v341 = a10;
            float32x4_t v342 = v140;
            float32x4_t v338 = v141;
            float32x4_t v339 = v142;
            int v336 = v143;
            int v337 = v144;
            int v334 = v145;
            int v335 = v146;
            unsigned int v331 = v129;
          }
        }
        goto LABEL_49;
      }
      unsigned int v331 = 2;
      float32x4_t v114 = vmulq_f32(a10, a10);
      v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
      float32x2_t v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v115), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        float32x4_t v116 = vnegq_f32(v344);
        v116.i32[3] = 0;
        float32x4_t v117 = vmulq_f32(v116, a10);
        v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
        float32x2_t v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
        float32x2_t v119 = vrecpe_f32(v115);
        int v120 = 4;
        do
        {
          float32x2_t v119 = vmul_f32(v119, vrecps_f32(v115, v119));
          --v120;
        }
        while (v120);
        float32x4_t v53 = vmlaq_n_f32(v344, a10, vmax_f32(vmin_f32(vmul_f32(v118, v119), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v53 = v344;
      float32x4_t v54 = vsubq_f32(v345, v344);
      float32x4_t v55 = vmulq_f32(v54, v54);
      v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
      float32x2_t v56 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v56), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        float32x4_t v57 = vnegq_f32(v344);
        v57.i32[3] = 0;
        float32x4_t v58 = vmulq_f32(v57, v54);
        a10 = vpaddq_f32(v58, v58);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        float32x2_t v59 = vrecpe_f32(v56);
        int v60 = 4;
        do
        {
          float32x2_t v59 = vmul_f32(v59, vrecps_f32(v56, v59));
          --v60;
        }
        while (v60);
        float32x4_t v53 = vmlaq_n_f32(v344, v54, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v59), _D11), 0).f32[0]);
LABEL_31:
        v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v331 = 1;
LABEL_49:
  float32x4_t v332 = v53;
  float32x4_t v147 = vmulq_f32(v53, v53);
  v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
  float32x2_t v148 = vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32);
  float32x2_t v149 = vrsqrte_f32(v148);
  int v150 = 4;
  do
  {
    float32x2_t v149 = vmul_f32(v149, vrsqrts_f32(vmul_f32(v149, v149), v148));
    --v150;
  }
  while (v150);
  float32x2_t v70 = vmul_f32(v148, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v148), 0), (int8x8_t)_D11, (int8x8_t)v149));
  float32x2_t v151 = vrecpe_f32(v70);
  int v152 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v70, v151);
    float32x2_t v151 = vmul_f32(v151, *(float32x2_t *)a10.f32);
    --v152;
  }
  while (v152);
  float32x4_t v153 = vmulq_n_f32(v53, v151.f32[0]);
  v153.i32[3] = 0;
  float32x4_t v327 = v153;
  int32x4_t v71 = vdupq_lane_s32(vcgt_f32(v70, v23), 0);
  float32x4_t v72 = v53;
LABEL_54:
  float32x2_t v154 = vadd_f32(v27, a8);
  a10.i32[0] = -1;
  int32x4_t v320 = (int32x4_t)a10;
  v155.i64[0] = -1;
  v155.i64[1] = -1;
  for (float32x2_t i = v70; ; float32x2_t i = v167)
  {
    float32x4_t v157 = v53;
    v158.i64[0] = -1;
    v158.i64[1] = -1;
    *(int16x4_t *)v158.i8 = vmovn_s32(vceqq_s32(v71, v158));
    if (vuzp1_s8(*(int8x8_t *)v158.i8, *(int8x8_t *)v158.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v325 = v157;
    float32x4_t v159 = vnegq_f32(v157);
    v159.i32[3] = 0;
    float32x2_t v328 = v70;
    float32x4_t v330 = v159;
    uint64_t v160 = v331;
    *(double *)v161.i64 = physx::Gu::RelativeConvex<physx::Gu::CapsuleV>::support(a1, (float32x2_t *)&v330, &v336 + v331);
    float32x4_t v326 = v161;
    *(double *)v162.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v332, &v334 + v160);
    float32x4_t v163 = v327;
    float32x4_t v164 = v162;
    float32x4_t v53 = vsubq_f32(v326, v162);
    float32x4_t v165 = vmulq_f32(v327, v53);
    v165.i64[0] = vpaddq_f32(v165, v165).u64[0];
    float32x2_t v166 = vpadd_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v165.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v166, v154)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        uint64_t v267 = v331;
        *a5 = v331;
        if (v267)
        {
          int v268 = &v334;
          int v269 = &v336;
          do
          {
            int v270 = *v269++;
            *a3++ = v270;
            int v271 = *v268++;
            *a4++ = v271;
            --v267;
          }
          while (v267);
        }
      }
      return 0;
    }
    float32x2_t v167 = v328;
    uint64_t v168 = v331;
    if (v166.f32[0] > (float)(0.99977 * v328.f32[0]))
    {
      if (a3)
      {
        *a5 = v331;
        if (v168)
        {
          float32x4_t v272 = &v334;
          uint64_t v273 = &v336;
          uint64_t v274 = v168;
          do
          {
            int v275 = *v273++;
            *a3++ = v275;
            int v276 = *v272++;
            *a4++ = v276;
            --v274;
          }
          while (v274);
          goto LABEL_121;
        }
        uint64_t v277 = a6;
        *(float32x4_t *)(a6 + 32) = v327;
        float32x4_t v278 = 0uLL;
        float32x4_t v279 = 0uLL;
      }
      else
      {
LABEL_121:
        uint64_t v277 = a6;
        *(float32x4_t *)(a6 + 32) = v327;
        if (v168 == 3)
        {
          v330.i64[0] = 0;
          float32x2_t v333 = 0;
          physx::Gu::barycentricCoordinates(&v332, &v344, &v345, v346, (float32x2_t *)&v330, &v333);
          float32x4_t v163 = v327;
          float32x2_t v167 = v328;
          float32x4_t v287 = vmulq_n_f32(vsubq_f32(v342, v341), v330.f32[0]);
          v287.i32[3] = 0;
          float32x4_t v288 = vmulq_n_f32(vsubq_f32(v343, v341), v333.f32[0]);
          v288.i32[3] = 0;
          float32x4_t v289 = vaddq_f32(v287, v288);
          float32x4_t v290 = vmulq_n_f32(vsubq_f32(v339, v338), v330.f32[0]);
          v290.i32[3] = 0;
          float32x4_t v278 = vaddq_f32(v341, v289);
          float32x4_t v291 = vmulq_n_f32(vsubq_f32(v340, v338), v333.f32[0]);
          v291.i32[3] = 0;
          float32x4_t v279 = vaddq_f32(v338, vaddq_f32(v290, v291));
        }
        else if (v168 == 2)
        {
          float32x4_t v292 = vsubq_f32(v344, v332);
          float32x4_t v293 = vsubq_f32(vsubq_f32(v345, v332), v292);
          float32x4_t v294 = vmulq_f32(v293, v293);
          v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
          float32x2_t v295 = vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32);
          float32x2_t v296 = vrecpe_f32(v295);
          int v297 = 4;
          do
          {
            float32x2_t v296 = vmul_f32(v296, vrecps_f32(v295, v296));
            --v297;
          }
          while (v297);
          float32x4_t v298 = vnegq_f32(v292);
          v298.i32[3] = 0;
          float32x4_t v299 = vmulq_f32(v298, v293);
          v299.i64[0] = vpaddq_f32(v299, v299).u64[0];
          v298.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v295), (int8x8_t)v296, 0), vpadd_f32(*(float32x2_t *)v299.f32, *(float32x2_t *)v299.f32)).u32[0];
          float32x4_t v278 = vmlaq_n_f32(v341, vsubq_f32(v342, v341), v298.f32[0]);
          v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          float32x4_t v279 = vmlaq_n_f32(v338, vsubq_f32(v339, v338), v298.f32[0]);
          v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        }
        else
        {
          float32x4_t v278 = 0uLL;
          float32x4_t v279 = 0uLL;
          if (v168 == 1)
          {
            float32x4_t v278 = v341;
            float32x4_t v279 = v338;
          }
        }
      }
      int8x16_t v300 = (int8x16_t)vmlsq_lane_f32(v278, v163, v322, 0);
      v300.i64[1] = vextq_s8(v300, v300, 8uLL).u32[0];
      int8x16_t v301 = (int8x16_t)vmlaq_n_f32(v279, v163, v323);
      v301.i64[1] = vextq_s8(v301, v301, 8uLL).u32[0];
      *(int8x16_t *)uint64_t v277 = v300;
      *(int8x16_t *)(v277 + 16) = v301;
      *(float32x2_t *)(v277 + 64) = vsub_f32(v167, v27);
      return 2;
    }
    *(&v341 + v331) = v326;
    *(&v338 + v168) = v164;
    unsigned int v331 = v168 + 1;
    *(&v344 + v168) = v53;
    if (v168 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v344, &v341, &v338, &v336, &v334, (int *)&v331);
      float32x2_t v167 = v328;
LABEL_66:
      float32x4_t v72 = v325;
      goto LABEL_101;
    }
    if (v168 == 2)
    {
      float32x4_t v53 = v344;
      float32x4_t v177 = vsubq_f32(v345, v344);
      float32x4_t v178 = vsubq_f32(v346[0], v344);
      int8x8_t v180 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v177.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v177, (int8x16_t)v177, 4uLL), *(float32x2_t *)v178.f32);
      *(int8x8_t *)v179.f32 = vext_s8(v180, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL), *(float32x2_t *)v178.f32), *(float32x2_t *)v177.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL)), 4uLL);
      v180.i32[1] = 0;
      unsigned int v331 = 3;
      float32x2_t v181 = vpadd_f32(vmul_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32), vmul_f32((float32x2_t)v180.u32[0], (float32x2_t)v180.u32[0]));
      float32x2_t v182 = vpadd_f32(v181, v181);
      if (v182.f32[0] <= 0.00000011921)
      {
        unsigned int v331 = 2;
        float32x4_t v219 = vmulq_f32(v177, v177);
        v219.i64[0] = vpaddq_f32(v219, v219).u64[0];
        float32x2_t v220 = vpadd_f32(*(float32x2_t *)v219.f32, *(float32x2_t *)v219.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v220), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
        {
          float32x4_t v221 = vnegq_f32(v344);
          v221.i32[3] = 0;
          float32x4_t v222 = vmulq_f32(v221, v177);
          v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
          float32x2_t v223 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
          float32x2_t v224 = vrecpe_f32(v220);
          int v225 = 4;
          float32x4_t v72 = v325;
          do
          {
            float32x2_t v224 = vmul_f32(v224, vrecps_f32(v220, v224));
            --v225;
          }
          while (v225);
          float32x4_t v53 = vmlaq_n_f32(v344, v177, vmax_f32(vmin_f32(vmul_f32(v223, v224), _D11), 0).f32[0]);
LABEL_81:
          v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v331 = 1;
        goto LABEL_66;
      }
      if (v182.f32[0] == 0.0)
      {
        float32x4_t v53 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v179.u32[2] = v180;
      float32x2_t v183 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
      float32x2_t v184 = (float32x2_t)vextq_s8((int8x16_t)v346[0], (int8x16_t)v346[0], 8uLL).u64[0];
      float32x2_t v185 = (float32x2_t)vextq_s8((int8x16_t)v346[0], (int8x16_t)v346[0], 4uLL).u64[0];
      float32x2_t v186 = (float32x2_t)vextq_s8((int8x16_t)v345, (int8x16_t)v345, 4uLL).u64[0];
      int8x8_t v187 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v345.f32, v185), v186, *(float32x2_t *)v346[0].f32);
      *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v346[0].f32), *(float32x2_t *)v345.f32, v184), 4uLL);
      v188.i64[1] = v187.u32[0];
      float32x2_t v189 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
      float32x2_t v190 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
      int8x8_t v191 = (int8x8_t)vmls_f32(vmul_f32(v190, *(float32x2_t *)v346[0].f32), v185, *(float32x2_t *)v344.f32);
      *(int8x8_t *)v192.f32 = vext_s8(v191, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v184), *(float32x2_t *)v346[0].f32, v189), 4uLL);
      v192.i64[1] = v191.u32[0];
      int8x8_t v193 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v186), v190, *(float32x2_t *)v345.f32);
      *(int8x8_t *)v194.f32 = vext_s8(v193, (int8x8_t)vmls_f32(vmul_f32(v189, *(float32x2_t *)v345.f32), *(float32x2_t *)v344.f32, v183), 4uLL);
      v194.i64[1] = v193.u32[0];
      float32x4_t v195 = vmulq_f32(v188, v179);
      v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
      float32x2_t v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
      float32x4_t v197 = vmulq_f32(v192, v179);
      v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
      float32x2_t v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
      float32x4_t v199 = vmulq_f32(v194, v179);
      v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
      float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v198), (int8x8_t)vcgez_f32(v196)), (int8x8_t)vcgez_f32(v200)), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
      {
        float32x4_t v201 = vnegq_f32(v344);
        v201.i32[3] = 0;
        float32x4_t v202 = vnegq_f32(v345);
        v202.i32[3] = 0;
        float32x4_t v203 = vmulq_f32(v201, v177);
        v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
        float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
        float32x4_t v205 = vmulq_f32(v177, v202);
        v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
        float32x2_t v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v204), (int8x8_t)vclez_f32(v206)), (int8x8_t)vclez_f32(v200)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
        {
          float32x2_t v231 = vsub_f32(v204, v206);
          float32x2_t v232 = vrecpe_f32(v231);
          int v233 = 4;
          do
          {
            float32x2_t v232 = vmul_f32(v232, vrecps_f32(v231, v232));
            --v233;
          }
          while (v233);
          uint64_t v218 = 0;
          float32x4_t v53 = vmlaq_n_f32(v344, v177, vmul_f32(v204, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v231), (float32x2_t)0x3400000034000000), (int8x8_t)v232, 0)).f32[0]);
          v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
          unsigned int v234 = 2;
          uint64_t v217 = 1;
        }
        else
        {
          float32x4_t v207 = vnegq_f32(v346[0]);
          v207.i32[3] = 0;
          float32x4_t v208 = vmulq_f32(v202, v178);
          v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
          float32x2_t v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
          float32x4_t v210 = vmulq_f32(v177, v207);
          v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
          float32x2_t v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
          float32x4_t v212 = vmulq_f32(v178, v207);
          v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
          float32x2_t v213 = vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v209, v206), (int8x8_t)vcge_f32(v211, v213)), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v344.f32).u32[0] != -1)
          {
            float32x4_t v214 = vmulq_f32(v201, v178);
            v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
            float32x2_t v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v215), (int8x8_t)vclez_f32(v213)), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
            {
              float32x2_t v240 = vsub_f32(v215, v213);
              float32x2_t v241 = vrecpe_f32(v240);
              int v242 = 4;
              float32x4_t v72 = v325;
              do
              {
                float32x2_t v241 = vmul_f32(v241, vrecps_f32(v240, v241));
                --v242;
              }
              while (v242);
              uint64_t v218 = 0;
              float32x4_t v53 = vmlaq_n_f32(v344, v178, vmul_f32(v215, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v240), (float32x2_t)0x3400000034000000), (int8x8_t)v241, 0)).f32[0]);
              v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
              uint64_t v217 = 2;
              unsigned int v234 = 2;
            }
            else
            {
              float32x4_t v72 = v325;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v215), (int8x8_t)vclez_f32(v204)), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
              {
                uint64_t v218 = 0;
                uint64_t v217 = 1;
              }
              else
              {
                *(int16x4_t *)v53.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v206, v209), (int8x8_t)vcgez_f32(v206)), 0);
                *(int8x8_t *)v53.f32 = vuzp1_s8(*(int8x8_t *)v53.f32, *(int8x8_t *)v53.f32);
                __int32 v216 = v53.i32[0];
                float32x4_t v53 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v53, v320), 0), (int8x16_t)v345, (int8x16_t)v346[0]);
                uint64_t v217 = 1;
                if (v216 == -1) {
                  uint64_t v218 = 1;
                }
                else {
                  uint64_t v218 = 2;
                }
              }
              unsigned int v234 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v235 = vsub_f32(v209, v206);
          float32x2_t v236 = vadd_f32(v235, vsub_f32(v211, v213));
          float32x2_t v237 = vrecpe_f32(v236);
          int v238 = 4;
          do
          {
            float32x2_t v237 = vmul_f32(v237, vrecps_f32(v236, v237));
            --v238;
          }
          while (v238);
          int8x16_t v239 = (int8x16_t)vmlaq_n_f32(v345, vsubq_f32(v346[0], v345), vmul_f32(v235, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v236), (float32x2_t)0x3400000034000000), (int8x8_t)v237, 0)).f32[0]);
          v239.i64[1] = vextq_s8(v239, v239, 8uLL).u32[0];
          uint64_t v217 = 2;
          float32x4_t v53 = (float32x4_t)v239;
          uint64_t v218 = 1;
          unsigned int v234 = 2;
        }
        float32x4_t v72 = v325;
LABEL_100:
        float32x4_t v243 = *(&v344 + v218);
        float32x4_t v244 = *(&v344 + v217);
        float32x4_t v245 = *(&v341 + v218);
        float32x4_t v246 = *(&v341 + v217);
        float32x4_t v247 = *(&v338 + v218);
        float32x4_t v248 = *(&v338 + v217);
        int v249 = *(&v336 + v218);
        int v250 = *(&v336 + v217);
        int v251 = *(&v334 + v218);
        int v252 = *(&v334 + v217);
        float32x4_t v344 = v243;
        float32x4_t v345 = v244;
        float32x4_t v341 = v245;
        float32x4_t v342 = v246;
        float32x4_t v338 = v247;
        float32x4_t v339 = v248;
        int v336 = v249;
        int v337 = v250;
        int v334 = v251;
        int v335 = v252;
        unsigned int v331 = v234;
        goto LABEL_101;
      }
      int8x16_t v226 = (int8x16_t)vmulq_f32(v344, v179);
      float32x2_t v227 = (float32x2_t)vextq_s8(v226, v226, 8uLL).u64[0];
      float32x2_t v228 = vrecpe_f32(v182);
      int v229 = 4;
      float32x4_t v72 = v325;
      do
      {
        float32x2_t v228 = vmul_f32(v228, vrecps_f32(v182, v228));
        --v229;
      }
      while (v229);
      float32x2_t v230 = vpadd_f32(*(float32x2_t *)v226.i8, v227);
      float32x4_t v53 = vmulq_n_f32(v179, vmul_f32(v228, vpadd_f32(v230, v230)).f32[0]);
      v53.i32[3] = 0;
    }
    else
    {
      float32x4_t v72 = v325;
      if (v168 == 1)
      {
        float32x4_t v53 = v344;
        float32x4_t v169 = vsubq_f32(v345, v344);
        float32x4_t v170 = vmulq_f32(v169, v169);
        v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
        float32x2_t v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v171), 0), *(int8x8_t *)v344.f32).u32[0] == -1)
        {
          unsigned int v331 = 1;
          goto LABEL_101;
        }
        float32x4_t v172 = vnegq_f32(v344);
        v172.i32[3] = 0;
        float32x4_t v173 = vmulq_f32(v172, v169);
        v173.i64[0] = vpaddq_f32(v173, v173).u64[0];
        float32x2_t v174 = vpadd_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32);
        float32x2_t v175 = vrecpe_f32(v171);
        int v176 = 4;
        do
        {
          float32x2_t v175 = vmul_f32(v175, vrecps_f32(v171, v175));
          --v176;
        }
        while (v176);
        float32x4_t v53 = vmlaq_n_f32(v344, v169, vmax_f32(vmin_f32(vmul_f32(v174, v175), _D11), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v332 = v53;
    float32x4_t v253 = vmulq_f32(v53, v53);
    v253.i64[0] = vpaddq_f32(v253, v253).u64[0];
    float32x2_t v254 = vpadd_f32(*(float32x2_t *)v253.f32, *(float32x2_t *)v253.f32);
    float32x2_t v255 = vrsqrte_f32(v254);
    int v256 = 4;
    do
    {
      float32x2_t v255 = vmul_f32(v255, vrsqrts_f32(vmul_f32(v255, v255), v254));
      --v256;
    }
    while (v256);
    float32x2_t v70 = vmul_f32(v254, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v254), 0), (int8x8_t)_D11, (int8x8_t)v255));
    float32x2_t v257 = vrecpe_f32(v70);
    int v258 = 4;
    do
    {
      float32x2_t v257 = vmul_f32(v257, vrecps_f32(v70, v257));
      --v258;
    }
    while (v258);
    float32x4_t v259 = vmulq_n_f32(v53, v257.f32[0]);
    v259.i32[3] = 0;
    float32x4_t v327 = v259;
    *(int32x2_t *)v259.f32 = vcgt_f32(v167, v70);
    int32x4_t v155 = vdupq_lane_s32(*(int32x2_t *)v259.f32, 0);
    int32x4_t v71 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v70, v23), *(int8x8_t *)v259.f32), 0);
  }
  int8x8_t v260 = (int8x8_t)vmovn_s32(vceqzq_s32(v155));
  uint64_t v261 = v331;
  if (vuzp1_s8(v260, v260).u32[0] == -1)
  {
    if (a3)
    {
      uint64_t v280 = v331 - 1;
      *a5 = v331 - 1;
      if (v261 == 1)
      {
LABEL_132:
        float32x4_t v285 = v341;
        float32x4_t v286 = v338;
        goto LABEL_143;
      }
      float32x4_t v281 = &v334;
      float32x4_t v282 = &v336;
      do
      {
        int v283 = *v282++;
        *a3++ = v283;
        int v284 = *v281++;
        *a4++ = v284;
        --v280;
      }
      while (v280);
    }
    float32x4_t v332 = v72;
    if (v261 == 3)
    {
      v330.i64[0] = 0;
      float32x2_t v333 = 0;
      float32x4_t v329 = v72;
      physx::Gu::barycentricCoordinates(&v332, &v344, &v345, v346, (float32x2_t *)&v330, &v333);
      float32x4_t v302 = vmulq_n_f32(vsubq_f32(v342, v341), v330.f32[0]);
      v302.i32[3] = 0;
      float32x4_t v303 = vmulq_n_f32(vsubq_f32(v343, v341), v333.f32[0]);
      v303.i32[3] = 0;
      float32x4_t v304 = vaddq_f32(v302, v303);
      float32x4_t v305 = vmulq_n_f32(vsubq_f32(v339, v338), v330.f32[0]);
      v305.i32[3] = 0;
      float32x4_t v285 = vaddq_f32(v341, v304);
      float32x4_t v306 = vmulq_n_f32(vsubq_f32(v340, v338), v333.f32[0]);
      float32x4_t v72 = v329;
      v306.i32[3] = 0;
      float32x4_t v286 = vaddq_f32(v338, vaddq_f32(v305, v306));
    }
    else
    {
      if (v261 == 2)
      {
        float32x4_t v307 = vsubq_f32(v344, v72);
        float32x4_t v308 = vsubq_f32(vsubq_f32(v345, v72), v307);
        float32x4_t v309 = vmulq_f32(v308, v308);
        v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
        float32x2_t v310 = vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32);
        float32x2_t v311 = vrecpe_f32(v310);
        int v312 = 4;
        do
        {
          float32x2_t v311 = vmul_f32(v311, vrecps_f32(v310, v311));
          --v312;
        }
        while (v312);
        float32x4_t v313 = vnegq_f32(v307);
        v313.i32[3] = 0;
        float32x4_t v314 = vmulq_f32(v313, v308);
        v314.i64[0] = vpaddq_f32(v314, v314).u64[0];
        v313.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v310), (int8x8_t)v311, 0), vpadd_f32(*(float32x2_t *)v314.f32, *(float32x2_t *)v314.f32)).u32[0];
        float32x4_t v285 = vmlaq_n_f32(v341, vsubq_f32(v342, v341), v313.f32[0]);
        v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
        float32x4_t v286 = vmlaq_n_f32(v338, vsubq_f32(v339, v338), v313.f32[0]);
        v286.i64[1] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u32[0];
        goto LABEL_143;
      }
      float32x4_t v285 = 0uLL;
      float32x4_t v286 = 0uLL;
      if (v261 == 1) {
        goto LABEL_132;
      }
    }
LABEL_143:
    float32x2_t v315 = vrecpe_f32(i);
    int v316 = 4;
    do
    {
      float32x2_t v315 = vmul_f32(v315, vrecps_f32(i, v315));
      --v316;
    }
    while (v316);
    float32x4_t v317 = vmulq_n_f32(v72, v315.f32[0]);
    v317.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v317;
    *(float32x4_t *)(a6 + 48) = v327;
    int8x16_t v318 = (int8x16_t)vmlsq_lane_f32(v285, v317, v322, 0);
    v318.i64[1] = vextq_s8(v318, v318, 8uLL).u32[0];
    int8x16_t v319 = (int8x16_t)vmlaq_n_f32(v286, v317, v323);
    v319.i64[1] = vextq_s8(v319, v319, 8uLL).u32[0];
    *(int8x16_t *)a6 = v318;
    *(int8x16_t *)(a6 + 16) = v319;
    *(float32x2_t *)(a6 + 64) = vsub_f32(i, v27);
    if (vcge_f32(v27, i).u8[0]) {
      return 2;
    }
    else {
      return 4;
    }
  }
  if (a3)
  {
    *a5 = v331;
    if (v261)
    {
      uint64_t v262 = &v334;
      int v263 = &v336;
      do
      {
        int v264 = *v263++;
        *a3++ = v264;
        int v265 = *v262++;
        *a4++ = v265;
        --v261;
      }
      while (v261);
    }
  }
  return 5;
}

double physx::Gu::RelativeConvex<physx::Gu::TriangleV>::supportPoint(uint64_t a1, int a2)
{
  float32x4_t v2 = *(float32x4_t **)(a1 + 16);
  float32x4_t v3 = *(float32x4_t *)(*(void *)(a1 + 8) + 16 * a2 + 48);
  float32x4_t v4 = vmulq_n_f32(*v2, v3.f32[0]);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_lane_f32(v2[1], *(float32x2_t *)v3.f32, 1);
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_laneq_f32(v2[2], v3, 2);
  v6.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v2[3], vaddq_f32(vaddq_f32(v4, v5), v6)).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(float32x4_t *a1, float32x2_t *a2)
{
  float32x4_t v2 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v2.i32[3] = 0;
  float32x4_t v3 = vmulq_lane_f32(a1[3], *a2, 1);
  v3.i32[3] = 0;
  float32x4_t v4 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v4.i32[3] = 0;
  float32x4_t v5 = (float32x4_t *)a1->i64[1];
  float32x4_t v6 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v7 = vaddq_f32(vaddq_f32(v2, v3), v4);
  float32x4_t v8 = v5[3];
  float32x4_t v9 = v5[4];
  float32x4_t v10 = v5[5];
  float32x4_t v11 = vmulq_f32(v8, v7);
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  *(float32x2_t *)v11.f32 = vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32);
  float32x4_t v12 = vmulq_f32(v9, v7);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  *(float32x2_t *)v12.f32 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
  float32x4_t v13 = vmulq_f32(v10, v7);
  v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
  *(float32x2_t *)v13.f32 = vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32);
  float32x4_t v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v13.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.f32)), 0), (int8x16_t)v8, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32), 0), (int8x16_t)v9, (int8x16_t)v10));
  float32x4_t v15 = vmulq_n_f32(*v6, v14.f32[0]);
  v15.i32[3] = 0;
  float32x4_t v16 = vmulq_lane_f32(v6[1], *(float32x2_t *)v14.f32, 1);
  v16.i32[3] = 0;
  float32x4_t v17 = vmulq_laneq_f32(v6[2], v14, 2);
  v17.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v6[3], vaddq_f32(v17, vaddq_f32(v15, v16))).u64[0];
  return result;
}

double physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(float32x4_t *a1, float32x2_t *a2, unsigned __int32 *a3)
{
  float32x4_t v4 = (float32x4_t *)a1->i64[1];
  float32x4_t v3 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v5 = vmulq_n_f32(a1[2], COERCE_FLOAT(*(_OWORD *)a2->f32));
  v5.i32[3] = 0;
  float32x4_t v6 = vmulq_lane_f32(a1[3], *a2, 1);
  v6.i32[3] = 0;
  float32x4_t v7 = vmulq_laneq_f32(a1[4], *(float32x4_t *)a2->f32, 2);
  v7.i32[3] = 0;
  float32x4_t v8 = vaddq_f32(vaddq_f32(v5, v6), v7);
  float32x4_t v9 = v4[3];
  float32x4_t v10 = v4[4];
  float32x4_t v11 = v4[5];
  float32x4_t v12 = vmulq_f32(v9, v8);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  *(float32x2_t *)v12.f32 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
  float32x4_t v13 = vmulq_f32(v10, v8);
  v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
  *(float32x2_t *)v13.f32 = vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32);
  float32x4_t v14 = vmulq_f32(v11, v8);
  int8x16_t v15 = (int8x16_t)vpaddq_f32(v14, v14);
  *(float32x2_t *)v15.i8 = vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8);
  *(int8x8_t *)v12.f32 = vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v15.i8), (int8x8_t)vcgt_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32));
  *(int32x2_t *)v15.i8 = vcgt_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v15.i8);
  int8x16_t v16 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v15.i8, 0);
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  int8x16_t v18 = vandq_s8(v15, v17);
  v17.i64[0] = 0x200000002;
  v17.i64[1] = 0x200000002;
  *a3 = vorrq_s8(v18, vbicq_s8(v17, v16)).u32[0] & ~v12.i32[0];
  float32x4_t v19 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (int8x16_t)v9, vbslq_s8(v16, (int8x16_t)v10, (int8x16_t)v11));
  float32x4_t v20 = vmulq_n_f32(*v3, v19.f32[0]);
  v20.i32[3] = 0;
  float32x4_t v21 = vmulq_lane_f32(v3[1], *(float32x2_t *)v19.f32, 1);
  v21.i32[3] = 0;
  float32x4_t v22 = vmulq_laneq_f32(v3[2], v19, 2);
  v22.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v3[3], vaddq_f32(v22, vaddq_f32(v20, v21))).u64[0];
  return result;
}

int32x2_t physx::Gu::RelativeConvex<physx::Gu::TriangleV>::getSweepMargin()
{
  return vdup_n_s32(0x7F7FFFFFu);
}

double physx::Gu::RelativeConvex<physx::Gu::TriangleV>::getCenter(uint64_t a1)
{
  float32x4_t v2 = *(float32x2_t **)(a1 + 8);
  v1 = *(float32x4_t **)(a1 + 16);
  float32x4_t v3 = vmulq_n_f32(*v1, COERCE_FLOAT(*(_OWORD *)v2->f32));
  v3.i32[3] = 0;
  float32x4_t v4 = vmulq_lane_f32(v1[1], *v2, 1);
  v4.i32[3] = 0;
  float32x4_t v5 = vmulq_laneq_f32(v1[2], *(float32x4_t *)v2->f32, 2);
  v5.i32[3] = 0;
  *(void *)&double result = vaddq_f32(v1[3], vaddq_f32(vaddq_f32(v3, v4), v5)).u64[0];
  return result;
}

void physx::Gu::RelativeConvex<physx::Gu::TriangleV>::~RelativeConvex()
{
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::CapsuleV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10)
{
  float32x4_t v10 = a4;
  float32x4_t v11 = a3;
  uint64_t v340 = *MEMORY[0x263EF8340];
  uint64_t v15 = a1->i64[1];
  int8x16_t v16 = (const float *)(v15 + 20);
  float32x2_t v17 = vld1_dup_f32(v16);
  uint64_t v18 = *(void *)(a2 + 8);
  float32x4_t v19 = (const float *)(v18 + 20);
  float32x2_t v20 = vld1_dup_f32(v19);
  float32x2_t v21 = vmin_f32(v17, v20);
  float32x2_t v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v23 = vmul_f32(v21, v22);
  v21.i32[0] = *(_DWORD *)(v15 + 16);
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a10.i32[0] = -*(char *)(v15 + 32);
  int32x2_t v24 = (int32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v21);
  float32x2_t v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -*(char *)(v18 + 32);
  float32x2_t v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v22), 0);
  float32x2_t v315 = v25;
  float v316 = v26.f32[0];
  float32x2_t v27 = vadd_f32(v25, v26);
  unsigned int v323 = 0;
  uint64_t v28 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v53 = vmulq_f32(a7, a7);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v54 = vmulq_f32(v45, v45);
    v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
    float32x2_t v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
    float32x2_t v56 = vrsqrte_f32(v55);
    int v57 = 4;
    do
    {
      float32x2_t v56 = vmul_f32(v56, vrsqrts_f32(vmul_f32(v56, v56), v55));
      --v57;
    }
    while (v57);
    float32x2_t v58 = vmul_f32(v55, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v55), 0), (int8x8_t)_D11, (int8x8_t)v56));
    float32x2_t v59 = vrecpe_f32(v58);
    int v60 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v58, v59);
      float32x2_t v59 = vmul_f32(v59, *(float32x2_t *)a10.f32);
      --v60;
    }
    while (v60);
    float32x4_t v61 = vmulq_n_f32(v45, v59.f32[0]);
    v61.i32[3] = 0;
    float32x4_t v319 = v61;
    float32x2_t v62 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v63.i64[0] = -1;
    v63.i64[1] = -1;
    float32x4_t v64 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v34 = 0;
  uint64_t v35 = v18 + 48;
  uint64_t v36 = (float32x4_t *)a1[1].i64[0];
  do
  {
    uint64_t v37 = a3[v34];
    *(&v329 + v34) = v37;
    uint64_t v38 = a4[v34];
    *(&v327 + v34) = v38;
    float32x4_t v39 = *(float32x4_t *)(v15 + 16 * v37 + 48);
    float32x4_t v40 = vmulq_n_f32(*v36, v39.f32[0]);
    v40.i32[3] = 0;
    float32x4_t v41 = vmulq_lane_f32(v36[1], *(float32x2_t *)v39.f32, 1);
    v41.i32[3] = 0;
    a10 = v36[3];
    float32x4_t v42 = vmulq_laneq_f32(v36[2], v39, 2);
    v42.i32[3] = 0;
    float32x4_t v43 = vaddq_f32(a10, vaddq_f32(vaddq_f32(v40, v41), v42));
    float32x4_t v44 = *(float32x4_t *)(v35 + 16 * (1 - v38));
    float32x4_t v45 = vsubq_f32(v43, v44);
    *(&v334 + v34) = v43;
    *(&v331 + v34) = v44;
    *(&v337 + v34++) = v45;
  }
  while (v28 != v34);
  unsigned int v323 = v28;
  switch(v34)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v337, &v334, &v331, &v329, &v327, (int *)&v323);
      goto LABEL_49;
    case 3:
      unsigned int v323 = 3;
      float32x4_t v45 = v337;
      a10 = vsubq_f32(v338, v337);
      float32x4_t v65 = vsubq_f32((float32x4_t)v339[0], v337);
      int8x8_t v67 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v65.f32);
      *(int8x8_t *)v66.f32 = vext_s8(v67, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v65.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), 4uLL);
      v67.i32[1] = 0;
      float32x2_t v68 = vpadd_f32(vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), vmul_f32((float32x2_t)v67.u32[0], (float32x2_t)v67.u32[0]));
      float32x2_t v69 = vpadd_f32(v68, v68);
      if (v69.f32[0] > 0.00000011921)
      {
        if (v69.f32[0] == 0.0)
        {
          float32x4_t v45 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v66.u32[2] = v67;
          float32x2_t v70 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 8uLL).u64[0];
          float32x2_t v71 = (float32x2_t)vextq_s8(v339[0], v339[0], 8uLL).u64[0];
          float32x2_t v72 = (float32x2_t)vextq_s8(v339[0], v339[0], 4uLL).u64[0];
          float32x2_t v73 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 4uLL).u64[0];
          int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v72), v73, *(float32x2_t *)v339[0].i8);
          *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v339[0].i8), *(float32x2_t *)v338.f32, v71), 4uLL);
          v75.i64[1] = v74.u32[0];
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 8uLL).u64[0];
          float32x2_t v77 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 4uLL).u64[0];
          int8x8_t v78 = (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v339[0].i8), v72, *(float32x2_t *)v337.f32);
          *(int8x8_t *)v79.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v337.f32, v71), *(float32x2_t *)v339[0].i8, v76), 4uLL);
          v79.i64[1] = v78.u32[0];
          int8x8_t v80 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v337.f32, v73), v77, *(float32x2_t *)v338.f32);
          *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v338.f32), *(float32x2_t *)v337.f32, v70), 4uLL);
          v81.i64[1] = v80.u32[0];
          float32x4_t v82 = vmulq_f32(v75, v66);
          v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
          float32x2_t v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
          float32x4_t v84 = vmulq_f32(v79, v66);
          v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
          float32x2_t v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
          float32x4_t v86 = vmulq_f32(v81, v66);
          v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
          float32x2_t v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v85), (int8x8_t)vcgez_f32(v83)), (int8x8_t)vcgez_f32(v87)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
          {
            int8x16_t v113 = (int8x16_t)vmulq_f32(v337, v66);
            float32x2_t v114 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
            float32x2_t v115 = vrecpe_f32(v69);
            int v116 = 4;
            do
            {
              float32x2_t v115 = vmul_f32(v115, vrecps_f32(v69, v115));
              --v116;
            }
            while (v116);
            float32x2_t v117 = vpadd_f32(*(float32x2_t *)v113.i8, v114);
            float32x4_t v45 = vmulq_n_f32(v66, vmul_f32(v115, vpadd_f32(v117, v117)).f32[0]);
            v45.i32[3] = 0;
          }
          else
          {
            float32x4_t v88 = vnegq_f32(v337);
            v88.i32[3] = 0;
            float32x4_t v89 = vnegq_f32(v338);
            v89.i32[3] = 0;
            float32x4_t v90 = vmulq_f32(v88, a10);
            v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
            float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
            float32x4_t v92 = vmulq_f32(a10, v89);
            v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
            float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v91), (int8x8_t)vclez_f32(v93)), (int8x8_t)vclez_f32(v87)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
            {
              float32x2_t v118 = vsub_f32(v91, v93);
              float32x2_t v119 = vrecpe_f32(v118);
              int v120 = 4;
              do
              {
                float32x2_t v119 = vmul_f32(v119, vrecps_f32(v118, v119));
                --v120;
              }
              while (v120);
              uint64_t v105 = 0;
              float32x4_t v45 = vmlaq_n_f32(v337, a10, vmul_f32(v91, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v118), (float32x2_t)0x3400000034000000), (int8x8_t)v119, 0)).f32[0]);
              v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
              unsigned int v121 = 2;
              uint64_t v104 = 1;
            }
            else
            {
              float32x4_t v94 = vnegq_f32((float32x4_t)v339[0]);
              v94.i32[3] = 0;
              float32x4_t v95 = vmulq_f32(v89, v65);
              v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
              float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
              float32x4_t v97 = vmulq_f32(a10, v94);
              v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
              float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
              float32x4_t v99 = vmulq_f32(v65, v94);
              v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
              float32x2_t v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v96, v93), (int8x8_t)vcge_f32(v98, v100)), (int8x8_t)vclez_f32(v83)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
              {
                float32x2_t v122 = vsub_f32(v96, v93);
                float32x2_t v123 = vadd_f32(v122, vsub_f32(v98, v100));
                float32x2_t v124 = vrecpe_f32(v123);
                int v125 = 4;
                do
                {
                  float32x2_t v124 = vmul_f32(v124, vrecps_f32(v123, v124));
                  --v125;
                }
                while (v125);
                int8x16_t v126 = (int8x16_t)vmlaq_n_f32(v338, vsubq_f32((float32x4_t)v339[0], v338), vmul_f32(v122, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v123), (float32x2_t)0x3400000034000000), (int8x8_t)v124, 0)).f32[0]);
                v126.i64[1] = vextq_s8(v126, v126, 8uLL).u32[0];
                unsigned int v121 = 2;
                uint64_t v105 = 1;
                uint64_t v104 = 2;
                float32x4_t v45 = (float32x4_t)v126;
              }
              else
              {
                float32x4_t v101 = vmulq_f32(v88, v65);
                int32x4_t v102 = (int32x4_t)vpaddq_f32(v101, v101);
                *(float32x2_t *)v102.i8 = vpadd_f32(*(float32x2_t *)v102.i8, *(float32x2_t *)v102.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v102.i8), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v85)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
                {
                  float32x2_t v127 = vsub_f32(*(float32x2_t *)v102.i8, v100);
                  float32x2_t v128 = vrecpe_f32(v127);
                  int v129 = 4;
                  do
                  {
                    float32x2_t v128 = vmul_f32(v128, vrecps_f32(v127, v128));
                    --v129;
                  }
                  while (v129);
                  uint64_t v105 = 0;
                  float32x4_t v45 = vmlaq_n_f32(v337, v65, vmul_f32(*(float32x2_t *)v102.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v127), (float32x2_t)0x3400000034000000), (int8x8_t)v128, 0)).f32[0]);
                  v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
                  uint64_t v104 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v102.i8), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
                {
                  uint64_t v105 = 0;
                  uint64_t v104 = 1;
                }
                else
                {
                  *(int32x2_t *)v102.i8 = vcge_f32(v93, v96);
                  *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v102.i8, (int8x8_t)vcgez_f32(v93)), 0);
                  *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
                  v102.i32[0] = -1;
                  __int32 v103 = v45.i32[0];
                  float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v102), 0), (int8x16_t)v338, v339[0]);
                  uint64_t v104 = 1;
                  if (v103 == -1) {
                    uint64_t v105 = 1;
                  }
                  else {
                    uint64_t v105 = 2;
                  }
                }
                unsigned int v121 = v104;
              }
            }
            float32x4_t v130 = *(&v337 + v105);
            float32x4_t v131 = *(&v337 + v104);
            a10 = *(&v334 + v105);
            float32x4_t v132 = *(&v334 + v104);
            float32x4_t v133 = *(&v331 + v105);
            float32x4_t v134 = *(&v331 + v104);
            int v135 = *(&v329 + v105);
            int v136 = *(&v329 + v104);
            int v137 = *(&v327 + v105);
            int v138 = *(&v327 + v104);
            float32x4_t v337 = v130;
            float32x4_t v338 = v131;
            float32x4_t v334 = a10;
            float32x4_t v335 = v132;
            float32x4_t v331 = v133;
            float32x4_t v332 = v134;
            int v329 = v135;
            int v330 = v136;
            int v327 = v137;
            int v328 = v138;
            unsigned int v323 = v121;
          }
        }
        goto LABEL_49;
      }
      unsigned int v323 = 2;
      float32x4_t v106 = vmulq_f32(a10, a10);
      v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
      float32x2_t v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v107), 0), *(int8x8_t *)v337.f32).u32[0] != -1)
      {
        float32x4_t v108 = vnegq_f32(v337);
        v108.i32[3] = 0;
        float32x4_t v109 = vmulq_f32(v108, a10);
        v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
        float32x2_t v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
        float32x2_t v111 = vrecpe_f32(v107);
        int v112 = 4;
        do
        {
          float32x2_t v111 = vmul_f32(v111, vrecps_f32(v107, v111));
          --v112;
        }
        while (v112);
        float32x4_t v45 = vmlaq_n_f32(v337, a10, vmax_f32(vmin_f32(vmul_f32(v110, v111), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v45 = v337;
      float32x4_t v46 = vsubq_f32(v338, v337);
      float32x4_t v47 = vmulq_f32(v46, v46);
      v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
      float32x2_t v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v48), 0), *(int8x8_t *)v337.f32).u32[0] != -1)
      {
        float32x4_t v49 = vnegq_f32(v337);
        v49.i32[3] = 0;
        float32x4_t v50 = vmulq_f32(v49, v46);
        a10 = vpaddq_f32(v50, v50);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        float32x2_t v51 = vrecpe_f32(v48);
        int v52 = 4;
        do
        {
          float32x2_t v51 = vmul_f32(v51, vrecps_f32(v48, v51));
          --v52;
        }
        while (v52);
        float32x4_t v45 = vmlaq_n_f32(v337, v46, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v51), _D11), 0).f32[0]);
LABEL_31:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v323 = 1;
LABEL_49:
  float32x4_t v139 = vmulq_f32(v45, v45);
  v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
  float32x2_t v140 = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32);
  float32x2_t v141 = vrsqrte_f32(v140);
  int v142 = 4;
  do
  {
    float32x2_t v141 = vmul_f32(v141, vrsqrts_f32(vmul_f32(v141, v141), v140));
    --v142;
  }
  while (v142);
  float32x2_t v62 = vmul_f32(v140, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v140), 0), (int8x8_t)_D11, (int8x8_t)v141));
  float32x2_t v143 = vrecpe_f32(v62);
  int v144 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v62, v143);
    float32x2_t v143 = vmul_f32(v143, *(float32x2_t *)a10.f32);
    --v144;
  }
  while (v144);
  float32x4_t v145 = vmulq_n_f32(v45, v143.f32[0]);
  v145.i32[3] = 0;
  float32x4_t v319 = v145;
  int32x4_t v63 = vdupq_lane_s32(vcgt_f32(v62, v23), 0);
  float32x4_t v64 = v45;
LABEL_54:
  float32x2_t v317 = v27;
  float32x2_t v146 = vadd_f32(v27, a8);
  a10.i32[0] = -1;
  int32x4_t v313 = (int32x4_t)a10;
  float32x2_t v147 = v62;
  v148.i64[0] = -1;
  v148.i64[1] = -1;
  while (1)
  {
    float32x4_t v149 = v45;
    v150.i64[0] = -1;
    v150.i64[1] = -1;
    *(int16x4_t *)v150.i8 = vmovn_s32(vceqq_s32(v63, v150));
    if (vuzp1_s8(*(int8x8_t *)v150.i8, *(int8x8_t *)v150.i8).u32[0] != -1) {
      break;
    }
    float32x2_t v320 = v62;
    float32x4_t v321 = v149;
    float32x4_t v151 = vnegq_f32(v149);
    v151.i32[3] = 0;
    float32x4_t v324 = v151;
    *(double *)v152.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(a1, (float32x2_t *)&v324, (unsigned __int32 *)&v329 + v323);
    float32x4_t v64 = v321;
    float32x4_t v153 = v152;
    uint64_t v154 = v323;
    int32x4_t v155 = *(float32x4_t **)(a2 + 8);
    float32x4_t v156 = vmulq_f32(v321, v155[3]);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    float32x4_t v157 = vmulq_f32(v321, v155[4]);
    v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
    *(int8x8_t *)v156.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32), vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32)), (int8x8_t)0x100000001);
    *(&v327 + v323) = v156.i32[0];
    float32x4_t v158 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v156.f32, 0), 0x1FuLL)), (int8x16_t)v155[3], (int8x16_t)v155[4]);
    float32x4_t v45 = vsubq_f32(v153, v158);
    float32x4_t v159 = v319;
    float32x4_t v160 = vmulq_f32(v319, v45);
    v160.i64[0] = vpaddq_f32(v160, v160).u64[0];
    float32x2_t v161 = vpadd_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v160.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v161, v146)).u8[0] & 1) == 0)
    {
      if (v11)
      {
        *a5 = v154;
        if (v154)
        {
          uint64_t v261 = &v327;
          uint64_t v262 = &v329;
          do
          {
            int v263 = *v262++;
            *v11++ = v263;
            int v264 = *v261++;
            *v10++ = v264;
            --v154;
          }
          while (v154);
        }
      }
      return 0;
    }
    float32x2_t v162 = v320;
    if (v161.f32[0] > (float)(0.99977 * v320.f32[0]))
    {
      float32x4_t v324 = v321;
      if (v11)
      {
        *a5 = v154;
        if (v154)
        {
          int v265 = &v327;
          int v266 = &v329;
          uint64_t v267 = v154;
          do
          {
            int v268 = *v266++;
            *v11++ = v268;
            int v269 = *v265++;
            *v10++ = v269;
            --v267;
          }
          while (v267);
          goto LABEL_119;
        }
        uint64_t v270 = a6;
        *(float32x4_t *)(a6 + 32) = v319;
        float32x4_t v271 = 0uLL;
        float32x4_t v272 = 0uLL;
      }
      else
      {
LABEL_119:
        uint64_t v270 = a6;
        *(float32x4_t *)(a6 + 32) = v319;
        if (v154 == 3)
        {
          float32x2_t v325 = 0;
          float32x2_t v326 = 0;
          physx::Gu::barycentricCoordinates(&v324, &v337, &v338, (float32x4_t *)v339, &v326, &v325);
          float32x4_t v159 = v319;
          float32x2_t v162 = v320;
          float32x4_t v280 = vmulq_n_f32(vsubq_f32(v335, v334), v326.f32[0]);
          v280.i32[3] = 0;
          float32x4_t v281 = vmulq_n_f32(vsubq_f32(v336, v334), v325.f32[0]);
          v281.i32[3] = 0;
          float32x4_t v282 = vaddq_f32(v280, v281);
          float32x4_t v283 = vmulq_n_f32(vsubq_f32(v332, v331), v326.f32[0]);
          v283.i32[3] = 0;
          float32x4_t v271 = vaddq_f32(v334, v282);
          float32x4_t v284 = vmulq_n_f32(vsubq_f32(v333, v331), v325.f32[0]);
          v284.i32[3] = 0;
          float32x4_t v272 = vaddq_f32(v331, vaddq_f32(v283, v284));
        }
        else if (v154 == 2)
        {
          float32x4_t v285 = vsubq_f32(v337, v321);
          float32x4_t v286 = vsubq_f32(vsubq_f32(v338, v321), v285);
          float32x4_t v287 = vmulq_f32(v286, v286);
          v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
          float32x2_t v288 = vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32);
          float32x2_t v289 = vrecpe_f32(v288);
          int v290 = 4;
          do
          {
            float32x2_t v289 = vmul_f32(v289, vrecps_f32(v288, v289));
            --v290;
          }
          while (v290);
          float32x4_t v291 = vnegq_f32(v285);
          v291.i32[3] = 0;
          float32x4_t v292 = vmulq_f32(v291, v286);
          v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
          v291.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v288), (int8x8_t)v289, 0), vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32)).u32[0];
          float32x4_t v271 = vmlaq_n_f32(v334, vsubq_f32(v335, v334), v291.f32[0]);
          v271.i64[1] = vextq_s8((int8x16_t)v271, (int8x16_t)v271, 8uLL).u32[0];
          float32x4_t v272 = vmlaq_n_f32(v331, vsubq_f32(v332, v331), v291.f32[0]);
          v272.i64[1] = vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL).u32[0];
        }
        else
        {
          float32x4_t v271 = 0uLL;
          float32x4_t v272 = 0uLL;
          if (v154 == 1)
          {
            float32x4_t v271 = v334;
            float32x4_t v272 = v331;
          }
        }
      }
      int8x16_t v293 = (int8x16_t)vmlsq_lane_f32(v271, v159, v315, 0);
      v293.i64[1] = vextq_s8(v293, v293, 8uLL).u32[0];
      int8x16_t v294 = (int8x16_t)vmlaq_n_f32(v272, v159, v316);
      v294.i64[1] = vextq_s8(v294, v294, 8uLL).u32[0];
      *(int8x16_t *)uint64_t v270 = v293;
      *(int8x16_t *)(v270 + 16) = v294;
      *(float32x2_t *)(v270 + 64) = vsub_f32(v162, v317);
      return 2;
    }
    *(&v334 + v154) = v153;
    *(&v331 + v154) = v158;
    unsigned int v323 = v154 + 1;
    *(&v337 + v154) = v45;
    switch(v154)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v337, &v334, &v331, &v329, &v327, (int *)&v323);
        float32x2_t v162 = v320;
        float32x4_t v64 = v321;
        break;
      case 2:
        float32x4_t v45 = v337;
        float32x4_t v171 = vsubq_f32(v338, v337);
        float32x4_t v172 = vsubq_f32((float32x4_t)v339[0], v337);
        int8x8_t v174 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 4uLL), *(float32x2_t *)v172.f32);
        *(int8x8_t *)v173.f32 = vext_s8(v174, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL), *(float32x2_t *)v172.f32), *(float32x2_t *)v171.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL)), 4uLL);
        v174.i32[1] = 0;
        unsigned int v323 = 3;
        float32x2_t v175 = vpadd_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), vmul_f32((float32x2_t)v174.u32[0], (float32x2_t)v174.u32[0]));
        float32x2_t v176 = vpadd_f32(v175, v175);
        if (v176.f32[0] <= 0.00000011921)
        {
          unsigned int v323 = 2;
          float32x4_t v213 = vmulq_f32(v171, v171);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v214), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
          {
LABEL_81:
            unsigned int v323 = 1;
            break;
          }
          float32x4_t v215 = vnegq_f32(v337);
          v215.i32[3] = 0;
          float32x4_t v216 = vmulq_f32(v215, v171);
          v216.i64[0] = vpaddq_f32(v216, v216).u64[0];
          float32x2_t v217 = vpadd_f32(*(float32x2_t *)v216.f32, *(float32x2_t *)v216.f32);
          float32x2_t v218 = vrecpe_f32(v214);
          int v219 = 4;
          do
          {
            float32x2_t v218 = vmul_f32(v218, vrecps_f32(v214, v218));
            --v219;
          }
          while (v219);
          float32x4_t v45 = vmlaq_n_f32(v337, v171, vmax_f32(vmin_f32(vmul_f32(v217, v218), _D11), 0).f32[0]);
          goto LABEL_80;
        }
        if (v176.f32[0] == 0.0)
        {
          float32x4_t v45 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v173.u32[2] = v174;
          float32x2_t v177 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 8uLL).u64[0];
          float32x2_t v178 = (float32x2_t)vextq_s8(v339[0], v339[0], 8uLL).u64[0];
          float32x2_t v179 = (float32x2_t)vextq_s8(v339[0], v339[0], 4uLL).u64[0];
          float32x2_t v180 = (float32x2_t)vextq_s8((int8x16_t)v338, (int8x16_t)v338, 4uLL).u64[0];
          int8x8_t v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v338.f32, v179), v180, *(float32x2_t *)v339[0].i8);
          *(int8x8_t *)v182.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32(v177, *(float32x2_t *)v339[0].i8), *(float32x2_t *)v338.f32, v178), 4uLL);
          v182.i64[1] = v181.u32[0];
          float32x2_t v183 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 8uLL).u64[0];
          float32x2_t v184 = (float32x2_t)vextq_s8((int8x16_t)v337, (int8x16_t)v337, 4uLL).u64[0];
          int8x8_t v185 = (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v339[0].i8), v179, *(float32x2_t *)v337.f32);
          *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v337.f32, v178), *(float32x2_t *)v339[0].i8, v183), 4uLL);
          v186.i64[1] = v185.u32[0];
          int8x8_t v187 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v337.f32, v180), v184, *(float32x2_t *)v338.f32);
          *(int8x8_t *)v188.f32 = vext_s8(v187, (int8x8_t)vmls_f32(vmul_f32(v183, *(float32x2_t *)v338.f32), *(float32x2_t *)v337.f32, v177), 4uLL);
          v188.i64[1] = v187.u32[0];
          float32x4_t v189 = vmulq_f32(v182, v173);
          v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
          float32x2_t v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
          float32x4_t v191 = vmulq_f32(v186, v173);
          v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
          float32x2_t v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
          float32x4_t v193 = vmulq_f32(v188, v173);
          v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
          float32x2_t v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v192), (int8x8_t)vcgez_f32(v190)), (int8x8_t)vcgez_f32(v194)), 0), *(int8x8_t *)v337.f32).u32[0] != -1)
          {
            float32x4_t v195 = vnegq_f32(v337);
            v195.i32[3] = 0;
            float32x4_t v196 = vnegq_f32(v338);
            v196.i32[3] = 0;
            float32x4_t v197 = vmulq_f32(v195, v171);
            v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
            float32x2_t v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
            float32x4_t v199 = vmulq_f32(v171, v196);
            v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
            float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v198), (int8x8_t)vclez_f32(v200)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
            {
              float32x2_t v225 = vsub_f32(v198, v200);
              float32x2_t v226 = vrecpe_f32(v225);
              int v227 = 4;
              do
              {
                float32x2_t v226 = vmul_f32(v226, vrecps_f32(v225, v226));
                --v227;
              }
              while (v227);
              uint64_t v212 = 0;
              float32x4_t v45 = vmlaq_n_f32(v337, v171, vmul_f32(v198, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v225), (float32x2_t)0x3400000034000000), (int8x8_t)v226, 0)).f32[0]);
              v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
              unsigned int v228 = 2;
              uint64_t v211 = 1;
            }
            else
            {
              float32x4_t v201 = vnegq_f32((float32x4_t)v339[0]);
              v201.i32[3] = 0;
              float32x4_t v202 = vmulq_f32(v196, v172);
              v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
              float32x2_t v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
              float32x4_t v204 = vmulq_f32(v171, v201);
              v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
              float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
              float32x4_t v206 = vmulq_f32(v172, v201);
              v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
              float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v203, v200), (int8x8_t)vcge_f32(v205, v207)), (int8x8_t)vclez_f32(v190)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
              {
                float32x2_t v229 = vsub_f32(v203, v200);
                float32x2_t v230 = vadd_f32(v229, vsub_f32(v205, v207));
                float32x2_t v231 = vrecpe_f32(v230);
                int v232 = 4;
                do
                {
                  float32x2_t v231 = vmul_f32(v231, vrecps_f32(v230, v231));
                  --v232;
                }
                while (v232);
                int8x16_t v233 = (int8x16_t)vmlaq_n_f32(v338, vsubq_f32((float32x4_t)v339[0], v338), vmul_f32(v229, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v230), (float32x2_t)0x3400000034000000), (int8x8_t)v231, 0)).f32[0]);
                v233.i64[1] = vextq_s8(v233, v233, 8uLL).u32[0];
                uint64_t v211 = 2;
                float32x4_t v45 = (float32x4_t)v233;
                uint64_t v212 = 1;
              }
              else
              {
                float32x4_t v208 = vmulq_f32(v195, v172);
                v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
                float32x2_t v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v209), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v337.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v209), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v337.f32).u32[0] == -1)
                  {
                    uint64_t v212 = 0;
                    uint64_t v211 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v45.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v200, v203), (int8x8_t)vcgez_f32(v200)), 0);
                    *(int8x8_t *)v45.f32 = vuzp1_s8(*(int8x8_t *)v45.f32, *(int8x8_t *)v45.f32);
                    __int32 v210 = v45.i32[0];
                    float32x4_t v45 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v45, v313), 0), (int8x16_t)v338, v339[0]);
                    uint64_t v211 = 1;
                    if (v210 == -1) {
                      uint64_t v212 = 1;
                    }
                    else {
                      uint64_t v212 = 2;
                    }
                  }
                  unsigned int v228 = 1;
                  goto LABEL_98;
                }
                float32x2_t v234 = vsub_f32(v209, v207);
                float32x2_t v235 = vrecpe_f32(v234);
                int v236 = 4;
                do
                {
                  float32x2_t v235 = vmul_f32(v235, vrecps_f32(v234, v235));
                  --v236;
                }
                while (v236);
                uint64_t v212 = 0;
                float32x4_t v45 = vmlaq_n_f32(v337, v172, vmul_f32(v209, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v234), (float32x2_t)0x3400000034000000), (int8x8_t)v235, 0)).f32[0]);
                v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
                uint64_t v211 = 2;
              }
              unsigned int v228 = 2;
            }
LABEL_98:
            float32x4_t v237 = *(&v337 + v212);
            float32x4_t v238 = *(&v337 + v211);
            float32x4_t v239 = *(&v334 + v212);
            float32x4_t v240 = *(&v334 + v211);
            float32x4_t v241 = *(&v331 + v212);
            float32x4_t v242 = *(&v331 + v211);
            int v243 = *(&v329 + v212);
            int v244 = *(&v329 + v211);
            int v245 = *(&v327 + v212);
            int v246 = *(&v327 + v211);
            float32x4_t v337 = v237;
            float32x4_t v338 = v238;
            float32x4_t v334 = v239;
            float32x4_t v335 = v240;
            float32x4_t v331 = v241;
            float32x4_t v332 = v242;
            int v329 = v243;
            int v330 = v244;
            int v327 = v245;
            int v328 = v246;
            unsigned int v323 = v228;
            break;
          }
          int8x16_t v220 = (int8x16_t)vmulq_f32(v337, v173);
          float32x2_t v221 = (float32x2_t)vextq_s8(v220, v220, 8uLL).u64[0];
          float32x2_t v222 = vrecpe_f32(v176);
          int v223 = 4;
          do
          {
            float32x2_t v222 = vmul_f32(v222, vrecps_f32(v176, v222));
            --v223;
          }
          while (v223);
          float32x2_t v224 = vpadd_f32(*(float32x2_t *)v220.i8, v221);
          float32x4_t v45 = vmulq_n_f32(v173, vmul_f32(v222, vpadd_f32(v224, v224)).f32[0]);
          v45.i32[3] = 0;
        }
        break;
      case 1:
        float32x4_t v45 = v337;
        float32x4_t v163 = vsubq_f32(v338, v337);
        float32x4_t v164 = vmulq_f32(v163, v163);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        float32x2_t v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v165), 0), *(int8x8_t *)v337.f32).u32[0] == -1)goto LABEL_81; {
        float32x4_t v166 = vnegq_f32(v337);
        }
        v166.i32[3] = 0;
        float32x4_t v167 = vmulq_f32(v166, v163);
        v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
        float32x2_t v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
        float32x2_t v169 = vrecpe_f32(v165);
        int v170 = 4;
        do
        {
          float32x2_t v169 = vmul_f32(v169, vrecps_f32(v165, v169));
          --v170;
        }
        while (v170);
        float32x4_t v45 = vmlaq_n_f32(v337, v163, vmax_f32(vmin_f32(vmul_f32(v168, v169), _D11), 0).f32[0]);
LABEL_80:
        v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
        break;
    }
    float32x4_t v247 = vmulq_f32(v45, v45);
    v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
    float32x2_t v248 = vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32);
    float32x2_t v249 = vrsqrte_f32(v248);
    int v250 = 4;
    do
    {
      float32x2_t v249 = vmul_f32(v249, vrsqrts_f32(vmul_f32(v249, v249), v248));
      --v250;
    }
    while (v250);
    float32x2_t v62 = vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v248), 0), (int8x8_t)_D11, (int8x8_t)v249));
    float32x2_t v251 = vrecpe_f32(v62);
    int v252 = 4;
    do
    {
      float32x2_t v251 = vmul_f32(v251, vrecps_f32(v62, v251));
      --v252;
    }
    while (v252);
    float32x4_t v253 = vmulq_n_f32(v45, v251.f32[0]);
    v253.i32[3] = 0;
    float32x4_t v319 = v253;
    *(int32x2_t *)v253.f32 = vcgt_f32(v162, v62);
    int32x4_t v148 = vdupq_lane_s32(*(int32x2_t *)v253.f32, 0);
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v62, v23), *(int8x8_t *)v253.f32), 0);
    float32x2_t v147 = v162;
  }
  int8x8_t v254 = (int8x8_t)vmovn_s32(vceqzq_s32(v148));
  uint64_t v255 = v323;
  if (vuzp1_s8(v254, v254).u32[0] == -1)
  {
    if (v11)
    {
      uint64_t v273 = v323 - 1;
      *a5 = v323 - 1;
      if (v255 == 1)
      {
LABEL_130:
        float32x4_t v278 = v334;
        float32x4_t v279 = v331;
        goto LABEL_141;
      }
      uint64_t v274 = &v327;
      int v275 = &v329;
      do
      {
        int v276 = *v275++;
        *v11++ = v276;
        int v277 = *v274++;
        *v10++ = v277;
        --v273;
      }
      while (v273);
    }
    float32x4_t v324 = v64;
    if (v255 == 3)
    {
      float32x2_t v325 = 0;
      float32x2_t v326 = 0;
      float32x4_t v322 = v64;
      physx::Gu::barycentricCoordinates(&v324, &v337, &v338, (float32x4_t *)v339, &v326, &v325);
      float32x4_t v295 = vmulq_n_f32(vsubq_f32(v335, v334), v326.f32[0]);
      v295.i32[3] = 0;
      float32x4_t v296 = vmulq_n_f32(vsubq_f32(v336, v334), v325.f32[0]);
      v296.i32[3] = 0;
      float32x4_t v297 = vaddq_f32(v295, v296);
      float32x4_t v298 = vmulq_n_f32(vsubq_f32(v332, v331), v326.f32[0]);
      v298.i32[3] = 0;
      float32x4_t v278 = vaddq_f32(v334, v297);
      float32x4_t v299 = vmulq_n_f32(vsubq_f32(v333, v331), v325.f32[0]);
      float32x4_t v64 = v322;
      v299.i32[3] = 0;
      float32x4_t v279 = vaddq_f32(v331, vaddq_f32(v298, v299));
    }
    else
    {
      if (v255 == 2)
      {
        float32x4_t v300 = vsubq_f32(v337, v64);
        float32x4_t v301 = vsubq_f32(vsubq_f32(v338, v64), v300);
        float32x4_t v302 = vmulq_f32(v301, v301);
        v302.i64[0] = vpaddq_f32(v302, v302).u64[0];
        float32x2_t v303 = vpadd_f32(*(float32x2_t *)v302.f32, *(float32x2_t *)v302.f32);
        float32x2_t v304 = vrecpe_f32(v303);
        int v305 = 4;
        do
        {
          float32x2_t v304 = vmul_f32(v304, vrecps_f32(v303, v304));
          --v305;
        }
        while (v305);
        float32x4_t v306 = vnegq_f32(v300);
        v306.i32[3] = 0;
        float32x4_t v307 = vmulq_f32(v306, v301);
        v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
        v306.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v303), (int8x8_t)v304, 0), vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32)).u32[0];
        float32x4_t v278 = vmlaq_n_f32(v334, vsubq_f32(v335, v334), v306.f32[0]);
        v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
        float32x4_t v279 = vmlaq_n_f32(v331, vsubq_f32(v332, v331), v306.f32[0]);
        v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        goto LABEL_141;
      }
      float32x4_t v278 = 0uLL;
      float32x4_t v279 = 0uLL;
      if (v255 == 1) {
        goto LABEL_130;
      }
    }
LABEL_141:
    float32x2_t v308 = vrecpe_f32(v147);
    int v309 = 4;
    do
    {
      float32x2_t v308 = vmul_f32(v308, vrecps_f32(v147, v308));
      --v309;
    }
    while (v309);
    float32x4_t v310 = vmulq_n_f32(v64, v308.f32[0]);
    v310.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v310;
    *(float32x4_t *)(a6 + 48) = v319;
    int8x16_t v311 = (int8x16_t)vmlsq_lane_f32(v278, v310, v315, 0);
    v311.i64[1] = vextq_s8(v311, v311, 8uLL).u32[0];
    int8x16_t v312 = (int8x16_t)vmlaq_n_f32(v279, v310, v316);
    v312.i64[1] = vextq_s8(v312, v312, 8uLL).u32[0];
    *(int8x16_t *)a6 = v311;
    *(int8x16_t *)(a6 + 16) = v312;
    *(float32x2_t *)(a6 + 64) = vsub_f32(v147, v317);
    if (vcge_f32(v317, v147).u8[0]) {
      return 2;
    }
    else {
      return 4;
    }
  }
  if (v11)
  {
    *a5 = v323;
    if (v255)
    {
      int v256 = &v327;
      float32x2_t v257 = &v329;
      do
      {
        int v258 = *v257++;
        *v11++ = v258;
        int v259 = *v256++;
        *v10++ = v259;
        --v255;
      }
      while (v255);
    }
  }
  return 5;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, int8x8_t a10)
{
  float32x4_t v10 = a4;
  float32x4_t v11 = a3;
  uint64_t v346 = *MEMORY[0x263EF8340];
  uint64_t v15 = a1->i64[1];
  int8x16_t v16 = (const float *)(v15 + 20);
  float32x2_t v17 = vld1_dup_f32(v16);
  uint64_t v18 = *(float32x4_t **)(a2 + 8);
  float32x4_t v19 = &v18[1].f32[1];
  float32x2_t v20 = vld1_dup_f32(v19);
  float32x2_t v21 = vmin_f32(v17, v20);
  float32x2_t v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v23 = vmul_f32(v21, v22);
  v21.i32[0] = *(_DWORD *)(v15 + 16);
  v22.i32[0] = v18[1].i32[0];
  a10.i32[0] = -*(char *)(v15 + 32);
  int32x2_t v24 = (int32x2_t)vand_s8(a10, (int8x8_t)v21);
  float32x2_t v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -v18[2].i8[0];
  float32x2_t v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v22), 0);
  float32x2_t v322 = v25;
  float v323 = v26.f32[0];
  float32x2_t v27 = vadd_f32(v25, v26);
  unsigned int v329 = 0;
  uint64_t v28 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v55 = vmulq_f32(a7, a7);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    float32x4_t v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v56 = vmulq_f32(v46, v46);
    v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
    float32x2_t v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
    float32x2_t v58 = vrsqrte_f32(v57);
    int v59 = 4;
    do
    {
      float32x2_t v58 = vmul_f32(v58, vrsqrts_f32(vmul_f32(v58, v58), v57));
      --v59;
    }
    while (v59);
    float32x2_t v60 = vmul_f32(v57, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v57), 0), (int8x8_t)_D11, (int8x8_t)v58));
    float32x2_t v61 = vrecpe_f32(v60);
    int v62 = 4;
    do
    {
      float32x2_t v61 = vmul_f32(v61, vrecps_f32(v60, v61));
      --v62;
    }
    while (v62);
    float32x4_t v63 = vmulq_n_f32(v46, v61.f32[0]);
    v63.i32[3] = 0;
    float32x4_t v325 = v63;
    float32x2_t v64 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v65.i64[0] = -1;
    v65.i64[1] = -1;
    float32x4_t v66 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v34 = 0;
  uint64_t v35 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v36 = v18[3];
  int8x16_t v37 = (int8x16_t)vnegq_f32(v36);
  v37.i32[3] = 0;
  do
  {
    uint64_t v38 = a3[v34];
    *(&v335 + v34) = v38;
    uint64_t v39 = a4[v34];
    *(&v333 + v34) = v39;
    float32x4_t v40 = *(float32x4_t *)(v15 + 16 * v38 + 48);
    float32x4_t v41 = vmulq_n_f32(*v35, v40.f32[0]);
    v41.i32[3] = 0;
    float32x4_t v42 = vmulq_lane_f32(v35[1], *(float32x2_t *)v40.f32, 1);
    v42.i32[3] = 0;
    float32x4_t v43 = vmulq_laneq_f32(v35[2], v40, 2);
    v43.i32[3] = 0;
    float32x4_t v44 = vaddq_f32(v35[3], vaddq_f32(vaddq_f32(v41, v42), v43));
    float32x4_t v45 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v39], (int8x16_t)v36, v37);
    float32x4_t v46 = vsubq_f32(v44, v45);
    *(&v340 + v34) = v44;
    *(&v337 + v34) = v45;
    *(&v343 + v34++) = v46;
  }
  while (v28 != v34);
  unsigned int v329 = v28;
  switch(v34)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v343, &v340, &v337, &v335, &v333, (int *)&v329);
      goto LABEL_49;
    case 3:
      unsigned int v329 = 3;
      float32x4_t v46 = v343;
      float32x4_t v67 = vsubq_f32(v344, v343);
      float32x4_t v68 = vsubq_f32((float32x4_t)v345[0], v343);
      int8x8_t v70 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v67.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL), *(float32x2_t *)v68.f32);
      *(int8x8_t *)v69.f32 = vext_s8(v70, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), *(float32x2_t *)v68.f32), *(float32x2_t *)v67.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)), 4uLL);
      v70.i32[1] = 0;
      float32x2_t v71 = vpadd_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vmul_f32((float32x2_t)v70.u32[0], (float32x2_t)v70.u32[0]));
      float32x2_t v72 = vpadd_f32(v71, v71);
      if (v72.f32[0] > 0.00000011921)
      {
        if (v72.f32[0] == 0.0)
        {
          float32x4_t v46 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v69.u32[2] = v70;
          float32x2_t v73 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          float32x2_t v74 = (float32x2_t)vextq_s8(v345[0], v345[0], 8uLL).u64[0];
          float32x2_t v75 = (float32x2_t)vextq_s8(v345[0], v345[0], 4uLL).u64[0];
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v75), v76, *(float32x2_t *)v345[0].i8);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v73, *(float32x2_t *)v345[0].i8), *(float32x2_t *)v344.f32, v74), 4uLL);
          v78.i64[1] = v77.u32[0];
          float32x2_t v79 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
          float32x2_t v80 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
          int8x8_t v81 = (int8x8_t)vmls_f32(vmul_f32(v80, *(float32x2_t *)v345[0].i8), v75, *(float32x2_t *)v343.f32);
          *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v74), *(float32x2_t *)v345[0].i8, v79), 4uLL);
          v82.i64[1] = v81.u32[0];
          int8x8_t v83 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v76), v80, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v84.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32(v79, *(float32x2_t *)v344.f32), *(float32x2_t *)v343.f32, v73), 4uLL);
          v84.i64[1] = v83.u32[0];
          float32x4_t v85 = vmulq_f32(v78, v69);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          float32x4_t v87 = vmulq_f32(v82, v69);
          v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
          float32x2_t v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
          float32x4_t v89 = vmulq_f32(v84, v69);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v88), (int8x8_t)vcgez_f32(v86)), (int8x8_t)vcgez_f32(v90)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
          {
            int8x16_t v116 = (int8x16_t)vmulq_f32(v343, v69);
            float32x2_t v117 = (float32x2_t)vextq_s8(v116, v116, 8uLL).u64[0];
            float32x2_t v118 = vrecpe_f32(v72);
            int v119 = 4;
            do
            {
              float32x2_t v118 = vmul_f32(v118, vrecps_f32(v72, v118));
              --v119;
            }
            while (v119);
            float32x2_t v120 = vpadd_f32(*(float32x2_t *)v116.i8, v117);
            float32x4_t v46 = vmulq_n_f32(v69, vmul_f32(v118, vpadd_f32(v120, v120)).f32[0]);
            v46.i32[3] = 0;
          }
          else
          {
            float32x4_t v91 = vnegq_f32(v343);
            v91.i32[3] = 0;
            float32x4_t v92 = vnegq_f32(v344);
            v92.i32[3] = 0;
            float32x4_t v93 = vmulq_f32(v91, v67);
            v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
            float32x2_t v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
            float32x4_t v95 = vmulq_f32(v67, v92);
            v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
            float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v94), (int8x8_t)vclez_f32(v96)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
            {
              float32x2_t v121 = vsub_f32(v94, v96);
              float32x2_t v122 = vrecpe_f32(v121);
              int v123 = 4;
              do
              {
                float32x2_t v122 = vmul_f32(v122, vrecps_f32(v121, v122));
                --v123;
              }
              while (v123);
              uint64_t v108 = 0;
              float32x4_t v46 = vmlaq_n_f32(v343, v67, vmul_f32(v94, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v121), (float32x2_t)0x3400000034000000), (int8x8_t)v122, 0)).f32[0]);
              v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
              unsigned int v124 = 2;
              uint64_t v107 = 1;
            }
            else
            {
              float32x4_t v97 = vnegq_f32((float32x4_t)v345[0]);
              v97.i32[3] = 0;
              float32x4_t v98 = vmulq_f32(v92, v68);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              float32x4_t v100 = vmulq_f32(v67, v97);
              v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
              float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
              float32x4_t v102 = vmulq_f32(v68, v97);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v99, v96), (int8x8_t)vcge_f32(v101, v103)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
              {
                float32x2_t v125 = vsub_f32(v99, v96);
                float32x2_t v126 = vadd_f32(v125, vsub_f32(v101, v103));
                float32x2_t v127 = vrecpe_f32(v126);
                int v128 = 4;
                do
                {
                  float32x2_t v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                  --v128;
                }
                while (v128);
                int8x16_t v129 = (int8x16_t)vmlaq_n_f32(v344, vsubq_f32((float32x4_t)v345[0], v344), vmul_f32(v125, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                v129.i64[1] = vextq_s8(v129, v129, 8uLL).u32[0];
                unsigned int v124 = 2;
                uint64_t v108 = 1;
                uint64_t v107 = 2;
                float32x4_t v46 = (float32x4_t)v129;
              }
              else
              {
                float32x4_t v104 = vmulq_f32(v91, v68);
                int32x4_t v105 = (int32x4_t)vpaddq_f32(v104, v104);
                *(float32x2_t *)v105.i8 = vpadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v105.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v105.i8), (int8x8_t)vclez_f32(v103)), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                {
                  float32x2_t v130 = vsub_f32(*(float32x2_t *)v105.i8, v103);
                  float32x2_t v131 = vrecpe_f32(v130);
                  int v132 = 4;
                  do
                  {
                    float32x2_t v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                    --v132;
                  }
                  while (v132);
                  uint64_t v108 = 0;
                  float32x4_t v46 = vmlaq_n_f32(v343, v68, vmul_f32(*(float32x2_t *)v105.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
                  v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
                  uint64_t v107 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v105.i8), (int8x8_t)vclez_f32(v94)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                {
                  uint64_t v108 = 0;
                  uint64_t v107 = 1;
                }
                else
                {
                  *(int32x2_t *)v105.i8 = vcge_f32(v96, v99);
                  *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v105.i8, (int8x8_t)vcgez_f32(v96)), 0);
                  *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
                  v105.i32[0] = -1;
                  __int32 v106 = v46.i32[0];
                  float32x4_t v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v105), 0), (int8x16_t)v344, v345[0]);
                  uint64_t v107 = 1;
                  if (v106 == -1) {
                    uint64_t v108 = 1;
                  }
                  else {
                    uint64_t v108 = 2;
                  }
                }
                unsigned int v124 = v107;
              }
            }
            float32x4_t v133 = *(&v343 + v108);
            float32x4_t v134 = *(&v343 + v107);
            float32x4_t v135 = *(&v340 + v108);
            float32x4_t v136 = *(&v340 + v107);
            float32x4_t v137 = *(&v337 + v108);
            float32x4_t v138 = *(&v337 + v107);
            int v139 = *(&v335 + v108);
            int v140 = *(&v335 + v107);
            int v141 = *(&v333 + v108);
            int v142 = *(&v333 + v107);
            float32x4_t v343 = v133;
            float32x4_t v344 = v134;
            float32x4_t v340 = v135;
            float32x4_t v341 = v136;
            float32x4_t v337 = v137;
            float32x4_t v338 = v138;
            int v335 = v139;
            int v336 = v140;
            int v333 = v141;
            int v334 = v142;
            unsigned int v329 = v124;
          }
        }
        goto LABEL_49;
      }
      unsigned int v329 = 2;
      float32x4_t v109 = vmulq_f32(v67, v67);
      v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
      float32x2_t v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v110), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        float32x4_t v111 = vnegq_f32(v343);
        v111.i32[3] = 0;
        float32x4_t v112 = vmulq_f32(v111, v67);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        float32x2_t v113 = vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32);
        float32x2_t v114 = vrecpe_f32(v110);
        int v115 = 4;
        do
        {
          float32x2_t v114 = vmul_f32(v114, vrecps_f32(v110, v114));
          --v115;
        }
        while (v115);
        float32x4_t v46 = vmlaq_n_f32(v343, v67, vmax_f32(vmin_f32(vmul_f32(v113, v114), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v46 = v343;
      float32x4_t v47 = vsubq_f32(v344, v343);
      float32x4_t v48 = vmulq_f32(v47, v47);
      v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
      float32x2_t v49 = vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v49), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        float32x4_t v50 = vnegq_f32(v343);
        v50.i32[3] = 0;
        float32x4_t v51 = vmulq_f32(v50, v47);
        v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
        float32x2_t v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
        float32x2_t v53 = vrecpe_f32(v49);
        int v54 = 4;
        do
        {
          float32x2_t v53 = vmul_f32(v53, vrecps_f32(v49, v53));
          --v54;
        }
        while (v54);
        float32x4_t v46 = vmlaq_n_f32(v343, v47, vmax_f32(vmin_f32(vmul_f32(v52, v53), _D11), 0).f32[0]);
LABEL_31:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v329 = 1;
LABEL_49:
  float32x4_t v143 = vmulq_f32(v46, v46);
  v143.i64[0] = vpaddq_f32(v143, v143).u64[0];
  float32x2_t v144 = vpadd_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
  float32x2_t v145 = vrsqrte_f32(v144);
  int v146 = 4;
  do
  {
    float32x2_t v145 = vmul_f32(v145, vrsqrts_f32(vmul_f32(v145, v145), v144));
    --v146;
  }
  while (v146);
  float32x2_t v64 = vmul_f32(v144, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v144), 0), (int8x8_t)_D11, (int8x8_t)v145));
  float32x2_t v147 = vrecpe_f32(v64);
  int v148 = 4;
  do
  {
    float32x2_t v147 = vmul_f32(v147, vrecps_f32(v64, v147));
    --v148;
  }
  while (v148);
  float32x4_t v149 = vmulq_n_f32(v46, v147.f32[0]);
  v149.i32[3] = 0;
  float32x4_t v325 = v149;
  int32x4_t v65 = vdupq_lane_s32(vcgt_f32(v64, v23), 0);
  float32x4_t v66 = v46;
LABEL_54:
  float32x2_t v150 = vadd_f32(v27, a8);
  long long v151 = xmmword_2343978C0;
  LODWORD(v151) = -1;
  int32x4_t v320 = (int32x4_t)v151;
  v152.i64[0] = -1;
  v152.i64[1] = -1;
  for (float32x2_t i = v64; ; float32x2_t i = v169)
  {
    float32x4_t v154 = v46;
    v155.i64[0] = -1;
    v155.i64[1] = -1;
    *(int16x4_t *)v155.i8 = vmovn_s32(vceqq_s32(v65, v155));
    if (vuzp1_s8(*(int8x8_t *)v155.i8, *(int8x8_t *)v155.i8).u32[0] != -1) {
      break;
    }
    float32x2_t v326 = v64;
    float32x4_t v327 = v154;
    float32x4_t v156 = vnegq_f32(v154);
    v156.i32[3] = 0;
    float32x4_t v330 = v156;
    *(double *)v157.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(a1, (float32x2_t *)&v330, (unsigned __int32 *)&v335 + v329);
    float32x4_t v66 = v327;
    float32x4_t v158 = v157;
    uint64_t v159 = v329;
    float32x4_t v160 = *(float32x4_t **)(a2 + 8);
    int8x16_t v161 = (int8x16_t)vcgtzq_f32(v327);
    float32x4_t v162 = v325;
    int32x4_t v163 = (int32x4_t)vandq_s8(v161, (int8x16_t)xmmword_2343978C0);
    v163.i64[0] = vpaddq_s32(v163, v163).u64[0];
    *(&v333 + v329) = vpadd_s32(*(int32x2_t *)v163.i8, *(int32x2_t *)v163.i8).u8[0] & 7;
    float32x4_t v164 = v160[3];
    int8x16_t v165 = (int8x16_t)vnegq_f32(v164);
    v165.i32[3] = 0;
    float32x4_t v166 = (float32x4_t)vbslq_s8(v161, (int8x16_t)v164, v165);
    float32x4_t v46 = vsubq_f32(v158, v166);
    float32x4_t v167 = vmulq_f32(v325, v46);
    v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
    float32x2_t v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v168, v150)).u8[0] & 1) == 0)
    {
      if (v11)
      {
        *a5 = v159;
        if (v159)
        {
          int v268 = &v333;
          int v269 = &v335;
          do
          {
            int v270 = *v269++;
            *v11++ = v270;
            int v271 = *v268++;
            *v10++ = v271;
            --v159;
          }
          while (v159);
        }
      }
      return 0;
    }
    float32x2_t v169 = v326;
    if (v168.f32[0] > (float)(0.99977 * v326.f32[0]))
    {
      float32x4_t v330 = v327;
      if (v11)
      {
        *a5 = v159;
        if (v159)
        {
          float32x4_t v272 = &v333;
          uint64_t v273 = &v335;
          uint64_t v274 = v159;
          do
          {
            int v275 = *v273++;
            *v11++ = v275;
            int v276 = *v272++;
            *v10++ = v276;
            --v274;
          }
          while (v274);
          goto LABEL_119;
        }
        uint64_t v277 = a6;
        *(float32x4_t *)(a6 + 32) = v325;
        float32x4_t v278 = 0uLL;
        float32x4_t v279 = 0uLL;
      }
      else
      {
LABEL_119:
        uint64_t v277 = a6;
        *(float32x4_t *)(a6 + 32) = v325;
        if (v159 == 3)
        {
          float32x2_t v331 = 0;
          float32x2_t v332 = 0;
          physx::Gu::barycentricCoordinates(&v330, &v343, &v344, (float32x4_t *)v345, &v332, &v331);
          float32x4_t v162 = v325;
          float32x2_t v169 = v326;
          float32x4_t v287 = vmulq_n_f32(vsubq_f32(v341, v340), v332.f32[0]);
          v287.i32[3] = 0;
          float32x4_t v288 = vmulq_n_f32(vsubq_f32(v342, v340), v331.f32[0]);
          v288.i32[3] = 0;
          float32x4_t v289 = vaddq_f32(v287, v288);
          float32x4_t v290 = vmulq_n_f32(vsubq_f32(v338, v337), v332.f32[0]);
          v290.i32[3] = 0;
          float32x4_t v278 = vaddq_f32(v340, v289);
          float32x4_t v291 = vmulq_n_f32(vsubq_f32(v339, v337), v331.f32[0]);
          v291.i32[3] = 0;
          float32x4_t v279 = vaddq_f32(v337, vaddq_f32(v290, v291));
        }
        else if (v159 == 2)
        {
          float32x4_t v292 = vsubq_f32(v343, v327);
          float32x4_t v293 = vsubq_f32(vsubq_f32(v344, v327), v292);
          float32x4_t v294 = vmulq_f32(v293, v293);
          v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
          float32x2_t v295 = vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32);
          float32x2_t v296 = vrecpe_f32(v295);
          int v297 = 4;
          do
          {
            float32x2_t v296 = vmul_f32(v296, vrecps_f32(v295, v296));
            --v297;
          }
          while (v297);
          float32x4_t v298 = vnegq_f32(v292);
          v298.i32[3] = 0;
          float32x4_t v299 = vmulq_f32(v298, v293);
          v299.i64[0] = vpaddq_f32(v299, v299).u64[0];
          v298.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v295), (int8x8_t)v296, 0), vpadd_f32(*(float32x2_t *)v299.f32, *(float32x2_t *)v299.f32)).u32[0];
          float32x4_t v278 = vmlaq_n_f32(v340, vsubq_f32(v341, v340), v298.f32[0]);
          v278.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          float32x4_t v279 = vmlaq_n_f32(v337, vsubq_f32(v338, v337), v298.f32[0]);
          v279.i64[1] = vextq_s8((int8x16_t)v279, (int8x16_t)v279, 8uLL).u32[0];
        }
        else
        {
          float32x4_t v278 = 0uLL;
          float32x4_t v279 = 0uLL;
          if (v159 == 1)
          {
            float32x4_t v278 = v340;
            float32x4_t v279 = v337;
          }
        }
      }
      int8x16_t v300 = (int8x16_t)vmlsq_lane_f32(v278, v162, v322, 0);
      v300.i64[1] = vextq_s8(v300, v300, 8uLL).u32[0];
      int8x16_t v301 = (int8x16_t)vmlaq_n_f32(v279, v162, v323);
      v301.i64[1] = vextq_s8(v301, v301, 8uLL).u32[0];
      *(int8x16_t *)uint64_t v277 = v300;
      *(int8x16_t *)(v277 + 16) = v301;
      *(float32x2_t *)(v277 + 64) = vsub_f32(v169, v27);
      return 2;
    }
    *(&v340 + v159) = v158;
    *(&v337 + v159) = v166;
    unsigned int v329 = v159 + 1;
    *(&v343 + v159) = v46;
    switch(v159)
    {
      case 3:
        physx::Gu::closestPtPointTetrahedron(&v343, &v340, &v337, &v335, &v333, (int *)&v329);
        float32x2_t v169 = v326;
        float32x4_t v66 = v327;
        break;
      case 2:
        float32x4_t v46 = v343;
        float32x4_t v178 = vsubq_f32(v344, v343);
        float32x4_t v179 = vsubq_f32((float32x4_t)v345[0], v343);
        int8x8_t v181 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v178.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 4uLL), *(float32x2_t *)v179.f32);
        *(int8x8_t *)v180.f32 = vext_s8(v181, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL), *(float32x2_t *)v179.f32), *(float32x2_t *)v178.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL)), 4uLL);
        v181.i32[1] = 0;
        unsigned int v329 = 3;
        float32x2_t v182 = vpadd_f32(vmul_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32), vmul_f32((float32x2_t)v181.u32[0], (float32x2_t)v181.u32[0]));
        float32x2_t v183 = vpadd_f32(v182, v182);
        if (v183.f32[0] <= 0.00000011921)
        {
          unsigned int v329 = 2;
          float32x4_t v220 = vmulq_f32(v178, v178);
          v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
          float32x2_t v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v221), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
          {
LABEL_81:
            unsigned int v329 = 1;
            break;
          }
          float32x4_t v222 = vnegq_f32(v343);
          v222.i32[3] = 0;
          float32x4_t v223 = vmulq_f32(v222, v178);
          v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
          float32x2_t v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
          float32x2_t v225 = vrecpe_f32(v221);
          int v226 = 4;
          do
          {
            float32x2_t v225 = vmul_f32(v225, vrecps_f32(v221, v225));
            --v226;
          }
          while (v226);
          float32x4_t v46 = vmlaq_n_f32(v343, v178, vmax_f32(vmin_f32(vmul_f32(v224, v225), _D11), 0).f32[0]);
          goto LABEL_80;
        }
        if (v183.f32[0] == 0.0)
        {
          float32x4_t v46 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v180.u32[2] = v181;
          float32x2_t v184 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          float32x2_t v185 = (float32x2_t)vextq_s8(v345[0], v345[0], 8uLL).u64[0];
          float32x2_t v186 = (float32x2_t)vextq_s8(v345[0], v345[0], 4uLL).u64[0];
          float32x2_t v187 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          int8x8_t v188 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v186), v187, *(float32x2_t *)v345[0].i8);
          *(int8x8_t *)v189.f32 = vext_s8(v188, (int8x8_t)vmls_f32(vmul_f32(v184, *(float32x2_t *)v345[0].i8), *(float32x2_t *)v344.f32, v185), 4uLL);
          v189.i64[1] = v188.u32[0];
          float32x2_t v190 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
          float32x2_t v191 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
          int8x8_t v192 = (int8x8_t)vmls_f32(vmul_f32(v191, *(float32x2_t *)v345[0].i8), v186, *(float32x2_t *)v343.f32);
          *(int8x8_t *)v193.f32 = vext_s8(v192, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v185), *(float32x2_t *)v345[0].i8, v190), 4uLL);
          v193.i64[1] = v192.u32[0];
          int8x8_t v194 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v187), v191, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v195.f32 = vext_s8(v194, (int8x8_t)vmls_f32(vmul_f32(v190, *(float32x2_t *)v344.f32), *(float32x2_t *)v343.f32, v184), 4uLL);
          v195.i64[1] = v194.u32[0];
          float32x4_t v196 = vmulq_f32(v189, v180);
          v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
          float32x2_t v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
          float32x4_t v198 = vmulq_f32(v193, v180);
          v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
          float32x2_t v199 = vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32);
          float32x4_t v200 = vmulq_f32(v195, v180);
          v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
          float32x2_t v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v199), (int8x8_t)vcgez_f32(v197)), (int8x8_t)vcgez_f32(v201)), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
          {
            float32x4_t v202 = vnegq_f32(v343);
            v202.i32[3] = 0;
            float32x4_t v203 = vnegq_f32(v344);
            v203.i32[3] = 0;
            float32x4_t v204 = vmulq_f32(v202, v178);
            v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
            float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
            float32x4_t v206 = vmulq_f32(v178, v203);
            v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
            float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v205), (int8x8_t)vclez_f32(v207)), (int8x8_t)vclez_f32(v201)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
            {
              float32x2_t v232 = vsub_f32(v205, v207);
              float32x2_t v233 = vrecpe_f32(v232);
              int v234 = 4;
              do
              {
                float32x2_t v233 = vmul_f32(v233, vrecps_f32(v232, v233));
                --v234;
              }
              while (v234);
              uint64_t v219 = 0;
              float32x4_t v46 = vmlaq_n_f32(v343, v178, vmul_f32(v205, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
              v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
              unsigned int v235 = 2;
              uint64_t v218 = 1;
            }
            else
            {
              float32x4_t v208 = vnegq_f32((float32x4_t)v345[0]);
              v208.i32[3] = 0;
              float32x4_t v209 = vmulq_f32(v203, v179);
              v209.i64[0] = vpaddq_f32(v209, v209).u64[0];
              float32x2_t v210 = vpadd_f32(*(float32x2_t *)v209.f32, *(float32x2_t *)v209.f32);
              float32x4_t v211 = vmulq_f32(v178, v208);
              v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
              float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
              float32x4_t v213 = vmulq_f32(v179, v208);
              v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
              float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v210, v207), (int8x8_t)vcge_f32(v212, v214)), (int8x8_t)vclez_f32(v197)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
              {
                float32x2_t v236 = vsub_f32(v210, v207);
                float32x2_t v237 = vadd_f32(v236, vsub_f32(v212, v214));
                float32x2_t v238 = vrecpe_f32(v237);
                int v239 = 4;
                do
                {
                  float32x2_t v238 = vmul_f32(v238, vrecps_f32(v237, v238));
                  --v239;
                }
                while (v239);
                int8x16_t v240 = (int8x16_t)vmlaq_n_f32(v344, vsubq_f32((float32x4_t)v345[0], v344), vmul_f32(v236, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v237), (float32x2_t)0x3400000034000000), (int8x8_t)v238, 0)).f32[0]);
                v240.i64[1] = vextq_s8(v240, v240, 8uLL).u32[0];
                uint64_t v218 = 2;
                float32x4_t v46 = (float32x4_t)v240;
                uint64_t v219 = 1;
              }
              else
              {
                float32x4_t v215 = vmulq_f32(v202, v179);
                v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
                float32x2_t v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v216), (int8x8_t)vclez_f32(v214)), (int8x8_t)vclez_f32(v199)), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
                {
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v216), (int8x8_t)vclez_f32(v205)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                  {
                    uint64_t v219 = 0;
                    uint64_t v218 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v46.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v207, v210), (int8x8_t)vcgez_f32(v207)), 0);
                    *(int8x8_t *)v46.f32 = vuzp1_s8(*(int8x8_t *)v46.f32, *(int8x8_t *)v46.f32);
                    __int32 v217 = v46.i32[0];
                    float32x4_t v46 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v46, v320), 0), (int8x16_t)v344, v345[0]);
                    uint64_t v218 = 1;
                    if (v217 == -1) {
                      uint64_t v219 = 1;
                    }
                    else {
                      uint64_t v219 = 2;
                    }
                  }
                  unsigned int v235 = 1;
                  goto LABEL_98;
                }
                float32x2_t v241 = vsub_f32(v216, v214);
                float32x2_t v242 = vrecpe_f32(v241);
                int v243 = 4;
                do
                {
                  float32x2_t v242 = vmul_f32(v242, vrecps_f32(v241, v242));
                  --v243;
                }
                while (v243);
                uint64_t v219 = 0;
                float32x4_t v46 = vmlaq_n_f32(v343, v179, vmul_f32(v216, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v241), (float32x2_t)0x3400000034000000), (int8x8_t)v242, 0)).f32[0]);
                v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
                uint64_t v218 = 2;
              }
              unsigned int v235 = 2;
            }
LABEL_98:
            float32x4_t v244 = *(&v343 + v219);
            float32x4_t v245 = *(&v343 + v218);
            float32x4_t v246 = *(&v340 + v219);
            float32x4_t v247 = *(&v340 + v218);
            float32x4_t v248 = *(&v337 + v219);
            float32x4_t v249 = *(&v337 + v218);
            int v250 = *(&v335 + v219);
            int v251 = *(&v335 + v218);
            int v252 = *(&v333 + v219);
            int v253 = *(&v333 + v218);
            float32x4_t v343 = v244;
            float32x4_t v344 = v245;
            float32x4_t v340 = v246;
            float32x4_t v341 = v247;
            float32x4_t v337 = v248;
            float32x4_t v338 = v249;
            int v335 = v250;
            int v336 = v251;
            int v333 = v252;
            int v334 = v253;
            unsigned int v329 = v235;
            break;
          }
          int8x16_t v227 = (int8x16_t)vmulq_f32(v343, v180);
          float32x2_t v228 = (float32x2_t)vextq_s8(v227, v227, 8uLL).u64[0];
          float32x2_t v229 = vrecpe_f32(v183);
          int v230 = 4;
          do
          {
            float32x2_t v229 = vmul_f32(v229, vrecps_f32(v183, v229));
            --v230;
          }
          while (v230);
          float32x2_t v231 = vpadd_f32(*(float32x2_t *)v227.i8, v228);
          float32x4_t v46 = vmulq_n_f32(v180, vmul_f32(v229, vpadd_f32(v231, v231)).f32[0]);
          v46.i32[3] = 0;
        }
        break;
      case 1:
        float32x4_t v46 = v343;
        float32x4_t v170 = vsubq_f32(v344, v343);
        float32x4_t v171 = vmulq_f32(v170, v170);
        v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
        float32x2_t v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v172), 0), *(int8x8_t *)v343.f32).u32[0] == -1)goto LABEL_81; {
        float32x4_t v173 = vnegq_f32(v343);
        }
        v173.i32[3] = 0;
        float32x4_t v174 = vmulq_f32(v173, v170);
        v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
        float32x2_t v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
        float32x2_t v176 = vrecpe_f32(v172);
        int v177 = 4;
        do
        {
          float32x2_t v176 = vmul_f32(v176, vrecps_f32(v172, v176));
          --v177;
        }
        while (v177);
        float32x4_t v46 = vmlaq_n_f32(v343, v170, vmax_f32(vmin_f32(vmul_f32(v175, v176), _D11), 0).f32[0]);
LABEL_80:
        v46.i64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u32[0];
        break;
    }
    float32x4_t v254 = vmulq_f32(v46, v46);
    v254.i64[0] = vpaddq_f32(v254, v254).u64[0];
    float32x2_t v255 = vpadd_f32(*(float32x2_t *)v254.f32, *(float32x2_t *)v254.f32);
    float32x2_t v256 = vrsqrte_f32(v255);
    int v257 = 4;
    do
    {
      float32x2_t v256 = vmul_f32(v256, vrsqrts_f32(vmul_f32(v256, v256), v255));
      --v257;
    }
    while (v257);
    float32x2_t v64 = vmul_f32(v255, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v255), 0), (int8x8_t)_D11, (int8x8_t)v256));
    float32x2_t v258 = vrecpe_f32(v64);
    int v259 = 4;
    do
    {
      float32x2_t v258 = vmul_f32(v258, vrecps_f32(v64, v258));
      --v259;
    }
    while (v259);
    float32x4_t v260 = vmulq_n_f32(v46, v258.f32[0]);
    v260.i32[3] = 0;
    float32x4_t v325 = v260;
    *(int32x2_t *)v260.f32 = vcgt_f32(v169, v64);
    int32x4_t v152 = vdupq_lane_s32(*(int32x2_t *)v260.f32, 0);
    int32x4_t v65 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v64, v23), *(int8x8_t *)v260.f32), 0);
  }
  int8x8_t v261 = (int8x8_t)vmovn_s32(vceqzq_s32(v152));
  uint64_t v262 = v329;
  if (vuzp1_s8(v261, v261).u32[0] == -1)
  {
    if (v11)
    {
      uint64_t v280 = v329 - 1;
      *a5 = v329 - 1;
      if (v262 == 1)
      {
LABEL_130:
        float32x4_t v285 = v340;
        float32x4_t v286 = v337;
        goto LABEL_141;
      }
      float32x4_t v281 = &v333;
      float32x4_t v282 = &v335;
      do
      {
        int v283 = *v282++;
        *v11++ = v283;
        int v284 = *v281++;
        *v10++ = v284;
        --v280;
      }
      while (v280);
    }
    float32x4_t v330 = v66;
    if (v262 == 3)
    {
      float32x2_t v331 = 0;
      float32x2_t v332 = 0;
      float32x4_t v328 = v66;
      physx::Gu::barycentricCoordinates(&v330, &v343, &v344, (float32x4_t *)v345, &v332, &v331);
      float32x4_t v302 = vmulq_n_f32(vsubq_f32(v341, v340), v332.f32[0]);
      v302.i32[3] = 0;
      float32x4_t v303 = vmulq_n_f32(vsubq_f32(v342, v340), v331.f32[0]);
      v303.i32[3] = 0;
      float32x4_t v304 = vaddq_f32(v302, v303);
      float32x4_t v305 = vmulq_n_f32(vsubq_f32(v338, v337), v332.f32[0]);
      v305.i32[3] = 0;
      float32x4_t v285 = vaddq_f32(v340, v304);
      float32x4_t v306 = vmulq_n_f32(vsubq_f32(v339, v337), v331.f32[0]);
      float32x4_t v66 = v328;
      v306.i32[3] = 0;
      float32x4_t v286 = vaddq_f32(v337, vaddq_f32(v305, v306));
    }
    else
    {
      if (v262 == 2)
      {
        float32x4_t v307 = vsubq_f32(v343, v66);
        float32x4_t v308 = vsubq_f32(vsubq_f32(v344, v66), v307);
        float32x4_t v309 = vmulq_f32(v308, v308);
        v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
        float32x2_t v310 = vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32);
        float32x2_t v311 = vrecpe_f32(v310);
        int v312 = 4;
        do
        {
          float32x2_t v311 = vmul_f32(v311, vrecps_f32(v310, v311));
          --v312;
        }
        while (v312);
        float32x4_t v313 = vnegq_f32(v307);
        v313.i32[3] = 0;
        float32x4_t v314 = vmulq_f32(v313, v308);
        v314.i64[0] = vpaddq_f32(v314, v314).u64[0];
        v313.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v310), (int8x8_t)v311, 0), vpadd_f32(*(float32x2_t *)v314.f32, *(float32x2_t *)v314.f32)).u32[0];
        float32x4_t v285 = vmlaq_n_f32(v340, vsubq_f32(v341, v340), v313.f32[0]);
        v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
        float32x4_t v286 = vmlaq_n_f32(v337, vsubq_f32(v338, v337), v313.f32[0]);
        v286.i64[1] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u32[0];
        goto LABEL_141;
      }
      float32x4_t v285 = 0uLL;
      float32x4_t v286 = 0uLL;
      if (v262 == 1) {
        goto LABEL_130;
      }
    }
LABEL_141:
    float32x2_t v315 = vrecpe_f32(i);
    int v316 = 4;
    do
    {
      float32x2_t v315 = vmul_f32(v315, vrecps_f32(i, v315));
      --v316;
    }
    while (v316);
    float32x4_t v317 = vmulq_n_f32(v66, v315.f32[0]);
    v317.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v317;
    *(float32x4_t *)(a6 + 48) = v325;
    int8x16_t v318 = (int8x16_t)vmlsq_lane_f32(v285, v317, v322, 0);
    v318.i64[1] = vextq_s8(v318, v318, 8uLL).u32[0];
    int8x16_t v319 = (int8x16_t)vmlaq_n_f32(v286, v317, v323);
    v319.i64[1] = vextq_s8(v319, v319, 8uLL).u32[0];
    *(int8x16_t *)a6 = v318;
    *(int8x16_t *)(a6 + 16) = v319;
    *(float32x2_t *)(a6 + 64) = vsub_f32(i, v27);
    if (vcge_f32(v27, i).u8[0]) {
      return 2;
    }
    else {
      return 4;
    }
  }
  if (v11)
  {
    *a5 = v329;
    if (v262)
    {
      int v263 = &v333;
      int v264 = &v335;
      do
      {
        int v265 = *v264++;
        *v11++ = v265;
        int v266 = *v263++;
        *v10++ = v266;
        --v262;
      }
      while (v262);
    }
  }
  return 5;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, uint64_t a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10)
{
  float32x4_t v10 = a4;
  uint64_t v345 = *MEMORY[0x263EF8340];
  uint64_t v15 = a1->i64[1];
  int8x16_t v16 = (const float *)(v15 + 20);
  float32x2_t v17 = vld1_dup_f32(v16);
  uint64_t v18 = *(float32x4_t **)(a2 + 8);
  float32x4_t v19 = &v18[1].f32[1];
  float32x2_t v20 = vld1_dup_f32(v19);
  float32x2_t v21 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v22 = vmin_f32(v17, v20);
  float32x2_t v23 = vmul_f32(v22, v21);
  v22.i32[0] = *(_DWORD *)(v15 + 16);
  v20.i32[0] = v18[1].i32[0];
  v21.i32[0] = -*(char *)(v15 + 32);
  int32x2_t v24 = (int32x2_t)vand_s8((int8x8_t)v21, (int8x8_t)v22);
  float32x2_t v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -v18[2].i8[0];
  float32x2_t v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v20), 0);
  float32x2_t v320 = v25;
  float v321 = v26.f32[0];
  float32x2_t v27 = vadd_f32(v25, v26);
  float32x4_t v330 = 0uLL;
  unsigned int v329 = 0;
  uint64_t v28 = *a5;
  __asm { FMOV            V11.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v60 = vmulq_f32(a7, a7);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    float32x4_t v52 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v330 = v52;
    float32x4_t v61 = vmulq_f32(v52, v52);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    float32x2_t v62 = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
    float32x2_t v63 = vrsqrte_f32(v62);
    int v64 = 4;
    do
    {
      float32x2_t v63 = vmul_f32(v63, vrsqrts_f32(vmul_f32(v63, v63), v62));
      --v64;
    }
    while (v64);
    float32x2_t v65 = vmul_f32(v62, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v62), 0), (int8x8_t)_D11, (int8x8_t)v63));
    float32x2_t v66 = vrecpe_f32(v65);
    int v67 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v65, v66);
      float32x2_t v66 = vmul_f32(v66, *(float32x2_t *)a10.f32);
      --v67;
    }
    while (v67);
    float32x4_t v68 = vmulq_n_f32(v52, v66.f32[0]);
    v68.i32[3] = 0;
    float32x4_t v325 = v68;
    float32x2_t v69 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v70.i64[0] = -1;
    v70.i64[1] = -1;
    float32x4_t v71 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v34 = 0;
  uint64_t v35 = (float32x4_t *)a1[1].i64[0];
  uint64_t v36 = v18[10].i64[0];
  float32x4_t v37 = v18[3];
  float32x4_t v38 = v18[4];
  a10 = v18[5];
  do
  {
    uint64_t v39 = a3[v34];
    *(&v334 + v34) = v39;
    unsigned int v40 = a4[v34];
    *(&v332 + v34) = v40;
    float32x4_t v41 = *(float32x4_t *)(v15 + 16 * v39 + 48);
    float32x4_t v42 = vmulq_n_f32(*v35, v41.f32[0]);
    v42.i32[3] = 0;
    float32x4_t v43 = vmulq_lane_f32(v35[1], *(float32x2_t *)v41.f32, 1);
    v43.i32[3] = 0;
    float32x4_t v44 = vmulq_laneq_f32(v35[2], v41, 2);
    v44.i32[3] = 0;
    float32x4_t v45 = vaddq_f32(vaddq_f32(v42, v43), v44);
    float32x4_t v46 = *(float32x4_t *)(v36 + 12 * v40);
    float32x4_t v47 = vmulq_n_f32(v37, v46.f32[0]);
    v47.i32[3] = 0;
    float32x4_t v48 = vmulq_lane_f32(v38, *(float32x2_t *)v46.f32, 1);
    v48.i32[3] = 0;
    float32x4_t v49 = vmulq_laneq_f32(a10, v46, 2);
    v49.i32[3] = 0;
    float32x4_t v50 = vaddq_f32(v35[3], v45);
    float32x4_t v51 = vaddq_f32(v49, vaddq_f32(v47, v48));
    float32x4_t v52 = vsubq_f32(v50, v51);
    *(&v339 + v34) = v50;
    *(&v336 + v34) = v51;
    *(&v342 + v34++) = v52;
  }
  while (v28 != v34);
  unsigned int v329 = v28;
  switch(v34)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v342, &v339, &v336, &v334, &v332, (int *)&v329);
      goto LABEL_49;
    case 3:
      unsigned int v329 = 3;
      float32x4_t v52 = v342;
      a10 = vsubq_f32(v343, v342);
      float32x4_t v72 = vsubq_f32(v344[0], v342);
      int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v72.f32);
      *(int8x8_t *)v73.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v72.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL)), 4uLL);
      v74.i32[1] = 0;
      float32x2_t v75 = vpadd_f32(vmul_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32), vmul_f32((float32x2_t)v74.u32[0], (float32x2_t)v74.u32[0]));
      float32x2_t v76 = vpadd_f32(v75, v75);
      if (v76.f32[0] > 0.00000011921)
      {
        if (v76.f32[0] == 0.0)
        {
          float32x4_t v52 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v73.u32[2] = v74;
          float32x2_t v77 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
          float32x2_t v78 = (float32x2_t)vextq_s8((int8x16_t)v344[0], (int8x16_t)v344[0], 8uLL).u64[0];
          float32x2_t v79 = (float32x2_t)vextq_s8((int8x16_t)v344[0], (int8x16_t)v344[0], 4uLL).u64[0];
          float32x2_t v80 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
          int8x8_t v81 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v79), v80, *(float32x2_t *)v344[0].f32);
          *(int8x8_t *)v82.f32 = vext_s8(v81, (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v344[0].f32), *(float32x2_t *)v343.f32, v78), 4uLL);
          v82.i64[1] = v81.u32[0];
          float32x2_t v83 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 8uLL).u64[0];
          float32x2_t v84 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 4uLL).u64[0];
          int8x8_t v85 = (int8x8_t)vmls_f32(vmul_f32(v84, *(float32x2_t *)v344[0].f32), v79, *(float32x2_t *)v342.f32);
          *(int8x8_t *)v86.f32 = vext_s8(v85, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v342.f32, v78), *(float32x2_t *)v344[0].f32, v83), 4uLL);
          v86.i64[1] = v85.u32[0];
          int8x8_t v87 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v342.f32, v80), v84, *(float32x2_t *)v343.f32);
          *(int8x8_t *)v88.f32 = vext_s8(v87, (int8x8_t)vmls_f32(vmul_f32(v83, *(float32x2_t *)v343.f32), *(float32x2_t *)v342.f32, v77), 4uLL);
          v88.i64[1] = v87.u32[0];
          float32x4_t v89 = vmulq_f32(v82, v73);
          v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
          float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
          float32x4_t v91 = vmulq_f32(v86, v73);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          float32x4_t v93 = vmulq_f32(v88, v73);
          v93.i64[0] = vpaddq_f32(v93, v93).u64[0];
          float32x2_t v94 = vpadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v93.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v92), (int8x8_t)vcgez_f32(v90)), (int8x8_t)vcgez_f32(v94)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
          {
            int8x16_t v120 = (int8x16_t)vmulq_f32(v342, v73);
            float32x2_t v121 = (float32x2_t)vextq_s8(v120, v120, 8uLL).u64[0];
            float32x2_t v122 = vrecpe_f32(v76);
            int v123 = 4;
            do
            {
              float32x2_t v122 = vmul_f32(v122, vrecps_f32(v76, v122));
              --v123;
            }
            while (v123);
            float32x2_t v124 = vpadd_f32(*(float32x2_t *)v120.i8, v121);
            float32x4_t v52 = vmulq_n_f32(v73, vmul_f32(v122, vpadd_f32(v124, v124)).f32[0]);
            v52.i32[3] = 0;
          }
          else
          {
            float32x4_t v95 = vnegq_f32(v342);
            v95.i32[3] = 0;
            float32x4_t v96 = vnegq_f32(v343);
            v96.i32[3] = 0;
            float32x4_t v97 = vmulq_f32(v95, a10);
            v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
            float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
            float32x4_t v99 = vmulq_f32(a10, v96);
            v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
            float32x2_t v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v98), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v94)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
            {
              float32x2_t v125 = vsub_f32(v98, v100);
              float32x2_t v126 = vrecpe_f32(v125);
              int v127 = 4;
              do
              {
                float32x2_t v126 = vmul_f32(v126, vrecps_f32(v125, v126));
                --v127;
              }
              while (v127);
              uint64_t v112 = 0;
              float32x4_t v52 = vmlaq_n_f32(v342, a10, vmul_f32(v98, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v125), (float32x2_t)0x3400000034000000), (int8x8_t)v126, 0)).f32[0]);
              v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
              unsigned int v128 = 2;
              uint64_t v111 = 1;
            }
            else
            {
              float32x4_t v101 = vnegq_f32(v344[0]);
              v101.i32[3] = 0;
              float32x4_t v102 = vmulq_f32(v96, v72);
              v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
              float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
              float32x4_t v104 = vmulq_f32(a10, v101);
              v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
              float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
              float32x4_t v106 = vmulq_f32(v72, v101);
              v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
              float32x2_t v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v103, v100), (int8x8_t)vcge_f32(v105, v107)), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
              {
                float32x2_t v129 = vsub_f32(v103, v100);
                float32x2_t v130 = vadd_f32(v129, vsub_f32(v105, v107));
                float32x2_t v131 = vrecpe_f32(v130);
                int v132 = 4;
                do
                {
                  float32x2_t v131 = vmul_f32(v131, vrecps_f32(v130, v131));
                  --v132;
                }
                while (v132);
                int8x16_t v133 = (int8x16_t)vmlaq_n_f32(v343, vsubq_f32(v344[0], v343), vmul_f32(v129, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
                v133.i64[1] = vextq_s8(v133, v133, 8uLL).u32[0];
                unsigned int v128 = 2;
                uint64_t v112 = 1;
                uint64_t v111 = 2;
                float32x4_t v52 = (float32x4_t)v133;
              }
              else
              {
                float32x4_t v108 = vmulq_f32(v95, v72);
                int32x4_t v109 = (int32x4_t)vpaddq_f32(v108, v108);
                *(float32x2_t *)v109.i8 = vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v109.i8), (int8x8_t)vclez_f32(v107)), (int8x8_t)vclez_f32(v92)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
                {
                  float32x2_t v134 = vsub_f32(*(float32x2_t *)v109.i8, v107);
                  float32x2_t v135 = vrecpe_f32(v134);
                  int v136 = 4;
                  do
                  {
                    float32x2_t v135 = vmul_f32(v135, vrecps_f32(v134, v135));
                    --v136;
                  }
                  while (v136);
                  uint64_t v112 = 0;
                  float32x4_t v52 = vmlaq_n_f32(v342, v72, vmul_f32(*(float32x2_t *)v109.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v134), (float32x2_t)0x3400000034000000), (int8x8_t)v135, 0)).f32[0]);
                  v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
                  uint64_t v111 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v109.i8), (int8x8_t)vclez_f32(v98)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
                {
                  uint64_t v112 = 0;
                  uint64_t v111 = 1;
                }
                else
                {
                  *(int32x2_t *)v109.i8 = vcge_f32(v100, v103);
                  *(int16x4_t *)v52.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v109.i8, (int8x8_t)vcgez_f32(v100)), 0);
                  *(int8x8_t *)v52.f32 = vuzp1_s8(*(int8x8_t *)v52.f32, *(int8x8_t *)v52.f32);
                  v109.i32[0] = -1;
                  __int32 v110 = v52.i32[0];
                  float32x4_t v52 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v52, v109), 0), (int8x16_t)v343, (int8x16_t)v344[0]);
                  uint64_t v111 = 1;
                  if (v110 == -1) {
                    uint64_t v112 = 1;
                  }
                  else {
                    uint64_t v112 = 2;
                  }
                }
                unsigned int v128 = v111;
              }
            }
            float32x4_t v137 = *(&v342 + v112);
            float32x4_t v138 = *(&v342 + v111);
            a10 = *(&v339 + v112);
            float32x4_t v139 = *(&v339 + v111);
            float32x4_t v140 = *(&v336 + v112);
            float32x4_t v141 = *(&v336 + v111);
            int v142 = *(&v334 + v112);
            int v143 = *(&v334 + v111);
            int v144 = *(&v332 + v112);
            int v145 = *(&v332 + v111);
            float32x4_t v342 = v137;
            float32x4_t v343 = v138;
            float32x4_t v339 = a10;
            float32x4_t v340 = v139;
            float32x4_t v336 = v140;
            float32x4_t v337 = v141;
            int v334 = v142;
            int v335 = v143;
            int v332 = v144;
            int v333 = v145;
            unsigned int v329 = v128;
          }
        }
        goto LABEL_49;
      }
      unsigned int v329 = 2;
      float32x4_t v113 = vmulq_f32(a10, a10);
      v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
      float32x2_t v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v114), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
      {
        float32x4_t v115 = vnegq_f32(v342);
        v115.i32[3] = 0;
        float32x4_t v116 = vmulq_f32(v115, a10);
        v116.i64[0] = vpaddq_f32(v116, v116).u64[0];
        float32x2_t v117 = vpadd_f32(*(float32x2_t *)v116.f32, *(float32x2_t *)v116.f32);
        float32x2_t v118 = vrecpe_f32(v114);
        int v119 = 4;
        do
        {
          float32x2_t v118 = vmul_f32(v118, vrecps_f32(v114, v118));
          --v119;
        }
        while (v119);
        float32x4_t v52 = vmlaq_n_f32(v342, a10, vmax_f32(vmin_f32(vmul_f32(v117, v118), _D11), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v52 = v342;
      float32x4_t v53 = vsubq_f32(v343, v342);
      float32x4_t v54 = vmulq_f32(v53, v53);
      v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
      float32x2_t v55 = vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v55), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
      {
        float32x4_t v56 = vnegq_f32(v342);
        v56.i32[3] = 0;
        float32x4_t v57 = vmulq_f32(v56, v53);
        a10 = vpaddq_f32(v57, v57);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        float32x2_t v58 = vrecpe_f32(v55);
        int v59 = 4;
        do
        {
          float32x2_t v58 = vmul_f32(v58, vrecps_f32(v55, v58));
          --v59;
        }
        while (v59);
        float32x4_t v52 = vmlaq_n_f32(v342, v53, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v58), _D11), 0).f32[0]);
LABEL_31:
        v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v329 = 1;
LABEL_49:
  float32x4_t v330 = v52;
  float32x4_t v146 = vmulq_f32(v52, v52);
  v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
  float32x2_t v147 = vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32);
  float32x2_t v148 = vrsqrte_f32(v147);
  int v149 = 4;
  do
  {
    float32x2_t v148 = vmul_f32(v148, vrsqrts_f32(vmul_f32(v148, v148), v147));
    --v149;
  }
  while (v149);
  float32x2_t v69 = vmul_f32(v147, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v147), 0), (int8x8_t)_D11, (int8x8_t)v148));
  float32x2_t v150 = vrecpe_f32(v69);
  int v151 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v69, v150);
    float32x2_t v150 = vmul_f32(v150, *(float32x2_t *)a10.f32);
    --v151;
  }
  while (v151);
  float32x4_t v152 = vmulq_n_f32(v52, v150.f32[0]);
  v152.i32[3] = 0;
  float32x4_t v325 = v152;
  int32x4_t v70 = vdupq_lane_s32(vcgt_f32(v69, v23), 0);
  float32x4_t v71 = v52;
LABEL_54:
  float32x2_t v153 = vadd_f32(v27, a8);
  a10.i32[0] = -1;
  int32x4_t v318 = (int32x4_t)a10;
  v154.i64[0] = -1;
  v154.i64[1] = -1;
  for (float32x2_t i = v69; ; float32x2_t i = v165)
  {
    float32x4_t v156 = v52;
    v157.i64[0] = -1;
    v157.i64[1] = -1;
    *(int16x4_t *)v157.i8 = vmovn_s32(vceqq_s32(v70, v157));
    if (vuzp1_s8(*(int8x8_t *)v157.i8, *(int8x8_t *)v157.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v323 = v156;
    float32x4_t v158 = vnegq_f32(v156);
    v158.i32[3] = 0;
    float32x2_t v326 = v69;
    float32x4_t v328 = v158;
    *(double *)v159.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(a1, (float32x2_t *)&v328, (unsigned __int32 *)&v334 + v329);
    float32x4_t v324 = v159;
    *(double *)v160.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v330, &v332 + v329);
    float32x4_t v161 = v325;
    float32x4_t v162 = v160;
    float32x4_t v52 = vsubq_f32(v324, v160);
    float32x4_t v163 = vmulq_f32(v325, v52);
    v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
    float32x2_t v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v164, v153)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        uint64_t v265 = v329;
        *a5 = v329;
        if (v265)
        {
          int v266 = &v332;
          uint64_t v267 = &v334;
          do
          {
            int v268 = *v267++;
            *a3++ = v268;
            int v269 = *v266++;
            *v10++ = v269;
            --v265;
          }
          while (v265);
        }
      }
      return 0;
    }
    float32x2_t v165 = v326;
    uint64_t v166 = v329;
    if (v164.f32[0] > (float)(0.99977 * v326.f32[0]))
    {
      if (a3)
      {
        *a5 = v329;
        if (v166)
        {
          int v270 = &v332;
          int v271 = &v334;
          uint64_t v272 = v166;
          do
          {
            int v273 = *v271++;
            *a3++ = v273;
            int v274 = *v270++;
            *v10++ = v274;
            --v272;
          }
          while (v272);
          goto LABEL_121;
        }
        uint64_t v275 = a6;
        *(float32x4_t *)(a6 + 32) = v325;
        float32x4_t v276 = 0uLL;
        float32x4_t v277 = 0uLL;
      }
      else
      {
LABEL_121:
        uint64_t v275 = a6;
        *(float32x4_t *)(a6 + 32) = v325;
        if (v166 == 3)
        {
          v328.i64[0] = 0;
          float32x2_t v331 = 0;
          physx::Gu::barycentricCoordinates(&v330, &v342, &v343, v344, (float32x2_t *)&v328, &v331);
          float32x4_t v161 = v325;
          float32x2_t v165 = v326;
          float32x4_t v285 = vmulq_n_f32(vsubq_f32(v340, v339), v328.f32[0]);
          v285.i32[3] = 0;
          float32x4_t v286 = vmulq_n_f32(vsubq_f32(v341, v339), v331.f32[0]);
          v286.i32[3] = 0;
          float32x4_t v287 = vaddq_f32(v285, v286);
          float32x4_t v288 = vmulq_n_f32(vsubq_f32(v337, v336), v328.f32[0]);
          v288.i32[3] = 0;
          float32x4_t v276 = vaddq_f32(v339, v287);
          float32x4_t v289 = vmulq_n_f32(vsubq_f32(v338, v336), v331.f32[0]);
          v289.i32[3] = 0;
          float32x4_t v277 = vaddq_f32(v336, vaddq_f32(v288, v289));
        }
        else if (v166 == 2)
        {
          float32x4_t v290 = vsubq_f32(v342, v330);
          float32x4_t v291 = vsubq_f32(vsubq_f32(v343, v330), v290);
          float32x4_t v292 = vmulq_f32(v291, v291);
          v292.i64[0] = vpaddq_f32(v292, v292).u64[0];
          float32x2_t v293 = vpadd_f32(*(float32x2_t *)v292.f32, *(float32x2_t *)v292.f32);
          float32x2_t v294 = vrecpe_f32(v293);
          int v295 = 4;
          do
          {
            float32x2_t v294 = vmul_f32(v294, vrecps_f32(v293, v294));
            --v295;
          }
          while (v295);
          float32x4_t v296 = vnegq_f32(v290);
          v296.i32[3] = 0;
          float32x4_t v297 = vmulq_f32(v296, v291);
          v297.i64[0] = vpaddq_f32(v297, v297).u64[0];
          v296.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v293), (int8x8_t)v294, 0), vpadd_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)v297.f32)).u32[0];
          float32x4_t v276 = vmlaq_n_f32(v339, vsubq_f32(v340, v339), v296.f32[0]);
          v276.i64[1] = vextq_s8((int8x16_t)v276, (int8x16_t)v276, 8uLL).u32[0];
          float32x4_t v277 = vmlaq_n_f32(v336, vsubq_f32(v337, v336), v296.f32[0]);
          v277.i64[1] = vextq_s8((int8x16_t)v277, (int8x16_t)v277, 8uLL).u32[0];
        }
        else
        {
          float32x4_t v276 = 0uLL;
          float32x4_t v277 = 0uLL;
          if (v166 == 1)
          {
            float32x4_t v276 = v339;
            float32x4_t v277 = v336;
          }
        }
      }
      int8x16_t v298 = (int8x16_t)vmlsq_lane_f32(v276, v161, v320, 0);
      v298.i64[1] = vextq_s8(v298, v298, 8uLL).u32[0];
      int8x16_t v299 = (int8x16_t)vmlaq_n_f32(v277, v161, v321);
      v299.i64[1] = vextq_s8(v299, v299, 8uLL).u32[0];
      *(int8x16_t *)uint64_t v275 = v298;
      *(int8x16_t *)(v275 + 16) = v299;
      *(float32x2_t *)(v275 + 64) = vsub_f32(v165, v27);
      return 2;
    }
    *(&v339 + v329) = v324;
    *(&v336 + v166) = v162;
    unsigned int v329 = v166 + 1;
    *(&v342 + v166) = v52;
    if (v166 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v342, &v339, &v336, &v334, &v332, (int *)&v329);
      float32x2_t v165 = v326;
LABEL_66:
      float32x4_t v71 = v323;
      goto LABEL_101;
    }
    if (v166 == 2)
    {
      float32x4_t v52 = v342;
      float32x4_t v175 = vsubq_f32(v343, v342);
      float32x4_t v176 = vsubq_f32(v344[0], v342);
      int8x8_t v178 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v175.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v176, (int8x16_t)v176, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v175, (int8x16_t)v175, 4uLL), *(float32x2_t *)v176.f32);
      *(int8x8_t *)v177.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL), *(float32x2_t *)v176.f32), *(float32x2_t *)v175.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL)), 4uLL);
      v178.i32[1] = 0;
      unsigned int v329 = 3;
      float32x2_t v179 = vpadd_f32(vmul_f32(*(float32x2_t *)v177.f32, *(float32x2_t *)v177.f32), vmul_f32((float32x2_t)v178.u32[0], (float32x2_t)v178.u32[0]));
      float32x2_t v180 = vpadd_f32(v179, v179);
      if (v180.f32[0] <= 0.00000011921)
      {
        unsigned int v329 = 2;
        float32x4_t v217 = vmulq_f32(v175, v175);
        v217.i64[0] = vpaddq_f32(v217, v217).u64[0];
        float32x2_t v218 = vpadd_f32(*(float32x2_t *)v217.f32, *(float32x2_t *)v217.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v218), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
        {
          float32x4_t v219 = vnegq_f32(v342);
          v219.i32[3] = 0;
          float32x4_t v220 = vmulq_f32(v219, v175);
          v220.i64[0] = vpaddq_f32(v220, v220).u64[0];
          float32x2_t v221 = vpadd_f32(*(float32x2_t *)v220.f32, *(float32x2_t *)v220.f32);
          float32x2_t v222 = vrecpe_f32(v218);
          int v223 = 4;
          float32x4_t v71 = v323;
          do
          {
            float32x2_t v222 = vmul_f32(v222, vrecps_f32(v218, v222));
            --v223;
          }
          while (v223);
          float32x4_t v52 = vmlaq_n_f32(v342, v175, vmax_f32(vmin_f32(vmul_f32(v221, v222), _D11), 0).f32[0]);
LABEL_81:
          v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v329 = 1;
        goto LABEL_66;
      }
      if (v180.f32[0] == 0.0)
      {
        float32x4_t v52 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v177.u32[2] = v178;
      float32x2_t v181 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
      float32x2_t v182 = (float32x2_t)vextq_s8((int8x16_t)v344[0], (int8x16_t)v344[0], 8uLL).u64[0];
      float32x2_t v183 = (float32x2_t)vextq_s8((int8x16_t)v344[0], (int8x16_t)v344[0], 4uLL).u64[0];
      float32x2_t v184 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
      int8x8_t v185 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v183), v184, *(float32x2_t *)v344[0].f32);
      *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(v181, *(float32x2_t *)v344[0].f32), *(float32x2_t *)v343.f32, v182), 4uLL);
      v186.i64[1] = v185.u32[0];
      float32x2_t v187 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 8uLL).u64[0];
      float32x2_t v188 = (float32x2_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 4uLL).u64[0];
      int8x8_t v189 = (int8x8_t)vmls_f32(vmul_f32(v188, *(float32x2_t *)v344[0].f32), v183, *(float32x2_t *)v342.f32);
      *(int8x8_t *)v190.f32 = vext_s8(v189, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v342.f32, v182), *(float32x2_t *)v344[0].f32, v187), 4uLL);
      v190.i64[1] = v189.u32[0];
      int8x8_t v191 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v342.f32, v184), v188, *(float32x2_t *)v343.f32);
      *(int8x8_t *)v192.f32 = vext_s8(v191, (int8x8_t)vmls_f32(vmul_f32(v187, *(float32x2_t *)v343.f32), *(float32x2_t *)v342.f32, v181), 4uLL);
      v192.i64[1] = v191.u32[0];
      float32x4_t v193 = vmulq_f32(v186, v177);
      v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
      float32x2_t v194 = vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32);
      float32x4_t v195 = vmulq_f32(v190, v177);
      v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
      float32x2_t v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
      float32x4_t v197 = vmulq_f32(v192, v177);
      v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
      float32x2_t v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v196), (int8x8_t)vcgez_f32(v194)), (int8x8_t)vcgez_f32(v198)), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
      {
        float32x4_t v199 = vnegq_f32(v342);
        v199.i32[3] = 0;
        float32x4_t v200 = vnegq_f32(v343);
        v200.i32[3] = 0;
        float32x4_t v201 = vmulq_f32(v199, v175);
        v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
        float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
        float32x4_t v203 = vmulq_f32(v175, v200);
        v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
        float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v202), (int8x8_t)vclez_f32(v204)), (int8x8_t)vclez_f32(v198)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
        {
          float32x2_t v229 = vsub_f32(v202, v204);
          float32x2_t v230 = vrecpe_f32(v229);
          int v231 = 4;
          do
          {
            float32x2_t v230 = vmul_f32(v230, vrecps_f32(v229, v230));
            --v231;
          }
          while (v231);
          uint64_t v216 = 0;
          float32x4_t v52 = vmlaq_n_f32(v342, v175, vmul_f32(v202, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v229), (float32x2_t)0x3400000034000000), (int8x8_t)v230, 0)).f32[0]);
          v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
          unsigned int v232 = 2;
          uint64_t v215 = 1;
        }
        else
        {
          float32x4_t v205 = vnegq_f32(v344[0]);
          v205.i32[3] = 0;
          float32x4_t v206 = vmulq_f32(v200, v176);
          v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
          float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
          float32x4_t v208 = vmulq_f32(v175, v205);
          v208.i64[0] = vpaddq_f32(v208, v208).u64[0];
          float32x2_t v209 = vpadd_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32);
          float32x4_t v210 = vmulq_f32(v176, v205);
          v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
          float32x2_t v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v207, v204), (int8x8_t)vcge_f32(v209, v211)), (int8x8_t)vclez_f32(v194)), 0), *(int8x8_t *)v342.f32).u32[0] != -1)
          {
            float32x4_t v212 = vmulq_f32(v199, v176);
            v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
            float32x2_t v213 = vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v213), (int8x8_t)vclez_f32(v211)), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
            {
              float32x2_t v238 = vsub_f32(v213, v211);
              float32x2_t v239 = vrecpe_f32(v238);
              int v240 = 4;
              float32x4_t v71 = v323;
              do
              {
                float32x2_t v239 = vmul_f32(v239, vrecps_f32(v238, v239));
                --v240;
              }
              while (v240);
              uint64_t v216 = 0;
              float32x4_t v52 = vmlaq_n_f32(v342, v176, vmul_f32(v213, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v238), (float32x2_t)0x3400000034000000), (int8x8_t)v239, 0)).f32[0]);
              v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
              uint64_t v215 = 2;
              unsigned int v232 = 2;
            }
            else
            {
              float32x4_t v71 = v323;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v213), (int8x8_t)vclez_f32(v202)), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
              {
                uint64_t v216 = 0;
                uint64_t v215 = 1;
              }
              else
              {
                *(int16x4_t *)v52.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v204, v207), (int8x8_t)vcgez_f32(v204)), 0);
                *(int8x8_t *)v52.f32 = vuzp1_s8(*(int8x8_t *)v52.f32, *(int8x8_t *)v52.f32);
                __int32 v214 = v52.i32[0];
                float32x4_t v52 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v52, v318), 0), (int8x16_t)v343, (int8x16_t)v344[0]);
                uint64_t v215 = 1;
                if (v214 == -1) {
                  uint64_t v216 = 1;
                }
                else {
                  uint64_t v216 = 2;
                }
              }
              unsigned int v232 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v233 = vsub_f32(v207, v204);
          float32x2_t v234 = vadd_f32(v233, vsub_f32(v209, v211));
          float32x2_t v235 = vrecpe_f32(v234);
          int v236 = 4;
          do
          {
            float32x2_t v235 = vmul_f32(v235, vrecps_f32(v234, v235));
            --v236;
          }
          while (v236);
          int8x16_t v237 = (int8x16_t)vmlaq_n_f32(v343, vsubq_f32(v344[0], v343), vmul_f32(v233, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v234), (float32x2_t)0x3400000034000000), (int8x8_t)v235, 0)).f32[0]);
          v237.i64[1] = vextq_s8(v237, v237, 8uLL).u32[0];
          uint64_t v215 = 2;
          float32x4_t v52 = (float32x4_t)v237;
          uint64_t v216 = 1;
          unsigned int v232 = 2;
        }
        float32x4_t v71 = v323;
LABEL_100:
        float32x4_t v241 = *(&v342 + v216);
        float32x4_t v242 = *(&v342 + v215);
        float32x4_t v243 = *(&v339 + v216);
        float32x4_t v244 = *(&v339 + v215);
        float32x4_t v245 = *(&v336 + v216);
        float32x4_t v246 = *(&v336 + v215);
        int v247 = *(&v334 + v216);
        int v248 = *(&v334 + v215);
        int v249 = *(&v332 + v216);
        int v250 = *(&v332 + v215);
        float32x4_t v342 = v241;
        float32x4_t v343 = v242;
        float32x4_t v339 = v243;
        float32x4_t v340 = v244;
        float32x4_t v336 = v245;
        float32x4_t v337 = v246;
        int v334 = v247;
        int v335 = v248;
        int v332 = v249;
        int v333 = v250;
        unsigned int v329 = v232;
        goto LABEL_101;
      }
      int8x16_t v224 = (int8x16_t)vmulq_f32(v342, v177);
      float32x2_t v225 = (float32x2_t)vextq_s8(v224, v224, 8uLL).u64[0];
      float32x2_t v226 = vrecpe_f32(v180);
      int v227 = 4;
      float32x4_t v71 = v323;
      do
      {
        float32x2_t v226 = vmul_f32(v226, vrecps_f32(v180, v226));
        --v227;
      }
      while (v227);
      float32x2_t v228 = vpadd_f32(*(float32x2_t *)v224.i8, v225);
      float32x4_t v52 = vmulq_n_f32(v177, vmul_f32(v226, vpadd_f32(v228, v228)).f32[0]);
      v52.i32[3] = 0;
    }
    else
    {
      float32x4_t v71 = v323;
      if (v166 == 1)
      {
        float32x4_t v52 = v342;
        float32x4_t v167 = vsubq_f32(v343, v342);
        float32x4_t v168 = vmulq_f32(v167, v167);
        v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
        float32x2_t v169 = vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v169), 0), *(int8x8_t *)v342.f32).u32[0] == -1)
        {
          unsigned int v329 = 1;
          goto LABEL_101;
        }
        float32x4_t v170 = vnegq_f32(v342);
        v170.i32[3] = 0;
        float32x4_t v171 = vmulq_f32(v170, v167);
        v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
        float32x2_t v172 = vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32);
        float32x2_t v173 = vrecpe_f32(v169);
        int v174 = 4;
        do
        {
          float32x2_t v173 = vmul_f32(v173, vrecps_f32(v169, v173));
          --v174;
        }
        while (v174);
        float32x4_t v52 = vmlaq_n_f32(v342, v167, vmax_f32(vmin_f32(vmul_f32(v172, v173), _D11), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v330 = v52;
    float32x4_t v251 = vmulq_f32(v52, v52);
    v251.i64[0] = vpaddq_f32(v251, v251).u64[0];
    float32x2_t v252 = vpadd_f32(*(float32x2_t *)v251.f32, *(float32x2_t *)v251.f32);
    float32x2_t v253 = vrsqrte_f32(v252);
    int v254 = 4;
    do
    {
      float32x2_t v253 = vmul_f32(v253, vrsqrts_f32(vmul_f32(v253, v253), v252));
      --v254;
    }
    while (v254);
    float32x2_t v69 = vmul_f32(v252, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v252), 0), (int8x8_t)_D11, (int8x8_t)v253));
    float32x2_t v255 = vrecpe_f32(v69);
    int v256 = 4;
    do
    {
      float32x2_t v255 = vmul_f32(v255, vrecps_f32(v69, v255));
      --v256;
    }
    while (v256);
    float32x4_t v257 = vmulq_n_f32(v52, v255.f32[0]);
    v257.i32[3] = 0;
    float32x4_t v325 = v257;
    *(int32x2_t *)v257.f32 = vcgt_f32(v165, v69);
    int32x4_t v154 = vdupq_lane_s32(*(int32x2_t *)v257.f32, 0);
    int32x4_t v70 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v69, v23), *(int8x8_t *)v257.f32), 0);
  }
  int8x8_t v258 = (int8x8_t)vmovn_s32(vceqzq_s32(v154));
  uint64_t v259 = v329;
  if (vuzp1_s8(v258, v258).u32[0] == -1)
  {
    if (a3)
    {
      uint64_t v278 = v329 - 1;
      *a5 = v329 - 1;
      if (v259 == 1)
      {
LABEL_132:
        float32x4_t v283 = v339;
        float32x4_t v284 = v336;
        goto LABEL_143;
      }
      float32x4_t v279 = &v332;
      uint64_t v280 = &v334;
      do
      {
        int v281 = *v280++;
        *a3++ = v281;
        int v282 = *v279++;
        *v10++ = v282;
        --v278;
      }
      while (v278);
    }
    float32x4_t v330 = v71;
    if (v259 == 3)
    {
      v328.i64[0] = 0;
      float32x2_t v331 = 0;
      float32x4_t v327 = v71;
      physx::Gu::barycentricCoordinates(&v330, &v342, &v343, v344, (float32x2_t *)&v328, &v331);
      float32x4_t v300 = vmulq_n_f32(vsubq_f32(v340, v339), v328.f32[0]);
      v300.i32[3] = 0;
      float32x4_t v301 = vmulq_n_f32(vsubq_f32(v341, v339), v331.f32[0]);
      v301.i32[3] = 0;
      float32x4_t v302 = vaddq_f32(v300, v301);
      float32x4_t v303 = vmulq_n_f32(vsubq_f32(v337, v336), v328.f32[0]);
      v303.i32[3] = 0;
      float32x4_t v283 = vaddq_f32(v339, v302);
      float32x4_t v304 = vmulq_n_f32(vsubq_f32(v338, v336), v331.f32[0]);
      float32x4_t v71 = v327;
      v304.i32[3] = 0;
      float32x4_t v284 = vaddq_f32(v336, vaddq_f32(v303, v304));
    }
    else
    {
      if (v259 == 2)
      {
        float32x4_t v305 = vsubq_f32(v342, v71);
        float32x4_t v306 = vsubq_f32(vsubq_f32(v343, v71), v305);
        float32x4_t v307 = vmulq_f32(v306, v306);
        v307.i64[0] = vpaddq_f32(v307, v307).u64[0];
        float32x2_t v308 = vpadd_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32);
        float32x2_t v309 = vrecpe_f32(v308);
        int v310 = 4;
        do
        {
          float32x2_t v309 = vmul_f32(v309, vrecps_f32(v308, v309));
          --v310;
        }
        while (v310);
        float32x4_t v311 = vnegq_f32(v305);
        v311.i32[3] = 0;
        float32x4_t v312 = vmulq_f32(v311, v306);
        v312.i64[0] = vpaddq_f32(v312, v312).u64[0];
        v311.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v308), (int8x8_t)v309, 0), vpadd_f32(*(float32x2_t *)v312.f32, *(float32x2_t *)v312.f32)).u32[0];
        float32x4_t v283 = vmlaq_n_f32(v339, vsubq_f32(v340, v339), v311.f32[0]);
        v283.i64[1] = vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL).u32[0];
        float32x4_t v284 = vmlaq_n_f32(v336, vsubq_f32(v337, v336), v311.f32[0]);
        v284.i64[1] = vextq_s8((int8x16_t)v284, (int8x16_t)v284, 8uLL).u32[0];
        goto LABEL_143;
      }
      float32x4_t v283 = 0uLL;
      float32x4_t v284 = 0uLL;
      if (v259 == 1) {
        goto LABEL_132;
      }
    }
LABEL_143:
    float32x2_t v313 = vrecpe_f32(i);
    int v314 = 4;
    do
    {
      float32x2_t v313 = vmul_f32(v313, vrecps_f32(i, v313));
      --v314;
    }
    while (v314);
    float32x4_t v315 = vmulq_n_f32(v71, v313.f32[0]);
    v315.i32[3] = 0;
    *(float32x4_t *)(a6 + 32) = v315;
    *(float32x4_t *)(a6 + 48) = v325;
    int8x16_t v316 = (int8x16_t)vmlsq_lane_f32(v283, v315, v320, 0);
    v316.i64[1] = vextq_s8(v316, v316, 8uLL).u32[0];
    int8x16_t v317 = (int8x16_t)vmlaq_n_f32(v284, v315, v321);
    v317.i64[1] = vextq_s8(v317, v317, 8uLL).u32[0];
    *(int8x16_t *)a6 = v316;
    *(int8x16_t *)(a6 + 16) = v317;
    *(float32x2_t *)(a6 + 64) = vsub_f32(i, v27);
    if (vcge_f32(v27, i).u8[0]) {
      return 2;
    }
    else {
      return 4;
    }
  }
  if (a3)
  {
    *a5 = v329;
    if (v259)
    {
      float32x4_t v260 = &v332;
      int8x8_t v261 = &v334;
      do
      {
        int v262 = *v261++;
        *a3++ = v262;
        int v263 = *v260++;
        *v10++ = v263;
        --v259;
      }
      while (v259);
    }
  }
  return 5;
}

uint64_t physx::Gu::contactBoxConvex(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  v26[0] = xmmword_23435FD50;
  v26[1] = xmmword_23435FD50;
  HIDWORD(v12) = 1065353216;
  int32x4_t v13 = (int32x4_t)xmmword_23435FD60;
  v26[2] = xmmword_234376D80;
  v26[3] = xmmword_23435FD60;
  uint64_t v27 = 0x3F80000000000000;
  LODWORD(v12) = *(_DWORD *)(a1 + 4);
  float v14 = *(float *)(a1 + 8);
  char v28 = 0;
  *(float *)v13.i32 = -*(float *)&v12;
  float v15 = *(float *)(a1 + 12);
  v25[0] = -*(float *)&v12;
  v25[1] = -v14;
  v25[2] = -v15;
  v25[3] = *(float *)&v12;
  v25[4] = v14;
  v25[5] = v15;
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v23, a1 + 4, v12, v13);
  physx::Gu::PolygonalBox::getPolygonalData(v23, (uint64_t)v24);
  v20[0] = xmmword_23435FD50;
  v20[1] = xmmword_23435FD50;
  v20[2] = xmmword_234376D80;
  v20[3] = xmmword_23435FD60;
  uint64_t v21 = 0x3F80000000000000;
  char v22 = 0;
  unsigned __int8 ConvexData = physx::Gu::getConvexData(a2, (uint64_t)v20, (uint64_t)v19, (uint64_t)v18);
  return GuContactHullHull((uint64_t)v24, v18, (uint64_t)v25, (uint64_t)v19, a3, a4, a5, a7, (uint64_t)v26, (float *)v20, 1u, ConvexData);
}

uint64_t GuContactHullHull(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, float *a7, uint64_t a8, uint64_t a9, float *a10, unsigned __int8 a11, unsigned __int8 a12)
{
  uint64_t v272 = a8;
  double v12 = a7;
  uint64_t v268 = a3;
  uint64_t v269 = a4;
  uint64_t v14 = (uint64_t)a2;
  uint64_t v15 = a1;
  int8x16_t v16 = (float *)a9;
  float32x2_t v17 = a10;
  uint64_t v372 = *MEMORY[0x263EF8340];
  float v18 = *a5;
  float v19 = a5[1];
  float v20 = a5[2];
  float v21 = a5[3];
  float v22 = v19 * (float)(v19 + v19);
  float v23 = v20 * (float)(v20 + v20);
  float v24 = (float)(v18 + v18) * v19;
  float v25 = (float)(v18 + v18) * v20;
  float v26 = (float)(v18 + v18) * v21;
  float v27 = (float)(v19 + v19) * v20;
  float v28 = (float)(v19 + v19) * v21;
  float v29 = (float)(v20 + v20) * v21;
  float v30 = v24 + v29;
  float v31 = v25 - v28;
  float v360 = (float)(1.0 - v22) - v23;
  float v361 = v24 + v29;
  float v32 = v24 - v29;
  float v33 = 1.0 - (float)(v18 * (float)(v18 + v18));
  float v34 = v27 + v26;
  float v362 = v25 - v28;
  float v363 = v32;
  float v364 = v33 - v23;
  float v365 = v27 + v26;
  float v35 = v25 + v28;
  float v36 = v27 - v26;
  float v37 = v33 - v22;
  float v366 = v25 + v28;
  float v367 = v27 - v26;
  float v38 = a5[4];
  float v39 = a5[5];
  float v368 = v37;
  float v369 = v38;
  int v273 = a5;
  float v40 = a5[6];
  float v370 = v39;
  float v371 = v40;
  float v41 = *a6;
  float v42 = a6[1];
  float v43 = a6[2];
  float v44 = a6[3];
  float v45 = v42 + v42;
  float v46 = v43 + v43;
  float v47 = v42 * (float)(v42 + v42);
  float v48 = v43 * (float)(v43 + v43);
  float v49 = (float)(v41 + v41) * v42;
  float v50 = (float)(v41 + v41) * v43;
  float v51 = (float)(v41 + v41) * v44;
  float v52 = v45 * v43;
  float v53 = v45 * v44;
  float v54 = v46 * v44;
  float v55 = v49 + v54;
  float v56 = v50 - v53;
  v351.f32[0] = (float)(1.0 - v47) - v48;
  v351.f32[1] = v49 + v54;
  float32_t v57 = v49 - v54;
  float v58 = 1.0 - (float)(v41 * (float)(v41 + v41));
  float v59 = v58 - v48;
  float v60 = v52 + v51;
  float v352 = v50 - v53;
  v353.f32[0] = v57;
  v353.f32[1] = v58 - v48;
  float v354 = v52 + v51;
  float v61 = v58 - v47;
  v355.f32[0] = v50 + v53;
  v355.f32[1] = v52 - v51;
  float v62 = a6[4];
  float v63 = a6[5];
  float v356 = v61;
  float v357 = v62;
  float v64 = *(float *)(a1 + 4);
  float v65 = v360 * *(float *)a1;
  float v66 = v30 * *(float *)a1;
  float v67 = v31 * *(float *)a1;
  float v68 = a6[6];
  float v358 = v63;
  float v359 = v68;
  float v69 = v65 + (float)(v32 * v64);
  float v70 = *(float *)(a1 + 8);
  float v71 = v38 + (float)(v69 + (float)(v35 * v70));
  float v72 = v39 + (float)((float)(v66 + (float)(v364 * v64)) + (float)(v36 * v70));
  float v73 = v40 + (float)((float)(v67 + (float)(v34 * v64)) + (float)(v37 * v70));
  float v74 = a2[1];
  float v75 = (float)(v351.f32[0] * *a2) + (float)(v57 * v74);
  float v76 = (float)(v55 * *a2) + (float)(v59 * v74);
  float v77 = (float)(v56 * *a2) + (float)(v60 * v74);
  float v78 = a2[2];
  float v348 = (float)(v62 + (float)(v75 + (float)(v355.f32[0] * v78))) - v71;
  float v349 = (float)(v63 + (float)(v76 + (float)(v355.f32[1] * v78))) - v72;
  float v350 = (float)(v68 + (float)(v77 + (float)(v61 * v78))) - v73;
  float v79 = *a7;
  float v322 = 0.0;
  float v310 = 0.0;
  (*(void (**)(uint64_t, float *, float *, uint64_t, float *, float *))(a1 + 88))(a1, &v348, &v360, a9, &v322, &v310);
  float v80 = v322;
  float v81 = v310;
  v343[0] = 0.0;
  v342[0] = 0.0;
  (*(void (**)(uint64_t, float *, float32x2_t *, float *, float *, float *))(v14 + 88))(v14, &v348, &v351, a10, v343, v342);
  if ((float)(v79 + v81) < v343[0] || (float)(v79 + v342[0]) < v80) {
    return 0;
  }
  int v289 = a12;
  int v288 = a11;
  float v83 = v81 - v343[0];
  if ((float)(v81 - v343[0]) >= (float)(v342[0] - v80)) {
    float v83 = v342[0] - v80;
  }
  float v347 = v83;
  float v84 = a6[1];
  float v85 = a6[2];
  float v86 = a6[3];
  float v87 = v273[4];
  float v88 = v273[5];
  float v89 = a6[4];
  float v90 = a6[5];
  float v91 = v273[6];
  float v92 = a6[6];
  float v93 = (float)(v87 - v89) + (float)(v87 - v89);
  float v94 = (float)(v88 - v90) + (float)(v88 - v90);
  float v95 = (float)(v91 - v92) + (float)(v91 - v92);
  float v96 = (float)(v86 * v86) + -0.5;
  float v97 = (float)((float)-(float)(v84 * v94) - (float)(*a6 * v93)) - (float)(v85 * v95);
  float v98 = (float)((float)(v86 * (float)((float)(v85 * v94) - (float)(v84 * v95))) + (float)(v93 * v96))
      - (float)(*a6 * v97);
  float v99 = (float)((float)(v86 * (float)((float)(*a6 * v95) - (float)(v85 * v93))) + (float)(v94 * v96))
      - (float)(v84 * v97);
  float v100 = (float)((float)(v86 * (float)((float)(v84 * v93) - (float)(*a6 * v94))) + (float)(v95 * v96))
       - (float)(v85 * v97);
  float v102 = v273[2];
  float v101 = v273[3];
  float v103 = v273[1];
  float v104 = (float)((float)((float)(v86 * *v273) - (float)(*a6 * v101)) - (float)(v84 * v102)) + (float)(v103 * v85);
  float v105 = (float)((float)((float)(v86 * v103) - (float)(v84 * v101)) - (float)(v85 * *v273)) + (float)(v102 * *a6);
  float v106 = (float)((float)((float)(v86 * v102) - (float)(v85 * v101)) - (float)(*a6 * v103)) + (float)(*v273 * v84);
  float v107 = (float)((float)((float)(*a6 * *v273) + (float)(v86 * v101)) + (float)(v84 * v103)) + (float)(v85 * v102);
  float v108 = v89 - v87;
  float v109 = v90 - v88;
  float v110 = v92 - v91;
  float v111 = v108 + v108;
  float v112 = v109 + v109;
  float v113 = v110 + v110;
  float v114 = (float)(v101 * v101) + -0.5;
  float v115 = (float)((float)-(float)(v103 * (float)(v109 + v109)) - (float)(*v273 * (float)(v108 + v108)))
       - (float)(v102 * v113);
  float v116 = (float)((float)(v101 * (float)((float)((float)(v109 + v109) * v102) - (float)(v103 * v113)))
               + (float)((float)(v108 + v108) * v114))
       - (float)(*v273 * v115);
  float v117 = (float)((float)(v101 * (float)((float)(*v273 * v113) - (float)(v102 * v111)))
               + (float)((float)(v109 + v109) * v114))
       - (float)(v103 * v115);
  float v118 = (float)((float)(v101 * (float)((float)(v111 * v103) - (float)(*v273 * v112))) + (float)(v113 * v114))
       - (float)(v102 * v115);
  float v119 = (float)((float)((float)(v101 * *a6) - (float)(*v273 * v86)) - (float)(v103 * v85)) + (float)(v84 * v102);
  float v120 = (float)((float)((float)(v101 * v84) - (float)(v103 * v86)) - (float)(v102 * *a6)) + (float)(v85 * *v273);
  float v121 = (float)((float)((float)(v101 * v85) - (float)(v102 * v86)) - (float)(*v273 * v84)) + (float)(*a6 * v103);
  float v122 = v104 * (float)(v104 + v104);
  float v123 = v105 * (float)(v105 + v105);
  float v124 = v106 * (float)(v106 + v106);
  float v125 = (float)(v104 + v104) * v105;
  float v126 = v106 * (float)(v104 + v104);
  float v127 = v107 * (float)(v104 + v104);
  float v128 = v106 * (float)(v105 + v105);
  float v129 = v107 * (float)(v105 + v105);
  float v130 = v107 * (float)(v106 + v106);
  v343[0] = (float)(1.0 - v123) - v124;
  v343[1] = v125 + v130;
  float v131 = 1.0 - v122;
  v343[2] = v126 - v129;
  v343[3] = v125 - v130;
  v343[4] = v131 - v124;
  v343[5] = v127 + v128;
  v343[6] = v126 + v129;
  v343[7] = v128 - v127;
  v343[8] = v131 - v123;
  v343[9] = v98;
  v343[10] = v99;
  v343[11] = v100;
  float v132 = v119 + v119;
  float v133 = v120 + v120;
  float v134 = v121 + v121;
  float v135 = v119 * (float)(v119 + v119);
  float v136 = v120 * (float)(v120 + v120);
  float v137 = v121 * (float)(v121 + v121);
  float v138 = (float)(v119 + v119) * v120;
  float v139 = v132 * v121;
  float v140 = v107 * v132;
  float v141 = v121 * v133;
  float v142 = v107 * v133;
  float v143 = v107 * v134;
  v342[0] = (float)(1.0 - v136) - v137;
  v342[1] = v138 + v143;
  float v144 = 1.0 - v135;
  v342[2] = v139 - v142;
  v342[3] = v138 - v143;
  v342[4] = v144 - v137;
  v342[5] = v140 + v141;
  int v266 = (float *)((unint64_t)&v337 | 0xC);
  uint64_t v267 = (float *)((unint64_t)&v340 | 0xC);
  unsigned int v145 = 0x7FFF;
  v342[6] = v139 + v142;
  v342[7] = v141 - v140;
  v342[8] = v144 - v136;
  v342[9] = v116;
  v342[10] = v117;
  v342[11] = v118;
  int v146 = -1;
  unsigned int v147 = 0x7FFF;
  int v270 = v12;
  uint64_t v271 = v14;
  uint64_t v282 = v15;
  float32x4_t v283 = (float *)a9;
  int v274 = a10;
  while (1)
  {
    LODWORD(v337) = 0;
    v341[0] = 0.0;
    LODWORD(v338) = 0;
    float v148 = *v12;
    int v281 = v146;
    if (v146)
    {
      v290[0] = 3.4028e38;
      v340.i32[0] = 2139095039;
      float v298 = (float)((float)(v361 * v349) + (float)(v360 * v348)) + (float)(v362 * v350);
      float v299 = (float)((float)(v349 * v364) + (float)(v363 * v348)) + (float)(v365 * v350);
      float v300 = (float)((float)(v349 * v367) + (float)(v366 * v348)) + (float)(v368 * v350);
      float v291 = -v348;
      float v292 = -v349;
      float v293 = -v350;
      if ((GuTestFacesSepAxesBackfaceRoughPass(v15, v14, &v360, (float *)&v351, (uint64_t)v16, (uint64_t)v17, (uint64_t)v342, &v298, v148, v290, &v322, v341, &v291) & 1) == 0|| (v291 = -(float)((float)((float)(v351.f32[1] * v349) + (float)(v351.f32[0] * v348)) + (float)(v352 * v350)), v292 = -(float)((float)((float)(v349 * v353.f32[1]) + (float)(v353.f32[0] * v348)) + (float)(v354 * v350)), v293 = -(float)((float)((float)(v349 * v355.f32[1]) + (float)(v355.f32[0] * v348)) + (float)(v356 * v350)), uint64_t v149 = GuTestFacesSepAxesBackfaceRoughPass(v14, v15,
                     (float *)&v351,
                     &v360,
                     (uint64_t)v17,
                     (uint64_t)v16,
                     (uint64_t)v343,
                     &v291,
                     v148,
                     v340.f32,
                     &v310,
                     &v338,
                     &v348),
            !v149))
      {
LABEL_42:
        int v262 = 0;
        int v264 = 1;
        return v264 & v262;
      }
      float v150 = v290[0];
      float v151 = v322;
      float v152 = v323;
      float v153 = v324;
      LODWORD(v337) = 0;
      if (v340.f32[0] < v290[0])
      {
        float v151 = v310;
        float v152 = v311;
        float v153 = v312;
        float v150 = v340.f32[0];
        LODWORD(v337) = 1;
      }
      float v347 = v150;
      float v344 = v151;
      float v345 = v152;
      float v346 = v153;
    }
    else
    {
      uint64_t v149 = PxcBruteForceOverlapBackface(v268, v269, v15, v14, (uint64_t)&v360, (uint64_t)&v351, (uint64_t)v16, (uint64_t)v17, (uint64_t)v343, (uint64_t)v342, &v348, v341, &v338, &v347, (uint64_t)&v344, &v337);
      if (!v149) {
        goto LABEL_42;
      }
      float v151 = v344;
      float v152 = v345;
      float v153 = v346;
    }
    if ((float)((float)((float)(v152 * v349) + (float)(v348 * v151)) + (float)(v350 * v153)) < 0.0)
    {
      float v151 = -v151;
      float v152 = -v152;
      float v153 = -v153;
      float v344 = v151;
      float v345 = v152;
      float v346 = v153;
    }
    if (v337 == 2)
    {
      int32x4_t v154 = *(uint64_t (**)(uint64_t, float *, float *))(v15 + 96);
      float v322 = (float)((float)(v152 * v361) + (float)(v360 * v151)) + (float)(v362 * v153);
      float v323 = (float)((float)(v152 * v364) + (float)(v363 * v151)) + (float)(v365 * v153);
      float v324 = (float)((float)(v152 * v367) + (float)(v366 * v151)) + (float)(v368 * v153);
      unsigned int v145 = v154(v15, v16, &v322);
LABEL_22:
      int32x4_t v155 = *(uint64_t (**)(uint64_t, float *, float *))(v14 + 96);
      float v322 = (float)((float)-(float)(v152 * v351.f32[1]) - (float)(v351.f32[0] * v151)) - (float)(v352 * v153);
      float v323 = (float)((float)-(float)(v152 * v353.f32[1]) - (float)(v353.f32[0] * v151)) - (float)(v354 * v153);
      float v324 = (float)((float)-(float)(v152 * v355.f32[1]) - (float)(v355.f32[0] * v151)) - (float)(v356 * v153);
      uint64_t v149 = v155(v14, v17, &v322);
      unsigned int v147 = v149;
      goto LABEL_24;
    }
    if (v337 != 1)
    {
      if (v337) {
        goto LABEL_24;
      }
      unsigned int v145 = LODWORD(v341[0]);
      goto LABEL_22;
    }
    float32x4_t v156 = *(uint64_t (**)(uint64_t, float *, float *))(v15 + 96);
    float v322 = (float)((float)(v152 * v361) + (float)(v360 * v151)) + (float)(v362 * v153);
    float v323 = (float)((float)(v152 * v364) + (float)(v363 * v151)) + (float)(v365 * v153);
    float v324 = (float)((float)(v152 * v367) + (float)(v366 * v151)) + (float)(v368 * v153);
    uint64_t v149 = v156(v15, v16, &v322);
    unsigned int v145 = v149;
    unsigned int v147 = v338;
LABEL_24:
    float v285 = v152;
    float v286 = v153;
    float v287 = v151;
    uint64_t v157 = *(void *)(v15 + 24);
    _X1 = (float *)(v157 + 20 * v145);
    uint64_t v159 = *(void *)(v14 + 24);
    _X20 = (float *)(v159 + 20 * v147);
    __asm
    {
      PRFM            #0, [X1]
      PRFM            #0, [X20]
    }
    float v167 = 0.0;
    if (v347 < 0.0) {
      float v167 = -v347;
    }
    float v277 = v167;
    if (v288)
    {
      float32x4_t v340 = *(float32x4_t *)_X1;
      float32x4_t v179 = v340;
      float v168 = v360;
      float v169 = v361;
      float v170 = v362;
      float v171 = v363;
      float v172 = v364;
      float v173 = v365;
      float v174 = v366;
      float v175 = v367;
      float v176 = v368;
      float v177 = (float)((float)(v360 * v179.f32[0]) + vmuls_lane_f32(v363, *(float32x2_t *)v179.f32, 1))
           + vmuls_lane_f32(v366, v340, 2);
      float v178 = (float)((float)(v361 * v340.f32[0]) + vmuls_lane_f32(v364, *(float32x2_t *)v340.f32, 1))
           + vmuls_lane_f32(v367, v340, 2);
      v179.f32[0] = (float)((float)(v362 * v340.f32[0]) + vmuls_lane_f32(v365, *(float32x2_t *)v340.f32, 1))
                  + vmuls_lane_f32(v368, v340, 2);
    }
    else
    {
      physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(v16, _X1, v340.f32, v267, _X1[3]);
      float v168 = v360;
      float v169 = v361;
      float v170 = v362;
      float v171 = v363;
      float v172 = v364;
      float v173 = v365;
      float v174 = v366;
      float v175 = v367;
      float v176 = v368;
      float v177 = (float)((float)(v340.f32[0] * v360) + (float)(v340.f32[1] * v363)) + (float)(v340.f32[2] * v366);
      float v178 = (float)((float)(v340.f32[0] * v361) + (float)(v340.f32[1] * v364)) + (float)(v340.f32[2] * v367);
      v179.f32[0] = (float)((float)(v340.f32[0] * v362) + (float)(v340.f32[1] * v365)) + (float)(v340.f32[2] * v368);
    }
    float32_t v279 = v179.f32[0];
    float v280 = v177;
    v341[0] = v177;
    float v278 = v178;
    v341[1] = v178;
    v341[2] = v179.f32[0];
    unsigned int v284 = v147;
    if (v289)
    {
      long long v337 = *(_OWORD *)_X20;
      *(float32x2_t *)v179.f32 = vadd_f32(vmul_n_f32(v351, *(float *)&v337), vmul_lane_f32(v353, *(float32x2_t *)&v337, 1));
      float v180 = (float)(v352 * *(float *)&v337) + vmuls_lane_f32(v354, *(float32x2_t *)&v337, 1);
    }
    else
    {
      float v181 = _X20[3];
      float v276 = v171;
      physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(v274, (float *)(v159 + 20 * v147), (float *)&v337, v266, v181);
      float v171 = v276;
      *(float32x2_t *)v179.f32 = vadd_f32(vmul_n_f32(v351, *(float *)&v337), vmul_n_f32(v353, *((float *)&v337 + 1)));
      float v180 = (float)(*(float *)&v337 * v352) + (float)(*((float *)&v337 + 1) * v354);
    }
    float32x2_t v182 = 0;
    float32x2_t v183 = 0;
    *(float32x2_t *)v179.f32 = vadd_f32(*(float32x2_t *)v179.f32, vmul_n_f32(v355, *((float *)&v337 + 2)));
    float32x4_t v275 = v179;
    uint64_t v338 = v179.i64[0];
    float v276 = v180 + (float)(*((float *)&v337 + 2) * v356);
    float v339 = v276;
    float v277 = v277 + v12[1];
    float v334 = -(float)(v277 * v287);
    float v335 = -(float)(v277 * v285);
    float v336 = -(float)(v277 * v286);
    float v322 = v168;
    float v323 = v169;
    float v324 = v170;
    float v325 = v171;
    float v326 = v172;
    float v327 = v173;
    float v328 = v174;
    float v329 = v175;
    float v330 = v176;
    float v331 = v369 - v334;
    float v332 = v370 - v335;
    float v333 = v371 - v336;
    float v184 = v273[1];
    float v185 = v273[2];
    float v186 = v273[3];
    float v187 = a6[1];
    float v188 = a6[2];
    float v189 = a6[3];
    float v190 = a6[4];
    float v191 = a6[5];
    float v192 = a6[6];
    float v193 = (float)(v331 - v190) + (float)(v331 - v190);
    float v194 = (float)(v332 - v191) + (float)(v332 - v191);
    float v195 = (float)(v333 - v192) + (float)(v333 - v192);
    float v196 = (float)(v189 * v189) + -0.5;
    float v197 = (float)((float)-(float)(v187 * v194) - (float)(*a6 * v193)) - (float)(v188 * v195);
    float v198 = (float)((float)(v189 * (float)((float)(v188 * v194) - (float)(v187 * v195))) + (float)(v193 * v196))
         - (float)(*a6 * v197);
    float v199 = (float)((float)(v189 * (float)((float)(*a6 * v195) - (float)(v188 * v193))) + (float)(v194 * v196))
         - (float)(v187 * v197);
    float v200 = (float)((float)(v189 * (float)((float)(v187 * v193) - (float)(*a6 * v194))) + (float)(v195 * v196))
         - (float)(v188 * v197);
    float v201 = (float)((float)((float)(v189 * *v273) - (float)(*a6 * v186)) - (float)(v187 * v185)) + (float)(v184 * v188);
    float v202 = (float)((float)((float)(v189 * v184) - (float)(v187 * v186)) - (float)(v188 * *v273)) + (float)(v185 * *a6);
    float v203 = (float)((float)((float)(v189 * v185) - (float)(v188 * v186)) - (float)(*a6 * v184)) + (float)(*v273 * v187);
    float v204 = (float)((float)((float)(*v273 * *a6) + (float)(v189 * v186)) + (float)(v187 * v184)) + (float)(v188 * v185);
    float v205 = (float)(v190 - v331) + (float)(v190 - v331);
    float v206 = (float)(v191 - v332) + (float)(v191 - v332);
    float v207 = (float)(v192 - v333) + (float)(v192 - v333);
    float v208 = (float)(v186 * v186) + -0.5;
    float v209 = (float)((float)-(float)(v184 * v206) - (float)(*v273 * v205)) - (float)(v185 * v207);
    float v210 = (float)((float)(v186 * (float)((float)(v185 * v206) - (float)(v184 * v207))) + (float)(v205 * v208))
         - (float)(*v273 * v209);
    float v211 = (float)((float)(v186 * (float)((float)(*v273 * v207) - (float)(v185 * v205))) + (float)(v206 * v208))
         - (float)(v184 * v209);
    float v212 = (float)(v186 * (float)((float)(v184 * v205) - (float)(*v273 * v206))) + (float)(v207 * v208);
    float v213 = (float)((float)((float)(v186 * *a6) - (float)(*v273 * v189)) - (float)(v184 * v188)) + (float)(v187 * v185);
    float v214 = (float)((float)((float)(v186 * v187) - (float)(v184 * v189)) - (float)(v185 * *a6)) + (float)(v188 * *v273);
    float v215 = (float)((float)((float)(v186 * v188) - (float)(v185 * v189)) - (float)(*v273 * v187)) + (float)(*a6 * v184);
    float v216 = v201 + v201;
    float v217 = v202 + v202;
    float v218 = v203 + v203;
    float v219 = v201 * (float)(v201 + v201);
    float v220 = v202 * (float)(v202 + v202);
    float v221 = v203 * (float)(v203 + v203);
    float v222 = v202 * (float)(v201 + v201);
    float v223 = v203 * v216;
    float v224 = v204 * v216;
    float v225 = v203 * v217;
    float v226 = v204 * v217;
    float v227 = v204 * v218;
    float v228 = 1.0 - v219;
    float v310 = (float)(1.0 - v220) - v221;
    float v311 = v222 + v227;
    float v312 = v223 - v226;
    float v313 = v222 - v227;
    float v314 = v228 - v221;
    float v315 = v225 + v224;
    float v316 = v223 + v226;
    float v317 = v225 - v224;
    float v318 = v228 - v220;
    float v319 = v198;
    float v320 = v199;
    float v321 = v200;
    float v229 = v215 + v215;
    float v230 = v214 * (float)(v214 + v214);
    float v231 = v215 * (float)(v215 + v215);
    float v232 = v214 * (float)(v213 + v213);
    float v233 = v215 * (float)(v213 + v213);
    float v234 = v204 * (float)(v213 + v213);
    float v235 = v215 * (float)(v214 + v214);
    float v236 = v204 * (float)(v214 + v214);
    float v237 = v204 * v229;
    float v238 = 1.0 - (float)(v213 * (float)(v213 + v213));
    float v298 = (float)(1.0 - v230) - v231;
    float v299 = v232 + v237;
    float v300 = v233 - v236;
    float v301 = v232 - v237;
    float v302 = v238 - v231;
    float v303 = v235 + v234;
    float v304 = v233 + v236;
    float v305 = v235 - v234;
    float v306 = v238 - v230;
    float v307 = v210;
    float v308 = v211;
    float v309 = v212 - (float)(v185 * v209);
    float32x4_t v296 = 0;
    uint64_t v297 = 0;
    if ((v288 & 1) == 0)
    {
      MEMORY[0x270FA5388](v149);
      float32x2_t v182 = (char *)&v265 - v239;
      bzero((char *)&v265 - v239, v240);
      MEMORY[0x270FA5388](v241);
      float32x2_t v183 = (char *)&v265 - v242;
      bzero((char *)&v265 - v242, v243);
    }
    unsigned int v244 = v284;
    uint64_t v245 = v157 + 20 * v145;
    int v247 = *(unsigned __int8 *)(v245 + 18);
    float32x4_t v246 = (unsigned __int8 *)(v245 + 18);
    physx::Gu::getScaledConvex(&v297, &v296, (uint64_t)v182, (uint64_t)v183, v288, *(void *)(v282 + 32), *(void *)(v282 + 40) + *((unsigned __int16 *)v246 - 1), v247, (uint64_t)v283);
    int v249 = 0;
    int v250 = 0;
    float32x2_t v294 = 0;
    uint64_t v295 = 0;
    if ((v289 & 1) == 0)
    {
      MEMORY[0x270FA5388](v248);
      int v249 = (char *)&v265 - v251;
      bzero((char *)&v265 - v251, v252);
      MEMORY[0x270FA5388](v253);
      int v250 = (char *)&v265 - v254;
      bzero((char *)&v265 - v254, v255);
    }
    float v256 = fabsf((float)((float)(v285 * v278) + (float)(v280 * v287)) + (float)(v279 * v286));
    float v257 = fabsf(vmlas_n_f32(vmuls_lane_f32(v285, *(float32x2_t *)v275.f32, 1), v287, v275.f32[0]) + (float)(v276 * v286));
    uint64_t v14 = v271;
    uint64_t v258 = v159 + 20 * v244;
    int v260 = *(unsigned __int8 *)(v258 + 18);
    uint64_t v259 = (unsigned __int8 *)(v258 + 18);
    float32x2_t v17 = v274;
    physx::Gu::getScaledConvex(&v295, &v294, (uint64_t)v249, (uint64_t)v250, v289, *(void *)(v271 + 32), *(void *)(v271 + 40) + *((unsigned __int16 *)v259 - 1), v260, (uint64_t)v274);
    physx::Gu::findRotationMatrixFromZ(&v291, v340.f32);
    physx::Gu::findRotationMatrixFromZ(v290, (float *)&v337);
    if (v256 <= v257) {
      break;
    }
    char v261 = physx::Gu::contactPolygonPolygonExt(*v246, v297, v296, (uint64_t)&v322, v340.f32, &v291, *v259, v295, v277, v294, (uint64_t)&v351, (float *)&v337, v290, v341, (uint64_t)&v310, &v298, -1, v272, 1u,
             (uint64_t)&v334);
    int8x16_t v16 = v283;
    if (v261) {
      goto LABEL_43;
    }
LABEL_40:
    int v146 = v281 + 1;
    double v12 = v270;
    uint64_t v15 = v282;
    unsigned int v147 = v284;
    if (!v281)
    {
      int v264 = 0;
      return v264 & v262;
    }
  }
  int v263 = physx::Gu::contactPolygonPolygonExt(*v259, v295, v294, (uint64_t)&v351, (float *)&v337, v290, *v246, v297, v277, v296, (uint64_t)&v322, v340.f32, &v291, (float *)&v338, (uint64_t)&v298, &v310, -1, v272, 0,
           (uint64_t)&v334);
  int8x16_t v16 = v283;
  if (!v263) {
    goto LABEL_40;
  }
LABEL_43:
  int v264 = 1;
  int v262 = 1;
  return v264 & v262;
}

uint64_t physx::Gu::contactConvexConvex(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  v22[0] = xmmword_23435FD50;
  v22[1] = xmmword_23435FD50;
  v22[2] = xmmword_234376D80;
  v22[3] = xmmword_23435FD60;
  uint64_t v23 = 0x3F80000000000000;
  char v24 = 0;
  v19[0] = xmmword_23435FD50;
  v19[1] = xmmword_23435FD50;
  v19[2] = xmmword_234376D80;
  v19[3] = xmmword_23435FD60;
  uint64_t v20 = 0x3F80000000000000;
  char v21 = 0;
  unsigned __int8 ConvexData = physx::Gu::getConvexData(a1, (uint64_t)v22, (uint64_t)v18, (uint64_t)v16);
  unsigned __int8 v13 = physx::Gu::getConvexData(a2, (uint64_t)v19, (uint64_t)v17, (uint64_t)v15);
  return GuContactHullHull((uint64_t)v16, v15, (uint64_t)v18, (uint64_t)v17, a3, a4, a5, a7, (uint64_t)v22, (float *)v19, ConvexData, v13);
}

BOOL physx::Gu::contactConvexMesh(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float v14 = a2[1];
  float v15 = a2[2];
  unsigned __int8 v13 = a2 + 1;
  char v17 = v14 == 1.0 && v15 == 1.0 && a2[3] == 1.0;
  long long v18 = xmmword_23435FD50;
  v28[0] = xmmword_23435FD50;
  v28[1] = xmmword_23435FD50;
  long long v19 = xmmword_234376D80;
  long long v20 = xmmword_23435FD60;
  _OWORD v28[2] = xmmword_234376D80;
  v28[3] = xmmword_23435FD60;
  uint64_t v29 = 0x3F80000000000000;
  char v30 = 0;
  if ((v17 & 1) == 0)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v28, v13, a2 + 4);
    long long v20 = xmmword_23435FD60;
    long long v19 = xmmword_234376D80;
    long long v18 = xmmword_23435FD50;
  }
  v25[0] = v18;
  v25[1] = v18;
  v25[2] = v19;
  v25[3] = v20;
  uint64_t v26 = 0x3F80000000000000;
  char v27 = 0;
  char ConvexData = physx::Gu::getConvexData(a1, (uint64_t)v25, (uint64_t)v24, (uint64_t)v23);
  return contactHullMesh2((uint64_t)v23, (uint64_t)v24, (uint64_t)a2, a3, a4, a5, a7, (uint64_t)v25, (uint64_t)v28, ConvexData, v17);
}

BOOL contactHullMesh2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  double v11 = MEMORY[0x270FA5388](a1);
  float v76 = v12;
  uint64_t v77 = v13;
  uint64_t v15 = v14;
  char v17 = v16;
  long long v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v98 = *MEMORY[0x263EF8340];
  LODWORD(v11) = *(_DWORD *)v20;
  float v24 = *(float *)(v20 + 4);
  float v25 = *(float *)(v20 + 8);
  float v26 = *(float *)(v20 + 12);
  float v27 = v24 * (float)(v24 + v24);
  float v28 = v25 * (float)(v25 + v25);
  float v29 = (float)(*(float *)&v11 + *(float *)&v11) * v24;
  float v30 = (float)(*(float *)&v11 + *(float *)&v11) * v25;
  float v31 = (float)(*(float *)&v11 + *(float *)&v11) * v26;
  float v32 = (float)(v24 + v24) * v25;
  float v33 = (float)(v24 + v24) * v26;
  float v34 = (float)(v25 + v25) * v26;
  v86[0] = (float)(1.0 - v27) - v28;
  v86[1] = v29 + v34;
  float v35 = 1.0 - (float)(*(float *)&v11 * (float)(*(float *)&v11 + *(float *)&v11));
  v86[2] = v30 - v33;
  void v86[3] = v29 - v34;
  v86[4] = v35 - v28;
  v86[5] = v32 + v31;
  float v36 = v35 - v27;
  v86[6] = v30 + v33;
  v86[7] = v32 - v31;
  float v37 = *(float *)(v20 + 16);
  float v38 = *(float *)(v20 + 20);
  v86[8] = v36;
  v86[9] = v37;
  float v39 = *(float *)(v20 + 24);
  v86[10] = v38;
  v86[11] = v39;
  float v40 = *v18;
  float v41 = v18[1];
  float v42 = v18[2];
  float v43 = v18[3];
  float v44 = v41 * (float)(v41 + v41);
  float v45 = v42 * (float)(v42 + v42);
  float v46 = (float)(v40 + v40) * v41;
  float v47 = (float)(v40 + v40) * v42;
  float v48 = (float)(v40 + v40) * v43;
  float v49 = (float)(v41 + v41) * v42;
  float v50 = (float)(v41 + v41) * v43;
  float v51 = (float)(v42 + v42) * v43;
  v85[0] = (float)(1.0 - v44) - v45;
  v85[1] = v46 + v51;
  float v52 = 1.0 - (float)(v40 * (float)(v40 + v40));
  v85[2] = v47 - v50;
  v85[3] = v46 - v51;
  v85[4] = v52 - v45;
  v85[5] = v49 + v48;
  v85[6] = v47 + v50;
  v85[7] = v49 - v48;
  float v53 = v18[4];
  float v54 = v18[5];
  v85[8] = v52 - v44;
  v85[9] = v53;
  float v55 = v18[6];
  v85[10] = v54;
  v85[11] = v55;
  float v56 = (float)(v37 - v53) + (float)(v37 - v53);
  float v57 = (float)(v38 - v54) + (float)(v38 - v54);
  float v58 = (float)(v39 - v55) + (float)(v39 - v55);
  float v59 = (float)(v43 * v43) + -0.5;
  float v60 = (float)((float)-(float)(v41 * v57) - (float)(v40 * v56)) - (float)(v42 * v58);
  v80[0] = (float)((float)((float)(v43 * *(float *)&v11) - (float)(v40 * v26)) - (float)(v41 * v25))
         + (float)(v24 * v42);
  v80[1] = (float)((float)((float)(v43 * v24) - (float)(v41 * v26)) - (float)(v42 * *(float *)&v11))
         + (float)(v25 * v40);
  v80[2] = (float)((float)((float)(v43 * v25) - (float)(v42 * v26)) - (float)(v40 * v24))
         + (float)(*(float *)&v11 * v41);
  float v81 = (float)((float)((float)(*(float *)&v11 * v40) + (float)(v43 * v26)) + (float)(v41 * v24)) + (float)(v42 * v25);
  float v82 = (float)((float)(v43 * (float)((float)(v42 * v57) - (float)(v41 * v58))) + (float)(v56 * v59))
      - (float)(v40 * v60);
  float v83 = (float)((float)(v43 * (float)((float)(v40 * v58) - (float)(v42 * v56))) + (float)(v57 * v59))
      - (float)(v41 * v60);
  float v84 = (float)((float)(v43 * (float)((float)(v41 * v56) - (float)(v40 * v57))) + (float)(v58 * v59))
      - (float)(v42 * v60);
  float v61 = (float)(v53 - v37) + (float)(v53 - v37);
  float v62 = (float)(v54 - v38) + (float)(v54 - v38);
  float v63 = (float)(v55 - v39) + (float)(v55 - v39);
  float v64 = (float)(v26 * v26) + -0.5;
  float v65 = (float)((float)-(float)(v24 * v62) - (float)(*(float *)&v11 * v61)) - (float)(v25 * v63);
  v79[0] = (float)((float)((float)(v26 * v40) - (float)(*(float *)&v11 * v43)) - (float)(v24 * v42))
         + (float)(v41 * v25);
  v79[1] = (float)((float)((float)(v26 * v41) - (float)(v24 * v43)) - (float)(v25 * v40))
         + (float)(v42 * *(float *)&v11);
  v79[2] = (float)((float)((float)(v26 * v42) - (float)(v25 * v43)) - (float)(*(float *)&v11 * v41))
         + (float)(v40 * v24);
  v79[3] = v81;
  v79[4] = (float)((float)(v26 * (float)((float)(v25 * v62) - (float)(v24 * v63))) + (float)(v61 * v64))
         - (float)(*(float *)&v11 * v65);
  v79[5] = (float)((float)(v26 * (float)((float)(*(float *)&v11 * v63) - (float)(v25 * v61))) + (float)(v62 * v64))
         - (float)(v24 * v65);
  v79[6] = (float)((float)(v26 * (float)((float)(v24 * v61) - (float)(*(float *)&v11 * v62))) + (float)(v63 * v64))
         - (float)(v25 * v65);
  *(float *)&double v11 = *v16;
  physx::Gu::computeHullOBB(v78, v66, v86, v85, a9, a11, v11);
  uint64_t v67 = *(void *)(v23 + 48);
  uint64_t v97 = 0x44000000000;
  v95[4352] = 1;
  float v96 = v95;
  uint64_t v68 = *(void *)(v67 + 80);
  float v70 = v17[1];
  float v69 = v17[2];
  float v71 = *v17;
  int v88 = 2;
  float v87 = &unk_26E728DA0;
  *((void *)&v75 + 1) = v19;
  *(void *)&long long v75 = v21;
  uint64_t v90 = a9;
  uint64_t v91 = v68;
  char v92 = a11;
  uint64_t v93 = v67;
  float v94 = v78;
  ((void (*)(uint64_t, float *, void **, void, uint64_t, float))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v67 + 8) - 3])(v67, v78, &v87, 0, 1, v72);
  int v73 = v89[2256];
  if ((v97 & 0x8000000000000000) == 0 && (v97 & 0x7FFFFFFF00000000) != 0 && v96 != v95 && v96) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v73 != 0;
}

BOOL physx::Gu::contactBoxMesh(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, int32x4_t a7, uint64_t a8, uint64_t a9)
{
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v31, (uint64_t)(a1 + 1), a6, a7);
  physx::Gu::PolygonalBox::getPolygonalData(v31, (uint64_t)v32);
  float v15 = a1[1];
  float v16 = a1[2];
  float v17 = a1[3];
  v30[0] = -v15;
  v30[1] = -v16;
  v30[2] = -v17;
  v30[3] = v15;
  v30[4] = v16;
  v30[5] = v17;
  char v19 = a2[1] == 1.0 && a2[2] == 1.0 && a2[3] == 1.0;
  long long v20 = xmmword_23435FD50;
  v27[0] = xmmword_23435FD50;
  v27[1] = xmmword_23435FD50;
  long long v21 = xmmword_234376D80;
  long long v22 = xmmword_23435FD60;
  v27[2] = xmmword_234376D80;
  v27[3] = xmmword_23435FD60;
  uint64_t v28 = 0x3F80000000000000;
  char v29 = 0;
  if ((v19 & 1) == 0)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v27, a2 + 1, a2 + 4);
    long long v22 = xmmword_23435FD60;
    long long v21 = xmmword_234376D80;
    long long v20 = xmmword_23435FD50;
  }
  v24[0] = v20;
  v24[1] = v20;
  v24[2] = v21;
  float32x4_t v24[3] = v22;
  uint64_t v25 = 0x3F80000000000000;
  char v26 = 0;
  return contactHullMesh2((uint64_t)v32, (uint64_t)v30, (uint64_t)a2, a3, a4, a5, a9, (uint64_t)v24, (uint64_t)v27, 1, v19);
}

BOOL physx::Gu::contactConvexHeightfield(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const float *a5, uint64_t a6, uint64_t a7)
{
  v19[0] = xmmword_23435FD50;
  v19[1] = xmmword_23435FD50;
  v19[2] = xmmword_234376D80;
  v19[3] = xmmword_23435FD60;
  uint64_t v20 = 0x3F80000000000000;
  char v21 = 0;
  char ConvexData = physx::Gu::getConvexData(a1, (uint64_t)v19, (uint64_t)&v17, (uint64_t)v16);
  float32x4_t v13 = vld1q_dup_f32(a5);
  float32x4_t v14 = vsubq_f32(v17, v13);
  v14.i32[3] = vaddq_f32(v17, v13).i32[3];
  float32x4_t v17 = v14;
  float32x2_t v18 = vadd_f32(*(float32x2_t *)v13.f32, v18);
  return contactHullHeightfield2((uint64_t)v16, (uint64_t)&v17, a2, a3, a4, (uint64_t)a5, a7, (uint64_t)v19, ConvexData);
}

BOOL contactHullHeightfield2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  MEMORY[0x270FA5388](a1);
  float32x4_t v10 = v9;
  double v12 = v11;
  uint64_t v125 = *MEMORY[0x263EF8340];
  float32x2_t v117 = v13[1];
  float v118 = v13;
  float v14 = v13[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  int32x2_t v115 = vrev64_s32((int32x2_t)vdiv_f32(_D2, v13[2]));
  float v116 = 1.0 / v14;
  float v21 = *(float *)v20;
  _D2.i32[0] = *(_DWORD *)(v20 + 4);
  float v22 = *(float *)(v20 + 8);
  float v23 = *(float *)(v20 + 12);
  float v24 = _D2.f32[0] * (float)(_D2.f32[0] + _D2.f32[0]);
  float v25 = v22 * (float)(v22 + v22);
  float v26 = (float)(v21 + v21) * _D2.f32[0];
  float v27 = (float)(v21 + v21) * v22;
  float v28 = (float)(v21 + v21) * v23;
  float v29 = (float)(_D2.f32[0] + _D2.f32[0]) * v22;
  float v30 = (float)(_D2.f32[0] + _D2.f32[0]) * v23;
  float v31 = (float)(v22 + v22) * v23;
  v114[0] = (float)(1.0 - v24) - v25;
  v114[1] = v26 + v31;
  float v32 = 1.0 - (float)(v21 * (float)(v21 + v21));
  v114[2] = v27 - v30;
  v114[3] = v26 - v31;
  v114[4] = v32 - v25;
  v114[5] = v29 + v28;
  float v33 = v32 - v24;
  v114[6] = v27 + v30;
  v114[7] = v29 - v28;
  float v34 = *(float *)(v20 + 16);
  float v35 = *(float *)(v20 + 20);
  v114[8] = v33;
  v114[9] = v34;
  float v36 = *(float *)(v20 + 24);
  v114[10] = v35;
  v114[11] = v36;
  float v37 = *v9;
  float v38 = v9[1];
  float v39 = v9[2];
  float v40 = v9[3];
  float v41 = v38 * (float)(v38 + v38);
  float v42 = v39 * (float)(v39 + v39);
  float v43 = (float)(v37 + v37) * v38;
  float v44 = (float)(v37 + v37) * v39;
  float v45 = (float)(v37 + v37) * v40;
  float v46 = (float)(v38 + v38) * v39;
  float v47 = (float)(v38 + v38) * v40;
  float v48 = (float)(v39 + v39) * v40;
  v113[0] = (float)(1.0 - v41) - v42;
  v113[1] = v43 + v48;
  float v49 = 1.0 - (float)(v37 * (float)(v37 + v37));
  v113[2] = v44 - v47;
  v113[3] = v43 - v48;
  v113[4] = v49 - v42;
  v113[5] = v46 + v45;
  v113[6] = v44 + v47;
  v113[7] = v46 - v45;
  float v50 = v9[4];
  float v51 = v9[5];
  v113[8] = v49 - v41;
  v113[9] = v50;
  float v52 = v9[6];
  v113[10] = v51;
  v113[11] = v52;
  float v53 = (float)(v34 - v50) + (float)(v34 - v50);
  float v54 = (float)(v35 - v51) + (float)(v35 - v51);
  float v55 = (float)(v36 - v52) + (float)(v36 - v52);
  float v56 = (float)(v40 * v40) + -0.5;
  float v57 = (float)((float)-(float)(v38 * v54) - (float)(v37 * v53)) - (float)(v39 * v55);
  float v58 = (float)((float)(v40 * (float)((float)(v39 * v54) - (float)(v38 * v55))) + (float)(v53 * v56))
      - (float)(v37 * v57);
  float v59 = (float)((float)(v40 * (float)((float)(v37 * v55) - (float)(v39 * v53))) + (float)(v54 * v56))
      - (float)(v38 * v57);
  float v60 = (float)((float)(v40 * (float)((float)(v38 * v53) - (float)(v37 * v54))) + (float)(v55 * v56))
      - (float)(v39 * v57);
  float v61 = (float)((float)((float)(v40 * v21) - (float)(v37 * v23)) - (float)(v38 * v22)) + (float)(_D2.f32[0] * v39);
  float v62 = (float)((float)((float)(v40 * _D2.f32[0]) - (float)(v38 * v23)) - (float)(v39 * v21)) + (float)(v22 * v37);
  float v63 = (float)((float)((float)(v40 * v22) - (float)(v39 * v23)) - (float)(v37 * _D2.f32[0])) + (float)(v21 * v38);
  float v64 = (float)((float)((float)(v21 * v37) + (float)(v40 * v23)) + (float)(v38 * _D2.f32[0])) + (float)(v39 * v22);
  v112[0] = v61;
  v112[1] = v62;
  v112[2] = v63;
  v112[3] = v64;
  v112[4] = v58;
  v112[5] = v59;
  v112[6] = v60;
  float v65 = (float)(v50 - v34) + (float)(v50 - v34);
  float v66 = (float)(v51 - v35) + (float)(v51 - v35);
  float v67 = (float)(v52 - v36) + (float)(v52 - v36);
  float v68 = (float)(v23 * v23) + -0.5;
  float v69 = (float)((float)-(float)(_D2.f32[0] * v66) - (float)(v21 * v65)) - (float)(v22 * v67);
  v111[0] = (float)((float)((float)(v23 * v37) - (float)(v21 * v40)) - (float)(_D2.f32[0] * v39)) + (float)(v38 * v22);
  v111[1] = (float)((float)((float)(v23 * v38) - (float)(_D2.f32[0] * v40)) - (float)(v22 * v37)) + (float)(v39 * v21);
  v111[2] = (float)((float)((float)(v23 * v39) - (float)(v22 * v40)) - (float)(v21 * v38)) + (float)(v37 * _D2.f32[0]);
  v111[3] = v64;
  v111[4] = (float)((float)(v23 * (float)((float)(v22 * v66) - (float)(_D2.f32[0] * v67))) + (float)(v65 * v68))
          - (float)(v21 * v69);
  v111[5] = (float)((float)(v23 * (float)((float)(v21 * v67) - (float)(v22 * v65))) + (float)(v66 * v68))
          - (float)(_D2.f32[0] * v69);
  v111[6] = (float)((float)(v23 * (float)((float)(_D2.f32[0] * v65) - (float)(v21 * v66))) + (float)(v67 * v68))
          - (float)(v22 * v69);
  uint64_t v124 = 0x44000000000;
  v122[4352] = 1;
  float v123 = v122;
  _D2.f32[0] = v70[1];
  float v71 = v70[2];
  float v72 = *v70;
  float v119 = &unk_26E728DF0;
  *((void *)&v109 + 1) = v9;
  *(void *)&long long v109 = v20;
  float v121 = &v115;
  float v76 = v12[1];
  float v78 = v12[2];
  float v77 = v12[3];
  float v79 = v12[4];
  float v80 = v12[5];
  float v81 = (float)((float)(*v12 + v77) * 0.5) + (float)((float)(*v12 + v77) * 0.5);
  float v82 = (float)((float)(v76 + v79) * 0.5) + (float)((float)(v76 + v79) * 0.5);
  float v83 = (float)((float)(v78 + v80) * 0.5) + (float)((float)(v78 + v80) * 0.5);
  float v84 = (float)(v64 * v64) + -0.5;
  float v85 = (float)((float)(v62 * v82) + (float)(v61 * v81)) + (float)(v63 * v83);
  float v86 = (float)((float)(v64 * (float)((float)(v62 * v83) - (float)(v63 * v82))) + (float)(v81 * v84))
      + (float)(v61 * v85);
  float v87 = (float)((float)(v64 * (float)((float)(v63 * v81) - (float)(v61 * v83))) + (float)(v82 * v84))
      + (float)(v62 * v85);
  float v88 = (float)((float)(v64 * (float)((float)(v61 * v82) - (float)(v62 * v81))) + (float)(v83 * v84))
      + (float)(v63 * v85);
  float v89 = v58 + v86;
  float v90 = v59 + v87;
  float v91 = v60 + v88;
  float v92 = v62 * (float)(v62 + v62);
  float v93 = v63 * (float)(v63 + v63);
  float v94 = v62 * (float)(v61 + v61);
  float v95 = v63 * (float)(v61 + v61);
  float v96 = v64 * (float)(v61 + v61);
  float v97 = v63 * (float)(v62 + v62);
  float v98 = v64 * (float)(v62 + v62);
  float v99 = v64 * (float)(v63 + v63);
  float v100 = 1.0 - (float)(v61 * (float)(v61 + v61));
  float v101 = (float)(v77 - *v12) * 0.5;
  float v102 = (float)(v79 - v76) * 0.5;
  float v103 = (float)(v80 - v78) * 0.5;
  float v104 = (float)(fabsf((float)((float)(1.0 - v92) - v93) * v101) + fabsf((float)(v94 - v99) * v102))
       + fabsf((float)(v95 + v98) * v103);
  float v105 = (float)(fabsf((float)(v94 + v99) * v101) + fabsf((float)(v100 - v93) * v102))
       + fabsf((float)(v97 - v96) * v103);
  float v106 = (float)(fabsf((float)(v95 - v98) * v101) + fabsf((float)(v96 + v97) * v102))
       + fabsf((float)(v100 - v92) * v103);
  v110[0] = v89 - v104;
  v110[1] = v90 - v105;
  void v110[2] = v91 - v106;
  v110[3] = v104 + v89;
  v110[4] = v105 + v90;
  v110[5] = v106 + v91;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v115, v10, v110, 0, (uint64_t)&v119);
  int v107 = v120[2256];
  if ((v124 & 0x8000000000000000) == 0 && (v124 & 0x7FFFFFFF00000000) != 0 && v123 != v122 && v123) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  return v107 != 0;
}

BOOL physx::Gu::contactBoxHeightfield(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, double a6, int32x4_t a7, uint64_t a8, uint64_t a9)
{
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v23, (uint64_t)(a1 + 1), a6, a7);
  physx::Gu::PolygonalBox::getPolygonalData(v23, (uint64_t)v24);
  float v15 = *a5 + a1[1];
  float v16 = *a5 + a1[2];
  float v17 = *a5 + a1[3];
  v22[0] = -v15;
  v22[1] = -v16;
  v22[2] = -v17;
  v22[3] = v15;
  _OWORD v22[4] = v16;
  v22[5] = v17;
  v19[0] = xmmword_23435FD50;
  v19[1] = xmmword_23435FD50;
  v19[2] = xmmword_234376D80;
  v19[3] = xmmword_23435FD60;
  uint64_t v20 = 0x3F80000000000000;
  char v21 = 0;
  return contactHullHeightfield2((uint64_t)v24, (uint64_t)v22, a2, a3, a4, (uint64_t)a5, a9, (uint64_t)v19, 1);
}

BOOL physx::Gu::contactPlaneBox(uint64_t a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7 = *a3;
  float v8 = a3[1];
  float v9 = a3[2];
  float v10 = a3[3];
  float v11 = -(float)((float)((float)(v10 * (float)(v10 + v10)) + -1.0) + (float)(v7 * (float)(v7 + v7)));
  float v12 = -(float)((float)((float)(v7 + v7) * v8) + (float)(v9 * (float)(v10 + v10)));
  float v13 = -(float)((float)((float)(v7 + v7) * v9) + (float)((float)-v8 * (float)(v10 + v10)));
  float v14 = *a4;
  float v15 = a4[1];
  float v16 = a4[2];
  float v17 = a4[3];
  float v18 = v15 * (float)(v15 + v15);
  float v19 = v16 * (float)(v16 + v16);
  float v20 = (float)(v14 + v14) * v15;
  float v21 = (float)(v14 + v14) * v16;
  float v22 = (float)(v14 + v14) * v17;
  float v23 = (float)(v15 + v15) * v16;
  float v24 = (float)(v15 + v15) * v17;
  float v25 = (float)(v16 + v16) * v17;
  float v26 = (float)(1.0 - v18) - v19;
  float v27 = v20 + v25;
  float v28 = v21 - v24;
  float v29 = v20 - v25;
  float v30 = 1.0 - (float)(v14 * (float)(v14 + v14));
  float v31 = v30 - v19;
  float v32 = v23 + v22;
  float v33 = v21 + v24;
  float v34 = v23 - v22;
  float v35 = v30 - v18;
  float v36 = a4[4];
  float v37 = a4[5];
  float v38 = a4[6];
  float v39 = (float)(v36 - a3[4]) + (float)(v36 - a3[4]);
  float v40 = (float)(v37 - a3[5]) + (float)(v37 - a3[5]);
  float v41 = (float)(v38 - a3[6]) + (float)(v38 - a3[6]);
  float v42 = (float)((float)(v10 * (float)((float)(v9 * v40) - (float)(v8 * v41)))
              + (float)(v39 * (float)((float)(v10 * v10) + -0.5)))
      - (float)(*a3 * (float)((float)((float)-(float)(v8 * v40) - (float)(*a3 * v39)) - (float)(v9 * v41)));
  float v43 = (float)((float)((float)(v10 * *a4) - (float)(*a3 * v17)) - (float)(v8 * v16)) + (float)(v15 * v9);
  float v44 = (float)((float)((float)(v10 * v15) - (float)(v8 * v17)) - (float)(v9 * *a4)) + (float)(v16 * *a3);
  float v45 = (float)((float)((float)(v10 * v16) - (float)(v9 * v17)) - (float)(*a3 * v15)) + (float)(*a4 * v8);
  float v46 = (float)((float)((float)(*a3 * *a4) + (float)(v10 * v17)) + (float)(v8 * v15)) + (float)(v9 * v16);
  float v47 = (float)(1.0 - (float)(v44 * (float)(v44 + v44))) - (float)(v45 * (float)(v45 + v45));
  float v48 = (float)(v44 * (float)(v43 + v43)) - (float)(v46 * (float)(v45 + v45));
  float v49 = (float)(v45 * (float)(v43 + v43)) + (float)(v46 * (float)(v44 + v44));
  float v50 = *a5;
  float v51 = *a5 - v42;
  float v52 = a2[1];
  float v53 = a2[2];
  float v54 = a2[3];
  float v55 = v47 * v52;
  float v56 = v48 * v53;
  float v57 = v49 * v54;
  float v58 = (float)(v47 * v52) + v56;
  if (v79 < 0)
  {
    uint64_t v59 = *(unsigned int *)(a7 + 4096);
    if (v59 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v59 + 1;
      uint64_t v60 = a7 + (v59 << 6);
      *(float *)uint64_t v60 = v11;
      *(float *)(v60 + 4) = v12;
      *(float *)(v60 + 16) = v36 + (float)((float)((float)(v26 * v52) + (float)(v29 * v53)) + (float)(v33 * v54));
      *(float *)(v60 + 20) = v37 + (float)((float)((float)(v27 * v52) + (float)(v31 * v53)) + (float)(v34 * v54));
      *(float *)(v60 + 24) = v38 + (float)((float)((float)(v28 * v52) + (float)(v32 * v53)) + (float)(v35 * v54));
      *(float *)(v60 + 8) = v13;
      *(float *)(v60 + 12) = v50 + (float)((float)(v58 + v57) - v51);
      *(_DWORD *)(v60 + 52) = -1;
    }
  }
  if (v80 < 0)
  {
    uint64_t v61 = *(unsigned int *)(a7 + 4096);
    if (v61 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v61 + 1;
      uint64_t v62 = a7 + (v61 << 6);
      *(float *)uint64_t v62 = v11;
      *(float *)(v62 + 4) = v12;
      *(float *)(v62 + 16) = v36 + (float)((float)((float)(v26 * v52) + (float)(v29 * v53)) - (float)(v33 * v54));
      *(float *)(v62 + 20) = v37 + (float)((float)((float)(v27 * v52) + (float)(v31 * v53)) - (float)(v34 * v54));
      *(float *)(v62 + 24) = v38 + (float)((float)((float)(v28 * v52) + (float)(v32 * v53)) - (float)(v35 * v54));
      *(float *)(v62 + 8) = v13;
      *(float *)(v62 + 12) = v50 + (float)((float)(v58 - v57) - v51);
      *(_DWORD *)(v62 + 52) = -1;
    }
  }
  float v63 = v55 - v56;
  if (v81 < 0)
  {
    uint64_t v64 = *(unsigned int *)(a7 + 4096);
    if (v64 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v64 + 1;
      uint64_t v65 = a7 + (v64 << 6);
      *(float *)uint64_t v65 = v11;
      *(float *)(v65 + 4) = v12;
      *(float *)(v65 + 16) = v36 + (float)((float)((float)(v26 * v52) - (float)(v29 * v53)) + (float)(v33 * v54));
      *(float *)(v65 + 20) = v37 + (float)((float)((float)(v27 * v52) - (float)(v31 * v53)) + (float)(v34 * v54));
      *(float *)(v65 + 24) = v38 + (float)((float)((float)(v28 * v52) - (float)(v32 * v53)) + (float)(v35 * v54));
      *(float *)(v65 + 8) = v13;
      *(float *)(v65 + 12) = v50 + (float)((float)(v63 + v57) - v51);
      *(_DWORD *)(v65 + 52) = -1;
    }
  }
  if (v82 < 0)
  {
    uint64_t v66 = *(unsigned int *)(a7 + 4096);
    if (v66 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v66 + 1;
      uint64_t v67 = a7 + (v66 << 6);
      *(float *)uint64_t v67 = v11;
      *(float *)(v67 + 4) = v12;
      *(float *)(v67 + 16) = v36 + (float)((float)((float)(v26 * v52) - (float)(v29 * v53)) - (float)(v33 * v54));
      *(float *)(v67 + 20) = v37 + (float)((float)((float)(v27 * v52) - (float)(v31 * v53)) - (float)(v34 * v54));
      *(float *)(v67 + 24) = v38 + (float)((float)((float)(v28 * v52) - (float)(v32 * v53)) - (float)(v35 * v54));
      *(float *)(v67 + 8) = v13;
      *(float *)(v67 + 12) = v50 + (float)((float)(v63 - v57) - v51);
      *(_DWORD *)(v67 + 52) = -1;
    }
  }
  float v68 = v56 - v55;
  if (v83 < 0)
  {
    uint64_t v69 = *(unsigned int *)(a7 + 4096);
    if (v69 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v69 + 1;
      uint64_t v70 = a7 + (v69 << 6);
      *(float *)uint64_t v70 = v11;
      *(float *)(v70 + 4) = v12;
      *(float *)(v70 + 16) = v36 + (float)((float)((float)(v29 * v53) - (float)(v26 * v52)) + (float)(v33 * v54));
      *(float *)(v70 + 20) = v37 + (float)((float)((float)(v31 * v53) - (float)(v27 * v52)) + (float)(v34 * v54));
      *(float *)(v70 + 24) = v38 + (float)((float)((float)(v32 * v53) - (float)(v28 * v52)) + (float)(v35 * v54));
      *(float *)(v70 + 8) = v13;
      *(float *)(v70 + 12) = v50 + (float)((float)(v68 + v57) - v51);
      *(_DWORD *)(v70 + 52) = -1;
    }
  }
  float v71 = -(float)(v47 * v52);
  if (v84 < 0)
  {
    uint64_t v72 = *(unsigned int *)(a7 + 4096);
    if (v72 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v72 + 1;
      uint64_t v73 = a7 + (v72 << 6);
      *(float *)uint64_t v73 = v11;
      *(float *)(v73 + 4) = v12;
      *(float *)(v73 + 16) = v36 + (float)((float)((float)(v29 * v53) - (float)(v26 * v52)) - (float)(v33 * v54));
      *(float *)(v73 + 20) = v37 + (float)((float)((float)(v31 * v53) - (float)(v27 * v52)) - (float)(v34 * v54));
      *(float *)(v73 + 24) = v38 + (float)((float)((float)(v32 * v53) - (float)(v28 * v52)) - (float)(v35 * v54));
      *(float *)(v73 + 8) = v13;
      *(float *)(v73 + 12) = v50 + (float)((float)(v68 - v57) - v51);
      *(_DWORD *)(v73 + 52) = -1;
    }
  }
  float v74 = v71 - v56;
  uint64_t v75 = *(unsigned int *)(a7 + 4096);
  if (v85 < 0)
  {
    if (v75 > 0x3F) {
      return v75 != 0;
    }
    uint64_t v76 = a7 + (v75 << 6);
    LODWORD(v75) = v75 + 1;
    *(_DWORD *)(a7 + 4096) = v75;
    *(float *)uint64_t v76 = v11;
    *(float *)(v76 + 4) = v12;
    *(float *)(v76 + 16) = v36 + (float)((float)((float)-(float)(v53 * v29) - (float)(v26 * v52)) + (float)(v33 * v54));
    *(float *)(v76 + 20) = v37 + (float)((float)((float)-(float)(v53 * v31) - (float)(v27 * v52)) + (float)(v34 * v54));
    *(float *)(v76 + 24) = v38 + (float)((float)((float)-(float)(v53 * v32) - (float)(v28 * v52)) + (float)(v35 * v54));
    *(float *)(v76 + 8) = v13;
    *(float *)(v76 + 12) = v50 + (float)((float)(v74 + v57) - v51);
    *(_DWORD *)(v76 + 52) = -1;
  }
  if (v86 < 0 && v75 <= 0x3F)
  {
    *(_DWORD *)(a7 + 4096) = v75 + 1;
    uint64_t v77 = a7 + ((unint64_t)v75 << 6);
    *(float *)uint64_t v77 = v11;
    *(float *)(v77 + 4) = v12;
    *(float *)(v77 + 16) = v36 + (float)((float)((float)-(float)(v53 * v29) - (float)(v26 * v52)) - (float)(v33 * v54));
    *(float *)(v77 + 20) = v37 + (float)((float)((float)-(float)(v53 * v31) - (float)(v27 * v52)) - (float)(v34 * v54));
    *(float *)(v77 + 24) = v38 + (float)((float)((float)-(float)(v53 * v32) - (float)(v28 * v52)) - (float)(v35 * v54));
    *(float *)(v77 + 8) = v13;
    *(float *)(v77 + 12) = v50 + (float)((float)(v74 - v57) - v51);
    *(_DWORD *)(v77 + 52) = -1;
    LODWORD(v75) = 1;
  }
  return v75 != 0;
}

BOOL physx::Gu::contactPlaneCapsule(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7 = *a3;
  float v8 = a3[1];
  float v9 = -*a3;
  float v10 = -v8;
  float v12 = a3[2];
  float v11 = a3[3];
  float v13 = a3[4];
  float v14 = a3[5];
  float v15 = a3[6];
  float v16 = (float)(a4[4] - v13) + (float)(a4[4] - v13);
  float v17 = (float)(a4[5] - v14) + (float)(a4[5] - v14);
  float v18 = (float)(a4[6] - v15) + (float)(a4[6] - v15);
  float v19 = (float)(v11 * v11) + -0.5;
  float v20 = (float)((float)-(float)(v8 * v17) - (float)(*a3 * v16)) - (float)(v12 * v18);
  float v21 = (float)((float)(v11 * (float)((float)(v12 * v17) - (float)(v8 * v18))) + (float)(v16 * v19))
      - (float)(*a3 * v20);
  float v22 = (float)((float)(v11 * (float)((float)(*a3 * v18) - (float)(v12 * v16))) + (float)(v17 * v19))
      - (float)(v8 * v20);
  float v23 = (float)((float)(v11 * (float)((float)(v8 * v16) - (float)(*a3 * v17))) + (float)(v18 * v19))
      - (float)(v12 * v20);
  float v25 = a4[2];
  float v24 = a4[3];
  float v26 = a4[1];
  float v27 = (float)((float)((float)(v11 * *a4) - (float)(*a3 * v24)) - (float)(v8 * v25)) + (float)(v26 * v12);
  float v28 = (float)((float)((float)(v11 * v26) - (float)(v8 * v24)) - (float)(v12 * *a4)) + (float)(v25 * *a3);
  float v29 = (float)((float)((float)(v11 * v25) - (float)(v12 * v24)) - (float)(*a3 * v26)) + (float)(*a4 * v8);
  float v30 = (float)((float)((float)(*a3 * *a4) + (float)(v11 * v24)) + (float)(v8 * v26)) + (float)(v12 * v25);
  float v31 = v27 + v27;
  float v32 = v30 + v30;
  float v33 = (float)((float)(v30 * (float)(v30 + v30)) + -1.0) + (float)(v27 * (float)(v27 + v27));
  float v34 = (float)(v28 * (float)(v27 + v27)) + (float)(v29 * v32);
  float v35 = (float)(v29 * v31) - (float)(v28 * v32);
  float v37 = *(float *)(a2 + 4);
  float v36 = *(float *)(a2 + 8);
  float v38 = v36 * v33;
  float v39 = v36 * v34;
  float v40 = v36 * v35;
  float v41 = v21 + v38;
  float v42 = v21 - v38;
  float v43 = (float)((float)(v11 * (float)(v11 + v11)) + -1.0) + (float)(v7 * (float)(v7 + v7));
  float v44 = (float)(v8 * (float)(v7 + v7)) + (float)(v12 * (float)(v11 + v11));
  float v45 = (float)((float)(v7 + v7) * v12) - (float)(v8 * (float)(v11 + v11));
  float v46 = -v12;
  float v47 = v41 - v37;
  float v48 = v42 - v37;
  float v49 = *a5;
  BOOL result = v47 <= *a5;
  if (v47 <= *a5)
  {
    uint64_t v51 = *(unsigned int *)(a7 + 4096);
    if (v51 <= 0x3F)
    {
      float v52 = (float)(v23 + v40) + (float)(v23 + v40);
      float v53 = (float)(v22 + v39) + (float)(v22 + v39);
      float v54 = (float)((float)(v8 * v53) + (float)(v7 * (float)(v47 + v47))) + (float)(v12 * v52);
      *(_DWORD *)(a7 + 4096) = v51 + 1;
      uint64_t v55 = a7 + (v51 << 6);
      *(float *)uint64_t v55 = -v43;
      *(float *)(v55 + 4) = -v44;
      *(float *)(v55 + 16) = v13
                           + (float)((float)((float)(v11 * (float)((float)(v53 * v46) + (float)(v8 * v52)))
                                           + (float)((float)(v47 + v47) * v19))
                                   + (float)(v7 * v54));
      *(float *)(v55 + 20) = v14
                           + (float)((float)((float)(v11 * (float)((float)(v52 * v9) + (float)(v12 * (float)(v47 + v47))))
                                           + (float)(v53 * v19))
                                   + (float)(v8 * v54));
      *(float *)(v55 + 24) = v15
                           + (float)((float)((float)(v11 * (float)((float)((float)(v47 + v47) * v10) + (float)(v7 * v53)))
                                           + (float)(v52 * v19))
                                   + (float)(v12 * v54));
      *(float *)(v55 + 8) = -v45;
      *(float *)(v55 + 12) = v47;
      *(_DWORD *)(v55 + 52) = -1;
    }
  }
  if (v48 <= v49)
  {
    uint64_t v56 = *(unsigned int *)(a7 + 4096);
    if (v56 <= 0x3F)
    {
      float v57 = v22 - v39;
      float v58 = (float)(v23 - v40) + (float)(v23 - v40);
      float v59 = v57 + v57;
      float v60 = (float)((float)(v8 * v59) + (float)(v7 * (float)(v48 + v48))) + (float)(v12 * v58);
      float v61 = (float)((float)(v11 * (float)((float)((float)(v48 + v48) * v10) + (float)(v7 * v59))) + (float)(v58 * v19))
          + (float)(v12 * v60);
      float v62 = a3[4];
      float v63 = (float)((float)((float)(v11 * (float)((float)(v58 * v9) + (float)(v12 * (float)(v48 + v48))))
                          + (float)(v59 * v19))
                  + (float)(v8 * v60))
          + a3[5];
      float v64 = a3[6];
      *(_DWORD *)(a7 + 4096) = v56 + 1;
      uint64_t v65 = a7 + (v56 << 6);
      *(float *)uint64_t v65 = -v43;
      *(float *)(v65 + 4) = -v44;
      *(float *)(v65 + 16) = (float)((float)((float)(v11 * (float)((float)(v59 * v46) + (float)(v8 * v58)))
                                           + (float)((float)(v48 + v48) * v19))
                                   + (float)(v7 * v60))
                           + v62;
      *(float *)(v65 + 20) = v63;
      *(float *)(v65 + 24) = v61 + v64;
      *(float *)(v65 + 8) = -v45;
      *(float *)(v65 + 12) = v48;
      *(_DWORD *)(v65 + 52) = -1;
    }
    return 1;
  }
  return result;
}

uint64_t physx::Gu::contactPlaneConvex(uint64_t a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  BOOL v11 = 0;
  float v13 = a2[1];
  float v12 = a2 + 1;
  uint64_t v14 = *(void *)(v12 + 11);
  if (v13 == 1.0 && v12[1] == 1.0) {
    BOOL v11 = a2[3] == 1.0;
  }
  float v16 = *a3;
  float v15 = a3[1];
  float v17 = a3[2];
  float v18 = a3[3];
  float v19 = *a4;
  float v20 = a4[1];
  float v21 = a4[4];
  float v22 = a4[5];
  float v23 = a3[4];
  float v24 = a3[5];
  float v25 = a4[6];
  float v26 = a3[6];
  float v27 = a4[2];
  float v28 = a4[3];
  unsigned int v29 = *(unsigned __int8 *)(v14 + 39);
  uint64_t v30 = *(void *)(v14 + 40);
  int v31 = *(unsigned __int8 *)(v14 + 38);
  float v32 = 0.0;
  float v148 = v24;
  float v149 = v26;
  float v147 = v23;
  float v33 = v18;
  float v34 = v17;
  float v35 = v15;
  long long v150 = xmmword_23435FD50;
  long long v151 = xmmword_23435FD50;
  float v36 = 1.0;
  float v37 = 0.0;
  float v38 = 0.0;
  long long v152 = xmmword_234376D80;
  long long v153 = xmmword_23435FD60;
  float v39 = 1.0;
  float v40 = 0.0;
  float v41 = 0.0;
  uint64_t v154 = 0x3F80000000000000;
  float v42 = 0.0;
  float v43 = 1.0;
  char v155 = 0;
  if (!v11)
  {
    float v143 = v17;
    float v145 = v21;
    float v139 = v19;
    float v140 = v16;
    float v44 = v22;
    float v141 = v20;
    float v142 = v15;
    float v45 = v27;
    float v46 = v28;
    float v47 = v24;
    float v48 = v23;
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v150, v12, a2 + 4);
    float v23 = v48;
    float v24 = v47;
    float v28 = v46;
    float v15 = v142;
    float v17 = v143;
    float v27 = v45;
    float v16 = v140;
    float v20 = v141;
    float v22 = v44;
    float v19 = v139;
    float v42 = *((float *)&v150 + 1);
    float v43 = *(float *)&v150;
    float v40 = *((float *)&v150 + 3);
    float v41 = *((float *)&v150 + 2);
    float v38 = *((float *)&v151 + 1);
    float v39 = *(float *)&v151;
    float v32 = *((float *)&v151 + 3);
    float v37 = *((float *)&v151 + 2);
    float v36 = *(float *)&v152;
    float v35 = a3[1];
    float v34 = a3[2];
    float v33 = a3[3];
    float v147 = a3[4];
    float v148 = a3[5];
    float v149 = a3[6];
    float v21 = v145;
  }
  char v49 = 0;
  if (v31)
  {
    float v50 = (float)(v21 - v23) + (float)(v21 - v23);
    float v51 = (float)(v22 - v24) + (float)(v22 - v24);
    float v52 = (float)(v25 - v26) + (float)(v25 - v26);
    float v53 = (float)((float)((float)(v18 * v19) - (float)(v16 * v28)) - (float)(v15 * v27)) + (float)(v20 * v17);
    float v54 = (float)((float)((float)(v18 * v20) - (float)(v15 * v28)) - (float)(v17 * v19)) + (float)(v27 * v16);
    float v55 = (float)((float)((float)(v18 * v27) - (float)(v17 * v28)) - (float)(v16 * v20)) + (float)(v19 * v15);
    float v56 = v54 + v54;
    float v144 = v33;
    float v57 = v35;
    float v58 = (float)((float)((float)(v16 * v19) + (float)(v18 * v28)) + (float)(v15 * v20)) + (float)(v17 * v27);
    float v59 = v55 + v55;
    float v60 = v54 * (float)(v54 + v54);
    float v61 = (float)(v18 * v18) + -0.5;
    float v62 = v18 * (float)((float)(v17 * v51) - (float)(v15 * v52));
    float v63 = v18 * (float)((float)(v16 * v52) - (float)(v17 * v50));
    float v64 = v18 * (float)((float)(v15 * v50) - (float)(v16 * v51));
    float v65 = (float)(v53 + v53) * v54;
    float v66 = v55 * (float)(v53 + v53);
    float v67 = v58 * (float)(v53 + v53);
    float v68 = v55 * (float)(v55 + v55);
    float v69 = v55 * v56;
    float v70 = v58 * v56;
    float v71 = v58 * v59;
    float v72 = (float)-(float)(v15 * v51) - (float)(v16 * v50);
    float v73 = v62 + (float)(v50 * v61);
    float v74 = v63 + (float)(v51 * v61);
    float v75 = v64 + (float)(v52 * v61);
    float v76 = v72 - (float)(v17 * v52);
    float v77 = v65 + v71;
    float v78 = v65 - v71;
    float v79 = v66 - v70;
    float v80 = v66 + v70;
    float v81 = v67 + v69;
    float v82 = v69 - v67;
    float v83 = 1.0 - (float)(v53 * (float)(v53 + v53));
    float v84 = (float)(1.0 - v60) - v68;
    float v85 = v83 - v68;
    float v86 = v83 - v60;
    float v87 = v73 - (float)(v16 * v76);
    float v146 = v74 - (float)(v15 * v76);
    float v88 = v75 - (float)(v17 * v76);
    float v89 = v84 * v43;
    float v90 = (float)(v85 * v42) + (float)(v77 * v43);
    float v91 = (float)(v81 * v42) + (float)(v79 * v43);
    float v92 = v82 * v41;
    float v93 = v86 * v41;
    float v94 = (float)(v80 * v41) + (float)((float)(v78 * v42) + v89);
    float v95 = v92 + v90;
    float v96 = v93 + v91;
    float v97 = (float)(v85 * v39) + (float)(v77 * v40);
    float v98 = (float)(v81 * v39) + (float)(v79 * v40);
    float v99 = (float)(v80 * v38) + (float)((float)(v78 * v39) + (float)(v84 * v40));
    float v100 = (float)(v82 * v38) + v97;
    float v101 = (float *)(v30 + 20 * v29);
    float v102 = (float)(v86 * v38) + v98;
    float v103 = (float)(v85 * v32) + (float)(v77 * v37);
    float v104 = v86 * v36;
    float v105 = (float)(v80 * v36) + (float)((float)(v78 * v32) + (float)(v84 * v37));
    float v106 = (float)(v82 * v36) + v103;
    float v107 = v104 + (float)((float)(v81 * v32) + (float)(v79 * v37));
    float v108 = *a3;
    float v109 = v108 * (float)(v108 + v108);
    float v110 = v57 * (float)(v57 + v57);
    float v111 = v34 * (float)(v34 + v34);
    float v112 = v57 * (float)(v108 + v108);
    float v113 = v34 * (float)(v108 + v108);
    float v114 = v144 * (float)(v108 + v108);
    float v115 = v34 * (float)(v57 + v57);
    float v116 = v144 * (float)(v57 + v57);
    float v117 = v144 * (float)(v34 + v34);
    float v118 = (float)(1.0 - v110) - v111;
    float v119 = v117 + v112;
    float v120 = v113 - v116;
    float v121 = v112 - v117;
    float v122 = 1.0 - v109;
    float v123 = (float)(1.0 - v109) - v111;
    float v124 = v115 + v114;
    float v125 = v116 + v113;
    float v126 = v115 - v114;
    float v127 = v122 - v110;
    float v128 = -(float)(v113 - v116);
    float v129 = *a5;
    unint64_t v130 = *(unsigned int *)(a7 + 4096);
    do
    {
      float v131 = *v101;
      float v132 = v101[1];
      float v133 = v101[2];
      float v134 = v87 + (float)((float)((float)(v94 * *v101) + (float)(v99 * v132)) + (float)(v105 * v133));
      if (v134 <= v129)
      {
        if (v130 <= 0x3F)
        {
          float v135 = v146 + (float)((float)((float)(v95 * v131) + (float)(v100 * v132)) + (float)(v106 * v133));
          float v136 = v88 + (float)((float)((float)(v96 * v131) + (float)(v102 * v132)) + (float)(v107 * v133));
          uint64_t v137 = a7 + (v130++ << 6);
          *(_DWORD *)(a7 + 4096) = v130;
          *(float *)uint64_t v137 = -v118;
          *(float *)(v137 + 4) = -v119;
          *(float *)(v137 + 16) = v147
                                + (float)((float)(v125 * v136) + (float)((float)(v118 * v134) + (float)(v121 * v135)));
          *(float *)(v137 + 20) = v148
                                + (float)((float)(v126 * v136) + (float)((float)(v119 * v134) + (float)(v123 * v135)));
          *(float *)(v137 + 24) = v149
                                + (float)((float)(v127 * v136) + (float)((float)(v120 * v134) + (float)(v124 * v135)));
          *(float *)(v137 + 8) = v128;
          *(float *)(v137 + 12) = v134;
          *(_DWORD *)(v137 + 52) = -1;
        }
        char v49 = 1;
      }
      v101 += 3;
      --v31;
    }
    while (v31);
  }
  return v49 & 1;
}

float physx::Gu::findRotationMatrixFromZ(float *a1, float *a2)
{
  float v2 = a2[2];
  if (fabsf(v2) <= 0.9999)
  {
    float v17 = *a2;
    float v16 = a2[1];
    float v18 = 1.0 / (float)(v2 + 1.0);
    float v19 = -(float)(v16 * v18);
    float v20 = v19 * *a2;
    float v21 = (float)(v18 * 0.0) * *a2;
    float v22 = *a2 + (float)(v19 * 0.0);
    *a1 = v2 - (float)(v19 * v16);
    a1[1] = v20 + 0.0;
    a1[6] = v22;
    a1[7] = v16 + v21;
    a1[2] = (float)(v19 * 0.0) - v17;
    a1[3] = v20;
    a1[4] = v2 + (float)((float)(v18 * v17) * v17);
    a1[5] = v21 - v16;
    float result = v2 + (float)((float)(v18 * 0.0) * 0.0);
    a1[8] = result;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v25 = 0x3F80000000000000;
    int v26 = -1082130432;
    float result = 1.0;
    float v5 = 1.0 - a2[1];
    v23[0] = 0.0 - *a2;
    v23[1] = v5;
    float v24 = 0.0 - v2;
    float v6 = 2.0 / (float)((float)((float)(v5 * v5) + (float)(v23[0] * v23[0])) + (float)(v24 * v24));
    float v7 = (float)((float)(v5 + (float)(v23[0] * 0.0)) - (float)(0.0 - v2)) * v6;
    float v8 = -v6;
    float v9 = a1;
    do
    {
      uint64_t v10 = 0;
      float v11 = -*((float *)&v25 + v3);
      float v12 = v23[v3];
      float v13 = v12 * v8;
      float v14 = v7 * v12;
      float v15 = v9;
      do
      {
        *float v15 = (float)((float)(v13 * v23[v10]) + (float)(v11 * *(float *)((char *)&v25 + v10 * 4)))
             + (float)(v14 * *(float *)((char *)&v25 + v10 * 4));
        v15 += 3;
        ++v10;
      }
      while (v10 != 3);
      a1[3 * v3 + v3] = a1[3 * v3 + v3] + 1.0;
      ++v3;
      ++v9;
    }
    while (v3 != 3);
  }
  return result;
}

uint64_t physx::Gu::contactPolygonPolygonExt(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, float *a5, float *a6, unsigned int a7, uint64_t a8, float a9, unsigned __int8 *a10, uint64_t a11, float *a12, float *a13, float *a14, uint64_t a15, float *a16, __int32 a17, uint64_t a18, unsigned __int8 a19, uint64_t a20)
{
  uint64_t v248 = a8;
  float v230 = a5;
  uint64_t v233 = a4;
  float v243 = a9;
  unsigned int v23 = a1;
  uint64_t v242 = a20;
  uint64_t v258 = a13;
  uint64_t v232 = a11;
  uint64_t v265 = *MEMORY[0x263EF8340];
  float v24 = *a14;
  unsigned int v245 = a19;
  float v231 = a10;
  float v236 = a6;
  if (a19)
  {
    float v241 = -v24;
    float v26 = a14[1];
    float v25 = a14[2];
    float v240 = -v26;
    float v239 = -v25;
  }
  else
  {
    float v26 = a14[1];
    float v25 = a14[2];
    float v241 = v24;
    float v240 = v26;
    float v239 = v25;
  }
  __int32 v238 = a17;
  MEMORY[0x270FA5388](a1);
  int v260 = (const float *)((char *)&v207 - v27);
  bzero((char *)&v207 - v27, v28);
  unsigned int v249 = v23;
  size_t v29 = v23;
  MEMORY[0x270FA5388](v30);
  unsigned int v259 = a7;
  int v31 = (char *)&v207 - ((v23 + 15) & 0x1FFFFFFF0);
  bzero(v31, v23);
  MEMORY[0x270FA5388](v32);
  float v33 = v31;
  bzero(v31, v23);
  size_t v34 = v259;
  MEMORY[0x270FA5388](v35);
  uint64_t v36 = (v34 + 15) & 0x1FFFFFFF0;
  float v228 = (char *)&v207 - v36;
  bzero((char *)&v207 - v36, v34);
  MEMORY[0x270FA5388](v37);
  unsigned int v38 = v259;
  float v227 = (char *)&v207 - v36;
  bzero((char *)&v207 - v36, v34);
  float v39 = *(float *)(a18 + 4096);
  v262[0] = 0.0;
  v261[0] = 0.0;
  uint64_t v263 = 0;
  uint64_t v246 = a18;
  float v229 = a3;
  if (v38 < 3) {
    goto LABEL_18;
  }
  float v40 = (float *)v232;
  float v41 = (float)((float)(v26 * v40[1]) + (float)(*v40 * v24)) + (float)(v40[2] * v25);
  float v42 = (float)((float)(v26 * v40[7]) + (float)(v40[6] * v24)) + (float)(v40[8] * v25);
  float v43 = *a12;
  float v44 = a12[1];
  float v255 = (float)((float)(v26 * v40[4]) + (float)(v40[3] * v24)) + (float)(v40[5] * v25);
  float v256 = v41;
  float v45 = (float)-(float)(v255 * v44) - (float)(v41 * v43);
  float v46 = a12[2];
  float v254 = v42;
  float v47 = v45 - (float)(v42 * v46);
  if (v47 < 0.0000001)
  {
LABEL_18:
    bzero(v31, v29);
    bzero(v31, v29);
    uint64_t v81 = a18;
    *(float *)&int v247 = 0.0;
    int v82 = 0;
  }
  else
  {
    size_t v222 = v34;
    float v253 = *(float *)a15;
    float v48 = *(float *)(a15 + 8);
    float v252 = *(float *)(a15 + 4);
    float v49 = v258[6];
    float v50 = v258[7];
    float v51 = v258[8];
    float v52 = *(float *)(a15 + 16);
    float v251 = *(float *)(a15 + 12);
    v235.i32[0] = *(_DWORD *)(a15 + 20);
    float v53 = *(float *)(a15 + 28);
    float v250 = *(float *)(a15 + 24);
    v221.i32[0] = *(_DWORD *)(a15 + 32);
    float v54 = *(float *)(a15 + 40);
    int v247 = *(int *)(a15 + 36);
    float v220 = *(float *)(a15 + 44);
    unsigned int v226 = *((unsigned int *)a12 + 3);
    transformVertices(v262, v261, (float *)&v263 + 1, (float *)&v263, (uint64_t)v260, v38, v248, v231, v258);
    size_t v225 = v29;
    float v224 = v31;
    float v223 = v31;
    float v234 = v39;
    if (v249)
    {
      *(float *)&int v257 = 0.0;
      *(float *)&int v244 = 0.0;
      *(float *)&unsigned int v237 = 0.0;
      float v253 = (float)((float)(v252 * v50) + (float)(v49 * v253)) + (float)(v51 * v48);
      float v252 = (float)((float)(v50 * v52) + (float)(v49 * v251)) + (float)(v51 * *(float *)v235.i32);
      float v251 = (float)((float)(v50 * v53) + (float)(v49 * v250)) + (float)(v51 * *(float *)v221.i32);
      float v250 = (float)((float)(v50 * v54) + (float)(v49 * *(float *)&v247)) + (float)(v51 * v220);
      float v55 = 1.0 / v47;
      float v56 = *(float *)&v226;
      *(float *)&int v247 = -*(float *)&v226;
      float v57 = v262[0];
      float v58 = v261[0];
      uint64_t v59 = v263;
      float v60 = a3;
      int8x8_t v235 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v245), 0x1FuLL));
      do
      {
        uint64_t v61 = a2;
        float v62 = (float *)(a2 + 12 * *v60);
        float v63 = v62 + 1;
        float v64 = v62[1];
        float v65 = v62 + 2;
        float v66 = v62[2];
        float v67 = v250 + (float)((float)((float)(v252 * v64) + (float)(*v62 * v253)) + (float)(v66 * v251));
        float v68 = v56;
        float v69 = v55 * (float)(v56 + v67);
        float v70 = (float)(v256 * v69)
            + (float)((float)((float)((float)(*v62 * *(float *)a15) + (float)(v64 * *(float *)(a15 + 12)))
                            + (float)(v66 * *(float *)(a15 + 24)))
                    + *(float *)(a15 + 36));
        float v71 = (float)(v255 * v69)
            + (float)((float)((float)((float)(*v62 * *(float *)(a15 + 4)) + (float)(v64 * *(float *)(a15 + 16)))
                            + (float)(v66 * *(float *)(a15 + 28)))
                    + *(float *)(a15 + 40));
        float v72 = (float)(v254 * v69)
            + (float)((float)((float)((float)(*v62 * *(float *)(a15 + 8)) + (float)(v64 * *(float *)(a15 + 20)))
                            + (float)(v66 * *(float *)(a15 + 32)))
                    + *(float *)(a15 + 44));
        BOOL v73 = PointInConvexPolygon2D_OutCodes(v260, v259, (float)((float)((float)(v71 * v258[1]) + (float)(*v258 * v70)) + (float)(v258[2] * v72)) - v57, (float)((float)((float)(v71 * v258[4]) + (float)(v258[3] * v70)) + (float)(v258[5] * v72)) - v58, *((float *)&v59 + 1), *(float *)&v59, v33);
        *int v31 = v73;
        if (v73 && (++v257, v67 < *(float *)&v247))
        {
          float v56 = v68;
          if (LODWORD(v39) <= 0x3F)
          {
            uint64_t v74 = LODWORD(v39);
            ++LODWORD(v39);
            uint64_t v75 = v246;
            *(float *)(v246 + 4096) = v39;
            float v76 = (float32x2_t *)(v75 + (v74 << 6));
            unsigned int v77 = v237;
            v264[v237] = *v60;
            float v78 = v240;
            v76->f32[0] = v241;
            v76->f32[1] = v78;
            v76[1].f32[0] = v239;
            float v79 = *(float *)(v242 + 8);
            if (!v245) {
              float v79 = 0.0;
            }
            float32_t v80 = (float)((float)((float)((float)(*v62 * *(float *)(v233 + 8)) + (float)(*v63 * *(float *)(v233 + 20)))
                                + (float)(*v65 * *(float *)(v233 + 32)))
                        + *(float *)(v233 + 44))
                + v79;
            v76[2] = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v233, *v62), vmul_n_f32(*(float32x2_t *)(v233 + 12), *v63)), vmul_n_f32(*(float32x2_t *)(v233 + 24), *v65)), *(float32x2_t *)(v233 + 36)), (float32x2_t)vand_s8(*(int8x8_t *)v242, v235));
            v76[3].f32[0] = v80;
            v76[1].f32[1] = v69 + v243;
            v76[6].i32[1] = v238;
            int v244 = 1;
            unsigned int v237 = v77 + 1;
          }
          else
          {
            int v244 = 1;
          }
        }
        else
        {
          float v56 = v68;
        }
        ++v31;
        ++v33;
        ++v60;
        --v29;
        a2 = v61;
      }
      while (v29);
    }
    else
    {
      *(float *)&int v244 = 0.0;
      *(float *)&int v257 = 0.0;
    }
    int v247 = v244 & 1;
    uint64_t v81 = v246;
    size_t v29 = v225;
    int v31 = v224;
    float v33 = v223;
    size_t v34 = v222;
    float v39 = v234;
    int v82 = v257;
  }
  unsigned int v83 = v249;
  if (v82 == v249)
  {
    unsigned int v84 = LODWORD(v39);
    int v85 = v249;
    float v86 = v236;
    uint64_t v87 = a2;
LABEL_40:
    ContactReductionAllIn(v81, v84, v85, v86, v87, (uint64_t)v264);
    char v128 = v247;
    return v128 & 1;
  }
  float v88 = a16;
  float v89 = v236;
  uint64_t v90 = v81;
  ContactReductionAllIn(v81, LODWORD(v39), v82, v236, a2, (uint64_t)v264);
  if (v83 < 3)
  {
    float v126 = v228;
    bzero(v228, v34);
    float v127 = v227;
    bzero(v227, v34);
    char v128 = v247;
    float v129 = v229;
  }
  else
  {
    float v223 = v33;
    float v224 = v31;
    size_t v225 = v29;
    float v91 = *(float *)(v90 + 4096);
    float v250 = *v89;
    float v216 = v89[1];
    float v92 = *a16;
    float v93 = a16[1];
    float v215 = v89[2];
    float v213 = v89[3];
    float v211 = v89[4];
    float v212 = v89[5];
    float v219 = v89[6];
    v221.i32[0] = (__int32)v89[7];
    float v234 = v89[8];
    float v94 = a16[2];
    float v95 = a16[3];
    float v96 = a16[4];
    float v97 = a16[5];
    float v98 = a16[7];
    float v251 = a16[6];
    float v99 = a16[8];
    float v214 = a16[9];
    float v210 = a16[10];
    float v217 = a16[11];
    float v218 = v230[3];
    uint64_t v209 = a2;
    transformVertices(v262, v261, (float *)&v263 + 1, (float *)&v263, (uint64_t)v260, v83, a2, v229, v89);
    float v208 = a16;
    size_t v222 = v34;
    float v220 = v91;
    int v100 = 0;
    if (v259)
    {
      *(float *)&unsigned int v226 = 0.0;
      *(float *)&int v257 = (float)((float)(v216 * v93) + (float)(v250 * v92)) + (float)(v215 * v94);
      float v256 = (float)((float)(v93 * v211) + (float)(v213 * v92)) + (float)(v212 * v94);
      *(float *)&int v244 = (float)((float)(v93 * *(float *)v221.i32) + (float)(v219 * v92)) + (float)(v234 * v94);
      float v255 = (float)((float)(v216 * v96) + (float)(v250 * v95)) + (float)(v215 * v97);
      float v254 = (float)((float)(v211 * v96) + (float)(v213 * v95)) + (float)(v212 * v97);
      *(float *)&unsigned int v237 = (float)((float)(*(float *)v221.i32 * v96) + (float)(v219 * v95)) + (float)(v234 * v97);
      float v253 = (float)((float)(v216 * v98) + (float)(v250 * v251)) + (float)(v215 * v99);
      float v252 = (float)((float)(v211 * v98) + (float)(v213 * v251)) + (float)(v212 * v99);
      *(float *)&float v236 = (float)((float)(*(float *)v221.i32 * v98) + (float)(v219 * v251)) + (float)(v234 * v99);
      float v101 = v218;
      *(float *)v235.i32 = -v218;
      float v251 = v262[0];
      float v102 = (float)(v216 * v210) + (float)(v250 * v214);
      float v250 = v261[0];
      float v103 = v102 + (float)(v215 * v217);
      uint64_t v104 = v263;
      float v105 = (float)((float)(v211 * v210) + (float)(v213 * v214)) + (float)(v212 * v217);
      float v106 = *(float *)v221.i32 * v210;
      int8x8_t v221 = (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(v245), 0x1FuLL));
      float v107 = v231;
      float v108 = (unsigned __int8 *)v227;
      float v109 = v228;
      unsigned int v110 = LODWORD(v91);
      float v234 = (float)(v106 + (float)(v219 * v214)) + (float)(v234 * v217);
      uint64_t v87 = v248;
      do
      {
        float v111 = (float *)(v87 + 12 * *v107);
        float v112 = *v111;
        float v113 = v111 + 1;
        float v114 = v111[1];
        float v115 = v111 + 2;
        float v116 = v111[2];
        BOOL v117 = PointInConvexPolygon2D_OutCodes(v260, v249, (float)(v103+ (float)((float)((float)(v255 * v114) + (float)(*v111 * *(float *)&v257)) + (float)(v116 * v253)))- v251, (float)(v105 + (float)((float)((float)(v254 * v114) + (float)(*v111 * v256)) + (float)(v116 * v252)))- v250, *((float *)&v104 + 1), *(float *)&v104, v108);
        *float v109 = v117;
        if (v117
          && (++v100,
              float v118 = v234
                   + (float)((float)((float)(*(float *)&v237 * v114) + (float)(v112 * *(float *)&v244))
                           + (float)(v116 * *(float *)&v236)),
              v118 < *(float *)v235.i32))
        {
          uint64_t v87 = v248;
          if (v110 <= 0x3F)
          {
            uint64_t v119 = v110++;
            uint64_t v120 = v246;
            *(_DWORD *)(v246 + 4096) = v110;
            float v121 = (float32x2_t *)(v120 + (v119 << 6));
            unsigned int v122 = v226;
            v264[v226] = *v107;
            float v123 = v240;
            v121->f32[0] = v241;
            v121->f32[1] = v123;
            v121[1].f32[0] = v239;
            float v124 = *(float *)(v242 + 8);
            if (v245) {
              float v124 = 0.0;
            }
            float32_t v125 = (float)((float)((float)((float)(*v111 * *(float *)(v232 + 8)) + (float)(*v113 * *(float *)(v232 + 20)))
                                 + (float)(*v115 * *(float *)(v232 + 32)))
                         + *(float *)(v232 + 44))
                 + v124;
            v121[2] = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v232, *v111), vmul_n_f32(*(float32x2_t *)(v232 + 12), *v113)), vmul_n_f32(*(float32x2_t *)(v232 + 24), *v115)), *(float32x2_t *)(v232 + 36)), (float32x2_t)vand_s8(*(int8x8_t *)v242, v221));
            v121[3].f32[0] = v125;
            v121[1].f32[1] = (float)(v101 + v118) + v243;
            v121[6].i32[1] = v238;
            int v247 = 1;
            unsigned int v226 = v122 + 1;
          }
          else
          {
            int v247 = 1;
          }
        }
        else
        {
          uint64_t v87 = v248;
        }
        ++v109;
        ++v108;
        ++v107;
        --v34;
      }
      while (v34);
    }
    else
    {
      uint64_t v87 = v248;
    }
    int v85 = v259;
    if (v100 == v259)
    {
      uint64_t v81 = v246;
      unsigned int v84 = LODWORD(v220);
      float v86 = v258;
      goto LABEL_40;
    }
    uint64_t v90 = v246;
    ContactReductionAllIn(v246, LODWORD(v220), v100, v258, v87, (uint64_t)v264);
    a2 = v209;
    float v129 = v229;
    size_t v29 = v225;
    int v31 = v224;
    float v33 = v223;
    size_t v34 = v222;
    float v126 = v228;
    float v127 = v227;
    char v128 = v247;
    float v88 = v208;
  }
  float v131 = v231;
  float v132 = v230;
  if (v259)
  {
    float v133 = v88[2];
    float v134 = v88[5];
    float v135 = v88[8];
    float32x2_t v136 = *(float32x2_t *)v88;
    float32x2_t v137 = *(float32x2_t *)(v88 + 3);
    float32x2_t v138 = *(float32x2_t *)(v88 + 6);
    float32x2_t v139 = *(float32x2_t *)(v88 + 9);
    float v140 = (float *)(v260 + 2);
    size_t v141 = v34;
    float v142 = v88[11];
    uint64_t v143 = v248;
    do
    {
      unsigned int v144 = *v131++;
      float v145 = (float *)(v143 + 12 * v144);
      float v146 = v145[1];
      float v147 = v145[2];
      float v148 = v142 + (float)((float)((float)(v133 * *v145) + (float)(v134 * v146)) + (float)(v135 * v147));
      *((float32x2_t *)v140 - 1) = vadd_f32(v139, vadd_f32(vadd_f32(vmul_n_f32(v136, *v145), vmul_n_f32(v137, v146)), vmul_n_f32(v138, v147)));
      *float v140 = v148;
      v140 += 3;
      --v141;
    }
    while (v141);
    if (v249 >= 2 && v259 >= 2)
    {
      uint64_t v149 = 0;
      int8x8_t v150 = (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(v245), 0x1FuLL));
      do
      {
        uint64_t v151 = v149 + 1;
        if (v149 + 1 < v34) {
          uint64_t v152 = v149 + 1;
        }
        else {
          uint64_t v152 = 0;
        }
        if ((!v126[v149] || !v126[v152]) && (v127[v152] & v127[v149]) == 0)
        {
          long long v153 = &v260[3 * v149];
          uint64_t v154 = &v260[3 * v152];
          float v155 = *v154;
          float v156 = v154[1];
          float v157 = *v153;
          float v158 = v153[1];
          float v159 = v154[2];
          float v160 = v153[2];
          v262[0] = *v154 - *v153;
          v262[1] = v156 - v158;
          v262[2] = v159 - v160;
          float v162 = v132[1];
          float v161 = v132[2];
          float v163 = (float)((float)(v156 - v158) * v161) - (float)((float)(v159 - v160) * v162);
          float v164 = (float)((float)(v159 - v160) * *v132) - (float)(v262[0] * v161);
          float v165 = (float)(v262[0] * v162) - (float)((float)(v156 - v158) * *v132);
          float v166 = fabsf(v163);
          float v167 = fabsf(v164);
          float v168 = fabsf(v165);
          if (v167 <= v166 || v167 <= v168)
          {
            if (v168 <= v166)
            {
              uint64_t v171 = 1;
              uint64_t v170 = 2;
            }
            else
            {
              uint64_t v171 = 0;
              uint64_t v170 = 1;
            }
          }
          else
          {
            uint64_t v170 = 0;
            uint64_t v171 = 2;
          }
          uint64_t v172 = 0;
          float v173 = (float)((float)(v158 * v164) + (float)(v163 * v157)) + (float)(v165 * v160);
          float v174 = v262[v171];
          float v175 = v262[v170];
          float v176 = -v175;
          float v177 = 1.0 / (float)((float)(v174 * v132[v170]) - (float)(v175 * v132[v171]));
          do
          {
            uint64_t v178 = v172 + 1;
            if (v172 + 1 < v29) {
              uint64_t v179 = v172 + 1;
            }
            else {
              uint64_t v179 = 0;
            }
            if ((!v31[v172] || !v31[v179]) && (v33[v179] & v33[v172]) == 0)
            {
              float v180 = (float *)(a2 + 12 * v129[v172]);
              float v181 = (float *)(a2 + 12 * v129[v179]);
              float v182 = *v180;
              float v183 = v180[1];
              float v184 = v180[2];
              float v185 = (float)((float)((float)(v164 * v183) + (float)(*v180 * v163)) + (float)(v184 * v165)) - v173;
              float v186 = v181[1];
              float v187 = v181[2];
              if ((float)(v185
                         * (float)((float)((float)((float)(v164 * v186) + (float)(*v181 * v163)) + (float)(v187 * v165))
                                 - v173)) <= 0.0)
              {
                float v188 = *v181 - v182;
                float v189 = v186 - v183;
                float v190 = v187 - v184;
                float v191 = (float)((float)(v164 * v189) + (float)(v163 * v188)) + (float)(v165 * v190);
                if (v191 != 0.0)
                {
                  float v192 = v185 / v191;
                  float v193 = v189 * v192;
                  float v194 = v190 * v192;
                  float v195 = v182 - (float)(v188 * v192);
                  float v196 = v183 - v193;
                  float v197 = v184 - v194;
                  v261[0] = v195;
                  v261[1] = v196;
                  v261[2] = v184 - v194;
                  float v198 = v177
                       * (float)((float)((float)(v261[v171] - v153[v171]) * v176)
                               + (float)(v174 * (float)(v261[v170] - v153[v170])));
                  if (v198 >= 0.0)
                  {
                    float v199 = v195 - (float)(v198 * *v132);
                    float v200 = v196 - (float)(v198 * v132[1]);
                    float v201 = v197 - (float)(v198 * v132[2]);
                    if ((float)((float)((float)((float)(v158 - v200) * (float)(v156 - v200))
                                       + (float)((float)(v157 - v199) * (float)(v155 - v199)))
                               + (float)((float)(v160 - v201) * (float)(v159 - v201))) < 0.0)
                    {
                      uint64_t v202 = *(unsigned int *)(v90 + 4096);
                      if (v202 <= 0x3F)
                      {
                        *(_DWORD *)(v90 + 4096) = v202 + 1;
                        float v203 = (float32x2_t *)(v90 + (v202 << 6));
                        float v204 = v240;
                        v203->f32[0] = v241;
                        v203->f32[1] = v204;
                        v203[1].f32[0] = v239;
                        float v205 = *(float *)(v242 + 8);
                        if (v245) {
                          float v205 = 0.0;
                        }
                        float32_t v206 = (float)((float)((float)((float)(v199 * *(float *)(v233 + 8))
                                                     + (float)(v200 * *(float *)(v233 + 20)))
                                             + (float)(v201 * *(float *)(v233 + 32)))
                                     + *(float *)(v233 + 44))
                             + v205;
                        v203[2] = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v233, v199), vmul_n_f32(*(float32x2_t *)(v233 + 12), v200)), vmul_n_f32(*(float32x2_t *)(v233 + 24), v201)), *(float32x2_t *)(v233 + 36)), (float32x2_t)vand_s8(*(int8x8_t *)v242, v150));
                        v203[3].f32[0] = v206;
                        v203[1].f32[1] = v243 - v198;
                        v203[6].i32[1] = v238;
                      }
                      char v128 = 1;
                    }
                  }
                }
              }
            }
            uint64_t v172 = v178;
          }
          while (v29 != v178);
        }
        uint64_t v149 = v151;
      }
      while (v151 != v34);
    }
  }
  return v128 & 1;
}

float transformVertices(float *a1, float *a2, float *a3, float *a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned __int8 *a8, float *a9)
{
  uint64_t v9 = a6;
  unsigned int v10 = 1;
  float v11 = -3.4028e38;
  float v12 = 3.4028e38;
  uint64_t v13 = a6;
  float v14 = 3.4028e38;
  float v15 = -3.4028e38;
  do
  {
    unsigned int v16 = *a8++;
    float v17 = (float *)(a7 + 12 * v16);
    float v18 = v17[1];
    float v19 = v17[2];
    float v20 = (float)((float)(a9[1] * v18) + (float)(*a9 * *v17)) + (float)(a9[2] * v19);
    float v21 = (float)((float)(v18 * a9[4]) + (float)(a9[3] * *v17)) + (float)(a9[5] * v19);
    if (v12 >= v20) {
      float v12 = v20;
    }
    if (v14 >= v21) {
      float v14 = v21;
    }
    if (v11 <= v20) {
      float v11 = v20;
    }
    if (v15 <= v21) {
      float v15 = v21;
    }
    *(float *)(a5 + 4 * (v10 - 1)) = v20;
    *(float *)(a5 + 4 * v10) = v21;
    v10 += 2;
    --v13;
  }
  while (v13);
  float v22 = (float)(v11 + v12) * 0.5;
  float v23 = v12 + -0.000001;
  float v24 = v14 + -0.000001;
  unsigned int v25 = 1;
  do
  {
    float v26 = *(float *)(a5 + 4 * (v25 - 1));
    float v27 = *(float *)(a5 + 4 * v25);
    float v28 = v26 - v22;
    float v29 = v26 - v23;
    if (v28 < 0.0) {
      float v30 = -0.000001;
    }
    else {
      float v30 = 0.000001;
    }
    *(float *)(a5 + 4 * (v25 - 1)) = v29 + v30;
    float v31 = v27 - v24;
    if ((float)(v27 - (float)((float)(v15 + v14) * 0.5)) < 0.0) {
      float v32 = -0.000001;
    }
    else {
      float v32 = 0.000001;
    }
    *(float *)(a5 + 4 * v25) = v31 + v32;
    v25 += 2;
    --v9;
  }
  while (v9);
  float result = (float)(v11 + 0.000001) - v23;
  *a1 = v23;
  *a2 = v24;
  *a3 = result;
  *a4 = (float)(v15 + 0.000001) - v24;
  return result;
}

BOOL PointInConvexPolygon2D_OutCodes(const float *a1, int a2, float a3, float a4, float a5, float a6, unsigned __int8 *a7)
{
  if (a4 >= 0.0) {
    int v7 = 2 * (a3 < 0.0);
  }
  else {
    int v7 = (2 * (a3 < 0.0)) | 8;
  }
  int v8 = v7 | (a3 > a5);
  if (a4 > a6) {
    v8 |= 4u;
  }
  *a7 = v8;
  if (v8) {
    return 0;
  }
  if (a2 == 3)
  {
    float v10 = a1[1];
    float v11 = a1[2] - *a1;
    float v12 = a1[3] - v10;
    float v13 = a1[4] - *a1;
    float v14 = a1[5] - v10;
    float v15 = (float)(v12 * v12) + (float)(v11 * v11);
    float v16 = (float)(v12 * v14) + (float)(v11 * v13);
    float v17 = (float)(v14 * v14) + (float)(v13 * v13);
    float v18 = a3 - *a1;
    float v19 = a4 - v10;
    float v20 = (float)(v19 * v12) + (float)(v18 * v11);
    float v21 = (float)(v19 * v14) + (float)(v18 * v13);
    float v22 = (float)(v20 * v17) - (float)(v21 * v16);
    float v23 = (float)(v21 * v15) - (float)(v20 * v16);
    BOOL v24 = v22 > 0.0;
    if (v23 <= 0.0) {
      BOOL v24 = 0;
    }
    return (float)((float)(v22 + v23) - (float)((float)(v15 * v17) - (float)(v16 * v16))) < 0.0 && v24;
  }
  else
  {
    int v25 = 0;
    float v26 = &a1[2 * a2 - 2];
    int v27 = *((_DWORD *)v26 + 1) >= SLODWORD(a4);
    do
    {
      float v28 = (float *)v26;
      float v26 = a1;
      int v29 = v27;
      float v30 = a1[1];
      int v27 = SLODWORD(v30) >= SLODWORD(a4);
      if (v29 != v27
        && SLODWORD(v30) >= SLODWORD(a4) != (float)((float)(v30 - a4) * (float)(*v28 - *a1)) <= (float)((float)(*a1 - a3) * (float)(v28[1] - v30)))
      {
        if (v25 == 1) {
          return 0;
        }
        ++v25;
      }
      a1 += 2;
      --a2;
    }
    while (a2);
    return v25 & 1;
  }
}

void ContactReductionAllIn(uint64_t a1, unsigned int a2, int a3, float *a4, uint64_t a5, uint64_t a6)
{
  v91[9] = *MEMORY[0x263EF8340];
  unsigned int v6 = *(_DWORD *)(a1 + 4096) - a2;
  if (v6 >= 5)
  {
    uint64_t v9 = a1 + ((unint64_t)a2 << 6);
    if (v6 == a3)
    {
      LODWORD(v10) = 0;
      float v11 = *(float *)(v9 + 12);
      float v12 = (float *)(v9 + 76);
      uint64_t v13 = 1;
      do
      {
        float v14 = *v12;
        v12 += 16;
        float v15 = v14;
        BOOL v16 = v11 <= v14;
        if (v11 <= v14) {
          uint64_t v10 = v10;
        }
        else {
          uint64_t v10 = v13;
        }
        if (!v16) {
          float v11 = v15;
        }
        ++v13;
      }
      while (a3 != v13);
      uint64_t v17 = 0;
      unsigned int v18 = 0;
      char v19 = 1;
      do
      {
        uint64_t v20 = HIWORD(v18);
        uint64_t v21 = v9 + (v20 << 6);
        uint64_t v22 = v9 + v17;
        *(_OWORD *)uint64_t v22 = *(_OWORD *)v21;
        *(_OWORD *)(v22 + 16) = *(_OWORD *)(v21 + 16);
        *(void *)(v22 + 32) = *(void *)(v21 + 32);
        *(_DWORD *)(v22 + 40) = *(_DWORD *)(v21 + 40);
        long long v23 = *(_OWORD *)(v21 + 44);
        *(_DWORD *)(v22 + 60) = *(_DWORD *)(v21 + 60);
        *(_OWORD *)(v22 + 44) = v23;
        v19 &= v20 != v10;
        v18 += (unsigned __int16)a3 << 14;
        v17 += 64;
      }
      while (v17 != 256);
      if (v19)
      {
        uint64_t v24 = v9 + (v10 << 6);
        long long v25 = *(_OWORD *)(v24 + 16);
        *(_OWORD *)(v9 + 256) = *(_OWORD *)v24;
        *(_OWORD *)(v9 + 272) = v25;
        *(void *)(v9 + 288) = *(void *)(v24 + 32);
        *(_DWORD *)(v9 + 296) = *(_DWORD *)(v24 + 40);
        int v26 = *(_DWORD *)(v24 + 60);
        *(_OWORD *)(v9 + 300) = *(_OWORD *)(v24 + 44);
        *(_DWORD *)(v9 + 316) = v26;
        int v27 = 5;
      }
      else
      {
        int v27 = 4;
      }
      unsigned int v88 = v27 + a2;
    }
    else
    {
      uint64_t v31 = 0;
      float v32 = 0.0;
      do
      {
        __float2 v33 = __sincosf_stret(v32);
        size_t v34 = &__b[v31 + 8];
        *size_t v34 = v33.__cosval;
        *(void *)(v34 + 1) = LODWORD(v33.__sinval);
        float v32 = v32 + 0.3927;
        v31 += 3;
      }
      while (v31 != 24);
      memset_pattern16(__b, &unk_23441FF20, 0x20uLL);
      memset_pattern16(v89, &unk_234422730, 0x20uLL);
      uint64_t v36 = 0;
      float v37 = *a4;
      float v38 = a4[1];
      float v39 = a4[3];
      float v40 = a4[4];
      float v41 = a4[6];
      float v42 = a4[7];
      do
      {
        uint64_t v43 = 0;
        float v44 = (float *)(a5 + 12 * *(unsigned __int8 *)(a6 + v36));
        float v45 = v44[1];
        float v46 = v44[2];
        float v47 = (float)((float)(v38 * *v44) + (float)(v40 * v45)) + (float)(v42 * v46);
        v35.f32[0] = (float)((float)(v37 * *v44) + (float)(v39 * v45)) + (float)(v41 * v46);
        float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0);
        float v48 = (__int32 *)v91;
        do
        {
          v49.i32[0] = *(v48 - 6);
          v50.i32[0] = *(v48 - 5);
          v49.i32[1] = *(v48 - 3);
          v49.i32[2] = *v48;
          v49.i32[3] = v48[3];
          v50.i32[1] = *(v48 - 2);
          v50.i32[2] = v48[1];
          v50.i32[3] = v48[4];
          float32x4_t v51 = vmlaq_f32(vmulq_n_f32(v50, v47), v35, v49);
          *(int8x16_t *)&__b[v43] = vbslq_s8((int8x16_t)vcgtq_f32(v51, *(float32x4_t *)&__b[v43]), *(int8x16_t *)&__b[v43], (int8x16_t)v51);
          *(int8x16_t *)&v89[v43] = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v89[v43], v51), *(int8x16_t *)&v89[v43], (int8x16_t)v51);
          v43 += 4;
          v48 += 12;
        }
        while (v43 != 8);
        ++v36;
      }
      while (v36 != v6);
      int v52 = 0;
      float v53 = v89[0] - __b[0];
      for (uint64_t i = 1; i != 8; ++i)
      {
        if ((float)(v89[i] - __b[i]) > v53)
        {
          int v52 = i;
          float v53 = v89[i] - __b[i];
        }
      }
      uint64_t v55 = 0;
      LODWORD(v56) = 0;
      unsigned int v57 = 0;
      unsigned int v58 = 0;
      unsigned int v59 = 0;
      float v60 = &__b[3 * v52 + 8];
      float v61 = *v60;
      float v62 = v60[1];
      float v63 = 3.4028e38;
      float v64 = -3.4028e38;
      float v65 = -3.4028e38;
      float v66 = 3.4028e38;
      do
      {
        float v67 = (float *)(a5 + 12 * *(unsigned __int8 *)(a6 + v55));
        float v68 = v67[1];
        float v69 = (float)(v37 * *v67) + (float)(v39 * v68);
        float v70 = (float)(v38 * *v67) + (float)(v40 * v68);
        float v71 = v67[2];
        float v72 = v69 + (float)(v41 * v71);
        float v73 = v70 + (float)(v42 * v71);
        float v74 = (float)(v62 * v73) + (float)(v61 * v72);
        float v75 = (float)(v61 * v73) + (float)((float)-v62 * v72);
        if (v74 < v66)
        {
          float v66 = v74;
          unsigned int v59 = v55;
        }
        if (v74 > v65)
        {
          float v65 = v74;
          unsigned int v58 = v55;
        }
        if (v75 < v63)
        {
          float v63 = v75;
          unsigned int v57 = v55;
        }
        if (v75 <= v64)
        {
          uint64_t v56 = v56;
        }
        else
        {
          float v64 = v75;
          uint64_t v56 = v55;
        }
        ++v55;
      }
      while (v6 != v55);
      uint64_t v76 = 0;
      unsigned int v77 = 0;
      if (v58 == v59) {
        unsigned int v58 = -1;
      }
      if (v57 == v58 || v57 == v59) {
        unsigned int v57 = -1;
      }
      if (v56 == v57 || v56 == v58 || v56 == v59) {
        uint64_t v56 = 0xFFFFFFFFLL;
      }
      unint64_t v81 = (unint64_t)v59 << 6;
      uint64_t v82 = v56 << 6;
      unint64_t v83 = (unint64_t)v57 << 6;
      unint64_t v84 = (unint64_t)v58 << 6;
      do
      {
        if (v81 == v76 || v84 == v76 || v83 == v76 || v82 == v76)
        {
          uint64_t v85 = v77++;
          uint64_t v86 = v9 + (v85 << 6);
          *(_OWORD *)uint64_t v86 = *(_OWORD *)(v9 + v76);
          *(_OWORD *)(v86 + 16) = *(_OWORD *)(v9 + v76 + 16);
          *(void *)(v86 + 32) = *(void *)(v9 + v76 + 32);
          *(_DWORD *)(v86 + 40) = *(_DWORD *)(v9 + v76 + 40);
          long long v87 = *(_OWORD *)(v9 + v76 + 44);
          *(_DWORD *)(v86 + 60) = *(_DWORD *)(v9 + v76 + 60);
          *(_OWORD *)(v86 + 44) = v87;
        }
        v76 += 64;
      }
      while ((unint64_t)v6 << 6 != v76);
      unsigned int v88 = v77 + a2;
    }
    *(_DWORD *)(a1 + 4096) = v88;
  }
}

uint64_t physx::Gu::contactSphereBox(uint64_t a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7 = a3[4];
  float v8 = a3[5];
  float v10 = a4[4];
  float v9 = a4[5];
  float v11 = v7 - v10;
  float v12 = v8 - v9;
  float v13 = a3[6];
  float v14 = a4[6];
  float v15 = v13 - v14;
  float v17 = a4[2];
  float v16 = a4[3];
  float v18 = (float)(v16 * v16) + -0.5;
  float v19 = *a4;
  float v20 = a4[1];
  float v21 = (float)((float)((float)(v12 + v12) * v20) + (float)(*a4 * (float)(v11 + v11)))
      + (float)(v17 * (float)(v15 + v15));
  float v22 = (float)((float)((float)(v11 + v11) * v18)
              - (float)((float)((float)(v20 * (float)(v15 + v15)) - (float)(v17 * (float)(v12 + v12))) * v16))
      + (float)(*a4 * v21);
  float v23 = (float)((float)((float)(v12 + v12) * v18)
              - (float)((float)((float)(v17 * (float)(v11 + v11)) - (float)(*a4 * (float)(v15 + v15))) * v16))
      + (float)(v20 * v21);
  float v24 = a2[1];
  float v25 = -v24;
  if (v22 >= (float)-v24)
  {
    if (v22 <= v24)
    {
      int v26 = 0;
      float v25 = (float)((float)((float)(v11 + v11) * v18)
                  - (float)((float)((float)(v20 * (float)(v15 + v15)) - (float)(v17 * (float)(v12 + v12))) * v16))
          + (float)(*a4 * v21);
    }
    else
    {
      int v26 = 1;
      float v25 = a2[1];
    }
  }
  else
  {
    int v26 = 1;
  }
  float v27 = (float)((float)((float)(v15 + v15) * v18)
              - (float)((float)((float)(*a4 * (float)(v12 + v12)) - (float)(v20 * (float)(v11 + v11))) * v16))
      + (float)(v17 * v21);
  float v28 = a2[2];
  if (v23 >= (float)-v28)
  {
    if (v23 > v28)
    {
      int v26 = 1;
      float v23 = a2[2];
    }
  }
  else
  {
    int v26 = 1;
    float v23 = -v28;
  }
  float v29 = *(float *)(a1 + 4);
  float v30 = -v17;
  float v31 = -v19;
  float v32 = -v20;
  float v33 = a2[3];
  float v34 = -v33;
  if (v27 >= (float)-v33)
  {
    if (v27 <= v33)
    {
      float v34 = v27;
    }
    else
    {
      int v26 = 1;
      float v34 = a2[3];
    }
    if (v26 != 1)
    {
      float v50 = v24 - fabsf(v25);
      float v51 = v28 - fabsf(v23);
      float v52 = v33 - fabsf(v27);
      if (v51 >= v50)
      {
        if (v50 < v52)
        {
          float v48 = -v50;
          float v54 = -2.0;
          if (v25 > 0.0) {
            float v54 = 2.0;
          }
          float v53 = 0.0;
          goto LABEL_27;
        }
      }
      else if (v51 < v52)
      {
        float v48 = -v51;
        float v53 = 2.0;
        if (v23 <= 0.0) {
          float v53 = -2.0;
        }
        float v54 = 0.0;
LABEL_27:
        float v55 = 0.0;
LABEL_31:
        float v56 = v55 + v55;
        float v57 = (float)((float)(v20 * v53) + (float)(v19 * v54)) + (float)(v17 * v56);
        float v45 = (float)((float)(v16 * (float)((float)(v53 * v30) + (float)(v20 * v56))) + (float)(v54 * v18))
            + (float)(v19 * v57);
        float v46 = (float)((float)(v16 * (float)((float)(v56 * v31) + (float)(v17 * v54))) + (float)(v53 * v18))
            + (float)(v20 * v57);
        float v47 = (float)((float)(v16 * (float)((float)(v54 * v32) + (float)(v19 * v53))) + (float)(v56 * v18))
            + (float)(v17 * v57);
        goto LABEL_32;
      }
      float v55 = 1.0;
      if (v27 <= 0.0) {
        float v55 = -1.0;
      }
      float v48 = -v52;
      float v54 = 0.0;
      float v53 = 0.0;
      goto LABEL_31;
    }
  }
  float v35 = v23 + v23;
  float v36 = (float)((float)(v20 * v35) + (float)(v19 * (float)(v25 + v25))) + (float)(v17 * (float)(v34 + v34));
  float v37 = (float)((float)(v16 * (float)((float)(v35 * v30) + (float)(v20 * (float)(v34 + v34))))
              + (float)((float)(v25 + v25) * v18))
      + (float)(v19 * v36);
  float v38 = (float)((float)(v16 * (float)((float)((float)(v34 + v34) * v31) + (float)(v17 * (float)(v25 + v25))))
              + (float)(v35 * v18))
      + (float)(v20 * v36);
  float v39 = (float)((float)(v16 * (float)((float)((float)(v25 + v25) * v32) + (float)(v19 * v35)))
              + (float)((float)(v34 + v34) * v18))
      + (float)(v17 * v36);
  float v40 = v11 - v37;
  float v41 = v12 - v38;
  float v42 = v15 - v39;
  float v43 = (float)((float)(v41 * v41) + (float)(v40 * v40)) + (float)(v42 * v42);
  if (v43 > (float)((float)(v29 + *a5) * (float)(v29 + *a5))) {
    return 0;
  }
  float v44 = 1.0 / sqrtf(v43);
  float v45 = v40 * v44;
  float v46 = v41 * v44;
  float v47 = v42 * v44;
  float v48 = v43 * v44;
  float v7 = v10 + v37;
  float v8 = v9 + v38;
  float v13 = v14 + v39;
LABEL_32:
  uint64_t v58 = *(unsigned int *)(a7 + 4096);
  if (v58 <= 0x3F)
  {
    *(_DWORD *)(a7 + 4096) = v58 + 1;
    uint64_t v59 = a7 + (v58 << 6);
    *(float *)uint64_t v59 = v45;
    *(float *)(v59 + 4) = v46;
    *(float *)(v59 + 16) = v7;
    *(float *)(v59 + 20) = v8;
    *(float *)(v59 + 24) = v13;
    *(float *)(v59 + 8) = v47;
    *(float *)(v59 + 12) = v48 - v29;
    *(_DWORD *)(v59 + 52) = -1;
  }
  return 1;
}

uint64_t PxcBruteForceOverlapBackface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float *a11, _DWORD *a12, _DWORD *a13, float *a14, uint64_t a15, _DWORD *a16)
{
  *(double *)&int32x2_t v16 = MEMORY[0x270FA5388](a1);
  float v126 = v17;
  float v19 = v18;
  float v21 = v20;
  float v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  int32x2_t v127 = v16;
  uint64_t v121 = v28;
  uint64_t v122 = v29;
  v155[1] = *MEMORY[0x263EF8340];
  float v30 = *a11;
  float v31 = a11[1];
  float v32 = a11[2];
  float v33 = (float)((float)(v31 * v22[4]) + (float)(v22[3] * *a11)) + (float)(v22[5] * v32);
  float v34 = (float)((float)(v31 * v22[7]) + (float)(v22[6] * *a11)) + (float)(v22[8] * v32);
  v153[0] = (float)((float)(v22[1] * v31) + (float)(*v22 * *a11)) + (float)(v22[2] * v32);
  v153[1] = v33;
  v153[2] = v34;
  MEMORY[0x270FA5388](v28);
  float v36 = (char *)&v115 - ((v35 + 15) & 0x7FFFFFFF0);
  bzero(v36, v35);
  *(float *)&int v151 = 3.4028e38;
  int v152 = 0;
  *(float *)&unsigned int v142 = -v30;
  float v143 = -v31;
  float v144 = -v32;
  unint64_t v119 = (unint64_t)v36;
  float v113 = v36;
  float v37 = v19;
  float v38 = v126;
  unint64_t v120 = (unint64_t)a12;
  uint64_t v39 = PxcTestFacesSepAxesBackface(v27, v25, v23, v21, (uint64_t)v37, (uint64_t)v126, a10, v153, *(float *)v127.i32, (float *)&v151, (float *)&v149, a12, v113, &v152, (float *)&v142);
  char v40 = 0;
  if (v39)
  {
    BOOL v117 = (uint64_t *)a10;
    float v118 = (float *)a9;
    float v41 = a11[1];
    float v42 = (float)(v21[1] * v41) + (float)(*v21 * *a11);
    float v43 = a11[2];
    float v44 = v21[2];
    float v45 = v21[5];
    float v46 = (float)(v41 * v21[4]) + (float)(v21[3] * *a11);
    float v47 = (float)(v41 * v21[7]) + (float)(v21[6] * *a11);
    float v48 = v21[8];
    MEMORY[0x270FA5388](v39);
    float v50 = (char *)&v115 - ((v49 + 15) & 0x7FFFFFFF0);
    bzero(v50, v49);
    float v147 = 3.4028e38;
    int v148 = 0;
    *(float *)&unsigned int v142 = -(float)(v42 + (float)(v44 * v43));
    float v143 = -(float)(v46 + (float)(v45 * v43));
    float v144 = -(float)(v47 + (float)(v48 * v43));
    float v124 = a11;
    float v116 = (unsigned int *)v50;
    float v114 = v50;
    uint64_t v51 = (uint64_t)v118;
    float32_t v125 = v37;
    int v52 = PxcTestFacesSepAxesBackface(v25, v27, v21, v23, (uint64_t)v38, (uint64_t)v37, (uint64_t)v118, (float *)&v142, *(float *)v127.i32, &v147, (float *)&v145, a13, v114, &v148, a11);
    char v40 = 0;
    if (v52)
    {
      float v53 = v150;
      float v54 = *(float *)&v151;
      unint64_t v55 = v149;
      float v123 = a16;
      *a16 = 0;
      float v56 = v147;
      if (v147 < v54)
      {
        unint64_t v55 = v145;
        float v53 = v146;
        *float v123 = 1;
        float v54 = v56;
      }
      *(float *)&unsigned int v142 = 0.0;
      unsigned int v140 = 0;
      float v57 = (float *)(*(void *)(v27 + 24) + 20 * *(unsigned int *)v120);
      uint64_t v58 = (float *)(*(void *)(v25 + 24) + 20 * *a13);
      uint64_t v59 = v125;
      physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(v125, v57, (float *)&v137, &v139, v57[3]);
      float v60 = v126;
      physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(v126, v58, (float *)&v134, &v136, v58[3]);
      float v61 = (float)((float)(v137.f32[0] * *(float *)(v51 + 8)) + (float)(v137.f32[1] * *(float *)(v51 + 20)))
          + (float)(v138 * *(float *)(v51 + 32));
      float32x2_t v62 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v51, v137.f32[0]), vmul_n_f32(*(float32x2_t *)(v51 + 12), v137.f32[1])), vmul_n_f32(*(float32x2_t *)(v51 + 24), v138));
      float v63 = v139
          - (float)(vmlas_n_f32(vmuls_lane_f32(*(float *)(v51 + 40), v62, 1), *(float *)(v51 + 36), v62.f32[0])
                  + (float)(*(float *)(v51 + 44) * v61));
      float32x2_t v137 = v62;
      float v138 = v61;
      float v139 = v63;
      float v64 = (float *)v117;
      float v65 = (float)((float)(v134.f32[0] * v64[2]) + (float)(v134.f32[1] * v64[5])) + (float)(v135 * v64[8]);
      float32x2_t v66 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v117, v134.f32[0]), vmul_n_f32(*(float32x2_t *)((char *)v117 + 12), v134.f32[1])), vmul_n_f32((float32x2_t)v117[3], v135));
      float v67 = v136
          - (float)(vmlas_n_f32(vmuls_lane_f32(*((float *)v117 + 10), v66, 1), *((float *)v117 + 9), v66.f32[0])
                  + (float)(*((float *)v117 + 11) * v65));
      float32x2_t v134 = v66;
      float v135 = v65;
      float v136 = v67;
      float32x4_t v68 = (float32x4_t)vdupq_lane_s32(v127, 0);
      float32x4_t v69 = vsubq_f32(*(float32x4_t *)v121, v68);
      v69.i32[3] = vaddq_f32(*(float32x4_t *)v121, v68).i32[3];
      float32x4_t v132 = v69;
      float32x4_t v70 = vsubq_f32(*(float32x4_t *)v122, v68);
      v70.i32[3] = vaddq_f32(*(float32x4_t *)v122, v68).i32[3];
      float32x2_t v133 = vadd_f32(*(float32x2_t *)(v121 + 16), *(float32x2_t *)v68.f32);
      float32x4_t v130 = v70;
      float32x2_t v131 = vadd_f32(*(float32x2_t *)(v122 + 16), *(float32x2_t *)v68.f32);
      PxcFindSeparatingAxes((uint64_t)&v142, (unsigned int *)v119, v152, (void *)v27, (uint64_t)v23, (float *)&v134, (float *)v51, v130.f32, *(float *)v127.i32, (uint64_t)v59);
      PxcFindSeparatingAxes((uint64_t)&v140, v116, v148, (void *)v25, (uint64_t)v21, (float *)&v137, v64, v132.f32, *(float *)v127.i32, (uint64_t)v60);
      unint64_t v120 = v142;
      if (*(float *)&v142 != 0.0)
      {
        uint64_t v71 = 0;
        LODWORD(v121) = 0;
        unint64_t v72 = v140;
        BOOL v117 = &v141;
        float v118 = &v143;
        float v73 = v124;
        unint64_t v119 = v140;
        do
        {
          uint64_t v122 = v71;
          if (v72)
          {
            float v74 = (float *)v117;
            float v75 = &v118[3 * v71];
            uint64_t v76 = v75 + 1;
            unsigned int v77 = v75 + 2;
            do
            {
              float v78 = v74[1];
              float v79 = (float)(*v76 * v78) - (float)(*v77 * *v74);
              float v80 = *(v74 - 1);
              float v81 = (float)(*v77 * v80) - (float)(*v75 * v78);
              float v82 = (float)(*v75 * *v74) - (float)(*v76 * v80);
              if (fabsf(v79) > 0.000001 || fabsf(v81) > 0.000001 || fabsf(v82) > 0.000001)
              {
                float v83 = (float)((float)(v81 * v81) + (float)(v79 * v79)) + (float)(v82 * v82);
                float v84 = 0.0;
                float v85 = 0.0;
                float v86 = 0.0;
                if (v83 > 0.0)
                {
                  float v87 = 1.0 / sqrtf(v83);
                  float v86 = v79 * v87;
                  float v85 = v81 * v87;
                  float v84 = v82 * v87;
                }
                float v88 = (float)((float)(v85 * v23[1]) + (float)(*v23 * v86)) + (float)(v23[2] * v84);
                float v89 = (float)((float)(v85 * v23[4]) + (float)(v23[3] * v86)) + (float)(v23[5] * v84);
                float v90 = (float)((float)(v85 * v23[7]) + (float)(v23[6] * v86)) + (float)(v23[8] * v84);
                float v91 = (float)((float)(v85 * v21[1]) + (float)(*v21 * v86)) + (float)(v21[2] * v84);
                float v92 = v21[5];
                float v93 = (float)(v85 * v21[4]) + (float)(v21[3] * v86);
                float v94 = (float)(v85 * v21[7]) + (float)(v21[6] * v86);
                float v95 = (float)-(float)(v73[1] * v85) - (float)(*v73 * v86);
                LODWORD(v96) = *(_DWORD *)(v27 + 68) | LODWORD(v88) & 0x80000000;
                LODWORD(v97) = *(_DWORD *)(v27 + 72) | LODWORD(v89) & 0x80000000;
                LODWORD(v98) = *(_DWORD *)(v27 + 76) | LODWORD(v90) & 0x80000000;
                int v99 = *(_DWORD *)(v25 + 72);
                LODWORD(v100) = *(_DWORD *)(v25 + 68) | LODWORD(v91) & 0x80000000;
                unint64_t v128 = __PAIR64__(LODWORD(v85), LODWORD(v86));
                float v129 = v84;
                float v101 = v93 + (float)(v92 * v84);
                float v102 = v94 + (float)(v21[8] * v84);
                float v103 = v95 - (float)(v73[2] * v84);
                float v104 = (float)((float)(v89 * v97) + (float)(v96 * v88)) + (float)(v98 * v90);
                float v105 = (float)((float)(v101 * COERCE_FLOAT(v99 | LODWORD(v101) & 0x80000000)) + (float)(v100 * v91))
                     + (float)(COERCE_FLOAT(*(_DWORD *)(v25 + 76) | LODWORD(v102) & 0x80000000) * v102);
                float v106 = *(float *)(v27 + 64);
                if (v104 > v106) {
                  float v106 = v104;
                }
                if (v105 <= *(float *)(v25 + 64)) {
                  float v105 = *(float *)(v25 + 64);
                }
                float v107 = v106 + v105;
                float v108 = v103 + v107;
                float v109 = v107 - v103;
                if (v108 < v109) {
                  float v109 = v108;
                }
                if (v109 <= v54)
                {
                  uint64_t v154 = 0;
                  (*(void (**)(uint64_t, unint64_t *, float *, float *, char *, uint64_t *))(v27 + 88))(v27, &v128, v23, v125, (char *)&v154 + 4, &v154);
                  uint64_t v110 = v154;
                  v155[0] = 0;
                  (*(void (**)(uint64_t, unint64_t *, float *, float *, char *, void *))(v25 + 88))(v25, &v128, v21, v126, (char *)v155 + 4, v155);
                  if ((float)(*(float *)&v110 + *(float *)v127.i32) < *((float *)v155 + 1)
                    || (float)(*(float *)v155 + *(float *)v127.i32) < *((float *)&v110 + 1))
                  {
                    char v40 = v121;
                    return v40 & 1;
                  }
                  float v111 = *(float *)&v110 - *((float *)v155 + 1);
                  if ((float)(*(float *)&v110 - *((float *)v155 + 1)) >= (float)(*(float *)v155 - *((float *)&v110 + 1))) {
                    float v111 = *(float *)v155 - *((float *)&v110 + 1);
                  }
                  float v73 = v124;
                  if (v111 < v54)
                  {
                    unint64_t v55 = v128;
                    float v53 = v129;
                    float v54 = v111;
                    *float v123 = 2;
                  }
                }
              }
              v74 += 3;
              --v72;
            }
            while (v72);
          }
          uint64_t v71 = v122 + 1;
          unint64_t v72 = v119;
          LODWORD(v121) = v122 + 1 >= v120;
        }
        while (v122 + 1 != v120);
      }
      *a14 = v54;
      *(void *)a15 = v55;
      *(float *)(a15 + 8) = v53;
      char v40 = 1;
    }
  }
  return v40 & 1;
}

float physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(float *a1, float *a2, float *a3, float *a4, float a5)
{
  float v5 = a2[1];
  float v6 = a2[2];
  float v7 = (float)((float)(a1[10] * v5) + (float)(a1[9] * *a2)) + (float)(a1[11] * v6);
  float v8 = (float)((float)(v5 * a1[13]) + (float)(a1[12] * *a2)) + (float)(a1[14] * v6);
  float v9 = (float)((float)(v5 * a1[16]) + (float)(a1[15] * *a2)) + (float)(a1[17] * v6);
  float v10 = 1.0 / sqrtf((float)((float)(v8 * v8) + (float)(v7 * v7)) + (float)(v9 * v9));
  *a3 = v7 * v10;
  a3[1] = v8 * v10;
  a3[2] = v9 * v10;
  float result = v10 * a5;
  *a4 = result;
  return result;
}

uint64_t GuTestFacesSepAxesBackfaceRoughPass(uint64_t a1, uint64_t a2, float *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float a9, float *a10, float *a11, _DWORD *a12, float *a13)
{
  *a12 = -1;
  unint64_t v13 = *(unsigned int *)(a1 + 16);
  if (v13)
  {
    uint64_t v20 = 0;
    BOOL v21 = 0;
    uint64_t v82 = *(void *)(a1 + 32);
    float v22 = a8[1];
    float v23 = (float)(*a8 * *(float *)(a5 + 36)) + (float)(v22 * *(float *)(a5 + 48));
    float v24 = (float)(*a8 * *(float *)(a5 + 40)) + (float)(v22 * *(float *)(a5 + 52));
    float v25 = (float)(*a8 * *(float *)(a5 + 44)) + (float)(v22 * *(float *)(a5 + 56));
    float v26 = a8[2];
    float v27 = v23 + (float)(v26 * *(float *)(a5 + 60));
    float v28 = v24 + (float)(v26 * *(float *)(a5 + 64));
    float v29 = v25 + (float)(v26 * *(float *)(a5 + 68));
    uint64_t v30 = *(void *)(a1 + 24) + 12;
    float v31 = 1.0;
    float v83 = a9;
    float v80 = v28;
    float v81 = v27;
    float v79 = v29;
    do
    {
      float v33 = *(float *)(v30 - 12);
      float v32 = *(float *)(v30 - 8);
      float v34 = *(float *)(v30 - 4);
      if ((float)((float)((float)(v28 * v32) + (float)(v33 * v27)) + (float)(v34 * v29)) >= 0.0)
      {
        float v35 = (float)(v33 * *(float *)(a5 + 44)) + (float)(v32 * *(float *)(a5 + 56));
        float32x2_t v36 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a5 + 36), v33), vmul_n_f32(*(float32x2_t *)(a5 + 48), v32)), vmul_n_f32(*(float32x2_t *)(a5 + 60), v34));
        float v37 = v35 + (float)(v34 * *(float *)(a5 + 68));
        float32x2_t v89 = v36;
        float v90 = v37;
        float v38 = v36.f32[1];
        float v39 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v36.f32[1], v36, 1), v36.f32[0], v36.f32[0]) + (float)(v37 * v37));
        float v40 = v31 / v39;
        if (v39 > 0.0)
        {
          float32x2_t v36 = vmul_n_f32(v36, v40);
          float32x2_t v89 = v36;
          float v37 = v37 * v40;
          float v90 = v37;
          float v38 = v36.f32[1];
        }
        float v41 = a3[1];
        float v42 = a3[2];
        float v43 = a3[3];
        float v44 = a3[4];
        float v45 = a3[5];
        float v46 = (float)(v36.f32[0] * *a3) + (float)(v38 * v43);
        float v47 = (float)(v36.f32[0] * v41) + (float)(v38 * v44);
        float v48 = (float)(v36.f32[0] * v42) + (float)(v38 * v45);
        float v49 = a3[6];
        float v50 = a3[7];
        float v51 = a3[8];
        float v52 = v46 + (float)(v37 * v49);
        float v53 = v47 + (float)(v37 * v50);
        float v54 = v48 + (float)(v37 * v51);
        float v55 = (float)((float)(v41 * v53) + (float)(*a3 * v52)) + (float)(v42 * v54);
        float v56 = (float)((float)(v44 * v53) + (float)(v43 * v52)) + (float)(v45 * v54);
        float v57 = (float)((float)(v50 * v53) + (float)(v49 * v52)) + (float)(v51 * v54);
        float v58 = (float)((float)(v53 * a4[1]) + (float)(*a4 * v52)) + (float)(a4[2] * v54);
        float v59 = (float)((float)(v53 * a4[4]) + (float)(a4[3] * v52)) + (float)(a4[5] * v54);
        float v60 = (float)((float)(v53 * a13[1]) + (float)(*a13 * v52)) + (float)(a13[2] * v54);
        float v61 = (float)((float)(v56 * COERCE_FLOAT(*(_DWORD *)(a1 + 72) | LODWORD(v56) & 0x80000000))
                    + (float)(COERCE_FLOAT(*(_DWORD *)(a1 + 68) | LODWORD(v55) & 0x80000000) * v55))
            + (float)(COERCE_FLOAT(*(_DWORD *)(a1 + 76) | LODWORD(v57) & 0x80000000) * v57);
        float v62 = (float)((float)(v59 * COERCE_FLOAT(*(_DWORD *)(a2 + 72) | LODWORD(v59) & 0x80000000))
                    + (float)(COERCE_FLOAT(*(_DWORD *)(a2 + 68) | LODWORD(v58) & 0x80000000) * v58))
            + (float)(COERCE_FLOAT(*(_DWORD *)(a2 + 76) | COERCE_UNSIGNED_INT((float)((float)(v53 * a4[7]) + (float)(a4[6] * v52))+ (float)(a4[8] * v54)) & 0x80000000)* (float)((float)((float)(v53 * a4[7]) + (float)(a4[6] * v52)) + (float)(a4[8] * v54)));
        if (v61 <= *(float *)(a1 + 64)) {
          float v61 = *(float *)(a1 + 64);
        }
        if (v62 <= *(float *)(a2 + 64)) {
          float v62 = *(float *)(a2 + 64);
        }
        float v63 = v61 + v62;
        float v64 = v60 + v63;
        float v65 = v63 - v60;
        if (v64 < v65) {
          float v65 = v64;
        }
        if (v65 <= *a10)
        {
          char v78 = v21;
          float32x2_t v66 = (float *)(v82 + 12 * *(unsigned __int8 *)(v30 + 7));
          float v67 = *(float *)(v30 - 8);
          float v68 = v66[1];
          float v87 = *v66;
          float v88 = *(float *)(v30 - 12);
          float v69 = *(float *)(v30 - 4);
          float v70 = v66[2];
          float v71 = -(float)(*(float *)v30 * v40);
          *(void *)float v91 = 0;
          uint64_t v72 = a2;
          float v86 = v40;
          (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t, float *, float *))(a2 + 88))(a2, &v89, a7, a6, &v91[1], v91);
          if ((float)(v71 + v83) < v91[1]
            || (float v73 = v86 * (float)((float)((float)(v67 * v68) + (float)(v88 * v87)) + (float)(v69 * v70)),
                (float)(v91[0] + v83) < v73))
          {
            char v76 = v78;
            return v76 & 1;
          }
          float v74 = v71 - v91[1];
          float v75 = v91[0] - v73;
          if ((float)(v71 - v91[1]) >= v75) {
            float v74 = v75;
          }
          a2 = v72;
          float v28 = v80;
          float v27 = v81;
          float v29 = v79;
          float v31 = 1.0;
          if (v74 < *a10)
          {
            *a11 = v52;
            a11[1] = v53;
            a11[2] = v54;
            *a10 = v74;
            *a12 = v20;
          }
        }
      }
      BOOL v21 = ++v20 >= v13;
      v30 += 20;
    }
    while (v13 != v20);
  }
  char v76 = 1;
  return v76 & 1;
}

uint64_t PxcTestFacesSepAxesBackface(uint64_t a1, uint64_t a2, float *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float a9, float *a10, float *a11, _DWORD *a12, char *a13, _DWORD *a14, float *a15)
{
  *a12 = -1;
  unint64_t v20 = *(unsigned int *)(a1 + 16);
  uint64_t v94 = *(void *)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 24);
  float v23 = *a8;
  float v22 = a8[1];
  float v24 = a8[2];
  if (20 * v20)
  {
    unsigned int v25 = 0;
    do
    {
      _X11 = v21 + v25;
      __asm { PRFM            #0, [X11] }
      v25 += 128;
    }
    while (v25 < 20 * (int)v20);
  }
  if (v20)
  {
    uint64_t v32 = 0;
    BOOL v33 = 0;
    float v35 = (float)((float)(v23 * *(float *)(a5 + 36)) + (float)(v22 * *(float *)(a5 + 48)))
        + (float)(v24 * *(float *)(a5 + 60));
    float v36 = (float)((float)(v23 * *(float *)(a5 + 40)) + (float)(v22 * *(float *)(a5 + 52)))
        + (float)(v24 * *(float *)(a5 + 64));
    float v37 = (float)((float)(v23 * *(float *)(a5 + 44)) + (float)(v22 * *(float *)(a5 + 56)))
        + (float)(v24 * *(float *)(a5 + 68));
    uint64_t v38 = v21 + 12;
    float v39 = 1.0;
    float v40 = a13;
    float v93 = a9;
    float v90 = v36;
    float v91 = v35;
    float v89 = v37;
    uint64_t v92 = a5;
    while (1)
    {
      float v42 = *(float *)(v38 - 12);
      float v41 = *(float *)(v38 - 8);
      float v43 = *(float *)(v38 - 4);
      if ((float)((float)((float)(v36 * v41) + (float)(v42 * v35)) + (float)(v43 * v37)) >= 0.0)
      {
        float v44 = (float)(v42 * *(float *)(a5 + 44)) + (float)(v41 * *(float *)(a5 + 56));
        float32x2_t v45 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a5 + 36), v42), vmul_n_f32(*(float32x2_t *)(a5 + 48), v41)), vmul_n_f32(*(float32x2_t *)(a5 + 60), v43));
        float v46 = v44 + (float)(v43 * *(float *)(a5 + 68));
        float32x2_t v100 = v45;
        float v101 = v46;
        float v47 = v45.f32[1];
        float v48 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v45.f32[1], v45, 1), v45.f32[0], v45.f32[0]) + (float)(v46 * v46));
        float v49 = v39 / v48;
        if (v48 > 0.0)
        {
          float32x2_t v45 = vmul_n_f32(v45, v49);
          float32x2_t v100 = v45;
          float v46 = v46 * v49;
          float v101 = v46;
          float v47 = v45.f32[1];
        }
        float v50 = a3[1];
        float v51 = a3[2];
        float v52 = a3[3];
        float v53 = a3[4];
        float v54 = a3[5];
        float v55 = (float)(v45.f32[0] * *a3) + (float)(v47 * v52);
        float v56 = (float)(v45.f32[0] * v50) + (float)(v47 * v53);
        float v57 = (float)(v45.f32[0] * v51) + (float)(v47 * v54);
        float v58 = a3[6];
        float v59 = a3[7];
        float v60 = a3[8];
        float v61 = v55 + (float)(v46 * v58);
        float v62 = v56 + (float)(v46 * v59);
        float v63 = v57 + (float)(v46 * v60);
        float v64 = (float)((float)(v50 * v62) + (float)(*a3 * v61)) + (float)(v51 * v63);
        float v65 = (float)((float)(v53 * v62) + (float)(v52 * v61)) + (float)(v54 * v63);
        float v66 = (float)((float)(v59 * v62) + (float)(v58 * v61)) + (float)(v60 * v63);
        float v67 = (float)((float)(v62 * a4[1]) + (float)(*a4 * v61)) + (float)(a4[2] * v63);
        float v68 = (float)((float)(v62 * a4[4]) + (float)(a4[3] * v61)) + (float)(a4[5] * v63);
        float v69 = (float)((float)(v62 * a15[1]) + (float)(*a15 * v61)) + (float)(a15[2] * v63);
        float v70 = (float)((float)(v65 * COERCE_FLOAT(*(_DWORD *)(a1 + 72) | LODWORD(v65) & 0x80000000))
                    + (float)(COERCE_FLOAT(*(_DWORD *)(a1 + 68) | LODWORD(v64) & 0x80000000) * v64))
            + (float)(COERCE_FLOAT(*(_DWORD *)(a1 + 76) | LODWORD(v66) & 0x80000000) * v66);
        float v71 = (float)((float)(v68 * COERCE_FLOAT(*(_DWORD *)(a2 + 72) | LODWORD(v68) & 0x80000000))
                    + (float)(COERCE_FLOAT(*(_DWORD *)(a2 + 68) | LODWORD(v67) & 0x80000000) * v67))
            + (float)(COERCE_FLOAT(*(_DWORD *)(a2 + 76) | COERCE_UNSIGNED_INT((float)((float)(v62 * a4[7]) + (float)(a4[6] * v61))+ (float)(a4[8] * v63)) & 0x80000000)* (float)((float)((float)(v62 * a4[7]) + (float)(a4[6] * v61)) + (float)(a4[8] * v63)));
        if (v70 <= *(float *)(a1 + 64)) {
          float v70 = *(float *)(a1 + 64);
        }
        if (v71 <= *(float *)(a2 + 64)) {
          float v71 = *(float *)(a2 + 64);
        }
        float v72 = v70 + v71;
        float v73 = v69 + v72;
        float v74 = v72 - v69;
        if (v73 < v74) {
          float v74 = v73;
        }
        if (v74 <= *a10)
        {
          char v88 = v33;
          float v75 = a15;
          *(_DWORD *)float v40 = v32;
          v40 += 4;
          char v76 = (float *)(v94 + 12 * *(unsigned __int8 *)(v38 + 7));
          float v77 = *(float *)(v38 - 8);
          float v78 = v76[1];
          float v98 = *v76;
          float v99 = *(float *)(v38 - 12);
          float v79 = *(float *)(v38 - 4);
          float v80 = v76[2];
          float v81 = -(float)(*(float *)v38 * v49);
          *(void *)float v102 = 0;
          uint64_t v82 = a2;
          float v97 = v49;
          (*(void (**)(uint64_t, float32x2_t *, uint64_t, uint64_t, float *, float *))(a2 + 88))(a2, &v100, a7, a6, &v102[1], v102);
          if ((float)(v81 + v93) < v102[1]
            || (float v83 = v97 * (float)((float)((float)(v77 * v78) + (float)(v99 * v98)) + (float)(v79 * v80)),
                (float)(v102[0] + v93) < v83))
          {
            char v86 = v88;
            return v86 & 1;
          }
          float v84 = v81 - v102[1];
          float v85 = v102[0] - v83;
          if ((float)(v81 - v102[1]) >= v85) {
            float v84 = v85;
          }
          float v36 = v90;
          float v35 = v91;
          float v37 = v89;
          if (v84 < *a10)
          {
            *a11 = v61;
            a11[1] = v62;
            a11[2] = v63;
            *a10 = v84;
            *a12 = v32;
          }
          a15 = v75;
          a2 = v82;
          a5 = v92;
          float v39 = 1.0;
        }
      }
      BOOL v33 = ++v32 >= v20;
      v38 += 20;
      if (v20 == v32) {
        goto LABEL_26;
      }
    }
  }
  float v40 = a13;
LABEL_26:
  *a14 = (unint64_t)(v40 - a13) >> 2;
  char v86 = 1;
  return v86 & 1;
}

uint64_t PxcFindSeparatingAxes(uint64_t result, unsigned int *a2, int a3, void *a4, uint64_t a5, float *a6, float *a7, float *a8, float a9, uint64_t a10)
{
  float v93 = (_DWORD *)result;
  if (a3)
  {
    uint64_t v15 = a4[3];
    uint64_t v16 = a4[4];
    uint64_t v17 = a4[5];
    uint64_t v91 = v17;
    uint64_t v92 = v15;
    do
    {
      unsigned int v18 = *a2++;
      uint64_t v19 = v15 + 20 * v18;
      unsigned int v20 = *(unsigned __int8 *)(v19 + 18);
      if (*(unsigned char *)(v19 + 18))
      {
        unsigned int v21 = 0;
        float v22 = (unsigned __int8 *)(v17 + *(unsigned __int16 *)(v19 + 16));
        float v23 = (float *)(v16 + 12 * *v22);
        float v24 = v23[1];
        float v25 = v23[2];
        float v26 = (float)((float)(*v23 * *(float *)(a10 + 8)) + (float)(v24 * *(float *)(a10 + 20)))
            + (float)(v25 * *(float *)(a10 + 32));
        *(float32x2_t *)&long long v10 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a10, *v23), vmul_n_f32(*(float32x2_t *)(a10 + 12), v24)), vmul_n_f32(*(float32x2_t *)(a10 + 24), v25));
        BOOL v27 = (float)(a6[3]
                    + (float)(vmlas_n_f32(vmuls_lane_f32(a6[1], *(float32x2_t *)&v10, 1), *a6, *(float *)&v10)
                            + (float)(v26 * a6[2]))) <= a9;
        do
        {
          float32x2_t v28 = (float32x2_t)v10;
          float v29 = v26;
          BOOL v30 = v27;
          int v31 = v21++;
          if (v21 < v20) {
            int v32 = v31 + 1;
          }
          else {
            int v32 = 0;
          }
          BOOL v33 = (float *)(v16 + 12 * v22[v32]);
          float v34 = v33[1];
          float v35 = v33[2];
          *(float32x2_t *)&long long v10 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a10, *v33), vmul_n_f32(*(float32x2_t *)(a10 + 12), v34)), vmul_n_f32(*(float32x2_t *)(a10 + 24), v35));
          float v26 = (float)((float)(*v33 * *(float *)(a10 + 8)) + (float)(v34 * *(float *)(a10 + 20)))
              + (float)(v35 * *(float *)(a10 + 32));
          float v36 = a6[3]
              + (float)(vmlas_n_f32(vmuls_lane_f32(a6[1], *(float32x2_t *)&v10, 1), *a6, *(float *)&v10)
                      + (float)(v26 * a6[2]));
          BOOL v27 = v36 <= a9;
          if (v30 || v36 <= a9)
          {
            LODWORD(v37) = vsub_f32(*(float32x2_t *)&v10, v28).u32[0];
            float v38 = *((float *)&v10 + 1) - v28.f32[1];
            float v39 = a7[3];
            float v40 = v26 - v29;
            float v41 = a7[6];
            float v42 = vmlas_n_f32((float)(*((float *)&v10 + 1) - v28.f32[1]) * v39, *a7, v37)
                + (float)((float)(v26 - v29) * v41);
            float v43 = a8[3];
            float v44 = v43 - *a8;
            LODWORD(v45) = vadd_f32(v28, *(float32x2_t *)&v10).u32[0];
            float v46 = v28.f32[1] + *((float *)&v10 + 1);
            float v47 = v29 + v26;
            float v48 = (float)(vmlas_n_f32((float)(v28.f32[1] + *((float *)&v10 + 1)) * v39, *a7, v45)
                        + (float)((float)(v29 + v26) * v41))
                + (float)(a7[9] * 2.0);
            float v49 = v43 + *a8;
            float v50 = fabsf(v42);
            if (vabds_f32(v48, v49) <= (float)(v50 + v44))
            {
              float v51 = a7[1];
              float v52 = a7[4];
              float v53 = a7[7];
              float v54 = (float)((float)(v38 * v52) + (float)(v37 * v51)) + (float)(v40 * v53);
              float v55 = a8[4];
              float v56 = a8[1];
              float v57 = v55 - v56;
              float v58 = (float)((float)((float)(v46 * v52) + (float)(v45 * v51)) + (float)(v47 * v53))
                  + (float)(a7[10] * 2.0);
              float v59 = v55 + v56;
              float v60 = fabsf(v54);
              if (vabds_f32(v58, v55 + v56) <= (float)((float)(v55 - v56) + v60))
              {
                float v61 = a7[2];
                float v62 = a7[5];
                float v63 = a7[8];
                float v64 = (float)((float)(v38 * v62) + (float)(v37 * v61)) + (float)(v40 * v63);
                float v65 = a8[5];
                float v66 = a8[2];
                float v67 = v65 - v66;
                float v68 = (float)((float)((float)(v46 * v62) + (float)(v45 * v61)) + (float)(v47 * v63))
                    + (float)(a7[11] * 2.0);
                float v69 = v65 + v66;
                float v70 = fabsf(v64);
                if (vabds_f32(v68, v69) <= (float)(v67 + v70))
                {
                  float v71 = v48 - v49;
                  float v72 = v68 - v69;
                  float v73 = fabsf((float)(v54 * v72) - (float)(v64 * (float)(v58 - v59)));
                  float v74 = (float)(v60 * v67) + (float)(v57 * v70);
                  float v75 = fabsf((float)(v64 * v71) - (float)(v42 * v72));
                  float v76 = (float)(v50 * v67) + (float)(v44 * v70);
                  BOOL v77 = v73 <= v74 && v75 <= v76;
                  float v78 = fabsf((float)(v42 * (float)(v58 - v59)) - (float)(v54 * v71));
                  float v79 = (float)(v50 * v57) + (float)(v44 * v60);
                  if (v77 && v78 <= v79)
                  {
                    float32x2_t v81 = vsub_f32(v28, *(float32x2_t *)&v10);
                    float32x2_t v82 = *(float32x2_t *)(a5 + 8);
                    v82.i32[1] = *(_DWORD *)(a5 + 20);
                    float v83 = v29 - v26;
                    float v84 = v83 * *(float *)(a5 + 32);
                    float32x2_t v85 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a5, v81.f32[0]), vmul_lane_f32(*(float32x2_t *)(a5 + 12), v81, 1)), vmul_n_f32(*(float32x2_t *)(a5 + 24), v83));
                    float v86 = vaddv_f32(vmul_f32(v81, v82)) + v84;
                    float v87 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v85, v85).i32[1]), v85.f32[0], v85.f32[0])
                        + (float)(v86 * v86);
                    int v97 = a3;
                    float v96 = a2;
                    long long v95 = v10;
                    if (v87 <= 0.0)
                    {
                      float32x2_t v89 = 0;
                      float v90 = 0.0;
                    }
                    else
                    {
                      float v88 = 1.0 / sqrtf(v87);
                      float32x2_t v89 = vmul_n_f32(v85, v88);
                      float v90 = v86 * v88;
                    }
                    float32x2_t v98 = v89;
                    float v99 = v90;
                    float result = physx::Gu::SeparatingAxes::addAxis(v93, (float *)&v98);
                    a3 = v97;
                    a2 = v96;
                    uint64_t v17 = v91;
                    uint64_t v15 = v92;
                    long long v10 = v95;
                  }
                }
              }
            }
          }
        }
        while (v20 != v21);
      }
      --a3;
    }
    while (a3);
  }
  return result;
}

uint64_t anonymous namespace'::ConvexMeshContactGeneration::generateLastContacts(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(*(void *)this + 4368);
  if (v1 > 0x10)
  {
    uint64_t v2 = this;
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(*(void *)this + 4360);
    unint64_t v5 = v1 / 0x11uLL;
    uint64_t v6 = this + 8;
    uint64_t v7 = this + 1292;
    do
    {
      uint64_t v8 = v4 + 68 * v3;
      __int32 v9 = *(_DWORD *)v8;
      unsigned int v10 = *(_DWORD *)(v8 + 40);
      unsigned int v11 = *(_DWORD *)(v8 + 44);
      unsigned int v12 = *(_DWORD *)(v8 + 48);
      float v13 = *(float *)(v8 + 16);
      float v14 = *(float *)(v8 + 20);
      float v16 = *(float *)(v8 + 8);
      float v15 = *(float *)(v8 + 12);
      float v17 = *(float *)(v8 + 24);
      float v18 = *(float *)(v8 + 28);
      float v19 = *(float *)(v8 + 32);
      float v20 = *(float *)(v8 + 36);
      float v22 = *(float *)(v8 + 4);
      uint64_t v21 = v8 + 4;
      float v23 = v22;
      float v24 = v13 - v22;
      float v25 = v14 - v16;
      float v26 = v17 - v15;
      float v27 = v18 - v22;
      float v28 = v19 - v16;
      float v29 = v20 - v15;
      float v30 = v22 - *(float *)(v2 + 2160);
      float v31 = v16 - *(float *)(v2 + 2164);
      float v32 = v15 - *(float *)(v2 + 2168);
      float v33 = (float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v26 * v26);
      float v34 = (float)((float)((float)(v14 - v16) * (float)(v19 - v16)) + (float)((float)(v13 - v22) * (float)(v18 - v22)))
          + (float)((float)(v17 - v15) * (float)(v20 - v15));
      float v35 = (float)((float)(v28 * v28) + (float)(v27 * v27)) + (float)(v29 * v29);
      float v36 = (float)((float)((float)(v14 - v16) * v31) + (float)(v30 * (float)(v13 - v22)))
          + (float)(v32 * (float)(v17 - v15));
      float v37 = (float)((float)((float)(v19 - v16) * v31) + (float)(v30 * (float)(v18 - v22)))
          + (float)(v32 * (float)(v20 - v15));
      float v38 = (float)(v33 * v35) - (float)(v34 * v34);
      float v39 = (float)(v34 * v37) - (float)(v35 * v36);
      float v40 = (float)(v34 * v36) - (float)(v33 * v37);
      if ((float)(v39 + v40) <= fabsf(v38))
      {
        if (v39 >= 0.0)
        {
          if (v40 >= 0.0)
          {
            if (v38 == 0.0)
            {
LABEL_58:
              for (unsigned int i = *(unsigned __int8 *)(v2 + (v10 & 0x7F) + 1932); i != 255; unsigned int i = *(unsigned __int8 *)(v2 + i + 1804))
              {
                if (*(_DWORD *)(v7 + 4 * i) == v10) {
                  goto LABEL_56;
                }
              }
            }
LABEL_52:
            float v49 = (float)(v25 * v29) - (float)(v26 * v28);
            float v50 = (float)(v26 * v27) - (float)(v24 * v29);
            float v51 = (float)(v24 * v28) - (float)(v25 * v27);
            float v52 = (float)((float)(v50 * v50) + (float)(v49 * v49)) + (float)(v51 * v51);
            float v53 = 0.0;
            float v54 = 0.0;
            float v55 = 0.0;
            if (v52 > 0.0)
            {
              float v56 = 1.0 / sqrtf(v52);
              float v53 = v49 * v56;
              float v54 = v50 * v56;
              float v55 = v51 * v56;
            }
            v71[0] = v53;
            v71[1] = v54;
            v71[2] = v55;
            v71[3] = -(float)((float)((float)(v16 * v54) + (float)(v23 * v53)) + (float)(v15 * v55));
            v70[0] = (float)((float)(v23 + v13) + v18) * 0.33333;
            v70[1] = (float)((float)(v16 + v14) + v19) * 0.33333;
            v70[2] = (float)((float)(v15 + v17) + v20) * 0.33333;
            uint64_t v57 = v4 + 68 * v3;
            uint64_t v68 = *(void *)(v57 + 52);
            float v58 = *(float *)(v57 + 64);
            int v69 = *(_DWORD *)(v57 + 60);
            if (this) {
              *(unsigned char *)(v2 + 2256) = 1;
            }
            goto LABEL_56;
          }
          if (v36 >= 0.0) {
            goto LABEL_58;
          }
        }
        else if (v40 >= 0.0 || v36 >= 0.0)
        {
          if (v37 >= 0.0) {
            goto LABEL_58;
          }
          if (v35 <= (float)-v37)
          {
LABEL_37:
            for (unsigned int j = *(unsigned __int8 *)(v2 + (v12 & 0x7F) + 1932); j != 255; unsigned int j = *(unsigned __int8 *)(v2 + j + 1804))
            {
              if (*(_DWORD *)(v7 + 4 * j) == v12) {
                goto LABEL_56;
              }
            }
            goto LABEL_52;
          }
LABEL_23:
          if (v10 >= v12) {
            int v46 = v12;
          }
          else {
            int v46 = v10;
          }
          if (v10 <= v12) {
            int v47 = v12;
          }
          else {
            int v47 = v10;
          }
          goto LABEL_51;
        }
        if (v33 <= (float)-v36) {
          goto LABEL_62;
        }
      }
      else
      {
        if (v39 < 0.0)
        {
          float v41 = v34 + v36;
          float v42 = v35 + v37;
          if ((float)(v35 + v37) > v41)
          {
            float v43 = v42 - v41;
            goto LABEL_30;
          }
          if (v42 <= 0.0) {
            goto LABEL_37;
          }
          if (v37 >= 0.0) {
            goto LABEL_58;
          }
          goto LABEL_23;
        }
        if (v40 >= 0.0)
        {
          float v43 = (float)((float)(v35 + v37) - v34) - v36;
          if (v43 <= 0.0) {
            goto LABEL_37;
          }
LABEL_30:
          if (v43 >= (float)(v35 + (float)(v33 + (float)(v34 * -2.0)))) {
            goto LABEL_62;
          }
          goto LABEL_31;
        }
        float v44 = v34 + v37;
        float v45 = v33 + v36;
        if ((float)(v33 + v36) > v44)
        {
          if ((float)(v45 - v44) >= (float)(v35 + (float)(v33 + (float)(v34 * -2.0)))) {
            goto LABEL_37;
          }
LABEL_31:
          if (v11 >= v12) {
            int v46 = v12;
          }
          else {
            int v46 = v11;
          }
          if (v11 <= v12) {
            int v47 = v12;
          }
          else {
            int v47 = v11;
          }
          goto LABEL_51;
        }
        if (v45 <= 0.0)
        {
LABEL_62:
          for (unsigned int k = *(unsigned __int8 *)(v2 + (v11 & 0x7F) + 1932); k != 255; unsigned int k = *(unsigned __int8 *)(v2 + k + 1804))
          {
            if (*(_DWORD *)(v7 + 4 * k) == v11) {
              goto LABEL_56;
            }
          }
          goto LABEL_52;
        }
        if (v36 >= 0.0) {
          goto LABEL_58;
        }
      }
      if (v10 >= v11) {
        int v46 = v11;
      }
      else {
        int v46 = v10;
      }
      if (v10 <= v11) {
        int v47 = v11;
      }
      else {
        int v47 = v10;
      }
LABEL_51:
      float v66 = v14;
      float v67 = v13;
      float v64 = v17;
      float v65 = v16;
      float v62 = v19;
      float v63 = v18;
      float v61 = v20;
      this = physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::contains(v6, v46, v47);
      float v20 = v61;
      float v19 = v62;
      float v18 = v63;
      float v17 = v64;
      float v16 = v65;
      float v14 = v66;
      float v13 = v67;
      if ((this & 1) == 0) {
        goto LABEL_52;
      }
LABEL_56:
      ++v3;
    }
    while (v3 != v5);
  }
  return this;
}

float anonymous namespace'::ConvexMeshContactGeneration::ConvexMeshContactGeneration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, char a12, long long a13, uint64_t a14)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 1288) = 0;
  *(void *)&long long v14 = -1;
  *((void *)&v14 + 1) = -1;
  *(_OWORD *)(a1 + 1160) = v14;
  *(_OWORD *)(a1 + 1176) = v14;
  *(_OWORD *)(a1 + 1192) = v14;
  *(_OWORD *)(a1 + 1208) = v14;
  *(_OWORD *)(a1 + 1224) = v14;
  *(_OWORD *)(a1 + 1240) = v14;
  *(_OWORD *)(a1 + 1256) = v14;
  *(_OWORD *)(a1 + 1272) = v14;
  *(_DWORD *)(a1 + 2060) = 0;
  *(_OWORD *)(a1 + 1932) = v14;
  *(_OWORD *)(a1 + 1948) = v14;
  *(_OWORD *)(a1 + 1964) = v14;
  *(_OWORD *)(a1 + 1980) = v14;
  *(_OWORD *)(a1 + 1996) = v14;
  *(_OWORD *)(a1 + 2012) = v14;
  *(_OWORD *)(a1 + 2028) = v14;
  *(_OWORD *)(a1 + 2044) = v14;
  LODWORD(v14) = *(_DWORD *)a3;
  float v15 = *(float *)(a3 + 4);
  float v16 = *(float *)(a3 + 8);
  float v17 = *(float *)(a3 + 12);
  float v18 = *(float *)&v14 * (float)(*(float *)&v14 + *(float *)&v14);
  float v19 = v15 * (float)(v15 + v15);
  float v20 = v16 * (float)(v16 + v16);
  float v21 = (float)(*(float *)&v14 + *(float *)&v14) * v15;
  float v22 = (float)(*(float *)&v14 + *(float *)&v14) * v16;
  float v23 = (float)(*(float *)&v14 + *(float *)&v14) * v17;
  float v24 = (float)(v15 + v15) * v16;
  float v25 = (float)(v15 + v15) * v17;
  float v26 = (float)(v16 + v16) * v17;
  *(float *)&long long v14 = (float)(1.0 - v19) - v20;
  float v27 = v21 + v26;
  float v28 = v22 - v25;
  *(_DWORD *)(a1 + 2064) = v14;
  *(float *)(a1 + 2068) = v21 + v26;
  *(float *)(a1 + 2072) = v22 - v25;
  float v29 = v21 - v26;
  float v30 = (float)(1.0 - v18) - v20;
  float v31 = v24 + v23;
  *(float *)(a1 + 2076) = v29;
  *(float *)(a1 + 2080) = v30;
  *(float *)(a1 + 2084) = v24 + v23;
  float v32 = v22 + v25;
  float v33 = v24 - v23;
  float v34 = (float)(1.0 - v18) - v19;
  *(float *)(a1 + 2088) = v32;
  *(float *)(a1 + 2092) = v24 - v23;
  *(float *)(a1 + 2096) = v34;
  float v35 = *(float *)(a3 + 16);
  float v36 = *(float *)(a3 + 20);
  *(float *)(a1 + 2100) = v35;
  *(float *)(a1 + 2104) = v36;
  float v37 = *(float *)(a3 + 24);
  *(float *)(a1 + 2108) = v37;
  float v38 = *(float *)a4;
  float v39 = *(float *)(a4 + 4);
  float v40 = *(float *)(a4 + 8);
  float v41 = *(float *)(a4 + 12);
  float v42 = v39 + v39;
  float v43 = v40 + v40;
  float v44 = v39 * (float)(v39 + v39);
  float v45 = v40 * (float)(v40 + v40);
  float v46 = (float)(v38 + v38) * v39;
  float v47 = (float)(v38 + v38) * v40;
  float v48 = (float)(v38 + v38) * v41;
  float v49 = v42 * v40;
  float v50 = v42 * v41;
  float v51 = v43 * v41;
  *(float *)(a1 + 2112) = (float)(1.0 - v44) - v45;
  *(float *)(a1 + 2116) = v46 + v51;
  *(float *)(a1 + 2120) = v47 - v50;
  float v52 = 1.0 - (float)(v38 * (float)(v38 + v38));
  *(float *)(a1 + 2124) = v46 - v51;
  *(float *)(a1 + 2128) = v52 - v45;
  *(float *)(a1 + 2132) = v49 + v48;
  *(float *)(a1 + 2136) = v47 + v50;
  *(float *)(a1 + 2140) = v49 - v48;
  *(float *)(a1 + 2144) = v52 - v44;
  *(void *)(a1 + 2148) = *(void *)(a4 + 16);
  *(_DWORD *)(a1 + 2156) = *(_DWORD *)(a4 + 24);
  *(void *)(a1 + 2184) = a5;
  *(void *)(a1 + 2192) = a6;
  *(void *)(a1 + 2200) = a7;
  *(void *)(a1 + 2208) = a8;
  *(float *)(a1 + 2216) = a9;
  *(float *)(a1 + 2220) = a10;
  *(unsigned char *)(a1 + 2225) = a12;
  *(float *)(a1 + 2228) = a11;
  *(_OWORD *)(a1 + 2232) = a13;
  *(void *)(a1 + 2248) = a14;
  *(_DWORD *)(a2 + 4368) = 0;
  *(unsigned char *)(a1 + 2256) = 0;
  float v53 = a5[1];
  float v54 = *(float *)&v14 * *a5;
  *(float *)&long long v14 = v29 * v53;
  float v55 = (float)(v27 * *a5) + (float)(v30 * v53);
  float v56 = (float)(v28 * *a5) + (float)(v31 * v53);
  float v57 = a5[2];
  *(float *)(a1 + 2160) = v35 + (float)((float)(v54 + *(float *)&v14) + (float)(v32 * v57));
  *(float *)(a1 + 2164) = v36 + (float)(v55 + (float)(v33 * v57));
  *(float *)(a1 + 2168) = v37 + (float)(v56 + (float)(v34 * v57));
  float v58 = a5[1];
  float v59 = a5[2];
  float result = (float)((float)((float)(*a5 * *(float *)(a6 + 8)) + (float)(v58 * *(float *)(a6 + 20)))
                 + (float)(v59 * *(float *)(a6 + 32)))
         + *(float *)(a6 + 44);
  *(float32x2_t *)(a1 + 2172) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a6, *a5), vmul_n_f32(*(float32x2_t *)(a6 + 12), v58)), vmul_n_f32(*(float32x2_t *)(a6 + 24), v59)), *(float32x2_t *)(a6 + 36));
  *(float *)(a1 + 2180) = result;
  return result;
}

uint64_t ConvexMeshContactGenerationCallback::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, double a6, float32x4_t a7, float32x4_t a8, uint64_t a9, unsigned int *a10)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (physx::Gu::intersectTriangleBox(*(float32x4_t **)(a1 + 2312), a3, a4, a5, a6, a7, a8))
  {
    if (*(unsigned char *)(a1 + 2296))
    {
      float32x2_t v44 = *(float32x2_t *)a3;
      float v16 = a3[2];
      float v46 = *a4;
      *(void *)&long long v17 = *(void *)(a4 + 1);
      *((void *)&v17 + 1) = *(void *)a5;
      long long v47 = v17;
      float v18 = a5[2];
      uint64_t v19 = 2;
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 2280);
      float v21 = *(float *)(v20 + 8);
      float v22 = *a3;
      float v23 = a3[1];
      float v24 = *(float *)(v20 + 20);
      float v25 = a3[2];
      float v26 = *(float *)(v20 + 32);
      float v16 = (float)((float)(*a3 * v21) + (float)(v23 * v24)) + (float)(v25 * v26);
      float v27 = *a4;
      float v28 = a4[1];
      float v29 = a4[2];
      BOOL v30 = *(unsigned char *)(v20 + 72) == 0;
      uint64_t v31 = 24;
      if (!*(unsigned char *)(v20 + 72)) {
        uint64_t v31 = 12;
      }
      float v32 = (float32x2_t *)((char *)&v44 + v31);
      *(float *)((char *)&v44 + v31 + 8) = (float)((float)(v21 * *a4) + (float)(v24 * v28)) + (float)(v26 * v29);
      float v33 = *a5;
      float v34 = a5[1];
      float v35 = (float)(v21 * *a5) + (float)(v24 * v34);
      float v36 = a5[2];
      float v18 = v35 + (float)(v26 * v36);
      uint64_t v19 = 1;
      if (v30) {
        uint64_t v19 = 2;
      }
      float32x2_t v37 = *(float32x2_t *)v20;
      float32x2_t v38 = *(float32x2_t *)(v20 + 12);
      float32x2_t v39 = *(float32x2_t *)(v20 + 24);
      float32x2_t v44 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v20, v22), vmul_n_f32(v38, v23)), vmul_n_f32(v39, v25));
      *float v32 = vadd_f32(vadd_f32(vmul_n_f32(v37, v27), vmul_n_f32(v38, v28)), vmul_n_f32(v39, v29));
      *(float32x2_t *)((char *)&v44 + 12 * v19) = vadd_f32(vadd_f32(vmul_n_f32(v37, v33), vmul_n_f32(v38, v34)), vmul_n_f32(v39, v36));
    }
    float v45 = v16;
    *((float *)&v44 + 3 * v19 + 2) = v18;
    uint64_t v40 = *(unsigned int *)(a2 + 16);
    uint64_t v41 = *(void *)(a1 + 2288);
    if (v41) {
      int v42 = *(unsigned __int8 *)(v41 + v40);
    }
    else {
      int v42 = 56;
    }
  }
  return 1;
}

void ConvexMeshContactGenerationCallback::~ConvexMeshContactGenerationCallback(ConvexMeshContactGenerationCallback *this)
{
}

float anonymous namespace'::ConvexMeshContactGeneration::processTriangle(uint64_t a1, float *a2, __int32 a3, int a4, unsigned int *a5)
{
  float result = *a2;
  float v10 = a2[1];
  float v12 = a2[2];
  float v11 = a2[3];
  float v13 = v11 - *a2;
  float v15 = a2[4];
  float v14 = a2[5];
  float v16 = a2[6];
  float v17 = a2[7];
  float v18 = v16 - *a2;
  float v19 = a2[8];
  float v20 = (float)((float)(v15 - v10) * (float)(v19 - v12)) - (float)((float)(v14 - v12) * (float)(v17 - v10));
  float v21 = (float)((float)(v14 - v12) * v18) - (float)(v13 * (float)(v19 - v12));
  float v22 = (float)(v13 * (float)(v17 - v10)) - (float)((float)(v15 - v10) * v18);
  float v23 = (float)((float)(v21 * v21) + (float)(v20 * v20)) + (float)(v22 * v22);
  float v24 = 0.0;
  float v25 = 0.0;
  float v26 = 0.0;
  if (v23 > 0.0)
  {
    float v27 = 1.0 / sqrtf(v23);
    float v24 = v20 * v27;
    float v25 = v21 * v27;
    float v26 = v22 * v27;
  }
  v57[0] = v24;
  v57[1] = v25;
  float v28 = (float)((float)(v10 * v25) + (float)(result * v24)) + (float)(v12 * v26);
  v57[2] = v26;
  v57[3] = -v28;
  if ((float)((float)((float)((float)(v25 * *(float *)(a1 + 2164)) + (float)(*(float *)(a1 + 2160) * v24))
                     + (float)(*(float *)(a1 + 2168) * v26))
             - v28) >= 0.0)
  {
    float v54 = (float)((float)(v11 + result) + v16) * 0.33333;
    float v55 = (float)((float)(v15 + v10) + v17) * 0.33333;
    float v56 = (float)((float)(v14 + v12) + v19) * 0.33333;
    float v29 = (float)((float)(v54 * *(float *)(a1 + 2120)) + (float)(v55 * *(float *)(a1 + 2132)))
        + (float)(v56 * *(float *)(a1 + 2144));
    float v30 = *(float *)(a1 + 2156);
    float32x2_t v52 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a1 + 2112), v54), vmul_n_f32(*(float32x2_t *)(a1 + 2124), v55)), vmul_n_f32(*(float32x2_t *)(a1 + 2136), v56)), *(float32x2_t *)(a1 + 2148));
    float v53 = v29 + v30;
    float v49 = 0.0;
    char v48 = 0;
    if (triangleConvexTest(*(void *)(a1 + 2184), a4, a2, v57, (float *)&v52, *(void *)(a1 + 2200), a1 + 2064, (float *)(a1 + 2112), *(float *)(a1 + 2216), *(float **)(a1 + 2208), &v50, &v49, &v48, *(unsigned char *)(a1 + 2225)))
    {
      if (v48)
      {
        {
          *(unsigned char *)(a1 + 2256) = 1;
          unsigned int v31 = *a5;
          unsigned int v32 = a5[1];
          if (*a5 >= v32) {
            int v33 = a5[1];
          }
          else {
            int v33 = *a5;
          }
          if (v31 <= v32) {
            unsigned int v31 = a5[1];
          }
          unsigned int v46 = v33;
          unsigned int v47 = v31;
          physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 8, (int *)&v46);
          unsigned int v34 = *a5;
          unsigned int v35 = a5[2];
          if (*a5 >= v35) {
            int v36 = a5[2];
          }
          else {
            int v36 = *a5;
          }
          if (v34 <= v35) {
            unsigned int v34 = a5[2];
          }
          unsigned int v46 = v36;
          unsigned int v47 = v34;
          physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 8, (int *)&v46);
          unsigned int v37 = a5[1];
          unsigned int v38 = a5[2];
          if (v37 >= v38) {
            int v39 = a5[2];
          }
          else {
            int v39 = a5[1];
          }
          if (v37 <= v38) {
            unsigned int v37 = a5[2];
          }
          unsigned int v46 = v39;
          unsigned int v47 = v37;
          physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 8, (int *)&v46);
          uint64_t v40 = a1 + 1292;
          unsigned int v46 = *a5;
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(v40, &v46);
          unsigned int v46 = a5[1];
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(v40, &v46);
          unsigned int v46 = a5[2];
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(v40, &v46);
        }
      }
      else
      {
        uint64_t v41 = *(void *)a1;
        unsigned int v42 = *(_DWORD *)(*(void *)a1 + 4368);
        unsigned int v43 = v42 + 17;
        if ((*(_DWORD *)(*(void *)a1 + 4372) & 0x7FFFFFFFu) < v42 + 17)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<4352u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(v41, v42 + 17);
          uint64_t v41 = *(void *)a1;
          unsigned int v42 = *(_DWORD *)(*(void *)a1 + 4368);
        }
        uint64_t v44 = *(void *)(v41 + 4360) + 4 * v42;
        *(_DWORD *)(v41 + 4368) = v43;
        *(_DWORD *)uint64_t v44 = a3;
        *(void *)(v44 + 4) = *(void *)a2;
        *(void *)(v44 + 12) = *((void *)a2 + 1);
        *(void *)(v44 + 20) = *((void *)a2 + 2);
        *(void *)(v44 + 28) = *((void *)a2 + 3);
        *(float *)(v44 + 36) = a2[8];
        *(_DWORD *)(v44 + 40) = *a5;
        *(_DWORD *)(v44 + 44) = a5[1];
        *(_DWORD *)(v44 + 48) = a5[2];
        *(float32x2_t *)(v44 + 52) = v50;
        float result = v51;
        float v45 = v49;
        *(float *)(v44 + 60) = v51;
        *(float *)(v44 + 64) = v45;
      }
    }
  }
  return result;
}

uint64_t triangleConvexTest(uint64_t a1, int a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7, float *a8, float a9, float *a10, float32x2_t *a11, float *a12, char *a13, char a14)
{
  uint64_t v405 = a6;
  v413 = a4;
  float v423 = a9;
  float v417 = *(float *)&a2;
  v408 = a10;
  uint64_t v430 = *MEMORY[0x263EF8340];
  unint64_t v21 = *(unsigned int *)(a1 + 16);
  MEMORY[0x270FA5388](a1);
  float v23 = (char *)&v383 - ((v22 + 15) & 0x7FFFFFFF0);
  bzero(v23, v22);
  uint64_t v28 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a1 + 32);
  if (a14)
  {
    if (v21)
    {
      uint64_t v29 = 0;
      float v30 = *a5;
      float v31 = a5[1];
      float v32 = a5[2];
      float v33 = *(float *)a7;
      float v422 = *(float *)(a7 + 12);
      float v421 = *(float *)(a7 + 24);
      float32x2_t v34 = *(float32x2_t *)(a7 + 4);
      *(void *)&long long v24 = *(void *)(a7 + 16);
      float32x2_t v420 = *(float32x2_t *)(a7 + 28);
      float32x2_t v35 = (float32x2_t)__PAIR64__(DWORD1(v24), v34.u32[0]);
      float v419 = *(float *)(a7 + 40);
      long long v36 = v24;
      uint64_t v37 = v28 + 12;
      unsigned int v38 = -1;
      _S6 = *(_DWORD *)(a7 + 44);
      float v40 = 3.4028e38;
      uint64_t v41 = v23;
      unsigned int v42 = v23;
      DWORD1(v36) = v34.i32[1];
      long long v418 = v36;
      float v43 = v423;
      while (1)
      {
        float v44 = *(float *)(v37 - 12);
        float v45 = *(float *)(v37 - 8);
        float v47 = *(float *)(v37 - 4);
        float v46 = *(float *)v37;
        if ((float)(*(float *)v37 + (float)((float)((float)(v31 * v45) + (float)(v30 * v44)) + (float)(v32 * v47))) >= 0.0)
        {
          *(_DWORD *)unsigned int v42 = v29;
          v42 += 4;
          float v48 = (float)((float)(v33 * v44) + (float)(v422 * v45)) + (float)(v421 * v47);
          _D22 = vadd_f32(vadd_f32(vmul_n_f32(v34, v44), vmul_n_f32(*(float32x2_t *)&v24, v45)), vmul_n_f32(v420, v47));
          __asm { FMLA            S27, S6, V22.S[1] }
          float v54 = (float *)(v27 + 12 * *(unsigned __int8 *)(v37 + 7));
          float v55 = _S27 + (float)((float)((float)(v45 * v54[1]) + (float)(v44 * *v54)) + (float)(v47 * v54[2]));
          float v56 = _S27 - v46;
          _S26 = *((_DWORD *)a3 + 2);
          __asm { FMLA            S25, S26, V22.S[1] }
          _S28 = *((_DWORD *)a3 + 5);
          __asm { FMLA            S26, S28, V22.S[1] }
          if (_S25 >= _S26) {
            float v61 = _S26;
          }
          else {
            float v61 = _S25;
          }
          if (_S25 > _S26) {
            _S26 = _S25;
          }
          _S25 = *((_DWORD *)a3 + 8);
          __asm { FMLA            S28, S25, V22.S[1] }
          if (v61 >= _S28) {
            float v64 = _S28;
          }
          else {
            float v64 = v61;
          }
          if (_S26 <= _S28) {
            _S26 = _S28;
          }
          if ((float)(v56 + v43) < v64 || (float)(_S26 + v43) < v55) {
            return 0;
          }
          float v66 = v56 - v64;
          float v67 = _S26 - v55;
          if (v66 < v67) {
            float v67 = v66;
          }
          if (v67 < v40)
          {
            float v14 = v48;
            float v40 = v67;
            unsigned int v38 = v29;
            int8x8_t v15 = (int8x8_t)_D22;
          }
        }
        ++v29;
        v37 += 20;
        if (v21 == v29) {
          goto LABEL_53;
        }
      }
    }
    goto LABEL_55;
  }
  if (!v21)
  {
LABEL_55:
    unint64_t v411 = 0;
    unsigned int v38 = -1;
    float v40 = 3.4028e38;
    uint64_t v41 = v23;
    goto LABEL_56;
  }
  uint64_t v68 = 0;
  float v69 = v408[9];
  float v70 = v408[10];
  float v71 = a5[1];
  float v72 = v408[11];
  float v73 = v408[12];
  float v74 = v408[13];
  float v75 = v408[14];
  float v76 = (float)(*a5 * v69) + (float)(v71 * v73);
  float v77 = (float)(*a5 * v70) + (float)(v71 * v74);
  float v78 = (float)(*a5 * v72) + (float)(v71 * v75);
  float v79 = a5[2];
  float v80 = v408[15];
  float v81 = v408[16];
  float v82 = v408[17];
  float v83 = v76 + (float)(v79 * v80);
  float v84 = v77 + (float)(v79 * v81);
  float v85 = v78 + (float)(v79 * v82);
  float v86 = *(float *)a7;
  float v422 = *(float *)(a7 + 12);
  float v421 = *(float *)(a7 + 24);
  *(void *)&long long v25 = *(void *)(a7 + 4);
  *(void *)&long long v26 = *(void *)(a7 + 16);
  float32x2_t v420 = *(float32x2_t *)(a7 + 28);
  float v419 = *(float *)(a7 + 40);
  _S6 = *(_DWORD *)(a7 + 44);
  long long v87 = v25;
  DWORD1(v87) = DWORD1(v26);
  long long v416 = v87;
  long long v88 = v26;
  DWORD1(v88) = DWORD1(v25);
  long long v418 = v88;
  uint64_t v89 = v28 + 12;
  unsigned int v38 = -1;
  float v40 = 3.4028e38;
  uint64_t v41 = v23;
  unsigned int v42 = v23;
  do
  {
    float v90 = *(float *)(v89 - 12);
    float v91 = *(float *)(v89 - 8);
    float v92 = *(float *)(v89 - 4);
    float v93 = *(float *)v89;
    if ((float)(*(float *)v89 + (float)((float)((float)(v84 * v91) + (float)(v83 * v90)) + (float)(v85 * v92))) >= 0.0)
    {
      float v94 = (float)((float)(v69 * v90) + (float)(v73 * v91)) + (float)(v80 * v92);
      float v95 = (float)((float)(v70 * v90) + (float)(v74 * v91)) + (float)(v81 * v92);
      float v96 = (float)((float)(v72 * v90) + (float)(v75 * v91)) + (float)(v82 * v92);
      float v97 = sqrtf((float)((float)(v95 * v95) + (float)(v94 * v94)) + (float)(v96 * v96));
      float v98 = 1.0 / v97;
      if (v97 <= 0.0) {
        float v99 = 1.0;
      }
      else {
        float v99 = 1.0 / v97;
      }
      float v100 = v94 * v99;
      float v101 = v95 * v99;
      float v102 = v96 * v99;
      *(_DWORD *)unsigned int v42 = v68;
      v42 += 4;
      float v103 = (float)(v421 * v102) + (float)((float)(v86 * v100) + (float)(v422 * v101));
      _D12 = vadd_f32(vmul_n_f32(v420, v102), vadd_f32(vmul_n_f32(*(float32x2_t *)&v25, v100), vmul_n_f32(*(float32x2_t *)&v26, v101)));
      __asm { FMLA            S0, S6, V12.S[1] }
      float v106 = (float *)(v27 + 12 * *(unsigned __int8 *)(v89 + 7));
      float v107 = _S0
           + (float)((float)((float)((float)(v91 * v106[1]) + (float)(v90 * *v106)) + (float)(v92 * v106[2])) * v98);
      float v108 = _S0 - (float)(v93 * v98);
      _S1 = *((_DWORD *)a3 + 2);
      __asm { FMLA            S0, S1, V12.S[1] }
      _S3 = *((_DWORD *)a3 + 5);
      __asm { FMLA            S1, S3, V12.S[1] }
      if (_S0 >= _S1) {
        float v113 = _S1;
      }
      else {
        float v113 = _S0;
      }
      if (_S0 <= _S1) {
        _S0 = _S1;
      }
      _S3 = *((_DWORD *)a3 + 8);
      __asm { FMLA            S1, S3, V12.S[1] }
      if (v113 >= _S1) {
        float v116 = _S1;
      }
      else {
        float v116 = v113;
      }
      if (_S0 <= _S1) {
        float v117 = _S1;
      }
      else {
        float v117 = _S0;
      }
      if ((float)(v108 + v423) < v116 || (float)(v117 + v423) < v107) {
        return 0;
      }
      if ((float)(v108 - v116) >= (float)(v117 - v107)) {
        float v119 = v117 - v107;
      }
      else {
        float v119 = v108 - v116;
      }
      if (v119 < v40)
      {
        float v14 = v103;
        float v40 = v119;
        unsigned int v38 = v68;
        int8x8_t v15 = (int8x8_t)_D12;
      }
    }
    ++v68;
    v89 += 20;
  }
  while (v21 != v68);
  float v43 = v423;
  float32x2_t v35 = (float32x2_t)v416;
LABEL_53:
  if (v38 == -1)
  {
    if (a14)
    {
      uint64_t v136 = 0;
      float v137 = *(float *)a7;
      _S19 = *((_DWORD *)a3 + 2);
      _S22 = *((_DWORD *)a3 + 5);
      uint64_t v140 = v28 + 12;
      unsigned int v38 = -1;
      _S25 = *((_DWORD *)a3 + 8);
      while (1)
      {
        float v142 = *(float *)(v140 - 4);
        float32x2_t v143 = *(float32x2_t *)(v140 - 12);
        float v144 = (float)((float)(v137 * v143.f32[0]) + vmuls_lane_f32(v422, v143, 1)) + (float)(v421 * v142);
        _D4 = (int8x8_t)vadd_f32(vadd_f32(vmul_f32(v35, v143), vmul_f32(*(float32x2_t *)&v418, (float32x2_t)vrev64_s32((int32x2_t)v143))), vmul_n_f32(v420, v142));
        __asm { FMLA            S1, S6, V4.S[1] }
        float v147 = (float *)(v27 + 12 * *(unsigned __int8 *)(v140 + 7));
        float v148 = _S1
             + (float)(vmlas_n_f32(vmuls_lane_f32(v147[1], v143, 1), *v147, v143.f32[0]) + (float)(v142 * v147[2]));
        float v149 = _S1 - *(float *)v140;
        __asm
        {
          FMLA            S0, S19, V4.S[1]
          FMLA            S1, S22, V4.S[1]
        }
        if (_S0 >= _S1) {
          float v152 = _S1;
        }
        else {
          float v152 = _S0;
        }
        if (_S0 <= _S1) {
          _S0 = _S1;
        }
        __asm { FMLA            S1, S25, V4.S[1] }
        float v154 = v152 >= _S1 ? _S1 : v152;
        float v155 = _S0 <= _S1 ? _S1 : _S0;
        if ((float)(v149 + v43) < v154 || (float)(v155 + v43) < v148) {
          return 0;
        }
        v140 += 20;
        float v157 = v149 - v154;
        if ((float)(v149 - v154) >= (float)(v155 - v148)) {
          float v157 = v155 - v148;
        }
        if (v157 < v40) {
          float v14 = v144;
        }
        int8x8_t v15 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v157 < v40), 0x1FuLL)), _D4, v15);
        if (v157 < v40)
        {
          float v40 = v157;
          unsigned int v38 = v136;
        }
        *(_DWORD *)&v41[4 * v136] = v136;
        if (v21 == ++v136) {
          goto LABEL_132;
        }
      }
    }
    float32x2_t v198 = v35;
    uint64_t v199 = 0;
    int v200 = *((_DWORD *)v408 + 11);
    float v415 = v408[14];
    LODWORD(v416) = v200;
    float32x2_t v201 = *(float32x2_t *)(v408 + 9);
    float32x2_t v202 = *(float32x2_t *)(v408 + 12);
    float32x2_t v203 = *(float32x2_t *)(v408 + 15);
    float v204 = v408[17];
    float v205 = *(float *)a7;
    _S25 = *((_DWORD *)a3 + 2);
    _S28 = *((_DWORD *)a3 + 5);
    uint64_t v208 = v28 + 12;
    unsigned int v38 = -1;
    _S8 = *((_DWORD *)a3 + 8);
    do
    {
      float v210 = *(float *)(v208 - 12);
      float v211 = *(float *)(v208 - 8);
      float v212 = *(float *)(v208 - 4);
      float v213 = (float)((float)(*(float *)&v416 * v210) + (float)(v415 * v211)) + (float)(v204 * v212);
      float32x2_t v214 = vadd_f32(vadd_f32(vmul_n_f32(v201, v210), vmul_n_f32(v202, v211)), vmul_n_f32(v203, v212));
      float v215 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v214, v214).i32[1]), v214.f32[0], v214.f32[0]) + (float)(v213 * v213));
      float v216 = 1.0 / v215;
      if (v215 <= 0.0) {
        float v217 = 1.0;
      }
      else {
        float v217 = 1.0 / v215;
      }
      float v218 = v213 * v217;
      float32x2_t v219 = vmul_n_f32(v214, v217);
      float v220 = (float)(v421 * v218) + (float)((float)(v205 * v219.f32[0]) + vmuls_lane_f32(v422, v219, 1));
      _D4 = (int8x8_t)vadd_f32(vmul_n_f32(v420, v218), vadd_f32(vmul_f32(v198, v219), vmul_f32(*(float32x2_t *)&v418, (float32x2_t)vrev64_s32((int32x2_t)v219))));
      size_t v222 = (float *)(v27 + 12 * *(unsigned __int8 *)(v208 + 7));
      float v223 = (float)(v211 * v222[1]) + (float)(v210 * *v222);
      __asm { FMLA            S1, S6, V4.S[1] }
      float v225 = _S1 + (float)((float)(v223 + (float)(v212 * v222[2])) * v216);
      float v226 = _S1 - (float)(*(float *)v208 * v216);
      __asm
      {
        FMLA            S0, S25, V4.S[1]
        FMLA            S1, S28, V4.S[1]
      }
      if (_S0 >= _S1) {
        float v229 = _S1;
      }
      else {
        float v229 = _S0;
      }
      if (_S0 <= _S1) {
        _S0 = _S1;
      }
      __asm { FMLA            S1, S8, V4.S[1] }
      if (v229 >= _S1) {
        float v231 = _S1;
      }
      else {
        float v231 = v229;
      }
      if (_S0 <= _S1) {
        float v232 = _S1;
      }
      else {
        float v232 = _S0;
      }
      if ((float)(v226 + v423) < v231 || (float)(v232 + v423) < v225) {
        return 0;
      }
      v208 += 20;
      float v234 = v226 - v231;
      if ((float)(v226 - v231) >= (float)(v232 - v225)) {
        float v234 = v232 - v225;
      }
      if (v234 < v40) {
        float v14 = v220;
      }
      int8x8_t v15 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v234 < v40), 0x1FuLL)), _D4, v15);
      if (v234 < v40)
      {
        float v40 = v234;
        unsigned int v38 = v199;
      }
      *(_DWORD *)&v41[4 * v199] = v199;
      ++v199;
    }
    while (v21 != v199);
LABEL_132:
    unint64_t v411 = v21;
  }
  else
  {
    unint64_t v411 = (unint64_t)(v42 - v41) >> 2;
  }
LABEL_56:
  *a11 = 0;
  a11[1].i32[0] = 0;
  *a12 = 3.4028e38;
  v426[0] = 0.0;
  v429[0] = 0.0;
  unint64_t v120 = v413;
  (*(void (**)(uint64_t, float *, uint64_t, float *, float *, float *))(a1 + 88))(a1, v413, a7, v408, v426, v429);
  *(float *)&long long v121 = *v120;
  *(void *)&_Q21 = *(void *)(v120 + 1);
  _S1 = *((_DWORD *)a3 + 2);
  __asm { FMLA            S0, S1, V21.S[1] }
  _S3 = *((_DWORD *)a3 + 5);
  __asm { FMLA            S1, S3, V21.S[1] }
  if (_S0 >= _S1) {
    float v127 = _S1;
  }
  else {
    float v127 = _S0;
  }
  if (_S0 > _S1) {
    _S1 = _S0;
  }
  _S0 = *((_DWORD *)a3 + 8);
  __asm { FMLA            S3, S0, V21.S[1] }
  if (v127 >= _S3) {
    float v130 = _S3;
  }
  else {
    float v130 = v127;
  }
  if (_S1 <= _S3) {
    _S1 = _S3;
  }
  float v131 = v423;
  if ((float)(v429[0] + v423) < v130 || (float)(_S1 + v423) < v426[0]) {
    return 0;
  }
  v402 = a13;
  float v133 = v429[0] - v130;
  float v134 = _S1 - v426[0];
  if (v133 >= v134) {
    float v133 = v134;
  }
  if (v133 >= (float)(v40 + 0.0001))
  {
    char v135 = 0;
    *(float *)&long long v121 = v14;
    float v133 = v40;
    *(int8x8_t *)&_Q21 = v15;
  }
  else
  {
    char v135 = 1;
  }
  char v158 = LOBYTE(v417);
  char *v402 = v135;
  if (v133 < *a12)
  {
    *a12 = v133;
    float32_t v159 = (float)((float)(*(float *)&v121 * *(float *)(v405 + 8)) + (float)(*(float *)(v405 + 20) * *(float *)&_Q21))
         + vmuls_lane_f32(*(float *)(v405 + 32), *(float32x2_t *)&_Q21, 1);
    *a11 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v405, *(float *)&v121), vmul_n_f32(*(float32x2_t *)(v405 + 12), *(float *)&_Q21)), vmul_lane_f32(*(float32x2_t *)(v405 + 24), *(float32x2_t *)&_Q21, 1));
    a11[1].f32[0] = v159;
  }
  uint64_t v407 = *(void *)(a1 + 24);
  float v160 = (float *)(v407 + 20 * v38);
  float v161 = *a8;
  float v162 = a8[1];
  float v163 = v160[1];
  float v164 = a8[2];
  float v165 = a8[3];
  float v166 = a8[4];
  float v167 = a8[5];
  float v168 = (float)(*v160 * *a8) + (float)(v163 * v165);
  float v169 = (float)(*v160 * v162) + (float)(v163 * v166);
  float v170 = (float)(*v160 * v164) + (float)(v163 * v167);
  float v171 = a8[6];
  float v172 = a8[7];
  float v173 = v160[2];
  float v174 = v160[3];
  float v176 = a8[8];
  float v175 = a8[9];
  float v177 = v168 + (float)(v173 * v171);
  float v178 = v169 + (float)(v173 * v172);
  float v179 = v170 + (float)(v173 * v176);
  float v180 = *v408;
  float v181 = v177 * *v408;
  float v422 = v408[1];
  float v182 = v408[3];
  float v421 = v408[2];
  v420.f32[0] = v182;
  float v183 = v408[5];
  float v419 = v408[4];
  *(float *)&long long v418 = v183;
  float v184 = (float)(v177 * v421) + (float)(v178 * v183);
  float v185 = v408[7];
  float v417 = v408[6];
  *(float *)&long long v416 = v185;
  float v186 = v408[8];
  float v187 = (float)(v181 + (float)(v178 * v182)) + (float)(v179 * v417);
  float v414 = v180;
  float v415 = v186;
  float v188 = (float)((float)(v177 * v422) + (float)(v178 * v419)) + (float)(v179 * v185);
  float v189 = v184 + (float)(v179 * v186);
  float v191 = a8[10];
  float v190 = a8[11];
  float v192 = v174 - (float)((float)((float)(v178 * v191) + (float)(v175 * v177)) + (float)(v190 * v179));
  if ((v158 & 8) != 0)
  {
    float v193 = a3[1];
    float v194 = a3[2];
    float v195 = a3[3];
    float v196 = a3[4];
    if ((float)(v192 + (float)((float)((float)(v188 * v193) + (float)(*a3 * v187)) + (float)(v194 * v189))) <= v131)
    {
      float v197 = a3[5];
    }
    else
    {
      float v197 = a3[5];
      float v180 = v414;
      if ((float)(v192 + (float)((float)((float)(v188 * v196) + (float)(v195 * v187)) + (float)(v197 * v189))) > v131) {
        goto LABEL_104;
      }
    }
    v429[0] = *a3 - v195;
    v429[1] = v193 - v196;
    v429[2] = v194 - v197;
    int v409 = 1;
    if ((v158 & 0x10) == 0) {
      goto LABEL_140;
    }
    goto LABEL_135;
  }
LABEL_104:
  int v409 = 0;
  if ((v158 & 0x10) == 0) {
    goto LABEL_140;
  }
LABEL_135:
  float v235 = a3[3];
  float v236 = a3[4];
  float v237 = a3[5];
  float v238 = a3[6];
  float v239 = a3[7];
  if ((float)(v192 + (float)((float)((float)(v188 * v236) + (float)(v235 * v187)) + (float)(v237 * v189))) <= v131)
  {
    float v240 = a3[8];
    goto LABEL_139;
  }
  float v240 = a3[8];
  float v180 = v414;
  if ((float)(v192 + (float)((float)((float)(v188 * v239) + (float)(v238 * v187)) + (float)(v240 * v189))) <= v131)
  {
LABEL_139:
    float v241 = &v429[3 * v409];
    int v242 = v409 + 1;
    *float v241 = v235 - v238;
    v241[1] = v236 - v239;
    v241[2] = v237 - v240;
    int v409 = v242;
  }
LABEL_140:
  uint64_t v401 = a12;
  long long v403 = _Q21;
  long long v404 = v121;
  if ((v158 & 0x20) != 0)
  {
    float v243 = a3[6];
    float v244 = a3[7];
    float v245 = a3[8];
    float v246 = *a3;
    float v247 = a3[1];
    if ((float)(v192 + (float)((float)((float)(v188 * v244) + (float)(v243 * v187)) + (float)(v245 * v189))) <= v131)
    {
      float v249 = a3[2];
    }
    else
    {
      float v248 = (float)(v188 * v247) + (float)(v246 * v187);
      float v249 = a3[2];
      if ((float)(v192 + (float)(v248 + (float)(v249 * v189))) > v131) {
        goto LABEL_146;
      }
    }
    float v250 = &v429[3 * v409];
    int v251 = v409 + 1;
    *float v250 = v243 - v246;
    v250[1] = v244 - v247;
    v250[2] = v245 - v249;
    int v409 = v251;
  }
LABEL_146:
  long long v400 = a11;
  float v253 = *v120;
  float v252 = v120[1];
  float v255 = v120[2];
  float v254 = v120[3];
  uint64_t v256 = *(void *)(a1 + 32);
  v426[0] = 0.0;
  if (!v411) {
    goto LABEL_203;
  }
  float32x4_t v397 = a3;
  float32x4_t v399 = a8;
  float v394 = v162;
  float v395 = v161;
  float v257 = v162 * v253;
  float v392 = v165;
  float v393 = v164;
  float v390 = v167;
  float v391 = v166;
  float v258 = v166 * v252;
  float v259 = (float)(v161 * v253) + (float)(v165 * v252);
  float v260 = (float)(v164 * v253) + (float)(v167 * v252);
  float v388 = v172;
  float v389 = v171;
  float v386 = v176;
  float v261 = v259 + (float)(v171 * v255);
  float v262 = (float)(v257 + v258) + (float)(v172 * v255);
  float v263 = v260 + (float)(v176 * v255);
  float v264 = v422;
  float v265 = v421;
  float v266 = v420.f32[0];
  float v267 = v419;
  float v269 = v417;
  float v268 = *(float *)&v418;
  float v271 = v415;
  float v270 = *(float *)&v416;
  float v272 = (float)(v417 * v263) + (float)((float)(v180 * v261) + (float)(v420.f32[0] * v262));
  float v273 = (float)(*(float *)&v416 * v263) + (float)((float)(v422 * v261) + (float)(v419 * v262));
  float v274 = (float)(v415 * v263) + (float)((float)(v421 * v261) + (float)(*(float *)&v418 * v262));
  float v384 = v191;
  float v385 = v190;
  float v387 = v175;
  float v275 = v254 - (float)((float)((float)(v191 * v262) + (float)(v175 * v261)) + (float)(v190 * v263));
  uint64_t v396 = a1;
  uint64_t v406 = *(void *)(a1 + 40);
  float v276 = *(float *)a7;
  float v277 = *(float *)(a7 + 12);
  float v278 = *(float *)(a7 + 24);
  float32x2_t v279 = *(float32x2_t *)(a7 + 4);
  float32x2_t v280 = *(float32x2_t *)(a7 + 16);
  uint64_t v398 = a7;
  float32x2_t v281 = *(float32x2_t *)(a7 + 28);
  float v412 = v277;
  *(float *)&v413 = v276;
  do
  {
    unsigned int v282 = *(_DWORD *)v41;
    v410 = v41 + 4;
    if (v409)
    {
      uint64_t v283 = v406 + *(unsigned __int16 *)(v407 + 20 * v282 + 16);
      unint64_t v284 = *(unsigned __int8 *)(v407 + 20 * v282 + 18);
      float v285 = v429;
      int v286 = v409;
      while (!v284)
      {
LABEL_167:
        v285 += 3;
        if (!--v286) {
          goto LABEL_168;
        }
      }
      unint64_t v287 = 0;
      while (1)
      {
        uint64_t v288 = v287++;
        unsigned int v289 = *(unsigned __int8 *)(v283 + v288);
        uint64_t v290 = v287 < v284 ? v288 + 1 : 0;
        unsigned int v291 = *(unsigned __int8 *)(v283 + v290);
        float v292 = (float *)(v256 + 12 * v289);
        float v293 = (float *)(v256 + 12 * v291);
        float v294 = v292[1];
        float v295 = v292[2];
        float v296 = *v293;
        float v297 = v293[1];
        if ((float)(v275 + (float)((float)((float)(v273 * v294) + (float)(*v292 * v272)) + (float)(v295 * v274))) <= v131) {
          break;
        }
        float v298 = *(float *)(v256 + 12 * v291 + 8);
        if ((float)(v275 + (float)((float)((float)(v273 * v297) + (float)(v296 * v272)) + (float)(v298 * v274))) <= v131) {
          goto LABEL_159;
        }
LABEL_166:
        if (v284 == v287) {
          goto LABEL_167;
        }
      }
      float v298 = *(float *)(v256 + 12 * v291 + 8);
LABEL_159:
      float v299 = *v292 - v296;
      float v300 = v294 - v297;
      float v301 = v295 - v298;
      float v302 = v264 * v299;
      float v303 = v267 * v300;
      float v304 = (float)(v180 * v299) + (float)(v266 * v300);
      float v305 = (float)(v265 * v299) + (float)(v268 * v300);
      float v306 = v304 + (float)(v269 * v301);
      float v307 = (float)(v302 + v303) + (float)(v270 * v301);
      float v308 = v305 + (float)(v271 * v301);
      float v309 = (float)((float)(v276 * v306) + (float)(v307 * v277)) + (float)(v308 * v278);
      float32x2_t v310 = vadd_f32(vadd_f32(vmul_n_f32(v279, v306), vmul_n_f32(v280, v307)), vmul_n_f32(v281, v308));
      float32x2_t v311 = *(float32x2_t *)(v285 + 1);
      v312.i32[0] = vdup_lane_s32((int32x2_t)v310, 1).u32[0];
      v312.f32[1] = v309;
      v313.i32[0] = vdup_lane_s32((int32x2_t)v311, 1).u32[0];
      v313.f32[1] = *v285;
      float32x2_t v314 = vmla_f32(vmul_f32(v311, vneg_f32(v312)), v313, v310);
      float v315 = vmlas_n_f32(-(float)(v310.f32[0] * *v285), v309, v311.f32[0]);
      if (fabsf(v314.f32[0]) > 0.000001
        || (int32x2_t v316 = vcgt_f32(vabs_f32((float32x2_t)__PAIR64__(v314.u32[1], LODWORD(v315))), (float32x2_t)vdup_n_s32(0x358637BDu)), (v316.i8[4] & 1) != 0)|| (v316.i8[0] & 1) != 0)
      {
        float v317 = (float)(COERCE_FLOAT(vmul_f32(v314, v314).i32[1]) + (float)(v314.f32[0] * v314.f32[0]))
             + (float)(v315 * v315);
        if (v317 <= 0.0)
        {
          float32x2_t v319 = 0;
          float v320 = 0.0;
        }
        else
        {
          float v318 = 1.0 / sqrtf(v317);
          float32x2_t v319 = vmul_n_f32(v314, v318);
          float v320 = v315 * v318;
        }
        float32x2_t v424 = v319;
        float v425 = v320;
        physx::Gu::SeparatingAxes::addAxis(v426, (float *)&v424);
        float v131 = v423;
        float v180 = v414;
        float v271 = v415;
        float v264 = v422;
        float v265 = v421;
        float v266 = v420.f32[0];
        float v267 = v419;
        float v269 = v417;
        float v268 = *(float *)&v418;
        float v270 = *(float *)&v416;
        float v277 = v412;
        float v276 = *(float *)&v413;
      }
      goto LABEL_166;
    }
LABEL_168:
    uint64_t v41 = v410;
    unint64_t v411 = (v411 - 1);
  }
  while (v411);
  float v321 = v426[0];
  if (v426[0] != 0.0)
  {
    float v322 = v397;
    float v323 = v397[1];
    float v324 = (float)(v395 * *v397) + (float)(v392 * v323);
    float v325 = (float)(v394 * *v397) + (float)(v391 * v323);
    float v326 = (float)(v393 * *v397) + (float)(v390 * v323);
    float v327 = v397[2];
    float v328 = v397[3];
    float v329 = v387 + (float)(v324 + (float)(v389 * v327));
    float v330 = v384 + (float)(v325 + (float)(v388 * v327));
    float v331 = v385 + (float)(v326 + (float)(v386 * v327));
    float v332 = v395 * v328;
    float v333 = v394 * v328;
    float v334 = v393 * v328;
    float v335 = v397[4];
    float v336 = v397[5];
    float v337 = v387 + (float)((float)(v332 + (float)(v392 * v335)) + (float)(v389 * v336));
    float v338 = v384 + (float)((float)(v333 + (float)(v391 * v335)) + (float)(v388 * v336));
    float v339 = v385 + (float)((float)(v334 + (float)(v390 * v335)) + (float)(v386 * v336));
    float v340 = v397[6];
    float v341 = v397[7];
    float v342 = (float)(v395 * v340) + (float)(v392 * v341);
    float v343 = (float)(v394 * v340) + (float)(v391 * v341);
    float v344 = (float)(v393 * v340) + (float)(v390 * v341);
    float v345 = v397[8];
    float v346 = v387 + (float)(v342 + (float)(v389 * v345));
    float v347 = (float *)&v427;
    float v348 = v384 + (float)(v343 + (float)(v388 * v345));
    float v349 = 3.4028e38;
    float v350 = v385 + (float)(v344 + (float)(v386 * v345));
    uint64_t v351 = v405;
    uint64_t v353 = v398;
    float v352 = v399;
    uint64_t v354 = v396;
    float v422 = v346;
    float v421 = v350;
    while (1)
    {
      float v355 = *(v347 - 1);
      float v356 = v347[1];
      float v357 = (float)((float)(v355 * *v352) + (float)(*v347 * v352[3])) + (float)(v356 * v352[6]);
      float v358 = (float)((float)(v355 * v352[1]) + (float)(*v347 * v352[4])) + (float)(v356 * v352[7]);
      float v359 = (float)((float)(v355 * v352[2]) + (float)(*v347 * v352[5])) + (float)(v356 * v352[8]);
      float v360 = (float)((float)(v330 * v358) + (float)(v329 * v357)) + (float)(v331 * v359);
      float v361 = (float)((float)(v338 * v358) + (float)(v337 * v357)) + (float)(v339 * v359);
      if (v360 >= v361) {
        float v362 = (float)((float)(v338 * v358) + (float)(v337 * v357)) + (float)(v339 * v359);
      }
      else {
        float v362 = (float)((float)(v330 * v358) + (float)(v329 * v357)) + (float)(v331 * v359);
      }
      if (v360 <= v361) {
        float v360 = (float)((float)(v338 * v358) + (float)(v337 * v357)) + (float)(v339 * v359);
      }
      float v363 = (float)((float)(v348 * v358) + (float)(v346 * v357)) + (float)(v350 * v359);
      if (v362 >= v363) {
        float v362 = (float)((float)(v348 * v358) + (float)(v346 * v357)) + (float)(v350 * v359);
      }
      if (v360 <= v363) {
        float v360 = (float)((float)(v348 * v358) + (float)(v346 * v357)) + (float)(v350 * v359);
      }
      float v364 = (float)((float)(v358 * *(float *)(v354 + 4)) + (float)(*(float *)v354 * v357))
           + (float)(*(float *)(v354 + 8) * v359);
      float v365 = (float)((float)(v358 * COERCE_FLOAT(*(_DWORD *)(v354 + 72) | LODWORD(v358) & 0x80000000))
                   + (float)(COERCE_FLOAT(*(_DWORD *)(v354 + 68) | LODWORD(v357) & 0x80000000) * v357))
           + (float)(COERCE_FLOAT(*(_DWORD *)(v354 + 76) | LODWORD(v359) & 0x80000000) * v359);
      if (v365 <= *(float *)(v354 + 64)) {
        float v365 = *(float *)(v354 + 64);
      }
      float v366 = v364 - v365;
      float v367 = (float)(v364 + v365) - v362;
      float v368 = v360 - v366;
      if (v367 >= v368) {
        float v367 = v368;
      }
      if (v367 <= v349)
      {
        v424.i32[0] = 0;
        float v428 = 0.0;
        (*(void (**)(uint64_t, float *, uint64_t, float *, float32x2_t *, float *))(v354 + 88))(v354, v347 - 1, v353, v408, &v424, &v428);
        *(float *)&long long v369 = *(v347 - 1);
        *(void *)&_Q1 = *(void *)v347;
        _S3 = *((_DWORD *)v322 + 2);
        __asm { FMLA            S2, S3, V1.S[1] }
        _S5 = *((_DWORD *)v322 + 5);
        __asm { FMLA            S3, S5, V1.S[1] }
        if (_S2 >= _S3) {
          float v375 = _S3;
        }
        else {
          float v375 = _S2;
        }
        if (_S2 > _S3) {
          _S3 = _S2;
        }
        _S2 = *((_DWORD *)v322 + 8);
        __asm { FMLA            S5, S2, V1.S[1] }
        if (v375 >= _S5) {
          float v378 = _S5;
        }
        else {
          float v378 = v375;
        }
        if (_S3 <= _S5) {
          _S3 = _S5;
        }
        if ((float)(v428 + v423) < v378 || (float)(_S3 + v423) < v424.f32[0]) {
          return 0;
        }
        float v379 = v428 - v378;
        float v380 = _S3 - v424.f32[0];
        if (v379 >= v380) {
          float v379 = v380;
        }
        float v346 = v422;
        float v350 = v421;
        if (v379 < v349)
        {
          float v349 = v379;
          long long v403 = _Q1;
          long long v404 = v369;
        }
      }
      v347 += 3;
      --LODWORD(v321);
      if (v321 == 0.0) {
        goto LABEL_204;
      }
    }
  }
LABEL_203:
  float v349 = 3.4028e38;
  uint64_t v351 = v405;
LABEL_204:
  if (v349 < *v401)
  {
    *uint64_t v401 = v349;
    float32_t v381 = (float)((float)(*(float *)&v404 * *(float *)(v351 + 8)) + (float)(*(float *)(v351 + 20) * *(float *)&v403))
         + vmuls_lane_f32(*(float *)(v351 + 32), *(float32x2_t *)&v403, 1);
    float32x4_t v382 = v400;
    *long long v400 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v351, *(float *)&v404), vmul_n_f32(*(float32x2_t *)(v351 + 12), *(float *)&v403)), vmul_lane_f32(*(float32x2_t *)(v351 + 24), *(float32x2_t *)&v403, 1));
    v382[1].f32[0] = v381;
    char *v402 = 0;
  }
  return 1;
}

BOOL anonymous namespace'::ConvexMeshContactGeneration::generateContacts(uint64_t a1, float *a2, uint64_t a3, float *a4, float *a5, __int32 a6, float a7)
{
  __int32 v139 = a6;
  uint64_t v140 = a3;
  uint64_t v166 = *MEMORY[0x263EF8340];
  float v11 = *(float **)(a1 + 2200);
  float v12 = a4[1];
  float v13 = v12 * v11[3];
  float v14 = (float)(*a4 * v11[1]) + (float)(v12 * v11[4]);
  float v15 = (float)(*a4 * v11[2]) + (float)(v12 * v11[5]);
  float v16 = a4[2];
  float v17 = v16 * v11[7];
  float v18 = (float)(v15 + (float)(v16 * v11[8])) + v11[11];
  float v19 = *(float *)(a1 + 2172) - (float)((float)((float)((float)(*a4 * *v11) + v13) + (float)(v16 * v11[6])) + v11[9]);
  float v20 = *(float *)(a1 + 2180) - v18;
  float v21 = *a5;
  float v22 = a5[1];
  float v23 = (float)((float)(*(float *)(a1 + 2176) - (float)((float)(v14 + v17) + v11[10])) * v22) + (float)(v19 * *a5);
  float v24 = a5[2];
  if ((float)(v23 + (float)(v20 * v24)) < 0.0)
  {
    float v21 = -v21;
    float v22 = -v22;
    float v24 = -v24;
    *a5 = v21;
    a5[1] = v22;
    a5[2] = v24;
  }
  long long v25 = *(uint64_t (**)(void))(*(void *)(a1 + 2184) + 96);
  long long v26 = *(float **)(a1 + 2192);
  float v27 = (float)((float)-(float)(v22 * v26[1]) - (float)(*v26 * v21)) - (float)(v26[2] * v24);
  float v28 = (float)((float)-(float)(v22 * v26[4]) - (float)(v26[3] * v21)) - (float)(v26[5] * v24);
  float v29 = (float)((float)-(float)(v22 * v26[7]) - (float)(v26[6] * v21)) - (float)(v26[8] * v24);
  float v147 = v27;
  float v148 = v28;
  float v149 = v29;
  uint64_t v30 = v25();
  uint64_t v31 = *(void *)(*(void *)(a1 + 2184) + 24);
  unsigned int v32 = v30;
  float v33 = (float *)(v31 + 20 * v30);
  int v34 = *(unsigned __int8 *)(a1 + 2225);
  if (*(unsigned char *)(a1 + 2225))
  {
    int8x16_t v165 = *(int8x16_t *)v33;
    int8x16_t v35 = v165;
    float32x2_t v36 = (float32x2_t)vext_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL);
  }
  else
  {
    physx::Cm::FastVertex2ShapeScaling::transformPlaneToShapeSpace(*(float **)(a1 + 2208), v33, (float *)v165.i32, (float *)((unint64_t)&v165 | 0xC), v33[3]);
    v35.i32[0] = v165.i32[0];
    float32x2_t v36 = *(float32x2_t *)((char *)v165.i64 + 4);
  }
  uint64_t v37 = 0;
  unsigned int v38 = 0;
  int v39 = *(float **)(a1 + 2192);
  float v40 = *v39;
  float v41 = v39[1];
  float v42 = *(float *)v35.i32 * *v39;
  float v43 = *(float *)v35.i32 * v41;
  float v44 = v39[2];
  float v45 = v39[3];
  float v46 = *(float *)v35.i32 * v44;
  float v47 = v39[4];
  float v48 = v39[5];
  float v49 = v42 + (float)(v45 * v36.f32[0]);
  float v50 = v43 + (float)(v47 * v36.f32[0]);
  float v51 = v46 + (float)(v48 * v36.f32[0]);
  float v52 = v39[6];
  float v53 = v39[7];
  float v54 = v39[8];
  float v55 = v39[9];
  float v162 = v49 + vmuls_lane_f32(v52, v36, 1);
  float v163 = v50 + vmuls_lane_f32(v53, v36, 1);
  float v164 = v51 + vmuls_lane_f32(v54, v36, 1);
  float v56 = *a5;
  float v57 = a5[1];
  float v58 = a5[2];
  float v59 = fabsf((float)((float)(v163 * v57) + (float)(v162 * *a5)) + (float)(v164 * v58));
  uint64_t v60 = *(void *)(a1 + 2200);
  float v61 = a2[1];
  float v62 = a2[2];
  float v63 = (float)((float)(*a2 * *(float *)(v60 + 8)) + (float)(v61 * *(float *)(v60 + 20)))
      + (float)(v62 * *(float *)(v60 + 32));
  float32x2_t v160 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v60, *a2), vmul_n_f32(*(float32x2_t *)(v60 + 12), v61)), vmul_n_f32(*(float32x2_t *)(v60 + 24), v62));
  float v161 = v63;
  float v64 = fabsf(vmlas_n_f32(vmuls_lane_f32(v57, v160, 1), v56, v160.f32[0]) + (float)(v63 * v58));
  float v65 = -a7;
  if (a7 > 0.0) {
    float v65 = 0.0;
  }
  float v66 = v65 + *(float *)(a1 + 2228);
  float v67 = v56 * v66;
  v159[0] = v56 * v66;
  v159[1] = v57 * v66;
  void v159[2] = v58 * v66;
  float v147 = v40;
  float v148 = v41;
  float v149 = v44;
  float v150 = v45;
  float v151 = v47;
  float v152 = v48;
  float v153 = v52;
  float v154 = v53;
  float v155 = v54;
  float v68 = v39[10];
  float v69 = v39[11];
  float v70 = *(float **)(a1 + 2232);
  float v72 = *v70;
  float v71 = v70[1];
  float v73 = v70[2];
  float v74 = v70[3];
  float v75 = v55 - v67;
  float v156 = v55 - v67;
  float v157 = v68 - (float)(v57 * v66);
  float v158 = v69 - (float)(v58 * v66);
  float v76 = *(float **)(a1 + 2240);
  float v77 = v76[1];
  float v78 = v76[2];
  float v79 = v76[3];
  float v80 = v76[4];
  float v81 = v76[5];
  float v82 = v76[6];
  float v83 = (float)(v75 - v80) + (float)(v75 - v80);
  float v84 = (float)(v157 - v81) + (float)(v157 - v81);
  float v85 = (float)(v158 - v82) + (float)(v158 - v82);
  float v86 = (float)(v79 * v79) + -0.5;
  float v87 = (float)((float)-(float)(v77 * v84) - (float)(*v76 * v83)) - (float)(v78 * v85);
  float v88 = (float)((float)(v79 * (float)((float)(v78 * v84) - (float)(v77 * v85))) + (float)(v83 * v86))
      - (float)(*v76 * v87);
  float v89 = (float)((float)(v79 * (float)((float)(*v76 * v85) - (float)(v78 * v83))) + (float)(v84 * v86))
      - (float)(v77 * v87);
  float v90 = (float)((float)(v79 * (float)((float)(v77 * v83) - (float)(*v76 * v84))) + (float)(v85 * v86))
      - (float)(v78 * v87);
  float v91 = (float)((float)((float)(v79 * v72) - (float)(*v76 * v74)) - (float)(v77 * v73)) + (float)(v71 * v78);
  float v92 = (float)((float)((float)(v79 * v71) - (float)(v77 * v74)) - (float)(v78 * v72)) + (float)(v73 * *v76);
  float v93 = (float)((float)((float)(v79 * v73) - (float)(v78 * v74)) - (float)(*v76 * v71)) + (float)(v72 * v77);
  float v94 = (float)((float)((float)(v72 * *v76) + (float)(v79 * v74)) + (float)(v77 * v71)) + (float)(v78 * v73);
  float v95 = (float)(v80 - v75) + (float)(v80 - v75);
  float v96 = (float)(v81 - v157) + (float)(v81 - v157);
  float v97 = (float)(v82 - v158) + (float)(v82 - v158);
  float v98 = (float)(v74 * v74) + -0.5;
  float v99 = (float)((float)-(float)(v71 * v96) - (float)(v72 * v95)) - (float)(v73 * v97);
  float v100 = (float)((float)(v74 * (float)((float)(v73 * v96) - (float)(v71 * v97))) + (float)(v95 * v98))
       - (float)(v72 * v99);
  float v101 = (float)((float)(v74 * (float)((float)(v72 * v97) - (float)(v73 * v95))) + (float)(v96 * v98))
       - (float)(v71 * v99);
  float v102 = (float)((float)(v74 * (float)((float)(v71 * v95) - (float)(v72 * v96))) + (float)(v97 * v98))
       - (float)(v73 * v99);
  float v103 = (float)((float)((float)(v74 * *v76) - (float)(v72 * v79)) - (float)(v71 * v78)) + (float)(v77 * v73);
  float v104 = (float)((float)((float)(v74 * v77) - (float)(v71 * v79)) - (float)(v73 * *v76)) + (float)(v78 * v72);
  float v105 = (float)((float)((float)(v74 * v78) - (float)(v73 * v79)) - (float)(v72 * v77)) + (float)(*v76 * v71);
  float v106 = v91 * (float)(v91 + v91);
  float v107 = v92 * (float)(v92 + v92);
  float v108 = v93 * (float)(v93 + v93);
  float v109 = v92 * (float)(v91 + v91);
  float v110 = v93 * (float)(v91 + v91);
  float v111 = v94 * (float)(v91 + v91);
  float v112 = v93 * (float)(v92 + v92);
  float v113 = v94 * (float)(v92 + v92);
  float v114 = v94 * (float)(v93 + v93);
  v146[0] = (float)(1.0 - v107) - v108;
  v146[1] = v109 + v114;
  float v115 = 1.0 - v106;
  v146[2] = v110 - v113;
  v146[3] = v109 - v114;
  v146[4] = v115 - v108;
  v146[5] = v112 + v111;
  v146[6] = v110 + v113;
  v146[7] = v112 - v111;
  v146[8] = v115 - v107;
  v146[9] = v88;
  v146[10] = v89;
  v146[11] = v90;
  float v116 = v105 + v105;
  float v117 = v104 * (float)(v104 + v104);
  float v118 = v105 * (float)(v105 + v105);
  float v119 = v104 * (float)(v103 + v103);
  float v120 = v105 * (float)(v103 + v103);
  float v121 = v94 * (float)(v103 + v103);
  float v122 = v105 * (float)(v104 + v104);
  float v123 = v94 * (float)(v104 + v104);
  float v124 = v94 * v116;
  v145[0] = (float)(1.0 - v117) - v118;
  v145[1] = v119 + v124;
  float v125 = 1.0 - (float)(v103 * (float)(v103 + v103));
  v145[2] = v120 - v123;
  v145[3] = v119 - v124;
  v145[4] = v125 - v118;
  v145[5] = v122 + v121;
  v145[6] = v120 + v123;
  v145[7] = v122 - v121;
  v145[8] = v125 - v117;
  v145[9] = v100;
  v145[10] = v101;
  v145[11] = v102;
  float32x2_t v143 = 0;
  uint64_t v144 = 0;
  uint64_t v126 = v31 + 20 * v32;
  unsigned int v129 = *(unsigned __int8 *)(v126 + 18);
  float v127 = (unsigned __int8 *)(v126 + 18);
  size_t v128 = v129;
  if (!v34)
  {
    MEMORY[0x270FA5388](v30);
    uint64_t v37 = &v138[-v130];
    bzero(&v138[-v130], v131);
    MEMORY[0x270FA5388](v132);
    unsigned int v38 = &v138[-v133];
    bzero(&v138[-v133], v128);
  }
  physx::Gu::getScaledConvex(&v144, &v143, (uint64_t)v37, (uint64_t)v38, v34 != 0, *(void *)(*(void *)(a1 + 2184) + 32), *(void *)(*(void *)(a1 + 2184) + 40) + *(unsigned __int16 *)(v31 + 20 * v32 + 16), v128, *(void *)(a1 + 2208));
  physx::Gu::findRotationMatrixFromZ(v142, (float *)v165.i32);
  physx::Gu::findRotationMatrixFromZ(v141, a2);
  uint64_t v134 = *(void *)(a1 + 2248);
  if (v59 > v64)
  {
    uint64_t v135 = *(void *)(a1 + 2200);
    uint64_t v136 = 1;
    if ((physx::Gu::contactPolygonPolygonExt(*v127, v144, v143, (uint64_t)&v147, (float *)v165.i32, v142, 3u, v140, v66, byte_23442276A, v135, a2, v141, &v162, (uint64_t)v146, v145, v139, v134, 1u,
            (uint64_t)v159) & 1) != 0)
      return v136;
    return 0;
  }
  return (physx::Gu::contactPolygonPolygonExt(3, v140, byte_23442276A, *(void *)(a1 + 2200), a2, v141, *v127, v144, v66, v143, (uint64_t)&v147, (float *)v165.i32, v142, (float *)&v160, (uint64_t)v145, v146, v139, v134, 0,
            (uint64_t)v159) & 1) != 0;
}

uint64_t physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(uint64_t a1, int *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 1280);
  if (v2 == 128) {
    return 0;
  }
  int v4 = *a2;
  int v5 = a2[1];
  unsigned int v6 = 9
     * (((v5 | (v4 << 16)) + ~((v5 | (v4 << 16)) << 15)) ^ (((v5 | (v4 << 16)) + ~((v5 | (v4 << 16)) << 15)) >> 10));
  int v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  uint64_t v8 = a1 + ((v7 ^ BYTE2(v7)) & 0x7F);
  unsigned int v9 = *(unsigned __int8 *)(v8 + 1152);
  if (v9 != 255)
  {
    while (*(_DWORD *)(a1 + 8 * v9) != v4 || *(_DWORD *)(a1 + 8 * v9 + 4) != v5)
    {
      uint64_t v11 = a1 + v9;
      unsigned int v9 = *(unsigned __int8 *)(v11 + 1024);
      if (v9 == 255)
      {
        float v10 = (unsigned char *)(v11 + 1024);
        goto LABEL_9;
      }
    }
    return 0;
  }
  float v10 = (unsigned char *)(v8 + 1152);
LABEL_9:
  *float v10 = v2;
  *(unsigned char *)(a1 + v2 + 1024) = -1;
  uint64_t v12 = *(unsigned int *)(a1 + 1280);
  *(_DWORD *)(a1 + 1280) = v12 + 1;
  *(void *)(a1 + 8 * v12) = *(void *)a2;
  return 1;
}

uint64_t physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 768);
  if (v2 == 128) {
    return 0;
  }
  uint64_t v4 = a1 + (*a2 & 0x7FLL);
  unsigned int v5 = *(unsigned __int8 *)(v4 + 640);
  if (v5 != 255)
  {
    while (*(_DWORD *)(a1 + 4 * v5) != *a2)
    {
      uint64_t v7 = a1 + v5;
      unsigned int v5 = *(unsigned __int8 *)(v7 + 512);
      if (v5 == 255)
      {
        unsigned int v6 = (unsigned char *)(v7 + 512);
        goto LABEL_8;
      }
    }
    return 0;
  }
  unsigned int v6 = (unsigned char *)(v4 + 640);
LABEL_8:
  *unsigned int v6 = v2;
  *(unsigned char *)(a1 + v2 + 512) = -1;
  uint64_t v8 = *(unsigned int *)(a1 + 768);
  *(_DWORD *)(a1 + 768) = v8 + 1;
  *(_DWORD *)(a1 + 4 * v8) = *a2;
  return 1;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<4352u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = (4 * a2);
    if (v4 > 0x1100 || *(unsigned char *)(result + 4352))
    {
      float result = physx::shdfnd::ReflectionAllocator<unsigned int>::allocate(result, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
      unsigned int v5 = (_DWORD *)result;
    }
    else
    {
      *(unsigned char *)(result + 4352) = 1;
      unsigned int v5 = (_DWORD *)result;
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  uint64_t v6 = *(unsigned int *)(v3 + 4368);
  uint64_t v7 = *(void *)(v3 + 4360);
  if (v6)
  {
    unint64_t v8 = (unint64_t)&v5[v6];
    unsigned int v9 = *(int **)(v3 + 4360);
    float v10 = v5;
    do
    {
      int v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
  }
  if ((*(_DWORD *)(v3 + 4372) & 0x80000000) == 0)
  {
    if (v7 == v3)
    {
      *(unsigned char *)(v3 + 4352) = 0;
    }
    else if (v7)
    {
      float result = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  *(void *)(v3 + 4360) = v5;
  *(_DWORD *)(v3 + 4372) = a2;
  return result;
}

uint64_t physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::contains(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = 9
     * (((a3 | (a2 << 16)) + ~((a3 | (a2 << 16)) << 15)) ^ (((a3 | (a2 << 16)) + ~((a3 | (a2 << 16)) << 15)) >> 10));
  for (unsigned int i = *(unsigned __int8 *)(a1
                               + ((((v3 ^ (v3 >> 6)) - 1) ^ (((v3 ^ (v3 >> 6))
                                                                                              + ~((v3 ^ (v3 >> 6)) << 11)) >> 16)) & 0x7F)
                               + 1152); ; unsigned int i = *(unsigned __int8 *)(a1 + i + 1024))
  {
    if (i == 255) {
      return 0;
    }
    if (*(_DWORD *)(a1 + 8 * i) == a2 && *(_DWORD *)(a1 + 8 * i + 4) == a3) {
      break;
    }
  }
  return 1;
}

void anonymous namespace'::ConvexVsHeightfieldContactGenerationCallback::~ConvexVsHeightfieldContactGenerationCallback(_anonymous_namespace_::ConvexVsHeightfieldContactGenerationCallback *this)
{
}

uint64_t anonymous namespace'::ConvexVsHeightfieldContactGenerationCallback::onEvent(_anonymous_namespace_::ConvexVsHeightfieldContactGenerationCallback *this, int a2, unsigned int *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v24 = a2;
  if (a2)
  {
    float v22 = (char *)this + 8;
    do
    {
      __int32 v5 = *a3;
      physx::Gu::HeightFieldUtil::getTriangle(*((void *)this + 284), *((float **)this + 281), (uint64_t)&v34, (uint64_t)v44, (uint64_t)v43, *a3, 0, 0);
      float v6 = (float)((float)(v38 - v35) * (float)(v42 - v36)) - (float)((float)(v39 - v36) * (float)(v41 - v35));
      float v7 = (float)((float)(v39 - v36) * (float)(v40 - v34)) - (float)((float)(v37 - v34) * (float)(v42 - v36));
      float v8 = (float)((float)(v37 - v34) * (float)(v41 - v35)) - (float)((float)(v38 - v35) * (float)(v40 - v34));
      float v9 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8));
      float v23 = a3 + 1;
      if (v9 > 0.0)
      {
        float v10 = 1.0 / v9;
        float v6 = v6 * v10;
        float v7 = v7 * v10;
        float v8 = v8 * v10;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      --v24;
      do
      {
        unsigned int v13 = v43[v11];
        if (v13 == -1)
        {
          v12 |= 8 << v11;
        }
        else
        {
          physx::Gu::HeightFieldUtil::getTriangle(*((void *)this + 284), *((float **)this + 281), (uint64_t)&v25, 0, 0, v13, 0, 0);
          float v14 = (float)((float)(v29 - v26) * (float)(v33 - v27)) - (float)((float)(v30 - v27) * (float)(v32 - v26));
          float v15 = (float)((float)(v30 - v27) * (float)(v31 - v25)) - (float)((float)(v28 - v25) * (float)(v33 - v27));
          float v16 = (float)((float)(v28 - v25) * (float)(v32 - v26)) - (float)((float)(v29 - v26) * (float)(v31 - v25));
          float v17 = &v34 + 3 * byte_2344227AC[v11];
          if ((float)((float)((float)(v15 * (float)(v17[1] - v26)) + (float)(v14 * (float)(*v17 - v25)))
                     + (float)(v16 * (float)(v17[2] - v27))) < 0.0)
          {
            float v18 = sqrtf((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16));
            if (v18 > 0.0)
            {
              float v19 = 1.0 / v18;
              float v14 = v14 * v19;
              float v15 = v15 * v19;
              float v16 = v16 * v19;
            }
            int v20 = 8 << v11;
            if ((float)((float)((float)(v7 * v15) + (float)(v14 * v6)) + (float)(v16 * v8)) >= 0.999) {
              int v20 = 0;
            }
            v12 |= v20;
          }
        }
        ++v11;
      }
      while (v11 != 3);
      a3 = v23;
    }
    while (v24);
  }
  return 1;
}

BOOL physx::Gu::contactSphereCapsule(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7 = *a4;
  float v8 = a4[1];
  float v9 = v7 + v7;
  float v11 = a4[2];
  float v10 = a4[3];
  float v12 = v10 + v10;
  float v13 = (float)((float)(v10 * (float)(v10 + v10)) + -1.0) + (float)(v7 * (float)(v7 + v7));
  float v14 = (float)(v9 * v8) + (float)(v11 * (float)(v10 + v10));
  float v15 = (float)(v9 * v11) - (float)(v8 * v12);
  float v16 = *(float *)(a2 + 8);
  float v17 = v13 * v16;
  float v18 = v16 * v14;
  float v19 = v15 * v16;
  float v20 = -(float)(v13 * v16);
  float v21 = -(float)(v16 * v14);
  float v22 = -(float)(v15 * v16);
  float v23 = a4[4];
  float v24 = a4[5];
  float v25 = a3[4] - v23;
  float v26 = a3[5] - v24;
  float v27 = a4[6];
  float v28 = a3[6] - v27;
  float v29 = *(float *)(a1 + 4);
  float v30 = v29 + *(float *)(a2 + 4);
  float v31 = v20 - v17;
  float v32 = v21 - v18;
  float v33 = v22 - v19;
  float v34 = v25 - v17;
  float v35 = v26 - v18;
  float v36 = v28 - v19;
  float v37 = (float)((float)(v32 * (float)(v26 - v18)) + (float)((float)(v25 - v17) * v31))
      + (float)((float)(v28 - v19) * v33);
  float v38 = 0.0;
  if (v37 > 0.0)
  {
    float v39 = (float)((float)(v32 * v32) + (float)(v31 * v31)) + (float)(v33 * v33);
    if (v37 >= v39)
    {
      float v34 = v34 - v31;
      float v35 = v35 - v32;
      float v36 = v36 - v33;
      float v38 = 1.0;
    }
    else
    {
      float v38 = v37 / v39;
      float v34 = v34 - (float)(v31 * v38);
      float v35 = v35 - (float)(v32 * v38);
      float v36 = v36 - (float)(v33 * v38);
    }
  }
  float v40 = (float)((float)(v35 * v35) + (float)(v34 * v34)) + (float)(v36 * v36);
  float v41 = (float)(v30 + *a5) * (float)(v30 + *a5);
  if (v40 < v41)
  {
    float v42 = v19 + (float)(v33 * v38);
    float v43 = v25 - (float)(v17 + (float)(v31 * v38));
    float v44 = v26 - (float)(v18 + (float)(v32 * v38));
    float v45 = v28 - v42;
    float v46 = (float)((float)(v44 * v44) + (float)(v43 * v43)) + (float)(v45 * v45);
    if (v46 == 0.0)
    {
      float v47 = 0.0;
      float v48 = 1.0;
      float v49 = 0.0;
    }
    else
    {
      float v50 = 1.0 / sqrtf(v46);
      float v48 = v43 * v50;
      float v47 = v44 * v50;
      float v49 = v45 * v50;
    }
    uint64_t v51 = *(unsigned int *)(a7 + 4096);
    if (v51 <= 0x3F)
    {
      *(_DWORD *)(a7 + 4096) = v51 + 1;
      uint64_t v52 = a7 + (v51 << 6);
      *(float *)uint64_t v52 = v48;
      *(float *)(v52 + 4) = v47;
      *(float *)(v52 + 16) = (float)(v23 + v25) - (float)(v29 * v48);
      *(float *)(v52 + 20) = (float)(v24 + v26) - (float)(v29 * v47);
      *(float *)(v52 + 24) = (float)(v27 + v28) - (float)(v29 * v49);
      *(float *)(v52 + 8) = v49;
      *(float *)(v52 + 12) = sqrtf(v40) - v30;
      *(_DWORD *)(v52 + 52) = -1;
    }
  }
  return v40 < v41;
}

BOOL physx::Gu::contactSphereMesh(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v13 = a3[4] - a4[4];
  float v14 = a3[5] - a4[5];
  float v15 = a3[6] - a4[6];
  float v16 = v13 + v13;
  float v17 = v14 + v14;
  float v18 = v15 + v15;
  float v20 = a4[2];
  float v19 = a4[3];
  float v21 = (float)(v19 * v19) + -0.5;
  float v22 = a4[1];
  float v23 = (float)((float)((float)(v14 + v14) * v22) + (float)(*a4 * (float)(v13 + v13))) + (float)(v20 * v18);
  float v24 = (float)((float)((float)(v13 + v13) * v21)
              - (float)((float)((float)(v22 * v18) - (float)(v20 * (float)(v14 + v14))) * v19))
      + (float)(*a4 * v23);
  float v25 = (float)((float)((float)(v14 + v14) * v21) - (float)((float)((float)(v20 * v16) - (float)(*a4 * v18)) * v19))
      + (float)(v22 * v23);
  float v26 = (float)((float)(v18 * v21) - (float)((float)((float)(*a4 * v17) - (float)(v22 * v16)) * v19))
      + (float)(v20 * v23);
  unint64_t v63 = __PAIR64__(LODWORD(v25), LODWORD(v24));
  float v64 = v26;
  float v27 = *(float *)(a1 + 4) + *a5;
  uint64_t v28 = *(void *)(a2 + 48);
  if (*(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0 && *(float *)(a2 + 12) == 1.0)
  {
    int v43 = 2;
    float v42 = &unk_26E728F60;
    uint64_t v44 = a1;
    float v45 = a3;
    float v46 = a4;
    uint64_t v47 = a7;
    float v48 = &v63;
    float v49 = v27 * v27;
    int v50 = 0;
    int v51 = 0;
    uint64_t v52 = a8;
    uint64_t v53 = v28;
    v55[0] = xmmword_23435FD50;
    v55[1] = xmmword_23435FD50;
    int v56 = 1065353216;
    float v57 = v24;
    float v58 = v25;
    float v59 = v26;
    float v60 = v27;
    float v61 = v27;
    float v62 = v27;
    ((void (*)(uint64_t, _OWORD *, void **, uint64_t, uint64_t))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v28 + 8) - 3])(v28, v55, &v42, 1, 1);
    float v42 = &unk_26E728F60;
  }
  else
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v55, (float *)(a2 + 4), (float *)(a2 + 16));
    int v43 = 2;
    uint64_t v44 = a1;
    float v45 = a3;
    float v46 = a4;
    uint64_t v47 = a7;
    float v48 = &v63;
    float v49 = v27 * v27;
    int v50 = 0;
    int v51 = 0;
    uint64_t v52 = a8;
    uint64_t v53 = v28;
    float v42 = &unk_26E728FB0;
    float v54 = v55;
    *(void *)float v41 = v63;
    *(float *)&v41[8] = v64;
    *(float *)&uint64_t v39 = v27;
    *((float *)&v39 + 1) = v27;
    float v40 = v27;
    long long v36 = xmmword_23435FD50;
    long long v37 = xmmword_23435FD50;
    int v38 = 1065353216;
    physx::Cm::FastVertex2ShapeScaling::transformQueryBounds((uint64_t)v55, (float *)v41, (float *)&v39, (float *)&v36);
    v31[0] = v36;
    v31[1] = v37;
    int v32 = v38;
    int v33 = *(_DWORD *)v41;
    *(void *)&long long v29 = *(void *)&v41[4];
    *((void *)&v29 + 1) = v39;
    long long v34 = v29;
    float v35 = v40;
    ((void (*)(uint64_t, _OWORD *, void **, uint64_t, uint64_t))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v28 + 8) - 3])(v28, v31, &v42, 1, 1);
    float v42 = &unk_26E728F60;
  }
  return *(_DWORD *)(a7 + 4096) != 0;
}

void anonymous namespace'::SphereMeshContactGenerationCallback_NoScale::~SphereMeshContactGenerationCallback_NoScale(_anonymous_namespace_::SphereMeshContactGenerationCallback_NoScale *this)
{
  *(void *)this = &unk_26E728F60;
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E728F60;
  JUMPOUT(0x237DBCBD0);
}

void anonymous namespace'::SphereMeshContactGenerationCallback_Scale::~SphereMeshContactGenerationCallback_Scale(_anonymous_namespace_::SphereMeshContactGenerationCallback_Scale *this)
{
  *(void *)this = &unk_26E728F60;
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E728F60;
  JUMPOUT(0x237DBCBD0);
}

BOOL physx::Gu::contactSphereHeightfield(uint64_t a1, float32x2_t *a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x2_t v40 = a2[1];
  float v41 = a2;
  float v9 = a2[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  int32x2_t v38 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a2[2]));
  float v39 = 1.0 / v9;
  float v15 = a3[4] - a4[4];
  float v16 = a3[5] - a4[5];
  _D2.f32[0] = a3[6] - a4[6];
  float v17 = v15 + v15;
  float v18 = v16 + v16;
  _D2.f32[0] = _D2.f32[0] + _D2.f32[0];
  float v20 = a4[2];
  float v19 = a4[3];
  float v21 = (float)(v19 * v19) + -0.5;
  float v22 = a4[1];
  float v23 = (float)((float)(v18 * v22) + (float)(*a4 * v17)) + (float)(v20 * _D2.f32[0]);
  float v24 = (float)((float)(v17 * v21) - (float)((float)((float)(v22 * _D2.f32[0]) - (float)(v20 * v18)) * v19))
      + (float)(*a4 * v23);
  float v25 = (float)((float)(v18 * v21) - (float)((float)((float)(v20 * v17) - (float)(*a4 * _D2.f32[0])) * v19))
      + (float)(v22 * v23);
  float v26 = (float)((float)(_D2.f32[0] * v21) - (float)((float)((float)(*a4 * v18) - (float)(v22 * v17)) * v19))
      + (float)(v20 * v23);
  *(float *)long long v37 = v24;
  *(float *)&v37[1] = v25;
  *(float *)&v37[2] = v26;
  float v27 = *(float *)(a1 + 4) + *a5;
  v36[0] = v24 - v27;
  v36[1] = v25 - v27;
  v36[2] = v26 - v27;
  v36[3] = v24 + v27;
  v36[4] = v25 + v27;
  v36[5] = v26 + v27;
  long long v29 = &unk_26E728FF0;
  v30[0] = a1;
  v30[1] = a3;
  v30[2] = a4;
  v30[3] = a7;
  v30[4] = v37;
  float v31 = v27 * v27;
  int v32 = 0;
  int v33 = 0;
  uint64_t v34 = a8;
  float v35 = &v38;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v38, a4, v36, 0, (uint64_t)&v29);
  return *(_DWORD *)(a7 + 4096) != 0;
}

uint64_t anonymous namespace'::SphereMeshContactGeneration::generateLastContacts(uint64_t this)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  unsigned int v1 = *(_DWORD *)(this + 44);
  if (v1)
  {
    uint64_t v2 = this;
    signed int v3 = v1 - 1;
    if ((int)(v1 - 1) >= 1)
    {
      LODWORD(v4) = 0;
      signed int v5 = 0;
      uint64_t v6 = this + 2096;
      memset(v107, 0, sizeof(v107));
      while (1)
      {
        if (v3 > v5)
        {
          uint64_t v4 = v4;
          while ((v3 - v5) > 4)
          {
            int v7 = v5 + v3;
            if (v5 + v3 < 0 != __OFADD__(v5, v3)) {
              ++v7;
            }
            float v8 = (float *)(v6 + 8 * (v7 >> 1));
            float v9 = (float *)(v6 + 8 * v5);
            float v10 = *v8;
            float v11 = *v9;
            if (*v8 < *v9)
            {
              uint64_t v12 = *(void *)v9;
              *(void *)float v9 = *(void *)v8;
              *(void *)float v8 = v12;
              float v11 = *v9;
              float v10 = *(float *)&v12;
            }
            float v13 = (float *)(v6 + 8 * v3);
            float v14 = *v13;
            if (*v13 < v11)
            {
              uint64_t v15 = *(void *)v9;
              *(void *)float v9 = *(void *)v13;
              *(void *)float v13 = v15;
              float v14 = *(float *)&v15;
              float v10 = *v8;
            }
            uint64_t v16 = *(void *)v8;
            if (v14 < v10)
            {
              *(void *)float v8 = *(void *)v13;
              *(void *)float v13 = v16;
              uint64_t v16 = *(void *)v8;
            }
            uint64_t v17 = v3 - 1;
            float v18 = (void *)(v6 + 8 * v17);
            *(void *)float v8 = *v18;
            *float v18 = v16;
            float v19 = *(float *)&v16;
            for (signed int i = v5; ; signed int i = v21 + v22)
            {
              uint64_t v21 = 0;
              uint64_t v22 = i;
              uint64_t v23 = 2104;
              uint64_t v24 = v2 + 8 * i;
              do
              {
                float v25 = *(float *)(v24 + v23);
                ++v21;
                v23 += 8;
              }
              while (v25 < v19);
              uint64_t v26 = v2 + 8 * v22 + 8 * v21;
              float v27 = (float *)(v6 + 8 * (int)v17);
              do
              {
                float v28 = *(v27 - 2);
                v27 -= 2;
                LODWORD(v17) = v17 - 1;
              }
              while (v19 < v28);
              uint64_t v29 = *(void *)(v26 + 2096);
              if ((int)v21 + (int)v22 >= (int)v17) {
                break;
              }
              *(void *)(v26 + 2096) = *(void *)v27;
              *(void *)float v27 = v29;
              float v19 = *(float *)v18;
            }
            *(void *)(v2 + 8 * v22 + 8 * v21 + 2096) = *v18;
            *float v18 = v29;
            int v30 = v22 - v5 + v21;
            int v31 = v3 - v22 - v21;
            int v32 = v22 + v21;
            signed int v33 = v22 + v21 - 1;
            int v34 = v22 + v21;
            this = (v34 - 1);
            BOOL v35 = v30 < v31;
            if (v30 >= v31) {
              signed int v36 = v32 + 1;
            }
            else {
              signed int v36 = v5;
            }
            if (v35) {
              signed int v37 = v34 - 1;
            }
            else {
              signed int v37 = v3;
            }
            if (v35) {
              signed int v5 = v34 + 1;
            }
            if (!v35) {
              signed int v3 = v33;
            }
            *((_DWORD *)v107 + v4) = v36;
            *((_DWORD *)v107 + v4 + 1) = v37;
            v4 += 2;
            if (v3 <= v5) {
              goto LABEL_44;
            }
          }
          uint64_t v38 = v5;
          int v39 = v5 + 1;
          uint64_t v40 = v2 + 2104 + 8 * v5;
          do
          {
            this = 0;
            uint64_t v41 = v38++;
            float v42 = (float *)v40;
            int v43 = v41;
            do
            {
              float v44 = *v42;
              v42 += 2;
              if (v44 < *(float *)(v6 + 8 * v43)) {
                int v43 = v39 + this;
              }
              ++this;
            }
            while (v41 + this < v3);
            if (v43 != v41)
            {
              this = *(void *)(v6 + 8 * v43);
              *(void *)(v6 + 8 * v43) = *(void *)(v6 + 8 * v41);
              *(void *)(v6 + 8 * v41) = this;
            }
            ++v39;
            v40 += 8;
          }
          while (v38 != v3);
        }
        if (!v4) {
          break;
        }
LABEL_44:
        signed int v3 = *((_DWORD *)v107 + (v4 - 1));
        LODWORD(v4) = v4 - 2;
        signed int v5 = *((_DWORD *)v107 + v4);
      }
    }
    uint64_t v45 = 0;
    uint64_t v46 = v2 + 48;
    unint64_t v47 = *(unsigned int *)(v2 + 2608);
    float v48 = (_DWORD *)(v2 + 2612);
    if (v1 <= 1) {
      uint64_t v49 = 1;
    }
    else {
      uint64_t v49 = v1;
    }
    uint64_t v105 = v49;
    float v106 = (int *)(v2 + 2612);
    do
    {
      uint64_t v50 = v2 + 8 * v45;
      uint64_t v51 = *(unsigned int *)(v50 + 2100);
      uint64_t v52 = v46 + 32 * v51;
      int v53 = *(_DWORD *)(v52 + 20);
      int v54 = *(_DWORD *)(v52 + 24);
      int v55 = *(_DWORD *)(v52 + 28);
      switch(*(_DWORD *)(v52 + 12))
      {
        case 0:
          int v56 = *(_DWORD *)(v2 + 2608) + 1;
          float v57 = v48;
          do
          {
            if (!--v56) {
              goto LABEL_73;
            }
            if (*v57 == v53) {
              break;
            }
            if (v57[1] == v53) {
              break;
            }
            int v58 = v57[2];
            v57 += 3;
          }
          while (v58 != v53);
          break;
        case 1:
          int v59 = *(_DWORD *)(v2 + 2608) + 1;
          float v60 = v48;
          do
          {
            if (!--v59) {
              goto LABEL_73;
            }
            if (*v60 == v54) {
              break;
            }
            if (v60[1] == v54) {
              break;
            }
            int v61 = v60[2];
            v60 += 3;
          }
          while (v61 != v54);
          break;
        case 2:
          int v62 = *(_DWORD *)(v2 + 2608) + 1;
          unint64_t v63 = v48;
          do
          {
            if (!--v62) {
              goto LABEL_73;
            }
            if (*v63 == v55) {
              break;
            }
            if (v63[1] == v55) {
              break;
            }
            int v64 = v63[2];
            v63 += 3;
          }
          while (v64 != v55);
          break;
        case 3:
          this = validateEdge(*(_DWORD *)(v52 + 20), *(_DWORD *)(v52 + 24), v106, *(_DWORD *)(v2 + 2608));
          uint64_t v49 = v105;
          float v48 = (_DWORD *)(v2 + 2612);
          if (this) {
            goto LABEL_73;
          }
          break;
        case 4:
          int v65 = *(_DWORD *)(v2 + 2608);
          int v66 = *(_DWORD *)(v52 + 24);
          goto LABEL_72;
        case 5:
          int v65 = *(_DWORD *)(v2 + 2608);
          int v66 = *(_DWORD *)(v52 + 20);
LABEL_72:
          this = validateEdge(v66, *(_DWORD *)(v52 + 28), v106, v65);
          uint64_t v49 = v105;
          float v48 = (_DWORD *)(v2 + 2612);
          if (this)
          {
LABEL_73:
            float v67 = *(float *)(v50 + 2096);
            if (v67 <= 0.0001)
            {
              float v72 = *(float *)v52;
              float v73 = *(float *)(v52 + 4);
              float v74 = *(float *)(v52 + 8);
              float v75 = (float)((float)(v73 * v73) + (float)(v72 * v72)) + (float)(v74 * v74);
              float v68 = 0.0;
              float v76 = 0.0;
              float v77 = 0.0;
              float v78 = 0.0;
              if (v75 > 0.0)
              {
                float v79 = 1.0 / sqrtf(v75);
                float v76 = v72 * v79;
                float v77 = v73 * v79;
                float v78 = v74 * v79;
              }
              float v69 = -v76;
              float v70 = -v77;
              float v71 = -v78;
            }
            else
            {
              float v68 = sqrtf(v67);
              float v69 = (float)(1.0 / v68) * *(float *)v52;
              float v70 = (float)(1.0 / v68) * *(float *)(v52 + 4);
              float v71 = (float)(1.0 / v68) * *(float *)(v52 + 8);
            }
            uint64_t v80 = *(void *)(v2 + 24);
            uint64_t v81 = *(unsigned int *)(v80 + 4096);
            if (v81 <= 0x3F)
            {
              float v82 = *(float *)(*(void *)v2 + 4);
              float v83 = v68 - v82;
              float v84 = *(float **)(v2 + 16);
              float v85 = *(float **)(v2 + 32);
              float v86 = (float)((float)(v71 * v82) + v85[2]) + (float)((float)(v71 * v82) + v85[2]);
              float v87 = (float)((float)(v69 * v82) + *v85) + (float)((float)(v69 * v82) + *v85);
              float v88 = *v84;
              float v89 = v84[1];
              float v90 = (float)((float)(v70 * v82) + v85[1]) + (float)((float)(v70 * v82) + v85[1]);
              float v91 = v84[2];
              float v92 = v84[3];
              float v93 = (float)((float)(v89 * v90) + (float)(*v84 * v87)) + (float)(v91 * v86);
              float v94 = (float)(v92 * v92) + -0.5;
              float v95 = v84[6]
                  + (float)((float)((float)(v92 * (float)((float)(*v84 * v90) - (float)(v89 * v87))) + (float)(v86 * v94))
                          + (float)(v91 * v93));
              float v96 = v84[4];
              float v97 = v84[5]
                  + (float)((float)((float)((float)((float)(v91 * v87) - (float)(*v84 * v86)) * v92) + (float)(v90 * v94))
                          + (float)(v89 * v93));
              LODWORD(v84) = *(_DWORD *)(v46 + 32 * v51 + 16);
              float v98 = v96
                  + (float)((float)((float)(v92 * (float)((float)(v89 * v86) - (float)(v91 * v90))) + (float)(v87 * v94))
                          + (float)(v88 * v93));
              float v99 = v71 + v71;
              float v100 = v69 + v69;
              float v101 = v70 + v70;
              float v102 = (float)((float)(v101 * v89) + (float)(v88 * v100)) + (float)(v91 * v99);
              *(_DWORD *)(v80 + 4096) = v81 + 1;
              uint64_t v103 = v80 + (v81 << 6);
              *(float *)uint64_t v103 = -(float)((float)((float)((float)((float)(v89 * v99) - (float)(v91 * v101)) * v92)
                                              + (float)(v100 * v94))
                                      + (float)(v88 * v102));
              *(float *)(v103 + 4) = -(float)((float)((float)((float)((float)(v91 * v100) - (float)(v88 * v99)) * v92)
                                                    + (float)(v101 * v94))
                                            + (float)(v89 * v102));
              *(float *)(v103 + 16) = v98;
              *(float *)(v103 + 20) = v97;
              *(float *)(v103 + 24) = v95;
              *(float *)(v103 + 8) = -(float)((float)((float)((float)((float)(v88 * v101) - (float)(v89 * v100)) * v92)
                                                    + (float)(v99 * v94))
                                            + (float)(v91 * v102));
              *(float *)(v103 + 12) = v83;
              *(_DWORD *)(v103 + 52) = v84;
            }
          }
          break;
        default:
          break;
      }
      if (v47 <= 0x3F)
      {
        float v104 = (_DWORD *)(v2 + 12 * v47++);
        *(_DWORD *)(v2 + 2608) = v47;
        v104[653] = v53;
        v104[654] = v54;
        v104[655] = v55;
      }
      ++v45;
    }
    while (v45 != v49);
  }
  return this;
}

BOOL physx::Gu::contactSpherePlane(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float v7 = a3[4];
  float v8 = a3[5];
  float v9 = a3[6];
  float v10 = (float)(v7 - a4[4]) + (float)(v7 - a4[4]);
  float v11 = (float)(v8 - a4[5]) + (float)(v8 - a4[5]);
  float v12 = (float)(v9 - a4[6]) + (float)(v9 - a4[6]);
  float v14 = a4[2];
  float v13 = a4[3];
  float v15 = *a4;
  float v16 = a4[1];
  float v17 = (float)((float)(v10 * (float)((float)(v13 * v13) + -0.5))
              - (float)((float)((float)(v16 * v12) - (float)(v14 * v11)) * v13))
      + (float)(*a4 * (float)((float)((float)(v11 * v16) + (float)(*a4 * v10)) + (float)(v14 * v12)));
  float v18 = *(float *)(a1 + 4);
  float v19 = v17 - v18;
  float v20 = *a5;
  if (v19 <= *a5)
  {
    uint64_t v21 = *(unsigned int *)(a7 + 4096);
    if (v21 <= 0x3F)
    {
      float v22 = (float)((float)(v15 + v15) * v14) - (float)(v16 * (float)(v13 + v13));
      float v23 = (float)(v16 * (float)(v15 + v15)) + (float)(v14 * (float)(v13 + v13));
      float v24 = (float)((float)(v13 * (float)(v13 + v13)) + -1.0) + (float)(v15 * (float)(v15 + v15));
      *(_DWORD *)(a7 + 4096) = v21 + 1;
      uint64_t v25 = a7 + (v21 << 6);
      *(float *)uint64_t v25 = v24;
      *(float *)(v25 + 4) = v23;
      *(float *)(v25 + 16) = v7 - (float)(v24 * v18);
      *(float *)(v25 + 20) = v8 - (float)(v23 * v18);
      *(float *)(v25 + 24) = v9 - (float)(v18 * v22);
      *(float *)(v25 + 8) = v22;
      *(float *)(v25 + 12) = v19;
      *(_DWORD *)(v25 + 52) = -1;
    }
  }
  return v19 <= v20;
}

BOOL physx::Gu::contactSphereSphere(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float *a5, uint64_t a6, uint64_t a7)
{
  float32x2_t v7 = a3[2];
  float32x2_t v8 = vsub_f32(v7, a4[2]);
  float v9 = a3[3].f32[0];
  float v10 = v9 - a4[3].f32[0];
  float v11 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v8, v8).i32[1]), v8.f32[0], v8.f32[0]) + (float)(v10 * v10);
  float v12 = *(float *)(a1 + 4);
  float v13 = *(float *)(a2 + 4);
  float v14 = (float)((float)(v12 + v13) + *a5) * (float)((float)(v12 + v13) + *a5);
  if (v11 < v14)
  {
    float v15 = sqrtf(v11);
    if (v15 <= 0.00001)
    {
      float32x2_t v16 = (float32x2_t)1065353216;
      float v17 = 0.0;
    }
    else
    {
      float32x2_t v16 = vmul_n_f32(v8, 1.0 / v15);
      float v17 = v10 * (float)(1.0 / v15);
    }
    uint64_t v18 = *(unsigned int *)(a7 + 4096);
    if (v18 <= 0x3F)
    {
      float32_t v19 = v15 - (float)(v12 + v13);
      float v20 = (float)((float)(v12 + v15) - v13) * -0.5;
      *(_DWORD *)(a7 + 4096) = v18 + 1;
      uint64_t v21 = (float32x2_t *)(a7 + (v18 << 6));
      *uint64_t v21 = v16;
      v21[2] = vadd_f32(v7, vmul_n_f32(v16, v20));
      v21[3].f32[0] = v9 + (float)(v20 * v17);
      v21[1].f32[0] = v17;
      v21[1].f32[1] = v19;
      v21[6].i32[1] = -1;
    }
  }
  return v11 < v14;
}

BOOL physx::Gu::selectNormal(physx::Gu *this, float a2, float a3)
{
  if (a2 == 0.0)
  {
    BOOL v3 = (this & 0x30) == 0;
    if (a3 != 1.0) {
      BOOL v3 = (this & 0x20) == 0;
    }
    if (a3 == 0.0) {
      return (this & 0x28) == 0;
    }
    else {
      return v3;
    }
  }
  else if (a2 == 1.0)
  {
    return a3 == 0.0 && (this & 0x18) == 0;
  }
  else if (a3 == 0.0)
  {
    return (this & 8) == 0;
  }
  else
  {
    return (float)(a2 + a3) < 0.9999 || (this & 0x10) == 0;
  }
}

void physx::BigConvexData::~BigConvexData(physx::BigConvexData *this)
{
  if (*((void *)this + 1)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 5)) {
    goto LABEL_7;
  }
  if (*((void *)this + 3)) {
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((void *)this + 4)) {
LABEL_7:
  }
    (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

float32_t physx::Gu::getScaledConvex(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  if (a5)
  {
    *a1 = a6;
    *a2 = a7;
  }
  else
  {
    *a2 = a4;
    *a1 = a3;
    if (a8)
    {
      uint64_t v9 = 0;
      for (uint64_t i = 0; i != a8; ++i)
      {
        *(unsigned char *)(*a2 + i) = i;
        float v11 = (float *)(a6 + 12 * *(unsigned __int8 *)(a7 + i));
        float v12 = *v11;
        float v13 = v11[1];
        float v14 = v11[2];
        float32_t result = (float)((float)(*v11 * *(float *)(a9 + 8)) + (float)(v13 * *(float *)(a9 + 20)))
               + (float)(v14 * *(float *)(a9 + 32));
        float32x2_t v16 = (float32x2_t *)(*a1 + v9);
        *float32x2_t v16 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a9, v12), vmul_n_f32(*(float32x2_t *)(a9 + 12), v13)), vmul_n_f32(*(float32x2_t *)(a9 + 24), v14));
        v16[1].f32[0] = result;
        v9 += 12;
      }
    }
  }
  return result;
}

BOOL physx::Gu::getConvexData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = *(float *)(a1 + 4) == 1.0;
  if (*(float *)(a1 + 8) != 1.0) {
    BOOL v8 = 0;
  }
  BOOL v9 = *(float *)(a1 + 12) == 1.0 && v8;
  if (v9)
  {
    float v10 = *(float **)(a1 + 48);
    float v11 = *(float *)(a2 + 8);
    float v12 = v10[1];
    float v13 = *(float *)(a2 + 20);
    float v14 = *(float *)(a2 + 32);
    float v15 = v10[2];
    float v16 = v10[3];
    float v17 = (float)((float)(*v10 * v11) + (float)(v12 * v13)) + (float)(v15 * v14);
    float v18 = v10[4];
    float v19 = v10[5];
    float v20 = (float)(fabsf(v11 * v16) + fabsf(v13 * v18)) + fabsf(v14 * v19);
    float32x2_t v21 = *(float32x2_t *)(a2 + 12);
    float32x2_t v22 = vadd_f32(vmul_n_f32(*(float32x2_t *)a2, *v10), vmul_n_f32(v21, v12));
    float32x2_t v23 = *(float32x2_t *)(a2 + 24);
    float32x2_t v24 = vadd_f32(v22, vmul_n_f32(v23, v15));
    float32x2_t v25 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)a2, v16)), vabs_f32(vmul_n_f32(v21, v18))), vabs_f32(vmul_n_f32(v23, v19)));
    *(float32x2_t *)a3 = vsub_f32(v24, v25);
    *(float *)(a3 + 8) = v17 - v20;
    *(float32x2_t *)(a3 + 12) = vadd_f32(v24, v25);
    *(float *)(a3 + 20) = v17 + v20;
    physx::Gu::getPolygonalData_Convex(a4, (uint64_t)v10, a2);
  }
  else
  {
    physx::Cm::FastVertex2ShapeScaling::init(a2, (float *)(a1 + 4), (float *)(a1 + 16));
    uint64_t v26 = *(float **)(a1 + 48);
    float v27 = *(float *)(a2 + 8);
    float v28 = v26[1];
    float v29 = *(float *)(a2 + 20);
    float v30 = *(float *)(a2 + 32);
    float v31 = v26[2];
    float v32 = v26[3];
    float v33 = (float)((float)(*v26 * v27) + (float)(v28 * v29)) + (float)(v31 * v30);
    float v34 = v26[4];
    float v35 = v26[5];
    float v36 = (float)(fabsf(v27 * v32) + fabsf(v29 * v34)) + fabsf(v30 * v35);
    float32x2_t v37 = *(float32x2_t *)(a2 + 12);
    float32x2_t v38 = vadd_f32(vmul_n_f32(*(float32x2_t *)a2, *v26), vmul_n_f32(v37, v28));
    float32x2_t v39 = *(float32x2_t *)(a2 + 24);
    float32x2_t v40 = vadd_f32(v38, vmul_n_f32(v39, v31));
    float32x2_t v41 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)a2, v32)), vabs_f32(vmul_n_f32(v37, v34))), vabs_f32(vmul_n_f32(v39, v35)));
    *(float32x2_t *)a3 = vsub_f32(v40, v41);
    *(float *)(a3 + 8) = v33 - v36;
    *(float32x2_t *)(a3 + 12) = vadd_f32(v40, v41);
    *(float *)(a3 + 20) = v33 + v36;
    physx::Gu::getPolygonalData_Convex(a4, (uint64_t)v26, a2);
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 72) = 0;
  }
  return v9;
}

uint64_t physx::Gu::findUniqueConvexEdges(uint64_t a1, uint64_t a2, int a3, float32x2_t *a4, uint64_t a5)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    int v7 = a4[2].u8[2];
    if (a4[2].i8[2])
    {
      uint64_t v8 = 0;
      uint64_t v9 = a5 + a4[2].u16[0];
      unsigned int v10 = v7 - 1;
      do
      {
        unsigned int v11 = *(unsigned __int8 *)(v9 + v10);
        unsigned int v12 = *(unsigned __int8 *)(v9 + v8);
        if (v12 >= v11) {
          int v13 = *(unsigned __int8 *)(v9 + v10);
        }
        else {
          int v13 = *(unsigned __int8 *)(v9 + v8);
        }
        if (v12 > v11) {
          unsigned int v11 = *(unsigned __int8 *)(v9 + v8);
        }
        if (result)
        {
          uint64_t v14 = result;
          float v15 = (float *)(a2 + 12);
          while (*((unsigned __int8 *)v15 - 12) != v13 || *((unsigned __int8 *)v15 - 11) != v11)
          {
            v15 += 4;
            if (!--v14) {
              goto LABEL_15;
            }
          }
          *((float32x2_t *)v15 - 1) = vadd_f32(*a4, *(float32x2_t *)(v15 - 2));
          *float v15 = a4[1].f32[0] + *v15;
        }
        else
        {
LABEL_15:
          if (result == a1) {
            return a1;
          }
          uint64_t v16 = a2 + 16 * result;
          *(unsigned char *)uint64_t v16 = v13;
          *(unsigned char *)(v16 + 1) = v11;
          *(float32x2_t *)(v16 + 4) = *a4;
          *(_DWORD *)(v16 + 12) = a4[1].i32[0];
          uint64_t result = (result + 1);
        }
        unsigned int v10 = v8++;
        --v7;
      }
      while (v7);
    }
    a4 = (float32x2_t *)((char *)a4 + 20);
    --a3;
  }
  while (a3);
  return result;
}

BOOL physx::Gu::ConvexMesh::getPolygonData(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 71);
  if (v3 > a2)
  {
    uint64_t v4 = *(void *)(a1 + 72) + 20 * a2;
    *(_DWORD *)a3 = *(_DWORD *)v4;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v4 + 4);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(v4 + 12);
    *(_WORD *)(a3 + 16) = *(unsigned __int8 *)(v4 + 18);
    *(_WORD *)(a3 + 18) = *(_WORD *)(v4 + 16);
  }
  return v3 > a2;
}

double physx::Gu::ConvexMesh::ConvexMesh(physx::Gu::ConvexMesh *this)
{
  *((_DWORD *)this + 2) = 196610;
  *((_DWORD *)this + 6) = 1;
  *(void *)this = &unk_26E728E30;
  *((void *)this + 2) = &unk_26E728ED8;
  *((_DWORD *)this + 26) = 0;
  *((void *)this + 14) = 0;
  *(_OWORD *)((char *)this + 120) = xmmword_23435FD60;
  *(_OWORD *)((char *)this + 136) = xmmword_23435FD60;
  *((void *)this + 19) = 0x3F80000000000000;
  *(int32x2_t *)((char *)this + 44) = vdup_n_s32(0xFE7FFFFF);
  *((_DWORD *)this + 13) = -25165825;
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

__n128 physx::Gu::ConvexMesh::ConvexMesh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = 196610;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)a1 = &unk_26E728E30;
  *(void *)(a1 + 16) = &unk_26E728ED8;
  *(_WORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a3 + 72);
  *(void *)(a1 + 112) = *(void *)(a3 + 120);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 76);
  *(void *)(a1 + 136) = *(void *)(a3 + 92);
  *(void *)(a1 + 144) = *(void *)(a3 + 100);
  *(void *)(a1 + 152) = *(void *)(a3 + 108);
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 32) = *(void *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 8);
  *(void *)(a1 + 48) = *(void *)(a3 + 16);
  *(void *)(a1 + 56) = *(void *)(a3 + 24);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a3 + 32);
  __n128 result = *(__n128 *)(a3 + 36);
  long long v4 = *(_OWORD *)(a3 + 52);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a3 + 68);
  *(_OWORD *)(a1 + 84) = v4;
  *(__n128 *)(a1 + 68) = result;
  return result;
}

void physx::Gu::ConvexMesh::~ConvexMesh(physx::Gu::ConvexMesh *this)
{
  *(void *)this = &unk_26E728E30;
  *((void *)this + 2) = &unk_26E728ED8;
  if (*((unsigned char *)this + 10))
  {
    if (*((void *)this + 9)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 9) = 0;
    uint64_t v2 = *((void *)this + 14);
    if (v2)
    {
      physx::BigConvexData::~BigConvexData(*((physx::BigConvexData **)this + 14));
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    }
    *((void *)this + 14) = 0;
  }
}

{
  uint64_t v1;
  void (*v2)(void);
  uint64_t vars8;

  physx::Gu::ConvexMesh::~ConvexMesh(this);
  if (v1)
  {
    uint64_t v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

void non-virtual thunk to'physx::Gu::ConvexMesh::~ConvexMesh(physx::Gu::ConvexMesh *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Gu::ConvexMesh::~ConvexMesh((physx::Gu::ConvexMesh *)((char *)this - 16));
  unsigned int v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

BOOL physx::Gu::ConvexMesh::isGpuCompatible(physx::Gu::ConvexMesh *this)
{
  return *((unsigned __int8 *)this + 70) <= 0x40u
      && *(unsigned __int8 *)(*((void *)this + 9) + 18) <= 0x1Fu
      && *((__int16 *)this + 34) < 0;
}

uint64_t physx::Gu::ConvexMesh::exportExtraData(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
  int v4 = *(_WORD *)(a1 + 68) & 0x7FFF;
  if (*(__int16 *)(a1 + 68) < 0) {
    int v5 = 4 * v4;
  }
  else {
    int v5 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 72), ((*(_DWORD *)(a1 + 104) & 0x7FFFFFFF)+ 20 * *(unsigned __int8 *)(a1 + 71)- *(unsigned __int8 *)(a1 + 70)+ 16 * *(unsigned __int8 *)(a1 + 70)+ 2 * v4+ v5+ 3) & 0xFFFFFFFC);
  if (*(void *)(a1 + 112))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 16))(a2, *(void *)(a1 + 112), 48);
    uint64_t v7 = *(void *)(a1 + 112);
    if (*(void *)(v7 + 8))
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(v7 + 8), 2 * *(unsigned __int16 *)(v7 + 2));
    }
    if (*(void *)(v7 + 24))
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
      uint64_t v8 = ((4 * *(_DWORD *)(v7 + 16) + 12) & 0xFFFFFFF0) + *(_DWORD *)(v7 + 20);
      uint64_t v9 = *(void *)(v7 + 24);
      unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
      return v10(a2, v9, v8);
    }
  }
  return result;
}

uint64_t physx::Gu::ConvexMesh::load(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t))
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  unsigned int v80 = 0;
  BOOL v79 = 0;
  int v7 = physx::readHeader(0x43u, 0x56u, 0x58u, 0x4Du, &v80, &v79, a2);
  uint64_t result = 0;
  if (v7)
  {
    if (v80 <= 0xC)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuConvexMesh.cpp", 318, "Loading convex mesh failed: Deprecated mesh cooking format.", v4, v5, v6, v73);
      return 0;
    }
    physx::readDword(v79, (void (***)(void, unsigned __int32 *, uint64_t))a2);
    unsigned int v84 = 0;
    LOBYTE(v82) = 0;
    if (!physx::Gu::ReadHeader(67, 76, 72, 76, &v84, (BOOL *)&v82, a2)
      || v84 <= 8 && !physx::Gu::ReadHeader(67, 86, 72, 76, &v84, (BOOL *)&v82, a2))
    {
      return 0;
    }
    int v9 = v82;
    physx::readFloatBuffer(&v85, 4u, v82, (void (***)(void, __int32 *, void))a2);
    unsigned __int8 v10 = v85;
    __int16 v11 = v86.i16[0];
    int v12 = v85;
    *(unsigned char *)(a1 + 70) = v85;
    int v13 = v11;
    *(_WORD *)(a1 + 68) = v11;
    uint64_t v14 = v86.u32[2];
    int v15 = v86.u8[4];
    *(unsigned char *)(a1 + 71) = v86.i8[4];
    int v16 = v11 & 0x7FFF;
    if (v13 < 0) {
      int v17 = 4 * v16;
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = (16 * v12 - v10 + 2 * v16 + v17 + v14 + 20 * v15 + 3) & 0xFFFFFFFC;
    if (*(void *)(a1 + 72)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(_DWORD *)(a1 + 104) = v14;
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, v18, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuConvexMesh.cpp", 199);
    else {
      uint64_t v19 = 0;
    }
    BOOL v20 = v9 != 0;
    *(void *)(a1 + 72) = v19;
    uint64_t v75 = 5 * *(unsigned __int8 *)(a1 + 71);
    uint64_t v76 = v19;
    float32x2_t v21 = (__int32 *)(v19 + 20 * *(unsigned __int8 *)(a1 + 71));
    uint64_t v22 = *(unsigned __int8 *)(a1 + 70);
    float32x2_t v23 = &v21[3 * v22];
    __int16 v24 = *(_WORD *)(a1 + 68);
    int v25 = v24;
    uint64_t v26 = v24 & 0x7FFF;
    uint64_t v77 = (uint64_t)v23 + 2 * v26;
    uint64_t v27 = v77 + 3 * v22;
    uint64_t v28 = 4 * v26;
    if (v25 >= 0) {
      uint64_t v28 = 0;
    }
    uint64_t v74 = v28;
    uint64_t v78 = v27 + v28;
    physx::readFloatBuffer(v21, 3 * v22, v20, (void (***)(void, __int32 *, void))a2);
    int v29 = v82;
    if (v84 < 7)
    {
      LOWORD(v85) = 0;
      (**a2)(a2, (uint64_t)&v85, 2);
    }
    (**a2)(a2, *(void *)(a1 + 72), 20 * *(unsigned __int8 *)(a1 + 71));
    if (v29 && *(unsigned char *)(a1 + 71))
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      do
      {
        float v32 = (int8x16_t *)(*(void *)(a1 + 72) + v30);
        *float v32 = vrev32q_s8(*v32);
        __int8 v33 = v32[1].i8[0];
        v32[1].i8[0] = v32[1].i8[1];
        v32[1].i8[1] = v33;
        ++v31;
        v30 += 20;
      }
      while (v31 < *(unsigned __int8 *)(a1 + 71));
    }
    (**a2)(a2, v78, v14);
    (**a2)(a2, (uint64_t)v23, 2 * (*(_WORD *)(a1 + 68) & 0x7FFFu));
    if (v84 > 5)
    {
      (**a2)(a2, v77, 3 * *(unsigned __int8 *)(a1 + 70));
      float v34 = (void *)&unk_2687A6000;
    }
    else
    {
      float v34 = &unk_2687A6000;
      if (*(unsigned char *)(a1 + 70))
      {
        unint64_t v35 = 0;
        LODWORD(v36) = 1;
        while (1)
        {
          uint64_t v37 = *(unsigned __int8 *)(a1 + 71);
          if (!*(unsigned char *)(a1 + 71)) {
            break;
          }
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          uint64_t v40 = *(void *)(a1 + 72);
          while (1)
          {
            uint64_t v41 = *(unsigned __int8 *)(v40 + 20 * v38 + 18);
            if (*(unsigned char *)(v40 + 20 * v38 + 18))
            {
              float v42 = (unsigned __int8 *)(v76
                                      + v74
                                      + 4 * v75
                                      - v22
                                      + 16 * v22
                                      + 2 * v26
                                      + *(unsigned __int16 *)(v40 + 20 * v38 + 16));
              while (1)
              {
                int v43 = *v42++;
                if (v35 == v43) {
                  break;
                }
                if (!--v41) {
                  goto LABEL_36;
                }
              }
              *((unsigned char *)&v85 + v39++) = v38;
              if (v39 == 3) {
                break;
              }
            }
LABEL_36:
            if (++v38 == v37) {
              goto LABEL_41;
            }
          }
          uint64_t v44 = v77 + 3 * v35;
          *(unsigned char *)uint64_t v44 = v85;
          *(_WORD *)(v44 + 1) = *(_WORD *)((char *)&v85 + 1);
          ++v35;
          unint64_t v36 = *(unsigned __int8 *)(a1 + 70);
          if (v35 >= v36) {
            goto LABEL_44;
          }
        }
LABEL_41:
        if (v36)
        {
          unint64_t v45 = 0;
          uint64_t v46 = 4 * v75 + 12 * v22 + 2 * v26 + v76 + 1;
          do
          {
            *(_WORD *)(v46 - 1) = -1;
            *(unsigned char *)(v46 + 1) = -1;
            ++v45;
            v46 += 3;
          }
          while (v45 < *(unsigned __int8 *)(a1 + 70));
        }
      }
    }
LABEL_44:
    int v47 = *(__int16 *)(a1 + 68);
    if (v47 < 0)
    {
      if (v84 > 7)
      {
        physx::readWordBuffer(v27, 2 * (v47 & 0x7FFF), v82, a2);
      }
      else if ((v47 & 0x7FFF) != 0)
      {
        unint64_t v48 = 0;
        do
          *(_WORD *)(v27 + 2 * v48++) = -1;
        while (v48 < 2 * (unint64_t)(*(_WORD *)(a1 + 68) & 0x7FFF));
      }
    }
    BOOL v49 = v79;
    physx::readFloatBuffer(&v85, 8u, v79, (void (***)(void, __int32 *, void))a2);
    float32x4_t v50 = (float32x4_t)vextq_s8(v86, v86, 8uLL);
    float32x4_t v51 = (float32x4_t)vextq_s8(v86, (int8x16_t)v50, 0xCuLL);
    float32x4_t v52 = vsubq_f32((float32x4_t)v86, v51);
    *(float32x2_t *)&v51.i32[1] = v87;
    float32x4_t v53 = vaddq_f32((float32x4_t)v86, v51);
    v53.i32[3] = v52.i32[3];
    float32x2_t v54 = vsub_f32(v87, (float32x2_t)vext_s8(*(int8x8_t *)v86.i8, *(int8x8_t *)v50.f32, 4uLL));
    v50.i64[0] = 0x3F0000003F000000;
    v50.i64[1] = 0x3F0000003F000000;
    *(float32x4_t *)(a1 + 32) = vmulq_f32(v53, v50);
    *(float32x2_t *)(a1 + 48) = vmul_f32(v54, (float32x2_t)0x3F0000003F000000);
    v54.i32[0] = v88;
    *(_DWORD *)(a1 + 120) = v88;
    if (v54.f32[0] != -1.0)
    {
      physx::readFloatBuffer((__int32 *)(a1 + 124), 9u, v49, (void (***)(void, __int32 *, void))a2);
      physx::readFloatBuffer((__int32 *)(a1 + 56), 3u, v49, (void (***)(void, __int32 *, void))a2);
    }
    if (physx::readFloat(v49, (void (***)(void, float *, uint64_t))a2) != -1.0)
    {
      if (*(void *)(a1 + 112))
      {
        physx::BigConvexData::~BigConvexData(*(physx::BigConvexData **)(a1 + 112));
        (*(void (**)(void))(*(void *)(v34[105] + 24) + 24))();
      }
      *(void *)(a1 + 112) = 0;
      int v55 = (void *)v34[105];
      if ((*(unsigned int (**)(void *))(*v55 + 40))(v55)) {
        int v56 = "static const char *physx::shdfnd::ReflectionAllocator<physx::BigConvexData>::getName() [T = physx::BigConvexData]";
      }
      else {
        int v56 = "<allocation names disabled>";
      }
      uint64_t v57 = (*(uint64_t (**)(void *, uint64_t, const char *, const char *, uint64_t))(v55[3] + 16))(v55 + 3, 48, v56, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuConvexMesh.cpp", 351);
      *(_DWORD *)uint64_t v57 = 0;
      *(_OWORD *)(v57 + 8) = 0u;
      *(_OWORD *)(v57 + 24) = 0u;
      *(void *)(v57 + 40) = 0;
      *(void *)(a1 + 112) = v57;
      BOOL v81 = 0;
      if (physx::Gu::ReadHeader(83, 85, 80, 77, &v82, &v81, a2)
        && physx::Gu::ReadHeader(71, 65, 85, 83, &v82, &v81, a2))
      {
        int v58 = v81;
        *(_WORD *)uint64_t v57 = physx::readDword(v81, (void (***)(void, unsigned __int32 *, uint64_t))a2);
        unsigned __int16 Dword = physx::readDword(v58, (void (***)(void, unsigned __int32 *, uint64_t))a2);
        *(_WORD *)(v57 + 2) = Dword;
        uint64_t v60 = 2 * Dword ? (*(uint64_t (**)(void))(*(void *)(v34[105] + 24) + 16))() : 0;
        *(void *)(v57 + 8) = v60;
        ((void (*)(uint64_t (***)(void, uint64_t, uint64_t)))**a2)(a2);
        BOOL v83 = 0;
        if (physx::Gu::ReadHeader(86, 65, 76, 69, &v84, &v83, a2))
        {
          int v61 = v83;
          *(_DWORD *)(v57 + 16) = physx::readDword(v83, (void (***)(void, unsigned __int32 *, uint64_t))a2);
          int v62 = physx::readDword(v61, (void (***)(void, unsigned __int32 *, uint64_t))a2);
          *(_DWORD *)(v57 + 20) = v62;
          if (*(void *)(v57 + 40))
          {
            (*(void (**)(void))(*(void *)(v34[105] + 24) + 24))();
            int v62 = *(_DWORD *)(v57 + 20);
          }
          uint64_t v63 = 4 * ((*(_DWORD *)(v57 + 16) + 3) & 0xFFFFFFFC);
          if (v62 + v63) {
            uint64_t v64 = (*(uint64_t (**)(void))(*(void *)(v34[105] + 24) + 16))();
          }
          else {
            uint64_t v64 = 0;
          }
          BOOL v65 = v61 != 0;
          *(void *)(v57 + 24) = v64;
          *(void *)(v57 + 32) = v64 + v63;
          *(void *)(v57 + 40) = v64;
          unsigned __int16 v66 = physx::readDword(v65, (void (***)(void, unsigned __int32 *, uint64_t))a2);
          physx::Gu::ReadIndices(v66, *(unsigned int *)(v57 + 16), v64, (uint64_t (***)(void, char *, uint64_t))a2, v65);
          uint64_t v67 = *(unsigned int *)(v57 + 16);
          if (v67)
          {
            uint64_t v68 = *(void *)(v57 + 24);
            do
            {
              --v67;
              *(_WORD *)(v68 + 4 * v67) = *(_WORD *)(v64 + 2 * v67);
            }
            while (v67);
          }
          (**a2)(a2, *(void *)(v57 + 32), *(unsigned int *)(v57 + 20));
          float v69 = *(unsigned __int16 **)(v57 + 24);
          v69[1] = 0;
          uint64_t v70 = *(unsigned int *)(v57 + 16);
          if (v70 >= 2)
          {
            int v71 = 0;
            uint64_t v72 = v70 - 1;
            do
            {
              v71 += *v69;
              v69[3] = v71;
              v69 += 2;
              --v72;
            }
            while (v72);
          }
        }
      }
      *(void *)(a1 + 80) = *(void *)(a1 + 112);
    }
    physx::readFloatBuffer((__int32 *)(a1 + 88), 4u, v49, (void (***)(void, __int32 *, void))a2);
    return 1;
  }
  return result;
}

uint64_t physx::Gu::ConvexMesh::release(uint64_t this)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 24), 0xFFFFFFFF) == 1) {
    return (*(uint64_t (**)(void))(*(void *)(this + 16) + 16))();
  }
  return this;
}

uint64_t physx::Gu::ConvexMesh::onRefCountZero(physx::Gu::ConvexMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10 = *((_WORD *)this + 34) & 0x7FFF;
  if (*((__int16 *)this + 34) < 0) {
    int v11 = 4 * v10;
  }
  else {
    int v11 = 0;
  }
  if ((*((_DWORD *)this + 26) & 0x7FFFFFFF)
     + 20 * *((unsigned __int8 *)this + 71)
     - *((unsigned __int8 *)this + 70)
     + 16 * *((unsigned __int8 *)this + 70)
     + 2 * v10
     + v11
     + 3 < 4
    || physx::GuMeshFactory::removeConvexMesh(*((void *)this + 20), (uint64_t)this))
  {
    uint64_t v15 = *((void *)this + 20);
    uint64_t v16 = *(void *)this;
    if (*((_WORD *)this + 5)) {
      uint64_t result = (*(uint64_t (**)(physx::Gu::ConvexMesh *))(v16 + 32))(this);
    }
    else {
      uint64_t result = (*(uint64_t (**)(physx::Gu::ConvexMesh *))(v16 + 24))(this);
    }
    uint64_t v18 = *(unsigned int *)(v15 + 248);
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, physx::Gu::ConvexMesh *, uint64_t))(**(void **)(*(void *)(v15 + 240) + v19)
                                                                                     + 16))(*(void *)(*(void *)(v15 + 240) + v19), this, 2);
        v19 += 8;
      }
      while (v20 != v19);
    }
  }
  else
  {
    uint64_t v21 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v21, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/convex/GuConvexMesh.cpp", 396, "Gu::ConvexMesh::release: double deletion detected!", v12, v13, v14, a9);
  }
  return result;
}

uint64_t non-virtual thunk to'physx::Gu::ConvexMesh::onRefCountZero(physx::Gu::ConvexMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::Gu::ConvexMesh::onRefCountZero((physx::Gu::ConvexMesh *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Gu::ConvexMesh::acquireReference(uint64_t this)
{
  return this;
}

uint64_t physx::Gu::ConvexMesh::getReferenceCount(physx::Gu::ConvexMesh *this)
{
  return *((unsigned int *)this + 6);
}

float physx::Gu::ConvexMesh::getMassInformation(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *a2 = *(_DWORD *)(a1 + 120);
  *(void *)a3 = *(void *)(a1 + 124);
  *(void *)(a3 + 8) = *(void *)(a1 + 132);
  *(void *)(a3 + 16) = *(void *)(a1 + 140);
  *(void *)(a3 + 24) = *(void *)(a1 + 148);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 156);
  *(void *)a4 = *(void *)(a1 + 56);
  float result = *(float *)(a1 + 64);
  *(float *)(a4 + 8) = result;
  return result;
}

float physx::Gu::ConvexMesh::getLocalBounds@<S0>(physx::Gu::ConvexMesh *this@<X0>, uint64_t a2@<X8>)
{
  float v2 = *((float *)this + 13);
  float32x4_t v3 = *(float32x4_t *)((char *)this + 36);
  float32x4_t v4 = (float32x4_t)vextq_s8((int8x16_t)v3, vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), 0xCuLL);
  v4.f32[1] = v2;
  *(void *)&long long v5 = vsubq_f32(v3, v4).u64[0];
  v4.i32[2] = *((_DWORD *)this + 8);
  *((void *)&v5 + 1) = vaddq_f32(v3, v4).i64[1];
  v3.i32[0] = HIDWORD(*(void *)((char *)this + 36));
  *(float *)a2 = v4.f32[2] - COERCE_FLOAT(*(void *)((char *)this + 44));
  float result = v3.f32[0] + v2;
  *(_OWORD *)(a2 + 4) = v5;
  *(float *)(a2 + 20) = v3.f32[0] + v2;
  return result;
}

const char *physx::PxConvexMesh::getConcreteTypeName(physx::PxConvexMesh *this)
{
  return "PxConvexMesh";
}

BOOL physx::PxConvexMesh::isKindOf(physx::PxConvexMesh *this, const char *a2)
{
  return !strcmp("PxConvexMesh", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Gu::ConvexMesh::getNbVertices(physx::Gu::ConvexMesh *this)
{
  return *((unsigned __int8 *)this + 70);
}

uint64_t physx::Gu::ConvexMesh::getVertices(physx::Gu::ConvexMesh *this)
{
  return *((void *)this + 9) + 20 * *((unsigned __int8 *)this + 71);
}

uint64_t physx::Gu::ConvexMesh::getIndexBuffer(physx::Gu::ConvexMesh *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  int v2 = v1;
  uint64_t v3 = v1 & 0x7FFF;
  uint64_t v4 = *((void *)this + 9) + 20 * *((unsigned __int8 *)this + 71) + 12 * *((unsigned __int8 *)this + 70) + 2 * v3;
  uint64_t v5 = 4 * v3;
  if (v2 >= 0) {
    uint64_t v5 = 0;
  }
  return v4 + 3 * *((unsigned __int8 *)this + 70) + v5;
}

uint64_t physx::Gu::ConvexMesh::getNbPolygons(physx::Gu::ConvexMesh *this)
{
  return *((unsigned __int8 *)this + 71);
}

uint64_t anonymous namespace'::SphereMeshContactGenerationCallback_NoScale::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t *a7)
{
  return 1;
}

uint64_t anonymous namespace'::SphereMeshContactGeneration::processTriangle(uint64_t result, int a2, float *a3, float *a4, float *a5, uint64_t *a6)
{
  uint64_t v6 = *(float **)(result + 32);
  float v7 = *a4;
  float v8 = a4[1];
  float v9 = *a3;
  float v10 = a3[1];
  float v11 = *a4 - *a3;
  float v12 = v8 - v10;
  float v13 = a4[2];
  float v14 = a3[2];
  float v15 = v13 - v14;
  float v16 = *a5;
  float v17 = a5[1];
  float v18 = *a5 - *a3;
  float v19 = v17 - v10;
  float v20 = a5[2];
  float v21 = v20 - v14;
  float v23 = *v6;
  float v22 = v6[1];
  float v24 = *v6 - *a3;
  float v25 = v6[2];
  float v26 = (float)((float)((float)(v8 - v10) * (float)(v22 - v10)) + (float)(v11 * v24))
      + (float)((float)(v13 - v14) * (float)(v25 - v14));
  float v27 = (float)((float)((float)(v17 - v10) * (float)(v22 - v10)) + (float)(v18 * v24))
      + (float)((float)(v20 - v14) * (float)(v25 - v14));
  if (v26 > 0.0 || v27 > 0.0)
  {
    float v30 = (float)((float)(v12 * (float)(v22 - v8)) + (float)(v11 * (float)(v23 - v7)))
        + (float)(v15 * (float)(v25 - v13));
    float v31 = (float)((float)(v19 * (float)(v22 - v8)) + (float)(v18 * (float)(v23 - v7)))
        + (float)(v21 * (float)(v25 - v13));
    if (v30 < 0.0 || v31 > v30)
    {
      float v33 = (float)(v26 * v31) - (float)(v30 * v27);
      if (v30 > 0.0 || v26 < 0.0 || v33 > 0.0)
      {
        float v37 = (float)((float)(v12 * (float)(v22 - v17)) + (float)(v11 * (float)(v23 - v16)))
            + (float)(v15 * (float)(v25 - v20));
        float v38 = (float)((float)(v19 * (float)(v22 - v17)) + (float)(v18 * (float)(v23 - v16)))
            + (float)(v21 * (float)(v25 - v20));
        if (v38 < 0.0 || v37 > v38)
        {
          float v40 = (float)(v37 * v27) - (float)(v26 * v38);
          if (v38 > 0.0 || v40 > 0.0 || v27 < 0.0)
          {
            float v44 = (float)(v30 * v38) - (float)(v37 * v31);
            if (v44 <= 0.0 && (float v45 = v31 - v30, v45 >= 0.0) && (float)(v37 - v38) >= 0.0)
            {
              char v28 = 0;
              float v102 = v45 / (float)(v45 + (float)(v37 - v38));
              float v7 = v7 + (float)((float)(v16 - v7) * v102);
              float v8 = v8 + (float)((float)(v17 - v8) * v102);
              float v13 = v13 + (float)((float)(v20 - v13) * v102);
              int v29 = 4;
            }
            else
            {
              float v46 = 1.0 / (float)(v33 + (float)(v44 + v40));
              float v47 = v40 * v46;
              float v48 = v33 * v46;
              float v49 = v14 + (float)(v15 * v47);
              float v50 = v19 * v48;
              float v51 = v21 * v48;
              float v7 = (float)(v18 * v48) + (float)(v9 + (float)(v11 * v47));
              float v8 = v50 + (float)(v10 + (float)(v12 * v47));
              float v13 = v51 + v49;
              int v29 = 6;
              char v28 = 1;
            }
          }
          else
          {
            char v28 = 0;
            float v41 = v27 / (float)(v27 - v38);
            float v42 = v19 * v41;
            float v43 = v21 * v41;
            float v7 = v9 + (float)(v18 * v41);
            float v8 = v10 + v42;
            float v13 = v14 + v43;
            int v29 = 5;
          }
        }
        else
        {
          char v28 = 0;
          int v29 = 2;
          float v7 = *a5;
          float v8 = a5[1];
          float v13 = a5[2];
        }
      }
      else
      {
        char v28 = 0;
        float v34 = v26 / (float)(v26 - v30);
        float v35 = v12 * v34;
        float v36 = v15 * v34;
        float v7 = v9 + (float)(v11 * v34);
        float v8 = v10 + v35;
        float v13 = v14 + v36;
        int v29 = 3;
      }
    }
    else
    {
      char v28 = 0;
      int v29 = 1;
    }
  }
  else
  {
    char v28 = 0;
    int v29 = 0;
    float v7 = *a3;
    float v8 = a3[1];
    float v13 = a3[2];
  }
  float v52 = v7 - v23;
  float v53 = v8 - v22;
  float v54 = v13 - v25;
  float v55 = (float)((float)(v53 * v53) + (float)(v52 * v52)) + (float)(v54 * v54);
  float v56 = (float)(v12 * v21) - (float)(v15 * v19);
  float v57 = (float)(v15 * v18) - (float)(v11 * v21);
  float v58 = (float)(v11 * v19) - (float)(v12 * v18);
  float v59 = (float)((float)(v10 * v57) + (float)(v56 * v9)) + (float)(v58 * v14);
  if (v55 < *(float *)(result + 40)
    && (float)((float)((float)(v22 * v57) + (float)(v56 * v23)) + (float)(v58 * v25)) >= v59)
  {
    if (v55 <= 0.0001)
    {
      if (v28)
      {
        float v65 = (float)((float)(v57 * v57) + (float)(v56 * v56)) + (float)(v58 * v58);
        float v61 = 0.0;
        float v66 = 0.0;
        float v67 = 0.0;
        float v68 = 0.0;
        if (v65 > 0.0)
        {
          float v69 = 1.0 / sqrtf(v65);
          float v66 = v56 * v69;
          float v67 = v57 * v69;
          float v68 = v58 * v69;
        }
        float v62 = -v66;
        float v63 = -v67;
        float v64 = -v68;
        goto LABEL_39;
      }
    }
    else
    {
      if (v28)
      {
        float v61 = sqrtf(v55);
        float v62 = v52 * (float)(1.0 / v61);
        float v63 = v53 * (float)(1.0 / v61);
        float v64 = v54 * (float)(1.0 / v61);
LABEL_39:
        uint64_t v70 = *(void *)(result + 24);
        uint64_t v71 = *(unsigned int *)(v70 + 4096);
        if (v71 <= 0x3F)
        {
          float v72 = *(float *)(*(void *)result + 4);
          float v73 = v61 - v72;
          uint64_t v74 = *(float **)(result + 16);
          float v75 = (float)(v25 + (float)(v64 * v72)) + (float)(v25 + (float)(v64 * v72));
          float v76 = (float)(v23 + (float)(v62 * v72)) + (float)(v23 + (float)(v62 * v72));
          float v77 = v74[1];
          float v78 = (float)(v22 + (float)(v63 * v72)) + (float)(v22 + (float)(v63 * v72));
          float v79 = v74[2];
          float v80 = v74[3];
          float v81 = (float)((float)(v78 * v77) + (float)(*v74 * v76)) + (float)(v79 * v75);
          float v82 = (float)(v80 * v80) + -0.5;
          float v83 = v74[6]
              + (float)((float)((float)(v80 * (float)((float)(*v74 * v78) - (float)(v77 * v76))) + (float)(v75 * v82))
                      + (float)(v79 * v81));
          float v84 = v74[5]
              + (float)((float)((float)((float)((float)(v79 * v76) - (float)(*v74 * v75)) * v80) + (float)(v78 * v82))
                      + (float)(v77 * v81));
          float v85 = (float)((float)((float)((float)((float)(v77 * v75) - (float)(v79 * v78)) * v80) + (float)(v76 * v82))
                      + (float)(*v74 * v81))
              + v74[4];
          float v86 = v64 + v64;
          float v87 = v62 + v62;
          float v88 = v63 + v63;
          float v89 = (float)((float)((float)(v63 + v63) * v77) + (float)(*v74 * v87)) + (float)(v79 * (float)(v64 + v64));
          float v90 = (float)(v80 * (float)((float)(*v74 * v88) - (float)(v77 * v87))) + (float)((float)(v64 + v64) * v82);
          float v91 = -(float)((float)((float)((float)((float)(v79 * v87) - (float)(*v74 * v86)) * v80) + (float)(v88 * v82))
                       + (float)(v77 * v89));
          float v92 = -(float)((float)((float)((float)((float)(v77 * v86) - (float)(v79 * v88)) * v80) + (float)(v87 * v82))
                       + (float)(*v74 * v89));
          *(_DWORD *)(v70 + 4096) = v71 + 1;
          uint64_t v93 = v70 + (v71 << 6);
          *(float *)uint64_t v93 = v92;
          *(float *)(v93 + 4) = v91;
          *(float *)(v93 + 16) = v85;
          *(float *)(v93 + 20) = v84;
          *(float *)(v93 + 24) = v83;
          *(float *)(v93 + 8) = -(float)(v90 + (float)(v79 * v89));
          *(float *)(v93 + 12) = v73;
          *(_DWORD *)(v93 + 52) = a2;
        }
        unsigned int v94 = *(_DWORD *)(result + 2608);
        if (v94 <= 0x3F)
        {
          int v95 = *((_DWORD *)a6 + 2);
          unsigned int v96 = v94 + 1;
          uint64_t v97 = result + 12 * v94;
          uint64_t v98 = *a6;
          *(_DWORD *)(result + 2608) = v96;
          *(void *)(v97 + 2612) = v98;
          *(_DWORD *)(v97 + 2620) = v95;
        }
        return result;
      }
      float v56 = v52;
      float v57 = v53;
      float v58 = v54;
    }
    uint64_t v99 = *(unsigned int *)(result + 44);
    if (v99 <= 0x3F)
    {
      *(_DWORD *)(result + 44) = v99 + 1;
      uint64_t v100 = result + 8 * v99;
      *(float *)(v100 + 2096) = v55;
      *(_DWORD *)(v100 + 2100) = v99;
      uint64_t v101 = result + 32 * v99;
      *(float *)(v101 + 48) = v56;
      *(float *)(v101 + 52) = v57;
      *(float *)(v101 + 56) = v58;
      *(_DWORD *)(v101 + 68) = *(_DWORD *)a6;
      *(_DWORD *)(v101 + 72) = *((_DWORD *)a6 + 1);
      *(_DWORD *)(v101 + 76) = *((_DWORD *)a6 + 2);
      *(_DWORD *)(v101 + 60) = v29;
      *(_DWORD *)(v101 + 64) = a2;
    }
  }
  return result;
}

uint64_t anonymous namespace'::SphereMeshContactGenerationCallback_Scale::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 3416);
  int v8 = *(unsigned __int8 *)(v7 + 72);
  float v9 = *(float *)(v7 + 8);
  float v10 = *a3;
  float v11 = a3[1];
  float v12 = *(float *)(v7 + 20);
  float v13 = a3[2];
  float v14 = *(float *)(v7 + 32);
  float v33 = (float)((float)(*a3 * v9) + (float)(v11 * v12)) + (float)(v13 * v14);
  float v15 = *a4;
  float v16 = a4[1];
  float v17 = a4[2];
  BOOL v18 = v8 == 0;
  uint64_t v19 = 24;
  if (v18) {
    uint64_t v20 = 12;
  }
  else {
    uint64_t v20 = 24;
  }
  float v21 = (float32x2_t *)((char *)&v32 + v20);
  v21[1].f32[0] = (float)((float)(v9 * *a4) + (float)(v12 * v16)) + (float)(v14 * v17);
  float v22 = *a5;
  float v23 = a5[1];
  float v24 = (float)(v9 * *a5) + (float)(v12 * v23);
  float v25 = a5[2];
  float v26 = v24 + (float)(v14 * v25);
  if (!v18) {
    uint64_t v19 = 12;
  }
  float v27 = (float32x2_t *)((char *)&v32 + v19);
  float32x2_t v28 = *(float32x2_t *)v7;
  float32x2_t v29 = *(float32x2_t *)(v7 + 12);
  float32x2_t v30 = *(float32x2_t *)(v7 + 24);
  float32x2_t v32 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v7, v10), vmul_n_f32(v29, v11)), vmul_n_f32(v30, v13));
  *float v21 = vadd_f32(vadd_f32(vmul_n_f32(v28, v15), vmul_n_f32(v29, v16)), vmul_n_f32(v30, v17));
  *float v27 = vadd_f32(vadd_f32(vmul_n_f32(v28, v22), vmul_n_f32(v29, v23)), vmul_n_f32(v30, v25));
  v27[1].f32[0] = v26;
  return 1;
}

void anonymous namespace'::SphereHeightfieldContactGenerationCallback::~SphereHeightfieldContactGenerationCallback(_anonymous_namespace_::SphereHeightfieldContactGenerationCallback *this)
{
}

uint64_t anonymous namespace'::SphereHeightfieldContactGenerationCallback::onEvent(_anonymous_namespace_::SphereHeightfieldContactGenerationCallback *this, int a2, unsigned int *a3)
{
  *(void *)&v12[3] = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v4 = a2;
    uint64_t v6 = (char *)this + 8;
    do
    {
      --v4;
      unsigned int v7 = *a3++;
      physx::Gu::HeightFieldUtil::getTriangle(*((void *)this + 425), *((float **)this + 3), (uint64_t)v9, (uint64_t)v12, 0, v7, 0, 0);
    }
    while (v4);
  }
  return 1;
}

uint64_t validateEdge(int a1, int a2, int *a3, int a4)
{
  if (a4)
  {
    while (1)
    {
      int v4 = *a3;
      int v5 = a3[1];
      int v6 = a3[2];
      if (*a3 == a1) {
        break;
      }
      if (v5 == a1)
      {
        BOOL v7 = v4 == a2;
LABEL_6:
        if (v7 || v6 == a2) {
          return 0;
        }
        goto LABEL_10;
      }
      if (v6 == a1 && (v4 == a2 || v5 == a2)) {
        return 0;
      }
LABEL_10:
      a3 += 3;
      if (!--a4) {
        return 1;
      }
    }
    BOOL v7 = v5 == a2;
    goto LABEL_6;
  }
  return 1;
}

float physx::Gu::computeHullOBB(float *a1, uint64_t a2, float *a3, float *a4, uint64_t a5, char a6, double a7)
{
  float v7 = a4[1];
  float v8 = a3[1];
  float v9 = a4[2];
  float v10 = a4[3];
  float v11 = a3[2];
  float v12 = a3[3];
  float v13 = (float)((float)(v7 * v8) + (float)(*a4 * *a3)) + (float)(v9 * v11);
  float v14 = a4[4];
  float v15 = a4[5];
  float v16 = (float)((float)(v8 * v14) + (float)(v10 * *a3)) + (float)(v15 * v11);
  float v17 = a4[6];
  float v18 = a4[7];
  float v19 = a4[8];
  float v20 = (float)((float)(v8 * v18) + (float)(v17 * *a3)) + (float)(v19 * v11);
  float v21 = a3[4];
  float v22 = a3[5];
  float v23 = (float)((float)(v7 * v21) + (float)(*a4 * v12)) + (float)(v9 * v22);
  float v24 = (float)((float)(v14 * v21) + (float)(v10 * v12)) + (float)(v15 * v22);
  float v25 = (float)((float)(v18 * v21) + (float)(v17 * v12)) + (float)(v19 * v22);
  float v26 = a3[6];
  float v27 = a3[7];
  float v28 = a3[8];
  float v29 = (float)((float)(v7 * v27) + (float)(*a4 * v26)) + (float)(v9 * v28);
  float v30 = (float)((float)(v14 * v27) + (float)(v10 * v26)) + (float)(v15 * v28);
  float v31 = (float)((float)(v18 * v27) + (float)(v17 * v26)) + (float)(v19 * v28);
  float v32 = a3[9] - a4[9];
  float v33 = a3[10] - a4[10];
  float v34 = a3[11] - a4[11];
  float v35 = (float)((float)(v7 * v33) + (float)(*a4 * v32)) + (float)(v9 * v34);
  float v36 = (float)((float)(v14 * v33) + (float)(v10 * v32)) + (float)(v15 * v34);
  float v37 = (float)((float)(*(float *)(a2 + 20) - *(float *)(a2 + 8)) * 0.5) + *(float *)&a7;
  *((float32x2_t *)a1 + 6) = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)(a2 + 12), *(float32x2_t *)a2), (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0));
  a1[14] = v37;
  float v38 = (float)(*(float *)a2 + *(float *)(a2 + 12)) * 0.5;
  float v39 = (float)(*(float *)(a2 + 4) + *(float *)(a2 + 16)) * 0.5;
  float v40 = (float)(*(float *)(a2 + 8) + *(float *)(a2 + 20)) * 0.5;
  a1[9] = v35 + (float)((float)((float)(v13 * v38) + (float)(v23 * v39)) + (float)(v29 * v40));
  float v41 = v36 + (float)((float)((float)(v16 * v38) + (float)(v24 * v39)) + (float)(v30 * v40));
  float result = (float)((float)((float)(v18 * v33) + (float)(v17 * v32)) + (float)(v19 * v34))
         + (float)((float)((float)(v20 * v38) + (float)(v25 * v39)) + (float)(v31 * v40));
  a1[10] = v41;
  a1[11] = result;
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v20;
  a1[3] = v23;
  a1[4] = v24;
  a1[5] = v25;
  a1[6] = v29;
  a1[7] = v30;
  a1[8] = v31;
  if ((a6 & 1) == 0) {
    return physx::Cm::FastVertex2ShapeScaling::transformQueryBounds(a5, a1 + 9, a1 + 12, a1);
  }
  return result;
}

float physx::Gu::computeVertexSpaceOBB(float32x4_t *a1, uint64_t a2, float *a3, float *a4, int8x16_t a5, int8x16_t a6, int32x4_t a7)
{
  float v8 = 1.0 / *a4;
  float v9 = 1.0 / a4[1];
  float v10 = a4[3];
  float v11 = 1.0 / a4[2];
  float v12 = a3[4] * -2.0;
  *(float *)a7.i32 = a3[5] * -2.0;
  float v13 = a3[6] * -2.0;
  float v15 = a3[2];
  float v14 = a3[3];
  float v16 = (float)(v14 * v14) + -0.5;
  float v17 = a3[1];
  float v18 = (float)((float)(*(float *)a7.i32 * v17) + (float)(*a3 * v12)) + (float)(v15 * v13);
  float v92 = (float)((float)(v12 * v16) - (float)((float)((float)(v17 * v13) - (float)(v15 * *(float *)a7.i32)) * v14))
      + (float)(*a3 * v18);
  *(float *)a6.i32 = (float)((float)(*(float *)a7.i32 * v16)
                           - (float)((float)((float)(v15 * v12) - (float)(*a3 * v13)) * v14))
                   + (float)(v17 * v18);
  *(float *)a7.i32 = (float)((float)(v13 * v16)
                           - (float)((float)((float)(*a3 * *(float *)a7.i32) - (float)(v17 * v12)) * v14))
                   + (float)(v15 * v18);
  float v19 = (float)-*a3 - *a3;
  float v20 = (float)-v17 - v17;
  float v21 = (float)-v15 - v15;
  float v22 = -(float)(v17 * v20);
  float v23 = -(float)(v15 * v21);
  float v24 = -(float)(v17 * v19);
  float v25 = -(float)(v15 * v19);
  float v26 = v14 * v19;
  float v27 = -(float)(v15 * v20);
  float v28 = v14 * v20;
  float v29 = v14 * v21;
  float v30 = (float)(1.0 - v22) - v23;
  float v31 = v24 + v29;
  float v32 = v25 - v28;
  float v33 = v24 - v29;
  float v34 = (float)(*a3 * v19) + 1.0;
  float v35 = v34 - v23;
  float v36 = v26 + v27;
  float v37 = v25 + v28;
  float v38 = v27 - v26;
  float v39 = v34 - v22;
  float v40 = a4[4];
  float v41 = a4[5];
  float v42 = v40 + v40;
  float v43 = v41 + v41;
  float v44 = v40 * (float)(v40 + v40);
  float v45 = v41 * (float)(v41 + v41);
  float v46 = (float)(v10 + v10) * v40;
  float v47 = (float)(v10 + v10) * v41;
  float v48 = a4[6];
  float v49 = (float)(v10 + v10) * v48;
  float v50 = v42 * v41;
  float v51 = v42 * v48;
  float v52 = v43 * v48;
  float v53 = (float)(1.0 - v44) - v45;
  float v54 = v46 + v52;
  float v55 = v47 - v51;
  float v56 = v46 - v52;
  float v57 = 1.0 - (float)(v10 * (float)(v10 + v10));
  float v58 = v57 - v45;
  float v59 = v50 + v49;
  float v60 = v47 + v51;
  float v61 = v50 - v49;
  float v62 = v57 - v44;
  float v63 = v8 * v53;
  float v64 = v8 * v56;
  float v65 = v8 * v60;
  float v66 = v9 * v54;
  float v67 = v9 * v58;
  float v68 = v9 * v61;
  *(float *)a5.i32 = v11 * v55;
  float v69 = v53 * (float)(v8 * v53);
  float v70 = (float)(v53 * (float)(v8 * v56)) + (float)(v54 * v67);
  float v71 = v11 * v59;
  float v72 = v11 * v62;
  float v73 = (float)(v53 * v65) + (float)(v54 * v68);
  float v74 = (float)(v55 * *(float *)a5.i32) + (float)(v69 + (float)(v54 * v66));
  float v75 = (float)(v55 * v71) + v70;
  float v76 = (float)(v55 * v72) + v73;
  float v77 = (float)(v56 * v63) + (float)(v58 * v66);
  float v78 = (float)(v56 * v64) + (float)(v58 * v67);
  float v79 = (float)(v56 * v65) + (float)(v58 * v68);
  float v80 = (float)(v59 * *(float *)a5.i32) + v77;
  float v81 = (float)(v59 * v71) + v78;
  float v82 = (float)(v59 * v72) + v79;
  float v83 = v60 * v63;
  float v84 = v61 * v66;
  float v85 = (float)(v60 * v64) + (float)(v61 * v67);
  float v86 = (float)(v60 * v65) + (float)(v61 * v68);
  float v87 = (float)(v62 * *(float *)a5.i32) + (float)(v83 + v84);
  float v88 = (float)(v62 * v71) + v85;
  float v89 = (float)(v62 * v72) + v86;
  v93[0] = (float)(v87 * v32) + (float)((float)(v74 * v30) + (float)(v80 * v31));
  v93[1] = (float)(v88 * v32) + (float)((float)(v75 * v30) + (float)(v81 * v31));
  v93[2] = (float)(v89 * v32) + (float)((float)(v76 * v30) + (float)(v82 * v31));
  v93[3] = (float)(v87 * v36) + (float)((float)(v74 * v33) + (float)(v80 * v35));
  v93[4] = (float)(v88 * v36) + (float)((float)(v75 * v33) + (float)(v81 * v35));
  v93[5] = (float)(v89 * v36) + (float)((float)(v76 * v33) + (float)(v82 * v35));
  v93[6] = (float)(v87 * v39) + (float)((float)(v74 * v37) + (float)(v80 * v38));
  v93[7] = (float)(v88 * v39) + (float)((float)(v75 * v37) + (float)(v81 * v38));
  v93[8] = (float)(v89 * v39) + (float)((float)(v76 * v37) + (float)(v82 * v38));
  v93[9] = (float)(v87 * *(float *)a7.i32) + (float)((float)(v80 * *(float *)a6.i32) + (float)(v74 * v92));
  *(float *)a5.i32 = v88 * *(float *)a7.i32;
  *(float *)a7.i32 = v89 * *(float *)a7.i32;
  *(float *)a5.i32 = *(float *)a5.i32 + (float)((float)(v81 * *(float *)a6.i32) + (float)(v75 * v92));
  *(float *)a6.i32 = *(float *)a7.i32 + (float)((float)(v82 * *(float *)a6.i32) + (float)(v76 * v92));
  v93[10] = *(float *)a5.i32;
  v93[11] = *(float *)a6.i32;
  physx::transform((uint64_t)v93, a2, v94, a5, a6, a7);
  float32x4_t v90 = v94[1];
  *a1 = v94[0];
  a1[1] = v90;
  a1[2] = v94[2];
  a1[3].i64[0] = v95;
  float result = v96;
  a1[3].f32[2] = v96;
  return result;
}

float physx::transform@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>, int8x16_t a4@<Q0>, int8x16_t a5@<Q1>, int32x4_t a6@<Q2>)
{
  a6.i64[0] = *(void *)a2;
  float32x2_t v10 = *(float32x2_t *)(a2 + 8);
  float32x2_t v11 = *(float32x2_t *)(a2 + 4);
  a5.i32[0] = *(_DWORD *)a1;
  a4.i64[0] = *(void *)(a1 + 4);
  v12.i64[0] = *(void *)(a1 + 12);
  float32x2_t v13 = *(float32x2_t *)(a2 + 48);
  a6.i32[1] = *(_DWORD *)(a2 + 12);
  *(float32x2_t *)a6.i8 = vmul_f32(v13, *(float32x2_t *)a6.i8);
  float32x4_t v14 = (float32x4_t)vzip1q_s32(a6, a6);
  v14.i32[2] = a6.i32[0];
  v11.i32[1] = *(_DWORD *)(a2 + 16);
  *(float32x2_t *)v6.i8 = vmul_f32(v13, v11);
  float32x4_t v15 = (float32x4_t)vzip1q_s32(v6, v6);
  v15.i32[2] = v6.i32[0];
  v10.i32[1] = *(_DWORD *)(a2 + 20);
  *(float32x2_t *)v7.i8 = vmul_f32(v13, v10);
  float32x4_t v16 = (float32x4_t)vzip1q_s32(v7, v7);
  v16.i32[2] = v7.i32[0];
  float32x4_t v17 = (float32x4_t)vextq_s8(vextq_s8(a5, a5, 4uLL), a4, 0xCuLL);
  v17.i32[3] = v17.i32[0];
  float32x4_t v18 = vmulq_f32(v17, v14);
  v14.i32[0] = *(_DWORD *)(a2 + 56);
  int32x4_t v19 = *(int32x4_t *)(a2 + 24);
  v17.f32[0] = v14.f32[0] * *(float *)(a2 + 28);
  v20.i64[0] = a4.i64[0];
  v20.i32[2] = *(_DWORD *)a1;
  v20.i32[3] = a4.i32[0];
  v6.i32[0] = vdup_lane_s32(*(int32x2_t *)v6.i8, 1).u32[0];
  *(float *)&v6.i32[1] = v17.f32[0];
  v7.i32[0] = vdup_lane_s32(*(int32x2_t *)v7.i8, 1).u32[0];
  *(float *)&v7.i32[1] = v14.f32[0] * *(float *)(a2 + 32);
  float32x4_t v21 = (float32x4_t)vzip1q_s32(v6, v6);
  float32x4_t v22 = (float32x4_t)vzip1q_s32(v7, v7);
  v7.i32[0] = *(_DWORD *)(a2 + 40);
  *(float32x2_t *)v8.i8 = vmul_n_f32(*(float32x2_t *)v12.f32, *(float *)v7.i32);
  float32x4_t v23 = *(float32x4_t *)(a1 + 20);
  *(int32x2_t *)v24.f32 = vzip1_s32(vdup_lane_s32(*(int32x2_t *)v12.f32, 1), *(int32x2_t *)v23.f32);
  v24.i64[1] = __PAIR64__(v24.u32[0], v12.u32[0]);
  v12.i64[1] = __PAIR64__(v12.u32[0], v23.u32[0]);
  float32x4_t v25 = vaddq_f32(v18, vmulq_f32(v12, v15));
  float32x4_t v26 = (float32x4_t)vextq_s8((int8x16_t)v23, a4, 4uLL);
  v26.i32[3] = v26.i32[0];
  v18.i64[0] = *(void *)(a1 + 40);
  float32x4_t v27 = vaddq_f32(v25, vmulq_f32(v26, v16));
  v26.f32[0] = vmuls_lane_f32(*(float *)&v7.i32[1], v23, 3);
  v19.i32[1] = *(_DWORD *)(a2 + 36);
  v17.i32[1] = *(_DWORD *)(a2 + 44);
  v26.i32[1] = *(_DWORD *)(a1 + 36);
  v14.i32[1] = *(_DWORD *)a1;
  v14.i64[1] = a4.i64[0];
  float32x4_t v28 = vmulq_f32(v14, (float32x4_t)vzip1q_s32(v19, vdupq_lane_s32(*(int32x2_t *)v19.i8, 1)));
  *(int32x2_t *)a6.i8 = vzip1_s32(vdup_lane_s32(*(int32x2_t *)a6.i8, 1), *(int32x2_t *)v28.f32);
  float32x4_t v29 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)vuzp2q_s32((int32x4_t)v23, (int32x4_t)v23), 8uLL);
  v29.i32[3] = v29.i32[0];
  *a3 = v27;
  a3[1] = vaddq_f32(vaddq_f32(vmulq_f32(v20, (float32x4_t)vzip1q_s32(a6, a6)), vmulq_f32(v24, v21)), vmulq_f32(v29, v22));
  *(int32x2_t *)a4.i8 = vdup_lane_s32(*(int32x2_t *)a4.i8, 1);
  float32x4_t v30 = (float32x4_t)vextq_s8(a4, v8, 0xCuLL);
  v30.f32[3] = *(float *)v7.i32 * v23.f32[0];
  unsigned __int32 v31 = vmulq_f32((float32x4_t)a4, v28).u32[0];
  float32x4_t v32 = vaddq_f32(v30, v28);
  v32.i32[0] = v31;
  v26.i64[1] = v18.i64[0];
  a3[2] = vaddq_f32(v26, vaddq_f32(v32, vmulq_f32(v23, (float32x4_t)vzip1q_s32((int32x4_t)v17, vdupq_lane_s32(*(int32x2_t *)v17.f32, 1)))));
  physx::shdfnd::optimizeBoundingBox(a3->f32, (float *)&v34);
  a3[3].i64[0] = v34;
  float result = v35;
  a3[3].f32[2] = v35;
  return result;
}

float *physx::Gu::computeOBBAroundConvex(float *result, float *a2, float *a3, float *a4)
{
  int v4 = result;
  float v6 = a2[1];
  float v5 = a2[2];
  float v7 = a2[3];
  BOOL v9 = v6 == 1.0 && v5 == 1.0 && v7 == 1.0;
  float v10 = *a4;
  float v11 = a4[1];
  if (v9)
  {
    float v113 = a4[2];
    float v114 = a4[3];
    float v115 = v11 + v11;
    float v116 = v113 + v113;
    float v117 = v11 * (float)(v11 + v11);
    float v118 = v113 * (float)(v113 + v113);
    float v119 = (float)(v10 + v10) * v11;
    float v120 = (float)(v10 + v10) * v113;
    float v121 = (float)(v10 + v10) * v114;
    float v122 = v115 * v113;
    float v123 = v115 * v114;
    float v124 = v116 * v114;
    float v125 = (float)(1.0 - v117) - v118;
    float v126 = v119 + v124;
    float v127 = v120 - v123;
    float v128 = v119 - v124;
    float v129 = 1.0 - (float)(v10 * (float)(v10 + v10));
    float v130 = v129 - v118;
    float v131 = v122 + v121;
    float v132 = v120 + v123;
    float v133 = v122 - v121;
    float v134 = v129 - v117;
    float v135 = a3[8];
    float v136 = a3[9];
    float v137 = v135 * v125;
    float v138 = v128 * v136;
    float v139 = (float)(v135 * v126) + (float)(v130 * v136);
    float v140 = (float)(v135 * v127) + (float)(v131 * v136);
    float v141 = a3[10];
    float v142 = (float)(v137 + v138) + (float)(v132 * v141);
    float v143 = a4[4];
    float v144 = a4[5];
    float v145 = (float)(v140 + (float)(v134 * v141)) + a4[6];
    int v146 = *((_DWORD *)a3 + 13);
    result[2] = v127;
    result[5] = v131;
    result[8] = v134;
    result[11] = v145;
    uint64_t v147 = *(void *)(a3 + 11);
    *float result = v125;
    result[1] = v126;
    result[3] = v128;
    result[4] = v130;
    result[6] = v132;
    result[7] = v133;
    result[9] = v143 + v142;
    result[10] = (float)(v139 + (float)(v133 * v141)) + v144;
    *((void *)result + 6) = v147;
    *((_DWORD *)result + 14) = v146;
  }
  else
  {
    float v12 = v11 + v11;
    float v13 = a4[2];
    float v14 = a4[3];
    float v15 = v11 * (float)(v11 + v11);
    float v16 = v13 * (float)(v13 + v13);
    float v17 = (float)(v10 + v10) * v11;
    float v18 = (float)(v10 + v10) * v13;
    float v19 = (float)(v10 + v10) * v14;
    float v20 = v12 * v13;
    float v21 = v12 * v14;
    float v22 = (float)(v13 + v13) * v14;
    float v23 = (float)(1.0 - v15) - v16;
    float v24 = v17 + v22;
    float v25 = v18 - v21;
    float v26 = v17 - v22;
    float v27 = 1.0 - (float)(v10 * (float)(v10 + v10));
    float v28 = v27 - v16;
    float v29 = v20 + v19;
    float v30 = v18 + v21;
    float v31 = v20 - v19;
    float v32 = v27 - v15;
    float v33 = a2[4];
    float v34 = a2[5];
    float v35 = a2[6];
    float v36 = a2[7];
    float v37 = v34 + v34;
    float v38 = v35 + v35;
    float v39 = v34 * (float)(v34 + v34);
    float v40 = v35 * (float)(v35 + v35);
    float v41 = (float)(v33 + v33) * v34;
    float v42 = (float)(v33 + v33) * v35;
    float v43 = (float)(v33 + v33) * v36;
    float v44 = v37 * v35;
    float v45 = v37 * v36;
    float v46 = v38 * v36;
    float v47 = (float)(1.0 - v39) - v40;
    float v48 = v41 + v46;
    float v49 = v42 - v45;
    float v50 = v41 - v46;
    float v51 = 1.0 - (float)(v33 * (float)(v33 + v33));
    float v52 = v51 - v40;
    float v53 = v44 + v43;
    float v54 = v42 + v45;
    float v55 = v44 - v43;
    float v56 = v51 - v39;
    float v57 = v6 * v47;
    float v58 = v6 * v50;
    float v59 = v6 * v54;
    float v60 = v5 * v48;
    float v61 = v5 * v52;
    float v62 = v5 * v55;
    float v63 = v7 * v49;
    float v64 = v7 * v53;
    float v65 = v7 * v56;
    float v66 = (float)(v47 * v57) + (float)(v48 * v60);
    float v67 = (float)(v47 * v58) + (float)(v48 * v61);
    float v68 = (float)(v47 * v59) + (float)(v48 * v62);
    float v69 = (float)(v49 * v63) + v66;
    float v70 = (float)(v49 * v64) + v67;
    float v71 = (float)(v49 * v65) + v68;
    float v72 = (float)(v50 * v57) + (float)(v52 * v60);
    float v73 = (float)(v50 * v58) + (float)(v52 * v61);
    float v74 = (float)(v50 * v59) + (float)(v52 * v62);
    float v75 = (float)(v53 * v63) + v72;
    float v76 = (float)(v53 * v64) + v73;
    float v77 = (float)(v53 * v65) + v74;
    float v78 = v54 * v57;
    float v79 = v54 * v58;
    float v80 = (float)(v54 * v59) + (float)(v55 * v62);
    float v81 = (float)(v56 * v63) + (float)(v78 + (float)(v55 * v60));
    float v82 = (float)(v56 * v64) + (float)(v79 + (float)(v55 * v61));
    float v83 = (float)(v56 * v65) + v80;
    float v84 = (float)(v30 * v71) + (float)((float)(v23 * v69) + (float)(v26 * v70));
    float v85 = (float)(v31 * v71) + (float)((float)(v24 * v69) + (float)(v28 * v70));
    float v86 = (float)(v32 * v71) + (float)((float)(v25 * v69) + (float)(v29 * v70));
    float v87 = (float)(v30 * v77) + (float)((float)(v23 * v75) + (float)(v26 * v76));
    float v88 = (float)(v31 * v77) + (float)((float)(v24 * v75) + (float)(v28 * v76));
    float v89 = (float)(v32 * v77) + (float)((float)(v25 * v75) + (float)(v29 * v76));
    float v90 = (float)(v23 * v81) + (float)(v26 * v82);
    float v91 = v32 * v83;
    float v92 = (float)(v30 * v83) + v90;
    float v93 = (float)(v31 * v83) + (float)((float)(v24 * v81) + (float)(v28 * v82));
    float v94 = v91 + (float)((float)(v25 * v81) + (float)(v29 * v82));
    float v95 = a3[11];
    float v96 = a3[12];
    float v97 = a3[13];
    float v98 = v95 * 0.0;
    *(float *)&long long v148 = (float)(v98 * v92) + (float)((float)(v95 * v84) + (float)(v98 * v87));
    *((float *)&v148 + 1) = (float)(v98 * v93) + (float)((float)(v95 * v85) + (float)(v98 * v88));
    *((float *)&v148 + 2) = (float)((float)(v95 * 0.0) * v94)
                          + (float)((float)(v95 * v86) + (float)((float)(v95 * 0.0) * v89));
    *((float *)&v148 + 3) = (float)((float)(v96 * 0.0) * v92)
                          + (float)((float)((float)(v96 * 0.0) * v84) + (float)(v96 * v87));
    *(float *)&long long v149 = (float)((float)(v96 * 0.0) * v93)
                    + (float)((float)((float)(v96 * 0.0) * v85) + (float)(v96 * v88));
    *((float *)&v149 + 1) = (float)((float)(v96 * 0.0) * v94)
                          + (float)((float)((float)(v96 * 0.0) * v86) + (float)(v96 * v89));
    float v99 = (float)(v97 * v94) + (float)((float)((float)(v97 * 0.0) * v86) + (float)((float)(v97 * 0.0) * v89));
    *((float *)&v149 + 2) = (float)(v97 * v92)
                          + (float)((float)((float)(v97 * 0.0) * v84) + (float)((float)(v97 * 0.0) * v87));
    *((float *)&v149 + 3) = (float)(v97 * v93)
                          + (float)((float)((float)(v97 * 0.0) * v85) + (float)((float)(v97 * 0.0) * v88));
    float v100 = a3[8];
    float v101 = a3[9];
    float v102 = v100 * v84;
    float v103 = (float)(v100 * v85) + (float)(v101 * v88);
    float v104 = a3[10];
    float v105 = (float)(v100 * v86) + (float)(v101 * v89);
    float v106 = (float)(v104 * v92) + (float)(v102 + (float)(v101 * v87));
    float v107 = a4[4];
    float v108 = a4[5];
    v150[0] = v99;
    v150[1] = v107 + v106;
    float v109 = a4[6] + (float)((float)(v104 * v94) + v105);
    v150[2] = v108 + (float)((float)(v104 * v93) + v103);
    v150[3] = v109;
    float result = physx::shdfnd::optimizeBoundingBox((float *)&v148, (float *)&v151);
    int v110 = v152;
    uint64_t v111 = v151;
    long long v112 = v149;
    *(_OWORD *)int v4 = v148;
    *((_OWORD *)v4 + 1) = v112;
    *((_OWORD *)v4 + 2) = *(_OWORD *)v150;
    *((void *)v4 + 6) = v111;
    *((_DWORD *)v4 + 14) = v110;
  }
  return result;
}

_DWORD *physx::localSearch(_DWORD *result, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 24);
  uint64_t v5 = *(void *)(a4 + 32);
  uint64_t v6 = *result;
  float v7 = *a2;
  float v8 = a2[1];
  float v9 = a2[2];
  float v10 = (float)((float)(v8 * *(float *)(a3 + 12 * v6 + 4))
              + (float)(*a2 * *(float *)(a3 + 12 * v6)))
      + (float)(v9 * *(float *)(a3 + 12 * v6 + 8));
  do
  {
    float v11 = (unsigned __int16 *)(v4 + 4 * v6);
    int v12 = *v11;
    uint64_t v13 = v11[1];
    *float result = v6;
    if (!v12) {
      break;
    }
    float v14 = (unsigned __int8 *)(v5 + v13);
    uint64_t v15 = v6;
    do
    {
      unsigned int v17 = *v14++;
      unsigned int v16 = v17;
      unint64_t v18 = (unint64_t)v17 >> 5;
      int v19 = *((_DWORD *)&v24 + v18);
      int v20 = 1 << v17;
      if (((1 << v17) & v19) == 0)
      {
        *((_DWORD *)&v24 + v18) = v20 | v19;
        float v21 = (float *)(a3 + 12 * v16);
        float v22 = v21[2];
        if ((float)((float)((float)(v8 * v21[1]) + (float)(v7 * *v21)) + (float)(v9 * v22)) <= v10)
        {
          uint64_t v15 = v15;
        }
        else
        {
          float v10 = (float)((float)(v8 * v21[1]) + (float)(v7 * *v21)) + (float)(v9 * v22);
          uint64_t v15 = v16;
        }
      }
      --v12;
    }
    while ((_WORD)v12);
    BOOL v23 = v15 == v6;
    uint64_t v6 = v15;
  }
  while (!v23);
  return result;
}

uint64_t physx::Gu::getPolygonalData_Convex(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)(a2 + 24);
  float v4 = *(float *)(a2 + 28);
  float v5 = *(float *)(a2 + 32);
  float v6 = (float)((float)(v3 * *(float *)(a3 + 8)) + (float)(v4 * *(float *)(a3 + 20))) + (float)(v5 * *(float *)(a3 + 32));
  *(float32x2_t *)float result = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a3, v3), vmul_n_f32(*(float32x2_t *)(a3 + 12), v4)), vmul_n_f32(*(float32x2_t *)(a3 + 24), v5));
  *(float *)(result + 8) = v6;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 38);
  unsigned int v8 = *(unsigned __int8 *)(a2 + 39);
  *(_DWORD *)(result + 12) = v7;
  *(_DWORD *)(result + 16) = v8;
  __int16 v9 = *(_WORD *)(a2 + 36);
  int v10 = v9;
  uint64_t v11 = v9 & 0x7FFF;
  *(_DWORD *)(result + 20) = v11;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = v12 + 20 * v8;
  *(void *)(result + 24) = v12;
  *(void *)(result + 32) = v13;
  uint64_t v14 = v13 + 12 * v7;
  uint64_t v15 = v14 + 2 * v11;
  uint64_t v16 = 3 * v7;
  uint64_t v17 = 4 * v11;
  if (v10 >= 0) {
    uint64_t v17 = 0;
  }
  *(void *)(result + 40) = v15 + v16 + v17;
  *(void *)(result + 48) = v14;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 56);
  *(void *)(result + 80) = *(void *)(a2 + 48);
  unint64_t v18 = HullProjectionCB_BigConvex;
  if (!*(void *)(a2 + 48)) {
    unint64_t v18 = HullProjectionCB_SmallConvex;
  }
  *(void *)(result + 88) = v18;
  *(void *)(result + 96) = SelectClosestEdgeCB_Convex;
  return result;
}

float HullProjectionCB_SmallConvex(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6 = *a2;
  float v7 = a2[1];
  float v8 = a2[2];
  int v9 = *(_DWORD *)(a1 + 12);
  if (v9)
  {
    float v10 = (float)((float)(a3[1] * v7) + (float)(*a3 * v6)) + (float)(a3[2] * v8);
    float v11 = (float)((float)(v7 * a3[4]) + (float)(a3[3] * v6)) + (float)(a3[5] * v8);
    float v12 = (float)((float)(v7 * a3[7]) + (float)(a3[6] * v6)) + (float)(a3[8] * v8);
    float v13 = v12 * a4[7];
    float v14 = v12 * a4[8];
    float v15 = (float)((float)(v10 * *a4) + (float)(v11 * a4[3])) + (float)(v12 * a4[6]);
    float v16 = (float)((float)(v10 * a4[1]) + (float)(v11 * a4[4])) + v13;
    float v17 = (float)((float)(v10 * a4[2]) + (float)(v11 * a4[5])) + v14;
    unint64_t v18 = *(float **)(a1 + 32);
    float v19 = -3.4028e38;
    float v20 = 3.4028e38;
    do
    {
      float v21 = (float)((float)(v16 * v18[1]) + (float)(*v18 * v15)) + (float)(v18[2] * v17);
      if (v20 >= v21) {
        float v20 = (float)((float)(v16 * v18[1]) + (float)(*v18 * v15)) + (float)(v18[2] * v17);
      }
      if (v19 <= v21) {
        float v19 = (float)((float)(v16 * v18[1]) + (float)(*v18 * v15)) + (float)(v18[2] * v17);
      }
      v18 += 3;
      --v9;
    }
    while (v9);
  }
  else
  {
    float v20 = 3.4028e38;
    float v19 = -3.4028e38;
  }
  float v22 = (float)((float)(v7 * a3[10]) + (float)(a3[9] * v6)) + (float)(a3[11] * v8);
  *a5 = v20 + v22;
  float result = v19 + v22;
  *a6 = result;
  return result;
}

float HullProjectionCB_BigConvex(uint64_t a1, float *a2, float *a3, uint64_t a4, float *a5, float *a6)
{
  uint64_t v9 = *(void *)(a1 + 32);
  float v10 = *a2;
  float v11 = a2[1];
  float v12 = a2[2];
  float v13 = (float)((float)(a3[1] * v11) + (float)(*a3 * *a2)) + (float)(a3[2] * v12);
  float v14 = (float)((float)(v11 * a3[4]) + (float)(a3[3] * *a2)) + (float)(a3[5] * v12);
  float v15 = (float)((float)(v11 * a3[7]) + (float)(a3[6] * *a2)) + (float)(a3[8] * v12);
  float v16 = (float)((float)(v13 * *(float *)(a4 + 8)) + (float)(v14 * *(float *)(a4 + 20)))
      + (float)(v15 * *(float *)(a4 + 32));
  float32x2_t v20 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)a4, v13), vmul_n_f32(*(float32x2_t *)(a4 + 12), v14)), vmul_n_f32(*(float32x2_t *)(a4 + 24), v15));
  float32x2_t v37 = v20;
  float32x2_t v43 = v20;
  float v44 = v16;
  float v17 = *(unsigned __int16 **)(a1 + 80);
  int v18 = *v17;
  float v19 = -v20.f32[0];
  float v38 = -v20.f32[0];
  float v39 = -v20.f32[1];
  float v40 = -v16;
  v20.f32[0] = fabsf(v20.f32[0]);
  float v21 = fabsf(v20.f32[1]);
  float v22 = fabsf(v16);
  BOOL v23 = v21 > v20.f32[0];
  BOOL v24 = v22 > v20.f32[0];
  if (v22 > v20.f32[0]) {
    v20.f32[0] = v22;
  }
  int v25 = 2 * v24;
  if (v23 && v21 > v22)
  {
    unsigned int v26 = 1;
  }
  else
  {
    float v21 = v20.f32[0];
    unsigned int v26 = v25;
  }
  float v27 = 1.0 / v21;
  float v28 = (float)(v18 - 1) * 0.5;
  float v29 = v28 * (float)((float)(v27 * *(&v38 + (((_BYTE)v26 + (v26 >> 1) + 1) & 3))) + 1.0);
  float v30 = v28
      * (float)((float)(v27
                      * *(&v38
                        + (((_BYTE)v26
                          + (v26 >> 1)
                          + 1
                          + (((v26 + (v26 >> 1) + 1) & 3) >> 1)
                          + 1) & 3)))
              + 1.0);
  unsigned int v31 = v30;
  if ((float)(v30 - (float)v30) > 0.5) {
    ++v31;
  }
  int v32 = v29 + (__PAIR64__(v26, *((_DWORD *)&v38 + v26)) >> 31) * v18;
  if ((float)(v29 - (float)v29) > 0.5) {
    ++v32;
  }
  float v33 = (unsigned __int8 *)(*((void *)v17 + 1) + v31 + v32 * v18);
  unsigned int v34 = *v33;
  unsigned int v41 = v33[v17[1]];
  unsigned int v42 = v34;
  float v38 = v19;
  float v39 = -v20.f32[1];
  float v40 = -v16;
  physx::localSearch(&v42, &v38, v9, (uint64_t)v17);
  physx::localSearch(&v41, (float *)&v43, v9, (uint64_t)v17);
  float v35 = (float)((float)(v11 * a3[10]) + (float)(a3[9] * v10)) + (float)(a3[11] * v12);
  *a5 = v35
      + (float)(vmlas_n_f32(vmuls_lane_f32(*(float *)(v9 + 12 * v42 + 4), v37, 1), *(float *)(v9 + 12 * v42), v37.f32[0])+ (float)(*(float *)(v9 + 12 * v42 + 8) * v16));
  float result = v35
         + (float)(vmlas_n_f32(vmuls_lane_f32(*(float *)(v9 + 12 * v41 + 4), v37, 1), *(float *)(v9 + 12 * v41), v37.f32[0])+ (float)(*(float *)(v9 + 12 * v41 + 8) * v16));
  *a6 = result;
  return result;
}

uint64_t SelectClosestEdgeCB_Convex(uint64_t a1, float *a2, float *a3)
{
  float v4 = a3[1];
  float v5 = a3[2];
  float v6 = v5 * a2[8];
  float v7 = (float)((float)(*a3 * *a2) + (float)(v4 * a2[3])) + (float)(v5 * a2[6]);
  float v8 = (float)((float)(*a3 * a2[1]) + (float)(v4 * a2[4])) + (float)(v5 * a2[7]);
  float v9 = (float)((float)(*a3 * a2[2]) + (float)(v4 * a2[5])) + v6;
  float v10 = *(float **)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(a1 + 16);
  float v12 = (float)((float)(v8 * v10[1]) + (float)(*v10 * v7)) + (float)(v10[2] * v9);
  if (v11 < 2)
  {
    uint64_t result = 0;
  }
  else
  {
    LODWORD(result) = 0;
    float v14 = v10 + 7;
    for (uint64_t i = 1; i != v11; ++i)
    {
      float v16 = (float)(v8 * *(v14 - 1)) + (float)(*(v14 - 2) * v7);
      float v17 = *v14;
      v14 += 5;
      float v18 = v16 + (float)(v17 * v9);
      if (v18 <= v12)
      {
        uint64_t result = result;
      }
      else
      {
        float v12 = v18;
        uint64_t result = i;
      }
    }
  }
  uint64_t v19 = *(unsigned int *)(a1 + 20);
  if (v19)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(a1 + 48);
    float v22 = v12 * v12;
    int v23 = -1;
    unsigned int v24 = 1;
    do
    {
      int v25 = &v10[5 * *(unsigned __int8 *)(v21 + v24 - 1)];
      unsigned int v26 = &v10[5 * *(unsigned __int8 *)(v21 + v24)];
      float v27 = *v25 + *v26;
      float v28 = v25[1] + v26[1];
      float v29 = v25[2] + v26[2];
      float v30 = (float)((float)(v28 * v28) + (float)(v27 * v27)) + (float)(v29 * v29);
      float v31 = (float)((float)(v8 * v28) + (float)(v27 * v7)) + (float)(v29 * v9);
      BOOL v32 = v31 < 0.0;
      float v33 = v31 * v31;
      if (!v32 && v33 > (float)(v22 * v30))
      {
        int v23 = v20;
        float v22 = v33 / v30;
      }
      ++v20;
      v24 += 2;
    }
    while (v19 != v20);
    if (v23 != -1)
    {
      float v35 = (unsigned __int8 *)(v21 + (2 * v23));
      unsigned int v36 = *v35;
      unsigned int v37 = v35[1];
      if ((float)((float)((float)(v8 * v10[5 * v36 + 1]) + (float)(v10[5 * v36] * v7)) + (float)(v10[5 * v36 + 2] * v9)) <= (float)((float)((float)(v8 * v10[5 * v37 + 1]) + (float)(v10[5 * v37] * v7)) + (float)(v10[5 * v37 + 2] * v9))) {
        return v37;
      }
      else {
        return v36;
      }
    }
  }
  return result;
}

float physx::Gu::PolygonalBox::PolygonalBox(uint64_t a1, uint64_t a2, double a3, int32x4_t a4)
{
  uint64_t v4 = 0;
  *(void *)a1 = a2;
  float v5 = *(float *)a2;
  *(float *)a4.i32 = -*(float *)a2;
  *(_DWORD *)(a1 + 8) = a4.i32[0];
  *(float *)(a1 + 20) = v5;
  *(float *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = a4.i32[0];
  *(_DWORD *)(a1 + 56) = a4.i32[0];
  *(float *)(a1 + 68) = v5;
  *(_DWORD *)(a1 + 92) = a4.i32[0];
  a4.i64[0] = *(void *)(a2 + 4);
  *(float *)(a1 + 12) = -*(float *)a4.i32;
  *(float *)(a1 + 16) = -*(float *)&a4.i32[1];
  *(float *)(a1 + 24) = -*(float *)a4.i32;
  *(float *)(a1 + 28) = -*(float *)&a4.i32[1];
  *(_DWORD *)(a1 + 36) = a4.i32[0];
  *(float *)(a1 + 40) = -*(float *)&a4.i32[1];
  *(_DWORD *)(a1 + 48) = a4.i32[0];
  *(float *)(a1 + 52) = -*(float *)&a4.i32[1];
  *(float *)(a1 + 60) = -*(float *)a4.i32;
  *(_DWORD *)(a1 + 64) = a4.i32[1];
  *(float *)(a1 + 72) = -*(float *)a4.i32;
  int32x4_t v6 = vuzp2q_s32(a4, vzip1q_s32(a4, a4));
  int32x4_t v7 = v6;
  *(float *)&v7.i32[1] = v5;
  v7.i32[3] = v6.i32[0];
  *(int32x4_t *)(a1 + 76) = v7;
  *(void *)(a1 + 96) = a4.i64[0];
  float v8 = (unsigned char *)(a1 + 122);
  do
  {
    *float v8 = 4;
    *((_WORD *)v8 - 1) = 4 * v4++;
    v8 += 20;
  }
  while (v4 != 6);
  *(void *)(a1 + 124) = 1065353216;
  *(_DWORD *)(a1 + 132) = 0;
  *(float *)(a1 + 136) = -*(float *)a2;
  *(void *)(a1 + 164) = 3212836864;
  *(_DWORD *)(a1 + 172) = 0;
  *(float *)(a1 + 176) = -*(float *)a2;
  *(unsigned char *)(a1 + 143) = 0;
  *(unsigned char *)(a1 + 183) = 1;
  *(void *)(a1 + 184) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 192) = 0;
  *(float *)(a1 + 196) = -*(float *)(a2 + 4);
  *(void *)(a1 + 204) = 0xBF80000000000000;
  *(_DWORD *)(a1 + 212) = 0;
  *(float *)(a1 + 216) = -*(float *)(a2 + 4);
  *(unsigned char *)(a1 + 203) = 0;
  *(unsigned char *)(a1 + 223) = 2;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(float *)(a1 + 156) = -*(float *)(a2 + 8);
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = -1082130432;
  float result = -*(float *)(a2 + 8);
  *(float *)(a1 + 116) = result;
  *(unsigned char *)(a1 + 163) = 0;
  *(unsigned char *)(a1 + 123) = 4;
  return result;
}

void *physx::Gu::PolygonalBox::getPolygonalData(uint64_t *a1, uint64_t a2)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 12) = 0x600000008;
  int v2 = a1 + 13;
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v4 = *a1;
  float result = a1 + 1;
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = result;
  *(void *)(a2 + 40) = &gPxcBoxPolygonData;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 80) = v4;
  *(void *)(a2 + 88) = HullProjectionCB_Box;
  *(void *)(a2 + 96) = SelectClosestEdgeCB_Box;
  return result;
}

float HullProjectionCB_Box(uint64_t a1, float *a2, float *a3, uint64_t a4, float *a5, float *a6)
{
  float v6 = a2[1];
  float v7 = a2[2];
  float v8 = (float)((float)(a3[1] * v6) + (float)(*a3 * *a2)) + (float)(a3[2] * v7);
  float v9 = (float)((float)(v6 * a3[4]) + (float)(a3[3] * *a2)) + (float)(a3[5] * v7);
  float v10 = (float)((float)(v6 * a3[7]) + (float)(a3[6] * *a2)) + (float)(a3[8] * v7);
  uint64_t v11 = *(float **)(a1 + 80);
  float v12 = *v11;
  float v13 = v11[1];
  if (v8 < 0.0) {
    float v12 = -*v11;
  }
  if (v9 < 0.0) {
    float v13 = -v13;
  }
  float v14 = v11[2];
  if (v10 < 0.0) {
    float v14 = -v14;
  }
  float v15 = (float)((float)(v6 * a3[10]) + (float)(a3[9] * *a2)) + (float)(a3[11] * v7);
  float v16 = (float)((float)(v9 * v13) + (float)(v12 * v8)) + (float)(v14 * v10);
  *a6 = v16 + v15;
  float result = v15 - v16;
  *a5 = result;
  return result;
}

uint64_t SelectClosestEdgeCB_Box(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3 = result;
  LODWORD(result) = 0;
  uint64_t v4 = *(float **)(v3 + 24);
  float v5 = *a3;
  float v6 = a3[1];
  float v7 = a3[2];
  float v8 = (float)((float)(v4[1] * v6) + (float)(*v4 * *a3)) + (float)(v4[2] * v7);
  float v9 = v4 + 7;
  uint64_t v10 = -5;
  do
  {
    float v11 = (float)(v6 * *(v9 - 1)) + (float)(*(v9 - 2) * v5);
    float v12 = *v9;
    v9 += 5;
    float v13 = v11 + (float)(v12 * v7);
    if (v13 <= v8)
    {
      float result = result;
    }
    else
    {
      float v8 = v13;
      float result = (v10 + 6);
    }
  }
  while (!__CFADD__(v10++, 1));
  uint64_t v15 = 0;
  unsigned int v16 = -1;
  float v17 = (float *)&dword_234422940;
  do
  {
    float v18 = (float)(v6 * *(v17 - 1)) + (float)(*(v17 - 2) * v5);
    float v19 = *v17;
    v17 += 3;
    float v20 = v18 + (float)(v19 * v7);
    if (v20 > v8)
    {
      float v8 = v20;
      unsigned int v16 = v15;
    }
    ++v15;
  }
  while (v15 != 12);
  if (v16 != -1)
  {
    uint64_t v21 = gPxcBoxEdgeDesc[2 * v16 + 1];
    unsigned int v22 = gPxcBoxFaceByEdge[v21];
    unsigned int v23 = gPxcBoxFaceByEdge[(v21 + 1)];
    if ((float)((float)((float)(v6 * v4[5 * v22 + 1]) + (float)(v4[5 * v22] * v5)) + (float)(v4[5 * v22 + 2] * v7)) <= (float)((float)((float)(v6 * v4[5 * v23 + 1]) + (float)(v4[5 * v23] * v5)) + (float)(v4[5 * v23 + 2] * v7))) {
      return v23;
    }
    else {
      return v22;
    }
  }
  return result;
}

float *physx::Gu::distancePointBoxSquared(float *result, float *a2, uint64_t a3, float *a4, uint64_t a5)
{
  uint64_t v5 = 0;
  float v11 = (float)((float)((float)(result[1] - a2[1]) * a4[7]) + (float)(a4[6] * (float)(*result - *a2)))
      + (float)(a4[8] * (float)(result[2] - a2[2]));
  float v6 = 0.0;
  do
  {
    float v7 = *(float *)((char *)&v10 + v5);
    float v8 = *(float *)(a3 + v5);
    float v9 = -v8;
    if (v7 >= (float)-v8)
    {
      if (v7 <= v8) {
        goto LABEL_7;
      }
      float v6 = v6 + (float)((float)(v7 - v8) * (float)(v7 - v8));
      float v9 = *(float *)(a3 + v5);
    }
    else
    {
      float v6 = v6 + (float)((float)(v7 + v8) * (float)(v7 + v8));
    }
    *(float *)((char *)&v10 + v5) = v9;
LABEL_7:
    v5 += 4;
  }
  while (v5 != 12);
  if (a5)
  {
    *(void *)a5 = v10;
    *(float *)(a5 + 8) = v11;
  }
  return result;
}

float *physx::Gu::closestPtPointTriangle@<X0>(float *result@<X0>, float *a2@<X1>, float32x2_t *a3@<X2>, float32x2_t *a4@<X3>, float *a5@<X4>, float *a6@<X5>, uint64_t a7@<X8>)
{
  float v7 = a3->f32[1];
  float v8 = a2[1];
  float v9 = a3->f32[0] - *a2;
  float v10 = v7 - v8;
  float v11 = a3[1].f32[0];
  float v12 = a2[2];
  float v13 = v11 - v12;
  float v14 = a4->f32[1];
  float v15 = a4->f32[0] - *a2;
  float v16 = v14 - v8;
  float v17 = a4[1].f32[0];
  float v18 = v17 - v12;
  float v19 = *result;
  float v20 = result[1];
  float v21 = *result - *a2;
  float v22 = v20 - v8;
  float v23 = result[2];
  float v24 = v23 - v12;
  float v25 = (float)((float)((float)(v7 - v8) * (float)(v20 - v8)) + (float)(v9 * v21)) + (float)(v13 * v24);
  float v26 = (float)((float)(v16 * v22) + (float)(v15 * v21)) + (float)(v18 * v24);
  if (v25 <= 0.0 && v26 <= 0.0)
  {
    *a5 = 0.0;
    *a6 = 0.0;
    *(void *)a7 = *(void *)a2;
    float v27 = a2[2];
LABEL_22:
    *(float *)(a7 + 8) = v27;
    return result;
  }
  float v28 = v19 - a3->f32[0];
  float v29 = v20 - v7;
  float v30 = v23 - v11;
  float v31 = (float)((float)(v10 * (float)(v20 - v7)) + (float)(v9 * v28)) + (float)(v13 * v30);
  float v32 = (float)((float)(v16 * v29) + (float)(v15 * v28)) + (float)(v18 * v30);
  if (v31 >= 0.0 && v32 <= v31)
  {
    *a5 = 1.0;
    *a6 = 0.0;
    *(float32x2_t *)a7 = *a3;
    float v27 = a3[1].f32[0];
    goto LABEL_22;
  }
  float v34 = (float)(v25 * v32) - (float)(v31 * v26);
  if (v31 <= 0.0 && v25 >= 0.0 && v34 <= 0.0)
  {
    float v35 = v25 / (float)(v25 - v31);
    *a5 = v35;
    *a6 = 0.0;
    float v36 = v9 * v35;
    float v37 = (float)(v10 * v35) + a2[1];
    float v27 = (float)(v13 * v35) + a2[2];
    *(float *)a7 = v36 + *a2;
    *(float *)(a7 + 4) = v37;
    goto LABEL_22;
  }
  float v38 = v19 - a4->f32[0];
  float v39 = v20 - v14;
  float v40 = v23 - v17;
  float v41 = (float)((float)(v10 * v39) + (float)(v9 * v38)) + (float)(v13 * v40);
  float v42 = (float)((float)(v16 * v39) + (float)(v15 * v38)) + (float)(v18 * v40);
  if (v42 >= 0.0 && v41 <= v42)
  {
    *a5 = 0.0;
    *a6 = 1.0;
    *(float32x2_t *)a7 = *a4;
    float v27 = a4[1].f32[0];
    goto LABEL_22;
  }
  float v44 = (float)(v41 * v26) - (float)(v25 * v42);
  if (v42 > 0.0 || v44 > 0.0 || v26 < 0.0)
  {
    float v49 = (float)(v31 * v42) - (float)(v41 * v32);
    if (v49 <= 0.0)
    {
      float v50 = v32 - v31;
      if (v50 >= 0.0)
      {
        float v51 = v41 - v42;
        if (v51 >= 0.0)
        {
          float v55 = v50 / (float)(v50 + v51);
          *a5 = 1.0 - v55;
          *a6 = v55;
          float v48 = a3[1].f32[0] + (float)(v55 * (float)(a4[1].f32[0] - a3[1].f32[0]));
          *(float32x2_t *)a7 = vadd_f32(*a3, vmul_n_f32(vsub_f32(*a4, *a3), v55));
          goto LABEL_28;
        }
      }
    }
    float v52 = 1.0 / (float)(v34 + (float)(v49 + v44));
    float v53 = v44 * v52;
    float v54 = v34 * v52;
    *a5 = v53;
    *a6 = v54;
    float v46 = (float)(v15 * v54) + (float)((float)(v9 * v53) + *a2);
    float v47 = (float)(v16 * v54) + (float)((float)(v10 * v53) + a2[1]);
    float v48 = (float)(v18 * v54) + (float)((float)(v13 * v53) + a2[2]);
  }
  else
  {
    float v45 = v26 / (float)(v26 - v42);
    *a5 = 0.0;
    *a6 = v45;
    float v46 = (float)(v15 * v45) + *a2;
    float v47 = (float)(v16 * v45) + a2[1];
    float v48 = (float)(v18 * v45) + a2[2];
  }
  *(float *)a7 = v46;
  *(float *)(a7 + 4) = v47;
LABEL_28:
  *(float *)(a7 + 8) = v48;
  return result;
}

float32x2_t physx::Gu::distancePointTriangleSquared(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, float32x2_t *a6, float32x4_t *a7)
{
  float32x4_t v7 = *a3;
  float32x4_t v8 = *a2;
  float32x4_t v9 = vsubq_f32(*a3, *a2);
  float32x4_t v10 = *a4;
  float32x4_t v11 = vsubq_f32(*a4, *a2);
  float32x4_t v12 = *a1;
  float32x4_t v13 = vsubq_f32(*a1, *a2);
  float32x4_t v14 = vmulq_f32(v9, v13);
  v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
  float32x2_t v15 = vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32);
  float32x4_t v16 = vmulq_f32(v11, v13);
  v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
  float32x2_t v17 = vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcltz_f32(v17), (int8x8_t)vcltz_f32(v15)), 0), *(int8x8_t *)a2->f32).u32[0] == -1)
  {
    *a5 = 0;
    *a6 = 0;
    float32x4_t v40 = *a1;
    float32x4_t v41 = *a2;
  }
  else
  {
    float32x4_t v18 = vsubq_f32(v12, v7);
    float32x4_t v19 = vmulq_f32(v9, v18);
    v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
    float32x2_t v20 = vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32);
    float32x4_t v21 = vmulq_f32(v11, v18);
    v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
    float32x2_t v22 = vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v20, v22), (int8x8_t)vcgez_f32(v20)), 0), *(int8x8_t *)v8.f32).u32[0] == -1)
    {
      __asm { FMOV            V0.2S, #1.0 }
      *a5 = _D0;
      *a6 = 0;
      float32x4_t v40 = *a1;
      float32x4_t v41 = *a3;
    }
    else
    {
      float32x4_t v23 = vsubq_f32(v12, v10);
      float32x4_t v24 = vmulq_f32(v9, v23);
      v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
      float32x2_t v25 = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
      float32x4_t v26 = vmulq_f32(v11, v23);
      v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
      float32x2_t v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgez_f32(v27), (int8x8_t)vcge_f32(v27, v25)), 0), *(int8x8_t *)v8.f32).u32[0] != -1)
      {
        float32x2_t v28 = vsub_f32(vmul_f32(v15, v22), vmul_f32(v17, v20));
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v20), (int8x8_t)vcgez_f32(v15)), (int8x8_t)vcltz_f32(v28)), 0), *(int8x8_t *)v8.f32).u32[0] == -1)
        {
          float32x2_t v51 = vsub_f32(v15, v20);
          float32x2_t v52 = vrecpe_f32(v51);
          int v53 = 4;
          do
          {
            float32x2_t v52 = vmul_f32(v52, vrecps_f32(v51, v52));
            --v53;
          }
          while (v53);
          float32x2_t v54 = vmul_f32(v15, v52);
          float32x4_t v55 = vmulq_n_f32(v9, v54.f32[0]);
          v55.i32[3] = 0;
          float32x4_t v56 = vaddq_f32(v8, v55);
          *a5 = v54;
          *a6 = 0;
        }
        else
        {
          float32x2_t v29 = vsub_f32(vmul_f32(v20, v27), vmul_f32(v22, v25));
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v25, v27), (int8x8_t)vcge_f32(v22, v20)), (int8x8_t)vcltz_f32(v29)), 0), *(int8x8_t *)v8.f32).u32[0] == -1)
          {
            float32x4_t v57 = vsubq_f32(v10, v7);
            float32x2_t v58 = vsub_f32(v22, v20);
            float32x2_t v59 = vadd_f32(v58, vsub_f32(v25, v27));
            float32x2_t v60 = vrecpe_f32(v59);
            int v61 = 4;
            do
            {
              float32x2_t v60 = vmul_f32(v60, vrecps_f32(v59, v60));
              --v61;
            }
            while (v61);
            float32x2_t v62 = vmul_f32(v58, v60);
            float32x4_t v63 = vmulq_n_f32(v57, v62.f32[0]);
            v63.i32[3] = 0;
            float32x4_t v56 = vaddq_f32(v7, v63);
            __asm { FMOV            V2.2S, #1.0 }
            *a5 = vsub_f32(_D2, v62);
            *a6 = v62;
          }
          else
          {
            float32x2_t v30 = vsub_f32(vmul_f32(v17, v25), vmul_f32(v15, v27));
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v27), (int8x8_t)vcgez_f32(v17)), (int8x8_t)vcltz_f32(v30)), 0), *(int8x8_t *)v8.f32).u32[0] != -1)
            {
              float32x2_t v31 = vadd_f32(v29, vadd_f32(v28, v30));
              float32x2_t v32 = vrecpe_f32(v31);
              int v33 = 4;
              do
              {
                float32x2_t v32 = vmul_f32(v32, vrecps_f32(v31, v32));
                --v33;
              }
              while (v33);
              float32x2_t v34 = vmul_f32(v30, v32);
              float32x2_t v35 = vmul_f32(v28, v32);
              float32x4_t v36 = vmulq_n_f32(v9, v34.f32[0]);
              v36.i32[3] = 0;
              float32x4_t v37 = vmulq_n_f32(v11, v35.f32[0]);
              v37.i32[3] = 0;
              float32x4_t v38 = vaddq_f32(v8, vaddq_f32(v36, v37));
              *a5 = v34;
              *a6 = v35;
              *a7 = v38;
              float32x4_t v39 = vsubq_f32(*a1, v38);
              goto LABEL_14;
            }
            float32x2_t v65 = vsub_f32(v17, v27);
            float32x2_t v66 = vrecpe_f32(v65);
            int v67 = 4;
            do
            {
              float32x2_t v66 = vmul_f32(v66, vrecps_f32(v65, v66));
              --v67;
            }
            while (v67);
            float32x2_t v68 = vmul_f32(v17, v66);
            float32x4_t v69 = vmulq_n_f32(v11, v68.f32[0]);
            v69.i32[3] = 0;
            float32x4_t v56 = vaddq_f32(v8, v69);
            *a5 = 0;
            *a6 = v68;
          }
        }
        float32x4_t v70 = vsubq_f32(*a1, v56);
        *a7 = v56;
        float32x4_t v48 = vmulq_f32(v70, v70);
        goto LABEL_15;
      }
      *a5 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *a6 = _D0;
      float32x4_t v40 = *a1;
      float32x4_t v41 = *a4;
    }
  }
  float32x4_t v39 = vsubq_f32(v40, v41);
  *a7 = v41;
LABEL_14:
  float32x4_t v48 = vmulq_f32(v39, v39);
LABEL_15:
  float32x2_t v49 = (float32x2_t)vpaddq_f32(v48, v48).u64[0];
  return vpadd_f32(v49, v49);
}

float *physx::Gu::distanceSegmentBoxSquared(float *result, float *a2, float *a3, float32x2_t *a4, float *a5, _DWORD *a6, float32x2_t *a7)
{
  float32x4_t v13 = result;
  uint64_t v14 = 0;
  float v15 = result[1];
  float v16 = *a2 - *result;
  float v17 = a2[1] - v15;
  float v18 = result[2];
  float v19 = a2[2] - v18;
  float v20 = *result - *a3;
  float v21 = v15 - a3[1];
  float v22 = v18 - a3[2];
  float v23 = *a5;
  float v24 = a5[1];
  float v25 = a5[2];
  float v26 = a5[3];
  *(float *)&unsigned int v27 = (float)((float)(v21 * v24) + (float)(v20 * *a5)) + (float)(v22 * v25);
  float v28 = a5[4];
  float v29 = a5[5];
  *(float *)&unsigned int v30 = (float)((float)(v21 * v28) + (float)(v20 * v26)) + (float)(v22 * v29);
  float v31 = a5[6];
  float v32 = a5[7];
  float v33 = (float)(v21 * v32) + (float)(v20 * v31);
  float v34 = a5[8];
  float32x2_t v61 = (float32x2_t)__PAIR64__(v30, v27);
  float v62 = v33 + (float)(v22 * v34);
  float v58 = (float)((float)(v17 * v24) + (float)(v16 * v23)) + (float)(v19 * v25);
  float v59 = (float)((float)(v17 * v28) + (float)(v16 * v26)) + (float)(v19 * v29);
  float v60 = (float)((float)(v17 * v32) + (float)(v16 * v31)) + (float)(v19 * v34);
  do
  {
    float v35 = *(&v58 + v14);
    if (v35 >= 0.0)
    {
      char v36 = 0;
    }
    else
    {
      v61.f32[v14] = -v61.f32[v14];
      *(&v58 + v14) = -v35;
      char v36 = 1;
    }
    *((unsigned char *)&v57[2] + ++v14) = v36;
  }
  while (v14 != 3);
  *(void *)float32x4_t v57 = 0;
  if (v58 <= 0.0)
  {
    if (v59 > 0.0)
    {
      uint64_t v39 = 1;
      if (v60 > 0.0)
      {
        unsigned int v40 = 0;
        uint64_t v41 = (uint64_t)a4;
        unsigned int v42 = 2;
LABEL_20:
        float result = (float *)case0(v39, v42, v40, (uint64_t)&v61, (uint64_t)&v58, v41, (float *)v57, (float *)&v57[1]);
        goto LABEL_44;
      }
      unsigned int v43 = 0;
      goto LABEL_23;
    }
    if (v60 > 0.0)
    {
      uint64_t v39 = 2;
      unsigned int v43 = 0;
      uint64_t v44 = (uint64_t)a4;
      unsigned int v45 = 1;
LABEL_24:
      float result = (float *)case00(v39, v43, v45, (uint64_t)&v61, (uint64_t)&v58, v44, (float *)v57, (float *)&v57[1]);
      goto LABEL_44;
    }
    float v46 = a4->f32[0];
    float v47 = -a4->f32[0];
    if (v61.f32[0] >= v47)
    {
      float v48 = 0.0;
      if (v61.f32[0] <= v46) {
        goto LABEL_32;
      }
      float v48 = (float)((float)(v61.f32[0] - v46) * (float)(v61.f32[0] - v46)) + 0.0;
      float v47 = a4->f32[0];
    }
    else
    {
      float v48 = (float)((float)(v61.f32[0] + v46) * (float)(v61.f32[0] + v46)) + 0.0;
    }
    *(float *)&v57[1] = v48;
    v61.f32[0] = v47;
LABEL_32:
    float v49 = a4->f32[1];
    float v50 = -v49;
    if (v61.f32[1] >= (float)-v49)
    {
      if (v61.f32[1] <= v49) {
        goto LABEL_37;
      }
      float v48 = v48 + (float)((float)(v61.f32[1] - v49) * (float)(v61.f32[1] - v49));
      float v50 = a4->f32[1];
    }
    else
    {
      float v48 = v48 + (float)((float)(v61.f32[1] + v49) * (float)(v61.f32[1] + v49));
    }
    *(float *)&v57[1] = v48;
    v61.f32[1] = v50;
LABEL_37:
    float v51 = a4[1].f32[0];
    float v52 = -v51;
    if (v62 >= (float)-v51)
    {
      if (v62 <= v51)
      {
LABEL_42:
        v57[0] = 0;
        goto LABEL_44;
      }
      float v53 = v48 + (float)((float)(v62 - v51) * (float)(v62 - v51));
      float v52 = a4[1].f32[0];
    }
    else
    {
      float v53 = v48 + (float)((float)(v62 + v51) * (float)(v62 + v51));
    }
    *(float *)&v57[1] = v53;
    float v62 = v52;
    goto LABEL_42;
  }
  if (v59 <= 0.0)
  {
    uint64_t v39 = 0;
    if (v60 > 0.0)
    {
      unsigned int v42 = 2;
      uint64_t v41 = (uint64_t)a4;
      unsigned int v40 = 1;
      goto LABEL_20;
    }
    unsigned int v43 = 1;
LABEL_23:
    uint64_t v44 = (uint64_t)a4;
    unsigned int v45 = 2;
    goto LABEL_24;
  }
  if (v60 <= 0.0)
  {
    uint64_t v39 = 0;
    unsigned int v42 = 1;
    uint64_t v41 = (uint64_t)a4;
    unsigned int v40 = 2;
    goto LABEL_20;
  }
  float v37 = v62 - a4[1].f32[0];
  float32x2_t v38 = vsub_f32(v61, *a4);
  float32x2_t v63 = v38;
  float v64 = v37;
  if ((float)(v59 * v38.f32[0]) >= vmuls_lane_f32(v58, v38, 1))
  {
    if ((float)(v60 * v38.f32[0]) >= (float)(v58 * v37))
    {
      float result = (float *)face(0, 1u, 2u, (uint64_t)&v61, (uint64_t)&v58, (uint64_t)a4, (uint64_t)&v63, (float *)v57, (float *)&v57[1]);
      goto LABEL_44;
    }
    goto LABEL_28;
  }
  if ((float)(v60 * v38.f32[1]) < (float)(v59 * v37))
  {
LABEL_28:
    float result = (float *)face(2, 0, 1u, (uint64_t)&v61, (uint64_t)&v58, (uint64_t)a4, (uint64_t)&v63, (float *)v57, (float *)&v57[1]);
    goto LABEL_44;
  }
  float result = (float *)face(1, 2u, 0, (uint64_t)&v61, (uint64_t)&v58, (uint64_t)a4, (uint64_t)&v63, (float *)v57, (float *)&v57[1]);
LABEL_44:
  for (uint64_t i = 0; i != 3; ++i)
  {
    if (*((unsigned char *)&v57[2] + i + 1)) {
      v61.f32[i] = -v61.f32[i];
    }
  }
  if (*(float *)v57 < 0.0)
  {
    if (a6) {
      *a6 = 0;
    }
    float32x4_t v55 = v13;
    return physx::Gu::distancePointBoxSquared(v55, a3, (uint64_t)a4, a5, (uint64_t)a7);
  }
  if (*(float *)v57 > 1.0)
  {
    if (a6) {
      *a6 = 1065353216;
    }
    float32x4_t v55 = a2;
    return physx::Gu::distancePointBoxSquared(v55, a3, (uint64_t)a4, a5, (uint64_t)a7);
  }
  if (a6) {
    *a6 = v57[0];
  }
  if (a7)
  {
    float v56 = v62;
    *a7 = v61;
    a7[1].f32[0] = v56;
  }
  return result;
}

float physx::Gu::distanceSegmentSegmentSquared(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6 = *a2;
  float v7 = a2[1];
  float v8 = a2[2];
  float v9 = v7 * 0.5;
  float v10 = v8 * 0.5;
  float v11 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8));
  float v12 = 0.0;
  if (v11 == 0.0)
  {
    float v14 = v11;
    float v13 = 0.0;
  }
  else
  {
    float v13 = 1.0 / v11;
    float v6 = v6 * (float)(1.0 / v11);
    float v7 = v7 * (float)(1.0 / v11);
    float v8 = v8 * (float)(1.0 / v11);
    float v14 = v11 * 0.5;
  }
  float v15 = v9 + a1[1];
  float v16 = v10 + a1[2];
  float v17 = *a4;
  float v18 = a4[1];
  float v19 = a4[2];
  float v20 = (float)(v18 * 0.5) + a3[1];
  float v21 = (float)(v19 * 0.5) + a3[2];
  float v22 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19));
  if (v22 == 0.0)
  {
    float v23 = v22;
  }
  else
  {
    float v12 = 1.0 / v22;
    float v17 = v17 * (float)(1.0 / v22);
    float v18 = v18 * (float)(1.0 / v22);
    float v19 = v19 * (float)(1.0 / v22);
    float v23 = v22 * 0.5;
  }
  float v24 = (float)((float)(*a2 * 0.5) + *a1) - (float)((float)(*a4 * 0.5) + *a3);
  float v25 = v15 - v20;
  float v26 = v16 - v21;
  float v27 = (float)(v7 * v18) + (float)(v6 * v17);
  float v28 = v27 + (float)(v8 * v19);
  float v29 = (float)((float)(v7 * v25) + (float)(v24 * v6)) + (float)(v26 * v8);
  float v30 = (float)(v25 * v18) + (float)(v24 * v17);
  float v31 = v30 + (float)(v26 * v19);
  float v32 = (float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v26 * v26);
  float v33 = fabsf(1.0 - (float)(v28 * v28));
  if (v33 < 0.000001)
  {
    float v34 = v14 + v23;
    float v35 = -1.0;
    if (v28 >= 0.0) {
      float v35 = 1.0;
    }
    float v36 = (float)(v29 + (float)(v35 * v31)) * 0.5;
    if (v36 <= v34)
    {
      float v37 = -v36;
      if (v34 < (float)-v36) {
        float v37 = v14 + v23;
      }
    }
    else
    {
      float v37 = -v34;
    }
    float v43 = (float)(v23 * (float)(v37 * (float)-v35)) / v34;
    float v44 = v37 + (float)(v35 * v43);
    float v45 = v32 + (float)(v37 * (float)(v37 + (float)(v36 * 2.0)));
    goto LABEL_19;
  }
  float v38 = -(float)(v27 + (float)(v8 * v19));
  float v39 = -(float)(v30 + (float)(v26 * v19));
  float v40 = -(float)(v29 - (float)(v28 * v31));
  float v41 = v31 + (float)(v38 * v29);
  float v42 = v23 * v33;
  if (v40 < (float)-(float)(v14 * v33))
  {
    if (v41 < (float)-v42)
    {
      float v43 = -v23;
      float v44 = -(float)(v29 + (float)(v28 * v23));
      if (v14 < v44)
      {
        float v45 = v32
            + (float)((float)((float)((float)(v39 * 2.0) - v23) * (float)-v23)
                    + (float)(v14 * (float)(v14 + (float)(v44 * -2.0))));
LABEL_136:
        float v44 = v14;
        goto LABEL_19;
      }
      float v60 = v29 + (float)(v28 * v23);
      float v61 = v39 + (float)(v28 * v14);
      float v62 = -v61;
      float v63 = (float)((float)(v29 * 2.0) - v14) * (float)-v14;
      float v64 = v32 + (float)(v63 + (float)(v23 * (float)(v23 + (float)((float)-v61 * -2.0))));
      if (v23 >= (float)-v61) {
        float v65 = -v61;
      }
      else {
        float v65 = v23;
      }
      if (v23 >= v62) {
        float v64 = v32 + (float)(v63 + (float)(v61 * v62));
      }
      float v66 = v32 + (float)(v63 + (float)((float)-v23 * (float)((float)(v62 * -2.0) - v23)));
      if (v61 > v23) {
        float v67 = -v23;
      }
      else {
        float v67 = v65;
      }
      if (v61 <= v23) {
        float v66 = v64;
      }
      float v45 = v32 + (float)((float)((float)((float)(v39 * 2.0) - v23) * (float)-v23) + (float)(v60 * v44));
      BOOL v68 = v60 > v14;
      if (v60 > v14)
      {
        float v44 = -v14;
        float v43 = v67;
      }
      goto LABEL_123;
    }
    if (v41 > v42)
    {
      float v53 = -(float)(v29 + (float)(v38 * v23));
      if (v14 >= v53)
      {
        float v90 = v29 + (float)(v38 * v23);
        float v91 = v39 + (float)(v28 * v14);
        float v92 = -v91;
        float v93 = (float)((float)(v29 * 2.0) - v14) * (float)-v14;
        float v94 = v32 + (float)(v93 + (float)(v23 * (float)(v23 + (float)((float)-v91 * -2.0))));
        if (v23 >= (float)-v91) {
          float v95 = -v91;
        }
        else {
          float v95 = v23;
        }
        if (v23 >= v92) {
          float v94 = v32 + (float)(v93 + (float)(v91 * v92));
        }
        float v66 = v32 + (float)(v93 - (float)(v23 * (float)-(float)(v23 - (float)(v92 * -2.0))));
        if (v91 > v23) {
          float v96 = -v23;
        }
        else {
          float v96 = v95;
        }
        if (v91 <= v23) {
          float v66 = v94;
        }
        float v45 = v32 + (float)((float)(v23 * (float)(v23 + (float)(v39 * 2.0))) + (float)(v90 * v53));
        BOOL v68 = v90 > v14;
        if (v90 <= v14) {
          float v44 = v53;
        }
        else {
          float v44 = -v14;
        }
        if (v68) {
          float v43 = v96;
        }
        else {
          float v43 = v23;
        }
LABEL_123:
        if (v68) {
          float v45 = v66;
        }
        goto LABEL_19;
      }
      float v45 = v32
          + (float)((float)(v23 * (float)(v23 + (float)(v39 * 2.0))) + (float)(v14 * (float)(v14 + (float)(v53 * -2.0))));
      float v44 = v14;
LABEL_90:
      float v43 = v23;
      goto LABEL_19;
    }
    float v44 = -v14;
    float v71 = v39 + (float)(v28 * v14);
    float v72 = -v71;
    float v73 = (float)((float)(v29 * 2.0) - v14) * (float)-v14;
    float v57 = v32 + (float)(v73 + (float)(v23 * (float)(v23 + (float)((float)-v71 * -2.0))));
    if (v23 >= (float)-v71) {
      float v74 = -v71;
    }
    else {
      float v74 = v23;
    }
    if (v23 >= v72) {
      float v57 = v32 + (float)(v73 + (float)(v71 * v72));
    }
    float v45 = v32 + (float)(v73 - (float)(v23 * (float)-(float)(v23 - (float)(v72 * -2.0))));
    BOOL v59 = v71 <= v23;
    if (v71 > v23) {
      float v43 = -v23;
    }
    else {
      float v43 = v74;
    }
    goto LABEL_76;
  }
  float v47 = -v42;
  if (v40 <= (float)(v14 * v33))
  {
    if (v41 < v47)
    {
      float v43 = -v23;
      float v54 = v29 + (float)(v28 * v23);
      float v55 = -v54;
      float v56 = (float)((float)(v39 * 2.0) - v23) * (float)-v23;
      float v57 = v32 + (float)(v56 + (float)(v14 * (float)(v14 + (float)((float)-v54 * -2.0))));
      if (v14 >= (float)-v54) {
        float v58 = -v54;
      }
      else {
        float v58 = v14;
      }
      if (v14 >= v55) {
        float v57 = v32 + (float)(v56 + (float)(v54 * v55));
      }
      float v45 = v32 + (float)(v56 - (float)(v14 * (float)-(float)(v14 - (float)(v55 * -2.0))));
      BOOL v59 = v54 <= v14;
      if (v54 > v14) {
        float v44 = -v14;
      }
      else {
        float v44 = v58;
      }
LABEL_76:
      if (v59) {
        float v45 = v57;
      }
      goto LABEL_19;
    }
    if (v41 > v42)
    {
      float v75 = v29 + (float)(v38 * v23);
      float v76 = -v75;
      float v77 = v23 * (float)(v23 + (float)(v39 * 2.0));
      float v78 = v32 + (float)(v77 + (float)(v14 * (float)(v14 + (float)((float)-v75 * -2.0))));
      if (v14 >= (float)-v75) {
        float v79 = -v75;
      }
      else {
        float v79 = v14;
      }
      if (v14 >= v76) {
        float v78 = v32 + (float)(v77 + (float)(v75 * v76));
      }
      float v45 = v32 + (float)(v77 - (float)(v14 * (float)-(float)(v14 - (float)(v76 * -2.0))));
      if (v75 > v14) {
        float v44 = -v14;
      }
      else {
        float v44 = v79;
      }
      if (v75 <= v14) {
        float v45 = v78;
      }
      goto LABEL_90;
    }
    float v44 = v40 * (float)(1.0 / v33);
    float v43 = v41 * (float)(1.0 / v33);
    float v50 = (float)(v43 * (float)((float)(v43 + (float)(v38 * v44)) + (float)(v39 * 2.0)))
        + (float)(v44 * (float)((float)(v44 + (float)(v38 * v43)) + (float)(v29 * 2.0)));
LABEL_138:
    float v45 = v32 + v50;
    goto LABEL_19;
  }
  if (v41 >= v47)
  {
    if (v41 <= v42)
    {
      float v97 = v39 + (float)(v38 * v14);
      float v98 = -v97;
      float v99 = v14 * (float)(v14 + (float)(v29 * 2.0));
      float v100 = v32 + (float)(v99 + (float)(v23 * (float)(v23 + (float)((float)-v97 * -2.0))));
      if (v23 >= (float)-v97) {
        float v101 = -v97;
      }
      else {
        float v101 = v23;
      }
      if (v23 >= v98) {
        float v100 = v32 + (float)(v99 + (float)(v97 * v98));
      }
      float v45 = v32 + (float)(v99 - (float)(v23 * (float)-(float)(v23 - (float)(v98 * -2.0))));
      BOOL v102 = v97 <= v23;
      if (v97 > v23) {
        float v43 = -v23;
      }
      else {
        float v43 = v101;
      }
      if (v102) {
        float v45 = v100;
      }
      goto LABEL_136;
    }
    float v69 = v29 + (float)(v38 * v23);
    float v70 = -v69;
    if (v69 > v14)
    {
      float v44 = -v14;
      float v45 = v32
          + (float)((float)(v23 * (float)(v23 + (float)(v39 * 2.0)))
                  - (float)(v14 * (float)-(float)(v14 - (float)(v70 * -2.0))));
      goto LABEL_90;
    }
    float v103 = v39 + (float)(v38 * v14);
    float v104 = -v103;
    float v105 = v14 * (float)(v14 + (float)(v29 * 2.0));
    float v106 = v32 + (float)(v105 + (float)(v23 * (float)(v23 + (float)((float)-v103 * -2.0))));
    if (v23 >= (float)-v103) {
      float v107 = -v103;
    }
    else {
      float v107 = v23;
    }
    if (v23 >= v104) {
      float v106 = v32 + (float)(v105 + (float)(v103 * v104));
    }
    float v86 = v32 + (float)(v105 - (float)(v23 * (float)-(float)(v23 - (float)(v104 * -2.0))));
    BOOL v108 = v103 <= v23;
    if (v103 > v23) {
      float v109 = -v23;
    }
    else {
      float v109 = v107;
    }
    if (v108) {
      float v86 = v106;
    }
    float v45 = v32 + (float)((float)(v23 * (float)(v23 + (float)(v39 * 2.0))) + (float)(v69 * v70));
    BOOL v89 = v14 < v70;
    if (v14 >= v70) {
      float v44 = -v69;
    }
    else {
      float v44 = v14;
    }
    if (v14 >= v70) {
      float v43 = v23;
    }
    else {
      float v43 = v109;
    }
  }
  else
  {
    float v43 = -v23;
    float v48 = v29 + (float)(v28 * v23);
    float v49 = -v48;
    if (v48 > v14)
    {
      float v44 = -v14;
      float v50 = (float)((float)((float)(v39 * 2.0) - v23) * (float)-v23)
          - (float)(v14 * (float)-(float)(v14 - (float)(v49 * -2.0)));
      goto LABEL_138;
    }
    float v80 = v39 + (float)(v38 * v14);
    float v81 = -v80;
    BOOL v82 = v80 > v23;
    float v83 = v14 * (float)(v14 + (float)(v29 * 2.0));
    float v84 = v32 + (float)(v83 + (float)(v80 * (float)-v80));
    if (v82) {
      float v85 = -v23;
    }
    else {
      float v85 = v81;
    }
    if (v82) {
      float v84 = v32 + (float)(v83 + (float)((float)-v23 * (float)((float)(v81 * -2.0) - v23)));
    }
    float v86 = v32 + (float)(v83 + (float)(v23 * (float)(v23 + (float)(v81 * -2.0))));
    BOOL v87 = v23 < v81;
    if (v23 < v81) {
      float v88 = v23;
    }
    else {
      float v88 = v85;
    }
    if (!v87) {
      float v86 = v84;
    }
    float v45 = v32 + (float)((float)((float)((float)(v39 * 2.0) - v23) * (float)-v23) + (float)(v48 * v49));
    BOOL v89 = v14 < v49;
    if (v14 >= v49) {
      float v44 = -v48;
    }
    else {
      float v44 = v14;
    }
    if (v14 < v49) {
      float v43 = v88;
    }
  }
  if (v89) {
    float v45 = v86;
  }
LABEL_19:
  if (a5) {
    *a5 = v44;
  }
  if (a6) {
    *a6 = v43;
  }
  if (a5)
  {
    if (v11 == 0.0) {
      float v46 = 0.0;
    }
    else {
      float v46 = v13 * (float)(v14 + *a5);
    }
    *a5 = v46;
  }
  if (a6)
  {
    if (v22 == 0.0) {
      float v51 = 0.0;
    }
    else {
      float v51 = v12 * (float)(v23 + *a6);
    }
    *a6 = v51;
  }
  float result = 0.0;
  if (v45 >= 0.0) {
    return v45;
  }
  return result;
}

float32x2_t physx::Gu::distanceSegmentSegmentSquared(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, void *a6)
{
  float32x4_t v6 = vsubq_f32(*a1, *a3);
  int32x4_t v7 = (int32x4_t)vmulq_f32(*a2, *a2);
  float32x4_t v8 = *a4;
  int32x4_t v9 = (int32x4_t)vmulq_f32(v8, v8);
  int32x4_t v10 = (int32x4_t)vmulq_f32(*a2, *a4);
  int32x4_t v11 = (int32x4_t)vmulq_f32(*a2, v6);
  int32x4_t v12 = vzip1q_s32(v7, v10);
  int32x4_t v13 = vzip2q_s32(v7, v10);
  int32x4_t v14 = vzip1q_s32(v9, v11);
  float32x4_t v15 = vaddq_f32((float32x4_t)vzip1q_s32(v13, vzip2q_s32(v9, v11)), vaddq_f32((float32x4_t)vzip1q_s32(v12, v14), (float32x4_t)vzip2q_s32(v12, v14)));
  float32x4_t v16 = vrecpeq_f32(v15);
  int v17 = 4;
  do
  {
    float32x4_t v16 = vmulq_f32(v16, vrecpsq_f32(v16, v15));
    --v17;
  }
  while (v17);
  float32x2_t v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
  float32x2_t v19 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  float32x2_t v20 = vsub_f32(vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0), *(float32x2_t *)v15.f32, 1), (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v19, v19), 0));
  float32x2_t v21 = vrecpe_f32(v20);
  int v22 = 4;
  do
  {
    float32x2_t v21 = vmul_f32(v21, vrecps_f32(v20, v21));
    --v22;
  }
  while (v22);
  float32x4_t v23 = vmulq_f32(v6, v8);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  *(float32x2_t *)v23.f32 = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
  float32x2_t v24 = vsub_f32(vmul_laneq_f32(*(float32x2_t *)v23.f32, v15, 2), vmul_laneq_f32(v18, v15, 3));
  _Q5.i64[0] = 0x3400000034000000;
  _Q5.i64[1] = 0x3400000034000000;
  float32x2_t v26 = (float32x2_t)vand_s8(*(int8x8_t *)v16.f32, (int8x8_t)*(_OWORD *)&vcgtq_f32(v15, _Q5));
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v23.f32 = vmax_f32(vmin_f32(vmul_lane_f32(vmla_laneq_f32(*(float32x2_t *)v23.f32, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)0x3400000034000000, v20), 0), (int8x8_t)0x3F0000003F000000, (int8x8_t)vmax_f32(vmin_f32(vmul_f32(v21, v24), *(float32x2_t *)_Q5.f32), 0)), v15, 2), v26, 1), *(float32x2_t *)_Q5.f32), 0);
  float32x2_t v31 = vmax_f32(vmin_f32(vmul_n_f32(vsub_f32(vmul_laneq_f32(*(float32x2_t *)v23.f32, v15, 2), (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 3)), v26.f32[0]), *(float32x2_t *)_Q5.f32), 0);
  *a5 = v31;
  *a6 = v23.i64[0];
  int8x16_t v32 = (int8x16_t)vmlaq_n_f32(*a1, *a2, v31.f32[0]);
  int8x16_t v33 = (int8x16_t)vmlaq_n_f32(*a3, *a4, v23.f32[0]);
  float32x2_t v34 = vsub_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v33.i8);
  float32x2_t v35 = vsub_f32((float32x2_t)vextq_s8(v32, v32, 8uLL).u32[0], (float32x2_t)vextq_s8(v33, v33, 8uLL).u32[0]);
  float32x2_t v36 = vpadd_f32(vmul_f32(v34, v34), vmul_f32(v35, v35));
  return vpadd_f32(v36, v36);
}

double physx::Gu::distanceSegmentSegmentSquared4(int32x4_t *a1, int32x2_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int32x4_t *a6, int32x4_t *a7, int32x4_t *a8, int32x4_t *a9, int32x4_t *a10, float32x4_t *a11, float32x4_t *a12)
{
  float32x4_t v12 = *(float32x4_t *)a2->i8;
  float32x4_t v13 = (float32x4_t)vdupq_lane_s32(*a2, 1);
  int32x4_t v14 = *a1;
  int32x4_t v15 = *a3;
  int32x4_t v16 = *a5;
  int32x4_t v17 = *a7;
  int32x4_t v18 = *a9;
  int32x4_t v19 = vzip1q_s32(*a4, *a8);
  int32x4_t v20 = vzip1q_s32(*a6, *a10);
  float32x4_t v21 = (float32x4_t)vzip2q_s32(v19, v20);
  float32x4_t v22 = vmulq_f32(v12, v12);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  *(float32x2_t *)v25.f32 = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  float32x4_t v23 = vmulq_f32(v21, v21);
  float32x4_t v24 = vmulq_lane_f32(v21, (float32x2_t)*a2, 1);
  v25.i64[1] = v25.i64[0];
  float32x4_t v26 = vrecpeq_f32(v25);
  int v27 = 4;
  do
  {
    float32x4_t v26 = vmulq_f32(v26, vrecpsq_f32(v26, v25));
    --v27;
  }
  while (v27);
  float32x4_t v28 = (float32x4_t)vzip1q_s32(v19, v20);
  float32x4_t v29 = (float32x4_t)vzip1q_s32(vzip2q_s32(*a4, *a8), vzip2q_s32(*a6, *a10));
  float32x4_t v30 = vmlaq_f32(vmlaq_f32(v23, v28, v28), v29, v29);
  float32x4_t v31 = vrecpeq_f32(v30);
  int v32 = 4;
  do
  {
    float32x4_t v31 = vmulq_f32(v31, vrecpsq_f32(v31, v30));
    --v32;
  }
  while (v32);
  float32x4_t v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
  float32x4_t v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2);
  float32x4_t v35 = vmlaq_laneq_f32(vmlaq_n_f32(v24, v28, v12.f32[0]), v29, v12, 2);
  float32x4_t v36 = vsubq_f32(vmulq_f32(v30, v25), vmulq_f32(v35, v35));
  float32x4_t v37 = vrecpeq_f32(v36);
  int v38 = 4;
  do
  {
    float32x4_t v37 = vmulq_f32(v37, vrecpsq_f32(v37, v36));
    --v38;
  }
  while (v38);
  float32x4_t v39 = (float32x4_t)vdupq_laneq_s32(v14, 2);
  float32x4_t v40 = (float32x4_t)vzip1q_s32(vzip2q_s32(v15, v17), vzip2q_s32(v16, v18));
  float32x4_t v41 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 0);
  float32x4_t v42 = vsubq_f32(v39, v40);
  int32x4_t v43 = vzip1q_s32(v15, v17);
  int32x4_t v44 = vzip1q_s32(v16, v18);
  float32x4_t v45 = (float32x4_t)vzip1q_s32(v43, v44);
  float32x4_t v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1);
  float32x4_t v47 = vsubq_f32(v41, v45);
  float32x4_t v48 = (float32x4_t)vzip2q_s32(v43, v44);
  float32x4_t v49 = vsubq_f32(v46, v48);
  float32x4_t v50 = vmlaq_f32(vmlaq_f32(vmulq_f32(v21, v49), v47, v28), v42, v29);
  float32x4_t v51 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v49, *(float32x2_t *)v12.f32, 1), v47, v33), v42, v34);
  __asm { FMOV            V19.4S, #1.0 }
  int8x16_t v57 = (int8x16_t)vmaxq_f32(vminq_f32(vmulq_f32(vsubq_f32(vmulq_f32(v35, v50), vmulq_f32(v30, v51)), v37), _Q19), (float32x4_t)0);
  v58.i64[0] = 0x3400000034000000;
  v58.i64[1] = 0x3400000034000000;
  v42.i64[0] = 0x3F0000003F000000;
  v42.i64[1] = 0x3F0000003F000000;
  float32x4_t v59 = vmaxq_f32(vminq_f32(vmulq_f32(v31, vaddq_f32(v50, vmulq_f32(v35, (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v58, v36), (int8x16_t)v42, v57)))), _Q19), (float32x4_t)0);
  float32x4_t v60 = (float32x4_t)vbicq_s8((int8x16_t)vmaxq_f32(vminq_f32(vmulq_f32(v26, vsubq_f32(vmulq_f32(v35, v59), v51)), _Q19), (float32x4_t)0), (int8x16_t)vcgeq_f32(v58, v25));
  *a11 = v60;
  *a12 = v59;
  float32x4_t v61 = vmlaq_f32(v39, v60, v34);
  float32x4_t v62 = vmlaq_f32(v48, v59, v21);
  float32x4_t v63 = vsubq_f32(vmlaq_f32(v41, v60, v33), vmlaq_f32(v45, v59, v28));
  float32x4_t v64 = vsubq_f32(vmlaq_f32(v46, v60, v13), v62);
  float32x4_t v65 = vsubq_f32(v61, vmlaq_f32(v40, v59, v29));
  *(void *)&double result = vmlaq_f32(vmlaq_f32(vmulq_f32(v65, v65), v64, v64), v63, v63).u64[0];
  return result;
}

uint64_t case0(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, float *a8)
{
  float v8 = *(float *)(a6 + 4 * result);
  float v9 = *(float *)(a4 + 4 * result) - v8;
  float v10 = *(float *)(a6 + 4 * a2);
  float v11 = *(float *)(a4 + 4 * a2) - v10;
  float v12 = v9 * *(float *)(a5 + 4 * a2);
  float v13 = v11 * *(float *)(a5 + 4 * result);
  if (v12 >= v13)
  {
    *(float *)(a4 + 4 * result) = v8;
    float v18 = *(float *)(a4 + 4 * a2);
    float v11 = v18 + *(float *)(a6 + 4 * a2);
    float v19 = *(float *)(a5 + 4 * result);
    float v20 = v12 - (float)(v19 * v11);
    if (v20 < 0.0)
    {
      if (!a7) {
        goto LABEL_14;
      }
      float v17 = 1.0 / v19;
      *(float *)(a4 + 4 * a2) = v18 - (float)(v12 * v17);
      goto LABEL_13;
    }
    float v17 = 1.0 / (float)((float)(*(float *)(a5 + 4 * a2) * *(float *)(a5 + 4 * a2)) + (float)(v19 * v19));
    *a8 = *a8 + (float)((float)(v20 * v20) * v17);
    if (!a7) {
      goto LABEL_14;
    }
    *(float *)(a4 + 4 * a2) = -*(float *)(a6 + 4 * a2);
  }
  else
  {
    *(float *)(a4 + 4 * a2) = v10;
    float v14 = *(float *)(a4 + 4 * result);
    float v9 = v14 + *(float *)(a6 + 4 * result);
    float v15 = *(float *)(a5 + 4 * a2);
    float v16 = v13 - (float)(v15 * v9);
    if (v16 < 0.0)
    {
      if (!a7) {
        goto LABEL_14;
      }
      float v17 = 1.0 / v15;
      *(float *)(a4 + 4 * result) = v14 - (float)(v13 * v17);
      float v9 = v11;
      goto LABEL_13;
    }
    float v17 = 1.0
        / (float)((float)(v15 * v15)
                + (float)(*(float *)(a5 + 4 * result) * *(float *)(a5 + 4 * result)));
    *a8 = *a8 + (float)((float)(v16 * v16) * v17);
    if (!a7) {
      goto LABEL_14;
    }
    *(float *)(a4 + 4 * result) = -*(float *)(a6 + 4 * result);
  }
  float v9 = (float)(v11 * *(float *)(a5 + 4 * a2)) + (float)(*(float *)(a5 + 4 * result) * v9);
LABEL_13:
  *a7 = -(float)(v9 * v17);
LABEL_14:
  float v21 = *(float *)(a4 + 4 * a3);
  float v22 = *(float *)(a6 + 4 * a3);
  if (v21 >= (float)-v22)
  {
    if (v21 <= v22) {
      return result;
    }
    *a8 = *a8 + (float)((float)(v21 - v22) * (float)(v21 - v22));
    float v23 = *(float *)(a6 + 4 * a3);
  }
  else
  {
    *a8 = *a8 + (float)((float)(v21 + v22) * (float)(v21 + v22));
    float v23 = -*(float *)(a6 + 4 * a3);
  }
  *(float *)(a4 + 4 * a3) = v23;
  return result;
}

uint64_t case00(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, float *a8)
{
  if (a7) {
    *a7 = (float)(*(float *)(a6 + 4 * result) - *(float *)(a4 + 4 * result))
  }
        / *(float *)(a5 + 4 * result);
  *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
  float v8 = *(float *)(a4 + 4 * a2);
  float v9 = *(float *)(a6 + 4 * a2);
  if (v8 >= (float)-v9)
  {
    if (v8 <= v9) {
      goto LABEL_8;
    }
    *a8 = *a8 + (float)((float)(v8 - v9) * (float)(v8 - v9));
    float v10 = *(float *)(a6 + 4 * a2);
  }
  else
  {
    *a8 = *a8 + (float)((float)(v8 + v9) * (float)(v8 + v9));
    float v10 = -*(float *)(a6 + 4 * a2);
  }
  *(float *)(a4 + 4 * a2) = v10;
LABEL_8:
  float v11 = *(float *)(a4 + 4 * a3);
  float v12 = *(float *)(a6 + 4 * a3);
  if (v11 >= (float)-v12)
  {
    if (v11 <= v12) {
      return result;
    }
    *a8 = *a8 + (float)((float)(v11 - v12) * (float)(v11 - v12));
    float v13 = *(float *)(a6 + 4 * a3);
  }
  else
  {
    *a8 = *a8 + (float)((float)(v11 + v12) * (float)(v11 + v12));
    float v13 = -*(float *)(a6 + 4 * a3);
  }
  *(float *)(a4 + 4 * a3) = v13;
  return result;
}

uint64_t face(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float *a9)
{
  float v9 = *(float *)(a6 + 4 * a2);
  v51[a2] = *(float *)(a4 + 4 * a2) + v9;
  float v10 = *(float *)(a6 + 4 * a3);
  float v11 = *(float *)(a4 + 4 * a3) + v10;
  v51[a3] = v11;
  float v12 = *(float *)(a5 + 4 * result);
  float v13 = v51[a2];
  float v14 = *(float *)(a5 + 4 * a2);
  float v15 = *(float *)(a7 + 4 * result);
  float v16 = v11 * v12;
  float v17 = *(float *)(a5 + 4 * a3);
  float v18 = v15 * v17;
  if ((float)(v12 * v13) < (float)(v14 * v15))
  {
    if (v16 >= v18)
    {
      float v21 = (float)(v14 * v14) + (float)(v12 * v12);
      float v22 = (float)(v13 * v14) + (float)(v12 * v15);
      float v23 = (float)(v21 * v11) - (float)(v17 * v22);
      goto LABEL_11;
    }
    float v19 = (float)(v17 * v17) + (float)(v12 * v12);
    float v20 = (float)(v19 * v13) - (float)(v14 * (float)((float)(v11 * v17) + (float)(v12 * v15)));
    if (v20 < 0.0)
    {
      float v21 = (float)(v14 * v14) + (float)(v12 * v12);
      float v22 = (float)(v13 * v14) + (float)(v12 * v15);
      float v23 = (float)(v21 * v11) - (float)(v17 * v22);
      if (v23 < 0.0)
      {
        float v24 = v21 + (float)(v17 * v17);
        float v25 = v22 + (float)(v17 * v11);
        float v26 = (float)-v25 / v24;
        *a9 = (float)((float)((float)((float)(v13 * v13) + (float)(v15 * v15)) + (float)(v11 * v11)) + (float)(v25 * v26))
            + *a9;
        if (!a8) {
          return result;
        }
        *a8 = v26;
        *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
        float v27 = -*(float *)(a6 + 4 * a2);
LABEL_24:
        *(float *)(a4 + 4 * a2) = v27;
        float v36 = -*(float *)(a6 + 4 * a3);
LABEL_25:
        *(float *)(a4 + 4 * a3) = v36;
        return result;
      }
LABEL_11:
      float v32 = (float)(v13 * v13) + (float)(v15 * v15);
      float v33 = *a9;
      if (v23 <= (float)(v10 * (float)(v21 + v21)))
      {
        float v38 = v23 / v21;
        float v39 = v11 - v38;
        float v40 = v22 + (float)(v17 * (float)(v11 - (float)(v23 / v21)));
        float v41 = (float)-(float)(v22 + (float)(v17 * (float)(v11 - v38))) / (float)(v21 + (float)(v17 * v17));
        *a9 = (float)((float)(v32 + (float)(v39 * v39)) + (float)(v40 * v41)) + v33;
        if (!a8) {
          return result;
        }
        *a8 = v41;
        *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
        *(float *)(a4 + 4 * a2) = -*(float *)(a6 + 4 * a2);
        float v36 = v38 - *(float *)(a6 + 4 * a3);
      }
      else
      {
        float v34 = *(float *)(a7 + 4 * a3);
        float v35 = (float)-(float)(v22 + (float)(v17 * v34)) / (float)(v21 + (float)(v17 * v17));
        *a9 = v33 + (float)((float)(v32 + (float)(v34 * v34)) + (float)((float)(v22 + (float)(v17 * v34)) * v35));
        if (!a8) {
          return result;
        }
        *a8 = v35;
        *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
        *(float *)(a4 + 4 * a2) = -*(float *)(a6 + 4 * a2);
        float v36 = *(float *)(a6 + 4 * a3);
      }
      goto LABEL_25;
    }
    float v42 = v9 * (float)(v19 + v19);
    float v30 = *a9;
    if (v20 > v42)
    {
LABEL_19:
      float v43 = *(float *)(a7 + 4 * a2);
      float v44 = v19 + (float)(v14 * v14);
      float v45 = (float)((float)(v14 * v43) + (float)(v12 * v15)) + (float)(v17 * v11);
      float v46 = (float)-v45 / v44;
      *a9 = v30
          + (float)((float)((float)((float)(v43 * v43) + (float)(v15 * v15)) + (float)(v11 * v11)) + (float)(v45 * v46));
      if (!a8) {
        return result;
      }
      *a8 = v46;
      *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
      float v27 = *(float *)(a6 + 4 * a2);
      goto LABEL_24;
    }
    float v31 = v20 / v19;
LABEL_22:
    float v47 = v19 + (float)(v14 * v14);
    float v48 = v13 - v31;
    float v49 = (float)((float)(v14 * v48) + (float)(v12 * v15)) + (float)(v17 * v11);
    float v50 = (float)-v49 / v47;
    *a9 = (float)((float)((float)((float)(v48 * v48) + (float)(v15 * v15)) + (float)(v11 * v11)) + (float)(v49 * v50))
        + v30;
    if (!a8) {
      return result;
    }
    *a8 = v50;
    *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
    float v27 = v31 - *(float *)(a6 + 4 * a2);
    goto LABEL_24;
  }
  if (v16 < v18)
  {
    float v19 = (float)(v17 * v17) + (float)(v12 * v12);
    float v28 = (float)(v19 * v13) - (float)(v14 * (float)((float)(v11 * v17) + (float)(v12 * v15)));
    float v29 = v9 * (float)(v19 + v19);
    float v30 = *a9;
    if (v28 > v29) {
      goto LABEL_19;
    }
    float v31 = v28 / v19;
    goto LABEL_22;
  }
  if (a8)
  {
    *(_DWORD *)(a4 + 4 * result) = *(_DWORD *)(a6 + 4 * result);
    float v37 = 1.0 / *(float *)(a5 + 4 * result);
    *(float *)(a4 + 4 * a2) = *(float *)(a4 + 4 * a2)
                              + (float)((float)-(float)(*(float *)(a5 + 4 * a2)
                                                      * *(float *)(a7 + 4 * result))
                                      * v37);
    *(float *)(a4 + 4 * a3) = *(float *)(a4 + 4 * a3)
                              + (float)((float)-(float)(*(float *)(a5 + 4 * a3)
                                                      * *(float *)(a7 + 4 * result))
                                      * v37);
    *a8 = -(float)(*(float *)(a7 + 4 * result) * v37);
  }
  return result;
}

void physx::Gu::distanceSegmentTriangleSquared(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  float v15 = a2->f32[0];
  float v16 = a2->f32[1];
  float v17 = a2[1].f32[0];
  float v18 = (float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17);
  if (v18 < 1.0e-12)
  {
    if (a6) {
      *a6 = 0;
    }
    float v19 = a3[1].f32[0];
    float v20 = a4[1].f32[0] + v19;
    float32x2_t v21 = *a3;
    float32x2_t v137 = vadd_f32(*a4, *a3);
    float v138 = v20;
    float v22 = v19 + a5[1].f32[0];
    float32x2_t v135 = vadd_f32(v21, *a5);
    float v136 = v22;
    v125.i32[0] = 0;
    v123.i32[0] = 0;
    physx::Gu::closestPtPointTriangle((float *)a1, (float *)a3, &v137, &v135, (float *)&v125, (float *)&v123, (uint64_t)&v132);
    if (a7) {
      *a7 = v125.i32[0];
    }
    if (a8) {
      *a8 = v123.i32[0];
    }
    return;
  }
  float v25 = a3->f32[0];
  float v24 = a3->f32[1];
  float v27 = a1->f32[0];
  float v26 = a1->f32[1];
  float v28 = a3[1].f32[0];
  float v29 = a1[1].f32[0];
  float v31 = a4->f32[0];
  float v30 = a4->f32[1];
  float v32 = a4[1].f32[0];
  float v34 = a5->f32[0];
  float v33 = a5->f32[1];
  float v35 = a5[1].f32[0];
  uint64_t v128 = 0;
  memset(v129, 0, sizeof(v129));
  float v127 = 0.0;
  float v36 = (float)(v30 * v35) - (float)(v32 * v33);
  float v37 = (float)(v32 * v34) - (float)(v31 * v35);
  float v38 = (float)(v31 * v33) - (float)(v30 * v34);
  float v39 = (float)((float)(v16 * v37) + (float)(v36 * v15)) + (float)(v38 * v17);
  if ((float)(v39 * v39) < (float)((float)(v18 * 0.000001)
                                  * (float)((float)((float)(v37 * v37) + (float)(v36 * v36)) + (float)(v38 * v38))))
  {
    float v40 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
    *(_DWORD *)float v129 = 0;
    float v41 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v128 + 1, &v127);
    LODWORD(v128) = 0;
    if (v40 > v41)
    {
      *(_DWORD *)&v129[8] = HIDWORD(v128);
      *(void *)float v129 = LODWORD(v127);
      float v40 = v41;
    }
    float v42 = a4[1].f32[0];
    float v43 = a3[1].f32[0] + v42;
    float32x2_t v44 = *a4;
    float32x2_t v125 = vadd_f32(*a3, *a4);
    float v126 = v43;
    float v45 = a5[1].f32[0] - v42;
    float32x2_t v123 = vsub_f32(*a5, v44);
    float v124 = v45;
    float v46 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v125, (float *)&v123, (float *)&v128 + 1, &v127);
    *(float *)&uint64_t v128 = 1.0 - v127;
    if (v40 > v46)
    {
      *(float *)&v129[4] = 1.0 - v127;
      *(_DWORD *)&v129[8] = HIDWORD(v128);
      *(float *)float v129 = v127;
      float v40 = v46;
    }
    float v47 = a3[1].f32[0];
    float v48 = a4[1].f32[0] + v47;
    float32x2_t v49 = *a3;
    float32x2_t v137 = vadd_f32(*a4, *a3);
    float v138 = v48;
    float v50 = v47 + a5[1].f32[0];
    float32x2_t v135 = vadd_f32(v49, *a5);
    float v136 = v50;
    v121.i32[0] = 0;
    float v131 = 0.0;
    physx::Gu::closestPtPointTriangle((float *)a1, (float *)a3, &v137, &v135, (float *)&v121, &v131, (uint64_t)&v132);
    float v127 = v131;
    uint64_t v128 = v121.u32[0];
    float32x2_t v51 = *a1;
    float v52 = a1[1].f32[0];
    float v53 = (float)((float)((float)(v133 - COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)))
                        * (float)(v133 - COERCE_FLOAT(HIDWORD(*(unint64_t *)a1))))
                + (float)((float)(v132 - COERCE_FLOAT(*a1)) * (float)(v132 - COERCE_FLOAT(*a1))))
        + (float)((float)(v134 - v52) * (float)(v134 - v52));
    if (v40 > v53)
    {
      *(_DWORD *)&v129[8] = 0;
      *(float *)float v129 = v131;
      *(_DWORD *)&v129[4] = v121.i32[0];
      float v40 = v53;
    }
    float v54 = v52 + a2[1].f32[0];
    float32x2_t v121 = vadd_f32(v51, *a2);
    float v122 = v54;
    float v55 = a3[1].f32[0];
    float v56 = a4[1].f32[0] + v55;
    float32x2_t v57 = *a3;
    float32x2_t v137 = vadd_f32(*a4, *a3);
    float v138 = v56;
    float v58 = v55 + a5[1].f32[0];
    float32x2_t v135 = vadd_f32(v57, *a5);
    float v136 = v58;
    __int32 v130 = 0;
    float v131 = 0.0;
    physx::Gu::closestPtPointTriangle((float *)&v121, (float *)a3, &v137, &v135, &v131, (float *)&v130, (uint64_t)&v132);
    if (v40 <= (float)((float)((float)((float)(v133 - v121.f32[1]) * (float)(v133 - v121.f32[1]))
                              + (float)((float)(v132 - v121.f32[0]) * (float)(v132 - v121.f32[0])))
                      + (float)((float)(v134 - v122) * (float)(v134 - v122))))
      goto LABEL_64;
    __int32 v60 = v130;
    __int32 v59 = LODWORD(v131);
LABEL_18:
    *(_DWORD *)&v129[8] = 1065353216;
LABEL_63:
    *(_DWORD *)float v129 = v60;
    *(_DWORD *)&v129[4] = v59;
    goto LABEL_64;
  }
  float v117 = v25;
  float v118 = v24;
  float v61 = v25 - v27;
  float v119 = v28;
  float v120 = v27;
  float v62 = v24 - v26;
  float v63 = v28 - v29;
  float v64 = (float)((float)(v16 * v30) + (float)(v15 * v31)) + (float)(v17 * v32);
  float v65 = (float)((float)(v16 * v33) + (float)(v15 * v34)) + (float)(v17 * v35);
  float v66 = (float)((float)(v30 * v30) + (float)(v31 * v31)) + (float)(v32 * v32);
  float v67 = (float)((float)(v30 * v33) + (float)(v31 * v34)) + (float)(v32 * v35);
  float v68 = (float)((float)(v33 * v33) + (float)(v34 * v34)) + (float)(v35 * v35);
  float v69 = (float)((float)(v16 * (float)(v24 - v26)) + (float)(v61 * v15)) + (float)((float)(v28 - v29) * v17);
  float v70 = (float)((float)((float)(v24 - v26) * v30) + (float)(v61 * v31)) + (float)((float)(v28 - v29) * v32);
  float v71 = (float)(v66 * v65) + (float)((float)-v64 * v67);
  float v72 = (float)(v66 * v68) - (float)(v67 * v67);
  float v73 = (float)(v64 * v68) + (float)((float)-v65 * v67);
  float v74 = (float)((float)(v73 * (float)-v64) + (float)(v18 * v72)) + (float)((float)-v65 * v71);
  float v75 = 1.0 / v74;
  BOOL v76 = v74 == 0.0;
  float v77 = 0.0;
  if (!v76) {
    float v77 = v75;
  }
  float v78 = v69 * v77;
  float v79 = -(float)(v70 * v77);
  float v80 = v26;
  float v81 = (float)(v73 * v79) + (float)(v72 * v78);
  float v82 = (float)(v65 * v64) - (float)(v18 * v67);
  float v83 = (float)((float)((float)(v65 * (float)-v65) + (float)(v18 * v68)) * v79) + (float)(v73 * v78);
  float v84 = (float)(v82 * v79) + (float)(v71 * v78);
  float v85 = -(float)((float)((float)((float)(v62 * v33) + (float)(v61 * v34)) + (float)(v63 * v35)) * v77);
  float v86 = v81 + (float)(v71 * v85);
  float v87 = v83 + (float)(v82 * v85);
  float v88 = v84 + (float)((float)((float)(v64 * (float)-v64) + (float)(v18 * v66)) * v85);
  *(float *)&v129[4] = v87;
  *(float *)&v129[8] = v86;
  *(float *)float v129 = v88;
  if (v86 >= 0.0)
  {
    float v90 = v87 + v88;
    if (v86 <= 1.0)
    {
      if (v90 <= 1.0)
      {
        if (v87 >= 0.0)
        {
          if (v88 < 0.0)
          {
            physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
            *(_DWORD *)float v129 = 0;
          }
        }
        else
        {
          float v99 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
          *(_DWORD *)&v129[4] = 0;
          if (v88 < 0.0
            && v99 > physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v128 + 1, (float *)&v128))
          {
            *(void *)&v129[4] = v128;
            *(_DWORD *)float v129 = 0;
          }
        }
        goto LABEL_64;
      }
      if (v87 >= 0.0)
      {
        if (v88 >= 0.0)
        {
          v137.f32[0] = v117 + v31;
          v137.f32[1] = v118 + v30;
          float v138 = v119 + v32;
          v135.f32[0] = v34 - v31;
          v135.f32[1] = v33 - v30;
          float v136 = v35 - v32;
          physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v129[8], (float *)v129);
          *(float *)&v129[4] = 1.0 - *(float *)v129;
          goto LABEL_64;
        }
        float v93 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
        *(_DWORD *)float v129 = 0;
      }
      else
      {
        float v93 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
        *(_DWORD *)&v129[4] = 0;
      }
      float v104 = a4[1].f32[0];
      float v105 = a3[1].f32[0] + v104;
      float32x2_t v106 = *a4;
      float32x2_t v137 = vadd_f32(*a3, *a4);
      float v138 = v105;
      float v107 = a5[1].f32[0] - v104;
      float32x2_t v135 = vsub_f32(*a5, v106);
      float v136 = v107;
      if (v93 > physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v128 + 1, &v127))
      {
        *(float *)&v129[4] = 1.0 - v127;
        *(_DWORD *)&v129[8] = HIDWORD(v128);
        *(float *)float v129 = v127;
      }
      goto LABEL_64;
    }
    if (v90 <= 1.0)
    {
      if (v87 >= 0.0)
      {
        if (v88 >= 0.0)
        {
          v125.f32[0] = v15 + v120;
          v125.f32[1] = v16 + v80;
          float v126 = v17 + v29;
          v137.f32[0] = v117 + v31;
          v137.f32[1] = v118 + v30;
          float v138 = v119 + v32;
          v135.f32[0] = v117 + v34;
          v135.f32[1] = v118 + v33;
          float v136 = v119 + v35;
          v123.i32[0] = 0;
          v121.i32[0] = 0;
          physx::Gu::closestPtPointTriangle((float *)&v125, (float *)a3, &v137, &v135, (float *)&v123, (float *)&v121, (uint64_t)&v132);
          *(_DWORD *)float v129 = v121.i32[0];
          *(_DWORD *)&v129[4] = v123.i32[0];
          *(_DWORD *)&v129[8] = 1065353216;
          goto LABEL_64;
        }
        float v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
        *(_DWORD *)float v129 = 0;
        goto LABEL_77;
      }
      float v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
      *(_DWORD *)&v129[4] = 0;
      if (v88 < 0.0)
      {
        float v98 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v128 + 1, (float *)&v128);
        float v127 = 0.0;
        if (v91 > v98)
        {
          *(void *)&v129[4] = v128;
          *(_DWORD *)float v129 = 0;
LABEL_55:
          float v91 = v98;
        }
      }
    }
    else
    {
      if (v87 >= 0.0)
      {
        if (v88 >= 0.0)
        {
          v137.f32[0] = v117 + v31;
          v137.f32[1] = v118 + v30;
          float v138 = v119 + v32;
          v135.f32[0] = v34 - v31;
          v135.f32[1] = v33 - v30;
          float v136 = v35 - v32;
          float v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v129[8], (float *)v129);
          *(float *)&v129[4] = 1.0 - *(float *)v129;
          goto LABEL_77;
        }
        float v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
        *(_DWORD *)float v129 = 0;
      }
      else
      {
        float v91 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
        *(_DWORD *)&v129[4] = 0;
      }
      float v100 = a4[1].f32[0];
      float v101 = a3[1].f32[0] + v100;
      float32x2_t v102 = *a4;
      float32x2_t v137 = vadd_f32(*a3, *a4);
      float v138 = v101;
      float v103 = a5[1].f32[0] - v100;
      float32x2_t v135 = vsub_f32(*a5, v102);
      float v136 = v103;
      float v98 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v128 + 1, &v127);
      *(float *)&uint64_t v128 = 1.0 - v127;
      if (v91 > v98)
      {
        *(float *)&v129[4] = 1.0 - v127;
        *(_DWORD *)&v129[8] = HIDWORD(v128);
        *(float *)float v129 = v127;
        goto LABEL_55;
      }
    }
LABEL_77:
    float v112 = a1[1].f32[0] + a2[1].f32[0];
    float32x2_t v125 = vadd_f32(*a1, *a2);
    float v126 = v112;
    float v113 = a3[1].f32[0];
    float v114 = a4[1].f32[0] + v113;
    float32x2_t v115 = *a3;
    float32x2_t v137 = vadd_f32(*a4, *a3);
    float v138 = v114;
    float v116 = v113 + a5[1].f32[0];
    float32x2_t v135 = vadd_f32(v115, *a5);
    float v136 = v116;
    v123.i32[0] = 0;
    v121.i32[0] = 0;
    physx::Gu::closestPtPointTriangle((float *)&v125, (float *)a3, &v137, &v135, (float *)&v123, (float *)&v121, (uint64_t)&v132);
    if (v91 <= (float)((float)((float)((float)(v133 - v125.f32[1]) * (float)(v133 - v125.f32[1]))
                              + (float)((float)(v132 - v125.f32[0]) * (float)(v132 - v125.f32[0])))
                      + (float)((float)(v134 - v126) * (float)(v134 - v126))))
      goto LABEL_64;
    __int32 v59 = v123.i32[0];
    __int32 v60 = v121.i32[0];
    goto LABEL_18;
  }
  if ((float)(v87 + v88) <= 1.0)
  {
    if (v87 >= 0.0)
    {
      if (v88 >= 0.0)
      {
        v137.f32[0] = v117 + v31;
        v137.f32[1] = v118 + v30;
        float v138 = v119 + v32;
        v135.f32[0] = v117 + v34;
        v135.f32[1] = v118 + v33;
        float v136 = v119 + v35;
        v125.i32[0] = 0;
        v123.i32[0] = 0;
        physx::Gu::closestPtPointTriangle((float *)a1, (float *)a3, &v137, &v135, (float *)&v125, (float *)&v123, (uint64_t)&v132);
        *(_DWORD *)float v129 = v123.i32[0];
        *(_DWORD *)&v129[4] = v125.i32[0];
        *(_DWORD *)&v129[8] = 0;
        goto LABEL_64;
      }
      float v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
      *(_DWORD *)float v129 = 0;
    }
    else
    {
      float v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
      *(_DWORD *)&v129[4] = 0;
      if (v88 < 0.0)
      {
        float v92 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v128 + 1, (float *)&v128);
        float v127 = 0.0;
        if (v89 > v92)
        {
          *(void *)&v129[4] = v128;
          *(_DWORD *)float v129 = 0;
LABEL_40:
          float v89 = v92;
        }
      }
    }
  }
  else
  {
    if (v87 < 0.0)
    {
      float v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a5, (float *)&v129[8], (float *)v129);
      *(_DWORD *)&v129[4] = 0;
LABEL_38:
      float v94 = a4[1].f32[0];
      float v95 = a3[1].f32[0] + v94;
      float32x2_t v96 = *a4;
      float32x2_t v137 = vadd_f32(*a3, *a4);
      float v138 = v95;
      float v97 = a5[1].f32[0] - v94;
      float32x2_t v135 = vsub_f32(*a5, v96);
      float v136 = v97;
      float v92 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v128 + 1, &v127);
      *(float *)&uint64_t v128 = 1.0 - v127;
      if (v89 <= v92) {
        goto LABEL_61;
      }
      *(float *)&v129[4] = 1.0 - v127;
      *(_DWORD *)&v129[8] = HIDWORD(v128);
      *(float *)float v129 = v127;
      goto LABEL_40;
    }
    if (v88 < 0.0)
    {
      float v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)a3, (float *)a4, (float *)&v129[8], (float *)&v129[4]);
      *(_DWORD *)float v129 = 0;
      goto LABEL_38;
    }
    v137.f32[0] = v117 + v31;
    v137.f32[1] = v118 + v30;
    float v138 = v119 + v32;
    v135.f32[0] = v34 - v31;
    v135.f32[1] = v33 - v30;
    float v136 = v35 - v32;
    float v89 = physx::Gu::distanceSegmentSegmentSquared((float *)a1, (float *)a2, (float *)&v137, (float *)&v135, (float *)&v129[8], (float *)v129);
    *(float *)&v129[4] = 1.0 - *(float *)v129;
  }
LABEL_61:
  float v108 = a3[1].f32[0];
  float v109 = a4[1].f32[0] + v108;
  float32x2_t v110 = *a3;
  float32x2_t v137 = vadd_f32(*a4, *a3);
  float v138 = v109;
  float v111 = v108 + a5[1].f32[0];
  float32x2_t v135 = vadd_f32(v110, *a5);
  float v136 = v111;
  v125.i32[0] = 0;
  v123.i32[0] = 0;
  physx::Gu::closestPtPointTriangle((float *)a1, (float *)a3, &v137, &v135, (float *)&v125, (float *)&v123, (uint64_t)&v132);
  if (v89 > (float)((float)((float)((float)(v133 - a1->f32[1]) * (float)(v133 - a1->f32[1]))
                           + (float)((float)(v132 - a1->f32[0]) * (float)(v132 - a1->f32[0])))
                   + (float)((float)(v134 - a1[1].f32[0]) * (float)(v134 - a1[1].f32[0]))))
  {
    __int32 v59 = v125.i32[0];
    __int32 v60 = v123.i32[0];
    *(_DWORD *)&v129[8] = 0;
    goto LABEL_63;
  }
LABEL_64:
  if (a6) {
    *a6 = *(_DWORD *)&v129[8];
  }
  if (a7) {
    *a7 = *(_DWORD *)&v129[4];
  }
  if (a8) {
    *a8 = *(_DWORD *)v129;
  }
}

void physx::Gu::distanceSegmentTriangleSquared(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7)
{
  float32x4_t v13 = *a2;
  float32x4_t v14 = *a1;
  float32x4_t v15 = vsubq_f32(*a2, *a1);
  float32x4_t v101 = v15;
  float32x4_t v16 = *a4;
  float32x4_t v17 = *a3;
  float32x4_t v18 = vsubq_f32(*a4, *a3);
  float32x4_t v19 = *a5;
  float32x4_t v20 = vsubq_f32(*a5, *a3);
  float32x4_t v99 = v20;
  float32x4_t v100 = v18;
  float32x4_t v98 = vsubq_f32(v19, v16);
  float32x4_t v21 = vmulq_f32(v18, v18);
  v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
  float32x2_t v22 = vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32);
  float32x4_t v23 = vmulq_f32(v18, v20);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  float32x2_t v24 = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32);
  float32x4_t v25 = vmulq_f32(v20, v20);
  v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
  float32x2_t v26 = vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32);
  float32x2_t v27 = vsub_f32(vmul_f32(v22, v26), vmul_f32(v24, v24));
  float32x2_t v28 = vrecpe_f32(v27);
  int v29 = 4;
  do
  {
    float32x2_t v28 = vmul_f32(v28, vrecps_f32(v27, v28));
    --v29;
  }
  while (v29);
  int8x8_t v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL), *(float32x2_t *)v20.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), *(float32x2_t *)v20.f32), *(float32x2_t *)v18.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  int32x2_t v32 = vcgtz_f32(v27);
  float32x2_t v33 = vpadd_f32(vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32), vmul_f32((float32x2_t)v30.u32[0], (float32x2_t)v30.u32[0]));
  float32x2_t v34 = vpadd_f32(v33, v33);
  float32x2_t v35 = vrsqrte_f32(v34);
  int v36 = 4;
  do
  {
    float32x2_t v35 = vmul_f32(v35, vrsqrts_f32(vmul_f32(v35, v35), v34));
    --v36;
  }
  while (v36);
  float32x2_t v37 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v32, 0), (int8x8_t)v28);
  __asm { FMOV            V6.2S, #1.0 }
  float32x2_t v43 = vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v34), 0), _D6, (int8x8_t)v35));
  float32x2_t v44 = vrecpe_f32(v43);
  int v45 = 4;
  do
  {
    float32x2_t v44 = vmul_f32(v44, vrecps_f32(v43, v44));
    --v45;
  }
  while (v45);
  float32x4_t v46 = vmulq_n_f32(v31, v44.f32[0]);
  v46.i32[3] = 0;
  float32x4_t v47 = vmulq_f32(vsubq_f32(v14, v17), v46);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  float32x2_t v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
  float32x4_t v49 = vmulq_f32(vsubq_f32(v13, v17), v46);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  float32x2_t v50 = vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcltz_f32(vmul_f32(v48, v50)), 0), *(int8x8_t *)v14.f32).u32[0] != -1) {
    goto LABEL_11;
  }
  float32x4_t v51 = vmulq_f32(v15, v46);
  v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
  float32x2_t v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
  float32x2_t v53 = vrecpe_f32(v52);
  int v54 = 4;
  do
  {
    float32x2_t v53 = vmul_f32(v53, vrecps_f32(v52, v53));
    --v54;
  }
  while (v54);
  float32x4_t v55 = vmlaq_n_f32(v14, v15, vmul_f32(v53, vneg_f32(v48)).f32[0]);
  v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
  float32x4_t v56 = vsubq_f32(v55, v17);
  float32x4_t v57 = vmulq_f32(v18, v56);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  *(float32x2_t *)v57.f32 = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32);
  float32x4_t v58 = vmulq_f32(v20, v56);
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  *(float32x2_t *)v58.f32 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
  *(float32x2_t *)v56.f32 = vmul_f32(vsub_f32(vmul_f32(v26, *(float32x2_t *)v57.f32), vmul_f32(v24, *(float32x2_t *)v58.f32)), v37);
  *(float32x2_t *)v58.f32 = vmul_f32(vsub_f32(vmul_f32(v22, *(float32x2_t *)v58.f32), vmul_f32(v24, *(float32x2_t *)v57.f32)), v37);
  float32x2_t v59 = (float32x2_t)vdup_n_s32(0x3F800001u);
  if (vuzp1_s8((int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16((int16x4_t)vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v56.f32, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(v59, *(float32x2_t *)v56.f32)), vand_s8((int8x8_t)vcge_f32(v59, *(float32x2_t *)v58.f32), (int8x8_t)vcge_f32(*(float32x2_t *)v58.f32, (float32x2_t)0xB4000000B4000000))), (int8x8_t)vcgt_f32(v59, vadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v58.f32))), 0), 0xFuLL)), *(int8x8_t *)v55.f32).u32[0] == -1)
  {
    *a7 = v55;
    *a6 = v55;
  }
  else
  {
LABEL_11:
    float32x2_t v60 = vmul_f32(v48, v48);
    float32x2_t v61 = vmul_f32(v50, v50);
    float32x4_t v96 = 0u;
    float32x4_t v97 = 0u;
    float32x4_t v94 = v46;
    float32x2_t v95 = v50;
    float32x2_t v93 = v48;
    *(double *)v62.i64 = physx::Gu::distanceSegmentSegmentSquared4((int32x4_t *)a1, (int32x2_t *)&v101, (int32x4_t *)a3, (int32x4_t *)&v100, (int32x4_t *)a4, (int32x4_t *)&v98, (int32x4_t *)a3, (int32x4_t *)&v99, (int32x4_t *)a3, (int32x4_t *)&v100, &v97, &v96);
    float32x2_t v63 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 0);
    float32x2_t v64 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1);
    float32x2_t v65 = (float32x2_t)vdup_laneq_s32(v62, 2);
    int8x16_t v66 = (int8x16_t)vmlaq_n_f32(*a1, v101, v97.f32[0]);
    v66.i64[1] = vextq_s8(v66, v66, 8uLL).u32[0];
    float32x4_t v67 = vmlsq_lane_f32(*a1, v94, v93, 0);
    v67.i64[1] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
    float32x4_t v68 = vsubq_f32(v67, *a3);
    float32x4_t v69 = vmlsq_lane_f32(*a2, v94, v95, 0);
    v69.i64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u32[0];
    float32x4_t v70 = vsubq_f32(v69, *a3);
    int8x16_t v71 = (int8x16_t)vmlaq_n_f32(*a3, v100, v96.f32[0]);
    v71.i64[1] = vextq_s8(v71, v71, 8uLL).u32[0];
    int8x16_t v72 = (int8x16_t)vmlaq_lane_f32(*a1, v101, *(float32x2_t *)v97.f32, 1);
    v72.i64[1] = vextq_s8(v72, v72, 8uLL).u32[0];
    int8x16_t v73 = (int8x16_t)vmlaq_lane_f32(*a4, v98, *(float32x2_t *)v96.f32, 1);
    v73.i64[1] = vextq_s8(v73, v73, 8uLL).u32[0];
    int8x16_t v74 = (int8x16_t)vmlaq_laneq_f32(*a1, v101, v97, 2);
    v74.i64[1] = vextq_s8(v74, v74, 8uLL).u32[0];
    int8x16_t v75 = (int8x16_t)vmlaq_laneq_f32(*a3, v99, v96, 2);
    int8x16_t v76 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcge_f32(v63, v64), (int8x8_t)vcgt_f32(v65, v64)), 0);
    int8x16_t v77 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v64, v63), (int8x8_t)vcgt_f32(v65, v63)), 0);
    float32x2_t v78 = (float32x2_t)vbsl_s8(*(int8x8_t *)v77.i8, (int8x8_t)v63, vbsl_s8(*(int8x8_t *)v76.i8, (int8x8_t)v64, (int8x8_t)v65));
    int8x16_t v79 = vbslq_s8(v77, v66, vbslq_s8(v76, v72, v74));
    int8x16_t v80 = (int8x16_t)vdupq_lane_s32(vcgt_f32(v78, v60), 0);
    int8x16_t v81 = vbslq_s8(v80, *(int8x16_t *)a1, v79);
    v75.i64[1] = vextq_s8(v75, v75, 8uLL).u32[0];
    int8x16_t v82 = (int8x16_t)vdupq_lane_s32(vcgt_f32(v61, v60), 0);
    int8x16_t v83 = vbslq_s8(v77, v71, vbslq_s8(v76, v73, v75));
    float32x4_t v84 = vmulq_f32(v100, v68);
    v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
    *(float32x2_t *)v84.f32 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
    float32x4_t v85 = vmulq_f32(v68, v99);
    v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
    *(float32x2_t *)v85.f32 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
    *(float32x2_t *)v74.i8 = vmul_f32(vsub_f32(vmul_f32(v26, *(float32x2_t *)v84.f32), vmul_f32(v24, *(float32x2_t *)v85.f32)), v37);
    *(float32x2_t *)v84.f32 = vmul_f32(vsub_f32(vmul_f32(v22, *(float32x2_t *)v85.f32), vmul_f32(v24, *(float32x2_t *)v84.f32)), v37);
    *(int32x2_t *)v75.i8 = vdup_n_s32(0x3F800001u);
    *(int8x8_t *)v84.f32 = vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v74.i8, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v74.i8)), vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v84.f32), (int8x8_t)vcge_f32(*(float32x2_t *)v84.f32, (float32x2_t)0xB4000000B4000000))), (int8x8_t)vcgt_f32(*(float32x2_t *)v75.i8, vadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v84.f32)));
    float32x4_t v86 = vmulq_f32(v100, v70);
    v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
    *(float32x2_t *)v86.f32 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
    float32x4_t v87 = vmulq_f32(v99, v70);
    v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
    *(float32x2_t *)v87.f32 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
    *(float32x2_t *)v68.f32 = vmul_f32(vsub_f32(vmul_f32(v26, *(float32x2_t *)v86.f32), vmul_f32(v24, *(float32x2_t *)v87.f32)), v37);
    *(float32x2_t *)v86.f32 = vmul_f32(vsub_f32(vmul_f32(v22, *(float32x2_t *)v87.f32), vmul_f32(v24, *(float32x2_t *)v86.f32)), v37);
    *(int8x8_t *)v86.f32 = vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v68.f32, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v68.f32)), vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v86.f32), (int8x8_t)vcge_f32(*(float32x2_t *)v86.f32, (float32x2_t)0xB4000000B4000000))), (int8x8_t)vcgt_f32(*(float32x2_t *)v75.i8, vadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v86.f32)));
    int32x4_t v88 = vdupq_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v86.f32, *(int8x8_t *)v84.f32), 0);
    int8x16_t v89 = (int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v86.f32, (int8x8_t)vcgt_f32(v78, v61)), 0), 0x1FuLL));
    int8x16_t v90 = vbslq_s8(v89, *(int8x16_t *)a2, v79);
    int8x16_t v91 = (int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v84.f32, 0), 0x1FuLL));
    int8x16_t v92 = (int8x16_t)vcltzq_s32(vshlq_n_s32(v88, 0x1FuLL));
    *(int8x16_t *)a6 = vbslq_s8(v92, vbslq_s8(v82, *(int8x16_t *)a1, *(int8x16_t *)a2), vbslq_s8(v91, v81, v90));
    *(int8x16_t *)a7 = vbslq_s8(v92, vbslq_s8(v82, (int8x16_t)v67, (int8x16_t)v69), vbslq_s8(v91, vbslq_s8(v80, (int8x16_t)v67, v83), vbslq_s8(v89, (int8x16_t)v69, v83)));
  }
}

uint64_t physx::Gu::epaPenetration(uint64_t a1)
{
  double v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = v5;
  float v7 = *(float *)&v4;
  int v9 = v8;
  int v10 = v3;
  float v12 = v11;
  float32x4_t v14 = v13;
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (v3)
  {
    float32x4_t v15 = v2;
    float32x4_t v16 = v1;
    uint64_t v17 = v3;
    float32x4_t v18 = v32;
    float32x4_t v19 = v33;
    do
    {
      unsigned int v20 = *v16++;
      *(double *)v21.i64 = (*(double (**)(void *, void))*v14)(v14, v20);
      *v19++ = v21;
      unsigned int v22 = *v15++;
      *(double *)v23.i64 = (*(double (**)(uint64_t *, void))*v12)(v12, v22);
      *v18++ = v23;
      --v17;
    }
    while (v17);
  }
  int v25 = 0;
  float32x2_t v26 = v27;
  v27[1920] = 0;
  char v28 = 0;
  int v29 = 0;
  int v30 = 0;
  int v31 = 0;
  return physx::Gu::EPA::PenetrationDepth((uint64_t)&v25, v14, v12, v33, v32, v10, v9, v6, v7);
}

uint64_t physx::Gu::EPA::PenetrationDepth(uint64_t _X0, void *a2, uint64_t *a3, float32x4_t *a4, float32x4_t *a5, int a6, int a7, uint64_t a8, float a9)
{
  float32x4_t v13 = a2;
  uint64_t v14 = _X0;
  uint64_t v149 = *MEMORY[0x263EF8340];
  __asm
  {
    PRFM            #0, [X0,#0xA10]
    PRFM            #0, [X0,#0xA90]
  }
  *(int32x2_t *)&long long v9 = vdup_n_s32(0x7F7FFFFFu);
  float32x2_t v146 = (float32x2_t)v9;
  float32x4_t v20 = *a4;
  *(float32x4_t *)(_X0 + 528) = *a4;
  float32x4_t v21 = a4[1];
  *(float32x4_t *)(_X0 + 544) = v21;
  float32x4_t v22 = a4[2];
  *(float32x4_t *)(_X0 + 560) = v22;
  float32x4_t v23 = a4[3];
  *(float32x4_t *)(_X0 + 576) = v23;
  float32x4_t v24 = *a5;
  *(float32x4_t *)(_X0 + 1552) = *a5;
  float32x4_t v25 = a5[1];
  *(float32x4_t *)(_X0 + 1568) = v25;
  float32x4_t v26 = a5[2];
  *(float32x4_t *)(_X0 + 1584) = v26;
  float32x4_t v27 = a5[3];
  *(float32x4_t *)(_X0 + 1600) = v27;
  int v145 = 0;
  *(_DWORD *)_X0 = 0;
  long long v138 = v9;
  switch(a6)
  {
    case 1:
      float32x4_t v143 = vsubq_f32(v20, v24);
      long long v147 = xmmword_23435FD50;
      v148[0] = (float32x4_t)xmmword_23437C0A0;
      *(double *)v28.i64 = (*(double (**)(void *, float32x4_t *))(*a2 + 8))(a2, v148);
      float32x4_t v141 = v28;
      *(double *)v21.i64 = (*(double (**)(uint64_t *, long long *))(*a3 + 8))(a3, &v147);
      *(float32x4_t *)(v14 + 544) = v141;
      *(float32x4_t *)(v14 + 1568) = v21;
      v22.i64[0] = v143.i64[0];
      *(int16x4_t *)v21.f32 = vmovn_s32(vceqq_f32(v143, vsubq_f32(v141, v21)));
      *(int8x8_t *)v21.f32 = vuzp1_s8(*(int8x8_t *)v21.f32, *(int8x8_t *)v21.f32);
      if ((~v21.i32[0] & 0xFFFFFF) == 0) {
        return 7;
      }
      goto LABEL_3;
    case 2:
LABEL_3:
      BOOL v29 = physx::Gu::EPA::expandSegment(v14, (uint64_t)v13, (uint64_t)a3, &v145, &v146, *(double *)v21.i64, *(double *)v22.i64, *(double *)v25.i64, *(double *)v26.i64, (int32x4_t)v23, (int32x4_t)v27);
      goto LABEL_5;
    case 3:
      BOOL v29 = physx::Gu::EPA::expandTriangle((int *)_X0, &v145, &v146);
LABEL_5:
      long long v9 = v138;
      if (!v29) {
        return 7;
      }
      goto LABEL_15;
    case 4:
      float32x4_t v30 = vsubq_f32(v20, v24);
      int8x16_t v31 = (int8x16_t)vsubq_f32(vsubq_f32(v21, v25), v30);
      int8x16_t v32 = (int8x16_t)vsubq_f32(vsubq_f32(v22, v26), v30);
      int8x8_t v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), *(float32x2_t *)v32.i8);
      *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v32.i8), *(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 4uLL);
      v34.i64[1] = v33.u32[0];
      *(float32x2_t *)v32.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32), vmul_f32((float32x2_t)v33.u32[0], (float32x2_t)v33.u32[0]));
      float32x2_t v35 = vpadd_f32(*(float32x2_t *)v32.i8, *(float32x2_t *)v32.i8);
      float32x2_t v36 = vrsqrte_f32(v35);
      int v37 = 4;
      do
      {
        float32x2_t v36 = vmul_f32(v36, vrsqrts_f32(vmul_f32(v36, v36), v35));
        --v37;
      }
      while (v37);
      __asm { FMOV            V19.2S, #1.0 }
      float32x2_t v39 = vmul_f32(v35, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v35), 0), _D19, (int8x8_t)v36));
      float32x2_t v40 = vrecpe_f32(v39);
      int v41 = 4;
      do
      {
        float32x2_t v40 = vmul_f32(v40, vrecps_f32(v39, v40));
        --v41;
      }
      while (v41);
      float32x4_t v43 = vmulq_n_f32(v34, v40.f32[0]);
      v43.i32[3] = 0;
      float32x4_t v44 = vmulq_f32(vsubq_f32(vsubq_f32(v23, v27), v30), v43);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      if (vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0] > 0.0)
      {
        *(float32x4_t *)(_X0 + 1584) = v25;
        *(float32x4_t *)(_X0 + 544) = v22;
        *(float32x4_t *)(_X0 + 560) = v21;
        *(float32x4_t *)(_X0 + 1568) = v26;
      }
      int v45 = physx::Gu::EPA::addFacet(_X0, 0, 1u, 2u, &v146);
      float32x4_t v46 = physx::Gu::EPA::addFacet(v14, 0, 3u, 1u, &v146);
      float32x4_t v47 = physx::Gu::EPA::addFacet(v14, 0, 2u, 3u, &v146);
      float32x2_t v48 = physx::Gu::EPA::addFacet(v14, 1u, 3u, 2u, &v146);
      if (!*(_DWORD *)v14) {
        return 7;
      }
      v45[1].i64[1] = (uint64_t)v46;
      v45[3].i8[0] = 2;
      v46[2].i64[1] = (uint64_t)v45;
      v46[3].i8[2] = 0;
      v45[2].i64[0] = (uint64_t)v48;
      v45[3].i8[1] = 2;
      v48[2].i64[1] = (uint64_t)v45;
      v48[3].i8[2] = 1;
      v45[2].i64[1] = (uint64_t)v47;
      v45[3].i8[2] = 0;
      v47[1].i64[1] = (uint64_t)v45;
      v47[3].i8[0] = 2;
      v46[1].i64[1] = (uint64_t)v47;
      v46[3].i8[0] = 2;
      v47[2].i64[1] = (uint64_t)v46;
      v47[3].i8[2] = 0;
      v46[2].i64[0] = (uint64_t)v48;
      v46[3].i8[1] = 0;
      v48[1].i64[1] = (uint64_t)v46;
      v48[3].i8[0] = 1;
      v47[2].i64[0] = (uint64_t)v48;
      v47[3].i8[1] = 1;
      v48[2].i64[0] = (uint64_t)v47;
      v48[3].i8[1] = 1;
      int v145 = 4;
      float32x4_t v13 = a2;
      long long v9 = v138;
LABEL_15:
      int v132 = a7;
      float32x4_t v49 = (const float *)(v13[1] + 20);
      float32x2_t v50 = vld1_dup_f32(v49);
      float32x4_t v51 = (const float *)(a3[1] + 20);
      float32x2_t v52 = vld1_dup_f32(v51);
      float32x2_t v53 = (_DWORD *)(v14 + 7704);
      float32x2_t v54 = vmul_f32(vmin_f32(v50, v52), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
      float32x4_t v55 = (int *)(v14 + 7968);
      uint64_t v56 = v14 + 7708;
      _X22 = v14 + 6672;
      signed int v58 = v145;
      float v133 = a3;
      float v134 = (unsigned char *)(v14 + 7700);
      float32x2_t v135 = v13;
      break;
    default:
      goto LABEL_15;
  }
  while (1)
  {
    uint64_t v59 = *(unsigned int *)(v14 + 8224);
    if (v59)
    {
      float32x2_t v60 = v55;
      do
      {
        int v62 = *v60++;
        int v61 = v62;
        float32x2_t v63 = (_DWORD *)(v14 + 7704);
        if (*v53 - 1 != v62)
        {
          uint64_t v64 = *(unsigned int *)(v14 + 7964);
          *(_DWORD *)(v14 + 7964) = v64 + 1;
          float32x2_t v63 = (_DWORD *)(v56 + 4 * v64);
        }
        *float32x2_t v63 = v61;
        --v59;
      }
      while (v59);
    }
    *(_DWORD *)(v14 + 8224) = 0;
    unsigned int v65 = *(_DWORD *)v14 - 1;
    *(_DWORD *)uint64_t v14 = v65;
    int8x16_t v66 = *(float32x4_t ***)(v14 + 8);
    float32x4_t v67 = *v66;
    float32x4_t v68 = v66[v65];
    if (v65 < 2)
    {
      unsigned int v75 = 0;
    }
    else
    {
      int v69 = 0;
      unsigned int v70 = 0;
      float v71 = v68[1].f32[0];
      unsigned int v72 = 1;
      while (1)
      {
        unsigned int v73 = v69 + 2;
        int8x16_t v66 = *(float32x4_t ***)(v14 + 8);
        _CF = v66[v73][1].f32[0] >= v66[v72][1].f32[0] || v73 >= v65;
        unsigned int v75 = _CF ? v72 : v72 + 1;
        int8x16_t v76 = v66[v75];
        if (v71 < v76[1].f32[0]) {
          break;
        }
        v66[v70] = v76;
        int v69 = 2 * v75;
        unsigned int v72 = (2 * v75) | 1;
        unsigned int v70 = v75;
        if (v72 >= v65)
        {
          int8x16_t v66 = *(float32x4_t ***)(v14 + 8);
          goto LABEL_34;
        }
      }
      unsigned int v75 = v70;
    }
LABEL_34:
    v66[v75] = v68;
    v67[3].i8[7] = 0;
    if (v67[3].i8[6]) {
      goto LABEL_55;
    }
    long long v139 = v9;
    __asm { PRFM            #0, [X22] }
    _X8 = v14 + 6800;
    __asm { PRFM            #0, [X8] }
    _X8 = v14 + 6928;
    __asm { PRFM            #0, [X8] }
    long long v147 = 0uLL;
    long long v147 = (__int128)*v67;
    f32 = v67[1].f32;
    float32x2_t v83 = vld1_dup_f32(f32);
    signed int v144 = v58;
    float32x2_t v137 = v67;
    *(double *)v84.i64 = (*(double (**)(void *, long long *))(*v13 + 8))(v13, &v147);
    float32x4_t v142 = v84;
    float32x4_t v85 = vnegq_f32((float32x4_t)v147);
    v85.i32[3] = 0;
    v148[0] = v85;
    *(double *)v86.i64 = (*(double (**)(uint64_t *, float32x4_t *))(*a3 + 8))(a3, v148);
    float32x4_t v87 = vsubq_f32(v142, v86);
    _X10 = (float32x4_t *)(v14 + 16 * v144);
    __asm
    {
      PRFM            #0, [X10,#0x290]
      PRFM            #0, [X10,#0x690]
    }
    float32x4_t v91 = vmulq_f32(v87, (float32x4_t)v147);
    v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
    float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32(v54, vabd_f32(v92, v83)), 0), *(int8x8_t *)v86.f32).u32[0] == -1) {
      break;
    }
    int v93 = 0;
    unsigned int v94 = 0;
    uint64_t v95 = 0;
    *((void *)&v96 + 1) = *((void *)&v139 + 1);
    *(float32x2_t *)&long long v96 = vmin_f32(*(float32x2_t *)&v139, v92);
    float32x2_t v146 = (float32x2_t)v96;
    _X10[33] = v142;
    _X10[97] = v86;
    *(_DWORD *)(v14 + 7696) = 0;
    *float v134 = 0;
    float32x4_t v67 = v137;
    v137[3].i8[6] = 1;
    do
    {
      int v97 = 0;
      int v98 = v137[3].i8[v95];
      v148[0].i64[0] = v137[1].i64[v95 + 1];
      v148[0].i32[2] = v98;
      int v99 = 1;
      while (1)
      {
        float32x4_t v100 = (unsigned int *)&v148[v97];
        float32x4_t v101 = *(float32x4_t **)v100;
        if (!*(unsigned char *)(*(void *)v100 + 54)) {
          break;
        }
LABEL_44:
        int v99 = v97--;
        if (!v99) {
          goto LABEL_45;
        }
      }
      uint64_t v102 = v100[2];
      float32x4_t v103 = vmulq_f32(*v101, vsubq_f32(v87, vsubq_f32(*(float32x4_t *)(v14 + 528 + 16 * v101[3].i8[3]), *(float32x4_t *)(v14 + 1552 + 16 * v101[3].i8[3]))));
      v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
      if (vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32).f32[0] >= 0.0)
      {
        v101[3].i8[6] = 1;
        uint64_t v104 = physx::Gu::lookUp[v102];
        uint64_t v105 = physx::Gu::lookUp[v104];
        uint64_t v106 = v101[1].i64[v105 + 1];
        LODWORD(v105) = v101[3].i8[v105];
        *(void *)float32x4_t v100 = v106;
        _OWORD v100[2] = v105;
        uint64_t v107 = v101[1].i64[v104 + 1];
        LODWORD(v105) = v101[3].i8[v104];
        int v97 = v99 + 1;
        float v108 = (_OWORD *)v148[v99].f32;
        *(void *)float v108 = v107;
        *((_DWORD *)v108 + 2) = v105;
        if (!v101[3].i8[7])
        {
          int v109 = v101[3].u8[8];
          uint64_t v110 = *(unsigned int *)(v14 + 8224);
          *(_DWORD *)(v14 + 8224) = v110 + 1;
          *(_DWORD *)(v14 + 7968 + 4 * v110) = v109;
        }
        goto LABEL_44;
      }
      if (v94 <= 0x3F)
      {
        uint64_t v111 = _X22 + 16 * v94;
        *(_DWORD *)(v14 + 7696) = v94 + 1;
        *(void *)uint64_t v111 = v101;
        *(_DWORD *)(v111 + 8) = v102;
        ++v94;
        goto LABEL_44;
      }
      int v93 = 1;
      *float v134 = 1;
LABEL_45:
      ++v95;
    }
    while (v95 != 3);
    if (!v94 || v93 || v94 > *(_DWORD *)(v14 + 7964) - *(_DWORD *)(v14 + 7704) + 64)
    {
      uint64_t v122 = v135[1];
      uint64_t v123 = a3[1];
LABEL_63:
      physx::Gu::calculateContactInformation(v14 + 528, v14 + 1552, v67, v122, v123, v132, a8);
      return 6;
    }
    long long v140 = v96;
    float v112 = physx::Gu::EPA::addFacet(v14, *(char *)(*(void *)(v14 + 6672) + 51 + physx::Gu::lookUp[*(unsigned int *)(v14 + 6680)]), *(char *)(*(void *)(v14 + 6672) + 51 + *(unsigned int *)(v14 + 6680)), v144, &v146);
    uint64_t v113 = *(void *)(v14 + 6672);
    uint64_t v114 = *(unsigned int *)(v14 + 6680);
    v112[1].i64[1] = v113;
    v112[3].i8[0] = v114;
    *(void *)(v113 + 8 * v114 + 24) = v112;
    *(unsigned char *)(v113 + v114 + 48) = 0;
    float v136 = v112;
    if (v94 >= 2)
    {
      uint64_t v115 = 0;
      float v116 = v112;
      do
      {
        float v112 = physx::Gu::EPA::addFacet(v14, *(char *)(*(void *)(v14 + v115 + 6688)+ 51+ physx::Gu::lookUp[*(unsigned int *)(v14 + v115 + 6696)]), *(char *)(*(void *)(v14 + v115 + 6688) + 51 + *(unsigned int *)(v14 + v115 + 6696)), v144, &v146);
        uint64_t v117 = *(void *)(v14 + v115 + 6688);
        uint64_t v118 = *(unsigned int *)(v14 + v115 + 6696);
        v112[1].i64[1] = v117;
        v112[3].i8[0] = v118;
        *(void *)(v117 + 8 * v118 + 24) = v112;
        *(unsigned char *)(v117 + v118 + 48) = 0;
        v112[2].i64[1] = (uint64_t)v116;
        v112[3].i8[2] = 1;
        v116[2].i64[0] = (uint64_t)v112;
        v116[3].i8[1] = 2;
        v115 += 16;
        float v116 = v112;
      }
      while (16 * v94 - 16 != v115);
    }
    signed int v58 = v144 + 1;
    float32x4_t v13 = v135;
    v136[2].i64[1] = (uint64_t)v112;
    v136[3].i8[2] = 1;
    v112[2].i64[0] = (uint64_t)v136;
    v112[3].i8[1] = 2;
    uint64_t v56 = v14 + 7708;
    a3 = v133;
    long long v9 = v140;
    float32x4_t v55 = (int *)(v14 + 7968);
    float32x4_t v67 = v137;
LABEL_55:
    int v119 = v67[3].u8[8];
    float v120 = (_DWORD *)(v14 + 7704);
    if (*v53 - 1 != v119)
    {
      uint64_t v121 = *(unsigned int *)(v14 + 7964);
      *(_DWORD *)(v14 + 7964) = v121 + 1;
      float v120 = (_DWORD *)(v56 + 4 * v121);
    }
    *float v120 = v119;
    if (!*(_DWORD *)v14 || *(float *)&v9 <= *(float *)(**(void **)(v14 + 8) + 16) || v58 == 64)
    {
      uint64_t v122 = v13[1];
      uint64_t v123 = a3[1];
      goto LABEL_63;
    }
  }
  physx::Gu::calculateContactInformation(v14 + 528, v14 + 1552, v137, v135[1], a3[1], v132, a8);
  if (v132)
  {
    float32x4_t v125 = vsubq_f32(*(float32x4_t *)a8, *(float32x4_t *)(a8 + 16));
    float32x4_t v126 = vmulq_f32(v125, v125);
    v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
    float32x2_t v127 = vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32);
    float32x2_t v128 = vrsqrte_f32(v127);
    int v129 = 4;
    do
    {
      float32x2_t v128 = vmul_f32(v128, vrsqrts_f32(vmul_f32(v128, v128), v127));
      --v129;
    }
    while (v129);
    __asm { FMOV            V5.2S, #1.0 }
    if ((float)((float)(0.001 * a9) + vabs_f32(*(float32x2_t *)(a8 + 64)).f32[0]) < *(float *)vand_s8((int8x8_t)vmul_f32(v127, (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32(v127), _D5, (int8x8_t)v128)), (int8x8_t)vcgtz_f32(v127)).i32)return 6; {
  }
    }
  return 5;
}

float32x4_t *physx::Gu::EPA::addFacet(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, float32x2_t *a5)
{
  int v5 = *(_DWORD *)(a1 + 7964);
  if (v5)
  {
    unsigned int v6 = v5 - 1;
    *(_DWORD *)(a1 + 7964) = v6;
    unsigned int v7 = *(_DWORD *)(a1 + 4 * v6 + 7708);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 7704);
    *(_DWORD *)(a1 + 7704) = v7 + 1;
  }
  uint64_t v8 = v7;
  _X9 = (float32x4_t *)(a1 + ((unint64_t)v7 << 6));
  int v10 = _X9 + 161;
  __asm { PRFM            #0, [X9,#0xA90] }
  _X9[164].i16[3] = 0;
  _X9[164].i8[3] = a2;
  _X9[164].i8[4] = a3;
  _X9[164].i8[5] = a4;
  _X9[162].i64[1] = 0;
  _X9[163].i64[1] = 0;
  _X9[163].i64[0] = 0;
  _X9[164].i8[2] = -1;
  _X9[164].i16[0] = -1;
  _X9[164].i8[8] = v7;
  float32x4_t v16 = vsubq_f32(*(float32x4_t *)(a1 + 528 + 16 * a2), *(float32x4_t *)(a1 + 1552 + 16 * a2));
  int8x16_t v17 = (int8x16_t)vsubq_f32(vsubq_f32(*(float32x4_t *)(a1 + 528 + 16 * a3), *(float32x4_t *)(a1 + 1552 + 16 * a3)), v16);
  int8x16_t v18 = (int8x16_t)vsubq_f32(vsubq_f32(*(float32x4_t *)(a1 + 528 + 16 * a4), *(float32x4_t *)(a1 + 1552 + 16 * a4)), v16);
  int8x8_t v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 4uLL), *(float32x2_t *)v18.i8);
  *(int8x8_t *)v20.f32 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), *(float32x2_t *)v18.i8), *(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 4uLL);
  v20.i64[1] = v19.u32[0];
  float32x4_t v21 = &_X9[164].i8[7];
  *(float32x2_t *)v18.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), vmul_f32((float32x2_t)v19.u32[0], (float32x2_t)v19.u32[0]));
  float32x2_t v22 = vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v22, (float32x2_t)0x3400000034000000), 0), (int8x8_t)v22, _D4);
  float32x2_t v25 = vrsqrte_f32(v24);
  int v26 = 4;
  do
  {
    float32x2_t v25 = vmul_f32(v25, vrsqrts_f32(vmul_f32(v25, v25), v24));
    --v26;
  }
  while (v26);
  float32x4_t v27 = vmulq_n_f32(v20, v25.f32[0]);
  v27.i32[3] = 0;
  float32x4_t v28 = vmulq_f32(v16, v27);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  float32x2_t v29 = vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
  *int v10 = v27;
  *(_DWORD *)(a1 + (v8 << 6) + 2592) = v29.i32[0];
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(*a5, v29), (int8x8_t)vcgt_f32(v22, (float32x2_t)0x3400000034000000)), 0), (int8x8_t)v29).u32[0] == -1)
  {
    unsigned int v31 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      unsigned int v32 = *(_DWORD *)a1;
      while (1)
      {
        unsigned int v33 = v32 - 1;
        unsigned int v34 = (v32 - 1) >> 1;
        uint64_t v35 = *(void *)(a1 + 8);
        uint64_t v36 = *(void *)(v35 + 8 * v34);
        if (v29.f32[0] >= *(float *)(v36 + 16)) {
          break;
        }
        *(void *)(v35 + 8 * v32) = v36;
        unsigned int v32 = v33 >> 1;
        if (v33 <= 1) {
          goto LABEL_15;
        }
      }
      unsigned int v34 = v32;
    }
    else
    {
      unsigned int v34 = 0;
    }
LABEL_15:
    *(void *)(*(void *)(a1 + 8) + 8 * v34) = v10;
    *(_DWORD *)a1 = v31 + 1;
    char v30 = 1;
  }
  else
  {
    char v30 = 0;
  }
  *float32x4_t v21 = v30;
  return v10;
}

BOOL physx::Gu::EPA::expandSegment(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, float32x2_t *a5, double a6, double a7, double a8, double a9, int32x4_t a10, int32x4_t a11)
{
  float32x4_t v15 = vsubq_f32(*(float32x4_t *)(a1 + 528), *(float32x4_t *)(a1 + 1552));
  float32x4_t v16 = vsubq_f32(*(float32x4_t *)(a1 + 544), *(float32x4_t *)(a1 + 1568));
  int32x4_t v17 = (int32x4_t)vabdq_f32(v16, v15);
  float32x2_t v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 0);
  *(int32x2_t *)a10.i8 = vdup_lane_s32(*(int32x2_t *)v17.i8, 1);
  *(int32x2_t *)v17.i8 = vdup_laneq_s32(v17, 2);
  *(int32x2_t *)a11.i8 = vcgt_f32(v18, *(float32x2_t *)a10.i8);
  *(int8x8_t *)a10.i8 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)a11.i8, (int8x8_t)vcgt_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)a10.i8)), 0), *(int8x8_t *)v15.f32);
  a11.i32[0] = -1;
  int8x16_t v19 = (int8x16_t)vsubq_f32(v16, v15);
  int8x16_t v20 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a10, a11), 0), (int8x16_t)xmmword_23435FD60, vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16((int16x4_t)vcgt_f32(v18, *(float32x2_t *)v17.i8), 0)), (int8x16_t)xmmword_23435FD80, (int8x16_t)xmmword_23435FD50));
  v17.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
  int8x8_t v21 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 4uLL), *(float32x2_t *)v20.i8), (float32x2_t)vext_s8(*(int8x8_t *)v20.i8, *(int8x8_t *)v17.i8, 4uLL), *(float32x2_t *)v19.i8);
  *(int8x8_t *)v22.f32 = vext_s8(v21, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v17.i8), *(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)), 4uLL);
  v22.i64[1] = v21.u32[0];
  *(float32x2_t *)v20.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), vmul_f32((float32x2_t)v21.u32[0], (float32x2_t)v21.u32[0]));
  float32x2_t v23 = vpadd_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8);
  float32x2_t v24 = vrsqrte_f32(v23);
  int v25 = 4;
  do
  {
    float32x2_t v24 = vmul_f32(v24, vrsqrts_f32(vmul_f32(v24, v24), v23));
    --v25;
  }
  while (v25);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v31 = vmul_f32(v23, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v23), 0), _D4, (int8x8_t)v24));
  float32x2_t v32 = vrecpe_f32(v31);
  int v33 = 4;
  do
  {
    float32x2_t v32 = vmul_f32(v32, vrecps_f32(v31, v32));
    --v33;
  }
  while (v33);
  float32x4_t v34 = vmulq_n_f32(v22, v32.f32[0]);
  v34.i32[3] = 0;
  float32x4_t v35 = vnegq_f32(v34);
  v35.i32[3] = 0;
  float32x4_t v40 = v34;
  float32x4_t v41 = v35;
  *(double *)&long long v36 = (*(double (**)(uint64_t, float32x4_t *))(*(void *)a2 + 8))(a2, &v41);
  long long v39 = v36;
  *(double *)&long long v37 = (*(double (**)(uint64_t, float32x4_t *))(*(void *)a3 + 8))(a3, &v40);
  *(_OWORD *)(a1 + 560) = v39;
  *(_OWORD *)(a1 + 1584) = v37;
  return physx::Gu::EPA::expandTriangle((int *)a1, a4, a5);
}

BOOL physx::Gu::EPA::expandTriangle(int *a1, _DWORD *a2, float32x2_t *a3)
{
  *a2 = 3;
  int v5 = physx::Gu::EPA::addFacet((uint64_t)a1, 0, 1u, 2u, a3);
  unsigned int v6 = physx::Gu::EPA::addFacet((uint64_t)a1, 1u, 0, 2u, a3);
  int v7 = *a1;
  if (*a1)
  {
    v5[1].i64[1] = (uint64_t)v6;
    v5[3].i8[0] = 0;
    v6[1].i64[1] = (uint64_t)v5;
    v6[3].i8[0] = 0;
    v5[2].i64[0] = (uint64_t)v6;
    v5[3].i8[1] = 2;
    v6[2].i64[1] = (uint64_t)v5;
    v6[3].i8[2] = 1;
    v5[2].i64[1] = (uint64_t)v6;
    v5[3].i8[2] = 1;
    v6[2].i64[0] = (uint64_t)v5;
    v6[3].i8[1] = 2;
  }
  return v7 != 0;
}

uint64_t physx::Gu::calculateContactInformation(uint64_t result, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7 = a3[3].i8[3];
  float32x4_t v8 = *(float32x4_t *)(result + 16 * v7);
  uint64_t v9 = a3[3].i8[4];
  float32x4_t v10 = *(float32x4_t *)(result + 16 * v9);
  uint64_t v11 = a3[3].i8[5];
  float32x4_t v12 = *(float32x4_t *)(result + 16 * v11);
  float32x4_t v13 = *(float32x4_t *)(a2 + 16 * v7);
  float32x4_t v14 = *(float32x4_t *)(a2 + 16 * v9);
  float32x4_t v15 = *(float32x4_t *)(a2 + 16 * v11);
  float32x4_t v16 = vsubq_f32(v8, v13);
  float32x4_t v19 = vsubq_f32(v12, v15);
  float32x4_t v17 = vsubq_f32(vsubq_f32(v10, v14), v16);
  float32x4_t v18 = vsubq_f32(v19, v16);
  v19.i32[0] = a3[1].i32[0];
  float32x4_t v20 = vmulq_n_f32(*a3, v19.f32[0]);
  v20.i32[3] = 0;
  float32x4_t v21 = vsubq_f32(v20, v16);
  float32x4_t v22 = vmulq_f32(v17, v17);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  float32x2_t v23 = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  float32x4_t v24 = vmulq_f32(v17, v18);
  v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
  float32x2_t v25 = vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32);
  float32x4_t v26 = vmulq_f32(v18, v18);
  v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
  float32x2_t v27 = vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32);
  int8x16_t v28 = (int8x16_t)vmulq_f32(v17, v21);
  float32x2_t v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
  int8x16_t v30 = (int8x16_t)vmulq_f32(v18, v21);
  float32x2_t v31 = (float32x2_t)vextq_s8(v30, v30, 8uLL).u64[0];
  float32x2_t v32 = vneg_f32(v25);
  float32x2_t v33 = vmls_f32(vmul_f32(v23, v27), v25, v25);
  float32x2_t v34 = vrecpe_f32(v33);
  int v35 = 4;
  do
  {
    float32x2_t v34 = vmul_f32(v34, vrecps_f32(v33, v34));
    --v35;
  }
  while (v35);
  float32x2_t v36 = vpadd_f32(*(float32x2_t *)v28.i8, v29);
  float32x2_t v37 = vpadd_f32(*(float32x2_t *)v30.i8, v31);
  float32x2_t v38 = vpadd_f32(v36, v36);
  float32x2_t v39 = vpadd_f32(v37, v37);
  float32x2_t v40 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v33, (float32x2_t)0x3400000034000000), 0), (int8x8_t)v34);
  float32x2_t v41 = vmul_f32(vmla_f32(vmul_f32(v27, v38), v39, v32), v40);
  float32x2_t v42 = vmul_f32(vmla_f32(vmul_f32(v23, v39), v38, v32), v40);
  __asm { FMOV            V19.2S, #1.0 }
  LODWORD(v48) = vsub_f32(_D19, vadd_f32(v41, v42)).u32[0];
  float32x4_t v49 = vmulq_n_f32(v12, v42.f32[0]);
  v49.i32[3] = 0;
  float32x4_t v50 = vmlaq_n_f32(v49, v10, v41.f32[0]);
  v10.i32[1] = 0;
  v50.i64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u32[0];
  float32x4_t v51 = vmlaq_n_f32(v50, v8, v48);
  v8.i32[1] = 0;
  v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
  float32x4_t v52 = vmulq_n_f32(v15, v42.f32[0]);
  v52.i32[3] = 0;
  float32x4_t v53 = vmlaq_n_f32(v52, v14, v41.f32[0]);
  v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
  float32x4_t v54 = vmlaq_n_f32(v53, v13, v48);
  v54.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
  float32x2_t v55 = vabs_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 0));
  float32x4_t v56 = vnegq_f32(*a3);
  v56.i32[3] = 0;
  if ((a6 & 1) == 0)
  {
    v8.i32[0] = -*(char *)(a4 + 32);
    float32x2_t v57 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)*(unsigned int *)(a4 + 16), *(int8x8_t *)v8.f32), 0);
    v8.i32[0] = *(_DWORD *)(a5 + 16);
    v10.i32[0] = -*(char *)(a5 + 32);
    float32x2_t v58 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v8.f32, *(int8x8_t *)v10.f32), 0);
    float32x4_t v51 = vmlsq_lane_f32(v51, v56, v57, 0);
    v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
    float32x4_t v54 = vmlaq_n_f32(v54, v56, v58.f32[0]);
    v54.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
    float32x2_t v55 = vadd_f32(v55, vadd_f32(v57, v58));
  }
  *(float32x4_t *)a7 = v51;
  *(float32x4_t *)(a7 + 16) = v54;
  *(float32x4_t *)(a7 + 32) = v56;
  *(float32x2_t *)(a7 + 64) = vneg_f32(v55);
  return result;
}

void physx::Gu::closestPtPointTetrahedron(float32x4_t *a1, _OWORD *a2, _OWORD *a3, int *a4)
{
  uint64_t v131 = *MEMORY[0x263EF8340];
  float32x4_t v8 = *a1;
  float32x4_t v7 = a1[1];
  float32x4_t v9 = a1[2];
  float32x4_t v10 = a1[3];
  int8x16_t v11 = (int8x16_t)vsubq_f32(v7, *a1);
  int8x16_t v12 = (int8x16_t)vsubq_f32(v9, *a1);
  float32x2_t v13 = (float32x2_t)vextq_s8(v11, v11, 8uLL).u64[0];
  float32x2_t v14 = (float32x2_t)vextq_s8(v12, v12, 8uLL).u64[0];
  float32x2_t v15 = (float32x2_t)vextq_s8(v12, v12, 4uLL).u64[0];
  float32x2_t v16 = (float32x2_t)vextq_s8(v11, v11, 4uLL).u64[0];
  int8x8_t v17 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11.i8, v15), v16, *(float32x2_t *)v12.i8);
  *(int8x8_t *)v18.f32 = vext_s8(v17, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v12.i8), *(float32x2_t *)v11.i8, v14), 4uLL);
  v18.i64[1] = v17.u32[0];
  float32x2_t v19 = vpadd_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32), vmul_f32((float32x2_t)v17.u32[0], (float32x2_t)v17.u32[0]));
  float32x2_t v20 = vpadd_f32(v19, v19);
  float32x2_t v21 = vrsqrte_f32(v20);
  int v22 = 4;
  do
  {
    float32x2_t v21 = vmul_f32(v21, vrsqrts_f32(vmul_f32(v21, v21), v20));
    --v22;
  }
  while (v22);
  __asm { FMOV            V6.2S, #1.0 }
  float32x2_t v28 = vmul_f32(v20, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v20), 0), _D6, (int8x8_t)v21));
  float32x2_t v29 = vrecpe_f32(v28);
  int v30 = 4;
  do
  {
    float32x2_t v29 = vmul_f32(v29, vrecps_f32(v28, v29));
    --v30;
  }
  while (v30);
  float32x4_t v31 = vmulq_n_f32(v18, v29.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v32 = vsubq_f32(v10, v8);
  float32x4_t v33 = vmulq_f32(v32, v31);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  if (vabs_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32)).f32[0] < 0.0001)
  {
    *a4 = 3;
    float32x4_t v61 = *a1;
    float32x4_t v62 = a1[1];
    float32x4_t v63 = a1[2];
    float32x4_t v64 = vsubq_f32(v62, *a1);
    float32x4_t v65 = vsubq_f32(v63, *a1);
    int8x8_t v67 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v64.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL), *(float32x2_t *)v65.f32);
    *(int8x8_t *)v66.f32 = vext_s8(v67, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL), *(float32x2_t *)v65.f32), *(float32x2_t *)v64.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), 4uLL);
    v67.i32[1] = 0;
    float32x2_t v68 = vpadd_f32(vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), vmul_f32((float32x2_t)v67.u32[0], (float32x2_t)v67.u32[0]));
    float32x2_t v69 = vpadd_f32(v68, v68);
    if (v69.f32[0] <= 0.00000011921)
    {
      *a4 = 2;
      float32x4_t v106 = vsubq_f32(a1[1], *a1);
      float32x4_t v107 = vmulq_f32(v106, v106);
      v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
      float32x2_t v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v108), 0), *(int8x8_t *)a1->f32).u32[0] == -1)
      {
        *a4 = 1;
      }
      else
      {
        float32x2_t v109 = vrecpe_f32(v108);
        int v110 = 4;
        do
        {
          float32x2_t v109 = vmul_f32(v109, vrecps_f32(v108, v109));
          --v110;
        }
        while (v110);
      }
    }
    else if (v69.f32[0] != 0.0)
    {
      *(int8x8_t *)&v66.u32[2] = v67;
      float32x2_t v70 = (float32x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
      float32x2_t v71 = (float32x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u64[0];
      float32x2_t v72 = (float32x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 4uLL).u64[0];
      float32x2_t v73 = (float32x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL).u64[0];
      int8x8_t v74 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v62.f32, v72), v73, *(float32x2_t *)v63.f32);
      *(int8x8_t *)v75.f32 = vext_s8(v74, (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v63.f32), *(float32x2_t *)v62.f32, v71), 4uLL);
      v75.i64[1] = v74.u32[0];
      float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
      float32x2_t v77 = (float32x2_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL).u64[0];
      int8x8_t v78 = (int8x8_t)vmls_f32(vmul_f32(v77, *(float32x2_t *)v63.f32), v72, *(float32x2_t *)v61.f32);
      *(int8x8_t *)v79.f32 = vext_s8(v78, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v61.f32, v71), *(float32x2_t *)v63.f32, v76), 4uLL);
      v79.i64[1] = v78.u32[0];
      int8x8_t v80 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v61.f32, v73), v77, *(float32x2_t *)v62.f32);
      *(int8x8_t *)v81.f32 = vext_s8(v80, (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v62.f32), *(float32x2_t *)v61.f32, v70), 4uLL);
      v81.i64[1] = v80.u32[0];
      float32x4_t v82 = vmulq_f32(v75, v66);
      v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
      float32x2_t v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
      float32x4_t v84 = vmulq_f32(v79, v66);
      v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
      float32x2_t v85 = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32);
      float32x4_t v86 = vmulq_f32(v81, v66);
      v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
      float32x2_t v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v85), (int8x8_t)vcgez_f32(v83)), (int8x8_t)vcgez_f32(v87)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
      {
        float32x2_t v111 = vrecpe_f32(v69);
        int v112 = 4;
        do
        {
          float32x2_t v111 = vmul_f32(v111, vrecps_f32(v69, v111));
          --v112;
        }
        while (v112);
      }
      else
      {
        float32x4_t v88 = vnegq_f32(v61);
        v88.i32[3] = 0;
        float32x4_t v89 = vnegq_f32(v62);
        v89.i32[3] = 0;
        float32x4_t v90 = vmulq_f32(v88, v64);
        v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
        float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
        float32x4_t v92 = vmulq_f32(v64, v89);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v91), (int8x8_t)vclez_f32(v93)), (int8x8_t)vclez_f32(v87)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
        {
          float32x2_t v113 = vsub_f32(v91, v93);
          float32x2_t v114 = vrecpe_f32(v113);
          int v115 = 4;
          do
          {
            float32x2_t v114 = vmul_f32(v114, vrecps_f32(v113, v114));
            --v115;
          }
          while (v115);
          uint64_t v105 = 0;
          int v116 = 2;
          uint64_t v104 = 1;
        }
        else
        {
          float32x4_t v94 = vnegq_f32(v63);
          v94.i32[3] = 0;
          float32x4_t v95 = vmulq_f32(v89, v65);
          v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
          float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
          float32x4_t v97 = vmulq_f32(v64, v94);
          v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
          float32x2_t v98 = vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32);
          float32x4_t v99 = vmulq_f32(v65, v94);
          v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
          float32x2_t v100 = vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v96, v93), (int8x8_t)vcge_f32(v98, v100)), (int8x8_t)vclez_f32(v83)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
          {
            float32x2_t v117 = vadd_f32(vsub_f32(v96, v93), vsub_f32(v98, v100));
            float32x2_t v118 = vrecpe_f32(v117);
            int v119 = 4;
            do
            {
              float32x2_t v118 = vmul_f32(v118, vrecps_f32(v117, v118));
              --v119;
            }
            while (v119);
            int v116 = 2;
            uint64_t v105 = 1;
            uint64_t v104 = 2;
          }
          else
          {
            float32x4_t v101 = vmulq_f32(v88, v65);
            v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
            float32x2_t v102 = vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v102), (int8x8_t)vclez_f32(v100)), (int8x8_t)vclez_f32(v85)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
            {
              float32x2_t v120 = vsub_f32(v102, v100);
              float32x2_t v121 = vrecpe_f32(v120);
              int v122 = 4;
              do
              {
                float32x2_t v121 = vmul_f32(v121, vrecps_f32(v120, v121));
                --v122;
              }
              while (v122);
              uint64_t v105 = 0;
              uint64_t v104 = 2;
            }
            else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v102), (int8x8_t)vclez_f32(v91)), 0), *(int8x8_t *)v61.f32).u32[0] == -1)
            {
              uint64_t v105 = 0;
              uint64_t v104 = 1;
            }
            else
            {
              int8x8_t v103 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v93, v96), (int8x8_t)vcgez_f32(v93)), 0);
              uint64_t v104 = 1;
              if (vuzp1_s8(v103, v103).u32[0] == -1) {
                uint64_t v105 = 1;
              }
              else {
                uint64_t v105 = 2;
              }
            }
            int v116 = v104;
          }
        }
        float32x4_t v123 = a1[v104];
        long long v124 = a2[v105];
        long long v125 = a2[v104];
        long long v126 = a3[v105];
        long long v127 = a3[v104];
        *a1 = a1[v105];
        a1[1] = v123;
        *a2 = v124;
        a2[1] = v125;
        *a3 = v126;
        a3[1] = v127;
        *a4 = v116;
      }
    }
  }
  else
  {
    int8x16_t v34 = (int8x16_t)vsubq_f32(v10, v7);
    int8x16_t v35 = (int8x16_t)vsubq_f32(v9, v7);
    float32x2_t v36 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    float32x2_t v37 = (float32x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL).u64[0];
    float32x2_t v38 = vmul_f32(v14, *(float32x2_t *)v32.f32);
    int8x8_t v39 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v12.i8, v37), v15, *(float32x2_t *)v32.f32);
    *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(v38, *(float32x2_t *)v12.i8, v36), 4uLL);
    v40.i64[1] = v39.u32[0];
    int8x8_t v41 = (int8x8_t)vmls_f32(vmul_f32(v16, *(float32x2_t *)v32.f32), v37, *(float32x2_t *)v11.i8);
    *(int8x8_t *)v42.f32 = vext_s8(v41, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11.i8, v36), *(float32x2_t *)v32.f32, v13), 4uLL);
    v42.i64[1] = v41.u32[0];
    int8x8_t v43 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), *(float32x2_t *)v34.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 4uLL), *(float32x2_t *)v35.i8);
    *(int8x8_t *)v44.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), *(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 4uLL);
    v44.i64[1] = v43.u32[0];
    float32x4_t v45 = vmulq_f32(v8, v18);
    v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
    float32x4_t v46 = vmulq_f32(v8, v40);
    v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
    float32x4_t v47 = vmulq_f32(v8, v42);
    v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
    float32x4_t v48 = vmulq_f32(v8, v44);
    v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
    float32x4_t v49 = vmulq_f32(v10, v18);
    v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
    float32x4_t v50 = vmulq_f32(v7, v40);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    float32x4_t v51 = vmulq_f32(v9, v42);
    v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
    float32x4_t v52 = vmulq_f32(v7, v44);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    *(float32x2_t *)v49.f32 = vmul_f32((float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), 4uLL), (float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32), 4uLL));
    *(float32x2_t *)&v49.u32[2] = vmul_f32((float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32), 4uLL), (float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32), 4uLL));
    int8x16_t v128 = (int8x16_t)vcgeq_f32(v49, (float32x4_t)vdupq_n_s32(0xB58637BD));
    *(int16x4_t *)v52.f32 = vmovn_s32((int32x4_t)vmvnq_s8(v128));
    if (vuzp1_s8(*(int8x8_t *)v52.f32, *(int8x8_t *)v52.f32).u32[0] != -1)
    {
      unsigned int v130 = 2;
      uint64_t v129 = 0x100000000;
      physx::Gu::getClosestPtPointTriangle(a1, (int32x4_t *)&v128, (uint64_t)&v129, a4);
      float32x4_t v53 = a1[HIDWORD(v129)];
      float32x4_t v54 = a1[v130];
      long long v55 = a2[v129];
      long long v56 = a2[HIDWORD(v129)];
      long long v57 = a2[v130];
      long long v58 = a3[v129];
      long long v59 = a3[HIDWORD(v129)];
      long long v60 = a3[v130];
      *a1 = a1[v129];
      a1[1] = v53;
      a1[2] = v54;
      *a2 = v55;
      a2[1] = v56;
      a2[2] = v57;
      *a3 = v58;
      a3[1] = v59;
      a3[2] = v60;
    }
  }
}

double physx::Gu::getClosestPtPointTriangle(float32x4_t *a1, int32x4_t *a2, uint64_t a3, int *a4)
{
  v4.i64[0] = -1;
  v4.i64[1] = -1;
  float32x2_t v5 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v6.i64[0] = 0;
  if (vdup_lane_s8((int8x8_t)vmovn_s32(vceqq_s32(*a2, v4)), 0).u32[0] == -1)
  {
    *a4 = 3;
    float32x4_t v55 = *a1;
    float32x4_t v54 = a1[1];
    float32x4_t v56 = vsubq_f32(v54, *a1);
    float32x4_t v57 = a1[2];
    float32x4_t v58 = vsubq_f32(v57, *a1);
    int8x8_t v60 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v56.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 4uLL), *(float32x2_t *)v58.f32);
    *(int8x8_t *)v59.f32 = vext_s8(v60, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), *(float32x2_t *)v58.f32), *(float32x2_t *)v56.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)), 4uLL);
    v60.i32[1] = 0;
    float32x2_t v61 = vpadd_f32(vmul_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), vmul_f32((float32x2_t)v60.u32[0], (float32x2_t)v60.u32[0]));
    float32x2_t v62 = vpadd_f32(v61, v61);
    if (v62.f32[0] != 0.0)
    {
      *(int8x8_t *)&v59.u32[2] = v60;
      float32x2_t v63 = (float32x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
      float32x2_t v64 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
      float32x2_t v65 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 4uLL).u64[0];
      float32x2_t v66 = (float32x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL).u64[0];
      int8x8_t v67 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v54.f32, v65), v66, *(float32x2_t *)v57.f32);
      *(int8x8_t *)v68.f32 = vext_s8(v67, (int8x8_t)vmls_f32(vmul_f32(v63, *(float32x2_t *)v57.f32), *(float32x2_t *)v54.f32, v64), 4uLL);
      v68.i64[1] = v67.u32[0];
      float32x2_t v69 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u64[0];
      float32x2_t v70 = (float32x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL).u64[0];
      int8x8_t v71 = (int8x8_t)vmls_f32(vmul_f32(v70, *(float32x2_t *)v57.f32), v65, *(float32x2_t *)v55.f32);
      *(int8x8_t *)v72.f32 = vext_s8(v71, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, v64), *(float32x2_t *)v57.f32, v69), 4uLL);
      v72.i64[1] = v71.u32[0];
      int8x8_t v73 = (int8x8_t)vmls_f32(vmul_f32(v66, *(float32x2_t *)v55.f32), v70, *(float32x2_t *)v54.f32);
      *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v54.f32, v69), *(float32x2_t *)v55.f32, v63), 4uLL);
      v74.i64[1] = v73.u32[0];
      float32x4_t v75 = vmulq_f32(v68, v59);
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      float32x2_t v76 = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
      float32x4_t v77 = vmulq_f32(v72, v59);
      v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
      float32x2_t v78 = vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32);
      float32x4_t v79 = vmulq_f32(v74, v59);
      v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
      float32x2_t v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
      *(int16x4_t *)v79.f32 = vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v78), (int8x8_t)vcgez_f32(v76)), (int8x8_t)vcgez_f32(v80)), 0);
      if (vuzp1_s8(*(int8x8_t *)v79.f32, *(int8x8_t *)v79.f32).u32[0] == -1)
      {
        int8x16_t v104 = (int8x16_t)vmulq_f32(v55, v59);
        float32x2_t v105 = (float32x2_t)vextq_s8(v104, v104, 8uLL).u64[0];
        float32x2_t v106 = vrecpe_f32(v62);
        int v107 = 4;
        do
        {
          float32x2_t v106 = vmul_f32(v106, vrecps_f32(v62, v106));
          --v107;
        }
        while (v107);
        float32x2_t v108 = vpadd_f32(*(float32x2_t *)v104.i8, v105);
        float32x4_t v6 = vmulq_n_f32(v59, vmul_f32(v106, vpadd_f32(v108, v108)).f32[0]);
        v6.i32[3] = 0;
        goto LABEL_27;
      }
      float32x4_t v81 = vnegq_f32(v55);
      v81.i32[3] = 0;
      float32x4_t v82 = vnegq_f32(v54);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_f32(v56, v81);
      v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
      float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
      float32x4_t v85 = vmulq_f32(v82, v56);
      v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
      float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
      *a4 = 2;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vclez_f32(v86)), (int8x8_t)vclez_f32(v80)), 0), (int8x8_t)v84).u32[0] == -1)
      {
        float32x2_t v114 = vsub_f32(v84, v86);
        float32x2_t v115 = vrecpe_f32(v114);
        int v116 = 4;
        do
        {
          float32x2_t v115 = vmul_f32(v115, vrecps_f32(v114, v115));
          --v116;
        }
        while (v116);
        int8x16_t v117 = (int8x16_t)vmlaq_n_f32(*a1, v56, vmul_f32(v84, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v114), (float32x2_t)0x3400000034000000), (int8x8_t)v115, 0)).f32[0]);
      }
      else
      {
        float32x4_t v87 = vnegq_f32(v57);
        v87.i32[3] = 0;
        float32x4_t v88 = vmulq_f32(v82, v58);
        v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
        float32x2_t v89 = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
        float32x4_t v90 = vmulq_f32(v56, v87);
        v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
        float32x2_t v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
        float32x4_t v92 = vmulq_f32(v58, v87);
        v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
        float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v89, v86), (int8x8_t)vcge_f32(v91, v93)), (int8x8_t)vclez_f32(v76)), 0), (int8x8_t)v84).u32[0] == -1)
        {
          float32x2_t v124 = vsub_f32(v89, v86);
          float32x2_t v125 = vadd_f32(v124, vsub_f32(v91, v93));
          float32x2_t v126 = vrecpe_f32(v125);
          int v127 = 4;
          do
          {
            float32x2_t v126 = vmul_f32(v126, vrecps_f32(v125, v126));
            --v127;
          }
          while (v127);
          float32x4_t v58 = vsubq_f32(a1[2], a1[1]);
          unsigned __int32 v128 = vmul_f32(v124, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v125), (float32x2_t)0x3400000034000000), (int8x8_t)v126, 0)).u32[0];
          *(void *)a3 = *(void *)(a3 + 4);
          float32x4_t v129 = a1[1];
        }
        else
        {
          float32x4_t v94 = vmulq_f32(v81, v58);
          v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
          float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v95), (int8x8_t)vclez_f32(v93)), (int8x8_t)vclez_f32(v78)), 0), (int8x8_t)v84).u32[0] != -1)
          {
            *a4 = 1;
            int8x8_t v96 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v95), (int8x8_t)vclez_f32(v84)), 0);
            if (vuzp1_s8(v96, v96).u32[0] == -1)
            {
              float32x4_t v6 = *a1;
            }
            else
            {
              int8x8_t v97 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v86, v89), (int8x8_t)vcgez_f32(v86)), 0);
              if (vuzp1_s8(v97, v97).u32[0] == -1)
              {
                *(_DWORD *)a3 = *(_DWORD *)(a3 + 4);
                float32x4_t v6 = a1[1];
              }
              else
              {
                *(_DWORD *)a3 = *(_DWORD *)(a3 + 8);
                float32x4_t v6 = a1[2];
              }
            }
LABEL_27:
            float32x4_t v109 = vmulq_f32(v6, v6);
            v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
            float32x2_t v5 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
            goto LABEL_2;
          }
          float32x2_t v197 = vsub_f32(v95, v93);
          float32x2_t v198 = vrecpe_f32(v197);
          int v199 = 4;
          do
          {
            float32x2_t v198 = vmul_f32(v198, vrecps_f32(v197, v198));
            --v199;
          }
          while (v199);
          unsigned __int32 v128 = vmul_f32(v95, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v197), (float32x2_t)0x3400000034000000), (int8x8_t)v198, 0)).u32[0];
          *(_DWORD *)(a3 + 4) = *(_DWORD *)(a3 + 8);
          float32x4_t v129 = *a1;
        }
        int8x16_t v117 = (int8x16_t)vmlaq_n_f32(v129, v58, *(float *)&v128);
      }
      unsigned __int32 v200 = vextq_s8(v117, v117, 8uLL).u32[0];
      v6.i64[0] = v117.i64[0];
      float32x2_t v201 = vpadd_f32(vmul_f32(*(float32x2_t *)v117.i8, *(float32x2_t *)v117.i8), vmul_f32((float32x2_t)v200, (float32x2_t)v200));
      float32x2_t v5 = vpadd_f32(v201, v201);
    }
  }
LABEL_2:
  int32x4_t v7 = *a2;
  if (vdup_lane_s8((int8x8_t)vmovn_s32(vceqq_s32(*a2, v4)), 2).u32[0] != -1) {
    goto LABEL_47;
  }
  float32x4_t v8 = *a1;
  float32x4_t v9 = a1[2];
  float32x4_t v10 = a1[3];
  float32x4_t v11 = vsubq_f32(v9, *a1);
  float32x4_t v12 = vsubq_f32(v10, *a1);
  int8x8_t v14 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v11.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL), *(float32x2_t *)v12.f32);
  *(int8x8_t *)v13.f32 = vext_s8(v14, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), *(float32x2_t *)v12.f32), *(float32x2_t *)v11.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL)), 4uLL);
  v14.i32[1] = 0;
  float32x2_t v15 = vpadd_f32(vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), vmul_f32((float32x2_t)v14.u32[0], (float32x2_t)v14.u32[0]));
  float32x2_t v16 = vpadd_f32(v15, v15);
  uint64_t v17 = 0x200000000;
  if (v16.f32[0] == 0.0)
  {
    float32x2_t v52 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v8.i64[0] = 0;
LABEL_23:
    int v53 = 3;
    goto LABEL_45;
  }
  *(int8x8_t *)&v13.u32[2] = v14;
  float32x2_t v18 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
  float32x2_t v19 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  float32x2_t v20 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
  float32x2_t v21 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL).u64[0];
  int8x8_t v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v20), v21, *(float32x2_t *)v10.f32);
  *(int8x8_t *)v23.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32(v18, *(float32x2_t *)v10.f32), *(float32x2_t *)v9.f32, v19), 4uLL);
  v23.i64[1] = v22.u32[0];
  float32x2_t v24 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  float32x2_t v25 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL).u64[0];
  int8x8_t v26 = (int8x8_t)vmls_f32(vmul_f32(v25, *(float32x2_t *)v10.f32), v20, *(float32x2_t *)v8.f32);
  *(int8x8_t *)v27.f32 = vext_s8(v26, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v8.f32, v19), *(float32x2_t *)v10.f32, v24), 4uLL);
  v27.i64[1] = v26.u32[0];
  int8x8_t v28 = (int8x8_t)vmls_f32(vmul_f32(v21, *(float32x2_t *)v8.f32), v25, *(float32x2_t *)v9.f32);
  *(int8x8_t *)v29.f32 = vext_s8(v28, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v24), *(float32x2_t *)v8.f32, v18), 4uLL);
  v29.i64[1] = v28.u32[0];
  float32x4_t v30 = vmulq_f32(v23, v13);
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  float32x2_t v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
  float32x4_t v32 = vmulq_f32(v27, v13);
  v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
  float32x2_t v33 = vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32);
  float32x4_t v34 = vmulq_f32(v29, v13);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  float32x2_t v35 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v33), (int8x8_t)vcgez_f32(v31)), (int8x8_t)vcgez_f32(v35)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    int8x16_t v98 = (int8x16_t)vmulq_f32(v8, v13);
    float32x2_t v99 = (float32x2_t)vextq_s8(v98, v98, 8uLL).u64[0];
    float32x2_t v100 = vrecpe_f32(v16);
    int v101 = 4;
    do
    {
      float32x2_t v100 = vmul_f32(v100, vrecps_f32(v16, v100));
      --v101;
    }
    while (v101);
    float32x2_t v102 = vpadd_f32(*(float32x2_t *)v98.i8, v99);
    float32x4_t v8 = vmulq_n_f32(v13, vmul_f32(v100, vpadd_f32(v102, v102)).f32[0]);
    v8.i32[3] = 0;
    float32x4_t v103 = vmulq_f32(v8, v8);
    v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
    float32x2_t v52 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
    goto LABEL_23;
  }
  float32x4_t v36 = vnegq_f32(v8);
  v36.i32[3] = 0;
  float32x4_t v37 = vnegq_f32(v9);
  v37.i32[3] = 0;
  float32x4_t v38 = vmulq_f32(v11, v36);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  float32x2_t v39 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  float32x4_t v40 = vmulq_f32(v37, v11);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  float32x2_t v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v39), (int8x8_t)vclez_f32(v41)), (int8x8_t)vclez_f32(v35)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v110 = vsub_f32(v39, v41);
    float32x2_t v111 = vrecpe_f32(v110);
    int v112 = 4;
    do
    {
      float32x2_t v111 = vmul_f32(v111, vrecps_f32(v110, v111));
      --v112;
    }
    while (v112);
    int8x16_t v113 = (int8x16_t)vmlaq_n_f32(v8, v11, vmul_f32(v39, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v110), (float32x2_t)0x3400000034000000), (int8x8_t)v111, 0)).f32[0]);
    v10.i64[0] = v113.i64[0];
    v10.i64[1] = vextq_s8(v113, v113, 8uLL).u32[0];
    *(float32x2_t *)v113.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8), vmul_f32(*(float32x2_t *)&v10.u32[2], *(float32x2_t *)&v10.u32[2]));
    float32x2_t v52 = vpadd_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v113.i8);
    int v53 = 2;
    goto LABEL_31;
  }
  float32x4_t v42 = vnegq_f32(v10);
  v42.i32[3] = 0;
  float32x4_t v43 = vmulq_f32(v37, v12);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  float32x2_t v44 = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32);
  float32x4_t v45 = vmulq_f32(v11, v42);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  float32x2_t v46 = vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  float32x4_t v47 = vmulq_f32(v12, v42);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  float32x2_t v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v44, v41), (int8x8_t)vcge_f32(v46, v48)), (int8x8_t)vclez_f32(v31)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v118 = vsub_f32(v44, v41);
    float32x2_t v119 = vadd_f32(v118, vsub_f32(v46, v48));
    float32x2_t v120 = vrecpe_f32(v119);
    int v121 = 4;
    do
    {
      float32x2_t v120 = vmul_f32(v120, vrecps_f32(v119, v120));
      --v121;
    }
    while (v121);
    int8x16_t v122 = (int8x16_t)vmlaq_n_f32(v9, vsubq_f32(v10, v9), vmul_f32(v118, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v119), (float32x2_t)0x3400000034000000), (int8x8_t)v120, 0)).f32[0]);
    v8.i64[0] = v122.i64[0];
    v8.i64[1] = vextq_s8(v122, v122, 8uLL).u32[0];
    float32x2_t v123 = vpadd_f32(vmul_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8), vmul_f32(*(float32x2_t *)&v8.u32[2], *(float32x2_t *)&v8.u32[2]));
    float32x2_t v52 = vpadd_f32(v123, v123);
    uint64_t v17 = 0x300000002;
    goto LABEL_44;
  }
  float32x4_t v49 = vmulq_f32(v36, v12);
  v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
  float32x2_t v50 = vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v50), (int8x8_t)vclez_f32(v48)), (int8x8_t)vclez_f32(v33)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v130 = vsub_f32(v50, v48);
    float32x2_t v131 = vrecpe_f32(v130);
    int v132 = 4;
    do
    {
      float32x2_t v131 = vmul_f32(v131, vrecps_f32(v130, v131));
      --v132;
    }
    while (v132);
    float32x4_t v8 = vmlaq_n_f32(v8, v12, vmul_f32(v50, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v130), (float32x2_t)0x3400000034000000), (int8x8_t)v131, 0)).f32[0]);
    v8.i64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u32[0];
    float32x2_t v133 = vpadd_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32), vmul_f32(*(float32x2_t *)&v8.u32[2], *(float32x2_t *)&v8.u32[2]));
    float32x2_t v52 = vpadd_f32(v133, v133);
    uint64_t v17 = 0x300000000;
LABEL_44:
    int v53 = 2;
    goto LABEL_45;
  }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v50), (int8x8_t)vclez_f32(v39)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x4_t v272 = vmulq_f32(v8, v8);
    v272.i64[0] = vpaddq_f32(v272, v272).u64[0];
    float32x2_t v52 = vpadd_f32(*(float32x2_t *)v272.f32, *(float32x2_t *)v272.f32);
    int v53 = 1;
  }
  else
  {
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v41, v44), (int8x8_t)vcgez_f32(v41)), 0), *(int8x8_t *)v6.f32).u32[0] != -1)
    {
      float32x4_t v51 = vmulq_f32(v10, v10);
      v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
      uint64_t v17 = 0x200000003;
      float32x2_t v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
      int v53 = 1;
LABEL_31:
      v8.i64[0] = v10.i64[0];
      goto LABEL_45;
    }
    float32x4_t v275 = vmulq_f32(v9, v9);
    v275.i64[0] = vpaddq_f32(v275, v275).u64[0];
    float32x2_t v52 = vpadd_f32(*(float32x2_t *)v275.f32, *(float32x2_t *)v275.f32);
    uint64_t v17 = 0x200000002;
    int v53 = 1;
    float32x4_t v8 = a1[2];
  }
LABEL_45:
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(v5, v52), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    *(void *)a3 = v17;
    *(_DWORD *)(a3 + 8) = 3;
    *a4 = v53;
    int32x4_t v7 = *a2;
    v6.i64[0] = v8.i64[0];
    float32x2_t v5 = v52;
  }
LABEL_47:
  v134.i64[0] = -1;
  v134.i64[1] = -1;
  if (vdup_lane_s8((int8x8_t)vmovn_s32(vceqq_s32(v7, v134)), 4).u32[0] != -1) {
    goto LABEL_79;
  }
  float32x4_t v135 = a1[3];
  float32x4_t v136 = *a1;
  float32x4_t v137 = a1[1];
  float32x4_t v138 = vsubq_f32(v135, *a1);
  float32x4_t v139 = vsubq_f32(v137, *a1);
  int8x8_t v141 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v138.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v139, (int8x16_t)v139, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v138, (int8x16_t)v138, 4uLL), *(float32x2_t *)v139.f32);
  *(int8x8_t *)v140.f32 = vext_s8(v141, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL), *(float32x2_t *)v139.f32), *(float32x2_t *)v138.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL)), 4uLL);
  v141.i32[1] = 0;
  float32x2_t v142 = vpadd_f32(vmul_f32(*(float32x2_t *)v140.f32, *(float32x2_t *)v140.f32), vmul_f32((float32x2_t)v141.u32[0], (float32x2_t)v141.u32[0]));
  float32x2_t v143 = vpadd_f32(v142, v142);
  uint64_t v144 = 0x300000000;
  if (v143.f32[0] == 0.0)
  {
    float32x2_t v179 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v136.i64[0] = 0;
LABEL_60:
    int v180 = 3;
    goto LABEL_77;
  }
  *(int8x8_t *)&v140.u32[2] = v141;
  float32x2_t v145 = (float32x2_t)vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u64[0];
  float32x2_t v146 = (float32x2_t)vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
  float32x2_t v147 = (float32x2_t)vextq_s8((int8x16_t)v137, (int8x16_t)v137, 4uLL).u64[0];
  float32x2_t v148 = (float32x2_t)vextq_s8((int8x16_t)v135, (int8x16_t)v135, 4uLL).u64[0];
  int8x8_t v149 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v135.f32, v147), v148, *(float32x2_t *)v137.f32);
  *(int8x8_t *)v150.f32 = vext_s8(v149, (int8x8_t)vmls_f32(vmul_f32(v145, *(float32x2_t *)v137.f32), *(float32x2_t *)v135.f32, v146), 4uLL);
  v150.i64[1] = v149.u32[0];
  float32x2_t v151 = (float32x2_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u64[0];
  float32x2_t v152 = (float32x2_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 4uLL).u64[0];
  int8x8_t v153 = (int8x8_t)vmls_f32(vmul_f32(v152, *(float32x2_t *)v137.f32), v147, *(float32x2_t *)v136.f32);
  *(int8x8_t *)v154.f32 = vext_s8(v153, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v136.f32, v146), *(float32x2_t *)v137.f32, v151), 4uLL);
  v154.i64[1] = v153.u32[0];
  int8x8_t v155 = (int8x8_t)vmls_f32(vmul_f32(v148, *(float32x2_t *)v136.f32), v152, *(float32x2_t *)v135.f32);
  *(int8x8_t *)v156.f32 = vext_s8(v155, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v135.f32, v151), *(float32x2_t *)v136.f32, v145), 4uLL);
  v156.i64[1] = v155.u32[0];
  float32x4_t v157 = vmulq_f32(v150, v140);
  v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
  float32x2_t v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32);
  float32x4_t v159 = vmulq_f32(v154, v140);
  v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
  float32x2_t v160 = vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32);
  float32x4_t v161 = vmulq_f32(v156, v140);
  v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
  float32x2_t v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v160), (int8x8_t)vcgez_f32(v158)), (int8x8_t)vcgez_f32(v162)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    int8x16_t v181 = (int8x16_t)vmulq_f32(v136, v140);
    float32x2_t v182 = (float32x2_t)vextq_s8(v181, v181, 8uLL).u64[0];
    float32x2_t v183 = vrecpe_f32(v143);
    int v184 = 4;
    do
    {
      float32x2_t v183 = vmul_f32(v183, vrecps_f32(v143, v183));
      --v184;
    }
    while (v184);
    float32x2_t v185 = vpadd_f32(*(float32x2_t *)v181.i8, v182);
    float32x4_t v136 = vmulq_n_f32(v140, vmul_f32(v183, vpadd_f32(v185, v185)).f32[0]);
    v136.i32[3] = 0;
    float32x4_t v186 = vmulq_f32(v136, v136);
    v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
    float32x2_t v179 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
    goto LABEL_60;
  }
  float32x4_t v163 = vnegq_f32(v136);
  v163.i32[3] = 0;
  float32x4_t v164 = vnegq_f32(v135);
  v164.i32[3] = 0;
  float32x4_t v165 = vmulq_f32(v138, v163);
  v165.i64[0] = vpaddq_f32(v165, v165).u64[0];
  float32x2_t v166 = vpadd_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v165.f32);
  float32x4_t v167 = vmulq_f32(v164, v138);
  v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
  float32x2_t v168 = vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v166), (int8x8_t)vclez_f32(v168)), (int8x8_t)vclez_f32(v162)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v187 = vsub_f32(v166, v168);
    float32x2_t v188 = vrecpe_f32(v187);
    int v189 = 4;
    do
    {
      float32x2_t v188 = vmul_f32(v188, vrecps_f32(v187, v188));
      --v189;
    }
    while (v189);
    int8x16_t v190 = (int8x16_t)vmlaq_n_f32(v136, v138, vmul_f32(v166, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v187), (float32x2_t)0x3400000034000000), (int8x8_t)v188, 0)).f32[0]);
    v137.i64[0] = v190.i64[0];
    v137.i64[1] = vextq_s8(v190, v190, 8uLL).u32[0];
    *(float32x2_t *)v190.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8), vmul_f32(*(float32x2_t *)&v137.u32[2], *(float32x2_t *)&v137.u32[2]));
    float32x2_t v179 = vpadd_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8);
    int v180 = 2;
    goto LABEL_64;
  }
  float32x4_t v169 = vnegq_f32(v137);
  v169.i32[3] = 0;
  float32x4_t v170 = vmulq_f32(v164, v139);
  v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
  float32x2_t v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
  float32x4_t v172 = vmulq_f32(v138, v169);
  v172.i64[0] = vpaddq_f32(v172, v172).u64[0];
  float32x2_t v173 = vpadd_f32(*(float32x2_t *)v172.f32, *(float32x2_t *)v172.f32);
  float32x4_t v174 = vmulq_f32(v139, v169);
  v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
  float32x2_t v175 = vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v171, v168), (int8x8_t)vcge_f32(v173, v175)), (int8x8_t)vclez_f32(v158)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v191 = vsub_f32(v171, v168);
    float32x2_t v192 = vadd_f32(v191, vsub_f32(v173, v175));
    float32x2_t v193 = vrecpe_f32(v192);
    int v194 = 4;
    do
    {
      float32x2_t v193 = vmul_f32(v193, vrecps_f32(v192, v193));
      --v194;
    }
    while (v194);
    int8x16_t v195 = (int8x16_t)vmlaq_n_f32(v135, vsubq_f32(v137, v135), vmul_f32(v191, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v192), (float32x2_t)0x3400000034000000), (int8x8_t)v193, 0)).f32[0]);
    v136.i64[0] = v195.i64[0];
    v136.i64[1] = vextq_s8(v195, v195, 8uLL).u32[0];
    float32x2_t v196 = vpadd_f32(vmul_f32(*(float32x2_t *)v195.i8, *(float32x2_t *)v195.i8), vmul_f32(*(float32x2_t *)&v136.u32[2], *(float32x2_t *)&v136.u32[2]));
    float32x2_t v179 = vpadd_f32(v196, v196);
    uint64_t v144 = 0x100000003;
    goto LABEL_76;
  }
  float32x4_t v176 = vmulq_f32(v163, v139);
  v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
  float32x2_t v177 = vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v177), (int8x8_t)vclez_f32(v175)), (int8x8_t)vclez_f32(v160)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v202 = vsub_f32(v177, v175);
    float32x2_t v203 = vrecpe_f32(v202);
    int v204 = 4;
    do
    {
      float32x2_t v203 = vmul_f32(v203, vrecps_f32(v202, v203));
      --v204;
    }
    while (v204);
    float32x4_t v136 = vmlaq_n_f32(v136, v139, vmul_f32(v177, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v202), (float32x2_t)0x3400000034000000), (int8x8_t)v203, 0)).f32[0]);
    v136.i64[1] = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u32[0];
    float32x2_t v205 = vpadd_f32(vmul_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32), vmul_f32(*(float32x2_t *)&v136.u32[2], *(float32x2_t *)&v136.u32[2]));
    float32x2_t v179 = vpadd_f32(v205, v205);
    uint64_t v144 = 0x100000000;
LABEL_76:
    int v180 = 2;
    goto LABEL_77;
  }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v177), (int8x8_t)vclez_f32(v166)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x4_t v273 = vmulq_f32(v136, v136);
    v273.i64[0] = vpaddq_f32(v273, v273).u64[0];
    float32x2_t v179 = vpadd_f32(*(float32x2_t *)v273.f32, *(float32x2_t *)v273.f32);
    int v180 = 1;
  }
  else
  {
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v168, v171), (int8x8_t)vcgez_f32(v168)), 0), *(int8x8_t *)v6.f32).u32[0] != -1)
    {
      float32x4_t v178 = vmulq_f32(v137, v137);
      v178.i64[0] = vpaddq_f32(v178, v178).u64[0];
      uint64_t v144 = 0x300000001;
      float32x2_t v179 = vpadd_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32);
      int v180 = 1;
LABEL_64:
      v136.i64[0] = v137.i64[0];
      goto LABEL_77;
    }
    float32x4_t v276 = vmulq_f32(v135, v135);
    v276.i64[0] = vpaddq_f32(v276, v276).u64[0];
    float32x2_t v179 = vpadd_f32(*(float32x2_t *)v276.f32, *(float32x2_t *)v276.f32);
    uint64_t v144 = 0x300000003;
    int v180 = 1;
    float32x4_t v136 = a1[3];
  }
LABEL_77:
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(v5, v179), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    *(void *)a3 = v144;
    *(_DWORD *)(a3 + 8) = 1;
    *a4 = v180;
    int32x4_t v7 = *a2;
    v6.i64[0] = v136.i64[0];
    float32x2_t v5 = v179;
  }
LABEL_79:
  if (vdup_lane_s8((int8x8_t)vmovn_s32(vceqq_s32(v7, v134)), 6).u32[0] != -1) {
    return *(double *)v6.i64;
  }
  float32x4_t v207 = a1[2];
  float32x4_t v206 = a1[3];
  float32x4_t v208 = a1[1];
  float32x4_t v209 = vsubq_f32(v206, v208);
  float32x4_t v210 = vsubq_f32(v207, v208);
  int8x8_t v212 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v209.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v210, (int8x16_t)v210, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v209, (int8x16_t)v209, 4uLL), *(float32x2_t *)v210.f32);
  *(int8x8_t *)v211.f32 = vext_s8(v212, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL), *(float32x2_t *)v210.f32), *(float32x2_t *)v209.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL)), 4uLL);
  v212.i32[1] = 0;
  float32x2_t v213 = vpadd_f32(vmul_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32), vmul_f32((float32x2_t)v212.u32[0], (float32x2_t)v212.u32[0]));
  float32x2_t v214 = vpadd_f32(v213, v213);
  uint64_t v215 = 0x300000001;
  if (v214.f32[0] == 0.0)
  {
    float32x2_t v250 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v208.i64[0] = 0;
LABEL_93:
    int v251 = 3;
    goto LABEL_105;
  }
  *(int8x8_t *)&v211.u32[2] = v212;
  float32x2_t v216 = (float32x2_t)vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
  float32x2_t v217 = (float32x2_t)vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
  float32x2_t v218 = (float32x2_t)vextq_s8((int8x16_t)v207, (int8x16_t)v207, 4uLL).u64[0];
  float32x2_t v219 = (float32x2_t)vextq_s8((int8x16_t)v206, (int8x16_t)v206, 4uLL).u64[0];
  int8x8_t v220 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v206.f32, v218), v219, *(float32x2_t *)v207.f32);
  *(int8x8_t *)v221.f32 = vext_s8(v220, (int8x8_t)vmls_f32(vmul_f32(v216, *(float32x2_t *)v207.f32), *(float32x2_t *)v206.f32, v217), 4uLL);
  v221.i64[1] = v220.u32[0];
  float32x2_t v222 = (float32x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u64[0];
  float32x2_t v223 = (float32x2_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 4uLL).u64[0];
  int8x8_t v224 = (int8x8_t)vmls_f32(vmul_f32(v223, *(float32x2_t *)v207.f32), v218, *(float32x2_t *)v208.f32);
  *(int8x8_t *)v225.f32 = vext_s8(v224, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v208.f32, v217), *(float32x2_t *)v207.f32, v222), 4uLL);
  v225.i64[1] = v224.u32[0];
  int8x8_t v226 = (int8x8_t)vmls_f32(vmul_f32(v219, *(float32x2_t *)v208.f32), v223, *(float32x2_t *)v206.f32);
  *(int8x8_t *)v227.f32 = vext_s8(v226, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v206.f32, v222), *(float32x2_t *)v208.f32, v216), 4uLL);
  v227.i64[1] = v226.u32[0];
  float32x4_t v228 = vmulq_f32(v221, v211);
  v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
  float32x2_t v229 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
  float32x4_t v230 = vmulq_f32(v225, v211);
  v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
  float32x2_t v231 = vpadd_f32(*(float32x2_t *)v230.f32, *(float32x2_t *)v230.f32);
  float32x4_t v232 = vmulq_f32(v227, v211);
  v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
  float32x2_t v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v231), (int8x8_t)vcgez_f32(v229)), (int8x8_t)vcgez_f32(v233)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    int8x16_t v252 = (int8x16_t)vmulq_f32(v208, v211);
    float32x2_t v253 = (float32x2_t)vextq_s8(v252, v252, 8uLL).u64[0];
    float32x2_t v254 = vrecpe_f32(v214);
    int v255 = 4;
    do
    {
      float32x2_t v254 = vmul_f32(v254, vrecps_f32(v214, v254));
      --v255;
    }
    while (v255);
    float32x2_t v256 = vpadd_f32(*(float32x2_t *)v252.i8, v253);
    float32x4_t v208 = vmulq_n_f32(v211, vmul_f32(v254, vpadd_f32(v256, v256)).f32[0]);
    v208.i32[3] = 0;
    float32x4_t v257 = vmulq_f32(v208, v208);
    v257.i64[0] = vpaddq_f32(v257, v257).u64[0];
    float32x2_t v250 = vpadd_f32(*(float32x2_t *)v257.f32, *(float32x2_t *)v257.f32);
    goto LABEL_93;
  }
  float32x4_t v234 = vnegq_f32(v208);
  v234.i32[3] = 0;
  float32x4_t v235 = vnegq_f32(v206);
  v235.i32[3] = 0;
  float32x4_t v236 = vmulq_f32(v209, v234);
  v236.i64[0] = vpaddq_f32(v236, v236).u64[0];
  float32x2_t v237 = vpadd_f32(*(float32x2_t *)v236.f32, *(float32x2_t *)v236.f32);
  float32x4_t v238 = vmulq_f32(v235, v209);
  v238.i64[0] = vpaddq_f32(v238, v238).u64[0];
  float32x2_t v239 = vpadd_f32(*(float32x2_t *)v238.f32, *(float32x2_t *)v238.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v237), (int8x8_t)vclez_f32(v239)), (int8x8_t)vclez_f32(v233)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v258 = vsub_f32(v237, v239);
    float32x2_t v259 = vrecpe_f32(v258);
    int v260 = 4;
    do
    {
      float32x2_t v259 = vmul_f32(v259, vrecps_f32(v258, v259));
      --v260;
    }
    while (v260);
    int8x16_t v261 = (int8x16_t)vmlaq_n_f32(v208, v209, vmul_f32(v237, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v258), (float32x2_t)0x3400000034000000), (int8x8_t)v259, 0)).f32[0]);
    v207.i64[0] = v261.i64[0];
    v207.i64[1] = vextq_s8(v261, v261, 8uLL).u32[0];
    *(float32x2_t *)v261.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v261.i8, *(float32x2_t *)v261.i8), vmul_f32(*(float32x2_t *)&v207.u32[2], *(float32x2_t *)&v207.u32[2]));
    float32x2_t v250 = vpadd_f32(*(float32x2_t *)v261.i8, *(float32x2_t *)v261.i8);
    int v251 = 2;
    goto LABEL_97;
  }
  float32x4_t v240 = vnegq_f32(v207);
  v240.i32[3] = 0;
  float32x4_t v241 = vmulq_f32(v235, v210);
  v241.i64[0] = vpaddq_f32(v241, v241).u64[0];
  float32x2_t v242 = vpadd_f32(*(float32x2_t *)v241.f32, *(float32x2_t *)v241.f32);
  float32x4_t v243 = vmulq_f32(v209, v240);
  v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
  float32x2_t v244 = vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32);
  float32x4_t v245 = vmulq_f32(v210, v240);
  v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
  float32x2_t v246 = vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v242, v239), (int8x8_t)vcge_f32(v244, v246)), (int8x8_t)vclez_f32(v229)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v262 = vsub_f32(v242, v239);
    float32x2_t v263 = vadd_f32(v262, vsub_f32(v244, v246));
    float32x2_t v264 = vrecpe_f32(v263);
    int v265 = 4;
    do
    {
      float32x2_t v264 = vmul_f32(v264, vrecps_f32(v263, v264));
      --v265;
    }
    while (v265);
    int8x16_t v266 = (int8x16_t)vmlaq_n_f32(v206, vsubq_f32(v207, v206), vmul_f32(v262, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v263), (float32x2_t)0x3400000034000000), (int8x8_t)v264, 0)).f32[0]);
    v208.i64[0] = v266.i64[0];
    v208.i64[1] = vextq_s8(v266, v266, 8uLL).u32[0];
    float32x2_t v267 = vpadd_f32(vmul_f32(*(float32x2_t *)v266.i8, *(float32x2_t *)v266.i8), vmul_f32(*(float32x2_t *)&v208.u32[2], *(float32x2_t *)&v208.u32[2]));
    float32x2_t v250 = vpadd_f32(v267, v267);
    uint64_t v215 = 0x200000003;
    goto LABEL_104;
  }
  float32x4_t v247 = vmulq_f32(v234, v210);
  v247.i64[0] = vpaddq_f32(v247, v247).u64[0];
  float32x2_t v248 = vpadd_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v248), (int8x8_t)vclez_f32(v246)), (int8x8_t)vclez_f32(v231)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x2_t v268 = vsub_f32(v248, v246);
    float32x2_t v269 = vrecpe_f32(v268);
    int v270 = 4;
    do
    {
      float32x2_t v269 = vmul_f32(v269, vrecps_f32(v268, v269));
      --v270;
    }
    while (v270);
    float32x4_t v208 = vmlaq_n_f32(v208, v210, vmul_f32(v248, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v268), (float32x2_t)0x3400000034000000), (int8x8_t)v269, 0)).f32[0]);
    v208.i64[1] = vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u32[0];
    float32x2_t v271 = vpadd_f32(vmul_f32(*(float32x2_t *)v208.f32, *(float32x2_t *)v208.f32), vmul_f32(*(float32x2_t *)&v208.u32[2], *(float32x2_t *)&v208.u32[2]));
    float32x2_t v250 = vpadd_f32(v271, v271);
    uint64_t v215 = 0x200000001;
LABEL_104:
    int v251 = 2;
    goto LABEL_105;
  }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v248), (int8x8_t)vclez_f32(v237)), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    float32x4_t v274 = vmulq_f32(v208, v208);
    v274.i64[0] = vpaddq_f32(v274, v274).u64[0];
    float32x2_t v250 = vpadd_f32(*(float32x2_t *)v274.f32, *(float32x2_t *)v274.f32);
    int v251 = 1;
  }
  else
  {
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v239, v242), (int8x8_t)vcgez_f32(v239)), 0), *(int8x8_t *)v6.f32).u32[0] != -1)
    {
      float32x4_t v249 = vmulq_f32(v207, v207);
      v249.i64[0] = vpaddq_f32(v249, v249).u64[0];
      uint64_t v215 = 0x300000002;
      float32x2_t v250 = vpadd_f32(*(float32x2_t *)v249.f32, *(float32x2_t *)v249.f32);
      int v251 = 1;
LABEL_97:
      v208.i64[0] = v207.i64[0];
      goto LABEL_105;
    }
    float32x4_t v277 = vmulq_f32(v206, v206);
    v277.i64[0] = vpaddq_f32(v277, v277).u64[0];
    float32x2_t v250 = vpadd_f32(*(float32x2_t *)v277.f32, *(float32x2_t *)v277.f32);
    uint64_t v215 = 0x300000003;
    int v251 = 1;
    float32x4_t v208 = a1[3];
  }
LABEL_105:
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(v5, v250), 0), *(int8x8_t *)v6.f32).u32[0] == -1)
  {
    *(void *)a3 = v215;
    *(_DWORD *)(a3 + 8) = 2;
    *a4 = v251;
    v6.i64[0] = v208.i64[0];
  }
  return *(double *)v6.i64;
}

void physx::Gu::closestPtPointTetrahedron(float32x4_t *a1, _OWORD *a2, _OWORD *a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  float32x4_t v12 = *a1;
  float32x4_t v11 = a1[1];
  float32x4_t v13 = a1[2];
  float32x4_t v14 = a1[3];
  int8x16_t v15 = (int8x16_t)vsubq_f32(v11, *a1);
  int8x16_t v16 = (int8x16_t)vsubq_f32(v13, *a1);
  float32x2_t v17 = (float32x2_t)vextq_s8(v15, v15, 8uLL).u64[0];
  float32x2_t v18 = (float32x2_t)vextq_s8(v16, v16, 8uLL).u64[0];
  float32x2_t v19 = (float32x2_t)vextq_s8(v16, v16, 4uLL).u64[0];
  float32x2_t v20 = (float32x2_t)vextq_s8(v15, v15, 4uLL).u64[0];
  int8x8_t v21 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15.i8, v19), v20, *(float32x2_t *)v16.i8);
  *(int8x8_t *)v22.f32 = vext_s8(v21, (int8x8_t)vmls_f32(vmul_f32(v17, *(float32x2_t *)v16.i8), *(float32x2_t *)v15.i8, v18), 4uLL);
  v22.i64[1] = v21.u32[0];
  float32x2_t v23 = vpadd_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), vmul_f32((float32x2_t)v21.u32[0], (float32x2_t)v21.u32[0]));
  float32x2_t v24 = vpadd_f32(v23, v23);
  float32x2_t v25 = vrsqrte_f32(v24);
  int v26 = 4;
  do
  {
    float32x2_t v25 = vmul_f32(v25, vrsqrts_f32(vmul_f32(v25, v25), v24));
    --v26;
  }
  while (v26);
  __asm { FMOV            V6.2S, #1.0 }
  float32x2_t v32 = vmul_f32(v24, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v24), 0), _D6, (int8x8_t)v25));
  float32x2_t v33 = vrecpe_f32(v32);
  int v34 = 4;
  do
  {
    float32x2_t v33 = vmul_f32(v33, vrecps_f32(v32, v33));
    --v34;
  }
  while (v34);
  float32x4_t v35 = vmulq_n_f32(v22, v33.f32[0]);
  v35.i32[3] = 0;
  float32x4_t v36 = vsubq_f32(v14, v12);
  float32x4_t v37 = vmulq_f32(v36, v35);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  if (vabs_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)).f32[0] >= 0.0001)
  {
    int8x16_t v38 = (int8x16_t)vsubq_f32(v14, v11);
    int8x16_t v39 = (int8x16_t)vsubq_f32(v13, v11);
    float32x2_t v40 = (float32x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
    float32x2_t v41 = (float32x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL).u64[0];
    float32x2_t v42 = vmul_f32(v18, *(float32x2_t *)v36.f32);
    int8x8_t v43 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.i8, v41), v19, *(float32x2_t *)v36.f32);
    *(int8x8_t *)v44.f32 = vext_s8(v43, (int8x8_t)vmls_f32(v42, *(float32x2_t *)v16.i8, v40), 4uLL);
    v44.i64[1] = v43.u32[0];
    int8x8_t v45 = (int8x8_t)vmls_f32(vmul_f32(v20, *(float32x2_t *)v36.f32), v41, *(float32x2_t *)v15.i8);
    *(int8x8_t *)v46.f32 = vext_s8(v45, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15.i8, v40), *(float32x2_t *)v36.f32, v17), 4uLL);
    v46.i64[1] = v45.u32[0];
    int8x8_t v47 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 4uLL), *(float32x2_t *)v38.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 4uLL), *(float32x2_t *)v39.i8);
    *(int8x8_t *)v48.f32 = vext_s8(v47, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), *(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 4uLL);
    v48.i64[1] = v47.u32[0];
    float32x4_t v49 = vmulq_f32(v12, v22);
    v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
    float32x4_t v50 = vmulq_f32(v12, v44);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    float32x4_t v51 = vmulq_f32(v12, v46);
    v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
    float32x4_t v52 = vmulq_f32(v12, v48);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    float32x4_t v53 = vmulq_f32(v14, v22);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    float32x4_t v54 = vmulq_f32(v11, v44);
    v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
    float32x4_t v55 = vmulq_f32(v13, v46);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    float32x4_t v56 = vmulq_f32(v11, v48);
    v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
    *(float32x2_t *)v53.f32 = vmul_f32((float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32), 4uLL), (float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32), 4uLL));
    *(float32x2_t *)&v53.u32[2] = vmul_f32((float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32), 4uLL), (float32x2_t)vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), 4uLL));
    int8x16_t v143 = (int8x16_t)vcgeq_f32(v53, (float32x4_t)vdupq_n_s32(0xB58637BD));
    *(int16x4_t *)v56.f32 = vmovn_s32((int32x4_t)vmvnq_s8(v143));
    if (vuzp1_s8(*(int8x8_t *)v56.f32, *(int8x8_t *)v56.f32).u32[0] != -1)
    {
      unsigned int v145 = 2;
      uint64_t v144 = 0x100000000;
      physx::Gu::getClosestPtPointTriangle(a1, (int32x4_t *)&v143, (uint64_t)&v144, a6);
      float32x4_t v57 = a1[HIDWORD(v144)];
      float32x4_t v58 = a1[v145];
      long long v59 = a2[v144];
      long long v60 = a2[HIDWORD(v144)];
      long long v61 = a2[v145];
      long long v62 = a3[v144];
      long long v63 = a3[HIDWORD(v144)];
      long long v64 = a3[v145];
      int v65 = a4[v144];
      int v66 = a4[HIDWORD(v144)];
      int v67 = a4[v145];
      int v68 = a5[v144];
      int v69 = a5[HIDWORD(v144)];
      int v70 = a5[v145];
      *a1 = a1[v144];
      a1[1] = v57;
      a1[2] = v58;
      *a2 = v59;
      a2[1] = v60;
      a2[2] = v61;
      *a3 = v62;
      a3[1] = v63;
      a3[2] = v64;
      *a4 = v65;
      a4[1] = v66;
      a4[2] = v67;
      *a5 = v68;
      a5[1] = v69;
      a5[2] = v70;
    }
    return;
  }
  *a6 = 3;
  float32x4_t v71 = *a1;
  float32x4_t v72 = a1[1];
  float32x4_t v73 = a1[2];
  float32x4_t v74 = vsubq_f32(v72, *a1);
  float32x4_t v75 = vsubq_f32(v73, *a1);
  int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v74.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL), *(float32x2_t *)v75.f32);
  *(int8x8_t *)v76.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), *(float32x2_t *)v75.f32), *(float32x2_t *)v74.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), 4uLL);
  v77.i32[1] = 0;
  float32x2_t v78 = vpadd_f32(vmul_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32), vmul_f32((float32x2_t)v77.u32[0], (float32x2_t)v77.u32[0]));
  float32x2_t v79 = vpadd_f32(v78, v78);
  if (v79.f32[0] <= 0.00000011921)
  {
    *a6 = 2;
    float32x4_t v116 = vsubq_f32(a1[1], *a1);
    float32x4_t v117 = vmulq_f32(v116, v116);
    v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
    float32x2_t v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v118), 0), *(int8x8_t *)a1->f32).u32[0] == -1)
    {
      *a6 = 1;
    }
    else
    {
      float32x2_t v119 = vrecpe_f32(v118);
      int v120 = 4;
      do
      {
        float32x2_t v119 = vmul_f32(v119, vrecps_f32(v118, v119));
        --v120;
      }
      while (v120);
    }
  }
  else
  {
    if (v79.f32[0] == 0.0) {
      return;
    }
    *(int8x8_t *)&v76.u32[2] = v77;
    float32x2_t v80 = (float32x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
    float32x2_t v81 = (float32x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    float32x2_t v82 = (float32x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL).u64[0];
    float32x2_t v83 = (float32x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL).u64[0];
    int8x8_t v84 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v72.f32, v82), v83, *(float32x2_t *)v73.f32);
    *(int8x8_t *)v85.f32 = vext_s8(v84, (int8x8_t)vmls_f32(vmul_f32(v80, *(float32x2_t *)v73.f32), *(float32x2_t *)v72.f32, v81), 4uLL);
    v85.i64[1] = v84.u32[0];
    float32x2_t v86 = (float32x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u64[0];
    float32x2_t v87 = (float32x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL).u64[0];
    int8x8_t v88 = (int8x8_t)vmls_f32(vmul_f32(v87, *(float32x2_t *)v73.f32), v82, *(float32x2_t *)v71.f32);
    *(int8x8_t *)v89.f32 = vext_s8(v88, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v71.f32, v81), *(float32x2_t *)v73.f32, v86), 4uLL);
    v89.i64[1] = v88.u32[0];
    int8x8_t v90 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v71.f32, v83), v87, *(float32x2_t *)v72.f32);
    *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v72.f32), *(float32x2_t *)v71.f32, v80), 4uLL);
    v91.i64[1] = v90.u32[0];
    float32x4_t v92 = vmulq_f32(v85, v76);
    v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
    float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
    float32x4_t v94 = vmulq_f32(v89, v76);
    v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
    float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
    float32x4_t v96 = vmulq_f32(v91, v76);
    v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
    float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v95), (int8x8_t)vcgez_f32(v93)), (int8x8_t)vcgez_f32(v97)), 0), *(int8x8_t *)v71.f32).u32[0] != -1)
    {
      float32x4_t v98 = vnegq_f32(v71);
      v98.i32[3] = 0;
      float32x4_t v99 = vnegq_f32(v72);
      v99.i32[3] = 0;
      float32x4_t v100 = vmulq_f32(v98, v74);
      v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
      float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
      float32x4_t v102 = vmulq_f32(v74, v99);
      v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
      float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v101), (int8x8_t)vclez_f32(v103)), (int8x8_t)vclez_f32(v97)), 0), *(int8x8_t *)v71.f32).u32[0] == -1)
      {
        float32x2_t v123 = vsub_f32(v101, v103);
        float32x2_t v124 = vrecpe_f32(v123);
        int v125 = 4;
        do
        {
          float32x2_t v124 = vmul_f32(v124, vrecps_f32(v123, v124));
          --v125;
        }
        while (v125);
        uint64_t v115 = 0;
        int v126 = 2;
        uint64_t v114 = 1;
      }
      else
      {
        float32x4_t v104 = vnegq_f32(v73);
        v104.i32[3] = 0;
        float32x4_t v105 = vmulq_f32(v99, v75);
        v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
        float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
        float32x4_t v107 = vmulq_f32(v74, v104);
        v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
        float32x2_t v108 = vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32);
        float32x4_t v109 = vmulq_f32(v75, v104);
        v109.i64[0] = vpaddq_f32(v109, v109).u64[0];
        float32x2_t v110 = vpadd_f32(*(float32x2_t *)v109.f32, *(float32x2_t *)v109.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v106, v103), (int8x8_t)vcge_f32(v108, v110)), (int8x8_t)vclez_f32(v93)), 0), *(int8x8_t *)v71.f32).u32[0] == -1)
        {
          float32x2_t v127 = vadd_f32(vsub_f32(v106, v103), vsub_f32(v108, v110));
          float32x2_t v128 = vrecpe_f32(v127);
          int v129 = 4;
          do
          {
            float32x2_t v128 = vmul_f32(v128, vrecps_f32(v127, v128));
            --v129;
          }
          while (v129);
          uint64_t v114 = 2;
          uint64_t v115 = 1;
        }
        else
        {
          float32x4_t v111 = vmulq_f32(v98, v75);
          v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
          float32x2_t v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v112), (int8x8_t)vclez_f32(v110)), (int8x8_t)vclez_f32(v95)), 0), *(int8x8_t *)v71.f32).u32[0] != -1)
          {
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v112), (int8x8_t)vclez_f32(v101)), 0), *(int8x8_t *)v71.f32).u32[0] == -1)
            {
              uint64_t v115 = 0;
              uint64_t v114 = 1;
            }
            else
            {
              int8x8_t v113 = (int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v103, v106), (int8x8_t)vcgez_f32(v103)), 0);
              uint64_t v114 = 1;
              if (vuzp1_s8(v113, v113).u32[0] == -1) {
                uint64_t v115 = 1;
              }
              else {
                uint64_t v115 = 2;
              }
            }
            int v126 = 1;
            goto LABEL_39;
          }
          float32x2_t v130 = vsub_f32(v112, v110);
          float32x2_t v131 = vrecpe_f32(v130);
          int v132 = 4;
          do
          {
            float32x2_t v131 = vmul_f32(v131, vrecps_f32(v130, v131));
            --v132;
          }
          while (v132);
          uint64_t v115 = 0;
          uint64_t v114 = 2;
        }
        int v126 = 2;
      }
LABEL_39:
      float32x4_t v133 = a1[v115];
      float32x4_t v134 = a1[v114];
      long long v135 = a2[v115];
      long long v136 = a2[v114];
      long long v137 = a3[v115];
      long long v138 = a3[v114];
      int v139 = a4[v115];
      int v140 = a4[v114];
      int v141 = a5[v115];
      int v142 = a5[v114];
      *a1 = v133;
      a1[1] = v134;
      *a2 = v135;
      a2[1] = v136;
      *a3 = v137;
      a3[1] = v138;
      *a4 = v139;
      a4[1] = v140;
      *a5 = v141;
      a5[1] = v142;
      *a6 = v126;
      return;
    }
    float32x2_t v121 = vrecpe_f32(v79);
    int v122 = 4;
    do
    {
      float32x2_t v121 = vmul_f32(v121, vrecps_f32(v79, v121));
      --v122;
    }
    while (v122);
  }
}

__n128 physx::Gu::HeightField::HeightField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = 196609;
  *(_DWORD *)(a1 + 24) = 1;
  *(void *)a1 = &unk_26E729030;
  *(void *)(a1 + 16) = &unk_26E729100;
  *(_WORD *)(a1 + 92) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 32) = *(void *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 8);
  *(void *)(a1 + 48) = *(void *)(a3 + 16);
  __n128 result = *(__n128 *)(a3 + 24);
  long long v4 = *(_OWORD *)(a3 + 40);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a3 + 56);
  *(_OWORD *)(a1 + 72) = v4;
  *(__n128 *)(a1 + 56) = result;
  *(_WORD *)(a1 + 92) = *(_WORD *)(a3 + 60);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  return result;
}

uint64_t physx::Gu::HeightField::releaseMemory(uint64_t this)
{
  if (*(_WORD *)(this + 10))
  {
    uint64_t v1 = this;
    if (*(void *)(this + 80)) {
      this = (*(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
    *(void *)(v1 + 80) = 0;
  }
  return this;
}

void physx::Gu::HeightField::~HeightField(physx::Gu::HeightField *this)
{
  *(void *)this = &unk_26E729030;
  *((void *)this + 2) = &unk_26E729100;
  physx::Gu::HeightField::releaseMemory((uint64_t)this);
}

{
  void (*v1)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E729030;
  *((void *)this + 2) = &unk_26E729100;
  physx::Gu::HeightField::releaseMemory((uint64_t)this);
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

void non-virtual thunk to'physx::Gu::HeightField::~HeightField(physx::Gu::HeightField *this)
{
  *((void *)this - 2) = &unk_26E729030;
  *(void *)this = &unk_26E729100;
  physx::Gu::HeightField::releaseMemory((uint64_t)this - 16);
}

{
  physx::Gu::HeightField::~HeightField((physx::Gu::HeightField *)((char *)this - 16));
}

uint64_t physx::Gu::HeightField::onRefCountZero(physx::Gu::HeightField *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (physx::GuMeshFactory::removeHeightField(*((void *)this + 16), (uint64_t)this))
  {
    uint64_t v13 = *((void *)this + 16);
    uint64_t v14 = *(void *)this;
    if (*((_WORD *)this + 5)) {
      uint64_t result = (*(uint64_t (**)(physx::Gu::HeightField *))(v14 + 32))(this);
    }
    else {
      uint64_t result = (*(uint64_t (**)(physx::Gu::HeightField *))(v14 + 24))(this);
    }
    uint64_t v17 = *(unsigned int *)(v13 + 248);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 8 * v17;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, physx::Gu::HeightField *, uint64_t))(**(void **)(*(void *)(v13 + 240) + v18)
                                                                                      + 16))(*(void *)(*(void *)(v13 + 240) + v18), this, 1);
        v18 += 8;
      }
      while (v19 != v18);
    }
  }
  else
  {
    uint64_t v16 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v16, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 101, "Gu::HeightField::onRefCountZero: double deletion detected!", v10, v11, v12, a9);
  }
  return result;
}

uint64_t non-virtual thunk to'physx::Gu::HeightField::onRefCountZero(physx::Gu::HeightField *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::Gu::HeightField::onRefCountZero((physx::Gu::HeightField *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Gu::HeightField::exportExtraData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (4 * *(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 60));
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
  uint64_t v5 = *(void *)(a1 + 80);
  float32x4_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v6(a2, v5, v4);
}

uint64_t physx::Gu::HeightField::release(uint64_t this)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 24), 0xFFFFFFFF) == 1) {
    return (*(uint64_t (**)(void))(*(void *)(this + 16) + 16))();
  }
  return this;
}

uint64_t physx::Gu::HeightField::acquireReference(uint64_t this)
{
  return this;
}

uint64_t physx::Gu::HeightField::getReferenceCount(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::Gu::HeightField::modifySamples(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  float v13 = *(float *)(a1 + 112);
  float v14 = *(float *)(a1 + 116);
  unsigned int v15 = (*(_DWORD *)a4 + a3) & ~((*(_DWORD *)a4 + a3) >> 31);
  unsigned int v33 = v10;
  if (v15 >= v10) {
    unsigned int v15 = v10;
  }
  unsigned int v16 = a3 & ~(a3 >> 31);
  unsigned int v36 = v15;
  if (v16 < v15)
  {
    unsigned int v17 = (*(_DWORD *)(a4 + 4) + a2) & ~((*(_DWORD *)(a4 + 4) + a2) >> 31);
    if (v17 >= v9) {
      uint64_t v18 = v9;
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t v19 = a2 & ~(a2 >> 31);
    unsigned int v20 = v16 - a3;
    int v21 = -a2;
    int v22 = v9 * v16;
    uint64_t v35 = v19;
    do
    {
      if (v19 < v18)
      {
        uint64_t v23 = *(void *)(a1 + 80);
        uint64_t v24 = v19;
        do
        {
          uint64_t v25 = v23 + 4 * (v22 + v24);
          *(_DWORD *)uint64_t v25 = *(_DWORD *)(*(void *)(a4 + 24) + 4 * (v21 + v24 + v20 * *(_DWORD *)(a4 + 4)));
          if (physx::Gu::HeightField::isCollisionVertexPreca((physx::Gu::HeightField *)a1, v22 + v24, v16, v24, v11, v12))
          {
            char v26 = 0x80;
          }
          else
          {
            char v26 = 0;
          }
          *(unsigned char *)(v25 + 3) = v26 & 0x80 | *(unsigned char *)(v25 + 3) & 0x7F;
          uint64_t v23 = *(void *)(a1 + 80);
          int v27 = *(__int16 *)(v23 + 4 * (v22 + v24));
          if (v13 > (float)v27) {
            float v13 = (float)v27;
          }
          if (v14 < (float)v27) {
            float v14 = (float)v27;
          }
          ++v24;
        }
        while (v18 != v24);
      }
      ++v16;
      ++v20;
      uint64_t v19 = v35;
      v22 += v9;
    }
    while (v16 != v36);
  }
  if (a5)
  {
    uint64_t v28 = v33 * v9;
    if (v28)
    {
      float32x4_t v29 = *(__int16 **)(a1 + 80);
      float v14 = -3.4028e38;
      float v13 = 3.4028e38;
      do
      {
        int v30 = *v29;
        v29 += 2;
        float v31 = (float)v30;
        if (v13 > (float)v30) {
          float v13 = v31;
        }
        if (v14 < v31) {
          float v14 = v31;
        }
        --v28;
      }
      while (v28);
    }
    else
    {
      float v13 = 3.4028e38;
      float v14 = -3.4028e38;
    }
  }
  *(float *)(a1 + 112) = v13;
  *(float *)(a1 + 116) = v14;
  *(float *)(a1 + 36) = (float)(v14 + v13) * 0.5;
  *(float *)(a1 + 48) = (float)(v14 - v13) * 0.5;
  ++*(_DWORD *)(a1 + 120);
  return 1;
}

BOOL physx::Gu::HeightField::isCollisionVertexPreca(physx::Gu::HeightField *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned __int16 a5, BOOL *a6)
{
  if ((*((_WORD *)this + 46) & 1) == 0)
  {
LABEL_2:
    char v16 = 0;
    if (physx::Gu::HeightField::isSolidVertex(this, a2, a3, a4, &v16, a6)) {
      return 1;
    }
    if (v16)
    {
      uint64_t v11 = *((void *)this + 10);
      int v12 = 2 * *(__int16 *)(v11 + 4 * a2);
      if (a3 && *((_DWORD *)this + 14) - 1 > a3)
      {
        int v13 = v12
            - (*(__int16 *)(v11 + 4 * (*((_DWORD *)this + 15) + a2))
             + *(__int16 *)(v11 + 4 * (a2 - *((_DWORD *)this + 15))));
        int v14 = 1;
        if (!a4) {
          goto LABEL_17;
        }
      }
      else
      {
        int v14 = 0;
        int v13 = 0;
        if (!a4) {
          goto LABEL_17;
        }
      }
      if (*((_DWORD *)this + 15) - 1 > a4)
      {
        int v15 = v12 - (*(__int16 *)(v11 + 4 * (a2 + 1)) + *(__int16 *)(v11 + 4 * (a2 - 1)));
        goto LABEL_19;
      }
LABEL_17:
      if (!v14) {
        return 1;
      }
      int v15 = 0;
LABEL_19:
      if ((v15 ^ v13) < 0) {
        return *((float *)this + 22) < (float)(v15 + v13);
      }
    }
    return 0;
  }
  BOOL result = 0;
  if (a3 && a4)
  {
    if (*((_DWORD *)this + 14) - 1 <= a3 || *((_DWORD *)this + 15) - 1 <= a4) {
      return 0;
    }
    goto LABEL_2;
  }
  return result;
}

uint64_t physx::Gu::HeightField::load(uint64_t a1, void (***a2)(void, unsigned __int32 *, uint64_t))
{
  physx::Gu::HeightField::releaseMemory(a1);
  BOOL v23 = 0;
  int v4 = physx::readHeader(0x48u, 0x46u, 0x48u, 0x46u, &v24, &v23, (uint64_t (***)(void, uint64_t, uint64_t))a2);
  uint64_t result = 0;
  if (v4)
  {
    int v6 = v23;
    *(_DWORD *)(a1 + 56) = physx::readDword(v23, a2);
    *(_DWORD *)(a1 + 60) = physx::readDword(v6, a2);
    *(float *)(a1 + 64) = physx::readFloat(v6, (void (***)(void, float *, uint64_t))a2);
    *(float *)(a1 + 68) = physx::readFloat(v6, (void (***)(void, float *, uint64_t))a2);
    *(float *)(a1 + 72) = physx::readFloat(v6, (void (***)(void, float *, uint64_t))a2);
    physx::readFloat(v6, (void (***)(void, float *, uint64_t))a2);
    *(float *)(a1 + 88) = physx::readFloat(v6, (void (***)(void, float *, uint64_t))a2);
    __int16 v25 = 0;
    (**a2)(a2, (unsigned __int32 *)&v25, 2);
    if (v6)
    {
      char v7 = v25;
      LOBYTE(v25) = HIBYTE(v25);
      HIBYTE(v25) = v7;
    }
    *(_WORD *)(a1 + 92) = v25;
    *(_DWORD *)(a1 + 96) = physx::readDword(v6 != 0, a2);
    float Float = physx::readFloat(v6 != 0, (void (***)(void, float *, uint64_t))a2);
    float v9 = physx::readFloat(v6 != 0, (void (***)(void, float *, uint64_t))a2);
    float v10 = physx::readFloat(v6 != 0, (void (***)(void, float *, uint64_t))a2);
    float v11 = physx::readFloat(v6 != 0, (void (***)(void, float *, uint64_t))a2);
    float v12 = physx::readFloat(v6 != 0, (void (***)(void, float *, uint64_t))a2);
    float v13 = physx::readFloat(v6 != 0, (void (***)(void, float *, uint64_t))a2);
    *(float *)(a1 + 32) = (float)(Float + v11) * 0.5;
    *(float *)(a1 + 36) = (float)(v9 + v12) * 0.5;
    *(float *)(a1 + 40) = (float)(v10 + v13) * 0.5;
    *(float *)(a1 + 44) = (float)(v11 - Float) * 0.5;
    *(float *)(a1 + 48) = (float)(v12 - v9) * 0.5;
    *(float *)(a1 + 52) = (float)(v13 - v10) * 0.5;
    *(_DWORD *)(a1 + 104) = physx::readDword(v6 != 0, a2);
    *(_DWORD *)(a1 + 108) = physx::readDword(v6 != 0, a2);
    *(float *)(a1 + 112) = physx::readFloat(v6 != 0, (void (***)(void, float *, uint64_t))a2);
    *(float *)(a1 + 116) = physx::readFloat(v6 != 0, (void (***)(void, float *, uint64_t))a2);
    *(void *)(a1 + 80) = 0;
    if (!(*(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56))) {
      return 1;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (*(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56)), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 259);
    *(void *)(a1 + 80) = v14;
    if (v14)
    {
      (**a2)(a2, (unsigned __int32 *)v14, (4 * *(_DWORD *)(a1 + 108)));
      if (v6 && *(_DWORD *)(a1 + 108))
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          unsigned int v20 = (char *)(*(void *)(a1 + 80) + v18);
          char v21 = *v20;
          *unsigned int v20 = v20[1];
          v20[1] = v21;
          ++v19;
          v18 += 4;
        }
        while (v19 < *(unsigned int *)(a1 + 108));
      }
      return 1;
    }
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 262, "Gu::HeightField::load: PX_ALLOC failed!", v15, v16, v17, v22);
    return 0;
  }
  return result;
}

uint64_t physx::Gu::HeightField::loadFromDesc(uint64_t a1, int32x2_t *a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  physx::Gu::HeightField::releaseMemory(a1);
  uint64_t v4 = a1;
  int v66 = (physx::Gu::HeightField *)a1;
  *(_DWORD *)(a1 + 96) = a2[1].i32[0];
  *(_DWORD *)(a1 + 88) = a2[4].i32[0];
  *(_WORD *)(a1 + 92) = a2[4].i16[2];
  *(_DWORD *)(a1 + 104) = a2[2].i32[0];
  unsigned int v5 = HIDWORD(*(unint64_t *)a2);
  unsigned int v6 = *a2;
  float32x2_t v7 = vcvt_f32_u32((uint32x2_t)vadd_s32(*a2, (int32x2_t)0x100000001));
  *(int32x2_t *)(a1 + 56) = *a2;
  *(float32x2_t *)(a1 + 64) = v7;
  *(float *)(a1 + 72) = (float)v5;
  *(void *)(a1 + 80) = 0;
  int v8 = v5 * v6;
  *(void *)(v4 + 112) = 0xFF7FFFFF7F7FFFFFLL;
  if (v5 * v6)
  {
    float v9 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v5 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 308);
    *((void *)v66 + 10) = v9;
    if (!v9)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/hf/GuHeightField.cpp", 311, "Gu::HeightField::load: PX_ALLOC failed!", v10, v11, v12, v60);
      return 0;
    }
    float v13 = (__int16 *)a2[3];
    __int16 v14 = 0x7FFF;
    __int16 v15 = 0x8000;
    do
    {
      *v9++ = *(_DWORD *)v13;
      int v16 = *v13;
      if (v16 < v14) {
        __int16 v14 = *v13;
      }
      if (v16 > v15) {
        __int16 v15 = *v13;
      }
      float v13 = (__int16 *)((char *)v13 + a2[2].i32[0]);
      --v8;
    }
    while (v8);
    *((float *)v66 + 28) = (float)v14;
    *((float *)v66 + 29) = (float)v15;
    unsigned int v6 = *((_DWORD *)v66 + 14);
    unsigned int v5 = *((_DWORD *)v66 + 15);
  }
  for (uint64_t i = 0; i != 32; i += 16)
  {
    uint64_t v18 = (char *)&v67 + i;
    *(void *)uint64_t v18 = 0;
    *((_DWORD *)v18 + 2) = 0;
  }
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extendUninitialized((uint64_t)&v67, v5 + 1);
  bzero(v67, (4 * v68));
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extendUninitialized((uint64_t)&v69, v5 + 1);
  bzero(v69, (4 * v70));
  if (v5)
  {
    uint64_t v21 = 0;
    char v22 = v67;
    BOOL v23 = (unsigned char *)(*((void *)v66 + 10) + 3);
    do
    {
      int v24 = *v23 & 0x7F;
      if ((~*(v23 - 1) & 0x7F) == 0 || v24 == 127)
      {
        v22[v21 >> 5] |= 1 << v21;
        v22[(v21 + 1) >> 5] |= 1 << (v21 + 1);
      }
      if (physx::Gu::HeightField::isCollisionVertexPreca(v66, v21, 0, v21, v19, v20)) {
        char v25 = 0x80;
      }
      else {
        char v25 = 0;
      }
      *BOOL v23 = v25 | v24;
      v23 += 4;
      ++v21;
    }
    while (v5 != v21);
  }
  unsigned int v61 = v6;
  unsigned int v62 = v5;
  unsigned int v26 = v6 - 1;
  if (v6 > 1)
  {
    uint64_t v27 = v5 - 1;
    unsigned int v28 = v62;
    unsigned int v29 = 1;
    uint64_t v63 = 1;
    uint64_t v64 = 0;
    while (1)
    {
      int v30 = v66;
      if (v62) {
        break;
      }
LABEL_48:
      bzero(*(&v67 + 2 * v64), (4 * *((_DWORD *)&v67 + 4 * v64 + 2)));
      v63 ^= 1uLL;
      v64 ^= 1uLL;
      ++v29;
      v28 += v62;
      if (v29 == v61) {
        goto LABEL_49;
      }
    }
    unint64_t v31 = 0;
    uint64_t v32 = *((void *)v66 + 10);
    unsigned int v33 = &v67 + 2 * v64;
    int v65 = &v67 + 2 * v63;
    while (1)
    {
      int v34 = (__int16 *)(v32 + 4 * (v28 + v31));
      unsigned int v36 = (char *)v34 + 3;
      char v35 = *((unsigned char *)v34 + 3);
      int v37 = v35 & 0x7F;
      uint64_t v38 = v31 >> 5;
      if ((~*((unsigned __int8 *)v34 + 2) & 0x7F) == 0 || v37 == 127)
      {
        int8x16_t v39 = *v33;
        *((_DWORD *)*v33 + v38) |= 1 << v31;
        int v40 = 1 << (v31 + 1);
        unsigned int v41 = (v31 + 1) >> 5;
        v39[v41] |= v40;
        float32x2_t v42 = *v65;
        *((_DWORD *)*v65 + v38) |= 1 << v31;
        v42[v41] |= v40;
      }
      if (!v31 || v27 == v31 || v29 == v26 || ((*((_DWORD *)*v33 + v38) >> v31) & 1) != 0)
      {
        BOOL isCollisionVertexPreca = physx::Gu::HeightField::isCollisionVertexPreca(v30, v28 + v31, v29, v31, v19, v20);
        int v30 = v66;
        if (isCollisionVertexPreca) {
          char v44 = 0x80;
        }
        else {
          char v44 = 0;
        }
        char v45 = v44 | v37;
        goto LABEL_36;
      }
      int v46 = 2 * *v34;
      int v47 = *((_DWORD *)v30 + 15);
      if (*((_DWORD *)v30 + 14) - 1 > v29) {
        break;
      }
      if (v31 < (v47 - 1))
      {
        int v48 = 0;
LABEL_44:
        int v49 = v46
            - (*(__int16 *)(v32 + 4 * (v28 + v31 + 1))
             + *(__int16 *)(v32 + 4 * (v28 + v31 - 1)));
LABEL_45:
        if (((v49 ^ v48) & 0x80000000) == 0 || *((float *)v30 + 22) >= (float)(v49 + v48)) {
          goto LABEL_37;
        }
      }
      char v45 = v35 | 0x80;
LABEL_36:
      *unsigned int v36 = v45;
LABEL_37:
      if (v62 == ++v31) {
        goto LABEL_48;
      }
    }
    int v48 = v46
        - (*(__int16 *)(v32 + 4 * (v28 + v31 + v47))
         + *(__int16 *)(v32 + 4 * (v28 + v31 - v47)));
    if (v31 < (v47 - 1)) {
      goto LABEL_44;
    }
    int v49 = 0;
    goto LABEL_45;
  }
LABEL_49:
  uint64_t v50 = 0;
  float32x4_t v51 = v66;
  do
  {
    float32x4_t v52 = (char *)&v67 + v50;
    if (*(void **)((char *)&v69 + v50))
    {
      if ((*((_DWORD *)v52 + 6) & 0x80000000) == 0)
      {
        (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        float32x4_t v51 = v66;
      }
    }
    *((void *)v52 + 2) = 0;
    v50 -= 16;
  }
  while (v50 != -32);
  int v53 = *((_DWORD *)v51 + 14);
  int v54 = *((_DWORD *)v51 + 15);
  *((_DWORD *)v51 + 27) = v54 * v53;
  float v55 = *((float *)v51 + 28);
  float v56 = *((float *)v51 + 29);
  float v57 = (float)(v53 - 1) * 0.5;
  float v58 = (float)(v54 - 1) * 0.5;
  *((float *)v51 + 8) = v57;
  *((float *)v51 + 9) = (float)(v55 + v56) * 0.5;
  *((float *)v51 + 10) = v58;
  *((float *)v51 + 11) = v57;
  *((float *)v51 + 12) = (float)(v56 - v55) * 0.5;
  *((float *)v51 + 13) = v58;
  return 1;
}

size_t physx::Gu::HeightField::saveCells(physx::Gu::HeightField *this, void *__dst, unsigned int a3)
{
  unsigned int v3 = 4 * *((_DWORD *)this + 15) * *((_DWORD *)this + 14);
  if (v3 >= a3) {
    size_t v4 = a3;
  }
  else {
    size_t v4 = v3;
  }
  memcpy(__dst, *((const void **)this + 10), v4);
  return v4;
}

uint64_t physx::getVertexEdgeIndices(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, _DWORD *a5)
{
  int v5 = *(_DWORD *)(a1 + 56);
  int v6 = *(_DWORD *)(a1 + 60);
  if (a3)
  {
    unsigned int v7 = a2 - v6;
    int v8 = 3 * (a2 - v6);
    *a5 = v8 + 2;
    a5[1] = a2 - v6;
    a5[2] = a3 - 1;
    a5[3] = a4;
    if (v6 - 1 <= a4)
    {
      uint64_t v10 = 1;
      goto LABEL_12;
    }
    if (*(char *)(*(void *)(a1 + 80) + 4 * v7 + 2) < 0)
    {
      unsigned int v9 = 1;
    }
    else
    {
      a5[4] = v8 + 1;
      a5[5] = v7;
      a5[6] = a3 - 1;
      a5[7] = a4;
      unsigned int v9 = 2;
    }
  }
  else
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    if (v6 - 1 <= a4) {
      goto LABEL_12;
    }
  }
  uint64_t v11 = &a5[4 * v9];
  *uint64_t v11 = 3 * a2;
  v11[1] = a2;
  v11[2] = a3;
  v11[3] = a4;
  uint64_t v10 = v9 + 1;
  if (v5 - 1 > a3 && *(char *)(*(void *)(a1 + 80) + 4 * a2 + 2) < 0)
  {
    uint64_t v12 = &a5[4 * v10];
    *uint64_t v12 = 3 * a2 + 1;
    v12[1] = a2;
    v12[2] = a3;
    v12[3] = a4;
    uint64_t v10 = v9 + 2;
  }
LABEL_12:
  if (v5 - 1 <= a3)
  {
    if (!a4) {
      return v10;
    }
    unsigned int v15 = a2 - 1;
  }
  else
  {
    float v13 = &a5[4 * v10];
    *float v13 = 3 * a2 + 2;
    v13[1] = a2;
    v13[2] = a3;
    v13[3] = a4;
    uint64_t v14 = (v10 + 1);
    if (!a4) {
      return v14;
    }
    unsigned int v15 = a2 - 1;
    if (*(char *)(*(void *)(a1 + 80) + 4 * (a2 - 1) + 2) < 0)
    {
      LODWORD(v10) = v10 + 1;
    }
    else
    {
      int v16 = &a5[4 * v14];
      *int v16 = 3 * v15 + 1;
      v16[1] = v15;
      v16[2] = a3;
      v16[3] = a4 - 1;
      LODWORD(v10) = v10 + 2;
    }
  }
  uint64_t v17 = &a5[4 * v10];
  *uint64_t v17 = 3 * v15;
  v17[1] = v15;
  v17[2] = a3;
  v17[3] = a4 - 1;
  uint64_t v14 = (v10 + 1);
  if (a3)
  {
    unsigned int v18 = ~v6 + a2;
    if (*(char *)(*(void *)(a1 + 80) + 4 * v18 + 2) < 0)
    {
      unsigned __int16 v19 = &a5[4 * v14];
      *unsigned __int16 v19 = 3 * v18 + 1;
      v19[1] = v18;
      v19[2] = a3 - 1;
      v19[3] = a4 - 1;
      return (v10 + 2);
    }
  }
  return v14;
}

BOOL physx::Gu::HeightField::isSolidVertex(physx::Gu::HeightField *this, unsigned int a2, unsigned int a3, unsigned int a4, char *a5, BOOL *a6)
{
  v49[15] = *MEMORY[0x263EF8340];
  unsigned int VertexEdgeIndices = physx::getVertexEdgeIndices((uint64_t)this, a2, a3, a4, &v48);
  if (!VertexEdgeIndices)
  {
    char v44 = 0;
    BOOL v30 = 0;
    goto LABEL_46;
  }
  unint64_t v9 = VertexEdgeIndices;
  int v10 = *((_DWORD *)this + 15);
  unsigned int v11 = *((_DWORD *)this + 14) - 1;
  unsigned int v12 = v10 - 1;
  float v13 = (unsigned int *)v49;
  uint64_t v14 = &v45;
  unsigned int v15 = v47;
  uint64_t v16 = VertexEdgeIndices;
  do
  {
    uint64_t v17 = *(v13 - 1);
    unsigned int v18 = *v13;
    unsigned int v19 = v13[1];
    int v20 = -3 * v17 + *(v13 - 2);
    if (v20 == 2)
    {
      if (v18 >= v11) {
        goto LABEL_17;
      }
      if (v19)
      {
        *(_DWORD *)uint64_t v14 = 2 * v17 - 1;
        uint64_t v21 = 1;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if (v19 < v12)
      {
        int v23 = 2 * v17;
        int v24 = v21 + 1;
LABEL_27:
        *(_DWORD *)&v14[4 * v21] = v23;
        LODWORD(v21) = v24;
      }
    }
    else
    {
      if (v20 == 1)
      {
        if (v18 >= v11 || v19 >= v12)
        {
LABEL_17:
          LODWORD(v21) = 0;
          goto LABEL_28;
        }
        *(_DWORD *)uint64_t v14 = 2 * v17;
        int v23 = (2 * v17) | 1;
        uint64_t v21 = 1;
        int v24 = 2;
        goto LABEL_27;
      }
      if (v20 || v19 >= v12) {
        goto LABEL_17;
      }
      if (v18)
      {
        *(_DWORD *)uint64_t v14 = (*(unsigned __int8 *)(*((void *)this + 10) + 4 * (v17 - v10) + 2) >> 7) ^ 1 | (2 * (v17 - v10));
        uint64_t v21 = 1;
      }
      else
      {
        uint64_t v21 = 0;
      }
      if (v18 < v11)
      {
        int v25 = *(char *)(*((void *)this + 10) + 4 * v17 + 2);
        int v26 = 2 * v17;
        if (v25 < 0) {
          int v23 = v26 | 1;
        }
        else {
          int v23 = v26;
        }
        int v24 = v21 + 1;
        goto LABEL_27;
      }
    }
LABEL_28:
    v13 += 4;
    *v15++ = v21;
    v14 += 8;
    --v16;
  }
  while (v16);
  uint64_t v27 = 0;
  *a5 = 0;
  uint64_t v28 = *((void *)this + 10);
  unsigned int v29 = (unsigned int *)&v46;
  BOOL v30 = 1;
  while (1)
  {
    uint64_t v31 = *(v29 - 1);
    uint64_t v32 = v28 + ((2 * v31) & 0x1FFFFFFFCLL);
    unsigned int v33 = (unsigned char *)(v32 + 2);
    int v34 = (unsigned char *)(v32 + 3);
    if (v31) {
      char v35 = v34;
    }
    else {
      char v35 = v33;
    }
    int v36 = *v35 & 0x7F;
    if (v47[v27] < 2u)
    {
      if (v36 != 127) {
        return v30;
      }
      goto LABEL_43;
    }
    uint64_t v37 = *v29;
    uint64_t v38 = v28 + ((2 * v37) & 0x1FFFFFFFCLL);
    int8x16_t v39 = (unsigned char *)(v38 + 2);
    int v40 = (unsigned char *)(v38 + 3);
    if (v37) {
      unsigned int v41 = v40;
    }
    else {
      unsigned int v41 = v39;
    }
    int v42 = *v41 & 0x7F;
    if (v36 != 127)
    {
      *a5 = 1;
      if (v42 == 127) {
        return v30;
      }
      goto LABEL_43;
    }
    if (v42 != 127) {
      break;
    }
LABEL_43:
    BOOL v30 = ++v27 < v9;
    v29 += 2;
    if (v9 == v27) {
      return v30;
    }
  }
  char v44 = 1;
LABEL_46:
  *a5 = v44;
  return v30;
}

uint64_t physx::Gu::HeightField::computeCellCoordinates(physx::Gu::HeightField *this, float a2, float a3, float *a4, float *a5)
{
  float v5 = fmaxf(a2, 0.0);
  float v6 = fmaxf(a3, 0.0);
  float v7 = fabsf(v6 + 1.0);
  float v8 = (float)(1.0 - (float)(fabsf(v5 + 1.0) * 0.000001)) + *((float *)this + 16);
  if (v5 >= v8) {
    float v5 = v8;
  }
  if (v6 >= (float)((float)(1.0 - (float)(v7 * 0.000001)) + *((float *)this + 17))) {
    float v6 = (float)(1.0 - (float)(v7 * 0.000001)) + *((float *)this + 17);
  }
  float v9 = floorf(v5);
  *a4 = v5 - v9;
  float v10 = floorf(v6);
  *a5 = v6 - v10;
  return (float)(v10 + (float)(v9 * *((float *)this + 18)));
}

float physx::Gu::HeightFieldUtil::computeLocalBounds(uint64_t a1, float *a2)
{
  unsigned int v3 = *(float **)(a1 + 16);
  int v2 = *(float **)(a1 + 24);
  float v5 = v2[4];
  float v4 = v2[5];
  float v6 = v2[6];
  float v7 = v5 * 0.0;
  float v8 = (float)(v5 * 0.0) * 0.0;
  float v9 = (float)(v6 * 0.0) * 0.0;
  float v10 = (float)(v4 + v8) + v9;
  float v11 = (float)((float)(v4 * 0.0) + (float)(v5 * 0.0)) + v9;
  float v12 = (float)(v6 * 0.0) + (float)((float)(v4 * 0.0) + v8);
  float v13 = (float)(v4 * 0.0) * 0.0;
  float v14 = (float)(v5 + v13) + v9;
  float v15 = (float)(v13 + v7) + (float)(v6 * 0.0);
  float v16 = v6 + (float)(v13 + v8);
  float v17 = v3[8] - v3[11];
  float v18 = v3[9] - v3[12];
  float v19 = v3[10] - v3[13];
  float v20 = v14 * v18;
  float v21 = (float)(v10 * v17) + (float)(v11 * v18);
  float v22 = (float)(v12 * v17) + (float)(v15 * v18);
  float result = (float)((float)(v11 * v17) + v20) + (float)(v15 * v19);
  *a2 = v21 + (float)(v12 * v19);
  a2[1] = result;
  a2[2] = v22 + (float)(v16 * v19);
  float v24 = v3[8] + v3[11];
  float v25 = v3[9] + v3[12];
  float v26 = v3[10] + v3[13];
  float v27 = (float)((float)(v11 * v24) + (float)(v14 * v25)) + (float)(v15 * v26);
  a2[3] = (float)((float)(v10 * v24) + (float)(v11 * v25)) + (float)(v12 * v26);
  a2[4] = v27;
  a2[5] = (float)((float)(v12 * v24) + (float)(v15 * v25)) + (float)(v16 * v26);
  float v28 = (float)(result - v27) + 0.0005;
  if (v28 > 0.0)
  {
    a2[4] = v27 + (float)(v28 * 0.6);
    float result = result - (float)(v28 * 0.6);
    a2[1] = result;
  }
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint(physx::Gu::HeightFieldUtil *this, float a2, float a3)
{
  float v4 = *(float *)this * a2;
  uint64_t result = 0xFFFFFFFFLL;
  if (v4 >= 0.0)
  {
    float v6 = *((float *)this + 2) * a3;
    if (v6 >= 0.0)
    {
      uint64_t v7 = *((void *)this + 2);
      if (v4 < (float)(*(float *)(v7 + 64) + 1.0) && v6 < (float)(*(float *)(v7 + 68) + 1.0))
      {
        uint64_t v14 = 0;
        unsigned int v8 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v7, v4, v6, (float *)&v14 + 1, (float *)&v14);
        uint64_t v9 = *(void *)(v7 + 80);
        if (*(char *)(v9 + 4 * v8 + 2) >= 0) {
          BOOL v10 = (float)(*((float *)&v14 + 1) + *(float *)&v14) > 1.0;
        }
        else {
          BOOL v10 = *(float *)&v14 > *((float *)&v14 + 1);
        }
        uint64_t v11 = v9 + 4 * (v8 & 0x7FFFFFFF);
        float v12 = (unsigned __int8 *)(v11 + 2);
        float v13 = (unsigned __int8 *)(v11 + 3);
        if (!v10) {
          float v13 = v12;
        }
        if ((~*v13 & 0x7F) != 0) {
          return v10 | (2 * v8);
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::findClosestPointsOnCell(uint64_t a1, unsigned int a2, unsigned int a3, float *a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 16);
  int v10 = *(_DWORD *)(v9 + 60);
  unsigned int v11 = a3 + v10 * a2;
  int v12 = *(_DWORD *)(v9 + 56) - 2;
  int v51 = v12;
  int v52 = v10;
  BOOL v13 = v10 - 2 == a3;
  HIDWORD(v55) = v13;
  if (v12 != a2) {
    BOOL v13 = 0;
  }
  BOOL v53 = v12 == a2;
  BOOL v54 = v13;
  uint64_t v50 = *(void *)(v9 + 80);
  uint64_t v14 = v50 + 4 * (v11 & 0x7FFFFFFF);
  int v15 = *(unsigned char *)(v14 + 3) & 0x7F;
  if ((~*(unsigned __int8 *)(v14 + 2) & 0x7F) != 0)
  {
    float v16 = a4;
    physx::Gu::HeightFieldUtil::findProjectionOnTriangle(a1, 2 * v11, a2, a3, a4, (float *)v57);
    if (v19)
    {
      LODWORD(v55) = 0;
      BOOL v53 = 0;
      *(void *)a5 = *(void *)v57;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)&v57[8];
      uint64_t v17 = 1;
    }
    else
    {
      uint64_t v17 = 0;
      LODWORD(v55) = 1;
    }
    int v18 = v19 ^ 1;
  }
  else
  {
    float v16 = a4;
    uint64_t v17 = 0;
    int v18 = 1;
    LODWORD(v55) = 1;
  }
  if (v15 == 127)
  {
    float v20 = v16;
  }
  else
  {
    float v20 = v16;
    physx::Gu::HeightFieldUtil::findProjectionOnTriangle(a1, (2 * v11) | 1, a2, a3, v16, (float *)v57);
    if (v21)
    {
      uint64_t v55 = 0;
      BOOL v54 = 0;
      uint64_t v22 = a5 + 12 * v17;
      *(void *)uint64_t v22 = *(void *)v57;
      *(_DWORD *)(v22 + 8) = *(_DWORD *)&v57[8];
      uint64_t v17 = (v17 + 1);
    }
  }
  if (!v17)
  {
    int v24 = 3 * v11;
    physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, 3 * v11, v11, a2, a3, v20, (float *)v57);
    int v49 = 3 * v11;
    if (v25 <= 0.0)
    {
      if (v18)
      {
        if (physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11, a2, a3) == -1)
        {
          uint64_t v17 = 0;
        }
        else
        {
          *(void *)a5 = *(void *)v57;
          *(_DWORD *)(a5 + 8) = *(_DWORD *)&v57[8];
          uint64_t v17 = 1;
        }
        unsigned int v27 = v24 + 2;
        physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, v24 + 2, v11, a2, a3, v20, (float *)v57);
        if (v34 <= 0.0) {
          goto LABEL_43;
        }
        if (v34 < 1.0)
        {
LABEL_37:
          int EdgeFaceIndex = physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, v27);
LABEL_40:
          if (EdgeFaceIndex == -1) {
            goto LABEL_43;
          }
          unsigned int v31 = v17;
          uint64_t v32 = 12 * v17;
          int v33 = *(_DWORD *)v57;
          uint64_t v30 = a5;
          goto LABEL_42;
        }
LABEL_38:
        if (!v53) {
          goto LABEL_43;
        }
        int EdgeFaceIndex = physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11 + v52, a2 + 1, a3);
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    if (v25 >= 1.0)
    {
      if (!HIDWORD(v55)) {
        goto LABEL_25;
      }
      int VertexFaceIndex = physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11 + 1, a2, a3 + 1);
    }
    else
    {
      int VertexFaceIndex = physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, 3 * v11);
    }
    if (VertexFaceIndex != -1)
    {
      *(void *)a5 = *(void *)v57;
      *(_DWORD *)(a5 + 8) = *(_DWORD *)&v57[8];
      uint64_t v17 = 1;
      goto LABEL_26;
    }
LABEL_25:
    uint64_t v17 = 0;
LABEL_26:
    if ((v18 | v53) != 1) {
      goto LABEL_43;
    }
    unsigned int v27 = v24 + 2;
    physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, v24 + 2, v11, a2, a3, v20, (float *)v57);
    if (v28 <= 0.0)
    {
      if (!v18
        || (int v29 = physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11, a2, a3),
            uint64_t v30 = a5,
            v29 == -1))
      {
LABEL_43:
        if (v51 == a2)
        {
          physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, 3 * (v11 + v52), v11 + v52, a2 + 1, a3, v20, (float *)v57);
          BOOL v37 = v36 > 0.0 && v36 < 1.0;
          if (v37
            && physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, 3 * (v11 + v52)) != -1)
          {
            uint64_t v38 = a5 + 12 * v17;
            *(void *)uint64_t v38 = *(void *)v57;
            *(_DWORD *)(v38 + 8) = *(_DWORD *)&v57[8];
            uint64_t v17 = (v17 + 1);
          }
        }
        if (HIDWORD(v55))
        {
          physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, v49 + 5, v11 + 1, a2, a3 + 1, v20, (float *)v57);
          BOOL v40 = v39 > 0.0 && v39 < 1.0;
          if (v40
            && physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, v49 + 5) != -1)
          {
            uint64_t v41 = a5 + 12 * v17;
            *(void *)uint64_t v41 = *(void *)v57;
            *(_DWORD *)(v41 + 8) = *(_DWORD *)&v57[8];
            uint64_t v17 = (v17 + 1);
          }
        }
        if (v54
          && physx::Gu::HeightFieldUtil::getVertexFaceIndex((physx::Gu::HeightFieldUtil *)v9, v11 + v52 + 1, a2 + 1, a3 + 1) != -1)
        {
          int v42 = *(float32x2_t **)(a1 + 24);
          v43.f32[0] = (float)*(__int16 *)(v50 + 4 * (v11 + v52 + 1));
          float v44 = v42[3].f32[0] * (float)(a3 + 1);
          uint64_t v45 = a5 + 12 * v17;
          v43.f32[1] = (float)(a2 + 1);
          *(int32x2_t *)uint64_t v45 = vrev64_s32((int32x2_t)vmul_f32(v42[2], v43));
          *(float *)(v45 + 8) = v44;
          uint64_t v17 = (v17 + 1);
        }
        if (v55
          && physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v9, v49 + 1) != -1)
        {
          physx::Gu::HeightFieldUtil::findClosestPointOnEdge(a1, v49 + 1, v11, a2, a3, v20, (float *)v57);
          if (v46 > 0.0 && v46 < 1.0)
          {
            uint64_t v48 = a5 + 12 * v17;
            *(void *)uint64_t v48 = *(void *)v57;
            *(_DWORD *)(v48 + 8) = *(_DWORD *)&v57[8];
            return (v17 + 1);
          }
        }
        return v17;
      }
      unsigned int v31 = v17;
      uint64_t v32 = 12 * v17;
      int v33 = *(_DWORD *)v57;
LABEL_42:
      *(_DWORD *)(v30 + v32) = v33;
      *(void *)(v30 + 12 * v31 + 4) = *(void *)&v57[4];
      uint64_t v17 = (v17 + 1);
      goto LABEL_43;
    }
    if (v28 < 1.0)
    {
      if (!v18) {
        goto LABEL_43;
      }
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  return v17;
}

float physx::Gu::HeightFieldUtil::findProjectionOnTriangle(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, float *a5, float *a6)
{
  uint64_t v7 = *(void *)(a1 + 16);
  float v6 = *(float **)(a1 + 24);
  float v8 = v6[4];
  uint64_t v9 = *(void *)(v7 + 80);
  int v10 = (__int16 *)(v9 + 4 * (a2 >> 1));
  float v11 = v8 * (float)*v10;
  float v12 = v8 * (float)*(__int16 *)(v9 + 4 * ((a2 >> 1) + 1));
  float v13 = v8 * (float)*(__int16 *)(v9 + 4 * (*(_DWORD *)(v7 + 60) + (a2 >> 1)));
  float v14 = v8 * (float)*(__int16 *)(v9 + 4 * (*(_DWORD *)(v7 + 60) + (a2 >> 1) + 1));
  if ((char)v10[1] < 0)
  {
    float v21 = v6[6];
    float v17 = *(float *)(a1 + 8);
    if (a2)
    {
      float result = v6[5] * (float)a3;
      float v16 = v21 * (float)(a4 + 1);
      float v17 = -v17;
      float v18 = *(float *)a1;
      float v19 = v12;
      float v20 = v11;
      float v11 = v14;
    }
    else
    {
      float result = v6[5] * (float)(a3 + 1);
      float v16 = v21 * (float)a4;
      float v18 = -*(float *)a1;
      float v19 = v13;
      float v20 = v14;
    }
  }
  else if (a2)
  {
    float result = v6[5] * (float)(a3 + 1);
    float v16 = v6[6] * (float)(a4 + 1);
    float v17 = -*(float *)(a1 + 8);
    float v18 = -*(float *)a1;
    float v19 = v14;
    float v20 = v13;
    float v11 = v12;
  }
  else
  {
    float result = v6[5] * (float)a3;
    float v16 = v6[6] * (float)a4;
    float v17 = *(float *)(a1 + 8);
    float v18 = *(float *)a1;
    float v19 = v11;
    float v20 = v12;
    float v11 = v13;
  }
  float v22 = *a5 - result;
  float v23 = a5[1] - v19;
  float v24 = a5[2] - v16;
  float v25 = -(float)((float)(v20 - v19) * v17);
  float v26 = -(float)((float)(v11 - v19) * v18);
  float v27 = (float)((float)(v23 + (float)(v26 * v22)) + (float)(v25 * v24))
      * (float)(1.0 / (float)((float)((float)(v26 * v26) + (float)(v25 * v25)) + 1.0));
  float v28 = v22 - (float)(v26 * v27);
  float v29 = v24 - (float)(v25 * v27);
  float v30 = v18 * v28;
  float v31 = v17 * v29;
  BOOL v32 = v30 > 0.0;
  if (v31 <= 0.0) {
    BOOL v32 = 0;
  }
  if ((float)(v30 + v31) < 1.0 && v32)
  {
    float result = result + v28;
    *a6 = result;
    a6[1] = v19 + (float)(v23 - v27);
    a6[2] = v16 + v29;
  }
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::findClosestPointOnEdge(uint64_t result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, float *a6, float *a7)
{
  int v7 = -3 * a3 + a2;
  float v8 = 0.0;
  if (v7 == 2)
  {
    uint64_t v19 = *(void *)(result + 16);
    float v20 = *(float **)(result + 24);
    uint64_t v21 = *(void *)(v19 + 80);
    float v22 = v20[4];
    float v18 = v20[5];
    float v12 = v22 * (float)*(__int16 *)(v21 + 4 * a3);
    float v23 = v22 * (float)*(__int16 *)(v21 + 4 * (*(_DWORD *)(v19 + 60) + a3));
    float v14 = v18 * (float)a4;
    float v15 = v20[6] * (float)a5;
    float v16 = v23 - v12;
    float v17 = (float)(v16 * v16) + (float)(v18 * v18);
  }
  else if (v7 == 1)
  {
    uint64_t v24 = *(void *)(result + 16);
    uint64_t v25 = *(void *)(v24 + 80);
    float v26 = *(float **)(result + 24);
    float v27 = v26[4];
    float v18 = v26[5];
    if (*(char *)(v25 + 4 * a3 + 2) < 0)
    {
      float v12 = v27 * (float)*(__int16 *)(v25 + 4 * a3);
      float v30 = v27 * (float)*(__int16 *)(v25 + 4 * (a3 + *(_DWORD *)(v24 + 60) + 1));
      float v14 = v18 * (float)a4;
      float v8 = v26[6];
      float v15 = v8 * (float)a5;
      float v16 = v30 - v12;
      float v29 = v8 * v8;
    }
    else
    {
      float v12 = v27 * (float)*(__int16 *)(v25 + 4 * (a3 + 1));
      float v14 = v18 * (float)a4;
      float v28 = v26[6];
      float v15 = v28 * (float)(a5 + 1);
      float v16 = (float)(v27 * (float)*(__int16 *)(v25 + 4 * (*(_DWORD *)(v24 + 60) + a3))) - v12;
      float v8 = -v28;
      float v29 = v28 * v28;
    }
    float v17 = (float)(v29 + (float)(v18 * v18)) + (float)(v16 * v16);
  }
  else if (v7)
  {
    float v18 = 0.0;
    float v16 = 0.0;
    float v14 = 0.0;
    float v12 = 0.0;
    float v15 = 0.0;
    float v17 = 0.0;
  }
  else
  {
    uint64_t v9 = *(float **)(result + 24);
    uint64_t v10 = *(void *)(*(void *)(result + 16) + 80);
    float v11 = v9[4];
    float v12 = v11 * (float)*(__int16 *)(v10 + 4 * a3);
    float v13 = v11 * (float)*(__int16 *)(v10 + 4 * (a3 + 1));
    float v14 = v9[5] * (float)a4;
    float v8 = v9[6];
    float v15 = v8 * (float)a5;
    float v16 = v13 - v12;
    float v17 = (float)(v16 * v16) + (float)(v8 * v8);
    float v18 = 0.0;
  }
  float v31 = (float)((float)((float)(v16 * (float)(a6[1] - v12)) + (float)((float)(*a6 - v14) * v18))
              + (float)((float)(a6[2] - v15) * v8))
      / v17;
  if (v31 >= 0.0)
  {
    if (v31 <= 1.0)
    {
      float v14 = v14 + (float)(v18 * v31);
      float v12 = v12 + (float)(v16 * v31);
      float v15 = v15 + (float)(v8 * v31);
    }
    else
    {
      float v14 = v18 + v14;
      float v12 = v16 + v12;
      float v15 = v8 + v15;
    }
  }
  *a7 = v14;
  a7[1] = v12;
  a7[2] = v15;
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::getVertexFaceIndex(physx::Gu::HeightFieldUtil *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int VertexEdgeIndices = physx::getVertexEdgeIndices((uint64_t)this, a2, a3, a4, v9);
  if (!VertexEdgeIndices) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v6 = VertexEdgeIndices;
  unsigned int v7 = 0;
  while (1)
  {
    uint64_t result = physx::Gu::HeightFieldUtil::getEdgeFaceIndex(this, v9[4 * v7], v9[4 * v7 + 1], v9[4 * v7 + 2], v9[4 * v7 + 3]);
    if (result != -1) {
      break;
    }
    v7 += 2;
    if (v7 >= v6) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t physx::Gu::HeightFieldUtil::getEdgeFaceIndex(physx::Gu::HeightFieldUtil *this, unsigned int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int v2 = a2 / 3;
  unsigned int v3 = *((_DWORD *)this + 15);
  unsigned int v4 = a2 / 3 / v3;
  unsigned int v5 = a2 / 3 % v3;
  LODWORD(v6) = -3 * (a2 / 3);
  unsigned int v7 = a2 % 3;
  if (a2 % 3 == 2)
  {
    LODWORD(v6) = *((_DWORD *)this + 14);
    if (v4 >= (int)v6 - 1) {
      goto LABEL_29;
    }
    if (v5)
    {
      LODWORD(v6) = 2 * v2 - 1;
      unsigned int v19 = v6;
      unsigned int v8 = 1;
    }
    else
    {
      unsigned int v8 = 0;
    }
    if (v5 >= v3 - 1) {
      goto LABEL_28;
    }
    int v10 = 2 * v2;
  }
  else
  {
    if (v7 == 1)
    {
      LODWORD(v6) = *((_DWORD *)this + 14) - 1;
      if (v5 < v3 - 1 && v4 < v6)
      {
        uint64_t v6 = 2 * v2;
        unsigned int v20 = (2 * v2) | 1;
        goto LABEL_22;
      }
      goto LABEL_29;
    }
    if (v7 || v5 >= v3 - 1)
    {
LABEL_29:
      float v17 = (unsigned __int8 *)(*((void *)this + 10) + 4 * (v6 >> 1) + 2);
      goto LABEL_30;
    }
    LODWORD(v6) = v2 - v3;
    if (v2 >= v3)
    {
      LODWORD(v6) = (*(char *)(*((void *)this + 10) + 4 * v6 + 2) >> 7) + 2 * v6 + 1;
      unsigned int v19 = v6;
      unsigned int v8 = 1;
    }
    else
    {
      unsigned int v8 = 0;
    }
    if (v4 >= *((_DWORD *)this + 14) - 1)
    {
LABEL_28:
      if (v6)
      {
        float v17 = (unsigned __int8 *)(*((void *)this + 10) + 4 * (v6 >> 1) + 3);
LABEL_30:
        if ((~*v17 & 0x7F) != 0) {
          return v6;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
      goto LABEL_29;
    }
    int v10 = (*(unsigned __int8 *)(*((void *)this + 10) + 4 * v2 + 2) >> 7) | (2 * v2);
  }
  *(&v19 + v8) = v10;
  uint64_t v6 = v19;
  if (!v8) {
    goto LABEL_28;
  }
LABEL_22:
  uint64_t v11 = *((void *)this + 10);
  uint64_t v12 = v11 + 4 * (v6 >> 1);
  float v13 = (unsigned __int8 *)(v12 + 2);
  float v14 = (unsigned __int8 *)(v12 + 3);
  if ((v6 & 1) == 0) {
    float v14 = v13;
  }
  if ((~*v14 & 0x7F) == 0)
  {
    LODWORD(v6) = v20;
    uint64_t v15 = v11 + ((2 * v20) & 0x1FFFFFFFCLL);
    float v16 = (unsigned __int8 *)(v15 + 2);
    float v17 = (unsigned __int8 *)(v15 + 3);
    if ((v20 & 1) == 0) {
      float v17 = v16;
    }
    goto LABEL_30;
  }
  return v6;
}

uint64_t physx::Gu::HeightFieldUtil::getEdgeFaceIndex(physx::Gu::HeightFieldUtil *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  LODWORD(v5) = -3 * a3;
  int v6 = -3 * a3 + a2;
  if (v6 == 2)
  {
    LODWORD(v5) = *((_DWORD *)this + 14);
    if ((int)v5 - 1 <= a4) {
      goto LABEL_27;
    }
    if (a5)
    {
      LODWORD(v5) = 2 * a3 - 1;
      unsigned int v18 = v5;
      unsigned int v8 = 1;
    }
    else
    {
      unsigned int v8 = 0;
    }
    if (*((_DWORD *)this + 15) - 1 <= a5) {
      goto LABEL_26;
    }
    int v9 = 2 * a3;
  }
  else
  {
    if (v6 == 1)
    {
      LODWORD(v5) = *((_DWORD *)this + 14);
      if ((int)v5 - 1 > a4)
      {
        LODWORD(v5) = *((_DWORD *)this + 15);
        if ((int)v5 - 1 > a5)
        {
          uint64_t v5 = 2 * a3;
          unsigned int v19 = (2 * a3) | 1;
          goto LABEL_20;
        }
      }
      goto LABEL_27;
    }
    if (v6 || (int v7 = *((_DWORD *)this + 15), v7 - 1 <= a5))
    {
LABEL_27:
      float v16 = (unsigned __int8 *)(*((void *)this + 10) + 4 * (v5 >> 1) + 2);
      goto LABEL_28;
    }
    if (a4)
    {
      LODWORD(v5) = (*(char *)(*((void *)this + 10) + 4 * (a3 - v7) + 2) >> 7) + 2 * (a3 - v7) + 1;
      unsigned int v18 = v5;
      unsigned int v8 = 1;
    }
    else
    {
      unsigned int v8 = 0;
    }
    if (*((_DWORD *)this + 14) - 1 <= a4)
    {
LABEL_26:
      if (v5)
      {
        float v16 = (unsigned __int8 *)(*((void *)this + 10) + 4 * (v5 >> 1) + 3);
LABEL_28:
        if ((~*v16 & 0x7F) != 0) {
          return v5;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }
      goto LABEL_27;
    }
    int v9 = (*(unsigned __int8 *)(*((void *)this + 10) + 4 * a3 + 2) >> 7) | (2 * a3);
  }
  *(&v18 + v8) = v9;
  uint64_t v5 = v18;
  if (!v8) {
    goto LABEL_26;
  }
LABEL_20:
  uint64_t v10 = *((void *)this + 10);
  uint64_t v11 = v10 + 4 * (v5 >> 1);
  uint64_t v12 = (unsigned __int8 *)(v11 + 2);
  float v13 = (unsigned __int8 *)(v11 + 3);
  if ((v5 & 1) == 0) {
    float v13 = v12;
  }
  if ((~*v13 & 0x7F) == 0)
  {
    LODWORD(v5) = v19;
    uint64_t v14 = v10 + ((2 * v19) & 0x1FFFFFFFCLL);
    uint64_t v15 = (unsigned __int8 *)(v14 + 2);
    float v16 = (unsigned __int8 *)(v14 + 3);
    if ((v19 & 1) == 0) {
      float v16 = v15;
    }
    goto LABEL_28;
  }
  return v5;
}

BOOL physx::Gu::HeightFieldUtil::overlapAABBTriangles(uint64_t a1, float *a2, float *a3, char a4, uint64_t a5)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  if (a4)
  {
    float v14 = a2[4] * -2.0;
    float v15 = a2[5] * -2.0;
    float v16 = a2[6] * -2.0;
    float v18 = a2[2];
    float v17 = a2[3];
    float v19 = (float)(v17 * v17) + -0.5;
    float v20 = a2[1];
    float v21 = (float)((float)(v15 * v20) + (float)(*a2 * v14)) + (float)(v18 * v16);
    float v22 = (float)((float)(v14 * v19) - (float)((float)((float)(v20 * v16) - (float)(v18 * v15)) * v17))
        + (float)(*a2 * v21);
    float v23 = (float)((float)(v15 * v19) - (float)((float)((float)(v18 * v14) - (float)(*a2 * v16)) * v17))
        + (float)(v20 * v21);
    float v24 = (float)((float)(v16 * v19) - (float)((float)((float)(*a2 * v15) - (float)(v20 * v14)) * v17))
        + (float)(v18 * v21);
    float v25 = a3[1];
    float v27 = a3[2];
    float v26 = a3[3];
    float v28 = a3[4];
    float v29 = a3[5];
    float v30 = (float)((float)(*a3 + v26) * 0.5) + (float)((float)(*a3 + v26) * 0.5);
    float v31 = (float)((float)(v25 + v28) * 0.5) + (float)((float)(v25 + v28) * 0.5);
    float v32 = (float)((float)(v27 + v29) * 0.5) + (float)((float)(v27 + v29) * 0.5);
    float v33 = (float)((float)-(float)(v20 * v31) - (float)(*a2 * v30)) - (float)(v18 * v32);
    float v34 = v22
        + (float)((float)((float)(v17 * (float)((float)(v18 * v31) - (float)(v20 * v32))) + (float)(v30 * v19))
                - (float)(*a2 * v33));
    float v35 = v23
        + (float)((float)((float)(v17 * (float)((float)(*a2 * v32) - (float)(v18 * v30))) + (float)(v31 * v19))
                - (float)(v20 * v33));
    float v36 = v24
        + (float)((float)((float)(v17 * (float)((float)(v20 * v30) - (float)(*a2 * v31))) + (float)(v32 * v19))
                - (float)(v18 * v33));
    float v37 = (float)-*a2 - *a2;
    float v38 = (float)-v20 - v20;
    float v39 = (float)-v18 - v18;
    float v40 = -(float)(v20 * v38);
    float v41 = -(float)(v18 * v39);
    float v42 = -(float)(v20 * v37);
    float v43 = -(float)(v18 * v37);
    float v44 = v17 * v37;
    float v45 = -(float)(v18 * v38);
    float v46 = v17 * v38;
    float v47 = v17 * v39;
    float v48 = v43 - v46;
    float v49 = (float)(*a2 * v37) + 1.0;
    float v50 = v49 - v41;
    float v51 = v43 + v46;
    float v52 = v49 - v40;
    float v53 = (float)(v26 - *a3) * 0.5;
    float v54 = (float)(v28 - v25) * 0.5;
    float v55 = (float)(v29 - v27) * 0.5;
    float v56 = (float)((float)(1.0 - v40) - v41) * v53;
    float v57 = (float)(v42 + v47) * v53;
    float v58 = (float)(fabsf(v56) + fabsf((float)(v42 - v47) * v54)) + fabsf(v51 * v55);
    float v59 = (float)(fabsf(v57) + fabsf(v50 * v54)) + fabsf((float)(v45 - v44) * v55);
    float v60 = (float)(fabsf(v48 * v53) + fabsf((float)(v44 + v45) * v54)) + fabsf(v52 * v55);
    float v9 = v34 - v58;
    float v8 = v35 - v59;
    float v10 = v36 - v60;
    float v11 = v58 + v34;
    float v12 = v59 + v35;
    float v13 = v60 + v36;
  }
  else
  {
    float v9 = *a3;
    float v8 = a3[1];
    float v10 = a3[2];
    float v11 = a3[3];
    float v12 = a3[4];
    float v13 = a3[5];
  }
  float v61 = v9 * *(float *)a1;
  float v62 = *(float *)(a1 + 8);
  float v63 = v10 * v62;
  float v64 = v11 * *(float *)a1;
  float v65 = v13 * v62;
  uint64_t v66 = *(void *)(a1 + 16);
  uint64_t v67 = *(void *)(a1 + 24);
  float v68 = *(float *)(v67 + 20);
  float v69 = *(float *)(v67 + 24);
  if (v68 >= 0.0) {
    float v70 = v61;
  }
  else {
    float v70 = v64;
  }
  if (v68 >= 0.0) {
    float v71 = v64;
  }
  else {
    float v71 = v61;
  }
  if (v69 >= 0.0) {
    float v72 = v63;
  }
  else {
    float v72 = v65;
  }
  if (v69 >= 0.0) {
    float v73 = v65;
  }
  else {
    float v73 = v63;
  }
  int v74 = *(_DWORD *)(v66 + 56);
  unsigned int v75 = v74 - 1;
  float v76 = (float)(v74 - 1);
  if (v70 > v76) {
    return 0;
  }
  BOOL result = 0;
  int v78 = *(_DWORD *)(v66 + 60);
  if (v72 > (float)(v78 - 1) || v71 < 0.0 || v73 < 0.0) {
    return result;
  }
  unsigned int v79 = v74 - 2;
  unsigned int v80 = vcvtms_u32_f32(v70);
  if (v70 <= (float)v79) {
    unsigned int v79 = v80;
  }
  if (v70 >= 0.0) {
    unsigned int v81 = v79;
  }
  else {
    unsigned int v81 = 0;
  }
  unsigned int v82 = vcvtps_u32_f32(v71);
  if (v71 <= v76) {
    unsigned int v83 = v82;
  }
  else {
    unsigned int v83 = v75;
  }
  unsigned int v84 = v78 - 2;
  unsigned int v85 = vcvtms_u32_f32(v72);
  if (v72 <= (float)(v78 - 2)) {
    unsigned int v84 = v85;
  }
  if (v72 >= 0.0) {
    unsigned int v86 = v84;
  }
  else {
    unsigned int v86 = 0;
  }
  unsigned int v87 = vcvtps_u32_f32(v73);
  if (v73 > (float)(v78 - 1)) {
    unsigned int v87 = v78 - 1;
  }
  unsigned int v88 = v87 - v86;
  if (!(2 * (v83 - v81) * (v87 - v86))) {
    return 0;
  }
  if (v83 <= v81)
  {
    int v89 = 0;
    return v89 != 0;
  }
  int v89 = 0;
  uint64_t v90 = 0;
  float v91 = *(float *)(a1 + 4);
  float v92 = v8 * v91;
  float v93 = v12 * v91;
  unsigned int v94 = v86 + v81 * v78;
  unsigned int v113 = v86;
  unsigned int v114 = v83;
  unsigned int v111 = v87 - v86;
  unsigned int v112 = v87;
  while (v87 <= v86)
  {
LABEL_73:
    unsigned int v94 = v94 - v88 + *(_DWORD *)(v66 + 60);
    if (++v81 == v83)
    {
      uint64_t v110 = v90;
      if (v90) {
        goto LABEL_78;
      }
      return v89 != 0;
    }
  }
  int v95 = 2 * v94;
  while (1)
  {
    unsigned int v96 = v94;
    uint64_t v97 = *(void *)(a1 + 16);
    uint64_t v98 = *(void *)(v97 + 80);
    float v99 = (float)*(__int16 *)(v98 + 4 * v94++);
    float v100 = (float)*(__int16 *)(v98 + 4 * v94);
    LODWORD(v97) = v96 + *(_DWORD *)(v97 + 60);
    float v101 = (float)*(__int16 *)(v98 + 4 * v97);
    float v102 = (float)*(__int16 *)(v98 + 4 * (v97 + 1));
    BOOL v103 = v93 < v99 && v93 < v100;
    BOOL v104 = v103 && v93 < v101;
    if (!v104 || v93 >= v102)
    {
      BOOL v106 = v92 <= v99 || v92 <= v100;
      BOOL v107 = v106 || v92 <= v101;
      if (v107 || v92 <= v102) {
        break;
      }
    }
LABEL_71:
    v95 += 2;
    if (!--v88)
    {
      uint64_t v66 = *(void *)(a1 + 16);
      unsigned int v86 = v113;
      unsigned int v83 = v114;
      unsigned int v88 = v111;
      unsigned int v87 = v112;
      goto LABEL_73;
    }
  }
  uint64_t v109 = v96;
  if ((~*(unsigned __int8 *)(v98 + 4 * v96 + 2) & 0x7F) == 0)
  {
LABEL_67:
    if ((~*(unsigned __int8 *)(v98 + 4 * v109 + 3) & 0x7F) != 0)
    {
      if (v90 >= 0x40)
      {
        (*(void (**)(uint64_t))(*(void *)a5 + 16))(a5);
        LODWORD(v90) = 0;
      }
      uint64_t v110 = (v90 + 1);
      v115[v90] = v95 + 1;
      ++v89;
      uint64_t v90 = v110;
      if ((a4 & 2) != 0) {
        goto LABEL_78;
      }
    }
    goto LABEL_71;
  }
  if (v90 >= 0x40)
  {
    (*(void (**)(uint64_t))(*(void *)a5 + 16))(a5);
    LODWORD(v90) = 0;
  }
  v115[v90] = v95;
  uint64_t v90 = (v90 + 1);
  ++v89;
  if ((a4 & 2) == 0)
  {
    uint64_t v98 = *(void *)(*(void *)(a1 + 16) + 80);
    goto LABEL_67;
  }
  uint64_t v110 = v90;
LABEL_78:
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a5 + 16))(a5, v110, v115);
  return v89 != 0;
}

BOOL physx::Gu::HeightFieldUtil::getTriangle(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, int a8)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 16);
  float v8 = *(float **)(a1 + 24);
  float v11 = v8[5];
  float v10 = v8[6];
  if (v11 < 0.0) {
    BOOL v12 = v10 >= 0.0;
  }
  else {
    BOOL v12 = v10 < 0.0;
  }
  if (v12) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 1;
  }
  if (v12) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = 2;
  }
  uint64_t v15 = a6 >> 1;
  uint64_t v16 = *(void *)(v9 + 80);
  uint64_t v17 = v16 + 4 * v15;
  int v20 = *(char *)(v17 + 2);
  float v18 = (unsigned __int8 *)(v17 + 2);
  int v19 = v20;
  if (v20 < 0)
  {
    if (a6)
    {
      unsigned int v22 = v15 + 1;
      unsigned int v71 = v15 + 1;
      *(&v71 + v13) = *(_DWORD *)(v9 + 60) + v15 + 1;
      unsigned int v21 = a6 >> 1;
    }
    else
    {
      unsigned int v71 = *(_DWORD *)(v9 + 60) + v15;
      unsigned int v22 = v71;
      *(&v71 + v13) = v15;
      unsigned int v21 = v22 + 1;
    }
  }
  else if (a6)
  {
    int v23 = *(_DWORD *)(v9 + 60);
    unsigned int v21 = v15 + 1;
    unsigned int v22 = v23 + v15 + 1;
    unsigned int v71 = v22;
    *(&v71 + v13) = v23 + v15;
  }
  else
  {
    unsigned int v71 = a6 >> 1;
    *(&v71 + v13) = v15 + 1;
    unsigned int v21 = *(_DWORD *)(v9 + 60) + v15;
    unsigned int v22 = a6 >> 1;
  }
  *(&v71 + v14) = v21;
  if (!a5) {
    goto LABEL_44;
  }
  BOOL v24 = !v12;
  uint64_t v25 = 2;
  if (v24) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = 2;
  }
  if (!v24) {
    uint64_t v25 = 0;
  }
  *(_DWORD *)(a5 + 4 * v26) = -1;
  if (v19 < 0)
  {
    if (a6)
    {
      *(_DWORD *)(a5 + 4) = a6 - 1;
      *(_DWORD *)(a5 + 4 * v25) = -1;
      unsigned int v33 = *(_DWORD *)(v9 + 60);
      if (v15 % v33 < v33 - 2)
      {
        *(_DWORD *)(a5 + 4 * v26) = a6 + 1;
        unsigned int v33 = *(_DWORD *)(v9 + 60);
      }
      if (v15 < v33 - 1) {
        goto LABEL_44;
      }
      int v30 = v15 - v33;
      int v31 = (*(unsigned __int8 *)(v16 + 4 * (v15 - v33) + 2) >> 7) ^ 1;
    }
    else
    {
      *(_DWORD *)(a5 + 4) = a6 + 1;
      *(_DWORD *)(a5 + 4 * v25) = -1;
      unsigned int v29 = *(_DWORD *)(v9 + 60);
      if (v15 % v29)
      {
        *(_DWORD *)(a5 + 4 * v26) = a6 - 1;
        unsigned int v29 = *(_DWORD *)(v9 + 60);
      }
      if (v15 / v29 == *(_DWORD *)(v9 + 56) - 2) {
        goto LABEL_44;
      }
      int v30 = v29 + v15;
      int v31 = *(unsigned __int8 *)(v16 + 4 * (v29 + v15) + 2) >> 7;
    }
    int v28 = v31 | (2 * v30);
    goto LABEL_43;
  }
  if (a6)
  {
    *(_DWORD *)(a5 + 4) = a6 - 1;
    *(_DWORD *)(a5 + 4 * v25) = -1;
    unsigned int v32 = *(_DWORD *)(v9 + 60);
    if (v15 / v32 != *(_DWORD *)(v9 + 56) - 2)
    {
      *(_DWORD *)(a5 + 4 * v26) = (*(unsigned __int8 *)(v16 + 4 * (v32 + v15) + 2) >> 7) | (2 * (v32 + v15));
      unsigned int v32 = *(_DWORD *)(v9 + 60);
    }
    if (v15 % v32 < v32 - 2)
    {
      int v28 = a6 + 1;
      goto LABEL_43;
    }
  }
  else
  {
    *(_DWORD *)(a5 + 4) = a6 + 1;
    *(_DWORD *)(a5 + 4 * v25) = -1;
    unsigned int v27 = *(_DWORD *)(v9 + 60);
    if (v15 >= v27 - 1)
    {
      *(_DWORD *)(a5 + 4 * v26) = (*(unsigned __int8 *)(v16 + 4 * (v15 - v27) + 2) >> 7) ^ 1 | (2 * (v15 - v27));
      unsigned int v27 = *(_DWORD *)(v9 + 60);
    }
    if (v15 % v27)
    {
      int v28 = a6 - 1;
LABEL_43:
      *(_DWORD *)(a5 + 4 * v25) = v28;
    }
  }
LABEL_44:
  if (a4)
  {
    *(_DWORD *)a4 = v22;
    *(void *)(a4 + 4) = v72;
  }
  if (a8)
  {
    unsigned int v34 = *(_DWORD *)(v9 + 60);
    float v35 = v8[4];
    float v37 = a2[2];
    float v36 = a2[3];
    float v38 = (float)(v36 * v36) + -0.5;
    float v39 = *a2;
    float v40 = a2[1];
    float v41 = -v37;
    float v42 = -*a2;
    float v43 = -v40;
    uint64_t v44 = 0;
    float v45 = (float *)(a3 + 8);
    if (a7)
    {
      do
      {
        uint64_t v46 = *(unsigned int *)((char *)&v71 + v44);
        float v47 = (float)(v11 * (float)(v46 / v34)) + (float)(v11 * (float)(v46 / v34));
        float v48 = (float)(v35 * (float)*(__int16 *)(v16 + 4 * v46)) + (float)(v35 * (float)*(__int16 *)(v16 + 4 * v46));
        float v49 = (float)(v10 * (float)(v46 % v34)) + (float)(v10 * (float)(v46 % v34));
        float v50 = (float)((float)(v40 * v48) + (float)(v39 * v47)) + (float)(v37 * v49);
        float v51 = (float)(v36 * (float)((float)(v49 * v42) + (float)(v37 * v47))) + (float)(v48 * v38);
        float v52 = (float)((float)(v36 * (float)((float)(v48 * v41) + (float)(v40 * v49))) + (float)(v47 * v38))
            + (float)(v39 * v50);
        float v53 = a2[6]
            + (float)((float)((float)(v36 * (float)((float)(v47 * v43) + (float)(v39 * v48))) + (float)(v49 * v38))
                    + (float)(v37 * v50));
        float v54 = a2[5] + (float)(v51 + (float)(v40 * v50));
        *(v45 - 2) = a2[4] + v52;
        *(v45 - 1) = v54;
        *float v45 = v53;
        v45 += 3;
        v44 += 4;
      }
      while (v44 != 12);
    }
    else
    {
      do
      {
        uint64_t v55 = *(unsigned int *)((char *)&v71 + v44);
        float v56 = (float)(v11 * (float)(v55 / v34)) + (float)(v11 * (float)(v55 / v34));
        float v57 = (float)(v35 * (float)*(__int16 *)(v16 + 4 * v55)) + (float)(v35 * (float)*(__int16 *)(v16 + 4 * v55));
        float v58 = (float)(v10 * (float)(v55 % v34)) + (float)(v10 * (float)(v55 % v34));
        float v59 = (float)((float)(v40 * v57) + (float)(v39 * v56)) + (float)(v37 * v58);
        *(v45 - 2) = (float)((float)(v36 * (float)((float)(v57 * v41) + (float)(v40 * v58))) + (float)(v56 * v38))
                   + (float)(v39 * v59);
        *(v45 - 1) = (float)((float)(v36 * (float)((float)(v58 * v42) + (float)(v37 * v56))) + (float)(v57 * v38))
                   + (float)(v40 * v59);
        *float v45 = (float)((float)(v36 * (float)((float)(v56 * v43) + (float)(v39 * v57))) + (float)(v58 * v38))
             + (float)(v37 * v59);
        v45 += 3;
        v44 += 4;
      }
      while (v44 != 12);
    }
  }
  else
  {
    uint64_t v60 = 0;
    float v61 = a2[4];
    float v62 = a2[5];
    float v63 = a2[6];
    if (!a7)
    {
      float v61 = 0.0;
      float v62 = 0.0;
      float v63 = 0.0;
    }
    unsigned int v64 = *(_DWORD *)(v9 + 60);
    float v65 = v8[4];
    uint64_t v66 = (float *)(a3 + 8);
    do
    {
      uint64_t v67 = *(unsigned int *)((char *)&v71 + v60);
      float v68 = v62 + (float)(v65 * (float)*(__int16 *)(v16 + 4 * v67));
      *(v66 - 2) = v61 + (float)(v11 * (float)(v67 / v64));
      *(v66 - 1) = v68;
      *uint64_t v66 = v63 + (float)(v10 * (float)(v67 % v64));
      v66 += 3;
      v60 += 4;
    }
    while (v60 != 12);
  }
  float v69 = (unsigned __int8 *)(v16 + 4 * v15 + 3);
  if ((a6 & 1) == 0) {
    float v69 = v18;
  }
  return (~*v69 & 0x7F) != 0;
}

BOOL GeomOverlapCallback_SphereHeightfield(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  float v4 = a2[4] - a4[4];
  float v5 = a2[5] - a4[5];
  float v6 = a2[6] - a4[6];
  float v7 = v4 + v4;
  float v8 = v5 + v5;
  float v9 = v6 + v6;
  float v11 = a4[2];
  float v10 = a4[3];
  float v12 = (float)(v10 * v10) + -0.5;
  float v13 = a4[1];
  float v14 = (float)((float)(v8 * v13) + (float)(*a4 * v7)) + (float)(v11 * v9);
  float v15 = (float)((float)(v7 * v12) - (float)((float)((float)(v13 * v9) - (float)(v11 * v8)) * v10)) + (float)(*a4 * v14);
  float v16 = (float)((float)(v8 * v12) - (float)((float)((float)(v11 * v7) - (float)(*a4 * v9)) * v10)) + (float)(v13 * v14);
  float v17 = (float)((float)(v9 * v12) - (float)((float)((float)(*a4 * v8) - (float)(v13 * v7)) * v10)) + (float)(v11 * v14);
  float v18 = *(float *)(a1 + 4);
  uint64_t v19 = *(void *)(a3 + 8);
  uint64_t v63 = v19;
  uint64_t v64 = a3;
  float v20 = *(float *)(a3 + 24);
  float v21 = *(float *)(a3 + 16);
  float v22 = 1.0 / *(float *)(a3 + 20);
  v62[0] = v22;
  v62[1] = 1.0 / v21;
  float v23 = 1.0 / v20;
  v62[2] = 1.0 / v20;
  float v24 = v15 * v22;
  float v25 = v17 * (float)(1.0 / v20);
  if ((float)(v15 * v22) < 0.0
    || v25 < 0.0
    || v24 >= (float)(*(float *)(v19 + 64) + 1.0)
    || v25 >= (float)(*(float *)(v19 + 68) + 1.0))
  {
    goto LABEL_14;
  }
  float v61 = v21;
  v66[0] = 0.0;
  v65[0] = 0.0;
  unsigned int v26 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v19, v15 * v22, v25, v66, v65);
  float v27 = v66[0];
  uint64_t v28 = *(void *)(v19 + 80);
  unsigned int v29 = (__int16 *)(v28 + 4 * v26);
  if (((char)v29[1] & 0x80000000) == 0)
  {
    float v30 = (float)*(__int16 *)(v28 + 4 * (*(_DWORD *)(v19 + 60) + v26));
    float v31 = (float)*(__int16 *)(v28 + 4 * (v26 + 1));
    if ((float)(v66[0] + v65[0]) >= 1.0)
    {
      float v38 = (float)*(__int16 *)(v28 + 4 * (*(_DWORD *)(v19 + 60) + v26 + 1));
      float v33 = v38 + (float)((float)(1.0 - v65[0]) * (float)(v30 - v38));
      float v27 = 1.0 - v66[0];
      float v34 = v31 - v38;
    }
    else
    {
      float v32 = (float)*v29;
      float v33 = v32 + (float)(v65[0] * (float)(v31 - v32));
      float v34 = v30 - v32;
    }
    goto LABEL_11;
  }
  float v35 = (float)*v29;
  float v36 = (float)*(__int16 *)(v28 + 4 * (*(_DWORD *)(v19 + 60) + v26 + 1));
  if (v65[0] > v66[0])
  {
    float v37 = (float)*(__int16 *)(v28 + 4 * (v26 + 1));
    float v33 = v35 + (float)(v65[0] * (float)(v37 - v35));
    float v34 = v36 - v37;
LABEL_11:
    float v39 = v33 + (float)(v27 * v34);
    goto LABEL_12;
  }
  float v60 = (float)*(__int16 *)(v28 + 4 * (*(_DWORD *)(v19 + 60) + v26));
  float v39 = (float)(v35 + (float)(v66[0] * (float)(v60 - v35))) + (float)(v65[0] * (float)(v36 - v60));
LABEL_12:
  if ((float)(v16 - (float)(v61 * v39)) == 0.0) {
    return physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint((physx::Gu::HeightFieldUtil *)v62, v15, v17) != -1;
  }
LABEL_14:
  float v41 = v18 * fabsf(v22);
  float v42 = v18 * fabsf(v23);
  int v44 = *(_DWORD *)(v19 + 56);
  int v43 = *(_DWORD *)(v19 + 60);
  unsigned int v45 = v44 - 2;
  unsigned int v46 = vcvtms_u32_f32(v24 - v41);
  if ((float)(v24 - v41) <= (float)(v44 - 2)) {
    unsigned int v45 = v46;
  }
  if ((float)(v24 - v41) >= 0.0) {
    unsigned int v47 = v45;
  }
  else {
    unsigned int v47 = 0;
  }
  float v48 = v24 + v41;
  unsigned int v49 = v44 - 1;
  unsigned int v50 = vcvtps_u32_f32(v48);
  if (v48 <= (float)v49) {
    unsigned int v49 = v50;
  }
  if (v48 >= 0.0) {
    unsigned int v51 = v49;
  }
  else {
    unsigned int v51 = 0;
  }
  unsigned int v52 = v43 - 2;
  unsigned int v53 = vcvtms_u32_f32(v25 - v42);
  if ((float)(v25 - v42) <= (float)(v43 - 2)) {
    unsigned int v52 = v53;
  }
  if ((float)(v25 - v42) >= 0.0) {
    unsigned int v54 = v52;
  }
  else {
    unsigned int v54 = 0;
  }
  float v55 = v25 + v42;
  if ((float)(v25 + v42) >= 0.0)
  {
    unsigned int v56 = v43 - 1;
    if (v55 <= (float)(v43 - 1)) {
      unsigned int v56 = vcvtps_u32_f32(v55);
    }
  }
  else
  {
    unsigned int v56 = 0;
  }
  if (v47 >= v51) {
    return 0;
  }
  while (v54 >= v56)
  {
LABEL_41:
    BOOL result = 0;
    if (++v47 == v51) {
      return result;
    }
  }
  unsigned int v57 = v54;
  while (1)
  {
    v65[0] = v15;
    v65[1] = v16;
    v65[2] = v17;
    unsigned int ClosestPointsOnCell = physx::Gu::HeightFieldUtil::findClosestPointsOnCell((uint64_t)v62, v47, v57, v65, (uint64_t)v66);
    if (ClosestPointsOnCell) {
      break;
    }
LABEL_40:
    if (++v57 == v56) {
      goto LABEL_41;
    }
  }
  uint64_t v59 = 0;
  while ((float)((float)((float)((float)(v16 - v66[v59 + 1]) * (float)(v16 - v66[v59 + 1]))
                        + (float)((float)(v15 - v66[v59]) * (float)(v15 - v66[v59])))
                + (float)((float)(v17 - v66[v59 + 2]) * (float)(v17 - v66[v59 + 2]))) > (float)(v18 * v18))
  {
    v59 += 3;
    if (3 * ClosestPointsOnCell == v59) {
      goto LABEL_40;
    }
  }
  return 1;
}

uint64_t GeomOverlapCallback_CapsuleHeightfield(uint64_t a1, float *a2, uint64_t a3, float *a4, double a5, double a6, double a7, __n128 a8)
{
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  uint64_t v143 = *MEMORY[0x263EF8340];
  float v11 = a4[1];
  float v12 = a4[2];
  float v13 = a4[3];
  float v14 = a2[4] - a4[4];
  float v15 = a2[5] - a4[5];
  float v16 = a2[6] - a4[6];
  float v17 = v14 + v14;
  float v18 = v15 + v15;
  float v19 = v16 + v16;
  float v20 = (float)(v13 * v13) + -0.5;
  float v21 = (float)((float)-(float)(v11 * (float)(v15 + v15)) - (float)(*a4 * (float)(v14 + v14))) - (float)(v12 * v19);
  float v22 = (float)((float)(v13 * (float)((float)(v12 * (float)(v15 + v15)) - (float)(v11 * v19)))
              + (float)((float)(v14 + v14) * v20))
      - (float)(*a4 * v21);
  float v23 = (float)((float)(v13 * (float)((float)(*a4 * v19) - (float)(v12 * v17))) + (float)((float)(v15 + v15) * v20))
      - (float)(v11 * v21);
  float v24 = (float)((float)(v13 * (float)((float)(v11 * v17) - (float)(*a4 * v18))) + (float)(v19 * v20))
      - (float)(v12 * v21);
  float v26 = a2[2];
  float v25 = a2[3];
  float v27 = a2[1];
  float v28 = (float)((float)((float)(v13 * *a2) - (float)(*a4 * v25)) - (float)(v11 * v26)) + (float)(v27 * v12);
  float v29 = (float)((float)((float)(v13 * v27) - (float)(v11 * v25)) - (float)(v12 * *a2)) + (float)(v26 * *a4);
  float v30 = (float)((float)((float)(v13 * v26) - (float)(v12 * v25)) - (float)(*a4 * v27)) + (float)(*a2 * v11);
  a8.n128_f32[0] = (float)((float)((float)(*a4 * *a2) + (float)(v13 * v25)) + (float)(v11 * v27)) + (float)(v12 * v26);
  uint64_t v31 = *(void *)(a3 + 8);
  uint64_t v133 = v31;
  uint64_t v134 = a3;
  float v32 = *(float *)(a3 + 24);
  float v33 = 1.0;
  float v34 = 1.0 / *(float *)(a3 + 16);
  float v35 = 1.0 / *(float *)(a3 + 20);
  v132[0] = v35;
  v132[1] = v34;
  float v36 = 1.0 / v32;
  v132[2] = 1.0 / v32;
  float v37 = (float)((float)(v28 + v28) * v29) + (float)(v30 * (float)(a8.n128_f32[0] + a8.n128_f32[0]));
  float v38 = (float)(v30 * (float)(v28 + v28)) - (float)(v29 * (float)(a8.n128_f32[0] + a8.n128_f32[0]));
  float v40 = *(float *)(a1 + 4);
  float v39 = *(float *)(a1 + 8);
  a8.n128_f32[0] = (float)((float)((float)(a8.n128_f32[0] * (float)(a8.n128_f32[0] + a8.n128_f32[0])) + -1.0)
                         + (float)(v28 * (float)(v28 + v28)))
                 * v39;
  float v41 = v37 * v39;
  float v42 = v38 * v39;
  float v43 = v22 + a8.n128_f32[0];
  float v44 = v22 - a8.n128_f32[0];
  float v124 = a8.n128_f32[0] * -2.0;
  float v126 = v41 * -2.0;
  a8.n128_f32[0] = v42 * -2.0;
  __n128 v128 = a8;
  float v118 = v43;
  float v120 = v23 + v41;
  *(float *)int v142 = v43;
  *(float *)&v142[1] = v23 + v41;
  float v122 = v24 + v42;
  *(float *)&v142[2] = v24 + v42;
  *(float *)&v142[3] = v44;
  *(float *)&v142[4] = v23 - v41;
  *(float *)&v142[5] = v24 - v42;
  float v45 = fabsf(v35) * v40;
  float v46 = fabsf(v36) * v40;
  unsigned int v47 = -1;
  char v48 = 1;
  float v49 = v40 * v40;
  unsigned int v50 = -1;
  do
  {
    char v51 = v48;
    unsigned int v52 = (float *)&v142[3 * v8];
    float v53 = *v52;
    float v54 = v35 * *v52;
    float v55 = v52[2];
    float v56 = v36 * v55;
    int v57 = *(_DWORD *)(v31 + 56);
    int v58 = *(_DWORD *)(v31 + 60);
    unsigned int v59 = v57 - 2;
    unsigned int v60 = vcvtms_u32_f32(v54 - v45);
    if ((float)(v54 - v45) <= (float)(v57 - 2)) {
      unsigned int v59 = v60;
    }
    if ((float)(v54 - v45) >= 0.0) {
      unsigned int v61 = v59;
    }
    else {
      unsigned int v61 = 0;
    }
    unsigned int v62 = v57 - 1;
    unsigned int v63 = vcvtps_u32_f32(v45 + v54);
    if ((float)(v45 + v54) <= (float)v62) {
      unsigned int v62 = v63;
    }
    if ((float)(v45 + v54) >= 0.0) {
      unsigned int v64 = v62;
    }
    else {
      unsigned int v64 = 0;
    }
    unsigned int v65 = v58 - 2;
    unsigned int v66 = vcvtms_u32_f32(v56 - v46);
    if ((float)(v56 - v46) <= (float)(v58 - 2)) {
      unsigned int v65 = v66;
    }
    if ((float)(v56 - v46) >= 0.0) {
      unsigned int v67 = v65;
    }
    else {
      unsigned int v67 = 0;
    }
    float v68 = v46 + v56;
    if ((float)(v46 + v56) >= 0.0)
    {
      unsigned int v69 = v58 - 1;
      if (v68 <= (float)(v58 - 1)) {
        unsigned int v69 = vcvtps_u32_f32(v68);
      }
    }
    else
    {
      unsigned int v69 = 0;
    }
    float v70 = v52[1];
    if (v61 < v47) {
      unsigned int v47 = v61;
    }
    if (v67 < v50) {
      unsigned int v50 = v67;
    }
    if (v64 > v9) {
      unsigned int v9 = v64;
    }
    if (v69 > v10) {
      unsigned int v10 = v69;
    }
    unsigned int v130 = v10;
    unsigned int v131 = v9;
    if (v54 < 0.0
      || v56 < 0.0
      || v54 >= (float)(*(float *)(v31 + 64) + v33)
      || v56 >= (float)(*(float *)(v31 + 68) + v33))
    {
      goto LABEL_44;
    }
    float v117 = *(float *)(a3 + 16);
    v141[0].i32[0] = 0;
    v139.i32[0] = 0;
    unsigned int v71 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v31, v54, v56, v141[0].f32, v139.f32);
    float v72 = v141[0].f32[0];
    uint64_t v73 = *(void *)(v31 + 80);
    int v74 = (__int16 *)(v73 + 4 * v71);
    if (((char)v74[1] & 0x80000000) == 0)
    {
      float v75 = (float)*(__int16 *)(v73 + 4 * (v71 + v58));
      float v76 = (float)*(__int16 *)(v73 + 4 * (v71 + 1));
      if ((float)(v141[0].f32[0] + v139.f32[0]) < 1.0)
      {
        float v77 = (float)*v74;
        float v78 = v77 + (float)(v139.f32[0] * (float)(v76 - v77));
        float v79 = v75 - v77;
LABEL_40:
        float v82 = v78 + (float)(v72 * v79);
        goto LABEL_41;
      }
      float v81 = (float)*(__int16 *)(v73 + 4 * (v71 + v58 + 1));
      float v78 = v81 + (float)((float)(1.0 - v139.f32[0]) * (float)(v75 - v81));
      float v72 = 1.0 - v141[0].f32[0];
LABEL_39:
      float v79 = v76 - v81;
      goto LABEL_40;
    }
    float v80 = (float)*v74;
    float v76 = (float)*(__int16 *)(v73 + 4 * (v71 + v58 + 1));
    if (v139.f32[0] > v141[0].f32[0])
    {
      float v81 = (float)*(__int16 *)(v73 + 4 * (v71 + 1));
      float v78 = v80 + (float)(v139.f32[0] * (float)(v81 - v80));
      goto LABEL_39;
    }
    float v87 = (float)*(__int16 *)(v73 + 4 * (v71 + v58));
    float v82 = (float)(v80 + (float)(v141[0].f32[0] * (float)(v87 - v80))) + (float)(v139.f32[0] * (float)(v76 - v87));
LABEL_41:
    if ((float)(v70 - (float)(v117 * v82)) == 0.0)
    {
      if (physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint((physx::Gu::HeightFieldUtil *)v132, v53, v55) != -1)return 1; {
      goto LABEL_54;
      }
    }
LABEL_44:
    if (v61 < v64)
    {
      while (v67 >= v69)
      {
LABEL_53:
        if (++v61 == v64) {
          goto LABEL_54;
        }
      }
      unsigned int v83 = v67;
      while (1)
      {
        v140[0] = v53;
        v140[1] = v70;
        v140[2] = v55;
        unsigned int ClosestPointsOnCell = physx::Gu::HeightFieldUtil::findClosestPointsOnCell((uint64_t)v132, v61, v83, v140, (uint64_t)v141);
        if (ClosestPointsOnCell) {
          break;
        }
LABEL_52:
        if (++v83 == v69) {
          goto LABEL_53;
        }
      }
      uint64_t v85 = 0;
      while (1)
      {
        float v86 = v70 - v141[0].f32[v85 + 1];
        if (v86 > 0.0
          && (float)((float)((float)(v86 * v86)
                           + (float)((float)(v53 - v141[0].f32[v85]) * (float)(v53 - v141[0].f32[v85])))
                   + (float)((float)(v55 - v141[0].f32[v85 + 2]) * (float)(v55 - v141[0].f32[v85 + 2]))) <= v49)
        {
          return 1;
        }
        v85 += 3;
        if (3 * ClosestPointsOnCell == v85) {
          goto LABEL_52;
        }
      }
    }
LABEL_54:
    char v48 = 0;
    uint64_t v8 = 1;
    unsigned int v10 = v130;
    unsigned int v9 = v131;
    float v33 = 1.0;
  }
  while ((v51 & 1) != 0);
  v88.i64[0] = __PAIR64__(LODWORD(v120), LODWORD(v118));
  v88.i64[1] = LODWORD(v122);
  v141[0] = v88;
  v89.i64[0] = __PAIR64__(LODWORD(v126), LODWORD(v124));
  v89.i64[1] = v128.n128_u32[0];
  float32x4_t v139 = v89;
  if (v47 > v131) {
    return 0;
  }
  __n128 v121 = v128;
  __n128 v123 = v128;
  __n128 v127 = v128;
  __n128 v125 = v128;
  __n128 v119 = v128;
  while (v50 > v10)
  {
LABEL_61:
    if (++v47 > v9) {
      return 0;
    }
  }
  if (v47 == v9) {
    unsigned int v91 = 1;
  }
  else {
    unsigned int v91 = 3;
  }
  int v116 = *(_DWORD *)(v31 + 60);
  float v92 = (float)v47;
  unsigned int v93 = v50;
  while (1)
  {
    unsigned int v94 = 2 * (v93 == v10);
    if (v94 < v91) {
      break;
    }
    unsigned int v115 = v93 + 1;
LABEL_82:
    unsigned int v93 = v115;
    if (v115 > v10) {
      goto LABEL_61;
    }
  }
  uint64_t v95 = v116 * v47 + v93;
  float v96 = (float)v93;
  uint64_t v97 = (v95 + 1);
  uint64_t v98 = (v116 + v95);
  while (1)
  {
    if (physx::Gu::HeightFieldUtil::getEdgeFaceIndex((physx::Gu::HeightFieldUtil *)v31, 3 * v95 + v94, v95, v47, v93) != -1)
    {
      if (v94 == 2)
      {
        uint64_t v108 = *(void *)(v31 + 80);
        float v109 = *(float *)(a3 + 16);
        v100.n128_u32[0] = *(_DWORD *)(a3 + 20);
        v103.n128_f32[0] = v109 * (float)*(__int16 *)(v108 + 4 * v95);
        float v110 = v109 * (float)*(__int16 *)(v108 + 4 * v98);
        v101.n128_f32[0] = v100.n128_f32[0] * v92;
        v99.n128_f32[0] = *(float *)(a3 + 24) * v96;
        v104.n128_f32[0] = v110 - v103.n128_f32[0];
        v102.n128_u64[0] = 0;
      }
      else if (v94 == 1)
      {
        uint64_t v111 = *(void *)(v31 + 80);
        v100.n128_u32[0] = *(_DWORD *)(a3 + 20);
        v102.n128_u32[0] = *(_DWORD *)(a3 + 24);
        v101.n128_f32[0] = v100.n128_f32[0] * v92;
        float v112 = *(float *)(a3 + 16);
        if (*(char *)(v111 + 4 * v95 + 2) < 0)
        {
          v103.n128_f32[0] = v112 * (float)*(__int16 *)(v111 + 4 * v95);
          v99.n128_f32[0] = v102.n128_f32[0] * v96;
          v104.n128_f32[0] = (float)(v112 * (float)*(__int16 *)(v111 + 4 * (v97 + v116)))
                           - v103.n128_f32[0];
        }
        else
        {
          v103.n128_f32[0] = v112 * (float)*(__int16 *)(v111 + 4 * v97);
          v99.n128_f32[0] = v102.n128_f32[0] * (float)(v93 + 1);
          v104.n128_f32[0] = (float)(v112 * (float)*(__int16 *)(v111 + 4 * v98)) - v103.n128_f32[0];
          v102.n128_f32[0] = -v102.n128_f32[0];
        }
      }
      else
      {
        __n128 v101 = v127;
        __n128 v100 = v128;
        __n128 v103 = v123;
        __n128 v102 = v125;
        __n128 v104 = v119;
        __n128 v99 = v121;
        if (!v94)
        {
          uint64_t v105 = *(void *)(v31 + 80);
          float v106 = *(float *)(a3 + 16);
          v103.n128_f32[0] = v106 * (float)*(__int16 *)(v105 + 4 * v95);
          float v107 = v106 * (float)*(__int16 *)(v105 + 4 * v97);
          v101.n128_f32[0] = *(float *)(a3 + 20) * v92;
          v102.n128_u32[0] = *(_DWORD *)(a3 + 24);
          v99.n128_f32[0] = v102.n128_f32[0] * v96;
          v104.n128_f32[0] = v107 - v103.n128_f32[0];
          v100.n128_u64[0] = 0;
        }
      }
      __n128 v127 = v101;
      __n128 v128 = v100;
      v113.i64[0] = __PAIR64__(v103.n128_u32[0], v101.n128_u32[0]);
      __n128 v121 = v99;
      __n128 v123 = v103;
      v113.i64[1] = v99.n128_u32[0];
      v114.i64[0] = __PAIR64__(v104.n128_u32[0], v100.n128_u32[0]);
      __n128 v119 = v104;
      __n128 v125 = v102;
      v114.i64[1] = v102.n128_u32[0];
      float32x4_t v137 = v114;
      float32x4_t v138 = v113;
      if (physx::Gu::distanceSegmentSegmentSquared(v141, &v139, &v138, &v137, &v136, &v135).f32[0] < v49) {
        return 1;
      }
    }
    if (v91 == ++v94)
    {
      unsigned int v10 = v130;
      unsigned int v9 = v131;
      unsigned int v115 = v93 + 1;
      goto LABEL_82;
    }
  }
}

uint64_t GeomOverlapCallback_BoxHeightfield(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v17 = 0;
  uint64_t v215 = *MEMORY[0x263EF8340];
  v12.i32[0] = *(_DWORD *)(a4 + 4);
  float v18 = -*(float *)a4;
  float v19 = -*(float *)v12.i32;
  float v20 = *(float *)(a4 + 8);
  float v21 = *(float *)(a4 + 12);
  float v22 = -v20;
  float v23 = *(float *)(a2 + 16) - *(float *)(a4 + 16);
  float v24 = *(float *)(a2 + 20) - *(float *)(a4 + 20);
  float v25 = *(float *)(a2 + 24) - *(float *)(a4 + 24);
  *(float *)v11.i32 = v23 + v23;
  float v26 = v24 + v24;
  float v27 = v25 + v25;
  float v28 = (float)(v21 * v21) + -0.5;
  *(float *)&a10 = (float)-(float)(*(float *)v12.i32 * (float)(v24 + v24)) - (float)(*(float *)a4 * *(float *)v11.i32);
  *(float *)&a11 = (float)(v21 * (float)((float)(v20 * v26) - (float)(*(float *)v12.i32 * (float)(v25 + v25))))
                 + (float)(*(float *)v11.i32 * v28);
  float v29 = (float)(v21 * (float)((float)(*(float *)a4 * v27) - (float)(v20 * *(float *)v11.i32))) + (float)(v26 * v28);
  float v30 = v21 * (float)((float)(*(float *)v12.i32 * *(float *)v11.i32) - (float)(*(float *)a4 * v26));
  float v32 = *(float *)(a2 + 8);
  float v31 = *(float *)(a2 + 12);
  v14.i32[0] = *(_DWORD *)(a2 + 4);
  float v33 = (float)((float)((float)(v21 * *(float *)a2) - (float)(*(float *)a4 * v31)) - (float)(*(float *)v12.i32 * v32))
      + (float)(*(float *)v14.i32 * v20);
  *(float *)v15.i32 = (float)((float)((float)(v21 * *(float *)v14.i32) - (float)(*(float *)v12.i32 * v31))
                            - (float)(v20 * *(float *)a2))
                    + (float)(v32 * *(float *)a4);
  *(float *)v11.i32 = (float)((float)((float)(v21 * v32) - (float)(v20 * v31))
                            - (float)(*(float *)a4 * *(float *)v14.i32))
                    + (float)(*(float *)a2 * *(float *)v12.i32);
  float32x2_t v34 = (float32x2_t)vdup_lane_s32(v11, 0);
  *(float *)v12.i32 = (float)((float)((float)(*(float *)a4 * *(float *)a2) + (float)(v21 * v31))
                            + (float)(*(float *)v12.i32 * *(float *)v14.i32))
                    + (float)(v20 * v32);
  float32x2_t v35 = (float32x2_t)vdup_lane_s32(v12, 0);
  *(float *)v14.i32 = v33 + v33;
  float32x2_t v36 = (float32x2_t)vdup_lane_s32(v14, 0);
  float v37 = v30 + (float)(v27 * v28);
  *(float *)v16.i32 = *(float *)v15.i32 + *(float *)v15.i32;
  float32x2_t v38 = (float32x2_t)vdup_lane_s32(v16, 0);
  *(float *)v13.i32 = v33 * (float)(v33 + v33);
  float32x2_t v39 = vmul_n_f32((float32x2_t)vdup_lane_s32(v15, 0), *(float *)v15.i32 + *(float *)v15.i32);
  float32x2_t v40 = vmul_n_f32(v34, *(float *)v11.i32 + *(float *)v11.i32);
  float32x2_t v41 = vmul_n_f32(v36, *(float *)v15.i32);
  float32x2_t v42 = vmul_n_f32(v35, *(float *)v14.i32);
  float32x2_t v43 = vmul_n_f32(v34, *(float *)v15.i32 + *(float *)v15.i32);
  float32x2_t v44 = vmul_n_f32(v35, *(float *)v11.i32 + *(float *)v11.i32);
  float32x2_t v200 = vadd_f32(v41, v44);
  float32x2_t v45 = vsub_f32(v41, v44);
  float32x2_t v46 = vadd_f32(v42, v43);
  float32x2_t v47 = vsub_f32(v43, v42);
  float v48 = v45.f32[1];
  float32x2_t v49 = *(float32x2_t *)(a1 + 4);
  float v50 = *(float *)(a1 + 12);
  float32x2_t v51 = a3[1];
  float32x2_t v205 = (physx::Gu::HeightField *)v51;
  float32x4_t v206 = a3;
  float v52 = a3[3].f32[0];
  __asm { FMOV            V26.2S, #1.0 }
  int32x2_t v203 = vrev64_s32((int32x2_t)vdiv_f32(_D26, a3[2]));
  float v204 = 1.0 / v52;
  do
  {
    int v58 = (const float *)((char *)&physx::Gu::signs + v17);
    float32x4x3_t v219 = vld3q_f32(v58);
    v217.val[0] = vmulq_n_f32(v219.val[0], v49.f32[0]);
    v217.val[1] = vmulq_lane_f32(v219.val[1], v49, 1);
    v217.val[2] = vmulq_n_f32(v219.val[2], v50);
    unsigned int v59 = (float *)&v214[v17 + 96];
    vst3q_f32(v59, v217);
    v17 += 48;
  }
  while (v17 != 96);
  float v198 = v50;
  float32x2_t v201 = v49;
  uint64_t v60 = 0;
  float v61 = *(float *)&a10 + (float)(v22 * v27);
  float v62 = *(float *)&a11 + (float)(v18 * v61);
  *(float *)&a11 = v29 + (float)(v19 * v61);
  *(float *)&a10 = v37 + (float)(v22 * v61);
  float32x2_t v63 = vmul_n_f32(v36, *(float *)v11.i32);
  float32x2_t v64 = vmul_n_f32(v38, *(float *)v12.i32);
  float32x2_t v65 = vsub_f32(_D26, (float32x2_t)vdup_lane_s32(v13, 0));
  LODWORD(v66) = vsub_f32(v63, v64).u32[0];
  LODWORD(v67) = vsub_f32(v65, v40).u32[0];
  float32x2_t v68 = vadd_f32(v63, v64);
  LODWORD(v69) = vsub_f32(v65, v39).u32[0];
  float v70 = (float)(1.0 - v39.f32[1]) - v40.f32[1];
  float v71 = v68.f32[1];
  float v192 = v62;
  unsigned int v194 = LODWORD(a11);
  float32x4_t v72 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v219.val[0].f32, 0);
  float32x4_t v73 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
  unsigned int v196 = LODWORD(a10);
  float32x4_t v74 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a10, 0);
  do
  {
    float v75 = (const float *)&v214[v60 + 96];
    float32x4x3_t v216 = vld3q_f32(v75);
    v218.val[0] = vaddq_f32(v72, vaddq_f32(vaddq_f32(vmulq_n_f32(v216.val[0], v70), vmulq_lane_f32(v216.val[1], v45, 1)), vmulq_lane_f32(v216.val[2], v68, 1)));
    v218.val[1] = vaddq_f32(v73, vaddq_f32(vaddq_f32(vmulq_n_f32(v216.val[0], v200.f32[0]), vmulq_n_f32(v216.val[1], v67)), vmulq_n_f32(v216.val[2], v47.f32[0])));
    v218.val[2] = vaddq_f32(v74, vaddq_f32(vaddq_f32(vmulq_n_f32(v216.val[0], v66), vmulq_n_f32(v216.val[1], v46.f32[0])), vmulq_n_f32(v216.val[2], v69)));
    float v76 = (float *)&v214[v60];
    vst3q_f32(v76, v218);
    v60 += 48;
  }
  while (v60 != 96);
  float v184 = v70;
  float v185 = v69;
  float v186 = v67;
  float v187 = v66;
  float32x2_t v188 = v47;
  float32x2_t v190 = v46;
  uint64_t v77 = 0;
  while (1)
  {
    float v78 = *(float *)&v214[v77];
    float v79 = v78 * *(float *)v203.i32;
    if ((float)(v78 * *(float *)v203.i32) < 0.0) {
      goto LABEL_20;
    }
    float v80 = *(float *)&v214[v77 + 8];
    float v81 = v80 * v204;
    if ((float)(v80 * v204) < 0.0) {
      goto LABEL_20;
    }
    float v82 = v205;
    if (v79 >= (float)(*((float *)v205 + 16) + 1.0) || v81 >= (float)(*((float *)v205 + 17) + 1.0)) {
      goto LABEL_20;
    }
    float v83 = v206[2].f32[0];
    LODWORD(v210) = 0;
    v212.i32[0] = 0;
    unsigned int v84 = physx::Gu::HeightField::computeCellCoordinates(v205, v79, v81, (float *)&v210, (float *)&v212);
    float v85 = *(float *)&v210;
    uint64_t v86 = *((void *)v82 + 10);
    float v87 = (__int16 *)(v86 + 4 * v84);
    if ((char)v87[1] < 0)
    {
      float v93 = (float)*v87;
      float v89 = (float)*(__int16 *)(v86 + 4 * (*((_DWORD *)v82 + 15) + v84 + 1));
      if (v212.f32[0] <= *(float *)&v210)
      {
        float v96 = (float)*(__int16 *)(v86 + 4 * (*((_DWORD *)v82 + 15) + v84));
        float v95 = (float)(v93 + (float)(*(float *)&v210 * (float)(v96 - v93))) + (float)(v212.f32[0] * (float)(v89 - v96));
        goto LABEL_18;
      }
      float v94 = (float)*(__int16 *)(v86 + 4 * (v84 + 1));
      float v91 = v93 + (float)(v212.f32[0] * (float)(v94 - v93));
      goto LABEL_16;
    }
    float v88 = (float)*(__int16 *)(v86 + 4 * (*((_DWORD *)v82 + 15) + v84));
    float v89 = (float)*(__int16 *)(v86 + 4 * (v84 + 1));
    if ((float)(*(float *)&v210 + v212.f32[0]) >= 1.0)
    {
      float v94 = (float)*(__int16 *)(v86 + 4 * (*((_DWORD *)v82 + 15) + v84 + 1));
      float v91 = v94 + (float)((float)(1.0 - v212.f32[0]) * (float)(v88 - v94));
      float v85 = 1.0 - *(float *)&v210;
LABEL_16:
      float v92 = v89 - v94;
      goto LABEL_17;
    }
    float v90 = (float)*v87;
    float v91 = v90 + (float)(v212.f32[0] * (float)(v89 - v90));
    float v92 = v88 - v90;
LABEL_17:
    float v95 = v91 + (float)(v85 * v92);
LABEL_18:
    if ((float)(*(float *)&v214[v77 + 4] - (float)(v83 * v95)) == 0.0
      && physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint((physx::Gu::HeightFieldUtil *)&v203, v78, v80) != -1)
    {
      return 1;
    }
LABEL_20:
    v77 += 12;
    if (v77 == 96)
    {
      float32x4_t v210 = &v203;
      physx::Gu::HeightFieldUtil::computeLocalBounds((uint64_t)&v203, v211);
      uint64_t v97 = 0;
      uint64_t v98 = (uint64_t)v210;
      do
      {
        __n128 v99 = (float32x2_t *)&v214[12 * physx::Gu::edges[v97]];
        float v209 = v99[1].f32[0];
        __n128 v100 = (float32x2_t *)&v214[12 * physx::Gu::edges[v97 + 1]];
        float v101 = v100[1].f32[0];
        char v207 = 0;
        float32x2_t v208 = *v99;
        float32x2_t v212 = vsub_f32(*v100, v208);
        float v213 = v101 - v209;
        physx::Gu::HeightFieldTraceUtil::traceSegment<physx::Gu::TriggerTraceSegmentCallback,false,false>(v98, &v208, &v212, &v207, (uint64_t)v211);
        if (v207) {
          return 1;
        }
        v97 += 2;
      }
      while (v97 != 24);
      if (v185 >= 0.0)
      {
        float v117 = v185 + (float)(v186 + (float)(v184 + 1.0));
        float v118 = 0.5 / sqrtf(v117);
        v114.f32[0] = v118 * vsub_f32(v190, v188).f32[0];
        float v115 = (float)(v71 - v187) * v118;
        float v119 = (float)(v200.f32[0] - v48) * v118;
        float v120 = v117 * v118;
        float v121 = v185 + (float)((float)(1.0 - v184) - v186);
        float v122 = sqrtf(v121);
        float v123 = (float)(0.5 / v122) * vadd_f32(v190, v188).f32[0];
        float v124 = v121 * (float)(0.5 / v122);
        if (v184 >= (float)-v186)
        {
          float v116 = v119;
        }
        else
        {
          v114.f32[0] = (float)(v71 + v187) * (float)(0.5 / v122);
          float v115 = v123;
          float v116 = v124;
        }
        if (v184 < (float)-v186) {
          v102.f32[0] = (float)(v200.f32[0] - v48) * (float)(0.5 / v122);
        }
        else {
          v102.f32[0] = v120;
        }
      }
      else
      {
        v102.i32[1] = v200.i32[1];
        float v103 = (float)(v186 + (float)(1.0 - v184)) - v185;
        float v104 = 0.5 / sqrtf(v103);
        float v105 = (float)(v200.f32[0] + v48) * v104;
        float v106 = v103 * v104;
        float v107 = v104 * vadd_f32(v190, v188).f32[0];
        float v108 = (float)(v71 - v187) * v104;
        float v109 = (float)((float)(v184 + 1.0) - v186) - v185;
        float v110 = 0.5 / sqrtf(v109);
        float v111 = v109 * v110;
        v102.f32[0] = (float)(v200.f32[0] + v48) * v110;
        float v112 = (float)(v71 + v187) * v110;
        float v113 = v110 * vsub_f32(v190, v188).f32[0];
        if (v184 > v186) {
          v114.f32[0] = v111;
        }
        else {
          v114.f32[0] = v105;
        }
        if (v184 > v186) {
          float v115 = v102.f32[0];
        }
        else {
          float v115 = v106;
        }
        if (v184 > v186) {
          float v116 = v112;
        }
        else {
          float v116 = v107;
        }
        if (v184 > v186) {
          v102.f32[0] = v113;
        }
        else {
          v102.f32[0] = v108;
        }
      }
      *(float32x2_t *)v125.f32 = v201;
      uint64_t v126 = 0;
      v127.i64[0] = __PAIR64__(LODWORD(v115), v114.u32[0]);
      v127.i64[1] = __PAIR64__(v102.u32[0], LODWORD(v116));
      v128.i64[0] = __PAIR64__(v194, LODWORD(v192));
      float v129 = v198;
      v128.i64[1] = v196;
      float32x4_t v130 = vnegq_f32(v128);
      float32x4_t v131 = v130;
      v131.i32[3] = 0;
      float32x4_t v132 = v127;
      v132.i32[3] = 0;
      v128.i64[0] = vdupq_lane_s32((int32x2_t)v102, 0).u64[0];
      float32x4_t v133 = vmulq_n_f32(v131, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32).f32[0]);
      v133.i32[3] = 0;
      v114.f32[1] = v115;
      float32x2_t v134 = (float32x2_t)vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
      float32x2_t v135 = (float32x2_t)vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u64[0];
      int8x8_t v136 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v130.f32, (int8x8_t)v135, 4uLL), v114), (float32x2_t)vext_s8((int8x8_t)v114, (int8x8_t)v134, 4uLL), *(float32x2_t *)v130.f32);
      *(int8x8_t *)v137.f32 = vext_s8(v136, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v130.f32, v134), v114, v135), 4uLL);
      v137.i64[1] = v136.u32[0];
      float32x4_t v138 = vmlsq_lane_f32(v133, v137, v102, 0);
      v138.i64[1] = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u32[0];
      float32x4_t v139 = vmulq_f32(v131, v132);
      v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
      float32x4_t v140 = vmlaq_n_f32(v138, v132, vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32).f32[0]);
      float v141 = -3.4028e38;
      float v142 = 3.4028e38;
      float v143 = 3.4028e38;
      float v144 = -3.4028e38;
      do
      {
        float v146 = *(float *)&v214[v126];
        if (v146 < v142) {
          float v142 = *(float *)&v214[v126];
        }
        unsigned int v145 = (float *)&v214[v126];
        float v147 = *(float *)&v214[v126 + 8];
        if (v147 < v143) {
          float v143 = v145[2];
        }
        if (v146 > v144) {
          float v144 = *(float *)&v214[v126];
        }
        if (v147 > v141) {
          float v141 = v145[2];
        }
        v126 += 12;
      }
      while (v126 != 96);
      float v148 = v142 * *(float *)v203.i32;
      int v150 = *(_DWORD *)(*(void *)&v51 + 56);
      int v149 = *(_DWORD *)(*(void *)&v51 + 60);
      unsigned int v151 = v150 - 2;
      unsigned int v152 = vcvtms_u32_f32(v148);
      if (v148 <= (float)(v150 - 2)) {
        unsigned int v151 = v152;
      }
      if (v148 >= 0.0) {
        unsigned int v153 = v151;
      }
      else {
        unsigned int v153 = 0;
      }
      float v154 = v144 * *(float *)v203.i32;
      unsigned int v155 = v150 - 1;
      unsigned int v156 = vcvtps_u32_f32(v154);
      if (v154 <= (float)v155) {
        unsigned int v155 = v156;
      }
      if (v154 >= 0.0) {
        unsigned int v157 = v155;
      }
      else {
        unsigned int v157 = 0;
      }
      float v158 = v143 * v204;
      unsigned int v159 = v149 - 2;
      unsigned int v160 = vcvtms_u32_f32(v158);
      if (v158 <= (float)(v149 - 2)) {
        unsigned int v159 = v160;
      }
      if (v158 >= 0.0) {
        unsigned int v161 = v159;
      }
      else {
        unsigned int v161 = 0;
      }
      float v162 = v141 * v204;
      if (v162 >= 0.0)
      {
        unsigned int v163 = v149 - 1;
        if (v162 <= (float)(v149 - 1)) {
          unsigned int v163 = vcvtps_u32_f32(v162);
        }
      }
      else
      {
        unsigned int v163 = 0;
      }
      if (v153 > v157) {
        return 0;
      }
      float32x4_t v165 = vaddq_f32(v140, v140);
      v165.i32[3] = 0;
      float32x4_t v197 = vnegq_f32(v127);
      float32x4_t v199 = v165;
      int32x4_t v166 = (int32x4_t)v197;
      v166.i32[3] = v102.i32[0];
      v125.i64[1] = LODWORD(v129) | 0x7F7FFFFF00000000;
      float32x4_t v202 = v125;
      float32x4_t v167 = v206;
      int32x4_t v168 = vdupq_laneq_s32(v166, 3);
      v166.i32[3] = 0;
      LODWORD(v191) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v168.i8, *(float32x2_t *)v168.i8).u32[0];
      float32x4_t v193 = (float32x4_t)v168;
      float32x4_t v195 = (float32x4_t)v166;
      float32x2_t v189 = (float32x2_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 8uLL).u64[0];
      float32x2_t v169 = (float32x2_t)vext_s8(*(int8x8_t *)v197.f32, (int8x8_t)v189, 4uLL);
      while (v161 > v163)
      {
LABEL_90:
        if (++v153 > v157) {
          return 0;
        }
      }
      float32x4_t v170 = v205;
      unsigned int v171 = v161;
      while (1)
      {
        uint64_t v172 = v171 + v153 * *(_DWORD *)(*(void *)&v51 + 60);
        (*(void (**)(int32x2_t **__return_ptr, physx::Gu::HeightField *))(*(void *)v170 + 104))(&v210, v170);
        if ((v210 & 1) == 0) {
          break;
        }
        float32x4_t v170 = v205;
        if (v153 && v171 && *((_DWORD *)v205 + 14) - 1 > v153 && *((_DWORD *)v205 + 15) - 1 > v171) {
          goto LABEL_80;
        }
        if ((~*(unsigned __int8 *)(*((void *)v205 + 10) + 4 * v172 + 2) & 0x7F) != 0
          || physx::Gu::HeightField::isSolidVertex(v205, v172, v153, v171, (char *)&v210, v173))
        {
LABEL_88:
          v174.f32[0] = (float)*(__int16 *)(*(void *)(*(void *)&v51 + 80) + 4 * v172);
          v174.f32[1] = (float)v153;
          *(int32x2_t *)v175.f32 = vrev64_s32((int32x2_t)vmul_f32(v167[2], v174));
          v175.f32[2] = v167[3].f32[0] * (float)v171;
          v175.i32[3] = 0;
          float32x4_t v176 = vmulq_n_f32(v175, v191);
          v176.i32[3] = 0;
          float32x2_t v177 = (float32x2_t)vextq_s8((int8x16_t)v175, (int8x16_t)v175, 8uLL).u64[0];
          int8x8_t v178 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v197.f32, (float32x2_t)vext_s8(*(int8x8_t *)v175.f32, (int8x8_t)v177, 4uLL)), v169, *(float32x2_t *)v175.f32);
          *(int8x8_t *)v179.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32(v189, *(float32x2_t *)v175.f32), *(float32x2_t *)v197.f32, v177), 4uLL);
          v179.i64[1] = v178.u32[0];
          float32x4_t v180 = vmlaq_f32(v176, v193, v179);
          v180.i64[1] = vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u32[0];
          float32x4_t v181 = vmulq_f32(v195, v175);
          v181.i64[0] = vpaddq_f32(v181, v181).u64[0];
          float32x4_t v182 = vmlaq_n_f32(v180, v195, vpadd_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v181.f32).f32[0]);
          v182.i64[1] = vextq_s8((int8x16_t)v182, (int8x16_t)v182, 8uLL).u32[0];
          v175.i64[0] = 0x4000000040000000;
          v175.i64[1] = 0x4000000040000000;
          float32x4_t v183 = vmlaq_f32(v199, v175, v182);
          v183.i64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u32[0];
          *(int16x4_t *)v183.f32 = vmovn_s32(vcgtq_f32(v202, vabsq_f32(v183)));
          if (vuzp1_s8(*(int8x8_t *)v183.f32, *(int8x8_t *)v183.f32).u32[0] == -1) {
            return 1;
          }
        }
LABEL_89:
        if (++v171 > v163) {
          goto LABEL_90;
        }
      }
      float32x4_t v170 = v205;
LABEL_80:
      if (*(char *)(*((void *)v170 + 10) + 4 * v172 + 3) < 0) {
        goto LABEL_88;
      }
      goto LABEL_89;
    }
  }
}

uint64_t GeomOverlapCallback_ConvexHeightfield(uint64_t a1, float *a2, float32x2_t *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  float32x2_t v14 = a3[1];
  int32x2_t v15 = a3;
  float v5 = a3[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  int32x2_t v12 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a3[2]));
  float v13 = 1.0 / v5;
  return intersectHeightFieldConvex((uint64_t)&v12, a4, v4, a2, (float *)(a1 + 4));
}

uint64_t intersectHeightFieldConvex(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  uint64_t v268 = *MEMORY[0x263EF8340];
  float v7 = *(float *)a2;
  float v8 = *(float *)(a2 + 4);
  float v9 = v8 + v8;
  float v10 = *(float *)(a2 + 8);
  float v11 = *(float *)(a2 + 12);
  float v12 = v10 + v10;
  float v13 = v8 * (float)(v8 + v8);
  float v14 = v10 * (float)(v10 + v10);
  float v15 = (float)(v7 + v7) * v8;
  float v16 = (float)(v7 + v7) * v10;
  float v17 = (float)(v7 + v7) * v11;
  float v18 = v9 * v10;
  float v19 = v9 * v11;
  float v20 = v12 * v11;
  v263[0] = (float)(1.0 - v13) - v14;
  v263[1] = v15 + v20;
  v263[2] = v16 - v19;
  float v21 = 1.0 - (float)(v7 * (float)(v7 + v7));
  v263[3] = v15 - v20;
  v263[4] = v21 - v14;
  v263[5] = v18 + v17;
  v263[6] = v16 + v19;
  v263[7] = v18 - v17;
  float v22 = *a4;
  float v23 = a4[1];
  float v24 = a4[2];
  float v25 = a4[3];
  v263[8] = v21 - v13;
  float v26 = v22 * (float)(v22 + v22);
  float v27 = v23 * (float)(v23 + v23);
  float v28 = v24 * (float)(v24 + v24);
  uint64_t v264 = *(void *)(a2 + 16);
  float v29 = (float)(v22 + v22) * v23;
  float v30 = (float)(v22 + v22) * v24;
  float v31 = (float)(v22 + v22) * v25;
  int v265 = *(_DWORD *)(a2 + 24);
  float v32 = (float)(v23 + v23) * v24;
  float v33 = (float)(v23 + v23) * v25;
  float v34 = (float)(v24 + v24) * v25;
  float v35 = (float)(1.0 - v27) - v28;
  float v36 = v29 + v34;
  float v37 = v30 - v33;
  float v38 = v29 - v34;
  float v39 = 1.0 - v26;
  float v40 = (float)(1.0 - v26) - v28;
  float v41 = v32 + v31;
  float v42 = v30 + v33;
  float v43 = v32 - v31;
  float v44 = v39 - v27;
  float v45 = a5[4];
  float v46 = a5[5];
  float v47 = a5[6];
  float v49 = a5[2];
  float v48 = a5[3];
  float v50 = v45 + v45;
  float v51 = v46 + v46;
  float v52 = v45 * (float)(v45 + v45);
  float v53 = v46 * (float)(v46 + v46);
  float v54 = (float)(v48 + v48) * v45;
  float v55 = (float)(v48 + v48) * v46;
  float v56 = (float)(v48 + v48) * v47;
  float v57 = v50 * v46;
  float v58 = v50 * v47;
  float v59 = v51 * v47;
  float v60 = (float)(1.0 - v52) - v53;
  float v61 = v54 + v59;
  float v62 = v55 - v58;
  float v63 = v54 - v59;
  float v64 = 1.0 - (float)(v48 * (float)(v48 + v48));
  float v65 = v64 - v53;
  float v66 = v57 + v56;
  float v67 = v55 + v58;
  float v68 = v57 - v56;
  float v69 = v64 - v52;
  float v70 = a5[1];
  float v71 = *a5 * v60;
  float v72 = *a5 * v63;
  float v73 = *a5 * v67;
  float v74 = v61 * v70;
  float v75 = v65 * v70;
  float v76 = v68 * v70;
  float v77 = v62 * v49;
  float v78 = v66 * v49;
  float v79 = v69 * v49;
  float v80 = (float)((float)(v60 * v71) + (float)(v61 * v74)) + (float)(v62 * v77);
  float v81 = (float)((float)(v60 * v72) + (float)(v61 * v75)) + (float)(v62 * v78);
  float v82 = (float)((float)(v60 * v73) + (float)(v61 * v76)) + (float)(v62 * v79);
  float v83 = (float)((float)(v63 * v71) + (float)(v65 * v74)) + (float)(v66 * v77);
  float v84 = (float)((float)(v63 * v72) + (float)(v65 * v75)) + (float)(v66 * v78);
  float v85 = v68 * v75;
  float v86 = (float)((float)(v67 * v71) + (float)(v68 * v74)) + (float)(v69 * v77);
  float v87 = (float)((float)(v67 * v72) + v85) + (float)(v69 * v78);
  float v88 = (float)((float)(v67 * v73) + (float)(v68 * v76)) + (float)(v69 * v79);
  float v223 = v81;
  float v224 = v80;
  float v222 = v82;
  float v227 = (float)((float)(v63 * v73) + (float)(v65 * v76)) + (float)(v66 * v79);
  float v228 = v84;
  v258[0] = (float)(v42 * v82) + (float)((float)(v35 * v80) + (float)(v38 * v81));
  v258[1] = (float)(v43 * v82) + (float)((float)(v36 * v80) + (float)(v40 * v81));
  v258[2] = (float)(v44 * v82) + (float)((float)(v37 * v80) + (float)(v41 * v81));
  v258[3] = (float)(v42 * v227) + (float)((float)(v35 * v83) + (float)(v38 * v84));
  v258[4] = (float)(v43 * v227) + (float)((float)(v36 * v83) + (float)(v40 * v84));
  v258[5] = (float)(v44 * v227) + (float)((float)(v37 * v83) + (float)(v41 * v84));
  v259[3] = v38;
  v259[6] = v42;
  v258[6] = (float)(v42 * v88) + (float)((float)(v35 * v86) + (float)(v38 * v87));
  v258[7] = (float)(v43 * v88) + (float)((float)(v36 * v86) + (float)(v40 * v87));
  float v225 = v88;
  float v226 = v87;
  float v89 = a4[5];
  float v260 = a4[4];
  v258[8] = (float)(v44 * v88) + (float)((float)(v37 * v86) + (float)(v41 * v87));
  v258[9] = (float)((float)(v42 * 0.0) + (float)((float)(v35 * 0.0) + (float)(v38 * 0.0))) + v260;
  v259[0] = v35;
  v259[1] = v36;
  v259[4] = v40;
  v259[5] = v41;
  v259[2] = v37;
  v259[7] = v43;
  v259[8] = v44;
  float v261 = v89;
  float v262 = a4[6];
  v258[10] = (float)((float)(v43 * 0.0) + (float)((float)(v36 * 0.0) + (float)(v40 * 0.0))) + v89;
  v258[11] = (float)((float)(v44 * 0.0) + (float)((float)(v37 * 0.0) + (float)(v41 * 0.0))) + v262;
  multiplyInverseRTLeft((float *)&v250, v263, v258);
  uint64_t v90 = *(unsigned __int8 *)(a3 + 70);
  MEMORY[0x270FA5388](v91);
  float v93 = &v214[-v92];
  bzero(&v214[-v92], v94);
  uint64_t v95 = *(void *)(a3 + 72);
  LODWORD(v96) = *(unsigned __int8 *)(a3 + 71);
  uint64_t v97 = 20 * *(unsigned __int8 *)(a3 + 71);
  uint64_t v234 = v95;
  if (v90)
  {
    float v98 = v251;
    float v99 = v253;
    float v100 = v255;
    float32x2_t v101 = v250;
    float32x2_t v102 = v252;
    float32x2_t v103 = v254;
    float v104 = (float *)(v93 + 8);
    float32x2_t v105 = v256;
    float v106 = (float *)(v97 + v95 + 4);
    uint64_t v107 = v90;
    float v108 = v257;
    do
    {
      float v109 = *(v106 - 1);
      float v110 = v106[1];
      float v111 = v108 + (float)((float)((float)(v98 * v109) + (float)(v99 * *v106)) + (float)(v100 * v110));
      *((float32x2_t *)v104 - 1) = vadd_f32(v105, vadd_f32(vadd_f32(vmul_n_f32(v101, v109), vmul_n_f32(v102, *v106)), vmul_n_f32(v103, v110)));
      *float v104 = v111;
      v104 += 3;
      v106 += 3;
      --v107;
    }
    while (v107);
    int v112 = v90 - 1;
    float v113 = &v93[12 * (v90 - 1)];
    v114.i64[0] = *(void *)v113;
    v114.i64[1] = *((unsigned int *)v113 + 2);
    if (v90 == 1)
    {
      float32x4_t v116 = v114;
    }
    else
    {
      float v115 = v93;
      float32x4_t v116 = v114;
      do
      {
        float32x4_t v117 = *(float32x4_t *)v115;
        float v115 = (_OWORD *)((char *)v115 + 12);
        float32x4_t v116 = vminq_f32(v116, v117);
        float32x4_t v114 = vmaxq_f32(v114, v117);
        --v112;
      }
      while (v112);
    }
    float v119 = v116.f32[1];
    float v118 = v116.f32[2];
    float v120 = v114.f32[2];
  }
  else
  {
    float v118 = 8.5071e37;
    v114.i32[0] = -25165825;
    float v119 = 8.5071e37;
    v116.i32[0] = 2122317823;
    float v120 = -8.5071e37;
  }
  uint64_t v121 = *(void *)(a1 + 16);
  float v122 = *(float *)(a1 + 8);
  float v123 = *(float *)a1;
  int v124 = *(_DWORD *)(v121 + 56);
  float v125 = v116.f32[0] * *(float *)a1;
  if (*(float *)a1 > 0.0)
  {
    if (v125 >= 0.0)
    {
      unsigned int v126 = v124 - 2;
      if (v125 <= (float)(v124 - 2)) {
        unsigned int v126 = vcvtms_u32_f32(v125);
      }
    }
    else
    {
      unsigned int v126 = 0;
    }
    float v128 = v114.f32[0] * v123;
    if (v128 >= 0.0)
    {
      unsigned int v129 = v124 - 1;
      if (v128 <= (float)(v124 - 1)) {
        unsigned int v129 = vcvtps_u32_f32(v128);
      }
      goto LABEL_27;
    }
LABEL_24:
    unsigned int v129 = 0;
    goto LABEL_27;
  }
  float v127 = v114.f32[0] * v123;
  if (v127 >= 0.0)
  {
    unsigned int v126 = v124 - 2;
    if (v127 <= (float)(v124 - 2)) {
      unsigned int v126 = vcvtms_u32_f32(v127);
    }
  }
  else
  {
    unsigned int v126 = 0;
  }
  if (v125 < 0.0) {
    goto LABEL_24;
  }
  unsigned int v129 = v124 - 1;
  if (v125 <= (float)(v124 - 1)) {
    unsigned int v129 = vcvtps_u32_f32(v125);
  }
LABEL_27:
  int v130 = *(_DWORD *)(v121 + 60);
  float v131 = v118 * v122;
  if (v122 > 0.0)
  {
    if (v131 >= 0.0)
    {
      unsigned int v132 = v130 - 2;
      if (v131 <= (float)(v130 - 2)) {
        unsigned int v132 = vcvtms_u32_f32(v131);
      }
    }
    else
    {
      unsigned int v132 = 0;
    }
    float v134 = v120 * v122;
    if (v134 >= 0.0)
    {
      unsigned int v135 = v130 - 1;
      if (v134 <= (float)(v130 - 1)) {
        unsigned int v135 = vcvtps_u32_f32(v134);
      }
      goto LABEL_43;
    }
LABEL_40:
    unsigned int v135 = 0;
    goto LABEL_43;
  }
  float v133 = v120 * v122;
  if (v133 >= 0.0)
  {
    unsigned int v132 = v130 - 2;
    if (v133 <= (float)(v130 - 2)) {
      unsigned int v132 = vcvtms_u32_f32(v133);
    }
  }
  else
  {
    unsigned int v132 = 0;
  }
  if (v131 < 0.0) {
    goto LABEL_40;
  }
  unsigned int v135 = v130 - 1;
  if (v131 <= (float)(v130 - 1)) {
    unsigned int v135 = vcvtps_u32_f32(v131);
  }
LABEL_43:
  float v136 = 1.0 / *(float *)(a1 + 4);
  unsigned int v231 = v126;
  if (v126 <= v129)
  {
    int v138 = v126 * v130;
    float v137 = -3.4028e38;
    unsigned int v139 = v126;
    do
    {
      if (v132 <= v135)
      {
        unsigned int v141 = v132;
        do
        {
          uint64_t v140 = *(void *)(v121 + 80);
          if (v137 <= (float)*(__int16 *)(v140 + 4 * (v138 + v141))) {
            float v137 = (float)*(__int16 *)(v140 + 4 * (v138 + v141));
          }
          ++v141;
        }
        while (v141 <= v135);
      }
      ++v139;
      v138 += v130;
    }
    while (v139 <= v129);
  }
  else
  {
    float v137 = -3.4028e38;
  }
  float v230 = v136;
  float v142 = v136 * v137;
  if (v119 <= (float)(v136 * v137))
  {
    unsigned int v220 = v129;
    unsigned int v221 = v132;
    uint64_t v229 = v121;
    if (!v90) {
      goto LABEL_75;
    }
    *(float *)&uint64_t v235 = v86;
    *(float *)&float32x4_t v236 = v83;
    unint64_t v144 = 0;
    unsigned int v145 = (float *)(v93 + 8);
    while (1)
    {
      float v146 = *(v145 - 1);
      if (v146 < v142)
      {
        float v147 = *(v145 - 2);
        float v148 = v147 * *(float *)a1;
        if (v148 >= 0.0)
        {
          float v149 = *v145;
          float v150 = *v145 * *(float *)(a1 + 8);
          if (v150 >= 0.0)
          {
            uint64_t v151 = *(void *)(a1 + 16);
            if (v148 < (float)(*(float *)(v151 + 64) + 1.0) && v150 < (float)(*(float *)(v151 + 68) + 1.0)) {
              break;
            }
          }
        }
      }
LABEL_72:
      ++v144;
      v145 += 3;
      if (v144 >= v90)
      {
        LODWORD(v96) = *(unsigned __int8 *)(a3 + 71);
        uint64_t v234 = *(void *)(a3 + 72);
        uint64_t v97 = 20 * LODWORD(v96);
        float v83 = *(float *)&v236;
        float v86 = *(float *)&v235;
LABEL_75:
        long long v248 = 0u;
        long long v249 = 0u;
        long long v246 = 0u;
        long long v247 = 0u;
        long long v244 = 0u;
        long long v245 = 0u;
        long long v242 = 0u;
        long long v243 = 0u;
        uint64_t v218 = a1;
        uint64_t v219 = a3;
        __int16 v166 = *(_WORD *)(a3 + 68);
        uint64_t v167 = v166 & 0x7FFF;
        if (v166 >= 0) {
          uint64_t v168 = 0;
        }
        else {
          uint64_t v168 = 4 * v167;
        }
        uint64_t v240 = a1;
        float32x4_t v236 = v241;
        physx::Gu::HeightFieldUtil::computeLocalBounds(a1, v241);
        uint64_t v169 = v234;
        if (v96 != 0.0)
        {
          uint64_t v232 = v234 + v97 + 12 * v90 + 2 * v167 + 3 * v90 + v168;
          uint64_t v235 = v240;
          do
          {
            float v233 = v96;
            uint64_t v234 = v169;
            int v170 = *(unsigned __int8 *)(v169 + 18);
            if (*(unsigned char *)(v169 + 18))
            {
              uint64_t v171 = 0;
              uint64_t v172 = v232 + *(unsigned __int16 *)(v234 + 16);
              unsigned int v173 = v170 - 1;
              do
              {
                unsigned int v174 = *(unsigned __int8 *)(v172 + v173);
                unsigned int v175 = *(unsigned __int8 *)(v172 + v171);
                if (v175 >= v174) {
                  int v176 = *(unsigned __int8 *)(v172 + v173);
                }
                else {
                  int v176 = *(unsigned __int8 *)(v172 + v171);
                }
                if (v175 > v174) {
                  unsigned int v174 = *(unsigned __int8 *)(v172 + v171);
                }
                int v177 = v174 | (v176 << 8);
                unsigned int v178 = 9 * ((~(v177 << 15) + v177) ^ ((~(v177 << 15) + v177) >> 10));
                int v179 = (v178 ^ (v178 >> 6)) + ~((v178 ^ (v178 >> 6)) << 11);
                uint64_t v180 = (v179 ^ BYTE2(v179)) & 0x3F;
                if (*((unsigned __int16 *)&v242 + v180) == v177)
                {
                  uint64_t v181 = v171;
                }
                else
                {
                  *((_WORD *)&v242 + v180) = v177;
                  uint64_t v181 = (v171 + 1);
                  float v182 = *(float *)&v93[12 * v176 + 4];
                  float v183 = *(float *)&v93[12 * v174 + 4];
                  if (v182 <= v142 || v183 <= v142)
                  {
                    float v185 = (float *)&v93[12 * v174];
                    float v186 = (float *)&v93[12 * v176];
                    v238.f32[0] = *v186;
                    v238.f32[1] = v182;
                    float v239 = v186[2];
                    float v187 = *v185;
                    float v188 = v185[2];
                    char v237 = 0;
                    v266.f32[0] = v187 - v238.f32[0];
                    v266.f32[1] = v183 - v182;
                    float v267 = v188 - v239;
                    physx::Gu::HeightFieldTraceUtil::traceSegment<physx::Gu::TriggerTraceSegmentCallback,false,false>(v235, &v238, &v266, &v237, (uint64_t)v236);
                    unsigned int v173 = v171;
                    if (v237) {
                      return 1;
                    }
                  }
                  else
                  {
                    unsigned int v173 = v171;
                  }
                }
                uint64_t v171 = v181;
                --v170;
              }
              while (v170);
            }
            uint64_t v169 = v234 + 20;
            LODWORD(v96) = LODWORD(v233) - 1;
          }
          while (LODWORD(v233) != 1);
        }
        multiplyInverseRTLeft((float *)&v242, v259, v263);
        uint64_t v189 = v231;
        if (v231 <= v220)
        {
          float v217 = (float)((float)(v224 * *(float *)&v242) + (float)(v83 * *((float *)&v242 + 1)))
               + (float)(v86 * *((float *)&v242 + 2));
          float v215 = (float)((float)(v222 * *(float *)&v242) + (float)(v227 * *((float *)&v242 + 1)))
               + (float)(v225 * *((float *)&v242 + 2));
          float v216 = (float)((float)(v223 * *(float *)&v242) + (float)(v228 * *((float *)&v242 + 1)))
               + (float)(v226 * *((float *)&v242 + 2));
          *(float *)&float32x4_t v236 = (float)((float)(v224 * *((float *)&v242 + 3)) + (float)(v83 * *(float *)&v243))
                          + (float)(v86 * *((float *)&v243 + 1));
          *(float *)&uint64_t v235 = (float)((float)(v223 * *((float *)&v242 + 3)) + (float)(v228 * *(float *)&v243))
                          + (float)(v226 * *((float *)&v243 + 1));
          float v233 = (float)((float)(v224 * *((float *)&v243 + 2)) + (float)(v83 * *((float *)&v243 + 3)))
               + (float)(v86 * *(float *)&v244);
          *(float *)&uint64_t v234 = (float)((float)(v222 * *((float *)&v242 + 3)) + (float)(v227 * *(float *)&v243))
                          + (float)(v225 * *((float *)&v243 + 1));
          *(float *)&uint64_t v232 = (float)((float)(v223 * *((float *)&v243 + 2)) + (float)(v228 * *((float *)&v243 + 3)))
                          + (float)(v226 * *(float *)&v244);
          float v190 = (float)((float)(v222 * *((float *)&v243 + 2)) + (float)(v227 * *((float *)&v243 + 3)))
               + (float)(v225 * *(float *)&v244);
          float v191 = (float)((float)((float)(v224 * *((float *)&v244 + 1)) + (float)(v83 * *((float *)&v244 + 2)))
                       + (float)(v86 * *((float *)&v244 + 3)))
               + 0.0;
          float v192 = (float)((float)((float)(v223 * *((float *)&v244 + 1)) + (float)(v228 * *((float *)&v244 + 2)))
                       + (float)(v226 * *((float *)&v244 + 3)))
               + 0.0;
          float v193 = (float)((float)((float)(v222 * *((float *)&v244 + 1)) + (float)(v227 * *((float *)&v244 + 2)))
                       + (float)(v225 * *((float *)&v244 + 3)))
               + 0.0;
          float v228 = 1.0 / v123;
          float v194 = 1.0 / v122;
          uint64_t v196 = v218;
          uint64_t v195 = v219;
          while (v221 > v135)
          {
LABEL_100:
            uint64_t v189 = (v189 + 1);
            if (v189 > v220) {
              return 0;
            }
          }
          float v197 = v228 * (float)v189;
          float v198 = v217 * v197;
          float v199 = v216 * v197;
          float v200 = v215 * v197;
          uint64_t v201 = *(void *)(v196 + 16);
          unsigned int v202 = v221;
          while (2)
          {
            uint64_t v203 = v202 + *(_DWORD *)(v229 + 60) * v189;
            uint64_t v204 = v189;
            (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v201 + 104))(&v240, v201);
            if ((v240 & 1) == 0)
            {
              uint64_t v201 = *(void *)(v196 + 16);
              uint64_t v189 = v204;
              goto LABEL_105;
            }
            uint64_t v201 = *(void *)(v196 + 16);
            uint64_t v189 = v204;
            if (v204
              && v202
              && *(_DWORD *)(v201 + 56) - 1 > v204
              && *(_DWORD *)(v201 + 60) - 1 > v202)
            {
LABEL_105:
              if (*(char *)(*(void *)(v201 + 80) + 4 * v203 + 3) < 0) {
                goto LABEL_113;
              }
            }
            else if ((~*(unsigned __int8 *)(*(void *)(v201 + 80) + 4 * v203 + 2) & 0x7F) != 0 {
                   || (isSolidVertex = physx::Gu::HeightField::isSolidVertex(*(physx::Gu::HeightField **)(v196 + 16), v203, v204, v202, (char *)&v240, v205), uint64_t v189 = v204, isSolidVertex))
            }
            {
LABEL_113:
              uint64_t v207 = *(unsigned __int8 *)(v195 + 71);
              if (!*(unsigned char *)(v195 + 71)) {
                return 1;
              }
              float v208 = v230 * (float)*(__int16 *)(*(void *)(v229 + 80) + 4 * v203);
              float v209 = v194 * (float)v202;
              float v210 = (float)(*(float *)&v232 * v209) + (float)(v199 + (float)(*(float *)&v235 * v208));
              float v211 = (float)(v190 * v209) + (float)(v200 + (float)(*(float *)&v234 * v208));
              float v212 = v191 + (float)((float)(v233 * v209) + (float)(v198 + (float)(*(float *)&v236 * v208)));
              for (uint64_t i = (float *)(*(void *)(v195 + 72) + 8);
                    (float)(i[1]
                          + (float)((float)((float)((float)(v192 + v210) * *(i - 1)) + (float)(v212 * *(i - 2)))
                                  + (float)((float)(v193 + v211) * *i))) < 0.0;
                    i += 5)
              {
                if (!--v207) {
                  return 1;
                }
              }
            }
            if (++v202 > v135) {
              goto LABEL_100;
            }
            continue;
          }
        }
        return 0;
      }
    }
    float v152 = *(float *)(*(void *)(a1 + 24) + 16);
    LODWORD(v242) = 0;
    LODWORD(v240) = 0;
    unsigned int v153 = physx::Gu::HeightField::computeCellCoordinates((physx::Gu::HeightField *)v151, v148, v150, (float *)&v242, (float *)&v240);
    float v154 = *(float *)&v242;
    uint64_t v155 = *(void *)(v151 + 80);
    unsigned int v156 = (__int16 *)(v155 + 4 * v153);
    if ((char)v156[1] < 0)
    {
      float v162 = (float)*v156;
      float v158 = (float)*(__int16 *)(v155 + 4 * (*(_DWORD *)(v151 + 60) + v153 + 1));
      if (*(float *)&v240 <= *(float *)&v242)
      {
        float v165 = (float)*(__int16 *)(v155 + 4 * (*(_DWORD *)(v151 + 60) + v153));
        float v164 = (float)(v162 + (float)(*(float *)&v242 * (float)(v165 - v162)))
             + (float)(*(float *)&v240 * (float)(v158 - v165));
LABEL_69:
        if ((float)(v146 - (float)(v152 * v164)) == 0.0)
        {
          if (physx::Gu::HeightFieldUtil::getFaceIndexAtShapePoint((physx::Gu::HeightFieldUtil *)a1, v147, v149) != -1)return 1; {
          LODWORD(v90) = *(unsigned __int8 *)(a3 + 70);
          }
        }
        goto LABEL_72;
      }
      float v163 = (float)*(__int16 *)(v155 + 4 * (v153 + 1));
      float v160 = v162 + (float)(*(float *)&v240 * (float)(v163 - v162));
    }
    else
    {
      float v157 = (float)*(__int16 *)(v155 + 4 * (*(_DWORD *)(v151 + 60) + v153));
      float v158 = (float)*(__int16 *)(v155 + 4 * (v153 + 1));
      if ((float)(*(float *)&v242 + *(float *)&v240) < 1.0)
      {
        float v159 = (float)*v156;
        float v160 = v159 + (float)(*(float *)&v240 * (float)(v158 - v159));
        float v161 = v157 - v159;
LABEL_68:
        float v164 = v160 + (float)(v154 * v161);
        goto LABEL_69;
      }
      float v163 = (float)*(__int16 *)(v155 + 4 * (*(_DWORD *)(v151 + 60) + v153 + 1));
      float v160 = v163 + (float)((float)(1.0 - *(float *)&v240) * (float)(v157 - v163));
      float v154 = 1.0 - *(float *)&v242;
    }
    float v161 = v158 - v163;
    goto LABEL_68;
  }
  return 0;
}

BOOL sweepCapsule_HeightFieldGeom(float32x2_t *a1, uint64_t a2, physx::Gu::Box *a3, float a4, float a5, uint64_t a6, float *a7, float32x2_t *a8, uint64_t a9, __int16 *a10)
{
  float v13 = a7;
  uint64_t v263 = *MEMORY[0x263EF8340];
  float v17 = a7[6] + a5;
  long long v248 = *(_OWORD *)a7;
  uint64_t v249 = *((void *)a7 + 2);
  float v250 = v17;
  physx::Gu::computeBoxAroundCapsule((uint64_t)&v248, (const Capsule *)v241, a3);
  float v18 = (float)((float)(fabsf(v241[3]) * v246) + (float)(fabsf(v241[0]) * v245)) + (float)(fabsf(v241[6]) * v247);
  float v19 = (float)((float)(fabsf(v241[4]) * v246) + (float)(fabsf(v241[1]) * v245)) + (float)(fabsf(v241[7]) * v247);
  float v20 = (float)((float)(fabsf(v241[5]) * v246) + (float)(fabsf(v241[2]) * v245)) + (float)(fabsf(v241[8]) * v247);
  float32x2_t v239 = a1[1];
  uint64_t v240 = a1;
  float v21 = a1[3].f32[0];
  __asm { FMOV            V4.2S, #1.0 }
  int32x2_t v237 = vrev64_s32((int32x2_t)vdiv_f32(_D4, a1[2]));
  float v238 = 1.0 / v21;
  __int16 v26 = *a10;
  v227[1] = &v237;
  __int16 v228 = v26;
  __int16 v229 = 0;
  BOOL v230 = (a1[3].i8[4] & 2 | v26 & 0x80) != 0;
  BOOL v231 = (v26 & 0x40) != 0;
  v227[0] = &unk_26E729188;
  uint64_t v232 = &v248;
  float v233 = a8;
  uint64_t v234 = a9;
  uint64_t v235 = a2;
  float v236 = a4;
  *(_DWORD *)(a9 + 16) = -1;
  *(_DWORD *)(a9 + 48) = 2139095039;
  float v27 = *(float *)(a2 + 16) * -2.0;
  float v28 = *(float *)(a2 + 20) * -2.0;
  float v29 = *(float *)(a2 + 24) * -2.0;
  float v30 = *(float *)(a2 + 8);
  v31.i32[0] = *(_DWORD *)(a2 + 12);
  float v32 = (float)(*(float *)v31.i32 * *(float *)v31.i32) + -0.5;
  float v33 = *(float *)a2;
  float v34 = *(float *)(a2 + 4);
  float v35 = (float)((float)(v28 * v34) + (float)(*(float *)a2 * v27)) + (float)(v30 * v29);
  *(float *)v36.i32 = -v30;
  float v37 = -*(float *)a2;
  *(float *)v38.i32 = -v34;
  float v39 = (float)((float)-(float)(v34 * (float)(v243 + v243)) - (float)(*(float *)a2 * (float)(v242 + v242)))
      - (float)(v30 * (float)(v244 + v244));
  float v40 = (float)((float)((float)(v27 * v32)
                      - (float)((float)((float)(v34 * v29) - (float)(v30 * v28)) * *(float *)v31.i32))
              + (float)(*(float *)a2 * v35))
      + (float)((float)((float)(*(float *)v31.i32
                              * (float)((float)(v30 * (float)(v243 + v243)) - (float)(v34 * (float)(v244 + v244))))
                      + (float)((float)(v242 + v242) * v32))
              - (float)(*(float *)a2 * v39));
  float v41 = (float)((float)((float)(v28 * v32)
                      - (float)((float)((float)(v30 * v27) - (float)(*(float *)a2 * v29)) * *(float *)v31.i32))
              + (float)(v34 * v35))
      + (float)((float)((float)(*(float *)v31.i32
                              * (float)((float)(*(float *)a2 * (float)(v244 + v244))
                                      - (float)(v30 * (float)(v242 + v242))))
                      + (float)((float)(v243 + v243) * v32))
              - (float)(v34 * v39));
  float v42 = (float)((float)((float)(v29 * v32)
                      - (float)((float)((float)(*(float *)a2 * v28) - (float)(v34 * v27)) * *(float *)v31.i32))
              + (float)(v30 * v35))
      + (float)((float)((float)(*(float *)v31.i32
                              * (float)((float)(v34 * (float)(v242 + v242))
                                      - (float)(*(float *)a2 * (float)(v243 + v243))))
                      + (float)((float)(v244 + v244) * v32))
              - (float)(v30 * v39));
  v225.f32[0] = v40;
  v225.f32[1] = v41;
  float v226 = v42;
  float v43 = a8->f32[0] + a8->f32[0];
  float v44 = a8->f32[1] + a8->f32[1];
  float v45 = a8[1].f32[0] + a8[1].f32[0];
  float v46 = (float)((float)-(float)(v34 * v44) - (float)(v33 * v43)) - (float)(v30 * v45);
  float v47 = (float)((float)(*(float *)v31.i32 * (float)((float)(v30 * v44) - (float)(v34 * v45))) + (float)(v43 * v32))
      - (float)(v33 * v46);
  float v48 = (float)((float)(*(float *)v31.i32 * (float)((float)(v33 * v45) - (float)(v30 * v43))) + (float)(v44 * v32))
      - (float)(v34 * v46);
  float v49 = (float)((float)(*(float *)v31.i32 * (float)((float)(v34 * v43) - (float)(v33 * v44))) + (float)(v45 * v32))
      - (float)(v30 * v46);
  v223.f32[0] = v47;
  v223.f32[1] = v48;
  float32x2_t v50 = (float32x2_t)vdup_lane_s32(v31, 0);
  *(float *)v51.i32 = v37 - v33;
  float32x2_t v52 = (float32x2_t)vdup_lane_s32(v51, 0);
  *(float *)v53.i32 = (float)-v34 - v34;
  float v224 = v49;
  float v54 = (float)-v30 - v30;
  *(float *)v55.i32 = -(float)(v33 * *(float *)v51.i32);
  float32x2_t v56 = vmul_n_f32((float32x2_t)vdup_lane_s32(v38, 0), *(float *)v53.i32);
  float32x2_t v57 = vmul_n_f32((float32x2_t)vdup_lane_s32(v36, 0), v54);
  float32x2_t v58 = vmul_n_f32(v52, *(float *)v38.i32);
  float32x2_t v59 = vmul_n_f32(v52, *(float *)v36.i32);
  float32x2_t v60 = vmul_n_f32(v50, *(float *)v51.i32);
  float32x2_t v61 = vmul_n_f32((float32x2_t)vdup_lane_s32(v53, 0), *(float *)v36.i32);
  float32x2_t v62 = vmul_n_f32(v50, *(float *)v53.i32);
  float32x2_t v63 = vmul_n_f32(v50, v54);
  float32x2_t v64 = vsub_f32(_D4, (float32x2_t)vdup_lane_s32(v55, 0));
  v50.f32[0] = vsub_f32(v59, v62).f32[0];
  float v65 = vadd_f32(v60, v61).f32[0];
  v62.f32[0] = vmuls_lane_f32(v20, vadd_f32(v59, v62), 1);
  v61.f32[0] = v20 * vsub_f32(v61, v60).f32[0];
  float v66 = v20 * vsub_f32(v64, v56).f32[0];
  float v67 = fabsf(v62.f32[0])
      + (float)(fabsf(v18 * (float)((float)(1.0 - v56.f32[1]) - v57.f32[1]))
              + fabsf(vmuls_lane_f32(v19, vsub_f32(v58, v63), 1)));
  v64.f32[0] = fabsf(v61.f32[0])
             + (float)(fabsf(v18 * vadd_f32(v58, v63).f32[0]) + fabsf(v19 * vsub_f32(v64, v57).f32[0]));
  float v68 = fabsf(v66) + (float)(fabsf(v18 * v50.f32[0]) + fabsf(v19 * v65));
  v221.f32[0] = (float)((float)(v40 + v67) + (float)(v67 - v40)) * 0.5;
  v221.f32[1] = (float)((float)(v64.f32[0] + v41) + (float)(v64.f32[0] - v41)) * 0.5;
  float v222 = (float)((float)(v42 + v68) + (float)(v68 - v42)) * 0.5;
  float v69 = v218;
  HeightFieldTraceSegmentSweepHelper::HeightFieldTraceSegmentSweepHelper((uint64_t)v218, (uint64_t)&v237, &v221);
  uint64_t v70 = v218[0];
  float v71 = (float *)v218[1];
  uint64_t v251 = 0;
  if (physx::Gu::intersectRayAABB2(&v219, v220, &v225, &v223, (float *)&v251 + 1, (float *)&v251, a4))
  {
    unsigned int v73 = 0;
    uint64_t v74 = *(void *)(v70 + 16);
    v252.i8[0] = 0;
    v252.i64[1] = v70;
    uint64_t v253 = v74;
    int v262 = 0;
    float v75 = v40 + (float)(v47 * a4);
    float v76 = v41 + (float)(v48 * a4);
    if (v76 >= v41) {
      float v77 = v41;
    }
    else {
      float v77 = v41 + (float)(v48 * a4);
    }
    float v78 = v71[1];
    float v79 = *(float *)(v70 + 4);
    float v80 = (float)(v77 - v78) * v79;
    if (v76 <= v41) {
      float v76 = v41;
    }
    float v257 = v80;
    float v258 = (float)(v76 + v78) * v79;
    if (v75 >= v40) {
      float v81 = v40;
    }
    else {
      float v81 = v40 + (float)(v47 * a4);
    }
    float v82 = *v71;
    float v83 = v81 - *v71;
    float v84 = *(float *)v70;
    float v85 = *(float *)v70 * v83;
    int v86 = *(_DWORD *)(v74 + 56);
    if (v85 >= 0.0)
    {
      unsigned int v73 = v86 - 2;
      if (v85 <= (float)(v86 - 2)) {
        unsigned int v73 = vcvtms_u32_f32(v85);
      }
    }
    float v87 = v42 + (float)(v49 * a4);
    v259.i32[0] = v73;
    if (v75 <= v40) {
      float v75 = v40;
    }
    float v88 = v84 * (float)(v75 + v82);
    if (v88 >= 0.0)
    {
      unsigned int v89 = v86 - 1;
      if (v88 <= (float)(v86 - 1)) {
        unsigned int v89 = vcvtps_u32_f32(v88);
      }
    }
    else
    {
      unsigned int v89 = 0;
    }
    v259.i32[1] = v89;
    if (v87 >= v42) {
      float v90 = v42;
    }
    else {
      float v90 = v42 + (float)(v49 * a4);
    }
    float v91 = v71[2];
    float v92 = v90 - v91;
    float v93 = *(float *)(v70 + 8);
    float v94 = v93 * v92;
    int v95 = *(_DWORD *)(v74 + 60);
    if (v94 >= 0.0)
    {
      unsigned int v96 = v95 - 2;
      if (v94 <= (float)(v95 - 2)) {
        unsigned int v96 = vcvtms_u32_f32(v94);
      }
    }
    else
    {
      unsigned int v96 = 0;
    }
    v259.i32[2] = v96;
    if (v87 <= v42) {
      float v87 = v42;
    }
    float v97 = v93 * (float)(v87 + v91);
    int v98 = v95 - 1;
    if (v97 >= 0.0)
    {
      unsigned int v99 = v95 - 1;
      if (v97 <= (float)v98) {
        unsigned int v99 = vcvtps_u32_f32(v97);
      }
    }
    else
    {
      unsigned int v99 = 0;
    }
    uint64_t v207 = v13;
    float v208 = a1;
    uint64_t v209 = a9;
    v259.i32[3] = v99;
    float v100 = v82 * v84;
    float v101 = ceilf(v82 * v84);
    float v102 = v91 * v93;
    float v103 = ceilf(v91 * v93);
    unsigned int v255 = vcvtps_s32_f32(v100) + 1;
    unsigned int v256 = vcvtps_s32_f32(v102) + 1;
    float v104 = (float)(v40 + (float)(v47 * *((float *)&v251 + 1))) * v84;
    float v105 = 0.0000001 - v101;
    if (v104 > (float)(0.0000001 - v101)) {
      float v105 = (float)(v40 + (float)(v47 * *((float *)&v251 + 1))) * v84;
    }
    if (v105 >= (float)(v101 + (float)((float)(v86 - 1) * 1.0))) {
      float v105 = v101 + (float)((float)(v86 - 1) * 1.0);
    }
    float v106 = (float)(v42 + (float)(v49 * *((float *)&v251 + 1))) * v93;
    float v107 = 0.0000001 - v103;
    if (v106 > (float)(0.0000001 - v103)) {
      float v107 = (float)(v42 + (float)(v49 * *((float *)&v251 + 1))) * v93;
    }
    float v108 = v103 + (float)((float)v98 * 1.0);
    if (v107 < v108) {
      float v108 = v107;
    }
    float v109 = (float)(v40 + (float)(v47 * *(float *)&v251)) * v84;
    float v110 = (float)(v42 + (float)(v49 * *(float *)&v251)) * v93;
    if ((float)(v109 - v104) < 0.0) {
      float v111 = -1.0;
    }
    else {
      float v111 = 1.0;
    }
    if ((float)(v110 - v106) < 0.0) {
      float v112 = -1.0;
    }
    else {
      float v112 = 1.0;
    }
    if (vabds_f32(v109, v104) >= 1.0e-10) {
      float v113 = v109 - v104;
    }
    else {
      float v113 = v111 * 1.0e-10;
    }
    if (vabds_f32(v110, v106) >= 1.0e-10) {
      float v114 = v110 - v106;
    }
    else {
      float v114 = v112 * 1.0e-10;
    }
    float v115 = floorf(v105);
    float v116 = ceilf(v105);
    float v117 = floorf(v108);
    float v118 = ceilf(v108);
    if (v114 <= 0.0) {
      float v119 = v118;
    }
    else {
      float v119 = v117;
    }
    float v120 = v115 + -1.0;
    if (v115 != v105) {
      float v120 = v115;
    }
    float v121 = v116 + 1.0;
    if (v116 != v105) {
      float v121 = v116;
    }
    if (v113 <= 0.0) {
      float v122 = v116;
    }
    else {
      float v122 = v115;
    }
    if (v113 > 0.0) {
      float v123 = v121;
    }
    else {
      float v123 = v120;
    }
    float v124 = v117 + -1.0;
    if (v117 != v108) {
      float v124 = v117;
    }
    if (v118 == v108) {
      float v125 = v118 + 1.0;
    }
    else {
      float v125 = v118;
    }
    if (v114 <= 0.0) {
      float v125 = v124;
    }
    float v126 = (float)(v123 - v104) / v113;
    float v127 = (float)(v125 - v106) / v114;
    if (v126 < 0.0) {
      float v126 = fabsf(0.0000001 / v113);
    }
    int v128 = (int)v122;
    int v129 = (int)v119;
    int v216 = (int)v112;
    int v217 = (int)v111;
    if (v127 < 0.0) {
      float v127 = fabsf(0.0000001 / v114);
    }
    int v215 = 0;
    float v214 = 1.0 / fabsf(v113);
    float v130 = fabsf(v114);
    if (v217 >= 1) {
      int v131 = 0;
    }
    else {
      int v131 = -1;
    }
    if (v216 >= 1) {
      int v132 = 0;
    }
    else {
      int v132 = -1;
    }
    int v210 = v132;
    int v211 = v131;
    v72.i32[1] = 0;
    float v133 = 0.0 - v103;
    int v212 = v95;
    float v134 = v103 + (float)v95;
    float v135 = 0.0 - v101;
    float v136 = v101 + (float)v86;
    float v213 = 1.0 / v130;
    while (1)
    {
      if (v126 >= v127) {
        float v137 = v127;
      }
      else {
        float v137 = v126;
      }
      if (!v252.i8[0])
      {
        v252.i8[0] = 1;
        float32x2_t v254 = v227;
        *(_DWORD *)float v260 = v212;
        *(_DWORD *)&v260[4] = v211;
        long long v261 = xmmword_234422A50;
        *(_DWORD *)&v260[8] = v210;
        *(_DWORD *)&v260[12] = v128 - v255;
        unsigned int v140 = v255 + v128;
        *(_DWORD *)&v260[16] = v255 + v128;
        *(_DWORD *)&v260[20] = v129 - v256;
        int v141 = v256 + v129;
        *(_DWORD *)&v260[24] = v256 + v129;
        if ((int)(v128 - v255) <= (int)(v255 + v128))
        {
          int v142 = v128 - v255 + v211;
          unsigned int v143 = (v217 > 0) + v128 - v255;
          int v144 = v210;
          int v145 = v211;
          do
          {
            if (v142 >= v259.i32[0])
            {
              if (v142 >= v259.i32[1]) {
                break;
              }
              if (*(int *)&v260[20] <= v141)
              {
                int v146 = v144 + *(_DWORD *)&v260[20] - 1;
                do
                {
                  int v147 = v146 + 1;
                  if (v146 + 1 >= v259.i32[2])
                  {
                    if (v147 >= v259.i32[3]) {
                      break;
                    }
                    int v148 = v146 + v142 * *(_DWORD *)v260;
                    uint64_t v149 = (v148 + 1);
                    uint64_t v150 = *(void *)(v253 + 80);
                    float v151 = (float)*(__int16 *)(v150 + 4 * v149);
                    float v152 = (float)*(__int16 *)(v150 + 4 * (v148 + 2));
                    int v153 = v146 + v143 * *(_DWORD *)v260;
                    float v154 = (float)*(__int16 *)(v150 + 4 * (v153 + 1));
                    float v155 = (float)*(__int16 *)(v150 + 4 * (v153 + 2));
                    if (v258 >= v151 || v258 >= v152 || v258 >= v154 || v258 >= v155)
                    {
                      BOOL v159 = v257 <= v151 || v257 <= v152;
                      BOOL v160 = v159 || v257 <= v154;
                      if (v160 || v257 <= v155)
                      {
                        if ((~*(unsigned __int8 *)(v150 + 4 * v149 + 2) & 0x7F) != 0)
                        {
                          if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)&v252, 2 * (int)v149))goto LABEL_232; {
                          uint64_t v150 = *(void *)(v253 + 80);
                          }
                        }
                        if ((~*(unsigned __int8 *)(v150 + 4 * v149 + 3) & 0x7F) != 0
                          && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)&v252, (2 * v149) | 1))
                        {
                          goto LABEL_232;
                        }
                      }
                    }
                  }
                  int v141 = *(_DWORD *)&v260[24];
                  int v144 = *(_DWORD *)&v260[8];
                  int v146 = v147;
                }
                while (v147 < *(_DWORD *)&v260[8] + *(_DWORD *)&v260[24]);
                unsigned int v140 = *(_DWORD *)&v260[16];
                int v145 = *(_DWORD *)&v260[4];
              }
            }
            ++v143;
            BOOL v159 = v142++ < (int)(v140 + v145);
          }
          while (v159);
          if (v262)
          {
            if (!(*(unsigned int (**)(void *))(*v254 + 16))(v254)) {
              goto LABEL_232;
            }
            int v262 = 0;
          }
        }
        goto LABEL_218;
      }
      int v138 = v128 - v255;
      LODWORD(v261) = v128 - v255;
      DWORD1(v261) = v255 + v128;
      int v139 = v129 - v256;
      DWORD2(v261) = v129 - v256;
      HIDWORD(v261) = v256 + v129;
      if (v128 - v255 == *(_DWORD *)&v260[12])
      {
        if (v139 == *(_DWORD *)&v260[20])
        {
          if ((int)v70 <= (int)a2)
          {
            if (v215) {
              goto LABEL_141;
            }
            goto LABEL_178;
          }
        }
        else
        {
          if (v139 >= *(int *)&v260[20]) {
            LODWORD(v69) = v256 + v129;
          }
          else {
            LODWORD(v69) = v129 - v256;
          }
          int v215 = 1;
          LODWORD(v70) = v128 - v255;
          LODWORD(a2) = v255 + v128;
          if (v138 <= (int)(v255 + v128))
          {
LABEL_141:
            int v162 = *(_DWORD *)&v260[8] + v69;
            if (*(_DWORD *)&v260[8] + (int)v69 >= v259.i32[2] && v162 < v259.i32[3])
            {
              int v164 = *(_DWORD *)&v260[4] + v70;
              while (v164 < v259.i32[1])
              {
                if (v164 >= v259.i32[0])
                {
                  uint64_t v165 = (v162 + *(_DWORD *)v260 * v164);
                  uint64_t v166 = *(void *)(v253 + 80);
                  float v167 = (float)*(__int16 *)(v166 + 4 * v165);
                  float v168 = (float)*(__int16 *)(v166 + 4 * (v165 + 1));
                  float v169 = (float)*(__int16 *)(v166 + 4 * (v165 + *(_DWORD *)v260));
                  float v170 = (float)*(__int16 *)(v166 + 4 * (v165 + *(_DWORD *)v260 + 1));
                  BOOL v171 = v258 < v167 && v258 < v168;
                  BOOL v172 = v171 && v258 < v169;
                  if (!v172 || v258 >= v170)
                  {
                    BOOL v174 = v257 <= v167 || v257 <= v168;
                    BOOL v175 = v174 || v257 <= v169;
                    if (v175 || v257 <= v170)
                    {
                      if ((~*(unsigned __int8 *)(v166 + 4 * v165 + 2) & 0x7F) != 0)
                      {
                        if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)&v252, 2 * (int)v165))goto LABEL_232; {
                        uint64_t v166 = *(void *)(v253 + 80);
                        }
                      }
                      if ((~*(unsigned __int8 *)(v166 + 4 * v165 + 3) & 0x7F) != 0
                        && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)&v252, (2 * v165) | 1))
                      {
                        goto LABEL_232;
                      }
                    }
                  }
                }
                BOOL v159 = v164++ < *(_DWORD *)&v260[4] + (int)a2;
                if (!v159) {
                  break;
                }
              }
            }
          }
        }
      }
      else
      {
        if (v138 >= *(int *)&v260[12]) {
          LODWORD(v69) = v255 + v128;
        }
        else {
          LODWORD(v69) = v128 - v255;
        }
        if (v139 <= (int)(v256 + v129))
        {
          LODWORD(v70) = v129 - v256;
          LODWORD(a2) = v256 + v129;
LABEL_178:
          int v177 = *(_DWORD *)&v260[4] + v69;
          if (*(_DWORD *)&v260[4] + (int)v69 >= v259.i32[0] && v177 < v259.i32[1])
          {
            int v179 = *(_DWORD *)&v260[8];
            int v180 = *(_DWORD *)&v260[8] - 1;
            int v206 = (int)v69;
            int v181 = v69 + *(_DWORD *)&v260[4] + 1;
            do
            {
              if ((int)v70 + v179 >= v259.i32[3]) {
                break;
              }
              if ((int)v70 + v179 >= v259.i32[2])
              {
                uint64_t v182 = (v70 + v179 + *(_DWORD *)v260 * v177);
                uint64_t v183 = *(void *)(v253 + 80);
                float v184 = (float)*(__int16 *)(v183 + 4 * v182);
                float v185 = (float)*(__int16 *)(v183 + 4 * (v182 + 1));
                float v186 = (float)*(__int16 *)(v183 + 4 * (v70 + v179 + v181 * *(_DWORD *)v260));
                float v187 = (float)*(__int16 *)(v183 + 4 * (v70 + v179 + v181 * *(_DWORD *)v260 + 1));
                BOOL v188 = v258 < v184 && v258 < v185;
                BOOL v189 = v188 && v258 < v186;
                if (!v189 || v258 >= v187)
                {
                  BOOL v191 = v257 <= v184 || v257 <= v185;
                  BOOL v192 = v191 || v257 <= v186;
                  if (v192 || v257 <= v187)
                  {
                    if ((~*(unsigned __int8 *)(v183 + 4 * v182 + 2) & 0x7F) != 0)
                    {
                      if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)&v252, 2 * (int)v182))goto LABEL_232; {
                      uint64_t v183 = *(void *)(v253 + 80);
                      }
                    }
                    if ((~*(unsigned __int8 *)(v183 + 4 * v182 + 3) & 0x7F) != 0
                      && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)&v252, (2 * v182) | 1))
                    {
                      goto LABEL_232;
                    }
                  }
                }
              }
              ++v180;
              ++v179;
            }
            while ((int)v70 + v180 < *(_DWORD *)&v260[8] + (int)a2);
            int v215 = 0;
            LODWORD(v69) = v206;
          }
          else
          {
            int v215 = 0;
          }
          goto LABEL_214;
        }
        int v215 = 0;
        LODWORD(a2) = v256 + v129;
        LODWORD(v70) = v129 - v256;
      }
LABEL_214:
      if (v262)
      {
        if (!(*(unsigned int (**)(void *))(*v254 + 16))(v254)) {
          goto LABEL_232;
        }
        int v262 = 0;
      }
      *(_OWORD *)&v260[12] = v261;
LABEL_218:
      if (v126 >= v127)
      {
        v129 += v216;
        float v196 = (float)(v129 + v216);
        if (v133 > v196 || v134 <= v196)
        {
LABEL_232:
          a9 = v209;
          a1 = v208;
          float v13 = v207;
          break;
        }
        float v127 = v213 + v127;
      }
      else
      {
        v128 += v217;
        float v194 = (float)(v128 + v217);
        if (v135 > v194 || v136 <= v194) {
          goto LABEL_232;
        }
        float v126 = v214 + v126;
      }
      if (v137 >= 1.0001) {
        goto LABEL_232;
      }
    }
  }
  int v198 = v229;
  if ((_BYTE)v229)
  {
    if (!HIBYTE(v229))
    {
      __int16 v203 = 1027;
      goto LABEL_240;
    }
    *(_WORD *)(a9 + 20) = 1026;
    if ((v228 & 0x200) != 0)
    {
      float32x4_t v199 = *(float32x4_t *)v13;
      v199.i64[1] = *((unsigned int *)v13 + 2);
      float32x4_t v200 = *(float32x4_t *)(v13 + 3);
      v200.i64[1] = *((unsigned int *)v13 + 5);
      v72.i32[0] = (__int32)v13[6];
      LOBYTE(v255) = 1;
      *(int32x2_t *)&v260[16] = vdup_lane_s32(v72, 0);
      float32x4_t v259 = v199;
      *(float32x4_t *)float v260 = v200;
      LODWORD(v253) = v72.i32[0];
      HIDWORD(v253) = v72.i32[0];
      float32x2_t v254 = (void *)(v72.u32[0] | 0x400000000);
      float32x4_t v201 = vaddq_f32(v199, v200);
      v200.i64[0] = 0x3F0000003F000000;
      v200.i64[1] = 0x3F0000003F000000;
      float32x4_t v202 = vmulq_f32(v201, v200);
      v202.i32[3] = 0;
      float32x4_t v252 = v202;
      if (physx::Gu::computeCapsule_HeightFieldMTD((uint64_t)a1))
      {
        __int16 v203 = *(_WORD *)(a9 + 20) | 1;
LABEL_240:
        *(_WORD *)(a9 + 20) = v203;
        return v198 != 0;
      }
    }
    *(_DWORD *)(a9 + 48) = 0;
    float v204 = -a8[1].f32[0];
    *(float32x2_t *)(a9 + 36) = vneg_f32(*a8);
    *(float *)(a9 + 44) = v204;
  }
  return v198 != 0;
}

BOOL sweepConvex_HeightFieldGeom(float32x2_t *a1, float32x2_t *a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, __int16 *a7, double a8, float a9)
{
  uint64_t v481 = *MEMORY[0x263EF8340];
  uint64_t v17 = *(void *)(a3 + 32);
  float v18 = 1.0;
  BOOL v20 = *(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0 && *(float *)(a3 + 12) == 1.0;
  long long v416 = xmmword_23435FD50;
  long long v417 = xmmword_23435FD50;
  long long v418 = xmmword_234376D80;
  long long v419 = xmmword_23435FD60;
  float v21 = 0.0;
  float v22 = 0.0;
  uint64_t v420 = 0x3F80000000000000;
  char v421 = 0;
  v23.i64[0] = 0;
  float v24 = 1.0;
  int32x2_t v25 = 0;
  float v26 = 0.0;
  float v27 = 0.0;
  float v28 = 1.0;
  if (!v20)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v416, (float *)(a3 + 4), (float *)(a3 + 16));
    float v27 = *((float *)&v416 + 1);
    float v28 = *(float *)&v416;
    v25.i32[0] = HIDWORD(v416);
    float v26 = *((float *)&v416 + 2);
    v23.i32[0] = DWORD1(v417);
    float v24 = *(float *)&v417;
    float v21 = *((float *)&v417 + 3);
    float v22 = *((float *)&v417 + 2);
    float v18 = *(float *)&v418;
  }
  float v397 = v21;
  BOOL v29 = 0;
  float v30 = *(float *)(v17 + 32);
  float v31 = *(float *)(v17 + 36);
  float v32 = *(float *)(v17 + 44);
  float v395 = *(float *)(v17 + 40);
  float v33 = *(float *)(v17 + 48);
  float v399 = *(float *)(v17 + 52);
  float32x2_t v414 = a1[1];
  float v415 = a1;
  float v34 = a1[3].f32[0];
  __asm { FMOV            V27.2S, #1.0 }
  int32x2_t v412 = vrev64_s32((int32x2_t)vdiv_f32(_D27, a1[2]));
  float v413 = 1.0 / v34;
  float v38 = a5[1].f32[0];
  __int16 v39 = *a7;
  v441[1] = &v412;
  __int16 v442 = v39;
  __int16 v443 = 0;
  BOOL v444 = (a1[3].i8[4] & 2 | v39 & 0x80) != 0;
  BOOL v445 = (v39 & 0x40) != 0;
  float32x4_t v452 = 0u;
  long long v453 = 0u;
  *(float32x2_t *)v40.f32 = a2[2];
  v40.i64[1] = a2[3].u32[0];
  float32x4_t v41 = *a4;
  v42.i64[0] = a4[1].i64[0];
  v42.i64[1] = a4[1].u32[2];
  float32x4_t v43 = vnegq_f32(*a4);
  float32x2_t v44 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  float32x4_t v45 = vsubq_f32(v40, v42);
  float32x4_t v46 = v43;
  v46.i32[3] = 0;
  LODWORD(v47) = vmla_f32((float32x2_t)0xBF000000BF000000, v44, v44).u32[0];
  float32x4_t v48 = vmulq_n_f32(v45, v47);
  v48.i32[3] = 0;
  float32x2_t v49 = (float32x2_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
  float32x2_t v50 = (float32x2_t)vext_s8(*(int8x8_t *)v43.f32, (int8x8_t)v49, 4uLL);
  int8x8_t v51 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v43.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL)), v50, *(float32x2_t *)v45.f32);
  *(int8x8_t *)v52.f32 = vext_s8(v51, (int8x8_t)vmls_f32(vmul_f32(v49, *(float32x2_t *)v45.f32), *(float32x2_t *)v43.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)), 4uLL);
  v52.i64[1] = v51.u32[0];
  float32x4_t v53 = vmlaq_laneq_f32(v48, v52, *a4, 3);
  v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
  float32x4_t v54 = *(float32x4_t *)a2->f32;
  v54.i32[3] = 0;
  float32x4_t v55 = vmulq_f32(v54, v46);
  v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
  float32x2_t v56 = (float32x2_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
  int8x8_t v57 = (int8x8_t)vmls_f32(vmul_f32(*a2, v49), *(float32x2_t *)v43.f32, v56);
  *(float32x2_t *)v43.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8((int8x8_t)*a2, (int8x8_t)v56, 4uLL), *(float32x2_t *)v43.f32), v50, *a2);
  *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v43.f32, v57, 4uLL);
  v58.i64[1] = v43.i64[0];
  float32x4_t v59 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v46, *(float32x4_t *)a2->f32, 3), vmulq_laneq_f32(v54, *a4, 3)), v58);
  *(int32x2_t *)v43.f32 = vdup_lane_s32(*(int32x2_t *)v59.f32, 1);
  float32x2_t v60 = (float32x2_t)vdup_laneq_s32((int32x4_t)v59, 2);
  *(float32x2_t *)v54.f32 = vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32);
  float32x4_t v61 = vaddq_f32(v59, v59);
  float32x2_t v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.f32, 1);
  float32x2_t v63 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2->f32, *(int8x16_t *)a2->f32, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL)), *(float32x2_t *)v54.f32);
  *(float32x2_t *)v59.f32 = vmul_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v61.f32);
  *(float32x2_t *)v54.f32 = vmul_lane_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v61.f32, 1);
  *(float32x2_t *)v43.f32 = vmul_n_f32(*(float32x2_t *)v43.f32, v61.f32[0]);
  float32x2_t v64 = vmul_laneq_f32(v60, v61, 2);
  float v65 = v24;
  float32x2_t v66 = vmul_n_f32(v60, v61.f32[0]);
  float v67 = v22;
  float32x2_t v68 = vmul_lane_f32(v60, *(float32x2_t *)v61.f32, 1);
  float32x2_t v69 = (float32x2_t)vdup_laneq_s32((int32x4_t)v61, 2);
  *(float32x2_t *)v61.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.f32, 0), v63, 1);
  float32x2_t v70 = vmul_lane_f32(v62, v63, 1);
  float32x2_t v71 = vmul_lane_f32(v69, v63, 1);
  *(int8x8_t *)&long long v72 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D27, *(float32x2_t *)v54.f32), v64), (int8x8_t)vadd_f32(*(float32x2_t *)v43.f32, v71), 4uLL);
  *((void *)&v72 + 1) = vsub_f32(v66, v70).u32[0];
  float32x2_t v401 = _D27;
  *(float32x2_t *)v59.f32 = vsub_f32(_D27, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.f32, 0));
  *(int8x8_t *)&long long v73 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v43.f32, v71), (int8x8_t)vsub_f32(*(float32x2_t *)v59.f32, v64), 4uLL);
  *((void *)&v73 + 1) = vadd_f32(v68, *(float32x2_t *)v61.f32).u32[0];
  int8x8_t v74 = (int8x8_t)vsub_f32(v68, *(float32x2_t *)v61.f32);
  float32x2_t v75 = *a5;
  *(float32x2_t *)v61.f32 = vneg_f32(*a5);
  *(int8x8_t *)v43.f32 = vext_s8((int8x8_t)vadd_f32(v66, v70), v74, 4uLL);
  uint64_t v475 = v61.i64[0];
  v61.f32[2] = -v38;
  v43.i64[1] = vsub_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v54.f32).u32[0];
  float v476 = -v38;
  float32x4_t v76 = vmulq_n_f32(v61, *(float *)&a8);
  v76.i32[3] = 0;
  float32x4_t v77 = vnegq_f32(v76);
  float32x4_t v78 = v77;
  v78.i32[3] = 0;
  float32x4_t v79 = v41;
  v79.i32[3] = 0;
  v54.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
  float32x2_t v80 = (float32x2_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
  *(float32x2_t *)v61.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v77.f32, *(int8x8_t *)v54.f32, 4uLL), *(float32x2_t *)v41.f32), (float32x2_t)vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)v80, 4uLL), *(float32x2_t *)v77.f32);
  *(int8x8_t *)v77.f32 = vext_s8(*(int8x8_t *)v61.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v77.f32, v80), *(float32x2_t *)v41.f32, *(float32x2_t *)v54.f32), 4uLL);
  v77.i64[1] = v61.u32[0];
  float32x4_t v81 = vmulq_f32(v46, v45);
  v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
  v54.i32[0] = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32).u32[0];
  float32x4_t v82 = vmulq_n_f32(v78, v47);
  v82.i32[3] = 0;
  float32x4_t v83 = vmlaq_n_f32(v53, v46, v54.f32[0]);
  float32x4_t v84 = vmlsq_laneq_f32(v82, v77, v41, 3);
  long long v446 = v72;
  long long v447 = v73;
  v84.i64[1] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u32[0];
  float32x4_t v85 = vmulq_f32(v78, v79);
  v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
  float32x4_t v86 = vmlaq_n_f32(v84, v79, vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32).f32[0]);
  v78.f32[0] = -2.0 * v75.f32[0];
  *(float *)&long long v73 = vmuls_lane_f32(-2.0, v75, 1);
  v85.f32[0] = v38 * -2.0;
  v46.i32[0] = a2[1].i32[0];
  float v87 = a2[1].f32[1];
  v79.f32[0] = (float)(v87 * v87) + -0.5;
  v75.i32[0] = a2->i32[1];
  *(float *)&long long v72 = (float)(*(float *)&v73 * v75.f32[0]) + (float)(a2->f32[0] * v78.f32[0]);
  v54.f32[0] = (float)(v78.f32[0] * v79.f32[0])
             - (float)((float)((float)(v75.f32[0] * v85.f32[0]) - (float)(v46.f32[0] * *(float *)&v73)) * v87);
  v61.f32[0] = (float)(*(float *)&v73 * v79.f32[0])
             - (float)((float)((float)(v46.f32[0] * v78.f32[0]) - (float)(a2->f32[0] * v85.f32[0])) * v87);
  v78.f32[0] = (float)(v85.f32[0] * v79.f32[0])
             - (float)((float)((float)(a2->f32[0] * *(float *)&v73) - (float)(v75.f32[0] * v78.f32[0])) * v87);
  v85.f32[0] = *(float *)&v72 + (float)(v46.f32[0] * v85.f32[0]);
  *(float *)&long long v73 = v54.f32[0] + (float)(a2->f32[0] * v85.f32[0]);
  v79.f32[0] = v61.f32[0] + (float)(v75.f32[0] * v85.f32[0]);
  v85.f32[0] = v78.f32[0] + (float)(v46.f32[0] * v85.f32[0]);
  float v88 = (float)(v28 * v30) + (float)(*(float *)v25.i32 * v31);
  float v89 = (float)(v27 * v30) + (float)(v65 * v31);
  float v90 = (float)(v26 * v30) + (float)(v23.f32[0] * v31);
  v78.f32[0] = v28 * v32;
  float v91 = v27 * v32;
  float v92 = v26 * v32;
  float v93 = v23.f32[0] * v33;
  v75.f32[0] = v18;
  float v94 = v18 * v395;
  float v95 = fabsf(v78.f32[0]) + fabsf(*(float *)v25.i32 * v33);
  float v96 = fabsf(v91) + fabsf(v65 * v33);
  float v97 = fabsf(v92) + fabsf(v93);
  float32x4_t v98 = vaddq_f32(v83, v83);
  v98.i32[3] = 0;
  float32x4_t v448 = v43;
  float32x4_t v449 = v98;
  float32x4_t v450 = v41;
  float32x4_t v451 = v42;
  float32x4_t v99 = vaddq_f32(v86, v86);
  v99.i32[3] = 0;
  float32x4_t v473 = v99;
  unint64_t v474 = vdupq_lane_s32(*(int32x2_t *)&a8, 0).u64[0];
  float v100 = fabsf(v67 * v399);
  float v101 = fabsf(v397 * v399);
  float v102 = fabsf(v75.f32[0] * v399);
  v441[0] = &unk_26E7291E0;
  long long v465 = 0uLL;
  char v454 = 0;
  __int16 v467 = 0;
  uint64_t v470 = 0;
  uint64_t v468 = 0;
  uint64_t v469 = 0;
  float v480 = a9;
  int v466 = -1;
  int v471 = LODWORD(a8);
  int v477 = v73;
  float32x4_t v103 = *(float32x4_t *)(a3 + 4);
  __int32 v478 = v79.i32[0];
  float32x4_t v104 = v103;
  v104.i32[3] = 0;
  __int32 v479 = v85.i32[0];
  float32x4_t v105 = *(float32x4_t *)(a3 + 16);
  if (v103.f32[0] == 1.0 && v103.f32[1] == 1.0) {
    BOOL v29 = v103.f32[2] == 1.0;
  }
  float v106 = v88 + (float)(v67 * v395);
  float v107 = v89 + (float)(v397 * v395);
  float v108 = v90 + v94;
  float v109 = v95 + v100;
  float v110 = v96 + v101;
  float v111 = v97 + v102;
  uint64_t v112 = *(void *)(v17 + 72) + 20 * *(unsigned __int8 *)(v17 + 71);
  v113.i64[0] = *(void *)(v17 + 92);
  v113.i64[1] = *(unsigned int *)(v17 + 100);
  int32x4_t v114 = (int32x4_t)vmulq_f32(v104, v113);
  *(float32x2_t *)v114.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v114, 2), *(float32x2_t *)v114.i8);
  *(float *)v114.i32 = vpmin_f32(*(float32x2_t *)v114.i8, *(float32x2_t *)v114.i8).f32[0];
  *(float32x2_t *)&long long v453 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v114.i32);
  *((float *)&v453 + 2) = 0.025 * *(float *)v114.i32;
  if (v29)
  {
    v115.i32[1] = 0;
    long long v455 = xmmword_23435FD50;
    long long v456 = xmmword_23435FD60;
    long long v457 = xmmword_23435FD80;
    long long v458 = xmmword_23435FD50;
    long long v459 = xmmword_23435FD60;
    long long v460 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v116 = vrecpeq_f32(v104);
    int v117 = 4;
    do
    {
      float32x4_t v116 = vmulq_f32(v116, vrecpsq_f32(v116, v104));
      --v117;
    }
    while (v117);
    *(int32x2_t *)v118.f32 = vdup_lane_s32(*(int32x2_t *)v103.f32, 0);
    v118.i64[1] = v118.u32[0];
    *(int16x4_t *)v118.f32 = vmovn_s32(vceqq_f32(v118, v104));
    if ((~vuzp1_s8(*(int8x8_t *)v118.f32, *(int8x8_t *)v118.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v122 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.f32, 1);
      float32x2_t v123 = (float32x2_t)vdup_laneq_s32((int32x4_t)v105, 2);
      float32x2_t v124 = (float32x2_t)vdup_laneq_s32((int32x4_t)v105, 3);
      float32x4_t v125 = vaddq_f32(v105, v105);
      float32x2_t v126 = vmul_lane_f32(v122, *(float32x2_t *)v125.f32, 1);
      float32x2_t v127 = vmul_laneq_f32(v123, v125, 2);
      float32x2_t v128 = vmul_n_f32(v122, v125.f32[0]);
      float32x2_t v129 = vmul_n_f32(v123, v125.f32[0]);
      float32x2_t v130 = vmul_n_f32(v124, v125.f32[0]);
      float32x2_t v131 = vmul_lane_f32(v123, *(float32x2_t *)v125.f32, 1);
      float32x2_t v132 = vmul_lane_f32(v124, *(float32x2_t *)v125.f32, 1);
      float32x2_t v133 = vmul_laneq_f32(v124, v125, 2);
      float32x2_t v134 = vsub_f32(_D27, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v125.f32), 0));
      float32x2_t v135 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D27, v126), v127), (int8x8_t)vadd_f32(v128, v133), 4uLL);
      int8x8_t v136 = (int8x8_t)vsub_f32(v128, v133);
      *(float32x2_t *)v137.f32 = v135;
      v137.i64[1] = vsub_f32(v129, v132).u32[0];
      int32x2_t v138 = (int32x2_t)vext_s8(v136, (int8x8_t)vsub_f32(v134, v127), 4uLL);
      *(int8x8_t *)v139.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v135, 0), (int8x8_t)v138, 4uLL);
      *(int32x2_t *)v125.f32 = v138;
      v125.i64[1] = vadd_f32(v131, v130).u32[0];
      *(int8x8_t *)v104.f32 = vext_s8((int8x8_t)vadd_f32(v129, v132), (int8x8_t)vsub_f32(v131, v130), 4uLL);
      *(int8x8_t *)v140.f32 = vext_s8((int8x8_t)v135, (int8x8_t)vdup_lane_s32(v138, 1), 4uLL);
      v104.i64[1] = vsub_f32(v134, v126).u32[0];
      v139.i64[1] = vdup_lane_s32(*(int32x2_t *)v104.f32, 0).u32[0];
      v140.i64[1] = vdup_lane_s32(*(int32x2_t *)v104.f32, 1).u32[0];
      *(int8x8_t *)v141.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v137.u32[2], 0), *(int8x8_t *)&v125.u32[2], 4uLL);
      v141.i64[1] = vdup_lane_s32(*(int32x2_t *)&v104.u32[2], 0).u32[0];
      float32x4_t v142 = vmulq_n_f32(v139, v103.f32[0]);
      v142.i32[3] = 0;
      float32x4_t v143 = vmulq_lane_f32(v140, *(float32x2_t *)v103.f32, 1);
      v143.i32[3] = 0;
      float32x4_t v144 = vmulq_laneq_f32(v141, v103, 2);
      v144.i32[3] = 0;
      float32x4_t v145 = vmulq_n_f32(v142, v135.f32[0]);
      v145.i32[3] = 0;
      float32x4_t v146 = vmulq_lane_f32(v143, v135, 1);
      v146.i32[3] = 0;
      float32x4_t v147 = vmulq_laneq_f32(v144, v137, 2);
      v147.i32[3] = 0;
      float32x4_t v119 = vaddq_f32(v147, vaddq_f32(v145, v146));
      float32x4_t v148 = vmulq_n_f32(v142, v125.f32[0]);
      v148.i32[3] = 0;
      float32x4_t v149 = vmulq_lane_f32(v143, *(float32x2_t *)v125.f32, 1);
      v149.i32[3] = 0;
      float32x4_t v150 = vmulq_laneq_f32(v144, v125, 2);
      v150.i32[3] = 0;
      float32x4_t v105 = vaddq_f32(v150, vaddq_f32(v148, v149));
      float32x4_t v151 = vmulq_n_f32(v142, v104.f32[0]);
      v151.i32[3] = 0;
      float32x4_t v152 = vmulq_lane_f32(v143, *(float32x2_t *)v104.f32, 1);
      v152.i32[3] = 0;
      float32x4_t v153 = vmulq_laneq_f32(v144, v104, 2);
      v153.i32[3] = 0;
      float32x4_t v120 = vaddq_f32(v153, vaddq_f32(v151, v152));
      long long v455 = (__int128)v119;
      long long v456 = (__int128)v105;
      float32x4_t v154 = vmulq_n_f32(v139, v116.f32[0]);
      v154.i32[3] = 0;
      float32x4_t v155 = vmulq_lane_f32(v140, *(float32x2_t *)v116.f32, 1);
      v155.i32[3] = 0;
      float32x4_t v156 = vmulq_laneq_f32(v141, v116, 2);
      v156.i32[3] = 0;
      float32x4_t v157 = vmulq_n_f32(v154, v137.f32[0]);
      v157.i32[3] = 0;
      float32x4_t v158 = vmulq_lane_f32(v155, *(float32x2_t *)v137.f32, 1);
      v158.i32[3] = 0;
      float32x4_t v159 = vmulq_laneq_f32(v156, v137, 2);
      v159.i32[3] = 0;
      float32x4_t v9 = vaddq_f32(v159, vaddq_f32(v157, v158));
      float32x4_t v160 = vmulq_n_f32(v154, v125.f32[0]);
      v160.i32[3] = 0;
      float32x4_t v161 = vmulq_lane_f32(v155, *(float32x2_t *)v125.f32, 1);
      v161.i32[3] = 0;
      float32x4_t v162 = vmulq_laneq_f32(v156, v125, 2);
      v162.i32[3] = 0;
      float32x4_t v163 = vmulq_n_f32(v154, v104.f32[0]);
      v163.i32[3] = 0;
      float32x4_t v164 = vmulq_lane_f32(v155, *(float32x2_t *)v104.f32, 1);
      v164.i32[3] = 0;
      float32x4_t v23 = vaddq_f32(v162, vaddq_f32(v160, v161));
      float32x4_t v165 = vmulq_laneq_f32(v156, v104, 2);
      v165.i32[3] = 0;
      float32x4_t v121 = vaddq_f32(v165, vaddq_f32(v163, v164));
    }
    else
    {
      v116.i32[3] = 0;
      float32x4_t v119 = vmulq_f32(v104, (float32x4_t)xmmword_23435FD50);
      float32x4_t v105 = vmulq_f32(v104, (float32x4_t)xmmword_23435FD60);
      float32x4_t v120 = vmulq_f32(v104, (float32x4_t)xmmword_23435FD80);
      long long v455 = (__int128)v119;
      long long v456 = (__int128)v105;
      float32x4_t v9 = vmulq_f32(v116, (float32x4_t)xmmword_23435FD50);
      float32x4_t v23 = vmulq_f32(v116, (float32x4_t)xmmword_23435FD60);
      float32x4_t v121 = vmulq_f32(v116, (float32x4_t)xmmword_23435FD80);
    }
    long long v458 = (__int128)v9;
    long long v459 = (__int128)v23;
    long long v460 = (__int128)v121;
    float32x4_t v166 = vmulq_f32(v119, (float32x4_t)0);
    v166.i32[3] = 0;
    float32x4_t v167 = vmulq_f32(v105, (float32x4_t)0);
    v167.i32[3] = 0;
    float32x4_t v168 = vmulq_f32(v120, (float32x4_t)0);
    v168.i32[3] = 0;
    float32x4_t v115 = vaddq_f32(v167, v166);
    long long v457 = (__int128)v120;
    float32x4_t v452 = vaddq_f32(v168, v115);
  }
  uint64_t v388 = (uint64_t)a1;
  v115.f32[0] = v106 - v109;
  float v169 = v107 - v110;
  v104.f32[0] = v108 - v111;
  float v170 = v106 + v109;
  float v171 = v107 + v110;
  float v172 = v108 + v111;
  uint64_t v463 = v112;
  char v464 = *(unsigned char *)(v17 + 70);
  float32x4_t v452 = 0uLL;
  uint64_t v173 = *(void *)(v17 + 80);
  uint64_t v462 = v173;
  uint64_t v461 = v17 + 32;
  if (v173)
  {
    _X8 = *(void *)(v173 + 24);
    __asm
    {
      PRFM            #0, [X8]
      PRFM            #0, [X8,#0x80]
    }
    _X8 = *(void *)(v173 + 32);
    __asm { PRFM            #0, [X8] }
  }
  float v179 = (float)((float)(v115.f32[0] + v170) * 0.5) + (float)((float)(v115.f32[0] + v170) * 0.5);
  float v180 = (float)((float)(v169 + v171) * 0.5) + (float)((float)(v169 + v171) * 0.5);
  v105.f32[0] = (float)((float)(v104.f32[0] + v172) * 0.5) + (float)((float)(v104.f32[0] + v172) * 0.5);
  v23.i32[0] = a4->i32[2];
  v9.i32[0] = a4->i32[3];
  float v181 = (float)(v9.f32[0] * v9.f32[0]) + -0.5;
  float v182 = a4->f32[0];
  float v183 = a4->f32[1];
  float v184 = (float)((float)(v180 * v183) + (float)(a4->f32[0] * v179)) + (float)(v23.f32[0] * v105.f32[0]);
  float v185 = (float)((float)(v9.f32[0] * (float)((float)(v183 * v105.f32[0]) - (float)(v23.f32[0] * v180)))
               + (float)(v179 * v181))
       + (float)(a4->f32[0] * v184);
  float v186 = (float)((float)(v9.f32[0] * (float)((float)(v23.f32[0] * v179) - (float)(a4->f32[0] * v105.f32[0])))
               + (float)(v180 * v181))
       + (float)(v183 * v184);
  float v187 = (float)((float)(v9.f32[0] * (float)((float)(a4->f32[0] * v180) - (float)(v183 * v179)))
               + (float)(v105.f32[0] * v181))
       + (float)(v23.f32[0] * v184);
  float v188 = a4[1].f32[0] + v185;
  v105.f32[0] = a4[1].f32[1] + v186;
  float v189 = a4[1].f32[2] + v187;
  float v190 = v183 + v183;
  float v191 = v23.f32[0] + v23.f32[0];
  float v192 = v183 * (float)(v183 + v183);
  float v193 = v23.f32[0] * (float)(v23.f32[0] + v23.f32[0]);
  float v194 = (float)(v182 + v182) * v183;
  float v195 = (float)(v182 + v182) * v23.f32[0];
  float v196 = v9.f32[0] * (float)(v182 + v182);
  v23.f32[0] = v190 * v23.f32[0];
  float v197 = v9.f32[0] * v190;
  v9.f32[0] = v9.f32[0] * v191;
  float v198 = 1.0 - (float)(v182 * (float)(v182 + v182));
  float v199 = (float)(v170 - v115.f32[0]) * 0.5;
  float v200 = (float)(v171 - v169) * 0.5;
  float v201 = (float)(v172 - v104.f32[0]) * 0.5;
  v115.f32[0] = fabsf(v201 * (float)(v195 + v197))
              + (float)(fabsf(v199 * (float)((float)(1.0 - v192) - v193)) + fabsf(v200 * (float)(v194 - v9.f32[0])));
  float v202 = fabsf(v201 * (float)(v23.f32[0] - v196))
       + (float)(fabsf(v199 * (float)(v194 + v9.f32[0])) + fabsf(v200 * (float)(v198 - v193)));
  float v203 = fabsf(v201 * (float)(v198 - v192))
       + (float)(fabsf(v199 * (float)(v195 - v197)) + fabsf(v200 * (float)(v196 + v23.f32[0])));
  float v204 = v188 - v115.f32[0];
  float v205 = v105.f32[0] - v202;
  float v206 = v189 - v203;
  float v207 = v188 + v115.f32[0];
  float v208 = v105.f32[0] + v202;
  float v209 = v189 + v203;
  float v210 = (float)((float)((float)(v188 + v115.f32[0]) - (float)(v188 - v115.f32[0])) * 0.5) + a9;
  float v211 = (float)((float)((float)(v105.f32[0] + v202) - (float)(v105.f32[0] - v202)) * 0.5) + a9;
  float v212 = (float)((float)(v209 - v206) * 0.5) + a9;
  float v213 = a2[2].f32[0] * -2.0;
  float v214 = a2[2].f32[1] * -2.0;
  float v215 = a2[3].f32[0] * -2.0;
  float v216 = a2[1].f32[0];
  v104.i32[0] = a2[1].i32[1];
  float v217 = (float)(v104.f32[0] * v104.f32[0]) + -0.5;
  v115.i32[0] = a2->i32[0];
  v105.i32[0] = a2->i32[1];
  float v218 = (float)((float)(v214 * v105.f32[0]) + (float)(a2->f32[0] * v213)) + (float)(v216 * v215);
  *(float *)v25.i32 = -v216;
  v23.f32[0] = -a2->f32[0];
  v9.f32[0] = -v105.f32[0];
  float v219 = (float)((float)(v204 + v207) * 0.5) + (float)((float)(v204 + v207) * 0.5);
  float v220 = (float)((float)(v205 + v208) * 0.5) + (float)((float)(v205 + v208) * 0.5);
  float v221 = (float)((float)(v206 + v209) * 0.5) + (float)((float)(v206 + v209) * 0.5);
  float v222 = (float)((float)-(float)(v105.f32[0] * v220) - (float)(a2->f32[0] * v219)) - (float)(v216 * v221);
  float v223 = (float)((float)((float)(v213 * v217)
                       - (float)((float)((float)(v105.f32[0] * v215) - (float)(v216 * v214)) * v104.f32[0]))
               + (float)(a2->f32[0] * v218))
       + (float)((float)((float)(v104.f32[0] * (float)((float)(v216 * v220) - (float)(v105.f32[0] * v221)))
                       + (float)(v219 * v217))
               - (float)(a2->f32[0] * v222));
  float v224 = (float)((float)((float)(v214 * v217)
                       - (float)((float)((float)(v216 * v213) - (float)(a2->f32[0] * v215)) * v104.f32[0]))
               + (float)(v105.f32[0] * v218))
       + (float)((float)((float)(v104.f32[0] * (float)((float)(a2->f32[0] * v221) - (float)(v216 * v219)))
                       + (float)(v220 * v217))
               - (float)(v105.f32[0] * v222));
  float v225 = (float)((float)((float)(v215 * v217)
                       - (float)((float)((float)(a2->f32[0] * v214) - (float)(v105.f32[0] * v213)) * v104.f32[0]))
               + (float)(v216 * v218))
       + (float)((float)((float)(v104.f32[0] * (float)((float)(v105.f32[0] * v219) - (float)(a2->f32[0] * v220)))
                       + (float)(v221 * v217))
               - (float)(v216 * v222));
  unint64_t v410 = __PAIR64__(LODWORD(v224), LODWORD(v223));
  float v411 = v225;
  float v226 = a5->f32[0] + a5->f32[0];
  float v227 = a5->f32[1] + a5->f32[1];
  float v228 = a5[1].f32[0] + a5[1].f32[0];
  float v229 = (float)((float)-(float)(v105.f32[0] * v227) - (float)(v115.f32[0] * v226)) - (float)(v216 * v228);
  float v230 = (float)((float)(v104.f32[0] * (float)((float)(v216 * v227) - (float)(v105.f32[0] * v228)))
               + (float)(v226 * v217))
       - (float)(v115.f32[0] * v229);
  float v231 = (float)((float)(v104.f32[0] * (float)((float)(v115.f32[0] * v228) - (float)(v216 * v226)))
               + (float)(v227 * v217))
       - (float)(v105.f32[0] * v229);
  float v232 = (float)((float)(v104.f32[0] * (float)((float)(v105.f32[0] * v226) - (float)(v115.f32[0] * v227)))
               + (float)(v228 * v217))
       - (float)(v216 * v229);
  v408.f32[0] = v230;
  v408.f32[1] = v231;
  float v409 = v232;
  float32x2_t v233 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.f32, 0);
  v23.f32[0] = v23.f32[0] - v115.f32[0];
  float32x2_t v234 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.f32, 0);
  v105.f32[0] = (float)-v105.f32[0] - v105.f32[0];
  float v235 = (float)-v216 - v216;
  v115.f32[0] = -(float)(v115.f32[0] * v23.f32[0]);
  float32x2_t v236 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.f32, 0), v105.f32[0]);
  float32x2_t v237 = vmul_n_f32((float32x2_t)vdup_lane_s32(v25, 0), v235);
  float32x2_t v238 = vmul_n_f32(v234, v9.f32[0]);
  float32x2_t v239 = vmul_n_f32(v234, *(float *)v25.i32);
  float32x2_t v240 = vmul_n_f32(v233, v23.f32[0]);
  float32x2_t v241 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.f32, 0), *(float *)v25.i32);
  float32x2_t v242 = vmul_n_f32(v233, v105.f32[0]);
  float32x2_t v243 = vmul_n_f32(v233, v235);
  float32x2_t v244 = vsub_f32(v401, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 0));
  float v245 = vsub_f32(v239, v242).f32[0];
  float v246 = vadd_f32(v240, v241).f32[0];
  v242.f32[0] = vmuls_lane_f32(v212, vadd_f32(v239, v242), 1);
  v241.f32[0] = v212 * vsub_f32(v241, v240).f32[0];
  float v247 = v212 * vsub_f32(v244, v236).f32[0];
  v236.f32[0] = fabsf(v242.f32[0])
              + (float)(fabsf(v210 * (float)((float)(1.0 - v236.f32[1]) - v237.f32[1]))
                      + fabsf(vmuls_lane_f32(v211, vsub_f32(v238, v243), 1)));
  float v248 = fabsf(v241.f32[0])
       + (float)(fabsf(v210 * vadd_f32(v238, v243).f32[0]) + fabsf(v211 * vsub_f32(v244, v237).f32[0]));
  float v249 = fabsf(v247) + (float)(fabsf(v210 * v245) + fabsf(v211 * v246));
  v406.f32[0] = (float)((float)(v223 + v236.f32[0]) + (float)(v236.f32[0] - v223)) * 0.5;
  v406.f32[1] = (float)((float)(v224 + v248) + (float)(v248 - v224)) * 0.5;
  float v407 = (float)((float)(v225 + v249) + (float)(v249 - v225)) * 0.5;
  HeightFieldTraceSegmentSweepHelper::HeightFieldTraceSegmentSweepHelper((uint64_t)v403, (uint64_t)&v412, &v406);
  uint64_t v250 = v403[0];
  uint64_t v251 = (float *)v403[1];
  uint64_t v440 = 0;
  if (physx::Gu::intersectRayAABB2(&v404, &v405, (float32x2_t *)&v410, &v408, (float *)&v440 + 1, (float *)&v440, *(float *)&a8))
  {
    unsigned int v252 = 0;
    uint64_t v253 = *(void *)(v250 + 16);
    v422[0] = 0;
    uint64_t v423 = v250;
    uint64_t v424 = v253;
    int v439 = 0;
    float v254 = v223 + (float)(v230 * *(float *)&a8);
    float v255 = v224 + (float)(v231 * *(float *)&a8);
    if (v255 >= v224) {
      float v256 = v224;
    }
    else {
      float v256 = v224 + (float)(v231 * *(float *)&a8);
    }
    float v257 = v251[1];
    float v258 = *(float *)(v250 + 4);
    float v259 = (float)(v256 - v257) * v258;
    if (v255 <= v224) {
      float v255 = v224;
    }
    float v428 = v259;
    float v429 = (float)(v255 + v257) * v258;
    if (v254 >= v223) {
      float v260 = v223;
    }
    else {
      float v260 = v223 + (float)(v230 * *(float *)&a8);
    }
    float v261 = *v251;
    float v262 = v260 - *v251;
    float v263 = *(float *)v250;
    float v264 = *(float *)v250 * v262;
    int v265 = *(_DWORD *)(v253 + 56);
    if (v264 >= 0.0)
    {
      unsigned int v252 = v265 - 2;
      if (v264 <= (float)(v265 - 2)) {
        unsigned int v252 = vcvtms_u32_f32(v264);
      }
    }
    float v266 = v225 + (float)(v232 * *(float *)&a8);
    signed int v430 = v252;
    if (v254 <= v223) {
      float v254 = v223;
    }
    float v267 = v263 * (float)(v254 + v261);
    if (v267 >= 0.0)
    {
      unsigned int v268 = v265 - 1;
      if (v267 <= (float)(v265 - 1)) {
        unsigned int v268 = vcvtps_u32_f32(v267);
      }
    }
    else
    {
      unsigned int v268 = 0;
    }
    signed int v431 = v268;
    if (v266 >= v225) {
      float v269 = v225;
    }
    else {
      float v269 = v225 + (float)(v232 * *(float *)&a8);
    }
    float v270 = v251[2];
    float v271 = *(float *)(v250 + 8);
    float v272 = v271 * (float)(v269 - v270);
    int v273 = *(_DWORD *)(v253 + 60);
    if (v272 >= 0.0)
    {
      unsigned int v274 = v273 - 2;
      if (v272 <= (float)(v273 - 2)) {
        unsigned int v274 = vcvtms_u32_f32(v272);
      }
    }
    else
    {
      unsigned int v274 = 0;
    }
    signed int v432 = v274;
    if (v266 <= v225) {
      float v266 = v225;
    }
    float v275 = v271 * (float)(v266 + v270);
    int v276 = v273 - 1;
    if (v275 >= 0.0)
    {
      unsigned int v277 = v273 - 1;
      if (v275 <= (float)v276) {
        unsigned int v277 = vcvtps_u32_f32(v275);
      }
    }
    else
    {
      unsigned int v277 = 0;
    }
    signed int v433 = v277;
    float v278 = v261 * v263;
    float v279 = ceilf(v261 * v263);
    float v280 = v270 * v271;
    float v281 = ceilf(v270 * v271);
    unsigned int v426 = vcvtps_s32_f32(v278) + 1;
    unsigned int v427 = vcvtps_s32_f32(v280) + 1;
    float v282 = (float)(v223 + (float)(v230 * *((float *)&v440 + 1))) * v263;
    float v283 = 0.0000001 - v279;
    if (v282 > (float)(0.0000001 - v279)) {
      float v283 = (float)(v223 + (float)(v230 * *((float *)&v440 + 1))) * v263;
    }
    if (v283 >= (float)(v279 + (float)((float)(v265 - 1) * 1.0))) {
      float v284 = v279 + (float)((float)(v265 - 1) * 1.0);
    }
    else {
      float v284 = v283;
    }
    float v285 = (float)(v225 + (float)(v232 * *((float *)&v440 + 1))) * v271;
    float v286 = 0.0000001 - v281;
    if (v285 > (float)(0.0000001 - v281)) {
      float v286 = (float)(v225 + (float)(v232 * *((float *)&v440 + 1))) * v271;
    }
    float v287 = v281 + (float)((float)v276 * 1.0);
    if (v286 < v287) {
      float v287 = v286;
    }
    float v288 = (float)(v223 + (float)(v230 * *(float *)&v440)) * v263;
    float v289 = (float)(v225 + (float)(v232 * *(float *)&v440)) * v271;
    if ((float)(v288 - v282) < 0.0) {
      float v290 = -1.0;
    }
    else {
      float v290 = 1.0;
    }
    if ((float)(v289 - v285) < 0.0) {
      float v291 = -1.0;
    }
    else {
      float v291 = 1.0;
    }
    if (vabds_f32(v288, v282) >= 1.0e-10) {
      float v292 = v288 - v282;
    }
    else {
      float v292 = v290 * 1.0e-10;
    }
    if (vabds_f32(v289, v285) >= 1.0e-10) {
      float v293 = v289 - v285;
    }
    else {
      float v293 = v291 * 1.0e-10;
    }
    float v294 = floorf(v284);
    float v295 = ceilf(v284);
    float v296 = floorf(v287);
    float v297 = ceilf(v287);
    if (v293 <= 0.0) {
      float v298 = v297;
    }
    else {
      float v298 = v296;
    }
    if (v292 <= 0.0) {
      float v299 = v295;
    }
    else {
      float v299 = v294;
    }
    if (v292 <= 0.0)
    {
      if (v294 == v284) {
        float v300 = v294 + -1.0;
      }
      else {
        float v300 = v294;
      }
    }
    else if (v295 == v284)
    {
      float v300 = v295 + 1.0;
    }
    else
    {
      float v300 = v295;
    }
    if (v293 <= 0.0)
    {
      if (v296 == v287) {
        float v301 = v296 + -1.0;
      }
      else {
        float v301 = v296;
      }
    }
    else if (v297 == v287)
    {
      float v301 = v297 + 1.0;
    }
    else
    {
      float v301 = v297;
    }
    float v302 = (float)(v300 - v282) / v292;
    float v303 = (float)(v301 - v285) / v293;
    if (v302 < 0.0) {
      float v302 = fabsf(0.0000001 / v292);
    }
    float v386 = a5;
    uint64_t v387 = a6;
    int v304 = (int)v299;
    int v305 = (int)v298;
    int v398 = (int)v291;
    int v400 = (int)v290;
    if (v303 < 0.0) {
      float v303 = fabsf(0.0000001 / v293);
    }
    int v396 = 0;
    float v393 = 1.0 / fabsf(v292);
    float v306 = fabsf(v293);
    if (v400 >= 1) {
      int v307 = 0;
    }
    else {
      int v307 = -1;
    }
    if (v398 >= 1) {
      int v308 = 0;
    }
    else {
      int v308 = -1;
    }
    int v389 = v308;
    int v390 = v307;
    float v309 = 0.0 - v281;
    int v391 = v273;
    float v310 = v281 + (float)v273;
    float v311 = 0.0 - v279;
    float v312 = v279 + (float)v265;
    float v392 = 1.0 / v306;
    while (1)
    {
      if (v302 >= v303) {
        float v313 = v303;
      }
      else {
        float v313 = v302;
      }
      if (!v422[0])
      {
        v422[0] = 1;
        float v425 = v441;
        int v434 = v391;
        int v435 = v390;
        long long v438 = xmmword_234422A50;
        int v436 = v389;
        LODWORD(v437) = v304 - v426;
        unsigned int v316 = v426 + v304;
        DWORD1(v437) = v426 + v304;
        DWORD2(v437) = v305 - v427;
        int v317 = v427 + v305;
        HIDWORD(v437) = v427 + v305;
        if ((int)(v304 - v426) <= (int)(v426 + v304))
        {
          signed int v318 = v304 - v426 + v390;
          unsigned int v319 = (v400 > 0) + v304 - v426;
          int v320 = v389;
          int v321 = v390;
          do
          {
            if (v318 >= v430)
            {
              if (v318 >= v431) {
                break;
              }
              if (SDWORD2(v437) <= v317)
              {
                int v322 = v320 + DWORD2(v437) - 1;
                do
                {
                  int v323 = v322 + 1;
                  if (v322 + 1 >= v432)
                  {
                    if (v323 >= v433) {
                      break;
                    }
                    int v324 = v322 + v318 * v434;
                    uint64_t v325 = (v324 + 1);
                    uint64_t v326 = *(void *)(v424 + 80);
                    float v327 = (float)*(__int16 *)(v326 + 4 * v325);
                    float v328 = (float)*(__int16 *)(v326 + 4 * (v324 + 2));
                    int v329 = v322 + v319 * v434;
                    float v330 = (float)*(__int16 *)(v326 + 4 * (v329 + 1));
                    float v331 = (float)*(__int16 *)(v326 + 4 * (v329 + 2));
                    if (v429 >= v327 || v429 >= v328 || v429 >= v330 || v429 >= v331)
                    {
                      BOOL v335 = v428 <= v327 || v428 <= v328;
                      BOOL v336 = v335 || v428 <= v330;
                      if (v336 || v428 <= v331)
                      {
                        if ((~*(unsigned __int8 *)(v326 + 4 * v325 + 2) & 0x7F) != 0)
                        {
                          if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v422, 2 * (int)v325))goto LABEL_254; {
                          uint64_t v326 = *(void *)(v424 + 80);
                          }
                        }
                        if ((~*(unsigned __int8 *)(v326 + 4 * v325 + 3) & 0x7F) != 0
                          && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v422, (2 * v325) | 1))
                        {
                          goto LABEL_254;
                        }
                      }
                    }
                  }
                  int v317 = HIDWORD(v437);
                  int v320 = v436;
                  int v322 = v323;
                }
                while (v323 < v436 + HIDWORD(v437));
                unsigned int v316 = DWORD1(v437);
                int v321 = v435;
              }
            }
            ++v319;
            BOOL v335 = v318++ < (int)(v316 + v321);
          }
          while (v335);
          if (v439)
          {
            if (!(*(unsigned int (**)(void *))(*v425 + 16))(v425)) {
              goto LABEL_254;
            }
            int v439 = 0;
          }
        }
        goto LABEL_240;
      }
      int v314 = v304 - v426;
      LODWORD(v438) = v304 - v426;
      DWORD1(v438) = v426 + v304;
      int v315 = v305 - v427;
      DWORD2(v438) = v305 - v427;
      HIDWORD(v438) = v427 + v305;
      if (v304 - v426 == v437)
      {
        if (v315 == DWORD2(v437))
        {
          if ((int)v17 <= (int)v251)
          {
            if (v396) {
              goto LABEL_163;
            }
            goto LABEL_200;
          }
        }
        else
        {
          if (v315 >= SDWORD2(v437)) {
            LODWORD(a5) = v427 + v305;
          }
          else {
            LODWORD(a5) = v305 - v427;
          }
          int v396 = 1;
          LODWORD(v17) = v304 - v426;
          LODWORD(v251) = v426 + v304;
          if (v314 <= (int)(v426 + v304))
          {
LABEL_163:
            signed int v338 = v436 + a5;
            if (v436 + (int)a5 >= v432 && v338 < v433)
            {
              signed int v340 = v435 + v17;
              while (v340 < v431)
              {
                if (v340 >= v430)
                {
                  uint64_t v341 = (v338 + v434 * v340);
                  uint64_t v342 = *(void *)(v424 + 80);
                  float v343 = (float)*(__int16 *)(v342 + 4 * v341);
                  float v344 = (float)*(__int16 *)(v342 + 4 * (v341 + 1));
                  float v345 = (float)*(__int16 *)(v342 + 4 * (v341 + v434));
                  float v346 = (float)*(__int16 *)(v342 + 4 * (v341 + v434 + 1));
                  BOOL v347 = v429 < v343 && v429 < v344;
                  BOOL v348 = v347 && v429 < v345;
                  if (!v348 || v429 >= v346)
                  {
                    BOOL v350 = v428 <= v343 || v428 <= v344;
                    BOOL v351 = v350 || v428 <= v345;
                    if (v351 || v428 <= v346)
                    {
                      if ((~*(unsigned __int8 *)(v342 + 4 * v341 + 2) & 0x7F) != 0)
                      {
                        if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v422, 2 * (int)v341))goto LABEL_254; {
                        uint64_t v342 = *(void *)(v424 + 80);
                        }
                      }
                      if ((~*(unsigned __int8 *)(v342 + 4 * v341 + 3) & 0x7F) != 0
                        && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v422, (2 * v341) | 1))
                      {
                        goto LABEL_254;
                      }
                    }
                  }
                }
                BOOL v335 = v340++ < v435 + (int)v251;
                if (!v335) {
                  break;
                }
              }
            }
          }
        }
      }
      else
      {
        if (v314 >= (int)v437) {
          LODWORD(a5) = v426 + v304;
        }
        else {
          LODWORD(a5) = v304 - v426;
        }
        if (v315 <= (int)(v427 + v305))
        {
          LODWORD(v17) = v305 - v427;
          LODWORD(v251) = v427 + v305;
LABEL_200:
          signed int v353 = v435 + a5;
          if (v435 + (int)a5 >= v430 && v353 < v431)
          {
            int v355 = v436;
            int v356 = v436 - 1;
            int v385 = (int)a5;
            int v357 = a5 + v435 + 1;
            do
            {
              if ((int)v17 + v355 >= v433) {
                break;
              }
              if ((int)v17 + v355 >= v432)
              {
                uint64_t v358 = (v17 + v355 + v434 * v353);
                uint64_t v359 = *(void *)(v424 + 80);
                float v360 = (float)*(__int16 *)(v359 + 4 * v358);
                float v361 = (float)*(__int16 *)(v359 + 4 * (v358 + 1));
                float v362 = (float)*(__int16 *)(v359 + 4 * (v17 + v355 + v357 * v434));
                float v363 = (float)*(__int16 *)(v359 + 4 * (v17 + v355 + v357 * v434 + 1));
                BOOL v364 = v429 < v360 && v429 < v361;
                BOOL v365 = v364 && v429 < v362;
                if (!v365 || v429 >= v363)
                {
                  BOOL v367 = v428 <= v360 || v428 <= v361;
                  BOOL v368 = v367 || v428 <= v362;
                  if (v368 || v428 <= v363)
                  {
                    if ((~*(unsigned __int8 *)(v359 + 4 * v358 + 2) & 0x7F) != 0)
                    {
                      if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v422, 2 * (int)v358))goto LABEL_254; {
                      uint64_t v359 = *(void *)(v424 + 80);
                      }
                    }
                    if ((~*(unsigned __int8 *)(v359 + 4 * v358 + 3) & 0x7F) != 0
                      && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v422, (2 * v358) | 1))
                    {
                      goto LABEL_254;
                    }
                  }
                }
              }
              ++v356;
              ++v355;
            }
            while ((int)v17 + v356 < v436 + (int)v251);
            int v396 = 0;
            LODWORD(a5) = v385;
          }
          else
          {
            int v396 = 0;
          }
          goto LABEL_236;
        }
        int v396 = 0;
        LODWORD(v251) = v427 + v305;
        LODWORD(v17) = v305 - v427;
      }
LABEL_236:
      if (v439)
      {
        if (!(*(unsigned int (**)(void *))(*v425 + 16))(v425)) {
          goto LABEL_254;
        }
        int v439 = 0;
      }
      long long v437 = v438;
LABEL_240:
      if (v302 >= v303)
      {
        v305 += v398;
        float v372 = (float)(v305 + v398);
        if (v309 > v372 || v310 <= v372)
        {
LABEL_254:
          a5 = v386;
          a6 = v387;
          break;
        }
        float v303 = v392 + v303;
      }
      else
      {
        v304 += v400;
        float v370 = (float)(v304 + v400);
        if (v311 > v370 || v312 <= v370) {
          goto LABEL_254;
        }
        float v302 = v393 + v302;
      }
      if (v313 >= 1.0001) {
        goto LABEL_254;
      }
    }
  }
  int v374 = v443;
  if ((_BYTE)v443)
  {
    if (HIBYTE(v443))
    {
      if ((v442 & 0x200) == 0)
      {
        *(_DWORD *)(a6 + 16) = v466;
        *(_WORD *)(a6 + 20) = 1026;
        float v375 = -a5[1].f32[0];
        *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
        *(float *)(a6 + 44) = v375;
        *(_DWORD *)(a6 + 48) = 0;
        return v374 != 0;
      }
      char v383 = physx::Gu::computeConvex_HeightFieldMTD(v388);
      *(_DWORD *)(a6 + 16) = v466;
      *(_WORD *)(a6 + 20) = 1026;
      if (v383)
      {
        *(_WORD *)(a6 + 20) = 1027;
        return v374 != 0;
      }
      *(_DWORD *)(a6 + 48) = 0;
      float v382 = -a5[1].f32[0];
      *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
    }
    else
    {
      *(_OWORD *)a6 = v465;
      *(_DWORD *)(a6 + 16) = v466;
      *(_WORD *)(a6 + 20) = v467;
      *(void *)(a6 + 24) = v468;
      float v377 = *((float *)&v469 + 1);
      int v376 = v469;
      uint64_t v378 = v470;
      int v379 = v471;
      *(_DWORD *)(a6 + 52) = v472;
      *(_DWORD *)(a6 + 32) = v376;
      *(float *)(a6 + 36) = -v377;
      *(float *)(a6 + 40) = -*(float *)&v378;
      *(float *)(a6 + 44) = -*((float *)&v378 + 1);
      *(_DWORD *)(a6 + 48) = v379;
      float v380 = sqrtf((float)((float)(*(float *)&v378 * *(float *)&v378) + (float)(v377 * v377))+ (float)(*((float *)&v378 + 1) * *((float *)&v378 + 1)));
      if (v380 <= 0.0) {
        return v374 != 0;
      }
      float v381 = 1.0 / v380;
      *(float *)(a6 + 36) = v381 * (float)-v377;
      *(float *)(a6 + 40) = v381 * (float)-*(float *)&v378;
      float v382 = v381 * (float)-*((float *)&v378 + 1);
    }
    *(float *)(a6 + 44) = v382;
  }
  return v374 != 0;
}

BOOL sweepBox_HeightFieldGeom(float32x2_t *a1, uint64_t a2, float a3, float a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, float *a12, uint64_t a13, float32x2_t *a14, uint64_t a15, __int16 *a16)
{
  uint64_t v19 = a15;
  BOOL v20 = a14;
  float v21 = a12;
  uint64_t v24 = (uint64_t)a1;
  v25.i32[0] = *(_DWORD *)(a13 + 48);
  float v26 = *(float *)(a13 + 52);
  v16.i32[0] = *(_DWORD *)(a13 + 56);
  float v27 = (float)((float)((float)(fabsf(*(float *)(a13 + 12)) * v26) + (float)(fabsf(*(float *)a13) * v25.f32[0]))
              + (float)(fabsf(*(float *)(a13 + 24)) * *(float *)v16.i32))
      + a4;
  float v28 = (float)((float)((float)(fabsf(*(float *)(a13 + 16)) * v26) + (float)(fabsf(*(float *)(a13 + 4)) * v25.f32[0]))
              + (float)(fabsf(*(float *)(a13 + 28)) * *(float *)v16.i32))
      + a4;
  float v29 = (float)((float)((float)(fabsf(*(float *)(a13 + 20)) * v26) + (float)(fabsf(*(float *)(a13 + 8)) * v25.f32[0]))
              + (float)(fabsf(*(float *)(a13 + 32)) * *(float *)v16.i32))
      + a4;
  float v30 = a12[4] * -2.0;
  float v31 = a12[5] * -2.0;
  float v32 = a12[6] * -2.0;
  float v33 = a12[2];
  float v34 = a12[3];
  float v35 = (float)(v34 * v34) + -0.5;
  float v36 = *a12;
  float v37 = a12[1];
  *(float *)v17.i32 = (float)((float)(v31 * v37) + (float)(*a12 * v30)) + (float)(v33 * v32);
  *(float *)&unsigned int v38 = (float)((float)(v30 * v35) - (float)((float)((float)(v37 * v32) - (float)(v33 * v31)) * v34))
                 + (float)(*a12 * *(float *)v17.i32);
  *(float *)&long long v39 = -*a12;
  *(float *)&unsigned int v40 = (float)((float)(v31 * v35) - (float)((float)((float)(v33 * v30) - (float)(*a12 * v32)) * v34))
                 + (float)(v37 * *(float *)v17.i32);
  *((float *)&v39 + 1) = -v37;
  *((float *)&v39 + 2) = -v33;
  *(float *)&unsigned int v41 = (float)((float)(v32 * v35) - (float)((float)((float)(*a12 * v31) - (float)(v37 * v30)) * v34))
                 + (float)(v33 * *(float *)v17.i32);
  *((float *)&v39 + 3) = v34;
  *(void *)&long long v42 = __PAIR64__(v40, v38);
  *((void *)&v42 + 1) = v41;
  v296[1] = v42;
  float v43 = a14->f32[0];
  LODWORD(v42) = a14->i32[1];
  float v44 = a14[1].f32[0];
  float v45 = (float)(a14->f32[0] * a3) + (float)(a14->f32[0] * a3);
  float v46 = (float)(*(float *)&v42 * a3) + (float)(*(float *)&v42 * a3);
  float v47 = (float)(v44 * a3) + (float)(v44 * a3);
  float v48 = (float)((float)-(float)(v37 * v46) - (float)(v36 * v45)) - (float)(v33 * v47);
  *(void *)&long long v49 = __PAIR64__(LODWORD(v26), v25.u32[0]);
  *((void *)&v49 + 1) = v16.u32[0];
  int v293 = 3;
  char v294 = 0;
  v289[0] = 0;
  v289[1] = 0;
  long long v295 = v49;
  v296[0] = v39;
  v25.f32[1] = v26;
  float32x2_t v50 = vpmin_f32((float32x2_t)vdup_lane_s32(v16, 0), v25);
  v50.f32[0] = vpmin_f32(v50, v50).f32[0];
  float v290 = 0.15 * v50.f32[0];
  float v291 = 0.05 * v50.f32[0];
  float v292 = 0.05 * v50.f32[0];
  *(_DWORD *)(a15 + 48) = 2139095039;
  float32x2_t v287 = a1[1];
  float v288 = a1;
  float v51 = a1[3].f32[0];
  __asm { FMOV            V17.2S, #1.0 }
  int32x2_t v285 = vrev64_s32((int32x2_t)vdiv_f32(_D17, a1[2]));
  float v286 = 1.0 / v51;
  __int16 v56 = *a16;
  v271[1] = &v285;
  __int16 v272 = v56;
  __int16 v273 = 0;
  BOOL v274 = (a1[3].i8[4] & 2 | v56 & 0x80) != 0;
  BOOL v275 = (v56 & 0x40) != 0;
  v271[0] = &unk_26E729220;
  int v276 = v296;
  uint64_t v277 = a2;
  float v278 = v289;
  float v280 = (float)((float)(v34 * (float)((float)(v33 * v46) - (float)(v37 * v47))) + (float)(v45 * v35))
       - (float)(v36 * v48);
  float v281 = (float)((float)(v34 * (float)((float)(v36 * v47) - (float)(v33 * v45))) + (float)(v46 * v35))
       - (float)(v37 * v48);
  float v282 = (float)((float)(v34 * (float)((float)(v37 * v45) - (float)(v36 * v46))) + (float)(v47 * v35))
       - (float)(v33 * v48);
  uint64_t v283 = a15;
  float v284 = a4;
  int32x2_t v279 = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a15 + 16) = -1;
  float v57 = *(float *)(a2 + 16) * -2.0;
  float v58 = *(float *)(a2 + 20) * -2.0;
  float v59 = *(float *)(a2 + 24) * -2.0;
  float v60 = *(float *)(a2 + 8);
  v17.i32[0] = *(_DWORD *)(a2 + 12);
  float v61 = (float)(*(float *)v17.i32 * *(float *)v17.i32) + -0.5;
  LODWORD(a10) = *(_DWORD *)a2;
  v18.i32[0] = *(_DWORD *)(a2 + 4);
  *(float *)&long long v49 = (float)((float)(v58 * *(float *)v18.i32) + (float)(*(float *)a2 * v57)) + (float)(v60 * v59);
  *(float *)&a8 = -v60;
  float v62 = (float)((float)(v57 * v61)
              - (float)((float)((float)(*(float *)v18.i32 * v59) - (float)(v60 * v58)) * *(float *)v17.i32))
      + (float)(*(float *)a2 * *(float *)&v49);
  float v63 = -*(float *)a2;
  float v64 = (float)((float)(v58 * v61)
              - (float)((float)((float)(v60 * v57) - (float)(*(float *)a2 * v59)) * *(float *)v17.i32))
      + (float)(*(float *)v18.i32 * *(float *)&v49);
  *(float *)&long long v39 = -*(float *)v18.i32;
  float v65 = (float)((float)(v59 * v61)
              - (float)((float)((float)(*(float *)a2 * v58) - (float)(*(float *)v18.i32 * v57)) * *(float *)v17.i32))
      + (float)(v60 * *(float *)&v49);
  float v66 = *(float *)(a13 + 36) + *(float *)(a13 + 36);
  float v67 = *(float *)(a13 + 40) + *(float *)(a13 + 40);
  *(float *)&long long v49 = *(float *)(a13 + 44) + *(float *)(a13 + 44);
  float v68 = (float)((float)-(float)(*(float *)v18.i32 * v67) - (float)(*(float *)a2 * v66)) - (float)(v60 * *(float *)&v49);
  float v69 = v62
      + (float)((float)((float)(*(float *)v17.i32
                              * (float)((float)(v60 * v67) - (float)(*(float *)v18.i32 * *(float *)&v49)))
                      + (float)(v66 * v61))
              - (float)(*(float *)a2 * v68));
  float v70 = v64
      + (float)((float)((float)(*(float *)v17.i32 * (float)((float)(*(float *)a2 * *(float *)&v49) - (float)(v60 * v66)))
                      + (float)(v67 * v61))
              - (float)(*(float *)v18.i32 * v68));
  float v71 = v65
      + (float)((float)((float)(*(float *)v17.i32
                              * (float)((float)(*(float *)v18.i32 * v66) - (float)(*(float *)a2 * v67)))
                      + (float)(*(float *)&v49 * v61))
              - (float)(v60 * v68));
  v269.f32[0] = v69;
  v269.f32[1] = v70;
  float v270 = v71;
  float v72 = v43 + v43;
  *(float *)&long long v42 = *(float *)&v42 + *(float *)&v42;
  float v73 = v44 + v44;
  float v74 = (float)((float)-(float)(*(float *)v18.i32 * *(float *)&v42) - (float)(*(float *)&a10 * v72))
      - (float)(v60 * v73);
  float v75 = (float)((float)(*(float *)v17.i32 * (float)((float)(*(float *)&v42 * v60) - (float)(*(float *)v18.i32 * v73)))
              + (float)(v72 * v61))
      - (float)(*(float *)&a10 * v74);
  float v76 = (float)((float)(*(float *)v17.i32 * (float)((float)(v73 * *(float *)&a10) - (float)(v60 * v72)))
              + (float)(*(float *)&v42 * v61))
      - (float)(*(float *)v18.i32 * v74);
  float v77 = (float)((float)(*(float *)v17.i32
                      * (float)((float)(v72 * *(float *)v18.i32) - (float)(*(float *)&a10 * *(float *)&v42)))
              + (float)(v73 * v61))
      - (float)(v60 * v74);
  v267.f32[0] = v75;
  v267.f32[1] = v76;
  float32x2_t v78 = (float32x2_t)vdup_lane_s32(v17, 0);
  *(float *)v17.i32 = v63 - *(float *)&a10;
  float32x2_t v79 = (float32x2_t)vdup_lane_s32(v17, 0);
  *(float *)v18.i32 = (float)-*(float *)v18.i32 - *(float *)v18.i32;
  float v268 = v77;
  float v80 = (float)-v60 - v60;
  *(float *)&a10 = -(float)(*(float *)&a10 * *(float *)v17.i32);
  float32x2_t v81 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v39, 0), *(float *)v18.i32);
  *(float32x2_t *)&long long v42 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0), v80);
  *(float32x2_t *)&long long v39 = vmul_n_f32(v79, *(float *)&v39);
  float32x2_t v82 = vmul_n_f32(v79, *(float *)&a8);
  float32x2_t v83 = vmul_n_f32(v78, *(float *)v17.i32);
  float32x2_t v84 = vmul_n_f32((float32x2_t)vdup_lane_s32(v18, 0), *(float *)&a8);
  float32x2_t v85 = vmul_n_f32(v78, *(float *)v18.i32);
  float32x2_t v86 = vmul_n_f32(v78, v80);
  float32x2_t v87 = vsub_f32(_D17, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a10, 0));
  _D17.f32[0] = vadd_f32(*(float32x2_t *)&v39, v86).f32[0];
  float32x2_t v88 = vsub_f32(*(float32x2_t *)&v39, v86);
  *(float *)&long long v39 = vsub_f32(v87, *(float32x2_t *)&v42).f32[0];
  v87.f32[0] = vsub_f32(v87, v81).f32[0];
  v81.f32[0] = fabsf(vmuls_lane_f32(v29, vadd_f32(v82, v85), 1))
             + (float)(fabsf(v27 * (float)((float)(1.0 - v81.f32[1]) - *((float *)&v42 + 1)))
                     + fabsf(vmuls_lane_f32(v28, v88, 1)));
  *(float *)&long long v42 = fabsf(v29 * vsub_f32(v84, v83).f32[0])
                 + (float)(fabsf(v27 * _D17.f32[0]) + fabsf(v28 * *(float *)&v39));
  float v89 = fabsf(v29 * v87.f32[0])
      + (float)(fabsf(v27 * vsub_f32(v82, v85).f32[0]) + fabsf(v28 * vadd_f32(v83, v84).f32[0]));
  v265.f32[0] = (float)((float)(v69 + v81.f32[0]) + (float)(v81.f32[0] - v69)) * 0.5;
  v265.f32[1] = (float)((float)(*(float *)&v42 + v70) + (float)(*(float *)&v42 - v70)) * 0.5;
  float v266 = (float)((float)(v71 + v89) + (float)(v89 - v71)) * 0.5;
  float v90 = v262;
  HeightFieldTraceSegmentSweepHelper::HeightFieldTraceSegmentSweepHelper((uint64_t)v262, (uint64_t)&v285, &v265);
  uint64_t v91 = v262[0];
  float v92 = (float *)v262[1];
  *(void *)int v315 = 0;
  if (physx::Gu::intersectRayAABB2(&v263, v264, &v269, &v267, &v315[1], v315, a3))
  {
    unsigned int v93 = 0;
    uint64_t v94 = *(void *)(v91 + 16);
    v297[0] = 0;
    uint64_t v298 = v91;
    uint64_t v299 = v94;
    int v314 = 0;
    float v95 = (float)(v75 * a3) + v69;
    float v96 = (float)(v76 * a3) + v70;
    if (v96 >= v70) {
      float v97 = v70;
    }
    else {
      float v97 = (float)(v76 * a3) + v70;
    }
    float v98 = v92[1];
    float v99 = *(float *)(v91 + 4);
    float v100 = (float)(v97 - v98) * v99;
    if (v96 <= v70) {
      float v96 = v70;
    }
    float v303 = v100;
    float v304 = (float)(v96 + v98) * v99;
    if (v95 >= v69) {
      float v101 = v69;
    }
    else {
      float v101 = (float)(v75 * a3) + v69;
    }
    float v102 = *v92;
    float v103 = v101 - *v92;
    float v104 = *(float *)v91;
    float v105 = *(float *)v91 * v103;
    int v106 = *(_DWORD *)(v94 + 56);
    if (v105 >= 0.0)
    {
      unsigned int v93 = v106 - 2;
      if (v105 <= (float)(v106 - 2)) {
        unsigned int v93 = vcvtms_u32_f32(v105);
      }
    }
    float v107 = (float)(v77 * a3) + v71;
    signed int v305 = v93;
    if (v95 <= v69) {
      float v95 = v69;
    }
    float v108 = v104 * (float)(v95 + v102);
    if (v108 >= 0.0)
    {
      unsigned int v109 = v106 - 1;
      if (v108 <= (float)(v106 - 1)) {
        unsigned int v109 = vcvtps_u32_f32(v108);
      }
    }
    else
    {
      unsigned int v109 = 0;
    }
    signed int v306 = v109;
    if (v107 >= v71) {
      float v110 = v71;
    }
    else {
      float v110 = (float)(v77 * a3) + v71;
    }
    float v111 = v92[2];
    float v112 = *(float *)(v91 + 8);
    float v113 = v112 * (float)(v110 - v111);
    int v114 = *(_DWORD *)(v94 + 60);
    if (v113 >= 0.0)
    {
      unsigned int v115 = v114 - 2;
      if (v113 <= (float)(v114 - 2)) {
        unsigned int v115 = vcvtms_u32_f32(v113);
      }
    }
    else
    {
      unsigned int v115 = 0;
    }
    float v116 = v69 + (float)(v75 * v315[1]);
    signed int v307 = v115;
    if (v107 <= v71) {
      float v107 = v71;
    }
    float v117 = v112 * (float)(v107 + v111);
    int v118 = v114 - 1;
    if (v117 >= 0.0)
    {
      unsigned int v119 = v114 - 1;
      if (v117 <= (float)v118) {
        unsigned int v119 = vcvtps_u32_f32(v117);
      }
    }
    else
    {
      unsigned int v119 = 0;
    }
    signed int v308 = v119;
    float v120 = v102 * v104;
    float v121 = ceilf(v102 * v104);
    float v122 = v111 * v112;
    float v123 = ceilf(v111 * v112);
    unsigned int v301 = vcvtps_s32_f32(v120) + 1;
    unsigned int v302 = vcvtps_s32_f32(v122) + 1;
    float v124 = v116 * v104;
    float v125 = 0.0000001 - v121;
    if ((float)(v116 * v104) > (float)(0.0000001 - v121)) {
      float v125 = v116 * v104;
    }
    if (v125 >= (float)(v121 + (float)((float)(v106 - 1) * 1.0))) {
      float v126 = v121 + (float)((float)(v106 - 1) * 1.0);
    }
    else {
      float v126 = v125;
    }
    float v127 = (float)(v71 + (float)(v77 * v315[1])) * v112;
    float v128 = 0.0000001 - v123;
    if (v127 > (float)(0.0000001 - v123)) {
      float v128 = (float)(v71 + (float)(v77 * v315[1])) * v112;
    }
    float v129 = v123 + (float)((float)v118 * 1.0);
    if (v128 < v129) {
      float v129 = v128;
    }
    float v130 = (float)(v69 + (float)(v75 * v315[0])) * v104;
    float v131 = (float)(v71 + (float)(v77 * v315[0])) * v112;
    if ((float)(v130 - v124) < 0.0) {
      float v132 = -1.0;
    }
    else {
      float v132 = 1.0;
    }
    if ((float)(v131 - v127) < 0.0) {
      float v133 = -1.0;
    }
    else {
      float v133 = 1.0;
    }
    if (vabds_f32(v130, v124) >= 1.0e-10) {
      float v134 = v130 - v124;
    }
    else {
      float v134 = v132 * 1.0e-10;
    }
    if (vabds_f32(v131, v127) >= 1.0e-10) {
      float v135 = v131 - v127;
    }
    else {
      float v135 = v133 * 1.0e-10;
    }
    float v136 = floorf(v126);
    float v137 = ceilf(v126);
    float v138 = floorf(v129);
    float v139 = ceilf(v129);
    if (v135 <= 0.0) {
      float v140 = v139;
    }
    else {
      float v140 = v138;
    }
    if (v134 <= 0.0) {
      float v141 = v137;
    }
    else {
      float v141 = v136;
    }
    if (v134 <= 0.0)
    {
      if (v136 == v126) {
        float v142 = v136 + -1.0;
      }
      else {
        float v142 = v136;
      }
    }
    else if (v137 == v126)
    {
      float v142 = v137 + 1.0;
    }
    else
    {
      float v142 = v137;
    }
    if (v135 <= 0.0)
    {
      if (v138 == v129) {
        float v143 = v138 + -1.0;
      }
      else {
        float v143 = v138;
      }
    }
    else if (v139 == v129)
    {
      float v143 = v139 + 1.0;
    }
    else
    {
      float v143 = v139;
    }
    float v249 = v20;
    float v144 = (float)(v142 - v124) / v134;
    float v145 = (float)(v143 - v127) / v135;
    if (v144 < 0.0) {
      float v144 = fabsf(0.0000001 / v134);
    }
    uint64_t v248 = v24;
    uint64_t v250 = v21;
    uint64_t v251 = v19;
    int v146 = (int)v141;
    int v147 = (int)v140;
    int v259 = (int)v133;
    int v260 = (int)v132;
    if (v145 < 0.0) {
      float v145 = fabsf(0.0000001 / v135);
    }
    int v148 = 0;
    float v256 = 1.0 / fabsf(v134);
    float v149 = fabsf(v135);
    if (v260 >= 1) {
      int v150 = 0;
    }
    else {
      int v150 = -1;
    }
    if (v259 >= 1) {
      int v151 = 0;
    }
    else {
      int v151 = -1;
    }
    int v252 = v151;
    int v253 = v150;
    int v254 = v114;
    float v257 = v123 + (float)v114;
    float v258 = 0.0 - v123;
    float v152 = 0.0 - v121;
    float v153 = v121 + (float)v106;
    float v255 = 1.0 / v149;
    while (1)
    {
      if (v144 >= v145) {
        float v154 = v145;
      }
      else {
        float v154 = v144;
      }
      if (!v297[0])
      {
        v297[0] = 1;
        float v300 = v271;
        int v309 = v254;
        int v310 = v253;
        long long v313 = xmmword_234422A50;
        int v311 = v252;
        LODWORD(v312) = v146 - v301;
        unsigned int v157 = v301 + v146;
        DWORD1(v312) = v301 + v146;
        DWORD2(v312) = v147 - v302;
        int v158 = v302 + v147;
        HIDWORD(v312) = v302 + v147;
        if ((int)(v146 - v301) <= (int)(v301 + v146))
        {
          signed int v159 = v146 - v301 + v253;
          unsigned int v160 = (v260 > 0) + v146 - v301;
          int v161 = v252;
          int v162 = v253;
          do
          {
            if (v159 >= v305)
            {
              if (v159 >= v306) {
                break;
              }
              if (SDWORD2(v312) <= v158)
              {
                int v163 = v161 + DWORD2(v312) - 1;
                do
                {
                  int v164 = v163 + 1;
                  if (v163 + 1 >= v307)
                  {
                    if (v164 >= v308) {
                      break;
                    }
                    int v165 = v163 + v159 * v309;
                    uint64_t v166 = (v165 + 1);
                    uint64_t v167 = *(void *)(v299 + 80);
                    float v168 = (float)*(__int16 *)(v167 + 4 * v166);
                    float v169 = (float)*(__int16 *)(v167 + 4 * (v165 + 2));
                    int v170 = v163 + v160 * v309;
                    float v171 = (float)*(__int16 *)(v167 + 4 * (v170 + 1));
                    float v172 = (float)*(__int16 *)(v167 + 4 * (v170 + 2));
                    if (v304 >= v168 || v304 >= v169 || v304 >= v171 || v304 >= v172)
                    {
                      BOOL v176 = v303 <= v168 || v303 <= v169;
                      BOOL v177 = v176 || v303 <= v171;
                      if (v177 || v303 <= v172)
                      {
                        if ((~*(unsigned __int8 *)(v167 + 4 * v166 + 2) & 0x7F) != 0)
                        {
                          if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v297, 2 * (int)v166))goto LABEL_231; {
                          uint64_t v167 = *(void *)(v299 + 80);
                          }
                        }
                        if ((~*(unsigned __int8 *)(v167 + 4 * v166 + 3) & 0x7F) != 0
                          && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v297, (2 * v166) | 1))
                        {
                          goto LABEL_231;
                        }
                      }
                    }
                  }
                  int v158 = HIDWORD(v312);
                  int v161 = v311;
                  int v163 = v164;
                }
                while (v164 < v311 + HIDWORD(v312));
                unsigned int v157 = DWORD1(v312);
                int v162 = v310;
              }
            }
            ++v160;
            BOOL v176 = v159++ < (int)(v157 + v162);
          }
          while (v176);
          if (v314)
          {
            if (!(*(unsigned int (**)(void *))(*v300 + 16))(v300)) {
              goto LABEL_231;
            }
            int v314 = 0;
          }
        }
        goto LABEL_217;
      }
      int v155 = v146 - v301;
      LODWORD(v313) = v146 - v301;
      DWORD1(v313) = v301 + v146;
      int v156 = v147 - v302;
      DWORD2(v313) = v147 - v302;
      HIDWORD(v313) = v302 + v147;
      if (v146 - v301 == v312)
      {
        if (v156 == DWORD2(v312))
        {
          if ((int)v24 <= (int)v90)
          {
            if (v148) {
              goto LABEL_140;
            }
            goto LABEL_177;
          }
        }
        else
        {
          if (v156 >= SDWORD2(v312)) {
            int v156 = v302 + v147;
          }
          int v261 = v156;
          int v148 = 1;
          LODWORD(v24) = v146 - v301;
          LODWORD(v90) = v301 + v146;
          if (v155 <= (int)(v301 + v146))
          {
LABEL_140:
            signed int v179 = v311 + v261;
            if (v311 + v261 >= v307 && v179 < v308)
            {
              signed int v181 = v310 + v24;
              while (v181 < v306)
              {
                if (v181 >= v305)
                {
                  uint64_t v182 = (v179 + v309 * v181);
                  uint64_t v183 = *(void *)(v299 + 80);
                  float v184 = (float)*(__int16 *)(v183 + 4 * v182);
                  float v185 = (float)*(__int16 *)(v183 + 4 * (v182 + 1));
                  float v186 = (float)*(__int16 *)(v183 + 4 * (v182 + v309));
                  float v187 = (float)*(__int16 *)(v183 + 4 * (v182 + v309 + 1));
                  BOOL v188 = v304 < v184 && v304 < v185;
                  BOOL v189 = v188 && v304 < v186;
                  if (!v189 || v304 >= v187)
                  {
                    BOOL v191 = v303 <= v184 || v303 <= v185;
                    BOOL v192 = v191 || v303 <= v186;
                    if (v192 || v303 <= v187)
                    {
                      if ((~*(unsigned __int8 *)(v183 + 4 * v182 + 2) & 0x7F) != 0)
                      {
                        if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v297, 2 * (int)v182))goto LABEL_231; {
                        uint64_t v183 = *(void *)(v299 + 80);
                        }
                      }
                      if ((~*(unsigned __int8 *)(v183 + 4 * v182 + 3) & 0x7F) != 0
                        && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v297, (2 * v182) | 1))
                      {
                        goto LABEL_231;
                      }
                    }
                  }
                }
                BOOL v176 = v181++ < v310 + (int)v90;
                if (!v176) {
                  break;
                }
              }
            }
          }
        }
      }
      else
      {
        if (v155 >= (int)v312) {
          int v155 = v301 + v146;
        }
        int v261 = v155;
        if (v156 <= (int)(v302 + v147))
        {
          LODWORD(v24) = v147 - v302;
          LODWORD(v90) = v302 + v147;
LABEL_177:
          signed int v194 = v310 + v261;
          if (v310 + v261 >= v305 && v194 < v306)
          {
            int v196 = v311;
            int v197 = v311 - 1;
            int v198 = v261 + v310 + 1;
            while ((int)v24 + v196 < v308)
            {
              if ((int)v24 + v196 >= v307)
              {
                uint64_t v199 = (v24 + v196 + v309 * v194);
                uint64_t v200 = *(void *)(v299 + 80);
                float v201 = (float)*(__int16 *)(v200 + 4 * v199);
                float v202 = (float)*(__int16 *)(v200 + 4 * (v199 + 1));
                float v203 = (float)*(__int16 *)(v200 + 4 * (v24 + v196 + v198 * v309));
                float v204 = (float)*(__int16 *)(v200 + 4 * (v24 + v196 + v198 * v309 + 1));
                BOOL v205 = v304 < v201 && v304 < v202;
                BOOL v206 = v205 && v304 < v203;
                if (!v206 || v304 >= v204)
                {
                  BOOL v208 = v303 <= v201 || v303 <= v202;
                  BOOL v209 = v208 || v303 <= v203;
                  if (v209 || v303 <= v204)
                  {
                    if ((~*(unsigned __int8 *)(v200 + 4 * v199 + 2) & 0x7F) != 0)
                    {
                      if (!physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v297, 2 * (int)v199))goto LABEL_231; {
                      uint64_t v200 = *(void *)(v299 + 80);
                      }
                    }
                    if ((~*(unsigned __int8 *)(v200 + 4 * v199 + 3) & 0x7F) != 0
                      && !physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex((uint64_t)v297, (2 * v199) | 1))
                    {
                      goto LABEL_231;
                    }
                  }
                }
              }
              ++v197;
              ++v196;
              if ((int)v24 + v197 >= v311 + (int)v90) {
                break;
              }
            }
          }
          int v148 = 0;
          goto LABEL_213;
        }
        int v148 = 0;
        LODWORD(v90) = v302 + v147;
        LODWORD(v24) = v147 - v302;
      }
LABEL_213:
      if (v314)
      {
        if (!(*(unsigned int (**)(void *))(*v300 + 16))(v300)) {
          goto LABEL_231;
        }
        int v314 = 0;
      }
      long long v312 = v313;
LABEL_217:
      if (v144 >= v145)
      {
        v147 += v259;
        float v213 = (float)(v147 + v259);
        if (v258 > v213 || v257 <= v213)
        {
LABEL_231:
          float v21 = v250;
          uint64_t v19 = v251;
          BOOL v20 = v249;
          uint64_t v24 = v248;
          break;
        }
        float v145 = v255 + v145;
      }
      else
      {
        v146 += v260;
        float v211 = (float)(v146 + v260);
        if (v152 > v211 || v153 <= v211) {
          goto LABEL_231;
        }
        float v144 = v256 + v144;
      }
      if (v154 >= 1.0001) {
        goto LABEL_231;
      }
    }
  }
  int v215 = v273;
  if ((_BYTE)v273)
  {
    if (!HIBYTE(v273))
    {
      float v218 = *(float *)(v19 + 36);
      float v219 = *(float *)(v19 + 40);
      float v220 = *(float *)(v19 + 44);
      float v221 = (float)((float)(v219 * v219) + (float)(v218 * v218)) + (float)(v220 * v220);
      float v222 = 0.0;
      float v223 = 0.0;
      float v224 = 0.0;
      if (v221 > 0.0)
      {
        float v225 = 1.0 / sqrtf(v221);
        float v222 = v218 * v225;
        float v223 = v219 * v225;
        float v224 = v220 * v225;
      }
      if ((float)((float)((float)(v223 * v281) + (float)(v222 * v280)) + (float)(v224 * v282)) > 0.0)
      {
        float v222 = -v222;
        float v223 = -v223;
        float v224 = -v224;
      }
      *(float *)(v19 + 48) = *(float *)(v19 + 48) * a3;
      float v226 = v222 + v222;
      float v227 = v223 + v223;
      float v228 = v224 + v224;
      float v230 = v21[2];
      float v229 = v21[3];
      float v231 = (float)(v229 * v229) + -0.5;
      float v232 = *v21;
      float v233 = v21[1];
      float v234 = (float)((float)(v233 * v227) + (float)(*v21 * v226)) + (float)(v230 * v228);
      float v235 = (float)((float)(v229 * (float)((float)(v233 * v228) - (float)(v230 * v227))) + (float)(v226 * v231))
           + (float)(*v21 * v234);
      float v236 = (float)((float)(v229 * (float)((float)(v230 * v226) - (float)(*v21 * v228))) + (float)(v227 * v231))
           + (float)(v233 * v234);
      float v237 = (float)((float)(v229 * (float)((float)(*v21 * v227) - (float)(v233 * v226))) + (float)(v228 * v231))
           + (float)(v230 * v234);
      *(float *)(v19 + 36) = v235;
      *(float *)(v19 + 40) = v236;
      *(float *)(v19 + 44) = v237;
      float v238 = *(float *)(v19 + 24) + *(float *)(v19 + 24);
      float v239 = *(float *)(v19 + 28) + *(float *)(v19 + 28);
      float v240 = *(float *)(v19 + 32) + *(float *)(v19 + 32);
      float v241 = (float)((float)(v233 * v239) + (float)(v232 * v238)) + (float)(v230 * v240);
      float v242 = (float)((float)(v229 * (float)((float)(v233 * v240) - (float)(v230 * v239))) + (float)(v238 * v231))
           + (float)(v232 * v241);
      float v243 = (float)((float)(v229 * (float)((float)(v230 * v238) - (float)(v232 * v240))) + (float)(v239 * v231))
           + (float)(v233 * v241);
      float v244 = (float)((float)(v229 * (float)((float)(v232 * v239) - (float)(v233 * v238))) + (float)(v240 * v231))
           + (float)(v230 * v241);
      float v245 = v21[5] + v243;
      float v246 = v21[6] + v244;
      *(float *)(v19 + 24) = v21[4] + v242;
      *(float *)(v19 + 28) = v245;
      *(float *)(v19 + 32) = v246;
      __int16 v216 = 1027;
      goto LABEL_243;
    }
    *(_WORD *)(v19 + 20) = 1026;
    if (v272 & 0x200) != 0 && (physx::Gu::computeBox_HeightFieldMTD(v24))
    {
      __int16 v216 = *(_WORD *)(v19 + 20) | 1;
LABEL_243:
      *(_WORD *)(v19 + 20) = v216;
      return v215 != 0;
    }
    *(_DWORD *)(v19 + 48) = 0;
    float v217 = -v20[1].f32[0];
    *(float32x2_t *)(v19 + 36) = vneg_f32(*v20);
    *(float *)(v19 + 44) = v217;
  }
  return v215 != 0;
}

const char *physx::PxHeightField::getConcreteTypeName(physx::PxHeightField *this)
{
  return "PxHeightField";
}

BOOL physx::PxHeightField::isKindOf(physx::PxHeightField *this, const char *a2)
{
  return !strcmp("PxHeightField", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Gu::HeightField::getNbRows(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t physx::Gu::HeightField::getNbColumns(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t physx::Gu::HeightField::getFormat(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t physx::Gu::HeightField::getSampleStride(physx::Gu::HeightField *this)
{
  return 4;
}

float physx::Gu::HeightField::getConvexEdgeThreshold(physx::Gu::HeightField *this)
{
  return *((float *)this + 22);
}

uint64_t physx::Gu::HeightField::getFlags@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = *(_WORD *)(this + 92);
  return this;
}

float physx::Gu::HeightField::getHeight(physx::Gu::HeightField *this, float a2, float a3)
{
  uint64_t v19 = 0;
  unsigned int v4 = physx::Gu::HeightField::computeCellCoordinates(this, a2, a3, (float *)&v19 + 1, (float *)&v19);
  float v5 = *((float *)&v19 + 1);
  uint64_t v6 = *((void *)this + 10);
  float v7 = (__int16 *)(v6 + 4 * v4);
  if (((char)v7[1] & 0x80000000) == 0)
  {
    float v8 = (float)*(__int16 *)(v6 + 4 * (*((_DWORD *)this + 15) + v4));
    float v9 = (float)*(__int16 *)(v6 + 4 * (v4 + 1));
    if ((float)(*((float *)&v19 + 1) + *(float *)&v19) >= 1.0)
    {
      float v16 = (float)*(__int16 *)(v6 + 4 * (*((_DWORD *)this + 15) + v4 + 1));
      float v11 = v16 + (float)((float)(1.0 - *(float *)&v19) * (float)(v8 - v16));
      float v5 = 1.0 - *((float *)&v19 + 1);
      float v12 = v9 - v16;
    }
    else
    {
      float v10 = (float)*v7;
      float v11 = v10 + (float)(*(float *)&v19 * (float)(v9 - v10));
      float v12 = v8 - v10;
    }
    return v11 + (float)(v5 * v12);
  }
  float v13 = (float)*v7;
  float v14 = (float)*(__int16 *)(v6 + 4 * (*((_DWORD *)this + 15) + v4 + 1));
  if (*(float *)&v19 > *((float *)&v19 + 1))
  {
    float v15 = (float)*(__int16 *)(v6 + 4 * (v4 + 1));
    float v11 = v13 + (float)(*(float *)&v19 * (float)(v15 - v13));
    float v12 = v14 - v15;
    return v11 + (float)(v5 * v12);
  }
  float v18 = (float)*(__int16 *)(v6 + 4 * (*((_DWORD *)this + 15) + v4));
  return (float)(v13 + (float)(*((float *)&v19 + 1) * (float)(v18 - v13)))
       + (float)(*(float *)&v19 * (float)(v14 - v18));
}

uint64_t physx::Gu::HeightField::getTriangleMaterialIndex(physx::Gu::HeightField *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 10) + 4 * (a2 >> 1);
  unsigned int v3 = (unsigned char *)(v2 + 2);
  unsigned int v4 = (unsigned char *)(v2 + 3);
  if ((a2 & 1) == 0) {
    unsigned int v4 = v3;
  }
  return *v4 & 0x7F;
}

float physx::Gu::HeightField::getTriangleNormal@<S0>(physx::Gu::HeightField *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2 >> 1;
  uint64_t v4 = *((void *)this + 10);
  if (*(char *)(v4 + 4 * v3 + 2) < 0)
  {
    if (a2)
    {
      int v6 = *(__int16 *)(v4 + 4 * (v3 + 1));
      int v8 = *(__int16 *)(v4 + 4 * (*((_DWORD *)this + 15) + v3 + 1));
      int v9 = *(__int16 *)(v4 + 4 * v3);
      int v7 = v6;
    }
    else
    {
      int v8 = *(__int16 *)(v4 + 4 * (*((_DWORD *)this + 15) + v3));
      int v6 = *(__int16 *)(v4 + 4 * v3);
      int v7 = *(__int16 *)(v4 + 4 * (*((_DWORD *)this + 15) + v3 + 1));
      int v9 = v8;
    }
  }
  else if (a2)
  {
    int v10 = *((_DWORD *)this + 15);
    int v8 = *(__int16 *)(v4 + 4 * (v10 + v3 + 1));
    int v9 = *(__int16 *)(v4 + 4 * (v10 + v3));
    int v6 = *(__int16 *)(v4 + 4 * (v3 + 1));
    int v7 = v8;
  }
  else
  {
    unsigned int v5 = *((_DWORD *)this + 15) + v3;
    int v6 = *(__int16 *)(v4 + 4 * v3);
    int v7 = *(__int16 *)(v4 + 4 * (v3 + 1));
    int v8 = *(__int16 *)(v4 + 4 * v5);
    int v9 = v6;
  }
  float result = -(float)(v6 - v8);
  *(float *)a3 = result;
  *(_DWORD *)(a3 + 4) = -1082130432;
  *(float *)(a3 + 8) = -(float)(v9 - v7);
  return result;
}

uint64_t physx::Gu::HeightField::getSample(physx::Gu::HeightField *this, int a2, int a3)
{
  return *((void *)this + 10) + 4 * (a3 + *((_DWORD *)this + 15) * a2);
}

uint64_t physx::Gu::HeightField::getTimestamp(physx::Gu::HeightField *this)
{
  return *((unsigned int *)this + 30);
}

char *physx::Gu::HeightFieldTraceUtil::traceSegment<physx::Gu::TriggerTraceSegmentCallback,false,false>(uint64_t a1, float32x2_t *a2, float32x2_t *a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  uint64_t v163 = 0;
  float result = (char *)physx::Gu::intersectRayAABB2((float32x2_t *)a5, (float32x2_t *)(a5 + 12), a2, a3, (float *)&v163 + 1, (float *)&v163, 1.0);
  if (result)
  {
    float v10 = a3->f32[1];
    float v11 = a3[1].f32[0];
    float v12 = a2->f32[1];
    float v13 = (float)(*((float *)&v163 + 1) * v10) + v12;
    float v14 = a2[1].f32[0];
    float v156 = v12;
    float v15 = v12 + (float)(v10 * *(float *)&v163);
    uint64_t v16 = *(void *)(a1 + 16);
    int v17 = *(_DWORD *)(v16 + 56);
    int v18 = *(_DWORD *)(v16 + 60);
    float v19 = *(float *)a1;
    float v20 = (float)((float)(*((float *)&v163 + 1) * a3->f32[0]) + a2->f32[0]) * *(float *)a1;
    float v21 = fmaxf(v20, 0.0000001);
    if (v21 >= (float)((float)((float)(v17 - 1) * 1.0) + 0.0)) {
      float v21 = (float)((float)(v17 - 1) * 1.0) + 0.0;
    }
    float v22 = *(float *)(a1 + 8);
    float v23 = (float)((float)(*((float *)&v163 + 1) * v11) + v14) * v22;
    float v24 = fmaxf(v23, 0.0000001);
    float v25 = (float)((float)(v18 - 1) * 1.0) + 0.0;
    if (v24 < v25) {
      float v25 = v24;
    }
    float v26 = (float)(a2->f32[0] + (float)(a3->f32[0] * *(float *)&v163)) * v19;
    float v27 = (float)(v14 + (float)(v11 * *(float *)&v163)) * v22;
    float v28 = v26 - v20;
    float v29 = v27 - v23;
    if ((float)(v26 - v20) < 0.0) {
      float v30 = -1.0;
    }
    else {
      float v30 = 1.0;
    }
    if (v29 < 0.0) {
      float v31 = -1.0;
    }
    else {
      float v31 = 1.0;
    }
    if (vabds_f32(v26, v20) < 1.0e-10) {
      float v28 = v30 * 1.0e-10;
    }
    if (vabds_f32(v27, v23) < 1.0e-10) {
      float v29 = v31 * 1.0e-10;
    }
    float v32 = a3->f32[0] * v19;
    float v33 = v11 * v22;
    float v34 = sqrtf((float)((float)(v10 * v10) + (float)(v32 * v32)) + (float)(v33 * v33));
    BOOL v35 = v34 <= 1.0e-20;
    float v146 = v34;
    float v36 = 1.0 / v34;
    float v37 = v32 * (float)(1.0 / v34);
    if (!v35) {
      float v32 = v37;
    }
    float v160 = v32;
    if (v35)
    {
      float v38 = v33;
    }
    else
    {
      float v10 = v10 * v36;
      float v38 = v33 * v36;
    }
    float v39 = floorf(v21);
    float v40 = ceilf(v21);
    float v41 = floorf(v25);
    float v42 = ceilf(v25);
    if (v29 <= 0.0) {
      float v43 = v42;
    }
    else {
      float v43 = v41;
    }
    float v44 = v39 + -1.0;
    if (v39 != v21) {
      float v44 = v39;
    }
    float v45 = v40 + 1.0;
    if (v40 != v21) {
      float v45 = v40;
    }
    if (v28 <= 0.0) {
      float v46 = v40;
    }
    else {
      float v46 = v39;
    }
    if (v28 > 0.0) {
      float v47 = v45;
    }
    else {
      float v47 = v44;
    }
    float v48 = v41 + -1.0;
    if (v41 != v25) {
      float v48 = v41;
    }
    if (v42 == v25) {
      float v49 = v42 + 1.0;
    }
    else {
      float v49 = v42;
    }
    if (v29 <= 0.0) {
      float v49 = v48;
    }
    float v50 = (float)(v47 - v20) / v28;
    float v51 = (float)(v49 - v23) / v29;
    if (v50 < 0.0) {
      float v50 = fabsf(0.0000001 / v28);
    }
    int v52 = (int)v46;
    int v53 = (int)v43;
    float v54 = v15 - v13;
    int v55 = (int)v30;
    int v56 = (int)v31;
    if (v51 < 0.0) {
      float v51 = fabsf(0.0000001 / v29);
    }
    float v57 = *(float *)(*(void *)(a1 + 24) + 16);
    float v150 = v14 * v22;
    float v151 = a2->f32[0] * v19;
    float v148 = 1.0 / fabsf(v28);
    float v58 = fabsf(v29);
    float v59 = (float)v52;
    float v60 = (float)v53;
    if (v56 <= 1) {
      int v61 = 1 - v56;
    }
    else {
      int v61 = 2 - v56;
    }
    float v62 = v13 + (float)(v54 * 0.0);
    uint64_t v63 = *(void *)(v16 + 80);
    uint64_t v64 = (v61 >> 1) - v55 + 1;
    int v65 = v55 + (v61 >> 1);
    uint64_t v66 = 2 - v65;
    uint64_t v67 = v65 + 1;
    uint64_t v68 = v55 - (v61 >> 1) + 2;
    float v158 = -v160;
    float v159 = -v38;
    float v157 = -v10;
    float v149 = (float)v17;
    float result = "S3_35CoreIKFootPlacementSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperIKNS2_14CollisionWorldEEEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISJ_EEFvSI_EEE";
    float v147 = 1.0 / v58;
    float v154 = v30;
    float v155 = v13;
    float v152 = v15 - v13;
    float v153 = v31;
    while (1)
    {
      float v69 = v62;
      if (v50 >= v51) {
        float v70 = v51;
      }
      else {
        float v70 = v50;
      }
      float v62 = v13 + (float)(v70 * v54);
      int v71 = v52 + v55;
      float v72 = v57 * (float)*(__int16 *)(v63 + 4 * (v53 + v52 * v18));
      float v73 = v57 * (float)*(__int16 *)(v63 + 4 * (v53 + v52 * v18 + v56));
      int v74 = *(__int16 *)(v63 + 4 * (v53 + (v52 + v55) * v18));
      v164[0] = v72;
      v164[1] = v73;
      float v75 = v57 * (float)v74;
      float v76 = v57 * (float)*(__int16 *)(v63 + 4 * (v53 + (v52 + v55) * v18 + v56));
      v164[2] = v75;
      v164[3] = v76;
      if (v75 >= v76) {
        float v77 = v76;
      }
      else {
        float v77 = v57 * (float)v74;
      }
      if (v75 <= v76) {
        float v75 = v76;
      }
      if (v72 >= v73) {
        float v78 = v73;
      }
      else {
        float v78 = v72;
      }
      if (v72 <= v73) {
        float v72 = v73;
      }
      if (v78 >= v77) {
        float v79 = v77;
      }
      else {
        float v79 = v78;
      }
      if (v72 <= v75) {
        float v72 = v75;
      }
      if (v69 >= v62) {
        float v80 = v13 + (float)(v70 * v54);
      }
      else {
        float v80 = v69;
      }
      if (v69 <= v62) {
        float v69 = v13 + (float)(v70 * v54);
      }
      float v81 = v69 + 0.0001;
      if ((float)(v80 + -0.0001) <= v72 && v81 >= v79)
      {
        float v83 = v164[v64];
        float v84 = v164[v66];
        float v85 = v164[v67];
        float v86 = v164[v68];
        if (v59 >= (float)(v30 + v59)) {
          float v87 = v30 + v59;
        }
        else {
          float v87 = v59;
        }
        if (v59 <= (float)(v30 + v59)) {
          float v88 = v30 + v59;
        }
        else {
          float v88 = v59;
        }
        if (v60 >= (float)(v31 + v60)) {
          float v89 = v31 + v60;
        }
        else {
          float v89 = v60;
        }
        if (v60 <= (float)(v31 + v60)) {
          float v90 = v31 + v60;
        }
        else {
          float v90 = v60;
        }
        *(float *)int v162 = v87;
        *(float *)&v162[1] = v84;
        *(float *)&_OWORD v162[2] = v90;
        *(float *)int v161 = v88;
        *(float *)&v161[1] = v86;
        *(float *)&v161[2] = v90;
        if (v71 >= v52) {
          int v91 = v52;
        }
        else {
          int v91 = v52 + v55;
        }
        int v92 = v53 + v56;
        if (v53 + v56 >= v53) {
          int v92 = v53;
        }
        uint64_t v93 = (v92 + v91 * v18);
        int v94 = *(unsigned __int8 *)(v63 + 4 * v93 + 2);
        if ((v94 & 0x80) != 0)
        {
          float v95 = (float *)v162;
          float v96 = v90;
          float v90 = v89;
          float v97 = v88;
        }
        else
        {
          float v95 = (float *)v161;
          float v96 = v89;
          float v86 = v85;
          float v85 = v83;
          float v83 = v84;
          float v97 = v87;
        }
        float v98 = v87 - v97;
        float v99 = v83 - v85;
        float v100 = v90 - v89;
        float v101 = v88 - v97;
        float v102 = v86 - v85;
        float v103 = v96 - v89;
        float v104 = (float)((float)(v86 - v85) * v159) + (float)(v10 * (float)(v96 - v89));
        float v105 = (float)((float)(v96 - v89) * v158) + (float)(v38 * (float)(v88 - v97));
        float v106 = (float)((float)(v88 - v97) * v157) + (float)(v160 * (float)(v86 - v85));
        float v107 = (float)((float)((float)(v83 - v85) * v105) + (float)((float)(v87 - v97) * v104))
             + (float)((float)(v90 - v89) * v106);
        if (fabsf(v107) < 1.4211e-14) {
          goto LABEL_97;
        }
        float v124 = 1.0 / v107;
        float v125 = v151 - v97;
        float v126 = v156 - v85;
        float v127 = v150 - v89;
        float v128 = (float)((float)((float)((float)(v156 - v85) * v105) + (float)(v125 * v104))
                     + (float)((float)(v150 - v89) * v106))
             * v124;
        if (v128 < -0.0001) {
          goto LABEL_97;
        }
        if (v128 > 1.0001) {
          goto LABEL_97;
        }
        float v129 = (float)(v126 * v100) - (float)(v127 * v99);
        float v130 = (float)(v127 * v98) - (float)(v125 * v100);
        float v131 = (float)(v125 * v99) - (float)(v126 * v98);
        float v132 = v124 * (float)((float)((float)(v10 * v130) + (float)(v160 * v129)) + (float)(v38 * v131));
        if (v132 < -0.0001) {
          goto LABEL_97;
        }
        int v133 = ~v94 & 0x7F;
        BOOL v134 = (float)(v128 + v132) > 1.0001 || v133 == 0;
        if (v134
          || ((float v109 = v124 * (float)((float)((float)(v102 * v130) + (float)(v101 * v129)) + (float)(v103 * v131)),
               v109 >= 0.0)
            ? (BOOL v135 = v109 > v146)
            : (BOOL v135 = 1),
              v135))
        {
LABEL_97:
          int v108 = 1;
          float v109 = 3.4028e38;
        }
        else
        {
          int v108 = 0;
        }
        float v110 = v95[1];
        float v111 = v88 - *v95;
        float v112 = v86 - v110;
        float v113 = v95[2];
        float v114 = v96 - v113;
        float v115 = v87 - *v95;
        float v116 = v83 - v110;
        float v117 = v90 - v113;
        float v118 = (float)((float)(v83 - v110) * v159) + (float)(v10 * v117);
        float v119 = (float)(v117 * v158) + (float)(v38 * v115);
        float v120 = (float)(v115 * v157) + (float)(v160 * (float)(v83 - v110));
        float v121 = (float)((float)((float)(v86 - v110) * v119) + (float)(v111 * v118)) + (float)(v114 * v120);
        float v30 = v154;
        if (fabsf(v121) < 1.4211e-14) {
          goto LABEL_99;
        }
        float v136 = 1.0 / v121;
        float v137 = v151 - *v95;
        float v138 = v156 - v110;
        float v139 = v150 - v113;
        float v140 = (float)((float)((float)((float)(v156 - v110) * v119) + (float)(v137 * v118))
                     + (float)((float)(v150 - v113) * v120))
             * v136;
        if (v140 < -0.0001) {
          goto LABEL_99;
        }
        if (v140 > 1.0001) {
          goto LABEL_99;
        }
        float v141 = (float)(v138 * v114) - (float)(v139 * v112);
        float v142 = (float)(v139 * v111) - (float)(v137 * v114);
        float v143 = (float)(v137 * v112) - (float)(v138 * v111);
        float v144 = (float)((float)((float)(v10 * v142) + (float)(v160 * v141)) + (float)(v38 * v143)) * v136;
        if (v144 < -0.0001 || (float)(v140 + v144) > 1.0001) {
          goto LABEL_99;
        }
        float v123 = (float)((float)((float)(v116 * v142) + (float)(v115 * v141)) + (float)(v117 * v143)) * v136;
        BOOL v145 = v123 < 0.0 || v123 > v146;
        if (v145 || (~*(unsigned __int8 *)(v63 + 4 * v93 + 3) & 0x7F) == 0)
        {
LABEL_99:
          int v122 = 1;
          float v123 = 3.4028e38;
        }
        else
        {
          int v122 = 0;
        }
        if (v123 > v109) {
          int v122 = 1;
        }
        float v13 = v155;
        float v54 = v152;
        float v31 = v153;
        if (((v109 <= v123) & ~v108) != 0 || !v122) {
          break;
        }
      }
      if (v50 >= v51)
      {
        v53 += v56;
        if (v53 + v56 < 0 || (float)(v53 + v56) >= (float)v18) {
          return result;
        }
        float v60 = v31 + v60;
        float v51 = v147 + v51;
      }
      else
      {
        if (v71 + v55 < 0 || (float)(v71 + v55) >= v149) {
          return result;
        }
        float v59 = v30 + v59;
        float v50 = v148 + v50;
        v52 += v55;
      }
      if (v70 >= 0.9999) {
        return result;
      }
    }
    *a4 = 1;
  }
  return result;
}

float multiplyInverseRTLeft(float *a1, float *a2, float *a3)
{
  float v3 = a2[8];
  float v4 = a3[8];
  float v5 = a3[9] - a2[9];
  float v6 = a3[10] - a2[10];
  float v7 = a3[11] - a2[11];
  float v8 = a2[1];
  float v9 = (float)(v6 * v8) + (float)(*a2 * v5);
  float v10 = a2[2];
  float v11 = a2[3];
  float v12 = a2[4];
  float v13 = a2[5];
  float v14 = (float)(v6 * v12) + (float)(v11 * v5);
  float v15 = a2[6];
  float v16 = a2[7];
  float v17 = (float)(v6 * v16) + (float)(v15 * v5);
  float v18 = a3[1];
  float v19 = (float)(*a2 * *a3) + (float)(v8 * v18);
  float v20 = (float)(v11 * *a3) + (float)(v12 * v18);
  float v21 = (float)(v15 * *a3) + (float)(v16 * v18);
  float v22 = a3[2];
  float v23 = a3[3];
  float v24 = v19 + (float)(v10 * v22);
  float v25 = v20 + (float)(v13 * v22);
  float v26 = v21 + (float)(v3 * v22);
  float v27 = a3[4];
  float v28 = a3[5];
  float v29 = (float)((float)(*a2 * v23) + (float)(v8 * v27)) + (float)(v10 * v28);
  float v30 = (float)((float)(v11 * v23) + (float)(v12 * v27)) + (float)(v13 * v28);
  float v31 = (float)((float)(v15 * v23) + (float)(v16 * v27)) + (float)(v3 * v28);
  float v32 = a3[6];
  float v33 = a3[7];
  float v34 = (float)(*a2 * v32) + (float)(v8 * v33);
  *a1 = v24;
  a1[1] = v25;
  a1[2] = v26;
  a1[3] = v29;
  a1[4] = v30;
  a1[5] = v31;
  a1[6] = v34 + (float)(v10 * v4);
  a1[7] = (float)((float)(v11 * v32) + (float)(v12 * v33)) + (float)(v13 * v4);
  a1[8] = (float)((float)(v15 * v32) + (float)(v16 * v33)) + (float)(v3 * v4);
  a1[9] = v9 + (float)(v10 * v7);
  float result = v17 + (float)(v3 * v7);
  a1[10] = v14 + (float)(v13 * v7);
  a1[11] = result;
  return result;
}

void CapsuleTraceSegmentReport::~CapsuleTraceSegmentReport(CapsuleTraceSegmentReport *this)
{
}

BOOL CapsuleTraceSegmentReport::onEvent(CapsuleTraceSegmentReport *this, uint64_t a2, unsigned int *a3, double a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = *((void *)this + 1);
    float v11 = (float *)*((void *)this + 6);
    float v12 = v29;
    float v13 = a3;
    do
    {
      unsigned int v14 = *v13++;
      physx::Gu::HeightFieldUtil::getTriangle(v10, v11, (uint64_t)v12, 0, 0, v14, 1, 1);
      v12 += 36;
      --v9;
    }
    while (v9);
  }
  v23[0] = 0;
  v23[1] = 0;
  int v24 = -1;
  __int16 v25 = 0;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  float v28 = 3.4028e38;
  uint64_t v15 = *((void *)this + 3);
  float v16 = (float32x2_t *)*((void *)this + 4);
  float v17 = *((float *)this + 14);
  __int16 v21 = *((_WORD *)this + 8);
  if ((physx::Gu::sweepCapsuleTriangles_Precise(a2, (uint64_t)v29, v15, v16, 0, (uint64_t)v23, v22, &v21, v17, a5, a6, *((unsigned char *)this + 20), 0) & 1) == 0)return 1; {
  float v18 = v28;
  }
  uint64_t v19 = *((void *)this + 5);
  if (v28 > *(float *)(v19 + 48)) {
    return 1;
  }
  *(_DWORD *)(v19 + 16) = a3[v24];
  *(void *)(v19 + 40) = v27;
  *(_OWORD *)(v19 + 24) = v26;
  *(float *)(v19 + 48) = v18;
  *((unsigned char *)this + 18) = 1;
  if (v28 == 0.0)
  {
    BOOL result = 0;
    *((unsigned char *)this + 19) = 1;
  }
  else
  {
    return !*((unsigned char *)this + 21);
  }
  return result;
}

uint64_t HeightFieldTraceSegmentSweepHelper::HeightFieldTraceSegmentSweepHelper(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  physx::Gu::HeightFieldUtil::computeLocalBounds(a2, (float *)(a1 + 16));
  float v5 = *(float *)(a1 + 24) - a3[1].f32[0];
  *(float32x2_t *)(a1 + 16) = vsub_f32(*(float32x2_t *)(a1 + 16), *a3);
  *(float *)(a1 + 24) = v5;
  float v6 = *(float *)(a1 + 36) + a3[1].f32[0];
  *(float32x2_t *)(a1 + 28) = vadd_f32(*(float32x2_t *)(a1 + 28), *a3);
  *(float *)(a1 + 36) = v6;
  return a1;
}

void ConvexTraceSegmentReport::~ConvexTraceSegmentReport(ConvexTraceSegmentReport *this)
{
}

BOOL ConvexTraceSegmentReport::onEvent(ConvexTraceSegmentReport *this, unsigned int a2, unsigned int *a3)
{
  long long v84 = xmmword_23435FBB0;
  uint64_t v85 = 0;
  int v86 = 0;
  if (a2)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    float v73 = (char *)this + 328;
    float v7 = (char *)this + 128;
    float v8 = (float32x4_t *)((char *)this + 368);
    float32x4_t v74 = (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu);
    for (i = a2; i != v5; BOOL v6 = ++v5 >= i)
    {
      unsigned int v10 = a3[v5];
      physx::Gu::HeightFieldUtil::getTriangle(*((void *)this + 1), (float *)&v84, (uint64_t)&v76, 0, 0, v10, 0, 0);
      v12.i32[0] = *((_DWORD *)this + 104);
      if (*((unsigned char *)this + 20)
        || (float)((float)((float)(*((float *)this + 102)
                                 * (float)((float)((float)(v81 - v78) * (float)(v82 - v79))
                                         - (float)((float)(v79 - v76) * (float)(v83.f32[1] - v81))))
                         + (float)((float)((float)((float)(v80 - v77) * (float)(v83.f32[1] - v81))
                                         - (float)((float)(v81 - v78) * (float)(v83.f32[0] - v80)))
                                 * *((float *)this + 101)))
                 + (float)((float)((float)((float)(v79 - v76) * (float)(v83.f32[0] - v80))
                                 - (float)((float)(v80 - v77) * (float)(v82 - v79)))
                         * *((float *)this + 103))) > 0.0)
      {
        v11.i32[0] = *((_DWORD *)this + 88);
        int32x2_t v75 = v11;
        float32x4_t v98 = 0u;
        uint64_t v97 = 0;
        float32x4_t v13 = *((float32x4_t *)this + 2);
        float32x4_t v14 = *((float32x4_t *)this + 3);
        float32x4_t v15 = vmulq_n_f32(v13, v76);
        v15.i32[3] = 0;
        float32x4_t v16 = vmulq_n_f32(v14, v77);
        v16.i32[3] = 0;
        float32x4_t v18 = *((float32x4_t *)this + 4);
        float32x4_t v17 = *((float32x4_t *)this + 5);
        float32x4_t v19 = vmulq_n_f32(v18, v78);
        v19.i32[3] = 0;
        float32x4_t v20 = vaddq_f32(vaddq_f32(v15, v16), v19);
        float32x4_t v21 = vmulq_n_f32(v13, v79);
        v21.i32[3] = 0;
        float32x4_t v22 = vmulq_n_f32(v14, v80);
        v22.i32[3] = 0;
        float32x4_t v23 = vmulq_n_f32(v18, v81);
        v23.i32[3] = 0;
        float32x4_t v24 = vaddq_f32(v17, v20);
        float32x4_t v25 = vaddq_f32(vaddq_f32(v21, v22), v23);
        float32x4_t v26 = vmulq_n_f32(v13, v82);
        v26.i32[3] = 0;
        float32x4_t v27 = vmulq_n_f32(v14, v83.f32[0]);
        v27.i32[3] = 0;
        float32x4_t v28 = vmulq_lane_f32(v18, v83, 1);
        v28.i32[3] = 0;
        float32x4_t v29 = vaddq_f32(v17, v25);
        float32x4_t v30 = vaddq_f32(v17, vaddq_f32(vaddq_f32(v26, v27), v28));
        char v93 = 0;
        float32x4_t v31 = vmulq_f32(vaddq_f32(v30, vaddq_f32(v24, v29)), v74);
        v31.i32[3] = 0;
        float32x4_t v90 = v31;
        float32x4_t v94 = v24;
        float32x4_t v95 = v29;
        float32x4_t v96 = v30;
        uint64_t v91 = 0x7F7FFFFF00000000;
        uint64_t v92 = 0x57F7FFFFFLL;
        v89[0] = &unk_26E728A58;
        v89[1] = &v90;
        v88[0] = &unk_26E728850;
        v88[1] = v7;
        float32x4_t v87 = vsubq_f32(v31, *((float32x4_t *)this + 8));
        float32x4_t v100 = 0u;
        v101[0] = 0u;
        float32x2_t v99 = 0;
        if (physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v89, (uint64_t)v88, &v87, v12, (uint64_t)&v97, &v98, v8, &v99, &v100, v101))
        {
          if (*(float *)&v97 >= v99.f32[0])
          {
            *((unsigned char *)this + 19) = 1;
            *((_DWORD *)this + 80) = v10;
            *((_WORD *)this + 162) = 1026;
            float v72 = -*((float *)this + 100);
            *(float32x2_t *)(v73 + 12) = vneg_f32(*(float32x2_t *)((char *)this + 392));
            *((float *)this + 87) = v72;
            *((_DWORD *)this + 88) = 0;
            *((unsigned char *)this + 18) = 1;
            return v6;
          }
          float32x2_t v32 = vmul_f32(v99, *(float32x2_t *)((char *)this + 384));
          if (vcgt_f32((float32x2_t)vdup_lane_s32(v75, 0), v32).u8[0])
          {
            float32x4_t v34 = *((float32x4_t *)this + 6);
            float32x4_t v33 = *((float32x4_t *)this + 7);
            float32x4_t v35 = v34;
            v35.i32[3] = 0;
            float32x2_t v36 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v34, 3).u64[0];
            float32x4_t v38 = v100;
            float32x4_t v37 = (float32x4_t)v101[0];
            LODWORD(v39) = vmla_f32((float32x2_t)0xBF000000BF000000, v36, v36).u32[0];
            float32x4_t v40 = vmulq_n_f32((float32x4_t)v101[0], v39);
            v40.i32[3] = 0;
            *((_DWORD *)this + 80) = v10;
            float32x2_t v41 = (float32x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
            float32x2_t v42 = (float32x2_t)vext_s8(*(int8x8_t *)v34.f32, (int8x8_t)v41, 4uLL);
            int8x8_t v43 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), *(float32x2_t *)v34.f32), v42, *(float32x2_t *)v37.f32);
            *(int8x8_t *)v44.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v37.f32, v41), *(float32x2_t *)v34.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL)), 4uLL);
            v44.i64[1] = v43.u32[0];
            float32x4_t v45 = vmlaq_laneq_f32(v40, v44, v34, 3);
            v45.i64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u32[0];
            float32x4_t v46 = vmulq_f32(v37, v35);
            v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
            float32x4_t v47 = vmlaq_n_f32(v45, v35, vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32).f32[0]);
            uint64_t v48 = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
            float32x4_t v49 = vmulq_n_f32(v38, v39);
            v49.i32[3] = 0;
            int8x8_t v50 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), *(float32x2_t *)v34.f32), v42, *(float32x2_t *)v38.f32);
            *(int8x8_t *)v51.f32 = vext_s8(v50, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v38.f32, v41), *(float32x2_t *)v34.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL)), 4uLL);
            v51.i64[1] = v50.u32[0];
            float32x4_t v52 = vmlaq_laneq_f32(v49, v51, v34, 3);
            v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
            float32x4_t v53 = vmulq_f32(v38, v35);
            v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
            float32x4_t v54 = vmlaq_n_f32(v52, v35, vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32).f32[0]);
            float32x4_t v55 = vaddq_f32(v54, v54);
            v55.i32[3] = 0;
            *((_WORD *)this + 162) = 1027;
            float32x4_t v56 = vmulq_f32(v55, v55);
            v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
            float32x2_t v57 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
            float32x2_t v58 = vrsqrte_f32(v57);
            int v59 = 4;
            do
            {
              float32x2_t v58 = vmul_f32(v58, vrsqrts_f32(vmul_f32(v58, v58), v57));
              --v59;
            }
            while (v59);
            __asm { FMOV            V16.2S, #1.0 }
            float32x2_t v65 = vmul_f32(v57, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v57), 0), _D16, (int8x8_t)v58));
            float32x2_t v66 = vrecpe_f32(v65);
            int v67 = 4;
            do
            {
              float32x2_t v66 = vmul_f32(v66, vrecps_f32(v65, v66));
              --v67;
            }
            while (v67);
            v47.i64[1] = v48;
            v68.i64[0] = 0x4000000040000000;
            v68.i64[1] = 0x4000000040000000;
            float32x4_t v69 = vmlaq_f32(v33, v68, v47);
            int8x16_t v70 = (int8x16_t)vmulq_n_f32(v55, v66.f32[0]);
            v69.i32[3] = v70.i32[0];
            *(float32x4_t *)float v73 = v69;
            *((void *)this + 43) = vextq_s8(v70, v70, 4uLL).u64[0];
            *((_DWORD *)this + 88) = v32.i32[0];
            *((unsigned char *)this + 18) = 1;
            if (*((unsigned char *)this + 21) || v32.f32[0] == 0.0) {
              return v6;
            }
          }
        }
      }
    }
  }
  return 1;
}

BOOL physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x2_t a4, uint64_t a5, float32x4_t *a6, float32x4_t *a7, float32x2_t *a8, float32x4_t *a9, int8x16_t *a10)
{
  uint64_t v232 = *MEMORY[0x263EF8340];
  int8x16_t v207 = (int8x16_t)vmlaq_f32(*a6, (float32x4_t)0, *a7);
  LODWORD(v14) = vextq_s8(v207, v207, 8uLL).u32[0];
  unsigned int v218 = 1;
  float32x4_t v15 = vmulq_f32(*a3, *a3);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), (float32x2_t)0x3400000034000000), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
  float32x4_t v17 = vmulq_f32(v16, v16);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x2_t v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  float32x2_t v19 = vrsqrte_f32(v18);
  int v20 = 4;
  do
  {
    float32x2_t v19 = vmul_f32(v19, vrsqrts_f32(vmul_f32(v19, v19), v18));
    --v20;
  }
  while (v20);
  HIDWORD(v14) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v26 = vmul_f32(v18, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v18), 0), (int8x8_t)_D8, (int8x8_t)v19));
  float32x2_t v27 = vrecpe_f32(v26);
  int v28 = 4;
  do
  {
    float32x2_t v27 = vmul_f32(v27, vrecps_f32(v26, v27));
    --v28;
  }
  while (v28);
  v29.i64[0] = v207.i64[0];
  v29.i64[1] = v14;
  float32x4_t v208 = v29;
  float32x4_t v30 = vmulq_n_f32(v16, v27.f32[0]);
  v30.i32[3] = 0;
  float32x4_t v31 = vnegq_f32(v30);
  v31.i32[3] = 0;
  float32x2_t v32 = *(float32x4_t **)(a1 + 8);
  float32x4_t v33 = v32[3];
  float32x4_t v34 = v32[4];
  float32x4_t v35 = v32[5];
  float32x4_t v36 = vmulq_f32(v31, v33);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  *(float32x2_t *)v36.f32 = vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32);
  float32x4_t v37 = vmulq_f32(v31, v34);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  *(float32x2_t *)v37.f32 = vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
  float32x4_t v38 = vmulq_f32(v31, v35);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  float32x2_t v39 = (float32x2_t)vdup_lane_s32(a4, 0);
  float32x4_t v217 = v30;
  float32x4_t v213 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v38.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v37.f32)), 0), (int8x16_t)v33, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.f32), 0), (int8x16_t)v34, (int8x16_t)v35));
  *(double *)v40.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v217);
  float32x4_t v41 = v40;
  float32x4_t v42 = vsubq_f32(v213, v40);
  float32x4_t v229 = v42;
  float32x4_t v230 = 0u;
  memset(v231, 0, sizeof(v231));
  float32x4_t v225 = v213;
  float32x4_t v226 = 0u;
  float32x4_t v43 = vnegq_f32(v42);
  v43.i32[3] = 0;
  float32x4_t v227 = 0u;
  long long v228 = 0u;
  float32x4_t v221 = v41;
  float32x4_t v222 = 0u;
  float32x4_t v223 = 0u;
  long long v224 = 0u;
  float32x4_t v44 = (const float *)(*(void *)(a2 + 8) + 24);
  *(float32x2_t *)v41.f32 = vld1_dup_f32(v44);
  float32x2_t v45 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v41.f32 = vmul_f32(vmin_f32(*(float32x2_t *)v41.f32, v45), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v46 = vadd_f32(v39, *(float32x2_t *)v41.f32);
  float32x2_t v47 = vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
  float32x2_t v48 = vmul_f32(v46, v46);
  float32x4_t v49 = vmulq_f32(v43, v43);
  float32x4_t v50 = vpaddq_f32(v49, v49);
  float32x2_t v51 = vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32);
  float32x2_t v201 = v47;
  *(int32x2_t *)v50.f32 = vcgt_f32(v51, v47);
  int32x4_t v52 = vdupq_lane_s32(*(int32x2_t *)v50.f32, 0);
  v50.i32[0] = -1;
  int32x4_t v200 = (int32x4_t)v50;
  float32x4_t v53 = v42;
  v54.i64[0] = -1;
  v54.i64[1] = -1;
  int8x16_t v204 = (int8x16_t)v43;
  float32x4_t v55 = v43;
  float32x2_t v56 = 0;
  while (1)
  {
    int8x16_t v57 = (int8x16_t)v42;
    v58.i64[0] = -1;
    v58.i64[1] = -1;
    *(int16x4_t *)v58.i8 = vmovn_s32(vceqq_s32(v52, v58));
    unsigned __int32 v59 = vuzp1_s8(*(int8x8_t *)v58.i8, *(int8x8_t *)v58.i8).u32[0];
    if (v59 != -1) {
      break;
    }
    float32x4_t v60 = vmulq_f32(v55, v55);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    float32x2_t v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
    float32x2_t v62 = vrsqrte_f32(v61);
    int v63 = 4;
    do
    {
      float32x2_t v62 = vmul_f32(v62, vrsqrts_f32(vmul_f32(v62, v62), v61));
      --v63;
    }
    while (v63);
    int8x16_t v209 = v57;
    float32x2_t v64 = vmul_f32(v61, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v61), 0), (int8x8_t)_D8, (int8x8_t)v62));
    float32x2_t v65 = vrecpe_f32(v64);
    int v66 = 4;
    do
    {
      float32x2_t v65 = vmul_f32(v65, vrecps_f32(v64, v65));
      --v66;
    }
    while (v66);
    float32x4_t v206 = v55;
    float32x4_t v67 = vmulq_n_f32(v55, v65.f32[0]);
    v67.i32[3] = 0;
    float32x4_t v210 = v67;
    float32x4_t v68 = *(float32x4_t **)(a1 + 8);
    float32x4_t v69 = v68[3];
    float32x4_t v70 = v68[4];
    float32x4_t v71 = v68[5];
    float32x4_t v72 = vmulq_f32(v67, v69);
    v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
    *(float32x2_t *)v72.f32 = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32);
    float32x4_t v73 = vmulq_f32(v67, v70);
    v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
    *(float32x2_t *)v73.f32 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
    float32x4_t v74 = vmulq_f32(v67, v71);
    v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
    *(float32x2_t *)v74.f32 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
    float32x4_t v75 = vnegq_f32(v67);
    v75.i32[3] = 0;
    float32x4_t v214 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v74.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v73.f32)), 0), (int8x16_t)v69, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v74.f32), 0), (int8x16_t)v70, (int8x16_t)v71));
    float32x4_t v216 = v75;
    *(double *)v76.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v216);
    float32x4_t v77 = v214;
    float32x4_t v78 = vaddq_f32(v208, v76);
    float32x4_t v42 = vsubq_f32(v214, v78);
    float32x4_t v79 = vnegq_f32(v42);
    v79.i32[3] = 0;
    float32x4_t v80 = vmulq_f32(v210, v79);
    v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
    float32x2_t v81 = vsub_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32), v46);
    if (v81.f32[0] > 0.0)
    {
      float32x4_t v82 = vmulq_f32(v210, *a7);
      v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
      float32x2_t v83 = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
      if (v83.f32[0] >= 0.0) {
        return v59 != -1;
      }
      float32x2_t v84 = vrecpe_f32(v83);
      int v85 = 4;
      do
      {
        float32x2_t v84 = vmul_f32(v84, vrecps_f32(v83, v84));
        --v85;
      }
      while (v85);
      float32x2_t v86 = vsub_f32(v56, vmul_f32(v81, v84));
      if (vcgt_f32(v86, v56).u8[0])
      {
        if (v86.f32[0] > 1.0) {
          return v59 != -1;
        }
        float32x4_t v87 = vmlaq_n_f32(*a6, *a7, v86.f32[0]);
        v87.i64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u32[0];
        float32x4_t v211 = v87;
        float32x4_t v88 = vsubq_f32(v87, v208);
        float32x2_t v205 = v86;
        float32x4_t v221 = vaddq_f32(v221, v88);
        float32x4_t v222 = vaddq_f32(v222, v88);
        float32x4_t v223 = vaddq_f32(v223, v88);
        float32x4_t v229 = vsubq_f32(v225, v221);
        float32x4_t v230 = vsubq_f32(v226, v222);
        v231[0] = vsubq_f32(v227, v223);
        *(double *)v89.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support(a2, &v216);
        float32x4_t v77 = v214;
        float32x4_t v78 = vaddq_f32(v211, v89);
        float32x4_t v42 = vsubq_f32(v214, v78);
        float32x2_t v51 = v45;
        int8x16_t v204 = (int8x16_t)v206;
        float32x4_t v208 = v211;
        float32x2_t v56 = v205;
      }
      else
      {
        float32x2_t v56 = v86;
      }
    }
    uint64_t v90 = v218;
    *(&v225 + v218) = v77;
    *(&v221 + v90) = v78;
    unsigned int v218 = v90 + 1;
    *(&v229 + v90) = v42;
    if (v90 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v229, &v225, &v221, (int *)&v218);
LABEL_27:
      float32x4_t v53 = (float32x4_t)v209;
      goto LABEL_61;
    }
    if (v90 != 2)
    {
      float32x4_t v53 = (float32x4_t)v209;
      if (v90 != 1) {
        goto LABEL_61;
      }
      float32x4_t v42 = v229;
      float32x4_t v91 = vsubq_f32(v230, v229);
      float32x4_t v92 = vmulq_f32(v91, v91);
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v93), 0), *(int8x8_t *)v229.f32).u32[0] != -1)
      {
        float32x4_t v94 = vnegq_f32(v229);
        v94.i32[3] = 0;
        float32x4_t v95 = vmulq_f32(v94, v91);
        v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
        float32x2_t v96 = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
        float32x2_t v97 = vrecpe_f32(v93);
        int v98 = 4;
        do
        {
          float32x2_t v97 = vmul_f32(v97, vrecps_f32(v93, v97));
          --v98;
        }
        while (v98);
        float32x4_t v42 = vmlaq_n_f32(v229, v91, vmax_f32(vmin_f32(vmul_f32(v96, v97), _D8), 0).f32[0]);
LABEL_42:
        v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
        goto LABEL_61;
      }
LABEL_43:
      unsigned int v218 = 1;
      goto LABEL_61;
    }
    float32x4_t v42 = v229;
    float32x4_t v99 = vsubq_f32(v230, v229);
    float32x4_t v100 = vsubq_f32(v231[0], v229);
    int8x8_t v102 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v99.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), *(float32x2_t *)v100.f32);
    *(int8x8_t *)v101.f32 = vext_s8(v102, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL), *(float32x2_t *)v100.f32), *(float32x2_t *)v99.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL)), 4uLL);
    v102.i32[1] = 0;
    unsigned int v218 = 3;
    float32x2_t v103 = vpadd_f32(vmul_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32), vmul_f32((float32x2_t)v102.u32[0], (float32x2_t)v102.u32[0]));
    float32x2_t v104 = vpadd_f32(v103, v103);
    if (v104.f32[0] <= 0.00000011921)
    {
      unsigned int v218 = 2;
      float32x4_t v141 = vmulq_f32(v99, v99);
      v141.i64[0] = vpaddq_f32(v141, v141).u64[0];
      float32x2_t v142 = vpadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v141.f32);
      float32x4_t v53 = (float32x4_t)v209;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v142), 0), *(int8x8_t *)v229.f32).u32[0] != -1)
      {
        float32x4_t v143 = vnegq_f32(v229);
        v143.i32[3] = 0;
        float32x4_t v144 = vmulq_f32(v143, v99);
        v144.i64[0] = vpaddq_f32(v144, v144).u64[0];
        float32x2_t v145 = vpadd_f32(*(float32x2_t *)v144.f32, *(float32x2_t *)v144.f32);
        float32x2_t v146 = vrecpe_f32(v142);
        int v147 = 4;
        do
        {
          float32x2_t v146 = vmul_f32(v146, vrecps_f32(v142, v146));
          --v147;
        }
        while (v147);
        float32x4_t v42 = vmlaq_n_f32(v229, v99, vmax_f32(vmin_f32(vmul_f32(v145, v146), _D8), 0).f32[0]);
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v104.f32[0] == 0.0)
    {
      float32x4_t v42 = 0uLL;
      goto LABEL_27;
    }
    *(int8x8_t *)&v101.u32[2] = v102;
    float32x2_t v105 = (float32x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL).u64[0];
    float32x2_t v106 = (float32x2_t)vextq_s8((int8x16_t)v231[0], (int8x16_t)v231[0], 8uLL).u64[0];
    float32x2_t v107 = (float32x2_t)vextq_s8((int8x16_t)v231[0], (int8x16_t)v231[0], 4uLL).u64[0];
    float32x2_t v108 = (float32x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 4uLL).u64[0];
    int8x8_t v109 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230.f32, v107), v108, *(float32x2_t *)v231[0].f32);
    *(int8x8_t *)v110.f32 = vext_s8(v109, (int8x8_t)vmls_f32(vmul_f32(v105, *(float32x2_t *)v231[0].f32), *(float32x2_t *)v230.f32, v106), 4uLL);
    v110.i64[1] = v109.u32[0];
    float32x2_t v111 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 8uLL).u64[0];
    float32x2_t v112 = (float32x2_t)vextq_s8((int8x16_t)v229, (int8x16_t)v229, 4uLL).u64[0];
    int8x8_t v113 = (int8x8_t)vmls_f32(vmul_f32(v112, *(float32x2_t *)v231[0].f32), v107, *(float32x2_t *)v229.f32);
    *(int8x8_t *)v114.f32 = vext_s8(v113, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v229.f32, v106), *(float32x2_t *)v231[0].f32, v111), 4uLL);
    v114.i64[1] = v113.u32[0];
    int8x8_t v115 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v229.f32, v108), v112, *(float32x2_t *)v230.f32);
    *(int8x8_t *)v116.f32 = vext_s8(v115, (int8x8_t)vmls_f32(vmul_f32(v111, *(float32x2_t *)v230.f32), *(float32x2_t *)v229.f32, v105), 4uLL);
    v116.i64[1] = v115.u32[0];
    float32x4_t v117 = vmulq_f32(v110, v101);
    v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
    float32x2_t v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
    float32x4_t v119 = vmulq_f32(v114, v101);
    v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
    float32x2_t v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
    float32x4_t v121 = vmulq_f32(v116, v101);
    v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
    float32x2_t v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v120), (int8x8_t)vcgez_f32(v118)), (int8x8_t)vcgez_f32(v122)), 0), *(int8x8_t *)v229.f32).u32[0] != -1)
    {
      float32x4_t v123 = vnegq_f32(v229);
      v123.i32[3] = 0;
      float32x4_t v124 = vnegq_f32(v230);
      v124.i32[3] = 0;
      float32x4_t v125 = vmulq_f32(v123, v99);
      v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
      float32x2_t v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
      float32x4_t v127 = vmulq_f32(v99, v124);
      v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
      float32x2_t v128 = vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v126), (int8x8_t)vclez_f32(v128)), (int8x8_t)vclez_f32(v122)), 0), *(int8x8_t *)v229.f32).u32[0] == -1)
      {
        float32x2_t v153 = vsub_f32(v126, v128);
        float32x2_t v154 = vrecpe_f32(v153);
        int v155 = 4;
        do
        {
          float32x2_t v154 = vmul_f32(v154, vrecps_f32(v153, v154));
          --v155;
        }
        while (v155);
        uint64_t v140 = 0;
        float32x4_t v42 = vmlaq_n_f32(v229, v99, vmul_f32(v126, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v153), (float32x2_t)0x3400000034000000), (int8x8_t)v154, 0)).f32[0]);
        v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
        unsigned int v156 = 2;
        uint64_t v139 = 1;
      }
      else
      {
        float32x4_t v129 = vnegq_f32(v231[0]);
        v129.i32[3] = 0;
        float32x4_t v130 = vmulq_f32(v124, v100);
        v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
        float32x2_t v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
        float32x4_t v132 = vmulq_f32(v99, v129);
        v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
        float32x2_t v133 = vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32);
        float32x4_t v134 = vmulq_f32(v100, v129);
        v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
        float32x2_t v135 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v131, v128), (int8x8_t)vcge_f32(v133, v135)), (int8x8_t)vclez_f32(v118)), 0), *(int8x8_t *)v229.f32).u32[0] != -1)
        {
          float32x4_t v136 = vmulq_f32(v123, v100);
          v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
          float32x2_t v137 = vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v137), (int8x8_t)vclez_f32(v135)), (int8x8_t)vclez_f32(v120)), 0), *(int8x8_t *)v229.f32).u32[0] == -1)
          {
            float32x2_t v162 = vsub_f32(v137, v135);
            float32x2_t v163 = vrecpe_f32(v162);
            int v164 = 4;
            float32x4_t v53 = (float32x4_t)v209;
            do
            {
              float32x2_t v163 = vmul_f32(v163, vrecps_f32(v162, v163));
              --v164;
            }
            while (v164);
            uint64_t v140 = 0;
            float32x4_t v42 = vmlaq_n_f32(v229, v100, vmul_f32(v137, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v162), (float32x2_t)0x3400000034000000), (int8x8_t)v163, 0)).f32[0]);
            v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
            uint64_t v139 = 2;
            unsigned int v156 = 2;
          }
          else
          {
            float32x4_t v53 = (float32x4_t)v209;
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v137), (int8x8_t)vclez_f32(v126)), 0), *(int8x8_t *)v229.f32).u32[0] == -1)
            {
              uint64_t v140 = 0;
              uint64_t v139 = 1;
            }
            else
            {
              *(int16x4_t *)v42.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v128, v131), (int8x8_t)vcgez_f32(v128)), 0);
              *(int8x8_t *)v42.f32 = vuzp1_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v42.f32);
              __int32 v138 = v42.i32[0];
              float32x4_t v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v42, v200), 0), (int8x16_t)v230, (int8x16_t)v231[0]);
              uint64_t v139 = 1;
              if (v138 == -1) {
                uint64_t v140 = 1;
              }
              else {
                uint64_t v140 = 2;
              }
            }
            unsigned int v156 = 1;
          }
          goto LABEL_60;
        }
        float32x2_t v157 = vsub_f32(v131, v128);
        float32x2_t v158 = vadd_f32(v157, vsub_f32(v133, v135));
        float32x2_t v159 = vrecpe_f32(v158);
        int v160 = 4;
        do
        {
          float32x2_t v159 = vmul_f32(v159, vrecps_f32(v158, v159));
          --v160;
        }
        while (v160);
        int8x16_t v161 = (int8x16_t)vmlaq_n_f32(v230, vsubq_f32(v231[0], v230), vmul_f32(v157, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v158), (float32x2_t)0x3400000034000000), (int8x8_t)v159, 0)).f32[0]);
        v161.i64[1] = vextq_s8(v161, v161, 8uLL).u32[0];
        uint64_t v139 = 2;
        float32x4_t v42 = (float32x4_t)v161;
        uint64_t v140 = 1;
        unsigned int v156 = 2;
      }
      float32x4_t v53 = (float32x4_t)v209;
LABEL_60:
      float32x4_t v165 = *(&v229 + v139);
      float32x4_t v166 = *(&v225 + v140);
      float32x4_t v167 = *(&v225 + v139);
      float32x4_t v168 = *(&v221 + v140);
      float32x4_t v169 = *(&v221 + v139);
      float32x4_t v229 = *(&v229 + v140);
      float32x4_t v230 = v165;
      float32x4_t v225 = v166;
      float32x4_t v226 = v167;
      float32x4_t v221 = v168;
      float32x4_t v222 = v169;
      unsigned int v218 = v156;
      goto LABEL_61;
    }
    int8x16_t v148 = (int8x16_t)vmulq_f32(v229, v101);
    float32x2_t v149 = (float32x2_t)vextq_s8(v148, v148, 8uLL).u64[0];
    float32x2_t v150 = vrecpe_f32(v104);
    int v151 = 4;
    float32x4_t v53 = (float32x4_t)v209;
    do
    {
      float32x2_t v150 = vmul_f32(v150, vrecps_f32(v104, v150));
      --v151;
    }
    while (v151);
    float32x2_t v152 = vpadd_f32(*(float32x2_t *)v148.i8, v149);
    float32x4_t v42 = vmulq_n_f32(v101, vmul_f32(v150, vpadd_f32(v152, v152)).f32[0]);
    v42.i32[3] = 0;
LABEL_61:
    float32x4_t v55 = vnegq_f32(v42);
    v55.i32[3] = 0;
    float32x4_t v170 = vmulq_f32(v42, v42);
    v170.i64[0] = vpaddq_f32(v170, v170).u64[0];
    float32x2_t v171 = vpadd_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32);
    int8x8_t v172 = (int8x8_t)vcgt_f32(v51, v171);
    int8x16_t v54 = (int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8(v172, (int8x8_t)0x100000001), 0);
    int32x4_t v52 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v171, v48), v172), 0);
    float32x2_t v51 = v171;
  }
  int8x16_t v173 = (int8x16_t)v53;
  float32x4_t v174 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v51, v201), 0), v54), 0x1FuLL)), (int8x16_t)v55, v204);
  float32x4_t v175 = vmulq_f32(v174, v174);
  v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
  float32x2_t v176 = vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32);
  float32x2_t v177 = vrsqrte_f32(v176);
  int v178 = 4;
  do
  {
    float32x2_t v177 = vmul_f32(v177, vrsqrts_f32(vmul_f32(v177, v177), v176));
    --v178;
  }
  while (v178);
  float32x2_t v179 = vmul_f32(v176, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v176), 0), (int8x8_t)_D8, (int8x8_t)v177));
  float32x2_t v180 = vrecpe_f32(v179);
  int v181 = 4;
  do
  {
    float32x2_t v180 = vmul_f32(v180, vrecps_f32(v179, v180));
    --v181;
  }
  while (v181);
  int8x16_t v182 = (int8x16_t)vdupq_n_s32(-*(char *)(*(void *)(a1 + 8) + 32));
  int8x16_t v183 = (int8x16_t)vmulq_n_f32(v174, v180.f32[0]);
  v183.i32[3] = 0;
  float32x4_t v184 = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(v179), 0), v183));
  v184.i32[3] = 0;
  *a9 = v184;
  *a8 = v56;
  float32x4_t v185 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v54, 0x1FuLL)), v57, v173);
  float32x4_t v216 = v185;
  if (v218 == 3)
  {
    float32x2_t v219 = 0;
    float32x2_t v220 = 0;
    float32x4_t v212 = v184;
    int8x16_t v215 = v182;
    physx::Gu::barycentricCoordinates(&v216, &v229, &v230, v231, &v220, &v219);
    float32x4_t v184 = v212;
    int8x16_t v182 = v215;
    v54.i32[1] = v225.i32[1];
    float32x4_t v188 = vmulq_n_f32(vsubq_f32(v226, v225), v220.f32[0]);
    v188.i32[3] = 0;
    float32x4_t v189 = vmulq_n_f32(vsubq_f32(v227, v225), v219.f32[0]);
    v189.i32[3] = 0;
    float32x4_t v186 = vaddq_f32(v225, vaddq_f32(v188, v189));
    float v187 = a10;
  }
  else if (v218 == 2)
  {
    float32x4_t v190 = vsubq_f32(v229, v185);
    float32x4_t v191 = vsubq_f32(vsubq_f32(v230, v185), v190);
    float32x4_t v192 = vmulq_f32(v191, v191);
    v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
    float32x2_t v193 = vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32);
    float32x2_t v194 = vrecpe_f32(v193);
    int v195 = 4;
    float v187 = a10;
    do
    {
      float32x2_t v194 = vmul_f32(v194, vrecps_f32(v193, v194));
      --v195;
    }
    while (v195);
    float32x4_t v196 = vnegq_f32(v190);
    v196.i32[3] = 0;
    float32x4_t v197 = vmulq_f32(v196, v191);
    v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
    float32x4_t v186 = vmlaq_n_f32(v225, vsubq_f32(v226, v225), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v193), (int8x8_t)v194, 0), vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32)).f32[0]);
    v54.i32[1] = 0;
    v186.i64[1] = vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u32[0];
  }
  else
  {
    float32x4_t v186 = 0uLL;
    float v187 = a10;
    if (v218 == 1) {
      float32x4_t v186 = v225;
    }
  }
  v54.i32[0] = *(_DWORD *)(*(void *)(a1 + 8) + 16);
  int8x16_t v198 = (int8x16_t)vmlsq_lane_f32(v186, v184, *(float32x2_t *)v54.i8, 0);
  v198.i64[1] = vextq_s8(v198, v198, 8uLL).u32[0];
  *float v187 = vbslq_s8(v182, v198, (int8x16_t)v186);
  return v59 != -1;
}

void BoxTraceSegmentReport::~BoxTraceSegmentReport(BoxTraceSegmentReport *this)
{
}

BOOL BoxTraceSegmentReport::onEvent(BoxTraceSegmentReport *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v71 = 0;
  float32x4_t v70 = 0uLL;
  v3.i64[0] = *((void *)this + 7);
  v3.i64[1] = *((unsigned int *)this + 16);
  float32x4_t v69 = v3;
  if (a2)
  {
    uint64_t v6 = 0;
    BOOL v7 = 0;
    for (i = a2; i != v6; BOOL v7 = ++v6 >= i)
    {
      unsigned int v9 = a3[v6];
      physx::Gu::HeightFieldUtil::getTriangle(*((void *)this + 1), *((float **)this + 4), (uint64_t)v65, 0, 0, v9, 1, 1);
      v10.i64[0] = *(void *)v65;
      v10.i64[1] = *(unsigned int *)&v65[8];
      v11.i64[0] = *(void *)&v65[12];
      v11.i64[1] = v66;
      *(float32x2_t *)v12.f32 = v67;
      v12.i64[1] = v68;
      float32x4_t v13 = (float32x4_t *)*((void *)this + 3);
      float32x4_t v14 = *v13;
      v14.i32[3] = 0;
      float32x2_t v15 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)v13, 3).u64[0];
      LODWORD(v16) = vmla_f32((float32x2_t)0xBF000000BF000000, v15, v15).u32[0];
      float32x4_t v17 = vmulq_n_f32(v10, v16);
      v17.i32[3] = 0;
      float32x2_t v18 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      float32x2_t v19 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
      float32x2_t v20 = (float32x2_t)vext_s8(*(int8x8_t *)v13->f32, (int8x8_t)v18, 4uLL);
      int8x8_t v21 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v65, (int8x8_t)v19, 4uLL), *(float32x2_t *)v13->f32), v20, *(float32x2_t *)v65);
      *(int8x8_t *)v22.f32 = vext_s8(v21, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v65, v18), *(float32x2_t *)v13->f32, v19), 4uLL);
      v22.i64[1] = v21.u32[0];
      float32x4_t v23 = vmlaq_laneq_f32(v17, v22, *v13, 3);
      v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
      float32x4_t v24 = vmulq_f32(v10, v14);
      v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
      float32x4_t v25 = vmlaq_n_f32(v23, v14, vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).f32[0]);
      v25.i64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u32[0];
      v26.i64[0] = 0x4000000040000000;
      v26.i64[1] = 0x4000000040000000;
      float32x4_t v27 = vmlaq_f32(v13[1], v26, v25);
      v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
      float32x4_t v28 = vmulq_n_f32(v11, v16);
      v28.i32[3] = 0;
      v25.i64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
      int8x8_t v29 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)&v65[12], *(int8x8_t *)v25.f32, 4uLL), *(float32x2_t *)v13->f32), v20, *(float32x2_t *)&v65[12]);
      *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)&v65[12], v18), *(float32x2_t *)v13->f32, *(float32x2_t *)v25.f32), 4uLL);
      v30.i64[1] = v29.u32[0];
      float32x4_t v31 = vmlaq_laneq_f32(v28, v30, *v13, 3);
      v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
      float32x4_t v32 = vmulq_f32(v11, v14);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      float32x4_t v33 = vmlaq_n_f32(v31, v14, vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
      v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
      float32x4_t v34 = vmlaq_f32(v13[1], v26, v33);
      v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
      float32x4_t v35 = vmulq_n_f32(v12, v16);
      v35.i32[3] = 0;
      v30.i64[0] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
      *(float32x2_t *)v33.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v13->f32, (float32x2_t)vext_s8((int8x8_t)v67, *(int8x8_t *)v30.f32, 4uLL)), v20, v67);
      *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v33.f32, (int8x8_t)vmls_f32(vmul_f32(v67, v18), *(float32x2_t *)v13->f32, *(float32x2_t *)v30.f32), 4uLL);
      v36.i64[1] = v33.u32[0];
      float32x4_t v37 = vmlaq_laneq_f32(v35, v36, *v13, 3);
      v37.i64[1] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u32[0];
      float32x4_t v38 = vmulq_f32(v12, v14);
      v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
      float32x4_t v39 = vmlaq_n_f32(v37, v14, vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32).f32[0]);
      v39.i64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u32[0];
      float32x4_t v40 = vmlaq_f32(v13[1], v26, v39);
      v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
      if (!*((unsigned char *)this + 20))
      {
        float32x4_t v41 = vsubq_f32(v40, v34);
        int8x16_t v42 = (int8x16_t)vsubq_f32(v27, v34);
        int8x8_t v43 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v41.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL), *(float32x2_t *)v42.i8);
        *(int8x8_t *)v41.f32 = vext_s8(v43, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL), *(float32x2_t *)v42.i8), *(float32x2_t *)v41.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), 4uLL);
        v41.i64[1] = v43.u32[0];
        float32x4_t v44 = vmulq_f32(v41, v69);
        v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
        if (vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0] >= *(float *)&v71) {
          continue;
        }
      }
      char v61 = 0;
      float32x4_t v45 = vmulq_f32(vaddq_f32(v40, vaddq_f32(v27, v34)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
      v45.i32[3] = 0;
      float32x4_t v58 = v45;
      float32x4_t v62 = v27;
      float32x4_t v63 = v34;
      float32x4_t v64 = v40;
      uint64_t v59 = 0x7F7FFFFF00000000;
      uint64_t v60 = 0x57F7FFFFFLL;
      v57[0] = &unk_26E728A58;
      v57[1] = &v58;
      float32x2_t v46 = (float32x4_t *)*((void *)this + 5);
      v56[0] = &unk_26E728AB8;
      v56[1] = v46;
      float32x4_t v55 = 0u;
      float32x4_t v47 = vsubq_f32(v45, *v46);
      float32x4_t v55 = v47;
      v47.i32[0] = *((_DWORD *)this + 20);
      int8x16_t v73 = 0u;
      v74[0] = 0u;
      float32x2_t v72 = 0;
      if (physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v57, (uint64_t)v56, &v55, *(int32x2_t *)v47.f32, (uint64_t)&v71, &v70, &v69, &v72, (float32x4_t *)&v73, v74))
      {
        float v49 = *(float *)&v71;
        float32x2_t v48 = v72;
        int8x16_t v51 = v73;
        int8x16_t v50 = v74[0];
        *((unsigned char *)this + 18) = 1;
        if (v48.f32[0] <= v49)
        {
          uint64_t v54 = *((void *)this + 9);
          *(_DWORD *)(v54 + 48) = 0;
          *(_DWORD *)(v54 + 16) = v9;
          *((unsigned char *)this + 19) = 1;
          return v7;
        }
        if (COERCE_FLOAT(*((void *)this + 6)) > v48.f32[0])
        {
          *((float32x2_t *)this + 6) = v48;
          uint64_t v52 = *((void *)this + 9);
          *(_DWORD *)(v52 + 48) = v48.i32[0];
          *(void *)(v52 + 40) = vextq_s8(v51, v51, 4uLL).u64[0];
          v50.i32[3] = v51.i32[0];
          *(int8x16_t *)(v52 + 24) = v50;
          *(_DWORD *)(v52 + 16) = v9;
          if (*((unsigned char *)this + 21)) {
            return v7;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t physx::Gu::HeightFieldTraceUtil::OverlapTraceSegment<CapsuleTraceSegmentReport>::addIndex(uint64_t a1, int a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 364);
  if (v4 != 64
    || (v5 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 64, a1 + 108), unsigned int v4 = 0, result = 0, v5))
  {
    *(_DWORD *)(a1 + 364) = v4 + 1;
    *(_DWORD *)(a1 + 4 * v4 + 108) = a2;
    return 1;
  }
  return result;
}

uint64_t physx::Gu::intersectOBBOBB(float *a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v54 = *MEMORY[0x263EF8340];
  float v9 = *a5 - *a2;
  float v10 = a5[1] - a2[1];
  float v11 = a5[2] - a2[2];
  float v12 = (float)((float)(v10 * a3[1]) + (float)(v9 * *a3)) + (float)(v11 * a3[2]);
  float v13 = (float)((float)(v10 * a3[4]) + (float)(v9 * a3[3])) + (float)(v11 * a3[5]);
  float v14 = (float)((float)(v10 * a3[7]) + (float)(v9 * a3[6])) + (float)(v11 * a3[8]);
  *(float *)float32x4_t v35 = v12;
  *(float *)&v35[1] = v13;
  *(float *)&v35[2] = v14;
  do
  {
    uint64_t v15 = 0;
    float v16 = &a3[3 * v8];
    float v17 = *v16;
    float v18 = v16[1];
    float v19 = v16[2];
    float32x2_t v20 = (float *)(a6 + 8);
    do
    {
      float v21 = (float)(v18 * *(v20 - 1)) + (float)(v17 * *(v20 - 2));
      float v22 = *v20;
      v20 += 3;
      float v23 = v21 + (float)(v19 * v22);
      *(float *)((char *)&v45 + v7 + v15) = v23;
      *(float *)((char *)&v36 + v7 + v15) = fabsf(v23) + 0.000001;
      v15 += 4;
    }
    while (v15 != 12);
    ++v8;
    v7 += 12;
  }
  while (v8 != 3);
  uint64_t v24 = 0;
  float v25 = *a4;
  float v26 = a4[1];
  float v27 = a4[2];
  for (unint64_t i = &v38;
        fabsf(*(float *)&v35[v24]) <= (float)(a1[v24]
                                            + (float)((float)((float)(v26 * *(i - 1)) + (float)(v25 * *(i - 2)))
                                                    + (float)(v27 * *i)));
        i += 3)
  {
    if (++v24 == 3)
    {
      unint64_t v29 = 0;
      float v30 = *a1;
      float v31 = a1[1];
      float v32 = a1[2];
      while (fabsf((float)((float)(v13 * *(float *)((char *)&v48 + v29)) + (float)(v12 * *(float *)((char *)&v45 + v29)))+ (float)(v14 * *(float *)((char *)&v51 + v29))) <= (float)(a4[v29 / 4]+ (float)((float)((float)(v31* *(float *)((char *)&v39 + v29))+ (float)(v30* *(float *)((char *)&v36 + v29)))+ (float)(v32* *(float *)((char *)&v42 + v29)))))
      {
        v29 += 4;
        if (v29 == 12)
        {
          if (!a7) {
            return 1;
          }
          if (fabsf((float)(v14 * v48) - (float)(v13 * v51)) <= (float)((float)((float)(v32 * v39) + (float)(v31 * v42))
                                                                       + (float)((float)(v27 * v37) + (float)(v26 * v38)))
            && fabsf((float)(v52 * (float)-v13) + (float)(v14 * v49)) <= (float)((float)((float)(v32 * v40)
                                                                                       + (float)(v31 * v43))
                                                                               + (float)((float)(v27 * v36)
                                                                                       + (float)(v25 * v38)))
            && fabsf((float)(v53 * (float)-v13) + (float)(v14 * v50)) <= (float)((float)((float)(v26 * v36)
                                                                                       + (float)(v25 * v37))
                                                                               + (float)((float)(v32 * v41)
                                                                                       + (float)(v31 * v44)))
            && fabsf((float)(v12 * v51) - (float)(v14 * v45)) <= (float)((float)((float)(v32 * v36) + (float)(v30 * v42))
                                                                       + (float)((float)(v27 * v40) + (float)(v26 * v41)))
            && fabsf((float)(v46 * (float)-v14) + (float)(v12 * v52)) <= (float)((float)((float)(v32 * v37)
                                                                                       + (float)(v30 * v43))
                                                                               + (float)((float)(v27 * v39)
                                                                                       + (float)(v25 * v41)))
            && fabsf((float)(v47 * (float)-v14) + (float)(v12 * v53)) <= (float)((float)((float)(v26 * v39)
                                                                                       + (float)(v25 * v40))
                                                                               + (float)((float)(v32 * v38)
                                                                                       + (float)(v30 * v44)))
            && fabsf((float)(v13 * v45) - (float)(v12 * v48)) <= (float)((float)((float)(v31 * v36) + (float)(v30 * v39))
                                                                       + (float)((float)(v27 * v43) + (float)(v26 * v44))))
          {
            float v33 = -v12;
            if (fabsf((float)(v49 * v33) + (float)(v13 * v46)) <= (float)((float)((float)(v31 * v37)
                                                                                 + (float)(v30 * v40))
                                                                         + (float)((float)(v27 * v42)
                                                                                 + (float)(v25 * v44)))
              && fabsf((float)(v50 * v33) + (float)(v13 * v47)) <= (float)((float)((float)(v26 * v42)
                                                                                 + (float)(v25 * v43))
                                                                         + (float)((float)(v31 * v38)
                                                                                 + (float)(v30 * v41))))
            {
              return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    }
  }
  return 0;
}

BOOL physx::Gu::intersectCapsuleTriangle(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6 = *a2;
  float v7 = a2[1];
  float v8 = *a5;
  float v9 = a5[1];
  float v10 = *a2 - *a5;
  float v11 = v7 - v9;
  float v12 = a2[2];
  float v13 = a5[2];
  float v14 = v12 - v13;
  float v15 = *a6;
  float v16 = a6[1];
  float v17 = a6[2];
  float v18 = (float)((float)((float)(v7 - v9) * v16) + (float)(v10 * *a6)) + (float)((float)(v12 - v13) * v17);
  if (v18 > 0.0)
  {
    float v19 = (float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17);
    if (v18 >= v19)
    {
      float v10 = v10 - v15;
      float v11 = v11 - v16;
      float v14 = v14 - v17;
    }
    else
    {
      float v20 = v18 / v19;
      float v10 = v10 - (float)(v15 * v20);
      float v11 = v11 - (float)(v16 * v20);
      float v14 = v14 - (float)(v17 * v20);
    }
  }
  float v21 = (float)((float)(v11 * v11) + (float)(v10 * v10)) + (float)(v14 * v14);
  float v22 = a5[6];
  if (v21 <= (float)(v22 * v22)) {
    return 1;
  }
  float v23 = *a1;
  float v24 = a1[1];
  float v25 = a1[2];
  float v26 = (float)((float)(v9 * v24) + (float)(v8 * *a1)) + (float)(v13 * v25);
  float v27 = a5[3];
  float v28 = a5[4];
  float v29 = a5[5];
  float v30 = (float)((float)(v24 * v28) + (float)(v27 * *a1)) + (float)(v29 * v25);
  if (v26 <= v30) {
    float v31 = (float)((float)(v24 * v28) + (float)(v27 * *a1)) + (float)(v29 * v25);
  }
  else {
    float v31 = (float)((float)(v9 * v24) + (float)(v8 * *a1)) + (float)(v13 * v25);
  }
  if (v26 > v30) {
    float v26 = (float)((float)(v24 * v28) + (float)(v27 * *a1)) + (float)(v29 * v25);
  }
  float v32 = v22 * sqrtf((float)((float)(v24 * v24) + (float)(v23 * v23)) + (float)(v25 * v25));
  float v33 = v26 - v32;
  float v34 = v32 + v31;
  float v35 = (float)((float)(v7 * v24) + (float)(v6 * v23)) + (float)(v12 * v25);
  float v36 = *a3;
  float v37 = a3[1];
  float v38 = a3[2];
  float v39 = (float)((float)(v24 * v37) + (float)(*a3 * v23)) + (float)(v38 * v25);
  if (v39 >= v35) {
    float v40 = (float)((float)(v7 * v24) + (float)(v6 * v23)) + (float)(v12 * v25);
  }
  else {
    float v40 = (float)((float)(v24 * v37) + (float)(*a3 * v23)) + (float)(v38 * v25);
  }
  if (v39 <= v35) {
    float v41 = (float)((float)(v7 * v24) + (float)(v6 * v23)) + (float)(v12 * v25);
  }
  else {
    float v41 = (float)((float)(v24 * v37) + (float)(*a3 * v23)) + (float)(v38 * v25);
  }
  float v42 = *a4;
  float v43 = a4[1];
  float v44 = (float)(v24 * v43) + (float)(*a4 * v23);
  float v45 = a4[2];
  float v46 = v44 + (float)(v45 * v25);
  if (v46 >= v40) {
    float v47 = v40;
  }
  else {
    float v47 = v46;
  }
  if (v46 <= v41) {
    float v46 = v41;
  }
  if (v34 < v47 || v46 < v33) {
    return 0;
  }
  float v49 = v36 - v6;
  float v50 = v37 - v7;
  float v51 = v38 - v12;
  float v52 = a6[3];
  float v133 = a6[4];
  float v53 = (float)((float)(v50 * v50) + (float)(v49 * v49)) + (float)(v51 * v51);
  float v54 = (float)((float)(v16 * (float)(v37 - v7)) + (float)((float)(v36 - v6) * v15)) + (float)((float)(v38 - v12) * v17);
  float v55 = (float)((float)((float)(v9 - v7) * (float)(v37 - v7)) + (float)((float)(v36 - v6) * (float)(v8 - v6)))
      + (float)((float)(v38 - v12) * (float)(v13 - v12));
  float v56 = (float)(v53 * v52) - (float)(v54 * v54);
  float v57 = 0.0;
  if (v56 != 0.0) {
    float v57 = (float)((float)(v54
  }
                        * (float)-(float)((float)((float)((float)(v9 - v7) * v16) + (float)(v15 * (float)(v8 - v6)))
                                        + (float)(v17 * (float)(v13 - v12))))
                + (float)(v55 * v52))
        / v56;
  float v132 = a6[3];
  if (v57 < 0.0) {
    float v57 = 0.0;
  }
  float v58 = v57 <= 1.0 ? v57 : 1.0;
  float v59 = v133
      * (float)((float)(v58 * v54)
              - (float)((float)((float)((float)(v9 - v7) * v16) + (float)(v15 * (float)(v8 - v6)))
                      + (float)(v17 * (float)(v13 - v12))));
  if (v59 >= 0.0)
  {
    float v61 = a5[3];
    if (v59 > 1.0)
    {
      float v63 = (float)(v54 + v55) / v53;
      if (v63 < 0.0) {
        float v63 = 0.0;
      }
      float v59 = 1.0;
      if (v63 <= 1.0) {
        float v58 = v63;
      }
      else {
        float v58 = 1.0;
      }
    }
  }
  else
  {
    float v60 = v55 / v53;
    float v59 = 0.0;
    if ((float)(v55 / v53) < 0.0) {
      float v60 = 0.0;
    }
    float v58 = v60 <= 1.0 ? v60 : 1.0;
    float v61 = a5[3];
  }
  float v64 = (float)((float)(v8 - v6) + (float)(v15 * v59)) - (float)(v49 * v58);
  float v65 = (float)((float)(v9 - v7) + (float)(v16 * v59)) - (float)(v50 * v58);
  float v66 = (float)((float)(v13 - v12) + (float)(v17 * v59)) - (float)(v51 * v58);
  float v67 = (float)((float)(v9 * v65) + (float)(v8 * v64)) + (float)(v13 * v66);
  float v68 = (float)((float)(v28 * v65) + (float)(v61 * v64)) + (float)(v29 * v66);
  if (v67 <= v68) {
    float v69 = (float)((float)(v28 * v65) + (float)(v61 * v64)) + (float)(v29 * v66);
  }
  else {
    float v69 = (float)((float)(v9 * v65) + (float)(v8 * v64)) + (float)(v13 * v66);
  }
  if (v67 > v68) {
    float v67 = (float)((float)(v28 * v65) + (float)(v61 * v64)) + (float)(v29 * v66);
  }
  float v70 = v22 * sqrtf((float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66));
  float v71 = v67 - v70;
  float v72 = v69 + v70;
  float v73 = (float)((float)(v7 * v65) + (float)(v6 * v64)) + (float)(v12 * v66);
  float v74 = (float)((float)(v37 * v65) + (float)(v36 * v64)) + (float)(v38 * v66);
  if (v74 >= v73) {
    float v75 = (float)((float)(v7 * v65) + (float)(v6 * v64)) + (float)(v12 * v66);
  }
  else {
    float v75 = (float)((float)(v37 * v65) + (float)(v36 * v64)) + (float)(v38 * v66);
  }
  if (v74 > v73) {
    float v73 = (float)((float)(v37 * v65) + (float)(v36 * v64)) + (float)(v38 * v66);
  }
  float v76 = (float)((float)(v43 * v65) + (float)(v42 * v64)) + (float)(v45 * v66);
  if (v76 >= v75) {
    float v77 = v75;
  }
  else {
    float v77 = v76;
  }
  if (v76 <= v73) {
    float v76 = v73;
  }
  if (v72 < v77 || v76 < v71) {
    return 0;
  }
  float v79 = v42 - v36;
  float v80 = v43 - v37;
  float v81 = v45 - v38;
  float v82 = (float)((float)(v80 * v80) + (float)(v79 * v79)) + (float)(v81 * v81);
  float v83 = (float)((float)(v16 * (float)(v43 - v37)) + (float)((float)(v42 - v36) * v15))
      + (float)((float)(v45 - v38) * v17);
  float v84 = (float)((float)((float)(v9 - v37) * (float)(v43 - v37)) + (float)((float)(v42 - v36) * (float)(v8 - v36)))
      + (float)((float)(v45 - v38) * (float)(v13 - v38));
  float v85 = (float)(v82 * v132) - (float)(v83 * v83);
  float v86 = 0.0;
  if (v85 != 0.0) {
    float v86 = (float)((float)(v83
  }
                        * (float)-(float)((float)((float)(v16 * (float)(v9 - v37)) + (float)(v15 * (float)(v8 - v36)))
                                        + (float)(v17 * (float)(v13 - v38))))
                + (float)(v84 * v132))
        / v85;
  if (v86 < 0.0) {
    float v86 = 0.0;
  }
  float v87 = v86 <= 1.0 ? v86 : 1.0;
  float v88 = v133
      * (float)((float)(v87 * v83)
              - (float)((float)((float)(v16 * (float)(v9 - v37)) + (float)(v15 * (float)(v8 - v36)))
                      + (float)(v17 * (float)(v13 - v38))));
  if (v88 >= 0.0)
  {
    float v90 = a5[3];
    if (v88 > 1.0)
    {
      float v91 = (float)(v83 + v84) / v82;
      if (v91 < 0.0) {
        float v91 = 0.0;
      }
      float v88 = 1.0;
      if (v91 <= 1.0) {
        float v87 = v91;
      }
      else {
        float v87 = 1.0;
      }
    }
  }
  else
  {
    float v89 = v84 / v82;
    float v88 = 0.0;
    if ((float)(v84 / v82) < 0.0) {
      float v89 = 0.0;
    }
    float v87 = v89 <= 1.0 ? v89 : 1.0;
    float v90 = a5[3];
  }
  float v92 = (float)((float)(v8 - v36) + (float)(v15 * v88)) - (float)(v79 * v87);
  float v93 = (float)((float)(v9 - v37) + (float)(v16 * v88)) - (float)(v80 * v87);
  float v94 = (float)((float)(v13 - v38) + (float)(v17 * v88)) - (float)(v81 * v87);
  float v95 = (float)((float)(v9 * v93) + (float)(v8 * v92)) + (float)(v13 * v94);
  float v96 = (float)((float)(v28 * v93) + (float)(v90 * v92)) + (float)(v29 * v94);
  if (v95 <= v96) {
    float v97 = (float)((float)(v28 * v93) + (float)(v90 * v92)) + (float)(v29 * v94);
  }
  else {
    float v97 = (float)((float)(v9 * v93) + (float)(v8 * v92)) + (float)(v13 * v94);
  }
  if (v95 > v96) {
    float v95 = (float)((float)(v28 * v93) + (float)(v90 * v92)) + (float)(v29 * v94);
  }
  float v98 = v22 * sqrtf((float)((float)(v93 * v93) + (float)(v92 * v92)) + (float)(v94 * v94));
  float v99 = v95 - v98;
  float v100 = v97 + v98;
  float v101 = (float)((float)(v7 * v93) + (float)(v6 * v92)) + (float)(v12 * v94);
  float v102 = (float)((float)(v37 * v93) + (float)(v36 * v92)) + (float)(v38 * v94);
  if (v102 >= v101) {
    float v103 = (float)((float)(v7 * v93) + (float)(v6 * v92)) + (float)(v12 * v94);
  }
  else {
    float v103 = (float)((float)(v37 * v93) + (float)(v36 * v92)) + (float)(v38 * v94);
  }
  if (v102 > v101) {
    float v101 = (float)((float)(v37 * v93) + (float)(v36 * v92)) + (float)(v38 * v94);
  }
  float v104 = (float)((float)(v43 * v93) + (float)(v42 * v92)) + (float)(v45 * v94);
  if (v104 >= v103) {
    float v105 = v103;
  }
  else {
    float v105 = v104;
  }
  if (v104 <= v101) {
    float v104 = v101;
  }
  if (v100 < v105 || v104 < v99) {
    return 0;
  }
  float v107 = v6 - v42;
  float v108 = v7 - v43;
  float v109 = v12 - v45;
  float v110 = (float)((float)(v108 * v108) + (float)(v107 * v107)) + (float)(v109 * v109);
  float v111 = (float)((float)(v16 * (float)(v7 - v43)) + (float)((float)(v6 - v42) * v15))
       + (float)((float)(v12 - v45) * v17);
  float v112 = (float)((float)((float)(v7 - v43) * (float)(v9 - v43)) + (float)((float)(v6 - v42) * (float)(v8 - v42)))
       + (float)((float)(v12 - v45) * (float)(v13 - v45));
  float v113 = (float)(v110 * v132) - (float)(v111 * v111);
  float v114 = 0.0;
  float v115 = 0.0;
  if (v113 != 0.0) {
    float v115 = (float)((float)(v111
  }
                         * (float)-(float)((float)((float)(v16 * (float)(v9 - v43)) + (float)(v15 * (float)(v8 - v42)))
                                         + (float)(v17 * (float)(v13 - v45))))
                 + (float)(v112 * v132))
         / v113;
  if (v115 >= 0.0) {
    float v114 = v115;
  }
  if (v114 <= 1.0) {
    float v116 = v114;
  }
  else {
    float v116 = 1.0;
  }
  float v117 = v133
       * (float)((float)(v116 * v111)
               - (float)((float)((float)(v16 * (float)(v9 - v43)) + (float)(v15 * (float)(v8 - v42)))
                       + (float)(v17 * (float)(v13 - v45))));
  if (v117 >= 0.0)
  {
    float v118 = a5[3];
    if (v117 > 1.0)
    {
      float v116 = 0.0;
      if ((float)((float)(v111 + v112) / v110) >= 0.0) {
        float v116 = (float)(v111 + v112) / v110;
      }
      float v117 = 1.0;
      if (v116 > 1.0) {
        float v116 = 1.0;
      }
    }
  }
  else
  {
    float v116 = v112 / v110;
    float v117 = 0.0;
    if ((float)(v112 / v110) < 0.0) {
      float v116 = 0.0;
    }
    if (v116 > 1.0) {
      float v116 = 1.0;
    }
    float v118 = a5[3];
  }
  float v119 = (float)((float)(v8 - v42) + (float)(v15 * v117)) - (float)(v107 * v116);
  float v120 = (float)((float)(v9 - v43) + (float)(v16 * v117)) - (float)(v108 * v116);
  float v121 = (float)((float)(v13 - v45) + (float)(v17 * v117)) - (float)(v109 * v116);
  float v122 = (float)((float)(v9 * v120) + (float)(v8 * v119)) + (float)(v13 * v121);
  float v123 = (float)((float)(v28 * v120) + (float)(v118 * v119)) + (float)(v29 * v121);
  if (v122 <= v123) {
    float v124 = (float)((float)(v28 * v120) + (float)(v118 * v119)) + (float)(v29 * v121);
  }
  else {
    float v124 = v122;
  }
  if (v122 > v123) {
    float v122 = (float)((float)(v28 * v120) + (float)(v118 * v119)) + (float)(v29 * v121);
  }
  float v125 = v22 * sqrtf((float)((float)(v120 * v120) + (float)(v119 * v119)) + (float)(v121 * v121));
  float v126 = v122 - v125;
  float v127 = v124 + v125;
  float v128 = (float)((float)(v7 * v120) + (float)(v6 * v119)) + (float)(v12 * v121);
  float v129 = (float)((float)(v37 * v120) + (float)(v36 * v119)) + (float)(v38 * v121);
  if (v129 >= v128) {
    float v130 = v128;
  }
  else {
    float v130 = (float)((float)(v37 * v120) + (float)(v36 * v119)) + (float)(v38 * v121);
  }
  if (v129 > v128) {
    float v128 = (float)((float)(v37 * v120) + (float)(v36 * v119)) + (float)(v38 * v121);
  }
  float v131 = (float)((float)(v43 * v120) + (float)(v42 * v119)) + (float)(v45 * v121);
  if (v131 < v130) {
    float v130 = (float)((float)(v43 * v120) + (float)(v42 * v119)) + (float)(v45 * v121);
  }
  if (v131 > v128) {
    float v128 = (float)((float)(v43 * v120) + (float)(v42 * v119)) + (float)(v45 * v121);
  }
  return v128 >= v126 && v127 >= v130;
}

BOOL physx::Gu::intersectEdgeEdge(float *a1, float *a2, float32x2_t *a3, float *a4, float *a5, float *a6, float32x2_t *a7)
{
  float v7 = *a1;
  float v8 = a1[1];
  float v9 = a2[1] - v8;
  float v10 = a1[2];
  float v11 = a2[2] - v10;
  v41[0] = *a2 - *a1;
  v41[1] = v9;
  v41[2] = v11;
  float v13 = a3->f32[1];
  float v12 = a3[1].f32[0];
  float v14 = (float)(v9 * v12) - (float)(v11 * v13);
  float v15 = (float)(v11 * a3->f32[0]) - (float)(v41[0] * v12);
  float v16 = (float)(v41[0] * v13) - (float)(v9 * a3->f32[0]);
  float v17 = (float)((float)(v8 * v15) + (float)(v14 * v7)) + (float)(v16 * v10);
  float v18 = *a4;
  float v19 = a4[1];
  float v20 = a4[2];
  float v21 = (float)((float)((float)(v15 * v19) + (float)(*a4 * v14)) + (float)(v20 * v16)) - v17;
  float v22 = a5[1];
  float v23 = a5[2];
  if ((float)(v21 * (float)((float)((float)((float)(v15 * v22) + (float)(*a5 * v14)) + (float)(v23 * v16)) - v17)) > 0.0) {
    return 0;
  }
  float v24 = *a5 - v18;
  float v25 = v22 - v19;
  float v26 = v23 - v20;
  float v27 = (float)((float)(v15 * v25) + (float)(v14 * v24)) + (float)(v16 * v26);
  if (v27 == 0.0) {
    return 0;
  }
  float v28 = v21 / v27;
  a7->f32[0] = v18 - (float)(v24 * v28);
  a7->f32[1] = v19 - (float)(v25 * v28);
  a7[1].f32[0] = v20 - (float)(v26 * v28);
  float v29 = fabsf(v14);
  float v30 = fabsf(v15);
  float v31 = fabsf(v16);
  if (v30 > v29 && v30 > v31)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 2;
LABEL_10:
    uint64_t v35 = v33;
    uint64_t v33 = v34;
    goto LABEL_12;
  }
  uint64_t v33 = 1;
  if (v31 > v29)
  {
    uint64_t v34 = 0;
    goto LABEL_10;
  }
  uint64_t v35 = 2;
LABEL_12:
  float v36 = (float)((float)(v41[v33] * (float)(a7->f32[v35] - a1[v35])) - (float)(v41[v35] * (float)(a7->f32[v33] - a1[v33])))
      / (float)((float)(v41[v33] * a3->f32[v35]) - (float)(v41[v35] * a3->f32[v33]));
  *a6 = v36;
  if (v36 < 0.0) {
    return 0;
  }
  float v38 = v36 * a3[1].f32[0];
  float32x2_t v39 = vsub_f32(*a7, vmul_n_f32(*a3, v36));
  *a7 = v39;
  float32_t v40 = a7[1].f32[0] - v38;
  a7[1].f32[0] = v40;
  return (float)((float)((float)((float)(a1[1] - v39.f32[1]) * (float)(a2[1] - v39.f32[1]))
                       + (float)((float)(*a1 - v39.f32[0]) * (float)(*a2 - v39.f32[0])))
               + (float)((float)(a1[2] - v40) * (float)(a2[2] - v40))) < 0.001;
}

uint64_t physx::Gu::rayAABBIntersect2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  float v26 = -1.0;
  int v13 = 1;
  do
  {
    float v14 = *(float *)(a3 + v6);
    float v15 = *(float *)(a1 + v6);
    if (v14 >= v15)
    {
      float v17 = (float *)(a2 + v6);
      float v18 = *(float *)(a2 + v6);
      if (v14 <= v18) {
        goto LABEL_9;
      }
      *(float *)(a5 + v6) = v18;
      float v16 = *(float *)(a4 + v6);
      if (v16 != 0.0) {
        goto LABEL_7;
      }
    }
    else
    {
      *(float *)(a5 + v6) = v15;
      float v16 = *(float *)(a4 + v6);
      if (v16 != 0.0)
      {
        float v17 = (float *)(a1 + 4 * v7);
LABEL_7:
        int v13 = 0;
        *(float *)((char *)&v24 + v6) = (float)(*v17 - *(float *)(a3 + v6)) / v16;
        goto LABEL_9;
      }
    }
    int v13 = 0;
LABEL_9:
    ++v7;
    v6 += 4;
  }
  while (v6 != 12);
  if (v13)
  {
    *(void *)a5 = *(void *)a3;
    *(_DWORD *)(a5 + 8) = *(_DWORD *)(a3 + 8);
    *a6 = 0.0;
    return 1;
  }
  else
  {
    if (v26 <= *(float *)((unint64_t)&v24 | (4 * (v25 > v24)))) {
      uint64_t v20 = v25 > v24;
    }
    else {
      uint64_t v20 = 2;
    }
    float v21 = *(&v24 + v20);
    if ((LODWORD(v21) & 0x80000000) == 0)
    {
      uint64_t v22 = 0;
      while (1)
      {
        if (4 * v20 != v22)
        {
          float v23 = *(float *)(a3 + v22) + (float)(v21 * *(float *)(a4 + v22));
          *(float *)(a5 + v22) = v23;
          if (v23 < (float)(*(float *)(a1 + v22) + -0.00001) || v23 > (float)(*(float *)(a2 + v22) + 0.00001)) {
            break;
          }
        }
        v22 += 4;
        if (v22 == 12)
        {
          *a6 = v21;
          return (v20 + 1);
        }
      }
    }
    return 0;
  }
}

uint64_t physx::Gu::intersectRayAABB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, float *a6)
{
  uint64_t v6 = 0;
  *a5 = -3.4028e38;
  *a6 = 3.4028e38;
  float v7 = 3.4028e38;
  unsigned int v8 = -1;
  do
  {
    float v9 = *(float *)(a4 + 4 * v6);
    if (v9 > -0.00000011921 && v9 < 0.00000011921)
    {
      float v20 = *(float *)(a3 + 4 * v6);
      if (v20 < *(float *)(a1 + 4 * v6) || v20 > *(float *)(a2 + 4 * v6)) {
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      float v11 = *(float *)(a3 + 4 * v6);
      float v12 = 1.0 / v9;
      float v13 = v12 * (float)(*(float *)(a1 + 4 * v6) - v11);
      float v14 = *(float *)(a2 + 4 * v6) - v11;
      float v15 = v12 * v14;
      if (v13 <= (float)(v12 * v14)) {
        float v16 = v12 * (float)(*(float *)(a1 + 4 * v6) - v11);
      }
      else {
        float v16 = v12 * v14;
      }
      if (v13 <= (float)(v12 * v14)) {
        float v17 = v12 * v14;
      }
      else {
        float v17 = v13;
      }
      float v18 = *a5;
      if (v16 > *a5)
      {
        if (v13 <= v15) {
          unsigned int v8 = v6;
        }
        else {
          unsigned int v8 = v6 + 3;
        }
        *a5 = v16;
        float v7 = *a6;
        float v18 = v16;
      }
      if (v17 < v7)
      {
        *a6 = v17;
        float v18 = *a5;
        float v7 = v17;
      }
      uint64_t v19 = 0xFFFFFFFFLL;
      if (v7 < 0.00000011921 || v18 > v7) {
        return v19;
      }
    }
    ++v6;
  }
  while (v6 != 3);
  if (*a5 > v7 || v7 < 0.00000011921) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v8;
  }
}

BOOL physx::Gu::intersectRayAABB2(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float *a5, float *a6, float a7)
{
  float32x2_t v7 = vmaxnm_f32(vabs_f32(*a4), (float32x2_t)vdup_n_s32(0x3089705Fu));
  float32x2_t v8 = (float32x2_t)vbsl_s8((int8x8_t)vcgez_f32(*a4), (int8x8_t)v7, (int8x8_t)vneg_f32(v7));
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v14 = vdiv_f32(_D2, v8);
  float32x2_t v15 = vmul_f32(vsub_f32(vadd_f32(*a1, (float32x2_t)vdup_n_s32(0xB727C5AC)), *a3), v14);
  float32x2_t v16 = vmul_f32(vsub_f32(vadd_f32(*a2, (float32x2_t)vdup_n_s32(0x3727C5ACu)), *a3), v14);
  int8x8_t v17 = vbsl_s8((int8x8_t)vcgt_f32(v16, v15), (int8x8_t)v15, (int8x8_t)v16);
  int8x8_t v18 = vbsl_s8((int8x8_t)vcgt_f32(v15, v16), (int8x8_t)v15, (int8x8_t)v16);
  v15.i32[0] = a4[1].i32[0];
  float v19 = fmaxf(fabsf(v15.f32[0]), 0.000000001);
  if (v15.f32[0] < 0.0) {
    float v20 = -v19;
  }
  else {
    float v20 = v19;
  }
  float v21 = 1.0 / v20;
  float v22 = a3[1].f32[0];
  float v23 = (float)((float)(a1[1].f32[0] + -0.00001) - v22) * v21;
  float v24 = (float)((float)(a2[1].f32[0] + 0.00001) - v22) * v21;
  if (v23 >= v24) {
    float v25 = v24;
  }
  else {
    float v25 = v23;
  }
  if (v23 > v24) {
    float v24 = v23;
  }
  if (*(float *)v17.i32 <= *(float *)&v17.i32[1]) {
    v17.i32[0] = v17.i32[1];
  }
  if (*(float *)v17.i32 <= v25) {
    *(float *)v17.i32 = v25;
  }
  if (*(float *)v18.i32 >= *(float *)&v18.i32[1]) {
    v18.i32[0] = v18.i32[1];
  }
  if (*(float *)v18.i32 >= v24) {
    *(float *)v18.i32 = v24;
  }
  *a5 = fmaxf(*(float *)v17.i32, 0.0);
  if (*(float *)v18.i32 < a7) {
    a7 = *(float *)v18.i32;
  }
  *a6 = a7;
  return *a5 < a7;
}

void physx::Gu::intersectRayCapsuleInternal(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4, float *a5, float a6)
{
  float v7 = a4[1];
  float v9 = *a3;
  float v8 = a3[1];
  float v10 = *a4 - *a3;
  float v11 = v7 - v8;
  float v12 = a4[2];
  float v13 = a3[2];
  float v14 = v12 - v13;
  float v15 = sqrtf((float)((float)(v11 * v11) + (float)(v10 * v10)) + (float)(v14 * v14));
  if (v15 != 0.0)
  {
    float v10 = v10 * (float)(1.0 / v15);
    float v11 = v11 * (float)(1.0 / v15);
    float v14 = v14 * (float)(1.0 / v15);
  }
  if (v15 <= 0.000001)
  {
    float v21 = a1->f32[1];
    float v22 = v21 - v8;
    float v23 = a1[1].f32[0];
    float v24 = v23 - v13;
    float v25 = v22 * v22;
    float v26 = (float)((float)((float)(v21 - v7) * (float)(v21 - v7))
                + (float)((float)(a1->f32[0] - *a4) * (float)(a1->f32[0] - *a4)))
        + (float)((float)(v23 - v12) * (float)(v23 - v12));
    if ((float)((float)(v25 + (float)((float)(a1->f32[0] - v9) * (float)(a1->f32[0] - v9))) + (float)(v24 * v24)) > v26) {
      float v26 = (float)(v25 + (float)((float)(a1->f32[0] - v9) * (float)(a1->f32[0] - v9))) + (float)(v24 * v24);
    }
    physx::Gu::intersectRaySphere(a1, a2, a3, a5, 0, (float)(v26 + a6) + (float)(v26 + a6), a6);
    return;
  }
  float v16 = 0.0;
  if (v15 <= 0.0)
  {
    float v20 = 0.0;
    float v19 = 0.0;
  }
  else
  {
    float v17 = v14 * v14;
    if (fabsf(v10) >= fabsf(v11))
    {
      float v27 = 1.0 / sqrtf(v17 + (float)(v10 * v10));
      float v20 = -(float)(v14 * v27);
      float v19 = v10 * v27;
    }
    else
    {
      float v18 = 1.0 / sqrtf(v17 + (float)(v11 * v11));
      float v16 = v14 * v18;
      float v19 = -(float)(v11 * v18);
      float v20 = 0.0;
    }
  }
  float v28 = (float)(v11 * v19) - (float)(v14 * v16);
  float v29 = (float)(v14 * v20) - (float)(v10 * v19);
  float v30 = (float)(v10 * v16) - (float)(v11 * v20);
  float v31 = sqrtf((float)((float)(v29 * v29) + (float)(v28 * v28)) + (float)(v30 * v30));
  if (v31 > 0.0)
  {
    float v32 = 1.0 / v31;
    float v28 = v28 * v32;
    float v29 = v29 * v32;
    float v30 = v30 * v32;
  }
  float v33 = a2->f32[1];
  float v34 = a2[1].f32[0];
  float v35 = (float)((float)(v16 * v33) + (float)(v20 * a2->f32[0])) + (float)(v19 * v34);
  float v36 = (float)((float)(v29 * v33) + (float)(v28 * a2->f32[0])) + (float)(v30 * v34);
  float v37 = (float)((float)(v11 * v33) + (float)(v10 * a2->f32[0])) + (float)(v14 * v34);
  float v38 = sqrtf((float)((float)(v36 * v36) + (float)(v35 * v35)) + (float)(v37 * v37));
  float v39 = 1.0 / v38;
  if (v38 == 0.0) {
    float v39 = 0.0;
  }
  float v40 = a1->f32[0] - v9;
  float v41 = a1->f32[1] - v8;
  float v42 = a1[1].f32[0] - v13;
  float v43 = (float)((float)(v16 * v41) + (float)(v20 * v40)) + (float)(v19 * v42);
  float v44 = (float)((float)(v29 * v41) + (float)(v28 * v40)) + (float)(v30 * v42);
  float v45 = (float)((float)(v11 * v41) + (float)(v10 * v40)) + (float)(v14 * v42);
  float v46 = a6 * a6;
  if (v38 < 0.00000011921 || (float v47 = v37 * v39, fabsf(v37 * v39) >= 1.0))
  {
    float v52 = (float)(v46 - (float)(v43 * v43)) - (float)(v44 * v44);
    if (v37 >= 0.0 || v52 < 0.0)
    {
      if (v37 <= 0.0 || v52 < 0.0) {
        return;
      }
      float v61 = sqrtf(v52);
      float v54 = -(float)((float)(v45 + v61) * v39);
      float v55 = v39 * (float)((float)(v15 - v45) + v61);
    }
    else
    {
      float v53 = sqrtf(v52);
      float v54 = v39 * (float)(v45 + v53);
      float v55 = -(float)((float)((float)(v15 - v45) + v53) * v39);
    }
    *a5 = v54;
    a5[1] = v55;
    return;
  }
  float v48 = (float)((float)(v36 * v39) * (float)(v36 * v39)) + (float)((float)(v35 * v39) * (float)(v35 * v39));
  float v49 = (float)(v44 * (float)(v36 * v39)) + (float)(v43 * (float)(v35 * v39));
  float v50 = (float)((float)(v44 * v44) + (float)(v43 * v43)) - v46;
  float v51 = (float)(v49 * v49) - (float)(v48 * v50);
  if (v51 < 0.0) {
    return;
  }
  if (v51 <= 0.0)
  {
    float v62 = (float)-v49 / v48;
    float v63 = v45 + (float)(v62 * v47);
    if (v63 >= 0.0 && v63 <= v15)
    {
      *a5 = v39 * v62;
      return;
    }
    unsigned int v60 = 0;
  }
  else
  {
    float v56 = sqrtf(v51);
    float v57 = (float)(1.0 / v48) * (float)((float)-v49 - v56);
    float v58 = v45 + (float)(v57 * v47);
    BOOL v59 = v58 >= -0.001;
    if (v58 > (float)(v15 + 0.001)) {
      BOOL v59 = 0;
    }
    if (v59)
    {
      *a5 = v39 * v57;
      unsigned int v60 = 1;
    }
    else
    {
      unsigned int v60 = 0;
    }
    float v65 = (float)(1.0 / v48) * (float)(v56 - v49);
    float v66 = v45 + (float)(v65 * v47);
    if (v66 >= -0.001 && v66 <= (float)(v15 + 0.001))
    {
      a5[v60] = v39 * v65;
      if (v59) {
        return;
      }
      unsigned int v60 = 1;
    }
  }
  float v68 = v49 + (float)(v45 * v47);
  float v69 = v50 + (float)(v45 * v45);
  float v70 = -(float)(v69 - (float)(v68 * v68));
  if (v70 <= 0.0)
  {
    if (v70 != 0.0 || (float)(v45 - (float)(v68 * v47)) > 0.0) {
      goto LABEL_57;
    }
    float v73 = -v68;
  }
  else
  {
    float v71 = sqrtf(v70);
    float v72 = (float)-v68 - v71;
    if ((float)(v45 + (float)(v72 * v47)) <= 0.0)
    {
      a5[v60] = v39 * v72;
      if (v60) {
        return;
      }
      unsigned int v60 = 1;
    }
    float v73 = v71 - v68;
    if ((float)(v45 + (float)(v73 * v47)) > 0.0) {
      goto LABEL_57;
    }
  }
  a5[v60] = v39 * v73;
  if (v60) {
    return;
  }
  unsigned int v60 = 1;
LABEL_57:
  float v74 = v68 - (float)(v47 * v15);
  float v75 = -(float)((float)(v69 + (float)(v15 * (float)(v15 + (float)(v45 * -2.0)))) - (float)(v74 * v74));
  if (v75 <= 0.0)
  {
    if (v75 == 0.0 && (float)(v45 - (float)(v74 * v47)) >= v15)
    {
      float v79 = v39 * (float)-v74;
      goto LABEL_66;
    }
  }
  else
  {
    float v76 = sqrtf(v75);
    float v77 = (float)-v74 - v76;
    if ((float)(v45 + (float)(v77 * v47)) >= v15)
    {
      a5[v60] = v39 * v77;
      if (v60) {
        return;
      }
      unsigned int v60 = 1;
    }
    float v78 = v76 - v74;
    if ((float)(v45 + (float)(v78 * v47)) >= v15)
    {
      float v79 = v39 * v78;
LABEL_66:
      a5[v60] = v79;
    }
  }
}

float physx::Gu::intersectRaySphere(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4, uint64_t a5, float a6, float a7)
{
  float v8 = a1[1].f32[0];
  float v9 = a2[1].f32[0];
  float v10 = fmaxf((float)(sqrtf((float)((float)((float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)) - a3[1])* (float)(COERCE_FLOAT(HIDWORD(*(unint64_t *)a1)) - a3[1]))+ (float)((float)(COERCE_FLOAT(*a1) - *a3) * (float)(COERCE_FLOAT(*a1) - *a3)))+ (float)((float)(v8 - a3[2]) * (float)(v8 - a3[2])))- a7)+ -10.0, 0.0);
  float32x2_t v13 = vadd_f32(*a1, vmul_n_f32(*a2, v10));
  float v14 = v8 + (float)(v9 * v10);
  float v12 = v10;
  if (physx::Gu::intersectRaySphereBasic(&v13, a2, a3, a4, a5, a6 - v10, a7))
  {
    float result = v12 + *a4;
    *a4 = result;
  }
  return result;
}

uint64_t physx::Gu::intersectRaySphereBasic(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4, uint64_t a5, float a6, float a7)
{
  float v7 = a1->f32[1];
  float v8 = *a3 - a1->f32[0];
  float v9 = a3[1] - v7;
  float v10 = a1[1].f32[0];
  float v11 = a3[2] - v10;
  float v12 = (float)((float)(v9 * v9) + (float)(v8 * v8)) + (float)(v11 * v11);
  if (v12 <= (float)(a7 * a7))
  {
    if (a5)
    {
      *(_DWORD *)a5 = a1->i32[0];
      *(float *)(a5 + 4) = v7;
      *(float *)(a5 + 8) = v10;
    }
    *a4 = 0.0;
  }
  else
  {
    float v13 = (float)((float)(v9 * a2->f32[1]) + (float)(a2->f32[0] * v8)) + (float)(a2[1].f32[0] * v11);
    if (v13 <= 0.0 || (float)(v13 - a6) > a7) {
      return 0;
    }
    float v15 = (float)(a7 * a7) - (float)(v12 - (float)(v13 * v13));
    if (v15 < 0.0) {
      return 0;
    }
    float v16 = v13 - sqrtf(v15);
    *a4 = v16;
    if (v16 > a6) {
      return 0;
    }
    if (a5)
    {
      float v18 = (float)(v16 * a2[1].f32[0]) + a1[1].f32[0];
      *(float32x2_t *)a5 = vadd_f32(vmul_n_f32(*a2, v16), *a1);
      *(float *)(a5 + 8) = v18;
    }
  }
  return 1;
}

BOOL physx::Gu::intersectSphereBox(physx::Gu *this, const Sphere *a2, const physx::Gu::Box *a3)
{
  float v3 = *((float *)a2 + 8);
  float v4 = *(float *)this - *((float *)a2 + 9);
  float v5 = *((float *)this + 1) - *((float *)a2 + 10);
  float v6 = *((float *)this + 2) - *((float *)a2 + 11);
  float v7 = *((float *)a2 + 1);
  float v9 = *((float *)a2 + 2);
  float v8 = *((float *)a2 + 3);
  float v10 = (float)((float)(v5 * v7) + (float)(*(float *)a2 * v4)) + (float)(v9 * v6);
  float v12 = *((float *)a2 + 4);
  float v11 = *((float *)a2 + 5);
  float v13 = (float)((float)(v5 * v12) + (float)(v8 * v4)) + (float)(v11 * v6);
  float v15 = *((float *)a2 + 6);
  float v14 = *((float *)a2 + 7);
  float v16 = *((float *)a2 + 12);
  float v17 = *((float *)a2 + 13);
  float v18 = -v16;
  if (v10 > v16)
  {
    int v19 = 1;
  }
  else
  {
    float v16 = (float)((float)(v5 * v7) + (float)(*(float *)a2 * v4)) + (float)(v9 * v6);
    int v19 = 0;
  }
  float v20 = (float)((float)(v5 * v14) + (float)(v15 * v4)) + (float)(v3 * v6);
  if (v10 < v18)
  {
    float v16 = v18;
    int v19 = 1;
  }
  float v21 = -v17;
  if (v13 > v17) {
    int v19 = 1;
  }
  else {
    float v17 = (float)((float)(v5 * v12) + (float)(v8 * v4)) + (float)(v11 * v6);
  }
  BOOL v22 = v13 < v21;
  if (v13 >= v21) {
    float v23 = v17;
  }
  else {
    float v23 = v21;
  }
  if (v22) {
    int v19 = 1;
  }
  float v24 = *((float *)a2 + 14);
  float v25 = -v24;
  BOOL result = 1;
  if (v20 < (float)-v24
    || (v20 <= v24
      ? (float v25 = (float)((float)(v5 * v14) + (float)(v15 * v4)) + (float)(v3 * v6))
      : (int v19 = 1, v25 = *((float *)a2 + 14)),
        v19 == 1))
  {
    float v26 = (float)((float)(*(float *)a2 * v16) + (float)(v8 * v23)) + (float)(v15 * v25);
    float v27 = (float)((float)(v7 * v16) + (float)(v12 * v23)) + (float)(v14 * v25);
    float v28 = v6 - (float)((float)((float)(v9 * v16) + (float)(v11 * v23)) + (float)(v3 * v25));
    if ((float)((float)((float)((float)(v5 - v27) * (float)(v5 - v27)) + (float)((float)(v4 - v26) * (float)(v4 - v26)))
               + (float)(v28 * v28)) > (float)(*((float *)this + 3) * *((float *)this + 3)))
      return 0;
  }
  return result;
}

BOOL physx::Gu::intersectTriangleBox_Unsafe(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  float32x4_t v5 = *a1;
  float32x4_t v6 = vsubq_f32(*a3, *a1);
  float32x4_t v7 = *a4;
  float32x4_t v8 = *a5;
  if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_517, memory_order_acquire) & 1) == 0)
  {
    float v68 = a2;
    float32x4_t v74 = v6;
    float32x4_t v72 = v7;
    float32x4_t v73 = v5;
    float32x4_t v71 = v8;
    int v69 = __cxa_guard_acquire(_MergedGlobals_517);
    float32x4_t v8 = v71;
    float32x4_t v7 = v72;
    float32x4_t v5 = v73;
    float32x4_t v6 = v74;
    a2 = v68;
    if (v69)
    {
      *(void *)&long long v70 = 0x8000000080000000;
      *((void *)&v70 + 1) = 0x8000000080000000;
      xmmword_26AF9FF40 = v70;
      __cxa_guard_release(_MergedGlobals_517);
      float32x4_t v8 = v71;
      float32x4_t v7 = v72;
      float32x4_t v5 = v73;
      float32x4_t v6 = v74;
      a2 = v68;
    }
  }
  float32x4_t v9 = *a2;
  if ((~vuzp1_s8((int8x8_t)vmovn_s32(vcgeq_f32(*a2, vabsq_f32(v6))), *(int8x8_t *)a2->f32).u32[0] & 0xFFFFFF) == 0) {
    return 1;
  }
  float32x4_t v11 = vsubq_f32(v7, v5);
  float32x4_t v12 = vsubq_f32(v8, v5);
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v6, v11), v12), v9)), *(int8x8_t *)v9.f32).u32[0] & 0xFFFFFF) != 0
    || (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v9), vmaxq_f32(vmaxq_f32(v6, v11), v12))), *(int8x8_t *)v9.f32).u32[0] & 0xFFFFFF) != 0)
  {
    return 0;
  }
  BOOL result = 0;
  float32x4_t v13 = vsubq_f32(v11, v6);
  float32x4_t v14 = vsubq_f32(v12, v11);
  float32x2_t v15 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  float32x2_t v16 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  int8x8_t v17 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), *(float32x2_t *)v14.f32);
  *(int8x8_t *)v18.i8 = vext_s8(v17, (int8x8_t)vmls_f32(vmul_f32(v15, *(float32x2_t *)v14.f32), *(float32x2_t *)v13.f32, v16), 4uLL);
  v18.i64[1] = v17.u32[0];
  float32x4_t v19 = (float32x4_t)v18;
  v19.i32[3] = 0;
  int8x16_t v20 = vandq_s8((int8x16_t)xmmword_26AF9FF40, v18);
  float32x4_t v21 = v6;
  v21.i32[3] = 0;
  float32x4_t v22 = vmulq_f32(v21, v19);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  float32x2_t v23 = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32);
  float32x4_t v24 = (float32x4_t)vorrq_s8(v20, (int8x16_t)v9);
  v24.i32[3] = 0;
  float32x4_t v25 = vmulq_f32(v19, v24);
  v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
  *(int32x2_t *)v25.f32 = vcgt_f32(v23, vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32));
  if ((vuzp1_s8((int8x8_t)vuzp1_s16(*(int16x4_t *)v25.f32, *(int16x4_t *)v25.f32), *(int8x8_t *)v9.f32).u32[0] & 0xFFFFFF) == 0)
  {
    BOOL result = 0;
    float32x4_t v26 = (float32x4_t)vorrq_s8(veorq_s8(v20, (int8x16_t)xmmword_26AF9FF40), (int8x16_t)v9);
    v26.i32[3] = 0;
    float32x4_t v27 = vmulq_f32(v19, v26);
    v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
    int16x4_t v28 = (int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), v23);
    if ((vuzp1_s8((int8x8_t)vuzp1_s16(v28, v28), *(int8x8_t *)v9.f32).u32[0] & 0xFFFFFF) == 0)
    {
      *(int8x8_t *)v29.f32 = vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v15, 4uLL);
      v29.i64[1] = __PAIR64__(v15.u32[1], v13.u32[0]);
      v30.i64[0] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL).u64[0];
      v30.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v6, *(int8x16_t *)&v6, 8uLL).u32[1], v6.u32[0]);
      int8x8_t v31 = (int8x8_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
      *(int8x8_t *)v32.f32 = vext_s8(*(int8x8_t *)v11.f32, v31, 4uLL);
      v32.i64[1] = __PAIR64__(v31.u32[1], v11.u32[0]);
      float32x4_t v33 = vmlsq_f32(vmulq_f32(v6, v29), v13, v30);
      float32x4_t v34 = vmlsq_f32(vmulq_f32(v11, v29), v13, v32);
      int8x8_t v35 = (int8x8_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
      *(int8x8_t *)v36.f32 = vext_s8(*(int8x8_t *)v12.f32, v35, 4uLL);
      v36.i64[1] = __PAIR64__(v35.u32[1], v12.u32[0]);
      float32x4_t v37 = vmlsq_f32(vmulq_f32(v12, v29), v13, v36);
      float32x4_t v38 = vabsq_f32(v13);
      int8x8_t v39 = (int8x8_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
      *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v38.f32, v39, 4uLL);
      v41.i64[0] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL).u64[0];
      v41.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v9, *(int8x16_t *)&v9, 8uLL).u32[1], v9.u32[0]);
      float32x4_t v42 = vmulq_f32(v38, v41);
      v38.i32[1] = v39.i32[1];
      v40.i64[1] = v38.i64[0];
      float32x4_t v43 = vmlaq_f32(v42, v40, v9);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v33, v34), v37), v43)), *(int8x8_t *)v9.f32).u32[0] & 0xFFFFFF) == 0
        && (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v43), vmaxq_f32(vmaxq_f32(v33, v34), v37))), *(int8x8_t *)v9.f32).u32[0] & 0xFFFFFF) == 0)
      {
        float32x4_t v44 = vnegq_f32(v30);
        float32x4_t v45 = vnegq_f32(v32);
        *(int8x8_t *)v46.f32 = vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)v16, 4uLL);
        v46.i64[1] = __PAIR64__(v16.u32[1], v14.u32[0]);
        float32x4_t v47 = vnegq_f32(v36);
        float32x4_t v48 = vmlaq_f32(vmulq_f32(v6, v46), v14, v44);
        float32x4_t v49 = vmlaq_f32(vmulq_f32(v11, v46), v14, v45);
        float32x4_t v50 = vmlaq_f32(vmulq_f32(v12, v46), v14, v47);
        float32x4_t v51 = vabsq_f32(v14);
        int8x8_t v52 = (int8x8_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
        *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v51.f32, v52, 4uLL);
        float32x4_t v54 = vmulq_f32(v51, v41);
        v51.i32[1] = v52.i32[1];
        v53.i64[1] = v51.i64[0];
        float32x4_t v55 = vmlaq_f32(v54, v53, v9);
        if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v48, v49), v50), v55)), *(int8x8_t *)v9.f32).u32[0] & 0xFFFFFF) == 0
          && (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v55), vmaxq_f32(vmaxq_f32(v48, v49), v50))), *(int8x8_t *)v9.f32).u32[0] & 0xFFFFFF) == 0)
        {
          float32x4_t v56 = vsubq_f32(v6, v12);
          int8x8_t v57 = (int8x8_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
          *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v56.f32, v57, 4uLL);
          v58.i64[1] = __PAIR64__(v57.u32[1], v56.u32[0]);
          float32x4_t v59 = vmlaq_f32(vmulq_f32(v6, v58), v56, v44);
          float32x4_t v60 = vmlaq_f32(vmulq_f32(v11, v58), v56, v45);
          float32x4_t v61 = vmlaq_f32(vmulq_f32(v12, v58), v56, v47);
          float32x4_t v62 = vabdq_f32(v6, v12);
          v58.i64[0] = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
          *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)v62.f32, *(int8x8_t *)v58.f32, 4uLL);
          float32x4_t v64 = vmulq_f32(v62, v41);
          v62.i32[1] = v58.i32[1];
          v63.i64[1] = v62.i64[0];
          float32x4_t v65 = vmlaq_f32(v64, v63, v9);
          int8x8_t v66 = (int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v59, v60), v61), v65));
          if ((vuzp1_s8(v66, v66).u32[0] & 0xFFFFFF) == 0)
          {
            int8x8_t v67 = (int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v65), vmaxq_f32(vmaxq_f32(v59, v60), v61)));
            return (vuzp1_s8(v67, v67).u32[0] & 0xFFFFFF) == 0;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

BOOL physx::Gu::intersectTriangleBox(float32x4_t *a1, float *a2, float *a3, float *a4, double a5, float32x4_t a6, float32x4_t a7)
{
  float v8 = a1[2].f32[0];
  a6.i32[0] = a1[2].i32[1];
  float v9 = *a2 - a6.f32[0];
  float v11 = a1[2].f32[2];
  float v10 = a1[2].f32[3];
  float v12 = a2[1] - v11;
  float v13 = a2[2] - v10;
  a7.i32[0] = a1->i32[0];
  float v14 = a1->f32[1];
  float v15 = a1->f32[2];
  float v16 = a1->f32[3];
  v7.f32[0] = (float)((float)(v12 * v14) + (float)(a1->f32[0] * v9)) + (float)(v15 * v13);
  float v18 = a1[1].f32[0];
  float v17 = a1[1].f32[1];
  float v19 = a1[1].f32[2];
  float v20 = a1[1].f32[3];
  v7.f32[1] = (float)((float)(v12 * v18) + (float)(v16 * v9)) + (float)(v17 * v13);
  v7.f32[2] = (float)((float)(v12 * v20) + (float)(v19 * v9)) + (float)(v8 * v13);
  float v21 = *a3;
  float v22 = a3[1];
  float v23 = a3[2];
  float v24 = *a4;
  float v25 = a4[1];
  float v26 = a4[2];
  if ((atomic_load_explicit((atomic_uchar *volatile)_MergedGlobals_517, memory_order_acquire) & 1) == 0)
  {
    float v91 = a1;
    unsigned __int32 v97 = a6.i32[0];
    float v98 = v8;
    float v99 = v19;
    float v100 = v15;
    float v96 = v17;
    float v101 = v10;
    unsigned __int32 v102 = a7.i32[0];
    float v103 = v16;
    float v104 = v20;
    float v105 = v14;
    float v106 = v11;
    float v107 = v18;
    float v108 = v26;
    float v109 = v23;
    float v110 = v24;
    float v111 = v21;
    float v112 = v22;
    float v113 = v25;
    float32x4_t v95 = v7;
    int v92 = __cxa_guard_acquire(_MergedGlobals_517);
    float32x4_t v7 = v95;
    float v22 = v112;
    float v25 = v113;
    float v24 = v110;
    float v21 = v111;
    float v26 = v108;
    float v23 = v109;
    float v11 = v106;
    float v18 = v107;
    float v14 = v105;
    float v16 = v103;
    float v20 = v104;
    float v10 = v101;
    a7.i32[0] = v102;
    float v19 = v99;
    float v15 = v100;
    float v17 = v96;
    a6.i32[0] = v97;
    float v8 = v98;
    int v93 = v92;
    a1 = v91;
    if (v93)
    {
      *(void *)&long long v94 = 0x8000000080000000;
      *((void *)&v94 + 1) = 0x8000000080000000;
      xmmword_26AF9FF40 = v94;
      __cxa_guard_release(_MergedGlobals_517);
      float32x4_t v7 = v95;
      float v22 = v112;
      float v25 = v113;
      float v24 = v110;
      float v21 = v111;
      float v26 = v108;
      float v23 = v109;
      float v11 = v106;
      float v18 = v107;
      float v14 = v105;
      float v16 = v103;
      float v20 = v104;
      float v10 = v101;
      a7.i32[0] = v102;
      float v19 = v99;
      float v15 = v100;
      float v17 = v96;
      a6.i32[0] = v97;
      float v8 = v98;
      a1 = v91;
    }
  }
  float32x4_t v27 = a1[3];
  if ((~vuzp1_s8((int8x8_t)vmovn_s32(vcgeq_f32(v27, vabsq_f32(v7))), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0) {
    return 1;
  }
  float v29 = v22 - v11;
  float v30 = v25 - v11;
  float v31 = v21 - a6.f32[0];
  float v32 = v14 * v29;
  float v33 = v24 - a6.f32[0];
  a6.f32[0] = v14 * v30;
  float v34 = v23 - v10;
  float v35 = v26 - v10;
  a6.f32[0] = a6.f32[0] + (float)(a7.f32[0] * v33);
  a7.f32[0] = (float)(v32 + (float)(a7.f32[0] * v31)) + (float)(v15 * v34);
  a6.f32[0] = a6.f32[0] + (float)(v15 * v35);
  a7.f32[1] = (float)((float)(v18 * v29) + (float)(v16 * v31)) + (float)(v17 * v34);
  a6.f32[1] = (float)((float)(v18 * v30) + (float)(v16 * v33)) + (float)(v17 * v35);
  a7.f32[2] = (float)((float)(v20 * v29) + (float)(v19 * v31)) + (float)(v8 * v34);
  a6.f32[2] = (float)((float)(v20 * v30) + (float)(v19 * v33)) + (float)(v8 * v35);
  if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v7, a7), a6), v27)), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) != 0
    || (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v27), vmaxq_f32(vmaxq_f32(v7, a7), a6))), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) != 0)
  {
    return 0;
  }
  BOOL result = 0;
  float32x4_t v36 = vsubq_f32(a7, v7);
  float32x4_t v37 = vsubq_f32(a6, a7);
  float32x2_t v38 = (float32x2_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  float32x2_t v39 = (float32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  int8x8_t v40 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v36.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), *(float32x2_t *)v37.f32);
  *(int8x8_t *)v41.i8 = vext_s8(v40, (int8x8_t)vmls_f32(vmul_f32(v38, *(float32x2_t *)v37.f32), *(float32x2_t *)v36.f32, v39), 4uLL);
  v41.i64[1] = v40.u32[0];
  float32x4_t v42 = (float32x4_t)v41;
  v42.i32[3] = 0;
  int8x16_t v43 = vandq_s8((int8x16_t)xmmword_26AF9FF40, v41);
  float32x4_t v44 = v7;
  v44.i32[3] = 0;
  float32x4_t v45 = vmulq_f32(v44, v42);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  float32x2_t v46 = vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  float32x4_t v47 = (float32x4_t)vorrq_s8(v43, (int8x16_t)v27);
  v47.i32[3] = 0;
  float32x4_t v48 = vmulq_f32(v42, v47);
  v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
  *(int32x2_t *)v48.f32 = vcgt_f32(v46, vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32));
  if ((vuzp1_s8((int8x8_t)vuzp1_s16(*(int16x4_t *)v48.f32, *(int16x4_t *)v48.f32), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0)
  {
    BOOL result = 0;
    float32x4_t v49 = (float32x4_t)vorrq_s8(veorq_s8(v43, (int8x16_t)xmmword_26AF9FF40), (int8x16_t)v27);
    v49.i32[3] = 0;
    float32x4_t v50 = vmulq_f32(v42, v49);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    int16x4_t v51 = (int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32), v46);
    if ((vuzp1_s8((int8x8_t)vuzp1_s16(v51, v51), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0)
    {
      *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v36.f32, (int8x8_t)v38, 4uLL);
      v52.i64[1] = __PAIR64__(v38.u32[1], v36.u32[0]);
      v53.i64[0] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 4uLL).u64[0];
      v53.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v7, *(int8x16_t *)&v7, 8uLL).u32[1], v7.u32[0]);
      int8x8_t v54 = (int8x8_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
      *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)a7.f32, v54, 4uLL);
      v55.i64[1] = __PAIR64__(v54.u32[1], a7.u32[0]);
      float32x4_t v56 = vmlsq_f32(vmulq_f32(v7, v52), v36, v53);
      float32x4_t v57 = vmlsq_f32(vmulq_f32(a7, v52), v36, v55);
      int8x8_t v58 = (int8x8_t)vextq_s8((int8x16_t)a6, (int8x16_t)a6, 8uLL).u64[0];
      *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)a6.f32, v58, 4uLL);
      v59.i64[1] = __PAIR64__(v58.u32[1], a6.u32[0]);
      float32x4_t v60 = vmlsq_f32(vmulq_f32(a6, v52), v36, v59);
      float32x4_t v61 = vabsq_f32(v36);
      int8x8_t v62 = (int8x8_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
      *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)v61.f32, v62, 4uLL);
      v64.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL).u64[0];
      v64.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v27, *(int8x16_t *)&v27, 8uLL).u32[1], v27.u32[0]);
      float32x4_t v65 = vmulq_f32(v61, v64);
      v61.i32[1] = v62.i32[1];
      v63.i64[1] = v61.i64[0];
      float32x4_t v66 = vmlaq_f32(v65, v63, v27);
      if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v56, v57), v60), v66)), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0
        && (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v66), vmaxq_f32(vmaxq_f32(v56, v57), v60))), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0)
      {
        float32x4_t v67 = vnegq_f32(v53);
        float32x4_t v68 = vnegq_f32(v55);
        *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v39, 4uLL);
        v69.i64[1] = __PAIR64__(v39.u32[1], v37.u32[0]);
        float32x4_t v70 = vnegq_f32(v59);
        float32x4_t v71 = vmlaq_f32(vmulq_f32(v7, v69), v37, v67);
        float32x4_t v72 = vmlaq_f32(vmulq_f32(a7, v69), v37, v68);
        float32x4_t v73 = vmlaq_f32(vmulq_f32(a6, v69), v37, v70);
        float32x4_t v74 = vabsq_f32(v37);
        int8x8_t v75 = (int8x8_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
        *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v74.f32, v75, 4uLL);
        float32x4_t v77 = vmulq_f32(v74, v64);
        v74.i32[1] = v75.i32[1];
        v76.i64[1] = v74.i64[0];
        float32x4_t v78 = vmlaq_f32(v77, v76, v27);
        if ((vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v71, v72), v73), v78)), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0
          && (vuzp1_s8((int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v78), vmaxq_f32(vmaxq_f32(v71, v72), v73))), *(int8x8_t *)v27.f32).u32[0] & 0xFFFFFF) == 0)
        {
          float32x4_t v79 = vsubq_f32(v7, a6);
          int8x8_t v80 = (int8x8_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
          *(int8x8_t *)v81.f32 = vext_s8(*(int8x8_t *)v79.f32, v80, 4uLL);
          v81.i64[1] = __PAIR64__(v80.u32[1], v79.u32[0]);
          float32x4_t v82 = vmlaq_f32(vmulq_f32(v7, v81), v79, v67);
          float32x4_t v83 = vmlaq_f32(vmulq_f32(a7, v81), v79, v68);
          float32x4_t v84 = vmlaq_f32(vmulq_f32(a6, v81), v79, v70);
          float32x4_t v85 = vabdq_f32(v7, a6);
          v81.i64[0] = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u64[0];
          *(int8x8_t *)v86.f32 = vext_s8(*(int8x8_t *)v85.f32, *(int8x8_t *)v81.f32, 4uLL);
          float32x4_t v87 = vmulq_f32(v85, v64);
          v85.i32[1] = v81.i32[1];
          v86.i64[1] = v85.i64[0];
          float32x4_t v88 = vmlaq_f32(v87, v86, v27);
          int8x8_t v89 = (int8x8_t)vmovn_s32(vcgtq_f32(vminq_f32(vminq_f32(v82, v83), v84), v88));
          if ((vuzp1_s8(v89, v89).u32[0] & 0xFFFFFF) == 0)
          {
            int8x8_t v90 = (int8x8_t)vmovn_s32(vcgtq_f32(vsubq_f32((float32x4_t)0, v88), vmaxq_f32(vmaxq_f32(v82, v83), v84)));
            return (vuzp1_s8(v90, v90).u32[0] & 0xFFFFFF) == 0;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t physx::Gu::sweepSphereSphere(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float *a4, float32x2_t *a5, float a6, float a7)
{
  float v7 = a2->f32[1];
  float v8 = a2[1].f32[0];
  float v9 = a1->f32[1];
  float v10 = a1[1].f32[0];
  float v11 = a2->f32[0] - a1->f32[0];
  float v12 = v7 - v9;
  float v13 = v8 - v10;
  float v14 = (float)((float)((float)(v12 * v12) + (float)(v11 * v11)) + (float)(v13 * v13))
      - (float)((float)(a6 + a7) * (float)(a6 + a7));
  if (v14 <= 0.0
    || (float v15 = (float)(v8 + a3[1].f32[0]) - v8,
        float v16 = (float)((float)(a2->f32[0] + a3->f32[0]) - a2->f32[0]) - (float)(a1->f32[0] - a1->f32[0]),
        float v17 = (float)((float)(v7 + a3->f32[1]) - v7) - (float)(v9 - v9),
        float v18 = v15 - (float)(v10 - v10),
        float v19 = (float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18),
        v19 == 0.0))
  {
    *a4 = 0.0;
  }
  else
  {
    float v20 = (float)((float)((float)(v12 * v17) + (float)(v16 * v11)) + (float)(v18 * v13))
        + (float)((float)((float)(v12 * v17) + (float)(v16 * v11)) + (float)(v18 * v13));
    float v21 = (float)(v14 * (float)(v19 * -4.0)) + (float)(v20 * v20);
    if (v21 < 0.0) {
      return 0;
    }
    float v22 = sqrtf(v21);
    float v23 = 1.0 / (float)(v19 + v19);
    float v24 = -v20;
    float v25 = v23 * (float)(v22 - v20);
    float v26 = v23 * (float)(v24 - v22);
    if (v25 <= v26) {
      float v27 = v25;
    }
    else {
      float v27 = v26;
    }
    if (v25 > v26) {
      float v26 = v25;
    }
    *a4 = v27;
    if (v26 < 0.0 || v27 > 1.0) {
      return 0;
    }
    if (v27 != 0.0)
    {
      float v34 = (float)(v27 * a3[1].f32[0]) + a2[1].f32[0];
      float32x2_t v30 = vsub_f32(vadd_f32(vmul_n_f32(*a3, v27), *a2), *a1);
      float v31 = v34 - a1[1].f32[0];
      goto LABEL_16;
    }
  }
  float32x2_t v30 = vneg_f32(*a3);
  float v31 = -a3[1].f32[0];
LABEL_16:
  *a5 = v30;
  a5[1].f32[0] = v31;
  float v32 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v30, v30).i32[1]), v30.f32[0], v30.f32[0]) + (float)(v31 * v31));
  if (v32 > 0.0)
  {
    float v33 = 1.0 / v32;
    *a5 = vmul_n_f32(v30, v33);
    a5[1].f32[0] = v31 * v33;
  }
  return 1;
}

uint64_t physx::Gu::sweepSphereVSTri(float *a1, float *a2, float32x2_t *a3, float32x2_t *a4, float *a5, unsigned char *a6, int a7, float a8)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  *a6 = 0;
  float v11 = *a1;
  float v12 = a1[1];
  float v14 = a1[2];
  float v13 = a1[3];
  float v15 = v13 - *a1;
  float v17 = a1[4];
  float v16 = a1[5];
  float v18 = v17 - v12;
  float v19 = v16 - v14;
  float v21 = a1[6];
  float v20 = a1[7];
  float v22 = v21 - *a1;
  float v23 = v20 - v12;
  float v24 = a1[8];
  float v25 = v24 - v14;
  if (!a7) {
    goto LABEL_24;
  }
  float v26 = a3->f32[0];
  float v27 = a3->f32[1];
  float v28 = a3->f32[0] - v11;
  float v29 = a3[1].f32[0];
  float v30 = (float)((float)(v18 * (float)(v27 - v12)) + (float)(v15 * v28)) + (float)(v19 * (float)(v29 - v14));
  float v31 = (float)((float)(v23 * (float)(v27 - v12)) + (float)(v22 * v28)) + (float)(v25 * (float)(v29 - v14));
  if (v30 > 0.0 || (float v32 = *a1, v33 = a1[1], v34 = a1[2], v31 > 0.0))
  {
    float v35 = (float)((float)(v18 * (float)(v27 - v17)) + (float)(v15 * (float)(v26 - v13)))
        + (float)(v19 * (float)(v29 - v16));
    float v36 = (float)((float)(v23 * (float)(v27 - v17)) + (float)(v22 * (float)(v26 - v13)))
        + (float)(v25 * (float)(v29 - v16));
    BOOL v37 = v35 < 0.0 || v36 > v35;
    float v32 = a1[3];
    float v33 = a1[4];
    float v34 = a1[5];
    if (v37)
    {
      float v38 = (float)(v30 * v36) - (float)(v35 * v31);
      if (v35 > 0.0 || v30 < 0.0 || v38 > 0.0)
      {
        float v43 = (float)((float)(v18 * (float)(v27 - v20)) + (float)(v15 * (float)(v26 - v21)))
            + (float)(v19 * (float)(v29 - v24));
        float v44 = (float)((float)(v23 * (float)(v27 - v20)) + (float)(v22 * (float)(v26 - v21)))
            + (float)(v25 * (float)(v29 - v24));
        BOOL v45 = v44 < 0.0 || v43 > v44;
        float v32 = a1[6];
        float v33 = a1[7];
        float v34 = a1[8];
        if (!v45) {
          goto LABEL_23;
        }
        float v46 = (float)(v43 * v31) - (float)(v30 * v44);
        if (v44 > 0.0 || v46 > 0.0 || v31 < 0.0)
        {
          float v123 = (float)(v35 * v44) - (float)(v43 * v36);
          if (v123 <= 0.0 && (float v124 = v36 - v35, v124 >= 0.0) && (float)(v43 - v44) >= 0.0)
          {
            float v128 = v124 / (float)(v124 + (float)(v43 - v44));
            float v32 = v13 + (float)((float)(v21 - v13) * v128);
            float v33 = v17 + (float)((float)(v20 - v17) * v128);
            float v34 = v16 + (float)((float)(v24 - v16) * v128);
          }
          else
          {
            float v125 = 1.0 / (float)(v38 + (float)(v123 + v46));
            float v126 = v46 * v125;
            float v127 = v38 * v125;
            float v32 = (float)(v22 * v127) + (float)(v11 + (float)(v15 * v126));
            float v33 = (float)(v23 * v127) + (float)(v12 + (float)(v18 * v126));
            float v34 = (float)(v25 * v127) + (float)(v14 + (float)(v19 * v126));
          }
          goto LABEL_23;
        }
        float v47 = v31 / (float)(v31 - v44);
        float v40 = v22 * v47;
        float v41 = v23 * v47;
        float v42 = v25 * v47;
      }
      else
      {
        float v39 = v30 / (float)(v30 - v35);
        float v40 = v15 * v39;
        float v41 = v18 * v39;
        float v42 = v19 * v39;
      }
      float v32 = v11 + v40;
      float v33 = v12 + v41;
      float v34 = v14 + v42;
    }
  }
LABEL_23:
  if ((float)((float)((float)((float)(v33 - v27) * (float)(v33 - v27))
                     + (float)((float)(v32 - v26) * (float)(v32 - v26)))
             + (float)((float)(v34 - v29) * (float)(v34 - v29))) <= (float)(a8 * a8))
  {
    *a5 = 0.0;
    return 1;
  }
LABEL_24:
  float v48 = a4->f32[0];
  float v49 = a4->f32[1];
  float v50 = a4[1].f32[0];
  float v51 = (float)(v49 * v25) - (float)(v50 * v23);
  float v52 = (float)(v50 * v22) - (float)(a4->f32[0] * v25);
  float v53 = (float)(a4->f32[0] * v23) - (float)(v49 * v22);
  float v54 = (float)((float)(v18 * v52) + (float)(v15 * v51)) + (float)(v19 * v53);
  if (v54 > -0.00001 && v54 < 0.00001) {
    return 0;
  }
  float v56 = a2[1];
  float v57 = a2[2] * a8;
  float v58 = *a2 * a8;
  float v59 = (float)((float)(v49 * (float)(v56 * a8)) + (float)(v48 * v58)) + (float)(v50 * v57);
  if (v59 < 0.0)
  {
    float v60 = v56 * a8;
  }
  else
  {
    float v57 = -v57;
    float v60 = -(float)(v56 * a8);
  }
  if (v59 >= 0.0) {
    float v58 = -(float)(*a2 * a8);
  }
  float v61 = a3[1].f32[0];
  float v62 = v61 - v57;
  float v64 = a3->f32[0];
  float v63 = a3->f32[1];
  float v65 = 1.0 / v54;
  float v66 = (float)(a3->f32[0] - v58) - v11;
  float v67 = (float)(v63 - v60) - v12;
  float v68 = v65 * (float)((float)((float)(v52 * v67) + (float)(v66 * v51)) + (float)((float)(v62 - v14) * v53));
  float v69 = (float)(v67 * v19) - (float)((float)(v62 - v14) * v18);
  float v70 = (float)((float)(v62 - v14) * v15) - (float)(v66 * v19);
  float v71 = (float)(v66 * v18) - (float)(v67 * v15);
  float v72 = v65 * (float)((float)((float)(v49 * v70) + (float)(v48 * v69)) + (float)(v50 * v71));
  if (v68 >= 0.0 && v68 <= 1.0 && v72 >= 0.0 && (float)(v68 + v72) <= 1.0)
  {
    float v93 = v65 * (float)((float)((float)(v23 * v70) + (float)(v22 * v69)) + (float)(v25 * v71));
    if (v93 >= 0.0)
    {
      *a5 = v93;
      uint64_t result = 1;
      *a6 = 1;
      return result;
    }
    return 0;
  }
  if (v68 >= 0.0)
  {
    if (v72 >= 0.0)
    {
      unsigned int v102 = 2;
    }
    else
    {
      if ((float)(v68 + v72) <= 1.0)
      {
LABEL_60:
        unsigned int v79 = 0;
        goto LABEL_61;
      }
      float v83 = (float)(v13 * v68) + (float)(v21 * v72);
      float v84 = (float)(v17 * v68) + (float)(v20 * v72);
      float v85 = (float)(v16 * v68) + (float)(v24 * v72);
      float v86 = (float)(1.0 - v68) - v72;
      float v87 = v12 * v86;
      float v88 = v14 * v86;
      float v89 = v83 + (float)(v11 * v86);
      if ((float)((float)((float)(v18 * (float)((float)(v84 + v87) - v12)) + (float)(v15 * (float)(v89 - v11)))
                 + (float)(v19 * (float)((float)(v85 + v88) - v14))) >= (float)((float)((float)(v18 * v18)
                                                                                      + (float)(v15 * v15))
                                                                              + (float)(v19 * v19)))
      {
        float v90 = v13 - v21;
        float v91 = v17 - v20;
        float v92 = v16 - v24;
        float v81 = (float)((float)(v91 * v91) + (float)(v90 * v90)) + (float)(v92 * v92);
        float v82 = (float)((float)(v91 * (float)((float)(v84 + v87) - v20)) + (float)(v90 * (float)(v89 - v21)))
            + (float)(v92 * (float)((float)(v85 + v88) - v24));
        unsigned int v79 = 1;
LABEL_50:
        if (v82 < v81) {
          goto LABEL_63;
        }
LABEL_57:
        v129.i32[0] = 0;
        physx::Gu::intersectRaySphere(a3, a4, &a1[3 * v79], (float *)&v129, 0, 3.4028e38, a8);
        if (v101)
        {
          *a5 = v129.f32[0];
          return 1;
        }
        return 0;
      }
      unsigned int v102 = 0;
    }
    unsigned int v79 = 1;
  }
  else
  {
    if (v72 < 0.0)
    {
      float v75 = (float)(1.0 - v68) - v72;
      float v76 = (float)((float)(v13 * v68) + (float)(v21 * v72)) + (float)(v11 * v75);
      float v77 = (float)((float)(v17 * v68) + (float)(v20 * v72)) + (float)(v12 * v75);
      float v78 = (float)((float)(v16 * v68) + (float)(v24 * v72)) + (float)(v14 * v75);
      if ((float)((float)((float)((float)(v12 - v17) * (float)(v77 - v17))
                         + (float)((float)(v11 - v13) * (float)(v76 - v13)))
                 + (float)((float)(v14 - v16) * (float)(v78 - v16))) >= (float)((float)((float)((float)(v12 - v17)
                                                                                              * (float)(v12 - v17))
                                                                                      + (float)((float)(v11 - v13)
                                                                                              * (float)(v11 - v13)))
                                                                              + (float)((float)(v14 - v16)
                                                                                      * (float)(v14 - v16))))
      {
        unsigned int v79 = 0;
        float v80 = v11 - v21;
        float v81 = (float)((float)((float)(v12 - v20) * (float)(v12 - v20)) + (float)(v80 * v80))
            + (float)((float)(v14 - v24) * (float)(v14 - v24));
        float v82 = (float)((float)((float)(v12 - v20) * (float)(v77 - v20)) + (float)(v80 * (float)(v76 - v21)))
            + (float)((float)(v14 - v24) * (float)(v78 - v24));
        goto LABEL_50;
      }
      goto LABEL_60;
    }
    if ((float)(v68 + v72) <= 1.0)
    {
      unsigned int v79 = 0;
LABEL_63:
      unsigned int v102 = 2;
      goto LABEL_66;
    }
    float v94 = (float)(v13 * v68) + (float)(v21 * v72);
    float v95 = (float)(v17 * v68) + (float)(v20 * v72);
    float v96 = (float)(v16 * v68) + (float)(v24 * v72);
    float v97 = (float)(1.0 - v68) - v72;
    float v98 = v12 * v97;
    float v99 = v14 * v97;
    float v100 = v94 + (float)(v11 * v97);
    if ((float)((float)((float)(v23 * (float)((float)(v95 + v98) - v12)) + (float)(v22 * (float)(v100 - v11)))
               + (float)(v25 * (float)((float)(v96 + v99) - v14))) >= (float)((float)((float)(v23 * v23)
                                                                                    + (float)(v22 * v22))
                                                                            + (float)(v25 * v25)))
    {
      unsigned int v79 = 2;
      if ((float)((float)((float)((float)(v20 - v17) * (float)((float)(v95 + v98) - v17))
                         + (float)((float)(v21 - v13) * (float)(v100 - v13)))
                 + (float)((float)(v24 - v16) * (float)((float)(v96 + v99) - v16))) >= (float)((float)((float)((float)(v20 - v17) * (float)(v20 - v17)) + (float)((float)(v21 - v13) * (float)(v21 - v13)))
                                                                                             + (float)((float)(v24 - v16) * (float)(v24 - v16))))
        goto LABEL_57;
LABEL_61:
      unsigned int v102 = 1;
      goto LABEL_66;
    }
    unsigned int v102 = 0;
    unsigned int v79 = 2;
  }
LABEL_66:
  float v103 = &a1[3 * v79];
  float v104 = &a1[3 * v102];
  float v105 = v103[1];
  float v106 = *v104 - *v103;
  float v107 = v104[1] - v105;
  float v108 = v103[2];
  float v109 = v104[2] - v108;
  float v110 = v64 - *v103;
  float v111 = v63 - v105;
  float v112 = v61 - v108;
  float v113 = (float)((float)(v107 * (float)(v63 - v105)) + (float)(v110 * v106)) + (float)(v112 * v109);
  if (v113 > 0.0)
  {
    float v114 = (float)((float)(v107 * v107) + (float)(v106 * v106)) + (float)(v109 * v109);
    if (v113 < v114)
    {
      float v115 = v113 / v114;
      float v106 = v106 * v115;
      float v107 = v107 * v115;
      float v109 = v109 * v115;
    }
    float v110 = v110 - v106;
    float v111 = v111 - v107;
    float v112 = v112 - v109;
  }
  float v116 = sqrtf((float)((float)(v111 * v111) + (float)(v110 * v110)) + (float)(v112 * v112)) - a8;
  if (v116 <= 0.0)
  {
    BOOL v120 = 1;
    float v117 = 0.0;
  }
  else
  {
    float v117 = 0.0;
    if (v116 <= 10.0) {
      float v118 = 0.0;
    }
    else {
      float v118 = v116 + -10.0;
    }
    v129.f32[0] = v64 + (float)(v48 * v118);
    v129.f32[1] = v63 + (float)(v49 * v118);
    float v130 = v61 + (float)(v50 * v118);
    physx::Gu::intersectRayCapsuleInternal(&v129, a4, v103, v104, &v131, a8);
    BOOL v120 = v119 != 0;
    if (v119)
    {
      float v121 = v131;
      if (v131 >= v132 && v119 != 1) {
        float v121 = v132;
      }
      float v117 = v118 + v121;
    }
  }
  uint64_t result = 0;
  if (v120 && v117 >= 0.0)
  {
    *a5 = v117;
    return 1;
  }
  return result;
}

uint64_t physx::Gu::sweepSphereTriangles(uint64_t result, uint64_t a2, float32x2_t *a3, float32x2_t *a4, unsigned int *a5, uint64_t a6, float *a7, int a8, float a9, float a10, char a11, char a12, unsigned __int8 a13)
{
  if (!result) {
    return result;
  }
  int v18 = result;
  if (a5) {
    unsigned int v19 = *a5;
  }
  else {
    unsigned int v19 = 0;
  }
  unsigned int v20 = 0;
  char v21 = a8 | a11;
  float v22 = (float)((float)(a3->f32[1] * a4->f32[1]) + (float)(a3->f32[0] * a4->f32[0]))
      + (float)(a3[1].f32[0] * a4[1].f32[0]);
  float v23 = v22 - (float)(a9 + 0.002);
  unsigned int v90 = -1;
  float v85 = 2.0;
  float v24 = a10;
  float v88 = 0.0;
  float v89 = 0.0;
  float v87 = 0.0;
  while (1)
  {
    if (v19 == v20) {
      unsigned int v25 = 0;
    }
    else {
      unsigned int v25 = v20;
    }
    if (v20) {
      unsigned int v26 = v25;
    }
    else {
      unsigned int v26 = v19;
    }
    float v27 = (float *)(a2 + 36 * v26);
    float v28 = *v27;
    float v29 = v27[1];
    float v30 = v27[2];
    float v31 = v27[3];
    float v33 = v27[4];
    float v32 = v27[5];
    float v34 = v27[6];
    float v35 = v27[7];
    float v36 = v27[8];
    float v37 = (float)((float)(*v27 + v31) + v34) * 0.33333;
    float v38 = (float)((float)(v29 + v33) + v35) * 0.33333;
    float v39 = (float)((float)(v30 + v32) + v36) * 0.33333;
    float v40 = v37 - a3->f32[0];
    float v41 = v38 - a3->f32[1];
    float v42 = v39 - a3[1].f32[0];
    float v43 = a4->f32[0];
    float v44 = a4->f32[1];
    float v45 = a4[1].f32[0];
    float v46 = fmaxf((float)((float)(v41 * v44) + (float)(v40 * a4->f32[0])) + (float)(v42 * v45), 0.0);
    if (v46 >= v24) {
      float v46 = v24;
    }
    float v47 = (float)(sqrtf((float)((float)((float)(v41 - (float)(v44 * v46)) * (float)(v41 - (float)(v44 * v46)))+ (float)((float)(v40 - (float)(v43 * v46)) * (float)(v40 - (float)(v43 * v46))))+ (float)((float)(v42 - (float)(v45 * v46)) * (float)(v42 - (float)(v45 * v46))))- a9)+ -0.0001;
    BOOL v57 = v47 < 0.0;
    float v48 = v47 * v47;
    BOOL v50 = !v57
       && v48 > (float)((float)((float)((float)(v38 - v29) * (float)(v38 - v29))
                              + (float)((float)(v37 - v28) * (float)(v37 - v28)))
                      + (float)((float)(v39 - v30) * (float)(v39 - v30)))
       && v48 > (float)((float)((float)((float)(v38 - v33) * (float)(v38 - v33))
                              + (float)((float)(v37 - v31) * (float)(v37 - v31)))
                      + (float)((float)(v39 - v32) * (float)(v39 - v32)));
    float v51 = (float)((float)((float)(v38 - v35) * (float)(v38 - v35)) + (float)((float)(v37 - v34) * (float)(v37 - v34)))
        + (float)((float)(v39 - v36) * (float)(v39 - v36));
    if (v50 && v48 > v51) {
      goto LABEL_61;
    }
    float v53 = (float)((float)(v29 * v44) + (float)(v28 * v43)) + (float)(v30 * v45);
    float v54 = (float)((float)(v33 * v44) + (float)(v31 * v43)) + (float)(v32 * v45);
    float v55 = (float)((float)(v35 * v44) + (float)(v34 * v43)) + (float)(v36 * v45);
    if (v53 >= v54) {
      float v56 = (float)((float)(v33 * v44) + (float)(v31 * v43)) + (float)(v32 * v45);
    }
    else {
      float v56 = (float)((float)(v29 * v44) + (float)(v28 * v43)) + (float)(v30 * v45);
    }
    if (v56 >= v55) {
      float v56 = (float)((float)(v35 * v44) + (float)(v34 * v43)) + (float)(v36 * v45);
    }
    if (v56 > (float)((float)(a9 + 0.002) + (float)(v22 + v24))) {
      goto LABEL_61;
    }
    BOOL v57 = v54 < v23 && v53 < v23;
    if (v57 && v55 < v23) {
      goto LABEL_61;
    }
    float v59 = v31 - v28;
    float v60 = v33 - v29;
    float v61 = v32 - v30;
    float v62 = v34 - v28;
    float v63 = v35 - v29;
    float v64 = (float)(v60 * (float)(v36 - v30)) - (float)(v61 * v63);
    float v65 = (float)(v61 * v62) - (float)(v59 * (float)(v36 - v30));
    float v66 = (float)(v59 * v63) - (float)(v60 * v62);
    if ((v21 & 1) == 0 && (float)((float)((float)(v65 * v44) + (float)(v64 * v43)) + (float)(v66 * v45)) > 0.0) {
      goto LABEL_61;
    }
    float v67 = sqrtf((float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66));
    if (v67 == 0.0) {
      goto LABEL_61;
    }
    float v68 = 1.0 / v67;
    float v92 = v64 * v68;
    *(float *)&uint64_t v96 = v64 * v68;
    *((float *)&v96 + 1) = v65 * v68;
    float v69 = v65 * v68;
    float v91 = v66 * v68;
    float v97 = v66 * v68;
    float v94 = 0.0;
    if (!physx::Gu::sweepSphereVSTri(v27, (float *)&v96, a3, a4, &v94, &v93, a13, a9) || v94 > a10) {
      goto LABEL_61;
    }
    float v70 = a4->f32[1];
    float v71 = a4[1].f32[0];
    float v72 = -fabsf((float)((float)(v69 * v70) + (float)(v92 * a4->f32[0])) + (float)(v91 * v71));
    float v73 = v94 <= v24 ? v24 : v94;
    float v74 = v73 >= 1.0 ? v73 * 0.001 : 0.001;
    if ((float)(v24 - v74) <= v94)
    {
      float v75 = v24 + v74;
      if (v85 <= v72 || v75 <= v94)
      {
        BOOL v77 = v94 < v24;
        if (v85 != v72) {
          BOOL v77 = 0;
        }
        if (v94 != 0.0 && !v77) {
          goto LABEL_61;
        }
      }
    }
    if (v94 == 0.0)
    {
      *a7 = -a4->f32[0];
      a7[1] = -v70;
      a7[2] = -v71;
      *(_DWORD *)(a6 + 16) = v26;
      *(_WORD *)(a6 + 20) = 1026;
      float v82 = -a4[1].f32[0];
      *(float32x2_t *)(a6 + 36) = vneg_f32(*a4);
      *(float *)(a6 + 44) = v82;
      *(_DWORD *)(a6 + 48) = 0;
      return 1;
    }
    if (a12) {
      break;
    }
    float v87 = v92;
    float v88 = v69;
    float v89 = v91;
    unsigned int v90 = v26;
    float v24 = v94;
    float v85 = v72;
LABEL_61:
    if (v18 == ++v20) {
      goto LABEL_62;
    }
  }
  float v24 = v94;
  unsigned int v90 = v26;
  float v88 = v69;
  float v89 = v91;
  float v87 = v92;
LABEL_62:
  if (v90 == -1) {
    return 0;
  }
  physx::Gu::computeSphereTriImpactData((float *)&v96, &v94, a3, a4, a2 + 36 * v90, v24);
  if (!a11 || a8)
  {
    float v81 = v94;
    float v78 = v88;
    float v80 = v89;
    float v79 = v87;
  }
  else
  {
    float v79 = v87;
    float v78 = v88;
    float v80 = v89;
    float v81 = v94;
    if ((float)((float)((float)(v88 * a4->f32[1]) + (float)(v87 * a4->f32[0])) + (float)(v89 * a4[1].f32[0])) > 0.0)
    {
      float v81 = -v94;
      float32x2_t v95 = vneg_f32(v95);
    }
  }
  *(void *)(a6 + 24) = v96;
  *(float *)(a6 + 32) = v97;
  *(float *)(a6 + 36) = v81;
  *(float32x2_t *)(a6 + 40) = v95;
  *(float *)(a6 + 48) = v24;
  *(_DWORD *)(a6 + 16) = v90;
  *(_WORD *)(a6 + 20) = 3;
  *a7 = v79;
  a7[1] = v78;
  uint64_t result = 1;
  a7[2] = v80;
  return result;
}

float *physx::Gu::computeSphereTriImpactData(float *a1, float *a2, float32x2_t *a3, float32x2_t *a4, uint64_t a5, float a6)
{
  float v9 = a4[1].f32[0] * a6;
  float v10 = a3[1].f32[0];
  float32x2_t v32 = vadd_f32(vmul_n_f32(*a4, a6), *a3);
  float v33 = v9 + v10;
  uint64_t v31 = 0;
  uint64_t result = physx::Gu::closestPtPointTriangle((float *)&v32, (float *)a5, (float32x2_t *)(a5 + 12), (float32x2_t *)(a5 + 24), (float *)&v31 + 1, (float *)&v31, (uint64_t)&v28);
  float v12 = v29;
  float v13 = v32.f32[0] - v28;
  float v14 = v32.f32[1] - v29;
  float v15 = v30;
  float v16 = v33 - v30;
  float v17 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v16 * v16));
  if (v17 > 0.0)
  {
    float v13 = v13 * (float)(1.0 / v17);
    float v14 = v14 * (float)(1.0 / v17);
    float v16 = v16 * (float)(1.0 / v17);
  }
  if (v17 < 0.001)
  {
    float v18 = *(float *)(a5 + 4);
    float v19 = *(float *)(a5 + 8);
    float v20 = *(float *)(a5 + 12) - *(float *)a5;
    float v21 = *(float *)(a5 + 24) - *(float *)a5;
    float v22 = *(float *)(a5 + 16) - v18;
    float v23 = *(float *)(a5 + 20) - v19;
    float v24 = *(float *)(a5 + 28) - v18;
    float v25 = *(float *)(a5 + 32) - v19;
    float v13 = (float)(v22 * v25) - (float)(v23 * v24);
    float v14 = (float)(v23 * v21) - (float)(v20 * v25);
    float v16 = (float)(v20 * v24) - (float)(v22 * v21);
    float v26 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v16 * v16));
    if (v26 > 0.0)
    {
      float v27 = 1.0 / v26;
      float v13 = v13 * v27;
      float v14 = v14 * v27;
      float v16 = v16 * v27;
    }
  }
  *a1 = v28;
  a1[1] = v12;
  a1[2] = v15;
  *a2 = v13;
  a2[1] = v14;
  a2[2] = v16;
  return result;
}

void physx::Gu::computeBoxTriImpactData(float32x2_t *a1, float32x2_t *a2, uint64_t a3, float32x2_t *a4, uint64_t a5, float a6, double a7, double a8, __n128 a9, double a10, double a11, double a12, __n128 a13)
{
  uint64_t v233 = *MEMORY[0x263EF8340];
  float v18 = *(float *)a3;
  float v19 = *(float *)(a3 + 4);
  a9.n128_f32[0] = -v19;
  LODWORD(a10) = *(_DWORD *)(a3 + 8);
  v202[0] = -*(float *)a3;
  v202[1] = -v19;
  v202[2] = -*(float *)&a10;
  v202[3] = v18;
  v202[4] = v19;
  v202[5] = *(float *)&a10;
  float v20 = a4[1].f32[0];
  float v21 = 1.0 / v20;
  _ZF = v20 == 0.0;
  double v23 = 0.0;
  if (!_ZF) {
    *(float *)&double v23 = v21;
  }
  int8x8_t v24 = (int8x8_t)vceqz_f32(*a4);
  __asm { FMOV            V9.2S, #1.0 }
  double v200 = COERCE_DOUBLE(vbic_s8((int8x8_t)vdiv_f32(_D9, *a4), v24));
  int v201 = LODWORD(v23);
  unsigned __int32 v199 = 2139095039;
  *(float *)&a11 = -*(float *)&a10;
  if (physx::Gu::sweepBoxTriangle(a5, (uint64_t)v202, a4, (float *)&v200, a1, a2, &v199, 0, v23, v200, *(double *)&v24, a9, a10, a11, a12, a13)&& (a2->f32[0] != 0.0 || a2->f32[1] != 0.0 || a2[1].f32[0] != 0.0))
  {
    return;
  }
  float v31 = a4[1].f32[0];
  v32.i32[3] = v198;
  _S8 = v31 * a6;
  float32x2_t v34 = vmul_n_f32(*a4, a6);
  float v35 = (float)(v31 * a6) + (float)(v31 * -0.1);
  *(float32x2_t *)v29.f32 = vadd_f32(v34, vmul_f32(*a4, (float32x2_t)vdup_n_s32(0xBDCCCCCD)));
  *(float32x2_t *)v32.f32 = vsub_f32(*(float32x2_t *)a5, *(float32x2_t *)v29.f32);
  *(float32x2_t *)v30.f32 = vsub_f32(*(float32x2_t *)(a5 + 12), *(float32x2_t *)v29.f32);
  *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)(a5 + 24), *(float32x2_t *)v29.f32);
  v32.f32[2] = *(float *)(a5 + 8) - v35;
  v30.f32[2] = *(float *)(a5 + 20) - v35;
  v29.f32[2] = *(float *)(a5 + 32) - v35;
  float32x4_t v36 = vaddq_f32(v32, v30);
  v30.i32[3] = 0;
  v32.i32[3] = 0;
  float32x4_t v37 = vaddq_f32(v36, v29);
  v29.i32[3] = 0;
  float32x4_t v38 = (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu);
  float32x4_t v39 = vmulq_f32(v37, v38);
  v39.i32[3] = 0;
  char v217 = 0;
  float32x4_t v214 = v39;
  float32x4_t v218 = v32;
  float32x4_t v219 = v30;
  float32x4_t v220 = v29;
  uint64_t v215 = 0x7F7FFFFF00000000;
  uint64_t v216 = 0x57F7FFFFFLL;
  v38.i64[0] = *(void *)a3;
  int32x4_t v40 = (int32x4_t)v38;
  v40.i32[2] = *(_DWORD *)(a3 + 8);
  float32x2_t v41 = (float32x2_t)vdup_laneq_s32(v40, 2);
  v40.i32[3] = 0;
  int v211 = 3;
  char v212 = 0;
  v207[0] = 0;
  v207[1] = 0;
  int32x4_t v213 = v40;
  *(float32x2_t *)v38.f32 = vpmin_f32(v41, *(float32x2_t *)v38.f32);
  int32x2_t v42 = (int32x2_t)vpmin_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
  *(float *)v40.i32 = 0.15 * *(float *)v42.i32;
  *(float *)v42.i32 = 0.05 * *(float *)v42.i32;
  __int32 v208 = v40.i32[0];
  __int32 v209 = v42.i32[0];
  __int32 v210 = v42.i32[0];
  float32x2_t v205 = &unk_26E728A58;
  float32x4_t v206 = &v214;
  int8x16_t v204 = (float32x4_t *)v207;
  float v203 = &unk_26E728AB8;
  float32x4_t v43 = vmulq_f32(v39, v39);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  unsigned int v223 = 0;
  int32x4_t v47 = (int32x4_t)(unint64_t)v41;
  float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)), 0), 0x1FuLL)), (int8x16_t)v39, (int8x16_t)xmmword_23435FD50);
  float32x4_t v222 = v44;
  float32x4_t v45 = vmulq_f32(v44, v44);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  float32x2_t v46 = vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  *(float32x2_t *)v47.i8 = vrsqrte_f32(v46);
  int v48 = 4;
  do
  {
    *(float32x2_t *)v47.i8 = vmul_f32(*(float32x2_t *)v47.i8, vrsqrts_f32(vmul_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8), v46));
    --v48;
  }
  while (v48);
  float32x2_t v49 = vmul_f32(v46, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v46), 0), (int8x8_t)_D9, *(int8x8_t *)v47.i8));
  float32x2_t v50 = vrecpe_f32(v49);
  int v51 = 4;
  do
  {
    float32x2_t v50 = vmul_f32(v50, vrecps_f32(v49, v50));
    --v51;
  }
  while (v51);
  float32x2_t v191 = v34;
  float32x4_t v52 = vmulq_n_f32(v44, v50.f32[0]);
  v52.i32[3] = 0;
  *(int32x2_t *)v47.i8 = vdup_lane_s32(v42, 0);
  float32x2_t v53 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  *(float32x2_t *)v47.i8 = vmul_f32(vmin_f32(*(float32x2_t *)v47.i8, v53), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  float32x2_t v54 = vmax_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_n_s32(0x358637BDu));
  v47.i32[0] = -1;
  int32x4_t v190 = v47;
  while (1)
  {
    float32x4_t v55 = v52;
    float32x2_t v56 = v53;
    float32x4_t v57 = v44;
    float32x4_t v221 = v44;
    float32x4_t v58 = vnegq_f32(v44);
    v58.i32[3] = 0;
    float32x4_t v65 = v206[3];
    float32x4_t v59 = v206[4];
    float32x4_t v60 = v206[5];
    float32x4_t v61 = vmulq_f32(v58, v65);
    v61.i64[0] = vpaddq_f32(v61, v61).u64[0];
    *(float32x2_t *)v61.f32 = vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
    float32x4_t v62 = vmulq_f32(v58, v59);
    v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
    *(float32x2_t *)v62.f32 = vpadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32);
    float32x4_t v63 = vmulq_f32(v58, v60);
    v63.i64[0] = vpaddq_f32(v63, v63).u64[0];
    *(float32x2_t *)v63.f32 = vpadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32);
    float32x4_t v64 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v63.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.f32)), 0), (int8x16_t)v65, vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v63.f32), 0), (int8x16_t)v59, (int8x16_t)v60));
    v65.i64[0] = 0;
    v65.i32[2] = 0;
    float32x4_t v66 = v204[3];
    int8x16_t v67 = (int8x16_t)vnegq_f32(v66);
    v67.i32[3] = 0;
    float32x4_t v68 = (float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(v57), (int8x16_t)v66, v67);
    float32x4_t v44 = vsubq_f32(v64, v68);
    float32x4_t v69 = vmulq_f32(v55, v44);
    v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
    float32x2_t v70 = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32);
    if (v70.f32[0] > 3.4028e38)
    {
      _Q6.i64[0] = 0;
      _Q6.i32[2] = 0;
LABEL_79:
      float32x2_t v164 = v191;
      goto LABEL_80;
    }
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgtz_f32(v70), (int8x8_t)vcgt_f32(v70, vmul_f32(v56, (float32x2_t)vdup_n_s32(0x3F7FF141u)))), 0), *(int8x8_t *)v44.f32).u32[0] == -1)break; {
    uint64_t v71 = v223;
    }
    v229[v223] = v64;
    *(&v226 + v71) = v68;
    unsigned int v223 = v71 + 1;
    *(&v230 + v71) = v44;
    switch(v71)
    {
      case 3:
        float32x4_t v192 = v57;
        float32x4_t v195 = v55;
        physx::Gu::closestPtPointTetrahedron(&v230, v229, &v226, (int *)&v223);
        float32x4_t v57 = v192;
        float32x4_t v55 = v195;
        goto LABEL_54;
      case 2:
        float32x4_t v44 = v230;
        float32x4_t v80 = vsubq_f32(v231, v230);
        float32x4_t v81 = vsubq_f32((float32x4_t)v232[0], v230);
        int8x8_t v83 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v80.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL), *(float32x2_t *)v81.f32);
        *(int8x8_t *)v82.f32 = vext_s8(v83, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), *(float32x2_t *)v81.f32), *(float32x2_t *)v80.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL)), 4uLL);
        v83.i32[1] = 0;
        unsigned int v223 = 3;
        float32x2_t v84 = vpadd_f32(vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32), vmul_f32((float32x2_t)v83.u32[0], (float32x2_t)v83.u32[0]));
        float32x2_t v85 = vpadd_f32(v84, v84);
        if (v85.f32[0] > 0.00000011921)
        {
          if (v85.f32[0] == 0.0)
          {
            float32x4_t v44 = 0uLL;
          }
          else
          {
            *(int8x8_t *)&v82.u32[2] = v83;
            float32x2_t v86 = (float32x2_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL).u64[0];
            float32x2_t v87 = (float32x2_t)vextq_s8(v232[0], v232[0], 8uLL).u64[0];
            float32x2_t v88 = (float32x2_t)vextq_s8(v232[0], v232[0], 4uLL).u64[0];
            float32x2_t v89 = (float32x2_t)vextq_s8((int8x16_t)v231, (int8x16_t)v231, 4uLL).u64[0];
            int8x8_t v90 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v231.f32, v88), v89, *(float32x2_t *)v232[0].i8);
            *(int8x8_t *)v91.f32 = vext_s8(v90, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v232[0].i8), *(float32x2_t *)v231.f32, v87), 4uLL);
            v91.i64[1] = v90.u32[0];
            float32x2_t v92 = (float32x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL).u64[0];
            float32x2_t v93 = (float32x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 4uLL).u64[0];
            int8x8_t v94 = (int8x8_t)vmls_f32(vmul_f32(v93, *(float32x2_t *)v232[0].i8), v88, *(float32x2_t *)v230.f32);
            *(int8x8_t *)v95.f32 = vext_s8(v94, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230.f32, v87), *(float32x2_t *)v232[0].i8, v92), 4uLL);
            v95.i64[1] = v94.u32[0];
            int8x8_t v96 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230.f32, v89), v93, *(float32x2_t *)v231.f32);
            *(int8x8_t *)v97.f32 = vext_s8(v96, (int8x8_t)vmls_f32(vmul_f32(v92, *(float32x2_t *)v231.f32), *(float32x2_t *)v230.f32, v86), 4uLL);
            v97.i64[1] = v96.u32[0];
            float32x4_t v98 = vmulq_f32(v91, v82);
            v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
            float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
            float32x4_t v100 = vmulq_f32(v95, v82);
            v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
            float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
            float32x4_t v102 = vmulq_f32(v97, v82);
            v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
            float32x2_t v103 = vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v101), (int8x8_t)vcgez_f32(v99)), (int8x8_t)vcgez_f32(v103)), 0), *(int8x8_t *)v230.f32).u32[0] == -1)
            {
              float32x4_t v129 = vmulq_f32(v230, v82);
              float32x2_t v130 = vrecpe_f32(v85);
              int v131 = 4;
              do
              {
                float32x2_t v130 = vmul_f32(v130, vrecps_f32(v85, v130));
                --v131;
              }
              while (v131);
              float32x2_t v132 = (float32x2_t)vpaddq_f32(v129, v129).u64[0];
              float32x4_t v44 = vmulq_n_f32(v82, vmul_f32(v130, vpadd_f32(v132, v132)).f32[0]);
              v44.i32[3] = 0;
            }
            else
            {
              float32x4_t v104 = vnegq_f32(v230);
              v104.i32[3] = 0;
              float32x4_t v105 = vnegq_f32(v231);
              v105.i32[3] = 0;
              float32x4_t v106 = vmulq_f32(v104, v80);
              v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
              float32x2_t v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
              float32x4_t v108 = vmulq_f32(v80, v105);
              v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
              float32x2_t v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v107), (int8x8_t)vclez_f32(v109)), (int8x8_t)vclez_f32(v103)), 0), *(int8x8_t *)v230.f32).u32[0] == -1)
              {
                float32x2_t v133 = vsub_f32(v107, v109);
                float32x2_t v134 = vrecpe_f32(v133);
                int v135 = 4;
                do
                {
                  float32x2_t v134 = vmul_f32(v134, vrecps_f32(v133, v134));
                  --v135;
                }
                while (v135);
                uint64_t v121 = 0;
                float32x4_t v44 = vmlaq_n_f32(v230, v80, vmul_f32(v107, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v133), (float32x2_t)0x3400000034000000), (int8x8_t)v134, 0)).f32[0]);
                v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                unsigned int v136 = 2;
                uint64_t v120 = 1;
              }
              else
              {
                float32x4_t v110 = vnegq_f32((float32x4_t)v232[0]);
                v110.i32[3] = 0;
                float32x4_t v111 = vmulq_f32(v105, v81);
                v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
                float32x2_t v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
                float32x4_t v113 = vmulq_f32(v80, v110);
                v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
                float32x2_t v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
                float32x4_t v115 = vmulq_f32(v81, v110);
                v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
                float32x2_t v116 = vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v112, v109), (int8x8_t)vcge_f32(v114, v116)), (int8x8_t)vclez_f32(v99)), 0), *(int8x8_t *)v230.f32).u32[0] == -1)
                {
                  float32x2_t v137 = vsub_f32(v112, v109);
                  float32x2_t v138 = vadd_f32(v137, vsub_f32(v114, v116));
                  float32x2_t v139 = vrecpe_f32(v138);
                  int v140 = 4;
                  do
                  {
                    float32x2_t v139 = vmul_f32(v139, vrecps_f32(v138, v139));
                    --v140;
                  }
                  while (v140);
                  int8x16_t v141 = (int8x16_t)vmlaq_n_f32(v231, vsubq_f32((float32x4_t)v232[0], v231), vmul_f32(v137, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v138), (float32x2_t)0x3400000034000000), (int8x8_t)v139, 0)).f32[0]);
                  v141.i64[1] = vextq_s8(v141, v141, 8uLL).u32[0];
                  unsigned int v136 = 2;
                  uint64_t v120 = 2;
                  uint64_t v121 = 1;
                  float32x4_t v44 = (float32x4_t)v141;
                }
                else
                {
                  float32x4_t v117 = vmulq_f32(v104, v81);
                  v117.i64[0] = vpaddq_f32(v117, v117).u64[0];
                  float32x2_t v118 = vpadd_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32);
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v118), (int8x8_t)vclez_f32(v116)), (int8x8_t)vclez_f32(v101)), 0), *(int8x8_t *)v230.f32).u32[0] == -1)
                  {
                    float32x2_t v142 = vsub_f32(v118, v116);
                    float32x2_t v143 = vrecpe_f32(v142);
                    int v144 = 4;
                    do
                    {
                      float32x2_t v143 = vmul_f32(v143, vrecps_f32(v142, v143));
                      --v144;
                    }
                    while (v144);
                    uint64_t v121 = 0;
                    float32x4_t v44 = vmlaq_n_f32(v230, v81, vmul_f32(v118, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v142), (float32x2_t)0x3400000034000000), (int8x8_t)v143, 0)).f32[0]);
                    v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                    uint64_t v120 = 2;
                  }
                  else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v118), (int8x8_t)vclez_f32(v107)), 0), *(int8x8_t *)v230.f32).u32[0] == -1)
                  {
                    uint64_t v121 = 0;
                    uint64_t v120 = 1;
                  }
                  else
                  {
                    *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v109, v112), (int8x8_t)vcgez_f32(v109)), 0);
                    *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                    __int32 v119 = v44.i32[0];
                    float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v190), 0), (int8x16_t)v231, v232[0]);
                    uint64_t v120 = 1;
                    if (v119 == -1) {
                      uint64_t v121 = 1;
                    }
                    else {
                      uint64_t v121 = 2;
                    }
                  }
                  unsigned int v136 = v120;
                }
              }
              float32x4_t v145 = *(&v230 + v120);
              long long v146 = v229[v121];
              long long v147 = v229[v120];
              float32x4_t v148 = *(&v226 + v121);
              float32x4_t v149 = *(&v226 + v120);
              float32x4_t v230 = *(&v230 + v121);
              float32x4_t v231 = v145;
              v229[0] = v146;
              v229[1] = v147;
              float32x4_t v226 = v148;
              float32x4_t v227 = v149;
              unsigned int v223 = v136;
            }
          }
          goto LABEL_54;
        }
        unsigned int v223 = 2;
        float32x4_t v122 = vmulq_f32(v80, v80);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        float32x2_t v123 = vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v123), 0), *(int8x8_t *)v230.f32).u32[0] != -1)
        {
          float32x4_t v124 = vnegq_f32(v230);
          v124.i32[3] = 0;
          float32x4_t v125 = vmulq_f32(v124, v80);
          v125.i64[0] = vpaddq_f32(v125, v125).u64[0];
          float32x2_t v126 = vpadd_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v125.f32);
          float32x2_t v127 = vrecpe_f32(v123);
          int v128 = 4;
          do
          {
            float32x2_t v127 = vmul_f32(v127, vrecps_f32(v123, v127));
            --v128;
          }
          while (v128);
          float32x4_t v44 = vmlaq_n_f32(v230, v80, vmax_f32(vmin_f32(vmul_f32(v126, v127), _D9), 0).f32[0]);
          goto LABEL_36;
        }
        break;
      case 1:
        float32x4_t v44 = v230;
        float32x4_t v72 = vsubq_f32(v231, v230);
        float32x4_t v73 = vmulq_f32(v72, v72);
        v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
        float32x2_t v74 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v74), 0), *(int8x8_t *)v230.f32).u32[0] != -1)
        {
          float32x4_t v75 = vnegq_f32(v230);
          v75.i32[3] = 0;
          float32x4_t v76 = vmulq_f32(v75, v72);
          v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
          float32x2_t v77 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
          float32x2_t v78 = vrecpe_f32(v74);
          int v79 = 4;
          do
          {
            float32x2_t v78 = vmul_f32(v78, vrecps_f32(v74, v78));
            --v79;
          }
          while (v79);
          float32x4_t v44 = vmlaq_n_f32(v230, v72, vmax_f32(vmin_f32(vmul_f32(v77, v78), _D9), 0).f32[0]);
LABEL_36:
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          goto LABEL_54;
        }
        break;
      default:
        goto LABEL_54;
    }
    unsigned int v223 = 1;
LABEL_54:
    float32x4_t v222 = v44;
    float32x4_t v150 = vmulq_f32(v44, v44);
    v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
    float32x2_t v151 = vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32);
    float32x2_t v152 = vrsqrte_f32(v151);
    int v153 = 4;
    do
    {
      float32x2_t v152 = vmul_f32(v152, vrsqrts_f32(vmul_f32(v152, v152), v151));
      --v153;
    }
    while (v153);
    float32x2_t v53 = vmul_f32(v151, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v151), 0), (int8x8_t)_D9, (int8x8_t)v152));
    float32x2_t v154 = vrecpe_f32(v53);
    int v155 = 4;
    do
    {
      float32x2_t v154 = vmul_f32(v154, vrecps_f32(v53, v154));
      --v155;
    }
    while (v155);
    float32x4_t v52 = vmulq_n_f32(v44, v154.f32[0]);
    v52.i32[3] = 0;
    int16x4_t v156 = (int16x4_t)vcgt_f32(v56, v53);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v53, v54), (int8x8_t)v156), 0), *(int8x8_t *)v44.f32).u32[0] != -1)
    {
      int8x8_t v157 = (int8x8_t)vdup_lane_s16(v156, 0);
      if (vuzp1_s8(v157, v157).u32[0] == -1) {
        goto LABEL_84;
      }
      f32 = v206[1].f32;
      float32x2_t v159 = vld1_dup_f32(f32);
      int v160 = v204[1].f32;
      float32x2_t v161 = vld1_dup_f32(v160);
      LODWORD(v162) = vmin_f32(v159, v161).u32[0];
      if (v223 == 3)
      {
        float32x2_t v224 = 0;
        float32x2_t v225 = 0;
        float v193 = v162;
        float32x4_t v197 = v55;
        physx::Gu::barycentricCoordinates(&v221, &v230, &v231, (float32x4_t *)v232, &v225, &v224);
        float v162 = v193;
        float32x4_t v55 = v197;
        float32x4_t v175 = vmulq_n_f32(vsubq_f32(v227, v226), v225.f32[0]);
        v175.i32[3] = 0;
        float32x4_t v176 = vmulq_n_f32(vsubq_f32(v228, v226), v224.f32[0]);
        v176.i32[3] = 0;
        float32x4_t v65 = vaddq_f32(v226, vaddq_f32(v175, v176));
      }
      else if (v223 == 2)
      {
        float32x4_t v177 = vsubq_f32(v230, v57);
        float32x4_t v178 = vsubq_f32(vsubq_f32(v231, v57), v177);
        float32x4_t v179 = vmulq_f32(v178, v178);
        v179.i64[0] = vpaddq_f32(v179, v179).u64[0];
        float32x2_t v180 = vpadd_f32(*(float32x2_t *)v179.f32, *(float32x2_t *)v179.f32);
        float32x2_t v181 = vrecpe_f32(v180);
        int v182 = 4;
        do
        {
          float32x2_t v181 = vmul_f32(v181, vrecps_f32(v180, v181));
          --v182;
        }
        while (v182);
        float32x4_t v183 = vnegq_f32(v177);
        v183.i32[3] = 0;
        float32x4_t v184 = vmulq_f32(v183, v178);
        v184.i64[0] = vpaddq_f32(v184, v184).u64[0];
        float32x4_t v65 = vmlaq_n_f32(v226, vsubq_f32(v227, v226), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v180), (int8x8_t)v181, 0), vpadd_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32)).f32[0]);
        v65.i32[2] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
      }
      else
      {
        v65.i64[0] = 0;
        v65.i32[2] = 0;
        if (v223 == 1) {
          float32x4_t v65 = v226;
        }
      }
      if (vmax_f32(v56, 0).f32[0] <= (float)(0.2 * v162))
      {
LABEL_84:
        *a1 = 0;
        a1[1].i32[0] = 0;
        float v188 = -a4[1].f32[0];
        float32x2_t v189 = vneg_f32(*a4);
        goto LABEL_85;
      }
      _Q6 = vnegq_f32(v55);
      goto LABEL_79;
    }
  }
  _Q6 = vnegq_f32(v55);
  _Q6.i32[3] = 0;
  if (v223 == 3)
  {
    float32x2_t v224 = 0;
    float32x2_t v225 = 0;
    float32x4_t v196 = _Q6;
    physx::Gu::barycentricCoordinates(&v222, &v230, &v231, (float32x4_t *)v232, &v225, &v224);
    _Q6 = v196;
    float32x4_t v165 = vmulq_n_f32(vsubq_f32(v227, v226), v225.f32[0]);
    v165.i32[3] = 0;
    float32x4_t v166 = vmulq_n_f32(vsubq_f32(v228, v226), v224.f32[0]);
    v166.i32[3] = 0;
    float32x4_t v65 = vaddq_f32(v226, vaddq_f32(v165, v166));
    goto LABEL_79;
  }
  if (v223 == 2)
  {
    float32x4_t v167 = vsubq_f32(v230, v57);
    float32x4_t v168 = vsubq_f32(vsubq_f32(v231, v57), v167);
    float32x4_t v169 = vmulq_f32(v168, v168);
    v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
    float32x2_t v170 = vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32);
    float32x2_t v171 = vrecpe_f32(v170);
    int v172 = 4;
    float32x2_t v164 = v191;
    do
    {
      float32x2_t v171 = vmul_f32(v171, vrecps_f32(v170, v171));
      --v172;
    }
    while (v172);
    float32x4_t v173 = vnegq_f32(v167);
    v173.i32[3] = 0;
    float32x4_t v174 = vmulq_f32(v173, v168);
    v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
    float32x4_t v65 = vmlaq_n_f32(v226, vsubq_f32(v227, v226), vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v170), (int8x8_t)v171, 0), vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32)).f32[0]);
    v65.i32[2] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u32[0];
  }
  else
  {
    float32x2_t v164 = v191;
    if (v223 == 1) {
      float32x4_t v65 = v226;
    }
  }
LABEL_80:
  *a1 = vadd_f32(v164, *(float32x2_t *)v65.f32);
  a1[1].f32[0] = _S8 + v65.f32[2];
  __asm { FMLA            S0, S8, V6.S[2] }
  BOOL v186 = _S0 <= 0.0;
  unsigned int v187 = _S0 > 0.0;
  float v188 = -_Q6.f32[2];
  if (v186) {
    float v188 = _Q6.f32[2];
  }
  float32x2_t v189 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v187), 0x1FuLL)), (int8x8_t)vneg_f32(*(float32x2_t *)_Q6.f32), *(int8x8_t *)_Q6.f32);
LABEL_85:
  *a2 = v189;
  a2[1].f32[0] = v188;
}

float32_t physx::Gu::computeEdgeEdgeNormal(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float32x2_t *a6, float a7)
{
  float v7 = a7 + -0.1;
  float v8 = (float)((float)(a7 + -0.1) * a6[1].f32[0]) + a2[1].f32[0];
  float v9 = a4[1].f32[0];
  float v10 = a3[1].f32[0];
  float32x2_t v11 = vadd_f32(vmul_n_f32(*a6, v7), *a2);
  float32x2_t v12 = vsub_f32(*a4, v11);
  float32x2_t v13 = *a3;
  LODWORD(v14) = HIDWORD(*(unint64_t *)a3);
  float v15 = vmlas_n_f32(vmuls_lane_f32(v14, *a3, 1), v13.f32[0], v13.f32[0]) + (float)(v10 * v10);
  float32x2_t v16 = *a5;
  float v17 = a5[1].f32[0];
  float v18 = vmlas_n_f32(vmuls_lane_f32(COERCE_FLOAT(HIDWORD(*(unint64_t *)a5)), *a5, 1), v16.f32[0], v16.f32[0])
      + (float)(v17 * v17);
  float v19 = vmlas_n_f32(vmuls_lane_f32(v14, *a5, 1), COERCE_FLOAT(*a5), COERCE_FLOAT(*a3)) + (float)(v10 * v17);
  float v20 = vmlas_n_f32(vmuls_lane_f32(v12.f32[1], *a3, 1), v12.f32[0], COERCE_FLOAT(*a3)) + (float)(v10 * (float)(v9 - v8));
  float v21 = vmlas_n_f32(vmuls_lane_f32(v12.f32[1], *a5, 1), v12.f32[0], COERCE_FLOAT(*a5));
  float v22 = (float)(v15 * v18) - (float)(v19 * v19);
  float v23 = 0.0;
  if (v22 != 0.0)
  {
    float v24 = (float)((float)(v19 * (float)-(float)(v21 + (float)(v17 * (float)(v9 - v8)))) + (float)(v20 * v18)) / v22;
    if (v24 >= 0.0)
    {
      float v23 = v24;
      if (v24 > 1.0) {
        float v23 = 1.0;
      }
    }
  }
  float v25 = (float)((float)(v23 * v19) - (float)(v21 + (float)(v17 * (float)(v9 - v8)))) / v18;
  if (v25 >= 0.0)
  {
    if (v25 > 1.0)
    {
      float v28 = (float)(v20 + v19) / v15;
      float v29 = 1.0;
      if (v28 <= 1.0) {
        float v29 = v28;
      }
      if (v28 >= 0.0) {
        float v23 = v29;
      }
      else {
        float v23 = 0.0;
      }
      float v25 = 1.0;
    }
  }
  else
  {
    float v26 = v20 / v15;
    float v25 = 0.0;
    float v27 = 1.0;
    if (v26 <= 1.0) {
      float v27 = v26;
    }
    if (v26 >= 0.0) {
      float v23 = v27;
    }
    else {
      float v23 = 0.0;
    }
  }
  float32_t result = (float)(v8 + (float)(v10 * v23)) - (float)(v9 + (float)(v17 * v25));
  *a1 = vsub_f32(vadd_f32(v11, vmul_n_f32(v13, v23)), vadd_f32(*a4, vmul_n_f32(v16, v25)));
  a1[1].f32[0] = result;
  return result;
}

uint64_t physx::Gu::contactCapsuleConvex(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  float v413 = v5;
  float v7 = v6;
  float v9 = (float *)v8;
  float32x2_t v11 = v10;
  uint64_t v12 = v4;
  uint64_t v13 = v3;
  BOOL v14 = 0;
  uint64_t v467 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(void *)(v4 + 32);
  float32x2_t v16 = (float *)(v4 + 16);
  float32x4_t v17 = *(float32x4_t *)(v4 + 16);
  float v18 = (float *)(v4 + 4);
  float32x4_t v19 = *(float32x4_t *)(v4 + 4);
  float32x4_t v20 = v19;
  v20.i32[3] = 0;
  v56.i32[0] = *(_DWORD *)(v8 + 4);
  v59.i32[0] = *(_DWORD *)(v8 + 8);
  v61.i32[0] = *(_DWORD *)(v8 + 12);
  float v21 = v10[4] - *(float *)(v8 + 16);
  float v22 = v10[5] - *(float *)(v8 + 20);
  float v23 = v10[6] - *(float *)(v8 + 24);
  float v24 = v21 + v21;
  float v25 = v22 + v22;
  float v26 = v23 + v23;
  float v27 = (float)(v61.f32[0] * v61.f32[0]) + -0.5;
  float v28 = (float)((float)-(float)(v56.f32[0] * v25) - (float)(*(float *)v8 * v24)) - (float)(v59.f32[0] * v26);
  *(float *)&unsigned int v29 = (float)((float)(v61.f32[0] * (float)((float)(v59.f32[0] * v25) - (float)(v56.f32[0] * v26)))
                         + (float)(v24 * v27))
                 - (float)(*(float *)v8 * v28);
  *(float *)&unsigned int v30 = (float)((float)(v61.f32[0] * (float)((float)(*(float *)v8 * v26) - (float)(v59.f32[0] * v24)))
                         + (float)(v25 * v27))
                 - (float)(v56.f32[0] * v28);
  float v31 = (float)((float)(v61.f32[0] * (float)((float)(v56.f32[0] * v24) - (float)(*(float *)v8 * v25)))
              + (float)(v26 * v27))
      - (float)(v59.f32[0] * v28);
  float v33 = v10[2];
  float v32 = v10[3];
  float v34 = v10[1];
  float v35 = (float)((float)((float)(v61.f32[0] * *v10) - (float)(*(float *)v8 * v32)) - (float)(v56.f32[0] * v33))
      + (float)(v34 * v59.f32[0]);
  *(float *)v36.i32 = (float)((float)((float)(v61.f32[0] * v34) - (float)(v56.f32[0] * v32)) - (float)(v59.f32[0] * *v10))
                    + (float)(v33 * *(float *)v8);
  *(float *)v37.i32 = (float)((float)((float)(v61.f32[0] * v33) - (float)(v59.f32[0] * v32))
                            - (float)(*(float *)v8 * v34))
                    + (float)(*v10 * v56.f32[0]);
  v56.f32[0] = (float)((float)((float)(*(float *)v8 * *v10) + (float)(v61.f32[0] * v32)) + (float)(v56.f32[0] * v34))
             + (float)(v59.f32[0] * v33);
  v38.i32[3] = 0;
  v38.i64[0] = __PAIR64__(v30, v29);
  *(int32x2_t *)v61.f32 = vdup_lane_s32(v37, 0);
  *(int32x2_t *)v56.f32 = vdup_lane_s32(*(int32x2_t *)v56.f32, 0);
  *(float *)v39.i32 = v35 + v35;
  float v40 = *(float *)v36.i32 + *(float *)v36.i32;
  float v41 = *(float *)v37.i32 + *(float *)v37.i32;
  *(float *)v42.i32 = v35 * (float)(v35 + v35);
  float32x2_t v43 = vmul_n_f32((float32x2_t)vdup_lane_s32(v36, 0), *(float *)v36.i32 + *(float *)v36.i32);
  *(float32x2_t *)v59.f32 = vmul_n_f32(*(float32x2_t *)v61.f32, *(float *)v37.i32 + *(float *)v37.i32);
  float32x2_t v44 = vmul_n_f32((float32x2_t)vdup_lane_s32(v39, 0), *(float *)v36.i32);
  float32x2_t v45 = vmul_n_f32(*(float32x2_t *)v61.f32, *(float *)v39.i32);
  float32x2_t v46 = vmul_n_f32(*(float32x2_t *)v56.f32, *(float *)v39.i32);
  *(float32x2_t *)v61.f32 = vmul_n_f32(*(float32x2_t *)v61.f32, v40);
  float32x2_t v47 = vmul_n_f32(*(float32x2_t *)v56.f32, v40);
  float32x2_t v48 = vmul_n_f32(*(float32x2_t *)v56.f32, v41);
  __asm { FMOV            V17.2S, #1.0 }
  float32x2_t v54 = vsub_f32(_D17, (float32x2_t)vdup_lane_s32(v42, 0));
  float32x2_t v55 = vsub_f32(v45, v47);
  *(int8x8_t *)v56.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D17, v43), *(float32x2_t *)v59.f32), (int8x8_t)vadd_f32(v44, v48), 4uLL);
  int8x8_t v57 = (int8x8_t)vsub_f32(v44, v48);
  float32x2_t v58 = vadd_f32(v46, *(float32x2_t *)v61.f32);
  *(int8x8_t *)v59.f32 = vext_s8(v57, (int8x8_t)vsub_f32(v54, *(float32x2_t *)v59.f32), 4uLL);
  float32x2_t v60 = vsub_f32(v54, v43);
  *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vadd_f32(v45, v47), (int8x8_t)vsub_f32(*(float32x2_t *)v61.f32, v46), 4uLL);
  if (*(float *)(v4 + 4) == 1.0 && *(float *)(v4 + 8) == 1.0) {
    BOOL v14 = *(float *)(v4 + 12) == 1.0;
  }
  uint64_t v62 = *(void *)(v3 + 8);
  v38.f32[2] = v31;
  *(float32x2_t *)&v56.u32[2] = v55;
  *(float32x2_t *)&v59.u32[2] = v58;
  *(float32x2_t *)&v61.u32[2] = v60;
  LOBYTE(v454) = 0;
  memset(v453, 0, sizeof(v453));
  uint64_t v463 = v15 + 32;
  uint64_t v465 = *(void *)(v15 + 72) + 20 * *(unsigned __int8 *)(v15 + 71);
  char v466 = *(unsigned char *)(v15 + 70);
  v63.i64[0] = *(void *)(v15 + 92);
  v63.i64[1] = *(unsigned int *)(v15 + 100);
  int32x4_t v64 = (int32x4_t)vmulq_f32(v20, v63);
  *(float32x2_t *)v64.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v64, 2), *(float32x2_t *)v64.i8);
  *(float *)v64.i32 = vpmin_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v64.i8).f32[0];
  *(float32x2_t *)&v453[1] = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v64.i32);
  *((float *)&v453[1] + 2) = 0.025 * *(float *)v64.i32;
  if (v14)
  {
    long long v457 = xmmword_23435FD50;
    long long v458 = xmmword_23435FD60;
    long long v459 = xmmword_23435FD80;
    long long v460 = xmmword_23435FD50;
    long long v461 = xmmword_23435FD60;
    long long v462 = xmmword_23435FD80;
    float32x4_t v65 = 0uLL;
  }
  else
  {
    float32x4_t v66 = vrecpeq_f32(v20);
    int v67 = 4;
    do
    {
      float32x4_t v66 = vmulq_f32(v66, vrecpsq_f32(v66, v20));
      --v67;
    }
    while (v67);
    *(int32x2_t *)v68.f32 = vdup_lane_s32(*(int32x2_t *)v19.f32, 0);
    v68.i64[1] = v68.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v68, v20)), *(int8x8_t *)v38.f32).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v75 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1);
      float32x2_t v76 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 2);
      float32x2_t v77 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 3);
      float32x4_t v78 = vaddq_f32(v17, v17);
      float32x2_t v79 = vmul_lane_f32(v75, *(float32x2_t *)v78.f32, 1);
      float32x2_t v80 = vmul_laneq_f32(v76, v78, 2);
      float32x2_t v81 = vmul_n_f32(v75, v78.f32[0]);
      float32x2_t v82 = vmul_n_f32(v76, v78.f32[0]);
      float32x2_t v83 = vmul_n_f32(v77, v78.f32[0]);
      float32x2_t v84 = vmul_lane_f32(v76, *(float32x2_t *)v78.f32, 1);
      float32x2_t v85 = vmul_lane_f32(v77, *(float32x2_t *)v78.f32, 1);
      float32x2_t v86 = vmul_laneq_f32(v77, v78, 2);
      float32x2_t v87 = vsub_f32(_D17, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v78.f32), 0));
      *(int8x8_t *)v88.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D17, v79), v80), (int8x8_t)vadd_f32(v81, v86), 4uLL);
      v88.i64[1] = vsub_f32(v82, v85).u32[0];
      int32x2_t v89 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v81, v86), (int8x8_t)vsub_f32(v87, v80), 4uLL);
      int8x8_t v90 = (int8x8_t)vadd_f32(v82, v85);
      *(int8x8_t *)v78.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v88.f32, 0), (int8x8_t)v89, 4uLL);
      int8x8_t v91 = (int8x8_t)vdup_lane_s32(v89, 1);
      *(int32x2_t *)v92.f32 = v89;
      v92.i64[1] = vadd_f32(v84, v83).u32[0];
      *(int8x8_t *)v93.f32 = vext_s8(v90, (int8x8_t)vsub_f32(v84, v83), 4uLL);
      *(int8x8_t *)v94.f32 = vext_s8(*(int8x8_t *)v88.f32, v91, 4uLL);
      v93.i64[1] = vsub_f32(v87, v79).u32[0];
      v78.i64[1] = vdup_lane_s32(*(int32x2_t *)v93.f32, 0).u32[0];
      v94.i64[1] = vdup_lane_s32(*(int32x2_t *)v93.f32, 1).u32[0];
      *(int8x8_t *)v95.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v88.u32[2], 0), *(int8x8_t *)&v92.u32[2], 4uLL);
      v95.i64[1] = vdup_lane_s32(*(int32x2_t *)&v93.u32[2], 0).u32[0];
      float32x4_t v96 = vmulq_n_f32(v78, v19.f32[0]);
      v96.i32[3] = 0;
      float32x4_t v97 = vmulq_lane_f32(v94, *(float32x2_t *)v19.f32, 1);
      v97.i32[3] = 0;
      float32x4_t v98 = vmulq_laneq_f32(v95, v19, 2);
      v98.i32[3] = 0;
      float32x4_t v99 = vmulq_n_f32(v96, v88.f32[0]);
      v99.i32[3] = 0;
      float32x4_t v100 = vmulq_lane_f32(v97, *(float32x2_t *)v88.f32, 1);
      v100.i32[3] = 0;
      float32x4_t v101 = vmulq_laneq_f32(v98, v88, 2);
      v101.i32[3] = 0;
      float32x4_t v69 = vaddq_f32(v101, vaddq_f32(v99, v100));
      float32x4_t v102 = vmulq_n_f32(v96, v92.f32[0]);
      v102.i32[3] = 0;
      float32x4_t v103 = vmulq_lane_f32(v97, *(float32x2_t *)v92.f32, 1);
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_laneq_f32(v98, v92, 2);
      v104.i32[3] = 0;
      float32x4_t v105 = vaddq_f32(v102, v103);
      float32x4_t v106 = vmulq_n_f32(v96, v93.f32[0]);
      v106.i32[3] = 0;
      float32x4_t v107 = vmulq_lane_f32(v97, *(float32x2_t *)v93.f32, 1);
      v107.i32[3] = 0;
      float32x4_t v108 = vmulq_laneq_f32(v98, v93, 2);
      v108.i32[3] = 0;
      float32x4_t v70 = vaddq_f32(v104, v105);
      float32x4_t v71 = vaddq_f32(v108, vaddq_f32(v106, v107));
      long long v457 = (__int128)v69;
      long long v458 = (__int128)v70;
      long long v459 = (__int128)v71;
      float32x4_t v109 = vmulq_n_f32(v78, v66.f32[0]);
      v109.i32[3] = 0;
      float32x4_t v110 = vmulq_lane_f32(v94, *(float32x2_t *)v66.f32, 1);
      v110.i32[3] = 0;
      float32x4_t v111 = vmulq_laneq_f32(v95, v66, 2);
      v111.i32[3] = 0;
      float32x4_t v112 = vmulq_n_f32(v109, v88.f32[0]);
      v112.i32[3] = 0;
      float32x4_t v113 = vmulq_lane_f32(v110, *(float32x2_t *)v88.f32, 1);
      v113.i32[3] = 0;
      float32x4_t v114 = vmulq_laneq_f32(v111, v88, 2);
      v114.i32[3] = 0;
      float32x4_t v72 = vaddq_f32(v114, vaddq_f32(v112, v113));
      float32x4_t v115 = vmulq_n_f32(v109, v92.f32[0]);
      v115.i32[3] = 0;
      float32x4_t v116 = vmulq_lane_f32(v110, *(float32x2_t *)v92.f32, 1);
      v116.i32[3] = 0;
      float32x4_t v117 = vmulq_laneq_f32(v111, v92, 2);
      v117.i32[3] = 0;
      float32x4_t v118 = vmulq_n_f32(v109, v93.f32[0]);
      v118.i32[3] = 0;
      float32x4_t v119 = vmulq_lane_f32(v110, *(float32x2_t *)v93.f32, 1);
      v119.i32[3] = 0;
      float32x4_t v73 = vaddq_f32(v117, vaddq_f32(v115, v116));
      float32x4_t v120 = vmulq_laneq_f32(v111, v93, 2);
      v120.i32[3] = 0;
      float32x4_t v74 = vaddq_f32(v120, vaddq_f32(v118, v119));
    }
    else
    {
      v66.i32[3] = 0;
      float32x4_t v69 = vmulq_f32(v20, (float32x4_t)xmmword_23435FD50);
      float32x4_t v70 = vmulq_f32(v20, (float32x4_t)xmmword_23435FD60);
      float32x4_t v71 = vmulq_f32(v20, (float32x4_t)xmmword_23435FD80);
      long long v457 = (__int128)v69;
      long long v458 = (__int128)v70;
      long long v459 = (__int128)v71;
      float32x4_t v72 = vmulq_f32(v66, (float32x4_t)xmmword_23435FD50);
      float32x4_t v73 = vmulq_f32(v66, (float32x4_t)xmmword_23435FD60);
      float32x4_t v74 = vmulq_f32(v66, (float32x4_t)xmmword_23435FD80);
    }
    long long v461 = (__int128)v73;
    long long v462 = (__int128)v74;
    float32x4_t v121 = vmulq_f32(v69, (float32x4_t)0);
    v121.i32[3] = 0;
    float32x4_t v122 = vmulq_f32(v70, (float32x4_t)0);
    v122.i32[3] = 0;
    float32x4_t v123 = vmulq_f32(v71, (float32x4_t)0);
    v123.i32[3] = 0;
    float32x4_t v65 = vaddq_f32(v123, vaddq_f32(v122, v121));
    long long v460 = (__int128)v72;
    v453[0] = v65;
  }
  long long v420 = 0u;
  int8x16_t v426 = 0u;
  float32x4_t v443 = 0u;
  float32x4_t v444 = v38;
  unint64_t v441 = 0;
  uint64_t v464 = *(void *)(v15 + 80);
  float32x4_t v124 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)&v62);
  float32x4_t v125 = vmulq_n_f32(v56, v124.f32[0]);
  v125.i32[3] = 0;
  float32x4_t v126 = vmulq_lane_f32(v59, *(float32x2_t *)v124.f32, 1);
  v126.i32[3] = 0;
  float32x4_t v127 = vmulq_laneq_f32(v61, v124, 2);
  v127.i32[3] = 0;
  float32x4_t v128 = vaddq_f32(v127, vaddq_f32(v126, v125));
  uint64_t v451 = 0;
  float32x4_t v449 = vaddq_f32(v38, v128);
  float32x4_t v450 = vsubq_f32(v38, v128);
  uint64_t v445 = 0;
  uint64_t v446 = 0x400000000;
  LOBYTE(v447) = 1;
  signed int v433 = &v444;
  signed int v431 = v453;
  signed int v432 = &unk_26E7287F0;
  signed int v430 = &unk_26E728850;
  float32x4_t v429 = vsubq_f32(v38, v65);
  double v439 = COERCE_DOUBLE(vdup_n_s32(0x7F7FFFFFu));
  if (physx::Gu::gjk<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)&v432, (uint64_t)&v430, &v429, &v439, (int8x16_t *)&v420, &v426, &v443, &v441, v439, *(double *)v450.i64, *(double *)v449.i64, (int32x4_t)v127) == 2)
  {
    float v129 = 0.0;
  }
  else
  {
    float v129 = *(float *)&v441;
    float v131 = v9[2];
    float v130 = v9[3];
    float v132 = (float)(v130 * v130) + -0.5;
    float v133 = v9[1];
    float v134 = (float)((float)((float)(*(float *)&v426.i32[1] + *(float *)&v426.i32[1]) * v133)
                 + (float)(*v9 * (float)(*(float *)v426.i32 + *(float *)v426.i32)))
         + (float)(v131 * (float)(*(float *)&v426.i32[2] + *(float *)&v426.i32[2]));
    v2.f32[0] = v9[4]
              + (float)((float)((float)(v130
                                      * (float)((float)(v133 * (float)(*(float *)&v426.i32[2] + *(float *)&v426.i32[2]))
                                              - (float)(v131 * (float)(*(float *)&v426.i32[1] + *(float *)&v426.i32[1]))))
                              + (float)((float)(*(float *)v426.i32 + *(float *)v426.i32) * v132))
                      + (float)(*v9 * v134));
    float v1 = v9[5]
       + (float)((float)((float)(v130
                               * (float)((float)(v131 * (float)(*(float *)v426.i32 + *(float *)v426.i32))
                                       - (float)(*v9 * (float)(*(float *)&v426.i32[2] + *(float *)&v426.i32[2]))))
                       + (float)((float)(*(float *)&v426.i32[1] + *(float *)&v426.i32[1]) * v132))
               + (float)(v133 * v134));
    float v372 = v9[6]
         + (float)((float)((float)(v130
                                 * (float)((float)(*v9 * (float)(*(float *)&v426.i32[1] + *(float *)&v426.i32[1]))
                                         - (float)(v133 * (float)(*(float *)v426.i32 + *(float *)v426.i32))))
                         + (float)((float)(*(float *)&v426.i32[2] + *(float *)&v426.i32[2]) * v132))
                 + (float)(v131 * v134));
    float v135 = (float)((float)((float)(v443.f32[1] + v443.f32[1]) * v133) + (float)(*v9 * (float)(v443.f32[0] + v443.f32[0])))
         + (float)(v131 * (float)(v443.f32[2] + v443.f32[2]));
    float v414 = (float)((float)(v130
                         * (float)((float)(v133 * (float)(v443.f32[2] + v443.f32[2]))
                                 - (float)(v131 * (float)(v443.f32[1] + v443.f32[1]))))
                 + (float)((float)(v443.f32[0] + v443.f32[0]) * v132))
         + (float)(*v9 * v135);
    float v407 = (float)((float)(v130
                         * (float)((float)(*v9 * (float)(v443.f32[1] + v443.f32[1]))
                                 - (float)(v133 * (float)(v443.f32[0] + v443.f32[0]))))
                 + (float)((float)(v443.f32[2] + v443.f32[2]) * v132))
         + (float)(v131 * v135);
    float v410 = (float)((float)(v130
                         * (float)((float)(v131 * (float)(v443.f32[0] + v443.f32[0]))
                                 - (float)(*v9 * (float)(v443.f32[2] + v443.f32[2]))))
                 + (float)((float)(v443.f32[1] + v443.f32[1]) * v132))
         + (float)(v133 * v135);
  }
  if (v129 >= (float)(*(float *)(v13 + 4) + *v7)) {
    return 0;
  }
  BOOL v136 = 0;
  float v137 = *v11;
  float v138 = v11[1];
  float v139 = v137 + v137;
  float v141 = v11[2];
  float v140 = v11[3];
  float v142 = v140 + v140;
  float v143 = (float)((float)(v140 * (float)(v140 + v140)) + -1.0) + (float)(v137 * (float)(v137 + v137));
  float v144 = (float)(v139 * v138) + (float)(v141 * (float)(v140 + v140));
  float v145 = (float)(v139 * v141) - (float)(v138 * v142);
  float v146 = *(float *)(v13 + 8);
  float v147 = v143 * v146;
  float v148 = v146 * v144;
  float v149 = v145 * v146;
  float v150 = v11[4];
  float v151 = v11[5];
  float v152 = v150 + v147;
  float v153 = v151 + v148;
  float v154 = v11[6];
  float v155 = v149 + v154;
  *(float *)v426.i32 = v150 + v147;
  *(float *)&v426.i32[1] = v151 + v148;
  float v156 = v150 - v147;
  float v157 = v151 - v148;
  float v158 = v154 - v149;
  *(float *)&v426.i32[2] = v149 + v154;
  *(float *)&v426.i32[3] = v150 - v147;
  float v427 = v151 - v148;
  float v428 = v154 - v149;
  int v159 = 2;
  if ((float)(v150 + v147) == (float)(v150 - v147) && v153 == v157)
  {
    BOOL v136 = v155 == v158;
    if (v155 == v158) {
      int v159 = 1;
    }
    else {
      int v159 = 2;
    }
  }
  float v377 = v129;
  long long v420 = xmmword_23435FD50;
  long long v421 = xmmword_23435FD50;
  long long v422 = xmmword_234376D80;
  long long v423 = xmmword_23435FD60;
  uint64_t v424 = 0x3F80000000000000;
  char v425 = 0;
  if (*(float *)(v12 + 4) != 1.0 || *(float *)(v12 + 8) != 1.0 || *(float *)(v12 + 12) != 1.0) {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)&v420, v18, v16);
  }
  physx::Gu::getPolygonalData_Convex((uint64_t)&v444, *(void *)(v12 + 48), (uint64_t)&v420);
  if (v377 <= 0.0)
  {
    float v405 = v156;
    v402 = v7;
    uint64_t v195 = v13;
    float v196 = *(float *)(v13 + 4);
    uint64_t v197 = v445;
    uint64_t v198 = v446;
    float v199 = *v9;
    float v200 = v9[1];
    float v201 = v9[2];
    float v202 = v9[3];
    float v203 = v200 + v200;
    float v204 = v201 + v201;
    float v205 = v200 * (float)(v200 + v200);
    float v206 = v201 * (float)(v201 + v201);
    float v207 = (float)(v199 + v199) * v200;
    float v208 = (float)(v199 + v199) * v201;
    float v209 = (float)(v199 + v199) * v202;
    float v210 = v203 * v201;
    float v211 = v203 * v202;
    float v212 = v204 * v202;
    *(float *)long long v453 = (float)(1.0 - v205) - v206;
    *((float *)v453 + 1) = v207 + v212;
    float v213 = 1.0 - (float)(v199 * (float)(v199 + v199));
    *((float *)v453 + 2) = v208 - v211;
    *((float *)v453 + 3) = v207 - v212;
    *(float *)&v453[1] = v213 - v206;
    *((float *)&v453[1] + 1) = v210 + v209;
    *((float *)&v453[1] + 2) = v208 + v211;
    *((float *)&v453[1] + 3) = v210 - v209;
    uint64_t v455 = *((void *)v9 + 2);
    int v214 = *((_DWORD *)v9 + 6);
    float v454 = v213 - v205;
    int v456 = v214;
    if (v445)
    {
      uint64_t v215 = (float32x2_t *)(v446 + 8);
      *(void *)&long long v160 = 0;
      float v216 = 0.0;
      v2.i32[0] = 2139095039;
      uint64_t v217 = v445;
      while (1)
      {
        long long v415 = v160;
        float v218 = v215[-1].f32[0];
        float v219 = v215[-1].f32[1];
        float32_t v220 = (float)((float)(v218 * *((float *)v453 + 2)) + (float)(v219 * *((float *)&v453[1] + 1)))
             + (float)(v215->f32[0] * v454);
        *(float32x2_t *)v443.f32 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)&v453[0], v218), vmul_n_f32(*(float32x2_t *)((char *)v453 + 12), v219)), vmul_n_f32(*(float32x2_t *)((char *)&v453[1] + 8), v215->f32[0]));
        v443.f32[2] = v220;
        LODWORD(v432) = 0;
        if (!GuTestAxis(v443.f32, (float *)v426.i32, (uint64_t)&v444, (uint64_t)&v420, (uint64_t)v453, (float *)&v432, v196))return 0; {
        v221.i32[0] = (int)v432;
        }
        *((void *)&v160 + 1) = *((void *)&v415 + 1);
        *(int8x8_t *)&long long v160 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v2, v221), 0), *(int8x8_t *)v443.f32, *(int8x8_t *)&v415);
        if (*(float *)&v432 < v2.f32[0])
        {
          float v216 = v443.f32[2];
          v2.f32[0] = *(float *)&v432;
        }
        uint64_t v215 = (float32x2_t *)((char *)v215 + 20);
        if (!--v217) {
          goto LABEL_41;
        }
      }
    }
    *(void *)&long long v160 = 0;
    float v216 = 0.0;
    v2.i32[0] = 2139095039;
LABEL_41:
    float v378 = v155;
    float v380 = v152;
    float v373 = v153;
    float v370 = v157;
    if (v136)
    {
      uint64_t v222 = v195;
      unsigned int v223 = v402;
    }
    else
    {
      float v224 = v405 - v152;
      float v225 = v157 - v153;
      float v226 = v158 - v155;
      float v227 = (float)((float)(v225 * v225) + (float)(v224 * v224)) + (float)(v226 * v226);
      float v228 = 0.0;
      float v229 = 0.0;
      float v230 = 0.0;
      uint64_t v222 = v195;
      if (v227 > 0.0)
      {
        float v231 = 1.0 / sqrtf(v227);
        float v228 = v224 * v231;
        float v229 = v225 * v231;
        float v230 = v226 * v231;
      }
      unsigned int v223 = v402;
      if (v197)
      {
        float v232 = -v230;
        float v233 = -v228;
        float v234 = -v229;
        float v235 = (float *)(v198 + 8);
        float v408 = -v229;
        float v411 = v230;
        do
        {
          float v236 = *(v235 - 2);
          float v237 = *(v235 - 1);
          float v238 = (float)((float)(v236 * *(float *)v453) + (float)(v237 * *((float *)v453 + 3)))
               + (float)(*v235 * *((float *)&v453[1] + 2));
          float v239 = (float)((float)(v236 * *((float *)v453 + 1)) + (float)(v237 * *(float *)&v453[1]))
               + (float)(*v235 * *((float *)&v453[1] + 3));
          float v240 = (float)((float)(v236 * *((float *)v453 + 2)) + (float)(v237 * *((float *)&v453[1] + 1)))
               + (float)(*v235 * v454);
          float v241 = (float)(v239 * v232) + (float)(v229 * v240);
          float v242 = (float)(v240 * v233) + (float)(v230 * v238);
          float v243 = (float)(v238 * v234) + (float)(v228 * v239);
          if (fabsf(v241) > 0.000001 || fabsf(v242) > 0.000001 || fabsf(v243) > 0.000001)
          {
            float v244 = v229;
            float v245 = v228;
            long long v416 = v160;
            float v246 = (float)((float)(v242 * v242) + (float)(v241 * v241)) + (float)(v243 * v243);
            float v247 = 0.0;
            float v248 = 0.0;
            float v249 = 0.0;
            if (v246 > 0.0)
            {
              float v250 = 1.0 / sqrtf(v246);
              float v247 = v241 * v250;
              float v248 = v242 * v250;
              float v249 = v243 * v250;
            }
            v443.i64[0] = __PAIR64__(LODWORD(v248), LODWORD(v247));
            v443.f32[2] = v249;
            LODWORD(v432) = 0;
            if (!GuTestAxis(v443.f32, (float *)v426.i32, (uint64_t)&v444, (uint64_t)&v420, (uint64_t)v453, (float *)&v432, v196))return 0; {
            v251.i32[0] = (int)v432;
            }
            *((void *)&v160 + 1) = *((void *)&v416 + 1);
            *(int8x8_t *)&long long v160 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v2, v251), 0), *(int8x8_t *)v443.f32, *(int8x8_t *)&v416);
            if (*(float *)&v432 < v2.f32[0])
            {
              float v216 = v443.f32[2];
              v2.f32[0] = *(float *)&v432;
            }
            float v228 = v245;
            float v229 = v244;
            float v234 = v408;
            float v230 = v411;
          }
          v235 += 5;
          --v197;
        }
        while (v197);
      }
    }
    float v252 = v378;
    float v253 = v9[1];
    float v254 = v9[2];
    float v255 = v9[3];
    float v256 = (float)((float)((float)(v444.f32[1] + v444.f32[1]) * v253) + (float)(*v9 * (float)(v444.f32[0] + v444.f32[0])))
         + (float)(v254 * (float)(v444.f32[2] + v444.f32[2]));
    float v257 = (float)(v255 * v255) + -0.5;
    float v258 = v380;
    float v259 = v373;
    float v260 = vmlas_n_f32(vmuls_lane_f32((float)((float)(v373 + v370) * 0.5)- (float)(v9[5]+ (float)((float)((float)((float)((float)(v254 * (float)(v444.f32[0] + v444.f32[0]))- (float)(*v9 * (float)(v444.f32[2] + v444.f32[2])))* v255)+ (float)((float)(v444.f32[1] + v444.f32[1]) * v257))+ (float)(v253 * v256))), *(float32x2_t *)&v160, 1), (float)((float)(v380 + v405) * 0.5)- (float)(v9[4]+ (float)((float)((float)(v255* (float)((float)(v253 * (float)(v444.f32[2] + v444.f32[2]))- (float)(v254 * (float)(v444.f32[1] + v444.f32[1]))))+ (float)((float)(v444.f32[0] + v444.f32[0]) * v257))+ (float)(*v9 * v256))), *(float *)&v160)+ (float)(v216
                 * (float)((float)((float)(v378 + v158) * 0.5)
                         - (float)(v9[6]
                                 + (float)((float)((float)(v255
                                                         * (float)((float)(*v9 * (float)(v444.f32[1] + v444.f32[1]))
                                                                 - (float)(v253 * (float)(v444.f32[0] + v444.f32[0]))))
                                                 + (float)((float)(v444.f32[2] + v444.f32[2]) * v257))
                                         + (float)(v254 * v256)))));
    if (v260 >= 0.0) {
      float v261 = v216;
    }
    else {
      float v261 = -v216;
    }
    float32x2_t v386 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v260 < 0.0), 0x1FuLL)), (int8x8_t)vneg_f32(*(float32x2_t *)&v160), *(int8x8_t *)&v160);
    unint64_t v434 = (unint64_t)v386;
    float v388 = v261;
    float v435 = v261;
    GuGenerateVFContacts2((uint64_t)v413, v9, (uint64_t)&v444, (uint64_t)v18, v159, (uint64_t)&v426, (float32x2_t *)&v434, *(float *)(v222 + 4), *v223);
    unint64_t v262 = v413[512].u32[0];
    if (v136 || v262 == 2) {
      return 1;
    }
    float v384 = *(float *)(v222 + 4);
    float v263 = *v223;
    unsigned int UniqueConvexEdges = physx::Gu::findUniqueConvexEdges(512, (uint64_t)v453, v445, (float32x2_t *)v446, v448);
    signed int v432 = (void *)__PAIR64__(LODWORD(v373), LODWORD(v380));
    *(float *)&signed int v433 = v378;
    signed int v430 = (void *)__PAIR64__(LODWORD(v370), LODWORD(v405));
    *(float *)&signed int v431 = v158;
    _S0 = v405 - v380;
    float v266 = v370 - v373;
    float v267 = v158 - v378;
    float v268 = sqrtf((float)((float)(v266 * v266) + (float)(_S0 * _S0)) + (float)(v267 * v267));
    if (v268 > 0.0)
    {
      float v269 = 0.01 / v268;
      float v270 = _S0 * v269;
      float v271 = v266 * v269;
      float v272 = v267 * v269;
      float v258 = v380 - v270;
      float v259 = v373 - v271;
      *(float *)&signed int v432 = v380 - v270;
      *((float *)&v432 + 1) = v373 - v271;
      float v252 = v378 - v272;
      *(float *)&signed int v433 = v378 - v272;
      *(float *)&signed int v430 = v405 + v270;
      *((float *)&v430 + 1) = v370 + v271;
      *(float *)&signed int v431 = v158 + v272;
      _S0 = (float)(v405 + v270) - (float)(v380 - v270);
      float v266 = (float)(v370 + v271) - (float)(v373 - v271);
      float v267 = (float)(v158 + v272) - (float)(v378 - v272);
    }
    v429.i64[0] = __PAIR64__(LODWORD(v266), LODWORD(_S0));
    v429.f32[2] = v267;
    _V5.S[1] = v386.i32[1];
    float v274 = vmuls_lane_f32(-v267, v386, 1) + (float)(v266 * v388);
    __asm { FMLA            S1, S0, V5.S[1] }
    v443.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vmlas_n_f32(-(float)(_S0 * v388), v267, v386.f32[0])), LODWORD(v274));
    v443.f32[2] = _S1;
    v443.f32[3] = -(float)((float)((float)(v259 * v443.f32[1]) + (float)(v274 * v258)) + (float)(_S1 * v252));
    float v276 = fabsf(v274);
    float v277 = fabsf(v443.f32[1]);
    float v278 = fabsf(_S1);
    if (v277 <= v276 || v277 <= v278)
    {
      unsigned int v281 = 1;
      if (v278 <= v276)
      {
        unsigned int v283 = 2;
        if (!UniqueConvexEdges) {
          return 1;
        }
LABEL_77:
        float v417 = 1.0
             / (float)((float)(v429.f32[v281] * *((float *)&v434 + v283))
                     - (float)(v429.f32[v283] * *((float *)&v434 + v281)));
        uint64_t v285 = v447;
        float v287 = v9[2];
        float v286 = v9[3];
        float v288 = (float)(v286 * v286) + -0.5;
        float v290 = *v9;
        float v289 = v9[1];
        float v409 = -*v9;
        float v412 = -v287;
        float v406 = -v289;
        uint64_t v291 = UniqueConvexEdges;
        float v400 = *(float *)&v420;
        float v403 = (float)-v384 - v263;
        float v396 = *((float *)&v420 + 2);
        float v398 = *((float *)&v420 + 1);
        float v392 = *(float *)&v421;
        float v394 = *((float *)&v420 + 3);
        float v292 = *((float *)&v421 + 2);
        float v390 = *((float *)&v421 + 1);
        float v293 = *((float *)&v421 + 3);
        float v294 = *(float *)&v422;
        long long v295 = (unsigned __int8 *)v453 + 1;
        do
        {
          unsigned int v296 = *v295;
          float v297 = (float *)(v285 + 12 * *(v295 - 1));
          float v298 = v297[1];
          float v299 = v394 * v298;
          float v300 = (float)(v398 * *v297) + (float)(v392 * v298);
          float v301 = (float)(v396 * *v297) + (float)(v390 * v298);
          float v302 = v297[2];
          float v303 = v293 * v302;
          float v304 = v301 + (float)(v294 * v302);
          float v305 = (float)((float)((float)(v400 * *v297) + v299) + (float)(v292 * v302))
               + (float)((float)((float)(v400 * *v297) + v299) + (float)(v292 * v302));
          float v306 = (float)(v300 + v303) + (float)(v300 + v303);
          float v307 = v304 + v304;
          float v308 = (float)((float)(v289 * v306) + (float)(v290 * v305)) + (float)(v287 * v307);
          float v309 = (float)((float)(v286 * (float)((float)(v306 * v412) + (float)(v289 * v307))) + (float)(v305 * v288))
               + (float)(v290 * v308);
          float v310 = (float)((float)(v286 * (float)((float)(v307 * v409) + (float)(v287 * v305))) + (float)(v306 * v288))
               + (float)(v289 * v308);
          float v311 = (float)((float)(v286 * (float)((float)(v305 * v406) + (float)(v290 * v306))) + (float)(v307 * v288))
               + (float)(v287 * v308);
          float v312 = v9[4];
          float v313 = v9[5];
          *(float *)&unsigned int v314 = v312 + v309;
          *(float *)&unsigned int v315 = v313 + v310;
          float v316 = v9[6];
          unint64_t v441 = __PAIR64__(v315, v314);
          float v442 = v316 + v311;
          int v317 = (float *)(v285 + 12 * v296);
          float v318 = v317[1];
          float v319 = v394 * v318;
          float v320 = (float)(v398 * *v317) + (float)(v392 * v318);
          float v321 = (float)(v396 * *v317) + (float)(v390 * v318);
          float v322 = v317[2];
          float v323 = v293 * v322;
          float v324 = v321 + (float)(v294 * v322);
          float v325 = (float)((float)((float)(v400 * *v317) + v319) + (float)(v292 * v322))
               + (float)((float)((float)(v400 * *v317) + v319) + (float)(v292 * v322));
          float v326 = (float)(v320 + v323) + (float)(v320 + v323);
          float v327 = v324 + v324;
          float v328 = (float)((float)(v289 * v326) + (float)(v290 * v325)) + (float)(v287 * v327);
          *(float *)&double v439 = v312
                          + (float)((float)((float)(v286 * (float)((float)(v326 * v412) + (float)(v289 * v327)))
                                          + (float)(v325 * v288))
                                  + (float)(v290 * v328));
          *((float *)&v439 + 1) = v313
                                + (float)((float)((float)(v286 * (float)((float)(v327 * v409) + (float)(v287 * v325)))
                                                + (float)(v326 * v288))
                                        + (float)(v289 * v328));
          float v440 = v316
               + (float)((float)((float)(v286 * (float)((float)(v325 * v406) + (float)(v290 * v326)))
                               + (float)(v327 * v288))
                       + (float)(v287 * v328));
          v418.i32[0] = 0;
          if (intersectEdgeEdgePreca((float *)&v432, (float *)&v430, (uint64_t)&v429, v443.f32, v281, v283, (float32x2_t *)&v434, (float *)&v441, v417, v403, (float *)&v439, (float *)&v418, &v437)&& v262 <= 0x3F)
          {
            float v329 = v418.f32[0];
            float32_t v330 = -(float)(v384 + v418.f32[0]);
            float32_t v331 = v438 - (float)(v388 * v418.f32[0]);
            float v332 = &v413[8 * v262++];
            v413[512].i32[0] = v262;
            *float v332 = v386;
            v332[2] = vsub_f32(v437, vmul_n_f32(v386, v329));
            v332[3].f32[0] = v331;
            v332[1].f32[0] = v388;
            v332[1].f32[1] = v330;
            v332[6].i32[1] = -1;
          }
          v295 += 16;
          --v291;
        }
        while (v291);
        return 1;
      }
      int v282 = 0;
    }
    else
    {
      unsigned int v281 = 0;
      int v282 = 2;
    }
    unsigned int v283 = v281;
    unsigned int v281 = v282;
    if (!UniqueConvexEdges) {
      return 1;
    }
    goto LABEL_77;
  }
  float v375 = -v410;
  float v376 = -v414;
  v418.f32[0] = -v414;
  v418.f32[1] = -v410;
  float v374 = -v407;
  float v419 = -v407;
  GuGenerateVFContacts2((uint64_t)v413, v9, (uint64_t)&v444, (uint64_t)v18, v159, (uint64_t)&v426, &v418, *(float *)(v13 + 4), *v7);
  unint64_t v161 = v413[512].u32[0];
  if (v161 != 2)
  {
    if (v136)
    {
LABEL_93:
      if (!v161)
      {
        float32_t v367 = v377 - *(float *)(v13 + 4);
        v413[512].i32[0] = 1;
        float32x2_t *v413 = v418;
        float v368 = v419;
        v413[2].i32[0] = v2.i32[0];
        v413[2].f32[1] = v1;
        v413[3].f32[0] = v372;
        v413[1].f32[0] = v368;
        v413[1].f32[1] = v367;
        v413[6].i32[1] = -1;
      }
      return 1;
    }
    float v369 = v1;
    float v162 = *v9;
    float v163 = v9[1];
    float v164 = v9[2];
    float v165 = v9[3];
    float v166 = v163 + v163;
    float v167 = v164 + v164;
    float v168 = v163 * (float)(v163 + v163);
    float v169 = v164 * (float)(v164 + v164);
    float v170 = (float)(v162 + v162) * v163;
    float v171 = (float)(v162 + v162) * v164;
    float v172 = (float)(v162 + v162) * v165;
    float v173 = v166 * v164;
    float v174 = v166 * v165;
    float v175 = v167 * v165;
    float v176 = 1.0 - (float)(v162 * (float)(v162 + v162));
    float v383 = v9[5];
    float v385 = v9[4];
    float v382 = v9[6];
    float v371 = *(float *)(v13 + 4);
    float v177 = *v7;
    float v399 = v171 - v174;
    float v401 = v170 + v175;
    float v404 = (float)(1.0 - v168) - v169;
    float v395 = v176 - v169;
    float v397 = v170 - v175;
    float v391 = v171 + v174;
    float v393 = v173 + v172;
    float v387 = v176 - v168;
    float v389 = v173 - v172;
    v443.f32[0] = (float)((float)((float)(v170 + v175) * v375) + (float)(v404 * v376))
                + (float)((float)(v171 - v174) * v374);
    v443.f32[1] = (float)((float)((float)(v176 - v169) * v375) + (float)((float)(v170 - v175) * v376))
                + (float)((float)(v173 + v172) * v374);
    v443.f32[2] = (float)((float)((float)(v173 - v172) * v375) + (float)((float)(v171 + v174) * v376))
                + (float)((float)(v176 - v168) * v374);
    unsigned int v178 = v452(&v444, &v420, &v443);
    signed int v432 = (void *)__PAIR64__(LODWORD(v153), LODWORD(v152));
    *(float *)&signed int v433 = v155;
    signed int v430 = (void *)__PAIR64__(LODWORD(v157), LODWORD(v156));
    *(float *)&signed int v431 = v158;
    float v179 = v156 - v152;
    float v180 = v157 - v153;
    float v181 = v158 - v155;
    float v182 = sqrtf((float)((float)(v180 * v180) + (float)(v179 * v179)) + (float)(v181 * v181));
    if (v182 > 0.0)
    {
      float v183 = 0.01 / v182;
      float v184 = v179 * v183;
      float v185 = v180 * v183;
      float v186 = v181 * v183;
      float v152 = v152 - v184;
      float v153 = v153 - v185;
      signed int v432 = (void *)__PAIR64__(LODWORD(v153), LODWORD(v152));
      float v155 = v155 - v186;
      *(float *)&signed int v433 = v155;
      *(float *)&signed int v430 = v156 + v184;
      *((float *)&v430 + 1) = v157 + v185;
      *(float *)&signed int v431 = v158 + v186;
      float v179 = (float)(v156 + v184) - v152;
      float v180 = (float)(v157 + v185) - v153;
      float v181 = (float)(v158 + v186) - v155;
    }
    v429.i64[0] = __PAIR64__(LODWORD(v180), LODWORD(v179));
    v429.f32[2] = v181;
    float v187 = (float)(v410 * v181) + (float)(v180 * v374);
    float v188 = (float)(v407 * v179) + (float)(v181 * v376);
    float v189 = (float)(v414 * v180) + (float)(v179 * v375);
    *(float *)long long v453 = -v187;
    *((float *)v453 + 1) = -v188;
    *((float *)v453 + 2) = -v189;
    *((float *)v453 + 3) = -(float)((float)((float)-(float)(v188 * v153) - (float)(v187 * v152))
                                  + (float)((float)-v189 * v155));
    float v190 = fabsf(v187);
    float v191 = fabsf(v188);
    float v192 = fabsf(v189);
    if (v191 <= v190 || v191 <= v192)
    {
      unsigned int v193 = 1;
      if (v192 <= v190)
      {
        unsigned int v284 = 2;
        goto LABEL_84;
      }
      int v194 = 0;
    }
    else
    {
      unsigned int v193 = 0;
      int v194 = 2;
    }
    unsigned int v284 = v193;
    unsigned int v193 = v194;
LABEL_84:
    float v333 = (char *)(v446 + 20 * v178);
    int v334 = v333[18];
    unint64_t v161 = v413[512].u32[0];
    if (v333[18])
    {
      uint64_t v335 = 0;
      uint64_t v336 = v447;
      uint64_t v337 = v448 + *((unsigned __int16 *)v333 + 8);
      unsigned int v338 = v334 - 1;
      float v339 = *((float *)&v420 + 1);
      float v379 = *(float *)&v420;
      float v381 = 1.0 / (float)((float)(v429.f32[v284] * v418.f32[v193]) - (float)(v429.f32[v193] * v418.f32[v284]));
      uint64_t v340 = *((void *)&v420 + 1);
      long long v341 = v421;
      float v342 = *(float *)&v422;
      do
      {
        float v343 = (float *)(v336 + 12 * *(unsigned __int8 *)(v337 + v338));
        float v344 = v343[1];
        float v345 = (float)(v379 * *v343) + (float)(*((float *)&v340 + 1) * v344);
        float v346 = (float)(v339 * *v343) + (float)(*(float *)&v341 * v344);
        float v347 = (float)(*(float *)&v340 * *v343) + (float)(*((float *)&v341 + 1) * v344);
        float v348 = v343[2];
        float v349 = v345 + (float)(*((float *)&v341 + 2) * v348);
        float v350 = v346 + (float)(*((float *)&v341 + 3) * v348);
        float v351 = v347 + (float)(v342 * v348);
        *(float *)&unint64_t v441 = v385 + (float)((float)(v391 * v351) + (float)((float)(v404 * v349) + (float)(v397 * v350)));
        *((float *)&v441 + 1) = v383
                              + (float)((float)(v389 * v351) + (float)((float)(v401 * v349) + (float)(v395 * v350)));
        float v442 = v382 + (float)((float)(v387 * v351) + (float)((float)(v399 * v349) + (float)(v393 * v350)));
        float v352 = (float *)(v336 + 12 * *(unsigned __int8 *)(v337 + v335));
        float v353 = v352[1];
        float v354 = (float)(v379 * *v352) + (float)(*((float *)&v340 + 1) * v353);
        float v355 = (float)(v339 * *v352) + (float)(*(float *)&v341 * v353);
        float v356 = (float)(*(float *)&v340 * *v352) + (float)(*((float *)&v341 + 1) * v353);
        float v357 = v352[2];
        float v358 = v354 + (float)(*((float *)&v341 + 2) * v357);
        float v359 = v355 + (float)(*((float *)&v341 + 3) * v357);
        float v360 = v356 + (float)(v342 * v357);
        *(float *)&double v439 = v385 + (float)((float)(v391 * v360) + (float)((float)(v404 * v358) + (float)(v397 * v359)));
        *((float *)&v439 + 1) = v383
                              + (float)((float)(v389 * v360) + (float)((float)(v401 * v358) + (float)(v395 * v359)));
        float v440 = v382 + (float)((float)(v387 * v360) + (float)((float)(v399 * v358) + (float)(v393 * v359)));
        float v436 = 0.0;
        unint64_t v434 = __PAIR64__(LODWORD(v410), LODWORD(v414));
        float v435 = v407;
        if (intersectEdgeEdgePreca((float *)&v432, (float *)&v430, (uint64_t)&v429, (float *)v453, v193, v284, (float32x2_t *)&v434, (float *)&v441, v381, 0.0, (float *)&v439, &v436, &v437)&& v436 < (float)(v371 + v177)&& v161 <= 0x3F)
        {
          float32_t v361 = (float)(v407 * v436) + v438;
          float v362 = v437.f32[0];
          float32_t v363 = (float)(v410 * v436) + v437.f32[1];
          float32_t v364 = v436 - v371;
          float v365 = v414 * v436;
          float v366 = &v413[8 * v161++];
          v413[512].i32[0] = v161;
          v366->f32[0] = v376;
          v366->f32[1] = v375;
          v366[2].f32[0] = v365 + v362;
          v366[2].f32[1] = v363;
          v366[3].f32[0] = v361;
          v366[1].f32[0] = v374;
          v366[1].f32[1] = v364;
          v366[6].i32[1] = -1;
        }
        unsigned int v338 = v335++;
      }
      while (v334 != v335);
      unint64_t v161 = v413[512].u32[0];
    }
    float v1 = v369;
    goto LABEL_93;
  }
  return 1;
}

void GuGenerateVFContacts2(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, float32x2_t *a7, float a8, float a9)
{
  float v16 = 1.0 / *(float *)(a4 + 8);
  __asm { FMOV            V2.2S, #1.0 }
  float32x2_t v76 = vdiv_f32(_D2, *(float32x2_t *)a4);
  float v77 = v16;
  long long v78 = *(_OWORD *)(a4 + 12);
  float v22 = a2[4] * -2.0;
  float v23 = a2[5] * -2.0;
  _D2.f32[0] = a2[6] * -2.0;
  float v25 = a2[2];
  float v24 = a2[3];
  float v26 = (float)(v24 * v24) + -0.5;
  float v27 = a2[1];
  float v28 = (float)((float)(v23 * v27) + (float)(*a2 * v22)) + (float)(v25 * _D2.f32[0]);
  float v29 = (float)((float)(v22 * v26) - (float)((float)((float)(v27 * _D2.f32[0]) - (float)(v25 * v23)) * v24))
      + (float)(*a2 * v28);
  float v30 = (float)((float)(v23 * v26) - (float)((float)((float)(v25 * v22) - (float)(*a2 * _D2.f32[0])) * v24))
      + (float)(v27 * v28);
  float v31 = (float)(_D2.f32[0] * v26) - (float)((float)((float)(*a2 * v23) - (float)(v27 * v22)) * v24);
  v75[0] = -*a2;
  v75[1] = -v27;
  v75[2] = -v25;
  v75[3] = v24;
  v75[4] = v29;
  v75[5] = v30;
  v75[6] = v31 + (float)(v25 * v28);
  physx::operator*((float *)&v76, v75, &v79);
  uint64_t v32 = 0;
  float v33 = a7->f32[1];
  float v34 = a7[1].f32[0];
  float v35 = v79;
  float v36 = v80;
  float v37 = v81;
  float v38 = v82;
  float v39 = -(float)(v33 * v82);
  float v40 = v83;
  float v41 = v84;
  float v42 = -(float)(v33 * v83);
  float v43 = (float)-(float)(v33 * v84) - (float)(a7->f32[0] * v81);
  float v44 = v85;
  float v45 = v86;
  float v46 = (float)(v39 - (float)(a7->f32[0] * v79)) - (float)(v34 * v85);
  float v47 = (float)(v42 - (float)(a7->f32[0] * v80)) - (float)(v34 * v86);
  float v48 = v87;
  float v49 = v88;
  float v50 = v43 - (float)(v34 * v87);
  float v51 = v89;
  float v52 = v90;
  int v53 = *(_DWORD *)(a3 + 16);
  float32x2_t v54 = *(float **)(a3 + 24);
  float v55 = (float)(a8 + a9) + -0.00001;
  unint64_t v56 = *(unsigned int *)(a1 + 4096);
  do
  {
    if (v53)
    {
      int8x8_t v57 = (float32x2_t *)(a6 + 12 * v32);
      float32x2_t v58 = *v57;
      float v59 = v57[1].f32[0];
      float v60 = v49
          + (float)((float)((float)(v35 * COERCE_FLOAT(*v57)) + vmuls_lane_f32(v38, *v57, 1)) + (float)(v44 * v59));
      float v61 = v51
          + (float)((float)((float)(v36 * COERCE_FLOAT(*v57)) + vmuls_lane_f32(v40, *v57, 1)) + (float)(v45 * v59));
      float v62 = v52
          + (float)((float)((float)(v37 * COERCE_FLOAT(*v57)) + vmuls_lane_f32(v41, *v57, 1)) + (float)(v48 * v59));
      float v63 = -3.4028e38;
      float v64 = 3.4028e38;
      int v65 = v53;
      float32x4_t v66 = v54;
      do
      {
        float v67 = v66[1];
        float v68 = v66[2];
        float v69 = v66[3] + (float)((float)((float)(v61 * v67) + (float)(v60 * *v66)) + (float)(v62 * v68));
        float v70 = (float)((float)(v47 * v67) + (float)(*v66 * v46)) + (float)(v68 * v50);
        float v71 = (float)-v69 / v70;
        if (v70 <= 0.0000001)
        {
          if (v70 >= -0.0000001)
          {
            if (v69 > 0.0) {
              goto LABEL_19;
            }
          }
          else if (v63 <= v71)
          {
            float v63 = (float)-v69 / v70;
          }
        }
        else if (v64 >= v71)
        {
          float v64 = (float)-v69 / v70;
        }
        v66 += 5;
        --v65;
      }
      while (v65);
      if (v63 < v55 && v63 != -3.4028e38 && v63 < v64 && v56 <= 0x3F)
      {
        float v72 = a7[1].f32[0];
        float32x4_t v73 = (float32x2_t *)(a1 + (v56++ << 6));
        *(_DWORD *)(a1 + 4096) = v56;
        v73[1].f32[0] = v72;
        float32x2_t v74 = vsub_f32(v58, vmul_n_f32(*a7, v63));
        *float32x4_t v73 = *a7;
        v73[2] = v74;
        v73[3].f32[0] = v59 - (float)(v63 * v72);
        v73[1].f32[1] = v63 - a8;
        v73[6].i32[1] = -1;
      }
    }
LABEL_19:
    ++v32;
  }
  while (v32 != a5);
}

uint64_t physx::Gu::SourceMesh::remapTopology(uint64_t this, const unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 24);
  if (v2)
  {
    uint64_t v4 = this;
    uint64_t v5 = *(void *)(this + 32);
    uint64_t v6 = physx::shdfnd::Foundation::mInstance;
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance);
    uint64_t v9 = *(void *)(v6 + 24);
    uint64_t v8 = v6 + 24;
    float v10 = *(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(v9 + 16);
    if (v5)
    {
      if (v7) {
        float32x2_t v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::IndTri32>::getName() [T = physx::Gu::IndTri32]";
      }
      else {
        float32x2_t v11 = "<allocation names disabled>";
      }
      uint64_t v12 = (void *)v10(v8, 12 * v2 + 16, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4.cpp", 92);
      uint64_t v13 = v12;
      *uint64_t v12 = 12;
      v12[1] = v2;
      BOOL v14 = v12 + 2;
      if (*(_DWORD *)(v4 + 24))
      {
        unint64_t v15 = 0;
        float v16 = v12 + 2;
        do
        {
          uint64_t v17 = *(void *)(v4 + 32) + 12 * a2[v15];
          uint64_t v18 = *(void *)v17;
          *((_DWORD *)v16 + 2) = *(_DWORD *)(v17 + 8);
          *float v16 = v18;
          float v16 = (void *)((char *)v16 + 12);
          ++v15;
          unint64_t v19 = *(unsigned int *)(v4 + 24);
        }
        while (v15 < v19);
        size_t v20 = (12 * v19);
      }
      else
      {
        size_t v20 = 0;
      }
      float v28 = *(void **)(v4 + 32);
    }
    else
    {
      if (v7) {
        float v21 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::IndTri16>::getName() [T = physx::Gu::IndTri16]";
      }
      else {
        float v21 = "<allocation names disabled>";
      }
      float v22 = (void *)v10(v8, 6 * v2 + 16, v21, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4.cpp", 102);
      uint64_t v13 = v22;
      *float v22 = 6;
      v22[1] = v2;
      BOOL v14 = v22 + 2;
      if (*(_DWORD *)(v4 + 24))
      {
        unint64_t v23 = 0;
        float v24 = v22 + 2;
        do
        {
          uint64_t v25 = *(void *)(v4 + 40) + 6 * a2[v23];
          int v26 = *(_DWORD *)v25;
          *((_WORD *)v24 + 2) = *(_WORD *)(v25 + 4);
          *(_DWORD *)float v24 = v26;
          float v24 = (void *)((char *)v24 + 6);
          ++v23;
          unint64_t v27 = *(unsigned int *)(v4 + 24);
        }
        while (v23 < v27);
        size_t v20 = (6 * v27);
      }
      else
      {
        size_t v20 = 0;
      }
      float v28 = *(void **)(v4 + 40);
    }
    memcpy(v28, v14, v20);
    this = (*(uint64_t (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
    uint64_t v29 = *(unsigned int *)(v4 + 24);
    if (v29)
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v29, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4.cpp", 111);
      uint64_t v30 = this;
      if (*(_DWORD *)(v4 + 24))
      {
        unint64_t v31 = 0;
        uint64_t v32 = *(void *)(v4 + 16);
        do
        {
          float v33 = a2;
          if (v32) {
            float v33 = (const unsigned int *)(v32 + 4 * *a2);
          }
          *(_DWORD *)(this + 4 * v31++) = *v33;
          ++a2;
        }
        while (v31 < *(unsigned int *)(v4 + 24));
        if (!v32) {
          goto LABEL_29;
        }
LABEL_28:
        this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
LABEL_29:
        *(void *)(v4 + 16) = v30;
        return this;
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    if (!*(void *)(v4 + 16)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  return this;
}

float physx::Gu::BV4Tree::init(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  float32_t v3 = (float)(*(float *)(a3 + 8) + *(float *)(a3 + 20)) * 0.5;
  a1[1] = vmul_f32(vadd_f32(*(float32x2_t *)a3, *(float32x2_t *)(a3 + 12)), (float32x2_t)0x3F0000003F000000);
  a1[2].f32[0] = v3;
  float v4 = *(float *)(a3 + 8);
  float v5 = *(float *)(a3 + 12) - *(float *)a3;
  float v6 = *(float *)(a3 + 20);
  float v7 = *(float *)(a3 + 16) - *(float *)(a3 + 4);
  *a1 = (float32x2_t)a2;
  float result = sqrtf((float)((float)((float)(v7 * 0.5) * (float)(v7 * 0.5)) + (float)((float)(v5 * 0.5) * (float)(v5 * 0.5)))+ (float)((float)((float)(v6 - v4) * 0.5) * (float)((float)(v6 - v4) * 0.5)));
  a1[2].f32[1] = result;
  return result;
}

double physx::Gu::BV4Tree::release(physx::Gu::BV4Tree *this)
{
  if (!*((unsigned char *)this + 68) && *((void *)this + 4)) {
    (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
  }
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(void *)((char *)this + 62) = 0;
  return result;
}

double physx::Gu::BV4Tree::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  *(void *)(a1 + 52) = *(void *)(a2 + 52);
  *(void *)(a1 + 60) = *(void *)(a2 + 60);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 62) = 0;
  return result;
}

uint64_t physx::Gu::BV4Tree::exportExtraData(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 24))
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    uint64_t v4 = *(void *)(v3 + 32);
    uint64_t v5 = (16 * *(_DWORD *)(v3 + 24));
    float v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
    return v6(a2, v4, v5);
  }
  return result;
}

uint64_t physx::Gu::BV4Tree::load(uint64_t a1, uint64_t (***a2)(void, uint64_t, uint64_t), int a3)
{
  physx::Gu::BV4Tree::release((physx::Gu::BV4Tree *)a1);
  int v14 = 0;
  physx::readChunk((uint64_t)&v14 + 3, (uint64_t)&v14 + 2, (uint64_t)&v14 + 1, (uint64_t)&v14, a2);
  uint64_t result = 0;
  if (HIBYTE(v14) == 66 && BYTE2(v14) == 86 && BYTE1(v14) == 52 && v14 == 32)
  {
    unsigned int v15 = 0;
    (**a2)(a2, (uint64_t)&v15, 4);
    unsigned int v7 = 1;
    if (v15 == 1)
    {
      int v8 = 1;
    }
    else
    {
      int v8 = 1;
      if (v15 != 0x1000000)
      {
        unsigned int v9 = bswap32(v15);
        if (a3) {
          unsigned int v7 = v9;
        }
        else {
          unsigned int v7 = v15;
        }
        if (v7 > 3) {
          return 0;
        }
        int v8 = a3;
      }
    }
    physx::readFloatBuffer((__int32 *)(a1 + 8), 3u, v8, (void (***)(void, __int32 *, void))a2);
    *(float *)(a1 + 20) = physx::readFloat(v8, (void (***)(void, float *, uint64_t))a2);
    *(_DWORD *)(a1 + 40) = physx::readDword(v8, (void (***)(void, unsigned __int32 *, uint64_t))a2);
    physx::readFloatBuffer((__int32 *)(a1 + 44), 3u, v8, (void (***)(void, __int32 *, void))a2);
    physx::readFloatBuffer((__int32 *)(a1 + 56), 3u, v8, (void (***)(void, __int32 *, void))a2);
    BOOL v10 = v7 != 3
       || physx::readDword(v8, (void (***)(void, unsigned __int32 *, uint64_t))a2) != 0;
    *(unsigned char *)(a1 + 69) = v10;
    int Dword = physx::readDword(v8, (void (***)(void, unsigned __int32 *, uint64_t))a2);
    *(_DWORD *)(a1 + 24) = Dword;
    if (Dword)
    {
      uint64_t v12 = (16 * Dword);
      if (v12) {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
      }
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, v12, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4.cpp", 280);
      else {
        uint64_t v13 = 0;
      }
      *(void *)(a1 + 32) = v13;
      ((void (*)(uint64_t (***)(void, uint64_t, uint64_t)))**a2)(a2);
    }
    else
    {
      *(void *)(a1 + 32) = 0;
    }
    return 1;
  }
  return result;
}

void *physx::Gu::AABBTree::release(void *this)
{
  float v1 = this;
  uint64_t v2 = this[1];
  if (v2)
  {
    uint64_t v3 = v2 - 16;
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = v2 - 24;
      uint64_t v6 = 48 * v4;
      do
      {
        uint64_t v7 = v5 + v6;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 16) = 0;
        v6 -= 48;
      }
      while (v6);
    }
    this = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, v3);
    v1[1] = 0;
  }
  if (*v1) {
    this = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  void *v1 = 0;
  return this;
}

BOOL physx::Gu::AABBTree::buildFromMesh(physx::Gu::AABBTree *this, physx::Gu::SourceMesh *a2, uint64_t a3)
{
  uint64_t v3 = *((unsigned int *)a2 + 6);
  if (v3)
  {
    if (v3 == -1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 24 * (v3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 252);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 12 * (v3 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 253);
    }
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)a2 + 1);
    uint64_t v11 = *((void *)a2 + 4);
    uint64_t v12 = (_DWORD *)(v7 + 24);
    uint64_t v13 = (unsigned __int16 *)(*((void *)a2 + 5) + 4);
    uint64_t v14 = v11 + 4;
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    uint64_t v16 = v3;
    do
    {
      if (v11)
      {
        unsigned int v17 = *(_DWORD *)(v11 + v9);
        unsigned int v18 = *(_DWORD *)(v14 + v9);
        unsigned int v19 = *(_DWORD *)(v14 + v9 + 4);
      }
      else
      {
        unsigned int v17 = *(v13 - 2);
        unsigned int v18 = *(v13 - 1);
        unsigned int v19 = *v13;
      }
      float32x4_t v20 = *(float32x4_t *)(v10 + 12 * v17);
      float32x4_t v21 = *(float32x4_t *)(v10 + 12 * v18);
      float32x4_t v22 = *(float32x4_t *)(v10 + 12 * v19);
      float32x4_t v23 = vminq_f32(vminq_f32(v20, v21), v22);
      float32x4_t v24 = vmaxq_f32(vmaxq_f32(v20, v21), v22);
      float32x4_t v25 = vaddq_f32(v23, v24);
      v23.i32[3] = v24.i32[0];
      *(float32x4_t *)(v12 - 6) = v23;
      *((void *)v12 - 1) = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL).u64[0];
      *uint64_t v12 = v24.i32[3];
      *(float32x4_t *)(v8 + v9) = vmulq_f32(v25, v15);
      v9 += 12;
      v12 += 6;
      v13 += 3;
      --v16;
    }
    while (v16);
    physx::Gu::AABBTree::release(this);
    uint64_t v36 = 1;
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 283);
    uint64_t v27 = 0;
    *(void *)this = v26;
    do
    {
      *(_DWORD *)(v26 + 4 * v27) = v27;
      ++v27;
    }
    while (v3 != v27);
    uint64_t v28 = (2 * v3 - 1);
    uint64_t v29 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v30 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::AABBTreeNode>::getName() [T = physx::Gu::AABBTreeNode]";
    }
    else {
      uint64_t v30 = "<allocation names disabled>";
    }
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v29 + 24) + 16))(v29 + 24, 48 * v28 + 16, v30, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 291);
    *(void *)uint64_t v31 = 48;
    *(void *)(v31 + 8) = v28;
    uint64_t v32 = v31 + 16;
    uint64_t v33 = 48 * (2 * v3 - 2) + 48;
    uint64_t v34 = v31 + 40;
    do
    {
      *(void *)uint64_t v34 = 0;
      *(void *)(v34 + 8) = 0;
      *(_DWORD *)(v34 + 16) = 0;
      v34 += 48;
      v33 -= 48;
    }
    while (v33);
    *((void *)this + 1) = v32;
    *(void *)(v31 + 48) = *(void *)this;
    *(_DWORD *)(v31 + 56) = v3;
    local_BuildHierarchy(v32, v7, v8, (unsigned int *)&v36, v32, a3);
    *((_DWORD *)this + 4) = v36;
    if (v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
    }
    if (v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
    }
  }
  return v3 != 0;
}

uint64_t local_BuildHierarchy(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = result;
  uint64_t v43 = *MEMORY[0x263EF8340];
  while (1)
  {
    uint64_t v12 = *(unsigned int **)(v11 + 32);
    uint64_t v13 = *(unsigned int *)(v11 + 40);
    uint64_t v14 = (_OWORD *)(a2 + 24 * *v12);
    float32x4_t v15 = *(float32x4_t *)v14;
    float32x4_t v16 = *(float32x4_t *)((char *)v14 + 12);
    float32x4_t v17 = *(float32x4_t *)(a3 + 12 * *v12);
    if (v13 >= 2)
    {
      uint64_t v18 = v13 - 1;
      unsigned int v19 = v12 + 1;
      do
      {
        unsigned int v20 = *v19++;
        uint64_t v21 = a2 + 24 * v20;
        float32x4_t v15 = vminq_f32(v15, *(float32x4_t *)v21);
        float32x4_t v16 = vmaxq_f32(v16, *(float32x4_t *)(v21 + 12));
        float32x4_t v17 = vaddq_f32(v17, *(float32x4_t *)(a3 + 12 * v20));
        --v18;
      }
      while (v18);
    }
    v15.i32[3] = v16.i32[0];
    *(float32x4_t *)uint64_t v11 = v15;
    *(void *)(v11 + 16) = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
    if (v13 <= a6) {
      break;
    }
    float32x4_t v22 = vmulq_n_f32(v17, 1.0 / (float)v13);
    float32x4_t v23 = 0uLL;
    uint64_t v24 = v13;
    do
    {
      unsigned int v25 = *v12++;
      float32x4_t v26 = vsubq_f32(*(float32x4_t *)(a3 + 12 * v25), v22);
      float32x4_t v23 = vaddq_f32(v23, vmulq_f32(v26, v26));
      --v24;
    }
    while (v24);
    float32x4_t v42 = vmulq_n_f32(v23, 1.0 / (float)(v13 - 1));
    unsigned __int8 v27 = vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1), v42)).u8[0];
    if (v42.f32[2] <= *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v27 & 1)))) {
      unsigned int v28 = v27 & 1;
    }
    else {
      unsigned int v28 = 2;
    }
    unsigned int v29 = local_Split(v11, a3, v28);
    if (v29) {
      BOOL v30 = v29 == v13;
    }
    else {
      BOOL v30 = 1;
    }
    if (v30)
    {
      float v31 = (float)local_Split(v11, a3, 0) / (float)*(unsigned int *)(v11 + 40);
      float v32 = (float)local_Split(v11, a3, 1u) / (float)*(unsigned int *)(v11 + 40);
      float v33 = (float)local_Split(v11, a3, 2u) / (float)*(unsigned int *)(v11 + 40);
      v42.f32[0] = (float)(v31 + -0.5) * (float)(v31 + -0.5);
      v42.f32[1] = (float)(v32 + -0.5) * (float)(v32 + -0.5);
      unsigned int v34 = (float)((float)(v33 + -0.5) * (float)(v33 + -0.5)) >= v42.f32[v42.f32[1] < v42.f32[0]]
          ? v42.f32[1] < v42.f32[0]
          : 2;
      unsigned int v29 = local_Split(v11, a3, v34);
      unsigned int v35 = *(_DWORD *)(v11 + 40);
      BOOL v36 = v29 == v35 || v29 == 0;
      unsigned int v37 = v35 >> 1;
      if (v36) {
        unsigned int v29 = v37;
      }
    }
    unsigned int v38 = *a4;
    uint64_t v39 = a5 + 48 * *a4;
    *(void *)(v11 + 24) = v39;
    *a4 = v38 + 2;
    uint64_t v40 = v39 + 48;
    if (a5) {
      uint64_t v41 = v39 + 48;
    }
    else {
      uint64_t v41 = 0;
    }
    *(void *)(v39 + 32) = *(void *)(v11 + 32);
    *(_DWORD *)(v39 + 40) = v29;
    *(void *)(v41 + 32) = *(void *)(v11 + 32) + 4 * v29;
    *(_DWORD *)(v41 + 40) = *(_DWORD *)(v11 + 40) - v29;
    uint64_t result = local_BuildHierarchy(v39, a2, a3, a4, a5, a6);
    uint64_t v11 = v40;
  }
  return result;
}

uint64_t physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t (*a4)(uint64_t, void, uint64_t), uint64_t a5)
{
  if (result)
  {
    uint64_t v9 = result;
    unsigned int v10 = *a3 + 1;
    *a3 = v10;
    if (v10 > *a2) {
      *a2 = v10;
    }
    if (!a4 || (uint64_t result = a4(result, *a3, a5), result))
    {
      uint64_t result = *(void *)(v9 + 24);
      if (result)
      {
        uint64_t result = physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(result, a2, a3, a4, a5);
        --*a3;
        uint64_t v11 = *(void *)(v9 + 24);
        if (v11)
        {
          uint64_t result = physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(v11 + 48, a2, a3, a4, a5);
          --*a3;
        }
      }
    }
  }
  return result;
}

uint64_t BV4BuildParams::allocateNode(BV4BuildParams *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2 || (unsigned int v3 = *(_DWORD *)(v2 + 51208), v3 == 256))
  {
    uint64_t v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
      uint64_t v5 = "static const char *physx::shdfnd::ReflectionAllocator<BV4BuildParams::Slab>::getName() [T = BV4BuildParams::Slab]";
    }
    else {
      uint64_t v5 = "<allocation names disabled>";
    }
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v4 + 24) + 16))(v4 + 24, 51224, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 509);
    uint64_t v6 = 0;
    uint64_t v7 = (_DWORD *)(v2 + 51208);
    uint64_t v8 = (_DWORD *)(v2 + 8);
    __asm { FMOV            V1.2S, #-1.0 }
    do
    {
      v8 += 50;
      uint64_t v14 = v6;
      uint64_t v15 = 192;
      do
      {
        uint64_t v16 = v2 + v14;
        *(void *)(v16 + 48) = 0xFFFFFFFFLL;
        *(_OWORD *)(v16 + 20) = xmmword_234422BB0;
        *(void *)(v16 + 36) = _D1;
        *(_DWORD *)(v16 + 56) = 0;
        v14 += 48;
        v15 -= 48;
      }
      while (v15);
      v6 += 200;
    }
    while (v8 != v7);
    unsigned int v3 = 0;
    *uint64_t v7 = 0;
    *(void *)(v2 + 51216) = *((void *)this + 3);
    *((void *)this + 3) = v2;
  }
  *(_DWORD *)(v2 + 51208) = v3 + 1;
  return v2 + 200 * v3 + 8;
}

BOOL physx::Gu::BuildBV4Ex(physx::Gu *this, physx::Gu::BV4Tree *a2, physx::Gu::SourceMesh *a3, float a4)
{
  unsigned int v4 = a3;
  uint64_t v8 = *((unsigned int *)a2 + 6);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  int v57 = 0;
  BOOL v9 = physx::Gu::AABBTree::buildFromMesh((physx::Gu::AABBTree *)&v55, a2, (uint64_t)a3);
  if (!v9) {
    goto LABEL_10;
  }
  if (v8) {
    unsigned int v10 = (const unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 1483);
  }
  else {
    unsigned int v10 = 0;
  }
  float32x2_t v54 = a2;
  *(void *)float v49 = v10;
  *(void *)&v49[8] = v4;
  *(_DWORD *)&void v49[16] = v8;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  v63.i32[0] = 0;
  v61.i32[0] = 0;
  uint64_t v11 = v56;
  physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(v56, (unsigned int *)&v63, (unsigned int *)&v61, (uint64_t (*)(uint64_t, void, uint64_t))gReorderCallback, (uint64_t)v49);
  physx::Gu::SourceMesh::remapTopology((uint64_t)a2, v10);
  if (v10) {
    (*(void (**)(uint64_t, const unsigned int *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
  }
  unsigned int v12 = *((_DWORD *)a2 + 6);
  if (v12 <= v4 || v12 <= 4)
  {
    physx::Gu::BV4Tree::init((float32x2_t *)this, (uint64_t)a2, v11);
    goto LABEL_10;
  }
  BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(*(void *)(v11 + 24));
  *(float *)&long long v50 = a4;
  *(void *)((char *)&v50 + 4) = 0;
  *(_DWORD *)float v49 = 1;
  *(_OWORD *)&v49[4] = 0uLL;
  uint64_t Node = BV4BuildParams::allocateNode((BV4BuildParams *)v49);
  _BuildBV4(&v55, (_DWORD *)Node, v11, (uint64_t)v49);
  physx::Gu::BV4Tree::init((float32x2_t *)this, (uint64_t)a2, v56);
  *((unsigned char *)this + 69) = 1;
  v15.i64[0] = *(void *)(Node + 40);
  v15.i64[1] = *(void *)(Node + 88);
  v16.i64[0] = *(void *)(Node + 136);
  v16.i64[1] = *(void *)(Node + 184);
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  int32x4_t v18 = (int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v15, v17), (int32x4_t)vceqq_s64(v16, v17)));
  v18.i32[0] = vaddvq_s32(v18);
  *(int8x8_t *)v18.i8 = vcnt_s8(*(int8x8_t *)v18.i8);
  v18.i16[0] = vaddlv_u8(*(uint8x8_t *)v18.i8);
  __int32 v19 = v18.i32[0];
  int v20 = vaddvq_s32(*(int32x4_t *)&v49[4]);
  int v21 = v20;
  size_t v22 = (v20 << 6);
  if (v22) {
    float32x4_t v23 = (char *)(*(uint64_t (**)(uint64_t, void, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
  }
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, (v20 << 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 1090);
  else {
    float32x4_t v23 = 0;
  }
  if ((v19 - 2) >= 3) {
    int v24 = -1;
  }
  else {
    int v24 = 2 * (v19 - 2);
  }
  unsigned int v66 = 0;
  int v67 = 4;
  *((_DWORD *)this + 10) = v24;
  unsigned int v65 = 0;
  if (*((unsigned char *)this + 69))
  {
    float32x2_t v59 = (float32x2_t)0x80000000800000;
    unsigned int v60 = -8388609;
    v58[0] = (float32x2_t)0x80000000800000;
    v58[1].i32[0] = -8388609;
    _ComputeMaxValues(Node, (float *)&v59, (float *)v58);
    float v25 = 32767.0 / *(float *)&v60;
    BOOL v26 = *(float *)&v60 == 0.0;
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    *(float32x2_t *)v28.f32 = v59;
    int8x8_t v29 = (int8x8_t)vceqz_f32(v59);
    int8x8_t v30 = (int8x8_t)vdiv_f32(*(float32x2_t *)v27.f32, v59);
    v28.i64[1] = __PAIR64__(v58[0].u32[0], v60);
    *(float32x4_t *)((char *)this + 44) = vdivq_f32(v28, v27);
    if (v26) {
      float v31 = 0.0;
    }
    else {
      float v31 = v25;
    }
    float v32 = 32767.0 / v58[1].f32[0];
    if (v58[1].f32[0] == 0.0) {
      float v32 = 0.0;
    }
    *(float32x2_t *)((char *)this + 60) = vdiv_f32(*(float32x2_t *)((char *)v58 + 4), *(float32x2_t *)v27.f32);
    int8x8_t v63 = vbic_s8(v30, v29);
    float v64 = v31;
    int8x8_t v61 = vbic_s8((int8x8_t)vdiv_f32(*(float32x2_t *)v27.f32, v58[0]), (int8x8_t)vceqz_f32(v58[0]));
    float v62 = v32;
    _FlattenQ((uint64_t)v23, 0, &v67, (void *)Node, &v66, &v65, (float *)&v63, (float *)&v61, (uint64_t)this + 44, (uint64_t)this + 56);
  }
  int v33 = 4 * v21;
  uint64_t v34 = *(void *)((char *)&v50 + 4);
  if (*(void *)((char *)&v50 + 4))
  {
    do
    {
      uint64_t v35 = *(void *)(v34 + 51216);
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      uint64_t v34 = v35;
    }
    while (v35);
  }
  *(void *)((char *)&v50 + 4) = 0;
  if (*((unsigned char *)this + 69))
  {
    if (v33)
    {
      uint64_t v36 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        unsigned int v37 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BVDataPackedT<physx::Gu::QuantizedAABB>>:"
      }
              ":getName() [T = physx::Gu::BVDataPackedT<physx::Gu::QuantizedAABB>]";
      else {
        unsigned int v37 = "<allocation names disabled>";
      }
      unsigned int v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v36 + 24) + 16))(v36 + 24, 16 * (4 * v21), v37, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV4Build.cpp", 1218);
      memcpy(v38, v23, v22);
      int v39 = v21 & 0x3FFFFFFF;
      if ((v21 & 0x3FFFFFFF) == 0)
      {
        if (!v38) {
          goto LABEL_41;
        }
LABEL_40:
        (*(void (**)(uint64_t, void *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v38);
        goto LABEL_41;
      }
    }
    else
    {
      memcpy(0, v23, v22);
      int v39 = v21 & 0x3FFFFFFF;
      if ((v21 & 0x3FFFFFFF) == 0) {
        goto LABEL_41;
      }
      unsigned int v38 = 0;
    }
    uint64_t v40 = 0;
    uint64_t v41 = v38;
    float32x4_t v42 = v23;
    do
    {
      uint64_t v43 = 0;
      for (uint64_t i = 0; i != 16; i += 4)
      {
        float v45 = &v42[i];
        HIDWORD(v46) = v41[v43];
        LODWORD(v46) = HIDWORD(v46);
        *(_DWORD *)float v45 = v46 >> 16;
        HIDWORD(v46) = v41[v43 + 1];
        LODWORD(v46) = HIDWORD(v46);
        *((_DWORD *)v45 + 4) = v46 >> 16;
        HIDWORD(v46) = v41[v43 + 2];
        LODWORD(v46) = HIDWORD(v46);
        *((_DWORD *)v45 + 8) = v46 >> 16;
        *((_DWORD *)v45 + 12) = v41[i + 3];
        v43 += 4;
      }
      ++v40;
      v42 += 64;
      v41 += 16;
    }
    while (v40 != v39);
    goto LABEL_40;
  }
LABEL_41:
  *((_DWORD *)this + 6) = v33;
  *((void *)this + 4) = v23;
  uint64_t v47 = *(void *)((char *)&v50 + 4);
  if (*(void *)((char *)&v50 + 4))
  {
    do
    {
      uint64_t v48 = *(void *)(v47 + 51216);
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      uint64_t v47 = v48;
    }
    while (v48);
  }
LABEL_10:
  physx::Gu::AABBTree::release(&v55);
  return v9;
}

uint64_t gReorderCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 24))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 40);
    ++*((_DWORD *)a3 + v3 + 5);
    if (v3)
    {
      unsigned int v4 = *(_DWORD **)(a1 + 32);
      uint64_t v5 = *a3;
      unsigned int v6 = *((_DWORD *)a3 + 3);
      do
      {
        *(_DWORD *)(v5 + 4 * v6) = *v4;
        *v4++ = *((_DWORD *)a3 + 3);
        unsigned int v6 = *((_DWORD *)a3 + 3) + 1;
        *((_DWORD *)a3 + 3) = v6;
        --v3;
      }
      while (v3);
    }
  }
  return 1;
}

uint64_t MeshRayCollider::collideOBB(float *a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  float v9 = *(float *)(a3 + 88);
  int v10 = (*(unsigned __int8 *)(a3 + 92) >> 1) & 1;
  uint64_t v12 = *(void *)(a3 + 40);
  uint64_t v11 = *(void *)(a3 + 48);
  *(void *)unsigned int v37 = 0;
  v37[2] = 0;
  uint64_t v33 = 0;
  float v34 = 0.0;
  RayRTreeCallback<0,false>::RayRTreeCallback((uint64_t)v35, a4, v10, v11, v12, (uint64_t)v37, (uint64_t)&v33, a2, v9, 0.0);
  if (!a5) {
    goto LABEL_13;
  }
  float v13 = a1[8];
  float v14 = *a1;
  float v15 = a1[4];
  if (v13 < 0.0)
  {
    if (v14 <= v15)
    {
      float v16 = (float)((float)(1.0 - v14) + v15) - v13;
      float v17 = a1[6];
      float v18 = a1[2];
    }
    else
    {
      float v16 = (float)((float)(v14 + 1.0) - v15) - v13;
      float v17 = a1[5];
      float v18 = a1[7];
    }
    float v19 = v17 - v18;
    goto LABEL_9;
  }
  if (v14 < (float)-v15)
  {
    float v19 = a1[1] - a1[3];
    float v16 = v13 + (float)((float)(1.0 - v14) - v15);
LABEL_9:
    float v20 = 0.5 / sqrtf(v16);
    goto LABEL_11;
  }
  float v20 = v13 + (float)((float)(v14 + 1.0) + v15);
  float v19 = 0.5 / sqrtf(v20);
LABEL_11:
  if (fabsf(v19 * v20) <= 0.9999)
  {
LABEL_13:
    physx::Gu::RTree::traverseOBB(a3 + 160, (const physx::Gu::Box *)a1, 4u, v37, (physx::Gu::RTree::Callback *)v36);
    return RayRTreeCallback<0,false>::~RayRTreeCallback((uint64_t)v35);
  }
  float v21 = a1[13];
  float v22 = a1[14];
  float v24 = a1[11];
  float v23 = a1[12];
  float v25 = (float)((float)(fabsf(a1[3]) * v21) + (float)(fabsf(v14) * v23)) + (float)(fabsf(a1[6]) * v22);
  float v26 = (float)((float)(fabsf(v15) * v21) + (float)(fabsf(a1[1]) * v23)) + (float)(fabsf(a1[7]) * v22);
  float v27 = (float)((float)(fabsf(a1[5]) * v21) + (float)(fabsf(a1[2]) * v23)) + (float)(fabsf(v13) * v22);
  float v28 = a1[9];
  float v29 = a1[10];
  *(float *)&uint64_t v33 = v28 - v25;
  *((float *)&v33 + 1) = v29 - v26;
  float v34 = v24 - v27;
  *(float *)&uint64_t v31 = v28 + v25;
  *((float *)&v31 + 1) = v26 + v29;
  float v32 = v27 + v24;
  physx::Gu::RTree::traverseAABB(a3 + 160, &v33, &v31, 4, (uint64_t)v37, v36);
  return RayRTreeCallback<0,false>::~RayRTreeCallback((uint64_t)v35);
}

uint64_t MeshRayCollider::collide<1,1>(float *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, float *a6, float a7)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (a7 == 0.0)
  {
    RayRTreeCallback<1,false>::RayRTreeCallback((uint64_t)&v28, a5, (*(unsigned __int8 *)(a4 + 92) >> 1) & 1, *(void *)(a4 + 48), *(void *)(a4 + 40), (uint64_t)a1, a2, a3, *(float *)(a4 + 88), a7, (uint64_t)a6);
    float v11 = *a6;
    float v12 = a6[1];
    float v13 = a6[2];
    float v14 = *a1;
    float v15 = a1[1];
    float v16 = a1[2];
    *(float *)&uint64_t v26 = *a1 - *a6;
    *((float *)&v26 + 1) = v15 - v12;
    float v27 = v16 - v13;
    *(float *)&uint64_t v24 = v11 + v14;
    *((float *)&v24 + 1) = v12 + v15;
    float v25 = v13 + v16;
    physx::Gu::RTree::traverseAABB(a4 + 160, &v26, &v24, 4, (uint64_t)v53, v29);
    return RayRTreeCallback<1,false>::~RayRTreeCallback((uint64_t)&v28);
  }
  else
  {
    int v18 = *(_DWORD *)(a4 + 88);
    int v19 = (*(unsigned __int8 *)(a4 + 92) >> 1) & 1;
    float v28 = (uint64_t (**)(void, uint64_t, _DWORD *, float *))&unk_26E729488;
    v29[0] = (uint64_t (**)(void, uint64_t, unsigned int *))&unk_26E7294B8;
    v29[1] = (uint64_t (**)(void, uint64_t, unsigned int *))a5;
    int v30 = v19;
    int8x16_t v31 = vextq_s8(*(int8x16_t *)(a4 + 40), *(int8x16_t *)(a4 + 40), 8uLL);
    float v32 = a6;
    float v33 = *a1;
    *(void *)&long long v20 = *(void *)(a1 + 1);
    *(void *)&long long v21 = *(void *)a2;
    HIDWORD(v22) = 0;
    *(float *)&long long v22 = v33;
    *(void *)((char *)&v22 + 4) = v20;
    *((void *)&v20 + 1) = *(void *)a2;
    long long v34 = v20;
    unsigned int v35 = *(_DWORD *)(a2 + 8);
    char v36 = a3;
    int v37 = v18;
    float v38 = a7;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    int v41 = -1;
    __int16 v42 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v43 = 0;
    uint64_t v46 = 2139095039;
    int v47 = 0;
    BOOL v49 = *(_DWORD *)(a5 + 8) == 1;
    char v48 = 0;
    *(void *)&long long v23 = *(void *)a6;
    *((void *)&v23 + 1) = *((unsigned int *)a6 + 2);
    long long v50 = v23;
    long long v51 = v22;
    *((void *)&v21 + 1) = v35;
    long long v52 = v21;
    physx::Gu::RTree::traverseRay<1>(a4 + 160, (uint64_t)a1, a2, a7, 4, (uint64_t)v53, &v28, (uint64_t)a6);
    return RayRTreeCallback<1,true>::~RayRTreeCallback((uint64_t)&v28);
  }
}

uint64_t physx::Gu::raycast_triangleMesh_RTREE(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, unsigned __int16 *a6, unsigned int a7, uint64_t a8, float a9)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  uint64_t v18 = a2 + 4;
  float32x2_t v19 = *(float32x2_t *)(a2 + 4);
  float v20 = *(float *)(a2 + 12);
  float v21 = 1.0;
  if (v19.f32[0] == 1.0 && COERCE_FLOAT(HIDWORD(*(void *)(a2 + 4))) == 1.0 && v20 == 1.0)
  {
    long long v53 = 0;
    float v54 = a4[1] - a3[5];
    float v55 = a4[2] - a3[6];
    float v56 = (float)(*a4 - a3[4]) + (float)(*a4 - a3[4]);
    float v57 = v54 + v54;
    float v58 = v55 + v55;
    float v60 = a3[2];
    float v59 = a3[3];
    float v61 = (float)(v59 * v59) + -0.5;
    float v62 = *a3;
    float v63 = a3[1];
    float v64 = (float)((float)(v57 * v63) + (float)(*a3 * v56)) + (float)(v60 * v58);
    float v44 = (float)((float)(v56 * v61) - (float)((float)((float)(v63 * v58) - (float)(v60 * v57)) * v59))
        + (float)(*a3 * v64);
    float v45 = (float)((float)(v57 * v61) - (float)((float)((float)(v60 * v56) - (float)(*a3 * v58)) * v59))
        + (float)(v63 * v64);
    float v46 = (float)((float)(v58 * v61) - (float)((float)((float)(*a3 * v57) - (float)(v63 * v56)) * v59))
        + (float)(v60 * v64);
    float v100 = v44;
    float v101 = v45;
    float v102 = v46;
    float v65 = *a5 + *a5;
    float v66 = a5[1] + a5[1];
    float v67 = a5[2] + a5[2];
    float v68 = (float)((float)(v63 * v66) + (float)(v62 * v65)) + (float)(v60 * v67);
    float v49 = (float)((float)(v65 * v61) - (float)((float)((float)(v63 * v67) - (float)(v60 * v66)) * v59))
        + (float)(v62 * v68);
    float v50 = (float)((float)(v66 * v61) - (float)((float)((float)(v60 * v65) - (float)(v62 * v67)) * v59))
        + (float)(v63 * v68);
    float v51 = (float)((float)(v67 * v61) - (float)((float)((float)(v62 * v66) - (float)(v63 * v65)) * v59))
        + (float)(v60 * v68);
    float v97 = v49;
    float v98 = v50;
    float v99 = v51;
  }
  else
  {
    __asm { FMOV            V2.2S, #1.0 }
    float v82 = (void *)vdiv_f32(_D2, v19);
    float v83 = 1.0 / v20;
    long long v84 = *(_OWORD *)(a2 + 16);
    float v27 = a3[4] * -2.0;
    float v28 = a3[5] * -2.0;
    _D2.f32[0] = a3[6] * -2.0;
    float v30 = a3[2];
    float v29 = a3[3];
    float v31 = (float)(v29 * v29) + -0.5;
    float v32 = a3[1];
    float v33 = (float)((float)(v28 * v32) + (float)(*a3 * v27)) + (float)(v30 * _D2.f32[0]);
    float v34 = (float)((float)(v27 * v31) - (float)((float)((float)(v32 * _D2.f32[0]) - (float)(v30 * v28)) * v29))
        + (float)(*a3 * v33);
    float v35 = (float)((float)(v28 * v31) - (float)((float)((float)(v30 * v27) - (float)(*a3 * _D2.f32[0])) * v29))
        + (float)(v32 * v33);
    float v36 = (float)(_D2.f32[0] * v31) - (float)((float)((float)(*a3 * v28) - (float)(v32 * v27)) * v29);
    v136[0] = -*a3;
    v136[1] = -v32;
    v136[2] = -v30;
    v136[3] = v29;
    v136[4] = v34;
    v136[5] = v35;
    v136[6] = v36 + (float)(v30 * v33);
    physx::operator*((float *)&v82, v136, (float *)&v107);
    v93[0] = v107;
    v93[1] = v108;
    v93[2] = v109;
    float v94 = v110;
    float v95 = v111;
    int8x16_t v96 = v112;
    float v37 = a4[1];
    float v38 = (float)(*(float *)&v107 * *a4) + (float)(*((float *)&v108 + 1) * v37);
    float v39 = (float)(*((float *)&v107 + 1) * *a4) + (float)(*(float *)&v109 * v37);
    float v40 = (float)(*(float *)&v108 * *a4) + (float)(*((float *)&v109 + 1) * v37);
    float v41 = a4[2];
    float v42 = v39 + (float)(v111 * v41);
    float v43 = v40 + (float)(*(float *)v112.i32 * v41);
    float v44 = *(float *)&v112.i32[1] + (float)(v38 + (float)(v110 * v41));
    float v45 = *(float *)&v112.i32[2] + v42;
    float v46 = *(float *)&v112.i32[3] + v43;
    float v100 = v44;
    float v101 = *(float *)&v112.i32[2] + v42;
    float v102 = v46;
    float v47 = a5[1];
    float v48 = a5[2];
    float v49 = (float)((float)(*(float *)&v107 * *a5) + (float)(*((float *)&v108 + 1) * v47)) + (float)(v110 * v48);
    float v50 = (float)((float)(*((float *)&v107 + 1) * *a5) + (float)(*(float *)&v109 * v47)) + (float)(v111 * v48);
    float v51 = (float)((float)(*(float *)&v108 * *a5) + (float)(*((float *)&v109 + 1) * v47))
        + (float)(*(float *)v112.i32 * v48);
    float v97 = v49;
    float v98 = v50;
    float v99 = v51;
    float v52 = sqrtf((float)((float)(v50 * v50) + (float)(v49 * v49)) + (float)(v51 * v51));
    float v21 = 1.0 / v52;
    if (v52 > 0.0)
    {
      float v49 = v49 * v21;
      float v50 = v50 * v21;
      float v97 = v49;
      float v98 = v50;
      float v51 = v51 * v21;
      float v99 = v51;
    }
    a9 = (float)(v52 * a9) + 0.001;
    long long v53 = v93;
  }
  char v69 = *(unsigned char *)(a2 + 32);
  int v70 = *a6;
  int v71 = (v70 & 0x40) == 0;
  if (a7 >= 2) {
    int v71 = 2;
  }
  float v83 = *(float *)&v71;
  float v82 = &unk_26E729260;
  *(void *)((char *)&v84 + 4) = a8;
  HIDWORD(v84) = 0;
  unsigned int v85 = a7;
  uint64_t v86 = v18;
  float v87 = a3;
  float v88 = v53;
  int v89 = v70;
  float v90 = a5;
  BOOL v91 = (v69 & 2) != 0;
  float v92 = v21;
  if (a9 == 0.0)
  {
    float v79 = v44;
    float v80 = v45;
    float v81 = v46;
    RayRTreeCallback<0,false>::RayRTreeCallback((uint64_t)&v107, (uint64_t)&v82, (*(unsigned __int8 *)(a1 + 92) >> 1) & 1, *(void *)(a1 + 48), *(void *)(a1 + 40), (uint64_t)&v100, (uint64_t)&v97, (v69 & 2 | v70 & 0x80) != 0, *(float *)(a1 + 88), a9);
    unint64_t v105 = __PAIR64__(LODWORD(v80), LODWORD(v79));
    float v106 = v81;
    *(float *)&uint64_t v103 = v79 + 0.0;
    *((float *)&v103 + 1) = v80 + 0.0;
    float v104 = v81 + 0.0;
    physx::Gu::RTree::traverseAABB(a1 + 160, &v105, &v103, 4, (uint64_t)v136, &v108);
    RayRTreeCallback<0,false>::~RayRTreeCallback((uint64_t)&v107);
  }
  else
  {
    int v72 = *(_DWORD *)(a1 + 88);
    int v73 = (*(unsigned __int8 *)(a1 + 92) >> 1) & 1;
    float32x4_t v107 = (uint64_t (**)(void, uint64_t, _DWORD *, float *))&unk_26E7293F0;
    float32x4_t v108 = (uint64_t (**)(void, uint64_t, unsigned int *))&unk_26E729420;
    float32x4_t v109 = &v82;
    float v110 = *(float *)&v73;
    int8x16_t v112 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
    uint64_t v113 = 0;
    float v114 = v44;
    float v115 = v45;
    float v116 = v46;
    float v117 = v49;
    float v118 = v50;
    float v119 = v51;
    BOOL v120 = (v69 & 2 | v70 & 0x80) != 0;
    int v121 = v72;
    float v122 = a9;
    uint64_t v123 = 0;
    uint64_t v124 = 0;
    int v125 = -1;
    __int16 v126 = 0;
    uint64_t v128 = 0;
    uint64_t v129 = 0;
    uint64_t v127 = 0;
    uint64_t v130 = 2139095039;
    int v131 = 0;
    BOOL v75 = (v70 & 0x40) == 0 && a7 < 2;
    BOOL v133 = v75;
    char v132 = 0;
    *(void *)&long long v76 = __PAIR64__(LODWORD(v45), LODWORD(v44));
    *((void *)&v76 + 1) = LODWORD(v46);
    *(void *)&long long v77 = __PAIR64__(LODWORD(v50), LODWORD(v49));
    *((void *)&v77 + 1) = LODWORD(v51);
    long long v134 = v76;
    long long v135 = v77;
    physx::Gu::RTree::traverseRay<0>(a1 + 160, (uint64_t)&v100, (uint64_t)&v97, a9, 4, (uint64_t)v136, &v107);
    RayRTreeCallback<0,true>::~RayRTreeCallback((uint64_t)&v107);
  }
  return HIDWORD(v84);
}

BOOL physx::Gu::intersectSphereVsMesh_RTREE(float *a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, int8x16_t a6, int8x16_t a7)
{
  float v8 = *(float *)a4;
  a7.i32[0] = *(_DWORD *)(a4 + 4);
  a6.i32[0] = *(_DWORD *)(a4 + 8);
  if (*(float *)a4 == 1.0 && *(float *)a7.i32 == 1.0 && *(float *)a6.i32 == 1.0)
  {
    DWORD2(v88) = 2;
    *(void *)&long long v89 = v82;
    *((void *)&v89 + 1) = a5;
    LOWORD(v90) = 0;
    float v57 = a1[1] - a3[5];
    float v58 = a1[3];
    float v59 = a1[2] - a3[6];
    float v60 = (float)(*a1 - a3[4]) + (float)(*a1 - a3[4]);
    float v61 = v57 + v57;
    float v62 = v59 + v59;
    float v64 = a3[2];
    float v63 = a3[3];
    float v65 = (float)(v63 * v63) + -0.5;
    float v66 = *a3;
    float v67 = a3[1];
    float v68 = (float)((float)(v61 * v67) + (float)(*a3 * v60)) + (float)(v64 * v62);
    float v69 = (float)((float)(v61 * v65) - (float)((float)((float)(v64 * v60) - (float)(*a3 * v62)) * v63))
        + (float)(v67 * v68);
    *(void *)&long long v88 = &unk_26E729520;
    *((float *)&v92 + 1) = v69;
    *((float *)&v92 + 2) = (float)((float)(v62 * v65) - (float)((float)((float)(v66 * v61) - (float)(v67 * v60)) * v63))
                         + (float)(v64 * v68);
    float v91 = v58 * v58;
    *(float *)&long long v92 = (float)((float)(v60 * v65) - (float)((float)((float)(v67 * v62) - (float)(v64 * v61)) * v63))
                   + (float)(v66 * v68);
    *(float *)&float v100 = *(float *)&v92;
    *((float *)&v100 + 1) = v69;
    int v101 = SDWORD2(v92);
    uint64_t v110 = 1065353216;
    float v111 = 0.0;
    v98.i32[0] = fmaxf(v58, 0.001);
    v98.i32[1] = v98.i32[0];
    float v99 = v98.f32[0];
    MeshRayCollider::collide<1,1>((float *)&v100, (uint64_t)&v110, 1, a2, (uint64_t)&v88, (float *)&v98, 0.0);
    int v70 = v90;
  }
  else
  {
    BOOL v11 = (float)((float)(v8 * *(float *)a7.i32) * *(float *)a6.i32) < 0.0;
    float v12 = *(float *)(a4 + 12);
    float v13 = *(float *)(a4 + 16);
    float v14 = *(float *)(a4 + 20);
    float v15 = *(float *)(a4 + 24);
    float v16 = v13 + v13;
    float v17 = v14 + v14;
    float v18 = v13 * (float)(v13 + v13);
    float v19 = v14 * (float)(v14 + v14);
    float v20 = (float)(v12 + v12) * v13;
    float v21 = (float)(v12 + v12) * v14;
    float v22 = (float)(v12 + v12) * v15;
    float v23 = v16 * v14;
    float v24 = v16 * v15;
    float v25 = v17 * v15;
    float v26 = (float)(1.0 - v18) - v19;
    float v27 = v20 + v25;
    float v28 = v21 - v24;
    float v29 = v20 - v25;
    float v30 = 1.0 - (float)(v12 * (float)(v12 + v12));
    float v31 = v30 - v19;
    float v32 = v23 + v22;
    float v33 = v21 + v24;
    float v34 = v23 - v22;
    float v35 = v30 - v18;
    float v36 = v8 * v26;
    float v37 = v8 * v29;
    float v38 = v8 * v33;
    float v39 = *(float *)a7.i32 * v27;
    float v40 = *(float *)a7.i32 * v31;
    *(float *)a7.i32 = *(float *)a7.i32 * v34;
    float v41 = *(float *)a6.i32 * v28;
    float v42 = *(float *)a6.i32 * v32;
    *(float *)a6.i32 = *(float *)a6.i32 * v35;
    *(float *)&uint64_t v110 = (float)(v28 * v41) + (float)((float)(v26 * v36) + (float)(v27 * v39));
    *((float *)&v110 + 1) = (float)(v28 * v42) + (float)((float)(v26 * v37) + (float)(v27 * v40));
    float v111 = (float)(v28 * *(float *)a6.i32) + (float)((float)(v26 * v38) + (float)(v27 * *(float *)a7.i32));
    float v112 = (float)(v32 * v41) + (float)((float)(v29 * v36) + (float)(v31 * v39));
    float v113 = (float)(v32 * v42) + (float)((float)(v29 * v37) + (float)(v31 * v40));
    float v114 = (float)(v32 * *(float *)a6.i32) + (float)((float)(v29 * v38) + (float)(v31 * *(float *)a7.i32));
    float v115 = (float)(v35 * v41) + (float)((float)(v33 * v36) + (float)(v34 * v39));
    float v116 = (float)(v35 * v42) + (float)((float)(v33 * v37) + (float)(v34 * v40));
    float v117 = (float)(v35 * *(float *)a6.i32) + (float)((float)(v33 * v38) + (float)(v34 * *(float *)a7.i32));
    uint64_t v43 = 2;
    int v101 = 2;
    float v102 = &v110;
    uint64_t v103 = a5;
    unsigned __int8 v104 = 0;
    BOOL v105 = v11;
    float v100 = &unk_26E729578;
    a6.i32[0] = *(__int32 *)a1;
    *(void *)&long long v44 = *(void *)(a1 + 1);
    *(float *)a7.i32 = (float)(*a1 - a3[4]) + (float)(*a1 - a3[4]);
    float v45 = (float)(*(float *)&v44 - a3[5]) + (float)(*(float *)&v44 - a3[5]);
    float v46 = (float)(*((float *)&v44 + 1) - a3[6]) + (float)(*((float *)&v44 + 1) - a3[6]);
    float v48 = a3[2];
    float v47 = a3[3];
    float v49 = (float)(v47 * v47) + -0.5;
    float v50 = a3[1];
    float v51 = (float)((float)(v45 * v50) + (float)(*a3 * *(float *)a7.i32)) + (float)(v48 * v46);
    float v52 = (float)((float)(*(float *)a7.i32 * v49) - (float)((float)((float)(v50 * v46) - (float)(v48 * v45)) * v47))
        + (float)(*a3 * v51);
    float v53 = (float)((float)(v45 * v49) - (float)((float)((float)(v48 * *(float *)a7.i32) - (float)(*a3 * v46)) * v47))
        + (float)(v50 * v51);
    *(float *)a7.i32 = (float)((float)(v46 * v49)
                             - (float)((float)((float)(*a3 * v45) - (float)(v50 * *(float *)a7.i32)) * v47))
                     + (float)(v48 * v51);
    float v108 = v53;
    unsigned __int32 v109 = a7.i32[0];
    a7.i32[0] = (__int32)a1[3];
    float v106 = *(float *)a7.i32 * *(float *)a7.i32;
    float v107 = v52;
    long long v88 = xmmword_23435FD50;
    long long v89 = xmmword_23435FD50;
    int v90 = 1065353216;
    float v91 = *(float *)a6.i32;
    DWORD2(v44) = a7.i32[0];
    HIDWORD(v44) = a7.i32[0];
    long long v92 = v44;
    unsigned __int32 v93 = a7.i32[0];
    physx::Gu::computeVertexSpaceOBB(v82, (uint64_t)&v88, a3, (float *)a4, a6, a7, (int32x4_t)xmmword_23435FD50);
    if (v86 <= v87) {
      float v54 = v87;
    }
    else {
      float v54 = v86;
    }
    if (v85 >= v54)
    {
      uint64_t v56 = 0;
      uint64_t v55 = 1;
    }
    else
    {
      uint64_t v55 = 0;
      if (v86 >= v87)
      {
        uint64_t v56 = 1;
        uint64_t v43 = 2;
      }
      else
      {
        uint64_t v56 = 2;
        uint64_t v43 = 1;
      }
    }
    float v71 = *(&v85 + v56);
    int v72 = (float32x2_t *)((char *)v82 + 12 * v56);
    float v73 = v71 * v72[1].f32[0];
    float32x2_t v74 = (float32x2_t *)((char *)v82 + 12 * v55);
    float v75 = fabsf(v74[1].f32[0]);
    float v76 = *(&v85 + v55);
    long long v77 = (float32x2_t *)((char *)v82 + 12 * v43);
    float v78 = fabsf(v77[1].f32[0]);
    float v79 = *(&v85 + v43);
    float32x2_t v80 = vmul_n_f32(*v72, v71);
    float32x2_t v98 = vsub_f32(v83, v80);
    float v99 = v84 - v73;
    float32x2_t v94 = vadd_f32(vadd_f32(vmul_n_f32(vabs_f32(*v74), v76), vmul_n_f32(vabs_f32(*v77), v79)), (float32x2_t)vdup_n_s32(0x3A83126Fu));
    float v95 = (float)((float)(v75 * v76) + (float)(v78 * v79)) + 0.001;
    float32x2_t v96 = v80;
    float v97 = v73;
    MeshRayCollider::collide<1,1>((float *)&v98, (uint64_t)&v96, 1, a2, (uint64_t)&v100, (float *)&v94, 2.0);
    int v70 = v104;
  }
  return v70 != 0;
}

BOOL physx::Gu::intersectBoxVsMesh_RTREE(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, int8x16_t a6, int8x16_t a7, int32x4_t a8)
{
  a7.i32[0] = *(_DWORD *)a4;
  a8.i32[0] = *(_DWORD *)(a4 + 4);
  float v12 = *(float *)(a4 + 8);
  float v13 = 1.0;
  if (*(float *)a4 == 1.0 && *(float *)a8.i32 == 1.0 && v12 == 1.0)
  {
    float v94 = a3[1].f32[0] * -2.0;
    float v95 = a3[1].f32[1] * -2.0;
    float v96 = a3[1].f32[2] * -2.0;
    float v97 = a3->f32[2];
    float v98 = a3->f32[3];
    float v99 = (float)(v98 * v98) + -0.5;
    float v100 = a3->f32[0];
    float v101 = a3->f32[1];
    float v102 = (float)((float)(v95 * v101) + (float)(a3->f32[0] * v94)) + (float)(v97 * v96);
    float v103 = (float)((float)(v94 * v99) - (float)((float)((float)(v101 * v96) - (float)(v97 * v95)) * v98))
         + (float)(a3->f32[0] * v102);
    float v104 = (float)((float)(v95 * v99) - (float)((float)((float)(v97 * v94) - (float)(a3->f32[0] * v96)) * v98))
         + (float)(v101 * v102);
    float v105 = (float)((float)(v96 * v99) - (float)((float)((float)(a3->f32[0] * v95) - (float)(v101 * v94)) * v98))
         + (float)(v97 * v102);
    float v106 = *(float *)a1 + *(float *)a1;
    float v107 = *(float *)(a1 + 4) + *(float *)(a1 + 4);
    float v108 = *(float *)(a1 + 8) + *(float *)(a1 + 8);
    float v109 = (float)((float)-(float)(v101 * v107) - (float)(a3->f32[0] * v106)) - (float)(v97 * v108);
    float v110 = (float)((float)(v98 * (float)((float)(v97 * v107) - (float)(v101 * v108))) + (float)(v106 * v99))
         - (float)(a3->f32[0] * v109);
    float v111 = (float)((float)(v98 * (float)((float)(a3->f32[0] * v108) - (float)(v97 * v106))) + (float)(v107 * v99))
         - (float)(v101 * v109);
    float v112 = (float)((float)(v98 * (float)((float)(v101 * v106) - (float)(a3->f32[0] * v107))) + (float)(v108 * v99))
         - (float)(v97 * v109);
    float v113 = *(float *)(a1 + 12) + *(float *)(a1 + 12);
    float v114 = *(float *)(a1 + 16) + *(float *)(a1 + 16);
    float v115 = *(float *)(a1 + 20) + *(float *)(a1 + 20);
    float v116 = (float)((float)-(float)(v101 * v114) - (float)(a3->f32[0] * v113)) - (float)(v97 * v115);
    float v117 = (float)(v98 * (float)((float)(v97 * v114) - (float)(v101 * v115))) + (float)(v113 * v99);
    float v118 = v117 - (float)(a3->f32[0] * v116);
    float v119 = (float)((float)(v98 * (float)((float)(a3->f32[0] * v115) - (float)(v97 * v113))) + (float)(v114 * v99))
         - (float)(v101 * v116);
    float v120 = (float)(v98 * (float)((float)(v101 * v113) - (float)(a3->f32[0] * v114))) + (float)(v115 * v99);
    float v121 = v120 - (float)(v97 * v116);
    float v122 = *(float *)(a1 + 24) + *(float *)(a1 + 24);
    float v123 = *(float *)(a1 + 28) + *(float *)(a1 + 28);
    float v124 = *(float *)(a1 + 32) + *(float *)(a1 + 32);
    float v125 = (float)((float)-(float)(v101 * v123) - (float)(a3->f32[0] * v122)) - (float)(v97 * v124);
    float v126 = (float)((float)(v98 * (float)((float)(v97 * v123) - (float)(v101 * v124))) + (float)(v122 * v99))
         - (float)(a3->f32[0] * v125);
    float v127 = (float)((float)(v98 * (float)((float)(a3->f32[0] * v124) - (float)(v97 * v122))) + (float)(v123 * v99))
         - (float)(v101 * v125);
    float v128 = (float)((float)(v98 * (float)((float)(v101 * v122) - (float)(a3->f32[0] * v123))) + (float)(v124 * v99))
         - (float)(v97 * v125);
    float v129 = *(float *)(a1 + 36) + *(float *)(a1 + 36);
    float v130 = *(float *)(a1 + 40) + *(float *)(a1 + 40);
    float v131 = *(float *)(a1 + 44) + *(float *)(a1 + 44);
    float v132 = (float)((float)-(float)(v101 * v130) - (float)(a3->f32[0] * v129)) - (float)(v97 * v131);
    float v133 = (float)((float)(v98 * (float)((float)(v97 * v130) - (float)(v101 * v131))) + (float)(v129 * v99))
         - (float)(a3->f32[0] * v132);
    float v134 = (float)((float)(v98 * (float)((float)(a3->f32[0] * v131) - (float)(v97 * v129))) + (float)(v130 * v99))
         - (float)(v101 * v132);
    float v135 = (float)((float)(v98 * (float)((float)(v101 * v129) - (float)(a3->f32[0] * v130))) + (float)(v131 * v99))
         - (float)(v97 * v132);
    float v136 = v103 + v133;
    float v137 = v104 + v134;
    float v138 = v105 + v135;
    unsigned int v139 = *(_DWORD *)(a1 + 48);
    unsigned int v140 = *(_DWORD *)(a1 + 52);
    __int32 v141 = *(_DWORD *)(a1 + 56);
    v177.i64[0] = __PAIR64__(LODWORD(v111), LODWORD(v110));
    v177.i64[1] = __PAIR64__(LODWORD(v118), LODWORD(v112));
    float v178 = v119;
    float v179 = v121;
    float v180 = v126;
    float v181 = v127;
    float v182 = v128;
    float v183 = v136;
    float v184 = v137;
    float v185 = v138;
    unsigned int v186 = v139;
    unsigned int v187 = v140;
    __int32 v188 = v141;
    float v142 = (float)(v118 * v127) - (float)(v119 * v126);
    float v143 = (float)((float)(v111 * (float)((float)(v121 * v126) - (float)(v118 * v128)))
                 + (float)(v110 * (float)((float)(v119 * v128) - (float)(v121 * v127))))
         + (float)(v112 * v142);
    if (v143 == 0.0)
    {
      float v147 = 0.0;
      float v148 = 0.0;
      float v149 = 0.0;
      float v150 = 1.0;
      float v151 = 0.0;
      float v152 = 0.0;
      float v153 = 0.0;
      float v154 = 1.0;
    }
    else
    {
      float v144 = -(float)(v120 + (float)((float)-v97 * v116));
      float v145 = -(float)(v117 + (float)((float)-v100 * v116));
      float v146 = 1.0 / v143;
      float v13 = (float)((float)(v119 * v128) - (float)(v127 * v121)) * (float)(1.0 / v143);
      float v147 = -(float)((float)((float)(v111 * v128) - (float)(v127 * v112)) * (float)(1.0 / v143));
      float v148 = (float)((float)(v111 * v121) - (float)(v112 * v119)) * (float)(1.0 / v143);
      float v149 = -(float)((float)((float)(v126 * v144) + (float)(v118 * v128)) * (float)(1.0 / v143));
      float v150 = (float)((float)(v110 * v128) - (float)(v112 * v126)) * v146;
      float v151 = -(float)((float)((float)(v110 * v121) - (float)(v112 * v118)) * v146);
      float v152 = v142 * v146;
      float v153 = -(float)((float)((float)(v110 * v127) - (float)(v111 * v126)) * v146);
      float v154 = (float)((float)(v111 * v145) + (float)(v110 * v119)) * v146;
    }
    *(float *)float v189 = v13;
    *(float *)&v189[1] = v147;
    *(float *)&v189[2] = v148;
    *(float *)&v189[3] = v149;
    *(float *)&v189[4] = v150;
    *(float *)&v189[5] = v151;
    *(float *)&v189[6] = v152;
    *(float *)&v189[7] = v153;
    *(float *)&v189[8] = v154;
    int v157 = 2;
    float v158 = v189;
    uint64_t v159 = a5;
    __int16 v160 = 0;
    float v156 = &unk_26E7295B8;
    *(float *)&uint64_t v176 = -(float)((float)((float)-(float)(v137 * v150) - (float)(v136 * v147)) - (float)(v138 * v153));
    *((float *)&v176 + 1) = -(float)((float)((float)-(float)(v137 * v151) - (float)(v136 * v148)) - (float)(v138 * v154));
    unint64_t v173 = __PAIR64__(v140, v139);
    float v175 = -(float)((float)((float)-(float)(v137 * v149) - (float)(v136 * v13)) - (float)(v138 * v152));
    __int32 v174 = v141;
  }
  else
  {
    *(float *)a6.i32 = (float)(*(float *)a7.i32 * *(float *)a8.i32) * v12;
    BOOL v17 = *(float *)a6.i32 < 0.0;
    physx::Gu::computeVertexSpaceOBB(&v177, a1, a3->f32, (float *)a4, a6, a7, a8);
    float32x2_t v18 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a3->f32, 1);
    float32x2_t v19 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 2);
    float32x2_t v20 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
    float32x4_t v21 = vaddq_f32(*a3, *a3);
    float32x2_t v22 = vmul_lane_f32(v18, *(float32x2_t *)v21.f32, 1);
    float32x2_t v23 = vmul_laneq_f32(v19, v21, 2);
    float32x2_t v24 = vmul_n_f32(v18, v21.f32[0]);
    float32x2_t v25 = vmul_n_f32(v19, v21.f32[0]);
    float32x2_t v26 = vmul_n_f32(v20, v21.f32[0]);
    float32x2_t v27 = vmul_lane_f32(v19, *(float32x2_t *)v21.f32, 1);
    float32x2_t v28 = vmul_lane_f32(v20, *(float32x2_t *)v21.f32, 1);
    float32x2_t v29 = vmul_laneq_f32(v20, v21, 2);
    __asm { FMOV            V3.2S, #1.0 }
    float32x2_t v34 = vsub_f32(_D3, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3->f32, *(float32x2_t *)v21.f32), 0));
    _D3.f32[0] = vadd_f32(v24, v29).f32[0];
    v21.f32[0] = vsub_f32(v25, v28).f32[0];
    float32x2_t v35 = vsub_f32(v24, v29);
    float v36 = vsub_f32(v34, v23).f32[0];
    float v37 = vadd_f32(v27, v26).f32[0];
    float32x2_t v38 = vadd_f32(v25, v28);
    v24.f32[0] = vsub_f32(v27, v26).f32[0];
    v27.f32[0] = vsub_f32(v34, v22).f32[0];
    v22.f32[0] = (float)(1.0 - v22.f32[1]) - v23.f32[1];
    v23.i32[0] = *(_DWORD *)(a4 + 16);
    v26.i32[0] = *(_DWORD *)(a4 + 20);
    v28.i32[0] = *(_DWORD *)(a4 + 24);
    float v39 = *(float *)(a4 + 8);
    v34.i32[0] = *(_DWORD *)(a4 + 12);
    float v40 = v23.f32[0] + v23.f32[0];
    float v41 = v26.f32[0] + v26.f32[0];
    float v42 = v23.f32[0] * (float)(v23.f32[0] + v23.f32[0]);
    float v43 = v26.f32[0] * (float)(v26.f32[0] + v26.f32[0]);
    v23.f32[0] = (float)(v34.f32[0] + v34.f32[0]) * v23.f32[0];
    float v44 = (float)(v34.f32[0] + v34.f32[0]) * v26.f32[0];
    float v45 = (float)(v34.f32[0] + v34.f32[0]) * v28.f32[0];
    v26.f32[0] = v40 * v26.f32[0];
    float v46 = v40 * v28.f32[0];
    v28.f32[0] = v41 * v28.f32[0];
    float v47 = (float)(1.0 - v42) - v43;
    float v48 = v23.f32[0] + v28.f32[0];
    float v49 = v44 - v46;
    v23.f32[0] = v23.f32[0] - v28.f32[0];
    v25.f32[0] = 1.0 - (float)(v34.f32[0] * (float)(v34.f32[0] + v34.f32[0]));
    v28.f32[0] = v25.f32[0] - v43;
    v34.f32[0] = v26.f32[0] + v45;
    float v50 = v44 + v46;
    v26.f32[0] = v26.f32[0] - v45;
    v25.f32[0] = v25.f32[0] - v42;
    float v51 = *(float *)(a4 + 4);
    float v52 = *(float *)a4 * v47;
    float v53 = *(float *)a4 * v23.f32[0];
    float v54 = *(float *)a4 * v50;
    float v55 = v48 * v51;
    float v56 = v28.f32[0] * v51;
    float v57 = v26.f32[0] * v51;
    float v58 = v49 * v39;
    float v59 = v34.f32[0] * v39;
    float v60 = v25.f32[0] * v39;
    float v61 = v47 * v53;
    float v62 = v48 * v56;
    float v63 = (float)(v47 * v52) + (float)(v48 * v55);
    float v64 = (float)(v47 * v54) + (float)(v48 * v57);
    float v65 = v63 + (float)(v49 * v58);
    float v66 = (float)(v61 + v62) + (float)(v49 * v59);
    float v67 = v64 + (float)(v49 * v60);
    float v68 = v23.f32[0] * v53;
    float v69 = v28.f32[0] * v56;
    float v70 = (float)(v23.f32[0] * v52) + (float)(v28.f32[0] * v55);
    v23.f32[0] = (float)(v23.f32[0] * v54) + (float)(v28.f32[0] * v57);
    v28.f32[0] = v70 + (float)(v34.f32[0] * v58);
    float v71 = (float)(v68 + v69) + (float)(v34.f32[0] * v59);
    v23.f32[0] = v23.f32[0] + (float)(v34.f32[0] * v60);
    v34.f32[0] = v50 * v52;
    float v72 = v50 * v53;
    float v73 = v26.f32[0] * v56;
    v34.f32[0] = v34.f32[0] + (float)(v26.f32[0] * v55);
    v26.f32[0] = (float)(v50 * v54) + (float)(v26.f32[0] * v57);
    float v74 = v25.f32[0] * v58;
    float v75 = v25.f32[0] * v59;
    v25.f32[0] = v25.f32[0] * v60;
    v34.f32[0] = v34.f32[0] + v74;
    float v76 = (float)(v72 + v73) + v75;
    v25.f32[0] = v26.f32[0] + v25.f32[0];
    float v77 = (float)(v65 * _D3.f32[0]) + (float)(v66 * v36);
    float v78 = (float)(v65 * v21.f32[0]) + (float)(v66 * v37);
    float v79 = vmuls_lane_f32(v67, v38, 1) + (float)((float)(v22.f32[0] * v65) + vmuls_lane_f32(v66, v35, 1));
    float v80 = (float)(v67 * v24.f32[0]) + v77;
    float v81 = (float)(v67 * v27.f32[0]) + v78;
    float v82 = v28.f32[0] * _D3.f32[0];
    v26.f32[0] = (float)(v22.f32[0] * v28.f32[0]) + vmuls_lane_f32(v71, v35, 1);
    v28.f32[0] = (float)(v28.f32[0] * v21.f32[0]) + (float)(v71 * v37);
    float v83 = vmuls_lane_f32(v23.f32[0], v38, 1) + v26.f32[0];
    float v84 = (float)(v23.f32[0] * v24.f32[0]) + (float)(v82 + (float)(v71 * v36));
    float v85 = (float)(v23.f32[0] * v27.f32[0]) + v28.f32[0];
    float v86 = vmuls_lane_f32(v25.f32[0], v38, 1) + (float)((float)(v22.f32[0] * v34.f32[0]) + vmuls_lane_f32(v76, v35, 1));
    float v87 = (float)(v25.f32[0] * v24.f32[0]) + (float)((float)(v34.f32[0] * _D3.f32[0]) + (float)(v76 * v36));
    v23.f32[0] = (float)(v25.f32[0] * v27.f32[0]) + (float)((float)(v34.f32[0] * v21.f32[0]) + (float)(v76 * v37));
    float v88 = *(float *)a1;
    v22.i32[0] = *(_DWORD *)(a1 + 4);
    v21.i32[0] = *(_DWORD *)(a1 + 8);
    v24.i32[0] = *(_DWORD *)(a1 + 12);
    v27.i32[0] = *(_DWORD *)(a1 + 16);
    v38.i32[0] = *(_DWORD *)(a1 + 20);
    v35.i32[0] = *(_DWORD *)(a1 + 24);
    float v89 = *(float *)(a1 + 28);
    _D3.i32[0] = *(_DWORD *)(a1 + 32);
    v25.i32[0] = *(_DWORD *)(a1 + 36);
    float v90 = *(float *)(a1 + 40);
    v26.i32[0] = *(_DWORD *)(a1 + 44);
    v34.f32[0] = (float)((float)-(float)(v90 * v22.f32[0]) - (float)(*(float *)a1 * v25.f32[0]))
               - (float)(v21.f32[0] * v26.f32[0]);
    float v91 = a3[1].f32[0];
    float v92 = a3[1].f32[1];
    float v93 = a3[1].f32[2];
    int v157 = 2;
    float v158 = v189;
    uint64_t v159 = a5;
    LOBYTE(v160) = 0;
    HIBYTE(v160) = v17;
    float v156 = &unk_26E7295F8;
    float v161 = (float)(v21.f32[0] * v81) + (float)((float)(v88 * v79) + (float)(v22.f32[0] * v80));
    float v162 = (float)(v38.f32[0] * v81) + (float)((float)(v24.f32[0] * v79) + (float)(v27.f32[0] * v80));
    float v163 = (float)((float)(v79 * v35.f32[0]) + (float)(v80 * v89)) + (float)(v81 * _D3.f32[0]);
    float v164 = (float)(v21.f32[0] * v85) + (float)((float)(v88 * v83) + (float)(v22.f32[0] * v84));
    float v165 = (float)(v38.f32[0] * v85) + (float)((float)(v24.f32[0] * v83) + (float)(v27.f32[0] * v84));
    float v166 = (float)((float)(v83 * v35.f32[0]) + (float)(v84 * v89)) + (float)(v85 * _D3.f32[0]);
    float v167 = (float)(v21.f32[0] * v23.f32[0]) + (float)((float)(v88 * v86) + (float)(v22.f32[0] * v87));
    float v168 = (float)(v38.f32[0] * v23.f32[0]) + (float)((float)(v24.f32[0] * v86) + (float)(v27.f32[0] * v87));
    float v169 = (float)((float)(v86 * v35.f32[0]) + (float)(v87 * v89)) + (float)(v23.f32[0] * _D3.f32[0]);
    float v170 = v34.f32[0] + (float)((float)((float)(v88 * v91) + (float)(v22.f32[0] * v92)) + (float)(v21.f32[0] * v93));
    float v171 = (float)((float)((float)-(float)(v90 * v27.f32[0]) - (float)(v24.f32[0] * v25.f32[0]))
                 - (float)(v38.f32[0] * v26.f32[0]))
         + (float)((float)((float)(v24.f32[0] * v91) + (float)(v27.f32[0] * v92)) + (float)(v38.f32[0] * v93));
    float v172 = (float)((float)((float)-(float)(v90 * v89) - (float)(v35.f32[0] * v25.f32[0]))
                 - (float)(_D3.f32[0] * v26.f32[0]))
         + (float)((float)((float)(v35.f32[0] * v91) + (float)(v89 * v92)) + (float)(_D3.f32[0] * v93));
    uint64_t v176 = 0;
    float v175 = 0.0;
    v38.i32[0] = *(_DWORD *)(a1 + 56);
    unint64_t v173 = *(void *)(a1 + 48);
    __int32 v174 = v38.i32[0];
  }
  MeshRayCollider::collideOBB(v177.f32, 1, a2, (uint64_t)&v156, 1);
  return (_BYTE)v160 != 0;
}

BOOL physx::Gu::intersectCapsuleVsMesh_RTREE(Capsule *a1, uint64_t a2, float *a3, float *a4, uint64_t a5)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  float v7 = *a4;
  float v8 = a4[1];
  float v9 = a4[2];
  if (*a4 == 1.0 && v8 == 1.0 && v9 == 1.0)
  {
    v97.i32[2] = 2;
    float v98 = v110;
    uint64_t v99 = a5;
    __int16 v100 = 0;
    v97.i64[0] = (uint64_t)&unk_26E729638;
    float v67 = a3[4];
    float v68 = a3[5];
    float v69 = a3[6];
    float v70 = *((float *)a1 + 3);
    float v71 = (float)(*(float *)a1 - v67) + (float)(*(float *)a1 - v67);
    float v72 = (float)(*((float *)a1 + 1) - v68) + (float)(*((float *)a1 + 1) - v68);
    float v73 = (float)(*((float *)a1 + 2) - v69) + (float)(*((float *)a1 + 2) - v69);
    float v75 = a3[2];
    float v74 = a3[3];
    float v76 = (float)(v74 * v74) + -0.5;
    float v77 = *a3;
    float v78 = a3[1];
    float v79 = (float)((float)(v72 * v78) + (float)(*a3 * v71)) + (float)(v75 * v73);
    float v80 = (float)((float)(v71 * v76) - (float)((float)((float)(v78 * v73) - (float)(v75 * v72)) * v74))
        + (float)(*a3 * v79);
    float v81 = (float)((float)(v72 * v76) - (float)((float)((float)(v75 * v71) - (float)(*a3 * v73)) * v74))
        + (float)(v78 * v79);
    float v82 = (float)((float)(v73 * v76) - (float)((float)((float)(*a3 * v72) - (float)(v78 * v71)) * v74))
        + (float)(v75 * v79);
    *(float *)float v101 = v80;
    *(float *)&v101[1] = v81;
    int v83 = *((_DWORD *)a1 + 6);
    float v84 = (float)(v70 - v67) + (float)(v70 - v67);
    float v85 = (float)(*((float *)a1 + 4) - v68) + (float)(*((float *)a1 + 4) - v68);
    float v86 = (float)(*((float *)a1 + 5) - v69) + (float)(*((float *)a1 + 5) - v69);
    float v87 = (float)((float)(v78 * v85) + (float)(v77 * v84)) + (float)(v75 * v86);
    float v88 = (float)((float)(v84 * v76) - (float)((float)((float)(v78 * v86) - (float)(v75 * v85)) * v74))
        + (float)(v77 * v87);
    *(float *)&int8x16_t v101[2] = v82;
    *(float *)&v101[3] = v88;
    float v102 = (float)((float)(v85 * v76) - (float)((float)((float)(v75 * v84) - (float)(v77 * v86)) * v74))
         + (float)(v78 * v87);
    float v103 = (float)((float)(v86 * v76) - (float)((float)((float)(v77 * v85) - (float)(v78 * v84)) * v74))
         + (float)(v75 * v87);
    float v89 = v88 - v80;
    float v90 = v102 - v81;
    float v91 = v103 - v82;
    float v92 = (float)((float)(v90 * v90) + (float)(v89 * v89)) + (float)(v91 * v91);
    int v104 = v83;
    float v105 = v88 - v80;
    float v106 = v102 - v81;
    float v107 = v91;
    float v93 = 1.0 / v92;
    if (v92 == 0.0) {
      float v93 = 0.0;
    }
    float v108 = (float)((float)(v90 * v90) + (float)(v89 * v89)) + (float)(v91 * v91);
    float v109 = v93;
    v96[0] = v83;
    v96[1] = v83;
    void v96[2] = v83;
    v95[0] = v88 - v80;
    v95[1] = v102 - v81;
    v95[2] = v91;
    RayRTreeCallback<1,false>::RayRTreeCallback((uint64_t)&v111, (uint64_t)&v97, (*(unsigned __int8 *)(a2 + 92) >> 1) & 1, *(void *)(a2 + 48), *(void *)(a2 + 40), (uint64_t)v101, (uint64_t)v95, 1, *(float *)(a2 + 88), 1.0, (uint64_t)v96);
    physx::Gu::RTree::traverseRay<1>(a2 + 160, (uint64_t)v101, (uint64_t)v95, 1.0, 4, (uint64_t)v129, &v111, (uint64_t)v96);
    RayRTreeCallback<1,false>::~RayRTreeCallback((uint64_t)&v111);
    int v66 = v100;
  }
  else
  {
    float v13 = a4[3];
    float v14 = a4[4];
    float v15 = a4[5];
    float v16 = a4[6];
    float v17 = v14 + v14;
    float v18 = v15 + v15;
    float v19 = v14 * (float)(v14 + v14);
    float v20 = v15 * (float)(v15 + v15);
    float v21 = (float)(v13 + v13) * v14;
    float v22 = (float)(v13 + v13) * v15;
    float v23 = (float)(v13 + v13) * v16;
    float v24 = v17 * v15;
    float v25 = v17 * v16;
    float v26 = v18 * v16;
    float v27 = (float)(1.0 - v19) - v20;
    float v28 = v21 + v26;
    float v29 = v22 - v25;
    float v30 = v21 - v26;
    float v31 = 1.0 - (float)(v13 * (float)(v13 + v13));
    float v32 = v31 - v20;
    float v33 = v24 + v23;
    float v34 = v22 + v25;
    float v35 = v24 - v23;
    float v36 = v31 - v19;
    v129[0] = (float)(v29 * (float)(v9 * v29))
            + (float)((float)(v27 * (float)(v7 * v27)) + (float)(v28 * (float)(v8 * v28)));
    v129[1] = (float)(v29 * (float)(v9 * v33))
            + (float)((float)(v27 * (float)(v7 * v30)) + (float)(v28 * (float)(v8 * v32)));
    v129[2] = (float)(v29 * (float)(v9 * v36))
            + (float)((float)(v27 * (float)(v7 * v34)) + (float)(v28 * (float)(v8 * v35)));
    v129[3] = (float)(v33 * (float)(v9 * v29))
            + (float)((float)(v30 * (float)(v7 * v27)) + (float)(v32 * (float)(v8 * v28)));
    v129[4] = (float)(v33 * (float)(v9 * v33))
            + (float)((float)(v30 * (float)(v7 * v30)) + (float)(v32 * (float)(v8 * v32)));
    v129[5] = (float)(v33 * (float)(v9 * v36))
            + (float)((float)(v30 * (float)(v7 * v34)) + (float)(v32 * (float)(v8 * v35)));
    v129[6] = (float)(v36 * (float)(v9 * v29))
            + (float)((float)(v34 * (float)(v7 * v27)) + (float)(v35 * (float)(v8 * v28)));
    v129[7] = (float)(v36 * (float)(v9 * v33))
            + (float)((float)(v34 * (float)(v7 * v30)) + (float)(v35 * (float)(v8 * v32)));
    v129[8] = (float)(v36 * (float)(v9 * v36))
            + (float)((float)(v34 * (float)(v7 * v34)) + (float)(v35 * (float)(v8 * v35)));
    int v112 = 2;
    float v113 = v129;
    uint64_t v114 = a5;
    unsigned __int8 v115 = 0;
    BOOL v116 = (float)((float)(v7 * v8) * v9) < 0.0;
    float v111 = (uint64_t (**)(void, uint64_t, _DWORD *, float *))&unk_26E729678;
    int v37 = *((_DWORD *)a1 + 6);
    float v38 = a3[4];
    float v39 = a3[5];
    float v40 = a3[6];
    float v41 = *((float *)a1 + 3);
    float v42 = (float)(*(float *)a1 - v38) + (float)(*(float *)a1 - v38);
    float v43 = (float)(*((float *)a1 + 1) - v39) + (float)(*((float *)a1 + 1) - v39);
    float v44 = (float)(*((float *)a1 + 2) - v40) + (float)(*((float *)a1 + 2) - v40);
    float v46 = a3[2];
    float v45 = a3[3];
    float v47 = (float)(v45 * v45) + -0.5;
    float v48 = *a3;
    float v49 = a3[1];
    float v50 = (float)((float)(v43 * v49) + (float)(*a3 * v42)) + (float)(v46 * v44);
    float v51 = (float)((float)(v42 * v47) - (float)((float)((float)(v49 * v44) - (float)(v46 * v43)) * v45))
        + (float)(*a3 * v50);
    float v52 = (float)((float)(v43 * v47) - (float)((float)((float)(v46 * v42) - (float)(*a3 * v44)) * v45))
        + (float)(v49 * v50);
    float v53 = (float)((float)(v44 * v47) - (float)((float)((float)(*a3 * v43) - (float)(v49 * v42)) * v45))
        + (float)(v46 * v50);
    float v117 = v51;
    float v118 = v52;
    float v54 = (float)(v41 - v38) + (float)(v41 - v38);
    float v55 = (float)(*((float *)a1 + 4) - v39) + (float)(*((float *)a1 + 4) - v39);
    float v56 = (float)(*((float *)a1 + 5) - v40) + (float)(*((float *)a1 + 5) - v40);
    float v57 = (float)((float)(v49 * v55) + (float)(v48 * v54)) + (float)(v46 * v56);
    float v119 = v53;
    float v120 = (float)((float)(v54 * v47) - (float)((float)((float)(v49 * v56) - (float)(v46 * v55)) * v45))
         + (float)(v48 * v57);
    float v121 = (float)((float)(v55 * v47) - (float)((float)((float)(v46 * v54) - (float)(v48 * v56)) * v45))
         + (float)(v49 * v57);
    float v122 = (float)((float)(v56 * v47) - (float)((float)((float)(v48 * v55) - (float)(v49 * v54)) * v45))
         + (float)(v46 * v57);
    float v58 = v120 - v51;
    float v59 = v121 - v52;
    float v60 = v122 - v53;
    float v61 = (float)((float)(v59 * v59) + (float)(v58 * v58)) + (float)(v60 * v60);
    int v123 = v37;
    float v124 = v120 - v51;
    float v125 = v121 - v52;
    float v126 = v60;
    float v62 = 1.0 / v61;
    if (v61 == 0.0) {
      float v62 = 0.0;
    }
    float v127 = (float)((float)(v59 * v59) + (float)(v58 * v58)) + (float)(v60 * v60);
    float v128 = v62;
    *(float *)v63.i32 = physx::Gu::Box::create((physx::Gu::Box *)v110, a1);
    physx::Gu::computeVertexSpaceOBB(&v97, (uint64_t)v110, a3, a4, v63, v64, v65);
    MeshRayCollider::collideOBB(v97.f32, 1, a2, (uint64_t)&v111, 1);
    int v66 = v115;
  }
  return v66 != 0;
}

uint64_t physx::Gu::intersectOBB_RTREE(uint64_t a1, float *a2, uint64_t a3, char a4, int a5)
{
  return MeshRayCollider::collideOBB(a2, a4, a1, a3, a5);
}

BOOL physx::Gu::sweepCapsule_MeshGeom_RTREE(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, uint64_t a6, _WORD *a7, float a8, float a9)
{
  float v15 = a4[5];
  float v16 = a4[6] + a9;
  float v17 = *a4;
  float v18 = a4[1];
  v101[0] = *a4;
  v101[1] = v18;
  float v19 = a4[2];
  float v20 = a4[3];
  int8x16_t v101[2] = v19;
  v101[3] = v20;
  float v21 = a4[4];
  _DWORD v101[4] = v21;
  v101[5] = v15;
  v101[6] = v16;
  float v23 = *(float *)(a2 + 4);
  float v24 = *(float *)(a2 + 8);
  float v22 = (float *)(a2 + 4);
  BOOL v26 = v23 == 1.0 && v24 == 1.0 && *(float *)(a2 + 12) == 1.0;
  char v27 = *(unsigned char *)(a2 + 32);
  float v28 = *(float *)(a3 + 16);
  float v29 = *(float *)(a3 + 20);
  float v30 = v17 - v28;
  float v31 = *(float *)(a3 + 24);
  float v32 = v30 + v30;
  float v33 = (float)(v18 - v29) + (float)(v18 - v29);
  float v34 = (float)(v19 - v31) + (float)(v19 - v31);
  float v36 = *(float *)(a3 + 8);
  float v35 = *(float *)(a3 + 12);
  float v37 = (float)(v35 * v35) + -0.5;
  float v39 = *(float *)a3;
  float v38 = *(float *)(a3 + 4);
  float v40 = (float)((float)(v33 * v38) + (float)(*(float *)a3 * v32)) + (float)(v36 * v34);
  float v41 = (float)((float)(v32 * v37) - (float)((float)((float)(v38 * v34) - (float)(v36 * v33)) * v35))
      + (float)(*(float *)a3 * v40);
  float v42 = (float)((float)(v33 * v37) - (float)((float)((float)(v36 * v32) - (float)(*(float *)a3 * v34)) * v35))
      + (float)(v38 * v40);
  float v43 = (float)((float)(v34 * v37) - (float)((float)((float)(*(float *)a3 * v33) - (float)(v38 * v32)) * v35))
      + (float)(v36 * v40);
  float v44 = (float)(v20 - v28) + (float)(v20 - v28);
  float v45 = (float)(v21 - v29) + (float)(v21 - v29);
  float v46 = (float)(v15 - v31) + (float)(v15 - v31);
  float v47 = (float)((float)(v45 * v38) + (float)(*(float *)a3 * v44)) + (float)(v36 * v46);
  float v48 = (float)((float)(v44 * v37) - (float)((float)((float)(v38 * v46) - (float)(v36 * v45)) * v35))
      + (float)(*(float *)a3 * v47);
  float v49 = (float)((float)(v45 * v37) - (float)((float)((float)(v36 * v44) - (float)(*(float *)a3 * v46)) * v35))
      + (float)(v38 * v47);
  float v50 = (float)((float)(v46 * v37) - (float)((float)((float)(*(float *)a3 * v45) - (float)(v38 * v44)) * v35))
      + (float)(v36 * v47);
  float v51 = (float)(v43 + v50) * 0.5;
  v99.f32[0] = (float)(v41 + v48) * 0.5;
  v99.f32[1] = (float)(v42 + v49) * 0.5;
  float v100 = v51;
  float v52 = *a5 + *a5;
  float v53 = a5[1] + a5[1];
  float v54 = a5[2] + a5[2];
  float v55 = (float)((float)(v38 * v53) + (float)(v39 * v52)) + (float)(v36 * v54);
  float v56 = (float)((float)(v52 * v37) - (float)((float)((float)(v38 * v54) - (float)(v36 * v53)) * v35))
      + (float)(v39 * v55);
  float v57 = (float)((float)(v53 * v37) - (float)((float)((float)(v36 * v52) - (float)(v39 * v54)) * v35))
      + (float)(v38 * v55);
  float v58 = (float)((float)(v54 * v37) - (float)((float)((float)(v39 * v53) - (float)(v38 * v52)) * v35))
      + (float)(v36 * v55);
  v97.f32[0] = v56;
  v97.f32[1] = v57;
  float v98 = v58;
  v95.f32[0] = v16 + (float)(vabds_f32(v41, v48) * 0.5);
  v95.f32[1] = v16 + (float)(vabds_f32(v42, v49) * 0.5);
  float v96 = v16 + (float)(vabds_f32(v43, v50) * 0.5);
  if (v26)
  {
    float v59 = v38 + v38;
    float v60 = v36 + v36;
    float v61 = v38 * (float)(v38 + v38);
    float v62 = v36 * (float)(v36 + v36);
    float v63 = (float)(v39 + v39) * v38;
    float v64 = (float)(v39 + v39) * v36;
    float v65 = v35 * (float)(v39 + v39);
    float v66 = v59 * v36;
    float v67 = v35 * v59;
    float v68 = v35 * v60;
    float v69 = 1.0;
    float v70 = v63 + v68;
    float v71 = v63 - v68;
    *(float *)&long long v92 = (float)(1.0 - v61) - v62;
    *((float *)&v92 + 1) = v70;
    float v72 = 1.0 - (float)(v39 * (float)(v39 + v39));
    *((float *)&v92 + 2) = v64 - v67;
    *((float *)&v92 + 3) = v71;
    *(float *)&long long v93 = v72 - v62;
    *((float *)&v93 + 1) = v65 + v66;
    *((float *)&v93 + 2) = v64 + v67;
    *((float *)&v93 + 3) = v66 - v65;
    v94[0] = v72 - v61;
    *(void *)&v94[1] = __PAIR64__(LODWORD(v29), LODWORD(v28));
    float32x4_t v94[3] = v31;
    float v73 = a8;
  }
  else
  {
    float v88 = (float)(v41 + v48) * 0.5;
    float v89 = (float)(v42 + v49) * 0.5;
    physx::operator*(a3, v22, (uint64_t)v90);
    long long v92 = *(_OWORD *)v90;
    long long v93 = *(_OWORD *)&v90[16];
    *(_OWORD *)float v94 = *(_OWORD *)v91;
    float v85 = (float)(v56 * a8) + v88;
    float v86 = (float)(v57 * a8) + v89;
    float v87 = (float)(v58 * a8) + v51;
    float v74 = 1.0 / *(float *)(a2 + 12);
    __asm { FMOV            V2.2S, #1.0 }
    float32x2_t v102 = vdiv_f32(_D2, *(float32x2_t *)(a2 + 4));
    float v103 = v74;
    *(_OWORD *)int v104 = *(_OWORD *)(a2 + 16);
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v90, (float *)&v102, v104);
    float v79 = v100;
    float v80 = v96;
    float v100 = (float)((float)(v88 * *(float *)&v90[8]) + (float)(v89 * *(float *)&v90[20])) + (float)(v100 * v91[0]);
    float v96 = (float)(fabsf(*(float *)&v90[8] * v95.f32[0]) + fabsf(*(float *)&v90[20] * v95.f32[1])) + fabsf(v91[0] * v96);
    float32x2_t v99 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v90, v88), vmul_n_f32(*(float32x2_t *)&v90[12], v89)), vmul_n_f32(*(float32x2_t *)&v90[24], v79));
    float32x2_t v95 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)v90, v95.f32[0])), vabs_f32(vmul_n_f32(*(float32x2_t *)&v90[12], v95.f32[1]))), vabs_f32(vmul_n_f32(*(float32x2_t *)&v90[24], v80)));
    float32x2_t v81 = vsub_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v90, v85), vmul_n_f32(*(float32x2_t *)&v90[12], v86)), vmul_n_f32(*(float32x2_t *)&v90[24], v87)), v99);
    float v82 = (float)((float)((float)(v85 * *(float *)&v90[8]) + (float)(v86 * *(float *)&v90[20])) + (float)(v87 * v91[0]))
        - v100;
    float32x2_t v97 = v81;
    float v98 = v82;
    float v83 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v81, v81).i32[1]), v81.f32[0], v81.f32[0]) + (float)(v82 * v82));
    float v73 = 0.0;
    if (v83 >= 1.0e-20)
    {
      float32x2_t v97 = vmul_n_f32(v81, 1.0 / v83);
      float v98 = v82 * (float)(1.0 / v83);
      float v73 = v83;
    }
    float v69 = v73 / a8;
  }
  physx::Gu::SweepCapsuleMeshHitCallback::SweepCapsuleMeshHitCallback((uint64_t)v90, a6, (uint64_t)&v92, (v27 & 2) != 0, v101, (uint64_t)a5, a7, (float)((float)(*(float *)(a2 + 4) * *(float *)(a2 + 8)) * *(float *)(a2 + 12)) < 0.0, a8, v69);
  MeshRayCollider::collide<1,1>((float *)&v99, (uint64_t)&v97, 1, a1, (uint64_t)v90, (float *)&v95, v73);
  return physx::Gu::SweepCapsuleMeshHitCallback::finalizeHit((uint64_t)v90, a6, (uint64_t)v101, a2);
}

BOOL physx::Gu::sweepBox_MeshGeom_RTREE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, unsigned __int16 *a7, float a8, float a9, double a10, double a11)
{
  uint64_t v268 = *MEMORY[0x263EF8340];
  float v20 = *(float *)(a2 + 4);
  float v19 = *(float *)(a2 + 8);
  float v18 = (float *)(a2 + 4);
  if (v20 == 1.0 && v19 == 1.0)
  {
    int v22 = (*a7 >> 7) & 1;
    int v23 = (*(unsigned __int8 *)(a2 + 32) >> 1) & 1;
    if (*(float *)(a2 + 12) == 1.0)
    {
      float v25 = *(float *)a3;
      float v24 = *(float *)(a3 + 4);
      float v26 = *(float *)(a3 + 8);
      float v27 = *(float *)(a3 + 12);
      float v28 = v24 * (float)(v24 + v24);
      float v29 = v26 * (float)(v26 + v26);
      float v30 = (float)(v25 + v25) * v24;
      float v31 = (float)(v25 + v25) * v26;
      float v32 = (float)(v25 + v25) * v27;
      float v33 = (float)(v24 + v24) * v26;
      *(float *)&a11 = (float)(v24 + v24) * v27;
      float v34 = (float)(v26 + v26) * v27;
      *(float *)&uint64_t v229 = v30 + v34;
      *((float *)&v229 + 1) = v31 - *(float *)&a11;
      float v230 = (float)(1.0 - v28) - v29;
      float v232 = v30 - v34;
      float v35 = 1.0 - (float)(v25 * (float)(v25 + v25));
      float v231 = v35 - v29;
      float v225 = v31 + *(float *)&a11;
      float v223 = v33 + v32;
      float v224 = v33 - v32;
      float v234 = v35 - v28;
      float v36 = *(float *)(a3 + 16);
      float v222 = *(float *)(a3 + 20);
      float v37 = (float)-v25 - v25;
      float v38 = (float)-v24 - v24;
      *(float *)&a11 = (float)-v26 - v26;
      float v39 = -(float)(v24 * v38);
      float v40 = -(float)(v26 * *(float *)&a11);
      float v41 = -(float)(v24 * v37);
      float v42 = -(float)(v26 * v37);
      float v43 = -(float)(v26 * v38);
      float v44 = v38 * v27;
      *(float *)&a11 = *(float *)&a11 * v27;
      float v45 = (float)(1.0 - v39) - v40;
      float v46 = v41 + *(float *)&a11;
      float v47 = v42 - (float)(v38 * v27);
      float v48 = v41 - *(float *)&a11;
      *(float *)&a11 = (float)(*(float *)a3 * v37) + 1.0;
      float v49 = *(float *)&a11 - v40;
      float v50 = v43 + (float)(v37 * v27);
      float v51 = v42 + v44;
      float v52 = v43 - (float)(v37 * v27);
      float v53 = *(float *)&a11 - v39;
      float v54 = *(float *)(a4 + 32);
      LODWORD(a11) = *(_DWORD *)(a4 + 36);
      double v221 = a11;
      float v55 = *(float *)&a11 - v36;
      float v56 = *(float *)(a4 + 40);
      float v57 = *(float *)(a4 + 44);
      float v236 = *(float *)(a3 + 24);
      v253.f32[0] = (float)((float)(v45 * v55) + (float)(v48 * (float)(v56 - v222)))
                  + (float)((float)(v42 + v44) * (float)(v57 - v236));
      v253.f32[1] = (float)((float)(v46 * v55) + (float)(v49 * (float)(v56 - v222)))
                  + (float)(v52 * (float)(v57 - v236));
      float v254 = (float)((float)(v47 * v55) + (float)(v50 * (float)(v56 - v222))) + (float)(v53 * (float)(v57 - v236));
      float v58 = a5[1];
      float v59 = (float)(v45 * *a5) + (float)(v48 * v58);
      float v60 = (float)(v46 * *a5) + (float)(v49 * v58);
      float v61 = (float)(v47 * *a5) + (float)(v50 * v58);
      float v62 = a5[2];
      float v63 = v59 + (float)((float)(v42 + v44) * v62);
      float v64 = v60 + (float)(v52 * v62);
      float v65 = v61 + (float)(v53 * v62);
      float v67 = *(float *)a4;
      float v66 = *(float *)(a4 + 4);
      float v68 = *(float *)(a4 + 8);
      float v69 = *(float *)(a4 + 12);
      float v70 = (float)((float)(v45 * *(float *)a4) + (float)(v48 * v66)) + (float)(v51 * v68);
      float v71 = (float)((float)(v46 * *(float *)a4) + (float)(v49 * v66)) + (float)(v52 * v68);
      float v72 = (float)((float)(v47 * *(float *)a4) + (float)(v50 * v66)) + (float)(v53 * v68);
      float v74 = *(float *)(a4 + 16);
      float v73 = *(float *)(a4 + 20);
      float v75 = (float)((float)(v45 * v69) + (float)(v48 * v74)) + (float)(v51 * v73);
      float v76 = (float)((float)(v46 * v69) + (float)(v49 * v74)) + (float)(v52 * v73);
      float v77 = (float)((float)(v47 * v69) + (float)(v50 * v74)) + (float)(v53 * v73);
      float v79 = *(float *)(a4 + 24);
      float v78 = *(float *)(a4 + 28);
      float v80 = (float)((float)(v45 * v79) + (float)(v48 * v78)) + (float)(v51 * v54);
      float v81 = (float)((float)(v46 * v79) + (float)(v49 * v78)) + (float)(v52 * v54);
      float v82 = (float)((float)(v47 * v79) + (float)(v50 * v78)) + (float)(v53 * v54);
      float v83 = fabsf(v72);
      float v84 = a8;
      int32x2_t v85 = *(int32x2_t *)&v221;
      float v86 = *(float *)(a4 + 48);
      float v87 = *(float *)(a4 + 52);
      float v88 = fabsf(v70) * v86;
      float v89 = fabsf(v71) * v86;
      float v90 = v83 * v86;
      float v91 = fabsf(v75);
      float v92 = a9;
      float v93 = fabsf(v76);
      float v95 = v222;
      float v94 = v223;
      float v96 = v91 * v87;
      float v97 = v93 * v87;
      float v98 = fabsf(v77) * v87;
      float v100 = v224;
      float v99 = v225;
      float v101 = v88 + v96;
      float v102 = *(float *)(a4 + 56);
      float v103 = fabsf(v80) * v102;
      float v104 = fabsf(v81) * v102;
      float v105 = fabsf(v82) * v102;
      float v106 = v101 + v103;
      float v107 = (float)(v89 + v97) + v104;
      float v108 = (float)(v90 + v98) + v105;
      int v109 = 1;
      float v228 = v63 * v84;
      float v227 = v64 * v84;
      float v226 = v65 * v84;
      goto LABEL_13;
    }
    float v233 = a8;
    float v235 = a9;
  }
  else
  {
    float v233 = a8;
    float v235 = a9;
    int v22 = (*a7 >> 7) & 1;
    int v23 = (*(unsigned __int8 *)(a2 + 32) >> 1) & 1;
  }
  physx::operator*(a3, v18, (uint64_t)&v256);
  float32x4_t v126 = *(float32x4_t *)a3;
  *(int32x2_t *)v177.i8 = vdup_lane_s32(*(int32x2_t *)a3, 1);
  *(int32x2_t *)v125.i8 = vdup_laneq_s32(*(int32x4_t *)a3, 2);
  float32x2_t v110 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a3, 3);
  _Q4 = vaddq_f32(v126, v126);
  *(int32x2_t *)v126.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a3, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v112 = vmul_lane_f32(*(float32x2_t *)v177.i8, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v113 = vmul_laneq_f32(*(float32x2_t *)v125.i8, _Q4, 2);
  *(float32x2_t *)v177.i8 = vmul_n_f32(*(float32x2_t *)v177.i8, _Q4.f32[0]);
  float32x2_t v114 = vmul_n_f32(*(float32x2_t *)v125.i8, _Q4.f32[0]);
  float32x2_t v115 = vmul_n_f32(v110, _Q4.f32[0]);
  *(float32x2_t *)v125.i8 = vmul_lane_f32(*(float32x2_t *)v125.i8, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v116 = vmul_lane_f32(v110, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v117 = vmul_laneq_f32(v110, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  *(float32x2_t *)v126.f32 = vsub_f32(*(float32x2_t *)_Q4.f32, *(float32x2_t *)v126.f32);
  _Q4.f32[0] = vadd_f32(*(float32x2_t *)v177.i8, v117).f32[0];
  float v121 = vsub_f32(v114, v116).f32[0];
  float32x2_t v122 = vsub_f32(*(float32x2_t *)v177.i8, v117);
  float v123 = vsub_f32(*(float32x2_t *)v126.f32, v113).f32[0];
  float v124 = vadd_f32(*(float32x2_t *)v125.i8, v115).f32[0];
  *(float32x2_t *)v177.i8 = vadd_f32(v114, v116);
  *(float32x2_t *)v125.i8 = vsub_f32(*(float32x2_t *)v125.i8, v115);
  v117.f32[0] = vsub_f32(*(float32x2_t *)v126.f32, v112).f32[0];
  v126.i32[0] = 1.0;
  v112.f32[0] = (float)(1.0 - v112.f32[1]) - v113.f32[1];
  v113.i32[0] = *(_DWORD *)(a2 + 20);
  v114.i32[0] = *(_DWORD *)(a2 + 24);
  v115.i32[0] = *(_DWORD *)(a2 + 28);
  float v127 = *(float *)(a2 + 12);
  v116.i32[0] = *(_DWORD *)(a2 + 16);
  float v128 = v113.f32[0] + v113.f32[0];
  float v129 = v114.f32[0] + v114.f32[0];
  float v130 = v113.f32[0] * (float)(v113.f32[0] + v113.f32[0]);
  float v131 = v114.f32[0] * (float)(v114.f32[0] + v114.f32[0]);
  v113.f32[0] = (float)(v116.f32[0] + v116.f32[0]) * v113.f32[0];
  float v132 = (float)(v116.f32[0] + v116.f32[0]) * v114.f32[0];
  float v133 = (float)(v116.f32[0] + v116.f32[0]) * v115.f32[0];
  v114.f32[0] = v128 * v114.f32[0];
  float v134 = v128 * v115.f32[0];
  v115.f32[0] = v129 * v115.f32[0];
  float v135 = (float)(1.0 - v130) - v131;
  float v136 = v113.f32[0] + v115.f32[0];
  float v137 = v132 - v134;
  v113.f32[0] = v113.f32[0] - v115.f32[0];
  v115.f32[0] = 1.0 - (float)(v116.f32[0] * (float)(v116.f32[0] + v116.f32[0]));
  v116.f32[0] = v115.f32[0] - v131;
  float v138 = v114.f32[0] + v133;
  float v139 = v132 + v134;
  v114.f32[0] = v114.f32[0] - v133;
  v115.f32[0] = v115.f32[0] - v130;
  float v140 = *(float *)(a2 + 4);
  float v141 = *(float *)(a2 + 8);
  float v142 = v140 * v135;
  float v143 = v140 * v113.f32[0];
  float v144 = v140 * v139;
  float v145 = v136 * v141;
  float v146 = v116.f32[0] * v141;
  float v147 = v114.f32[0] * v141;
  float v148 = v137 * v127;
  float v149 = v138 * v127;
  float v150 = v115.f32[0] * v127;
  float v151 = v135 * v142;
  float v152 = (float)(v135 * v143) + (float)(v136 * v146);
  float v153 = (float)(v135 * v144) + (float)(v136 * v147);
  float v154 = (float)(v151 + (float)(v136 * v145)) + (float)(v137 * v148);
  float v155 = v152 + (float)(v137 * v149);
  float v156 = v153 + (float)(v137 * v150);
  float v157 = (float)(v113.f32[0] * v142) + (float)(v116.f32[0] * v145);
  float v158 = (float)(v113.f32[0] * v143) + (float)(v116.f32[0] * v146);
  v113.f32[0] = (float)(v113.f32[0] * v144) + (float)(v116.f32[0] * v147);
  float v159 = v138 * v149;
  v116.f32[0] = v157 + (float)(v138 * v148);
  float v160 = v113.f32[0] + (float)(v138 * v150);
  float v161 = v139 * v144;
  float v162 = (float)((float)(v139 * v142) + (float)(v114.f32[0] * v145)) + (float)(v115.f32[0] * v148);
  float v163 = (float)((float)(v139 * v143) + (float)(v114.f32[0] * v146)) + (float)(v115.f32[0] * v149);
  float v164 = (float)(v161 + (float)(v114.f32[0] * v147)) + (float)(v115.f32[0] * v150);
  float v165 = vmuls_lane_f32(v156, *(float32x2_t *)v177.i8, 1)
       + (float)((float)(v112.f32[0] * v154) + vmuls_lane_f32(v155, v122, 1));
  float v166 = (float)(v156 * *(float *)v125.i32) + (float)((float)(v154 * _Q4.f32[0]) + (float)(v155 * v123));
  float v167 = (float)(v156 * v117.f32[0]) + (float)((float)(v154 * v121) + (float)(v155 * v124));
  float v168 = (float)(v116.f32[0] * v121) + (float)((float)(v158 + v159) * v124);
  float v169 = vmuls_lane_f32(v160, *(float32x2_t *)v177.i8, 1)
       + (float)((float)(v112.f32[0] * v116.f32[0]) + vmuls_lane_f32(v158 + v159, v122, 1));
  float v170 = (float)(v160 * *(float *)v125.i32)
       + (float)((float)(v116.f32[0] * _Q4.f32[0]) + (float)((float)(v158 + v159) * v123));
  float v171 = (float)(v160 * v117.f32[0]) + v168;
  _Q4.f32[0] = (float)(v162 * _Q4.f32[0]) + (float)(v163 * v123);
  float v172 = (float)(v162 * v121) + (float)(v163 * v124);
  float v173 = vmuls_lane_f32(v164, *(float32x2_t *)v177.i8, 1)
       + (float)((float)(v112.f32[0] * v162) + vmuls_lane_f32(v163, v122, 1));
  float v174 = (float)(v164 * *(float *)v125.i32) + _Q4.f32[0];
  float v175 = (float)(v164 * v117.f32[0]) + v172;
  float v176 = (float)(v169 * v174) - (float)(v170 * v173);
  *(float *)v177.i32 = (float)((float)(v166 * (float)((float)(v171 * v173) - (float)(v169 * v175)))
                             + (float)(v165 * (float)((float)(v170 * v175) - (float)(v171 * v174))))
                     + (float)(v167 * v176);
  if (*(float *)v177.i32 == 0.0)
  {
    v177.i64[0] = 0;
    v125.i64[0] = 0;
    float v179 = 0.0;
    float v180 = 1.0;
    float v181 = 0.0;
    float v182 = 0.0;
    float v183 = 0.0;
    float v184 = 1.0;
  }
  else
  {
    float v178 = 1.0 / *(float *)v177.i32;
    v126.f32[0] = (float)((float)(v170 * v175) - (float)(v174 * v171)) * (float)(1.0 / *(float *)v177.i32);
    *(float *)v177.i32 = -(float)((float)((float)(v166 * v175) - (float)(v174 * v167))
                                * (float)(1.0 / *(float *)v177.i32));
    *(float *)v125.i32 = (float)((float)(v166 * v171) - (float)(v167 * v170)) * v178;
    float v179 = -(float)((float)((float)(v173 * (float)-v171) + (float)(v169 * v175)) * v178);
    float v180 = (float)((float)(v165 * v175) - (float)(v167 * v173)) * v178;
    float v181 = -(float)((float)((float)(v165 * v171) - (float)(v167 * v169)) * v178);
    float v182 = v176 * v178;
    float v183 = -(float)((float)((float)(v165 * v174) - (float)(v166 * v173)) * v178);
    float v184 = (float)((float)(v166 * (float)-v169) + (float)(v165 * v170)) * v178;
  }
  float v84 = v233;
  float v92 = v235;
  uint64_t v229 = *(uint64_t *)((char *)v256.i64 + 4);
  float v230 = v256.f32[0];
  float v231 = v257;
  float v232 = v256.f32[3];
  float v94 = v258;
  float v99 = v259;
  float v100 = v260;
  float v36 = v262;
  float v95 = v263;
  float v234 = v261;
  float v236 = v264;
  float v185 = *(float *)(a3 + 16);
  float v186 = *(float *)(a3 + 20);
  float v187 = *(float *)(a3 + 24);
  float32x2_t v245 = (float32x2_t)__PAIR64__(v177.u32[0], v126.u32[0]);
  float v246 = *(float *)v125.i32;
  float32x2_t v247 = (float32x2_t)__PAIR64__(LODWORD(v180), LODWORD(v179));
  float v248 = v181;
  float32x2_t v249 = (float32x2_t)__PAIR64__(LODWORD(v183), LODWORD(v182));
  float v250 = v184;
  v251.f32[0] = (float)((float)-(float)(v186 * v179) - (float)(v126.f32[0] * v185)) - (float)(v182 * v187);
  v251.f32[1] = (float)((float)-(float)(v186 * v180) - (float)(*(float *)v177.i32 * v185)) - (float)(v183 * v187);
  float v252 = (float)((float)-(float)(v186 * v181) - (float)(*(float *)v125.i32 * v185)) - (float)(v184 * v187);
  physx::transform((uint64_t)&v245, a4, &v256, (int8x16_t)v126, v177, v125);
  int v109 = 0;
  float v106 = (float)((float)(fabsf(v256.f32[3]) * v266) + (float)(fabsf(v256.f32[0]) * v265)) + (float)(fabsf(v259) * v267);
  float v107 = (float)((float)(fabsf(v257) * v266) + (float)(fabsf(v256.f32[1]) * v265)) + (float)(fabsf(v260) * v267);
  float v108 = (float)((float)(fabsf(v258) * v266) + (float)(fabsf(v256.f32[2]) * v265)) + (float)(fabsf(v261) * v267);
  float v54 = *(float *)(a4 + 32);
  v85.i32[0] = *(_DWORD *)(a4 + 36);
  float v56 = *(float *)(a4 + 40);
  float v57 = *(float *)(a4 + 44);
  float32x2_t v253 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v245, *(float *)v85.i32), vmul_n_f32(v247, v56)), vmul_n_f32(v249, v57)), v251);
  float v254 = (float)((float)((float)(*(float *)v85.i32 * v246) + (float)(v56 * v248)) + (float)(v57 * v250)) + v252;
  float v188 = *a5 * v84;
  float v189 = a5[1] * v84;
  float v190 = a5[2] * v84;
  float v228 = (float)((float)(v188 * v245.f32[0]) + (float)(v189 * v247.f32[0])) + (float)(v190 * v249.f32[0]);
  float v226 = (float)((float)(v246 * v188) + (float)(v248 * v189)) + (float)(v250 * v190);
  float v227 = (float)(vmuls_lane_f32(v188, v245, 1) + vmuls_lane_f32(v189, v247, 1)) + vmuls_lane_f32(v190, v249, 1);
  float v67 = *(float *)a4;
  float v66 = *(float *)(a4 + 4);
  float v68 = *(float *)(a4 + 8);
  float v69 = *(float *)(a4 + 12);
  float v74 = *(float *)(a4 + 16);
  float v73 = *(float *)(a4 + 20);
  float v79 = *(float *)(a4 + 24);
  float v78 = *(float *)(a4 + 28);
LABEL_13:
  v255[0] = (float)(v106 + v92) * 1.01;
  v255[1] = (float)(v107 + v92) * 1.01;
  v255[2] = (float)(v108 + v92) * 1.01;
  v245.f32[0] = (float)((float)(v67 * v230) + (float)(v66 * *(float *)&v229)) + (float)(v68 * *((float *)&v229 + 1));
  v245.f32[1] = (float)((float)(v69 * v230) + (float)(v74 * *(float *)&v229)) + (float)(v73 * *((float *)&v229 + 1));
  float v246 = (float)((float)(v79 * v230) + (float)(v78 * *(float *)&v229)) + (float)(v54 * *((float *)&v229 + 1));
  v247.f32[0] = (float)((float)(v67 * v232) + (float)(v66 * v231)) + (float)(v68 * v94);
  v247.f32[1] = (float)((float)(v69 * v232) + (float)(v74 * v231)) + (float)(v73 * v94);
  float v248 = (float)((float)(v79 * v232) + (float)(v78 * v231)) + (float)(v54 * v94);
  v249.f32[0] = (float)((float)(v67 * v99) + (float)(v66 * v100)) + (float)(v68 * v234);
  v249.f32[1] = (float)((float)(v69 * v99) + (float)(v74 * v100)) + (float)(v73 * v234);
  float v250 = (float)((float)(v79 * v99) + (float)(v78 * v100)) + (float)(v54 * v234);
  v251.f32[0] = (float)((float)((float)-(float)(v56 * v66) - (float)(v67 * *(float *)v85.i32)) - (float)(v68 * v57))
              + (float)((float)((float)(v67 * v36) + (float)(v66 * v95)) + (float)(v68 * v236));
  v251.f32[1] = (float)((float)((float)-(float)(v56 * v74) - (float)(v69 * *(float *)v85.i32)) - (float)(v73 * v57))
              + (float)((float)((float)(v69 * v36) + (float)(v74 * v95)) + (float)(v73 * v236));
  float v252 = (float)((float)((float)-(float)(v56 * v78) - (float)(v79 * *(float *)v85.i32)) - (float)(v54 * v57))
       + (float)((float)((float)(v79 * v36) + (float)(v78 * v95)) + (float)(v54 * v236));
  float v191 = *(float *)(a4 + 32);
  float v192 = *(float *)(a4 + 16);
  if (v191 >= 0.0)
  {
    float v200 = v66 - v69;
    if (v67 < (float)-v192)
    {
      float v201 = v191 + (float)((float)(1.0 - v67) - v192);
      float v202 = 0.5 / sqrtf(v201);
      float v196 = (float)(v79 + v68) * v202;
      float v197 = v202 * (float)(*(float *)(a4 + 20) + *(float *)(a4 + 28));
      float v198 = v201 * v202;
      float v199 = v200 * v202;
      goto LABEL_21;
    }
    float v204 = v191 + (float)((float)(v67 + 1.0) + v192);
    float v205 = 0.5 / sqrtf(v204);
    float v196 = v205 * (float)(*(float *)(a4 + 20) - *(float *)(a4 + 28));
    float v197 = (float)(v79 - v68) * v205;
    float v198 = v200 * v205;
  }
  else
  {
    float v193 = v69 + v66;
    if (v67 > v192)
    {
      float v194 = (float)((float)(v67 + 1.0) - v192) - v191;
      float v195 = 0.5 / sqrtf(v194);
      float v196 = v194 * v195;
      float v197 = v193 * v195;
      float v198 = (float)(v79 + v68) * v195;
      float v199 = v195 * (float)(*(float *)(a4 + 20) - *(float *)(a4 + 28));
      goto LABEL_21;
    }
    float v203 = (float)((float)(1.0 - v67) + v192) - v191;
    float v204 = v79 - v68;
    float v205 = 0.5 / sqrtf(v203);
    float v196 = v193 * v205;
    float v197 = v203 * v205;
    float v198 = v205 * (float)(*(float *)(a4 + 20) + *(float *)(a4 + 28));
  }
  float v199 = v204 * v205;
LABEL_21:
  float v206 = fmaxf(sqrtf((float)((float)(v227 * v227) + (float)(v228 * v228)) + (float)(v226 * v226)), 0.00001);
  float v207 = v206 / v84;
  if (v109) {
    float v207 = 1.0;
  }
  v241.i64[0] = __PAIR64__(LODWORD(v197), LODWORD(v196));
  v241.i64[1] = __PAIR64__(LODWORD(v199), LODWORD(v198));
  __int32 v242 = v85.i32[0];
  float v243 = v56;
  float v244 = v57;
  float v208 = a5[1];
  float v209 = (float)(v67 * *a5) + (float)(v66 * v208);
  float v210 = (float)(v69 * *a5) + (float)(v74 * v208);
  *(float *)v85.i32 = (float)(v79 * *a5) + (float)(v78 * v208);
  float v211 = a5[2];
  v239.f32[0] = v209 + (float)(v68 * v211);
  v239.f32[1] = v210 + (float)(v73 * v211);
  float v240 = *(float *)v85.i32 + (float)(v54 * v211);
  v238[0] = v239.f32[0] * v84;
  v238[1] = v239.f32[1] * v84;
  v238[2] = v240 * v84;
  *(float *)v85.i32 = v84;
  physx::Gu::SweepBoxMeshHitCallback::SweepBoxMeshHitCallback((uint64_t)&v256, 2, (uint64_t)&v245, v23 | v22, a4, (uint64_t)v238, &v239, (uint64_t)a5, v85, v92, v207, a7, (float)((float)(*(float *)(a2 + 4) * *(float *)(a2 + 8)) * *(float *)(a2 + 12)) < 0.0);
  v237[0] = v228 * (float)(1.0 / v206);
  v237[1] = v227 * (float)(1.0 / v206);
  v237[2] = v226 * (float)(1.0 / v206);
  MeshRayCollider::collide<1,1>((float *)&v253, (uint64_t)v237, v23 | v22, a1, (uint64_t)&v256, v255, v206);
  return physx::Gu::SweepBoxMeshHitCallback::finalizeHit((uint64_t)&v256, a6, a2, v212, v213, v214, v215, v216, v217, v218, v219, a3, &v241, &v239, v22, v23);
}

uint64_t physx::Gu::sweepConvex_MeshGeom_RTREE(uint64_t a1, uint64_t a2, float32x2_t *a3, uint64_t a4, float a5)
{
  physx::Gu::computeSweptBox((uint64_t)v8, (float *)(a2 + 48), (float32x2_t *)(a2 + 36), (float *)a2, a3, a5);
  return MeshRayCollider::collideOBB(v8, 1, a1, a4, 1);
}

BOOL intersectEdgeEdgePreca(float *a1, float *a2, uint64_t a3, float *a4, unsigned int a5, unsigned int a6, float32x2_t *a7, float *a8, float a9, float a10, float *a11, float *a12, float32x2_t *a13)
{
  float v13 = *a8;
  float v14 = a8[1];
  float v15 = a4[1];
  float v16 = a8[2];
  float v17 = a4[2];
  float v18 = a4[3];
  float v19 = (float)((float)((float)(v14 * v15) + (float)(*a8 * *a4)) + (float)(v16 * v17)) + v18;
  float v20 = a11[1];
  float v21 = a11[2];
  if ((float)(v19 * (float)(v18 + (float)((float)((float)(v15 * v20) + (float)(*a11 * *a4)) + (float)(v21 * v17)))) > 0.0) {
    return 0;
  }
  float v22 = *a11 - v13;
  float v23 = v20 - v14;
  float v24 = v21 - v16;
  float v25 = (float)((float)(v15 * v23) + (float)(*a4 * v22)) + (float)(v17 * v24);
  if (v25 == 0.0) {
    return 0;
  }
  float v26 = v19 / v25;
  a13->f32[0] = v13 - (float)(v22 * v26);
  a13->f32[1] = v14 - (float)(v23 * v26);
  a13[1].f32[0] = v16 - (float)(v24 * v26);
  float v27 = (float)((float)(*(float *)(a3 + 4 * a5) * (float)(a13->f32[a6] - a1[a6]))
              - (float)(*(float *)(a3 + 4 * a6) * (float)(a13->f32[a5] - a1[a5])))
      * a9;
  *a12 = v27;
  if (v27 < a10) {
    return 0;
  }
  float v29 = v27 * a7[1].f32[0];
  float32x2_t v30 = vsub_f32(*a13, vmul_n_f32(*a7, v27));
  *a13 = v30;
  float32_t v31 = a13[1].f32[0] - v29;
  a13[1].f32[0] = v31;
  return (float)((float)((float)((float)(a1[1] - v30.f32[1]) * (float)(a2[1] - v30.f32[1]))
                       + (float)((float)(*a1 - v30.f32[0]) * (float)(*a2 - v30.f32[0])))
               + (float)((float)(a1[2] - v31) * (float)(a2[2] - v31))) < 0.0;
}

uint64_t GuTestAxis(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, float a7)
{
  float v9 = a1[1];
  float v10 = a1[2];
  float v11 = (float)((float)(a2[1] * v9) + (float)(*a2 * *a1)) + (float)(a2[2] * v10);
  float v12 = (float)((float)(v9 * a2[4]) + (float)(a2[3] * *a1)) + (float)(a2[5] * v10);
  if (v11 <= v12) {
    float v13 = v11;
  }
  else {
    float v13 = v12;
  }
  if (v11 <= v12) {
    float v11 = v12;
  }
  float v14 = v11 + a7;
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, float *, uint64_t, uint64_t, char *, uint64_t *))(a3 + 88))(a3, a1, a5, a4, (char *)&v17 + 4, &v17);
  uint64_t result = 0;
  if (v14 >= *((float *)&v17 + 1))
  {
    if (*(float *)&v17 >= (float)(v13 - a7))
    {
      float v16 = v14 - *((float *)&v17 + 1);
      if ((float)(v14 - *((float *)&v17 + 1)) >= (float)(*(float *)&v17 - (float)(v13 - a7))) {
        float v16 = *(float *)&v17 - (float)(v13 - a7);
      }
      *a6 = v16;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t local_Split(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (!v3) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v6 = *(unsigned int **)(a1 + 32);
  float v7 = (float)(*(float *)(a1 + 4 * a3) + *(float *)(a1 + 4 * a3 + 12)) * 0.5;
  float v8 = v6;
  do
  {
    unsigned int v9 = *v8;
    if (*(float *)(a2 + 4 * a3 + 12 * *v8) > v7)
    {
      *float v8 = v6[result];
      v6[result] = v9;
      uint64_t result = (result + 1);
    }
    ++v8;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 48;
    uint64_t v11 = 0;
    BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD(result, (unsigned int *)&v11 + 1, (unsigned int *)&v11);
    uint64_t v10 = 0;
    BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD(v2, (unsigned int *)&v10 + 1, (unsigned int *)&v10);
    if (HIDWORD(v11) > HIDWORD(v10))
    {
      uint64_t v3 = v1;
      uint64_t v4 = *(void *)(v1 + 24);
      uint64_t v5 = *(void *)(v1 + 32);
      int v6 = *(_DWORD *)(v1 + 40);
      long long v7 = *(_OWORD *)(v1 + 48);
      uint64_t v8 = *(void *)(v1 + 64);
      *(_OWORD *)(v1 + 24) = *(_OWORD *)(v1 + 72);
      *(_DWORD *)(v1 + 40) = *(_DWORD *)(v1 + 88);
      long long v9 = *(_OWORD *)v1;
      *(_OWORD *)uint64_t v1 = v7;
      *(_OWORD *)(v1 + 48) = v9;
      *(void *)&long long v7 = *(void *)(v1 + 16);
      *(void *)(v1 + 16) = v8;
      *(void *)(v1 + 64) = v7;
      *(void *)(v1 + 72) = v4;
      *(void *)(v1 + 80) = v5;
      *(_DWORD *)(v1 + 88) = v6;
      uint64_t v1 = v2;
      uint64_t v2 = v3;
    }
    BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(*(void *)(v1 + 24));
    return BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(*(void *)(v2 + 24));
  }
  return result;
}

uint64_t _BuildBV4(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  while (1)
  {
    while (1)
    {
      uint64_t v8 = *(void *)(a3 + 24);
      uint64_t v9 = v8 ? v8 + 48 : 0;
      uint64_t v10 = *(float **)(v8 + 24);
      uint64_t v11 = *(float **)(v9 + 24);
      if (!v10) {
        break;
      }
      if (!v11)
      {
        ++*(_DWORD *)(a4 + 12);
        setPrimitive(*a1, (uint64_t)a2, 2u, v9, *(float *)(a4 + 20));
        float v14 = *(float **)(v8 + 24);
        if (v14) {
          a3 = (uint64_t)(v14 + 12);
        }
        else {
          a3 = 0;
        }
        uint64_t v15 = setNode(*a1, (uint64_t)a2, 0, *(void *)(v8 + 24), (BV4BuildParams *)a4);
        uint64_t v16 = setNode(*a1, (uint64_t)a2, 1u, a3, (BV4BuildParams *)a4);
        a2[12] = precomputeNodeSorting((float *)v8, (float *)v9);
        uint64_t result = precomputeNodeSorting(v14, (float *)a3);
        a2[24] = result;
        if (!v15) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      ++*(_DWORD *)(a4 + 16);
      a3 = (uint64_t)(v11 + 12);
      uint64_t v17 = setNode(*a1, (uint64_t)a2, 0, (uint64_t)v10, (BV4BuildParams *)a4);
      uint64_t v18 = setNode(*a1, (uint64_t)a2, 1u, (uint64_t)(v10 + 12), (BV4BuildParams *)a4);
      uint64_t v19 = setNode(*a1, (uint64_t)a2, 2u, (uint64_t)v11, (BV4BuildParams *)a4);
      uint64_t v12 = setNode(*a1, (uint64_t)a2, 3u, (uint64_t)(v11 + 12), (BV4BuildParams *)a4);
      a2[12] = precomputeNodeSorting((float *)v8, (float *)v9);
      a2[24] = precomputeNodeSorting(v10, v10 + 12);
      uint64_t result = precomputeNodeSorting(v11, v11 + 12);
      a2[36] = result;
      if (v17) {
        uint64_t result = _BuildBV4(a1, v17, v10, a4);
      }
      if (v18) {
        uint64_t result = _BuildBV4(a1, v18, v10 + 12, a4);
      }
      if (v19) {
        uint64_t result = _BuildBV4(a1, v19, v11, a4);
      }
      a2 = (_DWORD *)v12;
      if (!v12) {
        return result;
      }
    }
    if (!v11) {
      break;
    }
    ++*(_DWORD *)(a4 + 8);
    setPrimitive(*a1, (uint64_t)a2, 0, v8, *(float *)(a4 + 20));
    float v14 = *(float **)(v9 + 24);
    if (v14) {
      a3 = (uint64_t)(v14 + 12);
    }
    else {
      a3 = 0;
    }
    uint64_t v15 = setNode(*a1, (uint64_t)a2, 1u, *(void *)(v9 + 24), (BV4BuildParams *)a4);
    uint64_t v16 = setNode(*a1, (uint64_t)a2, 2u, a3, (BV4BuildParams *)a4);
    a2[12] = precomputeNodeSorting((float *)v8, (float *)v9);
    uint64_t result = precomputeNodeSorting(v14, (float *)a3);
    a2[36] = result;
    if (!v15) {
      goto LABEL_20;
    }
LABEL_19:
    uint64_t result = _BuildBV4(a1, v15, v14, a4);
LABEL_20:
    a2 = (_DWORD *)v16;
    if (!v16) {
      return result;
    }
  }
  ++*(_DWORD *)(a4 + 4);
  setPrimitive(*a1, (uint64_t)a2, 0, v8, *(float *)(a4 + 20));
  setPrimitive(*a1, (uint64_t)a2, 1u, v9, *(float *)(a4 + 20));
  uint64_t result = precomputeNodeSorting((float *)v8, (float *)v9);
  a2[12] = result;
  return result;
}

uint64_t BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v4 = *a3;
  unsigned int v5 = *a3 + 1;
  *a3 = v5;
  if (*a2 <= v5) {
    unsigned int v6 = v4 + 1;
  }
  else {
    unsigned int v6 = *a2;
  }
  *a2 = v6;
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t result = ((uint64_t (*)(void))BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD)();
    --*a3;
    uint64_t v10 = *(void *)(a1 + 24);
    if (v10)
    {
      uint64_t result = BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_CheckMD(v10 + 48, a2, a3);
      --*a3;
    }
  }
  return result;
}

uint64_t setPrimitive(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, float a5)
{
  int v5 = *(_DWORD *)(a4 + 40);
  uint64_t v6 = *(void *)(a4 + 32);
  uint64_t v7 = a2 + 48 * a3;
  float32x4_t v8 = *(float32x4_t *)(a4 + 4);
  float v9 = (float)(*(float *)a4 + COERCE_FLOAT(*(void *)(a4 + 12))) * 0.5;
  float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v8, vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), 0xCuLL);
  v10.i32[1] = *(_DWORD *)(a4 + 20);
  v11.i64[0] = vaddq_f32(v8, v10).u64[0];
  v10.i32[2] = *(_DWORD *)a4;
  v11.i64[1] = vsubq_f32(v8, v10).i64[1];
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  float32x4_t v13 = vmulq_f32(v11, v12);
  float v14 = (float)(v10.f32[1] - COERCE_FLOAT(HIDWORD(*(void *)(a4 + 4)))) * 0.5;
  *(float *)(v7 + 32) = v14;
  uint64_t v15 = (float *)(v7 + 32);
  *(v15 - 5) = v9;
  *((float32x4_t *)v15 - 1) = v13;
  if (a5 != 0.0)
  {
    uint64_t v16 = a2 + 48 * a3;
    *(float *)(v16 + 24) = v13.f32[2] + a5;
    *(float *)(v16 + 28) = v13.f32[3] + a5;
    *uint64_t v15 = v14 + a5;
  }
  *(void *)(a2 + 48 * a3 + 40) = (2 * (v5 & 0x8000000F | (16 * (((v6 - result) >> 2) & 0x7FFFFFF)))) | 1;
  return result;
}

uint64_t precomputeNodeSorting(float *a1, float *a2)
{
  float v2 = (float)((float)(*a1 + a1[3]) * 0.5) - (float)((float)(*a2 + a2[3]) * 0.5);
  float v3 = (float)((float)(a1[1] + a1[4]) * 0.5) - (float)((float)(a2[1] + a2[4]) * 0.5);
  float v4 = (float)((float)(a1[2] + a1[5]) * 0.5) - (float)((float)(a2[2] + a2[5]) * 0.5);
  float v5 = v3 * 0.57735;
  float v6 = (float)(v3 * 0.57735) + (float)(v2 * 0.57735);
  float v7 = v3 * -0.57735;
  float v8 = v7 + (float)(v2 * 0.57735);
  float v9 = v8 + (float)(v4 * 0.57735);
  float v10 = v8 + (float)(v4 * -0.57735);
  float v11 = v5 + (float)(v2 * -0.57735);
  float v12 = v11 + (float)(v4 * 0.57735);
  float v13 = v11 + (float)(v4 * -0.57735);
  float v14 = v7 + (float)(v2 * -0.57735);
  if ((float)(v6 + (float)(v4 * -0.57735)) >= 0.0) {
    int v15 = (((float)(v6 + (float)(v4 * 0.57735)) >= 0.0) << 7) | 0x40;
  }
  else {
    int v15 = ((float)(v6 + (float)(v4 * 0.57735)) >= 0.0) << 7;
  }
  if (v9 >= 0.0) {
    v15 |= 0x20u;
  }
  if (v10 >= 0.0) {
    v15 |= 0x10u;
  }
  if (v12 >= 0.0) {
    v15 |= 8u;
  }
  if (v13 >= 0.0) {
    v15 |= 4u;
  }
  if ((float)(v14 + (float)(v4 * 0.57735)) >= 0.0) {
    v15 |= 2u;
  }
  return v15 | ((float)(v14 + (float)(v4 * -0.57735)) >= 0.0);
}

uint64_t setNode(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, BV4BuildParams *this)
{
  if (*(void *)(a4 + 24))
  {
    uint64_t v7 = a2 + 48 * a3;
    float32x4_t v8 = *(float32x4_t *)(a4 + 4);
    float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)v8, vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), 0xCuLL);
    v9.i32[1] = *(_DWORD *)(a4 + 20);
    v10.i64[0] = vaddq_f32(v8, v9).u64[0];
    v9.i32[2] = *(_DWORD *)a4;
    v10.i64[1] = vsubq_f32(v8, v9).i64[1];
    float v11 = (float)(*(float *)a4 + COERCE_FLOAT(*(void *)(a4 + 12))) * 0.5;
    v12.i64[0] = 0x3F0000003F000000;
    v12.i64[1] = 0x3F0000003F000000;
    float32x4_t v13 = vmulq_f32(v10, v12);
    float v14 = (float)(v9.f32[1] - COERCE_FLOAT(HIDWORD(*(void *)(a4 + 4)))) * 0.5;
    *(float *)(v7 + 32) = v14;
    int v15 = (float *)(v7 + 32);
    *(v15 - 5) = v11;
    *((float32x4_t *)v15 - 1) = v13;
    float v16 = *((float *)this + 5);
    if (v16 != 0.0)
    {
      uint64_t v17 = a2 + 48 * a3;
      *(float *)(v17 + 24) = v13.f32[2] + v16;
      *(float *)(v17 + 28) = v13.f32[3] + v16;
      *int v15 = v14 + v16;
    }
    ++*(_DWORD *)this;
    uint64_t result = BV4BuildParams::allocateNode(this);
    *(void *)(a2 + 48 * a3 + 40) = result;
  }
  else
  {
    setPrimitive(a1, a2, a3, a4, *((float *)this + 5));
    return 0;
  }
  return result;
}

uint64_t _ComputeMaxValues(uint64_t a1, float *a2, float *a3)
{
  for (uint64_t i = 0; i != 192; i += 48)
  {
    uint64_t v7 = (float *)(a1 + i);
    uint64_t result = *(void *)(a1 + i + 40);
    if (result != 0xFFFFFFFFLL)
    {
      float v10 = v7[3];
      float v9 = v7[4];
      float v11 = v7[5];
      float v12 = v7[6];
      float v14 = v7[7];
      float v13 = v7[8];
      float v15 = vabds_f32(v10, v12);
      if (v15 > *a2) {
        *a2 = v15;
      }
      float v16 = fabsf(v9 - v14);
      if (v16 > a2[1]) {
        a2[1] = v16;
      }
      float v17 = fabsf(v11 - v13);
      if (v17 > a2[2]) {
        a2[2] = v17;
      }
      float v18 = fabsf(v10 + v12);
      if (v18 > *a3) {
        *a3 = v18;
      }
      float v19 = fabsf(v9 + v14);
      if (v19 > a3[1]) {
        a3[1] = v19;
      }
      float v20 = fabsf(v11 + v13);
      if (v20 > a3[2]) {
        a3[2] = v20;
      }
      if ((result & 1) == 0) {
        uint64_t result = _ComputeMaxValues();
      }
    }
  }
  return result;
}

uint64_t _FlattenQ(uint64_t result, unsigned int a2, int *a3, void *a4, unsigned int *a5, unsigned int *a6, float *a7, float *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  unsigned int v10 = *a6 + 1;
  *a6 = v10;
  if (v10 > *a5) {
    *a5 = v10;
  }
  v11.i64[0] = a4[5];
  v11.i64[1] = a4[11];
  v12.i64[0] = a4[17];
  v12.i64[1] = a4[23];
  __n128 v13 = (__n128)xmmword_2343978C0;
  v14.i64[0] = 0xFFFFFFFFLL;
  v14.i64[1] = 0xFFFFFFFFLL;
  int8x16_t v15 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v11, v14), (int32x4_t)vceqq_s64(v12, v14));
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v15))))
  {
    uint64_t v16 = 0;
    char v17 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, v15));
    float v18 = *a7;
    float v19 = a7[1];
    float v20 = a7[2];
    float v21 = *a8;
    float v22 = a8[1];
    float v23 = a8[2];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)(v17 & 0xF));
    v24.i16[0] = vaddlv_u8(v24);
    uint64_t v25 = v24.u32[0];
    do
    {
      uint64_t v26 = 0;
      float v27 = (float *)&a4[6 * v16];
      float v28 = v27[3];
      float v29 = v27[4];
      float v31 = v27[5];
      float v30 = v27[6];
      *(float *)&unsigned int v32 = v28 - v30;
      float v33 = v27[7];
      float v34 = v27[8];
      *(float *)&unsigned int v35 = v29 - v33;
      *(float *)&unsigned int v36 = v28 + v30;
      *(float *)&unsigned int v37 = v29 + v33;
      uint64_t v38 = v16 + a2;
      float v39 = (_WORD *)(result + 16 * v38);
      v39[1] = (int)(float)(v18 * *(float *)&v32);
      _DWORD v39[3] = (int)(float)(v19 * *(float *)&v35);
      v39[5] = (int)(float)(v20 * (float)(v31 - v34));
      *float v39 = (int)(float)(v21 * *(float *)&v36);
      v39[2] = (int)(float)(v22 * *(float *)&v37);
      v39[4] = (int)(float)(v23 * (float)(v31 + v34));
      *(void *)&v68[0] = __PAIR64__(v35, v32);
      *((float *)v68 + 2) = v31 - v34;
      unint64_t v69 = __PAIR64__(v37, v36);
      *(float *)&uint64_t v70 = v31 + v34;
      do
      {
        float v40 = &v39[2 * v26];
        __int16 v41 = v40[1];
        float v42 = *(float *)(a9 + 4 * v26);
        float v43 = *(float *)(a10 + 4 * v26);
        float v44 = *((float *)&v69 + v26);
        float v45 = *((float *)v68 + v26);
        __int16 v46 = *v40;
LABEL_7:
        float v47 = v42 * (float)v41;
        if (v41) {
          BOOL v48 = v47 <= v45;
        }
        else {
          BOOL v48 = 1;
        }
        while (v46 != 0x7FFF && (float)(v43 * (float)v46) < v44)
        {
          *float v40 = ++v46;
          if (!v48)
          {
LABEL_18:
            v40[1] = --v41;
            goto LABEL_7;
          }
        }
        if (v47 > v45 && v41 != 0) {
          goto LABEL_18;
        }
        ++v26;
      }
      while (v26 != 3);
      *(_DWORD *)(result + 16 * v38 + 12) = a4[6 * v16++ + 5];
    }
    while (v16 != v25);
  }
  uint64_t v50 = 0;
  unsigned int v51 = 0;
  unint64_t v69 = -1;
  uint64_t v70 = -1;
  uint64_t v52 = result + 16 * a2;
  float v53 = a4 + 6;
  memset(v68, 0, sizeof(v68));
  do
  {
    float v54 = (void *)*((void *)v53 - 1);
    if (v54 == (void *)0xFFFFFFFFLL)
    {
      float v55 = (void *)(v52 + v50);
      *float v55 = 0;
      v55[1] = 0xFFFFFFFF00000000;
    }
    else if ((v54 & 1) == 0)
    {
      int v56 = *a3;
      *a3 += 4;
      v57.i64[0] = v54[5];
      v57.i64[1] = v54[11];
      v58.i64[0] = v54[17];
      v58.i64[1] = v54[23];
      int32x4_t v59 = (int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v57, v14), (int32x4_t)vceqq_s64(v58, v14)));
      v59.i32[0] = vaddvq_s32(v59);
      *(int8x8_t *)v59.i8 = vcnt_s8(*(int8x8_t *)v59.i8);
      v59.i16[0] = vaddlv_u8(*(uint8x8_t *)v59.i8);
      *((_DWORD *)&v69 + v51) = v56;
      *((void *)v68 + v51++) = v54;
      *(_DWORD *)(v52 + v50 + 12) = (((v56 << 11) | (2 * v59.i32[0])) - 4) | (8 * *v53);
    }
    v50 += 16;
    v53 += 12;
  }
  while (v50 != 64);
  if (v51)
  {
    uint64_t v60 = v51;
    float v61 = v68;
    float v62 = &v69;
    do
    {
      float v62 = (unint64_t *)((char *)v62 + 4);
      float v61 = (_OWORD *)((char *)v61 + 8);
      float v63 = a5;
      uint64_t v64 = result;
      float v65 = a7;
      float v66 = a8;
      _FlattenQ(v13);
      a8 = v66;
      a7 = v65;
      uint64_t result = v64;
      a5 = v63;
      --*a6;
      --v60;
    }
    while (v60);
  }
  return result;
}

BOOL RayMeshColliderCallback::processHit(uint64_t a1, float *a2, float *a3, float *a4, float *a5)
{
  float v6 = a2[13];
  float v5 = a2[14];
  float v7 = *a3;
  float v8 = a3[1];
  float v9 = a3[2];
  float v10 = *a4;
  float v11 = a4[1];
  float v12 = a4[2];
  float v13 = *a5;
  float v14 = a5[1];
  float v15 = a5[2];
  long long v92 = *(_OWORD *)a2;
  int v93 = *((_DWORD *)a2 + 4);
  char v17 = *(float **)(a1 + 32);
  uint64_t v16 = *(float **)(a1 + 40);
  float v18 = *v17;
  float v19 = v17[1];
  float v20 = v17[2];
  float v21 = v16[2];
  float v22 = v16[3];
  float v23 = (float)(v22 * v22) + -0.5;
  float v25 = *v16;
  float v24 = v16[1];
  if ((*(unsigned char *)(a1 + 56) & 2) != 0)
  {
    float v32 = (float)((float)(v11 - v8) * (float)(v15 - v9)) - (float)((float)(v12 - v9) * (float)(v14 - v8));
    float v33 = (float)((float)(v12 - v9) * (float)(v13 - v7)) - (float)((float)(v10 - v7) * (float)(v15 - v9));
    float v34 = (float)((float)(v10 - v7) * (float)(v14 - v8)) - (float)((float)(v11 - v8) * (float)(v13 - v7));
    unsigned int v35 = *(float **)(a1 + 48);
    if (v35)
    {
      float v26 = (float)((float)(v33 * v35[1]) + (float)(*v35 * v32)) + (float)(v35[2] * v34);
      float v28 = (float)((float)(v33 * v35[4]) + (float)(v35[3] * v32)) + (float)(v35[5] * v34);
      float v29 = (float)((float)(v33 * v35[7]) + (float)(v35[6] * v32)) + (float)(v35[8] * v34);
      float v36 = (float)(v18 * v19) * v20;
      BOOL v37 = v36 < 0.0;
      if (v36 < 0.0) {
        int v30 = *((_DWORD *)a2 + 14);
      }
      else {
        int v30 = *((_DWORD *)a2 + 13);
      }
      if (v37) {
        int v31 = *((_DWORD *)a2 + 13);
      }
      else {
        int v31 = *((_DWORD *)a2 + 14);
      }
    }
    else
    {
      float v38 = v32 + v32;
      float v39 = v33 + v33;
      float v40 = v34 + v34;
      float v41 = (float)((float)(v39 * v24) + (float)(v25 * v38)) + (float)(v21 * v40);
      float v26 = (float)((float)(v22 * (float)((float)(v39 * (float)-v21) + (float)(v24 * v40))) + (float)(v38 * v23))
          + (float)(v25 * v41);
      float v28 = (float)((float)(v22 * (float)((float)(v40 * (float)-v25) + (float)(v21 * v38))) + (float)(v39 * v23))
          + (float)(v24 * v41);
      float v29 = (float)((float)(v22 * (float)((float)(v38 * (float)-v24) + (float)(v25 * v39))) + (float)(v40 * v23))
          + (float)(v21 * v41);
      int v30 = *((_DWORD *)a2 + 13);
      int v31 = *((_DWORD *)a2 + 14);
    }
    float v42 = sqrtf((float)((float)(v28 * v28) + (float)(v26 * v26)) + (float)(v29 * v29));
    if (v42 > 0.0)
    {
      float v43 = 1.0 / v42;
      float v26 = v26 * v43;
      float v28 = v28 * v43;
      float v29 = v29 * v43;
    }
    if (*(unsigned char *)(a1 + 72)
      && (float)((float)((float)(v28 * *(float *)(*(void *)(a1 + 64) + 4)) + (float)(v26 * **(float **)(a1 + 64)))
               + (float)(v29 * *(float *)(*(void *)(a1 + 64) + 8))) > 0.0)
    {
      float v26 = -v26;
      float v28 = -v28;
      float v29 = -v29;
    }
    __int16 v27 = 1035;
  }
  else
  {
    float v26 = 0.0;
    __int16 v27 = 1033;
    float v28 = 0.0;
    float v29 = 0.0;
    int v30 = *((_DWORD *)a2 + 13);
    int v31 = *((_DWORD *)a2 + 14);
  }
  uint64_t v44 = *(unsigned int *)(a1 + 24);
  int v45 = *(_DWORD *)(a1 + 28);
  if (v44 != v45)
  {
    float v46 = (float)(1.0 - v6) - v5;
    float v47 = v6 * v11;
    float v48 = v5 * v13;
    float v49 = v5 * v14;
    float v50 = (float)((float)(v46 * v9) + (float)(v6 * v12)) + (float)(v5 * v15);
    float v51 = (float)((float)((float)(v46 * v7) + (float)(v6 * v10)) + v48)
        + (float)((float)((float)(v46 * v7) + (float)(v6 * v10)) + v48);
    float v52 = (float)((float)((float)(v46 * v8) + v47) + v49) + (float)((float)((float)(v46 * v8) + v47) + v49);
    float v53 = v50 + v50;
    float v54 = v17[3];
    float v55 = v17[4];
    float v56 = v17[5];
    float v57 = v17[6];
    float v58 = (float)(v57 * v57) + -0.5;
    float v59 = v57 * (float)((float)(v56 * v51) - (float)(v54 * v53));
    float v60 = v57 * (float)((float)(v54 * v52) - (float)(v55 * v51));
    float v61 = (float)((float)(v52 * v55) + (float)(v54 * v51)) + (float)(v56 * v53);
    float v62 = (float)(v57 * (float)((float)(v55 * v53) - (float)(v56 * v52))) + (float)(v51 * v58);
    float v63 = v19 * (float)((float)(v59 + (float)(v52 * v58)) + (float)(v55 * v61));
    float v64 = v20 * (float)((float)(v60 + (float)(v53 * v58)) + (float)(v56 * v61));
    float v65 = (float)(v18 * (float)(v62 + (float)(v54 * v61))) + (float)(v18 * (float)(v62 + (float)(v54 * v61)));
    float v66 = v63 + v63;
    float v67 = v64 + v64;
    float v68 = -(float)((float)((float)(v55 * v67) - (float)(v56 * v66)) * v57);
    float v69 = -(float)((float)((float)(v56 * v65) - (float)(v54 * v67)) * v57);
    float v70 = -(float)((float)((float)(v54 * v66) - (float)(v55 * v65)) * v57);
    float v71 = (float)((float)(v55 * v66) + (float)(v54 * v65)) + (float)(v56 * v67);
    float v72 = (float)((float)(v68 + (float)(v65 * v58)) + (float)(v54 * v71))
        + (float)((float)(v68 + (float)(v65 * v58)) + (float)(v54 * v71));
    float v73 = (float)((float)(v69 + (float)(v66 * v58)) + (float)(v55 * v71))
        + (float)((float)(v69 + (float)(v66 * v58)) + (float)(v55 * v71));
    float v74 = (float)((float)(v70 + (float)(v67 * v58)) + (float)(v56 * v71))
        + (float)((float)(v70 + (float)(v67 * v58)) + (float)(v56 * v71));
    float v75 = v22 * (float)((float)(v24 * v74) - (float)(v21 * v73));
    float v76 = v22 * (float)((float)(v21 * v72) - (float)(v25 * v74));
    float v77 = v22 * (float)((float)(v25 * v73) - (float)(v24 * v72));
    float v78 = (float)((float)(v24 * v73) + (float)(v25 * v72)) + (float)(v21 * v74);
    float v79 = v75 + (float)(v72 * v23);
    float v80 = v76 + (float)(v73 * v23);
    float v81 = v77 + (float)(v74 * v23);
    float v82 = a2[12];
    float v83 = v79 + (float)(v25 * v78);
    float v84 = v80 + (float)(v24 * v78);
    float v85 = v16[4];
    float v86 = v16[5];
    float v87 = v16[6];
    float v88 = *(float *)(a1 + 76);
    uint64_t v89 = *(void *)(a1 + 16);
    *(_DWORD *)(a1 + 24) = v44 + 1;
    uint64_t v90 = v89 + (v44 << 6);
    *(_OWORD *)uint64_t v90 = v92;
    *(_DWORD *)(v90 + 16) = v93;
    *(_WORD *)(v90 + 20) = v27;
    *(float *)(v90 + 24) = v85 + v83;
    *(float *)(v90 + 28) = v86 + v84;
    *(float *)(v90 + 32) = v87 + (float)(v81 + (float)(v21 * v78));
    *(float *)(v90 + 36) = v26;
    *(float *)(v90 + 40) = v28;
    *(float *)(v90 + 44) = v29;
    *(float *)(v90 + 48) = v82 * v88;
    *(_DWORD *)(v90 + 52) = v30;
    *(_DWORD *)(v90 + 56) = v31;
  }
  return v44 != v45;
}

void RayMeshColliderCallback::~RayMeshColliderCallback(RayMeshColliderCallback *this)
{
}

uint64_t RayRTreeCallback<0,false>::RayRTreeCallback(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, float a9, float a10)
{
  *(void *)uint64_t result = &unk_26E7292A0;
  *(void *)(result + 8) = &unk_26E7292D0;
  *(void *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = a3;
  *(void *)(result + 32) = a4;
  *(void *)(result + 40) = a5;
  *(void *)(result + 48) = 0;
  *(void *)&long long v10 = *(void *)a6;
  *(void *)(result + 56) = *(void *)a6;
  unsigned int v11 = *(_DWORD *)(a6 + 8);
  *(_DWORD *)(result + 64) = v11;
  *(void *)&long long v12 = *(void *)a7;
  *(void *)(result + 68) = *(void *)a7;
  unsigned int v13 = *(_DWORD *)(a7 + 8);
  *(_DWORD *)(result + 76) = v13;
  *(unsigned char *)(result + 80) = a8;
  *(float *)(result + 84) = a9;
  *(float *)(result + 88) = a10;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = -1;
  *(_WORD *)(result + 116) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 120) = 0;
  *(void *)(result + 144) = 2139095039;
  *(_DWORD *)(result + 152) = 0;
  *(unsigned char *)(result + 209) = *(_DWORD *)(a2 + 8) == 1;
  *((void *)&v10 + 1) = v11;
  *((void *)&v12 + 1) = v13;
  *(unsigned char *)(result + 208) = 0;
  *(_OWORD *)(result + 240) = v10;
  *(_OWORD *)(result + 256) = v12;
  return result;
}

uint64_t RayRTreeCallback<0,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3, float *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v33 = 0uLL;
  int v34 = -1;
  __int16 v35 = 0;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  *(void *)float v38 = 2139095039;
  *(_DWORD *)&v38[8] = 0;
  if (a2)
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
    uint64_t v8 = a1 + 96;
    unint64_t v29 = a2;
    uint64_t v30 = a3;
    while (2)
    {
      char v31 = v7;
      unint64_t v9 = *(unsigned int *)(a3 + 4 * v6);
      unint64_t v10 = v9 >> 5;
      uint64_t v11 = ((v9 >> 1) & 0xF) + 1;
      uint64_t v12 = 3 * (v9 >> 5);
      uint64_t v13 = 4 * v12;
      uint64_t v14 = 2 * v12;
      do
      {
        uint64_t v15 = *(void *)(a1 + 32);
        if (*(_DWORD *)(a1 + 24))
        {
          uint64_t v16 = v15 + v14;
          unsigned int v17 = *(unsigned __int16 *)(v15 + v14);
          unsigned int v18 = *(unsigned __int16 *)(v16 + 2);
          unsigned int v19 = *(unsigned __int16 *)(v16 + 4);
        }
        else
        {
          uint64_t v20 = v15 + v13;
          unsigned int v17 = *(_DWORD *)(v15 + v13);
          unsigned int v18 = *(_DWORD *)(v20 + 4);
          unsigned int v19 = *(_DWORD *)(v20 + 8);
        }
        uint64_t v21 = *(void *)(a1 + 40);
        float v22 = (void *)(v21 + 12 * v17);
        float v23 = (void *)(v21 + 12 * v18);
        float v24 = (void *)(v21 + 12 * v19);
        v39[0] = v17;
        v39[1] = v18;
        v39[2] = v19;
        int v34 = v10;
        __int16 v35 = 1;
        if (*(unsigned char *)(a1 + 209))
        {
          float v25 = *(float *)v38;
          if (*(float *)v38 < *(float *)(a1 + 144))
          {
            *(_OWORD *)uint64_t v8 = v33;
            *(_DWORD *)(v8 + 16) = v34;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v36;
            *(void *)(a1 + 136) = v37;
            *(float *)(a1 + 144) = v25;
            *(void *)(a1 + 148) = *(void *)&v38[4];
            if (v25 >= *a4) {
              float v25 = *a4;
            }
            *a4 = v25;
            *(void *)(a1 + 160) = *v22;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(v21 + 12 * v17 + 8);
            *(void *)(a1 + 172) = *v23;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(v21 + 12 * v18 + 8);
            *(void *)(a1 + 184) = *v24;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(v21 + 12 * v19 + 8);
            *(_DWORD *)(a1 + 196) = v17;
            *(_DWORD *)(a1 + 200) = v18;
            *(_DWORD *)(a1 + 204) = v19;
            *(unsigned char *)(a1 + 208) = 1;
          }
        }
        else
        {
          float v32 = *a4;
          if (!(***(unsigned int (****)(void, long long *, void *, void *, void *, float *, _DWORD *))(a1 + 16))(*(void *)(a1 + 16), &v33, v22, v23, v24, &v32, v39))goto LABEL_19; {
          float v26 = v32;
          }
          if (v32 < *a4)
          {
            *a4 = v32;
            *(float *)(a1 + 88) = v26;
          }
        }
        if (!*(_DWORD *)(*(void *)(a1 + 16) + 8))
        {
LABEL_19:
          char v27 = v31;
          return v27 & 1;
        }
        LODWORD(v10) = v10 + 1;
        v13 += 12;
        v14 += 6;
        --v11;
      }
      while (v11);
      ++v6;
      a3 = v30;
      BOOL v7 = v6 >= v29;
      if (v6 != v29) {
        continue;
      }
      break;
    }
  }
  char v27 = 1;
  return v27 & 1;
}

void RayRTreeCallback<0,false>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<0,false>::~RayRTreeCallback(a1);
  JUMPOUT(0x237DBCBD0);
}

BOOL RayRTreeCallback<0,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  long long v30 = 0uLL;
  int v31 = -1;
  __int16 v32 = 0;
  uint64_t v34 = 0;
  long long v33 = 0uLL;
  *(void *)__int16 v35 = 2139095039;
  *(_DWORD *)&unsigned char v35[8] = 0;
  if (a2)
  {
    unint64_t v4 = 0;
    BOOL v5 = 0;
    uint64_t v6 = a1 + 96;
    float v7 = 0.0;
    unint64_t v27 = a2;
    uint64_t v28 = a3;
LABEL_3:
    unint64_t v8 = *(unsigned int *)(a3 + 4 * v4);
    unint64_t v9 = v8 >> 5;
    uint64_t v10 = ((v8 >> 1) & 0xF) + 1;
    uint64_t v11 = 3 * (v8 >> 5);
    uint64_t v12 = 4 * v11;
    uint64_t v13 = 2 * v11;
    while (1)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        uint64_t v15 = v14 + v13;
        unsigned int v16 = *(unsigned __int16 *)(v14 + v13);
        unsigned int v17 = *(unsigned __int16 *)(v15 + 2);
        unsigned int v18 = *(unsigned __int16 *)(v15 + 4);
      }
      else
      {
        uint64_t v19 = v14 + v12;
        unsigned int v16 = *(_DWORD *)(v14 + v12);
        unsigned int v17 = *(_DWORD *)(v19 + 4);
        unsigned int v18 = *(_DWORD *)(v19 + 8);
      }
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = (void *)(v20 + 12 * v16);
      float v22 = (void *)(v20 + 12 * v17);
      float v23 = (void *)(v20 + 12 * v18);
      v36[0] = v16;
      v36[1] = v17;
      v36[2] = v18;
      int v31 = v9;
      __int16 v32 = 1;
      if (*(unsigned char *)(a1 + 209))
      {
        float v24 = *(float *)v35;
        if (*(float *)v35 < *(float *)(a1 + 144))
        {
          *(_OWORD *)uint64_t v6 = v30;
          *(_DWORD *)(v6 + 16) = v31;
          *(_WORD *)(a1 + 116) = 1;
          *(_OWORD *)(a1 + 120) = v33;
          *(void *)(a1 + 136) = v34;
          *(float *)(a1 + 144) = v24;
          *(void *)(a1 + 148) = *(void *)&v35[4];
          if (v24 < v7) {
            float v7 = v24;
          }
          *(void *)(a1 + 160) = *v21;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(v20 + 12 * v16 + 8);
          *(void *)(a1 + 172) = *v22;
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(v20 + 12 * v17 + 8);
          *(void *)(a1 + 184) = *v23;
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(v20 + 12 * v18 + 8);
          *(_DWORD *)(a1 + 196) = v16;
          *(_DWORD *)(a1 + 200) = v17;
          *(_DWORD *)(a1 + 204) = v18;
          *(unsigned char *)(a1 + 208) = 1;
        }
      }
      else
      {
        float v29 = v7;
        if (!(***(unsigned int (****)(void, long long *, void *, void *, void *, float *, _DWORD *))(a1 + 16))(*(void *)(a1 + 16), &v30, v21, v22, v23, &v29, v36))return v5; {
        float v25 = v29;
        }
        if (v29 < v7)
        {
          *(float *)(a1 + 88) = v29;
          float v7 = v25;
        }
      }
      if (!*(_DWORD *)(*(void *)(a1 + 16) + 8)) {
        break;
      }
      LODWORD(v9) = v9 + 1;
      v12 += 12;
      v13 += 6;
      if (!--v10)
      {
        ++v4;
        a3 = v28;
        BOOL v5 = v4 >= v27;
        if (v4 != v27) {
          goto LABEL_3;
        }
        return 1;
      }
    }
  }
  else
  {
    return 1;
  }
  return v5;
}

BOOL non-virtual thunk to'RayRTreeCallback<0,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return RayRTreeCallback<0,false>::processResults(a1 - 8, a2, a3);
}

uint64_t non-virtual thunk to'RayRTreeCallback<0,false>::~RayRTreeCallback(uint64_t a1)
{
  return RayRTreeCallback<0,false>::~RayRTreeCallback(a1 - 8);
}

void non-virtual thunk to'RayRTreeCallback<0,false>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<0,false>::~RayRTreeCallback(a1 - 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RayRTreeCallback<0,false>::~RayRTreeCallback(uint64_t a1)
{
  *(void *)a1 = &unk_26E7292A0;
  *(void *)(a1 + 8) = &unk_26E7292D0;
  if (*(unsigned char *)(a1 + 208)) {
    (***(void (****)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(void *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  }
  return a1;
}

float RayRTreeCallback<1,false>::RayRTreeCallback(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, float a9, float a10, uint64_t a11)
{
  *(void *)a1 = &unk_26E729358;
  *(void *)(a1 + 8) = &unk_26E729388;
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  *(void *)(a1 + 48) = a11;
  *(void *)&long long v11 = *(void *)a6;
  *(void *)(a1 + 56) = *(void *)a6;
  unsigned int v12 = *(_DWORD *)(a6 + 8);
  *(_DWORD *)(a1 + 64) = v12;
  *(void *)&long long v13 = *(void *)a7;
  *(void *)(a1 + 68) = *(void *)a7;
  unsigned int v14 = *(_DWORD *)(a7 + 8);
  *(_DWORD *)(a1 + 76) = v14;
  *(unsigned char *)(a1 + 80) = a8;
  *(float *)(a1 + 84) = a9;
  *(float *)(a1 + 88) = a10;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = -1;
  *(_WORD *)(a1 + 116) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 144) = 2139095039;
  *(_DWORD *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 209) = *(_DWORD *)(a2 + 8) == 1;
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)&long long v15 = *(void *)a11;
  *((void *)&v15 + 1) = *(unsigned int *)(a11 + 8);
  *((void *)&v11 + 1) = v12;
  *(_OWORD *)(a1 + 224) = v15;
  *(_OWORD *)(a1 + 240) = v11;
  *((void *)&v13 + 1) = v14;
  *(_OWORD *)(a1 + 256) = v13;
  return *(float *)&v15;
}

uint64_t RayRTreeCallback<1,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3, float *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  long long v33 = 0uLL;
  int v34 = -1;
  __int16 v35 = 0;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  *(void *)float v38 = 2139095039;
  *(_DWORD *)&v38[8] = 0;
  if (a2)
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
    uint64_t v8 = a1 + 96;
    unint64_t v29 = a2;
    uint64_t v30 = a3;
    while (2)
    {
      char v31 = v7;
      unint64_t v9 = *(unsigned int *)(a3 + 4 * v6);
      unint64_t v10 = v9 >> 5;
      uint64_t v11 = ((v9 >> 1) & 0xF) + 1;
      uint64_t v12 = 3 * (v9 >> 5);
      uint64_t v13 = 4 * v12;
      uint64_t v14 = 2 * v12;
      do
      {
        uint64_t v15 = *(void *)(a1 + 32);
        if (*(_DWORD *)(a1 + 24))
        {
          uint64_t v16 = v15 + v14;
          unsigned int v17 = *(unsigned __int16 *)(v15 + v14);
          unsigned int v18 = *(unsigned __int16 *)(v16 + 2);
          unsigned int v19 = *(unsigned __int16 *)(v16 + 4);
        }
        else
        {
          uint64_t v20 = v15 + v13;
          unsigned int v17 = *(_DWORD *)(v15 + v13);
          unsigned int v18 = *(_DWORD *)(v20 + 4);
          unsigned int v19 = *(_DWORD *)(v20 + 8);
        }
        uint64_t v21 = *(void *)(a1 + 40);
        float v22 = (void *)(v21 + 12 * v17);
        float v23 = (void *)(v21 + 12 * v18);
        float v24 = (void *)(v21 + 12 * v19);
        v39[0] = v17;
        v39[1] = v18;
        v39[2] = v19;
        int v34 = v10;
        __int16 v35 = 1;
        if (*(unsigned char *)(a1 + 209))
        {
          float v25 = *(float *)v38;
          if (*(float *)v38 < *(float *)(a1 + 144))
          {
            *(_OWORD *)uint64_t v8 = v33;
            *(_DWORD *)(v8 + 16) = v34;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v36;
            *(void *)(a1 + 136) = v37;
            *(float *)(a1 + 144) = v25;
            *(void *)(a1 + 148) = *(void *)&v38[4];
            if (v25 >= *a4) {
              float v25 = *a4;
            }
            *a4 = v25;
            *(void *)(a1 + 160) = *v22;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(v21 + 12 * v17 + 8);
            *(void *)(a1 + 172) = *v23;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(v21 + 12 * v18 + 8);
            *(void *)(a1 + 184) = *v24;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(v21 + 12 * v19 + 8);
            *(_DWORD *)(a1 + 196) = v17;
            *(_DWORD *)(a1 + 200) = v18;
            *(_DWORD *)(a1 + 204) = v19;
            *(unsigned char *)(a1 + 208) = 1;
          }
        }
        else
        {
          float v32 = *a4;
          if (!(***(unsigned int (****)(void, long long *, void *, void *, void *, float *, _DWORD *))(a1 + 16))(*(void *)(a1 + 16), &v33, v22, v23, v24, &v32, v39))goto LABEL_19; {
          float v26 = v32;
          }
          if (v32 < *a4)
          {
            *a4 = v32;
            *(float *)(a1 + 88) = v26;
          }
        }
        if (!*(_DWORD *)(*(void *)(a1 + 16) + 8))
        {
LABEL_19:
          char v27 = v31;
          return v27 & 1;
        }
        LODWORD(v10) = v10 + 1;
        v13 += 12;
        v14 += 6;
        --v11;
      }
      while (v11);
      ++v6;
      a3 = v30;
      BOOL v7 = v6 >= v29;
      if (v6 != v29) {
        continue;
      }
      break;
    }
  }
  char v27 = 1;
  return v27 & 1;
}

void RayRTreeCallback<1,false>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<1,false>::~RayRTreeCallback(a1);
  JUMPOUT(0x237DBCBD0);
}

BOOL RayRTreeCallback<1,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  long long v30 = 0uLL;
  int v31 = -1;
  __int16 v32 = 0;
  uint64_t v34 = 0;
  long long v33 = 0uLL;
  *(void *)__int16 v35 = 2139095039;
  *(_DWORD *)&unsigned char v35[8] = 0;
  if (a2)
  {
    unint64_t v4 = 0;
    BOOL v5 = 0;
    uint64_t v6 = a1 + 96;
    float v7 = 0.0;
    unint64_t v27 = a2;
    uint64_t v28 = a3;
LABEL_3:
    unint64_t v8 = *(unsigned int *)(a3 + 4 * v4);
    unint64_t v9 = v8 >> 5;
    uint64_t v10 = ((v8 >> 1) & 0xF) + 1;
    uint64_t v11 = 3 * (v8 >> 5);
    uint64_t v12 = 4 * v11;
    uint64_t v13 = 2 * v11;
    while (1)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        uint64_t v15 = v14 + v13;
        unsigned int v16 = *(unsigned __int16 *)(v14 + v13);
        unsigned int v17 = *(unsigned __int16 *)(v15 + 2);
        unsigned int v18 = *(unsigned __int16 *)(v15 + 4);
      }
      else
      {
        uint64_t v19 = v14 + v12;
        unsigned int v16 = *(_DWORD *)(v14 + v12);
        unsigned int v17 = *(_DWORD *)(v19 + 4);
        unsigned int v18 = *(_DWORD *)(v19 + 8);
      }
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = (void *)(v20 + 12 * v16);
      float v22 = (void *)(v20 + 12 * v17);
      float v23 = (void *)(v20 + 12 * v18);
      v36[0] = v16;
      v36[1] = v17;
      v36[2] = v18;
      int v31 = v9;
      __int16 v32 = 1;
      if (*(unsigned char *)(a1 + 209))
      {
        float v24 = *(float *)v35;
        if (*(float *)v35 < *(float *)(a1 + 144))
        {
          *(_OWORD *)uint64_t v6 = v30;
          *(_DWORD *)(v6 + 16) = v31;
          *(_WORD *)(a1 + 116) = 1;
          *(_OWORD *)(a1 + 120) = v33;
          *(void *)(a1 + 136) = v34;
          *(float *)(a1 + 144) = v24;
          *(void *)(a1 + 148) = *(void *)&v35[4];
          if (v24 < v7) {
            float v7 = v24;
          }
          *(void *)(a1 + 160) = *v21;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(v20 + 12 * v16 + 8);
          *(void *)(a1 + 172) = *v22;
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(v20 + 12 * v17 + 8);
          *(void *)(a1 + 184) = *v23;
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(v20 + 12 * v18 + 8);
          *(_DWORD *)(a1 + 196) = v16;
          *(_DWORD *)(a1 + 200) = v17;
          *(_DWORD *)(a1 + 204) = v18;
          *(unsigned char *)(a1 + 208) = 1;
        }
      }
      else
      {
        float v29 = v7;
        if (!(***(unsigned int (****)(void, long long *, void *, void *, void *, float *, _DWORD *))(a1 + 16))(*(void *)(a1 + 16), &v30, v21, v22, v23, &v29, v36))return v5; {
        float v25 = v29;
        }
        if (v29 < v7)
        {
          *(float *)(a1 + 88) = v29;
          float v7 = v25;
        }
      }
      if (!*(_DWORD *)(*(void *)(a1 + 16) + 8)) {
        break;
      }
      LODWORD(v9) = v9 + 1;
      v12 += 12;
      v13 += 6;
      if (!--v10)
      {
        ++v4;
        a3 = v28;
        BOOL v5 = v4 >= v27;
        if (v4 != v27) {
          goto LABEL_3;
        }
        return 1;
      }
    }
  }
  else
  {
    return 1;
  }
  return v5;
}

BOOL non-virtual thunk to'RayRTreeCallback<1,false>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return RayRTreeCallback<1,false>::processResults(a1 - 8, a2, a3);
}

uint64_t non-virtual thunk to'RayRTreeCallback<1,false>::~RayRTreeCallback(uint64_t a1)
{
  return RayRTreeCallback<1,false>::~RayRTreeCallback(a1 - 8);
}

void non-virtual thunk to'RayRTreeCallback<1,false>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<1,false>::~RayRTreeCallback(a1 - 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RayRTreeCallback<1,false>::~RayRTreeCallback(uint64_t a1)
{
  *(void *)a1 = &unk_26E729358;
  *(void *)(a1 + 8) = &unk_26E729388;
  if (*(unsigned char *)(a1 + 208)) {
    (***(void (****)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(void *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  }
  return a1;
}

BOOL RayRTreeCallback<0,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3, float *a4)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  long long v76 = 0uLL;
  int v77 = -1;
  __int16 v78 = 0;
  uint64_t v80 = 0;
  long long v79 = 0uLL;
  if (!a2) {
    return 1;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  BOOL v8 = 0;
  unint64_t v9 = a2;
  uint64_t v72 = a1 + 96;
  unint64_t v73 = a2;
  do
  {
    unint64_t v10 = *(unsigned int *)(v6 + 4 * v7);
    unint64_t v11 = v10 >> 5;
    uint64_t v12 = ((v10 >> 1) & 0xF) + 1;
    uint64_t v13 = 3 * (v10 >> 5);
    uint64_t v14 = 4 * v13;
    uint64_t v15 = 2 * v13;
    do
    {
      uint64_t v16 = *(void *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        uint64_t v17 = v16 + v15;
        unsigned int v18 = *(unsigned __int16 *)(v16 + v15);
        unsigned int v19 = *(unsigned __int16 *)(v17 + 2);
        unsigned int v20 = *(unsigned __int16 *)(v17 + 4);
      }
      else
      {
        uint64_t v21 = v16 + v14;
        unsigned int v18 = *(_DWORD *)(v16 + v14);
        unsigned int v19 = *(_DWORD *)(v21 + 4);
        unsigned int v20 = *(_DWORD *)(v21 + 8);
      }
      uint64_t v22 = *(void *)(a1 + 40);
      float v23 = (float *)(v22 + 12 * v18);
      float v24 = (float *)(v22 + 12 * v19);
      float v25 = (float *)(v22 + 12 * v20);
      unsigned int v83 = v18;
      unsigned int v84 = v19;
      unsigned int v85 = v20;
      float v26 = *(float *)(a1 + 84);
      float v28 = *v23;
      float v27 = v23[1];
      float v29 = *v24 - *v23;
      float v30 = v24[1] - v27;
      float v31 = v23[2];
      float v32 = v24[2] - v31;
      float v33 = *v25 - *v23;
      float v34 = v25[1] - v27;
      float v35 = v25[2] - v31;
      float v37 = *(float *)(a1 + 72);
      float v36 = *(float *)(a1 + 76);
      float v38 = *(float *)(a1 + 68);
      float v39 = (float)(v37 * v35) - (float)(v36 * v34);
      float v40 = (float)(v36 * v33) - (float)(v38 * v35);
      float v41 = (float)(v38 * v34) - (float)(v37 * v33);
      float v42 = (float)((float)(v30 * v40) + (float)(v29 * v39)) + (float)(v32 * v41);
      if (*(unsigned char *)(a1 + 80))
      {
        if (fabsf(v42) < 1.4211e-14) {
          goto LABEL_46;
        }
        float v43 = *(float *)(a1 + 56) - v28;
        float v44 = 1.0 / v42;
        float v45 = *(float *)(a1 + 60) - v27;
        float v46 = *(float *)(a1 + 64) - v31;
        float v47 = v44 * (float)((float)((float)(v40 * v45) + (float)(v43 * v39)) + (float)(v46 * v41));
        float v48 = -v26;
        float v49 = v26 + 1.0;
        BOOL v50 = v47 >= (float)-v26 && v47 <= v49;
        float v51 = (float)(v45 * v32) - (float)(v46 * v30);
        float v52 = (float)(v46 * v29) - (float)(v43 * v32);
        float v53 = (float)(v43 * v30) - (float)(v45 * v29);
        float v54 = v44 * (float)((float)((float)(v37 * v52) + (float)(v38 * v51)) + (float)(v36 * v53));
        BOOL v55 = !v50 || v54 < v48;
        if (v55 || (float)(v47 + v54) > v49) {
          goto LABEL_46;
        }
        float v57 = v44 * (float)((float)((float)(v34 * v52) + (float)(v33 * v51)) + (float)(v35 * v53));
        float v81 = v57;
        v82[0] = v47;
      }
      else
      {
        if (v42 < 1.4211e-14) {
          goto LABEL_46;
        }
        float v58 = *(float *)(a1 + 56) - v28;
        float v59 = *(float *)(a1 + 60) - v27;
        float v60 = *(float *)(a1 + 64) - v31;
        float v61 = (float)((float)(v40 * v59) + (float)(v58 * v39)) + (float)(v60 * v41);
        float v62 = -(float)(v26 * v42);
        float v63 = v42 + (float)(v26 * v42);
        BOOL v64 = v61 >= v62 && v61 <= v63;
        float v65 = (float)(v59 * v32) - (float)(v60 * v30);
        float v66 = (float)(v60 * v29) - (float)(v58 * v32);
        float v67 = (float)(v58 * v30) - (float)(v59 * v29);
        float v68 = (float)((float)(v37 * v66) + (float)(v38 * v65)) + (float)(v36 * v67);
        BOOL v69 = !v64 || v68 < v62;
        if (v69 || (float)(v61 + v68) > v63) {
          goto LABEL_46;
        }
        float v57 = (float)(1.0 / v42) * (float)((float)((float)(v34 * v66) + (float)(v33 * v65)) + (float)(v35 * v67));
        float v81 = v57;
        v82[0] = (float)(1.0 / v42) * v61;
        float v54 = (float)(1.0 / v42) * v68;
      }
      v82[1] = v54;
      if (v57 >= 0.0 && v57 <= *(float *)(a1 + 88))
      {
        int v77 = v11;
        __int16 v78 = 1;
        if (*(unsigned char *)(a1 + 209))
        {
          if (v57 < *(float *)(a1 + 144))
          {
            *(_OWORD *)uint64_t v72 = v76;
            *(_DWORD *)(v72 + 16) = v77;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v79;
            *(void *)(a1 + 136) = v80;
            *(float *)(a1 + 144) = v57;
            *(void *)(a1 + 148) = *(void *)v82;
            if (v57 >= *a4) {
              float v57 = *a4;
            }
            *a4 = v57;
            *(void *)(a1 + 160) = *(void *)v23;
            *(float *)(a1 + 168) = v23[2];
            *(void *)(a1 + 172) = *(void *)v24;
            *(float *)(a1 + 180) = v24[2];
            *(void *)(a1 + 184) = *(void *)v25;
            *(float *)(a1 + 192) = v25[2];
            *(_DWORD *)(a1 + 196) = v18;
            *(_DWORD *)(a1 + 200) = v19;
            *(_DWORD *)(a1 + 204) = v20;
            *(unsigned char *)(a1 + 208) = 1;
          }
        }
        else
        {
          float v75 = *a4;
          if (!(***(unsigned int (****)(void, long long *))(a1 + 16))(*(void *)(a1 + 16), &v76)) {
            return v8;
          }
          if (v75 < *a4)
          {
            *a4 = v75;
            *(float *)(a1 + 88) = v75;
          }
          unint64_t v9 = v73;
          uint64_t v6 = a3;
        }
        if (!*(_DWORD *)(*(void *)(a1 + 16) + 8)) {
          return v8;
        }
      }
LABEL_46:
      LODWORD(v11) = v11 + 1;
      v14 += 12;
      v15 += 6;
      --v12;
    }
    while (v12);
    BOOL v8 = ++v7 >= v9;
  }
  while (v7 != v9);
  return 1;
}

void RayRTreeCallback<0,true>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<0,true>::~RayRTreeCallback(a1);
  JUMPOUT(0x237DBCBD0);
}

BOOL RayRTreeCallback<0,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  long long v73 = 0uLL;
  int v74 = -1;
  __int16 v75 = 0;
  uint64_t v77 = 0;
  long long v76 = 0uLL;
  if (a2)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v71 = a1 + 96;
    float v7 = 0.0;
    unint64_t v8 = a2;
LABEL_3:
    unint64_t v9 = *(unsigned int *)(a3 + 4 * v5);
    unint64_t v10 = v9 >> 5;
    uint64_t v11 = ((v9 >> 1) & 0xF) + 1;
    uint64_t v12 = 3 * (v9 >> 5);
    uint64_t v13 = 4 * v12;
    uint64_t v14 = 2 * v12;
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        uint64_t v16 = v15 + v14;
        unsigned int v17 = *(unsigned __int16 *)(v15 + v14);
        unsigned int v18 = *(unsigned __int16 *)(v16 + 2);
        unsigned int v19 = *(unsigned __int16 *)(v16 + 4);
      }
      else
      {
        uint64_t v20 = v15 + v13;
        unsigned int v17 = *(_DWORD *)(v15 + v13);
        unsigned int v18 = *(_DWORD *)(v20 + 4);
        unsigned int v19 = *(_DWORD *)(v20 + 8);
      }
      uint64_t v21 = *(void *)(a1 + 40);
      uint64_t v22 = (float *)(v21 + 12 * v17);
      float v23 = (float *)(v21 + 12 * v18);
      float v24 = (float *)(v21 + 12 * v19);
      unsigned int v80 = v17;
      unsigned int v81 = v18;
      unsigned int v82 = v19;
      float v25 = *(float *)(a1 + 84);
      float v27 = *v22;
      float v26 = v22[1];
      float v28 = *v23 - *v22;
      float v29 = v23[1] - v26;
      float v30 = v22[2];
      float v31 = v23[2] - v30;
      float v32 = *v24 - *v22;
      float v33 = v24[1] - v26;
      float v34 = v24[2] - v30;
      float v36 = *(float *)(a1 + 72);
      float v35 = *(float *)(a1 + 76);
      float v37 = *(float *)(a1 + 68);
      float v38 = (float)(v36 * v34) - (float)(v35 * v33);
      float v39 = (float)(v35 * v32) - (float)(v37 * v34);
      float v40 = (float)(v37 * v33) - (float)(v36 * v32);
      float v41 = (float)((float)(v29 * v39) + (float)(v28 * v38)) + (float)(v31 * v40);
      if (*(unsigned char *)(a1 + 80))
      {
        if (fabsf(v41) >= 1.4211e-14)
        {
          float v42 = *(float *)(a1 + 56) - v27;
          float v43 = 1.0 / v41;
          float v44 = *(float *)(a1 + 60) - v26;
          float v45 = *(float *)(a1 + 64) - v30;
          float v46 = v43 * (float)((float)((float)(v39 * v44) + (float)(v42 * v38)) + (float)(v45 * v40));
          float v47 = -v25;
          float v48 = v25 + 1.0;
          BOOL v49 = v46 >= (float)-v25 && v46 <= v48;
          float v50 = (float)(v44 * v31) - (float)(v45 * v29);
          float v51 = (float)(v45 * v28) - (float)(v42 * v31);
          float v52 = (float)(v42 * v29) - (float)(v44 * v28);
          float v53 = v43 * (float)((float)((float)(v36 * v51) + (float)(v37 * v50)) + (float)(v35 * v52));
          BOOL v54 = !v49 || v53 < v47;
          if (!v54 && (float)(v46 + v53) <= v48)
          {
            float v56 = v43 * (float)((float)((float)(v33 * v51) + (float)(v32 * v50)) + (float)(v34 * v52));
            float v78 = v56;
            v79[0] = v46;
LABEL_34:
            v79[1] = v53;
            if (v56 >= 0.0 && v56 <= *(float *)(a1 + 88))
            {
              int v74 = v10;
              __int16 v75 = 1;
              if (*(unsigned char *)(a1 + 209))
              {
                if (v56 < *(float *)(a1 + 144))
                {
                  *(_OWORD *)uint64_t v71 = v73;
                  *(_DWORD *)(v71 + 16) = v74;
                  *(_WORD *)(a1 + 116) = 1;
                  *(_OWORD *)(a1 + 120) = v76;
                  *(void *)(a1 + 136) = v77;
                  *(float *)(a1 + 144) = v56;
                  *(void *)(a1 + 148) = *(void *)v79;
                  if (v56 < v7) {
                    float v7 = v56;
                  }
                  *(void *)(a1 + 160) = *(void *)v22;
                  *(float *)(a1 + 168) = v22[2];
                  *(void *)(a1 + 172) = *(void *)v23;
                  *(float *)(a1 + 180) = v23[2];
                  *(void *)(a1 + 184) = *(void *)v24;
                  *(float *)(a1 + 192) = v24[2];
                  *(_DWORD *)(a1 + 196) = v17;
                  *(_DWORD *)(a1 + 200) = v18;
                  *(_DWORD *)(a1 + 204) = v19;
                  *(unsigned char *)(a1 + 208) = 1;
                }
              }
              else
              {
                BOOL v72 = v6;
                if (!(***(unsigned int (****)(void, long long *))(a1 + 16))(*(void *)(a1 + 16), &v73))
                {
                  LOBYTE(v6) = v72;
                  return v6;
                }
                BOOL v6 = v72;
              }
              if (!*(_DWORD *)(*(void *)(a1 + 16) + 8)) {
                return v6;
              }
            }
          }
        }
      }
      else if (v41 >= 1.4211e-14)
      {
        float v57 = *(float *)(a1 + 56) - v27;
        float v58 = *(float *)(a1 + 60) - v26;
        float v59 = *(float *)(a1 + 64) - v30;
        float v60 = (float)((float)(v39 * v58) + (float)(v57 * v38)) + (float)(v59 * v40);
        float v61 = -(float)(v25 * v41);
        float v62 = v41 + (float)(v25 * v41);
        BOOL v63 = v60 >= v61 && v60 <= v62;
        float v64 = (float)(v58 * v31) - (float)(v59 * v29);
        float v65 = (float)(v59 * v28) - (float)(v57 * v31);
        float v66 = (float)(v57 * v29) - (float)(v58 * v28);
        float v67 = (float)((float)(v36 * v65) + (float)(v37 * v64)) + (float)(v35 * v66);
        BOOL v68 = !v63 || v67 < v61;
        if (!v68 && (float)(v60 + v67) <= v62)
        {
          float v56 = (float)(1.0 / v41) * (float)((float)((float)(v33 * v65) + (float)(v32 * v64)) + (float)(v34 * v66));
          float v78 = v56;
          v79[0] = (float)(1.0 / v41) * v60;
          float v53 = (float)(1.0 / v41) * v67;
          goto LABEL_34;
        }
      }
      LODWORD(v10) = v10 + 1;
      v13 += 12;
      v14 += 6;
      if (!--v11)
      {
        BOOL v6 = ++v5 >= v8;
        if (v5 != v8) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  LOBYTE(v6) = 1;
  return v6;
}

BOOL non-virtual thunk to'RayRTreeCallback<0,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return RayRTreeCallback<0,true>::processResults(a1 - 8, a2, a3);
}

uint64_t non-virtual thunk to'RayRTreeCallback<0,true>::~RayRTreeCallback(uint64_t a1)
{
  return RayRTreeCallback<0,true>::~RayRTreeCallback(a1 - 8);
}

void non-virtual thunk to'RayRTreeCallback<0,true>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<0,true>::~RayRTreeCallback(a1 - 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RayRTreeCallback<0,true>::~RayRTreeCallback(uint64_t a1)
{
  *(void *)a1 = &unk_26E7293F0;
  *(void *)(a1 + 8) = &unk_26E729420;
  if (*(unsigned char *)(a1 + 208)) {
    (***(void (****)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(void *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  }
  return a1;
}

BOOL RayRTreeCallback<1,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3, float *a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  long long v48 = 0uLL;
  int v49 = -1;
  __int16 v50 = 0;
  uint64_t v52 = 0;
  long long v51 = 0uLL;
  if (a2)
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
    uint64_t v8 = a1 + 96;
    float32x4_t v9 = (float32x4_t)xmmword_234422B90;
    int8x16_t v10 = (int8x16_t)xmmword_2343E1E60;
    int8x16_t v11 = (int8x16_t)xmmword_2343679C0;
    unint64_t v45 = a2;
    uint64_t v46 = a3;
LABEL_3:
    uint64_t v12 = 0;
    unint64_t v13 = *(unsigned int *)(a3 + 4 * v6);
    unint64_t v14 = v13 >> 5;
    uint64_t v15 = ((v13 >> 1) & 0xF) + 1;
    while (1)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        unsigned int v17 = (unsigned __int16 *)(v16 + 6 * (v12 + v14));
        unsigned int v18 = *v17;
        unsigned int v19 = v17[1];
        unsigned int v20 = v17[2];
      }
      else
      {
        uint64_t v21 = (unsigned int *)(v16 + 12 * (v12 + v14));
        unsigned int v18 = *v21;
        unsigned int v19 = v21[1];
        unsigned int v20 = v21[2];
      }
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = v22 + 12 * v18;
      uint64_t v24 = v22 + 12 * v19;
      uint64_t v25 = v22 + 12 * v20;
      unsigned int v55 = v18;
      unsigned int v56 = v19;
      unsigned int v57 = v20;
      v26.i64[0] = *(void *)v23;
      v26.i64[1] = *(unsigned int *)(v23 + 8);
      v27.i64[0] = *(void *)v24;
      v27.i64[1] = *(unsigned int *)(v24 + 8);
      v28.i64[0] = *(void *)v25;
      v28.i64[1] = *(unsigned int *)(v25 + 8);
      float32x4_t v29 = vminq_f32(vminq_f32(v26, v27), v28);
      float32x4_t v30 = vmaxq_f32(v26, v27);
      float v31 = *(float *)(a1 + 88);
      float v32 = v31 >= 1.0 ? v31 * 0.001 : 0.001;
      float32x4_t v33 = *(float32x4_t *)(a1 + 224);
      float32x4_t v34 = vsubq_f32(v29, v33);
      v29.f32[0] = v31 + v32;
      float32x4_t v35 = vmulq_f32(vmaxq_f32(vabsq_f32(*(float32x4_t *)(a1 + 256)), v9), (float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(*(float32x4_t *)(a1 + 256)), v11, v10));
      float32x4_t v36 = vrecpeq_f32(v35);
      int v37 = 4;
      do
      {
        float32x4_t v36 = vmulq_f32(v36, vrecpsq_f32(v36, v35));
        --v37;
      }
      while (v37);
      float32x4_t v38 = vaddq_f32(vmaxq_f32(v30, v28), v33);
      v36.i32[3] = 0;
      float32x4_t v39 = *(float32x4_t *)(a1 + 240);
      float32x4_t v40 = vmulq_f32(v36, vsubq_f32(v34, v39));
      float32x4_t v41 = vmulq_f32(v36, vsubq_f32(v38, v39));
      int32x4_t v42 = (int32x4_t)vminq_f32(v41, v40);
      int32x4_t v43 = (int32x4_t)vmaxq_f32(v41, v40);
      if (vcgt_f32(vmin_f32(vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 0), vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), (float32x2_t)vdup_laneq_s32(v43, 2))), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 0)), vmax_f32(vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 0), vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), (float32x2_t)vdup_laneq_s32(v42, 2))), 0)).u32[0])
      {
        int v53 = *(_DWORD *)(a1 + 88);
        uint64_t v54 = 0;
        int v49 = v12 + v14;
        __int16 v50 = 1;
        if (*(unsigned char *)(a1 + 209))
        {
          if (v31 < *(float *)(a1 + 144))
          {
            *(_OWORD *)uint64_t v8 = v48;
            *(_DWORD *)(v8 + 16) = v49;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v51;
            *(void *)(a1 + 136) = v52;
            *(float *)(a1 + 144) = v31;
            *(void *)(a1 + 148) = v54;
            if (v31 >= *a4) {
              float v31 = *a4;
            }
            *a4 = v31;
            *(void *)(a1 + 160) = *(void *)v23;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(v23 + 8);
            *(void *)(a1 + 172) = *(void *)v24;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(v24 + 8);
            *(void *)(a1 + 184) = *(void *)v25;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(v25 + 8);
            *(_DWORD *)(a1 + 196) = v18;
            *(_DWORD *)(a1 + 200) = v19;
            *(_DWORD *)(a1 + 204) = v20;
            *(unsigned char *)(a1 + 208) = 1;
          }
        }
        else
        {
          float v47 = *a4;
          if (!(***(unsigned int (****)(void, long long *))(a1 + 16))(*(void *)(a1 + 16), &v48)) {
            return v7;
          }
          if (v47 < *a4)
          {
            *a4 = v47;
            *(float *)(a1 + 88) = v47;
          }
          int8x16_t v10 = (int8x16_t)xmmword_2343E1E60;
          float32x4_t v9 = (float32x4_t)xmmword_234422B90;
          int8x16_t v11 = (int8x16_t)xmmword_2343679C0;
        }
        if (!*(_DWORD *)(*(void *)(a1 + 16) + 8)) {
          break;
        }
      }
      if (++v12 == v15)
      {
        ++v6;
        a3 = v46;
        BOOL v7 = v6 >= v45;
        if (v6 != v45) {
          goto LABEL_3;
        }
        return 1;
      }
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void RayRTreeCallback<1,true>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<1,true>::~RayRTreeCallback(a1);
  JUMPOUT(0x237DBCBD0);
}

BOOL RayRTreeCallback<1,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v46 = 0uLL;
  int v47 = -1;
  __int16 v48 = 0;
  uint64_t v50 = 0;
  long long v49 = 0uLL;
  if (a2)
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    uint64_t v7 = a1 + 96;
    float v8 = 0.0;
    float32x4_t v9 = (float32x4_t)xmmword_234422B90;
    int8x16_t v10 = (int8x16_t)xmmword_2343E1E60;
    int8x16_t v11 = (int8x16_t)xmmword_2343679C0;
    unint64_t v45 = a2;
LABEL_3:
    uint64_t v12 = 0;
    unint64_t v13 = *(unsigned int *)(a3 + 4 * v5);
    unint64_t v14 = v13 >> 5;
    uint64_t v15 = ((v13 >> 1) & 0xF) + 1;
    while (1)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      if (*(_DWORD *)(a1 + 24))
      {
        unsigned int v17 = (unsigned __int16 *)(v16 + 6 * (v12 + v14));
        unsigned int v18 = *v17;
        unsigned int v19 = v17[1];
        unsigned int v20 = v17[2];
      }
      else
      {
        uint64_t v21 = (unsigned int *)(v16 + 12 * (v12 + v14));
        unsigned int v18 = *v21;
        unsigned int v19 = v21[1];
        unsigned int v20 = v21[2];
      }
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = v22 + 12 * v18;
      uint64_t v24 = v22 + 12 * v19;
      uint64_t v25 = v22 + 12 * v20;
      unsigned int v53 = v18;
      unsigned int v54 = v19;
      unsigned int v55 = v20;
      v26.i64[0] = *(void *)v23;
      v26.i64[1] = *(unsigned int *)(v23 + 8);
      v27.i64[0] = *(void *)v24;
      v27.i64[1] = *(unsigned int *)(v24 + 8);
      v28.i64[0] = *(void *)v25;
      v28.i64[1] = *(unsigned int *)(v25 + 8);
      float32x4_t v29 = vminq_f32(vminq_f32(v26, v27), v28);
      float32x4_t v30 = vmaxq_f32(v26, v27);
      float v31 = *(float *)(a1 + 88);
      float v32 = v31 >= 1.0 ? v31 * 0.001 : 0.001;
      float32x4_t v33 = *(float32x4_t *)(a1 + 224);
      float32x4_t v34 = vsubq_f32(v29, v33);
      v29.f32[0] = v31 + v32;
      float32x4_t v35 = vmulq_f32(vmaxq_f32(vabsq_f32(*(float32x4_t *)(a1 + 256)), v9), (float32x4_t)vbslq_s8((int8x16_t)vcgezq_f32(*(float32x4_t *)(a1 + 256)), v11, v10));
      float32x4_t v36 = vrecpeq_f32(v35);
      int v37 = 4;
      do
      {
        float32x4_t v36 = vmulq_f32(v36, vrecpsq_f32(v36, v35));
        --v37;
      }
      while (v37);
      float32x4_t v38 = vaddq_f32(vmaxq_f32(v30, v28), v33);
      v36.i32[3] = 0;
      float32x4_t v39 = *(float32x4_t *)(a1 + 240);
      float32x4_t v40 = vmulq_f32(v36, vsubq_f32(v34, v39));
      float32x4_t v41 = vmulq_f32(v36, vsubq_f32(v38, v39));
      int32x4_t v42 = (int32x4_t)vminq_f32(v41, v40);
      int32x4_t v43 = (int32x4_t)vmaxq_f32(v41, v40);
      if (vcgt_f32(vmin_f32(vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 0), vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1), (float32x2_t)vdup_laneq_s32(v43, 2))), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 0)), vmax_f32(vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 0), vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1), (float32x2_t)vdup_laneq_s32(v42, 2))), 0)).u32[0])
      {
        int v51 = *(_DWORD *)(a1 + 88);
        uint64_t v52 = 0;
        int v47 = v12 + v14;
        __int16 v48 = 1;
        if (*(unsigned char *)(a1 + 209))
        {
          if (v31 < *(float *)(a1 + 144))
          {
            *(_OWORD *)uint64_t v7 = v46;
            *(_DWORD *)(v7 + 16) = v47;
            *(_WORD *)(a1 + 116) = 1;
            *(_OWORD *)(a1 + 120) = v49;
            *(void *)(a1 + 136) = v50;
            *(float *)(a1 + 144) = v31;
            *(void *)(a1 + 148) = v52;
            if (v31 < v8) {
              float v8 = v31;
            }
            *(void *)(a1 + 160) = *(void *)v23;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(v23 + 8);
            *(void *)(a1 + 172) = *(void *)v24;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(v24 + 8);
            *(void *)(a1 + 184) = *(void *)v25;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(v25 + 8);
            *(_DWORD *)(a1 + 196) = v18;
            *(_DWORD *)(a1 + 200) = v19;
            *(_DWORD *)(a1 + 204) = v20;
            *(unsigned char *)(a1 + 208) = 1;
          }
        }
        else
        {
          if (!(***(unsigned int (****)(void, long long *))(a1 + 16))(*(void *)(a1 + 16), &v46)) {
            return v6;
          }
          int8x16_t v10 = (int8x16_t)xmmword_2343E1E60;
          float32x4_t v9 = (float32x4_t)xmmword_234422B90;
          int8x16_t v11 = (int8x16_t)xmmword_2343679C0;
        }
        if (!*(_DWORD *)(*(void *)(a1 + 16) + 8)) {
          break;
        }
      }
      if (++v12 == v15)
      {
        BOOL v6 = ++v5 >= v45;
        if (v5 != v45) {
          goto LABEL_3;
        }
        return 1;
      }
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

BOOL non-virtual thunk to'RayRTreeCallback<1,true>::processResults(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return RayRTreeCallback<1,true>::processResults(a1 - 8, a2, a3);
}

uint64_t non-virtual thunk to'RayRTreeCallback<1,true>::~RayRTreeCallback(uint64_t a1)
{
  return RayRTreeCallback<1,true>::~RayRTreeCallback(a1 - 8);
}

void non-virtual thunk to'RayRTreeCallback<1,true>::~RayRTreeCallback(uint64_t a1)
{
  RayRTreeCallback<1,true>::~RayRTreeCallback(a1 - 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t RayRTreeCallback<1,true>::~RayRTreeCallback(uint64_t a1)
{
  *(void *)a1 = &unk_26E729488;
  *(void *)(a1 + 8) = &unk_26E7294B8;
  if (*(unsigned char *)(a1 + 208)) {
    (***(void (****)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))(*(void *)(a1 + 16), a1 + 96, a1 + 160, a1 + 172, a1 + 184, a1 + 88, a1 + 196);
  }
  return a1;
}

uint64_t anonymous namespace'::IntersectSphereVsMeshCallback<true>::processHit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7.i64[0] = *(void *)a3;
  v7.i64[1] = *(unsigned int *)(a3 + 8);
  float32x4_t v22 = v7;
  v7.i64[0] = *(void *)a4;
  v7.i64[1] = *(unsigned int *)(a4 + 8);
  v8.i64[0] = *(void *)a5;
  v8.i32[2] = *(_DWORD *)(a5 + 8);
  float32x4_t v21 = v7;
  v8.i64[1] = v8.u32[2];
  float32x4_t v20 = v8;
  float32x2_t v18 = 0;
  float32x2_t v19 = 0;
  float32x4_t v17 = 0uLL;
  v7.i64[0] = *(void *)(a1 + 40);
  v7.i64[1] = *(unsigned int *)(a1 + 48);
  float32x4_t v16 = v7;
  float v9 = physx::Gu::distancePointTriangleSquared(&v16, &v22, &v21, &v20, &v19, &v18, &v17).f32[0];
  uint64_t result = 1;
  if (v9 <= *(float *)(a1 + 36))
  {
    *(unsigned char *)(a1 + 32) = 1;
    int8x16_t v11 = *(uint64_t **)(a1 + 24);
    if (v11)
    {
      uint64_t v12 = *((unsigned int *)v11 + 2);
      if (v12 >= *((_DWORD *)v11 + 3))
      {
        *((unsigned char *)v11 + 24) = 1;
      }
      else
      {
        unsigned int v13 = *((_DWORD *)v11 + 5);
        if (v13 >= *((_DWORD *)v11 + 4))
        {
          int v14 = *(_DWORD *)(a2 + 16);
          uint64_t v15 = *v11;
          *((_DWORD *)v11 + 2) = v12 + 1;
          *(_DWORD *)(v15 + 4 * v12) = v14;
        }
        else
        {
          *((_DWORD *)v11 + 5) = v13 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::IntersectSphereVsMeshCallback<true>::~IntersectSphereVsMeshCallback()
{
}

uint64_t anonymous namespace'::IntersectSphereVsMeshCallback<false>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  uint64_t v7 = *(void *)(a1 + 16);
  float v8 = *(float *)(v7 + 8);
  float v9 = a3[1];
  float v10 = *(float *)(v7 + 20);
  float v11 = (float)(*a3 * v8) + (float)(v9 * v10);
  float v12 = a3[2];
  float v13 = *(float *)(v7 + 32);
  float32x2_t v14 = *(float32x2_t *)v7;
  float32x2_t v15 = *(float32x2_t *)(v7 + 12);
  float32x2_t v16 = vadd_f32(vmul_n_f32(*(float32x2_t *)v7, *a3), vmul_n_f32(v15, v9));
  float32x2_t v17 = *(float32x2_t *)(v7 + 24);
  *(float32x2_t *)v18.f32 = vadd_f32(v16, vmul_n_f32(v17, v12));
  v18.i64[1] = COERCE_UNSIGNED_INT(v11 + (float)(v12 * v13));
  float32x4_t v42 = v18;
  if (*(unsigned char *)(a1 + 33)) {
    float32x2_t v19 = a5;
  }
  else {
    float32x2_t v19 = a4;
  }
  float v20 = v19[1];
  float v21 = v19[2];
  *(float32x2_t *)v22.f32 = vadd_f32(vadd_f32(vmul_n_f32(v14, *v19), vmul_n_f32(v15, v20)), vmul_n_f32(v17, v21));
  v22.f32[2] = (float)((float)(v8 * *v19) + (float)(v10 * v20)) + (float)(v13 * v21);
  v22.i32[3] = 0;
  if (*(unsigned char *)(a1 + 33)) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = a5;
  }
  float v24 = v23[1];
  float v25 = (float)(v8 * *v23) + (float)(v10 * v24);
  float v26 = v23[2];
  *(float32x2_t *)v27.f32 = vadd_f32(vadd_f32(vmul_n_f32(v14, *v23), vmul_n_f32(v15, v24)), vmul_n_f32(v17, v26));
  v27.f32[2] = v25 + (float)(v13 * v26);
  float32x4_t v41 = v22;
  v27.i32[3] = 0;
  float32x4_t v40 = v27;
  float32x2_t v38 = 0;
  float32x2_t v39 = 0;
  float32x4_t v37 = 0uLL;
  v28.i64[0] = *(void *)(a1 + 40);
  v28.i64[1] = *(unsigned int *)(a1 + 48);
  float32x4_t v36 = v28;
  float v29 = physx::Gu::distancePointTriangleSquared(&v36, &v42, &v41, &v40, &v39, &v38, &v37).f32[0];
  uint64_t result = 1;
  if (v29 <= *(float *)(a1 + 36))
  {
    *(unsigned char *)(a1 + 32) = 1;
    float v31 = *(uint64_t **)(a1 + 24);
    if (v31)
    {
      uint64_t v32 = *((unsigned int *)v31 + 2);
      if (v32 >= *((_DWORD *)v31 + 3))
      {
        *((unsigned char *)v31 + 24) = 1;
      }
      else
      {
        unsigned int v33 = *((_DWORD *)v31 + 5);
        if (v33 >= *((_DWORD *)v31 + 4))
        {
          int v34 = *(_DWORD *)(a2 + 16);
          uint64_t v35 = *v31;
          *((_DWORD *)v31 + 2) = v32 + 1;
          *(_DWORD *)(v35 + 4 * v32) = v34;
        }
        else
        {
          *((_DWORD *)v31 + 5) = v33 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::IntersectSphereVsMeshCallback<false>::~IntersectSphereVsMeshCallback()
{
}

uint64_t anonymous namespace'::IntersectBoxVsMeshCallback<true>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  uint64_t v7 = *(float **)(a1 + 16);
  float v8 = *v7;
  float v9 = v7[1];
  float v10 = a3[1];
  float v11 = v7[2];
  float v12 = v7[3];
  float v13 = v7[4];
  float v14 = v7[5];
  float v15 = (float)(*a3 * *v7) + (float)(v10 * v12);
  float v16 = (float)(*a3 * v9) + (float)(v10 * v13);
  float v17 = (float)(*a3 * v11) + (float)(v10 * v14);
  float v18 = a3[2];
  float v19 = v7[6];
  float v20 = v7[7];
  float v21 = v7[8];
  v41.f32[0] = v15 + (float)(v18 * v19);
  v41.f32[1] = v16 + (float)(v18 * v20);
  v41.f32[2] = v17 + (float)(v18 * v21);
  float v22 = a4[1];
  float v23 = (float)(v8 * *a4) + (float)(v12 * v22);
  float v24 = (float)(v9 * *a4) + (float)(v13 * v22);
  float v25 = (float)(v11 * *a4) + (float)(v14 * v22);
  float v26 = a4[2];
  v40.f32[0] = v23 + (float)(v19 * v26);
  v40.f32[1] = v24 + (float)(v20 * v26);
  v40.f32[2] = v25 + (float)(v21 * v26);
  float v27 = a5[1];
  float v28 = (float)(v8 * *a5) + (float)(v12 * v27);
  float v29 = (float)(v9 * *a5) + (float)(v13 * v27);
  float v30 = (float)(v11 * *a5) + (float)(v14 * v27);
  float v31 = a5[2];
  v39.f32[0] = v28 + (float)(v19 * v31);
  v39.f32[1] = v29 + (float)(v20 * v31);
  v39.f32[2] = v30 + (float)(v21 * v31);
  BOOL v32 = physx::Gu::intersectTriangleBox_Unsafe((float32x4_t *)(a1 + 100), (float32x4_t *)(a1 + 84), &v41, &v40, &v39);
  uint64_t result = 1;
  if (v32)
  {
    *(unsigned char *)(a1 + 32) = 1;
    int v34 = *(uint64_t **)(a1 + 24);
    if (v34)
    {
      uint64_t v35 = *((unsigned int *)v34 + 2);
      if (v35 >= *((_DWORD *)v34 + 3))
      {
        *((unsigned char *)v34 + 24) = 1;
      }
      else
      {
        unsigned int v36 = *((_DWORD *)v34 + 5);
        if (v36 >= *((_DWORD *)v34 + 4))
        {
          int v37 = *(_DWORD *)(a2 + 16);
          uint64_t v38 = *v34;
          *((_DWORD *)v34 + 2) = v35 + 1;
          *(_DWORD *)(v38 + 4 * v35) = v37;
        }
        else
        {
          *((_DWORD *)v34 + 5) = v36 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::IntersectBoxVsMeshCallback<true>::~IntersectBoxVsMeshCallback()
{
}

uint64_t anonymous namespace'::IntersectBoxVsMeshCallback<false>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float v7 = *(float *)(a1 + 36);
  float v8 = *(float *)(a1 + 40);
  float v9 = a3[1];
  float v10 = *(float *)(a1 + 44);
  float v11 = *(float *)(a1 + 48);
  float v12 = *(float *)(a1 + 52);
  float v13 = *(float *)(a1 + 56);
  float v14 = (float)(*a3 * v7) + (float)(v9 * v11);
  float v15 = (float)(*a3 * v8) + (float)(v9 * v12);
  float v16 = (float)(*a3 * v10) + (float)(v9 * v13);
  float v17 = a3[2];
  float v18 = *(float *)(a1 + 60);
  float v19 = *(float *)(a1 + 64);
  float v20 = v17 * v19;
  float v21 = *(float *)(a1 + 68);
  float v22 = *(float *)(a1 + 72);
  float v23 = v16 + (float)(v17 * v21);
  float32_t v24 = (float)(v14 + (float)(v17 * v18)) + v22;
  float v25 = *(float *)(a1 + 76);
  float v26 = *(float *)(a1 + 80);
  v49.f32[0] = v24;
  v49.f32[1] = (float)(v15 + v20) + v25;
  v49.f32[2] = v23 + v26;
  BOOL v27 = *(unsigned char *)(a1 + 33) == 0;
  if (*(unsigned char *)(a1 + 33)) {
    float v28 = a5;
  }
  else {
    float v28 = a4;
  }
  float v29 = v28[1];
  float v30 = (float)(v7 * *v28) + (float)(v11 * v29);
  float v31 = (float)(v8 * *v28) + (float)(v12 * v29);
  float v32 = (float)(v10 * *v28) + (float)(v13 * v29);
  float v33 = v28[2];
  v48.f32[0] = v22 + (float)(v30 + (float)(v18 * v33));
  v48.f32[1] = v25 + (float)(v31 + (float)(v19 * v33));
  v48.f32[2] = v26 + (float)(v32 + (float)(v21 * v33));
  if (v27) {
    int v34 = a5;
  }
  else {
    int v34 = a4;
  }
  float v35 = v34[1];
  float v36 = (float)(v7 * *v34) + (float)(v11 * v35);
  float v37 = (float)(v8 * *v34) + (float)(v12 * v35);
  float v38 = (float)(v10 * *v34) + (float)(v13 * v35);
  float v39 = v34[2];
  v47.f32[0] = v22 + (float)(v36 + (float)(v18 * v39));
  v47.f32[1] = v25 + (float)(v37 + (float)(v19 * v39));
  v47.f32[2] = v26 + (float)(v38 + (float)(v21 * v39));
  BOOL v40 = physx::Gu::intersectTriangleBox_Unsafe((float32x4_t *)(a1 + 100), (float32x4_t *)(a1 + 84), &v49, &v48, &v47);
  uint64_t result = 1;
  if (v40)
  {
    *(unsigned char *)(a1 + 32) = 1;
    float32x4_t v42 = *(uint64_t **)(a1 + 24);
    if (v42)
    {
      uint64_t v43 = *((unsigned int *)v42 + 2);
      if (v43 >= *((_DWORD *)v42 + 3))
      {
        *((unsigned char *)v42 + 24) = 1;
      }
      else
      {
        unsigned int v44 = *((_DWORD *)v42 + 5);
        if (v44 >= *((_DWORD *)v42 + 4))
        {
          int v45 = *(_DWORD *)(a2 + 16);
          uint64_t v46 = *v42;
          *((_DWORD *)v42 + 2) = v43 + 1;
          *(_DWORD *)(v46 + 4 * v43) = v45;
        }
        else
        {
          *((_DWORD *)v42 + 5) = v44 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::IntersectBoxVsMeshCallback<false>::~IntersectBoxVsMeshCallback()
{
}

uint64_t anonymous namespace'::IntersectCapsuleVsMeshCallback<true>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float v7 = a3[1];
  float v8 = *a3 - *a4;
  float v9 = v7 - a4[1];
  float v10 = a3[2];
  float v11 = *a3 - *a5;
  float v12 = v10 - a4[2];
  float v13 = v7 - a5[1];
  float v14 = v10 - a5[2];
  v22[0] = (float)(v9 * v14) - (float)(v12 * v13);
  v22[1] = (float)(v12 * v11) - (float)(v8 * v14);
  v22[2] = (float)(v8 * v13) - (float)(v9 * v11);
  BOOL v15 = physx::Gu::intersectCapsuleTriangle(v22, a3, a4, a5, (float *)(a1 + 36), (float *)(a1 + 64));
  uint64_t result = 1;
  if (v15)
  {
    *(unsigned char *)(a1 + 32) = 1;
    float v17 = *(uint64_t **)(a1 + 24);
    if (v17)
    {
      uint64_t v18 = *((unsigned int *)v17 + 2);
      if (v18 >= *((_DWORD *)v17 + 3))
      {
        *((unsigned char *)v17 + 24) = 1;
      }
      else
      {
        unsigned int v19 = *((_DWORD *)v17 + 5);
        if (v19 >= *((_DWORD *)v17 + 4))
        {
          int v20 = *(_DWORD *)(a2 + 16);
          uint64_t v21 = *v17;
          *((_DWORD *)v17 + 2) = v18 + 1;
          *(_DWORD *)(v21 + 4 * v18) = v20;
        }
        else
        {
          *((_DWORD *)v17 + 5) = v19 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::IntersectCapsuleVsMeshCallback<true>::~IntersectCapsuleVsMeshCallback()
{
}

uint64_t anonymous namespace'::IntersectCapsuleVsMeshCallback<false>::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  float v7 = *(float **)(a1 + 16);
  float v8 = *v7;
  float v9 = v7[1];
  float v10 = a3[1];
  float v11 = v7[2];
  float v12 = v7[3];
  float v13 = v7[4];
  float v14 = v7[5];
  float v15 = (float)(*a3 * *v7) + (float)(v10 * v12);
  float v16 = (float)(*a3 * v9) + (float)(v10 * v13);
  float v17 = (float)(*a3 * v11) + (float)(v10 * v14);
  float v18 = a3[2];
  float v19 = v7[6];
  float v20 = v7[7];
  float v21 = v7[8];
  float v22 = v15 + (float)(v18 * v19);
  float v23 = v16 + (float)(v18 * v20);
  float v24 = v17 + (float)(v18 * v21);
  v55[0] = v22;
  v55[1] = v23;
  _OWORD v55[2] = v24;
  BOOL v25 = *(unsigned char *)(a1 + 33) == 0;
  if (*(unsigned char *)(a1 + 33)) {
    float v26 = a5;
  }
  else {
    float v26 = a4;
  }
  float v27 = v26[1];
  float v28 = (float)(v8 * *v26) + (float)(v12 * v27);
  float v29 = (float)(v9 * *v26) + (float)(v13 * v27);
  float v30 = (float)(v11 * *v26) + (float)(v14 * v27);
  float v31 = v26[2];
  float v32 = v28 + (float)(v19 * v31);
  float v33 = v29 + (float)(v20 * v31);
  float v34 = v30 + (float)(v21 * v31);
  v54[0] = v32;
  v54[1] = v33;
  v54[2] = v34;
  if (v25) {
    float v35 = a5;
  }
  else {
    float v35 = a4;
  }
  float v36 = v35[1];
  float v37 = (float)(v8 * *v35) + (float)(v12 * v36);
  float v38 = (float)(v9 * *v35) + (float)(v13 * v36);
  float v39 = v35[2];
  float v40 = (float)((float)(v11 * *v35) + (float)(v14 * v36)) + (float)(v21 * v39);
  float v51 = v37 + (float)(v19 * v39);
  float v52 = v38 + (float)(v20 * v39);
  float v53 = v40;
  float v41 = v24 - v34;
  float v42 = v24 - v40;
  v50[0] = (float)((float)(v23 - v33) * v42) - (float)(v41 * (float)(v23 - v52));
  v50[1] = (float)(v41 * (float)(v22 - v51)) - (float)((float)(v22 - v32) * v42);
  v50[2] = (float)((float)(v22 - v32) * (float)(v23 - v52)) - (float)((float)(v23 - v33) * (float)(v22 - v51));
  BOOL v43 = physx::Gu::intersectCapsuleTriangle(v50, v55, v54, &v51, (float *)(a1 + 36), (float *)(a1 + 64));
  uint64_t result = 1;
  if (v43)
  {
    *(unsigned char *)(a1 + 32) = 1;
    int v45 = *(uint64_t **)(a1 + 24);
    if (v45)
    {
      uint64_t v46 = *((unsigned int *)v45 + 2);
      if (v46 >= *((_DWORD *)v45 + 3))
      {
        *((unsigned char *)v45 + 24) = 1;
      }
      else
      {
        unsigned int v47 = *((_DWORD *)v45 + 5);
        if (v47 >= *((_DWORD *)v45 + 4))
        {
          int v48 = *(_DWORD *)(a2 + 16);
          uint64_t v49 = *v45;
          *((_DWORD *)v45 + 2) = v46 + 1;
          *(_DWORD *)(v49 + 4 * v46) = v48;
        }
        else
        {
          *((_DWORD *)v45 + 5) = v47 + 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void anonymous namespace'::IntersectCapsuleVsMeshCallback<false>::~IntersectCapsuleVsMeshCallback()
{
}

void physx::PxMeshQuery::getTriangle(uint64_t a1, uint64_t a2, unsigned int a3, float *a4, unsigned int *a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a1 + 40);
  if (a6 && !*(void *)(v14 + 112)) {
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMeshQuery.cpp", 111, "Adjacency information not created. Set buildTriangleAdjacencies on Cooking params.", (uint64_t)a6, a7, a8, SLOBYTE(v63));
  }
  physx::operator*(a2, (float *)(a1 + 4), (uint64_t)&v63);
  float v15 = (float)(*(float *)(a1 + 4) * *(float *)(a1 + 8)) * *(float *)(a1 + 12);
  uint64_t v16 = *(void *)(v14 + 48);
  if ((*(unsigned char *)(v14 + 92) & 2) != 0)
  {
    float v21 = (unsigned __int16 *)(v16 + 6 * a3);
    unsigned int v18 = *v21;
    unsigned int v19 = v21[1];
    unsigned int v20 = v21[2];
  }
  else
  {
    float v17 = (unsigned int *)(v16 + 12 * a3);
    unsigned int v18 = *v17;
    unsigned int v19 = v17[1];
    unsigned int v20 = v17[2];
  }
  if (v15 >= 0.0) {
    unsigned int v22 = v20;
  }
  else {
    unsigned int v22 = v19;
  }
  if (v15 < 0.0) {
    unsigned int v19 = v20;
  }
  uint64_t v23 = *(void *)(v14 + 40);
  float v24 = (float *)(v23 + 12 * v18);
  float v25 = v63;
  float v26 = v64;
  float v27 = v24[1];
  float v28 = v65;
  float v29 = v66;
  float v30 = v67;
  float v31 = v68;
  float v32 = (float)(*v24 * v63) + (float)(v27 * v66);
  float v33 = (float)(*v24 * v64) + (float)(v27 * v67);
  float v34 = (float)(*v24 * v65) + (float)(v27 * v68);
  float v35 = v24[2];
  float v36 = v69;
  float v37 = v70;
  float v38 = v35 * v70;
  float v39 = v71;
  float v40 = v72;
  float v41 = v34 + (float)(v35 * v71);
  float v42 = (float)(v32 + (float)(v35 * v69)) + v72;
  float v43 = v73;
  float v44 = v74;
  float v45 = (float)(v33 + v38) + v73;
  float v46 = v41 + v74;
  *a4 = v42;
  a4[1] = v45;
  a4[2] = v46;
  unsigned int v47 = (float *)(v23 + 12 * v19);
  float v48 = v47[1];
  float v49 = (float)(v25 * *v47) + (float)(v29 * v48);
  float v50 = (float)(v26 * *v47) + (float)(v30 * v48);
  float v51 = (float)(v28 * *v47) + (float)(v31 * v48);
  float v52 = v47[2];
  a4[3] = v40 + (float)(v49 + (float)(v36 * v52));
  a4[4] = v43 + (float)(v50 + (float)(v37 * v52));
  a4[5] = v44 + (float)(v51 + (float)(v39 * v52));
  float v53 = (float *)(v23 + 12 * v22);
  float v54 = v53[1];
  float v55 = (float)(v25 * *v53) + (float)(v29 * v54);
  float v56 = (float)(v26 * *v53) + (float)(v30 * v54);
  float v57 = (float)(v28 * *v53) + (float)(v31 * v54);
  float v58 = v53[2];
  a4[6] = v40 + (float)(v55 + (float)(v36 * v58));
  a4[7] = v43 + (float)(v56 + (float)(v37 * v58));
  a4[8] = v44 + (float)(v57 + (float)(v39 * v58));
  if (a5)
  {
    *a5 = v18;
    a5[1] = v19;
    a5[2] = v22;
  }
  if (a6)
  {
    uint64_t v59 = *(void *)(v14 + 112);
    if (v59)
    {
      unsigned int v60 = 3 * a3 + 2;
      if (v15 >= 0.0) {
        unsigned int v61 = 3 * a3;
      }
      else {
        unsigned int v61 = 3 * a3 + 2;
      }
      if (v15 < 0.0) {
        unsigned int v60 = 3 * a3;
      }
      *a6 = *(_DWORD *)(v59 + 4 * v61);
      a6[1] = *(_DWORD *)(v59 + 4 * (3 * a3 + 1));
      int v62 = *(_DWORD *)(v59 + 4 * v60);
    }
    else
    {
      *(void *)a6 = -1;
      int v62 = -1;
    }
    a6[2] = v62;
  }
}

BOOL physx::PxMeshQuery::getTriangle(float32x2_t *a1, float *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x2_t v15 = a1[1];
  uint64_t v16 = a1;
  float v6 = a1[3].f32[0];
  __asm { FMOV            V2.2S, #1.0 }
  int32x2_t v13 = vrev64_s32((int32x2_t)vdiv_f32(_D2, a1[2]));
  float v14 = 1.0 / v6;
  return physx::Gu::HeightFieldUtil::getTriangle((uint64_t)&v13, a2, a4, a5, a6, a3, 1, 1);
}

uint64_t physx::PxMeshQuery::findOverlapTriangleMesh(int *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned char *a8)
{
  uint64_t v62 = a5;
  unsigned int v63 = 0;
  int v64 = a6;
  int v65 = a7;
  int v66 = 0;
  char v67 = 0;
  uint64_t v10 = *(void *)(a3 + 40);
  float v11 = *(float *)a1;
  if (!*a1)
  {
    int v35 = a1[1];
    uint64_t v54 = a2[1].i64[0];
    LODWORD(v55) = a2[1].i32[2];
    HIDWORD(v55) = v35;
    unsigned int v33 = *(unsigned __int16 *)(v10 + 8) - 3;
    float v34 = physx::Gu::gMidphaseSphereOverlapTable;
    goto LABEL_7;
  }
  if (LODWORD(v11) == 2)
  {
    float v36 = a2->f32[0];
    float v37 = a2->f32[1];
    float v38 = v36 + v36;
    float v40 = a2->f32[2];
    float v39 = a2->f32[3];
    float v41 = v39 + v39;
    float v42 = (float)((float)(v39 * (float)(v39 + v39)) + -1.0) + (float)(v36 * (float)(v36 + v36));
    float v43 = (float)(v38 * v37) + (float)(v40 * (float)(v39 + v39));
    float v44 = (float)(v38 * v40) - (float)(v37 * v41);
    int v46 = a1[1];
    float v45 = *((float *)a1 + 2);
    float v47 = v42 * v45;
    float v48 = v45 * v43;
    float v49 = v44 * v45;
    float v50 = a2[1].f32[0];
    float v51 = a2[1].f32[1];
    float v52 = a2[1].f32[2];
    *(float *)&uint64_t v54 = v50 + v47;
    *((float *)&v54 + 1) = v51 + v48;
    *(float *)&uint64_t v55 = v49 + v52;
    *((float *)&v55 + 1) = v50 - v47;
    float v56 = v51 - v48;
    *(float *)&uint64_t v57 = v52 - v49;
    HIDWORD(v57) = v46;
    unsigned int v33 = *(unsigned __int16 *)(v10 + 8) - 3;
    float v34 = (uint64_t (**)())&physx::Gu::gMidphaseCapsuleOverlapTable;
    goto LABEL_7;
  }
  if (LODWORD(v11) == 3)
  {
    float32x2_t v12 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2->f32, 1);
    float32x2_t v13 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
    float32x2_t v14 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
    _Q4 = vaddq_f32(*a2, *a2);
    float32x2_t v16 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2->f32, *(float32x2_t *)_Q4.f32), 0);
    float32x2_t v17 = vmul_lane_f32(v12, *(float32x2_t *)_Q4.f32, 1);
    float32x2_t v18 = vmul_laneq_f32(v13, _Q4, 2);
    float32x2_t v19 = vmul_n_f32(v12, _Q4.f32[0]);
    float32x2_t v20 = vmul_n_f32(v13, _Q4.f32[0]);
    float32x2_t v21 = vmul_n_f32(v14, _Q4.f32[0]);
    float32x2_t v22 = vmul_lane_f32(v13, *(float32x2_t *)_Q4.f32, 1);
    float32x2_t v23 = vmul_lane_f32(v14, *(float32x2_t *)_Q4.f32, 1);
    float32x2_t v24 = vmul_laneq_f32(v14, _Q4, 2);
    __asm { FMOV            V4.2S, #1.0 }
    float32x2_t v29 = vsub_f32(*(float32x2_t *)_Q4.f32, v16);
    LODWORD(v30) = vsub_f32(v20, v23).u32[0];
    LODWORD(v31) = vadd_f32(v22, v21).u32[0];
    *(float *)&uint64_t v54 = (float)(1.0 - v17.f32[1]) - v18.f32[1];
    HIDWORD(v54) = vadd_f32(v19, v24).u32[0];
    HIDWORD(v30) = vsub_f32(v19, v24).i32[1];
    uint64_t v55 = v30;
    LODWORD(v56) = vsub_f32(v29, v18).u32[0];
    HIDWORD(v31) = vadd_f32(v20, v23).i32[1];
    uint64_t v57 = v31;
    int32x2_t v58 = vzip1_s32((int32x2_t)vsub_f32(v22, v21), (int32x2_t)vsub_f32(v29, v17));
    *(void *)&long long v32 = *(uint64_t *)((char *)a2[1].i64 + 4);
    *((void *)&v32 + 1) = *(void *)(a1 + 1);
    __int32 v59 = a2[1].i32[0];
    long long v60 = v32;
    int v61 = a1[3];
    unsigned int v33 = *(unsigned __int16 *)(v10 + 8) - 3;
    float v34 = physx::Gu::gMidphaseBoxOverlapTable;
LABEL_7:
    ((void (*)(uint64_t *))v34[v33])(&v54);
  }
  *a8 = v67;
  return v63;
}

uint64_t physx::PxMeshQuery::findOverlapHeightField(uint64_t a1, float *a2, float32x2_t *a3, float *a4, uint64_t a5, int a6, int a7, unsigned char *a8, double a9, double a10, double a11, double a12)
{
  float v16 = *a4;
  float v17 = a4[1];
  float v19 = a4[2];
  float v18 = a4[3];
  float v21 = a2[4];
  float v20 = a2[5];
  float v23 = a4[4];
  float v22 = a4[5];
  float v24 = a2[6];
  float v25 = a4[6];
  float v27 = a2[2];
  float v26 = a2[3];
  float v29 = *a2;
  float v28 = a2[1];
  *(float *)&a12 = (float)((float)((float)(v18 * *a2) - (float)(*a4 * v26)) - (float)(v17 * v27)) + (float)(v28 * v19);
  float v30 = (float)((float)(v18 * v28) - (float)(v17 * v26)) - (float)(v19 * *a2);
  float v31 = (float)((float)(v18 * v27) - (float)(v19 * v26)) - (float)(*a4 * v28);
  float v32 = (float)((float)(*a4 * *a2) + (float)(v18 * v26)) + (float)(v17 * v28);
  float v33 = 0.0;
  switch(*(_DWORD *)a1)
  {
    case 0xFFFFFFFF:
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
      *a8 = 0;
      goto LABEL_3;
    case 0:
      float v33 = *(float *)(a1 + 4);
      float v34 = v33;
      float v35 = v33;
      break;
    case 2:
      float v34 = *(float *)(a1 + 4);
      float v33 = *(float *)(a1 + 8) + v34;
      float v35 = v34;
      break;
    case 3:
      float v33 = *(float *)(a1 + 4);
      float v34 = *(float *)(a1 + 8);
      float v35 = *(float *)(a1 + 12);
      break;
    default:
LABEL_3:
      float v34 = 0.0;
      float v35 = 0.0;
      break;
  }
  float v36 = -v16;
  float v37 = -v17;
  float v38 = -v19;
  *(float *)v14.i32 = v30 + (float)(v27 * v16);
  *(float *)v13.i32 = v31 + (float)(v29 * v17);
  *(float *)v12.i32 = v32 + (float)(v19 * v27);
  if (*(float *)&a12 == 0.0 && *(float *)v14.i32 == 0.0 && *(float *)v13.i32 == 0.0)
  {
    char v39 = 1;
    float v40 = v33;
    float v41 = v34;
    float v42 = v35;
  }
  else
  {
    char v39 = 0;
    float v92 = v25;
    float v43 = v23;
    float v44 = v22;
    float v45 = v20;
    float v46 = v21;
    float v47 = *(float *)v14.i32 * (float)(*(float *)v14.i32 + *(float *)v14.i32);
    float v48 = *(float *)v13.i32 * (float)(*(float *)v13.i32 + *(float *)v13.i32);
    float v49 = (float)(*(float *)&a12 + *(float *)&a12) * *(float *)v14.i32;
    float v50 = *(float *)v13.i32 * (float)(*(float *)&a12 + *(float *)&a12);
    float v51 = *(float *)v12.i32 * (float)(*(float *)&a12 + *(float *)&a12);
    float v52 = *(float *)v13.i32 * (float)(*(float *)v14.i32 + *(float *)v14.i32);
    float v53 = *(float *)v12.i32 * (float)(*(float *)v14.i32 + *(float *)v14.i32);
    float v54 = *(float *)v12.i32 * (float)(*(float *)v13.i32 + *(float *)v13.i32);
    float v55 = v49 + v54;
    float v56 = v50 - v53;
    float v57 = v49 - v54;
    float v58 = 1.0 - (float)(*(float *)&a12 * (float)(*(float *)&a12 + *(float *)&a12));
    float v59 = (float)(v51 + v52) * v34;
    float v60 = (float)(v52 - v51) * v35;
    float v40 = (float)(fabsf((float)((float)(1.0 - v47) - v48) * v33) + fabsf(v57 * v34)) + fabsf((float)(v50 + v53) * v35);
    float v41 = (float)(fabsf(v55 * v33) + fabsf((float)(v58 - v48) * v34)) + fabsf(v60);
    float v61 = fabsf((float)(v58 - v47) * v35);
    float v21 = v46;
    float v20 = v45;
    float v22 = v44;
    float v23 = v43;
    float v25 = v92;
    float v42 = (float)(fabsf(v56 * v33) + fabsf(v59)) + v61;
  }
  float v62 = (float)(v24 - v25) + (float)(v24 - v25);
  float v63 = (float)(v21 - v23) + (float)(v21 - v23);
  float v64 = (float)(v20 - v22) + (float)(v20 - v22);
  float v65 = (float)((float)(v64 * v37) + (float)(v36 * v63)) + (float)(v38 * v62);
  float v66 = (float)(v18 * v18) + -0.5;
  float v67 = (float)((float)(v18 * (float)((float)(v17 * v63) + (float)(v36 * v64))) + (float)(v62 * v66))
      + (float)(v38 * v65);
  float v68 = (float)((float)(v18 * (float)((float)(v16 * v62) + (float)(v38 * v63))) + (float)(v64 * v66))
      + (float)(v37 * v65);
  float v69 = (float)((float)(v18 * (float)((float)(v19 * v64) + (float)(v37 * v62))) + (float)(v63 * v66))
      + (float)(v36 * v65);
  v117[0] = v69 - v40;
  v117[1] = v68 - v41;
  v117[2] = v67 - v42;
  v117[3] = v69 + v40;
  v70.i64[0] = __PAIR64__(v14.u32[0], LODWORD(a12));
  v117[4] = v68 + v41;
  v117[5] = v67 + v42;
  v70.i64[1] = __PAIR64__(v12.u32[0], v13.u32[0]);
  float32x2_t v115 = a3[1];
  float32x2_t v116 = a3;
  float v71 = a3[3].f32[0];
  __asm { FMOV            V21.2S, #1.0 }
  int32x2_t v113 = vrev64_s32((int32x2_t)vdiv_f32(_D21, a3[2]));
  float v114 = 1.0 / v71;
  unsigned int v94 = 0;
  int v95 = a6;
  int v96 = a7;
  int v97 = 0;
  char v98 = 0;
  v93[0] = &unk_26E7296E8;
  v93[1] = a5;
  float v99 = &v113;
  char v112 = v39;
  float32x2_t v77 = (float32x2_t)vdup_lane_s32(v14, 0);
  float32x2_t v78 = (float32x2_t)vdup_lane_s32(v13, 0);
  float32x2_t v79 = (float32x2_t)vdup_lane_s32(v12, 0);
  float32x4_t v80 = vaddq_f32(v70, v70);
  float32x2_t v81 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)&a12, *(float32x2_t *)v80.f32), 0);
  float32x2_t v82 = vmul_lane_f32(v77, *(float32x2_t *)v80.f32, 1);
  float32x2_t v83 = vmul_laneq_f32(v78, v80, 2);
  float32x2_t v84 = vmul_n_f32(v77, v80.f32[0]);
  float32x2_t v85 = vmul_n_f32(v78, v80.f32[0]);
  float32x2_t v86 = vmul_n_f32(v79, v80.f32[0]);
  float32x2_t v87 = vmul_lane_f32(v78, *(float32x2_t *)v80.f32, 1);
  float32x2_t v88 = vmul_lane_f32(v79, *(float32x2_t *)v80.f32, 1);
  *(float32x2_t *)v80.f32 = vmul_laneq_f32(v79, v80, 2);
  float32x2_t v89 = vsub_f32(_D21, v81);
  _D21.i32[0] = vsub_f32(v85, v88).u32[0];
  LODWORD(v90) = vadd_f32(v87, v86).u32[0];
  float v100 = (float)(1.0 - v82.f32[1]) - v83.f32[1];
  unsigned __int32 v101 = vadd_f32(v84, *(float32x2_t *)v80.f32).u32[0];
  _D21.i32[1] = vsub_f32(v84, *(float32x2_t *)&v80).i32[1];
  float32x2_t v102 = _D21;
  unsigned __int32 v103 = vsub_f32(v89, v83).u32[0];
  HIDWORD(v90) = vadd_f32(v85, v88).i32[1];
  uint64_t v104 = v90;
  int32x2_t v105 = vzip1_s32((int32x2_t)vsub_f32(v87, v86), (int32x2_t)vsub_f32(v89, v82));
  float v106 = v69;
  float v107 = v68;
  float v108 = v67;
  float v109 = v33;
  float v110 = v34;
  float v111 = v35;
  physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v113, a4, v117, 0, (uint64_t)v93);
  *a8 = v98;
  return v94;
}

uint64_t physx::PxMeshQuery::sweep(float32x2_t *a1, int *a2, int32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 *a7, unsigned int *a8, double a9, double a10, double a11, __n128 a12, double a13, float32x4_t a14, double a15, __n128 a16, unsigned __int8 a17)
{
  LODWORD(a11) = 1287568416;
  *(float *)&a9 = fminf(*(float *)&a9, 100000000.0);
  int v17 = *a2;
  if (*a2 == 3)
  {
    if ((*a7 & 0x100) != 0)
    {
      __int16 v21 = *a7;
      return physx::Gu::sweepBoxTriangles_Precise(a4, a5, a17, (uint64_t)a2, (uint64_t)a3, a1, a6, a8, *(float *)&a9, a10, a11, a12, a13, *(double *)a14.i64, a15, a16, &v21);
    }
    else
    {
      __int16 v20 = *a7;
      return physx::Gu::sweepBoxTriangles(a4, a5, a17, (uint64_t)a2, a3, (uint64_t)a1, a6, a8, a9, *(float *)&a10, a11, a12.n128_f64[0], a13, a14, &v20);
    }
  }
  else if (v17 == 2)
  {
    __int16 v22 = *a7;
    return physx::Gu::sweepCapsuleTriangles(a4, a5, (physx::Gu::Box *)a17, (uint64_t)a2, (float *)a3, a1, a6, a8, *(float *)&a9, *(float *)&a10, &v22);
  }
  else if (v17)
  {
    return 0;
  }
  else
  {
    int v18 = a2[1];
    v24[0] = 2;
    v24[1] = v18;
    v24[2] = 0;
    __int16 v23 = *a7;
    return physx::Gu::sweepCapsuleTriangles(a4, a5, (physx::Gu::Box *)a17, (uint64_t)v24, (float *)a3, a1, a6, a8, *(float *)&a9, *(float *)&a10, &v23);
  }
}

uint64_t GeomOverlapCallback_SphereMesh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 4);
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 24);
  int v7 = v3;
  return ((uint64_t (*)(uint64_t *))physx::Gu::gMidphaseSphereOverlapTable[*(unsigned __int16 *)(*(void *)(a3 + 40) + 8)
                                                                                  - 3])(&v5);
}

uint64_t GeomOverlapCallback_CapsuleMesh(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a3 + 40);
  float v5 = *a2;
  float v6 = a2[1];
  float v7 = v5 + v5;
  float v9 = a2[2];
  float v8 = a2[3];
  float v10 = v8 + v8;
  float v11 = (float)((float)(v8 * (float)(v8 + v8)) + -1.0) + (float)(v5 * (float)(v5 + v5));
  float v12 = (float)(v7 * v6) + (float)(v9 * (float)(v8 + v8));
  float v13 = (float)(v7 * v9) - (float)(v6 * v10);
  float v15 = *(float *)(a1 + 4);
  float v14 = *(float *)(a1 + 8);
  float v16 = v11 * v14;
  float v17 = v14 * v12;
  float v18 = v13 * v14;
  float v19 = a2[4];
  float v20 = a2[5];
  float v21 = a2[6];
  v23[0] = v19 + v16;
  v23[1] = v20 + v17;
  void v23[2] = v18 + v21;
  v23[3] = v19 - v16;
  v23[4] = v20 - v17;
  v23[5] = v21 - v18;
  v23[6] = v15;
  return ((uint64_t (*)(float *, uint64_t, uint64_t, uint64_t, void))*(&physx::Gu::gMidphaseCapsuleOverlapTable
                                                                              + *(unsigned __int16 *)(v4 + 8)
                                                                              - 3))(v23, v4, a4, a3 + 4, 0);
}

uint64_t GeomOverlapCallback_BoxMesh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 40);
  float32x2_t v5 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a2, 1);
  float32x2_t v6 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2);
  float32x2_t v7 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 3);
  _Q4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  float32x2_t v9 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)a2, *(float32x2_t *)_Q4.f32), 0);
  float32x2_t v10 = vmul_lane_f32(v5, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v11 = vmul_laneq_f32(v6, _Q4, 2);
  float32x2_t v12 = vmul_n_f32(v5, _Q4.f32[0]);
  float32x2_t v13 = vmul_n_f32(v6, _Q4.f32[0]);
  float32x2_t v14 = vmul_n_f32(v7, _Q4.f32[0]);
  float32x2_t v15 = vmul_lane_f32(v6, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v16 = vmul_lane_f32(v7, *(float32x2_t *)_Q4.f32, 1);
  float32x2_t v17 = vmul_laneq_f32(v7, _Q4, 2);
  __asm { FMOV            V4.2S, #1.0 }
  float32x2_t v22 = vsub_f32(*(float32x2_t *)_Q4.f32, v9);
  LODWORD(v23) = vsub_f32(v13, v16).u32[0];
  LODWORD(v24) = vadd_f32(v15, v14).u32[0];
  HIDWORD(v23) = vsub_f32(v12, v17).i32[1];
  v27[0] = (float)(1.0 - v10.f32[1]) - v11.f32[1];
  LODWORD(v27[1]) = vadd_f32(v12, v17).u32[0];
  uint64_t v28 = v23;
  unsigned __int32 v29 = vsub_f32(v22, v11).u32[0];
  HIDWORD(v24) = vadd_f32(v13, v16).i32[1];
  uint64_t v30 = v24;
  int32x2_t v31 = vzip1_s32((int32x2_t)vsub_f32(v15, v14), (int32x2_t)vsub_f32(v22, v10));
  int v32 = *(_DWORD *)(a2 + 16);
  *(void *)&long long v25 = *(void *)(a2 + 20);
  *((void *)&v25 + 1) = *(void *)(a1 + 4);
  long long v33 = v25;
  int v34 = *(_DWORD *)(a1 + 12);
  return ((uint64_t (*)(float *))physx::Gu::gMidphaseBoxOverlapTable[*(unsigned __int16 *)(v4 + 8)
                                                                             - 3])(v27);
}

uint64_t GeomOverlapCallback_ConvexMesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v236 = *MEMORY[0x263EF8340];
  BOOL v8 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
  char v9 = *(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0 && *(float *)(a3 + 12) == 1.0;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a3 + 40);
  long long v12 = xmmword_23435FD50;
  *(_OWORD *)float v200 = xmmword_23435FD50;
  *(_OWORD *)&v200[16] = xmmword_23435FD50;
  long long v13 = xmmword_234376D80;
  long long v14 = xmmword_23435FD60;
  long long v201 = xmmword_234376D80;
  long long v202 = xmmword_23435FD60;
  uint64_t v203 = 0x3F80000000000000;
  char v204 = 0;
  if (!v8)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v200, (float *)(a1 + 4), (float *)(a1 + 16));
    long long v13 = xmmword_234376D80;
    long long v14 = xmmword_23435FD60;
    long long v12 = xmmword_23435FD50;
  }
  v195[0] = v12;
  v195[1] = v12;
  long long v196 = v13;
  long long v197 = v14;
  uint64_t v198 = 0x3F80000000000000;
  char v199 = 0;
  if ((v9 & 1) == 0) {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v195, (float *)(a3 + 4), (float *)(a3 + 16));
  }
  float v15 = *(float *)a2;
  float v16 = *(float *)(a2 + 4);
  float v17 = *(float *)(a2 + 8);
  float v18 = *(float *)(a2 + 12);
  float v19 = v16 + v16;
  float v20 = v17 + v17;
  float v21 = v16 * (float)(v16 + v16);
  float v22 = v17 * (float)(v17 + v17);
  float v23 = (float)(v15 + v15) * v16;
  float v24 = (float)(v15 + v15) * v17;
  float v25 = (float)(v15 + v15) * v18;
  float v26 = v19 * v17;
  float v27 = v19 * v18;
  float v28 = v20 * v18;
  v192[0] = (float)(1.0 - v21) - v22;
  v192[1] = v23 + v28;
  float v29 = 1.0 - (float)(v15 * (float)(v15 + v15));
  v192[2] = v24 - v27;
  v192[3] = v23 - v28;
  v192[4] = v29 - v22;
  v192[5] = v26 + v25;
  v192[6] = v24 + v27;
  v192[7] = v26 - v25;
  uint64_t v193 = *(void *)(a2 + 16);
  int v30 = *(_DWORD *)(a2 + 24);
  v192[8] = v29 - v21;
  int v194 = v30;
  float v31 = *(float *)a4;
  float v32 = *(float *)(a4 + 4);
  float v33 = *(float *)(a4 + 8);
  float v34 = *(float *)(a4 + 12);
  float v35 = v32 + v32;
  float v36 = v33 + v33;
  float v37 = v32 * (float)(v32 + v32);
  float v38 = v33 * (float)(v33 + v33);
  float v39 = (float)(v31 + v31) * v32;
  float v40 = (float)(v31 + v31) * v33;
  float v41 = (float)(v31 + v31) * v34;
  float v42 = v35 * v33;
  float v43 = v35 * v34;
  float v44 = v36 * v34;
  v189[0] = (float)(1.0 - v37) - v38;
  v189[1] = v39 + v44;
  float v45 = 1.0 - (float)(v31 * (float)(v31 + v31));
  v189[2] = v40 - v43;
  v189[3] = v39 - v44;
  v189[4] = v45 - v38;
  v189[5] = v42 + v41;
  v189[6] = v40 + v43;
  v189[7] = v42 - v41;
  v189[8] = v45 - v37;
  uint64_t v190 = *(void *)(a4 + 16);
  int v191 = *(_DWORD *)(a4 + 24);
  float v46 = *(float *)(v10 + 32);
  float v47 = *(float *)(v10 + 36);
  float v48 = *(float *)(v10 + 40);
  float v49 = (float)((float)(v46 * *(float *)&v200[8]) + (float)(v47 * *(float *)&v200[20])) + (float)(v48 * *(float *)&v201);
  float v50 = *(float *)(v10 + 44);
  float v51 = *(float *)(v10 + 48);
  float v52 = *(float *)(v10 + 52);
  float v53 = (float)(fabsf(*(float *)&v200[8] * v50) + fabsf(*(float *)&v200[20] * v51)) + fabsf(*(float *)&v201 * v52);
  float v54 = v49 - v53;
  float v55 = v49 + v53;
  float32x2_t v56 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v200, v46), vmul_n_f32(*(float32x2_t *)&v200[12], v47)), vmul_n_f32(*(float32x2_t *)&v200[24], v48));
  float32x2_t v57 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)v200, v50)), vabs_f32(vmul_n_f32(*(float32x2_t *)&v200[12], v51))), vabs_f32(vmul_n_f32(*(float32x2_t *)&v200[24], v52)));
  float32x2_t v185 = vsub_f32(v56, v57);
  float v186 = v54;
  float32x2_t v187 = vadd_f32(v56, v57);
  float v188 = v55;
  physx::Gu::computeHullOBB(&v171, (uint64_t)&v185, v192, v189, (uint64_t)v195, v9, 0.0);
  int v206 = 2;
  float v205 = &unk_26E729758;
  unsigned __int8 v234 = 0;
  if ((v9 & 1) == 0)
  {
    *(void *)&long long v59 = *(void *)&v195[0];
    *((void *)&v59 + 1) = DWORD2(v195[0]);
    *(void *)&long long v60 = *(void *)((char *)v195 + 12);
    *((void *)&v60 + 1) = DWORD1(v195[1]);
    *(void *)&long long v61 = *((void *)&v195[1] + 1);
    *((void *)&v61 + 1) = v196;
    long long v231 = v59;
    long long v232 = v60;
    long long v233 = v61;
  }
  float32x4_t v62 = *(float32x4_t *)(a1 + 4);
  float32x4_t v63 = v62;
  v63.i32[3] = 0;
  float32x4_t v64 = *(float32x4_t *)(a1 + 16);
  __asm { FMOV            V0.2S, #1.0 }
  float32x4_t v70 = (float32x4_t)xmmword_23435FD60;
  float32x4_t v71 = (float32x4_t)xmmword_23435FD50;
  if (_ZF && v62.f32[1] == 1.0)
  {
    uint64_t v72 = *(void *)(v10 + 72);
    unsigned int v73 = *(unsigned __int8 *)(v10 + 71);
    char v74 = *(unsigned char *)(v10 + 70);
    unsigned int v75 = *(_DWORD *)(v10 + 92);
    uint64_t v76 = *(void *)(v10 + 96);
    if (v62.f32[2] == 1.0)
    {
      float32x4_t v77 = (float32x4_t)xmmword_23435FD80;
      float32x4_t v78 = 0uLL;
      float32x4_t v79 = (float32x4_t)xmmword_23435FD50;
      float32x4_t v80 = (float32x4_t)xmmword_23435FD60;
      float32x4_t v81 = (float32x4_t)xmmword_23435FD80;
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v72 = *(void *)(v10 + 72);
    unsigned int v73 = *(unsigned __int8 *)(v10 + 71);
    char v74 = *(unsigned char *)(v10 + 70);
    unsigned int v75 = *(_DWORD *)(v10 + 92);
    uint64_t v76 = *(void *)(v10 + 96);
  }
  float32x4_t v82 = vrecpeq_f32(v63);
  int v83 = 4;
  do
  {
    float32x4_t v82 = vmulq_f32(v82, vrecpsq_f32(v82, v63));
    --v83;
  }
  while (v83);
  *(int32x2_t *)v84.f32 = vdup_lane_s32(*(int32x2_t *)v62.f32, 0);
  v84.i64[1] = v84.u32[0];
  if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v84, v63)), (int8x8_t)_D0).u32[0] & 0xFFFFFF) != 0)
  {
    float32x2_t v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.f32, 1);
    float32x2_t v86 = (float32x2_t)vdup_laneq_s32((int32x4_t)v64, 2);
    float32x2_t v87 = (float32x2_t)vdup_laneq_s32((int32x4_t)v64, 3);
    float32x4_t v88 = vaddq_f32(v64, v64);
    float32x2_t v89 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v88.f32), 0);
    float32x2_t v90 = vmul_lane_f32(v85, *(float32x2_t *)v88.f32, 1);
    float32x2_t v91 = vmul_laneq_f32(v86, v88, 2);
    float32x2_t v92 = vmul_n_f32(v85, v88.f32[0]);
    float32x2_t v93 = vmul_n_f32(v86, v88.f32[0]);
    float32x2_t v94 = vmul_n_f32(v87, v88.f32[0]);
    float32x2_t v95 = vmul_lane_f32(v86, *(float32x2_t *)v88.f32, 1);
    float32x2_t v96 = vmul_lane_f32(v87, *(float32x2_t *)v88.f32, 1);
    float32x2_t v97 = vmul_laneq_f32(v87, v88, 2);
    float32x2_t v98 = vsub_f32(_D0, v89);
    float32x2_t v99 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D0, v90), v91), (int8x8_t)vadd_f32(v92, v97), 4uLL);
    int8x8_t v100 = (int8x8_t)vsub_f32(v92, v97);
    *(float32x2_t *)v101.f32 = v99;
    v101.i64[1] = vsub_f32(v93, v96).u32[0];
    int32x2_t v102 = (int32x2_t)vext_s8(v100, (int8x8_t)vsub_f32(v98, v91), 4uLL);
    int8x8_t v103 = (int8x8_t)vadd_f32(v93, v96);
    *(int8x8_t *)v88.f32 = vext_s8((int8x8_t)vdup_lane_s32((int32x2_t)v99, 0), (int8x8_t)v102, 4uLL);
    int8x8_t v104 = (int8x8_t)vdup_lane_s32(v102, 1);
    *(int32x2_t *)v105.f32 = v102;
    v105.i64[1] = vadd_f32(v95, v94).u32[0];
    *(int8x8_t *)v106.f32 = vext_s8(v103, (int8x8_t)vsub_f32(v95, v94), 4uLL);
    *(int8x8_t *)v107.f32 = vext_s8((int8x8_t)v99, v104, 4uLL);
    v106.i64[1] = vsub_f32(v98, v90).u32[0];
    v88.i64[1] = vdup_lane_s32(*(int32x2_t *)v106.f32, 0).u32[0];
    v107.i64[1] = vdup_lane_s32(*(int32x2_t *)v106.f32, 1).u32[0];
    *(int8x8_t *)v108.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v101.u32[2], 0), *(int8x8_t *)&v105.u32[2], 4uLL);
    v108.i64[1] = vdup_lane_s32(*(int32x2_t *)&v106.u32[2], 0).u32[0];
    float32x4_t v109 = vmulq_n_f32(v88, v62.f32[0]);
    v109.i32[3] = 0;
    float32x4_t v110 = vmulq_lane_f32(v107, *(float32x2_t *)v62.f32, 1);
    v110.i32[3] = 0;
    float32x4_t v111 = vmulq_laneq_f32(v108, v62, 2);
    v111.i32[3] = 0;
    float32x4_t v112 = vmulq_n_f32(v109, v99.f32[0]);
    v112.i32[3] = 0;
    float32x4_t v113 = vmulq_lane_f32(v110, v99, 1);
    v113.i32[3] = 0;
    float32x4_t v114 = vmulq_laneq_f32(v111, v101, 2);
    v114.i32[3] = 0;
    float32x4_t v71 = vaddq_f32(v114, vaddq_f32(v112, v113));
    float32x4_t v115 = vmulq_n_f32(v109, v105.f32[0]);
    v115.i32[3] = 0;
    float32x4_t v58 = vmulq_lane_f32(v110, *(float32x2_t *)v105.f32, 1);
    v58.i32[3] = 0;
    float32x4_t v116 = vmulq_laneq_f32(v111, v105, 2);
    v116.i32[3] = 0;
    float32x4_t v117 = vmulq_n_f32(v109, v106.f32[0]);
    v117.i32[3] = 0;
    float32x4_t v118 = vmulq_lane_f32(v110, *(float32x2_t *)v106.f32, 1);
    v118.i32[3] = 0;
    float32x4_t v70 = vaddq_f32(v116, vaddq_f32(v115, v58));
    float32x4_t v119 = vmulq_laneq_f32(v111, v106, 2);
    v119.i32[3] = 0;
    float32x4_t v77 = vaddq_f32(v119, vaddq_f32(v117, v118));
    float32x4_t v120 = vmulq_n_f32(v88, v82.f32[0]);
    v120.i32[3] = 0;
    float32x4_t v121 = vmulq_lane_f32(v107, *(float32x2_t *)v82.f32, 1);
    v121.i32[3] = 0;
    float32x4_t v122 = vmulq_laneq_f32(v108, v82, 2);
    v122.i32[3] = 0;
    float32x4_t v123 = vmulq_n_f32(v120, v101.f32[0]);
    v123.i32[3] = 0;
    float32x4_t v124 = vmulq_lane_f32(v121, *(float32x2_t *)v101.f32, 1);
    v124.i32[3] = 0;
    float32x4_t v125 = vmulq_laneq_f32(v122, v101, 2);
    v125.i32[3] = 0;
    float32x4_t v79 = vaddq_f32(v125, vaddq_f32(v123, v124));
    float32x4_t v126 = vmulq_n_f32(v120, v105.f32[0]);
    v126.i32[3] = 0;
    float32x4_t v127 = vmulq_lane_f32(v121, *(float32x2_t *)v105.f32, 1);
    v127.i32[3] = 0;
    float32x4_t v128 = vmulq_laneq_f32(v122, v105, 2);
    v128.i32[3] = 0;
    float32x4_t v129 = vmulq_n_f32(v120, v106.f32[0]);
    v129.i32[3] = 0;
    float32x4_t v130 = vmulq_lane_f32(v121, *(float32x2_t *)v106.f32, 1);
    v130.i32[3] = 0;
    float32x4_t v80 = vaddq_f32(v128, vaddq_f32(v126, v127));
    float32x4_t v131 = vmulq_laneq_f32(v122, v106, 2);
    v131.i32[3] = 0;
    float32x4_t v81 = vaddq_f32(v131, vaddq_f32(v129, v130));
  }
  else
  {
    v82.i32[3] = 0;
    float32x4_t v79 = vmulq_f32(v82, (float32x4_t)xmmword_23435FD50);
    float32x4_t v71 = vmulq_f32(v63, (float32x4_t)xmmword_23435FD50);
    float32x4_t v80 = vmulq_f32(v82, (float32x4_t)xmmword_23435FD60);
    float32x4_t v70 = vmulq_f32(v63, (float32x4_t)xmmword_23435FD60);
    float32x4_t v77 = vmulq_f32(v63, (float32x4_t)xmmword_23435FD80);
    float32x4_t v81 = vmulq_f32(v82, (float32x4_t)xmmword_23435FD80);
  }
  float32x4_t v132 = vmulq_f32(v71, (float32x4_t)0);
  v132.i32[3] = 0;
  float32x4_t v133 = vmulq_f32(v70, (float32x4_t)0);
  v133.i32[3] = 0;
  float32x4_t v134 = vmulq_f32(v77, (float32x4_t)0);
  v134.i32[3] = 0;
  float32x4_t v78 = vaddq_f32(vaddq_f32(v132, v133), v134);
LABEL_27:
  v135.i64[0] = __PAIR64__(v76, v75);
  v135.i64[1] = HIDWORD(v76);
  int32x4_t v136 = (int32x4_t)vmulq_f32(v63, v135);
  *(float32x2_t *)v136.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v136, 2), *(float32x2_t *)v136.i8);
  *(float *)v136.i32 = vpmin_f32(*(float32x2_t *)v136.i8, *(float32x2_t *)v136.i8).f32[0];
  uint64_t v137 = *(void *)(v10 + 80);
  v138.i32[1] = 1028443341;
  float32x2_t v213 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v136.i32);
  float v214 = 0.025 * *(float *)v136.i32;
  float32x4_t v217 = v71;
  float32x4_t v218 = v70;
  float32x4_t v219 = v77;
  float32x4_t v220 = v79;
  float32x4_t v221 = v80;
  float32x4_t v222 = v81;
  float v139 = *(float *)(a2 + 4);
  float v140 = *(float *)(a2 + 8);
  float v141 = *(float *)(a2 + 12);
  float v142 = *(float *)(a4 + 16) - *(float *)(a2 + 16);
  v79.f32[0] = *(float *)(a4 + 20) - *(float *)(a2 + 20);
  float v143 = *(float *)(a4 + 24) - *(float *)(a2 + 24);
  float v144 = v142 + v142;
  v79.f32[0] = v79.f32[0] + v79.f32[0];
  float v145 = v143 + v143;
  v135.f32[0] = (float)(v141 * v141) + -0.5;
  float v146 = (float)((float)-(float)(v139 * v79.f32[0]) - (float)(*(float *)a2 * v144)) - (float)(v140 * v145);
  *(float *)&unsigned int v147 = (float)((float)(v141 * (float)((float)(v140 * v79.f32[0]) - (float)(v139 * v145)))
                          + (float)(v144 * v135.f32[0]))
                  - (float)(*(float *)a2 * v146);
  *(float *)&unsigned int v148 = (float)((float)(v141 * (float)((float)(*(float *)a2 * v145) - (float)(v140 * v144)))
                          + (float)(v79.f32[0] * v135.f32[0]))
                  - (float)(v139 * v146);
  *(float *)&unsigned int v149 = (float)((float)(v141 * (float)((float)(v139 * v144) - (float)(*(float *)a2 * v79.f32[0])))
                          + (float)(v145 * v135.f32[0]))
                  - (float)(v140 * v146);
  float v150 = *(float *)(a4 + 8);
  v79.i32[0] = *(_DWORD *)(a4 + 12);
  float v151 = *(float *)(a4 + 4);
  v135.f32[0] = (float)(v141 * *(float *)a4) - (float)(*(float *)a2 * v79.f32[0]);
  v70.f32[0] = (float)((float)((float)(v141 * v151) - (float)(v139 * v79.f32[0])) - (float)(v140 * *(float *)a4))
             + (float)(v150 * *(float *)a2);
  v58.f32[0] = (float)((float)((float)(v141 * v150) - (float)(v140 * v79.f32[0])) - (float)(*(float *)a2 * v151))
             + (float)(*(float *)a4 * v139);
  float v152 = *(float *)a2 * *(float *)a4;
  v136.i32[3] = 0;
  int v215 = 0;
  char v216 = 0;
  uint64_t v223 = v10 + 32;
  uint64_t v224 = v137;
  uint64_t v225 = v72 + 20 * v73;
  char v226 = v74;
  v135.f32[0] = (float)(v135.f32[0] - (float)(v139 * v150)) + (float)(v151 * v140);
  *(float *)v138.i32 = (float)((float)(v152 + (float)(v141 * v79.f32[0])) + (float)(v139 * v151)) + (float)(v140 * v150);
  *(void *)&long long v153 = __PAIR64__(v148, v147);
  *((void *)&v153 + 1) = v149;
  float32x2_t v154 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.f32, 0);
  float32x2_t v155 = (float32x2_t)vdup_lane_s32(v138, 0);
  v79.f32[0] = v135.f32[0] + v135.f32[0];
  v135.f32[0] = v135.f32[0] * (float)(v135.f32[0] + v135.f32[0]);
  float32x2_t v156 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.f32, 0), v70.f32[0] + v70.f32[0]);
  float32x2_t v157 = vmul_n_f32(v154, v58.f32[0] + v58.f32[0]);
  float32x2_t v158 = vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.f32, 0), v70.f32[0]);
  float32x2_t v159 = vmul_n_f32(v154, v79.f32[0]);
  float32x2_t v160 = vmul_n_f32(v155, v79.f32[0]);
  float32x2_t v161 = vmul_n_f32(v154, v70.f32[0] + v70.f32[0]);
  float32x2_t v162 = vmul_n_f32(v155, v70.f32[0] + v70.f32[0]);
  float32x2_t v163 = vmul_n_f32(v155, v58.f32[0] + v58.f32[0]);
  *(float32x2_t *)v135.f32 = vsub_f32(_D0, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v135.f32, 0));
  *(int8x8_t *)&long long v164 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D0, v156), v157), (int8x8_t)vadd_f32(v158, v163), 4uLL);
  *((void *)&v164 + 1) = vsub_f32(v159, v162).u32[0];
  *(int8x8_t *)&long long v165 = vext_s8((int8x8_t)vsub_f32(v158, v163), (int8x8_t)vsub_f32(*(float32x2_t *)v135.f32, v157), 4uLL);
  *((void *)&v165 + 1) = vadd_f32(v160, v161).u32[0];
  *(int8x8_t *)&long long v166 = vext_s8((int8x8_t)vadd_f32(v159, v162), (int8x8_t)vsub_f32(v161, v160), 4uLL);
  *((void *)&v166 + 1) = vsub_f32(*(float32x2_t *)v135.f32, v156).u32[0];
  long long v227 = v164;
  long long v228 = v165;
  long long v229 = v166;
  long long v230 = v153;
  char v235 = v9;
  *(void *)&long long v167 = __PAIR64__(LODWORD(v174), LODWORD(v171));
  *((void *)&v167 + 1) = LODWORD(v177);
  *(void *)&long long v168 = __PAIR64__(LODWORD(v175), LODWORD(v172));
  *((void *)&v168 + 1) = LODWORD(v178);
  *(void *)&long long v169 = __PAIR64__(LODWORD(v176), LODWORD(v173));
  *((void *)&v169 + 1) = LODWORD(v179);
  *(float *)v136.i32 = (float)((float)-(float)(v181 * v172) - (float)(v171 * v180)) - (float)(v173 * v182);
  *(float *)&v136.i32[1] = (float)((float)-(float)(v181 * v175) - (float)(v174 * v180)) - (float)(v176 * v182);
  *(float *)&v136.i32[2] = (float)((float)-(float)(v181 * v178) - (float)(v177 * v180)) - (float)(v179 * v182);
  long long v207 = v167;
  long long v208 = v168;
  long long v209 = v169;
  int32x4_t v210 = v136;
  *(float32x2_t *)&long long v164 = vadd_f32(v183, (float32x2_t)vdup_n_s32(0x3A83126Fu));
  *((float *)&v164 + 2) = v184 + 0.001;
  HIDWORD(v164) = 0;
  long long v211 = v164;
  float32x4_t v212 = v78;
  ((void (*)(uint64_t, float *, void **, uint64_t, void))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v11 + 8) - 3])(v11, &v171, &v205, 1, 0);
  return v234;
}

uint64_t physx::Gu::RTree::load(uint64_t a1, void (***a2)(uint64_t (***)(void, uint64_t, uint64_t), unsigned int *, uint64_t), uint64_t a3, int a4)
{
  if ((*(unsigned char *)(a1 + 84) & 1) == 0)
  {
    uint64_t v7 = *(void *)(a1 + 88);
    if (v7)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7 - *(void *)(v7 - 8));
      *(void *)(a1 + 88) = 0;
    }
  }
  int v15 = 0;
  physx::readChunk((uint64_t)&v15 + 3, (uint64_t)&v15 + 2, (uint64_t)&v15 + 1, (uint64_t)&v15, (uint64_t (***)(void, uint64_t, uint64_t))a2);
  uint64_t result = 0;
  if (HIBYTE(v15) == 82 && BYTE2(v15) == 84 && BYTE1(v15) == 82 && v15 == 69)
  {
    unsigned int v16 = 0;
    (**a2)((uint64_t (***)(void, uint64_t, uint64_t))a2, &v16, 4);
    unsigned int v9 = v16;
    int v10 = 1;
    if (v16 == 1 || v16 == 0x1000000) {
      goto LABEL_13;
    }
    unsigned int v11 = bswap32(v16);
    if (a4) {
      unsigned int v9 = v11;
    }
    int v10 = a4;
    if (v9 <= 3)
    {
LABEL_13:
      physx::readFloatBuffer((__int32 *)a1, 4u, v10, (void (***)(void, __int32 *, void))a2);
      physx::readFloatBuffer((__int32 *)(a1 + 16), 4u, v10, (void (***)(void, __int32 *, void))a2);
      physx::readFloatBuffer((__int32 *)(a1 + 32), 4u, v10, (void (***)(void, __int32 *, void))a2);
      physx::readFloatBuffer((__int32 *)(a1 + 48), 4u, v10, (void (***)(void, __int32 *, void))a2);
      *(_DWORD *)(a1 + 64) = physx::readDword(v10, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      *(_DWORD *)(a1 + 68) = physx::readDword(v10, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      *(_DWORD *)(a1 + 72) = physx::readDword(v10, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      *(_DWORD *)(a1 + 76) = physx::readDword(v10, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      *(_DWORD *)(a1 + 80) = physx::readDword(v10, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      physx::readDword(v10, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      *(void *)(a1 + 88) = physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::NonTrackingAllocator>::allocate((uint64_t)&v14, 112 * *(unsigned int *)(a1 + 80), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuRTree.cpp", 87);
      if (*(_DWORD *)(a1 + 80))
      {
        unint64_t v12 = 0;
        uint64_t v13 = 96;
        do
        {
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 88) + v13 - 96), 4u, v10, (void (***)(void, __int32 *, void))a2);
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 88) + v13 - 80), 4u, v10, (void (***)(void, __int32 *, void))a2);
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 88) + v13 - 64), 4u, v10, (void (***)(void, __int32 *, void))a2);
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 88) + v13 - 48), 4u, v10, (void (***)(void, __int32 *, void))a2);
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 88) + v13 - 32), 4u, v10, (void (***)(void, __int32 *, void))a2);
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 88) + v13 - 16), 4u, v10, (void (***)(void, __int32 *, void))a2);
          physx::readFloatBuffer((__int32 *)(*(void *)(a1 + 88) + v13), 4u, v10, (void (***)(void, __int32 *, void))a2);
          ++v12;
          v13 += 112;
        }
        while (v12 < *(unsigned int *)(a1 + 80));
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::NonTrackingAllocator>::allocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 + 135;
  if (!v4) {
    return 0;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                       + 16))(physx::shdfnd::Foundation::mInstance + 24, v4, "NonTrackedAlloc", a3, a4);
  if (result)
  {
    unint64_t v6 = result;
    unint64_t result = (result + 135) & 0xFFFFFFFFFFFFFF80;
    *(void *)(result - 8) = result - v6;
  }
  return result;
}

uint64_t physx::Gu::RTree::refitAllStaticTree(uint64_t result, uint64_t (***a2)(void, void, long long *, long long *), float *a3)
{
  uint64_t v57 = result;
  uint64_t v3 = *(unsigned int *)(result + 80);
  if ((int)v3 >= 1)
  {
    uint64_t v5 = *(void *)(result + 88) + 48;
    do
    {
      uint64_t v6 = 0;
      uint64_t v7 = v3--;
      uint64_t v8 = *(void *)(v57 + 88);
      uint64_t v9 = v8 + 112 * v3;
      do
      {
        float v10 = *(float *)(v9 + 4 * v6);
        uint64_t v11 = v8 + 112 * v3 + 4 * v6;
        float v13 = *(float *)(v11 + 48);
        unint64_t v12 = (float *)(v11 + 48);
        float v14 = v13;
        if (v10 <= v13)
        {
          uint64_t v15 = v8 + 112 * v3 + 4 * v6;
          unsigned int v18 = *(_DWORD *)(v15 + 96);
          unsigned int v16 = (_DWORD *)(v15 + 96);
          uint64_t v17 = v18;
          if (v18)
          {
            long long v58 = 0u;
            long long v59 = 0u;
            unint64_t result = (**a2)(a2, (*v16 - 1), &v59, &v58);
            uint64_t v33 = *(void *)((char *)&v59 + 4);
            uint64_t v34 = v58;
            int v35 = DWORD2(v58);
            *(_DWORD *)(v9 + 4 * v6) = v59;
            float v36 = (_DWORD *)(v8 + 112 * v3 + 4 * v6);
            v36[4] = v33;
            v36[8] = HIDWORD(v33);
            *(_DWORD *)unint64_t v12 = v34;
            v36[16] = HIDWORD(v34);
            v36[20] = v35;
          }
          else
          {
            uint64_t v19 = 0;
            uint64_t v20 = v8 + 112 * v3 + 4 * v6;
            float v21 = (float *)(v20 + 16);
            float v22 = (float *)(v20 + 32);
            float v23 = (float *)(v20 + 64);
            float v24 = (float *)(v20 + 80);
            uint64_t v25 = v5 + v17;
            char v26 = 1;
            do
            {
              float v27 = *(float *)(v25 + v19 - 48);
              if (v27 <= *(float *)(v25 + v19))
              {
                if (v26)
                {
                  *(float *)(v9 + 4 * v6) = v27;
                  *float v21 = *(float *)(v25 + v19 - 32);
                  *float v22 = *(float *)(v25 + v19 - 16);
                  float v14 = *(float *)(v25 + v19);
                  *unint64_t v12 = v14;
                  *float v23 = *(float *)(v25 + v19 + 16);
                  float v28 = *(float *)(v25 + v19 + 32);
                }
                else
                {
                  if (v10 < v27) {
                    float v27 = v10;
                  }
                  *(float *)(v9 + 4 * v6) = v27;
                  float v29 = *v21;
                  int v30 = (float *)(v25 + v19);
                  if (*v21 >= *(float *)(v25 + v19 - 32)) {
                    float v29 = *(float *)(v25 + v19 - 32);
                  }
                  *float v21 = v29;
                  float v31 = *v22;
                  if (*v22 >= *(v30 - 4)) {
                    float v31 = *(v30 - 4);
                  }
                  *float v22 = v31;
                  if (v14 <= *v30) {
                    float v14 = *v30;
                  }
                  *unint64_t v12 = v14;
                  float v32 = *v23;
                  if (*v23 <= v30[4]) {
                    float v32 = v30[4];
                  }
                  *float v23 = v32;
                  float v28 = *v24;
                  if (*v24 <= v30[8]) {
                    float v28 = v30[8];
                  }
                }
                char v26 = 0;
                *float v24 = v28;
                float v10 = v27;
              }
              v19 += 4;
            }
            while (v19 != 16);
          }
        }
        ++v6;
      }
      while (v6 != 4);
    }
    while (v7 > 1);
  }
  if (a3)
  {
    uint64_t v37 = *(unsigned int *)(v57 + 68);
    if (v37)
    {
      uint64_t v38 = 0;
      float v39 = a3[4];
      float v40 = a3[5];
      float v42 = *a3;
      float v41 = a3[1];
      float v44 = a3[2];
      float v43 = a3[3];
      uint64_t v45 = *(void *)(v57 + 88) + 48;
      do
      {
        uint64_t v46 = -16;
        float v47 = 3.4028e38;
        float v48 = -3.4028e38;
        float v49 = -3.4028e38;
        float v50 = -3.4028e38;
        float v51 = 3.4028e38;
        float v52 = 3.4028e38;
        do
        {
          float v53 = (float *)(v45 + v46);
          float v54 = *(float *)(v45 + v46 - 32);
          float v55 = *(float *)(v45 + v46 + 16);
          if (v54 <= v55)
          {
            if (v52 >= v54) {
              float v52 = *(float *)(v45 + v46 - 32);
            }
            if (v51 >= *(v53 - 4)) {
              float v51 = *(v53 - 4);
            }
            if (v47 >= *v53) {
              float v47 = *v53;
            }
            if (v50 <= v55) {
              float v50 = *(float *)(v45 + v46 + 16);
            }
            if (v49 <= v53[8]) {
              float v49 = v53[8];
            }
            if (v48 <= v53[12]) {
              float v48 = v53[12];
            }
          }
          v46 += 4;
        }
        while (v46);
        if (v42 >= v52) {
          float v42 = v52;
        }
        if (v41 >= v51) {
          float v41 = v51;
        }
        if (v44 >= v47) {
          float v44 = v47;
        }
        if (v43 <= v50) {
          float v43 = v50;
        }
        if (v39 <= v49) {
          float v39 = v49;
        }
        if (v40 <= v48) {
          float v40 = v48;
        }
        if (!v38)
        {
          float v42 = v52;
          float v41 = v51;
          float v44 = v47;
          float v43 = v50;
          float v39 = v49;
        }
        *a3 = v42;
        a3[1] = v41;
        if (!v38) {
          float v40 = v48;
        }
        a3[2] = v44;
        a3[3] = v43;
        a3[4] = v39;
        a3[5] = v40;
        ++v38;
        v45 += 112;
      }
      while (v38 != v37);
    }
  }
  return result;
}

uint64_t physx::Gu::RTree::traverseRay<0>(uint64_t result, uint64_t a2, uint64_t a3, float32_t a4, uint64_t a5, uint64_t a6, uint64_t (***a7)(void, uint64_t, _DWORD *, float *))
{
  v63[63] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(unsigned int *)(result + 68);
  if ((int)v8 - 1 >= 0)
  {
    v7.f32[0] = a4;
    uint64_t v10 = *(void *)(result + 88);
    float32x4_t v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0);
    v12.i64[0] = *(void *)a2;
    v12.i64[1] = *(unsigned int *)(a2 + 8);
    v13.i64[0] = *(void *)a3;
    v13.i64[1] = *(unsigned int *)(a3 + 8);
    v14.i64[0] = 0x8000000080000000;
    v14.i64[1] = 0x8000000080000000;
    float32x4_t v15 = (float32x4_t)vorrq_s8(vandq_s8(v13, v14), (int8x16_t)vmaxq_f32(vabsq_f32((float32x4_t)v13), (float32x4_t)vdupq_n_s32(0x3089705Fu)));
    float32x4_t v16 = vrecpeq_f32(v15);
    float32x4_t v17 = vmulq_f32(v16, vrecpsq_f32(v16, v15));
    v18.i64[0] = 0x4000000040000000;
    v18.i64[1] = 0x4000000040000000;
    float32x4_t v19 = vmulq_f32(v17, vmlsq_f32(v18, v17, v15));
    int32x4_t v20 = (int32x4_t)vmlsq_f32((float32x4_t)0, v12, v19);
    float32x4_t v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1);
    float32x4_t v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0);
    float32x4_t v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
    float32x4_t v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2);
    float32x4_t v53 = (float32x4_t)vdupq_laneq_s32(v20, 2);
    float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
    uint64_t v21 = (v8 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v22 = (uint64x2_t)vdupq_n_s64(v8 - 1);
    float v23 = v63;
    int v24 = 112 * v8 - 112;
    int64x2_t v25 = (int64x2_t)xmmword_234361D20;
    int64x2_t v26 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v27 = vmovn_s64((int64x2_t)vcgeq_u64(v22, (uint64x2_t)v25));
      if (v27.i8[0]) {
        *(v23 - 1) = v24;
      }
      if (v27.i8[4]) {
        *float v23 = v24 - 112;
      }
      int64x2_t v25 = vaddq_s64(v25, v26);
      v23 += 2;
      v24 -= 224;
      v21 -= 2;
    }
    while (v21);
    float32x4_t v52 = (float32x4_t)vdupq_n_s32(0x3089705Fu);
    do
    {
      while (1)
      {
        uint64_t v28 = (v8 - 1);
        uint64_t v29 = v62[v28 + 2];
        if (v29) {
          break;
        }
        int v30 = (float32x4_t *)(v10 + v29);
        float32x4_t v31 = v30[3];
        int8x16_t v32 = (int8x16_t)vcgtq_f32(*v30, v31);
        float32x4_t v33 = vmlaq_f32(v55, v58, *v30);
        float32x4_t v34 = vmlaq_f32(v54, v57, v30[1]);
        float32x4_t v35 = vmlaq_f32(v53, v56, v30[2]);
        float32x4_t v36 = vmlaq_f32(v55, v58, v31);
        float32x4_t v37 = vmlaq_f32(v54, v57, v30[4]);
        float32x4_t v38 = vmlaq_f32(v53, v56, v30[5]);
        float32x4_t v39 = vminq_f32(v33, v36);
        float32x4_t v40 = vmaxq_f32(v33, v36);
        float32x4_t v41 = vminq_f32(v34, v37);
        float32x4_t v42 = vmaxq_f32(v34, v37);
        float32x4_t v43 = vmaxq_f32(vmaxq_f32(v39, v41), vminq_f32(v35, v38));
        float32x4_t v44 = vminq_f32(vminq_f32(v40, v42), vmaxq_f32(v35, v38));
        int8x16_t v45 = vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v43, v11), v32), vorrq_s8((int8x16_t)vcgtq_f32(v52, v44), (int8x16_t)vcgtq_f32(v43, v44)));
        __int32 v46 = v30[6].i32[1];
        v62[v28 + 2] = v30[6].i32[0];
        int v47 = v45.i32[0] + v8;
        v62[v47 + 2] = v46;
        int v48 = v45.i32[1] + v47 + 1;
        __int32 v49 = v30[6].i32[2];
        LODWORD(v30) = v30[6].i32[3];
        v62[v48 + 2] = v49;
        int v50 = v45.i32[2] + v48 + 1;
        v62[v50 + 2] = v30;
        LODWORD(v8) = v45.i32[3] + v50 + 1;
        if (!v8) {
          return result;
        }
      }
      int8x16_t v60 = (int8x16_t)v11;
      v62[0] = v29 - 1;
      float v61 = v7.f32[0];
      float32x4_t v59 = v7;
      unint64_t result = (**a7)(a7, 1, v62, &v61);
      if (!result) {
        break;
      }
      v51.f32[0] = v61;
      float32x4_t v7 = v59;
      float32x4_t v11 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v59, v51)), 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 0), v60);
      if (v59.f32[0] != v61) {
        v7.f32[0] = v61;
      }
      LODWORD(v8) = v28;
    }
    while (v28);
  }
  return result;
}

uint64_t physx::Gu::RTree::traverseRay<1>(uint64_t result, uint64_t a2, uint64_t a3, float32_t a4, uint64_t a5, uint64_t a6, uint64_t (***a7)(void, uint64_t, _DWORD *, float *), uint64_t a8)
{
  v68[63] = *MEMORY[0x263EF8340];
  uint64_t v9 = *(unsigned int *)(result + 68);
  if ((int)v9 - 1 >= 0)
  {
    v8.f32[0] = a4;
    uint64_t v11 = *(void *)(result + 88);
    v12.i64[0] = *(void *)a8;
    v12.i64[1] = *(unsigned int *)(a8 + 8);
    float32x4_t v13 = vaddq_f32(v12, (float32x4_t)vdupq_n_s32(0x33D6BF95u));
    float32x4_t v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1);
    float32x4_t v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
    float32x4_t v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
    float32x4_t v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
    v13.i64[0] = *(void *)a2;
    v13.i64[1] = *(unsigned int *)(a2 + 8);
    v15.i64[0] = *(void *)a3;
    v15.i64[1] = *(unsigned int *)(a3 + 8);
    v16.i64[0] = 0x8000000080000000;
    v16.i64[1] = 0x8000000080000000;
    float32x4_t v17 = (float32x4_t)vorrq_s8(vandq_s8(v15, v16), (int8x16_t)vmaxq_f32(vabsq_f32((float32x4_t)v15), (float32x4_t)vdupq_n_s32(0x3089705Fu)));
    float32x4_t v18 = vrecpeq_f32(v17);
    float32x4_t v19 = vmulq_f32(v18, vrecpsq_f32(v18, v17));
    v20.i64[0] = 0x4000000040000000;
    v20.i64[1] = 0x4000000040000000;
    float32x4_t v21 = vmulq_f32(v19, vmlsq_f32(v20, v19, v17));
    int32x4_t v22 = (int32x4_t)vmlsq_f32((float32x4_t)0, v13, v21);
    float32x4_t v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1);
    float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 0);
    float32x4_t v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    float32x4_t v58 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2);
    float32x4_t v55 = (float32x4_t)vdupq_laneq_s32(v22, 2);
    float32x4_t v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
    uint64_t v23 = (v9 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v24 = (uint64x2_t)vdupq_n_s64(v9 - 1);
    int64x2_t v25 = v68;
    int v26 = 112 * v9 - 112;
    int64x2_t v27 = (int64x2_t)xmmword_234361D20;
    int64x2_t v28 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v29 = vmovn_s64((int64x2_t)vcgeq_u64(v24, (uint64x2_t)v27));
      if (v29.i8[0]) {
        *(v25 - 1) = v26;
      }
      if (v29.i8[4]) {
        *int64x2_t v25 = v26 - 112;
      }
      int64x2_t v27 = vaddq_s64(v27, v28);
      v25 += 2;
      v26 -= 224;
      v23 -= 2;
    }
    while (v23);
    float32x4_t v54 = (float32x4_t)vdupq_n_s32(0x3089705Fu);
    do
    {
      while (1)
      {
        uint64_t v30 = (v9 - 1);
        uint64_t v31 = v67[v30 + 2];
        if (v31) {
          break;
        }
        int8x16_t v32 = (float32x4_t *)(v11 + v31);
        float32x4_t v33 = v32[3];
        int8x16_t v34 = (int8x16_t)vcgtq_f32(*v32, v33);
        float32x4_t v35 = vmlaq_f32(v57, v60, vsubq_f32(*v32, v63));
        float32x4_t v36 = vmlaq_f32(v56, v59, vsubq_f32(v32[1], v62));
        float32x4_t v37 = vmlaq_f32(v55, v58, vsubq_f32(v32[2], v61));
        float32x4_t v38 = vmlaq_f32(v57, v60, vaddq_f32(v63, v33));
        float32x4_t v39 = vmlaq_f32(v56, v59, vaddq_f32(v62, v32[4]));
        float32x4_t v40 = vmlaq_f32(v55, v58, vaddq_f32(v61, v32[5]));
        float32x4_t v41 = vminq_f32(v35, v38);
        float32x4_t v42 = vmaxq_f32(v35, v38);
        float32x4_t v43 = vminq_f32(v36, v39);
        float32x4_t v44 = vmaxq_f32(v36, v39);
        float32x4_t v45 = vmaxq_f32(vmaxq_f32(v41, v43), vminq_f32(v37, v40));
        float32x4_t v46 = vminq_f32(vminq_f32(v42, v44), vmaxq_f32(v37, v40));
        int8x16_t v47 = vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v45, v14), v34), vorrq_s8((int8x16_t)vcgtq_f32(v54, v46), (int8x16_t)vcgtq_f32(v45, v46)));
        __int32 v48 = v32[6].i32[1];
        v67[v30 + 2] = v32[6].i32[0];
        int v49 = v47.i32[0] + v9;
        v67[v49 + 2] = v48;
        int v50 = v47.i32[1] + v49 + 1;
        __int32 v51 = v32[6].i32[2];
        LODWORD(v32) = v32[6].i32[3];
        v67[v50 + 2] = v51;
        int v52 = v47.i32[2] + v50 + 1;
        v67[v52 + 2] = v32;
        LODWORD(v9) = v47.i32[3] + v52 + 1;
        if (!v9) {
          return result;
        }
      }
      int8x16_t v65 = (int8x16_t)v14;
      v67[0] = v31 - 1;
      float v66 = v8.f32[0];
      float32x4_t v64 = v8;
      unint64_t result = (**a7)(a7, 1, v67, &v66);
      if (!result) {
        break;
      }
      v53.f32[0] = v66;
      float32x4_t v8 = v64;
      float32x4_t v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v64, v53)), 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0), v65);
      if (v64.f32[0] != v66) {
        v8.f32[0] = v66;
      }
      LODWORD(v9) = v30;
    }
    while (v30);
  }
  return result;
}

uint64_t physx::Gu::RTree::traverseAABB(uint64_t result, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t (***a6)(void, uint64_t, unsigned int *))
{
  v35[63] = *MEMORY[0x263EF8340];
  int32x2_t v7 = *(int32x2_t *)a2;
  int32x2_t v8 = *(int32x2_t *)((char *)a2 + 4);
  int32x2_t v9 = *(int32x2_t *)a3;
  int32x2_t v10 = *(int32x2_t *)((char *)a3 + 4);
  uint64_t v11 = *(unsigned int *)(result + 68);
  if ((int)v11 - 1 < 0)
  {
    uint64_t v13 = 1;
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = v11 + 1;
    uint64_t v14 = (v11 + 1) & 0xFFFFFFFELL;
    uint64x2_t v15 = (uint64x2_t)vdupq_n_s64(v11 - 1);
    int v16 = 112 * v11 - 224;
    float32x4_t v17 = v35;
    do
    {
      int32x2_t v18 = vmovn_s64((int64x2_t)vcgeq_u64(v15, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v12), (int8x16_t)xmmword_234361D20)));
      if (v18.i8[0]) {
        *(v17 - 1) = v16 + 112;
      }
      if (v18.i8[4]) {
        *float32x4_t v17 = v16;
      }
      v12 += 2;
      v16 -= 224;
      v17 += 2;
    }
    while (v14 != v12);
  }
  uint64_t v19 = 0;
  float32x4_t v31 = (float32x4_t)vdupq_lane_s32(v8, 0);
  float32x4_t v32 = (float32x4_t)vdupq_lane_s32(v7, 0);
  float32x4_t v29 = (float32x4_t)vdupq_lane_s32(v9, 0);
  float32x4_t v30 = (float32x4_t)vdupq_lane_s32(v8, 1);
  float32x4_t v27 = (float32x4_t)vdupq_lane_s32(v10, 1);
  float32x4_t v28 = (float32x4_t)vdupq_lane_s32(v10, 0);
  int v20 = 1;
  uint64_t v21 = *(void *)(result + 88);
  do
  {
    --v13;
    uint64_t v22 = v19;
    if (!v20) {
      uint64_t v22 = *((unsigned int *)&v34[1] + v13 + 2);
    }
    uint64_t v23 = 0;
    int v20 = 0;
    uint64x2_t v24 = (float32x4_t *)(v21 + v22);
    int64x2_t v25 = v24 + 6;
    v34[0] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v24[1], v28), (int8x16_t)vcgtq_f32(*v24, v29)), vorrq_s8((int8x16_t)vcgtq_f32(v24[2], v27), (int8x16_t)vcgtq_f32(v32, v24[3]))), vorrq_s8((int8x16_t)vcgtq_f32(v31, v24[4]), (int8x16_t)vcgtq_f32(v30, v24[5])));
    do
    {
      __int32 v26 = v25->i32[v23];
      unsigned int v33 = v26 & 0xFFFFFFFE;
      if (!*(_DWORD *)((char *)v34 + v23 * 4))
      {
        if (v26)
        {
          unint64_t result = (**a6)(a6, 1, &v33);
          if ((result & 1) == 0) {
            return result;
          }
        }
        else
        {
          *((_DWORD *)&v34[1] + v13++ + 2) = v26 & 0xFFFFFFFE;
          int v20 = 1;
          uint64_t v19 = v26 & 0xFFFFFFFE;
        }
      }
      ++v23;
    }
    while (v23 != 4);
  }
  while (v13 > 1);
  return result;
}

uint64_t physx::Gu::RTree::traverseOBB(uint64_t this, const physx::Gu::Box *a2, unsigned int a3, unsigned int *a4, physx::Gu::RTree::Callback *a5)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(this + 88);
  long long v9 = *(_OWORD *)((char *)a2 + 36);
  long long v10 = *(_OWORD *)((char *)a2 + 40);
  int32x2_t v11 = *(int32x2_t *)((char *)a2 + 48);
  float32x2_t v12 = *(float32x2_t *)((char *)a2 + 52);
  int32x2_t v13 = (int32x2_t)*(unsigned int *)a2;
  float32x4_t v14 = (float32x4_t)*(unsigned int *)a2;
  v14.i32[1] = *((_DWORD *)a2 + 1);
  float32x4_t v15 = v14;
  v15.i32[2] = *((_DWORD *)a2 + 2);
  v5.i32[0] = *((_DWORD *)a2 + 3);
  float32x4_t v16 = v5;
  v16.i32[1] = *((_DWORD *)a2 + 4);
  float32x4_t v17 = v16;
  v17.i32[2] = *((_DWORD *)a2 + 5);
  v6.i32[0] = *((_DWORD *)a2 + 6);
  float32x4_t v18 = v6;
  v18.i32[1] = *((_DWORD *)a2 + 7);
  float32x4_t v19 = v18;
  v19.i32[2] = *((_DWORD *)a2 + 8);
  int v20 = *(_DWORD *)(this + 68);
  if (v20 - 1 < 0)
  {
    uint64_t v22 = v122;
  }
  else
  {
    int v21 = 112 * v20 - 112;
    uint64_t v22 = v122;
    do
    {
      *v22++ = v21;
      v21 -= 112;
      --v20;
    }
    while (v20);
  }
  uint64_t v23 = 0;
  float32x4_t v117 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v9, 0);
  float32x4_t v116 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v10, 0);
  float32x4_t v114 = (float32x4_t)vdupq_lane_s32(v13, 0);
  float32x4_t v115 = (float32x4_t)vdupq_lane_s32((int32x2_t)(v10 >> 32), 0);
  float32x4_t v112 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2);
  float32x4_t v113 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1);
  float32x4_t v110 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1);
  float32x4_t v111 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
  float32x4_t v108 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0);
  float32x4_t v109 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2);
  float32x4_t v106 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2);
  float32x4_t v107 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1);
  float32x4_t v105 = (float32x4_t)vdupq_lane_s32(v11, 0);
  float32x4_t v103 = (float32x4_t)vdupq_lane_s32((int32x2_t)v12, 0);
  float32x4_t v104 = vsubq_f32((float32x4_t)0, v105);
  float32x4_t v102 = vsubq_f32((float32x4_t)0, v103);
  int32x4_t v24 = (int32x4_t)vmlaq_n_f32((float32x4_t)0, v15, *(float *)v11.i32);
  float32x4_t v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 0);
  float32x4_t v101 = (float32x4_t)vdupq_lane_s32((int32x2_t)v12, 1);
  int32x4_t v25 = (int32x4_t)vmlaq_n_f32((float32x4_t)0, v17, v12.f32[0]);
  float32x4_t v98 = (float32x4_t)vdupq_laneq_s32(v24, 2);
  float32x4_t v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1);
  float32x4_t v96 = vsubq_f32((float32x4_t)0, v101);
  float32x4_t v97 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 0);
  int32x4_t v26 = (int32x4_t)vmlaq_lane_f32((float32x4_t)0, v19, v12, 1);
  float32x4_t v94 = (float32x4_t)vdupq_laneq_s32(v25, 2);
  float32x4_t v95 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1);
  int v27 = 1;
  float32x4_t v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1);
  float32x4_t v93 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0);
  float32x4_t v91 = (float32x4_t)vdupq_laneq_s32(v26, 2);
  do
  {
    --v22;
    uint64_t v28 = v23;
    if (!v27) {
      uint64_t v28 = *v22;
    }
    uint64_t v29 = 0;
    int v27 = 0;
    float32x4_t v30 = (float32x4_t *)(v8 + v28);
    float32x4_t v31 = v30[1];
    float32x4_t v33 = v30[2];
    float32x4_t v32 = v30[3];
    float32x4_t v34 = v30[4];
    float32x4_t v35 = v30[5];
    float32x4_t v36 = vmaxq_f32(*v30, vminq_f32(v32, v117));
    float32x4_t v37 = vmaxq_f32(v31, vminq_f32(v34, v116));
    float32x4_t v38 = vmaxq_f32(v33, vminq_f32(v35, v115));
    float32x4_t v39 = vsubq_f32(v36, v117);
    float32x4_t v40 = vsubq_f32(v37, v116);
    float32x4_t v41 = vsubq_f32(v38, v115);
    float32x4_t v42 = vmaxq_f32(v104, vminq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v112, v41), v113, v40), v114, v39), v105));
    float32x4_t v43 = vmaxq_f32(v102, vminq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v109, v41), v110, v40), v111, v39), v103));
    float32x4_t v44 = vmaxq_f32(v96, vminq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v106, v41), v107, v40), v108, v39), v101));
    float32x4_t v45 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v117, v108, v44), v111, v43), v114, v42);
    float32x4_t v46 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v116, v107, v44), v110, v43), v113, v42);
    float32x4_t v47 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v115, v106, v44), v109, v43), v112, v42);
    float32x4_t v118 = vmaxq_f32(v33, vminq_f32(v35, v47));
    float32x4_t v119 = vmaxq_f32(v31, vminq_f32(v34, v46));
    v48.i64[0] = 0x3F0000003F000000;
    v48.i64[1] = 0x3F0000003F000000;
    float32x4_t v49 = vmlaq_f32((float32x4_t)0, v48, vaddq_f32(*v30, v32));
    float32x4_t v50 = vmlaq_f32((float32x4_t)0, v48, vaddq_f32(v31, v34));
    float32x4_t v51 = vmlaq_f32((float32x4_t)0, v48, vaddq_f32(v33, v35));
    float32x4_t v52 = vsubq_f32(v32, v49);
    float32x4_t v53 = vsubq_f32(v34, v50);
    float32x4_t v54 = vsubq_f32(v35, v51);
    float32x4_t v55 = vsubq_f32(v45, v36);
    float32x4_t v56 = vsubq_f32(v46, v37);
    float32x4_t v57 = vsubq_f32(v47, v38);
    float32x4_t v58 = vmlaq_f32((float32x4_t)0, v54, v57);
    float32x4_t v59 = vmlaq_f32((float32x4_t)0, v51, v57);
    float32x4_t v60 = vmlaq_f32((float32x4_t)0, v98, v57);
    float32x4_t v61 = vmlaq_f32((float32x4_t)0, v94, v57);
    float32x4_t v62 = vmlaq_f32((float32x4_t)0, v91, v57);
    float32x4_t v63 = vmlaq_f32((float32x4_t)0, v115, v57);
    float32x4_t v64 = vmlaq_f32((float32x4_t)0, v53, v56);
    float32x4_t v65 = vmlaq_f32(v59, v50, v56);
    float32x4_t v66 = vmlaq_f32(v60, v99, v56);
    float32x4_t v67 = vmlaq_f32(v61, v95, v56);
    float32x4_t v68 = vmlaq_f32(v62, v92, v56);
    float32x4_t v69 = vmlaq_f32(v63, v116, v56);
    float32x4_t v70 = vmlaq_f32((float32x4_t)0, v52, v55);
    float32x4_t v71 = vmlaq_f32(v66, v100, v55);
    float32x4_t v72 = vmlaq_f32(v67, v97, v55);
    float32x4_t v73 = vmlaq_f32(v68, v93, v55);
    float32x4_t v74 = vabdq_f32(vmlaq_f32(v65, v49, v55), vmlaq_f32(v69, v117, v55));
    float32x4_t v75 = vaddq_f32(vaddq_f32(vabsq_f32(v70), vabsq_f32(v64)), vabsq_f32(v58));
    float32x4_t v76 = (float32x4_t)vdupq_n_s32(0xB58637BD);
    float32x4_t v77 = vsubq_f32(v45, vmaxq_f32(*v30, vminq_f32(v32, v45)));
    float32x4_t v78 = vsubq_f32(v46, v119);
    float32x4_t v79 = vsubq_f32(v47, v118);
    float32x4_t v80 = vmlaq_f32((float32x4_t)0, v52, v77);
    float32x4_t v81 = vmlaq_f32((float32x4_t)0, v54, v79);
    float32x4_t v82 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v51, v79), v50, v78), v49, v77);
    float32x4_t v83 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v98, v79), v99, v78), v100, v77);
    float32x4_t v84 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v94, v79), v95, v78), v97, v77);
    float32x4_t v85 = vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v91, v79), v92, v78), v93, v77);
    float32x4_t v86 = vabdq_f32(v82, vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)0, v115, v79), v116, v78), v117, v77));
    float32x4_t v87 = (float32x4_t)vdupq_n_s32(0x358637BDu);
    int8x16_t v88 = (int8x16_t)vmovl_u16((uint16x4_t)vmvn_s8((int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vcgtq_f32(vaddq_f32(v74, v76), vaddq_f32(v75, vaddq_f32(vaddq_f32(vabsq_f32(v71), vabsq_f32(v72)), vabsq_f32(v73)))), (int8x16_t)vcgtq_f32(v74, v87)), (int8x16_t)vcgtq_f32(*v30, v32)), vandq_s8((int8x16_t)vcgtq_f32(vaddq_f32(v86, v76), vaddq_f32(vaddq_f32(vaddq_f32(vabsq_f32(v80), vabsq_f32(vmlaq_f32((float32x4_t)0, v53, v78))), vabsq_f32(v81)), vaddq_f32(vaddq_f32(vabsq_f32(v83), vabsq_f32(v84)), vabsq_f32(v85)))), (int8x16_t)vcgtq_f32(v86, v87))))));
    v32.i64[0] = 0x100000001;
    v32.i64[1] = 0x100000001;
    int8x16_t v121 = vandq_s8(v88, (int8x16_t)v32);
    float32x2_t v89 = v30 + 6;
    do
    {
      __int32 v90 = v89->i32[v29];
      unsigned int v120 = v90 & 0xFFFFFFFE;
      if (v121.i32[v29])
      {
        if (v90)
        {
          this = (**(uint64_t (***)(physx::Gu::RTree::Callback *, uint64_t, unsigned int *, unsigned int *))a5)(a5, 1, &v120, a4);
          if ((this & 1) == 0) {
            return this;
          }
        }
        else
        {
          *v22++ = v90 & 0xFFFFFFFE;
          uint64_t v23 = v120;
          int v27 = 1;
        }
      }
      ++v29;
    }
    while (v29 != 4);
  }
  while (v22 > v122);
  return this;
}

uint64_t physx::Gu::unsupportedBoxOverlapMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

{
  char vars0;

  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t physx::Gu::unsupportedCapsuleOverlapMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t physx::Gu::unsupportedSphereOverlapMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

void anonymous namespace'::HfTrianglesEntityReport2::~HfTrianglesEntityReport2(_anonymous_namespace_::HfTrianglesEntityReport2 *this)
{
}

uint64_t anonymous namespace'::HfTrianglesEntityReport2::onEvent(float32x4_t *this, unsigned int a2, unsigned int *a3)
{
  if (!this[7].i8[0])
  {
    long long v22 = xmmword_23435FBB0;
    uint64_t v23 = 0;
    int v24 = 0;
    if (a2)
    {
      uint64_t v10 = a2;
      do
      {
        physx::Gu::HeightFieldUtil::getTriangle(this[2].i64[1], (float *)&v22, (uint64_t)v19, 0, 0, *a3, 0, 0);
        if (physx::Gu::intersectTriangleBox(this + 3, v19, &v20, &v21, v11, v12, v13))
        {
          uint64_t v14 = this[1].u32[0];
          if (v14 >= this[1].i32[1]) {
            goto LABEL_18;
          }
          unsigned __int32 v15 = this[1].u32[3];
          if (v15 >= this[1].i32[2])
          {
            unsigned int v16 = *a3;
            uint64_t v17 = this->i64[1];
            this[1].i32[0] = v14 + 1;
            *(_DWORD *)(v17 + 4 * v14) = v16;
          }
          else
          {
            this[1].i32[3] = v15 + 1;
          }
        }
        ++a3;
        --v10;
      }
      while (v10);
    }
    return 1;
  }
  if (!a2) {
    return 1;
  }
  while (1)
  {
    uint64_t v5 = this[1].u32[0];
    if (v5 >= this[1].i32[1]) {
      break;
    }
    int v7 = *a3++;
    int v6 = v7;
    unsigned __int32 v8 = this[1].u32[3];
    if (v8 >= this[1].i32[2])
    {
      uint64_t v9 = this->i64[1];
      this[1].i32[0] = v5 + 1;
      *(_DWORD *)(v9 + 4 * v5) = v6;
    }
    else
    {
      this[1].i32[3] = v8 + 1;
    }
    if (!--a2) {
      return 1;
    }
  }
LABEL_18:
  uint64_t result = 0;
  this[2].i8[0] = 1;
  return result;
}

uint64_t ConvexVsMeshOverlapCallback::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5)
{
  uint64_t v203 = *MEMORY[0x263EF8340];
  float32x4_t v5 = (float32x4_t)*(unsigned int *)a3;
  v5.f32[1] = a3[1];
  float32x4_t v6 = v5;
  v6.f32[2] = a3[2];
  float32x4_t v7 = (float32x4_t)*(unsigned int *)a4;
  v7.f32[1] = a4[1];
  float32x4_t v8 = v7;
  v8.f32[2] = a4[2];
  float32x4_t v9 = (float32x4_t)*(unsigned int *)a5;
  v9.f32[1] = a5[1];
  float32x4_t v10 = v9;
  v10.f32[2] = a5[2];
  float32x4_t v11 = *(float32x4_t *)(a1 + 16);
  float32x4_t v12 = *(float32x4_t *)(a1 + 32);
  float32x4_t v13 = vmulq_n_f32(v11, *a3);
  v13.i32[3] = 0;
  float32x4_t v14 = vmulq_lane_f32(v12, *(float32x2_t *)v5.f32, 1);
  v14.i32[3] = 0;
  float32x4_t v16 = *(float32x4_t *)(a1 + 48);
  float32x4_t v15 = *(float32x4_t *)(a1 + 64);
  float32x4_t v17 = vmulq_laneq_f32(v16, v6, 2);
  v17.i32[3] = 0;
  float32x4_t v18 = vaddq_f32(vaddq_f32(v13, v14), v17);
  float32x4_t v19 = vmulq_n_f32(v11, *a4);
  v19.i32[3] = 0;
  float32x4_t v20 = vmulq_lane_f32(v12, *(float32x2_t *)v7.f32, 1);
  v20.i32[3] = 0;
  float32x4_t v21 = vaddq_f32(v15, v18);
  float32x4_t v22 = vmulq_laneq_f32(v16, v8, 2);
  v22.i32[3] = 0;
  float32x4_t v23 = vmulq_n_f32(v11, *a5);
  v23.i32[3] = 0;
  float32x4_t v24 = vmulq_lane_f32(v12, *(float32x2_t *)v9.f32, 1);
  v24.i32[3] = 0;
  float32x4_t v25 = vaddq_f32(v15, vaddq_f32(vaddq_f32(v19, v20), v22));
  float32x4_t v26 = vmulq_laneq_f32(v16, v10, 2);
  v26.i32[3] = 0;
  float32x4_t v27 = vaddq_f32(v15, vaddq_f32(vaddq_f32(v23, v24), v26));
  int16x8_t v28 = (int16x8_t)vminq_f32(vminq_f32(v21, v25), v27);
  float32x4_t v29 = vmaxq_f32(vmaxq_f32(v21, v25), v27);
  float32x4_t v30 = *(float32x4_t *)(a1 + 80);
  float32x4_t v31 = vnegq_f32(v30);
  v31.i32[3] = 0;
  int8x16_t v32 = vorrq_s8((int8x16_t)vcgtq_f32(v31, v29), (int8x16_t)vcgtq_f32((float32x4_t)v28, v30));
  *(int16x4_t *)v28.i8 = vmovn_s32((int32x4_t)v32);
  v28.i64[1] = vextq_s8(v32, v32, 8uLL).u64[0];
  *(int8x8_t *)v32.i8 = vmovn_s16(v28);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vtst_s32((int32x2_t)(v32.i64[0] & 0xFFFFFF00FFFFFFLL), (int32x2_t)(v32.i64[0] & 0xFFFFFF00FFFFFFLL)), 0), *(int8x8_t *)v5.f32).u32[0] != -1)
  {
    if (!*(unsigned char *)(a1 + 385))
    {
      float32x4_t v34 = *(float32x4_t *)(a1 + 336);
      float32x4_t v35 = *(float32x4_t *)(a1 + 352);
      float32x4_t v36 = vmulq_n_f32(v34, *a3);
      v36.i32[3] = 0;
      float32x4_t v37 = vmulq_lane_f32(v35, *(float32x2_t *)v5.f32, 1);
      v37.i32[3] = 0;
      float32x4_t v38 = *(float32x4_t *)(a1 + 368);
      float32x4_t v39 = vmulq_laneq_f32(v38, v6, 2);
      v39.i32[3] = 0;
      float32x4_t v6 = vaddq_f32(vaddq_f32(v36, v37), v39);
      float32x4_t v40 = vmulq_n_f32(v34, *a4);
      v40.i32[3] = 0;
      float32x4_t v41 = vmulq_lane_f32(v35, *(float32x2_t *)v7.f32, 1);
      v41.i32[3] = 0;
      float32x4_t v42 = vmulq_laneq_f32(v38, v8, 2);
      v42.i32[3] = 0;
      float32x4_t v43 = vmulq_n_f32(v34, *a5);
      v43.i32[3] = 0;
      float32x4_t v44 = vmulq_lane_f32(v35, *(float32x2_t *)v9.f32, 1);
      v44.i32[3] = 0;
      float32x4_t v8 = vaddq_f32(vaddq_f32(v40, v41), v42);
      float32x4_t v45 = vmulq_laneq_f32(v38, v10, 2);
      v45.i32[3] = 0;
      float32x4_t v10 = vaddq_f32(vaddq_f32(v43, v44), v45);
    }
    char v189 = 0;
    float32x4_t v46 = vmulq_f32(vaddq_f32(vaddq_f32(v6, v8), v10), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
    v46.i32[3] = 0;
    float32x4_t v186 = v46;
    float32x4_t v190 = v6;
    float32x4_t v191 = v8;
    float32x4_t v192 = v10;
    uint64_t v187 = 0x7F7FFFFF00000000;
    uint64_t v188 = 0x57F7FFFFFLL;
    v182.i64[1] = (uint64_t)&v186;
    int32x4_t v48 = *(int32x4_t *)(a1 + 304);
    long long v47 = *(_OWORD *)(a1 + 320);
    int32x4_t v49 = *(int32x4_t *)(a1 + 288);
    v184[0] = *(int32x4_t *)(a1 + 272);
    v185[0] = v48;
    float32x2x2_t v50 = (float32x2x2_t)vzip1q_s32(v184[0], v48);
    v204.val[0] = (float32x2_t)vzip2q_s32(v184[0], v48).u64[0];
    int32x4_t v51 = vzip1q_s32(v49, (int32x4_t)0);
    v204.val[1] = (float32x2_t)vzip2q_s32(v49, (int32x4_t)0).u64[0];
    uint64_t v183 = a1 + 272;
    float32x4_t v52 = (float *)v184;
    float32x4_t v53 = (float *)v185;
    vst2_f32(v52, v50);
    v185[1] = v47;
    vst2_f32(v53, v204);
    v184[1] = vzip2q_s32((int32x4_t)v50, v51);
    uint64_t v181 = a1 + 96;
    v182.i64[0] = (uint64_t)&unk_26E728D40;
    float v180 = &unk_26E728850;
    float32x4_t v54 = *(float32x4_t *)(a1 + 320);
    unsigned int v196 = 0;
    float32x4_t v55 = vmulq_f32(v54, v54);
    v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
    v59.i64[1] = 0;
    float32x4_t v56 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32)), 0), (int8x16_t)v54, (int8x16_t)xmmword_23435FD50);
    float32x4_t v195 = v56;
    float32x4_t v57 = vmulq_f32(v56, v56);
    v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
    float32x2_t v58 = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32);
    *(float32x2_t *)v59.i8 = vrsqrte_f32(v58);
    int v60 = 4;
    do
    {
      *(float32x2_t *)v59.i8 = vmul_f32(*(float32x2_t *)v59.i8, vrsqrts_f32(vmul_f32(*(float32x2_t *)v59.i8, *(float32x2_t *)v59.i8), v58));
      --v60;
    }
    while (v60);
    __asm { FMOV            V9.2S, #1.0 }
    float32x2_t v66 = vmul_f32(v58, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v58), 0), (int8x8_t)_D9, *(int8x8_t *)v59.i8));
    float32x2_t v67 = vrecpe_f32(v66);
    int v68 = 4;
    do
    {
      float32x2_t v67 = vmul_f32(v67, vrecps_f32(v66, v67));
      --v68;
    }
    while (v68);
    float32x4_t v69 = vmulq_n_f32(v56, v67.f32[0]);
    v69.i32[3] = 0;
    float32x4_t v70 = (const float *)(a1 + 116);
    *(float32x2_t *)v59.i8 = vld1_dup_f32(v70);
    float32x2_t v71 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    *(float32x2_t *)v59.i8 = vmul_f32(vmin_f32(*(float32x2_t *)v59.i8, v71), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
    float32x2_t v72 = (float32x2_t)vdup_n_s32(0x358637BDu);
    float32x2_t v73 = vmax_f32(*(float32x2_t *)v59.i8, v72);
    v59.i32[0] = *(_DWORD *)(a1 + 112);
    v72.i32[0] = -*(char *)(a1 + 128);
    *(int32x2_t *)v59.i8 = vdup_lane_s32((int32x2_t)vand_s8(*(int8x8_t *)v59.i8, (int8x8_t)v72), 0);
    float32x2_t v74 = vadd_f32(*(float32x2_t *)v59.i8, 0);
    float32x2_t v75 = (float32x2_t)vdup_n_s32(0x3F7FF141u);
    v59.i32[0] = -1;
    int32x4_t v177 = v59;
    while (1)
    {
      float32x4_t v179 = v69;
      float32x2_t v76 = v71;
      float32x4_t v194 = v56;
      float32x4_t v77 = vnegq_f32(v56);
      v77.i32[3] = 0;
      float32x4_t v193 = v77;
      *(double *)v78.i64 = physx::Gu::RelativeConvex<physx::Gu::TriangleV>::support(&v182, (float32x2_t *)&v193);
      float32x4_t v178 = v78;
      *(double *)v79.i64 = physx::Gu::LocalConvex<physx::Gu::ConvexHullV>::support((uint64_t)&v180, &v195);
      float32x4_t v80 = v79;
      float32x4_t v56 = vsubq_f32(v178, v79);
      float32x4_t v81 = vmulq_f32(v179, v56);
      v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
      float32x2_t v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
      int8x8_t v83 = (int8x8_t)vcgt_f32(v82, v74);
      if ((vmvn_s8(v83).u8[0] & 1) == 0) {
        return 1;
      }
      uint64_t v84 = v196;
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(v83, (int8x8_t)vcgt_f32(v82, vmul_f32(v76, v75))), 0), *(int8x8_t *)v56.f32).u32[0] == -1)
      {
        if (v196 == 3)
        {
          v193.i64[0] = 0;
          float32x2_t v197 = 0;
          physx::Gu::barycentricCoordinates(&v195, &v200, &v201, v202, (float32x2_t *)&v193, &v197);
        }
        return 1;
      }
      v199[v196] = v178;
      v198[v84] = v80;
      unsigned int v196 = v84 + 1;
      *(&v200 + v84) = v56;
      switch(v84)
      {
        case 3:
          physx::Gu::closestPtPointTetrahedron(&v200, v199, v198, (int *)&v196);
          goto LABEL_51;
        case 2:
          float32x4_t v56 = v200;
          float32x4_t v93 = vsubq_f32(v201, v200);
          float32x4_t v94 = vsubq_f32(v202[0], v200);
          int8x8_t v96 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v93.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 4uLL), *(float32x2_t *)v94.f32);
          *(int8x8_t *)v95.f32 = vext_s8(v96, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL), *(float32x2_t *)v94.f32), *(float32x2_t *)v93.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL)), 4uLL);
          v96.i32[1] = 0;
          unsigned int v196 = 3;
          float32x2_t v97 = vpadd_f32(vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32), vmul_f32((float32x2_t)v96.u32[0], (float32x2_t)v96.u32[0]));
          float32x2_t v98 = vpadd_f32(v97, v97);
          if (v98.f32[0] > 0.00000011921)
          {
            if (v98.f32[0] == 0.0)
            {
              float32x4_t v56 = 0uLL;
            }
            else
            {
              *(int8x8_t *)&v95.u32[2] = v96;
              float32x2_t v99 = (float32x2_t)vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u64[0];
              float32x2_t v100 = (float32x2_t)vextq_s8((int8x16_t)v202[0], (int8x16_t)v202[0], 8uLL).u64[0];
              float32x2_t v101 = (float32x2_t)vextq_s8((int8x16_t)v202[0], (int8x16_t)v202[0], 4uLL).u64[0];
              float32x2_t v102 = (float32x2_t)vextq_s8((int8x16_t)v201, (int8x16_t)v201, 4uLL).u64[0];
              int8x8_t v103 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v201.f32, v101), v102, *(float32x2_t *)v202[0].f32);
              *(int8x8_t *)v104.f32 = vext_s8(v103, (int8x8_t)vmls_f32(vmul_f32(v99, *(float32x2_t *)v202[0].f32), *(float32x2_t *)v201.f32, v100), 4uLL);
              v104.i64[1] = v103.u32[0];
              float32x2_t v105 = (float32x2_t)vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u64[0];
              float32x2_t v106 = (float32x2_t)vextq_s8((int8x16_t)v200, (int8x16_t)v200, 4uLL).u64[0];
              int8x8_t v107 = (int8x8_t)vmls_f32(vmul_f32(v106, *(float32x2_t *)v202[0].f32), v101, *(float32x2_t *)v200.f32);
              *(int8x8_t *)v108.f32 = vext_s8(v107, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v200.f32, v100), *(float32x2_t *)v202[0].f32, v105), 4uLL);
              v108.i64[1] = v107.u32[0];
              int8x8_t v109 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v200.f32, v102), v106, *(float32x2_t *)v201.f32);
              *(int8x8_t *)v110.f32 = vext_s8(v109, (int8x8_t)vmls_f32(vmul_f32(v105, *(float32x2_t *)v201.f32), *(float32x2_t *)v200.f32, v99), 4uLL);
              v110.i64[1] = v109.u32[0];
              float32x4_t v111 = vmulq_f32(v104, v95);
              v111.i64[0] = vpaddq_f32(v111, v111).u64[0];
              float32x2_t v112 = vpadd_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v111.f32);
              float32x4_t v113 = vmulq_f32(v108, v95);
              v113.i64[0] = vpaddq_f32(v113, v113).u64[0];
              float32x2_t v114 = vpadd_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32);
              float32x4_t v115 = vmulq_f32(v110, v95);
              v115.i64[0] = vpaddq_f32(v115, v115).u64[0];
              float32x2_t v116 = vpadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v115.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v114), (int8x8_t)vcgez_f32(v112)), (int8x8_t)vcgez_f32(v116)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
              {
                float32x4_t v142 = vmulq_f32(v200, v95);
                float32x2_t v143 = vrecpe_f32(v98);
                int v144 = 4;
                do
                {
                  float32x2_t v143 = vmul_f32(v143, vrecps_f32(v98, v143));
                  --v144;
                }
                while (v144);
                float32x2_t v145 = (float32x2_t)vpaddq_f32(v142, v142).u64[0];
                float32x4_t v56 = vmulq_n_f32(v95, vmul_f32(v143, vpadd_f32(v145, v145)).f32[0]);
                v56.i32[3] = 0;
              }
              else
              {
                float32x4_t v117 = vnegq_f32(v200);
                v117.i32[3] = 0;
                float32x4_t v118 = vnegq_f32(v201);
                v118.i32[3] = 0;
                float32x4_t v119 = vmulq_f32(v117, v93);
                v119.i64[0] = vpaddq_f32(v119, v119).u64[0];
                float32x2_t v120 = vpadd_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32);
                float32x4_t v121 = vmulq_f32(v93, v118);
                v121.i64[0] = vpaddq_f32(v121, v121).u64[0];
                float32x2_t v122 = vpadd_f32(*(float32x2_t *)v121.f32, *(float32x2_t *)v121.f32);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v120), (int8x8_t)vclez_f32(v122)), (int8x8_t)vclez_f32(v116)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
                {
                  float32x2_t v146 = vsub_f32(v120, v122);
                  float32x2_t v147 = vrecpe_f32(v146);
                  int v148 = 4;
                  do
                  {
                    float32x2_t v147 = vmul_f32(v147, vrecps_f32(v146, v147));
                    --v148;
                  }
                  while (v148);
                  uint64_t v134 = 0;
                  float32x4_t v56 = vmlaq_n_f32(v200, v93, vmul_f32(v120, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v146), (float32x2_t)0x3400000034000000), (int8x8_t)v147, 0)).f32[0]);
                  v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
                  unsigned int v149 = 2;
                  uint64_t v133 = 1;
                }
                else
                {
                  float32x4_t v123 = vnegq_f32(v202[0]);
                  v123.i32[3] = 0;
                  float32x4_t v124 = vmulq_f32(v118, v94);
                  v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
                  float32x2_t v125 = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
                  float32x4_t v126 = vmulq_f32(v93, v123);
                  v126.i64[0] = vpaddq_f32(v126, v126).u64[0];
                  float32x2_t v127 = vpadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v126.f32);
                  float32x4_t v128 = vmulq_f32(v94, v123);
                  v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
                  float32x2_t v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
                  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v125, v122), (int8x8_t)vcge_f32(v127, v129)), (int8x8_t)vclez_f32(v112)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
                  {
                    float32x2_t v150 = vsub_f32(v125, v122);
                    float32x2_t v151 = vadd_f32(v150, vsub_f32(v127, v129));
                    float32x2_t v152 = vrecpe_f32(v151);
                    int v153 = 4;
                    do
                    {
                      float32x2_t v152 = vmul_f32(v152, vrecps_f32(v151, v152));
                      --v153;
                    }
                    while (v153);
                    int8x16_t v154 = (int8x16_t)vmlaq_n_f32(v201, vsubq_f32(v202[0], v201), vmul_f32(v150, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v151), (float32x2_t)0x3400000034000000), (int8x8_t)v152, 0)).f32[0]);
                    v154.i64[1] = vextq_s8(v154, v154, 8uLL).u32[0];
                    unsigned int v149 = 2;
                    uint64_t v133 = 2;
                    uint64_t v134 = 1;
                    float32x4_t v56 = (float32x4_t)v154;
                  }
                  else
                  {
                    float32x4_t v130 = vmulq_f32(v117, v94);
                    v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
                    float32x2_t v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
                    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v131), (int8x8_t)vclez_f32(v129)), (int8x8_t)vclez_f32(v114)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
                    {
                      float32x2_t v155 = vsub_f32(v131, v129);
                      float32x2_t v156 = vrecpe_f32(v155);
                      int v157 = 4;
                      do
                      {
                        float32x2_t v156 = vmul_f32(v156, vrecps_f32(v155, v156));
                        --v157;
                      }
                      while (v157);
                      uint64_t v134 = 0;
                      float32x4_t v56 = vmlaq_n_f32(v200, v94, vmul_f32(v131, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v155), (float32x2_t)0x3400000034000000), (int8x8_t)v156, 0)).f32[0]);
                      v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
                      uint64_t v133 = 2;
                    }
                    else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v131), (int8x8_t)vclez_f32(v120)), 0), *(int8x8_t *)v200.f32).u32[0] == -1)
                    {
                      uint64_t v134 = 0;
                      uint64_t v133 = 1;
                    }
                    else
                    {
                      *(int16x4_t *)v56.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v122, v125), (int8x8_t)vcgez_f32(v122)), 0);
                      *(int8x8_t *)v56.f32 = vuzp1_s8(*(int8x8_t *)v56.f32, *(int8x8_t *)v56.f32);
                      __int32 v132 = v56.i32[0];
                      float32x4_t v56 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v56, v177), 0), (int8x16_t)v201, (int8x16_t)v202[0]);
                      uint64_t v133 = 1;
                      if (v132 == -1) {
                        uint64_t v134 = 1;
                      }
                      else {
                        uint64_t v134 = 2;
                      }
                    }
                    unsigned int v149 = v133;
                  }
                }
                float32x4_t v158 = *(&v200 + v133);
                long long v159 = v199[v134];
                long long v160 = v199[v133];
                long long v161 = v198[v134];
                long long v162 = v198[v133];
                float32x4_t v200 = *(&v200 + v134);
                float32x4_t v201 = v158;
                v199[0] = v159;
                v199[1] = v160;
                v198[0] = v161;
                v198[1] = v162;
                unsigned int v196 = v149;
              }
            }
            goto LABEL_51;
          }
          unsigned int v196 = 2;
          float32x4_t v135 = vmulq_f32(v93, v93);
          v135.i64[0] = vpaddq_f32(v135, v135).u64[0];
          float32x2_t v136 = vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v136), 0), *(int8x8_t *)v200.f32).u32[0] != -1)
          {
            float32x4_t v137 = vnegq_f32(v200);
            v137.i32[3] = 0;
            float32x4_t v138 = vmulq_f32(v137, v93);
            v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
            float32x2_t v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
            float32x2_t v140 = vrecpe_f32(v136);
            int v141 = 4;
            do
            {
              float32x2_t v140 = vmul_f32(v140, vrecps_f32(v136, v140));
              --v141;
            }
            while (v141);
            float32x4_t v56 = vmlaq_n_f32(v200, v93, vmax_f32(vmin_f32(vmul_f32(v139, v140), _D9), 0).f32[0]);
            goto LABEL_33;
          }
          break;
        case 1:
          float32x4_t v56 = v200;
          float32x4_t v85 = vsubq_f32(v201, v200);
          float32x4_t v86 = vmulq_f32(v85, v85);
          v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
          float32x2_t v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v87), 0), *(int8x8_t *)v200.f32).u32[0] != -1)
          {
            float32x4_t v88 = vnegq_f32(v200);
            v88.i32[3] = 0;
            float32x4_t v89 = vmulq_f32(v88, v85);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            float32x2_t v91 = vrecpe_f32(v87);
            int v92 = 4;
            do
            {
              float32x2_t v91 = vmul_f32(v91, vrecps_f32(v87, v91));
              --v92;
            }
            while (v92);
            float32x4_t v56 = vmlaq_n_f32(v200, v85, vmax_f32(vmin_f32(vmul_f32(v90, v91), _D9), 0).f32[0]);
LABEL_33:
            v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
            goto LABEL_51;
          }
          break;
        default:
          goto LABEL_51;
      }
      unsigned int v196 = 1;
LABEL_51:
      float32x4_t v195 = v56;
      float32x4_t v163 = vmulq_f32(v56, v56);
      v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
      float32x2_t v164 = vpadd_f32(*(float32x2_t *)v163.f32, *(float32x2_t *)v163.f32);
      float32x2_t v165 = vrsqrte_f32(v164);
      int v166 = 4;
      do
      {
        float32x2_t v165 = vmul_f32(v165, vrsqrts_f32(vmul_f32(v165, v165), v164));
        --v166;
      }
      while (v166);
      float32x2_t v71 = vmul_f32(v164, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v164), 0), (int8x8_t)_D9, (int8x8_t)v165));
      float32x2_t v167 = vrecpe_f32(v71);
      int v168 = 4;
      do
      {
        float32x2_t v167 = vmul_f32(v167, vrecps_f32(v71, v167));
        --v168;
      }
      while (v168);
      float32x4_t v69 = vmulq_n_f32(v56, v167.f32[0]);
      v69.i32[3] = 0;
      int16x4_t v169 = (int16x4_t)vcgt_f32(v76, v71);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v71, v73), (int8x8_t)v169), 0), *(int8x8_t *)v56.f32).u32[0] != -1)
      {
        int8x8_t v170 = (int8x8_t)vdup_lane_s16(v169, 0);
        if (vuzp1_s8(v170, v170).u32[0] == -1) {
          goto LABEL_60;
        }
        float v171 = (const float *)(v182.i64[1] + 16);
        float32x2_t v172 = vld1_dup_f32(v171);
        float v173 = (const float *)(v181 + 16);
        float32x2_t v174 = vld1_dup_f32(v173);
        float32x2_t v175 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v74), 0), (int8x8_t)v74, (int8x8_t)vmul_f32(vmin_f32(v172, v174), (float32x2_t)vdup_n_s32(0x3E4CCCCDu)));
        if (v196 == 3)
        {
          v193.i64[0] = 0;
          float32x2_t v197 = 0;
          physx::Gu::barycentricCoordinates(&v194, &v200, &v201, v202, (float32x2_t *)&v193, &v197);
        }
        if ((vcgt_f32(vmax_f32(vsub_f32(v76, v74), 0), v175).u32[0] & 1) == 0)
        {
LABEL_60:
          uint64_t result = 0;
          *(unsigned char *)(a1 + 384) = 1;
          return result;
        }
        return 1;
      }
    }
  }
  return 1;
}

void ConvexVsMeshOverlapCallback::~ConvexVsMeshOverlapCallback(ConvexVsMeshOverlapCallback *this)
{
}

uint64_t physx::Gu::SweepCapsuleMeshHitCallback::SweepCapsuleMeshHitCallback(uint64_t result, uint64_t a2, uint64_t a3, char a4, float *a5, uint64_t a6, _WORD *a7, char a8, float a9, float a10)
{
  *(_DWORD *)(result + 8) = 2;
  *(_WORD *)(result + 12) = *a7;
  *(_WORD *)(result + 14) = 0;
  *(unsigned char *)(result + 16) = a8;
  *(float *)(result + 20) = a10;
  *(void *)uint64_t result = &unk_26E7297A8;
  *(void *)(result + 24) = a2;
  *(void *)(result + 32) = a3;
  *(float *)(result + 40) = a9;
  *(_DWORD *)(result + 44) = 0x40000000;
  *(float *)(result + 48) = a9 + 0.001;
  *(void *)(result + 56) = a5;
  *(void *)(result + 64) = a6;
  *(unsigned char *)(result + 72) = a4;
  BOOL v10 = *a5 == a5[3] && a5[1] == a5[4] && a5[2] == a5[5];
  *(unsigned char *)(result + 73) = v10;
  *(float *)(a2 + 48) = a9;
  return result;
}

uint64_t physx::Gu::SweepCapsuleMeshHitCallback::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, float *a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float v12 = *a3;
  float v13 = a3[1];
  float v14 = a3[2];
  uint64_t v16 = *(void *)(a1 + 24);
  float32x4_t v15 = *(float **)(a1 + 32);
  float v18 = *v15;
  float v17 = v15[1];
  float v19 = v15[2];
  float v20 = v15[3];
  float v21 = v15[4];
  float v22 = v15[5];
  float v23 = v13 * v22;
  float v24 = v15[6];
  float v25 = v15[7];
  float v26 = v15[8];
  float v27 = v15[9];
  float v28 = (float)((float)(*a3 * v17) + (float)(v13 * v21)) + (float)(v14 * v25);
  float v29 = v15[10];
  float v30 = v15[11];
  if (*(unsigned char *)(a1 + 16)) {
    float32x4_t v31 = a5;
  }
  else {
    float32x4_t v31 = a4;
  }
  float v32 = *v31;
  float v33 = v31[1];
  float v34 = v31[2];
  float v35 = (float)((float)(v19 * *v31) + (float)(v22 * v33)) + (float)(v26 * v34);
  float v36 = v29 + (float)((float)((float)(v17 * *v31) + (float)(v21 * v33)) + (float)(v25 * v34));
  if (*(unsigned char *)(a1 + 16)) {
    float32x4_t v37 = a4;
  }
  else {
    float32x4_t v37 = a5;
  }
  float v38 = v37[1];
  float v39 = (float)(v17 * *v37) + (float)(v21 * v38);
  float v40 = (float)(v19 * *v37) + (float)(v22 * v38);
  float v41 = v37[2];
  float v42 = v39 + (float)(v25 * v41);
  float v43 = v40 + (float)(v26 * v41);
  float v44 = v29 + v42;
  float v45 = (float)((float)(v12 * v18) + (float)(v13 * v20)) + (float)(v14 * v24);
  float v46 = (float)((float)(v12 * v19) + v23) + (float)(v14 * v26);
  float v47 = v45 + v27;
  a8.f32[0] = v28 + v29;
  a9.f32[0] = v46 + v30;
  float v48 = v27 + (float)((float)((float)(v18 * v32) + (float)(v20 * v33)) + (float)(v24 * v34));
  float v49 = v27 + (float)((float)((float)(v18 * *v37) + (float)(v20 * v38)) + (float)(v24 * v41));
  v97[0] = v47;
  v97[1] = v28 + v29;
  v97[2] = a9.f32[0];
  unint64_t v98 = __PAIR64__(LODWORD(v36), LODWORD(v48));
  float v99 = v30 + v35;
  unint64_t v100 = __PAIR64__(LODWORD(v44), LODWORD(v49));
  float v101 = v30 + v43;
  v92[0] = 0;
  v92[1] = 0;
  int v93 = -1;
  __int16 v94 = 0;
  memset(v95, 0, sizeof(v95));
  float v96 = 3.4028e38;
  float v50 = *(float *)(v16 + 48);
  float v51 = v50 * 0.001;
  if (v50 < 1.0) {
    float v51 = 0.001;
  }
  float v52 = v50 + v51;
  float32x4_t v53 = *(float32x2_t **)(a1 + 56);
  if (*(unsigned char *)(a1 + 73))
  {
    float v54 = v53[3].f32[0];
    float32x4_t v55 = *(float32x2_t **)(a1 + 64);
    __int16 v56 = *(_WORD *)(a1 + 12);
    int v57 = *(unsigned __int8 *)(a1 + 72);
    if ((v56 & 0x10) != 0) {
      goto LABEL_15;
    }
    float v58 = v48 - v47;
    float v59 = v36 - a8.f32[0];
    float v60 = (float)(v30 + v35) - a9.f32[0];
    float v61 = v49 - v47;
    float v62 = v44 - a8.f32[0];
    float v63 = (float)(v30 + v43) - a9.f32[0];
    float v64 = (float)(v59 * v63) - (float)(v60 * v62);
    float v65 = (float)(v60 * v61) - (float)(v58 * v63);
    float v66 = (float)(v58 * v62) - (float)(v59 * v61);
    if ((v56 & 0x80) == 0
      && !*(unsigned char *)(a1 + 72)
      && (float)((float)((float)(v65 * v55->f32[1]) + (float)(v64 * v55->f32[0])) + (float)(v66 * v55[1].f32[0])) > 0.0)
    {
      return 1;
    }
    uint64_t v105 = 0;
    physx::Gu::closestPtPointTriangle((float *)v53, v97, (float32x2_t *)&v98, (float32x2_t *)&v100, (float *)&v105 + 1, (float *)&v105, (uint64_t)&v102);
    if ((float)((float)((float)((float)(v103 - v53->f32[1]) * (float)(v103 - v53->f32[1]))
                       + (float)((float)(v102 - v53->f32[0]) * (float)(v102 - v53->f32[0])))
               + (float)((float)(v104 - v53[1].f32[0]) * (float)(v104 - v53[1].f32[0]))) > (float)(v54 * v54))
    {
LABEL_15:
      BOOL v67 = v57 != 0;
      uint64_t v68 = 1;
      if ((physx::Gu::sweepSphereTriangles(1, (uint64_t)v97, v53, v55, 0, (uint64_t)v92, &v89, v67, v54, v52, (v56 & 0x80) != 0, 0, 0) & 1) == 0)return v68; {
    }
      }
    else
    {
      float v70 = (float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66);
      float v71 = 0.0;
      float v72 = 0.0;
      float v73 = 0.0;
      if (v70 > 0.0)
      {
        float v74 = 1.0 / sqrtf(v70);
        float v73 = v64 * v74;
        float v72 = v65 * v74;
        float v71 = v66 * v74;
      }
      float v89 = v73;
      float v90 = v72;
      float v91 = v71;
      __int16 v94 = 1026;
      float v75 = -v55[1].f32[0];
      *(float32x2_t *)&v95[12] = vneg_f32(*v55);
      *(float *)&v95[20] = v75;
      float v96 = 0.0;
    }
  }
  else
  {
    float32x4_t v69 = *(float32x2_t **)(a1 + 64);
    __int16 v88 = *(_WORD *)(a1 + 12);
    uint64_t v68 = 1;
    if (!physx::Gu::sweepCapsuleTriangles_Precise(1, (uint64_t)v97, (uint64_t)v53, v69, 0, (uint64_t)v92, &v89, &v88, v50 + v51, a8, a9, *(unsigned char *)(a1 + 72), 0))return v68; {
  }
    }
  float v76 = v96;
  if (v96 <= *(float *)(a1 + 40))
  {
    float v77 = -fabsf((float)((float)(v90 * *(float *)(*(void *)(a1 + 64) + 4)) + (float)(v89 * **(float **)(a1 + 64)))+ (float)(v91 * *(float *)(*(void *)(a1 + 64) + 8)));
    float v78 = *(float *)(a1 + 48);
    if (v96 <= v78) {
      float v79 = *(float *)(a1 + 48);
    }
    else {
      float v79 = v96;
    }
    float v80 = v79 * 0.001;
    if (v79 < 1.0) {
      float v80 = 0.001;
    }
    if ((float)(v78 - v80) > v96) {
      goto LABEL_39;
    }
    float v81 = *(float *)(a1 + 44);
    float v82 = v78 + v80;
    if (v81 > v77 && v82 > v96) {
      goto LABEL_39;
    }
    BOOL v84 = v96 < v78;
    if (v81 != v77) {
      BOOL v84 = 0;
    }
    if (v96 == 0.0 || v84)
    {
LABEL_39:
      *(float *)(a1 + 44) = v77;
      *a6 = v76 * *(float *)(a1 + 20);
      float v85 = *(float *)(a1 + 48);
      if (v85 >= v76) {
        float v85 = v76;
      }
      *(float *)(a1 + 48) = v85;
      uint64_t v86 = *(void *)(a1 + 24);
      *(_WORD *)(v86 + 20) = v94;
      *(float *)(v86 + 48) = v76;
      *(void *)(v86 + 40) = *(void *)&v95[16];
      *(_OWORD *)(v86 + 24) = *(_OWORD *)v95;
      *(_DWORD *)(v86 + 16) = *(_DWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 14) = 1;
      if (v96 == 0.0)
      {
        uint64_t v68 = 0;
        *(unsigned char *)(a1 + 15) = 1;
        return v68;
      }
      if ((*(_WORD *)(a1 + 12) & 0x40) != 0) {
        return 0;
      }
    }
  }
  return 1;
}

BOOL physx::Gu::SweepCapsuleMeshHitCallback::finalizeHit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 14);
  if (*(unsigned char *)(a1 + 14))
  {
    if (*(unsigned char *)(a1 + 15))
    {
      if ((*(_WORD *)(a1 + 12) & 0x200) == 0)
      {
        float32x4_t v7 = *(float32x2_t **)(a1 + 64);
        *(_WORD *)(a2 + 20) = 1026;
LABEL_9:
        *(_DWORD *)(a2 + 48) = 0;
        float v10 = -v7[1].f32[0];
        *(float32x2_t *)(a2 + 36) = vneg_f32(*v7);
        *(float *)(a2 + 44) = v10;
        return v4 != 0;
      }
      char v8 = physx::Gu::computeCapsule_TriangleMeshMTD(a4);
      float32x4_t v7 = *(float32x2_t **)(a1 + 64);
      *(_WORD *)(a2 + 20) = 1026;
      if ((v8 & 1) == 0) {
        goto LABEL_9;
      }
      if (*(float *)(a2 + 48) == 0.0)
      {
        float v9 = -v7[1].f32[0];
        *(float32x2_t *)(a2 + 36) = vneg_f32(*v7);
        *(float *)(a2 + 44) = v9;
      }
    }
    *(_WORD *)(a2 + 20) = 1027;
  }
  return v4 != 0;
}

uint64_t sweepCapsule_MeshGeom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 *a8)
{
  char v8 = physx::Gu::gMidphaseCapsuleSweepTable[*(unsigned __int16 *)(*(void *)(a1 + 40) + 8) - 3];
  __int16 v10 = *a8;
  return v8();
}

uint64_t physx::Gu::SweepBoxMeshHitCallback::SweepBoxMeshHitCallback(uint64_t result, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, float32x2_t *a7, uint64_t a8, int32x2_t a9, float a10, float a11, unsigned __int16 *a12, char a13)
{
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = *a12;
  *(unsigned char *)(result + 16) = a13;
  *(float *)(result + 20) = a11;
  *(void *)uint64_t result = &unk_26E7297D0;
  *(void *)(result + 24) = a3;
  *(_DWORD *)(result + 32) = a9.i32[0];
  *(void *)(result + 48) = a5;
  *(void *)(result + 56) = a7;
  *(void *)(result + 64) = a8;
  *(float *)(result + 72) = a10;
  *(unsigned char *)(result + 176) = a4;
  *(void *)&long long v13 = *(void *)a6;
  *((void *)&v13 + 1) = *(unsigned int *)(a6 + 8);
  *(_OWORD *)(result + 144) = v13;
  *(int32x2_t *)(result + 40) = vdup_lane_s32(a9, 0);
  *(_DWORD *)(result + 36) = a9.i32[0];
  float v14 = a7[1].f32[0];
  float v15 = 1.0 / v14;
  _ZF = v14 == 0.0;
  float v17 = 0.0;
  if (!_ZF) {
    float v17 = v15;
  }
  __asm { FMOV            V3.2S, #1.0 }
  *(int8x8_t *)(result + 164) = vbic_s8((int8x8_t)vdiv_f32(_D3, *a7), (int8x8_t)vceqz_f32(*a7));
  *(float *)(result + 172) = v17;
  return result;
}

uint64_t physx::Gu::SweepBoxMeshHitCallback::processHit(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float *a6, int32x4_t a7, double a8, int32x4_t a9, int32x4_t a10, double a11, int32x4_t a12, int32x4_t a13)
{
  if ((*(_WORD *)(a1 + 12) & 0x100) == 0)
  {
    float32x2_t v107 = 0;
    uint64_t v19 = *(void *)(a1 + 24);
    float32x4_t v20 = *(float32x4_t *)v19;
    float32x4_t v21 = *(float32x4_t *)(v19 + 12);
    float32x4_t v22 = *(float32x4_t *)(v19 + 24);
    float32x4_t v23 = *(float32x4_t *)(v19 + 36);
    float32x4_t v24 = vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v19, COERCE_FLOAT(*(_OWORD *)a3->f32)), v21, *a3, 1), v22, *(float32x4_t *)a3->f32, 2), v23);
    float32x4_t v25 = v24;
    v25.i32[3] = 0;
    if (*(unsigned char *)(a1 + 16)) {
      float v26 = a5;
    }
    else {
      float v26 = a4;
    }
    float32x4_t v27 = vaddq_f32(v23, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v26->f32)), v21, *v26, 1), v22, *(float32x4_t *)v26->f32, 2));
    float32x4_t v28 = v27;
    v28.i32[3] = 0;
    if (*(unsigned char *)(a1 + 16)) {
      float v29 = a4;
    }
    else {
      float v29 = a5;
    }
    float32x4_t v30 = vaddq_f32(v23, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v29->f32)), v21, *v29, 1), v22, *(float32x4_t *)v29->f32, 2));
    float32x4_t v31 = v30;
    v31.i32[3] = 0;
    if (*(unsigned char *)(a1 + 176)) {
      goto LABEL_10;
    }
    float32x4_t v32 = vsubq_f32(v31, v28);
    int8x16_t v33 = (int8x16_t)vsubq_f32(v25, v28);
    int8x8_t v34 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 4uLL), *(float32x2_t *)v32.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL), *(float32x2_t *)v33.i8);
    *(int8x8_t *)v32.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)), *(float32x2_t *)v32.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)), 4uLL);
    v32.i64[1] = v34.u32[0];
    float32x4_t v22 = *(float32x4_t *)(a1 + 144);
    float32x4_t v35 = vmulq_f32(v32, v22);
    v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
    if (vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0] < 0.0)
    {
LABEL_10:
      int8x16_t v87 = (int8x16_t)v30;
      int8x16_t v88 = (int8x16_t)v27;
      float32x4_t v89 = v24;
      uint64_t v36 = *(void *)(a1 + 48);
      v22.i64[0] = *(void *)(v36 + 48);
      int32x4_t v37 = (int32x4_t)v22;
      v37.i32[2] = *(_DWORD *)(v36 + 56);
      float32x2_t v38 = (float32x2_t)vdup_laneq_s32(v37, 2);
      v37.i32[3] = 0;
      int v103 = 3;
      char v104 = 0;
      v99[0] = 0;
      v99[1] = 0;
      int32x4_t v105 = v37;
      float32x4_t v106 = 0u;
      float32x2_t v39 = vpmin_f32(v38, *(float32x2_t *)v22.f32);
      v39.f32[0] = vpmin_f32(v39, v39).f32[0];
      float v100 = 0.15 * v39.f32[0];
      float v101 = 0.05 * v39.f32[0];
      float v102 = 0.05 * v39.f32[0];
      LOBYTE(v95) = 0;
      float32x4_t v40 = vmulq_f32(vaddq_f32(vaddq_f32(v25, v28), v31), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
      v40.i32[3] = 0;
      float32x4_t v93 = v40;
      float32x4_t v96 = v25;
      float32x4_t v97 = v28;
      float32x4_t v98 = v31;
      v41.i32[1] = 2139095039;
      v94.i64[0] = 0x7F7FFFFF00000000;
      v94.i64[1] = 0x57F7FFFFFLL;
      v92[1] = &v93;
      v91[1] = v99;
      v92[0] = &unk_26E728A58;
      v91[0] = &unk_26E728AB8;
      float32x4_t v90 = v40;
      v41.i32[0] = *(_DWORD *)(a1 + 72);
      float32x4_t v109 = 0u;
      int8x16_t v110 = 0u;
      float32x2_t v108 = 0;
      BOOL v42 = physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v92, (uint64_t)v91, &v90, v41, (uint64_t)&v107, &v106, (float32x4_t *)(a1 + 144), &v108, &v109, &v110);
      if (!v42) {
        return !v42;
      }
      float32x4_t v43 = v109;
      int8x16_t v44 = v110;
      *(unsigned char *)(a1 + 14) = 1;
      *(int8x16_t *)(a1 + 112) = v44;
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 16);
      float32x2_t v45 = v107;
      if (vcge_f32(v107, v108).u8[0])
      {
        *(unsigned char *)(a1 + 15) = 1;
        *a6 = 0.0;
        *(float32x2_t *)(a1 + 40) = v45;
        *(_DWORD *)(a1 + 32) = 0;
        uint64_t v46 = *(void *)(a1 + 64);
        v43.i64[0] = *(void *)v46;
        *(void *)&long long v47 = vnegq_f32(v43).u64[0];
        *((float *)&v47 + 2) = -*(float *)(v46 + 8);
        HIDWORD(v47) = 0;
        *(_OWORD *)(a1 + 128) = v47;
        return !v42;
      }
      float v82 = *(float *)(a1 + 32) * v108.f32[0];
      float32x4_t v83 = vmulq_n_f32(*(float32x4_t *)(a1 + 144), v108.f32[0]);
      float32x2_t v84 = vmul_f32(v108, *(float32x2_t *)(a1 + 40));
      *(float *)(a1 + 32) = v82;
      v83.i32[3] = 0;
      *(float32x2_t *)(a1 + 40) = v84;
      *(float32x4_t *)(a1 + 128) = v43;
      *(float32x4_t *)(a1 + 144) = v83;
      float v85 = v82 * *(float *)(a1 + 20);
      if (v85 < *a6) {
        *a6 = v85;
      }
      float32x4_t v86 = v89;
      v86.i32[3] = v88.i32[0];
      *(float32x4_t *)(a1 + 76) = v86;
      *(int8x16_t *)(a1 + 92) = vextq_s8(vextq_s8(v88, v88, 0xCuLL), v87, 8uLL);
      *(_DWORD *)(a1 + 108) = v87.i32[2];
    }
    return 1;
  }
  uint64_t v49 = *(void *)(a1 + 24);
  v13.i32[0] = *(_DWORD *)v49;
  a9.i64[0] = *(void *)(v49 + 4);
  int32x2_t v50 = (int32x2_t)*a3;
  a13.i32[0] = *(_DWORD *)(v49 + 12);
  v14.i64[0] = *(void *)(v49 + 16);
  a10.i64[0] = *(void *)(v49 + 24);
  float v51 = *(float *)(v49 + 32);
  a7.i64[0] = *(void *)(v49 + 36);
  float v52 = *(float *)(v49 + 44);
  if (*(unsigned char *)(a1 + 16)) {
    float32x4_t v53 = (__int32 *)a5;
  }
  else {
    float32x4_t v53 = (__int32 *)a4;
  }
  __int32 v54 = *v53;
  __int32 v55 = v53[1];
  a12.i32[0] = v53[2];
  if (*(unsigned char *)(a1 + 16)) {
    __int16 v56 = a4;
  }
  else {
    __int16 v56 = a5;
  }
  v57.i64[0] = vzip1q_s32(v13, v14).u64[0];
  v57.i64[1] = __PAIR64__(v57.u32[0], a9.u32[1]);
  float v58 = v52
      + (float)(vadd_f32(vmul_lane_f32(*v56, *(float32x2_t *)a9.i8, 1), (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v14.i8, *v56), 1)).f32[0]+ (float)(v51 * v56[1].f32[0]));
  *(float32x2_t *)v59.f32 = *a3;
  v59.i64[1] = __PAIR64__(v54, v50.u32[0]);
  float32x4_t v60 = vmulq_f32(v57, v59);
  v59.i64[0] = vzip1q_s32(a13, a9).u64[0];
  v59.i64[1] = __PAIR64__(v59.u32[0], v14.u32[1]);
  *(int32x2_t *)v61.f32 = vrev64_s32(v50);
  v61.i64[1] = __PAIR64__(v55, v61.u32[0]);
  float32x4_t v62 = vaddq_f32(v60, vmulq_f32(v59, v61));
  v60.i64[0] = a10.i64[0];
  v60.i64[1] = __PAIR64__(a10.u32[0], LODWORD(v51));
  v15.i32[0] = a3[1].i32[0];
  int32x4_t v63 = v15;
  v63.i32[1] = a12.i32[0];
  float32x4_t v64 = (float32x4_t)vzip1q_s32(v63, v63);
  v64.i32[2] = v15.i32[0];
  float32x4_t v65 = vmulq_f32(v60, v64);
  v60.i64[0] = a7.i64[0];
  v60.i64[1] = __PAIR64__(a7.u32[0], LODWORD(v52));
  float32x4_t v66 = vaddq_f32(v62, v65);
  v62.i64[0] = v14.i64[0];
  v62.i64[1] = __PAIR64__(v14.u32[0], v13.u32[0]);
  v67.i32[0] = v55;
  *(float32x2_t *)&v67.u32[2] = *v56;
  v67.i32[1] = v55;
  a9.i32[2] = a9.i32[0];
  a9.i32[3] = a13.i32[0];
  v68.i32[0] = v54;
  *(float32x2_t *)&v68.u32[2] = *v56;
  v68.i32[1] = v54;
  int32x4_t v69 = (int32x4_t)vmulq_f32((float32x4_t)a9, v68);
  float32x4_t v70 = (float32x4_t)vrev64q_s32(v69);
  v70.i64[0] = v69.i64[0];
  float32x4_t v71 = vaddq_f32(v70, vmulq_f32(v62, v67));
  int32x4_t v72 = vuzp2q_s32(a10, vzip1q_s32(a10, a10));
  float32x4_t v73 = (float32x4_t)v72;
  v73.f32[1] = v51;
  v73.i32[3] = v72.i32[0];
  a12.i32[1] = v56[1].i32[0];
  int32x4_t v74 = vuzp2q_s32(a7, vzip1q_s32(a7, a7));
  float32x4_t v75 = (float32x4_t)v74;
  v75.f32[1] = v52;
  v75.i32[3] = v74.i32[0];
  float32x4_t v93 = vaddq_f32(v60, v66);
  float32x4_t v94 = vaddq_f32(v75, vaddq_f32(v71, vmulq_f32(v73, (float32x4_t)vzip1q_s32(a12, a12))));
  float v95 = v58;
  LODWORD(v99[0]) = 2139095039;
  int v76 = physx::Gu::triBoxSweepTestBoxSpace(v93.f32, (float *)(*(void *)(a1 + 48) + 48), *(float **)(a1 + 56), (float *)(a1 + 164), (float *)v99, *(unsigned char *)(a1 + 176) == 0, *(float *)(a1 + 32));
  uint64_t result = v76 == 0;
  if (v76)
  {
    float v77 = *(float *)v99;
    if (*(float *)v99 <= *(float *)(a1 + 32))
    {
      *(_DWORD *)(a1 + 32) = v99[0];
      *a6 = v77 * *(float *)(a1 + 20);
      uint64_t v78 = *(void *)(a1 + 64);
      float32x4_t v79 = v93;
      float32x4_t v80 = v94;
      float32x4_t v81 = v93;
      v81.i32[3] = 0;
      *(unsigned char *)(a1 + 14) = 1;
      *(float32x4_t *)(a1 + 112) = v81;
      v81.i64[0] = *(void *)v78;
      v81.i64[0] = vnegq_f32(v81).u64[0];
      v81.f32[2] = -*(float *)(v78 + 8);
      v81.i32[3] = 0;
      *(float32x4_t *)(a1 + 128) = v81;
      *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 16);
      *(float32x4_t *)(a1 + 76) = v79;
      *(float32x4_t *)(a1 + 92) = v80;
      *(float *)(a1 + 108) = v95;
      if (v77 == 0.0)
      {
        *(unsigned char *)(a1 + 15) = 1;
        return result;
      }
    }
    return 1;
  }
  return result;
}

BOOL physx::Gu::SweepBoxMeshHitCallback::finalizeHit(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11, uint64_t a12, float32x4_t *a13, float32x2_t *a14, int a15, char a16)
{
  int v16 = *(unsigned __int8 *)(a1 + 14);
  if (*(unsigned char *)(a1 + 14))
  {
    float32x4_t v19 = *(float32x4_t *)(a1 + 112);
    __n128 v20 = *(__n128 *)(a1 + 128);
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 160);
    if (*(unsigned char *)(a1 + 15))
    {
      if ((*(_WORD *)(a1 + 12) & 0x200) == 0)
      {
        float32x4_t v21 = *(float32x2_t **)(a1 + 64);
        *(_WORD *)(a2 + 20) = 1026;
LABEL_15:
        *(_DWORD *)(a2 + 48) = 0;
        float v54 = -v21[1].f32[0];
        *(float32x2_t *)(a2 + 36) = vneg_f32(*v21);
        *(float *)(a2 + 44) = v54;
        return v16 != 0;
      }
      char v51 = physx::Gu::computeBox_TriangleMeshMTD(a3);
      float32x4_t v21 = *(float32x2_t **)(a1 + 64);
      *(_WORD *)(a2 + 20) = 1026;
      if ((v51 & 1) == 0) {
        goto LABEL_15;
      }
      if (*(float *)(a2 + 48) == 0.0)
      {
        float v52 = -v21[1].f32[0];
        *(float32x2_t *)(a2 + 36) = vneg_f32(*v21);
        *(float *)(a2 + 44) = v52;
      }
      __int16 v53 = 1027;
LABEL_29:
      *(_WORD *)(a2 + 20) = v53;
      return v16 != 0;
    }
    float v25 = *(float *)(a1 + 32);
    *(float *)(a2 + 48) = v25;
    *(_WORD *)(a2 + 20) = 1024;
    __int16 v26 = *(_WORD *)(a1 + 12);
    if ((v26 & 0x100) != 0)
    {
      if ((v26 & 3) != 0)
      {
        uint64_t v55 = *(void *)(a1 + 48);
        physx::Gu::computeBoxTriImpactData(&v71, &v69, v55 + 48, a14, a1 + 76, v25, *(double *)v19.i64, a6, v20, a8, a9, a10, a11);
        if ((v26 & 2) != 0)
        {
          float v56 = v69.f32[1];
          float v57 = v69.f32[0];
          float v58 = v70;
          float v59 = sqrtf((float)((float)(v69.f32[1] * v69.f32[1]) + (float)(v69.f32[0] * v69.f32[0])) + (float)(v58 * v58));
          if (v59 > 0.0)
          {
            float v60 = 1.0 / v59;
            float v57 = v69.f32[0] * v60;
            float v56 = v69.f32[1] * v60;
            float v58 = v70 * v60;
          }
          float v61 = a14->f32[1];
          float v62 = a14[1].f32[0];
          if ((float)((float)((float)(v56 * v61) + (float)(v57 * a14->f32[0])) + (float)(v58 * v62)) > 0.0)
          {
            float v58 = -v58;
            float v56 = -v56;
            float v57 = -v57;
          }
          if (a15)
          {
            if ((a16 & 1) == 0)
            {
              float v63 = *(float *)(a1 + 76);
              float v64 = *(float *)(a1 + 80);
              float v65 = *(float *)(a1 + 84);
              if ((float)((float)((float)(v61
                                         * (float)((float)((float)(*(float *)(a1 + 96) - v65)
                                                         * (float)(*(float *)(a1 + 100) - v63))
                                                 - (float)((float)(*(float *)(a1 + 88) - v63)
                                                         * (float)(*(float *)(a1 + 108) - v65))))
                                 + (float)((float)((float)((float)(*(float *)(a1 + 92) - v64)
                                                         * (float)(*(float *)(a1 + 108) - v65))
                                                 - (float)((float)(*(float *)(a1 + 96) - v65)
                                                         * (float)(*(float *)(a1 + 104) - v64)))
                                         * a14->f32[0]))
                         + (float)((float)((float)((float)(*(float *)(a1 + 88) - v63)
                                                 * (float)(*(float *)(a1 + 104) - v64))
                                         - (float)((float)(*(float *)(a1 + 92) - v64)
                                                 * (float)(*(float *)(a1 + 100) - v63)))
                                 * v62)) > 0.0)
              {
                float v57 = -v57;
                float v56 = -v56;
                float v58 = -v58;
              }
            }
          }
          float v66 = (float)((float)(v57 * *(float *)(v55 + 8)) + (float)(v56 * *(float *)(v55 + 20)))
              + (float)(v58 * *(float *)(v55 + 32));
          *(float32x2_t *)(a2 + 36) = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v55, v57), vmul_n_f32(*(float32x2_t *)(v55 + 12), v56)), vmul_n_f32(*(float32x2_t *)(v55 + 24), v58));
          *(float *)(a2 + 44) = v66;
          *(_WORD *)(a2 + 20) |= 2u;
        }
        if (v26)
        {
          float v67 = (float)((float)((float)(v71.f32[0] * *(float *)(v55 + 8)) + (float)(v71.f32[1] * *(float *)(v55 + 20)))
                      + (float)(v72 * *(float *)(v55 + 32)))
              + *(float *)(v55 + 44);
          *(float32x2_t *)(a2 + 24) = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v55, v71.f32[0]), vmul_n_f32(*(float32x2_t *)(v55 + 12), v71.f32[1])), vmul_n_f32(*(float32x2_t *)(v55 + 24), v72)), *(float32x2_t *)(v55 + 36));
          *(float *)(a2 + 32) = v67;
          __int16 v53 = *(_WORD *)(a2 + 20) | 1;
          goto LABEL_29;
        }
      }
    }
    else
    {
      v27.i64[0] = a13[1].i64[0];
      v27.i64[1] = a13[1].u32[2];
      float32x4_t v28 = *a13;
      *(_WORD *)(a2 + 20) = 1027;
      float32x4_t v29 = vnegq_f32((float32x4_t)v20);
      v29.i32[3] = 0;
      if (a15)
      {
        if ((a16 & 1) == 0)
        {
          float v30 = *(float *)(a1 + 76);
          float v31 = *(float *)(a1 + 80);
          float v32 = *(float *)(a1 + 84);
          if ((float)((float)((float)(a14->f32[1]
                                     * (float)((float)((float)(*(float *)(a1 + 96) - v32)
                                                     * (float)(*(float *)(a1 + 100) - v30))
                                             - (float)((float)(*(float *)(a1 + 88) - v30)
                                                     * (float)(*(float *)(a1 + 108) - v32))))
                             + (float)((float)((float)((float)(*(float *)(a1 + 92) - v31)
                                                     * (float)(*(float *)(a1 + 108) - v32))
                                             - (float)((float)(*(float *)(a1 + 96) - v32)
                                                     * (float)(*(float *)(a1 + 104) - v31)))
                                     * a14->f32[0]))
                     + (float)((float)((float)((float)(*(float *)(a1 + 88) - v30) * (float)(*(float *)(a1 + 104) - v31))
                                     - (float)((float)(*(float *)(a1 + 92) - v31) * (float)(*(float *)(a1 + 100) - v30)))
                             * a14[1].f32[0])) > 0.0)
          {
            float32x4_t v29 = vnegq_f32(v29);
            v29.i32[3] = 0;
          }
        }
      }
      float32x4_t v33 = v28;
      v33.i32[3] = 0;
      float32x2_t v34 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v28, 3).u64[0];
      LODWORD(v35) = vmla_f32((float32x2_t)0xBF000000BF000000, v34, v34).u32[0];
      float32x4_t v36 = vmulq_n_f32(v29, v35);
      v36.i32[3] = 0;
      float32x2_t v37 = (float32x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
      float32x2_t v38 = (float32x2_t)vext_s8(*(int8x8_t *)v28.f32, (int8x8_t)v37, 4uLL);
      int8x8_t v39 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL)), v38, *(float32x2_t *)v29.f32);
      *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(vmul_f32(v37, *(float32x2_t *)v29.f32), *(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)), 4uLL);
      v40.i64[1] = v39.u32[0];
      float32x4_t v41 = vmlaq_laneq_f32(v36, v40, v28, 3);
      v41.i64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
      float32x4_t v42 = vmulq_f32(v33, v29);
      v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
      float32x4_t v43 = vmlaq_n_f32(v41, v33, vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32).f32[0]);
      int8x16_t v44 = (int8x16_t)vaddq_f32(v43, v43);
      float32x4_t v45 = vmulq_n_f32(v19, v35);
      v45.i32[3] = 0;
      *(float32x2_t *)v40.f32 = vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL), *(float32x2_t *)v28.f32), v38, *(float32x2_t *)v19.f32);
      *(int8x8_t *)v46.f32 = vext_s8(*(int8x8_t *)v40.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v19.f32, v37), *(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), 4uLL);
      v46.i64[1] = v40.u32[0];
      float32x4_t v47 = vmlaq_laneq_f32(v45, v46, v28, 3);
      v47.i64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u32[0];
      float32x4_t v48 = vmulq_f32(v19, v33);
      v48.i64[0] = vpaddq_f32(v48, v48).u64[0];
      float32x4_t v49 = vmlaq_n_f32(v47, v33, vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32).f32[0]);
      v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
      *(void *)(a2 + 40) = vextq_s8(v44, v44, 4uLL).u64[0];
      v48.i64[0] = 0x4000000040000000;
      v48.i64[1] = 0x4000000040000000;
      float32x4_t v50 = vmlaq_f32(v27, v48, v49);
      v50.i32[3] = v44.i32[0];
      *(float32x4_t *)(a2 + 24) = v50;
    }
  }
  return v16 != 0;
}

uint64_t sweepBox_MeshGeom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 *a8)
{
  char v8 = physx::Gu::gMidphaseBoxSweepTable[*(unsigned __int16 *)(*(void *)(a1 + 40) + 8) - 3];
  __int16 v10 = *a8;
  return v8();
}

BOOL physx::Gu::SweepConvexMeshHitCallback::processHit(uint64_t a1, uint64_t a2, float *a3, float *a4, float *a5, float *a6, int32x2_t a7)
{
  __int16 v10 = *(float **)(a1 + 336);
  float v11 = *v10;
  float v12 = v10[1];
  float v13 = a3[1];
  float v14 = v10[2];
  float v15 = v10[3];
  float v16 = v10[4];
  float v17 = v10[5];
  float v18 = (float)(*a3 * *v10) + (float)(v13 * v15);
  float v19 = (float)(*a3 * v12) + (float)(v13 * v16);
  float v20 = (float)(*a3 * v14) + (float)(v13 * v17);
  float v21 = a3[2];
  float v22 = v10[6];
  float v23 = v10[7];
  float v24 = v10[8];
  float v25 = v18 + (float)(v21 * v22);
  float v26 = v19 + (float)(v21 * v23);
  float v27 = v20 + (float)(v21 * v24);
  if (*(unsigned char *)(a1 + 16)) {
    float32x4_t v28 = a5;
  }
  else {
    float32x4_t v28 = a4;
  }
  float v29 = v28[1];
  float v30 = (float)(v11 * *v28) + (float)(v15 * v29);
  float v31 = (float)(v12 * *v28) + (float)(v16 * v29);
  float v32 = (float)(v14 * *v28) + (float)(v17 * v29);
  float v33 = v28[2];
  float v34 = v30 + (float)(v22 * v33);
  float v35 = v31 + (float)(v23 * v33);
  float v36 = v32 + (float)(v24 * v33);
  if (*(unsigned char *)(a1 + 16)) {
    float32x2_t v37 = a4;
  }
  else {
    float32x2_t v37 = a5;
  }
  float v38 = v37[1];
  float v39 = (float)(v11 * *v37) + (float)(v15 * v38);
  float v40 = (float)(v12 * *v37) + (float)(v16 * v38);
  float v41 = (float)(v14 * *v37) + (float)(v17 * v38);
  float v42 = v37[2];
  float v43 = v22 * v42;
  float v44 = v23 * v42;
  float v45 = v24 * v42;
  float v46 = v39 + v43;
  float v47 = v40 + v44;
  float v48 = v41 + v45;
  a7.i32[0] = *(_DWORD *)(a1 + 456);
  int v49 = *(_DWORD *)(a2 + 16);
  if (!*(unsigned char *)(a1 + 461)
    && (float)((float)((float)((float)((float)((float)(v36 - v27) * (float)(v46 - v34))
                                     - (float)((float)(v34 - v25) * (float)(v48 - v36)))
                             * *(float *)(a1 + 448))
                     + (float)((float)((float)((float)(v35 - v26) * (float)(v48 - v36))
                                     - (float)((float)(v36 - v27) * (float)(v47 - v35)))
                             * *(float *)(a1 + 444)))
             + (float)((float)((float)((float)(v34 - v25) * (float)(v47 - v35))
                             - (float)((float)(v35 - v26) * (float)(v46 - v34)))
                     * *(float *)(a1 + 452))) <= 0.0)
  {
    return 1;
  }
  v7.i32[0] = *(_DWORD *)(a1 + 392);
  int32x2_t v109 = v7;
  float32x4_t v130 = 0u;
  uint64_t v129 = 0;
  float32x4_t v50 = *(float32x4_t *)(a1 + 240);
  float32x4_t v51 = *(float32x4_t *)(a1 + 256);
  float32x4_t v52 = vmulq_n_f32(v50, v25);
  v52.i32[3] = 0;
  float32x4_t v53 = vmulq_n_f32(v51, v26);
  v53.i32[3] = 0;
  float32x4_t v55 = *(float32x4_t *)(a1 + 272);
  float32x4_t v54 = *(float32x4_t *)(a1 + 288);
  float32x4_t v56 = vmulq_n_f32(v55, v27);
  v56.i32[3] = 0;
  float32x4_t v57 = vaddq_f32(vaddq_f32(v52, v53), v56);
  float32x4_t v58 = vmulq_n_f32(v50, v34);
  v58.i32[3] = 0;
  float32x4_t v59 = vmulq_n_f32(v51, v35);
  v59.i32[3] = 0;
  float32x4_t v60 = vaddq_f32(v54, v57);
  float32x4_t v61 = vmulq_n_f32(v55, v36);
  v61.i32[3] = 0;
  float32x4_t v62 = vmulq_n_f32(v50, v46);
  v62.i32[3] = 0;
  float32x4_t v63 = vmulq_n_f32(v51, v47);
  v63.i32[3] = 0;
  float32x4_t v64 = vaddq_f32(v54, vaddq_f32(vaddq_f32(v58, v59), v61));
  float32x4_t v65 = vmulq_n_f32(v55, v48);
  v65.i32[3] = 0;
  float32x4_t v66 = vaddq_f32(v54, vaddq_f32(vaddq_f32(v62, v63), v65));
  char v125 = 0;
  float32x4_t v67 = vmulq_f32(vaddq_f32(v66, vaddq_f32(v60, v64)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
  v67.i32[3] = 0;
  float32x4_t v122 = v67;
  float32x4_t v126 = v60;
  float32x4_t v127 = v64;
  float32x4_t v128 = v66;
  uint64_t v123 = 0x7F7FFFFF00000000;
  uint64_t v124 = 0x57F7FFFFFLL;
  v121[1] = &v122;
  v120[1] = a1 + 64;
  v121[0] = &unk_26E728A58;
  v120[0] = &unk_26E728850;
  float v118 = v25;
  float32x4_t v119 = vsubq_f32(v67, *(float32x4_t *)(a1 + 64));
  float32x4_t v132 = 0u;
  float32x4_t v133 = 0u;
  float32x2_t v131 = 0;
  float v116 = v27;
  float v117 = v26;
  float v114 = v35;
  float v115 = v34;
  float v112 = v46;
  float v113 = v36;
  float v110 = v47;
  float v111 = v48;
  if (!physx::Gu::gjkRaycast<physx::Gu::LocalConvex<physx::Gu::TriangleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v121, (uint64_t)v120, &v119, a7, (uint64_t)&v129, &v130, (float32x4_t *)(a1 + 416), &v131, &v132, (int8x16_t *)&v133))return 1; {
  if (*(float *)&v129 >= v131.f32[0])
  }
  {
    *(unsigned char *)(a1 + 15) = 1;
    *(_DWORD *)(a1 + 360) = v49;
    *(_WORD *)(a1 + 364) = 1026;
    float v107 = -*(float *)(a1 + 440);
    *(float32x2_t *)(a1 + 380) = vneg_f32(*(float32x2_t *)(a1 + 432));
    *(float *)(a1 + 388) = v107;
    *(_DWORD *)(a1 + 392) = 0;
    v68.i32[0] = 0;
  }
  else
  {
    float32x2_t v68 = vmul_f32(v131, *(float32x2_t *)(a1 + 400));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32(v109, 0), v68).u8[0] & 1) == 0) {
      return 1;
    }
    float32x4_t v69 = v132;
    float32x4_t v70 = v133;
    float32x4_t v72 = *(float32x4_t *)(a1 + 304);
    float32x4_t v71 = *(float32x4_t *)(a1 + 320);
    float32x4_t v73 = v72;
    v73.i32[3] = 0;
    float32x2_t v74 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v72, 3).u64[0];
    *(_DWORD *)(a1 + 360) = v49;
    LODWORD(v75) = vmla_f32((float32x2_t)0xBF000000BF000000, v74, v74).u32[0];
    float32x4_t v76 = vmulq_n_f32(v70, v75);
    v76.i32[3] = 0;
    float32x2_t v77 = (float32x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
    float32x2_t v78 = (float32x2_t)vext_s8(*(int8x8_t *)v72.f32, (int8x8_t)v77, 4uLL);
    int8x8_t v79 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL), *(float32x2_t *)v72.f32), v78, *(float32x2_t *)v70.f32);
    *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v70.f32, v77), *(float32x2_t *)v72.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL)), 4uLL);
    v80.i64[1] = v79.u32[0];
    float32x4_t v81 = vmlaq_laneq_f32(v76, v80, v72, 3);
    v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
    float32x4_t v82 = vmulq_f32(v70, v73);
    v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
    float32x4_t v83 = vmlaq_n_f32(v81, v73, vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32).f32[0]);
    uint64_t v84 = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u32[0];
    float32x4_t v85 = vmulq_n_f32(v69, v75);
    v85.i32[3] = 0;
    int8x8_t v86 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 4uLL), *(float32x2_t *)v72.f32), v78, *(float32x2_t *)v69.f32);
    *(int8x8_t *)v87.f32 = vext_s8(v86, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v69.f32, v77), *(float32x2_t *)v72.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)), 4uLL);
    v87.i64[1] = v86.u32[0];
    float32x4_t v88 = vmlaq_laneq_f32(v85, v87, v72, 3);
    v88.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u32[0];
    float32x4_t v89 = vmulq_f32(v69, v73);
    v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
    float32x4_t v90 = vmlaq_n_f32(v88, v73, vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).f32[0]);
    float32x4_t v91 = vaddq_f32(v90, v90);
    v91.i32[3] = 0;
    *(_WORD *)(a1 + 364) = 1027;
    float32x4_t v92 = vmulq_f32(v91, v91);
    v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
    float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
    float32x2_t v94 = vrsqrte_f32(v93);
    int v95 = 4;
    do
    {
      float32x2_t v94 = vmul_f32(v94, vrsqrts_f32(vmul_f32(v94, v94), v93));
      --v95;
    }
    while (v95);
    __asm { FMOV            V16.2S, #1.0 }
    float32x2_t v101 = vmul_f32(v93, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v93), 0), _D16, (int8x8_t)v94));
    float32x2_t v102 = vrecpe_f32(v101);
    int v103 = 4;
    do
    {
      float32x2_t v102 = vmul_f32(v102, vrecps_f32(v101, v102));
      --v103;
    }
    while (v103);
    v83.i64[1] = v84;
    v104.i64[0] = 0x4000000040000000;
    v104.i64[1] = 0x4000000040000000;
    float32x4_t v105 = vmlaq_f32(v71, v104, v83);
    int8x16_t v106 = (int8x16_t)vmulq_n_f32(v91, v102.f32[0]);
    v105.i32[3] = v106.i32[0];
    *(float32x4_t *)(a1 + 368) = v105;
    *(void *)(a1 + 384) = vextq_s8(v106, v106, 4uLL).u64[0];
    *(_DWORD *)(a1 + 392) = v68.i32[0];
  }
  *(unsigned char *)(a1 + 14) = 1;
  *a6 = v68.f32[0] * *(float *)(a1 + 20);
  *(float *)(a1 + 24) = v118;
  *(float *)(a1 + 28) = v117;
  *(float *)(a1 + 32) = v116;
  *(float *)(a1 + 36) = v115;
  *(float *)(a1 + 40) = v114;
  *(float *)(a1 + 44) = v113;
  *(float *)(a1 + 48) = v112;
  *(float *)(a1 + 52) = v110;
  *(float *)(a1 + 56) = v111;
  return !*(unsigned char *)(a1 + 460) && *(float *)(a1 + 392) != 0.0;
}

BOOL sweepConvex_MeshGeom(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, unsigned __int16 *a7, double a8, double a9)
{
  uint64_t v301 = *MEMORY[0x263EF8340];
  BOOL v15 = *(float *)(a3 + 4) == 1.0 && *(float *)(a3 + 8) == 1.0 && *(float *)(a3 + 12) == 1.0;
  BOOL v16 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
  uint64_t v17 = *(void *)(a3 + 32);
  uint64_t v220 = *(void *)(a1 + 40);
  *(_OWORD *)float32x2_t v245 = xmmword_23435FD50;
  *(_OWORD *)&v245[16] = xmmword_23435FD50;
  long long v18 = xmmword_234376D80;
  long long v246 = xmmword_234376D80;
  long long v247 = xmmword_23435FD60;
  uint64_t v248 = 0x3F80000000000000;
  char v249 = 0;
  if (!v15)
  {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v245, (float *)(a3 + 4), (float *)(a3 + 16));
    long long v18 = xmmword_234376D80;
  }
  v241[0] = xmmword_23435FD50;
  v241[1] = xmmword_23435FD50;
  long long v242 = v18;
  *(_OWORD *)float v243 = xmmword_23435FD60;
  *(void *)&v243[16] = 0x3F80000000000000;
  char v244 = 0;
  if (!v16) {
    physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v241, (float *)(a1 + 4), (float *)(a1 + 16));
  }
  float v19 = *(float *)(v17 + 32);
  float v20 = *(float *)(v17 + 36);
  float v21 = *(float *)(v17 + 40);
  float v22 = (float)((float)(v19 * *(float *)&v245[8]) + (float)(v20 * *(float *)&v245[20])) + (float)(v21 * *(float *)&v246);
  float v23 = *(float *)(v17 + 44);
  float v24 = *(float *)(v17 + 48);
  float v25 = *(float *)(v17 + 52);
  float v26 = (float)(fabsf(*(float *)&v245[8] * v23) + fabsf(*(float *)&v245[20] * v24)) + fabsf(*(float *)&v246 * v25);
  float v27 = v22 - v26;
  float v28 = v22 + v26;
  float32x2_t v29 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v245, v19), vmul_n_f32(*(float32x2_t *)&v245[12], v20)), vmul_n_f32(*(float32x2_t *)&v245[24], v21));
  float32x2_t v30 = vadd_f32(vadd_f32(vabs_f32(vmul_n_f32(*(float32x2_t *)v245, v23)), vabs_f32(vmul_n_f32(*(float32x2_t *)&v245[12], v24))), vabs_f32(vmul_n_f32(*(float32x2_t *)&v245[24], v25)));
  float32x2_t v237 = vsub_f32(v29, v30);
  float v238 = v27;
  float32x2_t v239 = vadd_f32(v29, v30);
  float v240 = v28;
  v29.i32[0] = a4->i32[0];
  float v31 = a4->f32[1];
  float v32 = a4->f32[2];
  v30.i32[0] = a4->i32[3];
  float v33 = v31 + v31;
  float v34 = v32 + v32;
  float v35 = v31 * (float)(v31 + v31);
  float v36 = v32 * (float)(v32 + v32);
  float v37 = (float)(v29.f32[0] + v29.f32[0]) * v31;
  float v38 = (float)(v29.f32[0] + v29.f32[0]) * v32;
  float v39 = (float)(v29.f32[0] + v29.f32[0]) * v30.f32[0];
  float v40 = v33 * v32;
  float v41 = v33 * v30.f32[0];
  v30.f32[0] = v34 * v30.f32[0];
  *(float *)&float v250 = (float)(1.0 - v35) - v36;
  *((float *)&v250 + 1) = v37 + v30.f32[0];
  v29.f32[0] = 1.0 - (float)(v29.f32[0] * (float)(v29.f32[0] + v29.f32[0]));
  *(float *)&int v251 = v38 - v41;
  float v252 = v37 - v30.f32[0];
  float v253 = v29.f32[0] - v36;
  float v254 = v40 + v39;
  float v255 = v38 + v41;
  float v256 = v40 - v39;
  uint64_t v258 = a4[1].i64[0];
  float32_t v42 = a4[1].f32[2];
  float v257 = v29.f32[0] - v35;
  float v259 = v42;
  v29.i32[0] = a2->i32[0];
  float v43 = a2->f32[1];
  float v44 = a2->f32[2];
  v30.i32[0] = a2->i32[3];
  float v45 = v43 + v43;
  float v46 = v44 + v44;
  float v47 = v43 * (float)(v43 + v43);
  float v48 = v44 * (float)(v44 + v44);
  float v49 = (float)(v29.f32[0] + v29.f32[0]) * v43;
  float v50 = (float)(v29.f32[0] + v29.f32[0]) * v44;
  float v51 = (float)(v29.f32[0] + v29.f32[0]) * v30.f32[0];
  float v52 = v45 * v44;
  float v53 = v45 * v30.f32[0];
  v30.f32[0] = v46 * v30.f32[0];
  v224.f32[0] = (float)(1.0 - v47) - v48;
  v224.f32[1] = v49 + v30.f32[0];
  v29.f32[0] = 1.0 - (float)(v29.f32[0] * (float)(v29.f32[0] + v29.f32[0]));
  float v225 = v50 - v53;
  float v226 = v49 - v30.f32[0];
  float v227 = v29.f32[0] - v48;
  float v228 = v52 + v51;
  float v229 = v50 + v53;
  float v230 = v52 - v51;
  float v231 = v29.f32[0] - v47;
  uint64_t v232 = a2[1].i64[0];
  __int32 v233 = a2[1].i32[2];
  physx::Gu::computeHullOBB(v234, (uint64_t)&v237, (float *)&v250, (float *)&v224, (uint64_t)v241, v16, 0.0);
  float32x2_t v235 = vadd_f32(v235, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0));
  float v236 = v236 + *(float *)&a9;
  float32x2_t v54 = *a5;
  LODWORD(v55) = HIDWORD(*(unint64_t *)a5);
  float v56 = a5[1].f32[0];
  float v58 = a2->f32[2];
  float v57 = a2->f32[3];
  float v59 = (float)(v57 * v57) + -0.5;
  float v60 = a2->f32[0];
  float v61 = a2->f32[1];
  float v62 = (float)((float)((float)(v55 + v55) * v61) + (float)(a2->f32[0] * (float)(v54.f32[0] + v54.f32[0])))
      + (float)(v58 * (float)(v56 + v56));
  float v63 = -a2->f32[0];
  v68.f32[0] = (float)((float)((float)((float)(v54.f32[0] + v54.f32[0]) * v59)
                             - (float)((float)((float)(v61 * (float)(v56 + v56)) - (float)(v58 * (float)(v55 + v55)))
                                     * v57))
                     + (float)(a2->f32[0] * v62))
             * *(float *)&a8;
  float v64 = (float)((float)((float)((float)(v55 + v55) * v59)
                      - (float)((float)((float)(v58 * (float)(v54.f32[0] + v54.f32[0]))
                                      - (float)(a2->f32[0] * (float)(v56 + v56)))
                              * v57))
              + (float)(v61 * v62))
      * *(float *)&a8;
  float v65 = (float)((float)((float)((float)(v56 + v56) * v59)
                      - (float)((float)((float)(a2->f32[0] * (float)(v55 + v55))
                                      - (float)(v61 * (float)(v54.f32[0] + v54.f32[0])))
                              * v57))
              + (float)(v58 * v62))
      * *(float *)&a8;
  float v66 = (float)(*((float *)&v242 + 3) * v68.f32[0]) + (float)(v64 * *(float *)&v243[8]);
  float32x2_t v67 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)((char *)&v242 + 4), v68.f32[0]), vmul_n_f32(*(float32x2_t *)v243, v64)), vmul_n_f32(*(float32x2_t *)&v243[12], v65));
  v68.f32[0] = v66 + (float)(v65 * *(float *)&v243[20]);
  float32x2_t v224 = v67;
  float v225 = v68.f32[0];
  int8x8_t v69 = (int8x8_t)vmul_f32(v67, v67);
  *(float *)v69.i32 = sqrtf(vmlas_n_f32(*(float *)&v69.i32[1], v67.f32[0], v67.f32[0]) + (float)(v68.f32[0] * v68.f32[0]));
  if (*(float *)v69.i32 > 0.0)
  {
    float32x2_t v224 = vmul_n_f32(v67, 1.0 / *(float *)v69.i32);
    float v225 = v68.f32[0] * (float)(1.0 / *(float *)v69.i32);
  }
  BOOL v70 = 0;
  if (v16) {
    float v71 = 1.0;
  }
  else {
    float v71 = *(float *)v69.i32 / *(float *)&a8;
  }
  unsigned __int16 v72 = *a7;
  char v218 = *(unsigned char *)(a1 + 32);
  int v73 = *a7 & 0x80 | v218 & 2;
  *(float32x2_t *)v68.f32 = vneg_f32(v54);
  int v251 = 2;
  LODWORD(v252) = v72;
  LOBYTE(v253) = v244;
  float v254 = v71;
  float v250 = &unk_26E7297F8;
  float32x4_t v263 = 0u;
  long long v264 = 0u;
  char v265 = 0;
  int v282 = v241;
  long long v283 = 0uLL;
  __int16 v285 = 0;
  uint64_t v288 = 0;
  uint64_t v286 = 0;
  uint64_t v287 = 0;
  uint64_t v293 = v68.i64[0];
  float v294 = -v56;
  int v298 = LODWORD(a9);
  BOOL v299 = (v72 & 0x40) != 0;
  BOOL v300 = v73 != 0;
  int v289 = LODWORD(a8);
  int v284 = -1;
  float v74 = v54.f32[0] * -2.0;
  float v75 = v55 * -2.0;
  float v76 = v56 * -2.0;
  float v77 = (float)((float)(v75 * v61) + (float)(v60 * v74)) + (float)(v58 * v76);
  float v295 = (float)((float)(v74 * v59) - (float)((float)((float)(v75 * (float)-v58) + (float)(v61 * v76)) * v57))
       + (float)(v60 * v77);
  float v296 = (float)((float)(v75 * v59) - (float)((float)((float)(v76 * v63) + (float)(v58 * v74)) * v57))
       + (float)(v61 * v77);
  float v297 = (float)((float)(v76 * v59) - (float)((float)((float)(v74 * (float)-v61) + (float)(v60 * v75)) * v57))
       + (float)(v58 * v77);
  v68.f32[2] = v294;
  v78.i64[0] = a2[1].i64[0];
  v78.i64[1] = a2[1].u32[2];
  float32x4_t v79 = *a4;
  v80.i64[0] = a4[1].i64[0];
  v80.i64[1] = a4[1].u32[2];
  float32x4_t v81 = vnegq_f32(*a4);
  float32x2_t v82 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  float32x4_t v83 = v81;
  v83.i32[3] = 0;
  float32x4_t v84 = vsubq_f32(v78, v80);
  v78.i32[0] = vmla_f32((float32x2_t)0xBF000000BF000000, v82, v82).u32[0];
  float32x4_t v85 = vmulq_n_f32(v84, v78.f32[0]);
  v85.i32[3] = 0;
  float32x2_t v86 = (float32x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
  float32x2_t v87 = (float32x2_t)vext_s8(*(int8x8_t *)v81.f32, (int8x8_t)v86, 4uLL);
  int8x8_t v88 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v81.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL)), v87, *(float32x2_t *)v84.f32);
  *(int8x8_t *)v89.f32 = vext_s8(v88, (int8x8_t)vmls_f32(vmul_f32(v86, *(float32x2_t *)v84.f32), *(float32x2_t *)v81.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL)), 4uLL);
  v89.i64[1] = v88.u32[0];
  float32x4_t v90 = vmlaq_laneq_f32(v85, v89, *a4, 3);
  v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
  float32x4_t v91 = vmulq_f32(v83, v84);
  v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
  float32x4_t v92 = vmlaq_n_f32(v90, v83, vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32).f32[0]);
  float32x4_t v93 = vaddq_f32(v92, v92);
  v93.i32[3] = 0;
  float32x4_t v94 = *a2;
  v94.i32[3] = 0;
  float32x4_t v95 = vmulq_f32(v94, v83);
  v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
  float32x2_t v96 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL)), vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32));
  float32x4_t v97 = vmulq_laneq_f32(v94, *a4, 3);
  v94.i64[0] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
  int8x8_t v98 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)a2->f32, *(int8x8_t *)v94.f32, 4uLL), *(float32x2_t *)v81.f32), v87, *(float32x2_t *)a2->f32);
  *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a2->f32, v86), *(float32x2_t *)v81.f32, *(float32x2_t *)v94.f32), 4uLL);
  *(int8x8_t *)&v99.u32[2] = v98;
  float32x4_t v100 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v83, *a2, 3), v97), v99);
  *(int32x2_t *)v81.f32 = vdup_lane_s32(*(int32x2_t *)v100.f32, 1);
  *(int32x2_t *)v83.f32 = vdup_laneq_s32((int32x4_t)v100, 2);
  float32x4_t v101 = vaddq_f32(v100, v100);
  float32x2_t v102 = (float32x2_t)vdup_laneq_s32((int32x4_t)v101, 2);
  float32x2_t v103 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v101.f32), 0);
  float32x2_t v104 = vmul_lane_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v101.f32, 1);
  float32x2_t v105 = vmul_laneq_f32(*(float32x2_t *)v83.f32, v101, 2);
  *(float32x2_t *)v81.f32 = vmul_n_f32(*(float32x2_t *)v81.f32, v101.f32[0]);
  float32x2_t v106 = vmul_n_f32(*(float32x2_t *)v83.f32, v101.f32[0]);
  float32x2_t v107 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.f32, 0), v96, 1);
  *(float32x2_t *)v83.f32 = vmul_lane_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v101.f32, 1);
  *(float32x2_t *)v101.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.f32, 1), v96, 1);
  float32x2_t v108 = vmul_lane_f32(v102, v96, 1);
  __asm { FMOV            V3.2S, #1.0 }
  *(float32x2_t *)v97.f32 = vsub_f32(_D3, v103);
  *(int8x8_t *)&long long v113 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, v104), v105), (int8x8_t)vadd_f32(*(float32x2_t *)v81.f32, v108), 4uLL);
  *((void *)&v113 + 1) = vsub_f32(v106, *(float32x2_t *)v101.f32).u32[0];
  *(int8x8_t *)v81.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v81.f32, v108), (int8x8_t)vsub_f32(*(float32x2_t *)v97.f32, v105), 4uLL);
  v81.i64[1] = vadd_f32(*(float32x2_t *)v83.f32, v107).u32[0];
  *(int8x8_t *)v83.f32 = vext_s8((int8x8_t)vadd_f32(v106, *(float32x2_t *)v101.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v83.f32, v107), 4uLL);
  v83.i64[1] = vsub_f32(*(float32x2_t *)v97.f32, v104).u32[0];
  long long v276 = v113;
  float32x4_t v277 = v81;
  float32x4_t v278 = v83;
  float32x4_t v279 = v93;
  float32x4_t v280 = v79;
  float32x4_t v281 = v80;
  float32x4_t v114 = vmulq_n_f32(v68, *(float *)&a8);
  v114.i32[3] = 0;
  float32x4_t v115 = vnegq_f32(v114);
  float32x4_t v116 = v115;
  v116.i32[3] = 0;
  float32x4_t v117 = v79;
  v117.i32[3] = 0;
  float32x4_t v118 = vmulq_n_f32(v116, v78.f32[0]);
  v118.i32[3] = 0;
  v81.i64[0] = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u64[0];
  v83.i64[0] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u64[0];
  *(float32x2_t *)v101.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v115.f32, *(int8x8_t *)v83.f32, 4uLL), *(float32x2_t *)v79.f32), (float32x2_t)vext_s8(*(int8x8_t *)v79.f32, *(int8x8_t *)v81.f32, 4uLL), *(float32x2_t *)v115.f32);
  *(int8x8_t *)v115.f32 = vext_s8(*(int8x8_t *)v101.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v81.f32), *(float32x2_t *)v79.f32, *(float32x2_t *)v83.f32), 4uLL);
  v115.i64[1] = v101.u32[0];
  float32x4_t v119 = vmlsq_laneq_f32(v118, v115, v79, 3);
  v119.i64[1] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u32[0];
  float32x4_t v120 = vmulq_f32(v116, v117);
  v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
  float32x4_t v121 = vmlaq_n_f32(v119, v117, vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32).f32[0]);
  float32x4_t v122 = vaddq_f32(v121, v121);
  v122.i32[3] = 0;
  float32x4_t v292 = v122;
  unint64_t v291 = vdupq_lane_s32(*(int32x2_t *)&a8, 0).u64[0];
  float32x4_t v123 = *(float32x4_t *)(a3 + 4);
  float32x4_t v124 = v123;
  v124.i32[3] = 0;
  if (v123.f32[0] == 1.0 && v123.f32[1] == 1.0) {
    BOOL v70 = v123.f32[2] == 1.0;
  }
  float32x4_t v125 = *(float32x4_t *)(a3 + 16);
  uint64_t v126 = *(void *)(v17 + 72) + 20 * *(unsigned __int8 *)(v17 + 71);
  v127.i64[0] = *(void *)(v17 + 92);
  v127.i64[1] = *(unsigned int *)(v17 + 100);
  int32x4_t v128 = (int32x4_t)vmulq_f32(v124, v127);
  *(float32x2_t *)v128.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v128, 2), *(float32x2_t *)v128.i8);
  *(float *)v128.i32 = vpmin_f32(*(float32x2_t *)v128.i8, *(float32x2_t *)v128.i8).f32[0];
  *(float32x2_t *)&long long v264 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v128.i32);
  *((float *)&v264 + 2) = 0.025 * *(float *)v128.i32;
  if (v70)
  {
    long long v266 = xmmword_23435FD50;
    long long v267 = xmmword_23435FD60;
    long long v268 = xmmword_23435FD80;
    long long v269 = xmmword_23435FD50;
    long long v270 = xmmword_23435FD60;
    long long v271 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v129 = vrecpeq_f32(v124);
    int v130 = 4;
    do
    {
      float32x4_t v129 = vmulq_f32(v129, vrecpsq_f32(v129, v124));
      --v130;
    }
    while (v130);
    *(int32x2_t *)v131.f32 = vdup_lane_s32(*(int32x2_t *)v123.f32, 0);
    v131.i64[1] = v131.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v131, v124)), v69).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v138 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v125.f32, 1);
      float32x2_t v139 = (float32x2_t)vdup_laneq_s32((int32x4_t)v125, 2);
      float32x2_t v140 = (float32x2_t)vdup_laneq_s32((int32x4_t)v125, 3);
      float32x4_t v141 = vaddq_f32(v125, v125);
      float32x2_t v142 = vmul_lane_f32(v138, *(float32x2_t *)v141.f32, 1);
      float32x2_t v143 = vmul_laneq_f32(v139, v141, 2);
      float32x2_t v144 = vmul_n_f32(v138, v141.f32[0]);
      float32x2_t v145 = vmul_n_f32(v139, v141.f32[0]);
      float32x2_t v146 = vmul_n_f32(v140, v141.f32[0]);
      float32x2_t v147 = vmul_lane_f32(v139, *(float32x2_t *)v141.f32, 1);
      float32x2_t v148 = vmul_lane_f32(v140, *(float32x2_t *)v141.f32, 1);
      float32x2_t v149 = vmul_laneq_f32(v140, v141, 2);
      float32x2_t v150 = vsub_f32(_D3, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v125.f32, *(float32x2_t *)v141.f32), 0));
      int32x2_t v151 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D3, v142), v143), (int8x8_t)vadd_f32(v144, v149), 4uLL);
      int8x8_t v152 = (int8x8_t)vsub_f32(v144, v149);
      *(int32x2_t *)v153.f32 = v151;
      v153.i64[1] = vsub_f32(v145, v148).u32[0];
      int32x2_t v154 = (int32x2_t)vext_s8(v152, (int8x8_t)vsub_f32(v150, v143), 4uLL);
      int8x8_t v155 = (int8x8_t)vadd_f32(v145, v148);
      *(int8x8_t *)v141.f32 = vext_s8((int8x8_t)vdup_lane_s32(v151, 0), (int8x8_t)v154, 4uLL);
      int8x8_t v156 = (int8x8_t)vdup_lane_s32(v154, 1);
      *(int32x2_t *)v157.f32 = v154;
      v157.i64[1] = vadd_f32(v147, v146).u32[0];
      int32x2_t v158 = (int32x2_t)vext_s8(v155, (int8x8_t)vsub_f32(v147, v146), 4uLL);
      *(int8x8_t *)v159.f32 = vext_s8((int8x8_t)v151, v156, 4uLL);
      *(int32x2_t *)v160.f32 = v158;
      v160.i64[1] = vsub_f32(v150, v142).u32[0];
      v141.i64[1] = vdup_lane_s32(v158, 0).u32[0];
      v159.i64[1] = vdup_lane_s32(v158, 1).u32[0];
      *(int8x8_t *)v161.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v153.u32[2], 0), *(int8x8_t *)&v157.u32[2], 4uLL);
      v161.i64[1] = vdup_lane_s32(*(int32x2_t *)&v160.u32[2], 0).u32[0];
      float32x4_t v162 = vmulq_n_f32(v141, v123.f32[0]);
      v162.i32[3] = 0;
      float32x4_t v163 = vmulq_lane_f32(v159, *(float32x2_t *)v123.f32, 1);
      v163.i32[3] = 0;
      float32x4_t v164 = vmulq_laneq_f32(v161, v123, 2);
      v164.i32[3] = 0;
      float32x4_t v165 = vmulq_n_f32(v162, v153.f32[0]);
      v165.i32[3] = 0;
      float32x4_t v166 = vmulq_lane_f32(v163, *(float32x2_t *)v153.f32, 1);
      v166.i32[3] = 0;
      float32x4_t v167 = vmulq_laneq_f32(v164, v153, 2);
      v167.i32[3] = 0;
      float32x4_t v132 = vaddq_f32(v167, vaddq_f32(v165, v166));
      float32x4_t v168 = vmulq_n_f32(v162, v157.f32[0]);
      v168.i32[3] = 0;
      float32x4_t v169 = vmulq_lane_f32(v163, *(float32x2_t *)v157.f32, 1);
      v169.i32[3] = 0;
      float32x4_t v170 = vmulq_laneq_f32(v164, v157, 2);
      v170.i32[3] = 0;
      float32x4_t v133 = vaddq_f32(v170, vaddq_f32(v168, v169));
      float32x4_t v171 = vmulq_n_f32(v162, v160.f32[0]);
      v171.i32[3] = 0;
      float32x4_t v172 = vmulq_lane_f32(v163, *(float32x2_t *)v160.f32, 1);
      v172.i32[3] = 0;
      float32x4_t v173 = vmulq_laneq_f32(v164, v160, 2);
      v173.i32[3] = 0;
      float32x4_t v134 = vaddq_f32(v173, vaddq_f32(v171, v172));
      long long v266 = (__int128)v132;
      long long v267 = (__int128)v133;
      float32x4_t v174 = vmulq_n_f32(v141, v129.f32[0]);
      v174.i32[3] = 0;
      float32x4_t v175 = vmulq_lane_f32(v159, *(float32x2_t *)v129.f32, 1);
      v175.i32[3] = 0;
      float32x4_t v176 = vmulq_laneq_f32(v161, v129, 2);
      v176.i32[3] = 0;
      float32x4_t v177 = vmulq_n_f32(v174, v153.f32[0]);
      v177.i32[3] = 0;
      float32x4_t v178 = vmulq_lane_f32(v175, *(float32x2_t *)v153.f32, 1);
      v178.i32[3] = 0;
      float32x4_t v179 = vmulq_laneq_f32(v176, v153, 2);
      v179.i32[3] = 0;
      float32x4_t v135 = vaddq_f32(v179, vaddq_f32(v177, v178));
      float32x4_t v180 = vmulq_n_f32(v174, v157.f32[0]);
      v180.i32[3] = 0;
      float32x4_t v181 = vmulq_lane_f32(v175, *(float32x2_t *)v157.f32, 1);
      v181.i32[3] = 0;
      float32x4_t v182 = vmulq_laneq_f32(v176, v157, 2);
      v182.i32[3] = 0;
      float32x4_t v183 = vmulq_n_f32(v174, v160.f32[0]);
      v183.i32[3] = 0;
      float32x4_t v184 = vmulq_lane_f32(v175, *(float32x2_t *)v160.f32, 1);
      v184.i32[3] = 0;
      float32x4_t v136 = vaddq_f32(v182, vaddq_f32(v180, v181));
      float32x4_t v185 = vmulq_laneq_f32(v176, v160, 2);
      v185.i32[3] = 0;
      float32x4_t v137 = vaddq_f32(v185, vaddq_f32(v183, v184));
    }
    else
    {
      v129.i32[3] = 0;
      float32x4_t v132 = vmulq_f32(v124, (float32x4_t)xmmword_23435FD50);
      float32x4_t v133 = vmulq_f32(v124, (float32x4_t)xmmword_23435FD60);
      float32x4_t v134 = vmulq_f32(v124, (float32x4_t)xmmword_23435FD80);
      long long v266 = (__int128)v132;
      long long v267 = (__int128)v133;
      float32x4_t v135 = vmulq_f32(v129, (float32x4_t)xmmword_23435FD50);
      float32x4_t v136 = vmulq_f32(v129, (float32x4_t)xmmword_23435FD60);
      float32x4_t v137 = vmulq_f32(v129, (float32x4_t)xmmword_23435FD80);
    }
    long long v268 = (__int128)v134;
    long long v269 = (__int128)v135;
    long long v270 = (__int128)v136;
    long long v271 = (__int128)v137;
    float32x4_t v186 = vmulq_f32(v132, (float32x4_t)0);
    v186.i32[3] = 0;
    float32x4_t v187 = vmulq_f32(v133, (float32x4_t)0);
    v187.i32[3] = 0;
    float32x4_t v188 = vmulq_f32(v134, (float32x4_t)0);
    v188.i32[3] = 0;
    float32x4_t v263 = vaddq_f32(v188, vaddq_f32(v187, v186));
  }
  uint64_t v274 = v126;
  char v275 = *(unsigned char *)(v17 + 70);
  float32x4_t v263 = 0uLL;
  uint64_t v189 = *(void *)(v17 + 80);
  uint64_t v273 = v189;
  uint64_t v272 = v17 + 32;
  if (v189)
  {
    _X10 = *(void *)(v189 + 24);
    _X9 = *(void *)(v189 + 32);
    __asm
    {
      PRFM            #0, [X10]
      PRFM            #0, [X10,#0x80]
      PRFM            #0, [X9]
    }
  }
  physx::Gu::gMidphaseConvexSweepTable[*(unsigned __int16 *)(v220 + 8) - 3]();
  int v195 = BYTE2(v252);
  if (BYTE2(v252))
  {
    if (HIBYTE(v252))
    {
      if ((*a7 & 0x200) != 0)
      {
        char v214 = physx::Gu::computeConvex_TriangleMeshMTD(a1);
        *(_WORD *)(a6 + 20) = 1026;
        if (v214)
        {
          if (*(float *)(a6 + 48) == 0.0)
          {
            float v215 = -a5[1].f32[0];
            *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
            *(float *)(a6 + 44) = v215;
          }
          *(_WORD *)(a6 + 20) = 1027;
          goto LABEL_48;
        }
      }
      else
      {
        *(_WORD *)(a6 + 20) = 1026;
      }
      *(_DWORD *)(a6 + 48) = 0;
      float v216 = -a5[1].f32[0];
      *(float32x2_t *)(a6 + 36) = vneg_f32(*a5);
      *(float *)(a6 + 44) = v216;
LABEL_48:
      *(_DWORD *)(a6 + 16) = v284;
      return v195 != 0;
    }
    *(_OWORD *)a6 = v283;
    *(_DWORD *)(a6 + 16) = v284;
    *(_WORD *)(a6 + 20) = v285;
    *(void *)(a6 + 24) = v286;
    uint64_t v196 = v287;
    uint64_t v197 = v288;
    int v198 = v289;
    *(_DWORD *)(a6 + 52) = v290;
    float v199 = -*((float *)&v196 + 1);
    float v200 = -*(float *)&v197;
    float v201 = -*((float *)&v197 + 1);
    *(_DWORD *)(a6 + 32) = v196;
    *(float *)(a6 + 36) = -*((float *)&v196 + 1);
    *(float *)(a6 + 40) = -*(float *)&v197;
    *(float *)(a6 + 44) = -*((float *)&v197 + 1);
    *(_DWORD *)(a6 + 48) = v198;
    float v202 = sqrtf((float)((float)(*(float *)&v197 * *(float *)&v197) + (float)(*((float *)&v196 + 1) * *((float *)&v196 + 1)))+ (float)(*((float *)&v197 + 1) * *((float *)&v197 + 1)));
    if (v202 > 0.0)
    {
      float v203 = 1.0 / v202;
      float v199 = v203 * v199;
      float v200 = v203 * v200;
      *(float *)(a6 + 36) = v199;
      *(float *)(a6 + 40) = v200;
      float v201 = v203 * v201;
      *(float *)(a6 + 44) = v201;
    }
    if ((v218 & 2) == 0 && (v72 & 0x80) != 0)
    {
      float v204 = (float)((float)(*((float *)&v258 + 1) - v256) * (float)(v262 - v257))
           - (float)((float)(v259 - v257) * (float)(v261 - v256));
      float v205 = (float)((float)(v259 - v257) * (float)(v260 - v255))
           - (float)((float)(*(float *)&v258 - v255) * (float)(v262 - v257));
      float v206 = (float)((float)(*(float *)&v258 - v255) * (float)(v261 - v256))
           - (float)((float)(*((float *)&v258 + 1) - v256) * (float)(v260 - v255));
      float v207 = v205 + v205;
      float v208 = v206 + v206;
      float v210 = a2->f32[2];
      float v209 = a2->f32[3];
      float v211 = (float)(v209 * v209) + -0.5;
      float v212 = a2->f32[1];
      float v213 = (float)((float)(v212 * v207) + (float)(a2->f32[0] * (float)(v204 + v204))) + (float)(v210 * v208);
      if ((float)((float)((float)(a5->f32[1]
                                 * (float)((float)((float)(v209
                                                         * (float)((float)(v210 * (float)(v204 + v204))
                                                                 - (float)(a2->f32[0] * v208)))
                                                 + (float)(v207 * v211))
                                         + (float)(v212 * v213)))
                         + (float)((float)((float)((float)(v209 * (float)((float)(v212 * v208) - (float)(v210 * v207)))
                                                 + (float)((float)(v204 + v204) * v211))
                                         + (float)(a2->f32[0] * v213))
                                 * a5->f32[0]))
                 + (float)((float)((float)((float)(v209
                                                 * (float)((float)(a2->f32[0] * v207)
                                                         - (float)(v212 * (float)(v204 + v204))))
                                         + (float)(v208 * v211))
                                 + (float)(v210 * v213))
                         * a5[1].f32[0])) > 0.0)
      {
        *(float *)(a6 + 36) = -v199;
        *(float *)(a6 + 40) = -v200;
        *(float *)(a6 + 44) = -v201;
      }
    }
  }
  return v195 != 0;
}

double physx::Gu::TriangleMesh::TriangleMesh(physx::Gu::TriangleMesh *this, physx::GuMeshFactory *a2, physx::Gu::TriangleMeshData *a3)
{
  *((_WORD *)this + 4) = physx::gTable[*((unsigned int *)a3 + 2)];
  *((_WORD *)this + 5) = 3;
  *((_DWORD *)this + 6) = 1;
  *(void *)this = &unk_26E729820;
  *((void *)this + 2) = &unk_26E7298E0;
  int v3 = *((_DWORD *)a3 + 26);
  *((_DWORD *)this + 7) = *((_DWORD *)a3 + 4);
  *((_DWORD *)this + 8) = v3;
  uint64_t v4 = *((void *)a3 + 14);
  uint64_t v5 = *((void *)a3 + 15);
  *((void *)this + 5) = *((void *)a3 + 3);
  *((void *)this + 6) = v4;
  float v6 = (float)(*((float *)a3 + 10) + *((float *)a3 + 13)) * 0.5;
  *((float32x2_t *)this + 7) = vmul_f32(vadd_f32(*(float32x2_t *)((char *)a3 + 32), *(float32x2_t *)((char *)a3 + 44)), (float32x2_t)0x3F0000003F000000);
  *((float *)this + 16) = v6;
  float v7 = (float)(*((float *)a3 + 13) - *((float *)a3 + 10)) * 0.5;
  *(float32x2_t *)((char *)this + 68) = vmul_f32(vsub_f32(*(float32x2_t *)((char *)a3 + 44), *(float32x2_t *)((char *)a3 + 32)), (float32x2_t)0x3F0000003F000000);
  *((float *)this + 19) = v7;
  *((void *)this + 10) = v5;
  *((_DWORD *)this + 22) = *((_DWORD *)a3 + 14);
  *((unsigned char *)this + 92) = *((unsigned char *)a3 + 12);
  *((void *)this + 12) = *((void *)a3 + 16);
  *(_OWORD *)((char *)this + 104) = *((_OWORD *)a3 + 4);
  *((void *)this + 15) = a2;
  *((_OWORD *)this + 8) = *((_OWORD *)a3 + 5);
  uint64_t v8 = *((void *)a3 + 17);
  *((void *)this + 18) = *((void *)a3 + 12);
  *((void *)this + 19) = v8;
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 12) = 0;
  double result = 0.0;
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *((_OWORD *)a3 + 8) = 0u;
  return result;
}

void physx::Gu::TriangleMesh::~TriangleMesh(physx::Gu::TriangleMesh *this)
{
  *(void *)this = &unk_26E729820;
  *((void *)this + 2) = &unk_26E7298E0;
  if (*((unsigned char *)this + 10))
  {
    if (*((void *)this + 10)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 10) = 0;
    if (*((void *)this + 13)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 13) = 0;
    if (*((void *)this + 14)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 14) = 0;
    if (*((void *)this + 12)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 12) = 0;
    if (*((void *)this + 6)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 6) = 0;
    if (*((void *)this + 5)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 5) = 0;
    if (*((void *)this + 16)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 16) = 0;
    if (*((void *)this + 17)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 17) = 0;
    if (*((void *)this + 18)) {
      (*(void (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *((void *)this + 18) = 0;
    uint64_t v2 = *((void *)this + 19);
    if (v2)
    {
      physx::Gu::BV32Tree::release(*((void *)this + 19));
      (*(void (**)(uint64_t, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    }
  }
}

uint64_t physx::Gu::TriangleMesh::exportExtraData(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)(result + 40))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    double result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(v3 + 40), (12 * *(_DWORD *)(v3 + 28)));
  }
  if (*(void *)(v3 + 48))
  {
    char v4 = *(unsigned char *)(v3 + 92);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    if ((v4 & 2) != 0) {
      char v5 = 1;
    }
    else {
      char v5 = 2;
    }
    double result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(v3 + 48), ((3 * *(_DWORD *)(v3 + 32)) << v5));
  }
  if (*(void *)(v3 + 80))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    double result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(v3 + 80), *(unsigned int *)(v3 + 32));
  }
  if (*(void *)(v3 + 96))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    double result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(v3 + 96), (2 * *(_DWORD *)(v3 + 32)));
  }
  if (*(void *)(v3 + 104))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    double result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(v3 + 104), (4 * *(_DWORD *)(v3 + 32)));
  }
  if (*(void *)(v3 + 112))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 16);
    uint64_t v6 = *(void *)(v3 + 112);
    uint64_t v7 = (12 * *(_DWORD *)(v3 + 32));
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
    return v8(a2, v6, v7);
  }
  return result;
}

uint64_t physx::Gu::TriangleMesh::onRefCountZero(physx::Gu::TriangleMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (physx::GuMeshFactory::removeTriangleMesh(*((void *)this + 15), (uint64_t)this))
  {
    uint64_t v13 = *((unsigned __int16 *)this + 4);
    uint64_t v14 = *((void *)this + 15);
    uint64_t v15 = *(void *)this;
    if (*((_WORD *)this + 5)) {
      uint64_t result = (*(uint64_t (**)(physx::Gu::TriangleMesh *))(v15 + 32))(this);
    }
    else {
      uint64_t result = (*(uint64_t (**)(physx::Gu::TriangleMesh *))(v15 + 24))(this);
    }
    uint64_t v18 = *(unsigned int *)(v14 + 248);
    if (v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, physx::Gu::TriangleMesh *, uint64_t))(**(void **)(*(void *)(v14 + 240) + v19)
                                                                                       + 16))(*(void *)(*(void *)(v14 + 240) + v19), this, v13);
        v19 += 8;
      }
      while (v20 != v19);
    }
  }
  else
  {
    uint64_t v17 = physx::shdfnd::Foundation::mInstance;
    return physx::shdfnd::Foundation::error(v17, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuTriangleMesh.cpp", 208, "Gu::TriangleMesh::release: double deletion detected!", v10, v11, v12, a9);
  }
  return result;
}

uint64_t non-virtual thunk to'physx::Gu::TriangleMesh::onRefCountZero(physx::Gu::TriangleMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return physx::Gu::TriangleMesh::onRefCountZero((physx::Gu::TriangleMesh *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t physx::Gu::TriangleMesh::release(uint64_t this)
{
  if (atomic_fetch_add((atomic_uint *volatile)(this + 24), 0xFFFFFFFF) == 1) {
    return (*(uint64_t (**)(void))(*(void *)(this + 16) + 16))();
  }
  return this;
}

uint64_t physx::Gu::TriangleMesh::getVerticesForModification(physx::Gu::TriangleMesh *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuTriangleMesh.cpp", 220, "PxTriangleMesh::getVerticesForModification() is only supported for meshes with PxMeshMidPhase::eBVH33.", a6, a7, a8, vars0);
  return 0;
}

float physx::Gu::TriangleMesh::refitBVH@<S0>(physx::Gu::TriangleMesh *this@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuTriangleMesh.cpp", 227, "PxTriangleMesh::refitBVH() is only supported for meshes with PxMeshMidPhase::eBVH33.", a2, a3, a4, v12);
  float v7 = *((float *)this + 19);
  float32x4_t v8 = *(float32x4_t *)((char *)this + 60);
  float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)v8, vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), 0xCuLL);
  v9.f32[1] = v7;
  *(void *)&long long v10 = vsubq_f32(v8, v9).u64[0];
  v9.i32[2] = *((_DWORD *)this + 14);
  *((void *)&v10 + 1) = vaddq_f32(v8, v9).i64[1];
  v8.i32[0] = HIDWORD(*(void *)((char *)this + 60));
  *(float *)a5 = v9.f32[2] - COERCE_FLOAT(*(void *)((char *)this + 68));
  float result = v8.f32[0] + v7;
  *(_OWORD *)(a5 + 4) = v10;
  *(float *)(a5 + 20) = v8.f32[0] + v7;
  return result;
}

physx::Gu::BV4TriangleMesh *physx::Gu::BV4TriangleMesh::BV4TriangleMesh(physx::Gu::BV4TriangleMesh *this, physx::GuMeshFactory *a2, physx::Gu::TriangleMeshData *a3)
{
  physx::Gu::TriangleMesh::TriangleMesh(this, a2, a3);
  *(void *)uint64_t v5 = &unk_26E729908;
  *(void *)(v5 + 16) = &unk_26E7299C8;
  *(_DWORD *)(v5 + 160) = 0;
  uint64_t v6 = v5 + 160;
  *(void *)(v5 + 168) = 0;
  *(void *)(v5 + 176) = 0;
  *(_DWORD *)(v5 + 184) = 0;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  float v7 = (void *)(v5 + 208);
  *(void *)(v5 + 270) = 0;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 220) = 0u;
  *(_DWORD *)(v5 + 160) = *((_DWORD *)a3 + 36);
  *(_DWORD *)(v5 + 184) = *((_DWORD *)a3 + 42);
  *(_OWORD *)(v5 + 192) = *((_OWORD *)a3 + 11);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)((char *)a3 + 152);
  *((_DWORD *)a3 + 36) = 0;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 20) = 0;
  *((_DWORD *)a3 + 42) = 0;
  *((void *)a3 + 22) = 0;
  *((void *)a3 + 23) = 0;
  physx::Gu::BV4Tree::operator=(v5 + 208, (uint64_t)a3 + 192);
  *float v7 = v6;
  return this;
}

uint64_t physx::Gu::BV4TriangleMesh::exportExtraData(uint64_t a1, uint64_t a2)
{
  physx::Gu::BV4Tree::exportExtraData(a1 + 208, a2);
  return physx::Gu::TriangleMesh::exportExtraData(a1, a2);
}

__n128 physx::Gu::RTreeTriangleMesh::RTreeTriangleMesh(physx::Gu::RTreeTriangleMesh *this, physx::GuMeshFactory *a2, physx::Gu::TriangleMeshData *a3)
{
  physx::Gu::TriangleMesh::TriangleMesh(this, a2, a3);
  *(void *)uint64_t v4 = &unk_26E7299F0;
  *(void *)(v4 + 16) = &unk_26E729AB0;
  *(_DWORD *)(v4 + 244) = 0;
  *(void *)(v4 + 248) = 0;
  *(void *)(v4 + 232) = 0;
  *(_DWORD *)(v4 + 224) = 4;
  *(_OWORD *)(v4 + 160) = *((_OWORD *)a3 + 9);
  *(_OWORD *)(v4 + 176) = *((_OWORD *)a3 + 10);
  *(_OWORD *)(v4 + 192) = *((_OWORD *)a3 + 11);
  *(_OWORD *)(v4 + 208) = *((_OWORD *)a3 + 12);
  __n128 result = *((__n128 *)a3 + 14);
  *(_OWORD *)(v4 + 224) = *((_OWORD *)a3 + 13);
  *(__n128 *)(v4 + 240) = result;
  *((void *)a3 + 29) = 0;
  return result;
}

uint64_t physx::Gu::RTreeTriangleMesh::exportExtraData(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, 128);
  (*(void (**)(uint64_t, void, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 248), (112 * *(_DWORD *)(a1 + 240)));
  return physx::Gu::TriangleMesh::exportExtraData(a1, a2);
}

uint64_t physx::Gu::RTreeTriangleMesh::getVerticesForModification(physx::Gu::RTreeTriangleMesh *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 56))();
}

float32x2_t physx::Gu::RTreeTriangleMesh::refitBVH@<D0>(physx::Gu::RTreeTriangleMesh *this@<X0>, uint64_t a2@<X8>)
{
  char v4 = *((unsigned char *)this + 92);
  uint64_t v5 = (char *)this + 160;
  if ((v4 & 2) != 0) {
    uint64_t v6 = &unk_26E729BF8;
  }
  else {
    uint64_t v6 = &unk_26E729C48;
  }
  BOOL v16 = (uint64_t (**)(void, void, long long *, long long *))v6;
  long long v17 = *(_OWORD *)((char *)this + 40);
  physx::Gu::RTree::refitAllStaticTree((uint64_t)v5, &v16, (float *)a2);
  int v7 = *((_DWORD *)this + 61);
  if ((v7 & 2) == 0)
  {
    *((_DWORD *)this + 61) = v7 | 2;
    if (*((void *)this + 10))
    {
      int v8 = (*(uint64_t (**)(physx::Gu::RTreeTriangleMesh *))(*(void *)this + 80))(this);
      if (v8)
      {
        for (uint64_t i = 0; i != v8; *(unsigned char *)(*((void *)this + 10) + i++) |= 0x38u)
          ;
      }
    }
  }
  float32x4_t v10 = (float32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL);
  float32x4_t v11 = (float32x4_t)vextq_s8(*(int8x16_t *)a2, (int8x16_t)v10, 0xCuLL);
  float32x4_t v12 = vsubq_f32(*(float32x4_t *)a2, v11);
  *(uint64_t *)((char *)v11.i64 + 4) = *(void *)(a2 + 16);
  float32x4_t v13 = vaddq_f32(*(float32x4_t *)a2, v11);
  v13.i32[3] = v12.i32[3];
  float32x2_t v14 = vsub_f32(*(float32x2_t *)(a2 + 16), (float32x2_t)vext_s8(*(int8x8_t *)a2, *(int8x8_t *)v10.f32, 4uLL));
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  float32x2_t result = vmul_f32(v14, (float32x2_t)0x3F0000003F000000);
  *(float32x4_t *)((char *)this + 56) = vmulq_f32(v13, v10);
  *((float32x2_t *)this + 9) = result;
  return result;
}

uint64_t physx::Gu::BV32Tree::release(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(unsigned char *)(this + 56))
  {
    if (*(void *)(this + 32))
    {
      this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *(void *)(v1 + 32) = 0;
    }
    if (*(void *)(v1 + 40)) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(void *)(v1 + 40) = 0;
  }
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t physx::Gu::BV32Tree::load(uint64_t a1, void (***a2)(void, float *, uint64_t), int a3)
{
  physx::Gu::BV32Tree::release(a1);
  int v16 = 0;
  physx::readChunk((uint64_t)&v16 + 3, (uint64_t)&v16 + 2, (uint64_t)&v16 + 1, (uint64_t)&v16, (uint64_t (***)(void, uint64_t, uint64_t))a2);
  uint64_t result = 0;
  if (HIBYTE(v16) == 66 && BYTE2(v16) == 86 && BYTE1(v16) == 51 && v16 == 50)
  {
    unsigned int v17 = 0;
    (**a2)(a2, (float *)&v17, 4);
    unsigned int v7 = v17;
    int v8 = 1;
    if (v17 == 1 || v17 == 0x1000000) {
      goto LABEL_10;
    }
    unsigned int v9 = bswap32(v17);
    if (a3) {
      unsigned int v7 = v9;
    }
    int v8 = a3;
    if (v7 <= 3)
    {
LABEL_10:
      *(float *)(a1 + 8) = physx::readFloat(v8, a2);
      *(float *)(a1 + 12) = physx::readFloat(v8, a2);
      *(float *)(a1 + 16) = physx::readFloat(v8, a2);
      *(float *)(a1 + 20) = physx::readFloat(v8, a2);
      *(_DWORD *)(a1 + 52) = physx::readDword(v8, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      unsigned int Dword = physx::readDword(v8, (void (***)(void, unsigned __int32 *, uint64_t))a2);
      *(_DWORD *)(a1 + 48) = Dword;
      if (Dword)
      {
        uint64_t v11 = 1168 * Dword;
        uint64_t v12 = 0;
        *(void *)(a1 + 40) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32.cpp", 167);
        do
        {
          float32x4_t v13 = (__int32 *)(*(void *)(a1 + 40) + v12);
          unsigned int v14 = physx::readDword(v8, (void (***)(void, unsigned __int32 *, uint64_t))a2);
          v13[288] = v14;
          physx::readFloatBuffer(v13 + 256, v14, v8, (void (***)(void, __int32 *, void))a2);
          unsigned int v15 = 4 * v13[288];
          physx::readFloatBuffer(v13, v15, v8, (void (***)(void, __int32 *, void))a2);
          physx::readFloatBuffer(v13 + 128, v15, v8, (void (***)(void, __int32 *, void))a2);
          v12 += 1168;
        }
        while (v11 != v12);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t physx::Gu::BV32Tree::calculateLeafNode(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 32);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = (v2 >> 1) & 0x3FF;
    if (v3)
    {
      uint64_t v4 = result;
      int v5 = 0;
      unint64_t v6 = v2 >> 11;
      unint64_t v7 = v2 >> 11;
      uint64_t v8 = (v2 >> 1) & 0x3FF;
      do
      {
        v5 += *(_DWORD *)(*(void *)(result + 32) + 40 * v7++ + 32) & 1;
        --v8;
      }
      while (v8);
      *(_DWORD *)(a2 + 12) = v5;
      do
      {
        uint64_t result = physx::Gu::BV32Tree::calculateLeafNode(v4, *(void *)(v4 + 32) + 40 * v6);
        LODWORD(v6) = v6 + 1;
        --v3;
      }
      while (v3);
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  return result;
}

uint64_t physx::Gu::BV32Tree::createSOAformatNode(uint64_t result, uint64_t a2, unint64_t a3, unsigned int a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v6 = (a3 >> 1) & 0x3FF;
  if (v6)
  {
    unsigned int v9 = a4;
    uint64_t v10 = result;
    uint64_t v11 = 0;
    unint64_t v12 = a3 >> 11;
    uint64_t v13 = *(void *)(result + 32);
    uint64_t v14 = 256;
    do
    {
      uint64_t v15 = v13 + 40 * (v12 + v14 - 256);
      int v16 = *(_DWORD *)(v15 + 8);
      uint64_t v17 = a2 + v11;
      *(void *)uint64_t v17 = *(void *)v15;
      *(_DWORD *)(v17 + 8) = v16;
      *(_DWORD *)(v17 + 12) = 0;
      int v18 = *(_DWORD *)(v15 + 24);
      *(void *)(v17 + 512) = *(void *)(v15 + 16);
      *(_DWORD *)(v17 + 520) = v18;
      *(_DWORD *)(v17 + 524) = 0;
      *(_DWORD *)(a2 + 4 * v14) = *(void *)(v15 + 32);
      v11 += 16;
      ++v14;
    }
    while (16 * ((a3 >> 1) & 0x3FF) != v11);
    unsigned int v19 = 0;
    *(_DWORD *)(a2 + 1152) = v6;
    *(void *)&long long v20 = -1;
    *((void *)&v20 + 1) = -1;
    float v30[6] = v20;
    v30[7] = v20;
    v30[4] = v20;
    void v30[5] = v20;
    v30[2] = v20;
    v30[3] = v20;
    v30[0] = v20;
    v30[1] = v20;
    float v21 = (int *)(a2 + 1024);
    memset(v29, 0, sizeof(v29));
    do
    {
      unsigned int v22 = *(_DWORD *)(v13 + 40 * v12 + 32);
      if ((v22 & 1) == 0)
      {
        uint64_t v23 = v13 + 40 * v12;
        uint64_t result = *a5;
        *a5 = result + ((v22 >> 1) & 0x3FF) - *(_DWORD *)(v23 + 12);
        *float v21 = *v21 & 0x7FF | ((v19 + a4) << 11);
        *((_DWORD *)v30 + v19) = result;
        *((void *)v29 + v19++) = v23;
      }
      ++v21;
      LODWORD(v12) = v12 + 1;
      --v6;
    }
    while (v6);
    *a6 += v19;
    if (v19)
    {
      float v24 = v30;
      float v25 = (uint64_t *)v29;
      uint64_t v26 = v19;
      do
      {
        uint64_t v28 = *v25++;
        uint64_t v27 = v28;
        LODWORD(v28) = *v24++;
        uint64_t result = physx::Gu::BV32Tree::createSOAformatNode(v10, *(void *)(v10 + 40) + 1168 * v9++, *(void *)(v27 + 32), v28, a5, a6);
        --v26;
      }
      while (v26);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 1152) = 0;
  }
  return result;
}

BOOL physx::Gu::BuildBV32Ex(float32x2_t *this, physx::Gu::BV32Tree *a2, physx::Gu::SourceMesh *a3, float a4)
{
  int v4 = (int)a3;
  uint64_t v8 = *((unsigned int *)a2 + 6);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  int v62 = 0;
  BOOL v9 = physx::Gu::AABBTree::buildFromMesh((physx::Gu::AABBTree *)&v60, a2, (uint64_t)a3);
  if (v9)
  {
    if (v8) {
      uint64_t v10 = (const unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 509);
    }
    else {
      uint64_t v10 = 0;
    }
    v48[0] = a2;
    v48[1] = v10;
    int v49 = v4;
    int v50 = 0;
    int v51 = v8;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    *(void *)&v63[4] = 0;
    physx::Gu::AABBTree::walk(BOOL (*)(physx::Gu::AABBTreeNode const*,unsigned int,void *),void *)const::Local::_Walk(v61, (unsigned int *)&v63[8], (unsigned int *)&v63[4], gReorderCallback, (uint64_t)v48);
    physx::Gu::SourceMesh::remapTopology((uint64_t)a2, v10);
    if (v10) {
      (*(void (**)(uint64_t, const unsigned int *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
    }
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
    if (*((_DWORD *)a2 + 6) > 0x20u)
    {
      BuildBV4Internal(physx::Gu::BV4Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float,BOOL)::Local::_Check(*(void *)(v61 + 24));
      LODWORD(v48[0]) = 1;
      uint64_t v19 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
        long long v20 = "static const char *physx::shdfnd::ReflectionAllocator<BV32Node>::getName() [T = BV32Node]";
      }
      else {
        long long v20 = "<allocation names disabled>";
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v19 + 24)
                                                                                             + 16))(v19 + 24, 1296, v20, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 337);
      uint64_t v23 = v21;
      uint64_t v24 = 0;
      __asm { FMOV            V9.2S, #-1.0 }
      do
      {
        float32x2_t v30 = (float32x2_t *)(v21 + v24);
        void v30[5] = (float32x2_t)0xFFFFFFFFLL;
        v30[1] = 0;
        v30[2] = 0;
        v30[3] = _D9;
        v24 += 40;
        v30[4].i32[0] = -1082130432;
      }
      while (v24 != 1280);
      *(_DWORD *)(v21 + 1288) = 0;
      *(float *)&double v22 = a4;
      _BuildBV32(&v60, v21, *(void *)(v61 + 24), v48, v22);
      float v31 = physx::Gu::BV4Tree::init(this, (uint64_t)a2, v61);
      int v32 = *(_DWORD *)(v23 + 1288) + 1;
      *(_DWORD *)&v63[8] = v32;
      unsigned __int32 v33 = v48[0];
      uint64_t v34 = 40 * LODWORD(v48[0]);
      uint64_t v35 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t, float))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, v31))
      {
        float v36 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::BV32Data>::getName() [T = physx::Gu::BV32Data]";
      }
      else
      {
        float v36 = "<allocation names disabled>";
      }
      float v37 = (float32x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v35 + 24) + 16))(v35 + 24, v34, v36, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 419);
      uint64_t v38 = (uint64_t)v37;
      unint64_t v39 = 0;
      do
      {
        float v40 = &v37[v39 / 8];
        v40[4] = (float32x2_t)0xFFFFFFFFLL;
        *float v40 = 0;
        v40[1] = 0;
        v40[2] = _D9;
        v39 += 40;
        v40[3].i32[0] = -1082130432;
      }
      while (v34 != v39);
      uint64_t v41 = v61;
      float32_t v42 = (float)(*(float *)(v41 + 8) + *(float *)(v41 + 20)) * 0.5;
      *float v37 = vmul_f32(vadd_f32(*(float32x2_t *)v61, *(float32x2_t *)(v61 + 12)), (float32x2_t)0x3F0000003F000000);
      v37[1].f32[0] = v42;
      float32_t v43 = (float)(*(float *)(v41 + 20) - *(float *)(v41 + 8)) * 0.5;
      v37[2] = vmul_f32(vsub_f32(*(float32x2_t *)(v41 + 12), *(float32x2_t *)v41), (float32x2_t)0x3F0000003F000000);
      v37[3].f32[0] = v43;
      unsigned int v37[4] = (float32x2_t)(2 * *(_DWORD *)(v23 + 1288) + 2048);
      this[6].i32[1] = v32;
      *(void *)float v63 = 0;
      BuildBV32Internal(physx::Gu::BV32Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float)::Local::_Flatten((uint64_t)v37, 1u, (int *)&v63[8], v23, (unsigned int *)&v63[4], (unsigned int *)v63);
      this[3].i32[0] = v33;
      this[4] = (float32x2_t)v38;
      physx::Gu::BV32Tree::calculateLeafNode((uint64_t)this, v38);
      uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 1168 * v33, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 447);
      this[5] = (float32x2_t)v44;
      this[6].i32[0] = v33;
      float32x2_t v45 = this[4];
      unint64_t v46 = *(void *)(*(void *)&v45 + 32);
      *(_DWORD *)&v63[4] = ((v46 >> 1) & 0x3FF) - *(_DWORD *)(*(void *)&v45 + 12) + 1;
      *(_DWORD *)&v63[8] = 1;
      physx::Gu::BV32Tree::createSOAformatNode((uint64_t)this, v44, v46, 1u, &v63[4], &v63[8]);
      this[6].i32[0] = *(_DWORD *)&v63[8];
    }
    else
    {
      this[6].i32[0] = 1;
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 1168, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 289);
      this[5] = (float32x2_t)v11;
      *(_DWORD *)(v11 + 1152) = 1;
      uint64_t v12 = v61;
      float v13 = *(float *)v61;
      float v14 = *(float *)(v61 + 4);
      float v16 = *(float *)(v61 + 8);
      float v15 = *(float *)(v61 + 12);
      float v17 = *(float *)(v61 + 16);
      float v18 = *(float *)(v61 + 20);
      *(float *)uint64_t v11 = (float)(*(float *)v61 + v15) * 0.5;
      *(float *)(v11 + 4) = (float)(v14 + v17) * 0.5;
      *(float *)(v11 + 8) = (float)(v16 + v18) * 0.5;
      *(_DWORD *)(v11 + 12) = 0;
      *(float *)(v11 + 512) = (float)(v15 - v13) * 0.5;
      *(float *)(v11 + 516) = (float)(v17 - v14) * 0.5;
      *(float *)(v11 + 520) = (float)(v18 - v16) * 0.5;
      *(_DWORD *)(v11 + 524) = 0;
      *(_DWORD *)(v11 + 1024) = (2 * *((_DWORD *)a2 + 6)) | 1;
      physx::Gu::BV4Tree::init(this, (uint64_t)a2, v12);
    }
  }
  physx::Gu::AABBTree::release(&v60);
  return v9;
}

uint64_t gReorderCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 24))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 40);
    ++*(_DWORD *)(a3 + 4 * (v3 - 1) + 28);
    if (v3)
    {
      int v4 = *(_DWORD **)(a1 + 32);
      uint64_t v5 = *(void *)(a3 + 8);
      unsigned int v6 = *(_DWORD *)(a3 + 20);
      do
      {
        *(_DWORD *)(v5 + 4 * v6) = *v4;
        *v4++ = *(_DWORD *)(a3 + 20);
        unsigned int v6 = *(_DWORD *)(a3 + 20) + 1;
        *(_DWORD *)(a3 + 20) = v6;
        --v3;
      }
      while (v3);
    }
  }
  return 1;
}

BOOL physx::Gu::pcmContactBoxBox(_DWORD *a1, _DWORD *a2, float32x4_t *a3, float32x4_t *a4, int32x2_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v639 = *MEMORY[0x263EF8340];
  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  int32x2_t v16 = vdup_lane_s32(*a5, 0);
  v8.i32[0] = a1[1];
  float32x4_t v17 = v8;
  v17.i32[1] = a1[2];
  float32x4_t v18 = v17;
  v18.i32[2] = a1[3];
  v7.i32[0] = a2[1];
  int32x2_t v588 = *(int32x2_t *)v7.f32;
  v7.i32[1] = a2[2];
  float32x4_t v19 = v7;
  v19.i32[2] = a2[3];
  float32x2_t v628 = (float32x2_t)v16;
  float32x4_t v20 = *a3;
  v21.i64[0] = a3[1].i64[0];
  v21.i64[1] = a3[1].u32[2];
  v23.i64[0] = a4[1].i64[0];
  float32x4_t v22 = *a4;
  v23.i64[1] = a4[1].u32[2];
  float32x4_t v24 = vnegq_f32(*a4);
  float32x4_t v25 = vsubq_f32(v21, v23);
  float32x4_t v26 = v24;
  v26.i32[3] = 0;
  int32x4_t v27 = vdupq_laneq_s32(*(int32x4_t *)a4, 3);
  LODWORD(v28) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8).u32[0];
  float32x4_t v29 = vmulq_n_f32(v25, v28);
  v29.i32[3] = 0;
  float32x2_t v30 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  float32x2_t v31 = (float32x2_t)vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)v30, 4uLL);
  int8x8_t v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), v31, *(float32x2_t *)v25.f32);
  *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32(v30, *(float32x2_t *)v25.f32), *(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v33.i64[1] = v32.u32[0];
  float32x4_t v34 = vmlaq_laneq_f32(v29, v33, *a4, 3);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  float32x4_t v35 = vmulq_f32(v26, v25);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  float32x4_t v36 = vmlaq_n_f32(v34, v26, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
  float32x4_t v58 = vaddq_f32(v36, v36);
  v58.i32[3] = 0;
  v627[0] = v22;
  v627[1] = v23;
  float32x4_t v37 = v20;
  v37.i32[3] = 0;
  float32x2_t v38 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v20, 3).u64[0];
  float32x4_t v39 = vmulq_f32(v37, v26);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  float32x2_t v40 = vsub_f32(vmul_laneq_f32(v38, v22, 3), vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32));
  float32x4_t v41 = vmulq_laneq_f32(v37, v22, 3);
  v37.i64[0] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  int8x8_t v42 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v20.f32, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v24.f32), v31, *(float32x2_t *)v20.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v42, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v30), *(float32x2_t *)v24.f32, *(float32x2_t *)v37.f32), 4uLL);
  *(int8x8_t *)&v24.u32[2] = v42;
  float32x4_t v43 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, v20, 3), v41), v24);
  *(int32x2_t *)v24.f32 = vdup_lane_s32(*(int32x2_t *)v43.f32, 1);
  *(int32x2_t *)v26.f32 = vdup_laneq_s32((int32x4_t)v43, 2);
  float32x4_t v44 = vaddq_f32(v43, v43);
  *(int32x2_t *)v41.f32 = vdup_lane_s32(*(int32x2_t *)v44.f32, 1);
  float32x2_t v45 = (float32x2_t)vdup_laneq_s32((int32x4_t)v44, 2);
  float32x2_t v46 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v44.f32), 0);
  float32x2_t v47 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v44.f32, 1);
  float32x2_t v48 = vmul_laneq_f32(*(float32x2_t *)v26.f32, v44, 2);
  float32x2_t v49 = vmul_n_f32(*(float32x2_t *)v24.f32, v44.f32[0]);
  float32x2_t v50 = vmul_n_f32(*(float32x2_t *)v26.f32, v44.f32[0]);
  float32x2_t v51 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.f32, 0), v40, 1);
  *(float32x2_t *)v44.f32 = vmul_lane_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v44.f32, 1);
  *(float32x2_t *)v41.f32 = vmul_lane_f32(*(float32x2_t *)v41.f32, v40, 1);
  *(float32x2_t *)v26.f32 = vmul_lane_f32(v45, v40, 1);
  __asm { FMOV            V25.2S, #1.0 }
  float32x2_t v53 = vsub_f32(_D25, v46);
  *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D25, v47), v48), (int8x8_t)vadd_f32(v49, *(float32x2_t *)v26.f32), 4uLL);
  v54.i64[1] = vsub_f32(v50, *(float32x2_t *)v41.f32).u32[0];
  *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vsub_f32(v49, *(float32x2_t *)v26.f32), (int8x8_t)vsub_f32(v53, v48), 4uLL);
  v55.i64[1] = vadd_f32(*(float32x2_t *)v44.f32, v51).u32[0];
  int32x4_t v623 = (int32x4_t)v54;
  int32x4_t v624 = (int32x4_t)v55;
  *(float32x2_t *)v41.f32 = vadd_f32(v50, *(float32x2_t *)v41.f32);
  float32x4_t v56 = v58;
  *(int8x8_t *)v57.f32 = vext_s8(*(int8x8_t *)v41.f32, (int8x8_t)vsub_f32(*(float32x2_t *)v44.f32, v51), 4uLL);
  v57.i64[1] = vsub_f32(v53, v47).u32[0];
  int32x4_t v625 = (int32x4_t)v57;
  float32x4_t v626 = v58;
  v58.i32[0] = a5[1].i32[0];
  float32x2_t v584 = *(float32x2_t *)v17.f32;
  float32x2_t v591 = (float32x2_t)vdup_laneq_s32((int32x4_t)v18, 2);
  float32x2_t v59 = vpmin_f32(v591, *(float32x2_t *)v17.f32);
  float32x2_t v60 = vpmin_f32(v59, v59);
  v59.f32[0] = v58.f32[0] * 0.15;
  float32x2_t v61 = (float32x2_t)vdup_lane_s32((int32x2_t)v59, 0);
  *(int32x2_t *)v41.f32 = vdup_n_s32(0x3E19999Au);
  float32x2_t v586 = *(float32x2_t *)v7.f32;
  float32x2_t v583 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 2);
  float32x2_t v62 = vpmin_f32(v583, *(float32x2_t *)v7.f32);
  float32x2_t v63 = vpmin_f32(v62, v62);
  float v573 = v63.f32[0];
  float32x2_t v64 = vmin_f32(vmin_f32(vmul_f32(v60, *(float32x2_t *)v41.f32), v61), vmin_f32(vmul_f32(v63, *(float32x2_t *)v41.f32), v61));
  uint64_t v65 = *(unsigned __int8 *)(_X20 + 64);
  if (*(unsigned char *)(_X20 + 64))
  {
    float32x2_t v66 = vmul_f32(v64, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    float32x2_t v67 = vmul_f32(v66, v66);
    unsigned int v68 = v65 - 1;
    do
    {
      uint64_t v69 = *(void *)(_X20 + 80);
      uint64_t v70 = v68;
      float v71 = (float32x4_t *)(v69 + 48 * v68);
      float32x4_t v72 = v71[1];
      float32x4_t v73 = vmulq_n_f32(v54, COERCE_FLOAT(*v71));
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_lane_f32(v55, *(float32x2_t *)v71->f32, 1);
      v74.i32[3] = 0;
      float32x4_t v75 = vmulq_laneq_f32(v57, *v71, 2);
      v75.i32[3] = 0;
      float32x4_t v76 = vaddq_f32(v56, vaddq_f32(v75, vaddq_f32(v73, v74)));
      float32x4_t v77 = v71[2];
      float32x4_t v78 = v77;
      v78.i32[3] = 0;
      float32x4_t v79 = vmulq_f32(v78, vsubq_f32(v76, v72));
      v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
      float32x2_t v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
      float32x4_t v81 = vmlsq_lane_f32(v76, v78, v80, 0);
      v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
      float32x4_t v82 = vsubq_f32(v72, v81);
      float32x4_t v83 = vmulq_f32(v82, v82);
      v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32), v67), 0), (int8x8_t)v40).u32[0] == -1)
      {
        unsigned __int8 v84 = *(unsigned char *)(_X20 + 64) - 1;
        *(unsigned char *)(_X20 + 64) = v84;
        float32x4_t v85 = (float32x4_t *)(v69 + 48 * v84);
        float32x4_t v86 = *v85;
        float32x4_t v87 = v85[2];
        v71[1] = v85[1];
        v71[2] = v87;
        *float v71 = v86;
      }
      else
      {
        v77.i32[3] = v80.i32[1];
        v71[2] = v77;
      }
      --v68;
    }
    while (v70);
    int v88 = *(unsigned __int8 *)(_X20 + 64);
  }
  else
  {
    int v88 = 0;
  }
  v43.i32[3] = v40.i32[1];
  float32x4_t v581 = v43;
  float32x4_t v89 = vmulq_f32(v18, v18);
  v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
  float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
  float32x2_t v91 = vrsqrte_f32(v90);
  int v92 = 4;
  do
  {
    float32x2_t v91 = vmul_f32(v91, vrsqrts_f32(vmul_f32(v91, v91), v90));
    --v92;
  }
  while (v92);
  float32x2_t v593 = (float32x2_t)v16;
  float32x4_t v574 = v18;
  int32x2_t v93 = vdup_lane_s32(vceqz_f32(v90), 0);
  float32x4_t v94 = vmulq_f32(v19, v19);
  v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
  float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
  float32x2_t v96 = vrsqrte_f32(v95);
  int v97 = 4;
  do
  {
    float32x2_t v96 = vmul_f32(v96, vrsqrts_f32(vmul_f32(v96, v96), v95));
    --v97;
  }
  while (v97);
  float32x4_t v575 = v23;
  float32x4_t v577 = v21;
  int32x2_t v578 = *(int32x2_t *)v8.f32;
  if (v88 != v65) {
    goto LABEL_38;
  }
  float32x2_t v98 = vmul_n_f32(v64, physx::Gu::invalidateThresholds[v65]);
  int8x16_t v99 = (int8x16_t)vabdq_f32(v56, *(float32x4_t *)(_X20 + 16));
  *(float32x2_t *)v99.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), *(float32x2_t *)v99.i8);
  float32x4_t v100 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds + 4 * v65);
  float32x2_t v101 = vld1_dup_f32(v100);
  float32x2_t v102 = vpmax_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
  float32x4_t v103 = vmulq_f32(v20, *(float32x4_t *)(_X20 + 32));
  v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
  float32x2_t v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
  float32x4_t v105 = vmulq_f32(v22, *(float32x4_t *)(_X20 + 48));
  v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
  float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vorr_s8((int8x8_t)vcgt_f32(v101, v104), (int8x8_t)vcgt_f32(v101, v106)), (int8x8_t)vcgt_f32(v102, v98)), 0), (int8x8_t)v90).u32[0] == -1)goto LABEL_38; {
  float32x2_t v563 = v38;
  }
  float32x4_t v565 = v20;
  float32x4_t v569 = v22;
  float32x4_t v571 = (float32x4_t)v27;
  float32x4_t v579 = v19;
  float32x2_t v107 = vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v93, 0x1FuLL)), (int8x8_t)_D25, (int8x8_t)v91));
  float32x2_t v108 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v95), 0), (int8x8_t)_D25, (int8x8_t)v96);
  float v109 = 0.0;
  float v110 = 0.0;
  uint64_t v553 = v58.i64[0];
  float v567 = v28;
  float32x4_t v561 = v56;
  if (v104.f32[0] < 1.0)
  {
    float v111 = -1.0;
    if (v104.f32[0] >= -1.0) {
      float v111 = v104.f32[0];
    }
    if (v111 > 1.0) {
      float v111 = 1.0;
    }
    float32x2_t v112 = _D25;
    float32x2_t v113 = v64;
    __int32 v559 = v106.i32[0];
    float v110 = acosf(v111);
    float v109 = 0.0;
    v106.i32[0] = v559;
    float32x4_t v56 = v561;
    float32x4_t v20 = v565;
    float v28 = v567;
    float32x4_t v22 = v569;
    float32x4_t v21 = v577;
    *(int32x2_t *)v8.f32 = v578;
    float32x4_t v23 = v575;
    float32x2_t v64 = v113;
    _D25 = v112;
    v58.i64[0] = v553;
  }
  float32x2_t v114 = vmul_f32(v95, v108);
  float32x2_t v115 = vmul_n_f32(v107, v110);
  if (v106.f32[0] < 1.0)
  {
    float v116 = -1.0;
    if (v106.f32[0] >= -1.0) {
      float v116 = v106.f32[0];
    }
    if (v116 > 1.0) {
      float v116 = 1.0;
    }
    float32x2_t v117 = _D25;
    float32x2_t v118 = v64;
    float v119 = acosf(v116);
    float32x4_t v56 = v561;
    float32x4_t v20 = v565;
    float v28 = v567;
    float32x4_t v22 = v569;
    float32x4_t v21 = v577;
    *(int32x2_t *)v8.f32 = v578;
    float32x4_t v23 = v575;
    float32x2_t v64 = v118;
    v58.i64[0] = v553;
    _D25 = v117;
    float v109 = v119;
  }
  int8x8_t v120 = (int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(vmul_n_f32(v114, v109), v98), (int8x8_t)vcgt_f32(v115, v98)), 0);
  float32x4_t v19 = v579;
  v27.i64[0] = v571.i64[0];
  float32x2_t v38 = v563;
  if (vuzp1_s8(v120, v120).u32[0] == -1)
  {
LABEL_38:
    float32x2_t v555 = v64;
    *(float32x4_t *)_X20 = v581;
    *(float32x4_t *)(_X20 + 16) = v56;
    *(float32x4_t *)(_X20 + 32) = v20;
    *(float32x4_t *)(_X20 + 48) = v22;
    float32x2_t v146 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
    float32x2_t v147 = (float32x2_t)vdup_laneq_s32((int32x4_t)v20, 2);
    float32x4_t v148 = vaddq_f32(v20, v20);
    float32x2_t v149 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v148.f32), 0);
    float32x2_t v150 = vmul_lane_f32(v146, *(float32x2_t *)v148.f32, 1);
    float32x2_t v151 = vmul_laneq_f32(v147, v148, 2);
    float32x2_t v152 = vmul_n_f32(v146, v148.f32[0]);
    float32x2_t v153 = vmul_n_f32(v147, v148.f32[0]);
    float32x2_t v154 = vmul_n_f32(v38, v148.f32[0]);
    float32x2_t v155 = vmul_lane_f32(v38, *(float32x2_t *)v148.f32, 1);
    float32x2_t v156 = vmul_laneq_f32(v38, v148, 2);
    int32x2_t v157 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D25, v150), v151), (int8x8_t)vadd_f32(v152, v156), 4uLL);
    int8x8_t v158 = (int8x8_t)vdup_lane_s32(v157, 0);
    *(float32x2_t *)v148.f32 = vmul_lane_f32(v147, *(float32x2_t *)v148.f32, 1);
    int8x8_t v159 = (int8x8_t)vdup_lane_s32(v157, 1);
    *(int32x2_t *)v160.f32 = v157;
    v160.i64[1] = vsub_f32(v153, v155).u32[0];
    float32x2_t v161 = vsub_f32(_D25, v149);
    int32x2_t v162 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(v152, v156), (int8x8_t)vsub_f32(v161, v151), 4uLL);
    int8x8_t v163 = (int8x8_t)vdup_lane_s32(v162, 0);
    int8x8_t v164 = (int8x8_t)vdup_lane_s32(v162, 1);
    *(int32x2_t *)v165.f32 = v162;
    v165.i64[1] = vadd_f32(*(float32x2_t *)v148.f32, v154).u32[0];
    float32x4_t v166 = v22;
    unsigned __int32 v167 = vsub_f32(v161, v150).u32[0];
    int32x2_t v168 = (int32x2_t)vext_s8((int8x8_t)vadd_f32(v153, v155), (int8x8_t)vsub_f32(*(float32x2_t *)v148.f32, v154), 4uLL);
    float32x2_t v169 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v166.f32, 1);
    float32x2_t v170 = (float32x2_t)vdup_laneq_s32((int32x4_t)v166, 2);
    float32x4_t v171 = vaddq_f32(v166, v166);
    *(float32x2_t *)v148.f32 = vmul_lane_f32(v169, *(float32x2_t *)v171.f32, 1);
    float32x2_t v172 = vmul_laneq_f32(v170, v171, 2);
    float32x2_t v173 = vmul_n_f32(v169, v171.f32[0]);
    float32x2_t v174 = vmul_n_f32(v170, v171.f32[0]);
    float32x2_t v175 = vmul_n_f32(*(float32x2_t *)v27.i8, v171.f32[0]);
    float32x2_t v176 = vmul_lane_f32(v170, *(float32x2_t *)v171.f32, 1);
    float32x2_t v177 = vmul_lane_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v171.f32, 1);
    float32x2_t v178 = vmul_laneq_f32(*(float32x2_t *)v27.i8, v171, 2);
    *(float32x2_t *)v171.f32 = vsub_f32(_D25, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v171.f32), 0));
    int8x8_t v564 = (int8x8_t)_D25;
    unsigned __int32 v179 = vsub_f32(v174, v177).u32[0];
    float32x2_t v180 = (float32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D25, *(float32x2_t *)v148.f32), v172), (int8x8_t)vadd_f32(v173, v178), 4uLL);
    *(float32x2_t *)v181.f32 = v180;
    v181.i64[1] = v179;
    int8x8_t v182 = (int8x8_t)vsub_f32(v173, v178);
    int8x8_t v183 = (int8x8_t)vadd_f32(v176, v175).u32[0];
    *(int8x8_t *)v184.i8 = vext_s8(v182, (int8x8_t)vsub_f32(*(float32x2_t *)v171.f32, v172), 4uLL);
    v185.i64[0] = v184.i64[0];
    v185.i64[1] = v183.u32[0];
    float32x4_t v619 = v181;
    float32x4_t v620 = v185;
    *(int8x8_t *)v186.f32 = vext_s8((int8x8_t)vadd_f32(v174, v177), (int8x8_t)vsub_f32(v176, v175), 4uLL);
    v186.i64[1] = vsub_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v148.f32).u32[0];
    float32x4_t v621 = v186;
    float32x4_t v622 = v23;
    unsigned int v618 = 0;
    v603[0] = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 0);
    float32x2_t v187 = (float32x2_t)vdup_lane_s32((int32x2_t)v584, 1);
    *(float32x2_t *)&long long v597 = v187;
    *(float32x2_t *)v596.i8 = v591;
    float32x4_t v188 = vsubq_f32(v23, v21);
    float32x4_t v566 = v165;
    float32x4_t v568 = v160;
    float32x4_t v189 = vmulq_f32(v188, v160);
    v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
    *(float32x2_t *)v148.f32 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
    float32x4_t v190 = vmulq_f32(v188, v165);
    int8x8_t v556 = v158;
    int8x8_t v557 = v159;
    *(int8x8_t *)v191.f32 = vext_s8(v158, v163, 4uLL);
    uint64_t v558 = vdup_lane_s32(v168, 0).u32[0];
    v191.i64[1] = v558;
    float32x2_t v192 = (float32x2_t)vpaddq_f32(v190, v190).u64[0];
    *(int8x8_t *)v193.f32 = vext_s8(v159, v164, 4uLL);
    uint64_t v560 = vdup_lane_s32(v168, 1).u32[0];
    v193.i64[1] = v560;
    int8x8_t v194 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)&v160.u32[2], 0);
    int8x8_t v195 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)&v165.u32[2], 0);
    int8x8_t v196 = (int8x8_t)vpadd_f32(v192, v192);
    *(int8x8_t *)v197.f32 = vext_s8(v194, v195, 4uLL);
    uint64_t v562 = vdup_lane_s32((int32x2_t)v167, 0).u32[0];
    v197.i64[1] = v562;
    float32x4_t v198 = vmulq_n_f32(v191, v180.f32[0]);
    v198.i32[3] = 0;
    float32x4_t v199 = vmulq_lane_f32(v193, v180, 1);
    v199.i32[3] = 0;
    *(int8x8_t *)v200.f32 = vext_s8(*(int8x8_t *)v148.f32, v196, 4uLL);
    float32x4_t v582 = v181;
    float32x4_t v201 = vmulq_laneq_f32(v197, v181, 2);
    v201.i32[3] = 0;
    float32x4_t v202 = vaddq_f32(v201, vaddq_f32(v198, v199));
    float32x4_t v203 = vmulq_n_f32(v191, *(float *)v184.i32);
    v203.i32[3] = 0;
    float32x4_t v204 = vmulq_lane_f32(v193, *(float32x2_t *)v184.i8, 1);
    v204.i32[3] = 0;
    float32x4_t v570 = v186;
    float32x4_t v572 = v185;
    float32x4_t v205 = vmulq_laneq_f32(v197, v185, 2);
    v205.i32[3] = 0;
    float32x4_t v206 = vaddq_f32(v205, vaddq_f32(v203, v204));
    float32x4_t v207 = vmulq_n_f32(v191, v186.f32[0]);
    v207.i32[3] = 0;
    float32x4_t v208 = vmulq_lane_f32(v193, *(float32x2_t *)v186.f32, 1);
    v208.i32[3] = 0;
    float32x4_t v209 = vmulq_laneq_f32(v197, v186, 2);
    v209.i32[3] = 0;
    float32x4_t v210 = vaddq_f32(v209, vaddq_f32(v207, v208));
    *(int8x8_t *)v208.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v202.f32, 0), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v206.f32, 0), 4uLL);
    v208.i64[1] = vdup_lane_s32(*(int32x2_t *)v210.f32, 0).u32[0];
    float32x4_t v211 = vaddq_f32(vabsq_f32(v208), (float32x4_t)xmmword_234421B30);
    int32x4_t v212 = (int32x4_t)vmulq_f32(v19, v211);
    float32x2_t v213 = (float32x2_t)vdup_lane_s32(v588, 0);
    *(float32x2_t *)v595.f32 = v213;
    *(float32x2_t *)v209.f32 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v212.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v212.i8, 1), (float32x2_t)vdup_laneq_s32(v212, 2)));
    float32x2_t v214 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v200.f32, 0);
    float32x2_t v215 = vsub_f32(vadd_f32((float32x2_t)v603[0], *(float32x2_t *)v209.f32), vabs_f32(v214));
    float32x2_t v216 = (float32x2_t)vdup_lane_s32((int32x2_t)v586, 1);
    float32x2_t v630 = v216;
    int8x8_t v629 = (int8x8_t)v583;
    float32x2_t v217 = vadd_f32(v593, v215);
    if (v217.f32[0] >= 0.0)
    {
      *(int32x2_t *)v218.f32 = v168;
      *(int8x8_t *)v219.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v202.f32, 1), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v206.f32, 1), 4uLL);
      v219.i64[1] = vdup_lane_s32(*(int32x2_t *)v210.f32, 1).u32[0];
      float32x2_t v220 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v200.f32, 1);
      float32x4_t v221 = vaddq_f32(vabsq_f32(v219), (float32x4_t)xmmword_234421B30);
      int32x4_t v222 = (int32x4_t)vmulq_f32(v19, v221);
      float32x4_t v580 = v19;
      *(float32x2_t *)&v631.u32[2] = vadd_f32(v593, vsub_f32(vadd_f32(v187, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v222.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v222.i8, 1), (float32x2_t)vdup_laneq_s32(v222, 2)))), vabs_f32(v220)));
      if (v631.f32[2] >= 0.0)
      {
        v218.i64[1] = v167;
        float32x4_t v552 = v218;
        float32x4_t v223 = vmulq_f32(v188, v218);
        v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
        unsigned __int32 v224 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32).u32[0];
        *(int8x8_t *)v223.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v202, 2), (int8x8_t)vdup_laneq_s32((int32x4_t)v206, 2), 4uLL);
        v223.i64[1] = vdup_laneq_s32((int32x4_t)v210, 2).u32[0];
        float32x2_t v225 = (float32x2_t)vdup_lane_s32((int32x2_t)v224, 0);
        float32x4_t v226 = vaddq_f32(vabsq_f32(v223), (float32x4_t)xmmword_234421B30);
        int32x4_t v227 = (int32x4_t)vmulq_f32(v19, v226);
        *(float32x2_t *)&long long v632 = vadd_f32(v593, vsub_f32(vadd_f32(v591, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v227.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v227.i8, 1), (float32x2_t)vdup_laneq_s32(v227, 2)))), vabs_f32(v225)));
        if (*(float *)&v632 >= 0.0)
        {
          v200.i64[1] = v224;
          float32x4_t v228 = vaddq_f32(vabsq_f32(v202), (float32x4_t)xmmword_234421B30);
          float32x4_t v229 = vmulq_f32(v202, v200);
          v229.i64[0] = vpaddq_f32(v229, v229).u64[0];
          float32x2_t v230 = vpadd_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32);
          int32x4_t v231 = (int32x4_t)vmulq_f32(v574, v228);
          *((float32x2_t *)&v632 + 1) = vadd_f32(v593, vsub_f32(vadd_f32(v213, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v231.i8, 1), (float32x2_t)vdup_laneq_s32(v231, 2)))), vabs_f32(v230)));
          if (*((float *)&v632 + 2) >= 0.0)
          {
            float32x4_t v232 = vmulq_f32(v206, v200);
            v232.i64[0] = vpaddq_f32(v232, v232).u64[0];
            float32x2_t v233 = vpadd_f32(*(float32x2_t *)v232.f32, *(float32x2_t *)v232.f32);
            float v550 = v233.f32[0];
            float32x4_t v551 = vaddq_f32(vabsq_f32(v206), (float32x4_t)xmmword_234421B30);
            int32x4_t v234 = (int32x4_t)vmulq_f32(v574, v551);
            *(float32x2_t *)v633.i8 = vadd_f32(v593, vsub_f32(vadd_f32(v216, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v234.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v234.i8, 1), (float32x2_t)vdup_laneq_s32(v234, 2)))), vabs_f32(v233)));
            if (*(float *)v633.i32 >= 0.0)
            {
              float32x4_t v235 = vmulq_f32(v210, v200);
              v235.i64[0] = vpaddq_f32(v235, v235).u64[0];
              float32x2_t v236 = vpadd_f32(*(float32x2_t *)v235.f32, *(float32x2_t *)v235.f32);
              float32x4_t v549 = vaddq_f32(vabsq_f32(v210), (float32x4_t)xmmword_234421B30);
              int32x4_t v237 = (int32x4_t)vmulq_f32(v574, v549);
              v633.u64[1] = (unint64_t)vadd_f32(v593, vsub_f32(vadd_f32(v583, vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v237.i8, 0), vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v237.i8, 1), (float32x2_t)vdup_laneq_s32(v237, 2)))), vabs_f32(v236)));
              if (*(float *)&v633.i32[2] >= 0.0
                && (vcgt_f32(vabd_f32(vmul_lane_f32(v225, *(float32x2_t *)v202.f32, 1), vmul_laneq_f32(v220, v202, 2)), vadd_f32(v593, vadd_f32(vadd_f32(vmul_laneq_f32(v187, v228, 2), vmul_lane_f32(v591, *(float32x2_t *)v228.f32, 1)), vadd_f32(vmul_laneq_f32(v216, v211, 2), vmul_lane_f32(v583, *(float32x2_t *)v211.f32, 1))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_lane_f32(v225, *(float32x2_t *)v206.f32, 1), vmul_laneq_f32(v220, v206, 2)), vadd_f32(v593, vadd_f32(vadd_f32(vmul_laneq_f32(v187, v551, 2), vmul_lane_f32(v591, *(float32x2_t *)v551.f32, 1)), vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v211, 2), *(float *)v588.i32), vmul_n_f32(v583, v211.f32[0]))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_lane_f32(v225, *(float32x2_t *)v210.f32, 1), vmul_laneq_f32(v220, v210, 2)), vadd_f32(v593,
                        vadd_f32(vadd_f32(vmul_laneq_f32(v187, v549, 2), vmul_lane_f32(v591, *(float32x2_t *)v549.f32, 1)), vadd_f32(vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.f32, 1), *(float *)v588.i32), vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.f32, 0), v586, 1))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_laneq_f32(v214, v202, 2), vmul_n_f32(v225, v202.f32[0])), vadd_f32(v593, vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v228, 2), *(float *)v578.i32), vmul_n_f32(v591, v228.f32[0])), vadd_f32(vmul_laneq_f32(v216, v221, 2), vmul_lane_f32(v583, *(float32x2_t *)v221.f32, 1))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_laneq_f32(v214, v206, 2), vmul_n_f32(v225, v206.f32[0])), vadd_f32(v593, vadd_f32(vadd_f32(
                            vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v551, 2), *(float *)v578.i32),
                            vmul_n_f32(v591, v551.f32[0])),
                          vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v221, 2), *(float *)v588.i32), vmul_n_f32(v583, v221.f32[0]))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_laneq_f32(v214, v210, 2), vmul_n_f32(v225, v210.f32[0])), vadd_f32(v593, vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v549, 2), *(float *)v578.i32), vmul_n_f32(v591, v549.f32[0])), vadd_f32(vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v221.f32, 1), *(float *)v588.i32), vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v221.f32, 0), v586, 1))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_n_f32(v220, v202.f32[0]), vmul_lane_f32(v214, *(float32x2_t *)v202.f32, 1)), vadd_f32(v593, vadd_f32(vadd_f32(
                            vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.f32, 1), *(float *)v578.i32),
                            vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.f32, 0), v584, 1)),
                          vadd_f32(vmul_laneq_f32(v216, v226, 2), vmul_lane_f32(v583, *(float32x2_t *)v226.f32, 1))))).u8[0] & 1) == 0
                && (vcgt_f32(vabd_f32(vmul_n_f32(v220, v206.f32[0]), vmul_lane_f32(v214, *(float32x2_t *)v206.f32, 1)), vadd_f32(v593, vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v551.f32, 1), *(float *)v578.i32), vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v551.f32, 0), v584, 1)), vadd_f32(vmul_n_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v226, 2), *(float *)v588.i32), vmul_n_f32(v583, v226.f32[0]))))).u8[0] & 1) == 0&& (vcgt_f32(vabd_f32(vmul_n_f32(v220, v210.f32[0]), vmul_lane_f32(v214, *(float32x2_t *)v210.f32, 1)), vadd_f32(v593, vadd_f32(vadd_f32(vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v549.f32, 1), *(float *)v578.i32), vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v549.f32, 0), v584, 1)), vadd_f32(
                            vmul_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v226.f32, 1), *(float *)v588.i32),
                            vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v226.f32, 0), v586, 1))))).u8[0] & 1) == 0)
              {
                float v238 = v230.f32[0];
                double v554 = *(double *)v58.i64;
                int v239 = 0;
                int8x8_t v240 = (int8x8_t)vdup_lane_s32((int32x2_t)v180, 0);
                int8x8_t v241 = (int8x8_t)vdup_lane_s32((int32x2_t)v180, 1);
                int8x8_t v242 = (int8x8_t)vdup_lane_s32((int32x2_t)v179, 0);
                float32x4_t v243 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v181.f32, 1);
                float32x4_t v244 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v181, 2);
                int8x8_t v245 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v184.i8, 1);
                float32x4_t v246 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v572.f32, 0);
                float32x4_t v247 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v572.f32, 1);
                float32x4_t v248 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v572, 2);
                float32x4_t v249 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 0);
                float32x4_t v250 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 1);
                uint64_t v251 = 1;
                float32x4_t v252 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v186, 2);
                do
                {
                  float32x2_t v253 = *(float32x2_t *)&v631.f32[2 * v251];
                  if (vcgt_f32(v217, v253).u8[0])
                  {
                    int v239 = v251;
                    unsigned int v254 = -1;
                  }
                  else
                  {
                    unsigned int v254 = 0;
                  }
                  float32x2_t v217 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v254), (int8x8_t)v253, (int8x8_t)v217);
                  ++v251;
                }
                while (v251 != 6);
                int8x16_t v611 = 0uLL;
                switch(v239)
                {
                  case 0:
                    float32x4_t v255 = (float32x4_t)vdupq_lane_s32(v578, 0);
                    if (v200.f32[0] <= 0.0)
                    {
                      float32x4_t v258 = vnegq_f32(v552);
                      v258.i32[3] = 0;
                      int8x16_t v277 = (int8x16_t)vmlsq_f32(v577, v255, v568);
                      v277.i64[1] = vextq_s8(v277, v277, 8uLL).u32[0];
                      float32x4_t v592 = (float32x4_t)v277;
                      float32x4_t v594 = v568;
                    }
                    else
                    {
                      int32x4_t v256 = (int32x4_t)vnegq_f32(v568);
                      v556.i32[0] = vdup_lane_s32(*(int32x2_t *)v256.i8, 0).u32[0];
                      v557.i32[0] = vdup_lane_s32(*(int32x2_t *)v256.i8, 1).u32[0];
                      v194.i32[0] = vdup_laneq_s32(v256, 2).u32[0];
                      v256.i32[3] = 0;
                      int8x16_t v257 = (int8x16_t)vmlaq_f32(v577, v255, v568);
                      v257.i64[1] = vextq_s8(v257, v257, 8uLL).u32[0];
                      float32x4_t v592 = (float32x4_t)v257;
                      float32x4_t v594 = (float32x4_t)v256;
                      float32x4_t v258 = v552;
                    }
                    float32x4_t v278 = vsubq_f32(v575, v592);
                    float32x4_t v279 = vmulq_f32(v258, v278);
                    v279.i64[0] = vpaddq_f32(v279, v279).u64[0];
                    float32x4_t v280 = vmulq_f32(v278, v165);
                    v280.i64[0] = vpaddq_f32(v280, v280).u64[0];
                    float32x4_t v281 = vmulq_f32(v594, v278);
                    v281.i64[0] = vpaddq_f32(v281, v281).u64[0];
                    unsigned __int32 v282 = vpadd_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32).u32[0];
                    *(int8x8_t *)v281.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v279.f32, *(float32x2_t *)v279.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v280.f32, *(float32x2_t *)v280.f32), 4uLL);
                    v281.i64[1] = v282;
                    *(int8x8_t *)v279.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v258.f32, 0), v163, 4uLL);
                    v279.i64[1] = v556.u32[0];
                    int32x4_t v283 = (int32x4_t)v258;
                    *(int8x8_t *)v284.f32 = vext_s8(*(int8x8_t *)v258.f32, v164, 4uLL);
                    v284.i64[1] = v557.u32[0];
                    float32x4_t v285 = (float32x4_t)v283;
                    float32x4_t v589 = (float32x4_t)v283;
                    *(int8x8_t *)v286.f32 = vext_s8((int8x8_t)vdup_laneq_s32(v283, 2), v195, 4uLL);
                    v286.i64[1] = v194.u32[0];
                    float32x4_t v287 = vmulq_n_f32(v279, v181.f32[0]);
                    v287.i32[3] = 0;
                    float32x4_t v288 = vmulq_f32(v243, v284);
                    v288.i32[3] = 0;
                    float32x4_t v289 = vmulq_f32(v244, v286);
                    v289.i32[3] = 0;
                    float32x4_t v290 = vaddq_f32(v287, v288);
                    float32x4_t v291 = vmulq_f32(v246, v279);
                    v291.i32[3] = 0;
                    float32x4_t v292 = vmulq_f32(v247, v284);
                    v292.i32[3] = 0;
                    float32x4_t v293 = vmulq_f32(v248, v286);
                    v293.i32[3] = 0;
                    float32x4_t v294 = vmulq_f32(v249, v279);
                    v294.i32[3] = 0;
                    float32x4_t v295 = vmulq_f32(v250, v284);
                    v295.i32[3] = 0;
                    float32x4_t v296 = vmulq_f32(v252, v286);
                    v296.i32[3] = 0;
                    float32x4_t v598 = vaddq_f32(v289, v290);
                    float32x4_t v599 = vaddq_f32(v293, vaddq_f32(v291, v292));
                    float32x4_t v600 = vaddq_f32(v296, vaddq_f32(v294, v295));
                    int32x4_t v601 = (int32x4_t)v281;
                    float32x4_t v297 = vmulq_f32(v285, v594);
                    v297.i64[0] = vpaddq_f32(v297, v297).u64[0];
                    float32x4_t v298 = vmulq_f32(v594, v165);
                    v298.i64[0] = vpaddq_f32(v298, v298).u64[0];
                    float32x4_t v299 = vmulq_f32(v594, v594);
                    v299.i64[0] = vpaddq_f32(v299, v299).u64[0];
                    *(int8x8_t *)v297.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)v297.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v298.f32, *(float32x2_t *)v298.f32), 4uLL);
                    v297.i64[1] = vpadd_f32(*(float32x2_t *)v299.f32, *(float32x2_t *)v299.f32).u32[0];
                    float32x4_t v604 = v297;
                    float32x4_t v300 = vnegq_f32(v297);
                    v300.i32[3] = 0;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v300, v580);
                    physx::Gu::calculateContacts((int8x8_t *)&v596, (int8x8_t *)&v597, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v301, v302, v303, v304, v305, v306, v307);
                    float32x4_t v582 = v589;
                    float32x4_t v572 = v566;
                    goto LABEL_88;
                  case 1:
                    float32x4_t v259 = (float32x4_t)vdupq_lane_s32((int32x2_t)v584, 1);
                    if (v200.f32[1] <= 0.0)
                    {
                      float32x4_t v308 = vnegq_f32(v552);
                      v308.i32[3] = 0;
                      float32x4_t v572 = v308;
                      int8x16_t v309 = (int8x16_t)vmlsq_f32(v577, v259, v165);
                      v309.i64[1] = vextq_s8(v309, v309, 8uLL).u32[0];
                      float32x4_t v592 = (float32x4_t)v309;
                      float32x4_t v594 = v165;
                    }
                    else
                    {
                      int32x4_t v260 = (int32x4_t)vnegq_f32(v165);
                      v163.i32[0] = vdup_lane_s32(*(int32x2_t *)v260.i8, 0).u32[0];
                      v164.i32[0] = vdup_lane_s32(*(int32x2_t *)v260.i8, 1).u32[0];
                      v195.i32[0] = vdup_laneq_s32(v260, 2).u32[0];
                      v260.i32[3] = 0;
                      int8x16_t v261 = (int8x16_t)vmlaq_f32(v577, v259, v165);
                      v261.i64[1] = vextq_s8(v261, v261, 8uLL).u32[0];
                      float32x4_t v592 = (float32x4_t)v261;
                      float32x4_t v594 = (float32x4_t)v260;
                      float32x4_t v572 = v552;
                    }
                    float32x4_t v310 = vsubq_f32(v575, v592);
                    float32x4_t v311 = vmulq_f32(v310, v568);
                    v311.i64[0] = vpaddq_f32(v311, v311).u64[0];
                    float32x4_t v312 = vmulq_f32(v572, v310);
                    v312.i64[0] = vpaddq_f32(v312, v312).u64[0];
                    float32x4_t v313 = vmulq_f32(v594, v310);
                    v313.i64[0] = vpaddq_f32(v313, v313).u64[0];
                    unsigned __int32 v314 = vpadd_f32(*(float32x2_t *)v313.f32, *(float32x2_t *)v313.f32).u32[0];
                    *(int8x8_t *)v313.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v311.f32, *(float32x2_t *)v311.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v312.f32, *(float32x2_t *)v312.f32), 4uLL);
                    v313.i64[1] = v314;
                    *(int8x8_t *)v315.f32 = vext_s8(v556, *(int8x8_t *)v572.f32, 4uLL);
                    v315.i64[1] = v163.u32[0];
                    *(int8x8_t *)v316.f32 = vext_s8(v557, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v572.f32, 1), 4uLL);
                    v316.i64[1] = v164.u32[0];
                    *(int8x8_t *)v317.f32 = vext_s8(v194, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v572, (int8x16_t)v572, 8uLL), 4uLL);
                    v317.i64[1] = v195.u32[0];
                    float32x4_t v318 = vmulq_n_f32(v315, v181.f32[0]);
                    v318.i32[3] = 0;
                    float32x4_t v319 = vmulq_f32(v243, v316);
                    v319.i32[3] = 0;
                    float32x4_t v320 = vmulq_f32(v244, v317);
                    v320.i32[3] = 0;
                    float32x4_t v321 = vaddq_f32(v318, v319);
                    float32x4_t v322 = vmulq_f32(v246, v315);
                    v322.i32[3] = 0;
                    float32x4_t v323 = vmulq_f32(v247, v316);
                    v323.i32[3] = 0;
                    float32x4_t v324 = vmulq_f32(v248, v317);
                    v324.i32[3] = 0;
                    float32x4_t v325 = vmulq_f32(v249, v315);
                    v325.i32[3] = 0;
                    float32x4_t v326 = vmulq_f32(v250, v316);
                    v326.i32[3] = 0;
                    float32x4_t v327 = vmulq_f32(v252, v317);
                    v327.i32[3] = 0;
                    float32x4_t v598 = vaddq_f32(v320, v321);
                    float32x4_t v599 = vaddq_f32(v324, vaddq_f32(v322, v323));
                    float32x4_t v600 = vaddq_f32(v327, vaddq_f32(v325, v326));
                    int32x4_t v601 = (int32x4_t)v313;
                    float32x4_t v328 = vmulq_f32(v594, v568);
                    v328.i64[0] = vpaddq_f32(v328, v328).u64[0];
                    float32x4_t v329 = vmulq_f32(v572, v594);
                    v329.i64[0] = vpaddq_f32(v329, v329).u64[0];
                    float32x4_t v330 = vmulq_f32(v594, v594);
                    v330.i64[0] = vpaddq_f32(v330, v330).u64[0];
                    *(int8x8_t *)v328.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v328.f32, *(float32x2_t *)v328.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v329.f32, *(float32x2_t *)v329.f32), 4uLL);
                    v328.i64[1] = vpadd_f32(*(float32x2_t *)v330.f32, *(float32x2_t *)v330.f32).u32[0];
                    float32x4_t v604 = v328;
                    float32x4_t v331 = vnegq_f32(v328);
                    v331.i32[3] = 0;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v331, v580);
                    float v339 = (int8x8_t *)&v596;
                    goto LABEL_78;
                  case 2:
                    if (v200.f32[2] <= 0.0)
                    {
                      int8x16_t v340 = (int8x16_t)vmlsq_laneq_f32(v577, v552, v574, 2);
                      uint64_t v267 = v562;
                      v340.i64[1] = vextq_s8(v340, v340, 8uLL).u32[0];
                      float32x4_t v592 = (float32x4_t)v340;
                      float32x4_t v594 = v552;
                      uint64_t v265 = v558;
                      uint64_t v266 = v560;
                      float32x4_t v572 = v165;
                    }
                    else
                    {
                      int32x4_t v262 = (int32x4_t)vnegq_f32(v552);
                      LODWORD(v265) = vdup_lane_s32(*(int32x2_t *)v262.i8, 0).u32[0];
                      LODWORD(v266) = vdup_lane_s32(*(int32x2_t *)v262.i8, 1).u32[0];
                      LODWORD(v267) = vdup_laneq_s32(v262, 2).u32[0];
                      v262.i32[3] = 0;
                      float32x4_t v594 = (float32x4_t)v262;
                      int8x16_t v263 = (int8x16_t)vmlaq_laneq_f32(v577, v552, v574, 2);
                      v263.i64[1] = vextq_s8(v263, v263, 8uLL).u32[0];
                      float32x4_t v592 = (float32x4_t)v263;
                      float32x4_t v264 = vnegq_f32(v165);
                      v264.i32[3] = 0;
                      float32x4_t v572 = v264;
                      uint64_t v265 = v265;
                      uint64_t v266 = v266;
                      uint64_t v267 = v267;
                    }
                    float32x4_t v341 = vsubq_f32(v575, v592);
                    float32x4_t v342 = vmulq_f32(v341, v568);
                    v342.i64[0] = vpaddq_f32(v342, v342).u64[0];
                    float32x4_t v343 = vmulq_f32(v572, v341);
                    v343.i64[0] = vpaddq_f32(v343, v343).u64[0];
                    float32x4_t v344 = vmulq_f32(v594, v341);
                    v344.i64[0] = vpaddq_f32(v344, v344).u64[0];
                    *(int8x8_t *)v342.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v342.f32, *(float32x2_t *)v342.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v343.f32, *(float32x2_t *)v343.f32), 4uLL);
                    v342.i64[1] = vpadd_f32(*(float32x2_t *)v344.f32, *(float32x2_t *)v344.f32).u32[0];
                    *(int8x8_t *)v345.f32 = vext_s8(v556, *(int8x8_t *)v572.f32, 4uLL);
                    v345.i64[1] = v265;
                    *(int8x8_t *)v346.f32 = vext_s8(v557, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v572.f32, 1), 4uLL);
                    v346.i64[1] = v266;
                    *(int8x8_t *)v347.f32 = vext_s8(v194, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v572, (int8x16_t)v572, 8uLL), 4uLL);
                    v347.i64[1] = v267;
                    float32x4_t v348 = vmulq_n_f32(v345, v181.f32[0]);
                    v348.i32[3] = 0;
                    float32x4_t v349 = vmulq_f32(v243, v346);
                    v349.i32[3] = 0;
                    float32x4_t v350 = vmulq_f32(v244, v347);
                    v350.i32[3] = 0;
                    float32x4_t v351 = vaddq_f32(v348, v349);
                    float32x4_t v352 = vmulq_f32(v246, v345);
                    v352.i32[3] = 0;
                    float32x4_t v353 = vmulq_f32(v247, v346);
                    v353.i32[3] = 0;
                    float32x4_t v354 = vmulq_f32(v248, v347);
                    v354.i32[3] = 0;
                    float32x4_t v355 = vmulq_f32(v249, v345);
                    v355.i32[3] = 0;
                    float32x4_t v356 = vmulq_f32(v250, v346);
                    v356.i32[3] = 0;
                    float32x4_t v357 = vmulq_f32(v252, v347);
                    v357.i32[3] = 0;
                    float32x4_t v598 = vaddq_f32(v350, v351);
                    float32x4_t v599 = vaddq_f32(v354, vaddq_f32(v352, v353));
                    float32x4_t v600 = vaddq_f32(v357, vaddq_f32(v355, v356));
                    int32x4_t v601 = (int32x4_t)v342;
                    float32x4_t v358 = vmulq_f32(v594, v568);
                    v358.i64[0] = vpaddq_f32(v358, v358).u64[0];
                    float32x4_t v359 = vmulq_f32(v572, v594);
                    v359.i64[0] = vpaddq_f32(v359, v359).u64[0];
                    float32x4_t v360 = vmulq_f32(v594, v594);
                    v360.i64[0] = vpaddq_f32(v360, v360).u64[0];
                    *(int8x8_t *)v358.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v358.f32, *(float32x2_t *)v358.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v359.f32, *(float32x2_t *)v359.f32), 4uLL);
                    v358.i64[1] = vpadd_f32(*(float32x2_t *)v360.f32, *(float32x2_t *)v360.f32).u32[0];
                    float32x4_t v604 = v358;
                    float32x4_t v361 = vnegq_f32(v358);
                    v361.i32[3] = 0;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v361, v580);
                    float v339 = (int8x8_t *)&v597;
LABEL_78:
                    physx::Gu::calculateContacts(v603, v339, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v332, v333, v334, v335, v336, v337, v338);
                    float32x4_t v582 = v568;
                    goto LABEL_88;
                  case 3:
                    float32x4_t v268 = vnegq_f32(v181);
                    float32x4_t v269 = v268;
                    v269.i32[3] = 0;
                    if (v238 <= 0.0)
                    {
                      int8x16_t v362 = (int8x16_t)vmlaq_n_f32(v575, v181, *(float *)v588.i32);
                      v362.i64[1] = vextq_s8(v362, v362, 8uLL).u32[0];
                      v240.i32[0] = vdup_lane_s32(*(int32x2_t *)v268.f32, 0).u32[0];
                      v241.i32[0] = vdup_lane_s32(*(int32x2_t *)v268.f32, 1).u32[0];
                      v242.i32[0] = vdup_laneq_s32((int32x4_t)v268, 2).u32[0];
                      float32x4_t v592 = (float32x4_t)v362;
                      float32x4_t v594 = v269;
                    }
                    else
                    {
                      float32x4_t v270 = vnegq_f32(v570);
                      v270.i32[3] = 0;
                      float32x4_t v570 = v270;
                      int8x16_t v271 = (int8x16_t)vmlaq_n_f32(v575, v268, *(float *)v588.i32);
                      v271.i64[1] = vextq_s8(v271, v271, 8uLL).u32[0];
                      float32x4_t v592 = (float32x4_t)v271;
                      float32x4_t v594 = v181;
                      float32x4_t v582 = v269;
                    }
                    float32x4_t v363 = vsubq_f32(v577, v592);
                    float32x4_t v364 = vmulq_f32(v570, v363);
                    v364.i64[0] = vpaddq_f32(v364, v364).u64[0];
                    float32x4_t v365 = vmulq_f32(v363, v572);
                    v365.i64[0] = vpaddq_f32(v365, v365).u64[0];
                    float32x4_t v366 = vmulq_f32(v594, v363);
                    v366.i64[0] = vpaddq_f32(v366, v366).u64[0];
                    unsigned __int32 v367 = vpadd_f32(*(float32x2_t *)v366.f32, *(float32x2_t *)v366.f32).u32[0];
                    *(int8x8_t *)v366.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v364.f32, *(float32x2_t *)v364.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v365.f32, *(float32x2_t *)v365.f32), 4uLL);
                    v366.i64[1] = v367;
                    *(int8x8_t *)v364.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v570.f32, 0), *(int8x8_t *)v184.i8, 4uLL);
                    v364.i64[1] = v240.u32[0];
                    *(int8x8_t *)v365.f32 = vext_s8(*(int8x8_t *)v570.f32, v245, 4uLL);
                    v365.i64[1] = v241.u32[0];
                    *(int8x8_t *)v368.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v570, 2), (int8x8_t)v183.u32[0], 4uLL);
                    v368.i64[1] = v242.u32[0];
                    float32x4_t v369 = vmulq_n_f32(v364, v568.f32[0]);
                    v369.i32[3] = 0;
                    float32x4_t v370 = vmulq_lane_f32(v365, *(float32x2_t *)v568.f32, 1);
                    v370.i32[3] = 0;
                    float32x4_t v371 = vmulq_laneq_f32(v368, v568, 2);
                    v371.i32[3] = 0;
                    float32x4_t v372 = vaddq_f32(v369, v370);
                    float32x4_t v373 = vmulq_n_f32(v364, v165.f32[0]);
                    v373.i32[3] = 0;
                    float32x4_t v374 = vmulq_lane_f32(v365, *(float32x2_t *)v165.f32, 1);
                    v374.i32[3] = 0;
                    float32x4_t v375 = vaddq_f32(v371, v372);
                    float32x4_t v376 = vmulq_laneq_f32(v368, v165, 2);
                    v376.i32[3] = 0;
                    float32x4_t v377 = vmulq_n_f32(v364, v552.f32[0]);
                    v377.i32[3] = 0;
                    float32x4_t v378 = vmulq_lane_f32(v365, *(float32x2_t *)v552.f32, 1);
                    v378.i32[3] = 0;
                    float32x4_t v379 = vmulq_laneq_f32(v368, v552, 2);
                    v379.i32[3] = 0;
                    float32x4_t v598 = v375;
                    float32x4_t v599 = vaddq_f32(v376, vaddq_f32(v373, v374));
                    float32x4_t v600 = vaddq_f32(v379, vaddq_f32(v377, v378));
                    int32x4_t v601 = (int32x4_t)v366;
                    float32x4_t v380 = vmulq_f32(v570, v582);
                    v380.i64[0] = vpaddq_f32(v380, v380).u64[0];
                    float32x4_t v381 = vmulq_f32(v582, v572);
                    v381.i64[0] = vpaddq_f32(v381, v381).u64[0];
                    float32x4_t v382 = vmulq_f32(v594, v582);
                    v382.i64[0] = vpaddq_f32(v382, v382).u64[0];
                    *(int8x8_t *)v380.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v380.f32, *(float32x2_t *)v380.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v381.f32, *(float32x2_t *)v381.f32), 4uLL);
                    v380.i64[1] = vpadd_f32(*(float32x2_t *)v382.f32, *(float32x2_t *)v382.f32).u32[0];
                    float32x4_t v604 = v380;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v380, v574);
                    physx::Gu::calculateContacts(&v629, (int8x8_t *)&v630, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v383, v384, v385, v386, v387, v388, v389);
                    float32x4_t v582 = v570;
                    goto LABEL_85;
                  case 4:
                    float32x4_t v272 = vnegq_f32(v572);
                    float32x4_t v273 = v272;
                    v273.i32[3] = 0;
                    if (v550 <= 0.0)
                    {
                      float32x4_t v272 = v572;
                      float32x4_t v594 = v273;
                      float32x4_t v273 = v572;
                    }
                    else
                    {
                      float32x4_t v274 = vnegq_f32(v570);
                      v274.i32[3] = 0;
                      float32x4_t v570 = v274;
                      float32x4_t v594 = v572;
                    }
                    float32x4_t v390 = vmlaq_lane_f32(v575, v272, v586, 1);
                    v390.i64[1] = vextq_s8((int8x16_t)v390, (int8x16_t)v390, 8uLL).u32[0];
                    float32x4_t v576 = v390;
                    float32x4_t v391 = vsubq_f32(v577, v390);
                    float32x4_t v392 = vmulq_f32(v391, v181);
                    v392.i64[0] = vpaddq_f32(v392, v392).u64[0];
                    float32x4_t v393 = vmulq_f32(v570, v391);
                    v393.i64[0] = vpaddq_f32(v393, v393).u64[0];
                    float32x4_t v394 = vmulq_f32(v594, v391);
                    v394.i64[0] = vpaddq_f32(v394, v394).u64[0];
                    unsigned __int32 v395 = vpadd_f32(*(float32x2_t *)v394.f32, *(float32x2_t *)v394.f32).u32[0];
                    *(int8x8_t *)v394.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v392.f32, *(float32x2_t *)v392.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v393.f32, *(float32x2_t *)v393.f32), 4uLL);
                    v394.i64[1] = v395;
                    *(int8x8_t *)v393.f32 = vext_s8(v240, *(int8x8_t *)v570.f32, 4uLL);
                    v393.i64[1] = vdup_lane_s32(*(int32x2_t *)v594.f32, 0).u32[0];
                    *(int8x8_t *)v392.f32 = vext_s8(v241, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v570.f32, 1), 4uLL);
                    v392.i64[1] = vdup_lane_s32(*(int32x2_t *)v594.f32, 1).u32[0];
                    *(int8x8_t *)v396.f32 = vext_s8(v242, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v570, (int8x16_t)v570, 8uLL), 4uLL);
                    v396.i64[1] = vdup_laneq_s32((int32x4_t)v594, 2).u32[0];
                    float32x4_t v397 = vmulq_n_f32(v393, v568.f32[0]);
                    v397.i32[3] = 0;
                    float32x4_t v398 = vmulq_lane_f32(v392, *(float32x2_t *)v568.f32, 1);
                    v398.i32[3] = 0;
                    float32x4_t v399 = vmulq_laneq_f32(v396, v568, 2);
                    v399.i32[3] = 0;
                    float32x4_t v400 = vaddq_f32(v397, v398);
                    float32x4_t v401 = vmulq_n_f32(v393, v165.f32[0]);
                    v401.i32[3] = 0;
                    float32x4_t v402 = vmulq_lane_f32(v392, *(float32x2_t *)v165.f32, 1);
                    v402.i32[3] = 0;
                    float32x4_t v403 = vaddq_f32(v399, v400);
                    float32x4_t v404 = vmulq_laneq_f32(v396, v165, 2);
                    v404.i32[3] = 0;
                    float32x4_t v405 = vmulq_n_f32(v393, v552.f32[0]);
                    v405.i32[3] = 0;
                    float32x4_t v406 = vmulq_lane_f32(v392, *(float32x2_t *)v552.f32, 1);
                    v406.i32[3] = 0;
                    float32x4_t v407 = vmulq_laneq_f32(v396, v552, 2);
                    v407.i32[3] = 0;
                    float32x4_t v598 = v403;
                    float32x4_t v599 = vaddq_f32(v404, vaddq_f32(v401, v402));
                    float32x4_t v600 = vaddq_f32(v407, vaddq_f32(v405, v406));
                    int32x4_t v601 = (int32x4_t)v394;
                    float32x4_t v408 = vmulq_f32(v273, v181);
                    v408.i64[0] = vpaddq_f32(v408, v408).u64[0];
                    float32x4_t v409 = vmulq_f32(v570, v273);
                    v409.i64[0] = vpaddq_f32(v409, v409).u64[0];
                    float32x4_t v410 = vmulq_f32(v594, v273);
                    v410.i64[0] = vpaddq_f32(v410, v410).u64[0];
                    v405.i32[0] = vpadd_f32(*(float32x2_t *)v410.f32, *(float32x2_t *)v410.f32).u32[0];
                    *(int8x8_t *)v410.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v408.f32, *(float32x2_t *)v408.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v409.f32, *(float32x2_t *)v409.f32), 4uLL);
                    v410.i64[1] = v405.u32[0];
                    float32x4_t v604 = v410;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v410, v574);
                    physx::Gu::calculateContacts((int8x8_t *)&v595, &v629, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v411, v412, v413, v414, v415, v416, v417);
                    float32x4_t v572 = v570;
                    float32x4_t v592 = v576;
                    goto LABEL_85;
                  case 5:
                    if (v236.f32[0] <= 0.0)
                    {
                      int8x16_t v184 = (int8x16_t)vnegq_f32(v572);
                      float32x4_t v418 = (float32x4_t)v184;
                      v418.i32[3] = 0;
                      float32x4_t v572 = v418;
                      float32x4_t v419 = vnegq_f32(v570);
                      v419.i32[3] = 0;
                      float32x4_t v594 = v419;
                      int8x16_t v420 = (int8x16_t)vmlaq_laneq_f32(v575, v570, v580, 2);
                      v420.i64[1] = vextq_s8(v420, v420, 8uLL).u32[0];
                      int8x8_t v245 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v184.i8, 1);
                      int8x8_t v183 = (int8x8_t)vextq_s8(v184, v184, 8uLL).u64[0];
                      float32x4_t v592 = (float32x4_t)v420;
                    }
                    else
                    {
                      int8x16_t v275 = (int8x16_t)vmlsq_laneq_f32(v575, v186, v580, 2);
                      float32x4_t v594 = v186;
                      float32x4_t v276 = vnegq_f32(v186);
                      v276.i32[3] = 0;
                      v275.i64[1] = vextq_s8(v275, v275, 8uLL).u32[0];
                      float32x4_t v592 = (float32x4_t)v275;
                      float32x4_t v570 = v276;
                    }
                    float32x4_t v421 = vsubq_f32(v577, v592);
                    float32x4_t v422 = vmulq_f32(v421, v181);
                    v422.i64[0] = vpaddq_f32(v422, v422).u64[0];
                    float32x4_t v423 = vmulq_f32(v572, v421);
                    v423.i64[0] = vpaddq_f32(v423, v423).u64[0];
                    float32x4_t v424 = vmulq_f32(v594, v421);
                    v424.i64[0] = vpaddq_f32(v424, v424).u64[0];
                    unsigned __int32 v425 = vpadd_f32(*(float32x2_t *)v424.f32, *(float32x2_t *)v424.f32).u32[0];
                    *(int8x8_t *)v424.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v422.f32, *(float32x2_t *)v422.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v423.f32, *(float32x2_t *)v423.f32), 4uLL);
                    v424.i64[1] = v425;
                    *(int8x8_t *)v423.f32 = vext_s8(v240, *(int8x8_t *)v184.i8, 4uLL);
                    v423.i64[1] = vdup_lane_s32(*(int32x2_t *)v594.f32, 0).u32[0];
                    *(int8x8_t *)v426.f32 = vext_s8(v241, v245, 4uLL);
                    v426.i64[1] = vdup_lane_s32(*(int32x2_t *)v594.f32, 1).u32[0];
                    *(int8x8_t *)v427.f32 = vext_s8(v242, v183, 4uLL);
                    v427.i64[1] = vdup_laneq_s32((int32x4_t)v594, 2).u32[0];
                    float32x4_t v428 = vmulq_n_f32(v423, v568.f32[0]);
                    v428.i32[3] = 0;
                    float32x4_t v429 = vmulq_lane_f32(v426, *(float32x2_t *)v568.f32, 1);
                    v429.i32[3] = 0;
                    float32x4_t v430 = vmulq_laneq_f32(v427, v568, 2);
                    v430.i32[3] = 0;
                    float32x4_t v431 = vaddq_f32(v428, v429);
                    float32x4_t v432 = vmulq_n_f32(v423, v165.f32[0]);
                    v432.i32[3] = 0;
                    float32x4_t v433 = vmulq_lane_f32(v426, *(float32x2_t *)v165.f32, 1);
                    v433.i32[3] = 0;
                    float32x4_t v434 = vaddq_f32(v430, v431);
                    float32x4_t v435 = vmulq_laneq_f32(v427, v165, 2);
                    v435.i32[3] = 0;
                    float32x4_t v436 = vmulq_n_f32(v423, v552.f32[0]);
                    v436.i32[3] = 0;
                    float32x4_t v437 = vmulq_lane_f32(v426, *(float32x2_t *)v552.f32, 1);
                    v437.i32[3] = 0;
                    float32x4_t v438 = vmulq_laneq_f32(v427, v552, 2);
                    v438.i32[3] = 0;
                    float32x4_t v598 = v434;
                    float32x4_t v599 = vaddq_f32(v435, vaddq_f32(v432, v433));
                    float32x4_t v600 = vaddq_f32(v438, vaddq_f32(v436, v437));
                    int32x4_t v601 = (int32x4_t)v424;
                    float32x4_t v439 = vmulq_f32(v570, v181);
                    v439.i64[0] = vpaddq_f32(v439, v439).u64[0];
                    float32x4_t v440 = vmulq_f32(v572, v570);
                    v440.i64[0] = vpaddq_f32(v440, v440).u64[0];
                    float32x4_t v441 = vmulq_f32(v594, v570);
                    v441.i64[0] = vpaddq_f32(v441, v441).u64[0];
                    *(int8x8_t *)v439.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v439.f32, *(float32x2_t *)v439.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v440.f32, *(float32x2_t *)v440.f32), 4uLL);
                    v439.i64[1] = vpadd_f32(*(float32x2_t *)v441.f32, *(float32x2_t *)v441.f32).u32[0];
                    float32x4_t v604 = v439;
                    physx::Gu::getIncidentPolygon(&v635, &v611, &v598, v439, v574);
                    physx::Gu::calculateContacts((int8x8_t *)&v595, (int8x8_t *)&v630, &v635, (int32x4_t *)&v611, &v604, a7, &v618, &v628, v442, v443, v444, v445, v446, v447, v448);
LABEL_85:
                    uint64_t v449 = v618;
                    if (v618)
                    {
                      float32x4_t v450 = (_OWORD *)(a7 + 16);
                      do
                      {
                        long long v451 = *(v450 - 1);
                        *(v450 - 1) = *v450;
                        *float32x4_t v450 = v451;
                        v450 += 3;
                        --v449;
                      }
                      while (v449);
                    }
LABEL_88:
                    unsigned int v452 = v618;
                    if (v618)
                    {
                      uint64_t v453 = 0;
                      float32x4_t v454 = vsubq_f32(v592, v622);
                      float32x4_t v455 = vmulq_f32(v619, v454);
                      v455.i64[0] = vpaddq_f32(v455, v455).u64[0];
                      float32x4_t v456 = vmulq_f32(v454, v620);
                      v456.i64[0] = vpaddq_f32(v456, v456).u64[0];
                      float32x4_t v457 = vmulq_f32(v454, v621);
                      v457.i64[0] = vpaddq_f32(v457, v457).u64[0];
                      unsigned __int32 v458 = vpadd_f32(*(float32x2_t *)v457.f32, *(float32x2_t *)v457.f32).u32[0];
                      *(int8x8_t *)v459.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v455.f32, *(float32x2_t *)v455.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v456.f32, *(float32x2_t *)v456.f32), 4uLL);
                      v459.i64[1] = v458;
                      *(int8x8_t *)v460.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v619.f32, 0), *(int8x8_t *)v620.f32, 4uLL);
                      v460.i64[1] = vdup_lane_s32(*(int32x2_t *)v621.f32, 0).u32[0];
                      *(int8x8_t *)v461.f32 = vext_s8(*(int8x8_t *)v619.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v620.f32, 1), 4uLL);
                      v461.i64[1] = vdup_lane_s32(*(int32x2_t *)v621.f32, 1).u32[0];
                      float32x4_t v585 = v619;
                      float32x4_t v587 = v620;
                      float32x4_t v590 = v621;
                      *(int8x8_t *)v456.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v619, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v587, (int8x16_t)v587, 8uLL), 4uLL);
                      v456.i64[1] = vdup_laneq_s32((int32x4_t)v621, 2).u32[0];
                      float32x4_t v462 = vmulq_n_f32(v460, v582.f32[0]);
                      v462.i32[3] = 0;
                      float32x4_t v463 = vmulq_lane_f32(v461, *(float32x2_t *)v582.f32, 1);
                      v463.i32[3] = 0;
                      float32x4_t v464 = vmulq_laneq_f32(v456, v582, 2);
                      v464.i32[3] = 0;
                      float32x4_t v465 = vaddq_f32(v464, vaddq_f32(v462, v463));
                      float32x4_t v466 = vmulq_n_f32(v460, v572.f32[0]);
                      v466.i32[3] = 0;
                      float32x4_t v467 = vmulq_lane_f32(v461, *(float32x2_t *)v572.f32, 1);
                      v467.i32[3] = 0;
                      float32x4_t v468 = vmulq_laneq_f32(v456, v572, 2);
                      v468.i32[3] = 0;
                      float32x4_t v469 = vaddq_f32(v466, v467);
                      float32x4_t v470 = vmulq_n_f32(v460, v594.f32[0]);
                      v470.i32[3] = 0;
                      float32x4_t v471 = vmulq_lane_f32(v461, *(float32x2_t *)v594.f32, 1);
                      v471.i32[3] = 0;
                      float32x4_t v472 = vmulq_laneq_f32(v456, v594, 2);
                      v472.i32[3] = 0;
                      float32x4_t v473 = vsubq_f32(v592, v577);
                      float32x4_t v474 = vmulq_f32(v473, v568);
                      v474.i64[0] = vpaddq_f32(v474, v474).u64[0];
                      float32x4_t v475 = vmulq_f32(v473, v566);
                      v475.i64[0] = vpaddq_f32(v475, v475).u64[0];
                      float32x4_t v476 = vmulq_f32(v473, v552);
                      v476.i64[0] = vpaddq_f32(v476, v476).u64[0];
                      unsigned __int32 v477 = vpadd_f32(*(float32x2_t *)v476.f32, *(float32x2_t *)v476.f32).u32[0];
                      *(int8x8_t *)v478.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v474.f32, *(float32x2_t *)v474.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v475.f32, *(float32x2_t *)v475.f32), 4uLL);
                      v478.i64[1] = v477;
                      float32x4_t v479 = vaddq_f32(v468, v469);
                      *(int8x8_t *)v468.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v568.f32, 0), *(int8x8_t *)v566.f32, 4uLL);
                      v468.i64[1] = v558;
                      *(int8x8_t *)v475.f32 = vext_s8(*(int8x8_t *)v568.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v566.f32, 1), 4uLL);
                      v475.i64[1] = v560;
                      *(int8x8_t *)v480.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v568, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v566, (int8x16_t)v566, 8uLL), 4uLL);
                      v480.i64[1] = v562;
                      float32x4_t v481 = vaddq_f32(v472, vaddq_f32(v470, v471));
                      float32x4_t v482 = vaddq_f32(vmulq_laneq_f32(v480, v582, 2), vaddq_f32(vmulq_n_f32(v468, v582.f32[0]), vmulq_lane_f32(v475, *(float32x2_t *)v582.f32, 1)));
                      float32x4_t v483 = vaddq_f32(vmulq_laneq_f32(v480, v572, 2), vaddq_f32(vmulq_n_f32(v468, v572.f32[0]), vmulq_lane_f32(v475, *(float32x2_t *)v572.f32, 1)));
                      float32x4_t v484 = vaddq_f32(vmulq_laneq_f32(v480, v594, 2), vaddq_f32(vmulq_n_f32(v468, v594.f32[0]), vmulq_lane_f32(v475, *(float32x2_t *)v594.f32, 1)));
                      float32x4_t v485 = vaddq_f32(vmulq_laneq_f32(v481, *(float32x4_t *)(a7 + 32), 2), vaddq_f32(vmulq_n_f32(v465, COERCE_FLOAT(*(_OWORD *)(a7 + 32))), vmulq_lane_f32(v479, *(float32x2_t *)(a7 + 32), 1)));
                      uint64_t v486 = 48 * v618;
                      do
                      {
                        v487 = (float32x4_t *)(a7 + v453);
                        float32x4_t v488 = *(float32x4_t *)(a7 + v453);
                        float32x4_t v489 = *(float32x4_t *)(a7 + v453 + 16);
                        float32x4_t v490 = vmulq_n_f32(v482, v488.f32[0]);
                        v490.i32[3] = 0;
                        float32x4_t v491 = vmulq_lane_f32(v483, *(float32x2_t *)v488.f32, 1);
                        v491.i32[3] = 0;
                        float32x4_t v492 = vmulq_laneq_f32(v484, v488, 2);
                        v492.i32[3] = 0;
                        float32x4_t v493 = vaddq_f32(v492, vaddq_f32(v490, v491));
                        float32x4_t v494 = vmulq_n_f32(v465, v489.f32[0]);
                        v494.i32[3] = 0;
                        float32x4_t v495 = vmulq_lane_f32(v479, *(float32x2_t *)v489.f32, 1);
                        v495.i32[3] = 0;
                        float32x4_t v496 = vmulq_laneq_f32(v481, v489, 2);
                        v496.i32[3] = 0;
                        float32x4_t *v487 = vaddq_f32(v493, v478);
                        v487[1] = vaddq_f32(vaddq_f32(v496, vaddq_f32(v494, v495)), v459);
                        float32x4_t v497 = v485;
                        v497.i32[3] = *(_DWORD *)(a7 + v453 + 44);
                        v487[2] = v497;
                        v453 += 48;
                      }
                      while (v486 != v453);
                      physx::Gu::PersistentContactManifold::addBatchManifoldContacts(_X20, (int32x4_t *)a7, v452, v554);
                      float32x4_t v498 = *(float32x4_t *)(*(void *)(_X20 + 80) + 32);
                      float32x4_t v499 = vmulq_n_f32(v585, v498.f32[0]);
                      v499.i32[3] = 0;
                      float32x4_t v500 = vmulq_lane_f32(v587, *(float32x2_t *)v498.f32, 1);
                      v500.i32[3] = 0;
                      float32x4_t v501 = vmulq_laneq_f32(v590, v498, 2);
                      v501.i32[3] = 0;
                      float32x4_t v502 = vaddq_f32(v501, vaddq_f32(v499, v500));
                      float32x4_t v503 = vmulq_f32(v502, v502);
                      v503.i64[0] = vpaddq_f32(v503, v503).u64[0];
                      float32x2_t v504 = vpadd_f32(*(float32x2_t *)v503.f32, *(float32x2_t *)v503.f32);
                      float32x2_t v505 = vrsqrte_f32(v504);
                      int v506 = 4;
                      do
                      {
                        float32x2_t v505 = vmul_f32(v505, vrsqrts_f32(vmul_f32(v505, v505), v504));
                        --v506;
                      }
                      while (v506);
                      float32x2_t v507 = vmul_f32(v504, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v504), 0), v564, (int8x8_t)v505));
                      float32x2_t v508 = vrecpe_f32(v507);
                      int v509 = 4;
                      do
                      {
                        float32x2_t v508 = vmul_f32(v508, vrecps_f32(v507, v508));
                        --v509;
                      }
                      while (v509);
                      float32x4_t v510 = vmulq_n_f32(v502, v508.f32[0]);
                      v510.i32[3] = 0;
                      float32x4_t v635 = v510;
                      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(_X20, a7, &v635, &v619);
                      return 1;
                    }
                    int v615 = 3;
                    char v616 = 0;
                    int8x16_t v611 = 0uLL;
                    float32x4_t v617 = v574;
                    float v612 = 0.15 * v60.f32[0];
                    float v613 = 0.05 * v60.f32[0];
                    float v614 = 0.05 * v60.f32[0];
                    int v608 = 3;
                    char v609 = 0;
                    float32x4_t v604 = 0uLL;
                    float32x4_t v610 = v580;
                    float v605 = 0.15 * v573;
                    float v606 = 0.05 * v573;
                    float v607 = 0.05 * v573;
                    *(unsigned char *)(_X20 + 66) = 0;
                    float32x4_t v511 = v626;
                    v637[0] = v623;
                    v638[0] = v625;
                    float32x2x2_t v512 = (float32x2x2_t)vzip1q_s32(v623, v625);
                    v640.val[0] = (float32x2_t)vzip2q_s32(v623, v625).u64[0];
                    int32x4_t v513 = vzip1q_s32(v624, (int32x4_t)0);
                    v640.val[1] = (float32x2_t)vzip2q_s32(v624, (int32x4_t)0).u64[0];
                    v635.i64[0] = (uint64_t)&unk_26E728B18;
                    v635.i64[1] = (uint64_t)&v611;
                    v636 = &v623;
                    v514 = (float *)v637;
                    v515 = (float *)v638;
                    vst2_f32(v514, v512);
                    int32x4_t v516 = vzip2q_s32((int32x4_t)v512, v513);
                    v638[1] = v511;
                    v637[1] = v516;
                    vst2_f32(v515, v640);
                    v603[1] = (int8x8_t)&v604;
                    v603[0] = (int8x8_t)&unk_26E728AB8;
                    uint64_t v634 = 0;
                    float32x4_t v631 = 0u;
                    long long v632 = 0u;
                    int8x16_t v633 = 0u;
                    int v517 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>(&v635, (uint64_t)v603, &v626, (uint64_t *)&v628, 1, (unsigned char *)(_X20 + 67), (unsigned char *)(_X20 + 71), (unsigned char *)(_X20 + 66), *(double *)v516.i64, *(double *)v511.i64, 0, (uint64_t)&v631);
                    if (v517 == 5)
                    {
                      v598.i64[1] = (uint64_t)&v611;
                      float32x4_t v518 = v626;
                      float32x4_t v600 = (float32x4_t)v623;
                      v602[0] = v625;
                      float32x2x2_t v519 = (float32x2x2_t)vzip1q_s32(v623, v625);
                      v641.val[0] = (float32x2_t)vzip2q_s32(v623, v625).u64[0];
                      int32x4_t v520 = vzip1q_s32(v624, (int32x4_t)0);
                      v641.val[1] = (float32x2_t)vzip2q_s32(v624, (int32x4_t)0).u64[0];
                      v598.i64[0] = (uint64_t)&unk_26E728B18;
                      v599.i64[0] = (uint64_t)&v623;
                      v521 = &v600;
                      v522 = (float *)v602;
                      vst2_f32(v521->f32, v519);
                      v602[1] = v518;
                      int32x4_t v601 = vzip2q_s32((int32x4_t)v519, v520);
                      vst2_f32(v522, v641);
                      *((void *)&v597 + 1) = &v604;
                      *(void *)&long long v597 = &unk_26E728AB8;
                      int v517 = physx::Gu::epaPenetration((uint64_t)&v598);
                    }
                    if (v517 == 5 || v517 == 2)
                    {
                      float32x2_t v630 = vmul_f32(v555, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
                      float32x4_t v523 = vsubq_f32(v631, v626);
                      float32x4_t v524 = vmulq_f32((float32x4_t)v623, v523);
                      float32x4_t v525 = vmulq_f32(v523, (float32x4_t)v624);
                      float32x4_t v526 = vmulq_f32(v523, (float32x4_t)v625);
                      float32x2_t v527 = (float32x2_t)vpaddq_f32(v524, v524).u64[0];
                      v524.i64[0] = vpaddq_f32(v525, v525).u64[0];
                      v526.i64[0] = vpaddq_f32(v526, v526).u64[0];
                      *(int8x8_t *)v528.f32 = vext_s8((int8x8_t)vpadd_f32(v527, v527), (int8x8_t)vpadd_f32(*(float32x2_t *)v524.f32, *(float32x2_t *)v524.f32), 4uLL);
                      v528.i64[1] = vpadd_f32(*(float32x2_t *)v526.f32, *(float32x2_t *)v526.f32).u32[0];
                      long long v597 = v632;
                      float32x4_t v598 = v528;
                      float32x4_t v529 = (float32x4_t)v633;
                      v529.i32[3] = HIDWORD(v634);
                      int32x4_t v596 = (int32x4_t)v529;
                      physx::Gu::PersistentContactManifold::addManifoldPoint(_X20, &v598, &v597, &v596, &v630);
                      float32x4_t v530 = v627[0];
                      v530.i32[3] = 0;
                      float32x2_t v531 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v627[0], 3).u64[0];
                      float32x4_t v532 = vmulq_n_f32((float32x4_t)v633, vmla_f32((float32x2_t)0xBF000000BF000000, v531, v531).f32[0]);
                      v532.i32[3] = 0;
                      float32x2_t v533 = (float32x2_t)vextq_s8((int8x16_t)v530, (int8x16_t)v530, 8uLL).u64[0];
                      float32x2_t v534 = (float32x2_t)vextq_s8(v633, v633, 8uLL).u64[0];
                      int8x8_t v535 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v627[0].f32, (float32x2_t)vext_s8(*(int8x8_t *)v633.i8, (int8x8_t)v534, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v627[0].f32, (int8x8_t)v533, 4uLL), *(float32x2_t *)v633.i8);
                      *(int8x8_t *)v536.f32 = vext_s8(v535, (int8x8_t)vmls_f32(vmul_f32(v533, *(float32x2_t *)v633.i8), *(float32x2_t *)v627[0].f32, v534), 4uLL);
                      v536.i64[1] = v535.u32[0];
                      float32x4_t v537 = vmlaq_laneq_f32(v532, v536, v627[0], 3);
                      v537.i64[1] = vextq_s8((int8x16_t)v537, (int8x16_t)v537, 8uLL).u32[0];
                      float32x4_t v538 = vmulq_f32(v530, (float32x4_t)v633);
                      v538.i64[0] = vpaddq_f32(v538, v538).u64[0];
                      float32x4_t v539 = vmlaq_n_f32(v537, v530, vpadd_f32(*(float32x2_t *)v538.f32, *(float32x2_t *)v538.f32).f32[0]);
                      float32x4_t v540 = vaddq_f32(v539, v539);
                      v540.i32[3] = 0;
                      float32x4_t v541 = vmulq_f32(v540, v540);
                      v541.i64[0] = vpaddq_f32(v541, v541).u64[0];
                      float32x2_t v542 = vpadd_f32(*(float32x2_t *)v541.f32, *(float32x2_t *)v541.f32);
                      float32x2_t v543 = vrsqrte_f32(v542);
                      int v544 = 4;
                      do
                      {
                        float32x2_t v543 = vmul_f32(v543, vrsqrts_f32(vmul_f32(v543, v543), v542));
                        --v544;
                      }
                      while (v544);
                      float32x2_t v545 = vmul_f32(v542, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v542), 0), v564, (int8x8_t)v543));
                      float32x2_t v546 = vrecpe_f32(v545);
                      int v547 = 4;
                      do
                      {
                        float32x2_t v546 = vmul_f32(v546, vrecps_f32(v545, v546));
                        --v547;
                      }
                      while (v547);
                      float32x4_t v548 = vmulq_n_f32(v540, v546.f32[0]);
                      v548.i32[3] = 0;
                      float32x4_t v595 = v548;
                      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(_X20, a7, &v595, v627, (uint64_t *)&v628);
                    }
                    return v517 == 2 || v517 == 5;
                  default:
                    return 0;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (!v65) {
    return 0;
  }
  uint64_t v121 = *(void *)(_X20 + 80);
  int8x16_t v122 = *(int8x16_t *)(v121 + 32);
  float32x4_t v123 = (float32x4_t)v122;
  if (v65 != 1)
  {
    uint64_t v124 = v65 - 1;
    float32x4_t v125 = (float32x4_t *)(v121 + 80);
    float32x4_t v123 = (float32x4_t)v122;
    do
    {
      float32x4_t v126 = *v125;
      v125 += 3;
      float32x4_t v123 = vaddq_f32(v123, v126);
      --v124;
    }
    while (v124);
  }
  v123.i32[3] = 0;
  float32x4_t v127 = vmulq_f32(v123, v123);
  v127.i64[0] = vpaddq_f32(v127, v127).u64[0];
  v122.i32[3] = 0;
  float32x4_t v128 = v22;
  v128.i32[3] = 0;
  float32x4_t v129 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v123, v122);
  float32x4_t v130 = vmulq_n_f32(v129, v28);
  v130.i32[3] = 0;
  v127.i64[0] = vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL).u64[0];
  float32x2_t v131 = (float32x2_t)vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL).u64[0];
  int8x8_t v132 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v22.f32, (float32x2_t)vext_s8(*(int8x8_t *)v129.f32, (int8x8_t)v131, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v22.f32, *(int8x8_t *)v127.f32, 4uLL), *(float32x2_t *)v129.f32);
  *(int8x8_t *)v127.f32 = vext_s8(v132, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v129.f32), *(float32x2_t *)v22.f32, v131), 4uLL);
  v127.i64[1] = v132.u32[0];
  float32x4_t v133 = vmlaq_f32(v130, v571, v127);
  v133.i64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u32[0];
  float32x4_t v134 = vmulq_f32(v128, v129);
  v134.i64[0] = vpaddq_f32(v134, v134).u64[0];
  float32x4_t v135 = vmlaq_n_f32(v133, v128, vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32).f32[0]);
  float32x4_t v136 = vaddq_f32(v135, v135);
  v136.i32[3] = 0;
  float32x4_t v137 = vmulq_f32(v136, v136);
  v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
  float32x2_t v138 = vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32);
  float32x2_t v139 = vrsqrte_f32(v138);
  int v140 = 4;
  do
  {
    float32x2_t v139 = vmul_f32(v139, vrsqrts_f32(vmul_f32(v139, v139), v138));
    --v140;
  }
  while (v140);
  float32x2_t v141 = vmul_f32(v138, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v138), 0), (int8x8_t)_D25, (int8x8_t)v139));
  float32x2_t v142 = vrecpe_f32(v141);
  int v143 = 4;
  do
  {
    float32x2_t v142 = vmul_f32(v142, vrecps_f32(v141, v142));
    --v143;
  }
  while (v143);
  float32x4_t v144 = vmulq_n_f32(v136, v142.f32[0]);
  v144.i32[3] = 0;
  float32x4_t v635 = v144;
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(_X20, a7, &v635, v627, (uint64_t *)&v628);
  return 1;
}

uint64_t physx::Gu::pcmContactBoxConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t *a6, float32x4_t *a7)
{
  uint64_t v264 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a6;
  _X24 = *(void *)(a2 + 48);
  __asm { PRFM            #0, [X24] }
  float32x2_t v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5, 0);
  float32x2_t v246 = v15;
  float32x4_t v16 = *(float32x4_t *)(a1 + 4);
  float32x4_t v17 = v16;
  v17.i32[2] = *(_DWORD *)(a1 + 12);
  float32x2_t v18 = (float32x2_t)vdup_laneq_s32((int32x4_t)v17, 2);
  float32x4_t v19 = v17;
  v19.i32[3] = 0;
  float32x4_t v20 = *(float32x4_t *)(a2 + 4);
  float32x4_t v21 = v20;
  v21.i32[3] = 0;
  v17.i64[0] = a3[1].i64[0];
  v17.i64[1] = a3[1].u32[2];
  v245[0] = *a3;
  v245[1] = v17;
  v22.i64[0] = a4[1].i64[0];
  v22.i64[1] = a4[1].u32[2];
  v244[0] = *a4;
  v244[1] = v22;
  float32x4_t v23 = vnegq_f32(v244[0]);
  float32x4_t v24 = v23;
  v24.i32[3] = 0;
  float32x2_t v25 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v244[0], 3).u64[0];
  float32x4_t v26 = vsubq_f32(v17, v22);
  float32x4_t v27 = vmulq_n_f32(v26, vmla_f32((float32x2_t)0xBF000000BF000000, v25, v25).f32[0]);
  v27.i32[3] = 0;
  float32x2_t v28 = (float32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  float32x2_t v29 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v28, 4uLL);
  int8x8_t v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL)), v29, *(float32x2_t *)v26.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)v26.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  float32x4_t v32 = vmlaq_laneq_f32(v27, v31, v244[0], 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  float32x4_t v33 = vmulq_f32(v24, v26);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  float32x4_t v34 = vmlaq_n_f32(v32, v24, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  float32x4_t v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  float32x4_t v36 = v245[0];
  v36.i32[3] = 0;
  float32x4_t v37 = vmulq_f32(v36, v24);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  float32x2_t v38 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v245[0], (int8x16_t)v245[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v244[0], (int8x16_t)v244[0], 8uLL)), vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32));
  float32x4_t v39 = vmulq_laneq_f32(v36, v244[0], 3);
  v36.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  *(float32x2_t *)v37.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v245[0].f32, *(int8x8_t *)v36.f32, 4uLL), *(float32x2_t *)v23.f32), v29, *(float32x2_t *)v245[0].f32);
  *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v245[0].f32, v28), *(float32x2_t *)v23.f32, *(float32x2_t *)v36.f32), 4uLL);
  v40.i64[1] = v37.i64[0];
  float32x4_t v41 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v24, v245[0], 3), v39), v40);
  *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
  *(int32x2_t *)v39.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  float32x4_t v42 = vaddq_f32(v41, v41);
  *(int32x2_t *)v24.f32 = vdup_lane_s32(*(int32x2_t *)v42.f32, 1);
  *(int32x2_t *)v37.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  float32x2_t v43 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v42.f32), 0);
  *(float32x2_t *)v31.f32 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v42.f32, 1);
  float32x2_t v44 = vmul_laneq_f32(*(float32x2_t *)v39.f32, v42, 2);
  float32x2_t v45 = vmul_n_f32(*(float32x2_t *)v40.f32, v42.f32[0]);
  float32x2_t v46 = vmul_n_f32(*(float32x2_t *)v39.f32, v42.f32[0]);
  *(float32x2_t *)v23.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 0), v38, 1);
  *(float32x2_t *)v42.f32 = vmul_lane_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v42.f32, 1);
  *(float32x2_t *)v24.f32 = vmul_lane_f32(*(float32x2_t *)v24.f32, v38, 1);
  *(float32x2_t *)v39.f32 = vmul_lane_f32(*(float32x2_t *)v37.f32, v38, 1);
  __asm { FMOV            V24.2S, #1.0 }
  *(float32x2_t *)v37.f32 = vsub_f32(_D24, v43);
  *(int8x8_t *)v48.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D24, *(float32x2_t *)v31.f32), v44), (int8x8_t)vadd_f32(v45, *(float32x2_t *)v39.f32), 4uLL);
  v48.i64[1] = vsub_f32(v46, *(float32x2_t *)v24.f32).u32[0];
  *(int8x8_t *)v49.f32 = vext_s8((int8x8_t)vsub_f32(v45, *(float32x2_t *)v39.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v37.f32, v44), 4uLL);
  v49.i64[1] = vadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v23.f32).u32[0];
  int32x4_t v240 = (int32x4_t)v48;
  int32x4_t v241 = (int32x4_t)v49;
  *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vadd_f32(v46, *(float32x2_t *)v24.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v23.f32), 4uLL);
  v50.i64[1] = vsub_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v31.f32).u32[0];
  int32x4_t v242 = (int32x4_t)v50;
  float32x4_t v243 = v35;
  v52.i64[0] = *(void *)(_X24 + 60);
  float v51 = *(float *)(a5 + 8);
  v52.i64[1] = *(unsigned int *)(_X24 + 68);
  int32x4_t v53 = (int32x4_t)vmulq_f32(v21, v52);
  *(int32x2_t *)v37.f32 = vdup_laneq_s32(v53, 2);
  *(float32x2_t *)v53.i8 = vpmin_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v53.i8);
  v37.f32[0] = v51 * 0.05;
  __asm { FMOV            V17.2S, #0.25 }
  *(float32x2_t *)v16.f32 = vpmin_f32(v18, *(float32x2_t *)v16.f32);
  float32x2_t v55 = vpmin_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32);
  v16.f32[0] = v51 * 0.15;
  float32x2_t v227 = vmin_f32(vmin_f32(vmul_f32(vpmin_f32(*(float32x2_t *)v53.i8, *(float32x2_t *)v53.i8), _D17), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 0)), vmin_f32(vmul_f32(v55, (float32x2_t)vdup_n_s32(0x3E19999Au)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.f32, 0)));
  uint64_t v56 = *(unsigned __int8 *)(v9 + 64);
  if (*(unsigned char *)(v9 + 64))
  {
    float32x2_t v57 = vmul_f32(v227, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    float32x2_t v58 = vmul_f32(v57, v57);
    unsigned int v59 = v56 - 1;
    do
    {
      uint64_t v60 = *(void *)(v9 + 80);
      uint64_t v61 = v59;
      float32x2_t v62 = (float32x4_t *)(v60 + 48 * v59);
      float32x4_t v63 = v62[1];
      float32x4_t v64 = vmulq_n_f32(v48, COERCE_FLOAT(*v62));
      v64.i32[3] = 0;
      float32x4_t v65 = vmulq_lane_f32(v49, *(float32x2_t *)v62->f32, 1);
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_laneq_f32(v50, *v62, 2);
      v66.i32[3] = 0;
      float32x4_t v67 = vaddq_f32(v35, vaddq_f32(v66, vaddq_f32(v64, v65)));
      float32x4_t v68 = v62[2];
      float32x4_t v69 = v68;
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_f32(v69, vsubq_f32(v67, v63));
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      float32x2_t v71 = vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32);
      float32x4_t v72 = vmlsq_lane_f32(v67, v69, v71, 0);
      v72.i64[1] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u32[0];
      float32x4_t v73 = vsubq_f32(v63, v72);
      float32x4_t v74 = vmulq_f32(v73, v73);
      v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32), v58), 0), (int8x8_t)v58).u32[0] == -1)
      {
        unsigned __int8 v75 = *(unsigned char *)(v9 + 64) - 1;
        *(unsigned char *)(v9 + 64) = v75;
        float32x4_t v76 = (float32x4_t *)(v60 + 48 * v75);
        float32x4_t v77 = *v76;
        float32x4_t v78 = v76[2];
        v62[1] = v76[1];
        v62[2] = v78;
        *float32x2_t v62 = v77;
      }
      else
      {
        v68.i32[3] = v71.i32[1];
        v62[2] = v68;
      }
      --v59;
    }
    while (v61);
    v52.i64[0] = *(void *)(_X24 + 60);
    v52.i64[1] = *(unsigned int *)(_X24 + 68);
  }
  v41.i32[3] = v38.i32[1];
  float32x4_t v79 = vmulq_f32(v19, v19);
  v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
  float32x2_t v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
  float32x2_t v81 = vrsqrte_f32(v80);
  int v82 = 4;
  do
  {
    float32x2_t v81 = vmul_f32(v81, vrsqrts_f32(vmul_f32(v81, v81), v80));
    --v82;
  }
  while (v82);
  int32x2_t v83 = vdup_lane_s32(vceqz_f32(v80), 0);
  float32x4_t v84 = vmulq_f32(v21, v52);
  float32x4_t v85 = vmulq_f32(v84, v84);
  float32x4_t v87 = vpaddq_f32(v85, v85);
  float32x2_t v86 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
  *(float32x2_t *)v87.f32 = vrsqrte_f32(v86);
  int v88 = 4;
  do
  {
    *(float32x2_t *)v87.f32 = vmul_f32(*(float32x2_t *)v87.f32, vrsqrts_f32(vmul_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), v86));
    --v88;
  }
  while (v88);
  float32x4_t v89 = v245[0];
  float32x4_t v90 = v244[0];
  if (*(unsigned __int8 *)(v9 + 64) != v56) {
    goto LABEL_36;
  }
  float32x2_t v91 = vmul_n_f32(v227, physx::Gu::invalidateThresholds[v56]);
  int8x16_t v92 = (int8x16_t)vabdq_f32(v35, *(float32x4_t *)(v9 + 16));
  *(float32x2_t *)v92.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL), *(float32x2_t *)v92.i8);
  int32x2_t v93 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds + 4 * v56);
  float32x2_t v94 = vld1_dup_f32(v93);
  float32x2_t v95 = vpmax_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8);
  float32x4_t v96 = vmulq_f32(v245[0], *(float32x4_t *)(v9 + 32));
  v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
  float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
  float32x4_t v98 = vmulq_f32(v244[0], *(float32x4_t *)(v9 + 48));
  v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
  float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vorr_s8((int8x8_t)vcgt_f32(v94, v97), (int8x8_t)vcgt_f32(v94, v99)), (int8x8_t)vcgt_f32(v95, v91)), 0), (int8x8_t)v80).u32[0] == -1)goto LABEL_36; {
  float32x2_t v100 = vmul_f32(v80, (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v83, 0x1FuLL)), (int8x8_t)_D24, (int8x8_t)v81));
  }
  float32x2_t v101 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v86), 0), (int8x8_t)_D24, *(int8x8_t *)v87.f32);
  float v102 = 0.0;
  float v103 = 0.0;
  __int32 v225 = v55.i32[0];
  float32x4_t v226 = v19;
  float32x4_t v223 = v21;
  float32x4_t v224 = v20;
  float32x4_t v221 = v41;
  float32x4_t v222 = v35;
  if (v97.f32[0] < 1.0)
  {
    float v104 = -1.0;
    if (v97.f32[0] >= -1.0) {
      float v104 = v97.f32[0];
    }
    if (v104 > 1.0) {
      float v104 = 1.0;
    }
    float v220 = v51;
    float32x2_t v105 = _D24;
    __int32 v219 = v99.i32[0];
    float32x2_t v106 = v100;
    float v103 = acosf(v104);
    float32x2_t v100 = v106;
    float v102 = 0.0;
    v99.i32[0] = v219;
    float32x4_t v89 = v245[0];
    float32x4_t v90 = v244[0];
    float32x4_t v41 = v221;
    float32x4_t v35 = v222;
    float32x4_t v21 = v223;
    float32x4_t v20 = v224;
    _D24 = v105;
    v55.i32[0] = v225;
    float32x4_t v19 = v226;
    float v51 = v220;
  }
  float32x2_t v107 = vmul_f32(v86, v101);
  float32x2_t v108 = vmul_n_f32(v100, v103);
  if (v99.f32[0] < 1.0)
  {
    float v109 = -1.0;
    if (v99.f32[0] >= -1.0) {
      float v109 = v99.f32[0];
    }
    if (v109 > 1.0) {
      float v109 = 1.0;
    }
    float32x2_t v110 = v15;
    float32x2_t v111 = _D24;
    float v112 = acosf(v109);
    float32x4_t v89 = v245[0];
    float32x4_t v90 = v244[0];
    float32x4_t v41 = v221;
    float32x4_t v35 = v222;
    float32x4_t v21 = v223;
    float32x4_t v20 = v224;
    _D24 = v111;
    v55.i32[0] = v225;
    float32x4_t v19 = v226;
    float32x2_t v15 = v110;
    float v102 = v112;
  }
  int8x8_t v113 = (int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(vmul_n_f32(v107, v102), v91), (int8x8_t)vcgt_f32(v108, v91)), 0);
  if (vuzp1_s8(v113, v113).u32[0] == -1)
  {
LABEL_36:
    *(float32x4_t *)uint64_t v9 = v41;
    *(float32x4_t *)(v9 + 16) = v35;
    *(float32x4_t *)(v9 + 32) = v89;
    *(float32x4_t *)(v9 + 48) = v90;
    BOOL v142 = *(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0 && *(float *)(a2 + 12) == 1.0;
    float32x4_t v143 = *(float32x4_t *)(a2 + 16);
    v87.i32[0] = *(_DWORD *)(_X24 + 24);
    float32x4_t v144 = v87;
    v144.i32[1] = *(_DWORD *)(_X24 + 28);
    float32x4_t v145 = v144;
    v145.i32[2] = *(_DWORD *)(_X24 + 32);
    int v252 = 0;
    char v253 = 0;
    float32x4_t v249 = v145;
    uint64_t v260 = _X24;
    uint64_t v262 = *(void *)(_X24 + 40) + 20 * *(unsigned __int8 *)(_X24 + 39);
    char v263 = *(unsigned char *)(_X24 + 38);
    v146.i64[0] = *(void *)(_X24 + 60);
    v146.i64[1] = *(unsigned int *)(_X24 + 68);
    int32x4_t v147 = (int32x4_t)vmulq_f32(v21, v146);
    *(float32x2_t *)v147.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v147, 2), *(float32x2_t *)v147.i8);
    *(float *)v147.i32 = vpmin_f32(*(float32x2_t *)v147.i8, *(float32x2_t *)v147.i8).f32[0];
    float32x2_t v250 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v147.i32);
    float v251 = 0.025 * *(float *)v147.i32;
    if (v142)
    {
      long long v254 = xmmword_23435FD50;
      long long v255 = xmmword_23435FD60;
      long long v256 = xmmword_23435FD80;
      long long v257 = xmmword_23435FD50;
      long long v258 = xmmword_23435FD60;
      long long v259 = xmmword_23435FD80;
    }
    else
    {
      float32x4_t v148 = vrecpeq_f32(v21);
      int v149 = 4;
      do
      {
        float32x4_t v148 = vmulq_f32(v148, vrecpsq_f32(v148, v21));
        --v149;
      }
      while (v149);
      *(int32x2_t *)v150.f32 = vdup_lane_s32(*(int32x2_t *)v20.f32, 0);
      v150.i64[1] = v150.u32[0];
      if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v150, v21)), *(int8x8_t *)v144.f32).u32[0] & 0xFFFFFF) != 0)
      {
        float32x2_t v157 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v143.f32, 1);
        float32x2_t v158 = (float32x2_t)vdup_laneq_s32((int32x4_t)v143, 2);
        float32x2_t v159 = (float32x2_t)vdup_laneq_s32((int32x4_t)v143, 3);
        float32x4_t v160 = vaddq_f32(v143, v143);
        float32x2_t v161 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v160.f32), 0);
        float32x2_t v162 = vmul_lane_f32(v157, *(float32x2_t *)v160.f32, 1);
        float32x2_t v163 = vmul_laneq_f32(v158, v160, 2);
        float32x2_t v164 = vmul_n_f32(v157, v160.f32[0]);
        float32x2_t v165 = vmul_n_f32(v158, v160.f32[0]);
        float32x2_t v166 = vmul_n_f32(v159, v160.f32[0]);
        float32x2_t v167 = vmul_lane_f32(v158, *(float32x2_t *)v160.f32, 1);
        float32x2_t v168 = vmul_lane_f32(v159, *(float32x2_t *)v160.f32, 1);
        float32x2_t v169 = vmul_laneq_f32(v159, v160, 2);
        float32x2_t v170 = vsub_f32(_D24, v161);
        *(int8x8_t *)v171.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D24, v162), v163), (int8x8_t)vadd_f32(v164, v169), 4uLL);
        v171.i64[1] = vsub_f32(v165, v168).u32[0];
        *(int8x8_t *)v172.f32 = vext_s8((int8x8_t)vsub_f32(v164, v169), (int8x8_t)vsub_f32(v170, v163), 4uLL);
        *(int8x8_t *)v173.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v171.f32, 0), *(int8x8_t *)v172.f32, 4uLL);
        v172.i64[1] = vadd_f32(v167, v166).u32[0];
        *(int8x8_t *)v174.f32 = vext_s8(*(int8x8_t *)v171.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v172.f32, 1), 4uLL);
        int8x8_t v175 = (int8x8_t)vsub_f32(v167, v166);
        v167.i32[0] = vsub_f32(v170, v162).u32[0];
        *(int8x8_t *)v176.f32 = vext_s8((int8x8_t)vadd_f32(v165, v168), v175, 4uLL);
        v176.i64[1] = v167.u32[0];
        v173.i64[1] = vdup_lane_s32(*(int32x2_t *)v176.f32, 0).u32[0];
        v174.i64[1] = vdup_lane_s32(*(int32x2_t *)v176.f32, 1).u32[0];
        *(int8x8_t *)v177.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v171.u32[2], 0), *(int8x8_t *)&v172.u32[2], 4uLL);
        v177.i64[1] = vdup_lane_s32((int32x2_t)v167.u32[0], 0).u32[0];
        float32x4_t v178 = vmulq_n_f32(v173, v20.f32[0]);
        v178.i32[3] = 0;
        float32x4_t v179 = vmulq_lane_f32(v174, *(float32x2_t *)v20.f32, 1);
        v179.i32[3] = 0;
        float32x4_t v180 = vmulq_laneq_f32(v177, v20, 2);
        v180.i32[3] = 0;
        float32x4_t v181 = vmulq_n_f32(v178, v171.f32[0]);
        v181.i32[3] = 0;
        float32x4_t v182 = vmulq_lane_f32(v179, *(float32x2_t *)v171.f32, 1);
        v182.i32[3] = 0;
        float32x4_t v183 = vmulq_laneq_f32(v180, v171, 2);
        v183.i32[3] = 0;
        float32x4_t v184 = vaddq_f32(v181, v182);
        float32x4_t v185 = vmulq_n_f32(v178, v172.f32[0]);
        v185.i32[3] = 0;
        float32x4_t v186 = vmulq_lane_f32(v179, *(float32x2_t *)v172.f32, 1);
        v186.i32[3] = 0;
        float32x4_t v187 = vmulq_laneq_f32(v180, v172, 2);
        v187.i32[3] = 0;
        float32x4_t v151 = vaddq_f32(v183, v184);
        float32x4_t v152 = vaddq_f32(v187, vaddq_f32(v185, v186));
        float32x4_t v188 = vmulq_n_f32(v178, v176.f32[0]);
        v188.i32[3] = 0;
        float32x4_t v189 = vmulq_lane_f32(v179, *(float32x2_t *)v176.f32, 1);
        v189.i32[3] = 0;
        float32x4_t v190 = vmulq_laneq_f32(v180, v176, 2);
        v190.i32[3] = 0;
        float32x4_t v153 = vaddq_f32(v190, vaddq_f32(v188, v189));
        float32x4_t v191 = vmulq_n_f32(v173, v148.f32[0]);
        v191.i32[3] = 0;
        float32x4_t v192 = vmulq_lane_f32(v174, *(float32x2_t *)v148.f32, 1);
        v192.i32[3] = 0;
        float32x4_t v193 = vmulq_laneq_f32(v177, v148, 2);
        v193.i32[3] = 0;
        long long v254 = (__int128)v151;
        long long v255 = (__int128)v152;
        long long v256 = (__int128)v153;
        long long v259 = (__int128)v193;
        float32x4_t v194 = vmulq_n_f32(v191, v171.f32[0]);
        v194.i32[3] = 0;
        float32x4_t v195 = vmulq_lane_f32(v192, *(float32x2_t *)v171.f32, 1);
        v195.i32[3] = 0;
        float32x4_t v196 = vmulq_laneq_f32(v193, v171, 2);
        v196.i32[3] = 0;
        float32x4_t v154 = vaddq_f32(v196, vaddq_f32(v194, v195));
        float32x4_t v197 = vmulq_n_f32(v191, v172.f32[0]);
        v197.i32[3] = 0;
        float32x4_t v198 = vmulq_lane_f32(v192, *(float32x2_t *)v172.f32, 1);
        v198.i32[3] = 0;
        float32x4_t v199 = vmulq_laneq_f32(v193, v172, 2);
        v199.i32[3] = 0;
        float32x4_t v200 = vmulq_n_f32(v191, v176.f32[0]);
        v200.i32[3] = 0;
        float32x4_t v201 = vmulq_lane_f32(v192, *(float32x2_t *)v176.f32, 1);
        v201.i32[3] = 0;
        float32x4_t v155 = vaddq_f32(v199, vaddq_f32(v197, v198));
        float32x4_t v202 = vmulq_laneq_f32(v193, v176, 2);
        v202.i32[3] = 0;
        float32x4_t v156 = vaddq_f32(v202, vaddq_f32(v200, v201));
      }
      else
      {
        v148.i32[3] = 0;
        float32x4_t v151 = vmulq_f32(v21, (float32x4_t)xmmword_23435FD50);
        float32x4_t v152 = vmulq_f32(v21, (float32x4_t)xmmword_23435FD60);
        float32x4_t v153 = vmulq_f32(v21, (float32x4_t)xmmword_23435FD80);
        long long v254 = (__int128)v151;
        long long v255 = (__int128)v152;
        long long v256 = (__int128)v153;
        float32x4_t v154 = vmulq_f32(v148, (float32x4_t)xmmword_23435FD50);
        float32x4_t v155 = vmulq_f32(v148, (float32x4_t)xmmword_23435FD60);
        float32x4_t v156 = vmulq_f32(v148, (float32x4_t)xmmword_23435FD80);
      }
      long long v258 = (__int128)v155;
      long long v259 = (__int128)v156;
      float32x4_t v203 = vmulq_n_f32(v151, v87.f32[0]);
      v203.i32[3] = 0;
      float32x4_t v204 = vmulq_lane_f32(v152, *(float32x2_t *)v144.f32, 1);
      v204.i32[3] = 0;
      float32x4_t v205 = vmulq_laneq_f32(v153, v145, 2);
      v205.i32[3] = 0;
      long long v257 = (__int128)v154;
      float32x4_t v249 = vaddq_f32(v205, vaddq_f32(v204, v203));
    }
    uint64_t v261 = *(void *)(_X24 + 48);
    int v237 = 3;
    char v238 = 0;
    v233[0] = 0;
    v233[1] = 0;
    float32x4_t v239 = v19;
    float v234 = 0.15 * v55.f32[0];
    float v235 = 0.05 * v55.f32[0];
    float v236 = 0.05 * v55.f32[0];
    uint64_t v248 = 0;
    memset(v247, 0, 48);
    v229.i64[1] = (uint64_t)v233;
    float32x4_t v206 = v243;
    v231[0] = v240;
    v232[0] = v242;
    int8x8_t v208 = *(int8x8_t *)v241.i8;
    double v207 = *(double *)v242.i64;
    float32x4_t v209 = (float32x4_t)v240;
    float32x2x2_t v210 = (float32x2x2_t)vzip1q_s32(v240, v242);
    v265.val[0] = (float32x2_t)vzip2q_s32(v240, v242).u64[0];
    int32x4_t v211 = vzip1q_s32(v241, (int32x4_t)0);
    v265.val[1] = (float32x2_t)vzip2q_s32(v241, (int32x4_t)0).u64[0];
    v229.i64[0] = (uint64_t)&unk_26E728B18;
    float32x2_t v230 = &v240;
    int32x4_t v212 = (float *)v231;
    float32x2_t v213 = (float *)v232;
    int32x4_t v214 = vzip2q_s32((int32x4_t)v210, v211);
    vst2_f32(v212, v210);
    v232[1] = v206;
    v231[1] = v214;
    vst2_f32(v213, v265);
    v228[1] = &v249;
    if (v142)
    {
      v228[0] = &unk_26E729C88;
      int v215 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(&v229, (uint64_t)v228, (unsigned char *)(v9 + 67), (unsigned char *)(v9 + 71), (unsigned char *)(v9 + 66), v247, v243, v15, *(double *)v206.i64, v209, v208);
      float32x2_t v217 = v246;
      char v218 = 1;
    }
    else
    {
      v228[0] = &unk_26E728850;
      int v215 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v229, (uint64_t)v228, &v243, (uint64_t *)&v246, 1, (unsigned char *)(v9 + 67), (unsigned char *)(v9 + 71), (unsigned char *)(v9 + 66), *(double *)v214.i64, v207, *(int8x8_t *)v206.f32, v209, (uint64_t)v247);
      float32x2_t v217 = v246;
      char v218 = 0;
    }
    *(float *)&double v216 = v51;
    return physx::Gu::generateOrProcessContactsBoxConvex((uint64_t)&v229, (uint64_t)v228, (uint64_t)v245, (int32x4_t *)v244, (float32x4_t *)&v240, v215, (uint64_t)v247, v9, v227, v217, v216, a7, v56, v218);
  }
  else if (v56)
  {
    uint64_t v114 = *(void *)(v9 + 80);
    int8x16_t v115 = *(int8x16_t *)(v114 + 32);
    float32x4_t v116 = (float32x4_t)v115;
    if (v56 != 1)
    {
      uint64_t v117 = v56 - 1;
      float32x2_t v118 = (float32x4_t *)(v114 + 80);
      float32x4_t v116 = (float32x4_t)v115;
      do
      {
        float32x4_t v119 = *v118;
        v118 += 3;
        float32x4_t v116 = vaddq_f32(v116, v119);
        --v117;
      }
      while (v117);
    }
    v116.i32[3] = 0;
    float32x4_t v120 = vmulq_f32(v116, v116);
    v120.i64[0] = vpaddq_f32(v120, v120).u64[0];
    v115.i32[3] = 0;
    float32x4_t v121 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v116, v115);
    float32x4_t v122 = v90;
    v122.i32[3] = 0;
    v120.i64[0] = vdupq_laneq_s32((int32x4_t)v90, 3).u64[0];
    float32x4_t v123 = vmulq_n_f32(v121, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v120.f32, *(float32x2_t *)v120.f32).f32[0]);
    v123.i32[3] = 0;
    float32x2_t v124 = (float32x2_t)vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u64[0];
    float32x2_t v125 = (float32x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u64[0];
    int8x8_t v126 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v90.f32, (float32x2_t)vext_s8(*(int8x8_t *)v121.f32, (int8x8_t)v125, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v90.f32, (int8x8_t)v124, 4uLL), *(float32x2_t *)v121.f32);
    *(int8x8_t *)v127.f32 = vext_s8(v126, (int8x8_t)vmls_f32(vmul_f32(v124, *(float32x2_t *)v121.f32), *(float32x2_t *)v90.f32, v125), 4uLL);
    v127.i64[1] = v126.u32[0];
    float32x4_t v128 = vmlaq_laneq_f32(v123, v127, v90, 3);
    v128.i64[1] = vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL).u32[0];
    float32x4_t v129 = vmulq_f32(v122, v121);
    v129.i64[0] = vpaddq_f32(v129, v129).u64[0];
    float32x4_t v130 = vmlaq_n_f32(v128, v122, vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v129.f32).f32[0]);
    float32x4_t v131 = vaddq_f32(v130, v130);
    v131.i32[3] = 0;
    float32x4_t v132 = vmulq_f32(v131, v131);
    v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
    float32x2_t v133 = vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32);
    float32x2_t v134 = vrsqrte_f32(v133);
    int v135 = 4;
    do
    {
      float32x2_t v134 = vmul_f32(v134, vrsqrts_f32(vmul_f32(v134, v134), v133));
      --v135;
    }
    while (v135);
    float32x2_t v136 = vmul_f32(v133, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v133), 0), (int8x8_t)_D24, (int8x8_t)v134));
    float32x2_t v137 = vrecpe_f32(v136);
    int v138 = 4;
    do
    {
      float32x2_t v137 = vmul_f32(v137, vrecps_f32(v136, v137));
      --v138;
    }
    while (v138);
    float32x4_t v139 = vmulq_n_f32(v131, v137.f32[0]);
    v139.i32[3] = 0;
    float32x4_t v249 = v139;
    physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(v9, (uint64_t)a7, &v249, v244, (uint64_t *)&v246);
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::BoxV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, float32x4_t *a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10, int8x8_t a11)
{
  uint64_t v11 = a4;
  uint64_t v330 = *MEMORY[0x263EF8340];
  float32x2_t v15 = (float32x4_t *)a1->i64[1];
  float32x4_t v16 = &v15[1].f32[1];
  float32x2_t v17 = vld1_dup_f32(v16);
  uint64_t v18 = *(void *)(a2 + 8);
  float32x4_t v19 = (const float *)(v18 + 20);
  float32x2_t v20 = vld1_dup_f32(v19);
  float32x2_t v21 = vmin_f32(v17, v20);
  float32x2_t v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v23 = vmul_f32(v21, v22);
  v21.i32[0] = v15[1].i32[0];
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a10.i32[0] = -v15[2].i8[0];
  a11.i32[0] = -*(char *)(v18 + 32);
  float32x2_t v24 = vadd_f32((float32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v21), (float32x2_t)vand_s8(a11, (int8x8_t)v22));
  float32x4_t v315 = 0uLL;
  unsigned int v314 = 0;
  uint64_t v25 = *a5;
  __asm { FMOV            V10.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v52 = vmulq_f32(a7, a7);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v315 = v44;
    float32x4_t v53 = vmulq_f32(v44, v44);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    float32x2_t v54 = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32);
    float32x2_t v55 = vrsqrte_f32(v54);
    int v56 = 4;
    do
    {
      float32x2_t v55 = vmul_f32(v55, vrsqrts_f32(vmul_f32(v55, v55), v54));
      --v56;
    }
    while (v56);
    float32x2_t v57 = vmul_f32(v54, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v54), 0), (int8x8_t)_D10, (int8x8_t)v55));
    float32x2_t v58 = vrecpe_f32(v57);
    int v59 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v57, v58);
      float32x2_t v58 = vmul_f32(v58, *(float32x2_t *)a10.f32);
      --v59;
    }
    while (v59);
    float32x4_t v60 = vmulq_n_f32(v44, v58.f32[0]);
    v60.i32[3] = 0;
    float32x4_t v310 = v60;
    float32x2_t v61 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v62.i64[0] = -1;
    v62.i64[1] = -1;
    float32x4_t v63 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v31 = 0;
  float32x4_t v32 = (float32x4_t *)a1[1].i64[0];
  float32x4_t v33 = v15[3];
  uint64_t v34 = *(void *)(v18 + 160);
  int8x16_t v35 = (int8x16_t)vnegq_f32(v33);
  v35.i32[3] = 0;
  do
  {
    uint64_t v36 = a3[v31];
    *(&v319 + v31) = v36;
    unsigned int v37 = a4[v31];
    *(&v317 + v31) = v37;
    float32x4_t v38 = (float32x4_t)vbslq_s8(physx::boxVertexTable[v36], (int8x16_t)v33, v35);
    float32x4_t v39 = vmulq_n_f32(*v32, v38.f32[0]);
    v39.i32[3] = 0;
    float32x4_t v40 = vmulq_lane_f32(v32[1], *(float32x2_t *)v38.f32, 1);
    v40.i32[3] = 0;
    float32x4_t v41 = vmulq_laneq_f32(v32[2], v38, 2);
    v41.i32[3] = 0;
    float32x4_t v42 = vaddq_f32(v41, vaddq_f32(v39, v40));
    a10 = *(float32x4_t *)(v34 + 12 * v37);
    float32x4_t v43 = vaddq_f32(v32[3], v42);
    a10.i32[3] = 0;
    float32x4_t v44 = vsubq_f32(v43, a10);
    *(&v324 + v31) = (int8x16_t)v43;
    *(&v321 + v31) = (int8x16_t)a10;
    *(&v327 + v31++) = v44;
  }
  while (v25 != v31);
  unsigned int v314 = v25;
  switch(v31)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v327, &v324, &v321, &v319, &v317, (int *)&v314);
      goto LABEL_49;
    case 3:
      unsigned int v314 = 3;
      float32x4_t v44 = v327;
      a10 = vsubq_f32(v328, v327);
      float32x4_t v64 = vsubq_f32(v329[0], v327);
      int8x8_t v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v64.f32);
      *(int8x8_t *)v65.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v64.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), 4uLL);
      v66.i32[1] = 0;
      float32x2_t v67 = vpadd_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vmul_f32((float32x2_t)v66.u32[0], (float32x2_t)v66.u32[0]));
      float32x2_t v68 = vpadd_f32(v67, v67);
      if (v68.f32[0] > 0.00000011921)
      {
        if (v68.f32[0] == 0.0)
        {
          float32x4_t v44 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v65.u32[2] = v66;
          float32x2_t v69 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
          float32x2_t v70 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 8uLL).u64[0];
          float32x2_t v71 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 4uLL).u64[0];
          float32x2_t v72 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 4uLL).u64[0];
          int8x8_t v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v328.f32, v71), v72, *(float32x2_t *)v329[0].f32);
          *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(v69, *(float32x2_t *)v329[0].f32), *(float32x2_t *)v328.f32, v70), 4uLL);
          v74.i64[1] = v73.u32[0];
          float32x2_t v75 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 4uLL).u64[0];
          int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v329[0].f32), v71, *(float32x2_t *)v327.f32);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v70), *(float32x2_t *)v329[0].f32, v75), 4uLL);
          v78.i64[1] = v77.u32[0];
          int8x8_t v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v72), v76, *(float32x2_t *)v328.f32);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v328.f32), *(float32x2_t *)v327.f32, v69), 4uLL);
          v80.i64[1] = v79.u32[0];
          float32x4_t v81 = vmulq_f32(v74, v65);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          float32x2_t v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
          float32x4_t v83 = vmulq_f32(v78, v65);
          v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
          float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
          float32x4_t v85 = vmulq_f32(v80, v65);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vcgez_f32(v82)), (int8x8_t)vcgez_f32(v86)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
          {
            int8x16_t v112 = (int8x16_t)vmulq_f32(v327, v65);
            float32x2_t v113 = (float32x2_t)vextq_s8(v112, v112, 8uLL).u64[0];
            float32x2_t v114 = vrecpe_f32(v68);
            int v115 = 4;
            do
            {
              float32x2_t v114 = vmul_f32(v114, vrecps_f32(v68, v114));
              --v115;
            }
            while (v115);
            float32x2_t v116 = vpadd_f32(*(float32x2_t *)v112.i8, v113);
            float32x4_t v44 = vmulq_n_f32(v65, vmul_f32(v114, vpadd_f32(v116, v116)).f32[0]);
            v44.i32[3] = 0;
          }
          else
          {
            float32x4_t v87 = vnegq_f32(v327);
            v87.i32[3] = 0;
            float32x4_t v88 = vnegq_f32(v328);
            v88.i32[3] = 0;
            float32x4_t v89 = vmulq_f32(v87, a10);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            float32x4_t v91 = vmulq_f32(a10, v88);
            v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
            float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vclez_f32(v92)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
            {
              float32x2_t v117 = vsub_f32(v90, v92);
              float32x2_t v118 = vrecpe_f32(v117);
              int v119 = 4;
              do
              {
                float32x2_t v118 = vmul_f32(v118, vrecps_f32(v117, v118));
                --v119;
              }
              while (v119);
              uint64_t v104 = 0;
              float32x4_t v44 = vmlaq_n_f32(v327, a10, vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v117), (float32x2_t)0x3400000034000000), (int8x8_t)v118, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              unsigned int v120 = 2;
              uint64_t v103 = 1;
            }
            else
            {
              float32x4_t v93 = vnegq_f32(v329[0]);
              v93.i32[3] = 0;
              float32x4_t v94 = vmulq_f32(v88, v64);
              v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
              float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
              float32x4_t v96 = vmulq_f32(a10, v93);
              v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
              float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
              float32x4_t v98 = vmulq_f32(v64, v93);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v95, v92), (int8x8_t)vcge_f32(v97, v99)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
              {
                float32x2_t v121 = vsub_f32(v95, v92);
                float32x2_t v122 = vadd_f32(v121, vsub_f32(v97, v99));
                float32x2_t v123 = vrecpe_f32(v122);
                int v124 = 4;
                do
                {
                  float32x2_t v123 = vmul_f32(v123, vrecps_f32(v122, v123));
                  --v124;
                }
                while (v124);
                int8x16_t v125 = (int8x16_t)vmlaq_n_f32(v328, vsubq_f32(v329[0], v328), vmul_f32(v121, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v122), (float32x2_t)0x3400000034000000), (int8x8_t)v123, 0)).f32[0]);
                v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
                unsigned int v120 = 2;
                uint64_t v104 = 1;
                uint64_t v103 = 2;
                float32x4_t v44 = (float32x4_t)v125;
              }
              else
              {
                float32x4_t v100 = vmulq_f32(v87, v64);
                int32x4_t v101 = (int32x4_t)vpaddq_f32(v100, v100);
                *(float32x2_t *)v101.i8 = vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
                {
                  float32x2_t v126 = vsub_f32(*(float32x2_t *)v101.i8, v99);
                  float32x2_t v127 = vrecpe_f32(v126);
                  int v128 = 4;
                  do
                  {
                    float32x2_t v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                    --v128;
                  }
                  while (v128);
                  uint64_t v104 = 0;
                  float32x4_t v44 = vmlaq_n_f32(v327, v64, vmul_f32(*(float32x2_t *)v101.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                  uint64_t v103 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
                {
                  uint64_t v104 = 0;
                  uint64_t v103 = 1;
                }
                else
                {
                  *(int32x2_t *)v101.i8 = vcge_f32(v92, v95);
                  *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v101.i8, (int8x8_t)vcgez_f32(v92)), 0);
                  *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                  v101.i32[0] = -1;
                  __int32 v102 = v44.i32[0];
                  float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v101), 0), (int8x16_t)v328, (int8x16_t)v329[0]);
                  uint64_t v103 = 1;
                  if (v102 == -1) {
                    uint64_t v104 = 1;
                  }
                  else {
                    uint64_t v104 = 2;
                  }
                }
                unsigned int v120 = v103;
              }
            }
            float32x4_t v129 = *(&v327 + v104);
            float32x4_t v130 = *(&v327 + v103);
            a10 = *((float32x4_t *)&v324 + v104);
            float32x4_t v131 = *((float32x4_t *)&v324 + v103);
            float32x4_t v132 = *((float32x4_t *)&v321 + v104);
            float32x4_t v133 = *((float32x4_t *)&v321 + v103);
            int v134 = *(&v319 + v104);
            int v135 = *(&v319 + v103);
            int v136 = *(&v317 + v104);
            int v137 = *(&v317 + v103);
            float32x4_t v327 = v129;
            float32x4_t v328 = v130;
            int8x16_t v324 = (int8x16_t)a10;
            float32x4_t v325 = v131;
            int8x16_t v321 = (int8x16_t)v132;
            float32x4_t v322 = v133;
            int v319 = v134;
            int v320 = v135;
            int v317 = v136;
            int v318 = v137;
            unsigned int v314 = v120;
          }
        }
        goto LABEL_49;
      }
      unsigned int v314 = 2;
      float32x4_t v105 = vmulq_f32(a10, a10);
      v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
      float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v106), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        float32x4_t v107 = vnegq_f32(v327);
        v107.i32[3] = 0;
        float32x4_t v108 = vmulq_f32(v107, a10);
        v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
        float32x2_t v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
        float32x2_t v110 = vrecpe_f32(v106);
        int v111 = 4;
        do
        {
          float32x2_t v110 = vmul_f32(v110, vrecps_f32(v106, v110));
          --v111;
        }
        while (v111);
        float32x4_t v44 = vmlaq_n_f32(v327, a10, vmax_f32(vmin_f32(vmul_f32(v109, v110), _D10), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v44 = v327;
      float32x4_t v45 = vsubq_f32(v328, v327);
      float32x4_t v46 = vmulq_f32(v45, v45);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      float32x2_t v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v47), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        float32x4_t v48 = vnegq_f32(v327);
        v48.i32[3] = 0;
        float32x4_t v49 = vmulq_f32(v48, v45);
        a10 = vpaddq_f32(v49, v49);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        float32x2_t v50 = vrecpe_f32(v47);
        int v51 = 4;
        do
        {
          float32x2_t v50 = vmul_f32(v50, vrecps_f32(v47, v50));
          --v51;
        }
        while (v51);
        float32x4_t v44 = vmlaq_n_f32(v327, v45, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v50), _D10), 0).f32[0]);
LABEL_31:
        v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v314 = 1;
LABEL_49:
  float32x4_t v315 = v44;
  float32x4_t v138 = vmulq_f32(v44, v44);
  v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
  float32x2_t v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
  float32x2_t v140 = vrsqrte_f32(v139);
  int v141 = 4;
  do
  {
    float32x2_t v140 = vmul_f32(v140, vrsqrts_f32(vmul_f32(v140, v140), v139));
    --v141;
  }
  while (v141);
  float32x2_t v61 = vmul_f32(v139, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v139), 0), (int8x8_t)_D10, (int8x8_t)v140));
  float32x2_t v142 = vrecpe_f32(v61);
  int v143 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v61, v142);
    float32x2_t v142 = vmul_f32(v142, *(float32x2_t *)a10.f32);
    --v143;
  }
  while (v143);
  float32x4_t v144 = vmulq_n_f32(v44, v142.f32[0]);
  v144.i32[3] = 0;
  float32x4_t v310 = v144;
  int32x4_t v62 = vdupq_lane_s32(vcgt_f32(v61, v23), 0);
  float32x4_t v63 = v44;
LABEL_54:
  float32x2_t v145 = vadd_f32(v24, a8);
  a10.i32[0] = -1;
  int32x4_t v304 = (int32x4_t)a10;
  v146.i64[0] = -1;
  v146.i64[1] = -1;
  for (float32x2_t i = v61; ; float32x2_t i = v158)
  {
    float32x4_t v148 = v44;
    v149.i64[0] = -1;
    v149.i64[1] = -1;
    *(int16x4_t *)v149.i8 = vmovn_s32(vceqq_s32(v62, v149));
    if (vuzp1_s8(*(int8x8_t *)v149.i8, *(int8x8_t *)v149.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v308 = v148;
    float32x4_t v150 = vnegq_f32(v148);
    v150.i32[3] = 0;
    float32x2_t v311 = v61;
    float32x4_t v313 = v150;
    *(double *)v151.i64 = physx::Gu::RelativeConvex<physx::Gu::BoxV>::support(a1, (float32x2_t *)&v313, (unsigned __int32 *)&v319 + v314);
    float32x4_t v309 = v151;
    uint64_t v152 = v314;
    uint64_t v153 = *(void *)(a2 + 8);
    int v154 = physx::Gu::ConvexHullV::supportVertexIndex(v153, &v315);
    *(&v317 + v152) = v154;
    float32x4_t v155 = *(float32x4_t *)(*(void *)(v153 + 160) + 12 * v154);
    v155.i32[3] = 0;
    float32x4_t v44 = vsubq_f32(v309, v155);
    float32x4_t v156 = vmulq_f32(v310, v44);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    float32x2_t v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v157, v145)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        uint64_t v258 = v314;
        *a5 = v314;
        if (v258)
        {
          long long v259 = &v317;
          uint64_t v260 = &v319;
          do
          {
            int v261 = *v260++;
            *a3++ = v261;
            int v262 = *v259++;
            *v11++ = v262;
            --v258;
          }
          while (v258);
        }
      }
      return 0;
    }
    float32x2_t v158 = v311;
    uint64_t v159 = v314;
    if (v157.f32[0] > (float)(0.99977 * v311.f32[0]))
    {
      if (!a3) {
        goto LABEL_121;
      }
      *a5 = v314;
      if (v159)
      {
        char v263 = &v317;
        uint64_t v264 = &v319;
        uint64_t v265 = v159;
        do
        {
          int v266 = *v264++;
          *a3++ = v266;
          int v267 = *v263++;
          *v11++ = v267;
          --v265;
        }
        while (v265);
LABEL_121:
        float32x4_t v268 = a6;
        a6[2] = v310;
        switch(v159)
        {
          case 3:
            v313.i64[0] = 0;
            float32x2_t v316 = 0;
            physx::Gu::barycentricCoordinates(&v315, &v327, &v328, v329, (float32x2_t *)&v313, &v316);
            float32x2_t v158 = v311;
            float32x4_t v276 = vmulq_n_f32(vsubq_f32(v325, (float32x4_t)v324), v313.f32[0]);
            v276.i32[3] = 0;
            float32x4_t v277 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v324), v316.f32[0]);
            v277.i32[3] = 0;
            int8x16_t v269 = (int8x16_t)vaddq_f32((float32x4_t)v324, vaddq_f32(v276, v277));
            float32x4_t v278 = vmulq_n_f32(vsubq_f32(v322, (float32x4_t)v321), v313.f32[0]);
            v278.i32[3] = 0;
            float32x4_t v279 = vmulq_n_f32(vsubq_f32(v323, (float32x4_t)v321), v316.f32[0]);
            v279.i32[3] = 0;
            int8x16_t v270 = (int8x16_t)vaddq_f32((float32x4_t)v321, vaddq_f32(v278, v279));
            break;
          case 2:
            float32x4_t v280 = vsubq_f32(v327, v315);
            float32x4_t v281 = vsubq_f32(vsubq_f32(v328, v315), v280);
            float32x4_t v282 = vmulq_f32(v281, v281);
            v282.i64[0] = vpaddq_f32(v282, v282).u64[0];
            float32x2_t v283 = vpadd_f32(*(float32x2_t *)v282.f32, *(float32x2_t *)v282.f32);
            float32x2_t v284 = vrecpe_f32(v283);
            int v285 = 4;
            do
            {
              float32x2_t v284 = vmul_f32(v284, vrecps_f32(v283, v284));
              --v285;
            }
            while (v285);
            float32x4_t v286 = vnegq_f32(v280);
            v286.i32[3] = 0;
            float32x4_t v287 = vmulq_f32(v286, v281);
            v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
            v286.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v283), (int8x8_t)v284, 0), vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32)).u32[0];
            int8x16_t v269 = (int8x16_t)vmlaq_n_f32((float32x4_t)v324, vsubq_f32(v325, (float32x4_t)v324), v286.f32[0]);
            v269.i64[1] = vextq_s8(v269, v269, 8uLL).u32[0];
            int8x16_t v270 = (int8x16_t)vmlaq_n_f32((float32x4_t)v321, vsubq_f32(v322, (float32x4_t)v321), v286.f32[0]);
            v270.i64[1] = vextq_s8(v270, v270, 8uLL).u32[0];
            break;
          case 1:
            int8x16_t v269 = v324;
            uint64_t result = 2;
            int8x16_t v270 = v321;
LABEL_147:
            *float32x4_t v268 = (float32x4_t)v269;
            v268[1] = (float32x4_t)v270;
            *(float32x2_t *)v268[4].f32 = v158;
            return result;
          default:
LABEL_134:
            uint64_t result = 2;
            int8x16_t v269 = 0uLL;
            int8x16_t v270 = 0uLL;
            goto LABEL_147;
        }
        uint64_t result = 2;
        goto LABEL_147;
      }
      float32x4_t v268 = a6;
      a6[2] = v310;
      goto LABEL_134;
    }
    *(&v324 + v314) = (int8x16_t)v309;
    *(&v321 + v159) = (int8x16_t)v155;
    unsigned int v314 = v159 + 1;
    *(&v327 + v159) = v44;
    if (v159 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v327, &v324, &v321, &v319, &v317, (int *)&v314);
      float32x2_t v158 = v311;
LABEL_66:
      float32x4_t v63 = v308;
      goto LABEL_101;
    }
    if (v159 == 2)
    {
      float32x4_t v44 = v327;
      float32x4_t v168 = vsubq_f32(v328, v327);
      float32x4_t v169 = vsubq_f32(v329[0], v327);
      int8x8_t v171 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v168.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 4uLL), *(float32x2_t *)v169.f32);
      *(int8x8_t *)v170.f32 = vext_s8(v171, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL), *(float32x2_t *)v169.f32), *(float32x2_t *)v168.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL)), 4uLL);
      v171.i32[1] = 0;
      unsigned int v314 = 3;
      float32x2_t v172 = vpadd_f32(vmul_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32), vmul_f32((float32x2_t)v171.u32[0], (float32x2_t)v171.u32[0]));
      float32x2_t v173 = vpadd_f32(v172, v172);
      if (v173.f32[0] <= 0.00000011921)
      {
        unsigned int v314 = 2;
        float32x4_t v210 = vmulq_f32(v168, v168);
        v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
        float32x2_t v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v211), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
        {
          float32x4_t v212 = vnegq_f32(v327);
          v212.i32[3] = 0;
          float32x4_t v213 = vmulq_f32(v212, v168);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          float32x2_t v215 = vrecpe_f32(v211);
          int v216 = 4;
          float32x4_t v63 = v308;
          do
          {
            float32x2_t v215 = vmul_f32(v215, vrecps_f32(v211, v215));
            --v216;
          }
          while (v216);
          float32x4_t v44 = vmlaq_n_f32(v327, v168, vmax_f32(vmin_f32(vmul_f32(v214, v215), _D10), 0).f32[0]);
LABEL_81:
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v314 = 1;
        goto LABEL_66;
      }
      if (v173.f32[0] == 0.0)
      {
        float32x4_t v44 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v170.u32[2] = v171;
      float32x2_t v174 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
      float32x2_t v175 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 8uLL).u64[0];
      float32x2_t v176 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 4uLL).u64[0];
      float32x2_t v177 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 4uLL).u64[0];
      int8x8_t v178 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v328.f32, v176), v177, *(float32x2_t *)v329[0].f32);
      *(int8x8_t *)v179.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32(v174, *(float32x2_t *)v329[0].f32), *(float32x2_t *)v328.f32, v175), 4uLL);
      v179.i64[1] = v178.u32[0];
      float32x2_t v180 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
      float32x2_t v181 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 4uLL).u64[0];
      int8x8_t v182 = (int8x8_t)vmls_f32(vmul_f32(v181, *(float32x2_t *)v329[0].f32), v176, *(float32x2_t *)v327.f32);
      *(int8x8_t *)v183.f32 = vext_s8(v182, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v175), *(float32x2_t *)v329[0].f32, v180), 4uLL);
      v183.i64[1] = v182.u32[0];
      int8x8_t v184 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v177), v181, *(float32x2_t *)v328.f32);
      *(int8x8_t *)v185.f32 = vext_s8(v184, (int8x8_t)vmls_f32(vmul_f32(v180, *(float32x2_t *)v328.f32), *(float32x2_t *)v327.f32, v174), 4uLL);
      v185.i64[1] = v184.u32[0];
      float32x4_t v186 = vmulq_f32(v179, v170);
      v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
      float32x2_t v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
      float32x4_t v188 = vmulq_f32(v183, v170);
      v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
      float32x2_t v189 = vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32);
      float32x4_t v190 = vmulq_f32(v185, v170);
      v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
      float32x2_t v191 = vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v189), (int8x8_t)vcgez_f32(v187)), (int8x8_t)vcgez_f32(v191)), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        float32x4_t v192 = vnegq_f32(v327);
        v192.i32[3] = 0;
        float32x4_t v193 = vnegq_f32(v328);
        v193.i32[3] = 0;
        float32x4_t v194 = vmulq_f32(v192, v168);
        v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
        float32x2_t v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
        float32x4_t v196 = vmulq_f32(v168, v193);
        v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
        float32x2_t v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v195), (int8x8_t)vclez_f32(v197)), (int8x8_t)vclez_f32(v191)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
        {
          float32x2_t v222 = vsub_f32(v195, v197);
          float32x2_t v223 = vrecpe_f32(v222);
          int v224 = 4;
          do
          {
            float32x2_t v223 = vmul_f32(v223, vrecps_f32(v222, v223));
            --v224;
          }
          while (v224);
          uint64_t v209 = 0;
          float32x4_t v44 = vmlaq_n_f32(v327, v168, vmul_f32(v195, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v222), (float32x2_t)0x3400000034000000), (int8x8_t)v223, 0)).f32[0]);
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          unsigned int v225 = 2;
          uint64_t v208 = 1;
        }
        else
        {
          float32x4_t v198 = vnegq_f32(v329[0]);
          v198.i32[3] = 0;
          float32x4_t v199 = vmulq_f32(v193, v169);
          v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
          float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
          float32x4_t v201 = vmulq_f32(v168, v198);
          v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
          float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
          float32x4_t v203 = vmulq_f32(v169, v198);
          v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
          float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v200, v197), (int8x8_t)vcge_f32(v202, v204)), (int8x8_t)vclez_f32(v187)), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
          {
            float32x4_t v205 = vmulq_f32(v192, v169);
            v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
            float32x2_t v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v206), (int8x8_t)vclez_f32(v204)), (int8x8_t)vclez_f32(v189)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
            {
              float32x2_t v231 = vsub_f32(v206, v204);
              float32x2_t v232 = vrecpe_f32(v231);
              int v233 = 4;
              float32x4_t v63 = v308;
              do
              {
                float32x2_t v232 = vmul_f32(v232, vrecps_f32(v231, v232));
                --v233;
              }
              while (v233);
              uint64_t v209 = 0;
              float32x4_t v44 = vmlaq_n_f32(v327, v169, vmul_f32(v206, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v231), (float32x2_t)0x3400000034000000), (int8x8_t)v232, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              uint64_t v208 = 2;
              unsigned int v225 = 2;
            }
            else
            {
              float32x4_t v63 = v308;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v206), (int8x8_t)vclez_f32(v195)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
              {
                uint64_t v209 = 0;
                uint64_t v208 = 1;
              }
              else
              {
                *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v197, v200), (int8x8_t)vcgez_f32(v197)), 0);
                *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                __int32 v207 = v44.i32[0];
                float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v304), 0), (int8x16_t)v328, (int8x16_t)v329[0]);
                uint64_t v208 = 1;
                if (v207 == -1) {
                  uint64_t v209 = 1;
                }
                else {
                  uint64_t v209 = 2;
                }
              }
              unsigned int v225 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v226 = vsub_f32(v200, v197);
          float32x2_t v227 = vadd_f32(v226, vsub_f32(v202, v204));
          float32x2_t v228 = vrecpe_f32(v227);
          int v229 = 4;
          do
          {
            float32x2_t v228 = vmul_f32(v228, vrecps_f32(v227, v228));
            --v229;
          }
          while (v229);
          int8x16_t v230 = (int8x16_t)vmlaq_n_f32(v328, vsubq_f32(v329[0], v328), vmul_f32(v226, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v227), (float32x2_t)0x3400000034000000), (int8x8_t)v228, 0)).f32[0]);
          v230.i64[1] = vextq_s8(v230, v230, 8uLL).u32[0];
          uint64_t v208 = 2;
          float32x4_t v44 = (float32x4_t)v230;
          uint64_t v209 = 1;
          unsigned int v225 = 2;
        }
        float32x4_t v63 = v308;
LABEL_100:
        float32x4_t v234 = *(&v327 + v209);
        float32x4_t v235 = *(&v327 + v208);
        float32x4_t v236 = *((float32x4_t *)&v324 + v209);
        float32x4_t v237 = *((float32x4_t *)&v324 + v208);
        float32x4_t v238 = *((float32x4_t *)&v321 + v209);
        float32x4_t v239 = *((float32x4_t *)&v321 + v208);
        int v240 = *(&v319 + v209);
        int v241 = *(&v319 + v208);
        int v242 = *(&v317 + v209);
        int v243 = *(&v317 + v208);
        float32x4_t v327 = v234;
        float32x4_t v328 = v235;
        int8x16_t v324 = (int8x16_t)v236;
        float32x4_t v325 = v237;
        int8x16_t v321 = (int8x16_t)v238;
        float32x4_t v322 = v239;
        int v319 = v240;
        int v320 = v241;
        int v317 = v242;
        int v318 = v243;
        unsigned int v314 = v225;
        goto LABEL_101;
      }
      int8x16_t v217 = (int8x16_t)vmulq_f32(v327, v170);
      float32x2_t v218 = (float32x2_t)vextq_s8(v217, v217, 8uLL).u64[0];
      float32x2_t v219 = vrecpe_f32(v173);
      int v220 = 4;
      float32x4_t v63 = v308;
      do
      {
        float32x2_t v219 = vmul_f32(v219, vrecps_f32(v173, v219));
        --v220;
      }
      while (v220);
      float32x2_t v221 = vpadd_f32(*(float32x2_t *)v217.i8, v218);
      float32x4_t v44 = vmulq_n_f32(v170, vmul_f32(v219, vpadd_f32(v221, v221)).f32[0]);
      v44.i32[3] = 0;
    }
    else
    {
      float32x4_t v63 = v308;
      if (v159 == 1)
      {
        float32x4_t v44 = v327;
        float32x4_t v160 = vsubq_f32(v328, v327);
        float32x4_t v161 = vmulq_f32(v160, v160);
        v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
        float32x2_t v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v162), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
        {
          unsigned int v314 = 1;
          goto LABEL_101;
        }
        float32x4_t v163 = vnegq_f32(v327);
        v163.i32[3] = 0;
        float32x4_t v164 = vmulq_f32(v163, v160);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        float32x2_t v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        float32x2_t v166 = vrecpe_f32(v162);
        int v167 = 4;
        do
        {
          float32x2_t v166 = vmul_f32(v166, vrecps_f32(v162, v166));
          --v167;
        }
        while (v167);
        float32x4_t v44 = vmlaq_n_f32(v327, v160, vmax_f32(vmin_f32(vmul_f32(v165, v166), _D10), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v315 = v44;
    float32x4_t v244 = vmulq_f32(v44, v44);
    v244.i64[0] = vpaddq_f32(v244, v244).u64[0];
    float32x2_t v245 = vpadd_f32(*(float32x2_t *)v244.f32, *(float32x2_t *)v244.f32);
    float32x2_t v246 = vrsqrte_f32(v245);
    int v247 = 4;
    do
    {
      float32x2_t v246 = vmul_f32(v246, vrsqrts_f32(vmul_f32(v246, v246), v245));
      --v247;
    }
    while (v247);
    float32x2_t v61 = vmul_f32(v245, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v245), 0), (int8x8_t)_D10, (int8x8_t)v246));
    float32x2_t v248 = vrecpe_f32(v61);
    int v249 = 4;
    do
    {
      float32x2_t v248 = vmul_f32(v248, vrecps_f32(v61, v248));
      --v249;
    }
    while (v249);
    float32x4_t v250 = vmulq_n_f32(v44, v248.f32[0]);
    v250.i32[3] = 0;
    float32x4_t v310 = v250;
    *(int32x2_t *)v250.f32 = vcgt_f32(v158, v61);
    int32x4_t v146 = vdupq_lane_s32(*(int32x2_t *)v250.f32, 0);
    int32x4_t v62 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v61, v23), *(int8x8_t *)v250.f32), 0);
  }
  int8x8_t v251 = (int8x8_t)vmovn_s32(vceqzq_s32(v146));
  uint64_t v252 = v314;
  if (vuzp1_s8(v251, v251).u32[0] == -1)
  {
    if (a3)
    {
      uint64_t v271 = v314 - 1;
      *a5 = v314 - 1;
      if (v252 == 1)
      {
LABEL_132:
        int8x16_t v269 = v324;
        int8x16_t v270 = v321;
        goto LABEL_144;
      }
      float32x4_t v272 = &v317;
      float32x4_t v273 = &v319;
      do
      {
        int v274 = *v273++;
        *a3++ = v274;
        int v275 = *v272++;
        *v11++ = v275;
        --v271;
      }
      while (v271);
    }
    float32x4_t v315 = v63;
    if (v252 == 3)
    {
      v313.i64[0] = 0;
      float32x2_t v316 = 0;
      float32x4_t v312 = v63;
      physx::Gu::barycentricCoordinates(&v315, &v327, &v328, v329, (float32x2_t *)&v313, &v316);
      float32x4_t v288 = vmulq_n_f32(vsubq_f32(v325, (float32x4_t)v324), v313.f32[0]);
      v288.i32[3] = 0;
      float32x4_t v289 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v324), v316.f32[0]);
      v289.i32[3] = 0;
      float32x4_t v290 = vaddq_f32(v288, v289);
      float32x4_t v291 = vmulq_n_f32(vsubq_f32(v322, (float32x4_t)v321), v313.f32[0]);
      v291.i32[3] = 0;
      int8x16_t v269 = (int8x16_t)vaddq_f32((float32x4_t)v324, v290);
      float32x4_t v292 = vmulq_n_f32(vsubq_f32(v323, (float32x4_t)v321), v316.f32[0]);
      float32x4_t v63 = v312;
      v292.i32[3] = 0;
      int8x16_t v270 = (int8x16_t)vaddq_f32((float32x4_t)v321, vaddq_f32(v291, v292));
    }
    else
    {
      if (v252 == 2)
      {
        float32x4_t v293 = vsubq_f32(v327, v63);
        float32x4_t v294 = vsubq_f32(vsubq_f32(v328, v63), v293);
        float32x4_t v295 = vmulq_f32(v294, v294);
        v295.i64[0] = vpaddq_f32(v295, v295).u64[0];
        float32x2_t v296 = vpadd_f32(*(float32x2_t *)v295.f32, *(float32x2_t *)v295.f32);
        float32x2_t v297 = vrecpe_f32(v296);
        int v298 = 4;
        do
        {
          float32x2_t v297 = vmul_f32(v297, vrecps_f32(v296, v297));
          --v298;
        }
        while (v298);
        float32x4_t v299 = vnegq_f32(v293);
        v299.i32[3] = 0;
        float32x4_t v300 = vmulq_f32(v299, v294);
        v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
        v299.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v296), (int8x8_t)v297, 0), vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32)).u32[0];
        int8x16_t v269 = (int8x16_t)vmlaq_n_f32((float32x4_t)v324, vsubq_f32(v325, (float32x4_t)v324), v299.f32[0]);
        v269.i64[1] = vextq_s8(v269, v269, 8uLL).u32[0];
        int8x16_t v270 = (int8x16_t)vmlaq_n_f32((float32x4_t)v321, vsubq_f32(v322, (float32x4_t)v321), v299.f32[0]);
        v270.i64[1] = vextq_s8(v270, v270, 8uLL).u32[0];
        goto LABEL_144;
      }
      int8x16_t v269 = 0uLL;
      int8x16_t v270 = 0uLL;
      if (v252 == 1) {
        goto LABEL_132;
      }
    }
LABEL_144:
    float32x2_t v301 = vrecpe_f32(i);
    int v302 = 4;
    do
    {
      float32x2_t v301 = vmul_f32(v301, vrecps_f32(i, v301));
      --v302;
    }
    while (v302);
    float32x4_t v303 = vmulq_n_f32(v63, v301.f32[0]);
    v303.i32[3] = 0;
    float32x4_t v268 = a6;
    a6[2] = v303;
    a6[3] = v310;
    uint64_t result = 4;
    float32x2_t v158 = i;
    goto LABEL_147;
  }
  if (a3)
  {
    *a5 = v314;
    if (v252)
    {
      char v253 = &v317;
      long long v254 = &v319;
      do
      {
        int v255 = *v254++;
        *a3++ = v255;
        int v256 = *v253++;
        *v11++ = v256;
        --v252;
      }
      while (v252);
    }
  }
  return 5;
}

uint64_t physx::Gu::generateOrProcessContactsBoxConvex(uint64_t a1, uint64_t a2, uint64_t a3, int32x4_t *a4, float32x4_t *a5, int a6, uint64_t a7, uint64_t a8, float32x2_t a9, float32x2_t a10, double a11, float32x4_t *a12, unsigned int a13, char a14)
{
  uint64_t v148 = *MEMORY[0x263EF8340];
  float32x2_t v124 = a10;
  if (!a6) {
    return 0;
  }
  __asm { FMOV            V8.2S, #1.0 }
  uint64_t v23 = *(unsigned __int8 *)(a8 + 64);
  if (*(unsigned char *)(a8 + 64))
  {
    float32x2_t v24 = *(float32x4_t **)(a8 + 80);
    float32x4_t v25 = v24[2];
    if (v23 != 1)
    {
      uint64_t v26 = v23 - 1;
      float32x4_t v27 = v24 + 5;
      do
      {
        float32x4_t v28 = *v27;
        v27 += 3;
        float32x4_t v25 = vaddq_f32(v25, v28);
        --v26;
      }
      while (v26);
    }
    v25.i32[3] = 0;
    float32x4_t v29 = vmulq_f32(v25, v25);
    v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
    float32x2_t v30 = vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32);
    float32x2_t v31 = vrsqrte_f32(v30);
    int v32 = 4;
    do
    {
      float32x2_t v31 = vmul_f32(v31, vrsqrts_f32(vmul_f32(v31, v31), v30));
      --v32;
    }
    while (v32);
    float32x2_t v33 = vmul_f32(v30, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v30), 0), _D8, (int8x8_t)v31));
    float32x2_t v34 = vrecpe_f32(v33);
    int v35 = 4;
    do
    {
      float32x2_t v34 = vmul_f32(v34, vrecps_f32(v33, v34));
      --v35;
    }
    while (v35);
    float32x4_t v36 = vmulq_n_f32(v25, v34.f32[0]);
    v36.i32[3] = 0;
  }
  else
  {
    float32x4_t v36 = 0uLL;
  }
  float32x4_t v123 = v36;
  int v38 = physx::Gu::addGJKEPAContacts(a1, a2, a5, a6, a12, (float32x4_t *)a7, a8, vmul_f32(a9, (float32x2_t)vdup_n_s32(0x3D4CCCCDu)));
  float32x4_t v39 = *(float32x4_t *)(a7 + 32);
  float32x4_t v40 = vmulq_f32(v123, v39);
  int32x4_t v41 = (int32x4_t)vpaddq_f32(v40, v40);
  if (vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8).f32[0] >= 0.70711
    && *(unsigned __int8 *)(a8 + 64) >= a13
    && v38 == 0)
  {
    float32x4_t v49 = vaddq_f32(v123, v39);
    float32x4_t v50 = *(float32x4_t *)a4;
    v50.i32[3] = 0;
    float32x2_t v51 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
    float32x4_t v52 = vmulq_n_f32(v49, vmla_f32((float32x2_t)0xBF000000BF000000, v51, v51).f32[0]);
    v52.i32[3] = 0;
    float32x2_t v53 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
    int8x8_t v54 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL), *(float32x2_t *)a4->i8), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v53, 4uLL), *(float32x2_t *)v49.f32);
    *(int8x8_t *)v55.f32 = vext_s8(v54, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v49.f32, v53), *(float32x2_t *)a4->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL)), 4uLL);
    v55.i64[1] = v54.u32[0];
    float32x4_t v56 = vmlaq_laneq_f32(v52, v55, *(float32x4_t *)a4, 3);
    v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
    float32x4_t v57 = vmulq_f32(v49, v50);
    v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
    float32x4_t v58 = vmlaq_n_f32(v56, v50, vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).f32[0]);
    float32x4_t v59 = vaddq_f32(v58, v58);
    v59.i32[3] = 0;
    float32x4_t v60 = vmulq_f32(v59, v59);
    v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
    float32x2_t v61 = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32);
    float32x2_t v62 = vrsqrte_f32(v61);
    int v63 = 4;
    do
    {
      float32x2_t v62 = vmul_f32(v62, vrsqrts_f32(vmul_f32(v62, v62), v61));
      --v63;
    }
    while (v63);
    float32x2_t v64 = vmul_f32(v61, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v61), 0), _D8, (int8x8_t)v62));
    float32x2_t v65 = vrecpe_f32(v64);
    int v66 = 4;
    do
    {
      float32x2_t v65 = vmul_f32(v65, vrecps_f32(v64, v65));
      --v66;
    }
    while (v66);
    float32x4_t v67 = vmulq_n_f32(v59, v65.f32[0]);
    v67.i32[3] = 0;
    float32x4_t v129 = v67;
    physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a8, (uint64_t)a12, &v129, (float32x4_t *)a4, (uint64_t *)&v124);
    return 1;
  }
  else
  {
    char v44 = v38;
    uint64_t v45 = *(void *)(a1 + 8);
    float32x4_t v46 = *(float32x4_t **)(a2 + 8);
    v39.i32[0] = *(_DWORD *)(v45 + 56);
    uint64_t v131 = *(void *)(v45 + 48);
    v41.i64[0] = v131;
    __int32 v132 = v39.i32[0];
    physx::Gu::PolygonalBox::PolygonalBox((uint64_t)&v129, (uint64_t)&v131, *(double *)v39.i64, v41);
    uint64_t v133 = 0;
    int v134 = 0;
    uint64_t v135 = 0x600000008;
    int v136 = 0;
    int v137 = &v130;
    float32x4_t v138 = &v129.i8[8];
    long long v140 = 0u;
    long long v141 = 0u;
    float32x2_t v139 = &physx::Gu::gPCMBoxPolygonData;
    physx::Gu::getPCMConvexData(v46, a14, (uint64_t)v128);
    v127[0] = xmmword_23435FD50;
    v127[1] = xmmword_23435FD60;
    v127[2] = xmmword_23435FD80;
    v145[4] = a3;
    v145[5] = v127;
    v145[6] = v127;
    char v146 = 1;
    v145[0] = &unk_26E7286C8;
    uint64_t v147 = v45;
    v142[4] = a4;
    v142[5] = v46 + 3;
    _DWORD v142[6] = v46 + 6;
    if (a14)
    {
      char v47 = 1;
      float32x4_t v48 = &unk_26E728728;
    }
    else
    {
      char v47 = 0;
      float32x4_t v48 = &unk_26E728778;
    }
    char v143 = v47;
    v142[0] = v48;
    float32x4_t v144 = v46;
    unsigned int v126 = 0;
    BOOL v37 = physx::Gu::generateFullContactManifold((uint64_t)&v133, (uint64_t)v128, v145, v142, (uint64_t)a12, &v126, &v124, (float32x4_t *)(a7 + 32), *(float *)(v45 + 16), v46[1].f32[0], *(float *)&a11, (float32x4_t *)a7, (float32x2_t *)(a7 + 16), v44);
    if (v37)
    {
      if (v126)
      {
        physx::Gu::PersistentContactManifold::addBatchManifoldContacts(a8, (int32x4_t *)a12, v126, a11);
        uint64_t v68 = *(void *)(a8 + 80);
        int8x16_t v69 = *(int8x16_t *)(v68 + 32);
        unint64_t v70 = *(unsigned __int8 *)(a8 + 64);
        float32x4_t v71 = (float32x4_t)v69;
        if (v70 >= 2)
        {
          unint64_t v72 = v70 - 1;
          int8x8_t v73 = (float32x4_t *)(v68 + 80);
          float32x4_t v71 = (float32x4_t)v69;
          do
          {
            float32x4_t v74 = *v73;
            v73 += 3;
            float32x4_t v71 = vaddq_f32(v71, v74);
            --v72;
          }
          while (v72);
        }
        v71.i32[3] = 0;
        float32x4_t v75 = vmulq_f32(v71, v71);
        v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
        v69.i32[3] = 0;
        float32x4_t v76 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v71, v69);
        float32x4_t v77 = *(float32x4_t *)a4;
        v77.i32[3] = 0;
        float32x2_t v78 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
        float32x4_t v79 = vmulq_n_f32(v76, vmla_f32((float32x2_t)0xBF000000BF000000, v78, v78).f32[0]);
        v79.i32[3] = 0;
        float32x2_t v80 = (float32x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u64[0];
        float32x2_t v81 = (float32x2_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u64[0];
        int8x8_t v82 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v76.f32, (int8x8_t)v81, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v80, 4uLL), *(float32x2_t *)v76.f32);
        *(int8x8_t *)v83.f32 = vext_s8(v82, (int8x8_t)vmls_f32(vmul_f32(v80, *(float32x2_t *)v76.f32), *(float32x2_t *)a4->i8, v81), 4uLL);
        v83.i64[1] = v82.u32[0];
        float32x4_t v84 = vmlaq_laneq_f32(v79, v83, *(float32x4_t *)a4, 3);
        v84.i64[1] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u32[0];
        float32x4_t v85 = vmulq_f32(v77, v76);
        v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
        float32x4_t v86 = vmlaq_n_f32(v84, v77, vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32).f32[0]);
        float32x4_t v87 = vaddq_f32(v86, v86);
        v87.i32[3] = 0;
        float32x4_t v88 = vmulq_f32(v87, v87);
        v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
        float32x2_t v89 = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32);
        float32x2_t v90 = vrsqrte_f32(v89);
        int v91 = 4;
        do
        {
          float32x2_t v90 = vmul_f32(v90, vrsqrts_f32(vmul_f32(v90, v90), v89));
          --v91;
        }
        while (v91);
        float32x2_t v92 = vmul_f32(v89, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v89), 0), _D8, (int8x8_t)v90));
        float32x2_t v93 = vrecpe_f32(v92);
        int v94 = 4;
        do
        {
          float32x2_t v93 = vmul_f32(v93, vrecps_f32(v92, v93));
          --v94;
        }
        while (v94);
LABEL_46:
        float32x4_t v120 = vmulq_n_f32(v87, v93.f32[0]);
        v120.i32[3] = 0;
        float32x4_t v125 = v120;
        physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a8, (uint64_t)a12, &v125, (float32x4_t *)a4, (uint64_t *)&v124);
        return v37;
      }
      if ((v44 & 1) == 0)
      {
        uint64_t v95 = *(void *)(a8 + 80);
        int8x16_t v96 = *(int8x16_t *)(v95 + 32);
        unint64_t v97 = *(unsigned __int8 *)(a8 + 64);
        float32x4_t v98 = (float32x4_t)v96;
        if (v97 >= 2)
        {
          unint64_t v99 = v97 - 1;
          float32x4_t v100 = (float32x4_t *)(v95 + 80);
          float32x4_t v98 = (float32x4_t)v96;
          do
          {
            float32x4_t v101 = *v100;
            v100 += 3;
            float32x4_t v98 = vaddq_f32(v98, v101);
            --v99;
          }
          while (v99);
        }
        v98.i32[3] = 0;
        float32x4_t v102 = vmulq_f32(v98, v98);
        v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
        v96.i32[3] = 0;
        float32x4_t v103 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v102.f32, *(float32x2_t *)v102.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v98, v96);
        float32x4_t v104 = *(float32x4_t *)a4;
        v104.i32[3] = 0;
        float32x2_t v105 = (float32x2_t)vdupq_laneq_s32(*a4, 3).u64[0];
        float32x4_t v106 = vmulq_n_f32(v103, vmla_f32((float32x2_t)0xBF000000BF000000, v105, v105).f32[0]);
        v106.i32[3] = 0;
        float32x2_t v107 = (float32x2_t)vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
        float32x2_t v108 = (float32x2_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL).u64[0];
        int8x8_t v109 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a4->i8, (float32x2_t)vext_s8(*(int8x8_t *)v103.f32, (int8x8_t)v108, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)v107, 4uLL), *(float32x2_t *)v103.f32);
        *(int8x8_t *)v110.f32 = vext_s8(v109, (int8x8_t)vmls_f32(vmul_f32(v107, *(float32x2_t *)v103.f32), *(float32x2_t *)a4->i8, v108), 4uLL);
        v110.i64[1] = v109.u32[0];
        float32x4_t v111 = vmlaq_laneq_f32(v106, v110, *(float32x4_t *)a4, 3);
        v111.i64[1] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
        float32x4_t v112 = vmulq_f32(v104, v103);
        v112.i64[0] = vpaddq_f32(v112, v112).u64[0];
        float32x4_t v113 = vmlaq_n_f32(v111, v104, vpadd_f32(*(float32x2_t *)v112.f32, *(float32x2_t *)v112.f32).f32[0]);
        float32x4_t v87 = vaddq_f32(v113, v113);
        v87.i32[3] = 0;
        float32x4_t v114 = vmulq_f32(v87, v87);
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        float32x2_t v115 = vpadd_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v114.f32);
        float32x2_t v116 = vrsqrte_f32(v115);
        int v117 = 4;
        do
        {
          float32x2_t v116 = vmul_f32(v116, vrsqrts_f32(vmul_f32(v116, v116), v115));
          --v117;
        }
        while (v117);
        float32x2_t v118 = vmul_f32(v115, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v115), 0), _D8, (int8x8_t)v116));
        float32x2_t v93 = vrecpe_f32(v118);
        int v119 = 4;
        do
        {
          float32x2_t v93 = vmul_f32(v93, vrecps_f32(v118, v93));
          --v119;
        }
        while (v119);
        goto LABEL_46;
      }
    }
  }
  return v37;
}

BOOL physx::PxTriangleMesh::isKindOf(physx::PxTriangleMesh *this, const char *a2)
{
  return !strcmp("PxTriangleMesh", a2) || strcmp(a2, "PxBase") == 0;
}

uint64_t physx::Gu::TriangleMesh::getNbVertices(physx::Gu::TriangleMesh *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t physx::Gu::TriangleMesh::getVertices(physx::Gu::TriangleMesh *this)
{
  return *((void *)this + 5);
}

uint64_t physx::Gu::TriangleMesh::getNbTriangles(physx::Gu::TriangleMesh *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::Gu::TriangleMesh::getTriangles(physx::Gu::TriangleMesh *this)
{
  return *((void *)this + 6);
}

uint64_t physx::Gu::TriangleMesh::getTriangleMeshFlags@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 92);
  return this;
}

uint64_t physx::Gu::TriangleMesh::getTrianglesRemap(physx::Gu::TriangleMesh *this)
{
  return *((void *)this + 13);
}

uint64_t physx::Gu::TriangleMesh::getTriangleMaterialIndex(physx::Gu::TriangleMesh *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    return *(unsigned __int16 *)(v2 + 2 * a2);
  }
  else {
    return 0xFFFFLL;
  }
}

float physx::Gu::TriangleMesh::getLocalBounds@<S0>(physx::Gu::TriangleMesh *this@<X0>, uint64_t a2@<X8>)
{
  float v2 = *((float *)this + 19);
  float32x4_t v3 = *(float32x4_t *)((char *)this + 60);
  float32x4_t v4 = (float32x4_t)vextq_s8((int8x16_t)v3, vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL), 0xCuLL);
  v4.f32[1] = v2;
  *(void *)&long long v5 = vsubq_f32(v3, v4).u64[0];
  v4.i32[2] = *((_DWORD *)this + 14);
  *((void *)&v5 + 1) = vaddq_f32(v3, v4).i64[1];
  v3.i32[0] = HIDWORD(*(void *)((char *)this + 60));
  *(float *)a2 = v4.f32[2] - COERCE_FLOAT(*(void *)((char *)this + 68));
  float result = v3.f32[0] + v2;
  *(_OWORD *)(a2 + 4) = v5;
  *(float *)(a2 + 20) = v3.f32[0] + v2;
  return result;
}

uint64_t physx::Gu::TriangleMesh::getReferenceCount(physx::Gu::TriangleMesh *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::Gu::TriangleMesh::acquireReference(uint64_t this)
{
  return this;
}

void physx::Gu::SweepBoxMeshHitCallback::~SweepBoxMeshHitCallback(physx::Gu::SweepBoxMeshHitCallback *this)
{
}

void physx::Gu::SweepConvexMeshHitCallback::~SweepConvexMeshHitCallback(physx::Gu::SweepConvexMeshHitCallback *this)
{
}

void physx::Gu::SweepCapsuleMeshHitCallback::~SweepCapsuleMeshHitCallback(physx::Gu::SweepCapsuleMeshHitCallback *this)
{
}

const char *physx::Gu::BV4TriangleMesh::getConcreteTypeName(physx::Gu::BV4TriangleMesh *this)
{
  return "PxBVH34TriangleMesh";
}

void physx::Gu::BV4TriangleMesh::~BV4TriangleMesh(physx::Gu::BV4TriangleMesh *this)
{
  physx::Gu::BV4TriangleMesh::~BV4TriangleMesh(this);
  if (v1)
  {
    float v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    v2();
  }
}

{
  double v2;
  uint64_t vars8;

  *(void *)this = &unk_26E729908;
  *((void *)this + 2) = &unk_26E7299C8;
  float v2 = physx::Gu::BV4Tree::release((physx::Gu::BV4TriangleMesh *)((char *)this + 208));
  if (*((void *)this + 22)) {
    (*(void (**)(double))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(v2);
  }
  *((void *)this + 22) = 0;
  physx::Gu::TriangleMesh::~TriangleMesh(this);
}

uint64_t physx::Gu::BV4TriangleMesh::getMidphaseID(physx::Gu::BV4TriangleMesh *this)
{
  return 1;
}

void non-virtual thunk to'physx::Gu::BV4TriangleMesh::~BV4TriangleMesh(physx::Gu::BV4TriangleMesh *this)
{
}

{
  void (*v1)(void);
  uint64_t vars8;

  physx::Gu::BV4TriangleMesh::~BV4TriangleMesh((physx::Gu::BV4TriangleMesh *)((char *)this - 16));
  uint64_t v1 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v1();
}

const char *physx::Gu::RTreeTriangleMesh::getConcreteTypeName(physx::Gu::RTreeTriangleMesh *this)
{
  return "PxBVH33TriangleMesh";
}

void physx::Gu::RTreeTriangleMesh::~RTreeTriangleMesh(physx::Gu::RTreeTriangleMesh *this)
{
  *(void *)this = &unk_26E7299F0;
  *((void *)this + 2) = &unk_26E729AB0;
  physx::Gu::RTree::~RTree((physx::Gu::RTreeTriangleMesh *)((char *)this + 160));
  physx::Gu::TriangleMesh::~TriangleMesh(this);
}

{
  void (*v2)(void);
  uint64_t vars8;

  *(void *)this = &unk_26E7299F0;
  *((void *)this + 2) = &unk_26E729AB0;
  physx::Gu::RTree::~RTree((physx::Gu::RTreeTriangleMesh *)((char *)this + 160));
  physx::Gu::TriangleMesh::~TriangleMesh(this);
  float v2 = *(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
  v2();
}

uint64_t physx::Gu::RTreeTriangleMesh::getMidphaseID(physx::Gu::RTreeTriangleMesh *this)
{
  return 0;
}

void non-virtual thunk to'physx::Gu::RTreeTriangleMesh::~RTreeTriangleMesh(physx::Gu::RTreeTriangleMesh *this)
{
  uint64_t v1 = (physx::Gu::RTreeTriangleMesh *)((char *)this - 16);
  *((void *)this - 2) = &unk_26E7299F0;
  *(void *)this = &unk_26E729AB0;
  physx::Gu::RTree::~RTree((physx::Gu::RTreeTriangleMesh *)((char *)this + 144));
  physx::Gu::TriangleMesh::~TriangleMesh(v1);
}

{
  physx::Gu::RTreeTriangleMesh::~RTreeTriangleMesh((physx::Gu::RTreeTriangleMesh *)((char *)this - 16));
}

uint64_t physx::Gu::unsupportedCapsuleSweepMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t physx::Gu::unsupportedBoxSweepMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, vars0);
  }
  return 0;
}

uint64_t physx::Gu::unsupportedConvexSweepMidphase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!physx::Gu::Midphase::outputError(void)::reportOnlyOnce)
  {
    physx::Gu::Midphase::outputError(void)::reportOnlyOnce = 1;
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuMidphaseInterface.h", 175, "BV4 midphase only supported on Intel platforms.", a6, a7, a8, a9);
  }
  return result;
}

uint64_t _BuildBV32(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, double a5)
{
  v42.n128_f64[0] = a5;
  uint64_t v44 = *MEMORY[0x263EF8340];
  float32x4_t v8 = (_DWORD *)(a2 + 1288);
  memset(v43, 0, sizeof(v43));
  unsigned int v9 = 31;
  uint64_t result = fillInNodes(a3, 0, 0x1Fu, (uint64_t)v43, (_DWORD *)(a2 + 1288));
  unsigned int v11 = 0;
  do
  {
    uint64_t v12 = v11;
    if (v9 <= v11 + 1) {
      ++v11;
    }
    else {
      unsigned int v11 = v9;
    }
    while (*((void *)v43 + v12))
    {
      if (++v12 >= (unint64_t)v9) {
        goto LABEL_13;
      }
    }
    if (v9 > v12)
    {
      while (!*((void *)v43 + v9))
      {
        if (--v9 <= v12) {
          goto LABEL_16;
        }
      }
    }
    unsigned int v11 = v12;
LABEL_13:
    if (v11 != v9)
    {
      uint64_t v13 = *((void *)v43 + v9);
      *((void *)v43 + v9) = *((void *)v43 + v11);
      *((void *)v43 + v11) = v13;
    }
  }
  while (v11 < v9);
LABEL_16:
  *a4 += *v8;
  unint64_t v14 = *v8;
  float v15 = v42.n128_f32[0];
  if (v14)
  {
    unint64_t v16 = 0;
    float32x2_t v17 = (float32x2_t)vdup_lane_s32((int32x2_t)v42.n128_u64[0], 0);
    __asm { FMOV            V11.2S, #-1.0 }
    do
    {
      uint64_t v23 = *((void *)v43 + v16);
      if (v23)
      {
        if (*(void *)(v23 + 24))
        {
          float32_t v24 = (float)(*(float *)(v23 + 8) + *(float *)(v23 + 20)) * 0.5;
          float32x4_t v25 = (float32x2_t *)(a2 + 40 * v16);
          v25[1] = vmul_f32(vadd_f32(*(float32x2_t *)v23, *(float32x2_t *)(v23 + 12)), (float32x2_t)0x3F0000003F000000);
          v25[2].f32[0] = v24;
          float32x2_t v26 = vmul_f32(vsub_f32(*(float32x2_t *)(v23 + 12), *(float32x2_t *)v23), (float32x2_t)0x3F0000003F000000);
          float v27 = (float)(*(float *)(v23 + 20) - *(float *)(v23 + 8)) * 0.5;
          v25[3] = v26;
          float32x4_t v28 = v25 + 3;
          v28[1].f32[0] = v27;
          if (v15 != 0.0)
          {
            *float32x4_t v28 = vadd_f32(v26, v17);
            v28[1].f32[0] = v27 + v15;
          }
          uint64_t v29 = physx::shdfnd::Foundation::mInstance;
          if ((*(unsigned int (**)(uint64_t))(*(void *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance)) {
            float32x2_t v30 = "static const char *physx::shdfnd::ReflectionAllocator<BV32Node>::getName() [T = BV32Node]";
          }
          else {
            float32x2_t v30 = "<allocation names disabled>";
          }
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)(v29 + 24)
                                                                                                 + 16))(v29 + 24, 1296, v30, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/../../geomutils/src/mesh/GuBV32Build.cpp", 147);
          for (uint64_t i = 0; i != 1280; i += 40)
          {
            uint64_t v33 = v31 + i;
            *(void *)(v33 + 40) = 0xFFFFFFFFLL;
            *(void *)(v33 + 8) = 0;
            *(void *)(v33 + 16) = 0;
            *(void *)(v33 + 24) = _D11;
            *(_DWORD *)(v33 + 32) = -1082130432;
          }
          *(_DWORD *)(v31 + 1288) = 0;
          *(void *)(a2 + 40 * v16 + 40) = v31;
          uint64_t result = _BuildBV32(a1, v42);
          float v15 = v42.n128_f32[0];
          unint64_t v14 = *(unsigned int *)(a2 + 1288);
        }
        else
        {
          int v34 = *(_DWORD *)(v23 + 40);
          uint64_t v35 = *a1;
          uint64_t v36 = *(void *)(v23 + 32);
          float32_t v37 = (float)(*(float *)(v23 + 8) + *(float *)(v23 + 20)) * 0.5;
          int v38 = (float32x2_t *)(a2 + 40 * v16);
          v38[1] = vmul_f32(vadd_f32(*(float32x2_t *)v23, *(float32x2_t *)(v23 + 12)), (float32x2_t)0x3F0000003F000000);
          v38[2].f32[0] = v37;
          float32x2_t v39 = vmul_f32(vsub_f32(*(float32x2_t *)(v23 + 12), *(float32x2_t *)v23), (float32x2_t)0x3F0000003F000000);
          float v40 = (float)(*(float *)(v23 + 20) - *(float *)(v23 + 8)) * 0.5;
          v38[3] = v39;
          int32x4_t v41 = v38 + 3;
          v41[1].f32[0] = v40;
          if (v15 != 0.0)
          {
            float32x2_t *v41 = vadd_f32(v39, v17);
            v41[1].f32[0] = v40 + v15;
          }
          *(void *)(a2 + 40 * v16 + 40) = (2
                                           * (v34 & 0x8000003F | ((((v36 - v35) >> 2) & 0x1FFFFFF) << 6))) | 1;
        }
      }
      ++v16;
    }
    while (v16 < v14);
  }
  return result;
}

uint64_t BuildBV32Internal(physx::Gu::BV32Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float)::Local::_Flatten(uint64_t a1, unsigned int a2, int *a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unsigned int v11 = *a6 + 1;
  *a6 = v11;
  if (v11 > *a5) {
    *a5 = v11;
  }
  unint64_t v12 = *(unsigned int *)(a4 + 1288);
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  uint64_t v14 = a4 + 24;
  do
  {
    uint64_t v15 = a1 + 40 * (a2 + v13);
    *(void *)uint64_t v15 = *(void *)(v14 - 16);
    *(_DWORD *)(v15 + 8) = *(_DWORD *)(v14 - 8);
    *(void *)(v15 + 16) = *(void *)v14;
    *(_DWORD *)(v15 + 24) = *(_DWORD *)(v14 + 8);
    *(void *)(v15 + 32) = *(unsigned int *)(v14 + 16);
    ++v13;
    v14 += 40;
  }
  while (v12 != v13);
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  unsigned int v18 = 0;
  *(void *)&long long v19 = -1;
  *((void *)&v19 + 1) = -1;
  v31[6] = v19;
  v31[7] = v19;
  v31[4] = v19;
  v31[5] = v19;
  _OWORD v31[2] = v19;
  v31[3] = v19;
  v31[0] = v19;
  v31[1] = v19;
  memset(v30, 0, sizeof(v30));
  do
  {
    uint64_t v20 = *(void *)(a4 + v16 + 40);
    if ((v20 & 1) == 0)
    {
      int v21 = *a3;
      *a3 += *(_DWORD *)(v20 + 1288);
      *(void *)(a1 + 40 * a2 + 32 + v16) = ((v21 << 11) + 2 * *(_DWORD *)(v20 + 1288));
      *((_DWORD *)v31 + v18) = v21;
      *((void *)v30 + v18++) = v20;
      unint64_t v12 = *(unsigned int *)(a4 + 1288);
    }
    ++v17;
    v16 += 40;
  }
  while (v17 < v12);
  if (!v18) {
    goto LABEL_14;
  }
  uint64_t v22 = v18;
  uint64_t v23 = (uint64_t *)v30;
  float32_t v24 = (unsigned int *)v31;
  do
  {
    unsigned int v26 = *v24++;
    uint64_t v25 = v26;
    uint64_t v27 = *v23++;
    uint64_t result = BuildBV32Internal(physx::Gu::BV32Tree &,physx::Gu::AABBTree const&,physx::Gu::SourceMesh *,float)::Local::_Flatten(a1, v25, a3, v27, a5, a6);
    --*a6;
    --v22;
  }
  while (v22);
  if (a4)
  {
LABEL_14:
    uint64_t v29 = *(uint64_t (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24);
    return v29();
  }
  return result;
}

uint64_t fillInNodes(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v7 = a3;
  if (a2 + 1 == a3)
  {
LABEL_10:
    if (result) {
      uint64_t v8 = result + 48;
    }
    else {
      uint64_t v8 = 0;
    }
    *(void *)(a4 + 8 * a2) = result;
    int v11 = 2;
  }
  else
  {
    while (1)
    {
      uint64_t v8 = result + 48;
      uint64_t v9 = result ? result + 48 : 0;
      unsigned int v10 = a2 + ((v7 - a2) >> 1);
      if (*(void *)(result + 24))
      {
        fillInNodes(*(void *)(result + 24));
      }
      else
      {
        *(void *)(a4 + 8 * a2) = result;
        ++*a5;
      }
      uint64_t result = *(void *)(v9 + 24);
      a2 = v10 + 1;
      if (!result) {
        break;
      }
      if (v10 + 2 == v7) {
        goto LABEL_10;
      }
    }
    int v11 = 1;
    unsigned int v7 = v10 + 1;
  }
  *(void *)(a4 + 8 * v7) = v8;
  *a5 += v11;
  return result;
}

float32x4_t *physx::Gu::getIncidentPolygon(float32x4_t *result, int8x16_t *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v6 = *a3;
  float32x4_t v5 = a3[1];
  float32x4_t v7 = a3[2];
  float32x4_t v8 = vmulq_f32(*a3, a4);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  float32x2_t v9 = vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32);
  float32x4_t v10 = vmulq_f32(v5, a4);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  float32x2_t v11 = vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32);
  float32x4_t v12 = vmulq_f32(v7, a4);
  v12.i64[0] = vpaddq_f32(v12, v12).u64[0];
  float32x2_t v13 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32);
  float32x2_t v14 = vabs_f32(v13);
  if (vcage_f32(v9, v11).u8[0] & 1) != 0 && (vcge_f32(vabs_f32(v9), v14).u8[0])
  {
    float32x2_t v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 0);
    int32x2_t v16 = vcgtz_f32(v9);
    int8x16_t v17 = (int8x16_t)vnegq_f32(v6);
    v17.i32[3] = 0;
    float32x4_t v18 = vmulq_n_f32(v6, *(float *)vbsl_s8((int8x8_t)v16, (int8x8_t)vneg_f32(v15), (int8x8_t)v15).i32);
    v18.i32[3] = 0;
    float32x4_t v19 = vmulq_lane_f32(v5, *(float32x2_t *)a5.f32, 1);
    v19.i32[3] = 0;
    float32x4_t v20 = vmulq_laneq_f32(v7, a5, 2);
    v20.i32[3] = 0;
    *a2 = vbslq_s8((int8x16_t)vdupq_lane_s32(v16, 0), v17, (int8x16_t)v6);
    float32x4_t v21 = vaddq_f32(v18, a3[3]);
    float32x4_t v22 = vaddq_f32(v19, v20);
    float32x4_t v23 = vsubq_f32(v19, v20);
    *uint64_t result = vaddq_f32(v22, v21);
    result[1] = vaddq_f32(v23, v21);
    result[2] = vsubq_f32(v21, v22);
    float32x4_t v24 = vsubq_f32(v21, v23);
  }
  else
  {
    unsigned __int8 v25 = vcge_f32(vabs_f32(v11), v14).u8[0];
    float32x4_t v26 = vmulq_n_f32(v6, a5.f32[0]);
    v26.i32[3] = 0;
    if (v25)
    {
      float32x2_t v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 1);
      int32x2_t v28 = vcgtz_f32(v11);
      int8x16_t v29 = (int8x16_t)vnegq_f32(v5);
      v29.i32[3] = 0;
      int8x16_t v30 = vbslq_s8((int8x16_t)vdupq_lane_s32(v28, 0), v29, (int8x16_t)v5);
      float32x4_t v31 = vmulq_n_f32(v5, *(float *)vbsl_s8((int8x8_t)v28, (int8x8_t)vneg_f32(v27), (int8x8_t)v27).i32);
      v31.i32[3] = 0;
      float32x4_t v32 = vmulq_laneq_f32(v7, a5, 2);
      v32.i32[3] = 0;
      *a2 = v30;
      float32x4_t v33 = vaddq_f32(v31, a3[3]);
    }
    else
    {
      float32x2_t v34 = (float32x2_t)vdup_laneq_s32((int32x4_t)a5, 2);
      int32x2_t v35 = vcgtz_f32(v13);
      int8x16_t v36 = (int8x16_t)vnegq_f32(v7);
      v36.i32[3] = 0;
      int8x16_t v37 = vbslq_s8((int8x16_t)vdupq_lane_s32(v35, 0), v36, (int8x16_t)v7);
      float32x4_t v32 = vmulq_lane_f32(v5, *(float32x2_t *)a5.f32, 1);
      v32.i32[3] = 0;
      float32x4_t v38 = vmulq_n_f32(v7, *(float *)vbsl_s8((int8x8_t)v35, (int8x8_t)vneg_f32(v34), (int8x8_t)v34).i32);
      v38.i32[3] = 0;
      *a2 = v37;
      float32x4_t v33 = vaddq_f32(v38, a3[3]);
    }
    float32x4_t v39 = vaddq_f32(v26, v32);
    float32x4_t v40 = vsubq_f32(v26, v32);
    *uint64_t result = vaddq_f32(v39, v33);
    result[1] = vaddq_f32(v40, v33);
    result[2] = vsubq_f32(v33, v39);
    float32x4_t v24 = vsubq_f32(v33, v40);
  }
  result[3] = v24;
  return result;
}

int8x8_t *physx::Gu::calculateContacts(int8x8_t *result, int8x8_t *a2, float32x4_t *a3, int32x4_t *a4, float32x4_t *a5, uint64_t a6, _DWORD *a7, float32x2_t *a8, double a9, double a10, double a11, double a12, float32x4_t a13, double a14, float32x4_t a15)
{
  uint64_t v16 = 0;
  float32x2_t v17 = (float32x2_t)*result;
  float32x2_t v18 = (float32x2_t)*a2;
  *(int8x8_t *)v19.f32 = vext_s8(*result, *a2, 4uLL);
  v19.i64[1] = 2139095039;
  float32x4_t v20 = (float32x4_t)xmmword_23441F6C0;
  float32x4_t v21 = (float32x4_t)xmmword_234422E70;
  *(float32x2_t *)a15.f32 = *a8;
  do
  {
    float32x4_t v22 = a3[v16];
    float32x2_t v23 = vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v22, 2));
    if (vmvn_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a15.f32, v23)).u8[0])
    {
      v172[v16 + 4] = 0;
LABEL_5:
      v172[v16] = 0;
      goto LABEL_6;
    }
    v172[v16 + 4] = 1;
    float32x4_t v15 = (float32x4_t)vcgeq_f32(v19, vabsq_f32(v22));
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)v15), (int8x8_t)2139095039).u32[0] != -1) {
      goto LABEL_5;
    }
    v172[v16] = 1;
    float32x4_t v24 = v22;
    v24.i32[2] = 0;
    *(float32x4_t *)(a6 + 48 * *a7) = v24;
    *(float32x4_t *)(a6 + 48 * *a7 + 16) = a3[v16];
    a15 = *a5;
    a15.i32[3] = v23.i32[1];
    unsigned int v25 = (*a7)++;
    *(float32x4_t *)(a6 + 48 * v25 + 32) = a15;
    *(float32x2_t *)a15.f32 = *a8;
LABEL_6:
    float32x4_t v20 = vminq_f32(v20, v22);
    float32x4_t v21 = vmaxq_f32(v21, v22);
    ++v16;
  }
  while (v16 != 4);
  if (*a7 != 4)
  {
    float32x2_t v26 = (float32x2_t)vdup_laneq_s32(*a4, 2);
    *(float32x2_t *)a13.f32 = vneg_f32(v18);
    int8x8_t v27 = *result;
    *(int8x8_t *)v15.f32 = vext_s8(*result, *a2, 4uLL);
    int32x2_t v28 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v20, v15), (int8x16_t)vcgtq_f32(v15, v21)).u64[0];
    int32x4_t v29 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v28, 0), (int8x16_t)vdupq_lane_s32(v28, 1));
    v30.i64[0] = -1;
    v30.i64[1] = -1;
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v29, v30)), (int8x8_t)2139095039).u32[0] != -1)
    {
      uint64_t v31 = 0;
      float32x2_t v32 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 0);
      float32x2_t v33 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
      char v34 = 1;
      LODWORD(v35) = 3;
      do
      {
        while (1)
        {
          float32x4_t v36 = a3[v35];
          uint64_t v35 = v31;
          float32x2_t v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 1);
          float32x4_t v38 = a3[v31];
          float32x2_t v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 1);
          float32x2_t v40 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.f32, 0);
          float32x2_t v41 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v32, v41), (int8x8_t)vceq_f32(v33, v39)), vand_s8((int8x8_t)vceq_f32(v32, v40), (int8x8_t)vceq_f32(v33, v37))), 0), (int8x8_t)2139095039).u32[0] == -1)goto LABEL_21; {
          if ((veor_s8((int8x8_t)vcgt_f32(v37, v33), (int8x8_t)vcgt_f32(v39, v33)).u8[0] & 1) == 0)
          }
            break;
          float32x2_t v42 = vsub_f32(v39, v37);
          float32x2_t v43 = vmul_f32(vsub_f32(v33, v37), vsub_f32(v41, v40));
          int8x8_t v44 = (int8x8_t)vmul_n_f32(v42, v15.f32[0]);
          int8x8_t v45 = (int8x8_t)vadd_f32(v43, vmul_f32(vadd_f32(v40, (float32x2_t)0x3400000034000000), v42));
          int8x8_t v46 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v42), 0);
          if ((vcge_f32((float32x2_t)vbsl_s8(v46, v45, v44), (float32x2_t)vbsl_s8(v46, v44, v45)).u8[0] & 1) == 0) {
            break;
          }
          if ((v34 & 1) == 0) {
            goto LABEL_25;
          }
          char v34 = 0;
          ++v31;
          if (v35 == 3) {
            goto LABEL_21;
          }
        }
        ++v31;
      }
      while (v35 != 3);
      if ((v34 & 1) == 0)
      {
LABEL_21:
        int8x16_t v47 = (int8x16_t)vmulq_f32(*(float32x4_t *)a4, vsubq_f32(*a3, v15));
        float32x2_t v48 = (float32x2_t)vextq_s8(v47, v47, 8uLL).u64[0];
        float32x2_t v49 = vrecpe_f32(v26);
        int v50 = 4;
        do
        {
          float32x2_t v49 = vmul_f32(v49, vrecps_f32(v26, v49));
          --v50;
        }
        while (v50);
        float32x2_t v51 = vpadd_f32(*(float32x2_t *)v47.i8, v48);
        float32x2_t v52 = vmul_f32(v49, vpadd_f32(v51, v51));
        float32x2_t v53 = vneg_f32(v52);
        if ((vmvn_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a15.f32, v53)).u8[0] & 1) == 0)
        {
          *(float32x4_t *)(a6 + 48 * *a7) = v15;
          v15.i32[2] = v52.i32[0];
          *(float32x4_t *)(a6 + 48 * *a7 + 16) = v15;
          a15 = *a5;
          a15.i32[3] = v53.i32[1];
          unsigned int v54 = (*a7)++;
          *(float32x4_t *)(a6 + 48 * v54 + 32) = a15;
          int8x8_t v27 = *result;
        }
      }
    }
LABEL_25:
    int8x8_t v55 = (int8x8_t)vneg_f32(v17);
    *(int8x8_t *)a15.f32 = vext_s8(v27, *(int8x8_t *)a13.f32, 4uLL);
    int32x2_t v56 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v20, a15), (int8x16_t)vcgtq_f32(a15, v21)).u64[0];
    float32x4_t v57 = (float32x4_t)vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v56, 0), (int8x16_t)vdupq_lane_s32(v56, 1)), v30);
    if (vuzp1_s8((int8x8_t)vmovn_s32((int32x4_t)v57), (int8x8_t)2139095039).u32[0] != -1)
    {
      uint64_t v58 = 0;
      float32x2_t v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a15.f32, 0);
      float32x2_t v60 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a15.f32, 1);
      char v61 = 1;
      LODWORD(v62) = 3;
      do
      {
        while (1)
        {
          float32x4_t v63 = a3[v62];
          uint64_t v62 = v58;
          float32x2_t v64 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.f32, 1);
          float32x4_t v65 = a3[v58];
          float32x2_t v66 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 1);
          float32x2_t v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.f32, 0);
          float32x2_t v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v59, v68), (int8x8_t)vceq_f32(v60, v66)), vand_s8((int8x8_t)vceq_f32(v59, v67), (int8x8_t)vceq_f32(v60, v64))), 0), (int8x8_t)2139095039).u32[0] == -1)goto LABEL_36; {
          if ((veor_s8((int8x8_t)vcgt_f32(v64, v60), (int8x8_t)vcgt_f32(v66, v60)).u8[0] & 1) == 0)
          }
            break;
          float32x2_t v69 = vsub_f32(v66, v64);
          float32x2_t v70 = vmul_f32(vsub_f32(v60, v64), vsub_f32(v68, v67));
          int8x8_t v71 = (int8x8_t)vmul_n_f32(v69, a15.f32[0]);
          int8x8_t v72 = (int8x8_t)vadd_f32(v70, vmul_f32(vadd_f32(v67, (float32x2_t)0x3400000034000000), v69));
          int8x8_t v73 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v69), 0);
          if ((vcge_f32((float32x2_t)vbsl_s8(v73, v72, v71), (float32x2_t)vbsl_s8(v73, v71, v72)).u8[0] & 1) == 0) {
            break;
          }
          if ((v61 & 1) == 0) {
            goto LABEL_40;
          }
          char v61 = 0;
          ++v58;
          if (v62 == 3) {
            goto LABEL_36;
          }
        }
        ++v58;
      }
      while (v62 != 3);
      if ((v61 & 1) == 0)
      {
LABEL_36:
        float32x4_t v57 = vmulq_f32(*(float32x4_t *)a4, vsubq_f32(*a3, a15));
        float32x2_t v74 = (float32x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u64[0];
        float32x2_t v75 = vrecpe_f32(v26);
        int v76 = 4;
        do
        {
          float32x2_t v75 = vmul_f32(v75, vrecps_f32(v26, v75));
          --v76;
        }
        while (v76);
        float32x2_t v77 = vpadd_f32(*(float32x2_t *)v57.f32, v74);
        float32x2_t v78 = vmul_f32(v75, vpadd_f32(v77, v77));
        float32x2_t v79 = vneg_f32(v78);
        if (COERCE_FLOAT(*a8) > v79.f32[0])
        {
          *(float32x4_t *)(a6 + 48 * *a7) = a15;
          a15.i32[2] = v78.i32[0];
          *(float32x4_t *)(a6 + 48 * *a7 + 16) = a15;
          float32x4_t v80 = *a5;
          v80.i32[3] = v79.i32[1];
          unsigned int v81 = (*a7)++;
          *(float32x4_t *)(a6 + 48 * v81 + 32) = v80;
        }
      }
    }
LABEL_40:
    *(int8x8_t *)v57.f32 = vext_s8(v55, *a2, 4uLL);
    int32x2_t v82 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(v20, v57), (int8x16_t)vcgtq_f32(v57, v21)).u64[0];
    int32x4_t v83 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v82, 0), (int8x16_t)vdupq_lane_s32(v82, 1));
    v84.i64[0] = -1;
    v84.i64[1] = -1;
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v83, v84)), (int8x8_t)2139095039).u32[0] != -1)
    {
      uint64_t v85 = 0;
      float32x2_t v86 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0);
      float32x2_t v87 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1);
      char v88 = 1;
      LODWORD(v89) = 3;
      do
      {
        while (1)
        {
          float32x4_t v90 = a3[v89];
          uint64_t v89 = v85;
          float32x2_t v91 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.f32, 1);
          float32x4_t v92 = a3[v85];
          float32x2_t v93 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92.f32, 1);
          float32x2_t v94 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.f32, 0);
          float32x2_t v95 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v86, v95), (int8x8_t)vceq_f32(v87, v93)), vand_s8((int8x8_t)vceq_f32(v86, v94), (int8x8_t)vceq_f32(v87, v91))), 0), (int8x8_t)2139095039).u32[0] == -1)goto LABEL_51; {
          if ((veor_s8((int8x8_t)vcgt_f32(v91, v87), (int8x8_t)vcgt_f32(v93, v87)).u8[0] & 1) == 0)
          }
            break;
          float32x2_t v96 = vsub_f32(v93, v91);
          float32x2_t v97 = vmul_f32(vsub_f32(v87, v91), vsub_f32(v95, v94));
          int8x8_t v98 = (int8x8_t)vmul_n_f32(v96, v57.f32[0]);
          int8x8_t v99 = (int8x8_t)vadd_f32(v97, vmul_f32(vadd_f32(v94, (float32x2_t)0x3400000034000000), v96));
          int8x8_t v100 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v96), 0);
          if ((vcge_f32((float32x2_t)vbsl_s8(v100, v99, v98), (float32x2_t)vbsl_s8(v100, v98, v99)).u8[0] & 1) == 0) {
            break;
          }
          if ((v88 & 1) == 0) {
            goto LABEL_55;
          }
          char v88 = 0;
          ++v85;
          if (v89 == 3) {
            goto LABEL_51;
          }
        }
        ++v85;
      }
      while (v89 != 3);
      if ((v88 & 1) == 0)
      {
LABEL_51:
        int8x16_t v101 = (int8x16_t)vmulq_f32(*(float32x4_t *)a4, vsubq_f32(*a3, v57));
        float32x2_t v102 = (float32x2_t)vextq_s8(v101, v101, 8uLL).u64[0];
        float32x2_t v103 = vrecpe_f32(v26);
        int v104 = 4;
        do
        {
          float32x2_t v103 = vmul_f32(v103, vrecps_f32(v26, v103));
          --v104;
        }
        while (v104);
        float32x2_t v105 = vpadd_f32(*(float32x2_t *)v101.i8, v102);
        float32x2_t v106 = vmul_f32(v103, vpadd_f32(v105, v105));
        float32x2_t v107 = vneg_f32(v106);
        if (COERCE_FLOAT(*a8) > v107.f32[0])
        {
          *(float32x4_t *)(a6 + 48 * *a7) = v57;
          v57.i32[2] = v106.i32[0];
          *(float32x4_t *)(a6 + 48 * *a7 + 16) = v57;
          float32x4_t v108 = *a5;
          v108.i32[3] = v107.i32[1];
          unsigned int v109 = (*a7)++;
          *(float32x4_t *)(a6 + 48 * v109 + 32) = v108;
        }
      }
    }
LABEL_55:
    *(int8x8_t *)a13.f32 = vext_s8(v55, *(int8x8_t *)a13.f32, 4uLL);
    int32x2_t v110 = (int32x2_t)vorrq_s8((int8x16_t)vcgtq_f32(a13, v21), (int8x16_t)vcgtq_f32(v20, a13)).u64[0];
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vorrq_s8((int8x16_t)vdupq_lane_s32(v110, 0), (int8x16_t)vdupq_lane_s32(v110, 1)), v84)), (int8x8_t)2139095039).u32[0] != -1)
    {
      uint64_t v111 = 0;
      float32x2_t v112 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.f32, 0);
      float32x2_t v113 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a13.f32, 1);
      char v114 = 1;
      LODWORD(v115) = 3;
      do
      {
        while (1)
        {
          float32x4_t v116 = a3[v115];
          uint64_t v115 = v111;
          float32x2_t v117 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 1);
          float32x4_t v118 = a3[v111];
          float32x2_t v119 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.f32, 1);
          float32x2_t v120 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 0);
          float32x2_t v121 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.f32, 0);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vand_s8((int8x8_t)vceq_f32(v112, v121), (int8x8_t)vceq_f32(v113, v119)), vand_s8((int8x8_t)vceq_f32(v112, v120), (int8x8_t)vceq_f32(v113, v117))), 0), (int8x8_t)2139095039).u32[0] == -1)goto LABEL_66; {
          if ((veor_s8((int8x8_t)vcgt_f32(v117, v113), (int8x8_t)vcgt_f32(v119, v113)).u8[0] & 1) == 0)
          }
            break;
          float32x2_t v122 = vsub_f32(v119, v117);
          float32x2_t v123 = vmul_f32(vsub_f32(v113, v117), vsub_f32(v121, v120));
          int8x8_t v124 = (int8x8_t)vmul_n_f32(v122, a13.f32[0]);
          int8x8_t v125 = (int8x8_t)vadd_f32(v123, vmul_f32(vadd_f32(v120, (float32x2_t)0x3400000034000000), v122));
          int8x8_t v126 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v122), 0);
          if ((vcge_f32((float32x2_t)vbsl_s8(v126, v125, v124), (float32x2_t)vbsl_s8(v126, v124, v125)).u8[0] & 1) == 0) {
            break;
          }
          if ((v114 & 1) == 0) {
            goto LABEL_70;
          }
          char v114 = 0;
          ++v111;
          if (v115 == 3) {
            goto LABEL_66;
          }
        }
        ++v111;
      }
      while (v115 != 3);
      if ((v114 & 1) == 0)
      {
LABEL_66:
        int8x16_t v127 = (int8x16_t)vmulq_f32(*(float32x4_t *)a4, vsubq_f32(*a3, a13));
        float32x2_t v128 = (float32x2_t)vextq_s8(v127, v127, 8uLL).u64[0];
        float32x2_t v129 = vrecpe_f32(v26);
        int v130 = 4;
        do
        {
          float32x2_t v129 = vmul_f32(v129, vrecps_f32(v26, v129));
          --v130;
        }
        while (v130);
        float32x2_t v131 = vpadd_f32(*(float32x2_t *)v127.i8, v128);
        float32x2_t v132 = vmul_f32(v129, vpadd_f32(v131, v131));
        float32x2_t v133 = vneg_f32(v132);
        if (COERCE_FLOAT(*a8) > v133.f32[0])
        {
          *(float32x4_t *)(a6 + 48 * *a7) = a13;
          float32x4_t v134 = a13;
          v134.i32[2] = v132.i32[0];
          *(float32x4_t *)(a6 + 48 * *a7 + 16) = v134;
          float32x4_t v135 = *a5;
          v135.i32[3] = v133.i32[1];
          unsigned int v136 = (*a7)++;
          *(float32x4_t *)(a6 + 48 * v136 + 32) = v135;
        }
      }
    }
LABEL_70:
    uint64_t v137 = 0;
    *(int8x8_t *)v138.f32 = vext_s8(*result, *a2, 4uLL);
    v138.i64[1] = 2139095039;
    a13.i64[1] = vneg_f32(vadd_f32(*a8, (float32x2_t)0x3400000034000000)).u32[0];
    uint64_t v139 = 3;
    __asm { FMOV            V5.2S, #1.0 }
    while (2)
    {
      uint64_t v145 = v139;
      uint64_t v139 = v137;
      float32x4_t v146 = a3[v137];
      float32x4_t v147 = a3[v145];
      if (v172[v137 + 4])
      {
        int v148 = v172[v137];
        BOOL v149 = v172[v137] != 0;
        char v150 = v172[v145 + 4];
        if (!v150) {
          goto LABEL_78;
        }
        int v151 = v172[v145];
        char v150 = v151 != 0;
        if (!v148 || !v151) {
          goto LABEL_78;
        }
      }
      else if (v172[v145 + 4])
      {
        BOOL v149 = 0;
        char v150 = v172[v145] != 0;
LABEL_78:
        int8x16_t v152 = (int8x16_t)vcgtq_f32((float32x4_t)xmmword_234421B30, vabdq_f32(v147, v146));
        if (vuzp1_s8(vmvn_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(v152, vorrq_s8((int8x16_t)vcgtq_f32(a13, v146), (int8x16_t)vcgtq_f32(v146, v138))))), (int8x8_t)0x358637BD358637BDLL).u32[0] == -1)
        {
          float32x4_t v153 = vsubq_f32(v147, v146);
          float32x4_t v154 = vrecpeq_f32(v153);
          float32x4_t v155 = vmulq_f32(v154, vrecpsq_f32(v154, v153));
          v155.i32[3] = 0;
          float32x4_t v156 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(vsubq_f32(a13, v146), v155), v152);
          float32x4_t v157 = (float32x4_t)vbslq_s8(v152, (int8x16_t)xmmword_23441F6C0, (int8x16_t)vmulq_f32(vsubq_f32(v138, v146), v155));
          int32x4_t v158 = (int32x4_t)vminq_f32(v156, v157);
          int32x4_t v159 = (int32x4_t)vmaxq_f32(v156, v157);
          *(float32x2_t *)v158.i8 = vpmax_f32((float32x2_t)vdup_laneq_s32(v158, 2), *(float32x2_t *)v158.i8);
          *(float32x2_t *)v159.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v159, 2), *(float32x2_t *)v159.i8);
          float32x2_t v160 = vmax_f32(vpmax_f32(*(float32x2_t *)v158.i8, *(float32x2_t *)v158.i8), 0);
          float32x2_t v161 = vmin_f32(vpmin_f32(*(float32x2_t *)v159.i8, *(float32x2_t *)v159.i8), _D5);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vbic_s8(vmvn_s8((int8x8_t)vcgt_f32(v160, v161)), (int8x8_t)vcgt_f32(v160, _D5)), 0), (int8x8_t)0x358637BD358637BDLL).u32[0] == -1)
          {
            if (!v149)
            {
              int32x4_t v162 = (int32x4_t)vmlaq_n_f32(v146, v153, v160.f32[0]);
              float32x4_t v163 = (float32x4_t)vdupq_laneq_s32(v162, 2);
              v162.i64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u32[0];
              int32x4_t v164 = v162;
              v164.i32[2] = 0;
              *(int32x4_t *)(a6 + 48 * *a7) = v164;
              *(int32x4_t *)(a6 + 48 * *a7 + 16) = v162;
              float32x4_t v165 = *a5;
              v165.i32[3] = vnegq_f32(v163).i32[3];
              unsigned int v166 = (*a7)++;
              *(float32x4_t *)(a6 + 48 * v166 + 32) = v165;
            }
            if ((v150 & 1) == 0)
            {
              int32x4_t v167 = (int32x4_t)vmlaq_n_f32(v146, v153, v161.f32[0]);
              *(void *)&long long v168 = v167.i64[0];
              *((void *)&v168 + 1) = vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL).u32[0];
              long long v169 = v168;
              DWORD2(v169) = 0;
              *(_OWORD *)(a6 + 48 * *a7) = v169;
              *(_OWORD *)(a6 + 48 * *a7 + 16) = v168;
              float32x4_t v170 = *a5;
              v170.i32[3] = vnegq_f32((float32x4_t)vdupq_laneq_s32(v167, 2)).i32[3];
              unsigned int v171 = (*a7)++;
              *(float32x4_t *)(a6 + 48 * v171 + 32) = v170;
            }
          }
        }
      }
      uint64_t v137 = v139 + 1;
      if (v139 == 3) {
        return result;
      }
      continue;
    }
  }
  return result;
}

uint64_t physx::RefitCallback<unsigned short>::recomputeBounds(uint64_t result, unint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  float32x4_t v6 = (unsigned __int16 *)(v5 + 6 * (a2 >> 5));
  uint64_t v7 = v4 + 12 * *v6;
  v8.i64[0] = *(void *)v7;
  v8.i64[1] = *(unsigned int *)(v7 + 8);
  uint64_t v9 = v4 + 12 * v6[1];
  v10.i64[0] = *(void *)v9;
  v10.i64[1] = *(unsigned int *)(v9 + 8);
  float32x4_t v11 = vminq_f32(v8, v10);
  float32x4_t v12 = vmaxq_f32(v8, v10);
  uint64_t v13 = v4 + 12 * v6[2];
  v14.i64[0] = *(void *)v13;
  v14.i64[1] = *(unsigned int *)(v13 + 8);
  float32x4_t v15 = vminq_f32(v11, v14);
  float32x4_t v16 = vmaxq_f32(v12, v14);
  if (((a2 >> 1) & 0xF) != 0)
  {
    uint64_t v17 = (a2 >> 1) & 0xF;
    float32x2_t v18 = (unsigned __int16 *)(v5 + 6 * (a2 >> 5) + 10);
    do
    {
      uint64_t v19 = v4 + 12 * *(v18 - 2);
      v20.i64[0] = *(void *)v19;
      v20.i64[1] = *(unsigned int *)(v19 + 8);
      float32x4_t v21 = vminq_f32(v15, v20);
      float32x4_t v22 = vmaxq_f32(v16, v20);
      uint64_t v23 = v4 + 12 * *(v18 - 1);
      v20.i64[0] = *(void *)v23;
      v20.i64[1] = *(unsigned int *)(v23 + 8);
      float32x4_t v24 = vminq_f32(v21, v20);
      float32x4_t v25 = vmaxq_f32(v22, v20);
      unsigned int v26 = *v18;
      v18 += 3;
      uint64_t v27 = v4 + 12 * v26;
      v20.i64[0] = *(void *)v27;
      v20.i64[1] = *(unsigned int *)(v27 + 8);
      float32x4_t v15 = vminq_f32(v24, v20);
      float32x4_t v16 = vmaxq_f32(v25, v20);
      --v17;
    }
    while (v17);
  }
  *a3 = v15;
  *a4 = v16;
  return result;
}

void physx::RefitCallback<unsigned short>::~RefitCallback()
{
}

uint64_t physx::RefitCallback<unsigned int>::recomputeBounds(uint64_t result, unint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(void *)(result + 16);
  float32x4_t v6 = (unsigned int *)(v5 + 12 * (a2 >> 5));
  uint64_t v7 = v4 + 12 * *v6;
  v8.i64[0] = *(void *)v7;
  v8.i64[1] = *(unsigned int *)(v7 + 8);
  uint64_t v9 = v4 + 12 * v6[1];
  v10.i64[0] = *(void *)v9;
  v10.i64[1] = *(unsigned int *)(v9 + 8);
  float32x4_t v11 = vminq_f32(v8, v10);
  float32x4_t v12 = vmaxq_f32(v8, v10);
  uint64_t v13 = v4 + 12 * v6[2];
  v14.i64[0] = *(void *)v13;
  v14.i64[1] = *(unsigned int *)(v13 + 8);
  float32x4_t v15 = vminq_f32(v11, v14);
  float32x4_t v16 = vmaxq_f32(v12, v14);
  if (((a2 >> 1) & 0xF) != 0)
  {
    uint64_t v17 = (a2 >> 1) & 0xF;
    float32x2_t v18 = (unsigned int *)(v5 + 12 * (a2 >> 5) + 20);
    do
    {
      uint64_t v19 = v4 + 12 * *(v18 - 2);
      v20.i64[0] = *(void *)v19;
      v20.i64[1] = *(unsigned int *)(v19 + 8);
      float32x4_t v21 = vminq_f32(v15, v20);
      float32x4_t v22 = vmaxq_f32(v16, v20);
      uint64_t v23 = v4 + 12 * *(v18 - 1);
      v20.i64[0] = *(void *)v23;
      v20.i64[1] = *(unsigned int *)(v23 + 8);
      float32x4_t v24 = vminq_f32(v21, v20);
      float32x4_t v25 = vmaxq_f32(v22, v20);
      unsigned int v26 = *v18;
      v18 += 3;
      uint64_t v27 = v4 + 12 * v26;
      v20.i64[0] = *(void *)v27;
      v20.i64[1] = *(unsigned int *)(v27 + 8);
      float32x4_t v15 = vminq_f32(v24, v20);
      float32x4_t v16 = vmaxq_f32(v25, v20);
      --v17;
    }
    while (v17);
  }
  *a3 = v15;
  *a4 = v16;
  return result;
}

void physx::RefitCallback<unsigned int>::~RefitCallback()
{
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::supportPoint(uint64_t a1, int a2)
{
  return *(__n128 *)(*(void *)(*(void *)(a1 + 8) + 160) + 12 * a2);
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::support(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  return *(__n128 *)(*(void *)(v2 + 160) + 12 * physx::Gu::ConvexHullV::supportVertexIndex(v2, a2));
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::support(uint64_t a1, float32x4_t *a2, _DWORD *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = physx::Gu::ConvexHullV::supportVertexIndex(v4, a2);
  *a3 = v5;
  return *(__n128 *)(*(void *)(v4 + 160) + 12 * v5);
}

float32x2_t physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::getSweepMargin(uint64_t a1)
{
  uint64_t v1 = (const float *)(*(void *)(a1 + 8) + 24);
  return vld1_dup_f32(v1);
}

__n128 physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::getCenter(uint64_t a1)
{
  return *(__n128 *)*(void *)(a1 + 8);
}

void physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>::~LocalConvex()
{
}

uint64_t physx::Gu::pcmContactCapsuleBox(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x4_t *a4, uint64_t a5, float32x4_t **a6, _OWORD *a7)
{
  uint64_t v209 = *MEMORY[0x263EF8340];
  _X20 = *a6;
  __asm { PRFM            #0, [X20,#0x100] }
  int32x4_t v16 = *(int32x4_t *)(a2 + 4);
  int32x4_t v17 = v16;
  v17.i32[2] = *(_DWORD *)(a2 + 12);
  int32x2_t v195 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  v18.i64[0] = a3[1].i64[0];
  v18.i64[1] = a3[1].u32[2];
  v194[0] = *a3;
  v194[1] = v18;
  v19.i64[0] = a4[1].i64[0];
  v19.i64[1] = a4[1].u32[2];
  int32x4_t v192 = *a4;
  float32x4_t v193 = v19;
  float32x4_t v20 = vnegq_f32((float32x4_t)v192);
  float32x4_t v21 = v20;
  v21.i32[3] = 0;
  float32x2_t v22 = (float32x2_t)vdupq_laneq_s32(v192, 3).u64[0];
  float32x4_t v23 = vsubq_f32(v18, v19);
  float32x4_t v24 = vmulq_n_f32(v23, vmla_f32((float32x2_t)0xBF000000BF000000, v22, v22).f32[0]);
  v24.i32[3] = 0;
  float32x2_t v25 = (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  float32x2_t v26 = (float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v25, 4uLL);
  int8x8_t v27 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL)), v26, *(float32x2_t *)v23.f32);
  *(int8x8_t *)v28.f32 = vext_s8(v27, (int8x8_t)vmls_f32(vmul_f32(v25, *(float32x2_t *)v23.f32), *(float32x2_t *)v20.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), 4uLL);
  v28.i64[1] = v27.u32[0];
  float32x4_t v29 = vmlaq_laneq_f32(v24, v28, (float32x4_t)v192, 3);
  v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
  float32x4_t v30 = vmulq_f32(v21, v23);
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  float32x4_t v31 = vmlaq_n_f32(v29, v21, vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).f32[0]);
  float32x4_t v32 = vaddq_f32(v31, v31);
  v32.i32[3] = 0;
  float32x4_t v33 = v194[0];
  v33.i32[3] = 0;
  float32x4_t v34 = vmulq_f32(v33, v21);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  float32x2_t v35 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v194[0], (int8x16_t)v194[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL)), vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32));
  float32x4_t v36 = vmulq_laneq_f32(v33, (float32x4_t)v192, 3);
  v33.i64[0] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
  *(float32x2_t *)v31.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v194[0].f32, *(int8x8_t *)v33.f32, 4uLL), *(float32x2_t *)v20.f32), v26, *(float32x2_t *)v194[0].f32);
  *(int8x8_t *)v37.f32 = vext_s8(*(int8x8_t *)v31.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v194[0].f32, v25), *(float32x2_t *)v20.f32, *(float32x2_t *)v33.f32), 4uLL);
  v37.i64[1] = v31.i64[0];
  float32x4_t v38 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v21, v194[0], 3), v36), v37);
  *(int32x2_t *)v37.f32 = vdup_lane_s32(*(int32x2_t *)v38.f32, 1);
  *(int32x2_t *)v36.f32 = vdup_laneq_s32((int32x4_t)v38, 2);
  float32x4_t v39 = vaddq_f32(v38, v38);
  *(int32x2_t *)v31.f32 = vdup_laneq_s32((int32x4_t)v39, 2);
  *(int32x2_t *)v34.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.f32), 0);
  float32x2_t v40 = vmul_lane_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v28.f32 = vmul_laneq_f32(*(float32x2_t *)v36.f32, v39, 2);
  float32x2_t v41 = vmul_n_f32(*(float32x2_t *)v37.f32, v39.f32[0]);
  float32x2_t v42 = vmul_n_f32(*(float32x2_t *)v36.f32, v39.f32[0]);
  *(float32x2_t *)v21.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0), v35, 1);
  *(float32x2_t *)v36.f32 = vmul_lane_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v39.f32, 1);
  *(float32x2_t *)v39.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 1), v35, 1);
  *(float32x2_t *)v33.f32 = vmul_lane_f32(*(float32x2_t *)v31.f32, v35, 1);
  __asm { FMOV            V1.2S, #1.0 }
  *(float32x2_t *)v31.f32 = vsub_f32(_D1, *(float32x2_t *)v34.f32);
  *(int8x8_t *)v44.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v40), *(float32x2_t *)v28.f32), (int8x8_t)vadd_f32(v41, *(float32x2_t *)v33.f32), 4uLL);
  v44.i64[1] = vsub_f32(v42, *(float32x2_t *)v39.f32).u32[0];
  *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)vsub_f32(v41, *(float32x2_t *)v33.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v28.f32), 4uLL);
  v45.i64[1] = vadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v21.f32).u32[0];
  int32x2_t v47 = (int32x2_t)vsub_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v21.f32);
  *(int8x8_t *)v46.f32 = vext_s8((int8x8_t)vadd_f32(v42, *(float32x2_t *)v39.f32), (int8x8_t)v47, 4uLL);
  v46.i64[1] = vsub_f32(*(float32x2_t *)v31.f32, v40).u32[0];
  v47.i32[0] = *(_DWORD *)(a1 + 4);
  float32x2_t v48 = (float32x2_t)vdup_lane_s32(v47, 0);
  float32x2_t v191 = v48;
  uint64_t v49 = *(void *)(a1 + 8);
  uint64_t v50 = _X20[4].u8[0];
  *(float32x2_t *)v16.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v17, 2), *(float32x2_t *)v16.i8);
  float32x2_t v51 = vpmin_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8);
  v31.f32[0] = *(float *)(a5 + 8) * 0.15;
  float32x2_t v52 = vmin_f32(vmin_f32(vmul_f32(v51, (float32x2_t)vdup_n_s32(0x3E19999Au)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 0)), v48);
  if (_X20[4].i8[0])
  {
    float32x2_t v53 = vmul_f32(v52, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    float32x2_t v54 = vmul_f32(v53, v53);
    unsigned int v55 = v50 - 1;
    do
    {
      uint64_t v56 = _X20[5].i64[0];
      uint64_t v57 = v55;
      uint64_t v58 = (float32x4_t *)(v56 + 48 * v55);
      float32x4_t v59 = v58[1];
      float32x4_t v60 = vmulq_n_f32(v44, COERCE_FLOAT(*v58));
      v60.i32[3] = 0;
      float32x4_t v61 = vmulq_lane_f32(v45, *(float32x2_t *)v58->f32, 1);
      v61.i32[3] = 0;
      float32x4_t v62 = vmulq_laneq_f32(v46, *v58, 2);
      v62.i32[3] = 0;
      float32x4_t v63 = vaddq_f32(v32, vaddq_f32(v62, vaddq_f32(v60, v61)));
      float32x4_t v64 = v58[2];
      float32x4_t v65 = v64;
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_f32(v65, vsubq_f32(v63, v59));
      v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
      float32x2_t v67 = vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32);
      float32x4_t v68 = vmlsq_lane_f32(v63, v65, v67, 0);
      v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
      float32x4_t v69 = vsubq_f32(v59, v68);
      float32x4_t v70 = vmulq_f32(v69, v69);
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), v54), 0), *(int8x8_t *)v17.i8).u32[0] == -1)
      {
        unsigned __int8 v71 = _X20[4].i8[0] - 1;
        _X20[4].i8[0] = v71;
        int8x8_t v72 = (float32x4_t *)(v56 + 48 * v71);
        float32x4_t v73 = *v72;
        float32x4_t v74 = v72[2];
        v58[1] = v72[1];
        float32x2_t v58[2] = v74;
        *uint64_t v58 = v73;
      }
      else
      {
        v64.i32[3] = v67.i32[1];
        float32x2_t v58[2] = v64;
      }
      --v55;
    }
    while (v57);
    int v75 = _X20[4].u8[0];
  }
  else
  {
    int v75 = 0;
  }
  float32x4_t v76 = v38;
  v76.i32[3] = v35.i32[1];
  if (v75 != v50
    || (int8x16_t v77 = (int8x16_t)vabdq_f32(v32, _X20[1]),
        *(float32x2_t *)v77.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), *(float32x2_t *)v77.i8),
        float32x2_t v78 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds2 + 4 * v50),
        float32x2_t v79 = vld1_dup_f32(v78),
        float32x4_t v80 = vmulq_f32(v76, *_X20),
        v80.i64[0] = vpaddq_f32(v80, v80).u64[0],
        vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(v79, vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8), vmul_n_f32(v52, physx::Gu::invalidateThresholds2[v50]))), 0), *(int8x8_t *)v17.i8).u32[0] == -1))
  {
    float32x4_t v165 = v76;
    float32x2_t v166 = *(float32x2_t *)v38.f32;
    float32x2_t v168 = v35;
    v17.i32[3] = 0;
    *_X20 = v76;
    _X20[1] = v32;
    float32x4_t v187 = v44;
    float32x4_t v188 = v45;
    float32x4_t v189 = v46;
    float32x4_t v190 = v32;
    int v184 = 3;
    char v185 = 0;
    float32x4_t v180 = v193;
    int32x4_t v186 = v17;
    float v181 = 0.15 * v51.f32[0];
    float v182 = 0.05 * v51.f32[0];
    float32x4_t v110 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)&v49);
    float32x4_t v163 = v45;
    float32x4_t v164 = v44;
    float32x4_t v111 = vmulq_n_f32(v44, v110.f32[0]);
    v111.i32[3] = 0;
    float32x4_t v112 = vmulq_lane_f32(v45, *(float32x2_t *)v110.f32, 1);
    v112.i32[3] = 0;
    float v183 = 0.05 * v51.f32[0];
    float32x4_t v162 = v46;
    float32x4_t v113 = vmulq_laneq_f32(v46, v110, 2);
    v113.i32[3] = 0;
    float32x4_t v114 = vaddq_f32(v113, vaddq_f32(v111, v112));
    int v204 = 4;
    float32x4_t v200 = v32;
    float32x2_t v208 = v48;
    float32x4_t v206 = vaddq_f32(v32, v114);
    float32x4_t v207 = vsubq_f32(v32, v114);
    __int32 v201 = v47.i32[0];
    __int32 v202 = v47.i32[0];
    __int32 v203 = v47.i32[0];
    char v205 = 1;
    v179[1] = &v200;
    v178[1] = &v180;
    v179[0] = &unk_26E7287F0;
    v178[0] = &unk_26E728AB8;
    uint64_t v199 = 0;
    float32x4_t v196 = 0u;
    float32x4_t v197 = 0u;
    v198[0] = 0u;
    float32x4_t v167 = v32;
    float32x4_t v177 = vsubq_f32(v32, v193);
    uint64_t result = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::BoxV>>((uint64_t)v179, (uint64_t)v178, &v177, (uint64_t *)&v195, 1, &_X20[4].i8[3], &_X20[4].i8[7], &_X20[4].i8[2], *(double *)v177.i64, *(double *)v193.i64, (int8x8_t)v47, v206, (uint64_t)&v196);
    unsigned int v176 = 0;
    switch(result)
    {
      case 0:
        return result;
      case 2:
        unsigned int v117 = 0;
        float32x4_t v118 = v196;
        float32x4_t v119 = v197;
        float32x4_t v120 = v167;
        float32x4_t v121 = vsubq_f32(v196, v167);
        float32x4_t v122 = vmulq_f32(v121, v164);
        v122.i64[0] = vpaddq_f32(v122, v122).u64[0];
        float32x4_t v123 = vmulq_f32(v121, v163);
        v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
        float32x4_t v124 = vmulq_f32(v121, v162);
        v124.i64[0] = vpaddq_f32(v124, v124).u64[0];
        *(int8x8_t *)&long long v125 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32), 4uLL);
        *((void *)&v125 + 1) = vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32).u32[0];
        int32x4_t v126 = (int32x4_t)v198[0];
        __int32 v127 = HIDWORD(v199);
        int8x16_t v128 = v198[0];
        v128.i32[3] = HIDWORD(v199);
        *a7 = v125;
        a7[1] = v119;
        unsigned int v129 = 1;
        float32x2_t v130 = v168;
        float32x4_t v132 = v165;
        float32x2_t v131 = v166;
        break;
      case 4:
        uint64_t v174 = *(void *)(a2 + 4);
        int v175 = *(_DWORD *)(a2 + 12);
        v116.i32[0] = *(_DWORD *)(a5 + 8);
        return physx::Gu::fullContactsGenerationCapsuleBox((uint64_t)&v200, (uint64_t)&v180, (uint64_t)&v174, &v187, v194, &v192, (uint64_t)a7, (int *)&v176, COERCE_DOUBLE(__PAIR64__(HIDWORD(v174), LODWORD(v181))), v116, (uint64_t)a7, (uint64_t)_X20, v198, (float32x2_t *)&v197, (float32x2_t *)&v195, 1);
      default:
        char v133 = 1;
        int v134 = physx::Gu::epaPenetration((uint64_t)v179);
        float32x4_t v120 = v167;
        float32x2_t v130 = v168;
        float32x4_t v132 = v165;
        float32x2_t v131 = v166;
        if (v134 != 5)
        {
LABEL_31:
          uint64_t v172 = *(void *)(a2 + 4);
          int v173 = *(_DWORD *)(a2 + 12);
          v126.i32[0] = *(_DWORD *)(a5 + 8);
          return physx::Gu::fullContactsGenerationCapsuleBox((uint64_t)&v200, (uint64_t)&v180, (uint64_t)&v172, &v187, v194, &v192, (uint64_t)a7, (int *)&v176, COERCE_DOUBLE(__PAIR64__(HIDWORD(v172), LODWORD(v181))), v126, (uint64_t)a7, (uint64_t)_X20, v198, (float32x2_t *)&v197, (float32x2_t *)&v195, v133);
        }
        float32x4_t v118 = v196;
        float32x4_t v135 = v197;
        float32x4_t v136 = vsubq_f32(v196, v190);
        float32x4_t v137 = vmulq_f32(v187, v136);
        v137.i64[0] = vpaddq_f32(v137, v137).u64[0];
        float32x4_t v138 = vmulq_f32(v136, v188);
        v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
        float32x4_t v139 = vmulq_f32(v136, v189);
        v139.i64[0] = vpaddq_f32(v139, v139).u64[0];
        *(int8x8_t *)v138.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v137.f32, *(float32x2_t *)v137.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32), 4uLL);
        v138.i64[1] = vpadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v139.f32).u32[0];
        int32x4_t v126 = (int32x4_t)v198[0];
        __int32 v127 = HIDWORD(v199);
        int8x16_t v128 = v198[0];
        v128.i32[3] = HIDWORD(v199);
        unsigned int v117 = v176;
        long long v140 = (float32x4_t *)&a7[3 * v176];
        *long long v140 = v138;
        v140[1] = v135;
        unsigned int v129 = v117 + 1;
        break;
    }
    char v133 = 0;
    unsigned int v176 = v129;
    a7[3 * v117 + 2] = v128;
    if (v50 && v75 == v50)
    {
      float32x2_t v141 = (float32x2_t)vdup_lane_s32((int32x2_t)v130, 1);
      float32x2_t v171 = vmul_f32(v52, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
      v126.i32[3] = v127;
      int32x4_t v170 = v126;
      v132.i32[3] = 0;
      float32x4_t v142 = vsubq_f32(v118, v120);
      float32x4_t v143 = vmulq_n_f32(v142, vmla_f32((float32x2_t)0xBF000000BF000000, v141, v141).f32[0]);
      v143.i32[3] = 0;
      float32x2_t v144 = (float32x2_t)vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
      int8x8_t v145 = (int8x8_t)vmls_f32(vmul_f32(v131, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 4uLL)), (float32x2_t)vext_s8((int8x8_t)v131, (int8x8_t)v144, 4uLL), *(float32x2_t *)v142.f32);
      *(int8x8_t *)v146.f32 = vext_s8(v145, (int8x8_t)vmls_f32(vmul_f32(v144, *(float32x2_t *)v142.f32), v131, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL)), 4uLL);
      v146.i64[1] = v145.u32[0];
      float32x4_t v147 = vmlsq_lane_f32(v143, v146, v130, 1);
      v147.i64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u32[0];
      float32x4_t v148 = vmulq_f32(v132, v142);
      v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
      float32x4_t v149 = vmlaq_n_f32(v147, v132, vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32).f32[0]);
      float32x4_t v150 = vaddq_f32(v149, v149);
      v150.i32[3] = 0;
      float32x4_t v169 = v150;
      physx::Gu::PersistentContactManifold::addManifoldPoint2((uint64_t)_X20, &v169, &v197, (long long *)v170.i8, &v171);
      float32x4_t v151 = (float32x4_t)v192;
      v151.i32[3] = 0;
      float32x2_t v152 = (float32x2_t)vdupq_laneq_s32(v192, 3).u64[0];
      float32x4_t v153 = vmulq_n_f32((float32x4_t)v198[0], vmla_f32((float32x2_t)0xBF000000BF000000, v152, v152).f32[0]);
      v153.i32[3] = 0;
      float32x2_t v154 = (float32x2_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL).u64[0];
      float32x2_t v155 = (float32x2_t)vextq_s8(v198[0], v198[0], 8uLL).u64[0];
      int8x8_t v156 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v192.i8, (float32x2_t)vext_s8(*(int8x8_t *)v198[0].i8, (int8x8_t)v155, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v192.i8, (int8x8_t)v154, 4uLL), *(float32x2_t *)v198[0].i8);
      *(int8x8_t *)v157.f32 = vext_s8(v156, (int8x8_t)vmls_f32(vmul_f32(v154, *(float32x2_t *)v198[0].i8), *(float32x2_t *)v192.i8, v155), 4uLL);
      v157.i64[1] = v156.u32[0];
      float32x4_t v158 = vmlaq_laneq_f32(v153, v157, (float32x4_t)v192, 3);
      v158.i64[1] = vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL).u32[0];
      float32x4_t v159 = vmulq_f32(v151, (float32x4_t)v198[0]);
      v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
      float32x4_t v160 = vmlaq_n_f32(v158, v151, vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32).f32[0]);
      float32x4_t v161 = vaddq_f32(v160, v160);
      v161.i32[3] = 0;
      float32x4_t v169 = v161;
      float32x4_t v108 = &v169;
      unsigned int v109 = &v169;
LABEL_30:
      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)_X20, (uint64_t)a7, v108, v109, v194, &v191, (float32x2_t *)&v195);
      return 1;
    }
    goto LABEL_31;
  }
  if (v50)
  {
    uint64_t v81 = _X20[5].i64[0];
    int8x16_t v82 = *(int8x16_t *)(v81 + 32);
    float32x4_t v83 = (float32x4_t)v82;
    if (v50 != 1)
    {
      uint64_t v84 = v50 - 1;
      uint64_t v85 = (float32x4_t *)(v81 + 80);
      float32x4_t v83 = (float32x4_t)v82;
      do
      {
        float32x4_t v86 = *v85;
        v85 += 3;
        float32x4_t v83 = vaddq_f32(v83, v86);
        --v84;
      }
      while (v84);
    }
    v83.i32[3] = 0;
    float32x4_t v87 = vmulq_f32(v83, v83);
    v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
    v82.i32[3] = 0;
    float32x4_t v88 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v83, v82);
    float32x4_t v89 = (float32x4_t)v192;
    v89.i32[3] = 0;
    float32x2_t v90 = (float32x2_t)vdupq_laneq_s32(v192, 3).u64[0];
    float32x4_t v91 = vmulq_n_f32(v88, vmla_f32((float32x2_t)0xBF000000BF000000, v90, v90).f32[0]);
    v91.i32[3] = 0;
    float32x2_t v92 = (float32x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
    float32x2_t v93 = (float32x2_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
    int8x8_t v94 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v192.i8, (float32x2_t)vext_s8(*(int8x8_t *)v88.f32, (int8x8_t)v93, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v192.i8, (int8x8_t)v92, 4uLL), *(float32x2_t *)v88.f32);
    *(int8x8_t *)v95.f32 = vext_s8(v94, (int8x8_t)vmls_f32(vmul_f32(v92, *(float32x2_t *)v88.f32), *(float32x2_t *)v192.i8, v93), 4uLL);
    v95.i64[1] = v94.u32[0];
    float32x4_t v96 = vmlaq_laneq_f32(v91, v95, (float32x4_t)v192, 3);
    v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
    float32x4_t v97 = vmulq_f32(v89, v88);
    v97.i64[0] = vpaddq_f32(v97, v97).u64[0];
    float32x4_t v98 = vmlaq_n_f32(v96, v89, vpadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v97.f32).f32[0]);
    float32x4_t v99 = vaddq_f32(v98, v98);
    v99.i32[3] = 0;
    float32x4_t v100 = vmulq_f32(v99, v99);
    v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
    float32x2_t v101 = vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32);
    float32x2_t v102 = vrsqrte_f32(v101);
    int v103 = 4;
    do
    {
      float32x2_t v102 = vmul_f32(v102, vrsqrts_f32(vmul_f32(v102, v102), v101));
      --v103;
    }
    while (v103);
    float32x2_t v104 = vmul_f32(v101, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v101), 0), (int8x8_t)_D1, (int8x8_t)v102));
    float32x2_t v105 = vrecpe_f32(v104);
    int v106 = 4;
    do
    {
      float32x2_t v105 = vmul_f32(v105, vrecps_f32(v104, v105));
      --v106;
    }
    while (v106);
    float32x4_t v107 = vmulq_n_f32(v99, v105.f32[0]);
    v107.i32[3] = 0;
    float32x4_t v200 = v107;
    float32x4_t v108 = &v200;
    unsigned int v109 = &v200;
    goto LABEL_30;
  }
  return 0;
}

uint64_t physx::Gu::fullContactsGenerationCapsuleBox(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5, int32x4_t *a6, uint64_t a7, int *a8, double a9, int32x4_t a10, uint64_t a11, uint64_t a12, int8x16_t *a13, float32x2_t *a14, float32x2_t *a15, char a16)
{
  float v19 = *(float *)a10.i32;
  __int32 v20 = LODWORD(a9);
  uint64_t v58 = *MEMORY[0x263EF8340];
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v43, a3, a9, a10);
  uint64_t v46 = 0;
  uint64_t v48 = 0x600000008;
  int v47 = 0;
  int v49 = 0;
  uint64_t v22 = a7;
  uint64_t v50 = &v45;
  float32x2_t v51 = &v44;
  float32x2_t v52 = &physx::Gu::gPCMBoxPolygonData;
  long long v53 = 0u;
  long long v54 = 0u;
  v42[0] = xmmword_23435FD50;
  v42[1] = xmmword_23435FD60;
  float32x4_t v23 = (float32x4_t)xmmword_23435FD80;
  float v42[2] = xmmword_23435FD80;
  v55[4] = a6;
  v55[5] = v42;
  v55[6] = v42;
  char v56 = 1;
  v55[0] = &unk_26E7286C8;
  uint64_t v57 = a2;
  unsigned int v24 = *a8;
  v23.i32[0] = v20;
  uint64_t CapsuleBoxFullContactManifold = physx::Gu::generateCapsuleBoxFullContactManifold((float32x4_t *)a1, (uint64_t)&v46, v55, a4, a7, a8, a15, a13, v23, v19, a14, a16);
  if (CapsuleBoxFullContactManifold)
  {
    int v26 = *a8;
    if (v24)
    {
      if (v26 != v24)
      {
        unsigned int v24 = v26 - 1;
        *a8 = v26 - 1;
        uint64_t v22 = a7 + 48;
      }
    }
    else
    {
      unsigned int v24 = *a8;
    }
    physx::Gu::PersistentContactManifold::addBatchManifoldContacts2(a12, v22, v24);
    float32x4_t v27 = *(float32x4_t *)a6;
    v27.i32[3] = 0;
    float32x2_t v28 = (float32x2_t)vdupq_laneq_s32(*a6, 3).u64[0];
    float32x4_t v29 = vmulq_n_f32(*(float32x4_t *)a13, vmla_f32((float32x2_t)0xBF000000BF000000, v28, v28).f32[0]);
    v29.i32[3] = 0;
    float32x2_t v30 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    float32x2_t v31 = (float32x2_t)vextq_s8(*a13, *a13, 8uLL).u64[0];
    int8x8_t v32 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a6->i8, (float32x2_t)vext_s8(*(int8x8_t *)a13->i8, (int8x8_t)v31, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a6->i8, (int8x8_t)v30, 4uLL), *(float32x2_t *)a13->i8);
    *(int8x8_t *)v33.f32 = vext_s8(v32, (int8x8_t)vmls_f32(vmul_f32(v30, *(float32x2_t *)a13->i8), *(float32x2_t *)a6->i8, v31), 4uLL);
    v33.i64[1] = v32.u32[0];
    float32x4_t v34 = vmlaq_laneq_f32(v29, v33, *(float32x4_t *)a6, 3);
    v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
    float32x4_t v35 = vmulq_f32(v27, *(float32x4_t *)a13);
    v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
    float32x4_t v36 = vmlaq_n_f32(v34, v27, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
    float32x4_t v37 = vaddq_f32(v36, v36);
    v37.i32[3] = 0;
    *a13 = (int8x16_t)v37;
    physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a12, a11, a13, (float32x4_t *)a13, a5, (float32x2_t *)(a1 + 80), a15);
  }
  return CapsuleBoxFullContactManifold;
}

uint64_t physx::Gu::pcmContactCapsuleCapsule(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x2_t *a5, uint64_t a6, uint64_t a7)
{
  v8.i64[0] = a3[1].i64[0];
  v8.i64[1] = a3[1].u32[2];
  _Q5 = *(int8x16_t *)a3;
  v10.i64[0] = a4[1].i64[0];
  v10.i64[1] = a4[1].u32[2];
  float32x4_t v11 = *a4;
  float32x2_t v12 = *(float32x2_t *)(a1 + 4);
  float32x2_t v13 = *(float32x2_t *)(a2 + 4);
  uint64_t v14 = *(void *)(a2 + 8);
  v15.i64[0] = 0x3F0000003F000000;
  v15.i64[1] = 0x3F0000003F000000;
  float32x4_t v16 = vmulq_f32(vaddq_f32(v8, v10), v15);
  v16.i32[3] = 0;
  float32x2_t v17 = *a5;
  float32x4_t v18 = vsubq_f32(v8, v16);
  float32x2_t v19 = (float32x2_t)vextq_s8(_Q5, _Q5, 8uLL).u64[0];
  float32x4_t v20 = vmulq_n_f32(*a3, vadd_f32(*(float32x2_t *)_Q5.i8, *(float32x2_t *)_Q5.i8).f32[0]);
  v20.i32[3] = 0;
  float32x4_t v152 = v16;
  float32x4_t v21 = vsubq_f32(v10, v16);
  *(int8x8_t *)v15.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)a3, 3), (int8x8_t)v19, 4uLL);
  v15.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a3->f32, 1)).u32[0];
  float32x4_t v22 = vmlaq_n_f32(v20, v15, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(v19, v19), 1).i32);
  __asm { FMOV            V5.2S, #-1.0 }
  v22.i32[0] = vadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)_Q5.i8).u32[0];
  float32x4_t v27 = vmulq_n_f32(v22, COERCE_FLOAT(*(void *)(a1 + 8)));
  v27.i32[3] = 0;
  float32x4_t v163 = vaddq_f32(v18, v27);
  float32x4_t v28 = vsubq_f32(v18, v27);
  v27.i64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  float32x4_t v29 = vmulq_n_f32(v11, vadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32).f32[0]);
  v29.i32[3] = 0;
  float32x4_t v155 = v163;
  *(int8x8_t *)v18.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v11, 3), *(int8x8_t *)v27.f32, 4uLL);
  v18.i64[1] = vneg_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.f32, 1)).u32[0];
  float32x4_t v30 = vmlaq_n_f32(v29, v18, *(float *)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), 1).i32);
  v30.i32[0] = vadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)_Q5.i8).u32[0];
  float32x4_t v31 = vmulq_n_f32(v30, *(float *)&v14);
  v31.i32[3] = 0;
  float32x4_t v161 = vaddq_f32(v21, v31);
  float32x4_t v162 = vsubq_f32(v28, v163);
  float32x4_t v149 = vsubq_f32(v21, v31);
  float32x4_t v150 = v28;
  float32x4_t v156 = vsubq_f32(v149, v161);
  float32x4_t v157 = v162;
  float32x4_t v160 = v156;
  float32x2_t v151 = v12;
  float32x2_t v153 = vadd_f32(v12, v13);
  float32x4_t v154 = v161;
  float32x2_t v32 = vadd_f32(v153, v17);
  float32x2_t v33 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v32, v32), 0);
  uint64_t v158 = 0;
  float32x2_t v159 = 0;
  float32x2_t v34 = physx::Gu::distanceSegmentSegmentSquared(&v163, &v162, &v161, &v160, &v159, &v158);
  unsigned __int8 v37 = vcge_f32(v33, v34).u8[0];
  if (v37)
  {
    float32x2_t v38 = (float32x2_t)vdup_lane_s32((int32x2_t)v153, 0);
    float32x4_t v39 = vmulq_f32(v157, v157);
    v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
    float32x2_t v40 = vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32);
    float32x4_t v41 = vmulq_f32(v156, v156);
    v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
    float32x2_t v42 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
    float32x2_t v43 = vrsqrte_f32(v40);
    int v44 = 4;
    do
    {
      float32x2_t v43 = vmul_f32(v43, vrsqrts_f32(vmul_f32(v43, v43), v40));
      --v44;
    }
    while (v44);
    *(int32x2_t *)v35.i8 = vcgt_f32((float32x2_t)vdup_n_s32(0x358637BDu), v42);
    __asm { FMOV            V2.2S, #1.0 }
    float32x2_t v46 = vmul_f32(v40, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v40), 0), _D2, (int8x8_t)v43));
    float32x2_t v47 = vrecpe_f32(v46);
    int v48 = 4;
    do
    {
      float32x2_t v47 = vmul_f32(v47, vrecps_f32(v46, v47));
      --v48;
    }
    while (v48);
    int8x16_t v49 = (int8x16_t)vmulq_n_f32(v157, v47.f32[0]);
    v49.i32[3] = 0;
    *(int32x2_t *)v36.i8 = vcgt_f32((float32x2_t)vdup_n_s32(0x358637BDu), v40);
    int8x16_t v50 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8(v36), 0);
    float32x2_t v51 = vrsqrte_f32(v42);
    int v52 = 4;
    do
    {
      float32x2_t v51 = vmul_f32(v51, vrsqrts_f32(vmul_f32(v51, v51), v42));
      --v52;
    }
    while (v52);
    float32x4_t v53 = (float32x4_t)vandq_s8(v49, v50);
    float32x2_t v54 = vmul_f32(v42, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v42), 0), _D2, (int8x8_t)v51));
    float32x2_t v55 = vrecpe_f32(v54);
    int v56 = 4;
    do
    {
      float32x2_t v55 = vmul_f32(v55, vrecps_f32(v54, v55));
      --v56;
    }
    while (v56);
    int8x16_t v57 = (int8x16_t)vmulq_n_f32(v156, v55.f32[0]);
    v57.i32[3] = 0;
    float32x4_t v58 = vmulq_f32(v53, (float32x4_t)vandq_s8(v57, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8(v35), 0)));
    v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
    if (vabs_f32(vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)).f32[0] <= 0.9998) {
      goto LABEL_38;
    }
    *(int32x2_t *)v59.f32 = vrev64_s32((int32x2_t)v40);
    *(int32x2_t *)&v59.u32[2] = vrev64_s32((int32x2_t)v42);
    float32x4_t v60 = vrecpeq_f32(v59);
    int v61 = 4;
    do
    {
      float32x4_t v60 = vmulq_f32(v60, vrecpsq_f32(v60, v59));
      --v61;
    }
    while (v61);
    int32x4_t v62 = (int32x4_t)vmulq_f32(v157, vsubq_f32(v154, v155));
    int32x4_t v63 = (int32x4_t)vmulq_f32(v156, vsubq_f32(v155, v154));
    int32x4_t v64 = vzip1q_s32(v62, v63);
    int32x4_t v65 = (int32x4_t)vmulq_f32(v157, vsubq_f32(v149, v155));
    int32x4_t v66 = (int32x4_t)vmulq_f32(vsubq_f32(v150, v154), v156);
    int32x4_t v67 = vzip1q_s32(v65, v66);
    float32x4_t v68 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v62, v63), vzip2q_s32(v65, v66)), vaddq_f32((float32x4_t)vzip1q_s32(v64, v67), (float32x4_t)vzip2q_s32(v64, v67))), v60), (int8x16_t)vceqzq_f32(v59));
    __asm { FMOV            V6.4S, #1.0 }
    int8x8_t v70 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgezq_f32(v68), (int8x16_t)vcgeq_f32(_Q6, v68)));
    if (vdup_lane_s8(v70, 0).u32[0] == -1
      && (float32x4_t v71 = vmlaq_n_f32(v155, v157, v68.f32[0]),
          v71.i64[1] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u32[0],
          float32x4_t v72 = vsubq_f32(v71, v154),
          float32x4_t v73 = vmulq_f32(v72, v72),
          v73.i64[0] = vpaddq_f32(v73, v73).u64[0],
          float32x2_t v74 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32),
          vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v74, (float32x2_t)vdup_n_s32(0x358637BDu)), (int8x8_t)vcgt_f32(v33, v74)), 0), (int8x8_t)v34).u32[0] == -1))
    {
      float32x2_t v139 = vrsqrte_f32(v74);
      int v140 = 4;
      do
      {
        float32x2_t v139 = vmul_f32(v139, vrsqrts_f32(vmul_f32(v139, v139), v74));
        --v140;
      }
      while (v140);
      float32x2_t v141 = vmul_f32(v74, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v74), 0), _D2, (int8x8_t)v139));
      float32x2_t v142 = vrecpe_f32(v141);
      int v143 = 4;
      do
      {
        float32x2_t v142 = vmul_f32(v142, vrecps_f32(v141, v142));
        --v143;
      }
      while (v143);
      float32x4_t v144 = vmulq_n_f32(v72, v142.f32[0]);
      float32x4_t v145 = v144;
      v145.i32[3] = 0;
      float32x4_t v146 = vaddq_f32(v152, vmlsq_lane_f32(v71, v145, v151, 0));
      uint64_t v147 = *(unsigned int *)(a7 + 4096);
      *(_DWORD *)(a7 + 4096) = v147 + 1;
      v144.i32[3] = vsub_f32(v141, v38).i32[1];
      float32x4_t v148 = (float32x4_t *)(a7 + (v147 << 6));
      *float32x4_t v148 = v144;
      v148[1].i64[0] = v146.i64[0];
      v148[1].i32[2] = v146.i32[2];
      v148[3].i32[1] = -1;
      int v75 = 1;
    }
    else
    {
      int v75 = 0;
    }
    if (vdup_lane_s8(v70, 2).u32[0] == -1)
    {
      float32x4_t v76 = vmlaq_lane_f32(v155, v157, *(float32x2_t *)v68.f32, 1);
      v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
      float32x4_t v77 = vsubq_f32(v76, v149);
      float32x4_t v78 = vmulq_f32(v77, v77);
      v78.i64[0] = vpaddq_f32(v78, v78).u64[0];
      float32x2_t v79 = vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v79, (float32x2_t)vdup_n_s32(0x358637BDu)), (int8x8_t)vcgt_f32(v33, v79)), 0), (int8x8_t)v34).u32[0] == -1)
      {
        float32x2_t v80 = vrsqrte_f32(v79);
        int v81 = 4;
        do
        {
          float32x2_t v80 = vmul_f32(v80, vrsqrts_f32(vmul_f32(v80, v80), v79));
          --v81;
        }
        while (v81);
        float32x2_t v82 = vmul_f32(v79, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v79), 0), _D2, (int8x8_t)v80));
        float32x2_t v83 = vrecpe_f32(v82);
        int v84 = 4;
        do
        {
          float32x2_t v83 = vmul_f32(v83, vrecps_f32(v82, v83));
          --v84;
        }
        while (v84);
        float32x4_t v85 = vmulq_n_f32(v77, v83.f32[0]);
        float32x4_t v86 = v85;
        v86.i32[3] = 0;
        float32x4_t v87 = vaddq_f32(v152, vmlsq_lane_f32(v76, v86, v151, 0));
        uint64_t v88 = *(unsigned int *)(a7 + 4096);
        *(_DWORD *)(a7 + 4096) = v88 + 1;
        v85.i32[3] = vsub_f32(v82, v38).i32[1];
        float32x4_t v89 = (float32x4_t *)(a7 + (v88 << 6));
        *float32x4_t v89 = v85;
        v89[1].i64[0] = v87.i64[0];
        v89[1].i32[2] = v87.i32[2];
        v89[3].i32[1] = -1;
        ++v75;
      }
    }
    if (vdup_lane_s8(v70, 4).u32[0] == -1)
    {
      float32x4_t v90 = vmlaq_laneq_f32(v154, v156, v68, 2);
      v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
      float32x4_t v91 = vsubq_f32(v155, v90);
      float32x4_t v92 = vmulq_f32(v91, v91);
      v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
      float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v93, (float32x2_t)vdup_n_s32(0x358637BDu)), (int8x8_t)vcgt_f32(v33, v93)), 0), (int8x8_t)v34).u32[0] == -1)
      {
        float32x2_t v94 = vrsqrte_f32(v93);
        int v95 = 4;
        do
        {
          float32x2_t v94 = vmul_f32(v94, vrsqrts_f32(vmul_f32(v94, v94), v93));
          --v95;
        }
        while (v95);
        float32x2_t v96 = vmul_f32(v93, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v93), 0), _D2, (int8x8_t)v94));
        float32x2_t v97 = vrecpe_f32(v96);
        int v98 = 4;
        do
        {
          float32x2_t v97 = vmul_f32(v97, vrecps_f32(v96, v97));
          --v98;
        }
        while (v98);
        float32x4_t v99 = vmulq_n_f32(v91, v97.f32[0]);
        float32x4_t v100 = v99;
        v100.i32[3] = 0;
        float32x4_t v101 = vaddq_f32(v152, vmlsq_lane_f32(v155, v100, v151, 0));
        uint64_t v102 = *(unsigned int *)(a7 + 4096);
        *(_DWORD *)(a7 + 4096) = v102 + 1;
        v99.i32[3] = vsub_f32(v96, v38).i32[1];
        int v103 = (float32x4_t *)(a7 + (v102 << 6));
        *int v103 = v99;
        v103[1].i64[0] = v101.i64[0];
        v103[1].i32[2] = v101.i32[2];
        v103[3].i32[1] = -1;
        ++v75;
      }
    }
    if (vdup_lane_s8(v70, 6).u32[0] == -1)
    {
      float32x4_t v104 = vmlaq_laneq_f32(v154, v156, v68, 3);
      v104.i64[1] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u32[0];
      float32x4_t v105 = vsubq_f32(v150, v104);
      float32x4_t v106 = vmulq_f32(v105, v105);
      v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
      float32x2_t v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgt_f32(v107, (float32x2_t)vdup_n_s32(0x358637BDu)), (int8x8_t)vcgt_f32(v33, v107)), 0), (int8x8_t)v34).u32[0] == -1)
      {
        float32x2_t v108 = vrsqrte_f32(v107);
        int v109 = 4;
        do
        {
          float32x2_t v108 = vmul_f32(v108, vrsqrts_f32(vmul_f32(v108, v108), v107));
          --v109;
        }
        while (v109);
        float32x2_t v110 = vmul_f32(v107, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v107), 0), _D2, (int8x8_t)v108));
        float32x2_t v111 = vrecpe_f32(v110);
        int v112 = 4;
        do
        {
          float32x2_t v111 = vmul_f32(v111, vrecps_f32(v110, v111));
          --v112;
        }
        while (v112);
        float32x4_t v113 = vmulq_n_f32(v105, v111.f32[0]);
        float32x4_t v114 = v113;
        v114.i32[3] = 0;
        float32x4_t v115 = vaddq_f32(v152, vmlsq_lane_f32(v150, v114, v151, 0));
        uint64_t v116 = *(unsigned int *)(a7 + 4096);
        *(_DWORD *)(a7 + 4096) = v116 + 1;
        v113.i32[3] = vsub_f32(v110, v38).i32[1];
        unsigned int v117 = (float32x4_t *)(a7 + (v116 << 6));
        *unsigned int v117 = v113;
        v117[1].i64[0] = v115.i64[0];
        v117[1].i32[2] = v115.i32[2];
        v117[3].i32[1] = -1;
        ++v75;
      }
    }
    if (!v75)
    {
LABEL_38:
      float32x4_t v118 = vmlaq_n_f32(v155, v157, v159.f32[0]);
      v118.i64[1] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0];
      float32x4_t v119 = vmlaq_n_f32(v154, v156, *(float *)&v158);
      v119.i64[1] = vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL).u32[0];
      float32x2_t v120 = (float32x2_t)vdup_n_s32(0x358637BDu);
      int32x2_t v121 = vcgt_f32(v120, v34);
      float32x4_t v122 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(v121, 0), vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(v40, v120), 0), (int8x16_t)v157, (int8x16_t)xmmword_23435FD50), (int8x16_t)vsubq_f32(v118, v119));
      float32x4_t v123 = vmulq_f32(v122, v122);
      v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
      float32x2_t v124 = vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32);
      float32x2_t v125 = vrsqrte_f32(v124);
      int v126 = 4;
      do
      {
        float32x2_t v125 = vmul_f32(v125, vrsqrts_f32(vmul_f32(v125, v125), v124));
        --v126;
      }
      while (v126);
      float32x2_t v127 = vmul_f32(v124, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v124), 0), _D2, (int8x8_t)v125));
      float32x2_t v128 = vrecpe_f32(v127);
      int v129 = 4;
      do
      {
        float32x2_t v128 = vmul_f32(v128, vrecps_f32(v127, v128));
        --v129;
      }
      while (v129);
      float32x4_t v130 = vmulq_n_f32(v122, v128.f32[0]);
      float32x4_t v131 = v130;
      v131.i32[3] = 0;
      float32x4_t v132 = vmlsq_lane_f32(v118, v131, v151, 0);
      float32x2_t v133 = vrsqrte_f32(v34);
      int v134 = 4;
      do
      {
        float32x2_t v133 = vmul_f32(v133, vrsqrts_f32(vmul_f32(v133, v133), v34));
        --v134;
      }
      while (v134);
      float32x4_t v135 = vaddq_f32(v152, v132);
      uint64_t v136 = *(unsigned int *)(a7 + 4096);
      *(_DWORD *)(a7 + 4096) = v136 + 1;
      v130.i32[3] = vsub_f32((float32x2_t)vand_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8(*(int8x8_t *)&v121), 0), (int8x8_t)vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_lane_s32(vceqz_f32(v34), 0), 0x1FuLL)), _D2, *(int8x8_t *)&v133))), v38).i32[1];
      float32x4_t v137 = (float32x4_t *)(a7 + (v136 << 6));
      *float32x4_t v137 = v130;
      v137[1].i64[0] = v135.i64[0];
      v137[1].i32[2] = v135.i32[2];
      v137[3].i32[1] = -1;
    }
  }
  return v37 & 1;
}

uint64_t physx::Gu::pcmContactCapsuleConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, int32x4_t *a4, uint64_t a5, float32x4_t **a6, float32x4_t *a7)
{
  uint64_t v262 = *MEMORY[0x263EF8340];
  float32x4_t v8 = *a6;
  _X8 = *(void *)(a2 + 48);
  __asm { PRFM            #0, [X8] }
  float32x4_t v15 = *(float32x4_t *)(a2 + 4);
  float32x4_t v16 = v15;
  v16.i32[3] = 0;
  int32x2_t v19 = *(int32x2_t *)a5;
  int32x2_t v17 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  uint64_t v18 = *(void *)(a1 + 8);
  v19.i32[0] = *(_DWORD *)(a1 + 4);
  int32x2_t v20 = vdup_lane_s32(v19, 0);
  float32x2_t v232 = (float32x2_t)v20;
  float32x2_t v233 = (float32x2_t)v17;
  v21.i64[0] = a3[1].i64[0];
  v21.i64[1] = a3[1].u32[2];
  v231[0] = *a3;
  v231[1] = v21;
  v22.i64[0] = a4[1].i64[0];
  v22.i64[1] = a4[1].u32[2];
  v230[0] = *a4;
  v230[1] = (int32x4_t)v22;
  float32x4_t v23 = vnegq_f32((float32x4_t)v230[0]);
  float32x4_t v24 = vsubq_f32(v21, v22);
  float32x4_t v25 = v23;
  v25.i32[3] = 0;
  float32x2_t v26 = (float32x2_t)vdupq_laneq_s32(v230[0], 3).u64[0];
  float32x4_t v27 = vmulq_n_f32(v24, vmla_f32((float32x2_t)0xBF000000BF000000, v26, v26).f32[0]);
  v27.i32[3] = 0;
  float32x2_t v28 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  float32x2_t v29 = (float32x2_t)vext_s8(*(int8x8_t *)v23.f32, (int8x8_t)v28, 4uLL);
  int8x8_t v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL)), v29, *(float32x2_t *)v24.f32);
  *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)v24.f32), *(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)), 4uLL);
  v31.i64[1] = v30.u32[0];
  float32x4_t v32 = vmlaq_laneq_f32(v27, v31, (float32x4_t)v230[0], 3);
  v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
  float32x4_t v33 = vmulq_f32(v25, v24);
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  float32x4_t v34 = vmlaq_n_f32(v32, v25, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
  float32x4_t v35 = vaddq_f32(v34, v34);
  v35.i32[3] = 0;
  float32x4_t v36 = v231[0];
  v36.i32[3] = 0;
  float32x4_t v37 = vmulq_f32(v36, v25);
  float32x4_t v38 = vmulq_laneq_f32(v36, (float32x4_t)v230[0], 3);
  v36.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
  int8x8_t v39 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v231[0].f32, *(int8x8_t *)v36.f32, 4uLL), *(float32x2_t *)v23.f32), v29, *(float32x2_t *)v231[0].f32);
  *(int8x8_t *)v40.f32 = vext_s8(v39, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v231[0].f32, v28), *(float32x2_t *)v23.f32, *(float32x2_t *)v36.f32), 4uLL);
  *(int8x8_t *)&v40.u32[2] = v39;
  float32x4_t v41 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v25, v231[0], 3), v38), v40);
  *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
  *(int32x2_t *)v25.f32 = vdup_laneq_s32((int32x4_t)v41, 2);
  v23.i64[0] = vpaddq_f32(v37, v37).u64[0];
  _Q18 = vaddq_f32(v41, v41);
  float32x2_t v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)_Q18, 2);
  float32x2_t v44 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)_Q18.f32), 0);
  float32x2_t v45 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v231[0], (int8x16_t)v231[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v230[0], (int8x16_t)v230[0], 8uLL)), vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32));
  *(float32x2_t *)v33.f32 = vmul_lane_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)_Q18.f32, 1);
  float32x2_t v46 = vmul_laneq_f32(*(float32x2_t *)v25.f32, _Q18, 2);
  float32x2_t v47 = vmul_n_f32(*(float32x2_t *)v40.f32, _Q18.f32[0]);
  float32x2_t v48 = vmul_n_f32(*(float32x2_t *)v25.f32, _Q18.f32[0]);
  float32x2_t v49 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q18.f32, 0), v45, 1);
  *(float32x2_t *)v25.f32 = vmul_lane_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)_Q18.f32, 1);
  *(float32x2_t *)_Q18.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q18.f32, 1), v45, 1);
  *(float32x2_t *)v37.f32 = vmul_lane_f32(v43, v45, 1);
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v51 = vsub_f32(_D5, v44);
  *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, *(float32x2_t *)v33.f32), v46), (int8x8_t)vadd_f32(v47, *(float32x2_t *)v37.f32), 4uLL);
  v52.i64[1] = vsub_f32(v48, *(float32x2_t *)_Q18.f32).u32[0];
  *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vsub_f32(v47, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(v51, v46), 4uLL);
  v53.i64[1] = vadd_f32(*(float32x2_t *)v25.f32, v49).u32[0];
  float32x4_t v226 = v52;
  float32x4_t v227 = v53;
  *(int8x8_t *)v54.f32 = vext_s8((int8x8_t)vadd_f32(v48, *(float32x2_t *)_Q18.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v25.f32, v49), 4uLL);
  v54.i64[1] = vsub_f32(v51, *(float32x2_t *)v33.f32).u32[0];
  float32x4_t v228 = v54;
  float32x4_t v229 = v35;
  v25.i64[0] = *(void *)(_X8 + 60);
  v25.i64[1] = *(unsigned int *)(_X8 + 68);
  int8x16_t v55 = (int8x16_t)vmulq_f32(v16, v25);
  *(int32x2_t *)v33.f32 = vdup_laneq_s32((int32x4_t)v55, 2);
  *(float32x2_t *)v55.i8 = vpmin_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v55.i8);
  float v220 = *(float *)(a5 + 8);
  v33.f32[0] = v220 * 0.05;
  __asm { FMOV            V18.2S, #0.25 }
  *(float32x2_t *)v55.i8 = vmin_f32(vmul_f32(vpmin_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), *(float32x2_t *)_Q18.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.f32, 0));
  float32x2_t v56 = vmin_f32(*(float32x2_t *)v55.i8, vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)v19.i32));
  uint64_t v57 = v8[4].u8[0];
  if (v8[4].i8[0])
  {
    __asm { FMOV            V16.2S, #1.25 }
    float32x2_t v59 = vmul_f32(v56, _D16);
    *(float32x2_t *)v55.i8 = vmul_f32(v59, v59);
    unsigned int v60 = v57 - 1;
    do
    {
      uint64_t v61 = v8[5].i64[0];
      uint64_t v62 = v60;
      int32x4_t v63 = (float32x4_t *)(v61 + 48 * v60);
      float32x4_t v64 = v63[1];
      float32x4_t v65 = vmulq_n_f32(v52, COERCE_FLOAT(*v63));
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_lane_f32(v53, *(float32x2_t *)v63->f32, 1);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_laneq_f32(v54, *v63, 2);
      v67.i32[3] = 0;
      float32x4_t v68 = vaddq_f32(v35, vaddq_f32(v67, vaddq_f32(v65, v66)));
      float32x4_t v69 = v63[2];
      float32x4_t v70 = v69;
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_f32(v70, vsubq_f32(v68, v64));
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      float32x2_t v72 = vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32);
      float32x4_t v73 = vmlsq_lane_f32(v68, v70, v72, 0);
      v73.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0];
      float32x4_t v74 = vsubq_f32(v64, v73);
      float32x4_t v75 = vmulq_f32(v74, v74);
      v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32), *(float32x2_t *)v55.i8), 0), (int8x8_t)v19).u32[0] == -1)
      {
        unsigned __int8 v76 = v8[4].i8[0] - 1;
        v8[4].i8[0] = v76;
        float32x4_t v77 = (float32x4_t *)(v61 + 48 * v76);
        float32x4_t v78 = *v77;
        float32x4_t v79 = v77[2];
        v63[1] = v77[1];
        v63[2] = v79;
        *int32x4_t v63 = v78;
      }
      else
      {
        v69.i32[3] = v72.i32[1];
        v63[2] = v69;
      }
      --v60;
    }
    while (v62);
    int v80 = v8[4].u8[0];
  }
  else
  {
    int v80 = 0;
  }
  v41.i32[3] = v45.i32[1];
  if (v80 == v57)
  {
    int8x16_t v55 = (int8x16_t)vabdq_f32(v35, v8[1]);
    *(float32x2_t *)v55.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), *(float32x2_t *)v55.i8);
    int v81 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds2 + 4 * v57);
    float32x2_t v82 = vld1_dup_f32(v81);
    float32x4_t v83 = vmulq_f32(v41, *v8);
    v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
    int8x8_t v84 = (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), vmul_n_f32(v56, physx::Gu::invalidateThresholds2[v57]));
    *(int32x2_t *)v55.i8 = vcgt_f32(v82, vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32));
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(*(int8x8_t *)v55.i8, v84), 0), (int8x8_t)v19).u32[0] != -1)
    {
      if (!v57) {
        return 0;
      }
      uint64_t v85 = v8[5].i64[0];
      int8x16_t v86 = *(int8x16_t *)(v85 + 32);
      float32x4_t v87 = (float32x4_t)v86;
      if (v57 != 1)
      {
        uint64_t v88 = v57 - 1;
        float32x4_t v89 = (float32x4_t *)(v85 + 80);
        float32x4_t v87 = (float32x4_t)v86;
        do
        {
          float32x4_t v90 = *v89;
          v89 += 3;
          float32x4_t v87 = vaddq_f32(v87, v90);
          --v88;
        }
        while (v88);
      }
      v87.i32[3] = 0;
      float32x4_t v91 = vmulq_f32(v87, v87);
      v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
      v86.i32[3] = 0;
      float32x4_t v92 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v87, v86);
      float32x4_t v93 = (float32x4_t)v230[0];
      v93.i32[3] = 0;
      float32x2_t v94 = (float32x2_t)vdupq_laneq_s32(v230[0], 3).u64[0];
      float32x4_t v95 = vmulq_n_f32(v92, vmla_f32((float32x2_t)0xBF000000BF000000, v94, v94).f32[0]);
      v95.i32[3] = 0;
      float32x2_t v96 = (float32x2_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
      float32x2_t v97 = (float32x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
      int8x8_t v98 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230[0].i8, (float32x2_t)vext_s8(*(int8x8_t *)v92.f32, (int8x8_t)v97, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v230[0].i8, (int8x8_t)v96, 4uLL), *(float32x2_t *)v92.f32);
      *(int8x8_t *)v99.f32 = vext_s8(v98, (int8x8_t)vmls_f32(vmul_f32(v96, *(float32x2_t *)v92.f32), *(float32x2_t *)v230[0].i8, v97), 4uLL);
      v99.i64[1] = v98.u32[0];
      float32x4_t v100 = vmlaq_laneq_f32(v95, v99, (float32x4_t)v230[0], 3);
      v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
      float32x4_t v101 = vmulq_f32(v93, v92);
      v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
      float32x4_t v102 = vmlaq_n_f32(v100, v93, vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0]);
      float32x4_t v103 = vaddq_f32(v102, v102);
      v103.i32[3] = 0;
      float32x4_t v104 = vmulq_f32(v103, v103);
      v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
      float32x2_t v105 = vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32);
      float32x2_t v106 = vrsqrte_f32(v105);
      int v107 = 4;
      do
      {
        float32x2_t v106 = vmul_f32(v106, vrsqrts_f32(vmul_f32(v106, v106), v105));
        --v107;
      }
      while (v107);
      float32x2_t v108 = vmul_f32(v105, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v105), 0), (int8x8_t)_D5, (int8x8_t)v106));
      float32x2_t v109 = vrecpe_f32(v108);
      int v110 = 4;
      do
      {
        float32x2_t v109 = vmul_f32(v109, vrecps_f32(v108, v109));
        --v110;
      }
      while (v110);
      float32x4_t v111 = vmulq_n_f32(v103, v109.f32[0]);
      v111.i32[3] = 0;
      float32x4_t v247 = v111;
      int v112 = &v247;
      float32x4_t v113 = &v247;
      goto LABEL_48;
    }
  }
  BOOL v114 = 0;
  if (*(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0) {
    BOOL v114 = *(float *)(a2 + 12) == 1.0;
  }
  *float32x4_t v8 = v41;
  v8[1] = v35;
  float32x4_t v115 = *(float32x4_t *)(a2 + 16);
  v55.i32[0] = *(_DWORD *)(_X8 + 24);
  float32x4_t v116 = (float32x4_t)v55;
  v116.i32[1] = *(_DWORD *)(_X8 + 28);
  float32x4_t v117 = v116;
  v117.i32[2] = *(_DWORD *)(_X8 + 32);
  int v250 = 0;
  char v251 = 0;
  float32x4_t v247 = v117;
  uint64_t v258 = _X8;
  uint64_t v260 = *(void *)(_X8 + 40) + 20 * *(unsigned __int8 *)(_X8 + 39);
  char v261 = *(unsigned char *)(_X8 + 38);
  v118.i64[0] = *(void *)(_X8 + 60);
  v118.i64[1] = *(unsigned int *)(_X8 + 68);
  int32x4_t v119 = (int32x4_t)vmulq_f32(v16, v118);
  *(float32x2_t *)v119.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v119, 2), *(float32x2_t *)v119.i8);
  *(float *)v119.i32 = vpmin_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8).f32[0];
  float32x2_t v248 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v119.i32);
  float v249 = 0.025 * *(float *)v119.i32;
  if (v114)
  {
    long long v252 = xmmword_23435FD50;
    long long v253 = xmmword_23435FD60;
    long long v254 = xmmword_23435FD80;
    float32x4_t v255 = (float32x4_t)xmmword_23435FD50;
    long long v256 = xmmword_23435FD60;
    long long v257 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v120 = vrecpeq_f32(v16);
    int v121 = 4;
    do
    {
      float32x4_t v120 = vmulq_f32(v120, vrecpsq_f32(v120, v16));
      --v121;
    }
    while (v121);
    *(int32x2_t *)v122.f32 = vdup_lane_s32(*(int32x2_t *)v15.f32, 0);
    v122.i64[1] = v122.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v122, v16)), (int8x8_t)v19).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v128 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.f32, 1);
      float32x2_t v129 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 2);
      float32x2_t v130 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 3);
      float32x4_t v131 = vaddq_f32(v115, v115);
      float32x2_t v132 = vmul_lane_f32(v128, *(float32x2_t *)v131.f32, 1);
      float32x2_t v133 = vmul_laneq_f32(v129, v131, 2);
      float32x2_t v134 = vmul_n_f32(v128, v131.f32[0]);
      float32x2_t v135 = vmul_n_f32(v129, v131.f32[0]);
      float32x2_t v136 = vmul_n_f32(v130, v131.f32[0]);
      float32x2_t v137 = vmul_lane_f32(v129, *(float32x2_t *)v131.f32, 1);
      float32x2_t v138 = vmul_lane_f32(v130, *(float32x2_t *)v131.f32, 1);
      float32x2_t v139 = vmul_laneq_f32(v130, v131, 2);
      float32x2_t v140 = vsub_f32(_D5, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v131.f32), 0));
      int32x2_t v141 = (int32x2_t)vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, v132), v133), (int8x8_t)vadd_f32(v134, v139), 4uLL);
      int8x8_t v142 = (int8x8_t)vsub_f32(v134, v139);
      *(int32x2_t *)v143.f32 = v141;
      v143.i64[1] = vsub_f32(v135, v138).u32[0];
      int32x2_t v144 = (int32x2_t)vext_s8(v142, (int8x8_t)vsub_f32(v140, v133), 4uLL);
      int8x8_t v145 = (int8x8_t)vadd_f32(v135, v138);
      *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)vdup_lane_s32(v141, 0), (int8x8_t)v144, 4uLL);
      int8x8_t v146 = (int8x8_t)vdup_lane_s32(v144, 1);
      *(int32x2_t *)v147.f32 = v144;
      v147.i64[1] = vadd_f32(v137, v136).u32[0];
      *(int8x8_t *)v148.f32 = vext_s8(v145, (int8x8_t)vsub_f32(v137, v136), 4uLL);
      *(int8x8_t *)v149.f32 = vext_s8((int8x8_t)v141, v146, 4uLL);
      v148.i64[1] = vsub_f32(v140, v132).u32[0];
      v131.i64[1] = vdup_lane_s32(*(int32x2_t *)v148.f32, 0).u32[0];
      v149.i64[1] = vdup_lane_s32(*(int32x2_t *)v148.f32, 1).u32[0];
      *(int8x8_t *)v150.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v143.u32[2], 0), *(int8x8_t *)&v147.u32[2], 4uLL);
      v150.i64[1] = vdup_lane_s32(*(int32x2_t *)&v148.u32[2], 0).u32[0];
      float32x4_t v151 = vmulq_n_f32(v131, v15.f32[0]);
      v151.i32[3] = 0;
      float32x4_t v152 = vmulq_lane_f32(v149, *(float32x2_t *)v15.f32, 1);
      v152.i32[3] = 0;
      float32x4_t v153 = vmulq_laneq_f32(v150, v15, 2);
      v153.i32[3] = 0;
      float32x4_t v154 = vmulq_n_f32(v151, v143.f32[0]);
      v154.i32[3] = 0;
      float32x4_t v155 = vmulq_lane_f32(v152, *(float32x2_t *)v143.f32, 1);
      v155.i32[3] = 0;
      float32x4_t v156 = vmulq_laneq_f32(v153, v143, 2);
      v156.i32[3] = 0;
      float32x4_t v123 = vaddq_f32(v156, vaddq_f32(v154, v155));
      float32x4_t v157 = vmulq_n_f32(v151, v147.f32[0]);
      v157.i32[3] = 0;
      float32x4_t v158 = vmulq_lane_f32(v152, *(float32x2_t *)v147.f32, 1);
      v158.i32[3] = 0;
      float32x4_t v159 = vmulq_laneq_f32(v153, v147, 2);
      v159.i32[3] = 0;
      float32x4_t v160 = vaddq_f32(v157, v158);
      float32x4_t v161 = vmulq_n_f32(v151, v148.f32[0]);
      v161.i32[3] = 0;
      float32x4_t v162 = vmulq_lane_f32(v152, *(float32x2_t *)v148.f32, 1);
      v162.i32[3] = 0;
      float32x4_t v163 = vmulq_laneq_f32(v153, v148, 2);
      v163.i32[3] = 0;
      float32x4_t v124 = vaddq_f32(v159, v160);
      float32x4_t v125 = vaddq_f32(v163, vaddq_f32(v161, v162));
      long long v252 = (__int128)v123;
      long long v253 = (__int128)v124;
      float32x4_t v164 = vmulq_n_f32(v131, v120.f32[0]);
      v164.i32[3] = 0;
      float32x4_t v165 = vmulq_lane_f32(v149, *(float32x2_t *)v120.f32, 1);
      v165.i32[3] = 0;
      float32x4_t v166 = vmulq_laneq_f32(v150, v120, 2);
      v166.i32[3] = 0;
      long long v257 = (__int128)v166;
      float32x4_t v167 = vmulq_n_f32(v164, v143.f32[0]);
      v167.i32[3] = 0;
      float32x4_t v168 = vmulq_lane_f32(v165, *(float32x2_t *)v143.f32, 1);
      v168.i32[3] = 0;
      float32x4_t v169 = vmulq_laneq_f32(v166, v143, 2);
      v169.i32[3] = 0;
      float32x4_t v170 = vaddq_f32(v169, vaddq_f32(v167, v168));
      float32x4_t v171 = vmulq_n_f32(v164, v147.f32[0]);
      v171.i32[3] = 0;
      float32x4_t v172 = vmulq_lane_f32(v165, *(float32x2_t *)v147.f32, 1);
      v172.i32[3] = 0;
      float32x4_t v173 = vmulq_laneq_f32(v166, v147, 2);
      v173.i32[3] = 0;
      float32x4_t v174 = vmulq_n_f32(v164, v148.f32[0]);
      v174.i32[3] = 0;
      float32x4_t v175 = vmulq_lane_f32(v165, *(float32x2_t *)v148.f32, 1);
      v175.i32[3] = 0;
      float32x4_t v126 = vaddq_f32(v173, vaddq_f32(v171, v172));
      float32x4_t v176 = vmulq_laneq_f32(v166, v148, 2);
      v176.i32[3] = 0;
      float32x4_t v127 = vaddq_f32(v176, vaddq_f32(v174, v175));
      long long v254 = (__int128)v125;
      float32x4_t v255 = v170;
      float32x4_t v52 = v226;
      float32x4_t v53 = v227;
      float32x4_t v54 = v228;
      float32x4_t v35 = v229;
    }
    else
    {
      v120.i32[3] = 0;
      float32x4_t v123 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD50);
      float32x4_t v124 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD60);
      float32x4_t v125 = vmulq_f32(v16, (float32x4_t)xmmword_23435FD80);
      long long v252 = (__int128)v123;
      long long v253 = (__int128)v124;
      float32x4_t v126 = vmulq_f32(v120, (float32x4_t)xmmword_23435FD60);
      float32x4_t v127 = vmulq_f32(v120, (float32x4_t)xmmword_23435FD80);
      long long v254 = (__int128)v125;
      float32x4_t v255 = vmulq_f32(v120, (float32x4_t)xmmword_23435FD50);
    }
    long long v256 = (__int128)v126;
    long long v257 = (__int128)v127;
    float32x4_t v177 = vmulq_n_f32(v123, *(float *)v55.i32);
    v177.i32[3] = 0;
    float32x4_t v178 = vmulq_lane_f32(v124, *(float32x2_t *)v116.f32, 1);
    v178.i32[3] = 0;
    float32x4_t v179 = vmulq_laneq_f32(v125, v117, 2);
    v179.i32[3] = 0;
    float32x4_t v117 = vaddq_f32(v179, vaddq_f32(v178, v177));
    float32x4_t v247 = v117;
  }
  float32x4_t v180 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, *(float *)&v18);
  float32x4_t v217 = v53;
  float32x4_t v218 = v52;
  float32x4_t v181 = vmulq_n_f32(v52, v180.f32[0]);
  v181.i32[3] = 0;
  float32x4_t v182 = vmulq_lane_f32(v53, *(float32x2_t *)v180.f32, 1);
  v182.i32[3] = 0;
  uint64_t v259 = *(void *)(_X8 + 48);
  float32x4_t v216 = v54;
  float32x4_t v183 = vmulq_laneq_f32(v54, v180, 2);
  v183.i32[3] = 0;
  float32x4_t v184 = vaddq_f32(v182, v181);
  float32x4_t v185 = vaddq_f32(v183, v184);
  int v242 = 4;
  float32x4_t v238 = v35;
  int32x2_t v246 = v20;
  float32x4_t v186 = vaddq_f32(v35, v185);
  float32x4_t v187 = vsubq_f32(v35, v185);
  float32x4_t v244 = v186;
  float32x4_t v245 = v187;
  __int32 v239 = v19.i32[0];
  __int32 v240 = v19.i32[0];
  __int32 v241 = v19.i32[0];
  char v243 = 1;
  uint64_t v237 = 0;
  float32x4_t v234 = 0u;
  float32x4_t v235 = 0u;
  v236[0] = 0u;
  v225[1] = &v238;
  v225[0] = &unk_26E7287F0;
  float32x4_t v219 = v35;
  float32x4_t v188 = vsubq_f32(v35, v117);
  float32x4_t v224 = v188;
  if (!v114)
  {
    v223.i64[1] = (uint64_t)&v247;
    v223.i64[0] = (uint64_t)&unk_26E728850;
    uint64_t result = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>((uint64_t)v225, (uint64_t)&v223, &v224, (uint64_t *)&v233, 1, &v8[4].i8[3], &v8[4].i8[7], &v8[4].i8[2], *(double *)v188.i64, *(double *)v186.i64, *(int8x8_t *)v187.f32, v184, (uint64_t)&v234);
    if (!result) {
      return result;
    }
LABEL_35:
    if (result == 4) {
      return physx::Gu::fullContactsGenerationCapsuleConvex((uint64_t)&v238, &v247, &v226, v231, v230, (uint64_t)a7, (uint64_t)a7, v114, v248.f32[0], v220, (uint64_t)v8, v236, (float32x2_t *)&v235, &v233, 1);
    }
    float32x2_t v222 = vmul_f32(v56, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
    if (result == 2)
    {
      float32x4_t v190 = v235;
      float32x4_t v191 = vsubq_f32(v234, v219);
      float32x4_t v192 = vmulq_f32(v218, v191);
      v192.i64[0] = vpaddq_f32(v192, v192).u64[0];
      float32x4_t v193 = vmulq_f32(v217, v191);
      v193.i64[0] = vpaddq_f32(v193, v193).u64[0];
      float32x4_t v194 = vmulq_f32(v216, v191);
      v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
      *(int8x8_t *)v192.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v192.f32, *(float32x2_t *)v192.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v193.f32, *(float32x2_t *)v193.f32), 4uLL);
      v192.i64[1] = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32).u32[0];
      float32x4_t v223 = v192;
      float32x4_t v195 = v236[0];
      v195.i32[3] = HIDWORD(v237);
      float32x4_t v221 = v195;
      *a7 = v192;
      a7[1] = v190;
    }
    else
    {
      v223.i64[1] = (uint64_t)&v247;
      if (v114) {
        float32x4_t v196 = &unk_26E729C88;
      }
      else {
        float32x4_t v196 = &unk_26E728850;
      }
      v223.i64[0] = (uint64_t)v196;
      if (physx::Gu::epaPenetration((uint64_t)v225) != 5)
      {
        char v204 = 1;
        return physx::Gu::fullContactsGenerationCapsuleConvex((uint64_t)&v238, &v247, &v226, v231, v230, (uint64_t)a7, (uint64_t)a7, v114, v248.f32[0], v220, (uint64_t)v8, v236, (float32x2_t *)&v235, &v233, v204);
      }
      float32x4_t v197 = v235;
      float32x4_t v198 = vsubq_f32(v234, v229);
      float32x4_t v199 = vmulq_f32(v226, v198);
      float32x4_t v200 = vmulq_f32(v198, v227);
      float32x4_t v201 = vmulq_f32(v198, v228);
      float32x2_t v202 = (float32x2_t)vpaddq_f32(v199, v199).u64[0];
      v199.i64[0] = vpaddq_f32(v200, v200).u64[0];
      v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
      *(int8x8_t *)v203.f32 = vext_s8((int8x8_t)vpadd_f32(v202, v202), (int8x8_t)vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32), 4uLL);
      v203.i64[1] = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32).u32[0];
      float32x4_t v223 = v203;
      float32x4_t v195 = v236[0];
      v195.i32[3] = HIDWORD(v237);
      float32x4_t v221 = v195;
      *a7 = v203;
      a7[1] = v197;
    }
    a7[2] = v195;
    physx::Gu::PersistentContactManifold::addManifoldPoint2((uint64_t)v8, &v223, &v235, (long long *)&v221, &v222);
    char v204 = 0;
    if (v57 && v80 == v57)
    {
      float32x4_t v205 = (float32x4_t)v230[0];
      v205.i32[3] = 0;
      float32x2_t v206 = (float32x2_t)vdupq_laneq_s32(v230[0], 3).u64[0];
      float32x4_t v207 = vmulq_n_f32(v236[0], vmla_f32((float32x2_t)0xBF000000BF000000, v206, v206).f32[0]);
      v207.i32[3] = 0;
      float32x2_t v208 = (float32x2_t)vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
      float32x2_t v209 = (float32x2_t)vextq_s8((int8x16_t)v236[0], (int8x16_t)v236[0], 8uLL).u64[0];
      int8x8_t v210 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v230[0].i8, (float32x2_t)vext_s8(*(int8x8_t *)v236[0].f32, (int8x8_t)v209, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v230[0].i8, (int8x8_t)v208, 4uLL), *(float32x2_t *)v236[0].f32);
      *(int8x8_t *)v211.f32 = vext_s8(v210, (int8x8_t)vmls_f32(vmul_f32(v208, *(float32x2_t *)v236[0].f32), *(float32x2_t *)v230[0].i8, v209), 4uLL);
      v211.i64[1] = v210.u32[0];
      float32x4_t v212 = vmlaq_laneq_f32(v207, v211, (float32x4_t)v230[0], 3);
      v212.i64[1] = vextq_s8((int8x16_t)v212, (int8x16_t)v212, 8uLL).u32[0];
      float32x4_t v213 = vmulq_f32(v205, v236[0]);
      v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
      float32x4_t v214 = vmlaq_n_f32(v212, v205, vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32).f32[0]);
      float32x4_t v215 = vaddq_f32(v214, v214);
      v215.i32[3] = 0;
      float32x4_t v223 = v215;
      int v112 = &v223;
      float32x4_t v113 = &v223;
LABEL_48:
      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v8, (uint64_t)a7, v112, v113, v231, &v232, &v233);
      return 1;
    }
    return physx::Gu::fullContactsGenerationCapsuleConvex((uint64_t)&v238, &v247, &v226, v231, v230, (uint64_t)a7, (uint64_t)a7, v114, v248.f32[0], v220, (uint64_t)v8, v236, (float32x2_t *)&v235, &v233, v204);
  }
  v223.i64[1] = (uint64_t)&v247;
  v223.i64[0] = (uint64_t)&unk_26E729C88;
  uint64_t result = physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>((uint64_t)v225, (uint64_t)&v223, &v224, (uint64_t *)&v233, 1, &v8[4].i8[3], &v8[4].i8[7], &v8[4].i8[2], *(double *)v188.i64, *(double *)v186.i64, *(int8x8_t *)v187.f32, v184, (uint64_t)&v234);
  if (result) {
    goto LABEL_35;
  }
  return result;
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::LocalConvex<physx::Gu::CapsuleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t *a4, int a5, unsigned char *a6, unsigned char *a7, unsigned char *a8, double a9, double a10, int8x8_t a11, float32x4_t a12, uint64_t a13)
{
  float32x2_t v13 = a7;
  uint64_t v14 = a6;
  uint64_t v346 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(void *)(a1 + 8);
  float32x4_t v16 = (const float *)(v15 + 20);
  float32x2_t v17 = vld1_dup_f32(v16);
  uint64_t v18 = *(void *)(a2 + 8);
  int32x2_t v19 = (const float *)(v18 + 20);
  float32x2_t v20 = vld1_dup_f32(v19);
  float32x2_t v21 = vmin_f32(v17, v20);
  float32x2_t v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v23 = vmul_f32(v21, v22);
  v21.i32[0] = *(_DWORD *)(v15 + 16);
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a11.i32[0] = -*(char *)(v15 + 32);
  int32x2_t v24 = (int32x2_t)vand_s8(a11, (int8x8_t)v21);
  float32x2_t v25 = (float32x2_t)vdup_lane_s32(v24, 0);
  v24.i32[0] = -*(char *)(v18 + 32);
  float32x2_t v26 = (float32x2_t)vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v24, (int8x8_t)v22), 0);
  float32x2_t v316 = v25;
  float v317 = v26.f32[0];
  float32x2_t v27 = vadd_f32(v25, v26);
  uint64_t v28 = *a4;
  float32x4_t v330 = 0uLL;
  unsigned int v329 = 0;
  uint64_t v29 = *a8;
  __asm { FMOV            V9.2S, #1.0 }
  float32x2_t v320 = v27;
  if (!*a8)
  {
    float32x4_t v50 = vmulq_f32(*a3, *a3);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    float32x4_t v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32)), 0), *(int8x16_t *)a3, (int8x16_t)xmmword_23435FD50);
    float32x4_t v330 = v42;
    float32x4_t v51 = vmulq_f32(v42, v42);
    v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
    float32x2_t v52 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
    float32x2_t v53 = vrsqrte_f32(v52);
    int v54 = 4;
    do
    {
      float32x2_t v53 = vmul_f32(v53, vrsqrts_f32(vmul_f32(v53, v53), v52));
      --v54;
    }
    while (v54);
    float32x2_t v55 = vmul_f32(v52, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v52), 0), (int8x8_t)_D9, (int8x8_t)v53));
    float32x2_t v56 = vrecpe_f32(v55);
    int v57 = 4;
    do
    {
      *(float32x2_t *)a12.f32 = vrecps_f32(v55, v56);
      float32x2_t v56 = vmul_f32(v56, *(float32x2_t *)a12.f32);
      --v57;
    }
    while (v57);
    float32x4_t v58 = vmulq_n_f32(v42, v56.f32[0]);
    v58.i32[3] = 0;
    float32x4_t v325 = v58;
    float32x2_t v59 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v60.i64[0] = -1;
    v60.i64[1] = -1;
    float32x4_t v61 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v35 = 0;
  uint64_t v36 = v15 + 48;
  uint64_t v37 = *(void *)(v18 + 160);
  do
  {
    uint64_t v38 = a6[v35];
    *(&v335 + v35) = v38;
    unsigned int v39 = a7[v35];
    *(&v333 + v35) = v39;
    float32x4_t v40 = *(float32x4_t *)(v36 + 16 * (1 - v38));
    float32x4_t v41 = *(float32x4_t *)(v37 + 12 * v39);
    v41.i32[3] = 0;
    float32x4_t v42 = vsubq_f32(v40, v41);
    *(&v340 + v35) = v40;
    *(&v337 + v35) = v41;
    *(&v343 + v35++) = v42;
  }
  while (v29 != v35);
  unsigned int v329 = v29;
  switch(v35)
  {
    case 4:
      int v326 = v28;
      physx::Gu::closestPtPointTetrahedron(&v343, &v340, &v337, &v335, &v333, (int *)&v329);
      LODWORD(v28) = v326;
      v27.i32[0] = v320.i32[0];
      goto LABEL_49;
    case 3:
      unsigned int v329 = 3;
      float32x4_t v42 = v343;
      a12 = vsubq_f32(v344, v343);
      float32x4_t v62 = vsubq_f32((float32x4_t)v345[0], v343);
      int8x8_t v64 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v62, (int8x16_t)v62, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL), *(float32x2_t *)v62.f32);
      *(int8x8_t *)v63.f32 = vext_s8(v64, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL), *(float32x2_t *)v62.f32), *(float32x2_t *)a12.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL)), 4uLL);
      v64.i32[1] = 0;
      float32x2_t v65 = vpadd_f32(vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32), vmul_f32((float32x2_t)v64.u32[0], (float32x2_t)v64.u32[0]));
      float32x2_t v66 = vpadd_f32(v65, v65);
      if (v66.f32[0] > 0.00000011921)
      {
        if (v66.f32[0] == 0.0)
        {
          float32x4_t v42 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v63.u32[2] = v64;
          float32x2_t v67 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
          float32x2_t v68 = (float32x2_t)vextq_s8(v345[0], v345[0], 8uLL).u64[0];
          float32x2_t v69 = (float32x2_t)vextq_s8(v345[0], v345[0], 4uLL).u64[0];
          float32x2_t v70 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
          int8x8_t v71 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v69), v70, *(float32x2_t *)v345[0].i8);
          *(int8x8_t *)v72.f32 = vext_s8(v71, (int8x8_t)vmls_f32(vmul_f32(v67, *(float32x2_t *)v345[0].i8), *(float32x2_t *)v344.f32, v68), 4uLL);
          v72.i64[1] = v71.u32[0];
          float32x2_t v73 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
          float32x2_t v74 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
          int8x8_t v75 = (int8x8_t)vmls_f32(vmul_f32(v74, *(float32x2_t *)v345[0].i8), v69, *(float32x2_t *)v343.f32);
          *(int8x8_t *)v76.f32 = vext_s8(v75, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v68), *(float32x2_t *)v345[0].i8, v73), 4uLL);
          v76.i64[1] = v75.u32[0];
          int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v70), v74, *(float32x2_t *)v344.f32);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(v73, *(float32x2_t *)v344.f32), *(float32x2_t *)v343.f32, v67), 4uLL);
          v78.i64[1] = v77.u32[0];
          float32x4_t v79 = vmulq_f32(v72, v63);
          v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
          float32x2_t v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
          float32x4_t v81 = vmulq_f32(v76, v63);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          float32x2_t v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
          float32x4_t v83 = vmulq_f32(v78, v63);
          v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
          float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v82), (int8x8_t)vcgez_f32(v80)), (int8x8_t)vcgez_f32(v84)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
          {
            int8x16_t v110 = (int8x16_t)vmulq_f32(v343, v63);
            float32x2_t v111 = (float32x2_t)vextq_s8(v110, v110, 8uLL).u64[0];
            float32x2_t v112 = vrecpe_f32(v66);
            int v113 = 4;
            do
            {
              float32x2_t v112 = vmul_f32(v112, vrecps_f32(v66, v112));
              --v113;
            }
            while (v113);
            float32x2_t v114 = vpadd_f32(*(float32x2_t *)v110.i8, v111);
            float32x4_t v42 = vmulq_n_f32(v63, vmul_f32(v112, vpadd_f32(v114, v114)).f32[0]);
            v42.i32[3] = 0;
          }
          else
          {
            float32x4_t v85 = vnegq_f32(v343);
            v85.i32[3] = 0;
            float32x4_t v86 = vnegq_f32(v344);
            v86.i32[3] = 0;
            float32x4_t v87 = vmulq_f32(v85, a12);
            v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
            float32x2_t v88 = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32);
            float32x4_t v89 = vmulq_f32(a12, v86);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v88), (int8x8_t)vclez_f32(v90)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
            {
              float32x2_t v115 = vsub_f32(v88, v90);
              float32x2_t v116 = vrecpe_f32(v115);
              int v117 = 4;
              do
              {
                float32x2_t v116 = vmul_f32(v116, vrecps_f32(v115, v116));
                --v117;
              }
              while (v117);
              uint64_t v102 = 0;
              float32x4_t v42 = vmlaq_n_f32(v343, a12, vmul_f32(v88, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v115), (float32x2_t)0x3400000034000000), (int8x8_t)v116, 0)).f32[0]);
              v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
              unsigned int v118 = 2;
              uint64_t v101 = 1;
            }
            else
            {
              float32x4_t v91 = vnegq_f32((float32x4_t)v345[0]);
              v91.i32[3] = 0;
              float32x4_t v92 = vmulq_f32(v86, v62);
              v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
              float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
              float32x4_t v94 = vmulq_f32(a12, v91);
              v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
              float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
              float32x4_t v96 = vmulq_f32(v62, v91);
              v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
              float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v93, v90), (int8x8_t)vcge_f32(v95, v97)), (int8x8_t)vclez_f32(v80)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
              {
                float32x2_t v119 = vsub_f32(v93, v90);
                float32x2_t v120 = vadd_f32(v119, vsub_f32(v95, v97));
                float32x2_t v121 = vrecpe_f32(v120);
                int v122 = 4;
                do
                {
                  float32x2_t v121 = vmul_f32(v121, vrecps_f32(v120, v121));
                  --v122;
                }
                while (v122);
                int8x16_t v123 = (int8x16_t)vmlaq_n_f32(v344, vsubq_f32((float32x4_t)v345[0], v344), vmul_f32(v119, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v120), (float32x2_t)0x3400000034000000), (int8x8_t)v121, 0)).f32[0]);
                v123.i64[1] = vextq_s8(v123, v123, 8uLL).u32[0];
                unsigned int v118 = 2;
                uint64_t v102 = 1;
                uint64_t v101 = 2;
                float32x4_t v42 = (float32x4_t)v123;
              }
              else
              {
                float32x4_t v98 = vmulq_f32(v85, v62);
                int32x4_t v99 = (int32x4_t)vpaddq_f32(v98, v98);
                *(float32x2_t *)v99.i8 = vpadd_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v99.i8), (int8x8_t)vclez_f32(v97)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                {
                  float32x2_t v124 = vsub_f32(*(float32x2_t *)v99.i8, v97);
                  float32x2_t v125 = vrecpe_f32(v124);
                  int v126 = 4;
                  do
                  {
                    float32x2_t v125 = vmul_f32(v125, vrecps_f32(v124, v125));
                    --v126;
                  }
                  while (v126);
                  uint64_t v102 = 0;
                  float32x4_t v42 = vmlaq_n_f32(v343, v62, vmul_f32(*(float32x2_t *)v99.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v124), (float32x2_t)0x3400000034000000), (int8x8_t)v125, 0)).f32[0]);
                  v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
                  uint64_t v101 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v99.i8), (int8x8_t)vclez_f32(v88)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
                {
                  uint64_t v102 = 0;
                  uint64_t v101 = 1;
                }
                else
                {
                  *(int32x2_t *)v99.i8 = vcge_f32(v90, v93);
                  *(int16x4_t *)v42.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v99.i8, (int8x8_t)vcgez_f32(v90)), 0);
                  *(int8x8_t *)v42.f32 = vuzp1_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v42.f32);
                  v99.i32[0] = -1;
                  __int32 v100 = v42.i32[0];
                  float32x4_t v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v42, v99), 0), (int8x16_t)v344, v345[0]);
                  uint64_t v101 = 1;
                  if (v100 == -1) {
                    uint64_t v102 = 1;
                  }
                  else {
                    uint64_t v102 = 2;
                  }
                }
                unsigned int v118 = v101;
              }
            }
            float32x4_t v127 = *(&v343 + v102);
            float32x4_t v128 = *(&v343 + v101);
            a12 = *(&v340 + v102);
            float32x4_t v129 = *(&v340 + v101);
            float32x4_t v130 = *(&v337 + v102);
            float32x4_t v131 = *(&v337 + v101);
            int v132 = *(&v335 + v102);
            int v133 = *(&v335 + v101);
            int v134 = *(&v333 + v102);
            int v135 = *(&v333 + v101);
            float32x4_t v343 = v127;
            float32x4_t v344 = v128;
            float32x4_t v340 = a12;
            float32x4_t v341 = v129;
            float32x4_t v337 = v130;
            float32x4_t v338 = v131;
            int v335 = v132;
            int v336 = v133;
            int v333 = v134;
            int v334 = v135;
            unsigned int v329 = v118;
          }
        }
        goto LABEL_49;
      }
      unsigned int v329 = 2;
      float32x4_t v103 = vmulq_f32(a12, a12);
      v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
      float32x2_t v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v104), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        float32x4_t v105 = vnegq_f32(v343);
        v105.i32[3] = 0;
        float32x4_t v106 = vmulq_f32(v105, a12);
        v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
        float32x2_t v107 = vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32);
        float32x2_t v108 = vrecpe_f32(v104);
        int v109 = 4;
        do
        {
          float32x2_t v108 = vmul_f32(v108, vrecps_f32(v104, v108));
          --v109;
        }
        while (v109);
        float32x4_t v42 = vmlaq_n_f32(v343, a12, vmax_f32(vmin_f32(vmul_f32(v107, v108), _D9), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v42 = v343;
      float32x4_t v43 = vsubq_f32(v344, v343);
      float32x4_t v44 = vmulq_f32(v43, v43);
      v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
      float32x2_t v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v45), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        float32x4_t v46 = vnegq_f32(v343);
        v46.i32[3] = 0;
        float32x4_t v47 = vmulq_f32(v46, v43);
        a12 = vpaddq_f32(v47, v47);
        *(float32x2_t *)a12.f32 = vpadd_f32(*(float32x2_t *)a12.f32, *(float32x2_t *)a12.f32);
        float32x2_t v48 = vrecpe_f32(v45);
        int v49 = 4;
        do
        {
          float32x2_t v48 = vmul_f32(v48, vrecps_f32(v45, v48));
          --v49;
        }
        while (v49);
        float32x4_t v42 = vmlaq_n_f32(v343, v43, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a12.f32, v48), _D9), 0).f32[0]);
LABEL_31:
        v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v329 = 1;
LABEL_49:
  float32x4_t v330 = v42;
  float32x4_t v136 = vmulq_f32(v42, v42);
  v136.i64[0] = vpaddq_f32(v136, v136).u64[0];
  float32x2_t v137 = vpadd_f32(*(float32x2_t *)v136.f32, *(float32x2_t *)v136.f32);
  float32x2_t v138 = vrsqrte_f32(v137);
  int v139 = 4;
  do
  {
    float32x2_t v138 = vmul_f32(v138, vrsqrts_f32(vmul_f32(v138, v138), v137));
    --v139;
  }
  while (v139);
  float32x2_t v59 = vmul_f32(v137, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v137), 0), (int8x8_t)_D9, (int8x8_t)v138));
  float32x2_t v140 = vrecpe_f32(v59);
  int v141 = 4;
  do
  {
    *(float32x2_t *)a12.f32 = vrecps_f32(v59, v140);
    float32x2_t v140 = vmul_f32(v140, *(float32x2_t *)a12.f32);
    --v141;
  }
  while (v141);
  float32x4_t v142 = vmulq_n_f32(v42, v140.f32[0]);
  v142.i32[3] = 0;
  float32x4_t v325 = v142;
  int32x4_t v60 = vdupq_lane_s32(vcgt_f32(v59, v23), 0);
  float32x4_t v61 = v42;
LABEL_54:
  float v143 = *(float *)&v28 + v27.f32[0];
  a12.i32[0] = -1;
  int32x4_t v315 = (int32x4_t)a12;
  v144.i64[0] = -1;
  v144.i64[1] = -1;
  for (float32x2_t i = v59; ; float32x2_t i = v159)
  {
    float32x4_t v146 = v42;
    v147.i64[0] = -1;
    v147.i64[1] = -1;
    *(int16x4_t *)v147.i8 = vmovn_s32(vceqq_s32(v60, v147));
    if (vuzp1_s8(*(int8x8_t *)v147.i8, *(int8x8_t *)v147.i8).u32[0] != -1) {
      break;
    }
    float32x2_t v327 = v59;
    float32x4_t v323 = v146;
    float32x4_t v148 = vnegq_f32(v146);
    v148.i32[3] = 0;
    uint64_t v149 = v329;
    float32x4_t v150 = *(float32x4_t **)(a1 + 8);
    float32x4_t v151 = vmulq_f32(v148, v150[3]);
    v151.i64[0] = vpaddq_f32(v151, v151).u64[0];
    float32x4_t v152 = vmulq_f32(v148, v150[4]);
    v152.i64[0] = vpaddq_f32(v152, v152).u64[0];
    *(int8x8_t *)v152.f32 = vand_s8((int8x8_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v151.f32), vpadd_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32)), (int8x8_t)0x100000001);
    *(&v335 + v329) = v152.i32[0];
    float32x4_t v324 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(*(int32x2_t *)v152.f32, 0), 0x1FuLL)), (int8x16_t)v150[3], (int8x16_t)v150[4]);
    uint64_t v153 = *(void *)(a2 + 8);
    int v154 = physx::Gu::ConvexHullV::supportVertexIndex(v153, &v330);
    float32x4_t v155 = v325;
    *(&v333 + v149) = v154;
    float32x4_t v156 = *(float32x4_t *)(*(void *)(v153 + 160) + 12 * v154);
    v156.i32[3] = 0;
    float32x4_t v42 = vsubq_f32(v324, v156);
    float32x4_t v157 = vmulq_f32(v325, v42);
    v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
    float v158 = vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32).f32[0];
    if (v158 > v143)
    {
      if (v14)
      {
        uint64_t v259 = v329;
        *a8 = v329;
        if (v259)
        {
          uint64_t v260 = &v333;
          char v261 = &v335;
          do
          {
            int v262 = *v261++;
            *v14++ = v262;
            int v263 = *v260++;
            *v13++ = v263;
            --v259;
          }
          while (v259);
        }
      }
      return 0;
    }
    float32x2_t v159 = v327;
    uint64_t v160 = v329;
    if (v158 > (float)(0.99977 * v327.f32[0]))
    {
      float32x2_t v264 = v320;
      if (!v14) {
        goto LABEL_121;
      }
      *a8 = v329;
      if (v160)
      {
        uint64_t v265 = &v333;
        int v266 = &v335;
        uint64_t v267 = v160;
        do
        {
          int v268 = *v266++;
          *v14++ = v268;
          int v269 = *v265++;
          *v13++ = v269;
          --v267;
        }
        while (v267);
LABEL_121:
        uint64_t v270 = a13;
        *(float32x4_t *)(a13 + 32) = v325;
        if (v160 != 3)
        {
          if (v160 != 2)
          {
            float32x4_t v271 = 0uLL;
            float32x4_t v272 = 0uLL;
            int v273 = a5;
            if (v160 == 1)
            {
              float32x4_t v271 = v340;
              float32x4_t v272 = v337;
              if (!a5) {
                goto LABEL_142;
              }
LABEL_138:
              *(float32x4_t *)uint64_t v270 = v271;
              *(float32x4_t *)(v270 + 16) = v272;
              uint64_t result = 2;
              *(float32x2_t *)(v270 + 64) = v159;
              return result;
            }
LABEL_137:
            if (!v273) {
              goto LABEL_142;
            }
            goto LABEL_138;
          }
          float32x4_t v287 = vsubq_f32(v343, v330);
          float32x4_t v288 = vsubq_f32(vsubq_f32(v344, v330), v287);
          float32x4_t v289 = vmulq_f32(v288, v288);
          v289.i64[0] = vpaddq_f32(v289, v289).u64[0];
          float32x2_t v290 = vpadd_f32(*(float32x2_t *)v289.f32, *(float32x2_t *)v289.f32);
          float32x2_t v291 = vrecpe_f32(v290);
          int v292 = 4;
          do
          {
            float32x2_t v291 = vmul_f32(v291, vrecps_f32(v290, v291));
            --v292;
          }
          while (v292);
          float32x4_t v293 = vnegq_f32(v287);
          v293.i32[3] = 0;
          float32x4_t v294 = vmulq_f32(v293, v288);
          v294.i64[0] = vpaddq_f32(v294, v294).u64[0];
          v293.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v290), (int8x8_t)v291, 0), vpadd_f32(*(float32x2_t *)v294.f32, *(float32x2_t *)v294.f32)).u32[0];
          float32x4_t v271 = vmlaq_n_f32(v340, vsubq_f32(v341, v340), v293.f32[0]);
          v271.i64[1] = vextq_s8((int8x16_t)v271, (int8x16_t)v271, 8uLL).u32[0];
          float32x4_t v272 = vmlaq_n_f32(v337, vsubq_f32(v338, v337), v293.f32[0]);
          v272.i64[1] = vextq_s8((int8x16_t)v272, (int8x16_t)v272, 8uLL).u32[0];
          if (a5) {
            goto LABEL_138;
          }
LABEL_142:
          int8x16_t v295 = (int8x16_t)vmlsq_lane_f32(v271, v155, v316, 0);
          v295.i64[1] = vextq_s8(v295, v295, 8uLL).u32[0];
          int8x16_t v296 = (int8x16_t)vmlaq_n_f32(v272, v155, v317);
          v296.i64[1] = vextq_s8(v296, v296, 8uLL).u32[0];
          *(int8x16_t *)uint64_t v270 = v295;
          *(int8x16_t *)(v270 + 16) = v296;
          *(float32x2_t *)(v270 + 64) = vsub_f32(v159, v264);
          return 2;
        }
        float32x2_t v331 = 0;
        float32x2_t v332 = 0;
        physx::Gu::barycentricCoordinates(&v330, &v343, &v344, (float32x4_t *)v345, &v332, &v331);
        float32x4_t v155 = v325;
        float32x2_t v159 = v327;
        float32x2_t v264 = v320;
        float32x4_t v282 = vmulq_n_f32(vsubq_f32(v341, v340), v332.f32[0]);
        v282.i32[3] = 0;
        float32x4_t v283 = vmulq_n_f32(vsubq_f32(v342, v340), v331.f32[0]);
        v283.i32[3] = 0;
        float32x4_t v284 = vaddq_f32(v282, v283);
        float32x4_t v285 = vmulq_n_f32(vsubq_f32(v338, v337), v332.f32[0]);
        v285.i32[3] = 0;
        float32x4_t v271 = vaddq_f32(v340, v284);
        float32x4_t v286 = vmulq_n_f32(vsubq_f32(v339, v337), v331.f32[0]);
        v286.i32[3] = 0;
        float32x4_t v272 = vaddq_f32(v337, vaddq_f32(v285, v286));
      }
      else
      {
        uint64_t v270 = a13;
        *(float32x4_t *)(a13 + 32) = v325;
        float32x4_t v271 = 0uLL;
        float32x4_t v272 = 0uLL;
      }
      int v273 = a5;
      goto LABEL_137;
    }
    *(&v340 + v329) = v324;
    *(&v337 + v160) = v156;
    unsigned int v329 = v160 + 1;
    *(&v343 + v160) = v42;
    if (v160 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v343, &v340, &v337, &v335, &v333, (int *)&v329);
      float32x2_t v159 = v327;
LABEL_66:
      float32x4_t v61 = v323;
      goto LABEL_101;
    }
    if (v160 == 2)
    {
      float32x4_t v42 = v343;
      float32x4_t v169 = vsubq_f32(v344, v343);
      float32x4_t v170 = vsubq_f32((float32x4_t)v345[0], v343);
      int8x8_t v172 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v169.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v170, (int8x16_t)v170, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL), *(float32x2_t *)v170.f32);
      *(int8x8_t *)v171.f32 = vext_s8(v172, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL), *(float32x2_t *)v170.f32), *(float32x2_t *)v169.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL)), 4uLL);
      v172.i32[1] = 0;
      unsigned int v329 = 3;
      float32x2_t v173 = vpadd_f32(vmul_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32), vmul_f32((float32x2_t)v172.u32[0], (float32x2_t)v172.u32[0]));
      float32x2_t v174 = vpadd_f32(v173, v173);
      if (v174.f32[0] <= 0.00000011921)
      {
        unsigned int v329 = 2;
        float32x4_t v211 = vmulq_f32(v169, v169);
        v211.i64[0] = vpaddq_f32(v211, v211).u64[0];
        float32x2_t v212 = vpadd_f32(*(float32x2_t *)v211.f32, *(float32x2_t *)v211.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v212), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
        {
          float32x4_t v213 = vnegq_f32(v343);
          v213.i32[3] = 0;
          float32x4_t v214 = vmulq_f32(v213, v169);
          v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
          float32x2_t v215 = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32);
          float32x2_t v216 = vrecpe_f32(v212);
          int v217 = 4;
          float32x4_t v61 = v323;
          do
          {
            float32x2_t v216 = vmul_f32(v216, vrecps_f32(v212, v216));
            --v217;
          }
          while (v217);
          float32x4_t v42 = vmlaq_n_f32(v343, v169, vmax_f32(vmin_f32(vmul_f32(v215, v216), _D9), 0).f32[0]);
LABEL_81:
          v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v329 = 1;
        goto LABEL_66;
      }
      if (v174.f32[0] == 0.0)
      {
        float32x4_t v42 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v171.u32[2] = v172;
      float32x2_t v175 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
      float32x2_t v176 = (float32x2_t)vextq_s8(v345[0], v345[0], 8uLL).u64[0];
      float32x2_t v177 = (float32x2_t)vextq_s8(v345[0], v345[0], 4uLL).u64[0];
      float32x2_t v178 = (float32x2_t)vextq_s8((int8x16_t)v344, (int8x16_t)v344, 4uLL).u64[0];
      int8x8_t v179 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v344.f32, v177), v178, *(float32x2_t *)v345[0].i8);
      *(int8x8_t *)v180.f32 = vext_s8(v179, (int8x8_t)vmls_f32(vmul_f32(v175, *(float32x2_t *)v345[0].i8), *(float32x2_t *)v344.f32, v176), 4uLL);
      v180.i64[1] = v179.u32[0];
      float32x2_t v181 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
      float32x2_t v182 = (float32x2_t)vextq_s8((int8x16_t)v343, (int8x16_t)v343, 4uLL).u64[0];
      int8x8_t v183 = (int8x8_t)vmls_f32(vmul_f32(v182, *(float32x2_t *)v345[0].i8), v177, *(float32x2_t *)v343.f32);
      *(int8x8_t *)v184.f32 = vext_s8(v183, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v176), *(float32x2_t *)v345[0].i8, v181), 4uLL);
      v184.i64[1] = v183.u32[0];
      int8x8_t v185 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v343.f32, v178), v182, *(float32x2_t *)v344.f32);
      *(int8x8_t *)v186.f32 = vext_s8(v185, (int8x8_t)vmls_f32(vmul_f32(v181, *(float32x2_t *)v344.f32), *(float32x2_t *)v343.f32, v175), 4uLL);
      v186.i64[1] = v185.u32[0];
      float32x4_t v187 = vmulq_f32(v180, v171);
      v187.i64[0] = vpaddq_f32(v187, v187).u64[0];
      float32x2_t v188 = vpadd_f32(*(float32x2_t *)v187.f32, *(float32x2_t *)v187.f32);
      float32x4_t v189 = vmulq_f32(v184, v171);
      v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
      float32x2_t v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
      float32x4_t v191 = vmulq_f32(v186, v171);
      v191.i64[0] = vpaddq_f32(v191, v191).u64[0];
      float32x2_t v192 = vpadd_f32(*(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v190), (int8x8_t)vcgez_f32(v188)), (int8x8_t)vcgez_f32(v192)), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
      {
        float32x4_t v193 = vnegq_f32(v343);
        v193.i32[3] = 0;
        float32x4_t v194 = vnegq_f32(v344);
        v194.i32[3] = 0;
        float32x4_t v195 = vmulq_f32(v193, v169);
        v195.i64[0] = vpaddq_f32(v195, v195).u64[0];
        float32x2_t v196 = vpadd_f32(*(float32x2_t *)v195.f32, *(float32x2_t *)v195.f32);
        float32x4_t v197 = vmulq_f32(v169, v194);
        v197.i64[0] = vpaddq_f32(v197, v197).u64[0];
        float32x2_t v198 = vpadd_f32(*(float32x2_t *)v197.f32, *(float32x2_t *)v197.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v196), (int8x8_t)vclez_f32(v198)), (int8x8_t)vclez_f32(v192)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
        {
          float32x2_t v223 = vsub_f32(v196, v198);
          float32x2_t v224 = vrecpe_f32(v223);
          int v225 = 4;
          do
          {
            float32x2_t v224 = vmul_f32(v224, vrecps_f32(v223, v224));
            --v225;
          }
          while (v225);
          uint64_t v210 = 0;
          float32x4_t v42 = vmlaq_n_f32(v343, v169, vmul_f32(v196, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v223), (float32x2_t)0x3400000034000000), (int8x8_t)v224, 0)).f32[0]);
          v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
          unsigned int v226 = 2;
          uint64_t v209 = 1;
        }
        else
        {
          float32x4_t v199 = vnegq_f32((float32x4_t)v345[0]);
          v199.i32[3] = 0;
          float32x4_t v200 = vmulq_f32(v194, v170);
          v200.i64[0] = vpaddq_f32(v200, v200).u64[0];
          float32x2_t v201 = vpadd_f32(*(float32x2_t *)v200.f32, *(float32x2_t *)v200.f32);
          float32x4_t v202 = vmulq_f32(v169, v199);
          v202.i64[0] = vpaddq_f32(v202, v202).u64[0];
          float32x2_t v203 = vpadd_f32(*(float32x2_t *)v202.f32, *(float32x2_t *)v202.f32);
          float32x4_t v204 = vmulq_f32(v170, v199);
          v204.i64[0] = vpaddq_f32(v204, v204).u64[0];
          float32x2_t v205 = vpadd_f32(*(float32x2_t *)v204.f32, *(float32x2_t *)v204.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v201, v198), (int8x8_t)vcge_f32(v203, v205)), (int8x8_t)vclez_f32(v188)), 0), *(int8x8_t *)v343.f32).u32[0] != -1)
          {
            float32x4_t v206 = vmulq_f32(v193, v170);
            v206.i64[0] = vpaddq_f32(v206, v206).u64[0];
            float32x2_t v207 = vpadd_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v207), (int8x8_t)vclez_f32(v205)), (int8x8_t)vclez_f32(v190)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
            {
              float32x2_t v232 = vsub_f32(v207, v205);
              float32x2_t v233 = vrecpe_f32(v232);
              int v234 = 4;
              float32x4_t v61 = v323;
              do
              {
                float32x2_t v233 = vmul_f32(v233, vrecps_f32(v232, v233));
                --v234;
              }
              while (v234);
              uint64_t v210 = 0;
              float32x4_t v42 = vmlaq_n_f32(v343, v170, vmul_f32(v207, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v232), (float32x2_t)0x3400000034000000), (int8x8_t)v233, 0)).f32[0]);
              v42.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u32[0];
              uint64_t v209 = 2;
              unsigned int v226 = 2;
            }
            else
            {
              float32x4_t v61 = v323;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v207), (int8x8_t)vclez_f32(v196)), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
              {
                uint64_t v210 = 0;
                uint64_t v209 = 1;
              }
              else
              {
                *(int16x4_t *)v42.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v198, v201), (int8x8_t)vcgez_f32(v198)), 0);
                *(int8x8_t *)v42.f32 = vuzp1_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v42.f32);
                __int32 v208 = v42.i32[0];
                float32x4_t v42 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v42, v315), 0), (int8x16_t)v344, v345[0]);
                uint64_t v209 = 1;
                if (v208 == -1) {
                  uint64_t v210 = 1;
                }
                else {
                  uint64_t v210 = 2;
                }
              }
              unsigned int v226 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v227 = vsub_f32(v201, v198);
          float32x2_t v228 = vadd_f32(v227, vsub_f32(v203, v205));
          float32x2_t v229 = vrecpe_f32(v228);
          int v230 = 4;
          do
          {
            float32x2_t v229 = vmul_f32(v229, vrecps_f32(v228, v229));
            --v230;
          }
          while (v230);
          int8x16_t v231 = (int8x16_t)vmlaq_n_f32(v344, vsubq_f32((float32x4_t)v345[0], v344), vmul_f32(v227, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v228), (float32x2_t)0x3400000034000000), (int8x8_t)v229, 0)).f32[0]);
          v231.i64[1] = vextq_s8(v231, v231, 8uLL).u32[0];
          uint64_t v209 = 2;
          float32x4_t v42 = (float32x4_t)v231;
          uint64_t v210 = 1;
          unsigned int v226 = 2;
        }
        float32x4_t v61 = v323;
LABEL_100:
        float32x4_t v235 = *(&v343 + v210);
        float32x4_t v236 = *(&v343 + v209);
        float32x4_t v237 = *(&v340 + v210);
        float32x4_t v238 = *(&v340 + v209);
        float32x4_t v239 = *(&v337 + v210);
        float32x4_t v240 = *(&v337 + v209);
        int v241 = *(&v335 + v210);
        int v242 = *(&v335 + v209);
        int v243 = *(&v333 + v210);
        int v244 = *(&v333 + v209);
        float32x4_t v343 = v235;
        float32x4_t v344 = v236;
        float32x4_t v340 = v237;
        float32x4_t v341 = v238;
        float32x4_t v337 = v239;
        float32x4_t v338 = v240;
        int v335 = v241;
        int v336 = v242;
        int v333 = v243;
        int v334 = v244;
        unsigned int v329 = v226;
        goto LABEL_101;
      }
      int8x16_t v218 = (int8x16_t)vmulq_f32(v343, v171);
      float32x2_t v219 = (float32x2_t)vextq_s8(v218, v218, 8uLL).u64[0];
      float32x2_t v220 = vrecpe_f32(v174);
      int v221 = 4;
      float32x4_t v61 = v323;
      do
      {
        float32x2_t v220 = vmul_f32(v220, vrecps_f32(v174, v220));
        --v221;
      }
      while (v221);
      float32x2_t v222 = vpadd_f32(*(float32x2_t *)v218.i8, v219);
      float32x4_t v42 = vmulq_n_f32(v171, vmul_f32(v220, vpadd_f32(v222, v222)).f32[0]);
      v42.i32[3] = 0;
    }
    else
    {
      float32x4_t v61 = v323;
      if (v160 == 1)
      {
        float32x4_t v42 = v343;
        float32x4_t v161 = vsubq_f32(v344, v343);
        float32x4_t v162 = vmulq_f32(v161, v161);
        v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
        float32x2_t v163 = vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v163), 0), *(int8x8_t *)v343.f32).u32[0] == -1)
        {
          unsigned int v329 = 1;
          goto LABEL_101;
        }
        float32x4_t v164 = vnegq_f32(v343);
        v164.i32[3] = 0;
        float32x4_t v165 = vmulq_f32(v164, v161);
        v165.i64[0] = vpaddq_f32(v165, v165).u64[0];
        float32x2_t v166 = vpadd_f32(*(float32x2_t *)v165.f32, *(float32x2_t *)v165.f32);
        float32x2_t v167 = vrecpe_f32(v163);
        int v168 = 4;
        do
        {
          float32x2_t v167 = vmul_f32(v167, vrecps_f32(v163, v167));
          --v168;
        }
        while (v168);
        float32x4_t v42 = vmlaq_n_f32(v343, v161, vmax_f32(vmin_f32(vmul_f32(v166, v167), _D9), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v330 = v42;
    float32x4_t v245 = vmulq_f32(v42, v42);
    v245.i64[0] = vpaddq_f32(v245, v245).u64[0];
    float32x2_t v246 = vpadd_f32(*(float32x2_t *)v245.f32, *(float32x2_t *)v245.f32);
    float32x2_t v247 = vrsqrte_f32(v246);
    int v248 = 4;
    do
    {
      float32x2_t v247 = vmul_f32(v247, vrsqrts_f32(vmul_f32(v247, v247), v246));
      --v248;
    }
    while (v248);
    float32x2_t v59 = vmul_f32(v246, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v246), 0), (int8x8_t)_D9, (int8x8_t)v247));
    float32x2_t v249 = vrecpe_f32(v59);
    int v250 = 4;
    do
    {
      float32x2_t v249 = vmul_f32(v249, vrecps_f32(v59, v249));
      --v250;
    }
    while (v250);
    float32x4_t v251 = vmulq_n_f32(v42, v249.f32[0]);
    v251.i32[3] = 0;
    float32x4_t v325 = v251;
    *(int32x2_t *)v251.f32 = vcgt_f32(v159, v59);
    int32x4_t v144 = vdupq_lane_s32(*(int32x2_t *)v251.f32, 0);
    int32x4_t v60 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v59, v23), *(int8x8_t *)v251.f32), 0);
  }
  int8x8_t v252 = (int8x8_t)vmovn_s32(vceqzq_s32(v144));
  uint64_t v253 = v329;
  if (vuzp1_s8(v252, v252).u32[0] != -1)
  {
    if (v14)
    {
      *a8 = v329;
      if (v253)
      {
        long long v254 = &v333;
        float32x4_t v255 = &v335;
        do
        {
          int v256 = *v255++;
          *v14++ = v256;
          int v257 = *v254++;
          *v13++ = v257;
          --v253;
        }
        while (v253);
      }
    }
    return 5;
  }
  float32x2_t v274 = v320;
  if (v14)
  {
    uint64_t v275 = v329 - 1;
    *a8 = v329 - 1;
    if (v253 != 1)
    {
      float32x4_t v276 = &v333;
      float32x4_t v277 = &v335;
      do
      {
        int v278 = *v277++;
        *v14++ = v278;
        int v279 = *v276++;
        *v13++ = v279;
        --v275;
      }
      while (v275);
      goto LABEL_130;
    }
LABEL_133:
    float32x4_t v280 = v340;
    float32x4_t v281 = v337;
  }
  else
  {
LABEL_130:
    float32x4_t v330 = v61;
    if (v253 == 3)
    {
      float32x2_t v331 = 0;
      float32x2_t v332 = 0;
      float32x4_t v328 = v61;
      physx::Gu::barycentricCoordinates(&v330, &v343, &v344, (float32x4_t *)v345, &v332, &v331);
      float32x2_t v274 = v320;
      float32x4_t v297 = vmulq_n_f32(vsubq_f32(v341, v340), v332.f32[0]);
      v297.i32[3] = 0;
      float32x4_t v298 = vmulq_n_f32(vsubq_f32(v342, v340), v331.f32[0]);
      v298.i32[3] = 0;
      float32x4_t v299 = vaddq_f32(v297, v298);
      float32x4_t v300 = vmulq_n_f32(vsubq_f32(v338, v337), v332.f32[0]);
      v300.i32[3] = 0;
      float32x4_t v280 = vaddq_f32(v340, v299);
      float32x4_t v301 = vmulq_n_f32(vsubq_f32(v339, v337), v331.f32[0]);
      float32x4_t v61 = v328;
      v301.i32[3] = 0;
      float32x4_t v281 = vaddq_f32(v337, vaddq_f32(v300, v301));
    }
    else if (v253 == 2)
    {
      float32x4_t v302 = vsubq_f32(v343, v61);
      float32x4_t v303 = vsubq_f32(vsubq_f32(v344, v61), v302);
      float32x4_t v304 = vmulq_f32(v303, v303);
      v304.i64[0] = vpaddq_f32(v304, v304).u64[0];
      float32x2_t v305 = vpadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v304.f32);
      float32x2_t v306 = vrecpe_f32(v305);
      int v307 = 4;
      do
      {
        float32x2_t v306 = vmul_f32(v306, vrecps_f32(v305, v306));
        --v307;
      }
      while (v307);
      float32x4_t v308 = vnegq_f32(v302);
      v308.i32[3] = 0;
      float32x4_t v309 = vmulq_f32(v308, v303);
      v309.i64[0] = vpaddq_f32(v309, v309).u64[0];
      v308.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v305), (int8x8_t)v306, 0), vpadd_f32(*(float32x2_t *)v309.f32, *(float32x2_t *)v309.f32)).u32[0];
      float32x4_t v280 = vmlaq_n_f32(v340, vsubq_f32(v341, v340), v308.f32[0]);
      v280.i64[1] = vextq_s8((int8x16_t)v280, (int8x16_t)v280, 8uLL).u32[0];
      float32x4_t v281 = vmlaq_n_f32(v337, vsubq_f32(v338, v337), v308.f32[0]);
      v281.i64[1] = vextq_s8((int8x16_t)v281, (int8x16_t)v281, 8uLL).u32[0];
    }
    else
    {
      float32x4_t v280 = 0uLL;
      float32x4_t v281 = 0uLL;
      if (v253 == 1) {
        goto LABEL_133;
      }
    }
  }
  float32x2_t v310 = vrecpe_f32(i);
  int v311 = 4;
  do
  {
    float32x2_t v310 = vmul_f32(v310, vrecps_f32(i, v310));
    --v311;
  }
  while (v311);
  float32x4_t v312 = vmulq_n_f32(v61, v310.f32[0]);
  v312.i32[3] = 0;
  *(float32x4_t *)(a13 + 32) = v312;
  *(float32x4_t *)(a13 + 48) = v325;
  if (a5)
  {
    *(float32x4_t *)a13 = v280;
    *(float32x4_t *)(a13 + 16) = v281;
    *(float32x2_t *)(a13 + 64) = i;
  }
  else
  {
    int8x16_t v313 = (int8x16_t)vmlsq_lane_f32(v280, v312, v316, 0);
    v313.i64[1] = vextq_s8(v313, v313, 8uLL).u32[0];
    int8x16_t v314 = (int8x16_t)vmlaq_n_f32(v281, v312, v317);
    v314.i64[1] = vextq_s8(v314, v314, 8uLL).u32[0];
    *(int8x16_t *)a13 = v313;
    *(int8x16_t *)(a13 + 16) = v314;
    *(float32x2_t *)(a13 + 64) = vsub_f32(i, v274);
    if (vcge_f32(v274, i).u32[0]) {
      return 2;
    }
  }
  return 4;
}

uint64_t physx::Gu::fullContactsGenerationCapsuleConvex(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, int32x4_t *a5, uint64_t a6, uint64_t a7, int a8, float a9, float a10, uint64_t a11, float32x4_t *a12, float32x2_t *a13, float32x2_t *a14, char a15)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  physx::Gu::getPCMConvexData(a2, a8, (uint64_t)v41);
  v42[4] = a5;
  v42[5] = a2 + 3;
  v42[6] = a2 + 6;
  if (a8)
  {
    char v22 = 1;
    float32x2_t v23 = &unk_26E728728;
  }
  else
  {
    char v22 = 0;
    float32x2_t v23 = &unk_26E728778;
  }
  char v43 = v22;
  v42[0] = v23;
  float32x4_t v44 = a2;
  unsigned int v40 = 0;
  uint64_t FullContactManifold = physx::Gu::generateFullContactManifold((float32x4_t *)a1, (uint64_t)v41, v42, a3, a6, (int *)&v40, a14, a12, a9, a10, a13, a15);
  if (FullContactManifold)
  {
    if (v40)
    {
      physx::Gu::PersistentContactManifold::addBatchManifoldContacts2(a11, a6, v40);
LABEL_8:
      float32x4_t v25 = *(float32x4_t *)a5;
      v25.i32[3] = 0;
      float32x2_t v26 = (float32x2_t)vdupq_laneq_s32(*a5, 3).u64[0];
      float32x4_t v27 = vmulq_n_f32(*a12, vmla_f32((float32x2_t)0xBF000000BF000000, v26, v26).f32[0]);
      v27.i32[3] = 0;
      float32x2_t v28 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      float32x2_t v29 = (float32x2_t)vextq_s8(*(int8x16_t *)a12, *(int8x16_t *)a12, 8uLL).u64[0];
      int8x8_t v30 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a5->i8, (float32x2_t)vext_s8(*(int8x8_t *)a12->f32, (int8x8_t)v29, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)a5->i8, (int8x8_t)v28, 4uLL), *(float32x2_t *)a12->f32);
      *(int8x8_t *)v31.f32 = vext_s8(v30, (int8x8_t)vmls_f32(vmul_f32(v28, *(float32x2_t *)a12->f32), *(float32x2_t *)a5->i8, v29), 4uLL);
      v31.i64[1] = v30.u32[0];
      float32x4_t v32 = vmlaq_laneq_f32(v27, v31, *(float32x4_t *)a5, 3);
      v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
      float32x4_t v33 = vmulq_f32(v25, *a12);
      v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
      float32x4_t v34 = vmlaq_n_f32(v32, v25, vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0]);
      float32x4_t v35 = vaddq_f32(v34, v34);
      v35.i32[3] = 0;
      *a12 = v35;
      physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(a11, a7, a12, a12, a4, (float32x2_t *)(a1 + 80), a14);
      return FullContactManifold;
    }
    if ((a15 & 1) == 0) {
      goto LABEL_8;
    }
  }
  return FullContactManifold;
}

BOOL physx::Gu::pcmContactCapsuleHeightField(uint64_t a1, float32x2_t *a2, float32x4_t *a3, uint64_t a4, int32x2_t *a5, float32x4_t **a6, uint64_t a7, double a8)
{
  uint64_t v237 = *MEMORY[0x263EF8340];
  uint64_t v9 = *a6;
  LODWORD(a8) = *(_DWORD *)(a1 + 4);
  int32x2_t v10 = vdup_lane_s32(*(int32x2_t *)&a8, 0);
  float32x2_t v214 = (float32x2_t)vdup_lane_s32(*a5, 0);
  float32x2_t v215 = (float32x2_t)v10;
  v11.i64[0] = a3[1].i64[0];
  v11.i64[1] = a3[1].u32[2];
  v213[0] = *a3;
  v213[1] = v11;
  v12.i64[0] = *(void *)(a4 + 16);
  v12.i64[1] = *(unsigned int *)(a4 + 24);
  v212[0] = *(float32x4_t *)a4;
  v212[1] = v12;
  float32x4_t v13 = vnegq_f32(v212[0]);
  float32x4_t v14 = v13;
  v14.i32[3] = 0;
  float32x4_t v15 = vsubq_f32(v11, v12);
  float32x2_t v16 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v212[0], 3).u64[0];
  float32x4_t v17 = vmulq_n_f32(v15, vmla_f32((float32x2_t)0xBF000000BF000000, v16, v16).f32[0]);
  v17.i32[3] = 0;
  float32x2_t v18 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  float32x2_t v19 = (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v18, 4uLL);
  int8x8_t v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL)), v19, *(float32x2_t *)v15.f32);
  *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v18, *(float32x2_t *)v15.f32), *(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL)), 4uLL);
  v21.i64[1] = v20.u32[0];
  float32x4_t v22 = vmlaq_laneq_f32(v17, v21, v212[0], 3);
  v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
  float32x4_t v23 = vmulq_f32(v14, v15);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  float32x4_t v24 = vmlaq_n_f32(v22, v14, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]);
  float32x4_t v25 = vaddq_f32(v24, v24);
  v25.i32[3] = 0;
  float32x4_t v26 = v213[0];
  v26.i32[3] = 0;
  float32x4_t v27 = vmulq_f32(v26, v14);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  float32x2_t v28 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v213[0], (int8x16_t)v213[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v212[0], (int8x16_t)v212[0], 8uLL)), vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32));
  v27.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  int8x8_t v29 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v213[0].f32, *(int8x8_t *)v27.f32, 4uLL), *(float32x2_t *)v13.f32), v19, *(float32x2_t *)v213[0].f32);
  *(int8x8_t *)v30.f32 = vext_s8(v29, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v213[0].f32, v18), *(float32x2_t *)v13.f32, *(float32x2_t *)v27.f32), 4uLL);
  *(int8x8_t *)&v30.u32[2] = v29;
  float32x4_t v31 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v14, v213[0], 3), vmulq_laneq_f32(v26, v212[0], 3)), v30);
  float32x4_t v32 = v31;
  v32.i32[3] = v28.i32[1];
  float32x2_t v211 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)&a8);
  int8x16_t v33 = (int8x16_t)vabdq_f32(v25, v9[1]);
  *(float32x2_t *)v33.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v33.i8);
  float32x4_t v34 = vmulq_f32(v32, *v9);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  __asm { FMOV            V5.2S, #1.0 }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)&a8))), 0), *(int8x8_t *)&a8).u32[0] == -1)
  {
    v9[3].i8[14] = 0;
    *uint64_t v9 = v32;
    v9[1] = v25;
    float32x2_t v209 = a2[1];
    uint64_t v210 = a2;
    float v71 = a2[3].f32[0];
    int32x2_t v207 = vrev64_s32((int32x2_t)vdiv_f32(_D5, a2[2]));
    float v208 = 1.0 / v71;
    float v72 = a3->f32[0];
    float v73 = a3->f32[1];
    float v74 = v72 + v72;
    float v76 = a3->f32[2];
    float v75 = a3->f32[3];
    float v77 = v75 + v75;
    float v78 = (float)((float)(v75 * (float)(v75 + v75)) + -1.0) + (float)(v72 * (float)(v72 + v72));
    float v79 = (float)(v74 * v73) + (float)(v76 * (float)(v75 + v75));
    float v80 = (float)(v74 * v76) - (float)(v73 * v77);
    float v81 = *(float *)(a1 + 8);
    float v82 = v78 * v81;
    float v83 = v81 * v79;
    float v84 = v80 * v81;
    float v85 = *(float *)(a1 + 4) + *(float *)a5->i32;
    float v86 = a3[1].f32[0] - *(float *)(a4 + 16);
    float v87 = a3[1].f32[1] - *(float *)(a4 + 20);
    float v88 = a3[1].f32[2] - *(float *)(a4 + 24);
    float v89 = v86 + v86;
    float v90 = v87 + v87;
    float v91 = v88 + v88;
    float v93 = *(float *)(a4 + 8);
    float v92 = *(float *)(a4 + 12);
    float v94 = (float)(v92 * v92) + -0.5;
    float v95 = *(float *)(a4 + 4);
    float v96 = (float)((float)(v90 * v95) + (float)(*(float *)a4 * v89)) + (float)(v93 * v91);
    *(float *)&unsigned int v97 = (float)((float)(v89 * v94) - (float)((float)((float)(v95 * v91) - (float)(v93 * v90)) * v92))
                   + (float)(*(float *)a4 * v96);
    *(float *)&unsigned int v98 = (float)((float)(v90 * v94)
                           - (float)((float)((float)(v93 * v89) - (float)(*(float *)a4 * v91)) * v92))
                   + (float)(v95 * v96);
    *(float *)&unsigned int v99 = (float)((float)(v91 * v94)
                           - (float)((float)((float)(*(float *)a4 * v90) - (float)(v95 * v89)) * v92))
                   + (float)(v93 * v96);
    float v100 = v82 + v82;
    float v101 = v83 + v83;
    float v102 = v84 + v84;
    float v103 = (float)((float)(v101 * v95) + (float)(*(float *)a4 * v100)) + (float)(v93 * v102);
    *(float *)&unsigned int v104 = (float)((float)(v100 * v94) - (float)((float)((float)(v95 * v102) - (float)(v93 * v101)) * v92))
                    + (float)(*(float *)a4 * v103);
    *(float *)&unsigned int v105 = (float)((float)(v101 * v94)
                            - (float)((float)((float)(v93 * v100) - (float)(*(float *)a4 * v102)) * v92))
                    + (float)(v95 * v103);
    *(float *)&unsigned int v106 = (float)((float)(v102 * v94)
                            - (float)((float)((float)(*(float *)a4 * v101) - (float)(v95 * v100)) * v92))
                    + (float)(v93 * v103);
    v107.i64[0] = __PAIR64__(v98, v97);
    v107.i64[1] = v99;
    v108.i64[0] = __PAIR64__(v105, v104);
    v108.i64[1] = v106;
    int v232 = 4;
    float32x4_t v228 = v107;
    float32x2_t v236 = (float32x2_t)v10;
    float32x4_t v234 = vaddq_f32(v107, v108);
    float32x4_t v235 = vsubq_f32(v107, v108);
    int v229 = LODWORD(a8);
    int v230 = LODWORD(a8);
    int v231 = LODWORD(a8);
    char v233 = 1;
    v216.i64[0] = (uint64_t)&unk_26E729D40;
    v216.i64[1] = (uint64_t)&v207;
    *(void *)&long long v217 = a4;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)&v209 + 104))(&v202);
    BYTE8(v217) = (v202 & 1) == 0;
    v216.i64[0] = (uint64_t)&unk_26E729CE8;
    physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration((unint64_t)v218, &v214, &v211, v213, v212, (uint64_t)v9, a7, 0, 0);
    float32x2_t v227 = &v228;
    float32x2_t v225 = vadd_f32(v236, v214);
    float32x2_t v226 = vmul_f32(v225, v225);
    float v109 = v85 + *(float *)(a1 + 8);
    float v110 = *(float *)(a4 + 4);
    float v111 = *(float *)(a4 + 8);
    float v112 = *(float *)(a4 + 12);
    float v113 = a3[1].f32[0] - *(float *)(a4 + 16);
    float v114 = a3[1].f32[1] - *(float *)(a4 + 20);
    float v115 = a3[1].f32[2] - *(float *)(a4 + 24);
    float v116 = v113 + v113;
    float v117 = v114 + v114;
    float v118 = v115 + v115;
    float v119 = (float)(v112 * v112) + -0.5;
    float v120 = (float)((float)-(float)(v110 * v117) - (float)(*(float *)a4 * v116)) - (float)(v111 * v118);
    float v121 = (float)((float)(v112 * (float)((float)(v111 * v117) - (float)(v110 * v118))) + (float)(v116 * v119))
         - (float)(*(float *)a4 * v120);
    float v122 = (float)((float)(v112 * (float)((float)(*(float *)a4 * v118) - (float)(v111 * v116))) + (float)(v117 * v119))
         - (float)(v110 * v120);
    float v123 = (float)((float)(v112 * (float)((float)(v110 * v116) - (float)(*(float *)a4 * v117))) + (float)(v118 * v119))
         - (float)(v111 * v120);
    float v125 = a3->f32[2];
    float v124 = a3->f32[3];
    float v126 = a3->f32[1];
    float v127 = (float)((float)((float)(v112 * a3->f32[0]) - (float)(*(float *)a4 * v124)) - (float)(v110 * v125))
         + (float)(v126 * v111);
    float v128 = (float)((float)((float)(v112 * v126) - (float)(v110 * v124)) - (float)(v111 * a3->f32[0]))
         + (float)(v125 * *(float *)a4);
    float v129 = (float)((float)((float)(v112 * v125) - (float)(v111 * v124)) - (float)(*(float *)a4 * v126))
         + (float)(a3->f32[0] * v110);
    float v130 = (float)((float)((float)(*(float *)a4 * a3->f32[0]) + (float)(v112 * v124)) + (float)(v110 * v126))
         + (float)(v111 * v125);
    float v131 = (float)((float)(v109 - v109) * 0.5) + (float)((float)(v109 - v109) * 0.5);
    float v132 = (float)((float)(v85 - v85) * 0.5) + (float)((float)(v85 - v85) * 0.5);
    float v133 = (float)(v130 * v130) + -0.5;
    float v134 = (float)((float)(v132 * v128) + (float)(v127 * v131)) + (float)(v129 * v132);
    float v135 = (float)((float)(v130 * (float)((float)(v128 * v132) - (float)(v129 * v132))) + (float)(v131 * v133))
         + (float)(v127 * v134);
    float v136 = (float)((float)(v130 * (float)((float)(v129 * v131) - (float)(v127 * v132))) + (float)(v132 * v133))
         + (float)(v128 * v134);
    float v137 = (float)((float)(v130 * (float)((float)(v127 * v132) - (float)(v128 * v131))) + (float)(v132 * v133))
         + (float)(v129 * v134);
    float v138 = v121 + v135;
    float v139 = v122 + v136;
    float v140 = v123 + v137;
    float v141 = v128 + v128;
    float v142 = v129 + v129;
    float v143 = v128 * (float)(v128 + v128);
    float v144 = v129 * (float)(v129 + v129);
    float v145 = (float)(v127 + v127) * v128;
    float v146 = v129 * (float)(v127 + v127);
    float v147 = v130 * (float)(v127 + v127);
    float v148 = v129 * v141;
    float v149 = v130 * v141;
    float v150 = v130 * v142;
    float v151 = (float)(1.0 - v143) - v144;
    float v152 = 1.0 - (float)(v127 * (float)(v127 + v127));
    float v153 = v152 - v144;
    float v154 = v152 - v143;
    float v155 = (float)(v109 + v109) * 0.5;
    float v156 = (float)(v85 + v85) * 0.5;
    float v157 = v155 * (float)(v145 + v150);
    float v158 = v156 * (float)(v145 - v150);
    float v159 = v156 * (float)(v147 + v148);
    float v160 = fabsf(v156 * (float)(v146 + v149)) + (float)(fabsf(v158) + fabsf(v155 * v151));
    float v161 = fabsf(v156 * (float)(v148 - v147)) + (float)(fabsf(v157) + fabsf(v156 * v153));
    float v162 = fabsf(v156 * v154) + (float)(fabsf(v155 * (float)(v146 - v149)) + fabsf(v159));
    *(float *)&uint64_t v202 = v138 - v160;
    *((float *)&v202 + 1) = v139 - v161;
    float v203 = v140 - v162;
    float v204 = v138 + v160;
    float v205 = v139 + v161;
    float v206 = v140 + v162;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v207, (float *)a4, (float *)&v202, 0, (uint64_t)&v216);
    unsigned int v163 = v223;
    if (v223)
    {
      uint64_t v164 = v224;
      if (v224 >= 2)
      {
        int v165 = 0;
        unsigned int v166 = -1;
        uint64_t v167 = 1;
        do
        {
          int v168 = (char *)v218 + 8 * v167;
          uint64_t v169 = *((void *)v168 + 255);
          uint64_t v170 = *((void *)v168 + 256);
          if (COERCE_FLOAT(*(void *)(v169 + 40)) > COERCE_FLOAT(*(void *)(v170 + 40)))
          {
            *((void *)v168 + 255) = v170;
            *((void *)v168 + 256) = v169;
            if ((int)v167 - 2 >= 0)
            {
              float32x4_t v171 = &v219[v166 + 1];
              int v172 = v165;
              do
              {
                uint64_t v174 = *(v171 - 1);
                uint64_t v173 = *v171;
                if (COERCE_FLOAT(*(void *)(*v171 + 40)) >= COERCE_FLOAT(*(void *)(v174 + 40))) {
                  break;
                }
                *float32x4_t v171 = v174;
                *--float32x4_t v171 = v173;
                --v172;
              }
              while (v172 > 0);
            }
          }
          ++v167;
          ++v166;
          ++v165;
        }
        while (v167 != v164);
      }
      if (v164)
      {
        uint64_t v175 = 0;
        for (uint64_t i = 0; i != v164; ++i)
        {
          float32x2_t v177 = (float32x4_t *)v219[i];
          v177[1].i64[1] = (uint64_t)v177;
          v177[2].i64[0] = (uint64_t)v177;
          int v178 = v177[3].i32[1] - v177[3].i32[0];
          v177[3].i32[2] = v178;
          v177[1].i64[0] = 0;
          uint64_t v179 = v175;
          while (v179)
          {
            uint64_t v180 = *(void *)((char *)&v218[127] + v179 + 8);
            float32x2_t v181 = *(float32x4_t **)(v180 + 32);
            float32x4_t v182 = vmulq_f32(*v177, *v181);
            v182.i64[0] = vpaddq_f32(v182, v182).u64[0];
            v179 -= 8;
            if (vpadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v182.f32).f32[0] >= *(float *)&v220)
            {
              *(void *)(v180 + 16) = v177;
              v181[1].i64[1] = (uint64_t)v177;
              v177[2].i64[0] = (uint64_t)v181;
              *(_DWORD *)(*(void *)(v180 + 32) + 56) += v178;
              break;
            }
          }
          v175 += 8;
        }
        uint64_t v183 = 0;
        uint64_t v184 = v222;
        do
        {
          uint64_t v185 = v219[v183];
          if (v185) {
            _ZF = *(void *)(v185 + 32) == v185;
          }
          else {
            _ZF = 0;
          }
          if (_ZF)
          {
            while (*(void *)(v185 + 16))
            {
              uint64_t v187 = v185;
              uint64_t v185 = *(void *)(v185 + 16);
              unint64_t v188 = *(unsigned int *)(v187 + 48);
              unint64_t v189 = *(unsigned int *)(v187 + 52);
              if (v188 < v189)
              {
                unsigned int v190 = *(_DWORD *)(v185 + 52);
                do
                {
                  unsigned int v191 = *(_DWORD *)(v185 + 48);
                  if (v191 < v190)
                  {
                    do
                    {
                      unint64_t v192 = v184 + ((unint64_t)v191 << 6);
                      float32x4_t v193 = vsubq_f32(*(float32x4_t *)(v192 + 16), *(float32x4_t *)(v184 + (v188 << 6) + 16));
                      float32x4_t v194 = vmulq_f32(v193, v193);
                      v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
                      if (*(float *)v221 > vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32).f32[0])
                      {
                        float32x4_t v195 = (long long *)(v184 + ((unint64_t)(v190 - 1) << 6));
                        long long v196 = *v195;
                        long long v197 = v195[1];
                        long long v198 = v195[2];
                        *(_DWORD *)(v192 + 48) = *((_DWORD *)v195 + 12);
                        *(_OWORD *)(v192 + 16) = v197;
                        *(_OWORD *)(v192 + 32) = v198;
                        *(_OWORD *)unint64_t v192 = v196;
                        unsigned int v190 = *(_DWORD *)(v185 + 52) - 1;
                        *(_DWORD *)(v185 + 52) = v190;
                        --v191;
                      }
                      ++v191;
                    }
                    while (v191 < v190);
                    unint64_t v189 = *(unsigned int *)(v187 + 52);
                  }
                  ++v188;
                }
                while (v188 < v189);
              }
            }
          }
          ++v183;
        }
        while (v183 != v164);
        uint64_t v199 = v222;
        unsigned int v163 = v223;
        unsigned int v200 = v224;
      }
      else
      {
        unsigned int v200 = 0;
        uint64_t v199 = v222;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v219[36], v199, v163, v219, v200, (uint64_t)v221, &v220, 3);
    }
  }
  else
  {
    float32x2_t v39 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1);
    float32x2_t v40 = (float32x2_t)vdup_laneq_s32((int32x4_t)v31, 2);
    float32x4_t v41 = vaddq_f32(v31, v31);
    float32x2_t v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 1);
    float32x2_t v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)v41, 2);
    float32x2_t v44 = vmul_lane_f32(v39, *(float32x2_t *)v41.f32, 1);
    float32x2_t v45 = vmul_laneq_f32(v40, v41, 2);
    float32x2_t v46 = vmul_n_f32(v39, v41.f32[0]);
    float32x2_t v47 = vmul_n_f32(v40, v41.f32[0]);
    float32x2_t v48 = vmul_lane_f32(v40, *(float32x2_t *)v41.f32, 1);
    float32x2_t v49 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v41.f32), 0);
    *(float32x2_t *)v41.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.f32, 0), v28, 1);
    float32x2_t v50 = vmul_lane_f32(v42, v28, 1);
    float32x2_t v51 = vmul_lane_f32(v43, v28, 1);
    float32x2_t v52 = vsub_f32(_D5, v49);
    *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D5, v44), v45), (int8x8_t)vadd_f32(v46, v51), 4uLL);
    v53.i64[1] = vsub_f32(v47, v50).u32[0];
    *(int8x8_t *)&long long v54 = vext_s8((int8x8_t)vsub_f32(v46, v51), (int8x8_t)vsub_f32(v52, v45), 4uLL);
    *((void *)&v54 + 1) = vadd_f32(v48, *(float32x2_t *)v41.f32).u32[0];
    float32x4_t v216 = v53;
    long long v217 = v54;
    *(int8x8_t *)&long long v54 = vext_s8((int8x8_t)vadd_f32(v47, v50), (int8x8_t)vsub_f32(v48, *(float32x2_t *)v41.f32), 4uLL);
    *((void *)&v54 + 1) = vsub_f32(v52, v44).u32[0];
    v218[0] = v54;
    v218[1] = v25;
    *(float32x2_t *)v228.f32 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)&a8);
    unsigned int v55 = v9[3].u8[14];
    if (v9[3].i8[14])
    {
      unsigned int v56 = 0;
      do
      {
        int v57 = &v9[3].i8[v56 + 8];
        uint64_t v58 = *v57;
        unsigned int v59 = v55 - 2;
        if (v56 < v59) {
          unsigned int v59 = v56;
        }
        _X8 = (uint64_t)&v9[25 * v9[3].u8[v59 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        unsigned __int32 v64 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&v9[25 * *v57 + 4], &v216, (float32x2_t *)&v228).u32[0];
        if (v9[25 * v58 + 28].i32[0])
        {
          v9[2].i32[v58] = v64;
        }
        else
        {
          unsigned __int8 v65 = v9[3].i8[14] - 1;
          v9[3].i8[14] = v65;
          float32x2_t v66 = (char *)v9 + v65;
          __int8 v67 = v66[56];
          v66[56] = v58;
          *int v57 = v67;
          --v56;
        }
        ++v56;
        unsigned int v55 = v9[3].u8[14];
      }
      while (v56 < v55);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v9, a7, v213, (int32x4_t *)v212, &v215);
}

BOOL physx::Gu::pcmContactCapsuleMesh(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = v7;
  uint64_t v213 = *MEMORY[0x263EF8340];
  int32x2_t v10 = *v9;
  int32x2_t v11 = *(int32x2_t *)(v1 + 4);
  float32x2_t v189 = (float32x2_t)vdup_lane_s32(*v5, 0);
  int32x2_t v190 = vdup_lane_s32(v11, 0);
  v12.i64[0] = v3[1].i64[0];
  v12.i64[1] = v3[1].u32[2];
  v188[0] = *(int8x16_t *)v3;
  v188[1] = (int8x16_t)v12;
  v13.i64[0] = v4[1].i64[0];
  v13.i64[1] = v4[1].u32[2];
  v187[0] = *(int32x4_t *)v4;
  v187[1] = (int32x4_t)v13;
  float32x4_t v14 = vnegq_f32((float32x4_t)v187[0]);
  float32x4_t v15 = v14;
  v15.i32[3] = 0;
  float32x4_t v16 = vsubq_f32(v12, v13);
  float32x2_t v17 = (float32x2_t)vdupq_laneq_s32(v187[0], 3).u64[0];
  float32x4_t v18 = vmulq_n_f32(v16, vmla_f32((float32x2_t)0xBF000000BF000000, v17, v17).f32[0]);
  v18.i32[3] = 0;
  float32x2_t v19 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  float32x2_t v20 = (float32x2_t)vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)v19, 4uLL);
  int8x8_t v21 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v14.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL)), v20, *(float32x2_t *)v16.f32);
  *(int8x8_t *)v22.f32 = vext_s8(v21, (int8x8_t)vmls_f32(vmul_f32(v19, *(float32x2_t *)v16.f32), *(float32x2_t *)v14.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL)), 4uLL);
  v22.i64[1] = v21.u32[0];
  float32x4_t v23 = vmlaq_laneq_f32(v18, v22, (float32x4_t)v187[0], 3);
  v23.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
  float32x4_t v24 = vmulq_f32(v15, v16);
  v24.i64[0] = vpaddq_f32(v24, v24).u64[0];
  float32x4_t v25 = vmlaq_n_f32(v23, v15, vpadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32).f32[0]);
  float32x4_t v26 = vaddq_f32(v25, v25);
  v26.i32[3] = 0;
  float32x4_t v27 = (float32x4_t)v188[0];
  v27.i32[3] = 0;
  float32x4_t v28 = vmulq_f32(v27, v15);
  v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
  float32x2_t v29 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v188[0], v188[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v187[0], (int8x16_t)v187[0], 8uLL)), vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32));
  v28.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  *(float32x2_t *)v22.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v188[0].i8, *(int8x8_t *)v28.f32, 4uLL), *(float32x2_t *)v14.f32), v20, *(float32x2_t *)v188[0].i8);
  *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v22.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v188[0].i8, v19), *(float32x2_t *)v14.f32, *(float32x2_t *)v28.f32), 4uLL);
  v30.i64[1] = v22.i64[0];
  float32x4_t v31 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v15, (float32x4_t)v188[0], 3), vmulq_laneq_f32(v27, (float32x4_t)v187[0], 3)), v30);
  float32x4_t v32 = v31;
  v32.i32[3] = v29.i32[1];
  int8x16_t v33 = (int8x16_t)vabdq_f32(v26, v10[1]);
  *(float32x2_t *)v33.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v33.i8);
  float32x4_t v34 = vmulq_f32(v32, *v10);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), vmul_n_f32((float32x2_t)vdup_n_s32(0x3CA3D70Au), *(float *)v11.i32))), 0), (int8x8_t)v11).u32[0] == -1)
  {
    uint64_t v67 = v6;
    float32x2_t v68 = (float *)v5;
    float32x2_t v69 = (float *)v4;
    float32x2_t v70 = (float *)v3;
    uint64_t v71 = v2;
    uint64_t v72 = v1;
    float32x2_t v186 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3A83126Fu), *(float *)v11.i32);
    v183[0] = xmmword_23435FD50;
    v183[1] = xmmword_23435FD50;
    v183[2] = xmmword_234376D80;
    v183[3] = xmmword_23435FD60;
    uint64_t v184 = 0x3F80000000000000;
    float v74 = *(float *)(v2 + 4);
    float v73 = (float *)(v2 + 4);
    BOOL v75 = v74 == 1.0;
    float v76 = v73[1];
    float v77 = v73[2];
    char v185 = 0;
    if (v76 != 1.0) {
      BOOL v75 = 0;
    }
    BOOL v78 = v77 == 1.0 && v75;
    if (!v78) {
      physx::Cm::FastVertex2ShapeScaling::init((uint64_t)v183, v73, (float *)(v71 + 16));
    }
    float v79 = *v70;
    float v80 = v70[1];
    float v81 = v79 + v79;
    float v83 = v70[2];
    float v82 = v70[3];
    float v84 = v82 + v82;
    float v85 = (float)((float)(v82 * (float)(v82 + v82)) + -1.0) + (float)(v79 * (float)(v79 + v79));
    float v86 = (float)(v81 * v80) + (float)(v83 * (float)(v82 + v82));
    float v87 = (float)(v81 * v83) - (float)(v80 * v84);
    float v88 = *(float *)(v72 + 8);
    float v89 = v85 * v88;
    float v90 = v88 * v86;
    float v91 = v87 * v88;
    float v92 = v70[4];
    float v93 = v70[5];
    float v94 = v70[6];
    float v95 = v69[4];
    float v96 = v69[5];
    float v97 = v69[6];
    float v98 = (float)((float)(v92 + v89) - v95) + (float)((float)(v92 + v89) - v95);
    float v99 = (float)((float)(v93 + v90) - v96) + (float)((float)(v93 + v90) - v96);
    float v100 = (float)((float)(v91 + v94) - v97) + (float)((float)(v91 + v94) - v97);
    float v102 = v69[2];
    float v101 = v69[3];
    float v103 = (float)(v101 * v101) + -0.5;
    float v104 = v69[1];
    float v105 = (float)((float)(v99 * v104) + (float)(*v69 * v98)) + (float)(v102 * v100);
    float v106 = (float)((float)(v98 * v103) - (float)((float)((float)(v104 * v100) - (float)(v102 * v99)) * v101))
         + (float)(*v69 * v105);
    float v107 = (float)((float)(v99 * v103) - (float)((float)((float)(v102 * v98) - (float)(*v69 * v100)) * v101))
         + (float)(v104 * v105);
    float v108 = (float)((float)(v100 * v103) - (float)((float)((float)(*v69 * v99) - (float)(v104 * v98)) * v101))
         + (float)(v102 * v105);
    float v109 = (float)((float)(v92 - v89) - v95) + (float)((float)(v92 - v89) - v95);
    float v110 = (float)((float)(v93 - v90) - v96) + (float)((float)(v93 - v90) - v96);
    float v111 = (float)((float)(v94 - v91) - v97) + (float)((float)(v94 - v91) - v97);
    float v112 = (float)(v110 * v104) + (float)(*v69 * v109);
    float v113 = (float)(v109 * v103) - (float)((float)((float)(v104 * v111) - (float)(v102 * v110)) * v101);
    float v114 = (float)(v110 * v103) - (float)((float)((float)(v102 * v109) - (float)(*v69 * v111)) * v101);
    float v115 = (float)(*v69 * v110) - (float)(v104 * v109);
    float v116 = v112 + (float)(v102 * v111);
    float v117 = v113 + (float)(*v69 * v116);
    float v118 = v114 + (float)(v104 * v116);
    float v119 = (float)((float)(v111 * v103) - (float)(v115 * v101)) + (float)(v102 * v116);
    float v120 = *(float *)(v72 + 4) + *v68;
    float v121 = (float)(v92 - v95) + (float)(v92 - v95);
    float v122 = (float)(v93 - v96) + (float)(v93 - v96);
    float v123 = (float)(v94 - v97) + (float)(v94 - v97);
    float v124 = (float)((float)(v122 * v104) + (float)(*v69 * v121)) + (float)(v102 * v123);
    *(float *)&unsigned int v125 = (float)((float)(v121 * v103) - (float)((float)((float)(v104 * v123) - (float)(v102 * v122)) * v101))
                    + (float)(*v69 * v124);
    *(float *)&unsigned int v126 = (float)((float)(v122 * v103) - (float)((float)((float)(v102 * v121) - (float)(*v69 * v123)) * v101))
                    + (float)(v104 * v124);
    *(float *)&unsigned int v127 = (float)((float)(v123 * v103) - (float)((float)((float)(*v69 * v122) - (float)(v104 * v121)) * v101))
                    + (float)(v102 * v124);
    float v128 = v89 + v89;
    float v129 = v90 + v90;
    float v130 = v91 + v91;
    float v131 = (float)((float)(v129 * v104) + (float)(*v69 * v128)) + (float)(v102 * v130);
    *(float *)&unsigned int v132 = (float)((float)(v128 * v103) - (float)((float)((float)(v104 * v130) - (float)(v102 * v129)) * v101))
                    + (float)(*v69 * v131);
    *(float *)&unsigned int v133 = (float)((float)(v129 * v103) - (float)((float)((float)(v102 * v128) - (float)(*v69 * v130)) * v101))
                    + (float)(v104 * v131);
    float v134 = (float)(v130 * v103) - (float)((float)((float)(*v69 * v129) - (float)(v104 * v128)) * v101);
    v135.i32[3] = 0;
    v136.i64[0] = __PAIR64__(v126, v125);
    v136.i64[1] = v127;
    v135.i64[0] = __PAIR64__(v133, v132);
    v135.f32[2] = v134 + (float)(v102 * v131);
    int v208 = 4;
    float32x4_t v205 = v136;
    float32x2_t v212 = (float32x2_t)v190;
    float32x4_t v210 = vaddq_f32(v136, v135);
    float32x4_t v211 = vsubq_f32(v136, v135);
    int32x2_t v206 = vdup_lane_s32(v190, 0);
    __int32 v207 = v190.i32[0];
    char v209 = 1;
    *(float *)float32x4_t v182 = v106;
    *(float *)&v182[1] = v107;
    *(float *)&v182[2] = v108;
    *(float *)&v182[3] = v117;
    *(float *)&v182[4] = v118;
    *(float *)&v182[5] = v119;
    *(float *)&v182[6] = v120;
    uint64_t v137 = *(void *)(v71 + 48);
    v10[3].i8[14] = 0;
    *int32x2_t v10 = v32;
    v10[1] = v26;
    uint64_t v138 = *(void *)(v137 + 80);
    v191.i32[2] = 2;
    *(void *)&long long v192 = v183;
    *((void *)&v192 + 1) = v138;
    LOBYTE(v193[0]) = v78;
    int v194 = 0;
    v191.i64[0] = (uint64_t)&unk_26E729D68;
    physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration((unint64_t)v195, &v189, &v186, (float32x4_t *)v188, (float32x4_t *)v187, (uint64_t)v10, v8, 0, v67);
    float v204 = &v205;
    float32x2_t v202 = vadd_f32(v212, v189);
    float32x2_t v203 = vmul_f32(v202, v202);
    v139.n128_f32[0] = physx::Gu::Box::create((physx::Gu::Box *)v179, (const Capsule *)v182);
    if (!v78) {
      v139.n128_f32[0] = physx::Cm::FastVertex2ShapeScaling::transformQueryBounds((uint64_t)v183, &v180, &v181, v179);
    }
    ((void (*)(uint64_t, float *, float32x4_t *, uint64_t, uint64_t, __n128))physx::Gu::gMidphaseBoxCBOverlapTable[*(unsigned __int16 *)(v137 + 8) - 3])(v137, v179, &v191, 1, 1, v139);
    if (v194)
    {
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMCapsuleVsMeshContactGeneration>((unint64_t)v195, (uint64_t)v193 + 4);
      int v194 = 0;
    }
    unsigned int v140 = v200;
    if (v200)
    {
      uint64_t v141 = v201;
      if (v201 >= 2)
      {
        int v142 = 0;
        unsigned int v143 = -1;
        uint64_t v144 = 1;
        do
        {
          float v145 = &v195[v144];
          uint64_t v146 = v145[255];
          uint64_t v147 = v145[256];
          if (COERCE_FLOAT(*(void *)(v146 + 40)) > COERCE_FLOAT(*(void *)(v147 + 40)))
          {
            v145[255] = v147;
            v145[256] = v146;
            if ((int)v144 - 2 >= 0)
            {
              float v148 = &v196[v143 + 1];
              int v149 = v142;
              do
              {
                uint64_t v151 = *(v148 - 1);
                uint64_t v150 = *v148;
                if (COERCE_FLOAT(*(void *)(*v148 + 40)) >= COERCE_FLOAT(*(void *)(v151 + 40))) {
                  break;
                }
                *float v148 = v151;
                *--float v148 = v150;
                --v149;
              }
              while (v149 > 0);
            }
          }
          ++v144;
          ++v143;
          ++v142;
        }
        while (v144 != v141);
      }
      if (v141)
      {
        uint64_t v152 = 0;
        for (uint64_t i = 0; i != v141; ++i)
        {
          float v154 = (float32x4_t *)v196[i];
          v154[1].i64[1] = (uint64_t)v154;
          v154[2].i64[0] = (uint64_t)v154;
          int v155 = v154[3].i32[1] - v154[3].i32[0];
          v154[3].i32[2] = v155;
          v154[1].i64[0] = 0;
          uint64_t v156 = v152;
          while (v156)
          {
            uint64_t v157 = *(void *)((char *)&v195[255] + v156);
            float v158 = *(float32x4_t **)(v157 + 32);
            float32x4_t v159 = vmulq_f32(*v154, *v158);
            v159.i64[0] = vpaddq_f32(v159, v159).u64[0];
            v156 -= 8;
            if (vpadd_f32(*(float32x2_t *)v159.f32, *(float32x2_t *)v159.f32).f32[0] >= *(float *)&v197)
            {
              *(void *)(v157 + 16) = v154;
              v158[1].i64[1] = (uint64_t)v154;
              v154[2].i64[0] = (uint64_t)v158;
              *(_DWORD *)(*(void *)(v157 + 32) + 56) += v155;
              break;
            }
          }
          v152 += 8;
        }
        uint64_t v160 = 0;
        uint64_t v161 = v199;
        do
        {
          uint64_t v162 = v196[v160];
          if (v162) {
            _ZF = *(void *)(v162 + 32) == v162;
          }
          else {
            _ZF = 0;
          }
          if (_ZF)
          {
            while (*(void *)(v162 + 16))
            {
              uint64_t v164 = v162;
              uint64_t v162 = *(void *)(v162 + 16);
              unint64_t v165 = *(unsigned int *)(v164 + 48);
              unint64_t v166 = *(unsigned int *)(v164 + 52);
              if (v165 < v166)
              {
                unsigned int v167 = *(_DWORD *)(v162 + 52);
                do
                {
                  unsigned int v168 = *(_DWORD *)(v162 + 48);
                  if (v168 < v167)
                  {
                    do
                    {
                      unint64_t v169 = v161 + ((unint64_t)v168 << 6);
                      float32x4_t v170 = vsubq_f32(*(float32x4_t *)(v169 + 16), *(float32x4_t *)(v161 + (v165 << 6) + 16));
                      float32x4_t v171 = vmulq_f32(v170, v170);
                      v171.i64[0] = vpaddq_f32(v171, v171).u64[0];
                      if (*(float *)v198 > vpadd_f32(*(float32x2_t *)v171.f32, *(float32x2_t *)v171.f32).f32[0])
                      {
                        int v172 = (long long *)(v161 + ((unint64_t)(v167 - 1) << 6));
                        long long v173 = *v172;
                        long long v174 = v172[1];
                        long long v175 = v172[2];
                        *(_DWORD *)(v169 + 48) = *((_DWORD *)v172 + 12);
                        *(_OWORD *)(v169 + 16) = v174;
                        *(_OWORD *)(v169 + 32) = v175;
                        *(_OWORD *)unint64_t v169 = v173;
                        unsigned int v167 = *(_DWORD *)(v162 + 52) - 1;
                        *(_DWORD *)(v162 + 52) = v167;
                        --v168;
                      }
                      ++v168;
                    }
                    while (v168 < v167);
                    unint64_t v166 = *(unsigned int *)(v164 + 52);
                  }
                  ++v165;
                }
                while (v165 < v166);
              }
            }
          }
          ++v160;
        }
        while (v160 != v141);
        uint64_t v176 = v199;
        unsigned int v140 = v200;
        unsigned int v177 = v201;
      }
      else
      {
        unsigned int v177 = 0;
        uint64_t v176 = v199;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v196[36], v176, v140, v196, v177, (uint64_t)v198, &v197, 3);
    }
  }
  else
  {
    float32x2_t v35 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1);
    float32x2_t v36 = (float32x2_t)vdup_laneq_s32((int32x4_t)v31, 2);
    float32x4_t v37 = vaddq_f32(v31, v31);
    float32x2_t v38 = (float32x2_t)vdup_laneq_s32((int32x4_t)v37, 2);
    float32x2_t v39 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v37.f32), 0);
    float32x2_t v40 = vmul_lane_f32(v35, *(float32x2_t *)v37.f32, 1);
    float32x2_t v41 = vmul_laneq_f32(v36, v37, 2);
    float32x2_t v42 = vmul_n_f32(v35, v37.f32[0]);
    float32x2_t v43 = vmul_n_f32(v36, v37.f32[0]);
    float32x2_t v44 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 0), v29, 1);
    float32x2_t v45 = vmul_lane_f32(v36, *(float32x2_t *)v37.f32, 1);
    *(float32x2_t *)v37.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.f32, 1), v29, 1);
    float32x2_t v46 = vmul_lane_f32(v38, v29, 1);
    __asm { FMOV            V7.2S, #1.0 }
    float32x2_t v51 = vsub_f32(_D7, v39);
    *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D7, v40), v41), (int8x8_t)vadd_f32(v42, v46), 4uLL);
    v52.i64[1] = vsub_f32(v43, *(float32x2_t *)v37.f32).u32[0];
    *(int8x8_t *)&long long v53 = vext_s8((int8x8_t)vsub_f32(v42, v46), (int8x8_t)vsub_f32(v51, v41), 4uLL);
    *((void *)&v53 + 1) = vadd_f32(v45, v44).u32[0];
    float32x4_t v191 = v52;
    long long v192 = v53;
    *(int8x8_t *)&long long v53 = vext_s8((int8x8_t)vadd_f32(v43, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(v45, v44), 4uLL);
    *((void *)&v53 + 1) = vsub_f32(v51, v40).u32[0];
    v193[0] = v53;
    v193[1] = v26;
    *(float32x2_t *)v205.f32 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3D4CCCCDu), *(float *)v11.i32);
    unsigned int v54 = v10[3].u8[14];
    if (v10[3].i8[14])
    {
      unsigned int v55 = 0;
      do
      {
        unsigned int v56 = &v10[3].i8[v55 + 8];
        uint64_t v57 = *v56;
        unsigned int v58 = v54 - 2;
        if (v55 < v58) {
          unsigned int v58 = v55;
        }
        _X8 = (uint64_t)&v10[25 * v10[3].u8[v58 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        unsigned __int32 v63 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&v10[25 * *v56 + 4], &v191, (float32x2_t *)&v205).u32[0];
        if (v10[25 * v57 + 28].i32[0])
        {
          v10[2].i32[v57] = v63;
        }
        else
        {
          unsigned __int8 v64 = v10[3].i8[14] - 1;
          v10[3].i8[14] = v64;
          unsigned __int8 v65 = (char *)v10 + v64;
          __int8 v66 = v65[56];
          v65[56] = v57;
          *unsigned int v56 = v66;
          --v55;
        }
        ++v55;
        unsigned int v54 = v10[3].u8[14];
      }
      while (v55 < v54);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)v10, v8, (float32x4_t *)v188, v187, (float32x2_t *)&v190);
}

int64x2_t physx::Gu::PCMConvexVsMeshContactGeneration::addContactsToPatch(float32x4_t *a1, unsigned int a2, float32x4_t a3)
{
  float32x4_t v5 = vmulq_f32(a1[148], a3);
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  float32x4_t v6 = vmulq_f32(a1[149], a3);
  v6.i64[0] = vpaddq_f32(v6, v6).u64[0];
  int64x2_t result = (int64x2_t)vmulq_f32(a1[150], a3);
  result.i64[0] = vpaddq_f32((float32x4_t)result, (float32x4_t)result).u64[0];
  uint64_t v8 = vpadd_f32(*(float32x2_t *)result.i8, *(float32x2_t *)result.i8).u32[0];
  *(int8x8_t *)v9.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v5.f32, *(float32x2_t *)v5.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32), 4uLL);
  LODWORD(v10) = a1[152].i32[2];
  unsigned int v11 = v10 - a2;
  if (v11 >= 6)
  {
    uint64_t v97 = v8;
    uint64_t v98 = v9.i64[0];
    physx::Gu::SinglePersistentContactManifold::reduceContacts(a1[152].i64[0] + ((unint64_t)a2 << 6), v11);
    uint64_t v8 = v97;
    v9.i64[0] = v98;
    LODWORD(v10) = a2 + 5;
    a1[152].i32[2] = a2 + 5;
  }
  if (v10 > a2)
  {
    unint64_t v12 = a2;
    do
    {
      unint64_t v13 = v12++;
      if (v12 < v10)
      {
        unsigned int v14 = v12;
        do
        {
          uint64_t v15 = a1[152].i64[0];
          unint64_t v16 = v15 + ((unint64_t)v14 << 6);
          float32x4_t v17 = vsubq_f32(*(float32x4_t *)(v16 + 16), *(float32x4_t *)(v15 + (v13 << 6) + 16));
          int64x2_t result = (int64x2_t)vmulq_f32(v17, v17);
          result.i64[0] = vpaddq_f32((float32x4_t)result, (float32x4_t)result).u64[0];
          if (COERCE_FLOAT(a1[147].i64[1]) > vpadd_f32(*(float32x2_t *)result.i8, *(float32x2_t *)result.i8).f32[0])
          {
            unint64_t v18 = v15 + ((unint64_t)(v10 - 1) << 6);
            int64x2_t result = *(int64x2_t *)v18;
            long long v19 = *(_OWORD *)(v18 + 16);
            long long v20 = *(_OWORD *)(v18 + 32);
            *(_DWORD *)(v16 + 48) = *(_DWORD *)(v18 + 48);
            *(_OWORD *)(v16 + 16) = v19;
            *(_OWORD *)(v16 + 32) = v20;
            *(int64x2_t *)unint64_t v16 = result;
            LODWORD(v10) = a1[152].i32[2] - 1;
            a1[152].i32[2] = v10;
            --v14;
          }
          ++v14;
        }
        while (v14 < v10);
      }
    }
    while (v12 < v10);
  }
  v9.i64[1] = v8;
  if (v10 <= a2)
  {
    *(int32x2_t *)result.i8 = vdup_n_s32(0x7F7FFFFFu);
  }
  else
  {
    unint64_t v21 = (unint64_t)a2 << 6;
    *(int32x2_t *)result.i8 = vdup_n_s32(0x7F7FFFFFu);
    unint64_t v22 = a2;
    do
    {
      float32x4_t v23 = (int32x4_t *)(a1[152].i64[0] + v21);
      float32x2_t v24 = (float32x2_t)vdup_laneq_s32(v23[2], 3);
      float32x4_t v25 = v9;
      v25.i32[3] = HIDWORD(*(_OWORD *)&v23[2]);
      void v23[2] = (int32x4_t)v25;
      float32x4_t v26 = (float32x4_t *)(a1[152].i64[0] + v21);
      float32x4_t v27 = vsubq_f32(v26[1], a1[151]);
      float32x4_t v28 = vmulq_f32(a1[148], v27);
      v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
      float32x4_t v29 = vmulq_f32(v27, a1[149]);
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      float32x4_t v30 = vmulq_f32(v27, a1[150]);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      *(int8x8_t *)v28.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), 4uLL);
      v28.i64[1] = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).u32[0];
      v26[1] = v28;
      *(float32x2_t *)result.i8 = vmin_f32(*(float32x2_t *)result.i8, v24);
      ++v22;
      unint64_t v10 = a1[152].u32[2];
      v21 += 64;
    }
    while (v22 < v10);
  }
  uint64_t v31 = a1[152].u32[3];
  if (v31
    && (uint64_t v32 = (v31 - 1),
        float32x4_t v33 = vmulq_f32(a1[4 * v32], v9),
        v33.i64[0] = vpaddq_f32(v33, v33).u64[0],
        vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32).f32[0] > COERCE_FLOAT(a1[147].i64[0])))
  {
    float32x2_t v35 = (float32x2_t *)&a1[4 * v32];
    float32x2_t v36 = (_DWORD *)&v35[6] + 1;
    unint64_t v37 = v35[6].u32[1];
    for (unint64_t i = v35[6].u32[0]; i < v37; ++i)
    {
      unsigned int v39 = a2;
      if (v10 > a2)
      {
        do
        {
          uint64_t v40 = a1[152].i64[0];
          float32x2_t v41 = (float32x4_t *)(v40 + ((unint64_t)v39 << 6));
          float32x2_t v42 = (float32x4_t *)(v40 + (i << 6));
          float32x4_t v43 = vsubq_f32(v41[1], v42[1]);
          float32x4_t v44 = vmulq_f32(v43, v43);
          v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
          if (COERCE_FLOAT(a1[147].i64[1]) > vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0])
          {
            if (v42[2].f32[3] > v41[2].f32[3])
            {
              unint64_t v45 = v40 + ((unint64_t)v39 << 6);
              uint64_t v46 = v40 + (i << 6);
              long long v47 = *(_OWORD *)v45;
              long long v48 = *(_OWORD *)(v45 + 16);
              long long v49 = *(_OWORD *)(v45 + 32);
              *(_DWORD *)(v46 + 48) = *(_DWORD *)(v45 + 48);
              *(_OWORD *)(v46 + 16) = v48;
              *(_OWORD *)(v46 + 32) = v49;
              *(_OWORD *)uint64_t v46 = v47;
              uint64_t v40 = a1[152].i64[0];
              LODWORD(v10) = a1[152].i32[2];
            }
            unint64_t v50 = v40 + ((unint64_t)(v10 - 1) << 6);
            unint64_t v51 = v40 + ((unint64_t)v39 << 6);
            long long v52 = *(_OWORD *)v50;
            long long v53 = *(_OWORD *)(v50 + 16);
            long long v54 = *(_OWORD *)(v50 + 32);
            *(_DWORD *)(v51 + 48) = *(_DWORD *)(v50 + 48);
            *(_OWORD *)(v51 + 16) = v53;
            *(_OWORD *)(v51 + 32) = v54;
            *(_OWORD *)unint64_t v51 = v52;
            LODWORD(v10) = a1[152].i32[2] - 1;
            a1[152].i32[2] = v10;
            --v39;
          }
          ++v39;
        }
        while (v39 < v10);
        unint64_t v37 = *v36;
      }
    }
    *float32x2_t v36 = v10;
    *(float32x2_t *)result.i8 = vmin_f32(v35[5], *(float32x2_t *)result.i8);
    v35[5] = *(float32x2_t *)result.i8;
  }
  else
  {
    float32x4_t v34 = &a1[4 * v31];
    v34[3].i32[0] = a2;
    v34[3].i32[1] = v10;
    v34[2].i64[1] = result.i64[0];
    a1[152].i32[3] = v31 + 1;
    *float32x4_t v34 = v9;
    LODWORD(v10) = a1[152].i32[2];
  }
  if (v10 >= 0x10)
  {
    uint64_t v55 = a1[152].u32[3];
    if (v55 >= 2)
    {
      int v56 = 0;
      unsigned int v57 = -1;
      for (uint64_t j = 1; j != v55; ++j)
      {
        unsigned int v59 = (char *)a1 + 8 * j;
        uint64_t v60 = *((void *)v59 + 255);
        uint64_t v61 = *((void *)v59 + 256);
        if (COERCE_FLOAT(*(void *)(v60 + 40)) > COERCE_FLOAT(*(void *)(v61 + 40)))
        {
          *((void *)v59 + 255) = v61;
          *((void *)v59 + 256) = v60;
          if ((int)j - 2 >= 0)
          {
            uint64_t v62 = (uint64_t)&a1[128].i64[v57 + 1];
            int v63 = v56;
            do
            {
              uint64_t v65 = *(void *)(v62 - 8);
              uint64_t v64 = *(void *)v62;
              if (COERCE_FLOAT(*(void *)(*(void *)v62 + 40)) >= COERCE_FLOAT(*(void *)(v65 + 40))) {
                break;
              }
              *(void *)uint64_t v62 = v65;
              *(void *)(v62 - 8) = v64;
              v62 -= 8;
              --v63;
            }
            while (v63 > 0);
          }
        }
        ++v57;
        ++v56;
      }
    }
    __int8 v66 = (uint64_t *)&a1[128];
    uint64_t v67 = a1 + 147;
    if (v55)
    {
      uint64_t v68 = 0;
      for (uint64_t k = 0; k != v55; ++k)
      {
        float32x2_t v70 = (float32x4_t *)v66[k];
        v70[1].i64[1] = (uint64_t)v70;
        v70[2].i64[0] = (uint64_t)v70;
        int v71 = v70[3].i32[1] - v70[3].i32[0];
        v70[3].i32[2] = v71;
        v70[1].i64[0] = 0;
        uint64_t v72 = v68;
        while (v72)
        {
          uint64_t v73 = *(uint64_t *)((char *)&a1[127].i64[1] + v72);
          float v74 = *(float32x4_t **)(v73 + 32);
          float32x4_t v75 = vmulq_f32(*v70, *v74);
          v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
          v72 -= 8;
          if (vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32).f32[0] >= COERCE_FLOAT(v67->i64[0]))
          {
            *(void *)(v73 + 16) = v70;
            v74[1].i64[1] = (uint64_t)v70;
            v70[2].i64[0] = (uint64_t)v74;
            *(_DWORD *)(*(void *)(v73 + 32) + 56) += v71;
            break;
          }
        }
        v68 += 8;
      }
      uint64_t v76 = 0;
      uint64_t v77 = a1[152].i64[0];
      BOOL v78 = &a1[147].i64[1];
      do
      {
        uint64_t v79 = v66[v76];
        if (v79) {
          BOOL v80 = *(void *)(v79 + 32) == v79;
        }
        else {
          BOOL v80 = 0;
        }
        if (v80)
        {
          while (*(void *)(v79 + 16))
          {
            uint64_t v81 = v79;
            uint64_t v79 = *(void *)(v79 + 16);
            unint64_t v82 = *(unsigned int *)(v81 + 48);
            unint64_t v83 = *(unsigned int *)(v81 + 52);
            if (v82 < v83)
            {
              unsigned int v84 = *(_DWORD *)(v79 + 52);
              do
              {
                unsigned int v85 = *(_DWORD *)(v79 + 48);
                if (v85 < v84)
                {
                  do
                  {
                    unint64_t v86 = v77 + ((unint64_t)v85 << 6);
                    float32x4_t v87 = vsubq_f32(*(float32x4_t *)(v86 + 16), *(float32x4_t *)(v77 + (v82 << 6) + 16));
                    float32x4_t v88 = vmulq_f32(v87, v87);
                    v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
                    if (COERCE_FLOAT(*v78) > vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).f32[0])
                    {
                      unint64_t v89 = v77 + ((unint64_t)(v84 - 1) << 6);
                      long long v90 = *(_OWORD *)v89;
                      long long v91 = *(_OWORD *)(v89 + 16);
                      long long v92 = *(_OWORD *)(v89 + 32);
                      *(_DWORD *)(v86 + 48) = *(_DWORD *)(v89 + 48);
                      *(_OWORD *)(v86 + 16) = v91;
                      *(_OWORD *)(v86 + 32) = v92;
                      *(_OWORD *)unint64_t v86 = v90;
                      unsigned int v84 = *(_DWORD *)(v79 + 52) - 1;
                      *(_DWORD *)(v79 + 52) = v84;
                      --v85;
                    }
                    ++v85;
                  }
                  while (v85 < v84);
                  unint64_t v83 = *(unsigned int *)(v81 + 52);
                }
                ++v82;
              }
              while (v82 < v83);
            }
          }
        }
        ++v76;
      }
      while (v76 != v55);
      LODWORD(v10) = a1[152].i32[2];
      unsigned int v93 = a1[152].u32[3];
    }
    else
    {
      unsigned int v93 = 0;
      BOOL v78 = &a1[147].i64[1];
    }
    physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(a1[146].i64[0], a1[152].i64[0], v10, v66, v93, (uint64_t)v78, v67, 6);
    a1[152].i64[1] = 0;
    int64x2_t result = (int64x2_t)xmmword_234361D20;
    uint64_t v94 = 128;
    int64x2_t v95 = vdupq_n_s64((unint64_t)a1);
    int64x2_t v96 = vdupq_n_s64(2uLL);
    do
    {
      a1[v94] = (float32x4_t)vaddq_s64(v95, vshlq_n_s64(result, 6uLL));
      int64x2_t result = vaddq_s64(result, v96);
      ++v94;
    }
    while (v94 != 144);
  }
  return result;
}

void physx::Gu::PCMConvexVsMeshContactGeneration::generateLastContacts(float32x4_t *this)
{
  uint64_t v1 = this[233].i64[1];
  unsigned int v2 = *(_DWORD *)(v1 + 4368);
  if (v2 > 0xE)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v1 + 4360);
    unint64_t v41 = v2 / 0xFuLL;
    float32x2_t v42 = &this[153].i8[4];
    uint64_t v40 = &this[152].i32[2];
    unint64_t v37 = this + 144;
    float32x4_t v6 = &this[234].i8[8];
    float32x4_t v36 = (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu);
    float32x2_t v35 = &this[274].i8[8];
    uint64_t v38 = v5;
    do
    {
      uint64_t v7 = v5 + 60 * v4;
      unsigned int v9 = *(_DWORD *)(v7 + 36);
      unsigned int v8 = *(_DWORD *)(v7 + 40);
      unsigned int v10 = *(_DWORD *)(v7 + 44);
      uint64_t v11 = *(unsigned __int8 *)(v7 + 56);
      if ((v11 & 8) != 0
        || (v9 >= v8 ? (int v12 = *(_DWORD *)(v7 + 40)) : (int v12 = *(_DWORD *)(v7 + 36)),
            v9 <= v8 ? (int v13 = *(_DWORD *)(v7 + 40)) : (int v13 = *(_DWORD *)(v7 + 36)),
            !physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::get((uint64_t)v42, v12, v13)))
      {
        if ((v11 & 0x10) != 0
          || (v8 >= v10 ? (int v14 = v10) : (int v14 = v8),
              v8 <= v10 ? (int v15 = v10) : (int v15 = v8),
              !physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::get((uint64_t)v42, v14, v15)))
        {
          if ((v11 & 0x20) != 0
            || (v10 >= v9 ? (int v16 = v9) : (int v16 = v10),
                v10 <= v9 ? (int v17 = v9) : (int v17 = v10),
                !physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::get((uint64_t)v42, v16, v17)))
          {
            int v50 = 5;
            char v51 = 0;
            v18.i64[0] = *(void *)v7;
            v18.i64[1] = *(unsigned int *)(v7 + 8);
            v19.i64[0] = *(void *)(v7 + 12);
            v19.i64[1] = *(unsigned int *)(v7 + 20);
            v20.i64[0] = *(void *)(v7 + 24);
            v20.i64[1] = *(unsigned int *)(v7 + 32);
            float32x4_t v21 = vmulq_f32(vaddq_f32(vaddq_f32(v18, v19), v20), v36);
            v21.i32[3] = 0;
            float32x4_t v47 = v21;
            float32x4_t v52 = v18;
            float32x4_t v53 = v19;
            v54[0] = v20;
            uint64_t v48 = 0x7F7FFFFF00000000;
            int v49 = 2139095039;
            float32x4_t v46 = 0uLL;
            unsigned int v22 = this[152].u32[2];
            physx::Gu::PCMConvexVsMeshContactGeneration::generatePolyDataContactManifold((uint64_t)this, (uint64_t)&v47, *(_DWORD *)(v5 + 60 * v4 + 52), *(_DWORD *)(v5 + 60 * v4 + 48), v11, this[152].i64[0], v40, v37, &v46);
            unsigned int v23 = v22;
            float32x2_t v44 = 0;
            float32x2_t v45 = 0;
            unsigned int v24 = this[152].u32[2];
            uint64_t v39 = v4;
            if (v24 <= v22)
            {
              LODWORD(v27) = this[152].i32[2];
            }
            else
            {
              unsigned int v43 = v22;
              unint64_t v25 = v24 - 1;
              uint64_t v26 = v25 << 6;
              LODWORD(v27) = this[152].i32[2];
              do
              {
                physx::Gu::barycentricCoordinates((float32x4_t *)(this[152].i64[0] + ((unint64_t)--v24 << 6) + 16), &v52, &v53, v54, &v45, &v44);
                if (v45.f32[0] > 0.97)
                {
                  for (int i = v35[v8 & 0x7F]; i != 255; int i = this[266].u8[i + 8])
                  {
                    if (*(_DWORD *)&v6[4 * i] == v8)
                    {
LABEL_44:
                      unint64_t v27 = (v27 - 1);
                      if (v27 > v24)
                      {
                        uint64_t v31 = v26;
                        unint64_t v32 = v25;
                        do
                        {
                          ++v32;
                          uint64_t v33 = this[152].i64[0] + v31;
                          long long v34 = *(_OWORD *)(v33 + 80);
                          *(_OWORD *)uint64_t v33 = *(_OWORD *)(v33 + 64);
                          *(_OWORD *)(v33 + 16) = v34;
                          *(_OWORD *)(v33 + 32) = *(_OWORD *)(v33 + 96);
                          *(_DWORD *)(v33 + 48) = *(_DWORD *)(v33 + 112);
                          v31 += 64;
                        }
                        while (v32 < v27);
                      }
                      break;
                    }
                  }
                }
                else if (v44.f32[0] > 0.97)
                {
                  for (int j = v35[v10 & 0x7F]; j != 255; int j = this[266].u8[j + 8])
                  {
                    if (*(_DWORD *)&v6[4 * j] == v10) {
                      goto LABEL_44;
                    }
                  }
                }
                else if (vadd_f32(v45, v44).f32[0] <= 0.03)
                {
                  for (int k = v35[v9 & 0x7F]; k != 255; int k = this[266].u8[k + 8])
                  {
                    if (*(_DWORD *)&v6[4 * k] == v9) {
                      goto LABEL_44;
                    }
                  }
                }
                unsigned int v23 = v43;
                --v25;
                v26 -= 64;
              }
              while (v43 < v24);
            }
            *uint64_t v40 = v27;
            if (v27 > v23) {
              physx::Gu::PCMConvexVsMeshContactGeneration::addContactsToPatch(this, v23, v46);
            }
            uint64_t v5 = v38;
            uint64_t v4 = v39;
          }
        }
      }
      ++v4;
    }
    while (v4 != v41);
  }
}

uint64_t physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::get(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = 9
     * (((a3 | (a2 << 16)) + ~((a3 | (a2 << 16)) << 15)) ^ (((a3 | (a2 << 16)) + ~((a3 | (a2 << 16)) << 15)) >> 10));
  for (unsigned int i = *(unsigned __int8 *)(a1
                               + ((((v3 ^ (v3 >> 6)) - 1) ^ (((v3 ^ (v3 >> 6))
                                                                                              + ~((v3 ^ (v3 >> 6)) << 11)) >> 16)) & 0x7F)
                               + 1152); i != 255; unsigned int i = *(unsigned __int8 *)(a1 + v5 + 1024))
  {
    uint64_t v5 = i;
    if (*(_DWORD *)(a1 + 8 * i) == a2)
    {
      uint64_t v6 = a1 + 8 * i;
      if (*(_DWORD *)(v6 + 4) == a3) {
        return v6;
      }
    }
  }
  return 0;
}

BOOL physx::Gu::PCMConvexVsMeshContactGeneration::processTriangle(uint64_t a1, float *a2, __int32 a3, char a4, int *a5, double a6, double a7, __n128 a8, double a9, double a10, __n128 a11)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  v77[0] = xmmword_23435FD50;
  v77[1] = xmmword_23435FD60;
  v77[2] = xmmword_23435FD80;
  float32x4_t v14 = (float32x4_t)*(unsigned int *)a2;
  v14.f32[1] = a2[1];
  float32x4_t v15 = v14;
  v15.f32[2] = a2[2];
  a11.n128_f32[0] = a2[3];
  __n128 v16 = a11;
  v16.n128_f32[1] = a2[4];
  float32x4_t v17 = (float32x4_t)v16;
  v17.f32[2] = a2[5];
  a8.n128_f32[0] = a2[6];
  __n128 v18 = a8;
  v18.n128_f32[1] = a2[7];
  float32x4_t v19 = (float32x4_t)v18;
  v19.f32[2] = a2[8];
  int8x16_t v20 = (int8x16_t)vsubq_f32(v17, v15);
  int8x16_t v21 = (int8x16_t)vsubq_f32(v19, v15);
  int8x8_t v22 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL), *(float32x2_t *)v21.i8);
  *(int8x8_t *)v23.f32 = vext_s8(v22, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), *(float32x2_t *)v21.i8), *(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)), 4uLL);
  v23.i64[1] = v22.u32[0];
  *(float32x2_t *)v21.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), vmul_f32((float32x2_t)v22.u32[0], (float32x2_t)v22.u32[0]));
  float32x2_t v24 = vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8);
  float32x2_t v25 = vrsqrte_f32(v24);
  int v26 = 4;
  do
  {
    float32x2_t v25 = vmul_f32(v25, vrsqrts_f32(vmul_f32(v25, v25), v24));
    --v26;
  }
  while (v26);
  __asm { FMOV            V21.2S, #1.0 }
  float32x2_t v32 = vmul_f32(v24, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v24), 0), _D21, (int8x8_t)v25));
  float32x2_t v33 = vrecpe_f32(v32);
  int v34 = 4;
  do
  {
    float32x2_t v33 = vmul_f32(v33, vrecps_f32(v32, v33));
    --v34;
  }
  while (v34);
  float32x4_t v35 = vmulq_n_f32(v23, v33.f32[0]);
  v35.i32[3] = 0;
  float32x4_t v36 = vmulq_f32(v15, v35);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  float32x4_t v37 = vmulq_f32(v35, *(float32x4_t *)(a1 + 4528));
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  float v38 = vsub_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32)).f32[0];
  if (v38 >= 0.0)
  {
    float v66 = v38;
    float32x4_t v39 = *(float32x4_t *)(a1 + 2416);
    float32x4_t v40 = *(float32x4_t *)(a1 + 2368);
    float32x4_t v41 = vmulq_n_f32(v40, *a2);
    v41.i32[3] = 0;
    float32x4_t v42 = *(float32x4_t *)(a1 + 2384);
    float32x4_t v43 = vmulq_lane_f32(v42, *(float32x2_t *)v14.f32, 1);
    v43.i32[3] = 0;
    float32x4_t v44 = *(float32x4_t *)(a1 + 2400);
    float32x4_t v45 = vmulq_laneq_f32(v44, v15, 2);
    v45.i32[3] = 0;
    float32x4_t v46 = vmulq_n_f32(v40, a11.n128_f32[0]);
    v46.i32[3] = 0;
    float32x4_t v47 = vmulq_lane_f32(v42, (float32x2_t)v16.n128_u64[0], 1);
    v47.i32[3] = 0;
    float32x4_t v48 = vaddq_f32(v39, vaddq_f32(vaddq_f32(v41, v43), v45));
    float32x4_t v49 = vmulq_laneq_f32(v44, v17, 2);
    v49.i32[3] = 0;
    float32x4_t v50 = vmulq_n_f32(v40, a8.n128_f32[0]);
    v50.i32[3] = 0;
    float32x4_t v51 = vmulq_lane_f32(v42, (float32x2_t)v18.n128_u64[0], 1);
    v51.i32[3] = 0;
    float32x4_t v52 = vaddq_f32(v39, vaddq_f32(vaddq_f32(v46, v47), v49));
    float32x4_t v53 = vmulq_laneq_f32(v44, v19, 2);
    v53.i32[3] = 0;
    float32x4_t v54 = vaddq_f32(v39, vaddq_f32(vaddq_f32(v50, v51), v53));
    char v73 = 0;
    float32x4_t v55 = vmulq_f32(vaddq_f32(v54, vaddq_f32(v48, v52)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
    v55.i32[3] = 0;
    float32x4_t v70 = v55;
    float32x4_t v74 = v48;
    float32x4_t v75 = v52;
    float32x4_t v76 = v54;
    uint64_t v71 = 0x7F7FFFFF00000000;
    uint64_t v72 = 0x57F7FFFFFLL;
    v78[4] = *(void *)(a1 + 2320);
    v78[5] = v77;
    v78[6] = v77;
    char v79 = 1;
    v78[0] = &unk_26E729EB0;
    BOOL v80 = &v70;
    unsigned int v56 = *(_DWORD *)(a1 + 2440);
    float32x4_t v69 = 0uLL;
    physx::Gu::PCMConvexVsMeshContactGeneration::generateTriangleFullContactManifold(a1, (uint64_t)&v70, a3, a5, a4, *(void *)(a1 + 4544), (uint64_t)v78, *(void **)(a1 + 4552), *(void *)(a1 + 2432), (_DWORD *)(a1 + 2440), (float32x2_t *)(a1 + 2304), &v69);
    if (*(_DWORD *)(a1 + 2440) <= v56)
    {
LABEL_17:
      float v38 = v66;
      return v38 >= 0.0;
    }
    if ((a4 & 8) != 0)
    {
      if ((a4 & 0x10) != 0) {
        goto LABEL_9;
      }
    }
    else
    {
      unsigned int v60 = *a5;
      unsigned int v61 = a5[1];
      if (*a5 >= v61) {
        int v62 = a5[1];
      }
      else {
        int v62 = *a5;
      }
      if (v60 <= v61) {
        unsigned int v60 = a5[1];
      }
      int v67 = v62;
      unsigned int v68 = v60;
      physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, &v67);
      if ((a4 & 0x10) != 0)
      {
LABEL_9:
        if ((a4 & 0x20) != 0)
        {
LABEL_16:
          int v67 = *a5;
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(a1 + 3752, &v67);
          int v67 = a5[1];
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(a1 + 3752, &v67);
          int v67 = a5[2];
          physx::Gu::CacheMap<physx::Gu::CachedVertex,128u>::addData(a1 + 3752, &v67);
          physx::Gu::PCMConvexVsMeshContactGeneration::addContactsToPatch((float32x4_t *)a1, v56, v69);
          goto LABEL_17;
        }
LABEL_10:
        unsigned int v57 = a5[2];
        if (v57 >= *a5) {
          int v58 = *a5;
        }
        else {
          int v58 = a5[2];
        }
        if (v57 <= *a5) {
          unsigned int v57 = *a5;
        }
        int v67 = v58;
        unsigned int v68 = v57;
        physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, &v67);
        goto LABEL_16;
      }
    }
    unsigned int v63 = a5[1];
    unsigned int v64 = a5[2];
    if (v63 >= v64) {
      int v65 = a5[2];
    }
    else {
      int v65 = a5[1];
    }
    if (v63 <= v64) {
      unsigned int v63 = a5[2];
    }
    int v67 = v65;
    unsigned int v68 = v63;
    physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, &v67);
    if ((a4 & 0x20) != 0) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  return v38 >= 0.0;
}

uint64_t physx::Gu::PCMConvexVsMeshContactGeneration::processTriangle(uint64_t a1, float32x4_t *a2, float *a3, __int32 a4, unsigned int a5, float32x2_t *a6, char a7, uint64_t a8, float32x4_t *a9, uint64_t a10, _DWORD *a11)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  v59[0] = xmmword_23435FD50;
  v59[1] = xmmword_23435FD60;
  float32x4_t v11 = a9[1];
  float32x4_t v12 = vmulq_n_f32(*a9, *a3);
  v12.i32[3] = 0;
  float32x4_t v13 = vmulq_n_f32(v11, a3[1]);
  v13.i32[3] = 0;
  float32x4_t v14 = vaddq_f32(v12, v13);
  float32x4_t v16 = a9[2];
  float32x4_t v15 = a9[3];
  float32x4_t v17 = vmulq_n_f32(v16, a3[2]);
  v17.i32[3] = 0;
  float32x4_t v18 = vaddq_f32(v14, v17);
  float32x4_t v19 = vmulq_n_f32(*a9, a3[3]);
  v19.i32[3] = 0;
  float32x4_t v20 = vmulq_n_f32(v11, a3[4]);
  v20.i32[3] = 0;
  float32x4_t v21 = vaddq_f32(v15, v18);
  float32x4_t v22 = vmulq_n_f32(v16, a3[5]);
  v22.i32[3] = 0;
  float32x4_t v23 = vaddq_f32(vaddq_f32(v19, v20), v22);
  float32x4_t v24 = vmulq_n_f32(*a9, a3[6]);
  v24.i32[3] = 0;
  float32x4_t v25 = vmulq_n_f32(v11, a3[7]);
  v25.i32[3] = 0;
  float32x4_t v26 = vaddq_f32(v15, v23);
  float32x4_t v27 = vmulq_n_f32(v16, a3[8]);
  v27.i32[3] = 0;
  float32x4_t v28 = vaddq_f32(v15, vaddq_f32(vaddq_f32(v24, v25), v27));
  int8x16_t v29 = (int8x16_t)vsubq_f32(v26, v21);
  int8x16_t v30 = (int8x16_t)vsubq_f32(v28, v21);
  int8x8_t v31 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 4uLL), *(float32x2_t *)v30.i8);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)v30.i8), *(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 4uLL);
  v32.i64[1] = v31.u32[0];
  v59[2] = xmmword_23435FD80;
  float32x2_t v33 = vpadd_f32(vmul_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32), vmul_f32((float32x2_t)v31.u32[0], (float32x2_t)v31.u32[0]));
  float32x2_t v34 = vpadd_f32(v33, v33);
  float32x2_t v35 = vrsqrte_f32(v34);
  int v36 = 4;
  do
  {
    float32x2_t v35 = vmul_f32(v35, vrsqrts_f32(vmul_f32(v35, v35), v34));
    --v36;
  }
  while (v36);
  __asm { FMOV            V7.2S, #1.0 }
  float32x2_t v42 = vmul_f32(v34, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v34), 0), _D7, (int8x8_t)v35));
  float32x2_t v43 = vrecpe_f32(v42);
  int v44 = 4;
  do
  {
    float32x2_t v43 = vmul_f32(v43, vrecps_f32(v42, v43));
    --v44;
  }
  while (v44);
  if ((a7 & 1) == 0)
  {
    float32x4_t v45 = vmulq_n_f32(v32, v43.f32[0]);
    v45.i32[3] = 0;
    float32x4_t v46 = vmulq_f32(v45, a2[1]);
    v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
    float32x4_t v47 = vmulq_f32(v21, v45);
    v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
    if (vsub_f32(vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32)).f32[0] < 0.0)return 0; {
  }
    }
  char v55 = 0;
  float32x4_t v49 = vmulq_f32(vaddq_f32(v28, vaddq_f32(v21, v26)), (float32x4_t)vdupq_n_s32(0x3EAAAA9Fu));
  v49.i32[3] = 0;
  float32x4_t v52 = v49;
  float32x4_t v56 = v21;
  float32x4_t v57 = v26;
  float32x4_t v58 = v28;
  uint64_t v53 = 0x7F7FFFFF00000000;
  uint64_t v54 = 0x57F7FFFFFLL;
  v60[4] = a8;
  v60[5] = v59;
  v60[6] = v59;
  uint64_t v48 = 1;
  char v61 = 1;
  v60[0] = &unk_26E729EB0;
  int v62 = &v52;
  float32x4_t v51 = 0uLL;
  physx::Gu::PCMConvexVsMeshContactGeneration::generateTriangleFullContactManifold((uint64_t)&v52, a4, a5, a1, (uint64_t)v60, a2, a10, a11, a6, &v51);
  return v48;
}

BOOL physx::Gu::PCMSphereVsMeshContactGeneration::processTriangle(unint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int *a5)
{
  unsigned __int32 v8 = *(_DWORD *)(a2 + 8);
  unsigned __int32 v9 = *(_DWORD *)(a2 + 20);
  v10.i64[0] = *(void *)a2;
  v11.i64[0] = *(void *)a2;
  v11.i64[1] = v8;
  uint64_t v12 = *(void *)(a2 + 12);
  v13.i64[0] = v12;
  v13.i64[1] = v9;
  uint64_t v14 = *(void *)(a2 + 24);
  unsigned __int32 v15 = *(_DWORD *)(a2 + 32);
  v16.i64[0] = v14;
  v16.i64[1] = v15;
  float32x4_t v17 = vsubq_f32(v13, v11);
  float32x4_t v18 = vsubq_f32(v16, v11);
  int8x8_t v19 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), *(float32x2_t *)v18.f32);
  *(int8x8_t *)v20.f32 = vext_s8(v19, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(float32x2_t *)v18.f32), *(float32x2_t *)v17.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), 4uLL);
  v20.i64[1] = v19.u32[0];
  float32x2_t v21 = vpadd_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), vmul_f32((float32x2_t)v19.u32[0], (float32x2_t)v19.u32[0]));
  float32x2_t v22 = vpadd_f32(v21, v21);
  float32x2_t v23 = vrsqrte_f32(v22);
  int v24 = 4;
  do
  {
    float32x2_t v23 = vmul_f32(v23, vrsqrts_f32(vmul_f32(v23, v23), v22));
    --v24;
  }
  while (v24);
  __asm { FMOV            V0.2S, #1.0 }
  float32x2_t v30 = vmul_f32(v22, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v22), 0), _D0, (int8x8_t)v23));
  float32x2_t v31 = vrecpe_f32(v30);
  int v32 = 4;
  do
  {
    float32x2_t v31 = vmul_f32(v31, vrecps_f32(v30, v31));
    --v32;
  }
  while (v32);
  float32x4_t v33 = vmulq_n_f32(v20, v31.f32[0]);
  v33.i32[3] = 0;
  float32x4_t v34 = vmulq_f32(v11, v33);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  float32x2_t v35 = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32);
  float32x4_t v36 = *(float32x4_t *)(a1 + 3760);
  float32x4_t v37 = vmulq_f32(v33, v36);
  v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
  float v38 = vsub_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), v35).f32[0];
  if (v38 < 0.0) {
    return v38 >= 0.0;
  }
  float32x4_t v39 = vsubq_f32(v36, v11);
  float32x4_t v40 = vmulq_f32(v17, v39);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  float32x2_t v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  float32x4_t v42 = vmulq_f32(v18, v39);
  v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
  float32x2_t v43 = vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcltz_f32(v43), (int8x8_t)vcltz_f32(v41)), 0), _D0).u32[0] == -1)
  {
    LOBYTE(v76) = (a4 & 0x28) != 0;
    float32x4_t v130 = v11;
    float32x4_t v78 = vmulq_f32(v39, v39);
LABEL_29:
    float32x2_t v96 = (float32x2_t)vpaddq_f32(v78, v78).u64[0];
    float32x2_t v75 = vpadd_f32(v96, v96);
    goto LABEL_30;
  }
  float32x4_t v44 = vsubq_f32(v36, v13);
  float32x4_t v45 = vmulq_f32(v17, v44);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  float32x2_t v46 = vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32);
  float32x4_t v47 = vmulq_f32(v18, v44);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  float32x2_t v48 = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v46, v48), (int8x8_t)vcgez_f32(v46)), 0), _D0).u32[0] == -1)
  {
    LOBYTE(v76) = (a4 & 0x18) != 0;
    float32x4_t v130 = v13;
    float32x4_t v79 = vmulq_f32(v44, v44);
    v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
    float32x2_t v75 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
    unsigned __int32 v8 = v9;
    float32x4_t v11 = v13;
    v10.i64[0] = v12;
  }
  else
  {
    float32x4_t v49 = vsubq_f32(v36, v16);
    float32x4_t v50 = vmulq_f32(v17, v49);
    v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
    float32x2_t v51 = vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32);
    float32x4_t v52 = vmulq_f32(v18, v49);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    float32x2_t v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
    if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcgez_f32(v53), (int8x8_t)vcge_f32(v53, v51)), 0), _D0).u32[0] != -1)
    {
      float32x2_t v54 = (float32x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u64[0];
      float32x2_t v55 = (float32x2_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL).u64[0];
      float32x2_t v56 = (float32x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
      float32x2_t v57 = (float32x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 4uLL).u64[0];
      int8x8_t v58 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v39.f32, v55), v57, *(float32x2_t *)v44.f32);
      *(int8x8_t *)v59.f32 = vext_s8(v58, (int8x8_t)vmls_f32(vmul_f32(v56, *(float32x2_t *)v44.f32), *(float32x2_t *)v39.f32, v54), 4uLL);
      v59.i64[1] = v58.u32[0];
      float32x4_t v60 = vmulq_f32(v20, v59);
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v46), (int8x8_t)vcgez_f32(v41)), (int8x8_t)vcltz_f32(vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32))), 0), _D0).u32[0] == -1)
      {
        float32x2_t v81 = vsub_f32(v41, v46);
        float32x2_t v82 = vrecpe_f32(v81);
        int v83 = 4;
        do
        {
          float32x2_t v82 = vmul_f32(v82, vrecps_f32(v81, v82));
          --v83;
        }
        while (v83);
        int v76 = (a4 >> 3) & 1;
        float32x4_t v11 = vmlaq_n_f32(v11, v17, vmul_f32(v41, v82).f32[0]);
      }
      else
      {
        float32x2_t v61 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
        float32x2_t v62 = (float32x2_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL).u64[0];
        int8x8_t v63 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v44.f32, v62), v55, *(float32x2_t *)v49.f32);
        *(int8x8_t *)v64.f32 = vext_s8(v63, (int8x8_t)vmls_f32(vmul_f32(v54, *(float32x2_t *)v49.f32), *(float32x2_t *)v44.f32, v61), 4uLL);
        v64.i64[1] = v63.u32[0];
        float32x4_t v65 = vmulq_f32(v20, v64);
        v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v51, v53), (int8x8_t)vcge_f32(v48, v46)), (int8x8_t)vcltz_f32(vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32))), 0), _D0).u32[0] == -1)
        {
          float32x4_t v84 = vsubq_f32(v16, v13);
          float32x2_t v85 = vsub_f32(v48, v46);
          float32x2_t v86 = vadd_f32(v85, vsub_f32(v51, v53));
          float32x2_t v87 = vrecpe_f32(v86);
          int v88 = 4;
          do
          {
            float32x2_t v87 = vmul_f32(v87, vrecps_f32(v86, v87));
            --v88;
          }
          while (v88);
          int v76 = (a4 >> 4) & 1;
          int8x16_t v89 = (int8x16_t)vmlaq_n_f32(v13, v84, vmul_f32(v85, v87).f32[0]);
          v11.i64[0] = v89.i64[0];
          v11.i64[1] = vextq_s8(v89, v89, 8uLL).u32[0];
          float32x4_t v90 = vsubq_f32(v36, v11);
          float32x4_t v130 = v11;
          float32x4_t v91 = vmulq_f32(v90, v90);
          v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
          float32x2_t v75 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
          unsigned __int32 v8 = v89.u32[2];
          v10.i64[0] = v89.i64[0];
          goto LABEL_30;
        }
        int8x8_t v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v49.f32, v57), v62, *(float32x2_t *)v39.f32);
        *(int8x8_t *)v67.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32(v61, *(float32x2_t *)v39.f32), *(float32x2_t *)v49.f32, v56), 4uLL);
        v67.i64[1] = v66.u32[0];
        float32x4_t v68 = vmulq_f32(v20, v67);
        v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcltz_f32(v53), (int8x8_t)vcgez_f32(v43)), (int8x8_t)vcltz_f32(vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32))), 0), _D0).u32[0] != -1)
        {
          float32x4_t v69 = vmulq_f32(v20, vsubq_f32(v11, v36));
          float32x2_t v70 = vrecpe_f32(v22);
          int v71 = 4;
          do
          {
            float32x2_t v70 = vmul_f32(v70, vrecps_f32(v22, v70));
            --v71;
          }
          while (v71);
          float32x2_t v72 = (float32x2_t)vpaddq_f32(v69, v69).u64[0];
          float32x4_t v73 = vmulq_n_f32(v20, vmul_f32(v70, vpadd_f32(v72, v72)).f32[0]);
          v73.i32[3] = 0;
          float32x4_t v10 = vaddq_f32(v36, v73);
          float32x4_t v130 = v10;
          float32x4_t v74 = vmulq_f32(v73, v73);
          v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
          float32x2_t v75 = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
          if (COERCE_FLOAT(*(void *)(a1 + 3784)) <= v75.f32[0]) {
            return v38 >= 0.0;
          }
          unsigned __int32 v8 = v10.u32[2];
          LOBYTE(v76) = 1;
          float32x4_t v77 = v33;
          goto LABEL_36;
        }
        float32x2_t v92 = vsub_f32(v43, v53);
        float32x2_t v93 = vrecpe_f32(v92);
        int v94 = 4;
        do
        {
          float32x2_t v93 = vmul_f32(v93, vrecps_f32(v92, v93));
          --v94;
        }
        while (v94);
        int v76 = (a4 >> 5) & 1;
        float32x4_t v11 = vmlaq_n_f32(v11, v18, vmul_f32(v43, v93).f32[0]);
      }
      v10.i64[0] = v11.i64[0];
      unsigned __int32 v8 = v11.u32[2];
      v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
      float32x4_t v95 = vsubq_f32(v36, v11);
      float32x4_t v130 = v11;
      float32x4_t v78 = vmulq_f32(v95, v95);
      goto LABEL_29;
    }
    LOBYTE(v76) = (a4 & 0x30) != 0;
    float32x4_t v130 = v16;
    float32x4_t v80 = vmulq_f32(v49, v49);
    v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
    float32x2_t v75 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
    unsigned __int32 v8 = v15;
    float32x4_t v11 = v16;
    v10.i64[0] = v14;
  }
LABEL_30:
  if (COERCE_FLOAT(*(void *)(a1 + 3784)) <= v75.f32[0]) {
    return v38 >= 0.0;
  }
  float32x4_t v97 = vsubq_f32(v36, v11);
  float32x4_t v98 = vmulq_f32(v97, v97);
  v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
  float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
  float32x2_t v100 = vrsqrte_f32(v99);
  int v101 = 4;
  do
  {
    float32x2_t v100 = vmul_f32(v100, vrsqrts_f32(vmul_f32(v100, v100), v99));
    --v101;
  }
  while (v101);
  float32x2_t v102 = vmul_f32(v99, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v99), 0), _D0, (int8x8_t)v100));
  float32x2_t v103 = vrecpe_f32(v102);
  int v104 = 4;
  do
  {
    float32x2_t v103 = vmul_f32(v103, vrecps_f32(v102, v103));
    --v104;
  }
  while (v104);
  float32x4_t v77 = vmulq_n_f32(v97, v103.f32[0]);
  v77.i32[3] = 0;
LABEL_36:
  float32x4_t v129 = v77;
  float32x4_t v105 = vmulq_f32(v33, v77);
  v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
  if (vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32).f32[0] > 0.996)
  {
    float32x2_t v111 = vrsqrte_f32(v75);
    int v112 = 4;
    do
    {
      float32x2_t v111 = vmul_f32(v111, vrsqrts_f32(vmul_f32(v111, v111), v75));
      --v112;
    }
    while (v112);
    float32x2_t v113 = vmul_f32(v75, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v75), 0), _D0, (int8x8_t)v111));
    unsigned int v114 = *a5;
    unsigned int v115 = a5[1];
    if (*a5 >= v115) {
      unsigned int v116 = a5[1];
    }
    else {
      unsigned int v116 = *a5;
    }
    if (v114 <= v115) {
      unsigned int v114 = a5[1];
    }
    *(void *)&long long v128 = __PAIR64__(v114, v116);
    physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, (int *)&v128);
    unsigned int v117 = a5[1];
    unsigned int v118 = a5[2];
    if (v117 >= v118) {
      unsigned int v119 = a5[2];
    }
    else {
      unsigned int v119 = a5[1];
    }
    if (v117 <= v118) {
      unsigned int v117 = a5[2];
    }
    *(void *)&long long v128 = __PAIR64__(v117, v119);
    physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, (int *)&v128);
    unsigned int v120 = a5[2];
    if (v120 >= *a5) {
      unsigned int v121 = *a5;
    }
    else {
      unsigned int v121 = a5[2];
    }
    if (v120 <= *a5) {
      unsigned int v120 = *a5;
    }
    *(void *)&long long v128 = __PAIR64__(v120, v121);
    physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData(a1 + 2452, (int *)&v128);
    *(float32x2_t *)v122.i8 = v113;
    physx::Gu::PCMSphereVsMeshContactGeneration::addToPatch(a1, &v130, &v129, a3, v122);
  }
  else
  {
    uint64_t v106 = *(void *)(a1 + 3736);
    unsigned int v107 = *(_DWORD *)(v106 + 4368);
    unsigned int v108 = v107 + 15;
    unsigned __int32 v126 = v8;
    uint64_t v127 = v10.i64[0];
    float32x4_t v124 = v77;
    float32x2_t v125 = v75;
    if ((*(_DWORD *)(v106 + 4372) & 0x7FFFFFFFu) < v107 + 15)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::InlineAllocator<4352u,physx::shdfnd::ReflectionAllocator<unsigned int>>>::recreate(v106, v107 + 15);
      float32x2_t v75 = v125;
      uint64_t v106 = *(void *)(a1 + 3736);
      unsigned int v107 = *(_DWORD *)(v106 + 4368);
    }
    uint64_t v109 = *(void *)(v106 + 4360) + 4 * v107;
    *(_DWORD *)(v106 + 4368) = v108;
    *(float32x2_t *)&long long v128 = v75;
    uint64_t v110 = *(unsigned int *)(a1 + 4832);
    DWORD2(v128) = v110;
    if ((*(_DWORD *)(a1 + 4836) & 0x7FFFFFFFu) <= v110)
    {
      physx::shdfnd::Array<physx::Gu::SortedTriangle,physx::shdfnd::InlineAllocator<1024u,physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>>::growAndPushBack(a1 + 3792, &v128);
      float32x2_t v75 = v125;
    }
    else
    {
      *(_OWORD *)(*(void *)(a1 + 4824) + 16 * v110) = v128;
      ++*(_DWORD *)(a1 + 4832);
    }
    *(_DWORD *)(v109 + 48) = a3;
    *(_DWORD *)(v109 + 52) = 0;
    *(unsigned char *)(v109 + 56) = v76;
    *(_DWORD *)(v109 + 36) = *a5;
    *(_DWORD *)(v109 + 40) = a5[1];
    *(_DWORD *)(v109 + 44) = a5[2];
    *(void *)uint64_t v109 = v127;
    *(_DWORD *)(v109 + 8) = v126;
    *(_DWORD *)(v109 + 20) = v124.i32[2];
    *(void *)(v109 + 12) = v124.i64[0];
    *(float32x2_t *)(v109 + 24) = v75;
    *(_DWORD *)(v109 + 32) = v75.i32[0];
  }
  return v38 >= 0.0;
}

int64x2_t physx::Gu::PCMSphereVsMeshContactGeneration::addToPatch(unint64_t a1, _OWORD *a2, float32x4_t *a3, int a4, int64x2_t result)
{
  int v6 = *(_DWORD *)(a1 + 2444);
  if (v6
    && (uint64_t v7 = (v6 - 1),
        float32x4_t v8 = vmulq_f32(*(float32x4_t *)(a1 + ((unint64_t)v7 << 6)), *a3),
        v8.i64[0] = vpaddq_f32(v8, v8).u64[0],
        vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32).f32[0] > COERCE_FLOAT(*(void *)(a1 + 2352))))
  {
    unint64_t v54 = a1 + (v7 << 6);
    if (COERCE_FLOAT(*(void *)(v54 + 40)) > *(float *)result.i32)
    {
      float32x2_t v55 = (void *)(*(void *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(v54 + 48) << 6));
      *float32x2_t v55 = 0;
      v55[1] = 0;
      *(_OWORD *)(*(void *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(v54 + 48) << 6) + 16) = *a2;
      int64x2_t v56 = *(int64x2_t *)a3;
      v56.i32[3] = result.i32[1];
      *(int64x2_t *)(*(void *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(v54 + 48) << 6) + 32) = v56;
      *(_DWORD *)(*(void *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(v54 + 48) << 6) + 48) = a4;
      *(void *)(v54 + 40) = result.i64[0];
    }
  }
  else
  {
    unsigned __int32 v9 = (void *)(*(void *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(a1 + 2440) << 6));
    *unsigned __int32 v9 = 0;
    v9[1] = 0;
    *(_OWORD *)(*(void *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(a1 + 2440) << 6) + 16) = *a2;
    float32x4_t v10 = *a3;
    v10.i32[3] = result.i32[1];
    *(float32x4_t *)(*(void *)(a1 + 2432) + ((unint64_t)*(unsigned int *)(a1 + 2440) << 6) + 32) = v10;
    uint64_t v11 = *(void *)(a1 + 2432);
    uint64_t v12 = *(unsigned int *)(a1 + 2440);
    *(_DWORD *)(a1 + 2440) = v12 + 1;
    *(_DWORD *)(v11 + (v12 << 6) + 48) = a4;
    uint64_t v13 = *(unsigned int *)(a1 + 2444);
    uint64_t v14 = (int64x2_t *)(a1 + (v13 << 6));
    v14[3].i32[0] = v12;
    v14[3].i32[1] = v12 + 1;
    v14[2].i64[1] = result.i64[0];
    int64x2_t result = *(int64x2_t *)a3;
    *(_DWORD *)(a1 + 2444) = v13 + 1;
    *uint64_t v14 = result;
  }
  unsigned int v15 = *(_DWORD *)(a1 + 2440);
  if (v15 >= 0x10)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 2444);
    if (v16 >= 2)
    {
      int v17 = 0;
      unsigned int v18 = -1;
      for (uint64_t i = 1; i != v16; ++i)
      {
        unint64_t v20 = a1 + 8 * i;
        uint64_t v21 = *(void *)(v20 + 2040);
        uint64_t v22 = *(void *)(v20 + 2048);
        if (COERCE_FLOAT(*(void *)(v21 + 40)) > COERCE_FLOAT(*(void *)(v22 + 40)))
        {
          *(void *)(v20 + 2040) = v22;
          *(void *)(v20 + 2048) = v21;
          if ((int)i - 2 >= 0)
          {
            uint64_t v23 = a1 + 2056 + 8 * v18;
            int v24 = v17;
            do
            {
              uint64_t v26 = *(void *)(v23 - 8);
              uint64_t v25 = *(void *)v23;
              if (COERCE_FLOAT(*(void *)(*(void *)v23 + 40)) >= COERCE_FLOAT(*(void *)(v26 + 40))) {
                break;
              }
              *(void *)uint64_t v23 = v26;
              *(void *)(v23 - 8) = v25;
              v23 -= 8;
              --v24;
            }
            while (v24 > 0);
          }
        }
        ++v18;
        ++v17;
      }
    }
    float32x4_t v27 = (uint64_t *)(a1 + 2048);
    float32x4_t v28 = (void *)(a1 + 2352);
    if (v16)
    {
      uint64_t v29 = 0;
      for (uint64_t j = 0; j != v16; ++j)
      {
        float32x2_t v31 = (float32x4_t *)v27[j];
        v31[1].i64[1] = (uint64_t)v31;
        v31[2].i64[0] = (uint64_t)v31;
        int v32 = v31[3].i32[1] - v31[3].i32[0];
        v31[3].i32[2] = v32;
        v31[1].i64[0] = 0;
        uint64_t v33 = v29;
        while (v33)
        {
          uint64_t v34 = *(void *)(a1 + 2040 + v33);
          float32x2_t v35 = *(float32x4_t **)(v34 + 32);
          float32x4_t v36 = vmulq_f32(*v31, *v35);
          v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
          v33 -= 8;
          if (vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32).f32[0] >= COERCE_FLOAT(*v28))
          {
            *(void *)(v34 + 16) = v31;
            v35[1].i64[1] = (uint64_t)v31;
            v31[2].i64[0] = (uint64_t)v35;
            *(_DWORD *)(*(void *)(v34 + 32) + 56) += v32;
            break;
          }
        }
        v29 += 8;
      }
      uint64_t v37 = 0;
      uint64_t v38 = *(void *)(a1 + 2432);
      float32x4_t v39 = (void *)(a1 + 2360);
      do
      {
        uint64_t v40 = v27[v37];
        if (v40) {
          BOOL v41 = *(void *)(v40 + 32) == v40;
        }
        else {
          BOOL v41 = 0;
        }
        if (v41)
        {
          while (*(void *)(v40 + 16))
          {
            uint64_t v42 = v40;
            uint64_t v40 = *(void *)(v40 + 16);
            unint64_t v43 = *(unsigned int *)(v42 + 48);
            unint64_t v44 = *(unsigned int *)(v42 + 52);
            if (v43 < v44)
            {
              unsigned int v45 = *(_DWORD *)(v40 + 52);
              do
              {
                unsigned int v46 = *(_DWORD *)(v40 + 48);
                if (v46 < v45)
                {
                  do
                  {
                    uint64_t v47 = v38 + ((unint64_t)v46 << 6);
                    float32x4_t v48 = vsubq_f32(*(float32x4_t *)(v47 + 16), *(float32x4_t *)(v38 + (v43 << 6) + 16));
                    float32x4_t v49 = vmulq_f32(v48, v48);
                    v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
                    if (COERCE_FLOAT(*v39) > vpadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)v49.f32).f32[0])
                    {
                      float32x4_t v50 = (long long *)(v38 + ((unint64_t)(v45 - 1) << 6));
                      long long v51 = *v50;
                      long long v52 = v50[1];
                      long long v53 = v50[2];
                      *(_DWORD *)(v47 + 48) = *((_DWORD *)v50 + 12);
                      *(_OWORD *)(v47 + 16) = v52;
                      *(_OWORD *)(v47 + 32) = v53;
                      *(_OWORD *)uint64_t v47 = v51;
                      unsigned int v45 = *(_DWORD *)(v40 + 52) - 1;
                      *(_DWORD *)(v40 + 52) = v45;
                      --v46;
                    }
                    ++v46;
                  }
                  while (v46 < v45);
                  unint64_t v44 = *(unsigned int *)(v42 + 52);
                }
                ++v43;
              }
              while (v43 < v44);
            }
          }
        }
        ++v37;
      }
      while (v37 != v16);
      unsigned int v15 = *(_DWORD *)(a1 + 2440);
      unsigned int v57 = *(_DWORD *)(a1 + 2444);
    }
    else
    {
      unsigned int v57 = 0;
      float32x4_t v39 = (void *)(a1 + 2360);
    }
    physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(*(void *)(a1 + 2336), *(void *)(a1 + 2432), v15, v27, v57, (uint64_t)v39, v28, 1);
    *(void *)(a1 + 2440) = 0;
    int64x2_t result = (int64x2_t)xmmword_234361D20;
    uint64_t v58 = 2048;
    int64x2_t v59 = vdupq_n_s64(a1);
    int64x2_t v60 = vdupq_n_s64(2uLL);
    do
    {
      *(int64x2_t *)(a1 + v58) = vaddq_s64(v59, vshlq_n_s64(result, 6uLL));
      int64x2_t result = vaddq_s64(result, v60);
      v58 += 16;
    }
    while (v58 != 2304);
  }
  return result;
}

void physx::Gu::PCMSphereVsMeshContactGeneration::generateLastContacts(physx::Gu::PCMSphereVsMeshContactGeneration *this)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v67 = *((unsigned int *)this + 1208);
  if (!v67) {
    return;
  }
  uint64_t v1 = *((void *)this + 603);
  *(uint64_t *)((char *)v69.i64 + 4) = 0x2000000000;
  float32x2_t v70 = v72;
  char v71 = 0;
  int v2 = v67 - 1;
  if ((int)v67 - 1 < 1) {
    goto LABEL_43;
  }
  int v3 = 0;
  uint64_t v4 = v72;
  memset(v72, 0, sizeof(v72));
  while (1)
  {
    while (1)
    {
      if (v2 <= v3) {
        goto LABEL_36;
      }
      if ((v2 - v3) <= 4) {
        break;
      }
      int v5 = v3 + v2;
      if (v3 + v2 < 0 != __OFADD__(v3, v2)) {
        ++v5;
      }
      int v6 = (void *)(v1 + 16 * (v5 >> 1));
      uint64_t v7 = (void *)(v1 + 16 * v3);
      uint64_t v8 = *v7;
      if (COERCE_FLOAT(*v6) < COERCE_FLOAT(*v7))
      {
        long long v9 = *(_OWORD *)v7;
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
        *(_OWORD *)int v6 = v9;
        uint64_t v8 = *v7;
      }
      float32x4_t v10 = (void *)(v1 + 16 * v2);
      uint64_t v11 = *v10;
      if (COERCE_FLOAT(*v10) < *(float *)&v8)
      {
        long long v12 = *(_OWORD *)v7;
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v10;
        *(_OWORD *)float32x4_t v10 = v12;
        uint64_t v11 = *v10;
      }
      if (*(float *)&v11 < COERCE_FLOAT(*v6))
      {
        long long v13 = *(_OWORD *)v6;
        *(_OWORD *)int v6 = *(_OWORD *)v10;
        *(_OWORD *)float32x4_t v10 = v13;
      }
      uint64_t v14 = v2 - 1;
      unsigned int v15 = (long long *)(v1 + 16 * v14);
      long long v16 = *(_OWORD *)v6;
      *(_OWORD *)int v6 = *v15;
      *unsigned int v15 = v16;
      int v17 = v3;
      while (1)
      {
        uint64_t v18 = *(void *)v15;
        int8x8_t v19 = (long long *)(v1 + 16 * v17);
        do
        {
          uint64_t v20 = *((void *)v19++ + 2);
          ++v17;
        }
        while (*(float *)&v20 < *(float *)&v18);
        uint64_t v21 = (long long *)(v1 + 16 * (int)v14);
        do
        {
          uint64_t v22 = *((void *)v21-- - 2);
          LODWORD(v14) = v14 - 1;
        }
        while (*(float *)&v18 < *(float *)&v22);
        if (v17 >= (int)v14) {
          break;
        }
        long long v23 = *v19;
        *int8x8_t v19 = *v21;
        *uint64_t v21 = v23;
      }
      long long v24 = *v19;
      *int8x8_t v19 = *v15;
      *unsigned int v15 = v24;
      unsigned __int32 v25 = v69.u32[1];
      unsigned __int32 v26 = v69.i32[2] - 1;
      if (v17 - v3 >= v2 - v17)
      {
        if (v69.i32[1] >= v26)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>::grow((uint64_t)&v69);
          unsigned __int32 v25 = v69.u32[1];
          uint64_t v4 = v70;
        }
        v69.i32[1] = v25 + 1;
        *((_DWORD *)v4 + v25) = v17 + 1;
        uint64_t v28 = v69.u32[1];
        ++v69.i32[1];
        *((_DWORD *)v4 + v28) = v2;
        int v2 = v17 - 1;
      }
      else
      {
        if (v69.i32[1] >= v26)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SortedTriangle>>::grow((uint64_t)&v69);
          unsigned __int32 v25 = v69.u32[1];
          uint64_t v4 = v70;
        }
        v69.i32[1] = v25 + 1;
        *((_DWORD *)v4 + v25) = v3;
        uint64_t v27 = v69.u32[1];
        ++v69.i32[1];
        *((_DWORD *)v4 + v27) = v17 - 1;
        int v3 = v17 + 1;
      }
    }
    uint64_t v29 = v3;
    int v30 = v3 + 1;
    uint64_t v31 = v1 + 16 + 16 * v3;
    do
    {
      uint64_t v32 = 0;
      uint64_t v33 = v29++;
      uint64_t v34 = (uint64_t *)v31;
      int v35 = v33;
      do
      {
        uint64_t v36 = *v34;
        v34 += 2;
        if (*(float *)&v36 < COERCE_FLOAT(*(void *)(v1 + 16 * v35))) {
          int v35 = v30 + v32;
        }
        ++v32;
      }
      while (v33 + v32 < v2);
      if (v35 != v33)
      {
        long long v37 = *(_OWORD *)(v1 + 16 * v35);
        *(_OWORD *)(v1 + 16 * v35) = *(_OWORD *)(v1 + 16 * v33);
        *(_OWORD *)(v1 + 16 * v33) = v37;
      }
      ++v30;
      v31 += 16;
    }
    while (v29 != v2);
LABEL_36:
    __int32 v38 = v69.i32[1];
    if (!v69.i32[1]) {
      break;
    }
    --v69.i32[1];
    int v2 = *((_DWORD *)v4 + (v38 - 1));
    v69.i32[1] = v38 - 2;
    int v3 = *((_DWORD *)v4 + (v38 - 2));
  }
  if (v71) {
    _ZF = v4 == 0;
  }
  else {
    _ZF = 1;
  }
  if (!_ZF) {
    (*(void (**)(uint64_t, _OWORD *))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v4);
  }
LABEL_43:
  uint64_t v40 = 0;
  uint64_t v41 = *(void *)(*((void *)this + 467) + 4360);
  uint64_t v42 = (char *)this + 2452;
  __asm { FMOV            V8.2S, #1.0 }
  do
  {
    unsigned int v47 = *(_DWORD *)(*((void *)this + 603) + 16 * v40 + 8);
    uint64_t v48 = v41 + 60 * v47;
    unsigned int v50 = *(_DWORD *)(v48 + 36);
    unsigned int v49 = *(_DWORD *)(v48 + 40);
    unsigned int v51 = *(_DWORD *)(v48 + 44);
    int v52 = *(unsigned __int8 *)(v48 + 56);
    if (v50 >= v49) {
      unsigned int v53 = *(_DWORD *)(v48 + 40);
    }
    else {
      unsigned int v53 = *(_DWORD *)(v48 + 36);
    }
    if (v50 <= v49) {
      unsigned int v54 = v49;
    }
    else {
      unsigned int v54 = v50;
    }
    *(void *)&v72[0] = __PAIR64__(v54, v53);
    int v55 = physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData((uint64_t)v42, (int *)v72);
    if (v49 >= v51) {
      unsigned int v56 = v51;
    }
    else {
      unsigned int v56 = v49;
    }
    if (v49 <= v51) {
      unsigned int v57 = v51;
    }
    else {
      unsigned int v57 = v49;
    }
    *(void *)&v72[0] = __PAIR64__(v57, v56);
    int v58 = physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData((uint64_t)v42, (int *)v72);
    if (v51 >= v50) {
      unsigned int v59 = v50;
    }
    else {
      unsigned int v59 = v51;
    }
    if (v51 <= v50) {
      unsigned int v60 = v50;
    }
    else {
      unsigned int v60 = v51;
    }
    *(void *)&v72[0] = __PAIR64__(v60, v59);
    int v61 = physx::Gu::CacheMap<physx::Gu::CachedEdge,128u>::addData((uint64_t)v42, (int *)v72);
    if (v55 && v58 && v61 && v52)
    {
      uint64_t v62 = v41 + 60 * v47;
      *(void *)&long long v63 = *(void *)v62;
      *((void *)&v63 + 1) = *(unsigned int *)(v62 + 8);
      v72[0] = v63;
      *(void *)&long long v63 = *(void *)(v62 + 12);
      v64.i64[1] = *(unsigned int *)(v62 + 20);
      float32x4_t v69 = (float32x4_t)v64;
      v62 += 24;
      *(float32x2_t *)v64.i8 = vld1_dup_f32((const float *)v62);
      float32x2_t v65 = vrsqrte_f32(*(float32x2_t *)v64.i8);
      int v66 = 4;
      do
      {
        float32x2_t v65 = vmul_f32(v65, vrsqrts_f32(vmul_f32(v65, v65), *(float32x2_t *)v64.i8));
        --v66;
      }
      while (v66);
      *(float32x2_t *)v64.i8 = vmul_f32(*(float32x2_t *)v64.i8, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(*(float32x2_t *)v64.i8), 0), _D8, (int8x8_t)v65));
      physx::Gu::PCMSphereVsMeshContactGeneration::addToPatch((unint64_t)this, v72, &v69, *(_DWORD *)(v41 + 60 * v47 + 48), v64);
    }
    ++v40;
  }
  while (v40 != v67);
}

__n128 physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEE(int8x8_t *a1, int a2, uint64_t a3, _DWORD *a4, __n128 result, float32x4_t a6, float32x2_t a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9 = vsubq_f32(a9, a8);
  float32x4_t v10 = *(float32x4_t *)a1->i8;
  float32x2_t v11 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  float32x2_t v12 = (float32x2_t)vext_s8(*a1, (int8x8_t)v11, 4uLL);
  int8x8_t v13 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v12), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), (float32x2_t)*a1);
  *(int8x8_t *)v14.f32 = vext_s8(v13, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float32x2_t)*a1), *(float32x2_t *)v9.f32, v11), 4uLL);
  v14.i64[1] = v13.u32[0];
  float32x4_t v15 = vmulq_f32(v14, a8);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  float32x2_t v16 = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32);
  float32x4_t v17 = vmulq_f32(v14, (float32x4_t)result);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x2_t v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  float32x4_t v19 = vmulq_f32(v14, a6);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  if (vmul_f32(vsub_f32(v18, v16), vsub_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), v16)).f32[0] <= 0.0)
  {
    float32x4_t v20 = vsubq_f32(a6, (float32x4_t)result);
    float32x4_t v21 = vmulq_f32(v20, v14);
    v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
    float32x2_t v22 = vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32);
    if (v22.f32[0] != 0.0)
    {
      float32x2_t v23 = vrecpe_f32(v22);
      int v24 = 4;
      do
      {
        float32x2_t v23 = vmul_f32(v23, vrecps_f32(v22, v23));
        --v24;
      }
      while (v24);
      int64x2_t result = (__n128)vmlaq_n_f32((float32x4_t)result, v20, vmul_f32(vsub_f32(v16, v18), v23).f32[0]);
      result.n128_u64[1] = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u32[0];
      int8x8_t v25 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL), *(float32x2_t *)v10.f32), v12, *(float32x2_t *)v20.f32);
      *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v11), *(float32x2_t *)v10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
      v26.i64[1] = v25.u32[0];
      float32x4_t v27 = vsubq_f32((float32x4_t)result, a8);
      int8x16_t v28 = (int8x16_t)vmulq_f32(v26, v27);
      float32x2_t v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
      float32x4_t v30 = vmulq_f32(v9, v26);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      float32x2_t v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
      float32x2_t v32 = vrecpe_f32(v31);
      int v33 = 4;
      do
      {
        float32x2_t v32 = vmul_f32(v32, vrecps_f32(v31, v32));
        --v33;
      }
      while (v33);
      float32x2_t v34 = vpadd_f32(*(float32x2_t *)v28.i8, v29);
      float32x2_t v35 = vmul_f32(v32, vpadd_f32(v34, v34));
      __asm { FMOV            V6.2S, #1.0 }
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorn_s8(vmvn_s8((int8x8_t)vcge_f32(_D6, v35)), (int8x8_t)vcgez_f32(v35)), 0), (int8x8_t)result.n128_u64[0]).u32[0] != -1)
      {
        float32x4_t v41 = vmlsq_lane_f32(v27, v9, v35, 0);
        uint64_t v42 = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u32[0];
        float32x2_t v43 = vpadd_f32(vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), vmul_f32((float32x2_t)v42, (float32x2_t)v42));
        if ((vmvn_s8((int8x8_t)vcgt_f32(a7, vpadd_f32(v43, v43))).u8[0] & 1) == 0)
        {
          v41.i64[1] = v42;
          float32x4_t v44 = vsubq_f32((float32x4_t)result, v41);
          float32x4_t v45 = vmulq_f32(v10, v41);
          v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
          *(__n128 *)(a3 + ((unint64_t)*a4 << 6)) = result;
          *(float32x4_t *)(a3 + ((unint64_t)*a4 << 6) + 16) = v44;
          int64x2_t result = *(__n128 *)a1->i8;
          result.n128_u32[3] = vpadd_f32(*(float32x2_t *)&v45, *(float32x2_t *)&v45).u32[1];
          *(__n128 *)(a3 + ((unint64_t)*a4 << 6) + 32) = result;
          uint64_t v46 = *a4;
          *a4 = v46 + 1;
          *(_DWORD *)(a3 + (v46 << 6) + 48) = a2;
        }
      }
    }
  }
  return result;
}

__n128 physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEEMTD(int8x8_t *a1, int a2, uint64_t a3, _DWORD *a4, __n128 result, float32x4_t a6, float32x2_t a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9 = vsubq_f32(a9, a8);
  float32x4_t v10 = *(float32x4_t *)a1->i8;
  float32x2_t v11 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  float32x2_t v12 = (float32x2_t)vext_s8(*a1, (int8x8_t)v11, 4uLL);
  int8x8_t v13 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.f32, v12), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), (float32x2_t)*a1);
  *(int8x8_t *)v14.f32 = vext_s8(v13, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), (float32x2_t)*a1), *(float32x2_t *)v9.f32, v11), 4uLL);
  v14.i64[1] = v13.u32[0];
  float32x4_t v15 = vmulq_f32(v14, a8);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  float32x2_t v16 = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32);
  float32x4_t v17 = vmulq_f32(v14, (float32x4_t)result);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x2_t v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  float32x4_t v19 = vmulq_f32(v14, a6);
  v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
  if (vmul_f32(vsub_f32(v18, v16), vsub_f32(vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), v16)).f32[0] <= 0.0)
  {
    float32x4_t v20 = vsubq_f32(a6, (float32x4_t)result);
    float32x4_t v21 = vmulq_f32(v20, v14);
    v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
    float32x2_t v22 = vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32);
    if (v22.f32[0] != 0.0)
    {
      float32x2_t v23 = vrecpe_f32(v22);
      int v24 = 4;
      do
      {
        float32x2_t v23 = vmul_f32(v23, vrecps_f32(v22, v23));
        --v24;
      }
      while (v24);
      int64x2_t result = (__n128)vmlaq_n_f32((float32x4_t)result, v20, vmul_f32(vsub_f32(v16, v18), v23).f32[0]);
      result.n128_u64[1] = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u32[0];
      int8x8_t v25 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL), *(float32x2_t *)v10.f32), v12, *(float32x2_t *)v20.f32);
      *(int8x8_t *)v26.f32 = vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v11), *(float32x2_t *)v10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL)), 4uLL);
      v26.i64[1] = v25.u32[0];
      float32x4_t v27 = vsubq_f32((float32x4_t)result, a8);
      int8x16_t v28 = (int8x16_t)vmulq_f32(v26, v27);
      float32x2_t v29 = (float32x2_t)vextq_s8(v28, v28, 8uLL).u64[0];
      float32x4_t v30 = vmulq_f32(v9, v26);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      float32x2_t v31 = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32);
      float32x2_t v32 = vrecpe_f32(v31);
      int v33 = 4;
      do
      {
        float32x2_t v32 = vmul_f32(v32, vrecps_f32(v31, v32));
        --v33;
      }
      while (v33);
      float32x2_t v34 = vpadd_f32(*(float32x2_t *)v28.i8, v29);
      __asm { FMOV            V6.2S, #1.0 }
      float32x4_t v40 = vmlsq_lane_f32(v27, v9, vmax_f32(vmin_f32(vmul_f32(v32, vpadd_f32(v34, v34)), _D6), 0), 0);
      v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
      float32x4_t v41 = vmulq_f32(v10, v40);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      float32x2_t v42 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
      if ((vmvn_s8((int8x8_t)vcgt_f32(a7, v42)).u8[0] & 1) == 0)
      {
        *(__n128 *)(a3 + ((unint64_t)*a4 << 6)) = result;
        *(float32x4_t *)(a3 + ((unint64_t)*a4 << 6) + 16) = vsubq_f32((float32x4_t)result, v40);
        int64x2_t result = *(__n128 *)a1->i8;
        result.n128_u32[3] = v42.u32[1];
        *(__n128 *)(a3 + ((unint64_t)*a4 << 6) + 32) = result;
        uint64_t v43 = *a4;
        *a4 = v43 + 1;
        *(_DWORD *)(a3 + (v43 << 6) + 48) = a2;
      }
    }
  }
  return result;
}

float32x4_t physx::Gu::PCMCapsuleVsMeshContactGeneration::generateContacts(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int a4, float32x4_t *a5, float32x2_t *a6, uint64_t a7, _DWORD *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  float32x4_t v11 = *a1;
  float32x4_t v12 = vsubq_f32(a9, *a1);
  float32x4_t v13 = vsubq_f32(a10, *a1);
  float32x4_t result = vmulq_f32(v12, v12);
  result.i64[0] = vpaddq_f32(result, result).u64[0];
  *(float32x2_t *)result.f32 = vpadd_f32(*(float32x2_t *)result.f32, *(float32x2_t *)result.f32);
  float32x4_t v15 = vmulq_f32(v12, v13);
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  float32x2_t v16 = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32);
  float32x4_t v17 = vmulq_f32(v13, v13);
  v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
  float32x2_t v18 = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  float32x2_t v19 = vsub_f32(vmul_f32(*(float32x2_t *)result.f32, v18), vmul_f32(v16, v16));
  float32x2_t v20 = vrecpe_f32(v19);
  int v21 = 4;
  do
  {
    float32x2_t v20 = vmul_f32(v20, vrecps_f32(v19, v20));
    --v21;
  }
  while (v21);
  float32x4_t v22 = vsubq_f32(a11, v11);
  float32x4_t v23 = *a2;
  float32x4_t v24 = vnegq_f32(v22);
  v24.i32[3] = 0;
  int8x16_t v25 = (int8x16_t)vmulq_f32(v24, *a2);
  float32x2_t v26 = (float32x2_t)vextq_s8(v25, v25, 8uLL).u64[0];
  float32x4_t v27 = vmulq_f32(*a2, *a3);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  float32x2_t v28 = vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32);
  float32x2_t v29 = vrecpe_f32(v28);
  int v30 = 4;
  float32x2_t v31 = v29;
  do
  {
    float32x2_t v31 = vmul_f32(v31, vrecps_f32(v28, v31));
    --v30;
  }
  while (v30);
  float32x2_t v32 = vpadd_f32(*(float32x2_t *)v25.i8, v26);
  int8x8_t v33 = (int8x8_t)vmul_f32(v31, vpadd_f32(v32, v32));
  int8x8_t v34 = (int8x8_t)vdup_lane_s32(vcgtz_f32(v28), 0);
  *(int8x8_t *)v35.f32 = vand_s8(v34, v33);
  float32x4_t v36 = vmulq_f32(v22, v23);
  v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
  float32x2_t v37 = vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32);
  float32x4_t v38 = vmlaq_n_f32(a11, *a3, v35.f32[0]);
  v38.i64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0];
  float32x4_t v39 = vsubq_f32(v38, v11);
  float32x4_t v40 = vmulq_f32(v12, v39);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  *(float32x2_t *)v40.f32 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  float32x4_t v41 = vmulq_f32(v13, v39);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  *(float32x2_t *)v41.f32 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
  float32x2_t v42 = vmul_f32(v20, vsub_f32(vmul_f32(v18, *(float32x2_t *)v40.f32), vmul_f32(v16, *(float32x2_t *)v41.f32)));
  *(float32x2_t *)v41.f32 = vmul_f32(v20, vsub_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)v41.f32), vmul_f32(v16, *(float32x2_t *)v40.f32)));
  float32x2_t v43 = (float32x2_t)vdup_n_s32(0x3F800001u);
  float32x4_t v44 = vsubq_f32(*a5, v11);
  if (vuzp1_s8((int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16((int16x4_t)vand_s8(vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(v43, v42), (int8x8_t)vcgt_f32(*a6, v37)), vand_s8((int8x8_t)vcge_f32(v42, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(v43, *(float32x2_t *)v41.f32))), (int8x8_t)vcge_f32(*(float32x2_t *)v41.f32, (float32x2_t)0xB4000000B4000000)), (int8x8_t)vcgt_f32(v43, vadd_f32(v42, *(float32x2_t *)v41.f32))), 0), 0xFuLL)), *(int8x8_t *)result.f32).u32[0] == -1)
  {
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6)) = a11;
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6) + 16) = v38;
    float32x4_t v45 = *a3;
    v35.i64[1] = v35.i64[0];
    v45.i32[3] = vnegq_f32(v35).i32[3];
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6) + 32) = v45;
    uint64_t v46 = *a8;
    *a8 = v46 + 1;
    *(_DWORD *)(a7 + (v46 << 6) + 48) = a4;
    float32x4_t v23 = *a2;
  }
  float32x4_t v47 = vnegq_f32(v44);
  v47.i32[3] = 0;
  float32x4_t v48 = vmulq_f32(v47, v23);
  float32x2_t v49 = (float32x2_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
  int8x16_t v50 = (int8x16_t)vmulq_f32(v44, v23);
  float32x2_t v51 = (float32x2_t)vextq_s8(v50, v50, 8uLL).u64[0];
  int v52 = 4;
  do
  {
    float32x2_t v29 = vmul_f32(v29, vrecps_f32(v28, v29));
    --v52;
  }
  while (v52);
  float32x2_t v53 = vpadd_f32(*(float32x2_t *)v48.f32, v49);
  float32x2_t v54 = vpadd_f32(*(float32x2_t *)v50.i8, v51);
  *(int8x8_t *)v48.f32 = vand_s8(v34, (int8x8_t)vmul_f32(v29, vpadd_f32(v53, v53)));
  float32x4_t v55 = vmlaq_n_f32(*a5, *a3, v48.f32[0]);
  v55.i64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u32[0];
  float32x4_t v56 = vsubq_f32(v55, *a1);
  float32x4_t v57 = vmulq_f32(v12, v56);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  *(float32x2_t *)v57.f32 = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32);
  float32x4_t v58 = vmulq_f32(v13, v56);
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  *(float32x2_t *)v58.f32 = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32);
  float32x2_t v59 = vmul_f32(v20, vsub_f32(vmul_f32(v18, *(float32x2_t *)v57.f32), vmul_f32(v16, *(float32x2_t *)v58.f32)));
  float32x2_t v60 = vmul_f32(v20, vsub_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)v58.f32), vmul_f32(v16, *(float32x2_t *)v57.f32)));
  *(int32x2_t *)v57.f32 = vdup_n_s32(0x3F800001u);
  int8x8_t v61 = (int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16((int16x4_t)vand_s8(vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(*(float32x2_t *)v57.f32, v59), (int8x8_t)vcgt_f32(*a6, vpadd_f32(v54, v54))), vand_s8((int8x8_t)vcge_f32(v59, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(*(float32x2_t *)v57.f32, v60))), (int8x8_t)vcge_f32(v60, (float32x2_t)0xB4000000B4000000)), (int8x8_t)vcgt_f32(*(float32x2_t *)v57.f32, vadd_f32(v59, v60))), 0), 0xFuLL));
  *(int8x8_t *)result.f32 = vuzp1_s8(v61, v61);
  if (result.i32[0] == -1)
  {
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6)) = *a5;
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6) + 16) = v55;
    v48.i64[1] = v48.i64[0];
    float32x4_t result = *a3;
    result.i32[3] = vnegq_f32(v48).i32[3];
    *(float32x4_t *)(a7 + ((unint64_t)*a8 << 6) + 32) = result;
    uint64_t v62 = *a8;
    *a8 = v62 + 1;
    *(_DWORD *)(a7 + (v62 << 6) + 48) = a4;
  }
  return result;
}

void *physx::Gu::pcmDistanceSegmentTriangleSquared(void *result, void *a2, void *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  float32x4_t v8 = vsubq_f32(a7, a6);
  float32x4_t v9 = vsubq_f32(a8, a6);
  int8x8_t v10 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v8.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL), *(float32x2_t *)v9.f32);
  *(int8x8_t *)v11.f32 = vext_s8(v10, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), *(float32x2_t *)v9.f32), *(float32x2_t *)v8.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL)), 4uLL);
  v11.i64[1] = v10.u32[0];
  float32x2_t v12 = vpadd_f32(vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32), vmul_f32((float32x2_t)v10.u32[0], (float32x2_t)v10.u32[0]));
  float32x2_t v13 = vpadd_f32(v12, v12);
  float32x2_t v14 = vrsqrte_f32(v13);
  int v15 = 4;
  do
  {
    float32x2_t v14 = vmul_f32(v14, vrsqrts_f32(vmul_f32(v14, v14), v13));
    --v15;
  }
  while (v15);
  float32x4_t v16 = vsubq_f32(a4, a6);
  __asm { FMOV            V5.2S, #1.0 }
  float32x2_t v22 = vmul_f32(v13, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v13), 0), (int8x8_t)_D5, (int8x8_t)v14));
  float32x2_t v23 = vrecpe_f32(v22);
  int v24 = 4;
  do
  {
    float32x2_t v23 = vmul_f32(v23, vrecps_f32(v22, v23));
    --v24;
  }
  while (v24);
  int32x4_t v25 = (int32x4_t)vsubq_f32(a8, a7);
  float32x4_t v26 = vmulq_n_f32(v11, v23.f32[0]);
  v26.i32[3] = 0;
  int32x4_t v27 = (int32x4_t)vmulq_f32(v8, v8);
  int32x4_t v28 = (int32x4_t)vmulq_f32(v8, v9);
  int32x4_t v29 = (int32x4_t)vmulq_f32(v9, v9);
  float32x4_t v30 = vmulq_f32(v16, v26);
  int32x4_t v31 = vzip1q_s32(v27, v29);
  int32x4_t v32 = vzip2q_s32(v27, v29);
  int32x4_t v33 = vzip1q_s32(v28, (int32x4_t)v30);
  float32x4_t v34 = vaddq_f32((float32x4_t)vzip1q_s32(v32, vzip2q_s32(v28, (int32x4_t)v30)), vaddq_f32((float32x4_t)vzip1q_s32(v31, v33), (float32x4_t)vzip2q_s32(v31, v33)));
  int32x4_t v35 = (int32x4_t)vmulq_f32(v34, v34);
  float32x2_t v36 = vsub_f32(vmul_laneq_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 0), v34, 2), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1));
  float32x2_t v37 = vrecpe_f32(v36);
  int v38 = 4;
  do
  {
    float32x2_t v37 = vmul_f32(v37, vrecps_f32(v36, v37));
    --v38;
  }
  while (v38);
  float32x4_t v39 = vsubq_f32(a5, a4);
  float32x4_t v40 = vmulq_f32(vsubq_f32(a5, a6), v26);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  float32x2_t v41 = vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32);
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcltz_f32(vmul_laneq_f32(v41, v34, 3)), 0), *(int8x8_t *)a4.f32).u32[0] != -1) {
    goto LABEL_11;
  }
  float32x2_t v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.f32, 1);
  float32x2_t v43 = (float32x2_t)vpaddq_f32(v30, v30).u64[0];
  float32x4_t v44 = vmulq_f32(v39, v26);
  v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
  float32x2_t v45 = vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32);
  float32x2_t v46 = vrecpe_f32(v45);
  int v47 = 4;
  do
  {
    float32x2_t v46 = vmul_f32(v46, vrecps_f32(v45, v46));
    --v47;
  }
  while (v47);
  float32x2_t v48 = vmul_f32(v46, vneg_f32(vpadd_f32(v43, v43)));
  float32x4_t v49 = vmlaq_n_f32(a4, v39, v48.f32[0]);
  v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
  float32x4_t v50 = vsubq_f32(v49, a6);
  float32x4_t v51 = vmulq_f32(v8, v50);
  v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
  *(float32x2_t *)v51.f32 = vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32);
  float32x4_t v52 = vmulq_f32(v9, v50);
  v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
  float32x2_t v53 = vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32);
  float32x2_t v54 = vmul_f32(v37, vmls_f32(vmul_laneq_f32(*(float32x2_t *)v51.f32, v34, 2), v53, v42));
  float32x2_t v55 = vmul_f32(v37, vmls_f32(vmul_n_f32(v53, v34.f32[0]), *(float32x2_t *)v51.f32, v42));
  float32x2_t v56 = (float32x2_t)vdup_n_s32(0x3F800001u);
  if (vuzp1_s8((int8x8_t)vcltz_s16(vshl_n_s16(vdup_lane_s16((int16x4_t)vand_s8(vand_s8(vand_s8((int8x8_t)vcge_f32(v54, (float32x2_t)0xB4000000B4000000), (int8x8_t)vcge_f32(v56, v54)), vand_s8((int8x8_t)vcge_f32(v56, v55), (int8x8_t)vcge_f32(v55, (float32x2_t)0xB4000000B4000000))), (int8x8_t)vcgt_f32(v56, vadd_f32(v54, v55))), 0), 0xFuLL)), *(int8x8_t *)a4.f32).u32[0] == -1)
  {
    *float32x4_t result = v48;
    *a2 = v54;
    *a3 = v55;
  }
  else
  {
LABEL_11:
    float32x2_t v57 = (float32x2_t)vdup_laneq_s32(v35, 3);
    float32x4_t v58 = vmlsq_laneq_f32(a4, v26, v34, 3);
    v58.i64[1] = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u32[0];
    float32x4_t v59 = vmlsq_lane_f32(a5, v26, v41, 0);
    v59.i64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u32[0];
    float32x4_t v60 = vsubq_f32(v58, a6);
    float32x4_t v61 = vsubq_f32(v59, a6);
    int32x4_t v62 = (int32x4_t)vmulq_f32(v8, v60);
    int32x4_t v63 = (int32x4_t)vmulq_f32(v9, v60);
    int32x4_t v64 = (int32x4_t)vmulq_f32(v8, v61);
    int32x4_t v65 = (int32x4_t)vmulq_f32(v9, v61);
    int32x4_t v66 = vzip1q_s32(v62, v64);
    float32x4_t v67 = (float32x4_t)vzip2q_s32(v62, v64);
    float32x4_t v68 = (float32x4_t)vzip1q_s32(v63, v65);
    float32x4_t v69 = vaddq_f32((float32x4_t)vzip1q_s32((int32x4_t)v67, vzip2q_s32(v63, v65)), vaddq_f32((float32x4_t)vzip1q_s32(v66, (int32x4_t)v68), (float32x4_t)vzip2q_s32(v66, (int32x4_t)v68)));
    *(int32x2_t *)v67.f32 = vrev64_s32(*(int32x2_t *)v69.f32);
    *(int32x2_t *)&v67.u32[2] = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL));
    int32x4_t v70 = (int32x4_t)vmulq_n_f32(vmlsq_lane_f32(vmulq_f32((float32x4_t)vzip1q_s32(vdupq_laneq_s32((int32x4_t)v34, 2), vdupq_lane_s32(*(int32x2_t *)v34.f32, 0)), v69), v67, *(float32x2_t *)v34.f32, 1), v37.f32[0]);
    int8x8_t v71 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 0);
    int8x8_t v72 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1);
    int8x8_t v73 = (int8x8_t)vdup_laneq_s32(v70, 2);
    float32x2_t v74 = vmul_f32(v41, v41);
    int8x8_t v75 = (int8x8_t)vdup_laneq_s32(v70, 3);
    float32x4_t v76 = (float32x4_t)vuzp1q_s32(v70, v70);
    float32x4_t v77 = (float32x4_t)vuzp2q_s32(v70, v70);
    v68.i64[0] = 0xB4000000B4000000;
    v68.i64[1] = 0xB4000000B4000000;
    float32x4_t v78 = (float32x4_t)vdupq_n_s32(0x3F800001u);
    v77.i64[0] = vandq_s8(vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v76, v68), (int8x16_t)vcgeq_f32(v78, v76)), vandq_s8((int8x16_t)vcgeq_f32(v78, v77), (int8x16_t)vcgeq_f32(v77, v68))), (int8x16_t)vcgtq_f32(v78, vaddq_f32(v76, v77))).u64[0];
    int32x4_t v79 = vdupq_lane_s32(*(int32x2_t *)v77.f32, 0);
    int32x4_t v80 = vdupq_lane_s32(*(int32x2_t *)v77.f32, 1);
    v66.i64[0] = -1;
    v66.i64[1] = -1;
    if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)v79, (int8x16_t)v80), v66)), *(int8x8_t *)a4.f32).u32[0] == -1)
    {
      int8x8_t v141 = (int8x8_t)vdup_lane_s32(vcgt_f32(v74, v57), 0);
      *float32x4_t result = vbic_s8((int8x8_t)_D5, v141);
      *a2 = vbsl_s8(v141, v71, v73);
      *a3 = vbsl_s8(v141, v72, v75);
    }
    else
    {
      int8x8_t v144 = v73;
      float32x4_t v81 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1);
      float32x4_t v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 1);
      int32x4_t v83 = vzip1q_s32((int32x4_t)v8, (int32x4_t)v9);
      int32x4_t v84 = vzip1q_s32(v25, (int32x4_t)v8);
      float32x4_t v85 = (float32x4_t)vzip2q_s32(v83, v84);
      int32x4_t v86 = vzip1q_s32((int32x4_t)a6, (int32x4_t)a6);
      int32x4_t v87 = vzip1q_s32((int32x4_t)a7, (int32x4_t)a6);
      float32x4_t v88 = (float32x4_t)vzip2q_s32(v86, v87);
      float32x4_t v89 = vsubq_f32(v82, v88);
      float32x4_t v90 = vmulq_f32(v39, v39);
      v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
      *(float32x2_t *)v95.f32 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
      float32x4_t v91 = vmulq_f32(v85, v85);
      float32x4_t v92 = vmulq_lane_f32(v85, *(float32x2_t *)v39.f32, 1);
      float32x4_t v93 = vmulq_lane_f32(v89, *(float32x2_t *)v39.f32, 1);
      float32x4_t v94 = vmulq_f32(v89, v85);
      v95.i64[1] = v95.i64[0];
      float32x4_t v96 = vrecpeq_f32(v95);
      int v97 = 4;
      do
      {
        float32x4_t v96 = vmulq_f32(v96, vrecpsq_f32(v96, v95));
        --v97;
      }
      while (v97);
      float32x4_t v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0);
      float32x4_t v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
      float32x4_t v100 = (float32x4_t)vzip1q_s32(v83, v84);
      float32x4_t v101 = (float32x4_t)vzip1q_s32(v86, v87);
      float32x4_t v102 = vsubq_f32(v99, v101);
      float32x4_t v103 = vmlaq_n_f32(v93, v102, v39.f32[0]);
      float32x4_t v104 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2);
      float32x4_t v105 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v8, (int32x4_t)v9), vzip2q_s32(v25, (int32x4_t)v8));
      float32x4_t v106 = (float32x4_t)vzip1q_s32(vdupq_laneq_s32((int32x4_t)a6, 2), vzip2q_s32((int32x4_t)a7, (int32x4_t)a6));
      float32x4_t v107 = vmlaq_f32(vmlaq_f32(v91, v100, v100), v105, v105);
      float32x4_t v108 = vrecpeq_f32(v107);
      int v109 = 4;
      do
      {
        float32x4_t v108 = vmulq_f32(v108, vrecpsq_f32(v108, v107));
        --v109;
      }
      while (v109);
      int8x8_t v145 = v75;
      float32x4_t v110 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a4, 2);
      float32x4_t v111 = vsubq_f32(v110, v106);
      float32x4_t v112 = vmlaq_f32(v103, v111, v104);
      float32x4_t v113 = vmlaq_f32(vmlaq_f32(v92, v100, v98), v105, v104);
      float32x4_t v114 = vsubq_f32(vmulq_f32(v107, v95), vmulq_f32(v113, v113));
      float32x4_t v115 = vmulq_f32(v112, v107);
      float32x4_t v116 = vrecpeq_f32(v114);
      int v117 = 4;
      do
      {
        float32x4_t v116 = vmulq_f32(v116, vrecpsq_f32(v116, v114));
        --v117;
      }
      while (v117);
      float32x4_t v118 = vmlaq_f32(vmlaq_f32(v94, v102, v100), v111, v105);
      __asm { FMOV            V14.4S, #1.0 }
      int8x16_t v120 = (int8x16_t)vmaxq_f32(vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v114), (int8x16_t)_Q14, (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v113, v118), v115), v116)), _Q14), (float32x4_t)0);
      v121.i64[0] = 0x3400000034000000;
      v121.i64[1] = 0x3400000034000000;
      int8x16_t v122 = (int8x16_t)vcgeq_f32(v121, v114);
      v121.i64[0] = 0x3F0000003F000000;
      v121.i64[1] = 0x3F0000003F000000;
      float32x4_t v123 = vmaxq_f32(vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v107), (int8x16_t)_Q14, (int8x16_t)vmulq_f32(v108, vaddq_f32(v118, vmulq_f32(v113, (float32x4_t)vbslq_s8(v122, (int8x16_t)v121, v120))))), _Q14), (float32x4_t)0);
      float32x4_t v124 = vmaxq_f32(vminq_f32((float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v95), (int8x16_t)_Q14, (int8x16_t)vmulq_f32(v96, vsubq_f32(vmulq_f32(v113, v123), v112))), _Q14), (float32x4_t)0);
      float32x4_t v125 = vmlaq_f32(v106, v123, v105);
      float32x4_t v126 = vsubq_f32(vmlaq_f32(v99, v124, v98), vmlaq_f32(v101, v123, v100));
      float32x4_t v127 = vsubq_f32(vmlaq_f32(v82, v124, v81), vmlaq_f32(v88, v123, v85));
      float32x4_t v128 = vsubq_f32(vmlaq_f32(v110, v124, v104), v125);
      float32x2_t v129 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.f32, 1);
      int8x8_t v130 = (int8x8_t)vdup_laneq_s32((int32x4_t)v123, 2);
      int32x4_t v131 = (int32x4_t)vmlaq_f32(vmlaq_f32(vmulq_f32(v128, v128), v127, v127), v126, v126);
      *(int32x2_t *)v126.f32 = vdup_lane_s32(*(int32x2_t *)v131.i8, 0);
      float32x2_t v132 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.i8, 1);
      *(int32x2_t *)v131.i8 = vdup_laneq_s32(v131, 2);
      int32x2_t v133 = (int32x2_t)vand_s8((int8x8_t)vcgt_f32(v132, *(float32x2_t *)v126.f32), (int8x8_t)vcgt_f32(*(float32x2_t *)v131.i8, *(float32x2_t *)v126.f32));
      int8x8_t v134 = (int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v131.i8, v132), 0);
      *(int8x8_t *)v131.i8 = vbsl_s8(v134, (int8x8_t)v132, *(int8x8_t *)v131.i8);
      int8x8_t v135 = (int8x8_t)vdup_lane_s32(v133, 0);
      float32x2_t v136 = (float32x2_t)vbsl_s8(v135, *(int8x8_t *)v126.f32, *(int8x8_t *)v131.i8);
      int8x8_t v137 = vbsl_s8(v135, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v123.f32, 0), vand_s8(v134, (int8x8_t)vsub_f32(_D5, v129)));
      int8x8_t v138 = vbic_s8(vbsl_s8(v134, (int8x8_t)v129, v130), v135);
      int8x8_t v139 = vbsl_s8(v135, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v124.f32, 0), vbsl_s8(v134, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v124.f32, 1), (int8x8_t)vdup_laneq_s32((int32x4_t)v124, 2)));
      v140.i64[0] = -1;
      v140.i64[1] = -1;
      if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v79, v140)), (int8x8_t)v136).u32[0] == -1)
      {
        int8x8_t v142 = (int8x8_t)vdup_lane_s32(vcgt_f32(v136, v57), 0);
        *float32x4_t result = vbic_s8(v139, v142);
        *a2 = vbsl_s8(v142, v71, v137);
        *a3 = vbsl_s8(v142, v72, v138);
      }
      else if (vuzp1_s8((int8x8_t)vmovn_s32(vceqq_s32(v80, v140)), (int8x8_t)v136).u32[0] == -1)
      {
        int8x8_t v143 = (int8x8_t)vdup_lane_s32(vcgt_f32(v136, v74), 0);
        *float32x4_t result = vbsl_s8(v143, (int8x8_t)_D5, v139);
        *a2 = vbsl_s8(v143, v144, v137);
        *a3 = vbsl_s8(v143, v145, v138);
      }
      else
      {
        *float32x4_t result = v139;
        *a2 = v137;
        *a3 = v138;
      }
    }
  }
  return result;
}

BOOL physx::Gu::selectNormal(char a1, double a2, double a3)
{
  if (*(float *)&a2 < 0.000001)
  {
    if (*(float *)&a3 < 0.000001)
    {
      if ((a1 & 0x28) == 0) {
        return 1;
      }
    }
    else if (*(float *)&a3 > 1.0)
    {
      if ((a1 & 0x30) == 0) {
        return 1;
      }
    }
    else if ((a1 & 0x20) == 0)
    {
      return 1;
    }
    return 0;
  }
  if (*(float *)&a2 > 1.0) {
    return *(float *)&a3 < 0.000001 && (a1 & 0x18) == 0;
  }
  if (*(float *)&a3 < 0.000001) {
    return (a1 & 8) == 0;
  }
  uint64_t v3 = 1;
  if ((a1 & 0x10) != 0 && vadd_f32(*(float32x2_t *)&a2, *(float32x2_t *)&a3).f32[0] >= 0.9999) {
    return 0;
  }
  return v3;
}

uint64_t physx::Gu::PCMCapsuleVsMeshContactGeneration::processTriangle(float32x4_t *a1, int a2, float32x4_t *a3, float32x2_t *a4, char a5, uint64_t a6, _DWORD *a7)
{
  float32x4_t v13 = a1[3];
  float32x4_t v14 = a1[4];
  float32x4_t v15 = a1[5];
  int8x16_t v16 = (int8x16_t)vsubq_f32(v14, v13);
  int8x16_t v17 = (int8x16_t)vsubq_f32(v15, v13);
  int8x8_t v18 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 4uLL), *(float32x2_t *)v17.i8);
  *(int8x8_t *)v19.f32 = vext_s8(v18, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(float32x2_t *)v17.i8), *(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 4uLL);
  v19.i64[1] = v18.u32[0];
  float32x4_t v64 = v13;
  *(float32x2_t *)v17.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32), vmul_f32((float32x2_t)v18.u32[0], (float32x2_t)v18.u32[0]));
  float32x2_t v20 = vpadd_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8);
  float32x2_t v21 = vrsqrte_f32(v20);
  int v22 = 4;
  do
  {
    float32x2_t v21 = vmul_f32(v21, vrsqrts_f32(vmul_f32(v21, v21), v20));
    --v22;
  }
  while (v22);
  __asm { FMOV            V8.2S, #1.0 }
  float32x2_t v28 = vmul_f32(v20, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v20), 0), (int8x8_t)_D8, (int8x8_t)v21));
  float32x2_t v29 = vrecpe_f32(v28);
  int v30 = 4;
  do
  {
    float32x2_t v29 = vmul_f32(v29, vrecps_f32(v28, v29));
    --v30;
  }
  while (v30);
  float32x4_t v31 = vmulq_n_f32(v19, v29.f32[0]);
  v31.i32[3] = 0;
  float32x4_t v54 = v31;
  float32x4_t v63 = v31;
  float32x2_t v32 = vmul_f32(*a4, *a4);
  double v61 = 0.0;
  uint64_t v62 = 0;
  double v60 = 0.0;
  float32x4_t v55 = a3[3];
  float32x4_t v56 = v13;
  float32x4_t v53 = a3[4];
  float32x4_t v57 = v14;
  float32x4_t v58 = v15;
  physx::Gu::pcmDistanceSegmentTriangleSquared(&v62, &v61, &v60, v55, v53, v13, v14, v15);
  if (vcgt_f32(v32, v33).u8[0])
  {
    float v52 = v33.f32[0];
    float32x2_t v50 = *(float32x2_t *)&v60;
    float32x2_t v51 = *(float32x2_t *)&v61;
    if (physx::Gu::selectNormal(a5, v61, v60))
    {
      float32x4_t v34 = v55;
      float32x4_t v59 = v54;
      float32x4_t v35 = v57;
      float32x4_t v36 = v58;
    }
    else
    {
      float32x4_t v35 = v57;
      float32x4_t v36 = v58;
      float32x4_t v37 = v54;
      float32x4_t v34 = v55;
      if (v52 != 0.0)
      {
        int8x16_t v38 = (int8x16_t)vmlaq_n_f32(v55, vsubq_f32(v53, v55), *(float *)&v62);
        float32x4_t v39 = vmulq_n_f32(v58, v50.f32[0]);
        v39.i32[3] = 0;
        float32x4_t v40 = vmlaq_n_f32(v39, v57, v51.f32[0]);
        v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
        int8x16_t v41 = (int8x16_t)vmlaq_n_f32(v40, v56, vsub_f32(_D8, vadd_f32(v51, v50)).f32[0]);
        *(float32x2_t *)v42.f32 = vsub_f32(*(float32x2_t *)v38.i8, *(float32x2_t *)v41.i8);
        *(float32x2_t *)&v42.u32[2] = vsub_f32((float32x2_t)vextq_s8(v38, v38, 8uLL).u32[0], (float32x2_t)vextq_s8(v41, v41, 8uLL).u32[0]);
        *(float32x2_t *)v41.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32), vmul_f32(*(float32x2_t *)&v42.u32[2], *(float32x2_t *)&v42.u32[2]));
        float32x2_t v43 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8);
        float32x2_t v44 = vrsqrte_f32(v43);
        int v45 = 4;
        do
        {
          float32x2_t v44 = vmul_f32(v44, vrsqrts_f32(vmul_f32(v44, v44), v43));
          --v45;
        }
        while (v45);
        float32x2_t v46 = vmul_f32(v43, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v43), 0), (int8x8_t)_D8, (int8x8_t)v44));
        float32x2_t v47 = vrecpe_f32(v46);
        int v48 = 4;
        do
        {
          float32x2_t v47 = vmul_f32(v47, vrecps_f32(v46, v47));
          --v48;
        }
        while (v48);
        float32x4_t v37 = vmulq_n_f32(v42, v47.f32[0]);
        v37.i32[3] = 0;
      }
      float32x4_t v59 = v37;
    }
    physx::Gu::PCMCapsuleVsMeshContactGeneration::generateContacts(&v64, &v63, &v59, a2, a3 + 4, a4, a6, a7, v35, v36, v34);
    physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEEMTD((int8x8_t *)&v59, a2, a6, a7, (__n128)a3[3], a3[4], *a4, v56, v57);
    physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEEMTD((int8x8_t *)&v59, a2, a6, a7, (__n128)a3[3], a3[4], *a4, v57, v58);
    physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEEMTD((int8x8_t *)&v59, a2, a6, a7, (__n128)a3[3], a3[4], *a4, v56, v58);
  }
  return 1;
}

uint64_t physx::Gu::pcmContactConvexConvex(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v359 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a6;
  _X27 = *(void *)(a1 + 48);
  __asm { PRFM            #0, [X27] }
  _X26 = *(void *)(a2 + 48);
  __asm { PRFM            #0, [X26] }
  float32x4_t v18 = *(float32x4_t *)(a1 + 4);
  float32x4_t v19 = v18;
  v19.i32[3] = 0;
  float32x4_t v20 = *(float32x4_t *)(a2 + 4);
  float32x4_t v21 = v20;
  v21.i32[3] = 0;
  int32x2_t v317 = vdup_lane_s32(*(int32x2_t *)a5, 0);
  v22.i64[0] = a3[1].i64[0];
  v22.i64[1] = a3[1].u32[2];
  v316[0] = *a3;
  v316[1] = v22;
  v23.i64[0] = a4[1].i64[0];
  v23.i64[1] = a4[1].u32[2];
  v315[0] = *a4;
  v315[1] = v23;
  float32x4_t v24 = vnegq_f32(v315[0]);
  float32x4_t v25 = vsubq_f32(v22, v23);
  float32x4_t v26 = v24;
  v26.i32[3] = 0;
  float32x2_t v27 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v315[0], 3).u64[0];
  float32x4_t v28 = vmulq_n_f32(v25, vmla_f32((float32x2_t)0xBF000000BF000000, v27, v27).f32[0]);
  v28.i32[3] = 0;
  float32x2_t v29 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  float32x2_t v30 = (float32x2_t)vext_s8(*(int8x8_t *)v24.f32, (int8x8_t)v29, 4uLL);
  int8x8_t v31 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL)), v30, *(float32x2_t *)v25.f32);
  *(int8x8_t *)v32.f32 = vext_s8(v31, (int8x8_t)vmls_f32(vmul_f32(v29, *(float32x2_t *)v25.f32), *(float32x2_t *)v24.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)), 4uLL);
  v32.i64[1] = v31.u32[0];
  float32x4_t v33 = vmlaq_laneq_f32(v28, v32, v315[0], 3);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  float32x4_t v34 = vmulq_f32(v26, v25);
  v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
  float32x4_t v35 = vmlaq_n_f32(v33, v26, vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).f32[0]);
  float32x4_t v36 = vaddq_f32(v35, v35);
  v36.i32[3] = 0;
  float32x4_t v37 = v316[0];
  v37.i32[3] = 0;
  float32x4_t v38 = vmulq_f32(v37, v26);
  v38.i64[0] = vpaddq_f32(v38, v38).u64[0];
  float32x2_t v39 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v316[0], (int8x16_t)v316[0], 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v315[0], (int8x16_t)v315[0], 8uLL)), vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32));
  float32x4_t v40 = vmulq_laneq_f32(v37, v315[0], 3);
  v37.i64[0] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  *(float32x2_t *)v38.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v316[0].f32, *(int8x8_t *)v37.f32, 4uLL), *(float32x2_t *)v24.f32), v30, *(float32x2_t *)v316[0].f32);
  *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v38.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v316[0].f32, v29), *(float32x2_t *)v24.f32, *(float32x2_t *)v37.f32), 4uLL);
  v41.i64[1] = v38.i64[0];
  float32x4_t v42 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v26, v316[0], 3), v40), v41);
  *(int32x2_t *)v41.f32 = vdup_lane_s32(*(int32x2_t *)v42.f32, 1);
  *(int32x2_t *)v24.f32 = vdup_laneq_s32((int32x4_t)v42, 2);
  float32x4_t v43 = vaddq_f32(v42, v42);
  *(int32x2_t *)v37.f32 = vdup_lane_s32(*(int32x2_t *)v43.f32, 1);
  float32x2_t v44 = (float32x2_t)vdup_laneq_s32((int32x4_t)v43, 2);
  *(int32x2_t *)v38.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v43.f32), 0);
  float32x2_t v45 = vmul_lane_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v43.f32, 1);
  float32x2_t v46 = vmul_laneq_f32(*(float32x2_t *)v24.f32, v43, 2);
  float32x2_t v47 = vmul_n_f32(*(float32x2_t *)v41.f32, v43.f32[0]);
  float32x2_t v48 = vmul_n_f32(*(float32x2_t *)v24.f32, v43.f32[0]);
  *(float32x2_t *)v26.f32 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0), v39, 1);
  *(float32x2_t *)v43.f32 = vmul_lane_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v43.f32, 1);
  *(float32x2_t *)v37.f32 = vmul_lane_f32(*(float32x2_t *)v37.f32, v39, 1);
  *(float32x2_t *)v24.f32 = vmul_lane_f32(v44, v39, 1);
  __asm { FMOV            V10.2S, #1.0 }
  float32x2_t v50 = vsub_f32(_D10, *(float32x2_t *)v38.f32);
  *(int8x8_t *)v51.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v45), v46), (int8x8_t)vadd_f32(v47, *(float32x2_t *)v24.f32), 4uLL);
  v51.i64[1] = vsub_f32(v48, *(float32x2_t *)v37.f32).u32[0];
  *(float32x2_t *)v38.f32 = vsub_f32(v50, v46);
  *(int8x8_t *)v52.f32 = vext_s8((int8x8_t)vsub_f32(v47, *(float32x2_t *)v24.f32), *(int8x8_t *)v38.f32, 4uLL);
  v52.i64[1] = vadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v26.f32).u32[0];
  int32x4_t v311 = (int32x4_t)v51;
  int32x4_t v312 = (int32x4_t)v52;
  *(int8x8_t *)v53.f32 = vext_s8((int8x8_t)vadd_f32(v48, *(float32x2_t *)v37.f32), (int8x8_t)vsub_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v26.f32), 4uLL);
  v53.i64[1] = vsub_f32(v50, v45).u32[0];
  int32x4_t v313 = (int32x4_t)v53;
  float32x4_t v314 = v36;
  float v54 = *(float *)(a5 + 8);
  v55.i64[0] = *(void *)(_X27 + 60);
  v55.i64[1] = *(unsigned int *)(_X27 + 68);
  float32x4_t v56 = vmulq_f32(v19, v55);
  float32x2_t v57 = vpmin_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v56, 2), *(float32x2_t *)v56.f32);
  v38.f32[0] = v54 * 0.05;
  *(int32x2_t *)v38.f32 = vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
  __asm { FMOV            V16.2S, #0.25 }
  v59.i64[0] = *(void *)(_X26 + 60);
  v59.i64[1] = *(unsigned int *)(_X26 + 68);
  int32x4_t v60 = (int32x4_t)vmulq_f32(v21, v59);
  *(float32x2_t *)v60.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v60, 2), *(float32x2_t *)v60.i8);
  uint64_t v61 = *(unsigned __int8 *)(v10 + 64);
  float32x2_t v62 = vmin_f32(vmin_f32(vmul_f32(vpmin_f32(v57, v57), _D16), *(float32x2_t *)v38.f32), vmin_f32(vmul_f32(vpmin_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8), _D16), *(float32x2_t *)v38.f32));
  if (*(unsigned char *)(v10 + 64))
  {
    float32x2_t v63 = vmul_f32(v62, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    float32x2_t v64 = vmul_f32(v63, v63);
    unsigned int v65 = v61 - 1;
    do
    {
      uint64_t v66 = *(void *)(v10 + 80);
      uint64_t v67 = v65;
      float32x4_t v68 = (float32x4_t *)(v66 + 48 * v65);
      float32x4_t v69 = v68[1];
      float32x4_t v70 = vmulq_n_f32(v51, COERCE_FLOAT(*v68));
      v70.i32[3] = 0;
      float32x4_t v71 = vmulq_lane_f32(v52, *(float32x2_t *)v68->f32, 1);
      v71.i32[3] = 0;
      float32x4_t v72 = vmulq_laneq_f32(v53, *v68, 2);
      v72.i32[3] = 0;
      float32x4_t v73 = vaddq_f32(v36, vaddq_f32(v72, vaddq_f32(v70, v71)));
      float32x4_t v74 = v68[2];
      float32x4_t v75 = v74;
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_f32(v75, vsubq_f32(v73, v69));
      v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
      float32x2_t v77 = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32);
      float32x4_t v78 = vmlsq_lane_f32(v73, v75, v77, 0);
      v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
      float32x4_t v79 = vsubq_f32(v69, v78);
      float32x4_t v80 = vmulq_f32(v79, v79);
      v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32), v64), 0), (int8x8_t)v39).u32[0] == -1)
      {
        unsigned __int8 v81 = *(unsigned char *)(v10 + 64) - 1;
        *(unsigned char *)(v10 + 64) = v81;
        float32x4_t v82 = (float32x4_t *)(v66 + 48 * v81);
        float32x4_t v83 = *v82;
        float32x4_t v84 = v82[2];
        v68[1] = v82[1];
        _OWORD v68[2] = v84;
        *float32x4_t v68 = v83;
      }
      else
      {
        v74.i32[3] = v77.i32[1];
        _OWORD v68[2] = v74;
      }
      --v65;
    }
    while (v67);
    int v85 = *(unsigned __int8 *)(v10 + 64);
    v55.i64[0] = *(void *)(_X27 + 60);
    v55.i64[1] = *(unsigned int *)(_X27 + 68);
    float32x4_t v56 = vmulq_f32(v19, v55);
  }
  else
  {
    int v85 = 0;
  }
  v42.i32[3] = v39.i32[1];
  float32x4_t v86 = vmulq_f32(v56, v56);
  v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
  float32x2_t v87 = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32);
  float32x2_t v88 = vrsqrte_f32(v87);
  int v89 = 4;
  do
  {
    float32x2_t v88 = vmul_f32(v88, vrsqrts_f32(vmul_f32(v88, v88), v87));
    --v89;
  }
  while (v89);
  int32x2_t v90 = vdup_lane_s32(vceqz_f32(v87), 0);
  float32x4_t v91 = vmulq_f32(v21, v55);
  float32x4_t v92 = vmulq_f32(v91, v91);
  v92.i64[0] = vpaddq_f32(v92, v92).u64[0];
  float32x2_t v93 = vpadd_f32(*(float32x2_t *)v92.f32, *(float32x2_t *)v92.f32);
  float32x2_t v94 = vrsqrte_f32(v93);
  int v95 = 4;
  do
  {
    float32x2_t v94 = vmul_f32(v94, vrsqrts_f32(vmul_f32(v94, v94), v93));
    --v95;
  }
  while (v95);
  float32x4_t v96 = v316[0];
  float32x4_t v97 = v315[0];
  if (v85 != v61) {
    goto LABEL_37;
  }
  float32x2_t v98 = vmul_n_f32(v62, physx::Gu::invalidateThresholds[v61]);
  int8x16_t v99 = (int8x16_t)vabdq_f32(v36, *(float32x4_t *)(v10 + 16));
  *(float32x2_t *)v99.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL), *(float32x2_t *)v99.i8);
  float32x4_t v100 = (const float *)((char *)&physx::Gu::invalidateQuatThresholds + 4 * v61);
  float32x2_t v101 = vld1_dup_f32(v100);
  float32x2_t v102 = vpmax_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
  float32x4_t v103 = vmulq_f32(v316[0], *(float32x4_t *)(v10 + 32));
  v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
  float32x2_t v104 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
  float32x4_t v105 = vmulq_f32(v315[0], *(float32x4_t *)(v10 + 48));
  float32x4_t v56 = vpaddq_f32(v105, v105);
  float32x2_t v106 = vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32);
  *(int8x8_t *)v56.f32 = vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(vorr_s8((int8x8_t)vcgt_f32(v101, v104), (int8x8_t)vcgt_f32(v101, v106)), (int8x8_t)vcgt_f32(v102, v98)), 0), (int8x8_t)v87);
  if (v56.i32[0] == -1) {
    goto LABEL_37;
  }
  float32x2_t v107 = vmul_f32(v87, (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v90, 0x1FuLL)), (int8x8_t)_D10, (int8x8_t)v88));
  float32x2_t v108 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v93), 0), (int8x8_t)_D10, (int8x8_t)v94);
  float v109 = 0.0;
  float v110 = 0.0;
  float32x4_t v309 = v21;
  float32x4_t v310 = v20;
  float32x4_t v307 = v19;
  float32x4_t v308 = v18;
  float32x4_t v305 = v42;
  float32x4_t v306 = v36;
  if (v104.f32[0] < 1.0)
  {
    float v111 = -1.0;
    if (v104.f32[0] >= -1.0) {
      float v111 = v104.f32[0];
    }
    if (v111 > 1.0) {
      float v111 = 1.0;
    }
    __int32 v304 = v106.i32[0];
    float v110 = acosf(v111);
    float v109 = 0.0;
    v106.i32[0] = v304;
    float32x4_t v96 = v316[0];
    float32x4_t v97 = v315[0];
    float32x4_t v42 = v305;
    float32x4_t v36 = v306;
    float32x4_t v19 = v307;
    float32x4_t v18 = v308;
    float32x4_t v21 = v309;
    float32x4_t v20 = v310;
  }
  float32x2_t v112 = vmul_f32(v93, v108);
  float32x2_t v113 = vmul_n_f32(v107, v110);
  if (v106.f32[0] < 1.0)
  {
    float v114 = -1.0;
    if (v106.f32[0] >= -1.0) {
      float v114 = v106.f32[0];
    }
    if (v114 > 1.0) {
      float v114 = 1.0;
    }
    float v115 = acosf(v114);
    float32x4_t v96 = v316[0];
    float32x4_t v97 = v315[0];
    float32x4_t v42 = v305;
    float32x4_t v36 = v306;
    float32x4_t v19 = v307;
    float32x4_t v18 = v308;
    float32x4_t v21 = v309;
    float32x4_t v20 = v310;
    float v109 = v115;
  }
  int8x8_t v116 = (int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32(vmul_n_f32(v112, v109), v98), (int8x8_t)vcgt_f32(v113, v98)), 0);
  if (vuzp1_s8(v116, v116).u32[0] == -1)
  {
LABEL_37:
    *(float32x4_t *)uint64_t v10 = v42;
    *(float32x4_t *)(v10 + 16) = v36;
    *(float32x4_t *)(v10 + 32) = v96;
    *(float32x4_t *)(v10 + 48) = v97;
    BOOL v145 = *(float *)(a1 + 4) == 1.0 && *(float *)(a1 + 8) == 1.0 && *(float *)(a1 + 12) == 1.0;
    BOOL v147 = *(float *)(a2 + 4) == 1.0 && *(float *)(a2 + 8) == 1.0 && *(float *)(a2 + 12) == 1.0;
    float32x4_t v148 = *(float32x4_t *)(a1 + 16);
    float32x4_t v149 = *(float32x4_t *)(a2 + 16);
    v56.i32[0] = *(_DWORD *)(_X27 + 24);
    float32x4_t v150 = v56;
    v150.i32[1] = *(_DWORD *)(_X27 + 28);
    float32x4_t v151 = v150;
    v151.i32[2] = *(_DWORD *)(_X27 + 32);
    int v347 = 0;
    char v348 = 0;
    float32x4_t v344 = v151;
    uint64_t v355 = _X27;
    uint64_t v357 = *(void *)(_X27 + 40) + 20 * *(unsigned __int8 *)(_X27 + 39);
    char v358 = *(unsigned char *)(_X27 + 38);
    v152.i64[0] = *(void *)(_X27 + 60);
    v152.i64[1] = *(unsigned int *)(_X27 + 68);
    int32x4_t v153 = (int32x4_t)vmulq_f32(v19, v152);
    *(float32x2_t *)v153.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v153, 2), *(float32x2_t *)v153.i8);
    float v154 = vpmin_f32(*(float32x2_t *)v153.i8, *(float32x2_t *)v153.i8).f32[0];
    float32x2_t v345 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v154);
    float v346 = 0.025 * v154;
    if (v145)
    {
      long long v349 = xmmword_23435FD50;
      long long v350 = xmmword_23435FD60;
      float32x4_t v155 = (float32x4_t)xmmword_23435FD80;
      long long v351 = xmmword_23435FD80;
      long long v352 = xmmword_23435FD50;
      long long v353 = xmmword_23435FD60;
      long long v354 = xmmword_23435FD80;
    }
    else
    {
      float32x4_t v156 = vrecpeq_f32(v19);
      int v157 = 4;
      do
      {
        float32x4_t v156 = vmulq_f32(v156, vrecpsq_f32(v156, v19));
        --v157;
      }
      while (v157);
      *(int32x2_t *)v158.f32 = vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
      v158.i64[1] = v158.u32[0];
      if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v158, v19)), *(int8x8_t *)v149.f32).u32[0] & 0xFFFFFF) != 0)
      {
        float32x2_t v165 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v148.f32, 1);
        float32x2_t v166 = (float32x2_t)vdup_laneq_s32((int32x4_t)v148, 2);
        float32x2_t v167 = (float32x2_t)vdup_laneq_s32((int32x4_t)v148, 3);
        float32x4_t v168 = vaddq_f32(v148, v148);
        float32x2_t v169 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v168.f32), 0);
        float32x2_t v170 = vmul_lane_f32(v165, *(float32x2_t *)v168.f32, 1);
        float32x2_t v171 = vmul_laneq_f32(v166, v168, 2);
        float32x2_t v172 = vmul_n_f32(v165, v168.f32[0]);
        float32x2_t v173 = vmul_n_f32(v166, v168.f32[0]);
        float32x2_t v174 = vmul_n_f32(v167, v168.f32[0]);
        float32x2_t v175 = vmul_lane_f32(v166, *(float32x2_t *)v168.f32, 1);
        float32x2_t v176 = vmul_lane_f32(v167, *(float32x2_t *)v168.f32, 1);
        float32x2_t v177 = vmul_laneq_f32(v167, v168, 2);
        float32x2_t v178 = vsub_f32(_D10, v169);
        *(int8x8_t *)v179.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v170), v171), (int8x8_t)vadd_f32(v172, v177), 4uLL);
        v179.i64[1] = vsub_f32(v173, v176).u32[0];
        *(int8x8_t *)v180.f32 = vext_s8((int8x8_t)vsub_f32(v172, v177), (int8x8_t)vsub_f32(v178, v171), 4uLL);
        *(int8x8_t *)v181.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v179.f32, 0), *(int8x8_t *)v180.f32, 4uLL);
        v180.i64[1] = vadd_f32(v175, v174).u32[0];
        *(int8x8_t *)v182.f32 = vext_s8(*(int8x8_t *)v179.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v180.f32, 1), 4uLL);
        int8x8_t v183 = (int8x8_t)vsub_f32(v175, v174);
        v175.i32[0] = vsub_f32(v178, v170).u32[0];
        *(int8x8_t *)v184.f32 = vext_s8((int8x8_t)vadd_f32(v173, v176), v183, 4uLL);
        v184.i64[1] = v175.u32[0];
        v181.i64[1] = vdup_lane_s32(*(int32x2_t *)v184.f32, 0).u32[0];
        v182.i64[1] = vdup_lane_s32(*(int32x2_t *)v184.f32, 1).u32[0];
        *(int8x8_t *)v185.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v179.u32[2], 0), *(int8x8_t *)&v180.u32[2], 4uLL);
        v185.i64[1] = vdup_lane_s32((int32x2_t)v175.u32[0], 0).u32[0];
        float32x4_t v186 = vmulq_n_f32(v181, v18.f32[0]);
        v186.i32[3] = 0;
        float32x4_t v187 = vmulq_lane_f32(v182, *(float32x2_t *)v18.f32, 1);
        v187.i32[3] = 0;
        float32x4_t v188 = vmulq_laneq_f32(v185, v18, 2);
        v188.i32[3] = 0;
        float32x4_t v189 = vmulq_n_f32(v186, v179.f32[0]);
        v189.i32[3] = 0;
        float32x4_t v190 = vmulq_lane_f32(v187, *(float32x2_t *)v179.f32, 1);
        v190.i32[3] = 0;
        float32x4_t v191 = vmulq_laneq_f32(v188, v179, 2);
        v191.i32[3] = 0;
        float32x4_t v192 = vaddq_f32(v189, v190);
        float32x4_t v193 = vmulq_n_f32(v186, v180.f32[0]);
        v193.i32[3] = 0;
        float32x4_t v194 = vmulq_lane_f32(v187, *(float32x2_t *)v180.f32, 1);
        v194.i32[3] = 0;
        float32x4_t v195 = vmulq_laneq_f32(v188, v180, 2);
        v195.i32[3] = 0;
        float32x4_t v159 = vaddq_f32(v191, v192);
        float32x4_t v160 = vaddq_f32(v195, vaddq_f32(v193, v194));
        float32x4_t v196 = vmulq_n_f32(v186, v184.f32[0]);
        v196.i32[3] = 0;
        float32x4_t v197 = vmulq_lane_f32(v187, *(float32x2_t *)v184.f32, 1);
        v197.i32[3] = 0;
        float32x4_t v198 = vmulq_laneq_f32(v188, v184, 2);
        v198.i32[3] = 0;
        float32x4_t v161 = vaddq_f32(v198, vaddq_f32(v196, v197));
        float32x4_t v199 = vmulq_n_f32(v181, v156.f32[0]);
        v199.i32[3] = 0;
        float32x4_t v200 = vmulq_lane_f32(v182, *(float32x2_t *)v156.f32, 1);
        v200.i32[3] = 0;
        float32x4_t v201 = vmulq_laneq_f32(v185, v156, 2);
        v201.i32[3] = 0;
        long long v349 = (__int128)v159;
        long long v350 = (__int128)v160;
        long long v351 = (__int128)v161;
        long long v354 = (__int128)v201;
        float32x4_t v202 = vmulq_n_f32(v199, v179.f32[0]);
        v202.i32[3] = 0;
        float32x4_t v203 = vmulq_lane_f32(v200, *(float32x2_t *)v179.f32, 1);
        v203.i32[3] = 0;
        float32x4_t v204 = vmulq_laneq_f32(v201, v179, 2);
        v204.i32[3] = 0;
        float32x4_t v162 = vaddq_f32(v204, vaddq_f32(v202, v203));
        float32x4_t v205 = vmulq_n_f32(v199, v180.f32[0]);
        v205.i32[3] = 0;
        float32x4_t v206 = vmulq_lane_f32(v200, *(float32x2_t *)v180.f32, 1);
        v206.i32[3] = 0;
        float32x4_t v207 = vmulq_laneq_f32(v201, v180, 2);
        v207.i32[3] = 0;
        float32x4_t v208 = vmulq_n_f32(v199, v184.f32[0]);
        v208.i32[3] = 0;
        float32x4_t v209 = vmulq_lane_f32(v200, *(float32x2_t *)v184.f32, 1);
        v209.i32[3] = 0;
        float32x4_t v163 = vaddq_f32(v207, vaddq_f32(v205, v206));
        float32x4_t v210 = vmulq_laneq_f32(v201, v184, 2);
        v210.i32[3] = 0;
        float32x4_t v164 = vaddq_f32(v210, vaddq_f32(v208, v209));
      }
      else
      {
        v156.i32[3] = 0;
        float32x4_t v159 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD50);
        float32x4_t v160 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD60);
        float32x4_t v161 = vmulq_f32(v19, (float32x4_t)xmmword_23435FD80);
        long long v349 = (__int128)v159;
        long long v350 = (__int128)v160;
        long long v351 = (__int128)v161;
        float32x4_t v162 = vmulq_f32(v156, (float32x4_t)xmmword_23435FD50);
        float32x4_t v163 = vmulq_f32(v156, (float32x4_t)xmmword_23435FD60);
        float32x4_t v164 = vmulq_f32(v156, (float32x4_t)xmmword_23435FD80);
      }
      long long v353 = (__int128)v163;
      long long v354 = (__int128)v164;
      float32x4_t v155 = vmulq_n_f32(v159, v56.f32[0]);
      v155.i32[3] = 0;
      float32x4_t v211 = vmulq_lane_f32(v160, *(float32x2_t *)v150.f32, 1);
      v211.i32[3] = 0;
      float32x4_t v212 = vmulq_laneq_f32(v161, v151, 2);
      v212.i32[3] = 0;
      long long v352 = (__int128)v162;
      float32x4_t v344 = vaddq_f32(v212, vaddq_f32(v211, v155));
    }
    uint64_t v356 = *(void *)(_X27 + 48);
    v155.i32[0] = *(_DWORD *)(_X26 + 24);
    float32x4_t v213 = v155;
    v213.i32[1] = *(_DWORD *)(_X26 + 28);
    float32x4_t v214 = v213;
    v214.i32[2] = *(_DWORD *)(_X26 + 32);
    int v332 = 0;
    char v333 = 0;
    uint64_t v340 = _X26;
    uint64_t v342 = *(void *)(_X26 + 40) + 20 * *(unsigned __int8 *)(_X26 + 39);
    char v343 = *(unsigned char *)(_X26 + 38);
    v215.i64[0] = *(void *)(_X26 + 60);
    v215.i32[2] = *(_DWORD *)(_X26 + 68);
    float32x4_t v329 = v214;
    v215.i64[1] = v215.u32[2];
    int32x4_t v216 = (int32x4_t)vmulq_f32(v21, v215);
    *(float32x2_t *)v216.i8 = vpmin_f32((float32x2_t)vdup_laneq_s32(v216, 2), *(float32x2_t *)v216.i8);
    *(float *)v216.i32 = vpmin_f32(*(float32x2_t *)v216.i8, *(float32x2_t *)v216.i8).f32[0];
    float32x2_t v330 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, *(float *)v216.i32);
    float v331 = 0.025 * *(float *)v216.i32;
    if (v147)
    {
      long long v334 = xmmword_23435FD50;
      long long v335 = xmmword_23435FD60;
      long long v336 = xmmword_23435FD80;
      long long v337 = xmmword_23435FD50;
      long long v338 = xmmword_23435FD60;
      long long v339 = xmmword_23435FD80;
    }
    else
    {
      float32x4_t v217 = vrecpeq_f32(v21);
      int v218 = 4;
      do
      {
        float32x4_t v217 = vmulq_f32(v217, vrecpsq_f32(v217, v21));
        --v218;
      }
      while (v218);
      *(int32x2_t *)v219.f32 = vdup_lane_s32(*(int32x2_t *)v20.f32, 0);
      v219.i64[1] = v219.u32[0];
      if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v219, v21)), *(int8x8_t *)v149.f32).u32[0] & 0xFFFFFF) != 0)
      {
        float32x2_t v226 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v149.f32, 1);
        float32x2_t v227 = (float32x2_t)vdup_laneq_s32((int32x4_t)v149, 2);
        float32x2_t v228 = (float32x2_t)vdup_laneq_s32((int32x4_t)v149, 3);
        float32x4_t v229 = vaddq_f32(v149, v149);
        float32x2_t v230 = vmul_lane_f32(v226, *(float32x2_t *)v229.f32, 1);
        float32x2_t v231 = vmul_laneq_f32(v227, v229, 2);
        float32x2_t v232 = vmul_n_f32(v226, v229.f32[0]);
        float32x2_t v233 = vmul_n_f32(v227, v229.f32[0]);
        float32x2_t v234 = vmul_n_f32(v228, v229.f32[0]);
        float32x2_t v235 = vmul_lane_f32(v227, *(float32x2_t *)v229.f32, 1);
        float32x2_t v236 = vmul_lane_f32(v228, *(float32x2_t *)v229.f32, 1);
        float32x2_t v237 = vmul_laneq_f32(v228, v229, 2);
        float32x2_t v238 = vsub_f32(_D10, (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v229.f32), 0));
        *(int8x8_t *)v229.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D10, v230), v231), (int8x8_t)vadd_f32(v232, v237), 4uLL);
        int8x8_t v239 = (int8x8_t)vsub_f32(v232, v237);
        v240.i64[0] = v229.i64[0];
        v240.i64[1] = vsub_f32(v233, v236).u32[0];
        int32x2_t v241 = (int32x2_t)vext_s8(v239, (int8x8_t)vsub_f32(v238, v231), 4uLL);
        int8x8_t v242 = (int8x8_t)vadd_f32(v233, v236);
        *(int8x8_t *)v243.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v229.f32, 0), (int8x8_t)v241, 4uLL);
        int8x8_t v244 = (int8x8_t)vdup_lane_s32(v241, 1);
        *(int32x2_t *)v245.f32 = v241;
        v245.i64[1] = vadd_f32(v235, v234).u32[0];
        *(int8x8_t *)v246.f32 = vext_s8(v242, (int8x8_t)vsub_f32(v235, v234), 4uLL);
        *(int8x8_t *)v247.f32 = vext_s8(*(int8x8_t *)v229.f32, v244, 4uLL);
        v246.i64[1] = vsub_f32(v238, v230).u32[0];
        v243.i64[1] = vdup_lane_s32(*(int32x2_t *)v246.f32, 0).u32[0];
        v247.i64[1] = vdup_lane_s32(*(int32x2_t *)v246.f32, 1).u32[0];
        *(int8x8_t *)v248.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v240.u32[2], 0), *(int8x8_t *)&v245.u32[2], 4uLL);
        v248.i64[1] = vdup_lane_s32(*(int32x2_t *)&v246.u32[2], 0).u32[0];
        float32x4_t v249 = vmulq_n_f32(v243, v20.f32[0]);
        v249.i32[3] = 0;
        float32x4_t v250 = vmulq_lane_f32(v247, *(float32x2_t *)v20.f32, 1);
        v250.i32[3] = 0;
        float32x4_t v251 = vmulq_laneq_f32(v248, v20, 2);
        v251.i32[3] = 0;
        float32x4_t v252 = vmulq_n_f32(v249, v240.f32[0]);
        v252.i32[3] = 0;
        float32x4_t v253 = vmulq_lane_f32(v250, *(float32x2_t *)v240.f32, 1);
        v253.i32[3] = 0;
        float32x4_t v254 = vmulq_laneq_f32(v251, v240, 2);
        v254.i32[3] = 0;
        float32x4_t v220 = vaddq_f32(v254, vaddq_f32(v252, v253));
        float32x4_t v255 = vmulq_n_f32(v249, v245.f32[0]);
        v255.i32[3] = 0;
        float32x4_t v256 = vmulq_lane_f32(v250, *(float32x2_t *)v245.f32, 1);
        v256.i32[3] = 0;
        float32x4_t v257 = vmulq_laneq_f32(v251, v245, 2);
        v257.i32[3] = 0;
        float32x4_t v258 = vaddq_f32(v255, v256);
        float32x4_t v259 = vmulq_n_f32(v249, v246.f32[0]);
        v259.i32[3] = 0;
        float32x4_t v260 = vmulq_lane_f32(v250, *(float32x2_t *)v246.f32, 1);
        v260.i32[3] = 0;
        float32x4_t v261 = vmulq_laneq_f32(v251, v246, 2);
        v261.i32[3] = 0;
        float32x4_t v221 = vaddq_f32(v257, v258);
        float32x4_t v222 = vaddq_f32(v261, vaddq_f32(v259, v260));
        long long v334 = (__int128)v220;
        long long v335 = (__int128)v221;
        long long v336 = (__int128)v222;
        float32x4_t v262 = vmulq_n_f32(v243, v217.f32[0]);
        v262.i32[3] = 0;
        float32x4_t v263 = vmulq_lane_f32(v247, *(float32x2_t *)v217.f32, 1);
        v263.i32[3] = 0;
        float32x4_t v264 = vmulq_laneq_f32(v248, v217, 2);
        v264.i32[3] = 0;
        float32x4_t v265 = vmulq_n_f32(v262, v240.f32[0]);
        v265.i32[3] = 0;
        float32x4_t v266 = vmulq_lane_f32(v263, *(float32x2_t *)v240.f32, 1);
        v266.i32[3] = 0;
        float32x4_t v267 = vmulq_laneq_f32(v264, v240, 2);
        v267.i32[3] = 0;
        float32x4_t v223 = vaddq_f32(v267, vaddq_f32(v265, v266));
        float32x4_t v268 = vmulq_n_f32(v262, v245.f32[0]);
        v268.i32[3] = 0;
        float32x4_t v269 = vmulq_lane_f32(v263, *(float32x2_t *)v245.f32, 1);
        v269.i32[3] = 0;
        float32x4_t v270 = vmulq_laneq_f32(v264, v245, 2);
        v270.i32[3] = 0;
        float32x4_t v271 = vmulq_n_f32(v262, v246.f32[0]);
        v271.i32[3] = 0;
        float32x4_t v272 = vmulq_lane_f32(v263, *(float32x2_t *)v246.f32, 1);
        v272.i32[3] = 0;
        float32x4_t v224 = vaddq_f32(v270, vaddq_f32(v268, v269));
        float32x4_t v273 = vmulq_laneq_f32(v264, v246, 2);
        v273.i32[3] = 0;
        float32x4_t v225 = vaddq_f32(v273, vaddq_f32(v271, v272));
      }
      else
      {
        v217.i32[3] = 0;
        float32x4_t v220 = vmulq_f32(v21, (float32x4_t)xmmword_23435FD50);
        float32x4_t v221 = vmulq_f32(v21, (float32x4_t)xmmword_23435FD60);
        float32x4_t v222 = vmulq_f32(v21, (float32x4_t)xmmword_23435FD80);
        long long v334 = (__int128)v220;
        long long v335 = (__int128)v221;
        long long v336 = (__int128)v222;
        float32x4_t v223 = vmulq_f32(v217, (float32x4_t)xmmword_23435FD50);
        float32x4_t v224 = vmulq_f32(v217, (float32x4_t)xmmword_23435FD60);
        float32x4_t v225 = vmulq_f32(v217, (float32x4_t)xmmword_23435FD80);
      }
      long long v338 = (__int128)v224;
      long long v339 = (__int128)v225;
      float32x4_t v274 = vmulq_n_f32(v220, v155.f32[0]);
      v274.i32[3] = 0;
      float32x4_t v275 = vmulq_lane_f32(v221, *(float32x2_t *)v213.f32, 1);
      v275.i32[3] = 0;
      float32x4_t v276 = vmulq_laneq_f32(v222, v214, 2);
      v276.i32[3] = 0;
      long long v337 = (__int128)v223;
      float32x4_t v329 = vaddq_f32(v276, vaddq_f32(v275, v274));
    }
    uint64_t v341 = *(void *)(_X26 + 48);
    uint64_t v328 = 0;
    memset(v327, 0, 48);
    float32x2_t v277 = (float32x2_t)v317;
    if (v145)
    {
      v320.i64[1] = (uint64_t)&v344;
      float32x4_t v278 = v314;
      int32x4_t v322 = v311;
      int32x4_t v324 = v313;
      int8x8_t v279 = *(int8x8_t *)v312.i8;
      float32x4_t v280 = (float32x4_t)v311;
      float32x2x2_t v281 = (float32x2x2_t)vzip1q_s32(v311, v313);
      v360.val[0] = (float32x2_t)vzip2q_s32(v311, v313).u64[0];
      int32x4_t v282 = vzip1q_s32(v312, (int32x4_t)0);
      v360.val[1] = (float32x2_t)vzip2q_s32(v312, (int32x4_t)0).u64[0];
      v320.i64[0] = (uint64_t)&unk_26E729DD0;
      int8x16_t v321 = &v311;
      float32x4_t v283 = (float *)&v322;
      float32x4_t v284 = (float *)&v324;
      vst2_f32(v283, v281);
      float32x4_t v325 = v278;
      int32x4_t v323 = vzip2q_s32((int32x4_t)v281, v282);
      vst2_f32(v284, v360);
      float32x4_t v285 = (unsigned char *)(v10 + 67);
      float32x4_t v286 = (unsigned char *)(v10 + 71);
      float32x4_t v287 = (unsigned char *)(v10 + 66);
      int v319 = &v329;
      if (v147)
      {
        int v318 = &unk_26E729C88;
        int v288 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(&v320, (uint64_t)&v318, v285, v286, v287, v327, v314, v277, *(double *)v278.i64, v280, v279);
        __int16 v290 = 257;
      }
      else
      {
        int v318 = &unk_26E728850;
        int v288 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v320, (uint64_t)&v318, v285, v286, v287, v327, v314, v277, *(double *)v278.i64, v280, v279);
        __int16 v290 = 1;
      }
    }
    else
    {
      int32x2_t v326 = v317;
      v320.i64[1] = (uint64_t)&v344;
      float32x4_t v291 = v314;
      int32x4_t v322 = v311;
      int32x4_t v324 = v313;
      int8x8_t v293 = *(int8x8_t *)v312.i8;
      double v292 = *(double *)v313.i64;
      float32x4_t v294 = (float32x4_t)v311;
      float32x2x2_t v295 = (float32x2x2_t)vzip1q_s32(v311, v313);
      v361.val[0] = (float32x2_t)vzip2q_s32(v311, v313).u64[0];
      int32x4_t v296 = vzip1q_s32(v312, (int32x4_t)0);
      v361.val[1] = (float32x2_t)vzip2q_s32(v312, (int32x4_t)0).u64[0];
      v320.i64[0] = (uint64_t)&unk_26E728B78;
      int8x16_t v321 = &v311;
      float32x4_t v297 = (float *)&v322;
      float32x4_t v298 = (float *)&v324;
      int32x4_t v299 = vzip2q_s32((int32x4_t)v295, v296);
      vst2_f32(v297, v295);
      float32x4_t v325 = v291;
      int32x4_t v323 = v299;
      vst2_f32(v298, v361);
      if (!v147)
      {
        int v319 = &v329;
        int v318 = &unk_26E728850;
        int v288 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullV>>(&v320, (uint64_t)&v318, &v314, (uint64_t *)&v326, 1, (unsigned char *)(v10 + 67), (unsigned char *)(v10 + 71), (unsigned char *)(v10 + 66), *(double *)v299.i64, v292, *(int8x8_t *)v291.f32, v294, (uint64_t)v327);
        float32x2_t v301 = (float32x2_t)v326;
        *(_WORD *)&v303[4] = 0;
        *(_DWORD *)float32x4_t v303 = v61;
        float32x4_t v302 = (float32x4_t *)a7;
        float32x2_t v300 = v62;
        goto LABEL_73;
      }
      int v319 = &v329;
      int v318 = &unk_26E729C88;
      int v288 = physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(&v320, (uint64_t)&v318, (unsigned char *)(v10 + 67), (unsigned char *)(v10 + 71), (unsigned char *)(v10 + 66), v327, v314, v277, *(double *)v291.i64, v294, v293);
      __int16 v290 = 256;
    }
    *(_WORD *)&v303[4] = v290;
    *(_DWORD *)float32x4_t v303 = v61;
    float32x4_t v302 = (float32x4_t *)a7;
    float32x2_t v300 = v62;
    float32x2_t v301 = v277;
LABEL_73:
    *(float *)&double v289 = v54;
    return physx::Gu::generateOrProcessContactsConvexConvex((uint64_t)&v320, (uint64_t)&v318, (uint64_t)v316, (int32x4_t *)v315, (float32x4_t *)&v311, v288, (uint64_t)v327, v10, v300, v301, v289, v302, *(unsigned int *)v303, v303[4], v303[5]);
  }
  if (!v61) {
    return 0;
  }
  uint64_t v117 = *(void *)(v10 + 80);
  int8x16_t v118 = *(int8x16_t *)(v117 + 32);
  float32x4_t v119 = (float32x4_t)v118;
  if (v61 != 1)
  {
    uint64_t v120 = v61 - 1;
    float32x4_t v121 = (float32x4_t *)(v117 + 80);
    float32x4_t v119 = (float32x4_t)v118;
    do
    {
      float32x4_t v122 = *v121;
      v121 += 3;
      float32x4_t v119 = vaddq_f32(v119, v122);
      --v120;
    }
    while (v120);
  }
  v119.i32[3] = 0;
  float32x4_t v123 = vmulq_f32(v119, v119);
  v123.i64[0] = vpaddq_f32(v123, v123).u64[0];
  v118.i32[3] = 0;
  float32x4_t v124 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32), (float32x2_t)0x3400000034000000), 0), 0x1FuLL)), (int8x16_t)v119, v118);
  float32x4_t v125 = v97;
  v125.i32[3] = 0;
  v123.i64[0] = vdupq_laneq_s32((int32x4_t)v97, 3).u64[0];
  float32x4_t v126 = vmulq_n_f32(v124, vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v123.f32, *(float32x2_t *)v123.f32).f32[0]);
  v126.i32[3] = 0;
  float32x2_t v127 = (float32x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
  float32x2_t v128 = (float32x2_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).u64[0];
  int8x8_t v129 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v97.f32, (float32x2_t)vext_s8(*(int8x8_t *)v124.f32, (int8x8_t)v128, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v97.f32, (int8x8_t)v127, 4uLL), *(float32x2_t *)v124.f32);
  *(int8x8_t *)v130.f32 = vext_s8(v129, (int8x8_t)vmls_f32(vmul_f32(v127, *(float32x2_t *)v124.f32), *(float32x2_t *)v97.f32, v128), 4uLL);
  v130.i64[1] = v129.u32[0];
  float32x4_t v131 = vmlaq_laneq_f32(v126, v130, v97, 3);
  v131.i64[1] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
  float32x4_t v132 = vmulq_f32(v125, v124);
  v132.i64[0] = vpaddq_f32(v132, v132).u64[0];
  float32x4_t v133 = vmlaq_n_f32(v131, v125, vpadd_f32(*(float32x2_t *)v132.f32, *(float32x2_t *)v132.f32).f32[0]);
  float32x4_t v134 = vaddq_f32(v133, v133);
  v134.i32[3] = 0;
  float32x4_t v135 = vmulq_f32(v134, v134);
  v135.i64[0] = vpaddq_f32(v135, v135).u64[0];
  float32x2_t v136 = vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32);
  float32x2_t v137 = vrsqrte_f32(v136);
  int v138 = 4;
  do
  {
    float32x2_t v137 = vmul_f32(v137, vrsqrts_f32(vmul_f32(v137, v137), v136));
    --v138;
  }
  while (v138);
  float32x2_t v139 = vmul_f32(v136, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v136), 0), (int8x8_t)_D10, (int8x8_t)v137));
  float32x2_t v140 = vrecpe_f32(v139);
  int v141 = 4;
  do
  {
    float32x2_t v140 = vmul_f32(v140, vrecps_f32(v139, v140));
    --v141;
  }
  while (v141);
  float32x4_t v142 = vmulq_n_f32(v134, v140.f32[0]);
  v142.i32[3] = 0;
  float32x4_t v344 = v142;
  physx::Gu::PersistentContactManifold::addManifoldContactsToContactBuffer(v10, a7, &v344, v315, (uint64_t *)&v317);
  return 1;
}

BOOL physx::Gu::PCMContactConvexHeightfield(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, float32x4_t *a10, uint64_t a11)
{
  double v19 = MEMORY[0x270FA5388](a1);
  uint64_t v20 = v17;
  uint64_t v205 = *MEMORY[0x263EF8340];
  float32x4_t v21 = *v15;
  v22.i64[0] = v15[1].i64[0];
  v22.i64[1] = v15[1].u32[2];
  float32x4_t v23 = *v16;
  v24.i64[0] = v16[1].i64[0];
  v24.i64[1] = v16[1].u32[2];
  int32x2_t v191 = vdup_lane_s32(v25, 0);
  v190[0] = v21;
  v190[1] = v22;
  float32x4_t v26 = vnegq_f32(v23);
  float32x4_t v27 = vsubq_f32(v22, v24);
  float32x4_t v28 = v26;
  v28.i32[3] = 0;
  float32x2_t v29 = (float32x2_t)vdupq_laneq_s32((int32x4_t)v23, 3).u64[0];
  float32x4_t v30 = vmulq_n_f32(v27, vmla_f32((float32x2_t)0xBF000000BF000000, v29, v29).f32[0]);
  v30.i32[3] = 0;
  v189[0] = v23;
  v189[1] = v24;
  float32x2_t v31 = (float32x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  float32x2_t v32 = (float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)v31, 4uLL);
  int8x8_t v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL)), v32, *(float32x2_t *)v27.f32);
  *(int8x8_t *)v24.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32(v31, *(float32x2_t *)v27.f32), *(float32x2_t *)v26.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), 4uLL);
  v24.i64[1] = v33.u32[0];
  float32x4_t v34 = vmlaq_laneq_f32(v30, v24, v23, 3);
  v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
  float32x4_t v35 = vmulq_f32(v28, v27);
  v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
  float32x4_t v36 = vmlaq_n_f32(v34, v28, vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32).f32[0]);
  float32x4_t v37 = vaddq_f32(v36, v36);
  v37.i32[3] = 0;
  float32x4_t v38 = v21;
  v38.i32[3] = 0;
  float32x4_t v39 = vmulq_f32(v38, v28);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  float32x2_t v40 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32));
  float32x4_t v41 = vmulq_laneq_f32(v38, v23, 3);
  v38.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  *(float32x2_t *)v39.f32 = vmls_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v21.f32, *(int8x8_t *)v38.f32, 4uLL), *(float32x2_t *)v26.f32), v32, *(float32x2_t *)v21.f32);
  *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v39.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.f32, v31), *(float32x2_t *)v26.f32, *(float32x2_t *)v38.f32), 4uLL);
  v26.i64[1] = v39.i64[0];
  float32x4_t v42 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v28, v21, 3), v41), v26);
  float32x4_t v43 = v42;
  v43.i32[3] = v40.i32[1];
  int8x16_t v44 = (int8x16_t)vabdq_f32(v37, a10[1]);
  *(float32x2_t *)v44.i8 = vpmax_f32((float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), *(float32x2_t *)v44.i8);
  float32x4_t v45 = vmulq_f32(v43, *a10);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  __asm { FMOV            V1.2S, #1.0 }
  if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3F7FF2E5u), vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32)), (int8x8_t)vcgt_f32(vpmax_f32(*(float32x2_t *)v44.i8, *(float32x2_t *)v44.i8), vmul_f32(*(float32x2_t *)&v19, (float32x2_t)vdup_n_s32(0x3E4CCCCDu)))), 0), *(int8x8_t *)&v19).u32[0] == -1)
  {
    float32x4_t v79 = (float *)v16;
    float32x4_t v80 = v13;
    uint64_t v177 = v17;
    float32x2_t v188 = vmul_f32(*(float32x2_t *)&v19, (float32x2_t)vdup_n_s32(0x3D4CCCCDu));
    a10[3].i8[14] = 0;
    *a10 = v43;
    a10[1] = v37;
    float v81 = v16->f32[1];
    float v82 = v16->f32[2];
    float v83 = v16->f32[3];
    float v84 = v15[1].f32[0] - v16[1].f32[0];
    float v85 = v15[1].f32[1] - v16[1].f32[1];
    float v86 = v15[1].f32[2] - v16[1].f32[2];
    float v87 = v84 + v84;
    float v88 = v85 + v85;
    float v89 = v86 + v86;
    float v90 = (float)(v83 * v83) + -0.5;
    float v91 = (float)((float)-(float)(v81 * v88) - (float)(v16->f32[0] * v87)) - (float)(v82 * v89);
    float v92 = (float)((float)(v83 * (float)((float)(v82 * v88) - (float)(v81 * v89))) + (float)(v87 * v90))
        - (float)(v16->f32[0] * v91);
    float v93 = (float)((float)(v83 * (float)((float)(v16->f32[0] * v89) - (float)(v82 * v87))) + (float)(v88 * v90))
        - (float)(v81 * v91);
    float v94 = (float)((float)(v83 * (float)((float)(v81 * v87) - (float)(v16->f32[0] * v88))) + (float)(v89 * v90))
        - (float)(v82 * v91);
    float v96 = v15->f32[2];
    float v95 = v15->f32[3];
    float v97 = v15->f32[1];
    float v98 = (float)((float)((float)(v83 * v15->f32[0]) - (float)(v16->f32[0] * v95)) - (float)(v81 * v96))
        + (float)(v97 * v82);
    float v99 = (float)((float)((float)(v83 * v97) - (float)(v81 * v95)) - (float)(v82 * v15->f32[0]))
        + (float)(v96 * v16->f32[0]);
    float v100 = (float)((float)((float)(v83 * v96) - (float)(v82 * v95)) - (float)(v16->f32[0] * v97))
         + (float)(v15->f32[0] * v81);
    float v101 = (float)((float)((float)(v16->f32[0] * v15->f32[0]) + (float)(v83 * v95)) + (float)(v81 * v97))
         + (float)(v82 * v96);
    float32x2_t v102 = v11;
    float32x2_t v186 = v14[1];
    float32x4_t v187 = v14;
    float v103 = v14[3].f32[0];
    int32x2_t v184 = vrev64_s32((int32x2_t)vdiv_f32(_D1, v14[2]));
    float v185 = 1.0 / v103;
    char v202 = 1;
    uint64_t v204 = 0x44000000000;
    float32x4_t v203 = v201;
    uint64_t v104 = v18;
    uint64_t v105 = v12;
    (*(void (**)(__int16 *__return_ptr))(**(void **)&v186 + 104))(&v183);
    char v106 = (v183 & 1) == 0;
    v192.i64[0] = (uint64_t)&unk_26E729E88;
    v192.i64[1] = (uint64_t)&v184;
    v193.i64[0] = (uint64_t)v79;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)&v186 + 104))(&v178);
    v193.i8[8] = (v178 & 1) == 0;
    v192.i64[0] = (uint64_t)&unk_26E729E30;
    uint64_t v176 = v104;
    uint64_t v20 = v177;
    physx::Gu::PCMConvexVsMeshContactGeneration::PCMConvexVsMeshContactGeneration((unint64_t)v194, &v191, &v188, v190, v189, (uint64_t)a10, v177, v102, v105, (uint64_t)v201, v176, a9, v106, a11);
    float v107 = v80[1];
    float v109 = v80[2];
    float v108 = v80[3];
    float v110 = v80[4];
    float v111 = v80[5];
    float v112 = (float)((float)(*v80 + v108) * 0.5) + (float)((float)(*v80 + v108) * 0.5);
    float v113 = (float)((float)(v107 + v110) * 0.5) + (float)((float)(v107 + v110) * 0.5);
    float v114 = (float)((float)(v109 + v111) * 0.5) + (float)((float)(v109 + v111) * 0.5);
    float v115 = (float)(v101 * v101) + -0.5;
    float v116 = (float)((float)(v99 * v113) + (float)(v98 * v112)) + (float)(v100 * v114);
    float v117 = (float)((float)(v101 * (float)((float)(v99 * v114) - (float)(v100 * v113))) + (float)(v112 * v115))
         + (float)(v98 * v116);
    float v118 = (float)((float)(v101 * (float)((float)(v100 * v112) - (float)(v98 * v114))) + (float)(v113 * v115))
         + (float)(v99 * v116);
    float v119 = (float)((float)(v101 * (float)((float)(v98 * v113) - (float)(v99 * v112))) + (float)(v114 * v115))
         + (float)(v100 * v116);
    float v120 = v92 + v117;
    float v121 = v93 + v118;
    float v122 = v94 + v119;
    float v123 = v99 * (float)(v99 + v99);
    float v124 = v100 * (float)(v100 + v100);
    float v125 = (float)(v98 + v98) * v99;
    float v126 = v100 * (float)(v98 + v98);
    float v127 = v101 * (float)(v98 + v98);
    float v128 = v100 * (float)(v99 + v99);
    float v129 = v101 * (float)(v99 + v99);
    float v130 = v101 * (float)(v100 + v100);
    float v131 = 1.0 - (float)(v98 * (float)(v98 + v98));
    float v132 = (float)(v108 - *v80) * 0.5;
    float v133 = (float)(v110 - v107) * 0.5;
    float v134 = (float)(v111 - v109) * 0.5;
    float v135 = (float)(fabsf((float)((float)(1.0 - v123) - v124) * v132) + fabsf((float)(v125 - v130) * v133))
         + fabsf((float)(v126 + v129) * v134);
    float v136 = (float)(fabsf((float)(v125 + v130) * v132) + fabsf((float)(v131 - v124) * v133))
         + fabsf((float)(v128 - v127) * v134);
    float v137 = (float)(fabsf((float)(v126 - v129) * v132) + fabsf((float)(v127 + v128) * v133))
         + fabsf((float)(v131 - v123) * v134);
    *(float *)&uint64_t v178 = v120 - v135;
    *((float *)&v178 + 1) = v121 - v136;
    float v179 = v122 - v137;
    float v180 = v135 + v120;
    float v181 = v136 + v121;
    float v182 = v137 + v122;
    physx::Gu::HeightFieldUtil::overlapAABBTriangles((uint64_t)&v184, v79, (float *)&v178, 0, (uint64_t)&v192);
    physx::Gu::PCMConvexVsMeshContactGeneration::generateLastContacts(v194);
    unsigned int v138 = v199;
    if (v199)
    {
      uint64_t v139 = v200;
      if (v200 >= 2)
      {
        int v140 = 0;
        unsigned int v141 = -1;
        uint64_t v142 = 1;
        do
        {
          int8x8_t v143 = (char *)v194 + 8 * v142;
          uint64_t v144 = *((void *)v143 + 255);
          uint64_t v145 = *((void *)v143 + 256);
          if (COERCE_FLOAT(*(void *)(v144 + 40)) > COERCE_FLOAT(*(void *)(v145 + 40)))
          {
            *((void *)v143 + 255) = v145;
            *((void *)v143 + 256) = v144;
            if ((int)v142 - 2 >= 0)
            {
              uint64_t v146 = &v195[v141 + 1];
              int v147 = v140;
              do
              {
                uint64_t v149 = *(v146 - 1);
                uint64_t v148 = *v146;
                if (COERCE_FLOAT(*(void *)(*v146 + 40)) >= COERCE_FLOAT(*(void *)(v149 + 40))) {
                  break;
                }
                *uint64_t v146 = v149;
                *--uint64_t v146 = v148;
                --v147;
              }
              while (v147 > 0);
            }
          }
          ++v142;
          ++v141;
          ++v140;
        }
        while (v142 != v139);
      }
      if (v139)
      {
        uint64_t v150 = 0;
        for (uint64_t i = 0; i != v139; ++i)
        {
          float32x4_t v152 = (float32x4_t *)v195[i];
          v152[1].i64[1] = (uint64_t)v152;
          v152[2].i64[0] = (uint64_t)v152;
          int v153 = v152[3].i32[1] - v152[3].i32[0];
          v152[3].i32[2] = v153;
          v152[1].i64[0] = 0;
          uint64_t v154 = v150;
          while (v154)
          {
            uint64_t v155 = *(uint64_t *)((char *)&v194[127].i64[1] + v154);
            float32x4_t v156 = *(float32x4_t **)(v155 + 32);
            float32x4_t v157 = vmulq_f32(*v152, *v156);
            v157.i64[0] = vpaddq_f32(v157, v157).u64[0];
            v154 -= 8;
            if (vpadd_f32(*(float32x2_t *)v157.f32, *(float32x2_t *)v157.f32).f32[0] >= *(float *)&v196)
            {
              *(void *)(v155 + 16) = v152;
              v156[1].i64[1] = (uint64_t)v152;
              v152[2].i64[0] = (uint64_t)v156;
              *(_DWORD *)(*(void *)(v155 + 32) + 56) += v153;
              break;
            }
          }
          v150 += 8;
        }
        uint64_t v158 = 0;
        uint64_t v159 = v198;
        do
        {
          uint64_t v160 = v195[v158];
          if (v160) {
            _ZF = *(void *)(v160 + 32) == v160;
          }
          else {
            _ZF = 0;
          }
          if (_ZF)
          {
            while (*(void *)(v160 + 16))
            {
              uint64_t v162 = v160;
              uint64_t v160 = *(void *)(v160 + 16);
              unint64_t v163 = *(unsigned int *)(v162 + 48);
              unint64_t v164 = *(unsigned int *)(v162 + 52);
              if (v163 < v164)
              {
                unsigned int v165 = *(_DWORD *)(v160 + 52);
                do
                {
                  unsigned int v166 = *(_DWORD *)(v160 + 48);
                  if (v166 < v165)
                  {
                    do
                    {
                      unint64_t v167 = v159 + ((unint64_t)v166 << 6);
                      float32x4_t v168 = vsubq_f32(*(float32x4_t *)(v167 + 16), *(float32x4_t *)(v159 + (v163 << 6) + 16));
                      float32x4_t v169 = vmulq_f32(v168, v168);
                      v169.i64[0] = vpaddq_f32(v169, v169).u64[0];
                      if (v197[0] > vpadd_f32(*(float32x2_t *)v169.f32, *(float32x2_t *)v169.f32).f32[0])
                      {
                        float32x2_t v170 = (long long *)(v159 + ((unint64_t)(v165 - 1) << 6));
                        long long v171 = *v170;
                        long long v172 = v170[1];
                        long long v173 = v170[2];
                        *(_DWORD *)(v167 + 48) = *((_DWORD *)v170 + 12);
                        *(_OWORD *)(v167 + 16) = v172;
                        *(_OWORD *)(v167 + 32) = v173;
                        *(_OWORD *)unint64_t v167 = v171;
                        unsigned int v165 = *(_DWORD *)(v160 + 52) - 1;
                        *(_DWORD *)(v160 + 52) = v165;
                        --v166;
                      }
                      ++v166;
                    }
                    while (v166 < v165);
                    unint64_t v164 = *(unsigned int *)(v162 + 52);
                  }
                  ++v163;
                }
                while (v163 < v164);
              }
            }
          }
          ++v158;
        }
        while (v158 != v139);
        uint64_t v174 = v198;
        unsigned int v138 = v199;
        unsigned int v175 = v200;
      }
      else
      {
        unsigned int v175 = 0;
        uint64_t v174 = v198;
      }
      physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(v195[36], v174, v138, v195, v175, (uint64_t)v197, &v196, 6);
    }
    if ((v204 & 0x8000000000000000) == 0 && (v204 & 0x7FFFFFFF00000000) != 0 && v203 != v201 && v203) {
      (*(void (**)(void))(*(void *)(physx::shdfnd::Foundation::mInstance + 24) + 24))();
    }
  }
  else
  {
    float32x2_t v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.f32, 1);
    float32x2_t v51 = (float32x2_t)vdup_laneq_s32((int32x4_t)v42, 2);
    v194[1] = v37;
    float32x4_t v52 = vaddq_f32(v42, v42);
    float32x2_t v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1);
    float32x2_t v54 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
    float32x2_t v55 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v52.f32), 0);
    float32x2_t v56 = vmul_lane_f32(v50, *(float32x2_t *)v52.f32, 1);
    float32x2_t v57 = vmul_laneq_f32(v51, v52, 2);
    float32x2_t v58 = vmul_n_f32(v50, v52.f32[0]);
    float32x2_t v59 = vmul_n_f32(v51, v52.f32[0]);
    float32x2_t v60 = vmul_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0), v40, 1);
    *(float32x2_t *)v52.f32 = vmul_lane_f32(v51, *(float32x2_t *)v52.f32, 1);
    float32x2_t v61 = vmul_lane_f32(v53, v40, 1);
    float32x2_t v62 = vmul_lane_f32(v54, v40, 1);
    float32x2_t v63 = vsub_f32(_D1, v55);
    *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(_D1, v56), v57), (int8x8_t)vadd_f32(v58, v62), 4uLL);
    v64.i64[1] = vsub_f32(v59, v61).u32[0];
    float32x4_t v192 = v64;
    *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vsub_f32(v58, v62), (int8x8_t)vsub_f32(v63, v57), 4uLL);
    v64.i64[1] = vadd_f32(*(float32x2_t *)v52.f32, v60).u32[0];
    float32x4_t v193 = v64;
    *(int8x8_t *)v64.f32 = vext_s8((int8x8_t)vadd_f32(v59, v61), (int8x8_t)vsub_f32(*(float32x2_t *)v52.f32, v60), 4uLL);
    v64.i64[1] = vsub_f32(v63, v56).u32[0];
    v194[0] = v64;
    v201[0] = vmul_f32(*(float32x2_t *)&v19, (float32x2_t)vdup_n_s32(0x3F19999Au));
    unsigned int v65 = a10[3].u8[14];
    if (a10[3].i8[14])
    {
      unsigned int v66 = 0;
      do
      {
        uint64_t v67 = &a10[3].i8[v66 + 8];
        uint64_t v68 = *v67;
        unsigned int v69 = v65 - 2;
        if (v66 < v69) {
          unsigned int v69 = v66;
        }
        _X8 = (uint64_t)&a10[25 * a10[3].u8[v69 + 9] + 4];
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X8,#0x80]
          PRFM            #0, [X8,#0x100]
        }
        unsigned __int32 v74 = physx::Gu::SinglePersistentContactManifold::refreshContactPoints((uint64_t)&a10[25 * *v67 + 4], &v192, v201).u32[0];
        if (a10[25 * v68 + 28].i32[0])
        {
          a10[2].i32[v68] = v74;
        }
        else
        {
          unsigned __int8 v75 = a10[3].i8[14] - 1;
          a10[3].i8[14] = v75;
          float32x4_t v76 = (char *)a10 + v75;
          __int8 v77 = v76[56];
          v76[56] = v68;
          *uint64_t v67 = v77;
          --v66;
        }
        ++v66;
        unsigned int v65 = a10[3].u8[14];
      }
      while (v66 < v65);
    }
  }
  return physx::Gu::MultiplePersistentContactManifold::addManifoldContactsToContactBuffer((uint64_t)a10, v20, v189);
}

BOOL physx::Gu::pcmContactConvexHeightField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t **a6, uint64_t a7, uint64_t a8)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  uint64_t v15 = *(void *)(a1 + 48);
  int8x16_t v16 = *a6;
  *(void *)&long long v17 = *(void *)(a3 + 16);
  *((void *)&v17 + 1) = *(unsigned int *)(a3 + 24);
  v96[0] = *(_OWORD *)a3;
  v96[1] = v17;
  v93[0] = xmmword_23435FD50;
  v93[1] = xmmword_23435FD50;
  void v93[2] = xmmword_234376D80;
  void v93[3] = xmmword_23435FD60;
  uint64_t v94 = 0x3F80000000000000;
  char v95 = 0;
  PCMchar ConvexData = physx::Gu::getPCMConvexData(a1, (uint64_t)v93, (uint64_t)v92, (uint64_t)v91);
  BOOL v19 = 0;
  v20.i64[0] = *(void *)(v15 + 60);
  float32x4_t v21 = *(float32x4_t *)(a1 + 4);
  float32x4_t v22 = v21;
  v22.i32[3] = 0;
  v20.i64[1] = *(unsigned int *)(v15 + 68);
  int32x4_t v23 = (int32x4_t)vmulq_f32(v22, v20);
  float32x2_t v24 = vpmin_f32((float32x2_t)vdup_laneq_s32(v23, 2), *(float32x2_t *)v23.i8);
  LODWORD(v25) = vpmin_f32(v24, v24).u32[0];
  __asm { FMOV            V1.2S, #0.25 }
  if (v21.f32[0] == 1.0 && v21.f32[1] == 1.0) {
    BOOL v19 = v21.f32[2] == 1.0;
  }
  v24.f32[0] = *(float *)(a5 + 8) * 0.05;
  int8x8_t v31 = (int8x8_t)vdup_lane_s32((int32x2_t)v24, 0);
  float32x4_t v32 = *(float32x4_t *)(a1 + 16);
  char v102 = 0;
  float32x4_t v100 = 0u;
  long long v101 = 0u;
  uint64_t v109 = v15;
  uint64_t v111 = *(void *)(v15 + 40) + 20 * *(unsigned __int8 *)(v15 + 39);
  char v112 = *(unsigned char *)(v15 + 38);
  *(float32x2_t *)&long long v101 = vmul_n_f32((float32x2_t)0x3D4CCCCD3DCCCCCDLL, v25);
  *((float *)&v101 + 2) = 0.025 * v25;
  if (v19)
  {
    long long v103 = xmmword_23435FD50;
    long long v104 = xmmword_23435FD60;
    long long v105 = xmmword_23435FD80;
    long long v106 = xmmword_23435FD50;
    long long v107 = xmmword_23435FD60;
    long long v108 = xmmword_23435FD80;
  }
  else
  {
    float32x4_t v33 = vrecpeq_f32(v22);
    int v34 = 4;
    do
    {
      float32x4_t v33 = vmulq_f32(v33, vrecpsq_f32(v33, v22));
      --v34;
    }
    while (v34);
    *(int32x2_t *)v35.f32 = vdup_lane_s32(*(int32x2_t *)v21.f32, 0);
    v35.i64[1] = v35.u32[0];
    if ((~vuzp1_s8((int8x8_t)vmovn_s32(vceqq_f32(v35, v22)), v31).u32[0] & 0xFFFFFF) != 0)
    {
      float32x2_t v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.f32, 1);
      float32x2_t v43 = (float32x2_t)vdup_laneq_s32((int32x4_t)v32, 2);
      float32x2_t v44 = (float32x2_t)vdup_laneq_s32((int32x4_t)v32, 3);
      _Q17 = vaddq_f32(v32, v32);
      float32x2_t v46 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)_Q17.f32), 0);
      float32x2_t v47 = vmul_lane_f32(v42, *(float32x2_t *)_Q17.f32, 1);
      float32x2_t v48 = vmul_laneq_f32(v43, _Q17, 2);
      float32x2_t v49 = vmul_n_f32(v42, _Q17.f32[0]);
      float32x2_t v50 = vmul_n_f32(v43, _Q17.f32[0]);
      float32x2_t v51 = vmul_n_f32(v44, _Q17.f32[0]);
      float32x2_t v52 = vmul_lane_f32(v43, *(float32x2_t *)_Q17.f32, 1);
      float32x2_t v53 = vmul_lane_f32(v44, *(float32x2_t *)_Q17.f32, 1);
      float32x2_t v54 = vmul_laneq_f32(v44, _Q17, 2);
      __asm { FMOV            V17.2S, #1.0 }
      float32x2_t v55 = vsub_f32(*(float32x2_t *)_Q17.f32, v46);
      *(int8x8_t *)v56.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q17.f32, v47), v48), (int8x8_t)vadd_f32(v49, v54), 4uLL);
      v56.i64[1] = vsub_f32(v50, v53).u32[0];
      *(int8x8_t *)v57.f32 = vext_s8((int8x8_t)vsub_f32(v49, v54), (int8x8_t)vsub_f32(v55, v48), 4uLL);
      int8x8_t v58 = (int8x8_t)vadd_f32(v50, v53);
      *(int8x8_t *)_Q17.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v56.f32, 0), *(int8x8_t *)v57.f32, 4uLL);
      v57.i64[1] = vadd_f32(v52, v51).u32[0];
      v53.i32[0] = vsub_f32(v55, v47).u32[0];
      *(int8x8_t *)v59.f32 = vext_s8(v58, (int8x8_t)vsub_f32(v52, v51), 4uLL);
      *(int8x8_t *)v60.f32 = vext_s8(*(int8x8_t *)v56.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 1), 4uLL);
      v59.i64[1] = v53.u32[0];
      _Q17.i64[1] = vdup_lane_s32(*(int32x2_t *)v59.f32, 0).u32[0];
      v60.i64[1] = vdup_lane_s32(*(int32x2_t *)v59.f32, 1).u32[0];
      *(int8x8_t *)v61.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)&v56.u32[2], 0), *(int8x8_t *)&v57.u32[2], 4uLL);
      v61.i64[1] = vdup_lane_s32((int32x2_t)v53.u32[0], 0).u32[0];
      float32x4_t v62 = vmulq_n_f32(_Q17, v21.f32[0]);
      v62.i32[3] = 0;
      float32x4_t v63 = vmulq_lane_f32(v60, *(float32x2_t *)v21.f32, 1);
      v63.i32[3] = 0;
      float32x4_t v64 = vmulq_laneq_f32(v61, v21, 2);
      v64.i32[3] = 0;
      float32x4_t v65 = vmulq_n_f32(v62, v56.f32[0]);
      v65.i32[3] = 0;
      float32x4_t v66 = vmulq_lane_f32(v63, *(float32x2_t *)v56.f32, 1);
      v66.i32[3] = 0;
      float32x4_t v67 = vmulq_laneq_f32(v64, v56, 2);
      v67.i32[3] = 0;
      float32x4_t v36 = vaddq_f32(v67, vaddq_f32(v65, v66));
      float32x4_t v68 = vmulq_n_f32(v62, v57.f32[0]);
      v68.i32[3] = 0;
      float32x4_t v69 = vmulq_lane_f32(v63, *(float32x2_t *)v57.f32, 1);
      v69.i32[3] = 0;
      float32x4_t v70 = vmulq_laneq_f32(v64, v57, 2);
      v70.i32[3] = 0;
      float32x4_t v71 = vaddq_f32(v68, v69);
      float32x4_t v72 = vmulq_n_f32(v62, v59.f32[0]);
      v72.i32[3] = 0;
      float32x4_t v73 = vmulq_lane_f32(v63, *(float32x2_t *)v59.f32, 1);
      v73.i32[3] = 0;
      float32x4_t v74 = vmulq_laneq_f32(v64, v59, 2);
      v74.i32[3] = 0;
      float32x4_t v37 = vaddq_f32(v70, v71);
      float32x4_t v38 = vaddq_f32(v74, vaddq_f32(v72, v73));
      long long v103 = (__int128)v36;
      long long v104 = (__int128)v37;
      long long v105 = (__int128)v38;
      float32x4_t v75 = vmulq_n_f32(_Q17, v33.f32[0]);
      v75.i32[3] = 0;
      float32x4_t v76 = vmulq_lane_f32(v60, *(float32x2_t *)v33.f32, 1);
      v76.i32[3] = 0;
      float32x4_t v77 = vmulq_laneq_f32(v61, v33, 2);
      v77.i32[3] = 0;
      float32x4_t v78 = vmulq_n_f32(v75, v56.f32[0]);
      v78.i32[3] = 0;
      float32x4_t v79 = vmulq_lane_f32(v76, *(float32x2_t *)v56.f32, 1);
      v79.i32[3] = 0;
      float32x4_t v80 = vmulq_laneq_f32(v77, v56, 2);
      v80.i32[3] = 0;
      float32x4_t v39 = vaddq_f32(v80, vaddq_f32(v78, v79));
      float32x4_t v81 = vmulq_n_f32(v75, v57.f32[0]);
      v81.i32[3] = 0;
      float32x4_t v82 = vmulq_lane_f32(v76, *(float32x2_t *)v57.f32, 1);
      v82.i32[3] = 0;
      float32x4_t v83 = vmulq_laneq_f32(v77, v57, 2);
      v83.i32[3] = 0;
      float32x4_t v84 = vmulq_n_f32(v75, v59.f32[0]);
      v84.i32[3] = 0;
      float32x4_t v85 = vmulq_lane_f32(v76, *(float32x2_t *)v59.f32, 1);
      v85.i32[3] = 0;
      float32x4_t v40 = vaddq_f32(v83, vaddq_f32(v81, v82));
      float32x4_t v86 = vmulq_laneq_f32(v77, v59, 2);
      v86.i32[3] = 0;
      float32x4_t v41 = vaddq_f32(v86, vaddq_f32(v84, v85));
    }
    else
    {
      v33.i32[3] = 0;
      float32x4_t v36 = vmulq_f32(v22, (float32x4_t)xmmword_23435FD50);
      float32x4_t v37 = vmulq_f32(v22, (float32x4_t)xmmword_23435FD60);
      float32x4_t v38 = vmulq_f32(v22, (float32x4_t)xmmword_23435FD80);
      long long v103 = (__int128)v36;
      long long v104 = (__int128)v37;
      long long v105 = (__int128)v38;
      float32x4_t v39 = vmulq_f32(v33, (float32x4_t)xmmword_23435FD50);
      float32x4_t v40 = vmulq_f32(v33, (float32x4_t)xmmword_23435FD60);
      float32x4_t v41 = vmulq_f32(v33, (float32x4_t)xmmword_23435FD80);
    }
    long long v107 = (__int128)v40;
    long long v108 = (__int128)v41;
    float32x4_t v87 = vmulq_f32(v36, (float32x4_t)0);
    v87.i32[3] = 0;
    float32x4_t v88 = vmulq_f32(v37, (float32x4_t)0);
    v88.i32[3] = 0;
    float32x4_t v89 = vmulq_f32(v38, (float32x4_t)0);
    v89.i32[3] = 0;
    long long v106 = (__int128)v39;
    float32x4_t v100 = vaddq_f32(v89, vaddq_f32(v88, v87));
  }
  uint64_t v110 = *(void *)(v15 + 48);
  v97[4] = v96;
  v97[5] = &v103;
  v97[6] = &v106;
  if (PCMConvexData)
  {
    char v98 = 1;
    v97[0] = &unk_26E728728;
    float v99 = &v100;
    return physx::Gu::PCMContactConvexHeightfield((uint64_t)v91, (uint64_t)v97, (uint64_t)v92, a2, a3, a4, a7, (uint64_t)v93, 1, v16, a8);
  }
  else
  {
    char v98 = 0;
    v97[0] = &unk_26E728778;
    float v99 = &v100;
    return physx::Gu::PCMContactConvexHeightfield((uint64_t)v91, (uint64_t)v97, (uint64_t)v92, a2, a3, a4, a7, (uint64_t)v93, 0, v16, a8);
  }
}

BOOL physx::Gu::pcmContactBoxHeightField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 *a5, float32x4_t **a6, uint64_t a7, uint64_t a8, int32x2_t a9, int32x4_t a10, double a11, double a12, int32x4_t a13)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v18 = *a6;
  a9.i32[0] = *a5;
  a10.i32[0] = *(_DWORD *)(a1 + 12);
  float v19 = *(float *)a5 + *(float *)a10.i32;
  a13.i64[0] = *(void *)(a1 + 4);
  float32x2_t v20 = vadd_f32((float32x2_t)vdup_lane_s32(a9, 0), *(float32x2_t *)a13.i8);
  float32x2_t v49 = vneg_f32(v20);
  float v50 = -v19;
  float32x2_t v51 = v20;
  float v52 = v19;
  v46[0] = xmmword_23435FD50;
  v46[1] = xmmword_23435FD50;
  v46[2] = xmmword_234376D80;
  v46[3] = xmmword_23435FD60;
  uint64_t v47 = 0x3F80000000000000;
  char v48 = 0;
  *(void *)&long long v21 = *(void *)(a3 + 16);
  *((void *)&v21 + 1) = *(unsigned int *)(a3 + 24);
  long long v22 = *(_OWORD *)a3;
  int32x4_t v23 = a13;
  v23.i32[2] = a10.i32[0];
  *(int32x2_t *)a10.i8 = vdup_laneq_s32(v23, 2);
  v23.i32[3] = 0;
  *(float32x2_t *)a10.i8 = vpmin_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a13.i8);
  *(float32x2_t *)a10.i8 = vpmin_f32(*(float32x2_t *)a10.i8, *(float32x2_t *)a10.i8);
  int v43 = 3;
  char v44 = 0;
  v39[0] = 0;
  v39[1] = 0;
  int32x4_t v45 = v23;
  *(float *)v23.i32 = 0.15 * *(float *)a10.i32;
  *(float *)a10.i32 = 0.05 * *(float *)a10.i32;
  __int32 v40 = v23.i32[0];
  unsigned __int32 v41 = a10.i32[0];
  unsigned __int32 v42 = a10.i32[0];
  v38[0] = v22;
  v38[1] = v21;
  physx::Gu::PolygonalBox::PolygonalBox((uint64_t)v26, a1 + 4, *(double *)&v21, a10);
  uint64_t v29 = 0;
  uint64_t v31 = 0x600000008;
  int v30 = 0;
  int v32 = 0;
  float32x4_t v33 = &v28;
  int v34 = &v27;
  float32x4_t v35 = &physx::Gu::gPCMBoxPolygonData;
  long long v36 = 0u;
  long long v37 = 0u;
  v25[0] = xmmword_23435FD50;
  v25[1] = xmmword_23435FD60;
  v25[2] = xmmword_23435FD80;
  v53[4] = v38;
  v53[5] = v25;
  v53[6] = v25;
  char v54 = 1;
  v53[0] = &unk_26E7286C8;
  float32x2_t v55 = v39;
  return physx::Gu::PCMContactConvexHeightfield((uint64_t)&v29, (uint64_t)v53, (uint64_t)&v49, a2, a3, a4, a7, (uint64_t)v46, 1, v18, a8);
}

void physx::PCMCapsuleVsHeightfieldContactGenerationCallback::~PCMCapsuleVsHeightfieldContactGenerationCallback(physx::PCMCapsuleVsHeightfieldContactGenerationCallback *this)
{
}

uint64_t physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMCapsuleVsHeightfieldContactGenerationCallback>::onEvent(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  if (a2 + 15 >= 0x10)
  {
    unsigned int v4 = a2;
    int v6 = 0;
    unsigned int v27 = (a2 + 15) >> 4;
    unint64_t v26 = a1 + 32;
    do
    {
      int v55 = 0;
      int v29 = v6;
      unsigned int v30 = v4;
      if (v4 >= 0x10) {
        int v7 = 16;
      }
      else {
        int v7 = v4;
      }
      int v28 = v7;
      if (v7)
      {
        int v32 = v7;
        do
        {
          int v8 = *a3;
          physx::Gu::HeightFieldUtil::getTriangle(*(void *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v42, (uint64_t)v53, (uint64_t)v52, *a3, 0, 0);
          float v9 = (float)((float)(v46 - v43) * (float)(v50 - v44)) - (float)((float)(v47 - v44) * (float)(v49 - v43));
          float v10 = (float)((float)(v47 - v44) * (float)(v48 - v42)) - (float)((float)(v45 - v42) * (float)(v50 - v44));
          float v11 = (float)((float)(v45 - v42) * (float)(v49 - v43)) - (float)((float)(v46 - v43) * (float)(v48 - v42));
          float v12 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
          uint64_t v31 = a3 + 1;
          if (v12 > 0.0)
          {
            float v13 = 1.0 / v12;
            float v9 = v9 * v13;
            float v10 = v10 * v13;
            float v11 = v11 * v13;
          }
          uint64_t v14 = 0;
          int v15 = 0;
          --v32;
          do
          {
            unsigned int v16 = v52[v14];
            if (v16 == -1)
            {
              if (*(unsigned char *)(a1 + 24)) {
                int v24 = 8 << v14;
              }
              else {
                int v24 = 1 << v14;
              }
              v15 |= v24;
            }
            else
            {
              physx::Gu::HeightFieldUtil::getTriangle(*(void *)(a1 + 8), *(float **)(a1 + 16), (uint64_t)&v33, (uint64_t)v51, 0, v16, 0, 0);
              float v17 = (float)((float)(v37 - v34) * (float)(v41 - v35)) - (float)((float)(v38 - v35) * (float)(v40 - v34));
              float v18 = (float)((float)(v38 - v35) * (float)(v39 - v33)) - (float)((float)(v36 - v33) * (float)(v41 - v35));
              float v19 = (float)((float)(v36 - v33) * (float)(v40 - v34)) - (float)((float)(v37 - v34) * (float)(v39 - v33));
              float32x2_t v20 = &v42 + 3 * byte_234423248[v14];
              if ((float)((float)((float)(v18 * (float)(v20[1] - v34)) + (float)(v17 * (float)(*v20 - v33)))
                         + (float)(v19 * (float)(v20[2] - v35))) < 0.0)
              {
                float v21 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19));
                if (v21 > 0.0)
                {
                  float v22 = 1.0 / v21;
                  float v17 = v17 * v22;
                  float v18 = v18 * v22;
                  float v19 = v19 * v22;
                }
                int v23 = 8 << v14;
                if ((float)((float)((float)(v10 * v18) + (float)(v17 * v9)) + (float)(v19 * v11)) >= 0.997) {
                  int v23 = 0;
                }
                v15 |= v23;
              }
            }
            ++v14;
          }
          while (v14 != 3);
          physx::Gu::TriangleCache<16u>::addTriangle((uint64_t)v54, (uint64_t)&v42, v53, v8, v15);
          a3 = v31;
        }
        while (v32);
      }
      unsigned int v4 = v30 - v28;
      physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMCapsuleVsMeshContactGeneration>(v26, (uint64_t)v54);
      int v6 = v29 + 1;
    }
    while (v29 + 1 != v27);
  }
  return 1;
}

void physx::Gu::PCMHeightfieldContactGenerationCallback<physx::PCMCapsuleVsHeightfieldContactGenerationCallback>::~PCMHeightfieldContactGenerationCallback()
{
}

int32x2_t physx::Gu::PCMMeshContactGeneration::PCMMeshContactGeneration(unint64_t a1, void *a2, float32x2_t *a3, float32x4_t *a4, float32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = 0;
  int32x2_t v10 = vdup_n_s32(0x7F7FFFFFu);
  do
  {
    float v11 = (void *)(a1 + v9);
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = v11;
    v11[5] = v10;
    v9 += 64;
  }
  while (v9 != 2048);
  *(void *)(a1 + 2304) = *a2;
  *(float32x2_t *)(a1 + 2312) = *a3;
  *(void *)(a1 + 2320) = a4;
  *(void *)(a1 + 2328) = a5;
  *(void *)(a1 + 2336) = a6;
  *(void *)(a1 + 2344) = a7;
  *(void *)(a1 + 2424) = 0;
  *(void *)(a1 + 2416) = 0;
  *(_OWORD *)(a1 + 2368) = xmmword_23435FD50;
  *(_OWORD *)(a1 + 2384) = xmmword_23435FD60;
  *(_OWORD *)(a1 + 2400) = xmmword_23435FD80;
  *(_DWORD *)(a1 + 3732) = 0;
  *(void *)&long long v12 = -1;
  *((void *)&v12 + 1) = -1;
  *(_OWORD *)(a1 + 3604) = v12;
  *(_OWORD *)(a1 + 3620) = v12;
  *(_OWORD *)(a1 + 3636) = v12;
  *(_OWORD *)(a1 + 3652) = v12;
  *(_OWORD *)(a1 + 3668) = v12;
  *(_OWORD *)(a1 + 3684) = v12;
  *(_OWORD *)(a1 + 3700) = v12;
  *(_OWORD *)(a1 + 3716) = v12;
  *(void *)(a1 + 3736) = a8;
  *(void *)(a1 + 3744) = a9;
  *(void *)(a1 + 2440) = 0;
  *(_DWORD *)(a1 + 2448) = 0;
  float32x4_t v13 = vnegq_f32(*a4);
  float32x4_t v14 = vsubq_f32(a5[1], a4[1]);
  float32x4_t v15 = v13;
  v15.i32[3] = 0;
  float32x2_t v16 = (float32x2_t)vdupq_laneq_s32(*(int32x4_t *)a4, 3).u64[0];
  float32x4_t v17 = vmulq_n_f32(v14, vmla_f32((float32x2_t)0xBF000000BF000000, v16, v16).f32[0]);
  v17.i32[3] = 0;
  float32x2_t v18 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
  float32x2_t v19 = (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v18, 4uLL);
  int8x8_t v20 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 4uLL)), v19, *(float32x2_t *)v14.f32);
  *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmls_f32(vmul_f32(v18, *(float32x2_t *)v14.f32), *(float32x2_t *)v13.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL)), 4uLL);
  v21.i64[1] = v20.u32[0];
  float32x4_t v22 = vmlaq_laneq_f32(v17, v21, *a4, 3);
  v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
  float32x4_t v23 = vmulq_f32(v15, v14);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  float32x4_t v24 = vmlaq_n_f32(v22, v15, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).f32[0]);
  float32x4_t v25 = vaddq_f32(v24, v24);
  v25.i32[3] = 0;
  float32x4_t v26 = *a5;
  v26.i32[3] = 0;
  float32x4_t v27 = vmulq_f32(v15, v26);
  v27.i64[0] = vpaddq_f32(v27, v27).u64[0];
  *(float32x2_t *)v21.f32 = vsub_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4, *(int8x16_t *)a4, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a5, *(int8x16_t *)a5, 8uLL)), vpadd_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32));
  float32x4_t v28 = vmulq_laneq_f32(v26, *a4, 3);
  v26.i64[0] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  *(float32x2_t *)v27.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v13.f32, (float32x2_t)vext_s8(*(int8x8_t *)a5->f32, *(int8x8_t *)v26.f32, 4uLL)), v19, *(float32x2_t *)a5->f32);
  *(int8x8_t *)v13.f32 = vext_s8(*(int8x8_t *)v27.f32, (int8x8_t)vmls_f32(vmul_f32(v18, *(float32x2_t *)a5->f32), *(float32x2_t *)v13.f32, *(float32x2_t *)v26.f32), 4uLL);
  v13.i64[1] = v27.i64[0];
  float32x4_t v29 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v15, *a5, 3), v28), v13);
  *(int32x2_t *)v28.f32 = vdup_lane_s32(*(int32x2_t *)v29.f32, 1);
  *(int32x2_t *)v15.f32 = vdup_laneq_s32((int32x4_t)v29, 2);
  float32x2_t v30 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.f32, 1);
  _Q5 = vaddq_f32(v29, v29);
  *(int32x2_t *)v29.f32 = vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)_Q5.f32), 0);
  float32x2_t v32 = vmul_lane_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)_Q5.f32, 1);
  *(float32x2_t *)v21.f32 = vmul_laneq_f32(*(float32x2_t *)v15.f32, _Q5, 2);
  *(float32x2_t *)v28.f32 = vmul_n_f32(*(float32x2_t *)v28.f32, _Q5.f32[0]);
  *(float32x2_t *)v27.f32 = vmul_n_f32(*(float32x2_t *)v15.f32, _Q5.f32[0]);
  float32x2_t v33 = vmul_n_f32(v30, _Q5.f32[0]);
  *(float32x2_t *)v15.f32 = vmul_lane_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)_Q5.f32, 1);
  float32x2_t v34 = vmul_lane_f32(v30, *(float32x2_t *)_Q5.f32, 1);
  float32x2_t v35 = vmul_laneq_f32(v30, _Q5, 2);
  __asm { FMOV            V5.2S, #1.0 }
  *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)_Q5.f32, *(float32x2_t *)v29.f32);
  *(int8x8_t *)_Q5.f32 = vext_s8((int8x8_t)vsub_f32(vsub_f32(*(float32x2_t *)_Q5.f32, v32), *(float32x2_t *)v21.f32), (int8x8_t)vadd_f32(*(float32x2_t *)v28.f32, v35), 4uLL);
  _Q5.i64[1] = vsub_f32(*(float32x2_t *)v27.f32, v34).u32[0];
  *(int8x8_t *)v28.f32 = vext_s8((int8x8_t)vsub_f32(*(float32x2_t *)v28.f32, v35), (int8x8_t)vsub_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v21.f32), 4uLL);
  v28.i64[1] = vadd_f32(*(float32x2_t *)v15.f32, v33).u32[0];
  *(int8x8_t *)v15.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v27.f32, v34), (int8x8_t)vsub_f32(*(float32x2_t *)v15.f32, v33), 4uLL);
  v15.i64[1] = vsub_f32(*(float32x2_t *)v29.f32, v32).u32[0];
  *(float32x4_t *)(a1 + 2368) = _Q5;
  *(float32x4_t *)(a1 + 2384) = v28;
  *(float32x4_t *)(a1 + 2400) = v15;
  *(float32x4_t *)(a1 + 2416) = v25;
  int64x2_t v40 = (int64x2_t)xmmword_234361D20;
  for (uint64_t i = 2048; i != 2304; i += 16)
  {
    *(int64x2_t *)(a1 + i) = vaddq_s64(vdupq_n_s64(a1), vshlq_n_s64(v40, 6uLL));
    int64x2_t v40 = vaddq_s64(v40, vdupq_n_s64(2uLL));
  }
  *(void *)(a1 + 2432) = a7;
  *(float32x2_t *)(a1 + 2360) = vmul_f32(*a3, *a3);
  int32x2_t result = vdup_n_s32(0x3F7EF9DBu);
  *(int32x2_t *)(a1 + 2352) = result;
  return result;
}

float physx::Gu::TriangleCache<16u>::addTriangle(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, char a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 848);
  *(_DWORD *)(a1 + 848) = v5 + 1;
  uint64_t v6 = a1 + 12 * (3 * v5);
  *(void *)uint64_t v6 = *(void *)a2;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(a2 + 8);
  LODWORD(v6) = 3 * v5 + 1;
  uint64_t v7 = a1 + 12 * v6;
  *(void *)uint64_t v7 = *(void *)(a2 + 12);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(a2 + 20);
  LODWORD(v7) = 3 * v5 + 2;
  uint64_t v8 = a1 + 12 * v7;
  *(void *)uint64_t v8 = *(void *)(a2 + 24);
  float result = *(float *)(a2 + 32);
  *(float *)(v8 + 8) = result;
  *(_DWORD *)(a1 + 576 + 4 * (3 * v5)) = *a3;
  *(_DWORD *)(a1 + 576 + 4 * v6) = a3[1];
  *(_DWORD *)(a1 + 576 + 4 * v7) = a3[2];
  *(_DWORD *)(a1 + 4 * v5 + 768) = a4;
  *(unsigned char *)(a1 + v5 + 832) = a5;
  return result;
}

void physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMCapsuleVsMeshContactGeneration>(unint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 848);
  if (v2)
  {
    uint64_t v3 = a2;
    uint64_t v5 = (char *)(a2 + 832);
    uint64_t v6 = (int *)(a2 + 768);
    uint64_t v7 = (_DWORD *)(a1 + 2440);
    uint64_t v8 = (void *)(a1 + 2360);
    uint64_t v9 = (void *)(a1 + 2352);
    uint64_t v139 = (uint64_t *)(a1 + 2048);
    int v140 = (float32x2_t *)(a1 + 3752);
    __asm { FMOV            V8.2S, #1.0 }
    unint64_t v138 = a1 + 2056;
    unint64_t v14 = a1 + 2040;
    int32x2_t v15 = vdup_n_s32(0x7F7FFFFFu);
    do
    {
      int v16 = *v6;
      v17.i64[0] = *(void *)v3;
      v17.i64[1] = *(unsigned int *)(v3 + 8);
      v18.i64[0] = *(void *)(v3 + 12);
      v18.i64[1] = *(unsigned int *)(v3 + 20);
      v19.i64[0] = *(void *)(v3 + 24);
      v19.i64[1] = *(unsigned int *)(v3 + 32);
      char v20 = *v5;
      int8x16_t v21 = (int8x16_t)vsubq_f32(v18, v17);
      int8x16_t v22 = (int8x16_t)vsubq_f32(v19, v17);
      int8x8_t v23 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 4uLL), *(float32x2_t *)v22.i8);
      *(int8x8_t *)v24.f32 = vext_s8(v23, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(float32x2_t *)v22.i8), *(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 4uLL);
      v24.i64[1] = v23.u32[0];
      v158[0] = v17;
      *(float32x2_t *)v22.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), vmul_f32((float32x2_t)v23.u32[0], (float32x2_t)v23.u32[0]));
      float32x2_t v25 = vpadd_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8);
      float32x2_t v26 = vrsqrte_f32(v25);
      int v27 = 4;
      do
      {
        float32x2_t v26 = vmul_f32(v26, vrsqrts_f32(vmul_f32(v26, v26), v25));
        --v27;
      }
      while (v27);
      float32x2_t v28 = vmul_f32(v25, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v25), 0), (int8x8_t)_D8, (int8x8_t)v26));
      float32x2_t v29 = vrecpe_f32(v28);
      int v30 = 4;
      do
      {
        float32x2_t v29 = vmul_f32(v29, vrecps_f32(v28, v29));
        --v30;
      }
      while (v30);
      float32x4_t v31 = vmulq_n_f32(v24, v29.f32[0]);
      v31.i32[3] = 0;
      float32x4_t v157 = v31;
      float32x4_t v32 = vmulq_f32(v17, v31);
      v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
      float32x2_t v33 = *(float32x4_t **)(a1 + 3768);
      float32x4_t v34 = vmulq_f32(v31, *v33);
      v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
      if (vsub_f32(vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32), vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32)).f32[0] >= 0.0)
      {
        uint64_t v148 = v6;
        uint64_t v149 = v5;
        double v155 = 0.0;
        uint64_t v156 = 0;
        double v154 = 0.0;
        float32x4_t v36 = v33[4];
        float32x2_t v35 = v33 + 4;
        float32x4_t v145 = v35[-1];
        float32x4_t v147 = v31;
        float32x4_t v144 = v36;
        float32x4_t v150 = v17;
        float32x4_t v151 = v18;
        float32x4_t v152 = v19;
        physx::Gu::pcmDistanceSegmentTriangleSquared(&v156, &v155, &v154, v145, v36, v17, v18, v19);
        if (COERCE_FLOAT(*(void *)(a1 + 3760)) > v37)
        {
          float v143 = v37;
          float32x2_t v141 = *(float32x2_t *)&v154;
          float32x2_t v142 = *(float32x2_t *)&v155;
          if (physx::Gu::selectNormal(v20, v155, v154))
          {
            float32x4_t v38 = v145;
            float32x4_t v153 = v147;
            float32x4_t v39 = v151;
            float32x4_t v40 = v152;
          }
          else
          {
            float32x4_t v38 = v145;
            float32x4_t v41 = v147;
            float32x4_t v39 = v151;
            float32x4_t v40 = v152;
            if (v143 != 0.0)
            {
              int8x16_t v42 = (int8x16_t)vmlaq_n_f32(v145, vsubq_f32(v144, v145), *(float *)&v156);
              float32x4_t v43 = vmulq_n_f32(v152, v141.f32[0]);
              v43.i32[3] = 0;
              float32x4_t v44 = vmlaq_n_f32(v43, v151, v142.f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              int8x16_t v45 = (int8x16_t)vmlaq_n_f32(v44, v150, vsub_f32(_D8, vadd_f32(v142, v141)).f32[0]);
              *(float32x2_t *)v46.f32 = vsub_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v45.i8);
              *(float32x2_t *)&v46.u32[2] = vsub_f32((float32x2_t)vextq_s8(v42, v42, 8uLL).u32[0], (float32x2_t)vextq_s8(v45, v45, 8uLL).u32[0]);
              *(float32x2_t *)v45.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), vmul_f32(*(float32x2_t *)&v46.u32[2], *(float32x2_t *)&v46.u32[2]));
              float32x2_t v47 = vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8);
              float32x2_t v48 = vrsqrte_f32(v47);
              int v49 = 4;
              do
              {
                float32x2_t v48 = vmul_f32(v48, vrsqrts_f32(vmul_f32(v48, v48), v47));
                --v49;
              }
              while (v49);
              float32x2_t v50 = vmul_f32(v47, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v47), 0), (int8x8_t)_D8, (int8x8_t)v48));
              float32x2_t v51 = vrecpe_f32(v50);
              int v52 = 4;
              do
              {
                float32x2_t v51 = vmul_f32(v51, vrecps_f32(v50, v51));
                --v52;
              }
              while (v52);
              float32x4_t v41 = vmulq_n_f32(v46, v51.f32[0]);
              v41.i32[3] = 0;
              float32x4_t v147 = v41;
            }
            float32x4_t v153 = v41;
          }
          unint64_t v146 = *(unsigned int *)(a1 + 2440);
          physx::Gu::PCMCapsuleVsMeshContactGeneration::generateContacts(v158, &v157, &v153, v16, v35, v140, *(void *)(a1 + 2432), v7, v39, v40, v38);
          uint64_t v53 = *(void *)(a1 + 3768);
          uint64_t v54 = *(void *)(a1 + 2432);
          physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEE((int8x8_t *)&v153, v16, v54, v7, *(__n128 *)(v53 + 48), *(float32x4_t *)(v53 + 64), *(float32x2_t *)(a1 + 3760), v150, v151);
          physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEE((int8x8_t *)&v153, v16, v54, v7, *(__n128 *)(v53 + 48), *(float32x4_t *)(v53 + 64), *(float32x2_t *)(a1 + 3760), v151, v152);
          physx::Gu::PCMCapsuleVsMeshContactGeneration::generateEE((int8x8_t *)&v153, v16, v54, v7, *(__n128 *)(v53 + 48), *(float32x4_t *)(v53 + 64), *(float32x2_t *)(a1 + 3760), v150, v152);
          LODWORD(v55) = *(_DWORD *)(a1 + 2440);
          if (v55 != v146)
          {
            float32x2_t v56 = (float32x2_t)v15;
            if (v146 < v55)
            {
              float32x2_t v56 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
              unint64_t v57 = v146 << 6;
              unint64_t v58 = v146;
              do
              {
                float32x4_t v59 = (int32x4_t *)(*(void *)(a1 + 2432) + v57);
                float32x4_t v60 = vmulq_n_f32(*(float32x4_t *)(a1 + 2368), COERCE_FLOAT(*v59));
                v60.i32[3] = 0;
                float32x4_t v61 = vmulq_lane_f32(*(float32x4_t *)(a1 + 2384), *(float32x2_t *)v59->i8, 1);
                v61.i32[3] = 0;
                float32x2_t v62 = (float32x2_t)vdup_laneq_s32(v59[2], 3);
                float32x4_t v63 = vmulq_laneq_f32(*(float32x4_t *)(a1 + 2400), *(float32x4_t *)v59, 2);
                v63.i32[3] = 0;
                *(float32x4_t *)float32x4_t v59 = vaddq_f32(*(float32x4_t *)(a1 + 2416), vaddq_f32(vaddq_f32(v60, v61), v63));
                float32x2_t v56 = vmin_f32(v56, v62);
                ++v58;
                unint64_t v55 = *(unsigned int *)(a1 + 2440);
                v57 += 64;
              }
              while (v58 < v55);
            }
            unint64_t v64 = v146;
            if (v146 < v55)
            {
              do
              {
                unint64_t v65 = v64++;
                if (v64 < v55)
                {
                  float32x4_t v66 = *(float32x4_t *)(*(void *)(a1 + 2432) + (v65 << 6) + 16);
                  unsigned int v67 = v64;
                  do
                  {
                    uint64_t v68 = *(void *)(a1 + 2432);
                    uint64_t v69 = v68 + ((unint64_t)v67 << 6);
                    float32x4_t v70 = vsubq_f32(*(float32x4_t *)(v69 + 16), v66);
                    float32x4_t v71 = vmulq_f32(v70, v70);
                    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
                    if (COERCE_FLOAT(*(void *)(a1 + 2360)) > vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32).f32[0])
                    {
                      float32x4_t v72 = (long long *)(v68 + ((unint64_t)(v55 - 1) << 6));
                      long long v73 = *v72;
                      long long v74 = v72[1];
                      long long v75 = v72[2];
                      *(_DWORD *)(v69 + 48) = *((_DWORD *)v72 + 12);
                      *(_OWORD *)(v69 + 16) = v74;
                      *(_OWORD *)(v69 + 32) = v75;
                      *(_OWORD *)uint64_t v69 = v73;
                      LODWORD(v55) = *v7 - 1;
                      *uint64_t v7 = v55;
                      --v67;
                    }
                    ++v67;
                  }
                  while (v67 < v55);
                }
              }
              while (v64 < v55);
            }
            uint64_t v76 = *(unsigned int *)(a1 + 2444);
            if (v76
              && (uint64_t v77 = (v76 - 1),
                  float32x4_t v78 = vmulq_f32(v147, *(float32x4_t *)(a1 + (v77 << 6))),
                  v78.i64[0] = vpaddq_f32(v78, v78).u64[0],
                  vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v78.f32).f32[0] > COERCE_FLOAT(*(void *)(a1 + 2352))))
            {
              float32x4_t v80 = (float32x2_t *)(a1 + (v77 << 6));
              float32x4_t v81 = (_DWORD *)&v80[6] + 1;
              unint64_t v82 = v80[6].u32[1];
              for (unint64_t i = v80[6].u32[0]; i < v82; ++i)
              {
                unsigned int v84 = v146;
                if (v146 < v55)
                {
                  do
                  {
                    uint64_t v85 = *(void *)(a1 + 2432);
                    float32x4_t v86 = (float32x4_t *)(v85 + ((unint64_t)v84 << 6));
                    float32x4_t v87 = (float32x4_t *)(v85 + (i << 6));
                    float32x4_t v88 = vsubq_f32(v86[1], v87[1]);
                    float32x4_t v89 = vmulq_f32(v88, v88);
                    v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
                    if (COERCE_FLOAT(*(void *)(a1 + 2360)) > vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32).f32[0])
                    {
                      if (v87[2].f32[3] > v86[2].f32[3])
                      {
                        float v90 = (long long *)(v85 + ((unint64_t)v84 << 6));
                        uint64_t v91 = v85 + (i << 6);
                        long long v92 = *v90;
                        long long v93 = v90[1];
                        long long v94 = v90[2];
                        *(_DWORD *)(v91 + 48) = *((_DWORD *)v90 + 12);
                        *(_OWORD *)(v91 + 16) = v93;
                        *(_OWORD *)(v91 + 32) = v94;
                        *(_OWORD *)uint64_t v91 = v92;
                        uint64_t v85 = *(void *)(a1 + 2432);
                        LODWORD(v55) = *(_DWORD *)(a1 + 2440);
                      }
                      char v95 = (long long *)(v85 + ((unint64_t)(v55 - 1) << 6));
                      uint64_t v96 = v85 + ((unint64_t)v84 << 6);
                      long long v97 = *v95;
                      long long v98 = v95[1];
                      long long v99 = v95[2];
                      *(_DWORD *)(v96 + 48) = *((_DWORD *)v95 + 12);
                      *(_OWORD *)(v96 + 16) = v98;
                      *(_OWORD *)(v96 + 32) = v99;
                      *(_OWORD *)uint64_t v96 = v97;
                      LODWORD(v55) = *v7 - 1;
                      *uint64_t v7 = v55;
                      --v84;
                    }
                    ++v84;
                  }
                  while (v84 < v55);
                  unint64_t v82 = *v81;
                }
              }
              *float32x4_t v81 = v55;
              v80[5] = vmin_f32(v80[5], v56);
            }
            else
            {
              unint64_t v79 = a1 + (v76 << 6);
              *(_DWORD *)(v79 + 48) = v146;
              *(_DWORD *)(v79 + 52) = v55;
              *(float32x2_t *)(v79 + 40) = v56;
              *(_DWORD *)(a1 + 2444) = v76 + 1;
              *(float32x4_t *)unint64_t v79 = v147;
              LODWORD(v55) = *(_DWORD *)(a1 + 2440);
            }
            if (v55 >= 0x10)
            {
              uint64_t v100 = *(unsigned int *)(a1 + 2444);
              if (v100 >= 2)
              {
                int v101 = 0;
                unsigned int v102 = -1;
                for (uint64_t j = 1; j != v100; ++j)
                {
                  unint64_t v104 = a1 + 8 * j;
                  uint64_t v105 = *(void *)(v104 + 2040);
                  uint64_t v106 = *(void *)(v104 + 2048);
                  if (COERCE_FLOAT(*(void *)(v105 + 40)) > COERCE_FLOAT(*(void *)(v106 + 40)))
                  {
                    *(void *)(v104 + 2040) = v106;
                    *(void *)(v104 + 2048) = v105;
                    if ((int)j - 2 >= 0)
                    {
                      unint64_t v107 = v138 + 8 * v102;
                      int v108 = v101;
                      do
                      {
                        uint64_t v110 = *(void *)(v107 - 8);
                        uint64_t v109 = *(void *)v107;
                        if (COERCE_FLOAT(*(void *)(*(void *)v107 + 40)) >= COERCE_FLOAT(*(void *)(v110 + 40))) {
                          break;
                        }
                        *(void *)unint64_t v107 = v110;
                        *(void *)(v107 - 8) = v109;
                        v107 -= 8;
                        --v108;
                      }
                      while (v108 > 0);
                    }
                  }
                  ++v102;
                  ++v101;
                }
              }
              if (v100)
              {
                uint64_t v111 = 0;
                for (uint64_t k = 0; k != v100; ++k)
                {
                  uint64_t v113 = (float32x4_t *)v139[k];
                  v113[1].i64[1] = (uint64_t)v113;
                  v113[2].i64[0] = (uint64_t)v113;
                  int v114 = v113[3].i32[1] - v113[3].i32[0];
                  v113[3].i32[2] = v114;
                  v113[1].i64[0] = 0;
                  uint64_t v115 = v111;
                  while (v115)
                  {
                    uint64_t v116 = *(void *)(v14 + v115);
                    float v117 = *(float32x4_t **)(v116 + 32);
                    float32x4_t v118 = vmulq_f32(*v113, *v117);
                    v118.i64[0] = vpaddq_f32(v118, v118).u64[0];
                    v115 -= 8;
                    if (vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32).f32[0] >= COERCE_FLOAT(*v9))
                    {
                      *(void *)(v116 + 16) = v113;
                      v117[1].i64[1] = (uint64_t)v113;
                      v113[2].i64[0] = (uint64_t)v117;
                      *(_DWORD *)(*(void *)(v116 + 32) + 56) += v114;
                      break;
                    }
                  }
                  v111 += 8;
                }
                uint64_t v119 = 0;
                uint64_t v120 = *(void *)(a1 + 2432);
                do
                {
                  uint64_t v121 = v139[v119];
                  if (v121) {
                    _ZF = *(void *)(v121 + 32) == v121;
                  }
                  else {
                    _ZF = 0;
                  }
                  if (_ZF)
                  {
                    while (*(void *)(v121 + 16))
                    {
                      uint64_t v123 = v121;
                      uint64_t v121 = *(void *)(v121 + 16);
                      unint64_t v124 = *(unsigned int *)(v123 + 48);
                      unint64_t v125 = *(unsigned int *)(v123 + 52);
                      if (v124 < v125)
                      {
                        unsigned int v126 = *(_DWORD *)(v121 + 52);
                        do
                        {
                          unsigned int v127 = *(_DWORD *)(v121 + 48);
                          if (v127 < v126)
                          {
                            do
                            {
                              uint64_t v128 = v120 + ((unint64_t)v127 << 6);
                              float32x4_t v129 = vsubq_f32(*(float32x4_t *)(v128 + 16), *(float32x4_t *)(v120 + (v124 << 6) + 16));
                              float32x4_t v130 = vmulq_f32(v129, v129);
                              v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
                              if (COERCE_FLOAT(*v8) > vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32).f32[0])
                              {
                                float v131 = (long long *)(v120 + ((unint64_t)(v126 - 1) << 6));
                                long long v132 = *v131;
                                long long v133 = v131[1];
                                long long v134 = v131[2];
                                *(_DWORD *)(v128 + 48) = *((_DWORD *)v131 + 12);
                                *(_OWORD *)(v128 + 16) = v133;
                                *(_OWORD *)(v128 + 32) = v134;
                                *(_OWORD *)uint64_t v128 = v132;
                                unsigned int v126 = *(_DWORD *)(v121 + 52) - 1;
                                *(_DWORD *)(v121 + 52) = v126;
                                --v127;
                              }
                              ++v127;
                            }
                            while (v127 < v126);
                            unint64_t v125 = *(unsigned int *)(v123 + 52);
                          }
                          ++v124;
                        }
                        while (v124 < v125);
                      }
                    }
                  }
                  ++v119;
                }
                while (v119 != v100);
                LODWORD(v55) = *(_DWORD *)(a1 + 2440);
                unsigned int v135 = *(_DWORD *)(a1 + 2444);
              }
              else
              {
                unsigned int v135 = 0;
              }
              physx::Gu::MultiplePersistentContactManifold::addManifoldContactPoints(*(void *)(a1 + 2336), *(void *)(a1 + 2432), v55, v139, v135, (uint64_t)v8, v9, 3);
              *(void *)(a1 + 2440) = 0;
              int64x2_t v136 = (int64x2_t)xmmword_234361D20;
              for (uint64_t m = 2048; m != 2304; m += 16)
              {
                *(int64x2_t *)(a1 + m) = vaddq_s64(vdupq_n_s64(a1), vshlq_n_s64(v136, 6uLL));
                int64x2_t v136 = vaddq_s64(v136, vdupq_n_s64(2uLL));
              }
            }
          }
        }
        uint64_t v6 = v148;
        uint64_t v5 = v149;
      }
      v3 += 36;
      ++v6;
      ++v5;
      --v2;
    }
    while (v2);
  }
}

uint64_t physx::Gu::PCMMeshContactGenerationCallback<physx::PCMCapsuleVsMeshContactGenerationCallback>::processHit(uint64_t a1, uint64_t a2, float32x2_t *a3, float *a4, float *a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 32))
  {
    float32x2_t v37 = *a3;
    float v9 = a3[1].f32[0];
    float v39 = *a4;
    *(void *)&long long v10 = *(void *)(a4 + 1);
    *((void *)&v10 + 1) = *(void *)a5;
    long long v40 = v10;
    float v11 = a5[2];
    uint64_t v12 = 2;
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    float v14 = *(float *)(v13 + 8);
    float v15 = a3->f32[0];
    float v16 = a3->f32[1];
    float v17 = *(float *)(v13 + 20);
    float v18 = a3[1].f32[0];
    float v19 = *(float *)(v13 + 32);
    float v9 = (float)((float)(a3->f32[0] * v14) + (float)(v16 * v17)) + (float)(v18 * v19);
    float v20 = *a4;
    float v21 = a4[1];
    float v22 = a4[2];
    BOOL v23 = *(unsigned char *)(v13 + 72) == 0;
    uint64_t v24 = 24;
    if (!*(unsigned char *)(v13 + 72)) {
      uint64_t v24 = 12;
    }
    float32x2_t v25 = (float32x2_t *)((char *)&v37 + v24);
    *(float *)((char *)&v37 + v24 + 8) = (float)((float)(v14 * *a4) + (float)(v17 * v21)) + (float)(v19 * v22);
    float v26 = *a5;
    float v27 = a5[1];
    float v28 = (float)(v14 * *a5) + (float)(v17 * v27);
    float v29 = a5[2];
    float v11 = v28 + (float)(v19 * v29);
    uint64_t v12 = 1;
    if (v23) {
      uint64_t v12 = 2;
    }
    float32x2_t v30 = *(float32x2_t *)v13;
    float32x2_t v31 = *(float32x2_t *)(v13 + 12);
    float32x2_t v32 = *(float32x2_t *)(v13 + 24);
    float32x2_t v37 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v13, v15), vmul_n_f32(v31, v16)), vmul_n_f32(v32, v18));
    *float32x2_t v25 = vadd_f32(vadd_f32(vmul_n_f32(v30, v20), vmul_n_f32(v31, v21)), vmul_n_f32(v32, v22));
    *(float32x2_t *)((char *)&v37 + 12 * v12) = vadd_f32(vadd_f32(vmul_n_f32(v30, v26), vmul_n_f32(v31, v27)), vmul_n_f32(v32, v29));
  }
  float v38 = v9;
  *((float *)&v37 + 3 * v12 + 2) = v11;
  uint64_t v33 = *(unsigned int *)(a2 + 16);
  uint64_t v34 = *(void *)(a1 + 24);
  if (v34) {
    char v35 = *(unsigned char *)(v34 + v33);
  }
  else {
    char v35 = 56;
  }
  if (*(_DWORD *)(a1 + 884) == 16)
  {
    physx::Gu::PCMMeshContactGeneration::processTriangleCache<16u,physx::Gu::PCMCapsuleVsMeshContactGeneration>(a1 + 896, a1 + 36);
    *(_DWORD *)(a1 + 884) = 0;
  }
  physx::Gu::TriangleCache<16u>::addTriangle(a1 + 36, (uint64_t)&v37, a7, v33, v35);
  return 1;
}

void physx::PCMCapsuleVsMeshContactGenerationCallback::~PCMCapsuleVsMeshContactGenerationCallback(physx::PCMCapsuleVsMeshContactGenerationCallback *this)
{
}

uint64_t physx::Gu::gjkPenetration<physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>,physx::Gu::LocalConvex<physx::Gu::ConvexHullNoScaleV>>(float32x4_t *a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, float32x4_t *a6, float32x4_t a7, float32x2_t a8, double a9, float32x4_t a10, int8x8_t a11)
{
  float v11 = a4;
  uint64_t v330 = *MEMORY[0x263EF8340];
  uint64_t v15 = a1->i64[1];
  float v16 = (const float *)(v15 + 20);
  float32x2_t v17 = vld1_dup_f32(v16);
  uint64_t v18 = *(void *)(a2 + 8);
  float v19 = (const float *)(v18 + 20);
  float32x2_t v20 = vld1_dup_f32(v19);
  float32x2_t v21 = vmin_f32(v17, v20);
  float32x2_t v22 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  float32x2_t v23 = vmul_f32(v21, v22);
  v21.i32[0] = *(_DWORD *)(v15 + 16);
  v22.i32[0] = *(_DWORD *)(v18 + 16);
  a10.i32[0] = -*(char *)(v15 + 32);
  a11.i32[0] = -*(char *)(v18 + 32);
  float32x2_t v24 = vadd_f32((float32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)v21), (float32x2_t)vand_s8(a11, (int8x8_t)v22));
  float32x4_t v315 = 0uLL;
  unsigned int v314 = 0;
  uint64_t v25 = *a5;
  __asm { FMOV            V10.2S, #1.0 }
  if (!*a5)
  {
    float32x4_t v52 = vmulq_f32(a7, a7);
    v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
    float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgtz_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), 0), (int8x16_t)a7, (int8x16_t)xmmword_23435FD50);
    float32x4_t v315 = v44;
    float32x4_t v53 = vmulq_f32(v44, v44);
    v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
    float32x2_t v54 = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32);
    float32x2_t v55 = vrsqrte_f32(v54);
    int v56 = 4;
    do
    {
      float32x2_t v55 = vmul_f32(v55, vrsqrts_f32(vmul_f32(v55, v55), v54));
      --v56;
    }
    while (v56);
    float32x2_t v57 = vmul_f32(v54, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v54), 0), (int8x8_t)_D10, (int8x8_t)v55));
    float32x2_t v58 = vrecpe_f32(v57);
    int v59 = 4;
    do
    {
      *(float32x2_t *)a10.f32 = vrecps_f32(v57, v58);
      float32x2_t v58 = vmul_f32(v58, *(float32x2_t *)a10.f32);
      --v59;
    }
    while (v59);
    float32x4_t v60 = vmulq_n_f32(v44, v58.f32[0]);
    v60.i32[3] = 0;
    float32x4_t v310 = v60;
    float32x2_t v61 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
    v62.i64[0] = -1;
    v62.i64[1] = -1;
    float32x4_t v63 = 0uLL;
    goto LABEL_54;
  }
  uint64_t v31 = 0;
  float32x2_t v32 = (float32x4_t *)a1[1].i64[0];
  uint64_t v33 = *(void *)(v15 + 160);
  uint64_t v34 = *(void *)(v18 + 160);
  do
  {
    unsigned int v35 = a3[v31];
    *(&v319 + v31) = v35;
    unsigned int v36 = a4[v31];
    *(&v317 + v31) = v36;
    float32x4_t v37 = *(float32x4_t *)(v33 + 12 * v35);
    float32x4_t v38 = vmulq_n_f32(*v32, v37.f32[0]);
    v38.i32[3] = 0;
    float32x4_t v39 = vmulq_lane_f32(v32[1], *(float32x2_t *)v37.f32, 1);
    v39.i32[3] = 0;
    float32x4_t v40 = vmulq_laneq_f32(v32[2], v37, 2);
    v40.i32[3] = 0;
    a10 = v32[3];
    float32x4_t v41 = vaddq_f32(vaddq_f32(v38, v39), v40);
    float32x4_t v42 = *(float32x4_t *)(v34 + 12 * v36);
    float32x4_t v43 = vaddq_f32(a10, v41);
    v42.i32[3] = 0;
    float32x4_t v44 = vsubq_f32(v43, v42);
    *(&v324 + v31) = (int8x16_t)v43;
    *(&v321 + v31) = (int8x16_t)v42;
    *(&v327 + v31++) = v44;
  }
  while (v25 != v31);
  unsigned int v314 = v25;
  switch(v31)
  {
    case 4:
      physx::Gu::closestPtPointTetrahedron(&v327, &v324, &v321, &v319, &v317, (int *)&v314);
      goto LABEL_49;
    case 3:
      unsigned int v314 = 3;
      float32x4_t v44 = v327;
      a10 = vsubq_f32(v328, v327);
      float32x4_t v64 = vsubq_f32(v329[0], v327);
      int8x8_t v66 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 4uLL), *(float32x2_t *)v64.f32);
      *(int8x8_t *)v65.f32 = vext_s8(v66, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL), *(float32x2_t *)v64.f32), *(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)), 4uLL);
      v66.i32[1] = 0;
      float32x2_t v67 = vpadd_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32), vmul_f32((float32x2_t)v66.u32[0], (float32x2_t)v66.u32[0]));
      float32x2_t v68 = vpadd_f32(v67, v67);
      if (v68.f32[0] > 0.00000011921)
      {
        if (v68.f32[0] == 0.0)
        {
          float32x4_t v44 = 0uLL;
        }
        else
        {
          *(int8x8_t *)&v65.u32[2] = v66;
          float32x2_t v69 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
          float32x2_t v70 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 8uLL).u64[0];
          float32x2_t v71 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 4uLL).u64[0];
          float32x2_t v72 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 4uLL).u64[0];
          int8x8_t v73 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v328.f32, v71), v72, *(float32x2_t *)v329[0].f32);
          *(int8x8_t *)v74.f32 = vext_s8(v73, (int8x8_t)vmls_f32(vmul_f32(v69, *(float32x2_t *)v329[0].f32), *(float32x2_t *)v328.f32, v70), 4uLL);
          v74.i64[1] = v73.u32[0];
          float32x2_t v75 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
          float32x2_t v76 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 4uLL).u64[0];
          int8x8_t v77 = (int8x8_t)vmls_f32(vmul_f32(v76, *(float32x2_t *)v329[0].f32), v71, *(float32x2_t *)v327.f32);
          *(int8x8_t *)v78.f32 = vext_s8(v77, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v70), *(float32x2_t *)v329[0].f32, v75), 4uLL);
          v78.i64[1] = v77.u32[0];
          int8x8_t v79 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v72), v76, *(float32x2_t *)v328.f32);
          *(int8x8_t *)v80.f32 = vext_s8(v79, (int8x8_t)vmls_f32(vmul_f32(v75, *(float32x2_t *)v328.f32), *(float32x2_t *)v327.f32, v69), 4uLL);
          v80.i64[1] = v79.u32[0];
          float32x4_t v81 = vmulq_f32(v74, v65);
          v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
          float32x2_t v82 = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32);
          float32x4_t v83 = vmulq_f32(v78, v65);
          v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
          float32x2_t v84 = vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32);
          float32x4_t v85 = vmulq_f32(v80, v65);
          v85.i64[0] = vpaddq_f32(v85, v85).u64[0];
          float32x2_t v86 = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v84), (int8x8_t)vcgez_f32(v82)), (int8x8_t)vcgez_f32(v86)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
          {
            int8x16_t v112 = (int8x16_t)vmulq_f32(v327, v65);
            float32x2_t v113 = (float32x2_t)vextq_s8(v112, v112, 8uLL).u64[0];
            float32x2_t v114 = vrecpe_f32(v68);
            int v115 = 4;
            do
            {
              float32x2_t v114 = vmul_f32(v114, vrecps_f32(v68, v114));
              --v115;
            }
            while (v115);
            float32x2_t v116 = vpadd_f32(*(float32x2_t *)v112.i8, v113);
            float32x4_t v44 = vmulq_n_f32(v65, vmul_f32(v114, vpadd_f32(v116, v116)).f32[0]);
            v44.i32[3] = 0;
          }
          else
          {
            float32x4_t v87 = vnegq_f32(v327);
            v87.i32[3] = 0;
            float32x4_t v88 = vnegq_f32(v328);
            v88.i32[3] = 0;
            float32x4_t v89 = vmulq_f32(v87, a10);
            v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
            float32x2_t v90 = vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32);
            float32x4_t v91 = vmulq_f32(a10, v88);
            v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
            float32x2_t v92 = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v90), (int8x8_t)vclez_f32(v92)), (int8x8_t)vclez_f32(v86)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
            {
              float32x2_t v117 = vsub_f32(v90, v92);
              float32x2_t v118 = vrecpe_f32(v117);
              int v119 = 4;
              do
              {
                float32x2_t v118 = vmul_f32(v118, vrecps_f32(v117, v118));
                --v119;
              }
              while (v119);
              uint64_t v104 = 0;
              float32x4_t v44 = vmlaq_n_f32(v327, a10, vmul_f32(v90, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v117), (float32x2_t)0x3400000034000000), (int8x8_t)v118, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              unsigned int v120 = 2;
              uint64_t v103 = 1;
            }
            else
            {
              float32x4_t v93 = vnegq_f32(v329[0]);
              v93.i32[3] = 0;
              float32x4_t v94 = vmulq_f32(v88, v64);
              v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
              float32x2_t v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
              float32x4_t v96 = vmulq_f32(a10, v93);
              v96.i64[0] = vpaddq_f32(v96, v96).u64[0];
              float32x2_t v97 = vpadd_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v96.f32);
              float32x4_t v98 = vmulq_f32(v64, v93);
              v98.i64[0] = vpaddq_f32(v98, v98).u64[0];
              float32x2_t v99 = vpadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32);
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v95, v92), (int8x8_t)vcge_f32(v97, v99)), (int8x8_t)vclez_f32(v82)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
              {
                float32x2_t v121 = vsub_f32(v95, v92);
                float32x2_t v122 = vadd_f32(v121, vsub_f32(v97, v99));
                float32x2_t v123 = vrecpe_f32(v122);
                int v124 = 4;
                do
                {
                  float32x2_t v123 = vmul_f32(v123, vrecps_f32(v122, v123));
                  --v124;
                }
                while (v124);
                int8x16_t v125 = (int8x16_t)vmlaq_n_f32(v328, vsubq_f32(v329[0], v328), vmul_f32(v121, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v122), (float32x2_t)0x3400000034000000), (int8x8_t)v123, 0)).f32[0]);
                v125.i64[1] = vextq_s8(v125, v125, 8uLL).u32[0];
                unsigned int v120 = 2;
                uint64_t v104 = 1;
                uint64_t v103 = 2;
                float32x4_t v44 = (float32x4_t)v125;
              }
              else
              {
                float32x4_t v100 = vmulq_f32(v87, v64);
                int32x4_t v101 = (int32x4_t)vpaddq_f32(v100, v100);
                *(float32x2_t *)v101.i8 = vpadd_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v101.i8);
                if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v99)), (int8x8_t)vclez_f32(v84)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
                {
                  float32x2_t v126 = vsub_f32(*(float32x2_t *)v101.i8, v99);
                  float32x2_t v127 = vrecpe_f32(v126);
                  int v128 = 4;
                  do
                  {
                    float32x2_t v127 = vmul_f32(v127, vrecps_f32(v126, v127));
                    --v128;
                  }
                  while (v128);
                  uint64_t v104 = 0;
                  float32x4_t v44 = vmlaq_n_f32(v327, v64, vmul_f32(*(float32x2_t *)v101.i8, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v126), (float32x2_t)0x3400000034000000), (int8x8_t)v127, 0)).f32[0]);
                  v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
                  uint64_t v103 = 2;
                }
                else if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(*(float32x2_t *)v101.i8), (int8x8_t)vclez_f32(v90)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
                {
                  uint64_t v104 = 0;
                  uint64_t v103 = 1;
                }
                else
                {
                  *(int32x2_t *)v101.i8 = vcge_f32(v92, v95);
                  *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8(*(int8x8_t *)v101.i8, (int8x8_t)vcgez_f32(v92)), 0);
                  *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                  v101.i32[0] = -1;
                  __int32 v102 = v44.i32[0];
                  float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v101), 0), (int8x16_t)v328, (int8x16_t)v329[0]);
                  uint64_t v103 = 1;
                  if (v102 == -1) {
                    uint64_t v104 = 1;
                  }
                  else {
                    uint64_t v104 = 2;
                  }
                }
                unsigned int v120 = v103;
              }
            }
            float32x4_t v129 = *(&v327 + v104);
            float32x4_t v130 = *(&v327 + v103);
            a10 = *((float32x4_t *)&v324 + v104);
            float32x4_t v131 = *((float32x4_t *)&v324 + v103);
            float32x4_t v132 = *((float32x4_t *)&v321 + v104);
            float32x4_t v133 = *((float32x4_t *)&v321 + v103);
            int v134 = *(&v319 + v104);
            int v135 = *(&v319 + v103);
            int v136 = *(&v317 + v104);
            int v137 = *(&v317 + v103);
            float32x4_t v327 = v129;
            float32x4_t v328 = v130;
            int8x16_t v324 = (int8x16_t)a10;
            float32x4_t v325 = v131;
            int8x16_t v321 = (int8x16_t)v132;
            float32x4_t v322 = v133;
            int v319 = v134;
            int v320 = v135;
            int v317 = v136;
            int v318 = v137;
            unsigned int v314 = v120;
          }
        }
        goto LABEL_49;
      }
      unsigned int v314 = 2;
      float32x4_t v105 = vmulq_f32(a10, a10);
      v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
      float32x2_t v106 = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v106), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        float32x4_t v107 = vnegq_f32(v327);
        v107.i32[3] = 0;
        float32x4_t v108 = vmulq_f32(v107, a10);
        v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
        float32x2_t v109 = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32);
        float32x2_t v110 = vrecpe_f32(v106);
        int v111 = 4;
        do
        {
          float32x2_t v110 = vmul_f32(v110, vrecps_f32(v106, v110));
          --v111;
        }
        while (v111);
        float32x4_t v44 = vmlaq_n_f32(v327, a10, vmax_f32(vmin_f32(vmul_f32(v109, v110), _D10), 0).f32[0]);
        goto LABEL_31;
      }
      break;
    case 2:
      float32x4_t v44 = v327;
      float32x4_t v45 = vsubq_f32(v328, v327);
      float32x4_t v46 = vmulq_f32(v45, v45);
      v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
      float32x2_t v47 = vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v47), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        float32x4_t v48 = vnegq_f32(v327);
        v48.i32[3] = 0;
        float32x4_t v49 = vmulq_f32(v48, v45);
        a10 = vpaddq_f32(v49, v49);
        *(float32x2_t *)a10.f32 = vpadd_f32(*(float32x2_t *)a10.f32, *(float32x2_t *)a10.f32);
        float32x2_t v50 = vrecpe_f32(v47);
        int v51 = 4;
        do
        {
          float32x2_t v50 = vmul_f32(v50, vrecps_f32(v47, v50));
          --v51;
        }
        while (v51);
        float32x4_t v44 = vmlaq_n_f32(v327, v45, vmax_f32(vmin_f32(vmul_f32(*(float32x2_t *)a10.f32, v50), _D10), 0).f32[0]);
LABEL_31:
        v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
        goto LABEL_49;
      }
      break;
    default:
      goto LABEL_49;
  }
  unsigned int v314 = 1;
LABEL_49:
  float32x4_t v315 = v44;
  float32x4_t v138 = vmulq_f32(v44, v44);
  v138.i64[0] = vpaddq_f32(v138, v138).u64[0];
  float32x2_t v139 = vpadd_f32(*(float32x2_t *)v138.f32, *(float32x2_t *)v138.f32);
  float32x2_t v140 = vrsqrte_f32(v139);
  int v141 = 4;
  do
  {
    float32x2_t v140 = vmul_f32(v140, vrsqrts_f32(vmul_f32(v140, v140), v139));
    --v141;
  }
  while (v141);
  float32x2_t v61 = vmul_f32(v139, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v139), 0), (int8x8_t)_D10, (int8x8_t)v140));
  float32x2_t v142 = vrecpe_f32(v61);
  int v143 = 4;
  do
  {
    *(float32x2_t *)a10.f32 = vrecps_f32(v61, v142);
    float32x2_t v142 = vmul_f32(v142, *(float32x2_t *)a10.f32);
    --v143;
  }
  while (v143);
  float32x4_t v144 = vmulq_n_f32(v44, v142.f32[0]);
  v144.i32[3] = 0;
  float32x4_t v310 = v144;
  int32x4_t v62 = vdupq_lane_s32(vcgt_f32(v61, v23), 0);
  float32x4_t v63 = v44;
LABEL_54:
  float32x2_t v145 = vadd_f32(v24, a8);
  a10.i32[0] = -1;
  int32x4_t v304 = (int32x4_t)a10;
  v146.i64[0] = -1;
  v146.i64[1] = -1;
  for (float32x2_t i = v61; ; float32x2_t i = v158)
  {
    float32x4_t v148 = v44;
    v149.i64[0] = -1;
    v149.i64[1] = -1;
    *(int16x4_t *)v149.i8 = vmovn_s32(vceqq_s32(v62, v149));
    if (vuzp1_s8(*(int8x8_t *)v149.i8, *(int8x8_t *)v149.i8).u32[0] != -1) {
      break;
    }
    float32x4_t v308 = v148;
    float32x4_t v150 = vnegq_f32(v148);
    v150.i32[3] = 0;
    float32x2_t v311 = v61;
    float32x4_t v313 = v150;
    *(double *)v151.i64 = physx::Gu::RelativeConvex<physx::Gu::ConvexHullNoScaleV>::support(a1, (float32x2_t *)&v313, &v319 + v314);
    float32x4_t v309 = v151;
    uint64_t v152 = v314;
    uint64_t v153 = *(void *)(a2 + 8);
    int v154 = physx::Gu::ConvexHullV::supportVertexIndex(v153, &v315);
    *(&v317 + v152) = v154;
    float32x4_t v155 = *(float32x4_t *)(*(void *)(v153 + 160) + 12 * v154);
    v155.i32[3] = 0;
    float32x4_t v44 = vsubq_f32(v309, v155);
    float32x4_t v156 = vmulq_f32(v310, v44);
    v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
    float32x2_t v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
    if ((vmvn_s8((int8x8_t)vcgt_f32(v157, v145)).u8[0] & 1) == 0)
    {
      if (a3)
      {
        uint64_t v258 = v314;
        *a5 = v314;
        if (v258)
        {
          float32x4_t v259 = &v317;
          float32x4_t v260 = &v319;
          do
          {
            int v261 = *v260++;
            *a3++ = v261;
            int v262 = *v259++;
            *v11++ = v262;
            --v258;
          }
          while (v258);
        }
      }
      return 0;
    }
    float32x2_t v158 = v311;
    uint64_t v159 = v314;
    if (v157.f32[0] > (float)(0.99977 * v311.f32[0]))
    {
      if (!a3) {
        goto LABEL_121;
      }
      *a5 = v314;
      if (v159)
      {
        float32x4_t v263 = &v317;
        float32x4_t v264 = &v319;
        uint64_t v265 = v159;
        do
        {
          int v266 = *v264++;
          *a3++ = v266;
          int v267 = *v263++;
          *v11++ = v267;
          --v265;
        }
        while (v265);
LABEL_121:
        float32x4_t v268 = a6;
        a6[2] = v310;
        switch(v159)
        {
          case 3:
            v313.i64[0] = 0;
            float32x2_t v316 = 0;
            physx::Gu::barycentricCoordinates(&v315, &v327, &v328, v329, (float32x2_t *)&v313, &v316);
            float32x2_t v158 = v311;
            float32x4_t v276 = vmulq_n_f32(vsubq_f32(v325, (float32x4_t)v324), v313.f32[0]);
            v276.i32[3] = 0;
            float32x4_t v277 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v324), v316.f32[0]);
            v277.i32[3] = 0;
            int8x16_t v269 = (int8x16_t)vaddq_f32((float32x4_t)v324, vaddq_f32(v276, v277));
            float32x4_t v278 = vmulq_n_f32(vsubq_f32(v322, (float32x4_t)v321), v313.f32[0]);
            v278.i32[3] = 0;
            float32x4_t v279 = vmulq_n_f32(vsubq_f32(v323, (float32x4_t)v321), v316.f32[0]);
            v279.i32[3] = 0;
            int8x16_t v270 = (int8x16_t)vaddq_f32((float32x4_t)v321, vaddq_f32(v278, v279));
            break;
          case 2:
            float32x4_t v280 = vsubq_f32(v327, v315);
            float32x4_t v281 = vsubq_f32(vsubq_f32(v328, v315), v280);
            float32x4_t v282 = vmulq_f32(v281, v281);
            v282.i64[0] = vpaddq_f32(v282, v282).u64[0];
            float32x2_t v283 = vpadd_f32(*(float32x2_t *)v282.f32, *(float32x2_t *)v282.f32);
            float32x2_t v284 = vrecpe_f32(v283);
            int v285 = 4;
            do
            {
              float32x2_t v284 = vmul_f32(v284, vrecps_f32(v283, v284));
              --v285;
            }
            while (v285);
            float32x4_t v286 = vnegq_f32(v280);
            v286.i32[3] = 0;
            float32x4_t v287 = vmulq_f32(v286, v281);
            v287.i64[0] = vpaddq_f32(v287, v287).u64[0];
            v286.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v283), (int8x8_t)v284, 0), vpadd_f32(*(float32x2_t *)v287.f32, *(float32x2_t *)v287.f32)).u32[0];
            int8x16_t v269 = (int8x16_t)vmlaq_n_f32((float32x4_t)v324, vsubq_f32(v325, (float32x4_t)v324), v286.f32[0]);
            v269.i64[1] = vextq_s8(v269, v269, 8uLL).u32[0];
            int8x16_t v270 = (int8x16_t)vmlaq_n_f32((float32x4_t)v321, vsubq_f32(v322, (float32x4_t)v321), v286.f32[0]);
            v270.i64[1] = vextq_s8(v270, v270, 8uLL).u32[0];
            break;
          case 1:
            int8x16_t v269 = v324;
            uint64_t result = 2;
            int8x16_t v270 = v321;
LABEL_147:
            *float32x4_t v268 = (float32x4_t)v269;
            v268[1] = (float32x4_t)v270;
            *(float32x2_t *)v268[4].f32 = v158;
            return result;
          default:
LABEL_134:
            uint64_t result = 2;
            int8x16_t v269 = 0uLL;
            int8x16_t v270 = 0uLL;
            goto LABEL_147;
        }
        uint64_t result = 2;
        goto LABEL_147;
      }
      float32x4_t v268 = a6;
      a6[2] = v310;
      goto LABEL_134;
    }
    *(&v324 + v314) = (int8x16_t)v309;
    *(&v321 + v159) = (int8x16_t)v155;
    unsigned int v314 = v159 + 1;
    *(&v327 + v159) = v44;
    if (v159 == 3)
    {
      physx::Gu::closestPtPointTetrahedron(&v327, &v324, &v321, &v319, &v317, (int *)&v314);
      float32x2_t v158 = v311;
LABEL_66:
      float32x4_t v63 = v308;
      goto LABEL_101;
    }
    if (v159 == 2)
    {
      float32x4_t v44 = v327;
      float32x4_t v168 = vsubq_f32(v328, v327);
      float32x4_t v169 = vsubq_f32(v329[0], v327);
      int8x8_t v171 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v168.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 4uLL), *(float32x2_t *)v169.f32);
      *(int8x8_t *)v170.f32 = vext_s8(v171, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL), *(float32x2_t *)v169.f32), *(float32x2_t *)v168.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL)), 4uLL);
      v171.i32[1] = 0;
      unsigned int v314 = 3;
      float32x2_t v172 = vpadd_f32(vmul_f32(*(float32x2_t *)v170.f32, *(float32x2_t *)v170.f32), vmul_f32((float32x2_t)v171.u32[0], (float32x2_t)v171.u32[0]));
      float32x2_t v173 = vpadd_f32(v172, v172);
      if (v173.f32[0] <= 0.00000011921)
      {
        unsigned int v314 = 2;
        float32x4_t v210 = vmulq_f32(v168, v168);
        v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
        float32x2_t v211 = vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v211), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
        {
          float32x4_t v212 = vnegq_f32(v327);
          v212.i32[3] = 0;
          float32x4_t v213 = vmulq_f32(v212, v168);
          v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
          float32x2_t v214 = vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32);
          float32x2_t v215 = vrecpe_f32(v211);
          int v216 = 4;
          float32x4_t v63 = v308;
          do
          {
            float32x2_t v215 = vmul_f32(v215, vrecps_f32(v211, v215));
            --v216;
          }
          while (v216);
          float32x4_t v44 = vmlaq_n_f32(v327, v168, vmax_f32(vmin_f32(vmul_f32(v214, v215), _D10), 0).f32[0]);
LABEL_81:
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          goto LABEL_101;
        }
        unsigned int v314 = 1;
        goto LABEL_66;
      }
      if (v173.f32[0] == 0.0)
      {
        float32x4_t v44 = 0uLL;
        goto LABEL_66;
      }
      *(int8x8_t *)&v170.u32[2] = v171;
      float32x2_t v174 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
      float32x2_t v175 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 8uLL).u64[0];
      float32x2_t v176 = (float32x2_t)vextq_s8((int8x16_t)v329[0], (int8x16_t)v329[0], 4uLL).u64[0];
      float32x2_t v177 = (float32x2_t)vextq_s8((int8x16_t)v328, (int8x16_t)v328, 4uLL).u64[0];
      int8x8_t v178 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v328.f32, v176), v177, *(float32x2_t *)v329[0].f32);
      *(int8x8_t *)v179.f32 = vext_s8(v178, (int8x8_t)vmls_f32(vmul_f32(v174, *(float32x2_t *)v329[0].f32), *(float32x2_t *)v328.f32, v175), 4uLL);
      v179.i64[1] = v178.u32[0];
      float32x2_t v180 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL).u64[0];
      float32x2_t v181 = (float32x2_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 4uLL).u64[0];
      int8x8_t v182 = (int8x8_t)vmls_f32(vmul_f32(v181, *(float32x2_t *)v329[0].f32), v176, *(float32x2_t *)v327.f32);
      *(int8x8_t *)v183.f32 = vext_s8(v182, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v175), *(float32x2_t *)v329[0].f32, v180), 4uLL);
      v183.i64[1] = v182.u32[0];
      int8x8_t v184 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v327.f32, v177), v181, *(float32x2_t *)v328.f32);
      *(int8x8_t *)v185.f32 = vext_s8(v184, (int8x8_t)vmls_f32(vmul_f32(v180, *(float32x2_t *)v328.f32), *(float32x2_t *)v327.f32, v174), 4uLL);
      v185.i64[1] = v184.u32[0];
      float32x4_t v186 = vmulq_f32(v179, v170);
      v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
      float32x2_t v187 = vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32);
      float32x4_t v188 = vmulq_f32(v183, v170);
      v188.i64[0] = vpaddq_f32(v188, v188).u64[0];
      float32x2_t v189 = vpadd_f32(*(float32x2_t *)v188.f32, *(float32x2_t *)v188.f32);
      float32x4_t v190 = vmulq_f32(v185, v170);
      v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
      float32x2_t v191 = vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32);
      if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v189), (int8x8_t)vcgez_f32(v187)), (int8x8_t)vcgez_f32(v191)), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
      {
        float32x4_t v192 = vnegq_f32(v327);
        v192.i32[3] = 0;
        float32x4_t v193 = vnegq_f32(v328);
        v193.i32[3] = 0;
        float32x4_t v194 = vmulq_f32(v192, v168);
        v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
        float32x2_t v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
        float32x4_t v196 = vmulq_f32(v168, v193);
        v196.i64[0] = vpaddq_f32(v196, v196).u64[0];
        float32x2_t v197 = vpadd_f32(*(float32x2_t *)v196.f32, *(float32x2_t *)v196.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v195), (int8x8_t)vclez_f32(v197)), (int8x8_t)vclez_f32(v191)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
        {
          float32x2_t v222 = vsub_f32(v195, v197);
          float32x2_t v223 = vrecpe_f32(v222);
          int v224 = 4;
          do
          {
            float32x2_t v223 = vmul_f32(v223, vrecps_f32(v222, v223));
            --v224;
          }
          while (v224);
          uint64_t v209 = 0;
          float32x4_t v44 = vmlaq_n_f32(v327, v168, vmul_f32(v195, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v222), (float32x2_t)0x3400000034000000), (int8x8_t)v223, 0)).f32[0]);
          v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
          unsigned int v225 = 2;
          uint64_t v208 = 1;
        }
        else
        {
          float32x4_t v198 = vnegq_f32(v329[0]);
          v198.i32[3] = 0;
          float32x4_t v199 = vmulq_f32(v193, v169);
          v199.i64[0] = vpaddq_f32(v199, v199).u64[0];
          float32x2_t v200 = vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32);
          float32x4_t v201 = vmulq_f32(v168, v198);
          v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
          float32x2_t v202 = vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32);
          float32x4_t v203 = vmulq_f32(v169, v198);
          v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
          float32x2_t v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
          if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcge_f32(v200, v197), (int8x8_t)vcge_f32(v202, v204)), (int8x8_t)vclez_f32(v187)), 0), *(int8x8_t *)v327.f32).u32[0] != -1)
          {
            float32x4_t v205 = vmulq_f32(v192, v169);
            v205.i64[0] = vpaddq_f32(v205, v205).u64[0];
            float32x2_t v206 = vpadd_f32(*(float32x2_t *)v205.f32, *(float32x2_t *)v205.f32);
            if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8(vand_s8((int8x8_t)vcgez_f32(v206), (int8x8_t)vclez_f32(v204)), (int8x8_t)vclez_f32(v189)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
            {
              float32x2_t v231 = vsub_f32(v206, v204);
              float32x2_t v232 = vrecpe_f32(v231);
              int v233 = 4;
              float32x4_t v63 = v308;
              do
              {
                float32x2_t v232 = vmul_f32(v232, vrecps_f32(v231, v232));
                --v233;
              }
              while (v233);
              uint64_t v209 = 0;
              float32x4_t v44 = vmlaq_n_f32(v327, v169, vmul_f32(v206, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v231), (float32x2_t)0x3400000034000000), (int8x8_t)v232, 0)).f32[0]);
              v44.i64[1] = vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL).u32[0];
              uint64_t v208 = 2;
              unsigned int v225 = 2;
            }
            else
            {
              float32x4_t v63 = v308;
              if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vclez_f32(v206), (int8x8_t)vclez_f32(v195)), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
              {
                uint64_t v209 = 0;
                uint64_t v208 = 1;
              }
              else
              {
                *(int16x4_t *)v44.f32 = vdup_lane_s16((int16x4_t)vand_s8((int8x8_t)vcge_f32(v197, v200), (int8x8_t)vcgez_f32(v197)), 0);
                *(int8x8_t *)v44.f32 = vuzp1_s8(*(int8x8_t *)v44.f32, *(int8x8_t *)v44.f32);
                __int32 v207 = v44.i32[0];
                float32x4_t v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v44, v304), 0), (int8x16_t)v328, (int8x16_t)v329[0]);
                uint64_t v208 = 1;
                if (v207 == -1) {
                  uint64_t v209 = 1;
                }
                else {
                  uint64_t v209 = 2;
                }
              }
              unsigned int v225 = 1;
            }
            goto LABEL_100;
          }
          float32x2_t v226 = vsub_f32(v200, v197);
          float32x2_t v227 = vadd_f32(v226, vsub_f32(v202, v204));
          float32x2_t v228 = vrecpe_f32(v227);
          int v229 = 4;
          do
          {
            float32x2_t v228 = vmul_f32(v228, vrecps_f32(v227, v228));
            --v229;
          }
          while (v229);
          int8x16_t v230 = (int8x16_t)vmlaq_n_f32(v328, vsubq_f32(v329[0], v328), vmul_f32(v226, (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(vabs_f32(v227), (float32x2_t)0x3400000034000000), (int8x8_t)v228, 0)).f32[0]);
          v230.i64[1] = vextq_s8(v230, v230, 8uLL).u32[0];
          uint64_t v208 = 2;
          float32x4_t v44 = (float32x4_t)v230;
          uint64_t v209 = 1;
          unsigned int v225 = 2;
        }
        float32x4_t v63 = v308;
LABEL_100:
        float32x4_t v234 = *(&v327 + v209);
        float32x4_t v235 = *(&v327 + v208);
        float32x4_t v236 = *((float32x4_t *)&v324 + v209);
        float32x4_t v237 = *((float32x4_t *)&v324 + v208);
        float32x4_t v238 = *((float32x4_t *)&v321 + v209);
        float32x4_t v239 = *((float32x4_t *)&v321 + v208);
        int v240 = *(&v319 + v209);
        int v241 = *(&v319 + v208);
        int v242 = *(&v317 + v209);
        int v243 = *(&v317 + v208);
        float32x4_t v327 = v234;
        float32x4_t v328 = v235;
        int8x16_t v324 = (int8x16_t)v236;
        float32x4_t v325 = v237;
        int8x16_t v321 = (int8x16_t)v238;
        float32x4_t v322 = v239;
        int v319 = v240;
        int v320 = v241;
        int v317 = v242;
        int v318 = v243;
        unsigned int v314 = v225;
        goto LABEL_101;
      }
      int8x16_t v217 = (int8x16_t)vmulq_f32(v327, v170);
      float32x2_t v218 = (float32x2_t)vextq_s8(v217, v217, 8uLL).u64[0];
      float32x2_t v219 = vrecpe_f32(v173);
      int v220 = 4;
      float32x4_t v63 = v308;
      do
      {
        float32x2_t v219 = vmul_f32(v219, vrecps_f32(v173, v219));
        --v220;
      }
      while (v220);
      float32x2_t v221 = vpadd_f32(*(float32x2_t *)v217.i8, v218);
      float32x4_t v44 = vmulq_n_f32(v170, vmul_f32(v219, vpadd_f32(v221, v221)).f32[0]);
      v44.i32[3] = 0;
    }
    else
    {
      float32x4_t v63 = v308;
      if (v159 == 1)
      {
        float32x4_t v44 = v327;
        float32x4_t v160 = vsubq_f32(v328, v327);
        float32x4_t v161 = vmulq_f32(v160, v160);
        v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
        float32x2_t v162 = vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32);
        if (vuzp1_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcge_f32((float32x2_t)0x3400000034000000, v162), 0), *(int8x8_t *)v327.f32).u32[0] == -1)
        {
          unsigned int v314 = 1;
          goto LABEL_101;
        }
        float32x4_t v163 = vnegq_f32(v327);
        v163.i32[3] = 0;
        float32x4_t v164 = vmulq_f32(v163, v160);
        v164.i64[0] = vpaddq_f32(v164, v164).u64[0];
        float32x2_t v165 = vpadd_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v164.f32);
        float32x2_t v166 = vrecpe_f32(v162);
        int v167 = 4;
        do
        {
          float32x2_t v166 = vmul_f32(v166, vrecps_f32(v162, v166));
          --v167;
        }
        while (v167);
        float32x4_t v44 = vmlaq_n_f32(v327, v160, vmax_f32(vmin_f32(vmul_f32(v165, v166), _D10), 0).f32[0]);
        goto LABEL_81;
      }
    }
LABEL_101:
    float32x4_t v315 = v44;
    float32x4_t v244 = vmulq_f32(v44, v44);
    v244.i64[0] = vpaddq_f32(v244, v244).u64[0];
    float32x2_t v245 = vpadd_f32(*(float32x2_t *)v244.f32, *(float32x2_t *)v244.f32);
    float32x2_t v246 = vrsqrte_f32(v245);
    int v247 = 4;
    do
    {
      float32x2_t v246 = vmul_f32(v246, vrsqrts_f32(vmul_f32(v246, v246), v245));
      --v247;
    }
    while (v247);
    float32x2_t v61 = vmul_f32(v245, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v245), 0), (int8x8_t)_D10, (int8x8_t)v246));
    float32x2_t v248 = vrecpe_f32(v61);
    int v249 = 4;
    do
    {
      float32x2_t v248 = vmul_f32(v248, vrecps_f32(v61, v248));
      --v249;
    }
    while (v249);
    float32x4_t v250 = vmulq_n_f32(v44, v248.f32[0]);
    v250.i32[3] = 0;
    float32x4_t v310 = v250;
    *(int32x2_t *)v250.f32 = vcgt_f32(v158, v61);
    int32x4_t v146 = vdupq_lane_s32(*(int32x2_t *)v250.f32, 0);
    int32x4_t v62 = vdupq_lane_s32((int32x2_t)vand_s8((int8x8_t)vcgt_f32(v61, v23), *(int8x8_t *)v250.f32), 0);
  }
  int8x8_t v251 = (int8x8_t)vmovn_s32(vceqzq_s32(v146));
  uint64_t v252 = v314;
  if (vuzp1_s8(v251, v251).u32[0] == -1)
  {
    if (a3)
    {
      uint64_t v271 = v314 - 1;
      *a5 = v314 - 1;
      if (v252 == 1)
      {
LABEL_132:
        int8x16_t v269 = v324;
        int8x16_t v270 = v321;
        goto LABEL_144;
      }
      float32x4_t v272 = &v317;
      float32x4_t v273 = &v319;
      do
      {
        int v274 = *v273++;
        *a3++ = v274;
        int v275 = *v272++;
        *v11++ = v275;
        --v271;
      }
      while (v271);
    }
    float32x4_t v315 = v63;
    if (v252 == 3)
    {
      v313.i64[0] = 0;
      float32x2_t v316 = 0;
      float32x4_t v312 = v63;
      physx::Gu::barycentricCoordinates(&v315, &v327, &v328, v329, (float32x2_t *)&v313, &v316);
      float32x4_t v288 = vmulq_n_f32(vsubq_f32(v325, (float32x4_t)v324), v313.f32[0]);
      v288.i32[3] = 0;
      float32x4_t v289 = vmulq_n_f32(vsubq_f32(v326, (float32x4_t)v324), v316.f32[0]);
      v289.i32[3] = 0;
      float32x4_t v290 = vaddq_f32(v288, v289);
      float32x4_t v291 = vmulq_n_f32(vsubq_f32(v322, (float32x4_t)v321), v313.f32[0]);
      v291.i32[3] = 0;
      int8x16_t v269 = (int8x16_t)vaddq_f32((float32x4_t)v324, v290);
      float32x4_t v292 = vmulq_n_f32(vsubq_f32(v323, (float32x4_t)v321), v316.f32[0]);
      float32x4_t v63 = v312;
      v292.i32[3] = 0;
      int8x16_t v270 = (int8x16_t)vaddq_f32((float32x4_t)v321, vaddq_f32(v291, v292));
    }
    else
    {
      if (v252 == 2)
      {
        float32x4_t v293 = vsubq_f32(v327, v63);
        float32x4_t v294 = vsubq_f32(vsubq_f32(v328, v63), v293);
        float32x4_t v295 = vmulq_f32(v294, v294);
        v295.i64[0] = vpaddq_f32(v295, v295).u64[0];
        float32x2_t v296 = vpadd_f32(*(float32x2_t *)v295.f32, *(float32x2_t *)v295.f32);
        float32x2_t v297 = vrecpe_f32(v296);
        int v298 = 4;
        do
        {
          float32x2_t v297 = vmul_f32(v297, vrecps_f32(v296, v297));
          --v298;
        }
        while (v298);
        float32x4_t v299 = vnegq_f32(v293);
        v299.i32[3] = 0;
        float32x4_t v300 = vmulq_f32(v299, v294);
        v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
        v299.i32[0] = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcgtz_f32(v296), (int8x8_t)v297, 0), vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32)).u32[0];
        int8x16_t v269 = (int8x16_t)vmlaq_n_f32((float32x4_t)v324, vsubq_f32(v325, (float32x4_t)v324), v299.f32[0]);
        v269.i64[1] = vextq_s8(v269, v269, 8uLL).u32[0];
        int8x16_t v270 = (int8x16_t)vmlaq_n_f32((float32x4_t)v321, vsubq_f32(v322, (float32x4_t)v321), v299.f32[0]);
        v270.i64[1] = vextq_s8(v270, v270, 8uLL).u32[0];
        goto LABEL_144;
      }
      int8x16_t v269 = 0uLL;
      int8x16_t v270 = 0uLL;
      if (v252 == 1) {
        goto LABEL_132;
      }
    }
LABEL_144:
    float32x2_t v301 = vrecpe_f32(i);
    int v302 = 4;
    do
    {
      float32x2_t v301 = vmul_f32(v301, vrecps_f32(i, v301));
      --v302;
    }
    while (v302);
    float32x4_t v303 = vmulq_n_f32(v63, v301.f32[0]);
    v303.i32[3] = 0;
    float32x4_t v268 = a6;
    a6[2] = v303;
    a6[3] = v310;
    uint64_t result = 4;
    float32x2_t v158 = i;
    goto LABEL_147;
  }
  if (a3)
  {
    *a5 = v314;
    if (v252)
    {
      float32x4_t v253 = &v317;
      float32x4_t v254 = &v319;
      do
      {
        int v255 = *v254++;
        *a3++ = v255;
        int v256 = *v253++;
        *v11++ = v256;
        --v252;
      }
      while (v252);
    }
  }
  return 5;
}